{"home.repos.pwc.inspect_result.ernie1_pi-nas.None.setup.create_version_file": [[19, 26], ["print", "os.path.join", "open", "f.write", "f.write"], "function", ["None"], ["", "def", "create_version_file", "(", ")", ":", "\n", "    ", "global", "version", ",", "cwd", "\n", "print", "(", "'-- Building version '", "+", "version", ")", "\n", "version_path", "=", "os", ".", "path", ".", "join", "(", "cwd", ",", "'encoding'", ",", "'version.py'", ")", "\n", "with", "open", "(", "version_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\"\"\"This is encoding version file.\"\"\"\\n'", ")", "\n", "f", ".", "write", "(", "\"__version__ = '{}'\\n\"", ".", "format", "(", "version", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.segmentation.test.Options.__init__": [[25, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch Segmentation'", ")", "\n", "# model and dataset ", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'encnet'", ",", "\n", "help", "=", "'model name (default: encnet)'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "'resnet50'", ",", "\n", "help", "=", "'backbone name (default: resnet50)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'ade20k'", ",", "\n", "help", "=", "'dataset name (default: pascal12)'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'dataloader threads'", ")", "\n", "parser", ".", "add_argument", "(", "'--base-size'", ",", "type", "=", "int", ",", "default", "=", "520", ",", "\n", "help", "=", "'base image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop-size'", ",", "type", "=", "int", ",", "default", "=", "480", ",", "\n", "help", "=", "'crop image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-split'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'dataset train split (default: train)'", ")", "\n", "# training hyper params", "\n", "parser", ".", "add_argument", "(", "'--aux'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Auxilary Loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--se-loss'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Semantic Encoding Loss SE-loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--se-weight'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'SE-loss weight (default: 0.2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                            training (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                            testing (default: same as batch size)'", ")", "\n", "# cuda, seed and logging", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "\n", "False", ",", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "# checking point", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--verify'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--model-zoo'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'evaluating on model zoo model'", ")", "\n", "# evaluation option", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'evaluating mIoU'", ")", "\n", "parser", ".", "add_argument", "(", "'--export'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--acc-bn'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Re-accumulate BN statistics'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-val'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'generate masks on val set'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-val'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'skip validation during training'", ")", "\n", "# test option", "\n", "parser", ".", "add_argument", "(", "'--test-folder'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'path to test image folder'", ")", "\n", "# the parser", "\n", "parser", ".", "add_argument", "(", "'--choice-indices'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'choice indices for alone_resnest50'", ")", "\n", "self", ".", "parser", "=", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.segmentation.test.Options.parse": [[86, 91], ["test.Options.parser.parse_args", "print", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "print", "(", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.segmentation.test.ReturnFirstClosure.__init__": [[193, 195], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.segmentation.test.ReturnFirstClosure.__len__": [[196, 198], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.segmentation.test.ReturnFirstClosure.__getitem__": [[199, 202], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "_data", "[", "idx", "]", "\n", "return", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.segmentation.test.test": [[92, 191], ["torchvision.Compose", "torch.utils.data.DataLoader", "print", "encoding.models.MultiEvalModule().cuda", "MultiEvalModule().cuda.eval", "encoding.SegmentationMetric", "tqdm.tqdm", "enumerate", "os.path.exists", "os.makedirs", "encoding.datasets.get_dataset", "encoding.models.get_model", "encoding.models.get_segmentation_model", "os.path.isfile", "print", "encoding.models.get_segmentation_model.load_state_dict", "encoding.datasets.get_dataset", "torch.utils.data.DataLoader", "print", "encoding.models.get_segmentation_model.cuda", "update_bn_stats", "torch.save", "print", "torchvision.ToTensor", "torchvision.Normalize", "encoding.datasets.get_dataset", "encoding.datasets.get_dataset", "torch.load", "os.path.isfile", "torch.load", "encoding.models.get_segmentation_model.load_state_dict", "print", "test.ReturnFirstClosure", "encoding.models.get_segmentation_model.state_dict", "encoding.models.MultiEvalModule", "zip", "RuntimeError", "torch.no_grad", "MultiEvalModule().cuda.parallel_forward", "utils.SegmentationMetric.update", "utils.SegmentationMetric.get", "tqdm.tqdm.set_description", "torch.no_grad", "MultiEvalModule().cuda.parallel_forward", "encoding.get_mask_pallete", "utils.get_mask_pallete.save", "encoding.datasets.get_dataset.make_pred", "os.path.join", "[].cpu().numpy", "os.path.splitext", "[].cpu", "torch.max"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_zoo.get_model", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.__init__.get_segmentation_model", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.contrastive_search_hook.update_bn_stats", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.MultiEvalModule.parallel_forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.MultiEvalModule.parallel_forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.pallete.get_mask_pallete", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapes.CitySegmentation.make_pred"], ["", "", "def", "test", "(", "args", ")", ":", "\n", "# output folder", "\n", "    ", "outdir", "=", "'outdir'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "# data transforms", "\n", "", "input_transform", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "ToTensor", "(", ")", ",", "\n", "transform", ".", "Normalize", "(", "[", ".485", ",", ".456", ",", ".406", "]", ",", "[", ".229", ",", ".224", ",", ".225", "]", ")", "]", ")", "\n", "# dataset", "\n", "if", "args", ".", "eval", ":", "\n", "        ", "testset", "=", "get_dataset", "(", "args", ".", "dataset", ",", "split", "=", "'val'", ",", "mode", "=", "'testval'", ",", "\n", "transform", "=", "input_transform", ")", "\n", "", "elif", "args", ".", "test_val", ":", "\n", "        ", "testset", "=", "get_dataset", "(", "args", ".", "dataset", ",", "split", "=", "'val'", ",", "mode", "=", "'test'", ",", "\n", "transform", "=", "input_transform", ")", "\n", "", "else", ":", "\n", "        ", "testset", "=", "get_dataset", "(", "args", ".", "dataset", ",", "split", "=", "'test'", ",", "mode", "=", "'test'", ",", "\n", "transform", "=", "input_transform", ")", "\n", "# dataloader", "\n", "", "loader_kwargs", "=", "{", "'num_workers'", ":", "args", ".", "workers", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "test_data", "=", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "drop_last", "=", "False", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "test_batchify_fn", ",", "**", "loader_kwargs", ")", "\n", "# model", "\n", "pretrained", "=", "args", ".", "resume", "is", "None", "and", "args", ".", "verify", "is", "None", "\n", "if", "args", ".", "model_zoo", "is", "not", "None", ":", "\n", "        ", "model", "=", "get_model", "(", "args", ".", "model_zoo", ",", "pretrained", "=", "pretrained", ")", "\n", "model", ".", "base_size", "=", "args", ".", "base_size", "\n", "model", ".", "crop_size", "=", "args", ".", "crop_size", "\n", "", "else", ":", "\n", "# my", "\n", "        ", "model_kwargs", "=", "{", "}", "\n", "if", "args", ".", "choice_indices", "is", "not", "None", ":", "\n", "            ", "assert", "'alone_resnest50'", "in", "args", ".", "backbone", "\n", "model_kwargs", "[", "'choice_indices'", "]", "=", "args", ".", "choice_indices", "\n", "#", "\n", "", "model", "=", "get_segmentation_model", "(", "args", ".", "model", ",", "dataset", "=", "args", ".", "dataset", ",", "\n", "backbone", "=", "args", ".", "backbone", ",", "aux", "=", "args", ".", "aux", ",", "\n", "se_loss", "=", "args", ".", "se_loss", ",", "\n", "norm_layer", "=", "torch", ".", "nn", ".", "BatchNorm2d", "if", "args", ".", "acc_bn", "else", "SyncBatchNorm", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "crop_size", "=", "args", ".", "crop_size", ",", "**", "model_kwargs", ")", "\n", "\n", "# resuming checkpoint", "\n", "", "if", "args", ".", "verify", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "verify", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "verify", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "verify", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "", "elif", "args", ".", "resume", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "# strict=False, so that it is compatible with old pytorch saved models", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "", "elif", "not", "pretrained", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"=> no checkpoint found\"", ")", "\n", "\n", "", "print", "(", "model", ")", "\n", "if", "args", ".", "acc_bn", ":", "\n", "        ", "from", "encoding", ".", "utils", ".", "precise_bn", "import", "update_bn_stats", "\n", "data_kwargs", "=", "{", "'transform'", ":", "input_transform", ",", "'base_size'", ":", "args", ".", "base_size", ",", "\n", "'crop_size'", ":", "args", ".", "crop_size", "}", "\n", "trainset", "=", "get_dataset", "(", "args", ".", "dataset", ",", "split", "=", "args", ".", "train_split", ",", "mode", "=", "'train'", ",", "**", "data_kwargs", ")", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "ReturnFirstClosure", "(", "trainset", ")", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "drop_last", "=", "True", ",", "shuffle", "=", "True", ",", "**", "loader_kwargs", ")", "\n", "print", "(", "'Reseting BN statistics'", ")", "\n", "#model.apply(reset_bn_statistics)", "\n", "model", ".", "cuda", "(", ")", "\n", "update_bn_stats", "(", "model", ",", "trainloader", ")", "\n", "\n", "", "if", "args", ".", "export", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "export", "+", "'.pth'", ")", "\n", "return", "\n", "\n", "", "scales", "=", "[", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", ",", "2.0", ",", "2.25", "]", "if", "args", ".", "dataset", "==", "'citys'", "else", "[", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", "]", "#, 2.0", "\n", "evaluator", "=", "MultiEvalModule", "(", "model", ",", "testset", ".", "num_class", ",", "scales", "=", "scales", ")", ".", "cuda", "(", ")", "\n", "evaluator", ".", "eval", "(", ")", "\n", "metric", "=", "utils", ".", "SegmentationMetric", "(", "testset", ".", "num_class", ")", "\n", "\n", "tbar", "=", "tqdm", "(", "test_data", ")", "\n", "for", "i", ",", "(", "image", ",", "dst", ")", "in", "enumerate", "(", "tbar", ")", ":", "\n", "        ", "if", "args", ".", "eval", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "predicts", "=", "evaluator", ".", "parallel_forward", "(", "image", ")", "\n", "metric", ".", "update", "(", "dst", ",", "predicts", ")", "\n", "pixAcc", ",", "mIoU", "=", "metric", ".", "get", "(", ")", "\n", "tbar", ".", "set_description", "(", "'pixAcc: %.4f, mIoU: %.4f'", "%", "(", "pixAcc", ",", "mIoU", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "evaluator", ".", "parallel_forward", "(", "image", ")", "\n", "predicts", "=", "[", "testset", ".", "make_pred", "(", "torch", ".", "max", "(", "output", ",", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "output", "in", "outputs", "]", "\n", "", "for", "predict", ",", "impath", "in", "zip", "(", "predicts", ",", "dst", ")", ":", "\n", "                ", "mask", "=", "utils", ".", "get_mask_pallete", "(", "predict", ",", "args", ".", "dataset", ")", "\n", "outname", "=", "os", ".", "path", ".", "splitext", "(", "impath", ")", "[", "0", "]", "+", "'.png'", "\n", "mask", ".", "save", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "outname", ")", ")", "\n", "\n", "", "", "", "if", "args", ".", "eval", ":", "\n", "        ", "print", "(", "'pixAcc: %.4f, mIoU: %.4f'", "%", "(", "pixAcc", ",", "mIoU", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.get_evaluator": [[64, 110], ["detectron2.evaluation.DatasetEvaluators", "os.path.join", "detectron2.data.MetadataCatalog.get", "evaluator_list.append", "evaluator_list.append", "evaluator_list.append", "detectron2.evaluation.CityscapesInstanceEvaluator", "detectron2.evaluation.CityscapesSemSegEvaluator", "detectron2.evaluation.PascalVOCDetectionEvaluator", "detectron2.evaluation.LVISEvaluator", "len", "NotImplementedError", "len", "detectron2.evaluation.SemSegEvaluator", "detectron2.evaluation.COCOEvaluator", "detectron2.evaluation.COCOPanopticEvaluator", "torch.cuda.device_count", "detectron2.get_rank", "torch.cuda.device_count", "detectron2.get_rank"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get"], ["def", "get_evaluator", "(", "cfg", ",", "dataset_name", ",", "output_folder", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create evaluator(s) for a given dataset.\n    This uses the special metadata \"evaluator_type\" associated with each builtin dataset.\n    For your own dataset, you can simply create an evaluator manually in your\n    script and do not have to worry about the hacky if-else logic here.\n    \"\"\"", "\n", "if", "output_folder", "is", "None", ":", "\n", "        ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ")", "\n", "", "evaluator_list", "=", "[", "]", "\n", "evaluator_type", "=", "MetadataCatalog", ".", "get", "(", "dataset_name", ")", ".", "evaluator_type", "\n", "if", "evaluator_type", "in", "[", "\"sem_seg\"", ",", "\"coco_panoptic_seg\"", "]", ":", "\n", "        ", "evaluator_list", ".", "append", "(", "\n", "SemSegEvaluator", "(", "\n", "dataset_name", ",", "\n", "distributed", "=", "True", ",", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "SEM_SEG_HEAD", ".", "NUM_CLASSES", ",", "\n", "ignore_label", "=", "cfg", ".", "MODEL", ".", "SEM_SEG_HEAD", ".", "IGNORE_VALUE", ",", "\n", "output_dir", "=", "output_folder", ",", "\n", ")", "\n", ")", "\n", "", "if", "evaluator_type", "in", "[", "\"coco\"", ",", "\"coco_panoptic_seg\"", "]", ":", "\n", "        ", "evaluator_list", ".", "append", "(", "COCOEvaluator", "(", "dataset_name", ",", "cfg", ",", "True", ",", "output_folder", ")", ")", "\n", "", "if", "evaluator_type", "==", "\"coco_panoptic_seg\"", ":", "\n", "        ", "evaluator_list", ".", "append", "(", "COCOPanopticEvaluator", "(", "dataset_name", ",", "output_folder", ")", ")", "\n", "", "if", "evaluator_type", "==", "\"cityscapes_instance\"", ":", "\n", "        ", "assert", "(", "\n", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "comm", ".", "get_rank", "(", ")", "\n", ")", ",", "\"CityscapesEvaluator currently do not work with multiple machines.\"", "\n", "return", "CityscapesInstanceEvaluator", "(", "dataset_name", ")", "\n", "", "if", "evaluator_type", "==", "\"cityscapes_sem_seg\"", ":", "\n", "        ", "assert", "(", "\n", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "comm", ".", "get_rank", "(", ")", "\n", ")", ",", "\"CityscapesEvaluator currently do not work with multiple machines.\"", "\n", "return", "CityscapesSemSegEvaluator", "(", "dataset_name", ")", "\n", "", "if", "evaluator_type", "==", "\"pascal_voc\"", ":", "\n", "        ", "return", "PascalVOCDetectionEvaluator", "(", "dataset_name", ")", "\n", "", "if", "evaluator_type", "==", "\"lvis\"", ":", "\n", "        ", "return", "LVISEvaluator", "(", "dataset_name", ",", "cfg", ",", "True", ",", "output_folder", ")", "\n", "", "if", "len", "(", "evaluator_list", ")", "==", "0", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"no Evaluator for the dataset {} with the type {}\"", ".", "format", "(", "dataset_name", ",", "evaluator_type", ")", "\n", ")", "\n", "", "if", "len", "(", "evaluator_list", ")", "==", "1", ":", "\n", "        ", "return", "evaluator_list", "[", "0", "]", "\n", "", "return", "DatasetEvaluators", "(", "evaluator_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.do_test": [[112, 127], ["collections.OrderedDict", "detectron2.data.build_detection_test_loader", "plain_train_net.get_evaluator", "detectron2.evaluation.inference_on_dataset", "detectron2.is_main_process", "len", "os.path.join", "logger.info", "detectron2.evaluation.print_csv_format", "list", "collections.OrderedDict.values"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.get_evaluator"], ["", "def", "do_test", "(", "cfg", ",", "model", ")", ":", "\n", "    ", "results", "=", "OrderedDict", "(", ")", "\n", "for", "dataset_name", "in", "cfg", ".", "DATASETS", ".", "TEST", ":", "\n", "        ", "data_loader", "=", "build_detection_test_loader", "(", "cfg", ",", "dataset_name", ")", "\n", "evaluator", "=", "get_evaluator", "(", "\n", "cfg", ",", "dataset_name", ",", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ")", "\n", ")", "\n", "results_i", "=", "inference_on_dataset", "(", "model", ",", "data_loader", ",", "evaluator", ")", "\n", "results", "[", "dataset_name", "]", "=", "results_i", "\n", "if", "comm", ".", "is_main_process", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Evaluation results for {} in csv format:\"", ".", "format", "(", "dataset_name", ")", ")", "\n", "print_csv_format", "(", "results_i", ")", "\n", "", "", "if", "len", "(", "results", ")", "==", "1", ":", "\n", "        ", "results", "=", "list", "(", "results", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.do_train": [[129, 196], ["model.train", "detectron2.solver.build_optimizer", "detectron2.solver.build_lr_scheduler", "detectron2.checkpoint.DetectionCheckpointer", "detectron2.solver.build_lr_scheduler.step", "detectron2.checkpoint.PeriodicCheckpointer", "detectron2.data.build_detection_train_loader", "logger.info", "detectron2.checkpoint.DetectionCheckpointer.resume_or_load().get", "detectron2.is_main_process", "detectron2.utils.events.EventStorage", "zip", "detectron2.utils.events.CommonMetricPrinter", "detectron2.utils.events.JSONWriter", "detectron2.utils.events.TensorboardXWriter", "range", "storage.step", "model", "sum", "torch.isfinite().all", "sum", "detectron2.is_main_process", "detectron2.solver.build_optimizer.zero_grad", "sum.backward", "detectron2.solver.build_optimizer.step", "storage.put_scalar", "detectron2.solver.build_lr_scheduler.step", "detectron2.checkpoint.PeriodicCheckpointer.step", "detectron2.checkpoint.DetectionCheckpointer.resume_or_load", "os.path.join", "model.values", "v.item", "storage.put_scalars", "plain_train_net.do_test", "detectron2.synchronize", "torch.isfinite", "detectron2.reduce_dict().items", "writer.write", "loss_dict_reduced.values", "detectron2.reduce_dict"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.build_optimizer", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardMishJitAutoFn.backward", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.do_test"], ["", "def", "do_train", "(", "cfg", ",", "model", ",", "resume", "=", "False", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "build_optimizer", "(", "cfg", ",", "model", ")", "\n", "scheduler", "=", "build_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "\n", "checkpointer", "=", "DetectionCheckpointer", "(", "\n", "model", ",", "cfg", ".", "OUTPUT_DIR", ",", "optimizer", "=", "optimizer", ",", "scheduler", "=", "scheduler", "\n", ")", "\n", "start_iter", "=", "(", "\n", "checkpointer", ".", "resume_or_load", "(", "cfg", ".", "MODEL", ".", "WEIGHTS", ",", "resume", "=", "resume", ")", ".", "get", "(", "\"iteration\"", ",", "-", "1", ")", "+", "1", "\n", ")", "\n", "#", "\n", "scheduler", ".", "step", "(", "start_iter", ")", "\n", "#", "\n", "max_iter", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "\n", "\n", "periodic_checkpointer", "=", "PeriodicCheckpointer", "(", "\n", "checkpointer", ",", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", ",", "max_iter", "=", "max_iter", "\n", ")", "\n", "\n", "writers", "=", "(", "\n", "[", "\n", "CommonMetricPrinter", "(", "max_iter", ")", ",", "\n", "JSONWriter", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"metrics.json\"", ")", ")", ",", "\n", "TensorboardXWriter", "(", "cfg", ".", "OUTPUT_DIR", ")", ",", "\n", "]", "\n", "if", "comm", ".", "is_main_process", "(", ")", "\n", "else", "[", "]", "\n", ")", "\n", "\n", "# compared to \"train_net.py\", we do not support accurate timing and", "\n", "# precise BN here, because they are not trivial to implement in a small training loop", "\n", "data_loader", "=", "build_detection_train_loader", "(", "cfg", ")", "\n", "logger", ".", "info", "(", "\"Starting training from iteration {}\"", ".", "format", "(", "start_iter", ")", ")", "\n", "with", "EventStorage", "(", "start_iter", ")", "as", "storage", ":", "\n", "        ", "for", "data", ",", "iteration", "in", "zip", "(", "data_loader", ",", "range", "(", "start_iter", ",", "max_iter", ")", ")", ":", "\n", "            ", "iteration", "=", "iteration", "+", "1", "\n", "storage", ".", "step", "(", ")", "\n", "\n", "loss_dict", "=", "model", "(", "data", ")", "\n", "losses", "=", "sum", "(", "loss_dict", ".", "values", "(", ")", ")", "\n", "assert", "torch", ".", "isfinite", "(", "losses", ")", ".", "all", "(", ")", ",", "loss_dict", "\n", "\n", "loss_dict_reduced", "=", "{", "k", ":", "v", ".", "item", "(", ")", "for", "k", ",", "v", "in", "comm", ".", "reduce_dict", "(", "loss_dict", ")", ".", "items", "(", ")", "}", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "if", "comm", ".", "is_main_process", "(", ")", ":", "\n", "                ", "storage", ".", "put_scalars", "(", "total_loss", "=", "losses_reduced", ",", "**", "loss_dict_reduced", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "storage", ".", "put_scalar", "(", "\"lr\"", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "smoothing_hint", "=", "False", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "(", "\n", "cfg", ".", "TEST", ".", "EVAL_PERIOD", ">", "0", "\n", "and", "iteration", "%", "cfg", ".", "TEST", ".", "EVAL_PERIOD", "==", "0", "\n", "and", "iteration", "!=", "max_iter", "\n", ")", ":", "\n", "                ", "do_test", "(", "cfg", ",", "model", ")", "\n", "# Compared to \"train_net.py\", the test results are not dumped to EventStorage", "\n", "comm", ".", "synchronize", "(", ")", "\n", "\n", "", "if", "iteration", "-", "start_iter", ">", "5", "and", "(", "iteration", "%", "20", "==", "0", "or", "iteration", "==", "max_iter", ")", ":", "\n", "                ", "for", "writer", "in", "writers", ":", "\n", "                    ", "writer", ".", "write", "(", ")", "\n", "", "", "periodic_checkpointer", ".", "step", "(", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.setup": [[198, 213], ["detectron2.config.get_cfg", "my_model.add_my_config", "detectron2.config.get_cfg.merge_from_file", "detectron2.config.get_cfg.merge_from_list", "detectron2.config.get_cfg.freeze", "detectron2.engine.default_setup"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.config.add_my_config", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.ResNet.freeze"], ["", "", "", "def", "setup", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Create configs and perform basic setups.\n    \"\"\"", "\n", "cfg", "=", "get_cfg", "(", ")", "\n", "#", "\n", "add_my_config", "(", "cfg", ")", "\n", "#", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "default_setup", "(", "\n", "cfg", ",", "args", "\n", ")", "# if you don't like any of the default setup, write your own setup code", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.main": [[215, 234], ["plain_train_net.setup", "detectron2.modeling.build_model", "logger.info", "plain_train_net.do_train", "plain_train_net.do_test", "detectron2.checkpoint.DetectionCheckpointer().resume_or_load", "plain_train_net.do_test", "detectron2.get_world_size", "torch.nn.parallel.DistributedDataParallel", "detectron2.checkpoint.DetectionCheckpointer", "detectron2.get_local_rank"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.setup", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_model", "home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.do_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.do_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.detection.plain_train_net.do_test"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "setup", "(", "args", ")", "\n", "\n", "model", "=", "build_model", "(", "cfg", ")", "\n", "logger", ".", "info", "(", "\"Model:\\n{}\"", ".", "format", "(", "model", ")", ")", "\n", "if", "args", ".", "eval_only", ":", "\n", "        ", "DetectionCheckpointer", "(", "model", ",", "save_dir", "=", "cfg", ".", "OUTPUT_DIR", ")", ".", "resume_or_load", "(", "\n", "cfg", ".", "MODEL", ".", "WEIGHTS", ",", "resume", "=", "args", ".", "resume", "\n", ")", "\n", "return", "do_test", "(", "cfg", ",", "model", ")", "\n", "\n", "", "distributed", "=", "comm", ".", "get_world_size", "(", ")", ">", "1", "\n", "if", "distributed", ":", "\n", "        ", "model", "=", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "comm", ".", "get_local_rank", "(", ")", "]", ",", "broadcast_buffers", "=", "False", "\n", ")", "\n", "\n", "", "do_train", "(", "cfg", ",", "model", ",", "resume", "=", "args", ".", "resume", ")", "\n", "return", "do_test", "(", "cfg", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.config.add_my_config": [[1, 13], ["None"], "function", ["None"], ["def", "add_my_config", "(", "cfg", ")", ":", "\n", "    ", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "MODEL", "=", "None", "\n", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "PRETRAINED", "=", "None", "\n", "# Apply deep stem ", "\n", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEEP_STEM", "=", "False", "\n", "# Apply avg after conv2 in the BottleBlock", "\n", "# When AVD=True, the STRIDE_IN_1X1 should be False", "\n", "cfg", ".", "MODEL", ".", "RESNETS", ".", "AVD", "=", "False", "\n", "# Apply avg_down to the downsampling layer for residual path ", "\n", "cfg", ".", "MODEL", ".", "RESNETS", ".", "AVG_DOWN", "=", "False", "\n", "# choice_indices in ResNeSt", "\n", "cfg", ".", "MODEL", ".", "RESNETS", ".", "CHOICE_INDICES", "=", "None", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.BasicBlock.__init__": [[39, 85], ["detectron2.layers.CNNBlockBase.__init__", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "fvcore.c2_msra_fill", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "*", ",", "stride", "=", "1", ",", "norm", "=", "\"BN\"", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_channels (int): Number of input channels.\n            out_channels (int): Number of output channels.\n            stride (int): Stride for the first conv.\n            norm (str or callable): normalization for all conv layers.\n                See :func:`layers.get_norm` for supported format.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "stride", ")", "\n", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n", "", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "\n", "for", "layer", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "shortcut", "]", ":", "\n", "            ", "if", "layer", "is", "not", "None", ":", "# shortcut can be None", "\n", "                ", "weight_init", ".", "c2_msra_fill", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.BasicBlock.forward": [[86, 99], ["resnest.BasicBlock.conv1", "torch.relu_", "torch.relu_", "resnest.BasicBlock.conv2", "torch.relu_", "torch.relu_", "resnest.BasicBlock.shortcut"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "\n", "", "out", "+=", "shortcut", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.BottleneckBlock.__init__": [[108, 225], ["detectron2.layers.CNNBlockBase.__init__", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "int", "SplAtConv2d", "detectron2.layers.Conv2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "fvcore.c2_msra_fill", "fvcore.c2_msra_fill", "detectron2.layers.get_norm", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "*", ",", "\n", "bottleneck_channels", ",", "\n", "stride", "=", "1", ",", "\n", "num_groups", "=", "1", ",", "\n", "norm", "=", "\"BN\"", ",", "\n", "stride_in_1x1", "=", "False", ",", "\n", "dilation", "=", "1", ",", "\n", "avd", "=", "False", ",", "\n", "avg_down", "=", "False", ",", "\n", "radix", "=", "2", ",", "\n", "bottleneck_width", "=", "64", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            bottleneck_channels (int): number of output channels for the 3x3\n                \"bottleneck\" conv layers.\n            num_groups (int): number of groups for the 3x3 conv layer.\n            norm (str or callable): normalization for all conv layers.\n                See :func:`layers.get_norm` for supported format.\n            stride_in_1x1 (bool): when stride>1, whether to put stride in the\n                first 1x1 convolution or the bottleneck 3x3 convolution.\n            dilation (int): the dilation rate of the 3x3 conv layer.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "stride", ")", "\n", "\n", "self", ".", "avd", "=", "avd", "and", "(", "stride", ">", "1", ")", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "radix", "=", "radix", "\n", "\n", "cardinality", "=", "num_groups", "\n", "group_width", "=", "int", "(", "bottleneck_channels", "*", "(", "bottleneck_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "if", "self", ".", "avg_down", ":", "\n", "                ", "self", ".", "shortcut_avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", "\n", "self", ".", "shortcut", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n", "# The original MSRA ResNet models have stride in the first 1x1 conv", "\n", "# The subsequent fb.torch.resnet and Caffe2 ResNe[X]t implementations have", "\n", "# stride in the 3x3 conv", "\n", "", "stride_1x1", ",", "stride_3x3", "=", "(", "stride", ",", "1", ")", "if", "stride_in_1x1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "group_width", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride_1x1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "group_width", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "radix", ">=", "1", ":", "\n", "            ", "from", ".", "splat", "import", "SplAtConv2d", "\n", "self", ".", "conv2", "=", "SplAtConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", "if", "self", ".", "avd", "else", "stride_3x3", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "radix", "=", "self", ".", "radix", ",", "\n", "norm", "=", "norm", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "Conv2d", "(", "\n", "group_width", ",", "\n", "group_width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", "if", "self", ".", "avd", "else", "stride_3x3", ",", "\n", "padding", "=", "1", "*", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_groups", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "group_width", ")", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "conv3", "=", "Conv2d", "(", "\n", "group_width", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "\n", "\n", "if", "self", ".", "radix", ">=", "1", ":", "\n", "            ", "for", "layer", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv3", ",", "self", ".", "shortcut", "]", ":", "\n", "                ", "if", "layer", "is", "not", "None", ":", "# shortcut can be None", "\n", "                    ", "weight_init", ".", "c2_msra_fill", "(", "layer", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "layer", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "shortcut", "]", ":", "\n", "                ", "if", "layer", "is", "not", "None", ":", "# shortcut can be None", "\n", "                    ", "weight_init", ".", "c2_msra_fill", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.BottleneckBlock.forward": [[238, 263], ["resnest.BottleneckBlock.conv1", "torch.relu_", "torch.relu_", "resnest.BottleneckBlock.conv3", "torch.relu_", "torch.relu_", "resnest.BottleneckBlock.conv2", "resnest.BottleneckBlock.conv2", "torch.relu_", "torch.relu_", "resnest.BottleneckBlock.avd_layer", "resnest.BottleneckBlock.shortcut", "resnest.BottleneckBlock.shortcut_avgpool"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "if", "self", ".", "radix", ">=", "1", ":", "\n", "            ", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "avg_down", ":", "\n", "                ", "x", "=", "self", ".", "shortcut_avgpool", "(", "x", ")", "\n", "", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "\n", "", "out", "+=", "shortcut", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.DeformBottleneckBlock.__init__": [[271, 400], ["detectron2.layers.CNNBlockBase.__init__", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "int", "SplAtConv2d_dcn", "deform_conv_op", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "fvcore.c2_msra_fill", "fvcore.c2_msra_fill", "detectron2.layers.get_norm", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "*", ",", "\n", "bottleneck_channels", ",", "\n", "stride", "=", "1", ",", "\n", "num_groups", "=", "1", ",", "\n", "norm", "=", "\"BN\"", ",", "\n", "stride_in_1x1", "=", "False", ",", "\n", "dilation", "=", "1", ",", "\n", "deform_modulated", "=", "False", ",", "\n", "deform_num_groups", "=", "1", ",", "\n", "avd", "=", "False", ",", "\n", "avg_down", "=", "False", ",", "\n", "radix", "=", "2", ",", "\n", "bottleneck_width", "=", "64", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "stride", ")", "\n", "self", ".", "deform_modulated", "=", "deform_modulated", "\n", "self", ".", "avd", "=", "avd", "and", "(", "stride", ">", "1", ")", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "radix", "=", "radix", "\n", "\n", "cardinality", "=", "num_groups", "\n", "group_width", "=", "int", "(", "bottleneck_channels", "*", "(", "bottleneck_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "if", "self", ".", "avg_down", ":", "\n", "                ", "self", ".", "shortcut_avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", "\n", "self", ".", "shortcut", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n", "", "stride_1x1", ",", "stride_3x3", "=", "(", "stride", ",", "1", ")", "if", "stride_in_1x1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "group_width", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride_1x1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "group_width", ")", ",", "\n", ")", "\n", "\n", "if", "deform_modulated", ":", "\n", "            ", "deform_conv_op", "=", "ModulatedDeformConv", "\n", "# offset channels are 2 or 3 (if with modulated) * kernel_size * kernel_size", "\n", "offset_channels", "=", "27", "\n", "", "else", ":", "\n", "            ", "deform_conv_op", "=", "DeformConv", "\n", "offset_channels", "=", "18", "\n", "\n", "", "self", ".", "conv2_offset", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "\n", "offset_channels", "*", "deform_num_groups", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", "if", "self", ".", "avd", "else", "stride_3x3", ",", "\n", "padding", "=", "1", "*", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "deform_num_groups", ",", "\n", ")", "\n", "if", "self", ".", "radix", ">=", "1", ":", "\n", "            ", "from", ".", "splat", "import", "SplAtConv2d_dcn", "\n", "self", ".", "conv2", "=", "SplAtConv2d_dcn", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", "if", "self", ".", "avd", "else", "stride_3x3", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "radix", "=", "self", ".", "radix", ",", "\n", "norm", "=", "norm", ",", "\n", "deform_conv_op", "=", "deform_conv_op", ",", "\n", "deformable_groups", "=", "deform_num_groups", ",", "\n", "deform_modulated", "=", "deform_modulated", ",", "\n", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "deform_conv_op", "(", "\n", "bottleneck_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", "if", "self", ".", "avd", "else", "stride_3x3", ",", "\n", "padding", "=", "1", "*", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_groups", ",", "\n", "dilation", "=", "dilation", ",", "\n", "deformable_groups", "=", "deform_num_groups", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "bottleneck_channels", ")", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "conv3", "=", "Conv2d", "(", "\n", "group_width", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "radix", ">=", "1", ":", "\n", "            ", "for", "layer", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv3", ",", "self", ".", "shortcut", "]", ":", "\n", "                ", "if", "layer", "is", "not", "None", ":", "# shortcut can be None", "\n", "                    ", "weight_init", ".", "c2_msra_fill", "(", "layer", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "layer", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "shortcut", "]", ":", "\n", "                ", "if", "layer", "is", "not", "None", ":", "# shortcut can be None", "\n", "                    ", "weight_init", ".", "c2_msra_fill", "(", "layer", ")", "\n", "\n", "", "", "", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv2_offset", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv2_offset", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.DeformBottleneckBlock.forward": [[401, 435], ["resnest.DeformBottleneckBlock.conv1", "torch.relu_", "torch.relu_", "resnest.DeformBottleneckBlock.conv3", "torch.relu_", "torch.relu_", "resnest.DeformBottleneckBlock.conv2_offset", "resnest.DeformBottleneckBlock.conv2", "torch.relu_", "torch.relu_", "resnest.DeformBottleneckBlock.avd_layer", "resnest.DeformBottleneckBlock.shortcut", "resnest.DeformBottleneckBlock.conv2_offset", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.sigmoid.sigmoid.sigmoid", "resnest.DeformBottleneckBlock.conv2", "resnest.DeformBottleneckBlock.conv2_offset", "resnest.DeformBottleneckBlock.conv2", "resnest.DeformBottleneckBlock.shortcut_avgpool"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "if", "self", ".", "radix", ">=", "1", ":", "\n", "            ", "offset", "=", "self", ".", "conv2_offset", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "offset", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "deform_modulated", ":", "\n", "                ", "offset_mask", "=", "self", ".", "conv2_offset", "(", "out", ")", "\n", "offset_x", ",", "offset_y", ",", "mask", "=", "torch", ".", "chunk", "(", "offset_mask", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "offset_x", ",", "offset_y", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "mask", ".", "sigmoid", "(", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "offset", ",", "mask", ")", "\n", "", "else", ":", "\n", "                ", "offset", "=", "self", ".", "conv2_offset", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "offset", ")", "\n", "", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "avg_down", ":", "\n", "                ", "x", "=", "self", ".", "shortcut_avgpool", "(", "x", ")", "\n", "", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "\n", "", "out", "+=", "shortcut", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.BasicStem.__init__": [[442, 474], ["detectron2.layers.CNNBlockBase.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "detectron2.layers.Conv2d", "fvcore.c2_msra_fill", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "fvcore.c2_msra_fill", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm"], ["def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "norm", "=", "\"BN\"", ",", "\n", "deep_stem", "=", "False", ",", "stem_width", "=", "32", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            norm (str or callable): norm after the first conv layer.\n                See :func:`layers.get_norm` for supported format.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "4", ")", "\n", "self", ".", "deep_stem", "=", "deep_stem", "\n", "\n", "if", "self", ".", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Conv2d", "(", "in_channels", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "norm", "=", "get_norm", "(", "norm", ",", "stem_width", ")", ")", ",", "\n", "Conv2d", "(", "stem_width", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "norm", "=", "get_norm", "(", "norm", ",", "stem_width", ")", ")", ",", "\n", "Conv2d", "(", "stem_width", ",", "stem_width", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "norm", "=", "get_norm", "(", "norm", ",", "stem_width", "*", "2", ")", ")", "]", ")", "\n", "for", "layer", "in", "self", ".", "conv1", ":", "\n", "                ", "if", "layer", "is", "not", "None", ":", "\n", "                    ", "weight_init", ".", "c2_msra_fill", "(", "layer", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "weight_init", ".", "c2_msra_fill", "(", "self", ".", "conv1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.BasicStem.forward": [[475, 488], ["torch.max_pool2d", "torch.max_pool2d", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "resnest.BasicStem.conv1", "torch.relu_", "torch.relu_"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "deep_stem", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "[", "0", "]", "(", "x", ")", "\n", "x", "=", "F", ".", "relu_", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "[", "1", "]", "(", "x", ")", "\n", "x", "=", "F", ".", "relu_", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "[", "2", "]", "(", "x", ")", "\n", "x", "=", "F", ".", "relu_", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu_", "(", "x", ")", "\n", "", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.ResNet.__init__": [[495, 549], ["detectron2.modeling.backbone.backbone.Backbone.__init__", "enumerate", "len", "len", "torch.nn.Sequential", "torch.nn.Sequential", "resnest.ResNet.add_module", "resnest.ResNet.stages_and_names.append", "int", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "len", "isinstance", "str", "resnest.ResNet.named_children", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "stem", ",", "stages", ",", "num_classes", "=", "None", ",", "out_features", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            stem (nn.Module): a stem module\n            stages (list[list[CNNBlockBase]]): several (typically 4) stages,\n                each contains multiple :class:`CNNBlockBase`.\n            num_classes (None or int): if None, will not perform classification.\n                Otherwise, will create a linear layer.\n            out_features (list[str]): name of the layers whose outputs should\n                be returned in forward. Can be anything in \"stem\", \"linear\", or \"res2\" ...\n                If None, will return the output of the last layer.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stem", "=", "stem", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "current_stride", "=", "self", ".", "stem", ".", "stride", "\n", "self", ".", "_out_feature_strides", "=", "{", "\"stem\"", ":", "current_stride", "}", "\n", "self", ".", "_out_feature_channels", "=", "{", "\"stem\"", ":", "self", ".", "stem", ".", "out_channels", "}", "\n", "\n", "self", ".", "stages_and_names", "=", "[", "]", "\n", "for", "i", ",", "blocks", "in", "enumerate", "(", "stages", ")", ":", "\n", "            ", "assert", "len", "(", "blocks", ")", ">", "0", ",", "len", "(", "blocks", ")", "\n", "for", "block", "in", "blocks", ":", "\n", "                ", "assert", "isinstance", "(", "block", ",", "CNNBlockBase", ")", ",", "block", "\n", "\n", "", "name", "=", "\"res\"", "+", "str", "(", "i", "+", "2", ")", "\n", "stage", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "self", ".", "add_module", "(", "name", ",", "stage", ")", "\n", "self", ".", "stages_and_names", ".", "append", "(", "(", "stage", ",", "name", ")", ")", "\n", "\n", "self", ".", "_out_feature_strides", "[", "name", "]", "=", "current_stride", "=", "int", "(", "\n", "current_stride", "*", "np", ".", "prod", "(", "[", "k", ".", "stride", "for", "k", "in", "blocks", "]", ")", "\n", ")", "\n", "self", ".", "_out_feature_channels", "[", "name", "]", "=", "curr_channels", "=", "blocks", "[", "-", "1", "]", ".", "out_channels", "\n", "\n", "", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "curr_channels", ",", "num_classes", ")", "\n", "\n", "# Sec 5.1 in \"Accurate, Large Minibatch SGD: Training ImageNet in 1 Hour\":", "\n", "# \"The 1000-way fully-connected layer is initialized by", "\n", "# drawing weights from a zero-mean Gaussian with standard deviation of 0.01.\"", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "linear", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "name", "=", "\"linear\"", "\n", "\n", "", "if", "out_features", "is", "None", ":", "\n", "            ", "out_features", "=", "[", "name", "]", "\n", "", "self", ".", "_out_features", "=", "out_features", "\n", "assert", "len", "(", "self", ".", "_out_features", ")", "\n", "children", "=", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "named_children", "(", ")", "]", "\n", "for", "out_feature", "in", "self", ".", "_out_features", ":", "\n", "            ", "assert", "out_feature", "in", "children", ",", "\"Available children: {}\"", ".", "format", "(", "\", \"", ".", "join", "(", "children", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.ResNet.forward": [[550, 574], ["resnest.ResNet.stem", "resnest.ResNet.dim", "stage", "resnest.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnest.ResNet.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: Tensor of shape (N,C,H,W). H, W must be a multiple of ``self.size_divisibility``.\n\n        Returns:\n            dict[str->Tensor]: names and the corresponding features\n        \"\"\"", "\n", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "f\"ResNet takes an input of shape (N, C, H, W). Got {x.shape} instead!\"", "\n", "outputs", "=", "{", "}", "\n", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "if", "\"stem\"", "in", "self", ".", "_out_features", ":", "\n", "            ", "outputs", "[", "\"stem\"", "]", "=", "x", "\n", "", "for", "stage", ",", "name", "in", "self", ".", "stages_and_names", ":", "\n", "            ", "x", "=", "stage", "(", "x", ")", "\n", "if", "name", "in", "self", ".", "_out_features", ":", "\n", "                ", "outputs", "[", "name", "]", "=", "x", "\n", "", "", "if", "self", ".", "num_classes", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "\"linear\"", "in", "self", ".", "_out_features", ":", "\n", "                ", "outputs", "[", "\"linear\"", "]", "=", "x", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.ResNet.output_shape": [[575, 581], ["detectron2.layers.ShapeSpec"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "name", ":", "ShapeSpec", "(", "\n", "channels", "=", "self", ".", "_out_feature_channels", "[", "name", "]", ",", "stride", "=", "self", ".", "_out_feature_strides", "[", "name", "]", "\n", ")", "\n", "for", "name", "in", "self", ".", "_out_features", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.ResNet.freeze": [[583, 606], ["enumerate", "resnest.ResNet.stem.freeze", "stage.children", "block.freeze"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.ResNet.freeze", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.ResNet.freeze"], ["", "def", "freeze", "(", "self", ",", "freeze_at", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Freeze the first several stages of the ResNet. Commonly used in\n        fine-tuning.\n\n        Layers that produce the same feature map spatial size are defined as one\n        \"stage\" by :paper:`FPN`.\n\n        Args:\n            freeze_at (int): number of stages to freeze.\n                `1` means freezing the stem. `2` means freezing the stem and\n                one residual stage, etc.\n\n        Returns:\n            nn.Module: this ResNet itself\n        \"\"\"", "\n", "if", "freeze_at", ">=", "1", ":", "\n", "            ", "self", ".", "stem", ".", "freeze", "(", ")", "\n", "", "for", "idx", ",", "(", "stage", ",", "_", ")", "in", "enumerate", "(", "self", ".", "stages_and_names", ",", "start", "=", "2", ")", ":", "\n", "            ", "if", "freeze_at", ">=", "idx", ":", "\n", "                ", "for", "block", "in", "stage", ".", "children", "(", ")", ":", "\n", "                    ", "block", ".", "freeze", "(", ")", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.ResNet.make_stage": [[607, 673], ["range", "logging.getLogger", "logging.getLogger.warning", "kwargs.items", "blocks.append", "k.endswith", "block_class", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "make_stage", "(", "\n", "block_class", ",", "num_blocks", ",", "first_stride", "=", "None", ",", "*", ",", "in_channels", ",", "out_channels", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Create a list of blocks of the same type that forms one ResNet stage.\n\n        Args:\n            block_class (type): a subclass of CNNBlockBase that's used to create all blocks in this\n                stage. A module of this type must not change spatial resolution of inputs unless its\n                stride != 1.\n            num_blocks (int): number of blocks in this stage\n            first_stride (int): deprecated\n            in_channels (int): input channels of the entire stage.\n            out_channels (int): output channels of **every block** in the stage.\n            kwargs: other arguments passed to the constructor of\n                `block_class`. If the argument name is \"xx_per_block\", the\n                argument is a list of values to be passed to each block in the\n                stage. Otherwise, the same argument is passed to every block\n                in the stage.\n\n        Returns:\n            list[nn.Module]: a list of block module.\n\n        Examples:\n        ::\n            stages = ResNet.make_stage(\n                BottleneckBlock, 3, in_channels=16, out_channels=64,\n                bottleneck_channels=16, num_groups=1,\n                stride_per_block=[2, 1, 1],\n                dilations_per_block=[1, 1, 2]\n            )\n\n        Usually, layers that produce the same feature map spatial size are defined as one\n        \"stage\" (in :paper:`FPN`). Under such definition, ``stride_per_block[1:]`` should\n        all be 1.\n        \"\"\"", "\n", "if", "first_stride", "is", "not", "None", ":", "\n", "            ", "assert", "\"stride\"", "not", "in", "kwargs", "and", "\"stride_per_block\"", "not", "in", "kwargs", "\n", "kwargs", "[", "\"stride_per_block\"", "]", "=", "[", "first_stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "warning", "(", "\n", "\"ResNet.make_stage(first_stride=) is deprecated!  \"", "\n", "\"Use 'stride_per_block' or 'stride' instead.\"", "\n", ")", "\n", "\n", "", "blocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "curr_kwargs", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", ".", "endswith", "(", "\"_per_block\"", ")", ":", "\n", "                    ", "assert", "len", "(", "v", ")", "==", "num_blocks", ",", "(", "\n", "f\"Argument '{k}' of make_stage should have the \"", "\n", "f\"same length as num_blocks={num_blocks}.\"", "\n", ")", "\n", "newk", "=", "k", "[", ":", "-", "len", "(", "\"_per_block\"", ")", "]", "\n", "assert", "newk", "not", "in", "kwargs", ",", "f\"Cannot call make_stage with both {k} and {newk}!\"", "\n", "curr_kwargs", "[", "newk", "]", "=", "v", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "curr_kwargs", "[", "k", "]", "=", "v", "\n", "\n", "", "", "blocks", ".", "append", "(", "\n", "block_class", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "**", "curr_kwargs", ")", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.make_stage": [[681, 686], ["resnest.ResNet.make_stage"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.make_stage"], ["def", "make_stage", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Deprecated alias for backward compatibiltiy.\n    \"\"\"", "\n", "return", "ResNet", ".", "make_stage", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.build_resnest_backbone": [[688, 807], ["detectron2.modeling.backbone.BACKBONE_REGISTRY.register", "resnest.BasicStem", "max", "enumerate", "resnest.ResNet.freeze", "dict", "dict", "dict", "dict", "range", "sum", "resnest.ResNet.make_stage", "stages.append", "any", "resnest.ResNet", "range"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.ResNet.freeze", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.make_stage"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "build_resnest_backbone", "(", "cfg", ",", "input_shape", ")", ":", "\n", "    ", "\"\"\"\n    Create a ResNet instance from config.\n\n    Returns:\n        ResNet: a :class:`ResNet` instance.\n    \"\"\"", "\n", "\n", "depth", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEPTH", "\n", "stem_width", "=", "{", "50", ":", "32", ",", "101", ":", "64", ",", "152", ":", "64", ",", "200", ":", "64", ",", "269", ":", "64", "}", "[", "depth", "]", "\n", "deep_stem", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEEP_STEM", "\n", "\n", "# need registration of new blocks/stems?", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NORM", "\n", "stem", "=", "BasicStem", "(", "\n", "in_channels", "=", "input_shape", ".", "channels", ",", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", ",", "\n", "norm", "=", "norm", ",", "\n", "deep_stem", "=", "deep_stem", ",", "\n", "stem_width", "=", "stem_width", ",", "\n", ")", "\n", "\n", "# fmt: off", "\n", "freeze_at", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "FREEZE_AT", "\n", "out_features", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "OUT_FEATURES", "\n", "depth", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEPTH", "\n", "num_groups", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NUM_GROUPS", "\n", "width_per_group", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "WIDTH_PER_GROUP", "\n", "bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "in_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "stride_in_1x1", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STRIDE_IN_1X1", "\n", "res5_dilation", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES5_DILATION", "\n", "deform_on_per_stage", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_ON_PER_STAGE", "\n", "deform_modulated", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_MODULATED", "\n", "deform_num_groups", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_NUM_GROUPS", "\n", "avd", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "AVD", "\n", "avg_down", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "AVG_DOWN", "\n", "#", "\n", "choice_indices", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "CHOICE_INDICES", "\n", "block_args", "=", "[", "\n", "dict", "(", "radix", "=", "1", ",", "num_groups", "=", "1", ",", "bottleneck_width", "=", "64", ")", ",", "\n", "dict", "(", "radix", "=", "2", ",", "num_groups", "=", "1", ",", "bottleneck_width", "=", "64", ")", ",", "\n", "dict", "(", "radix", "=", "1", ",", "num_groups", "=", "2", ",", "bottleneck_width", "=", "42", ")", ",", "\n", "dict", "(", "radix", "=", "2", ",", "num_groups", "=", "2", ",", "bottleneck_width", "=", "40", ")", ",", "]", "\n", "#", "\n", "# fmt: on", "\n", "assert", "res5_dilation", "in", "{", "1", ",", "2", "}", ",", "\"res5_dilation cannot be {}.\"", ".", "format", "(", "res5_dilation", ")", "\n", "\n", "num_blocks_per_stage", "=", "{", "\n", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "34", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "101", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "152", ":", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "200", ":", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "\n", "269", ":", "[", "3", ",", "30", ",", "48", ",", "8", "]", ",", "\n", "}", "[", "depth", "]", "\n", "\n", "if", "depth", "in", "[", "18", ",", "34", "]", ":", "\n", "        ", "assert", "out_channels", "==", "64", ",", "\"Must set MODEL.RESNETS.RES2_OUT_CHANNELS = 64 for R18/R34\"", "\n", "assert", "not", "any", "(", "\n", "deform_on_per_stage", "\n", ")", ",", "\"MODEL.RESNETS.DEFORM_ON_PER_STAGE unsupported for R18/R34\"", "\n", "assert", "res5_dilation", "==", "1", ",", "\"Must set MODEL.RESNETS.RES5_DILATION = 1 for R18/R34\"", "\n", "assert", "num_groups", "==", "1", ",", "\"Must set MODEL.RESNETS.NUM_GROUPS = 1 for R18/R34\"", "\n", "\n", "", "stages", "=", "[", "]", "\n", "\n", "# Avoid creating variables without gradients", "\n", "# It consumes extra memory and may cause allreduce to fail", "\n", "out_stage_idx", "=", "[", "{", "\"res2\"", ":", "2", ",", "\"res3\"", ":", "3", ",", "\"res4\"", ":", "4", ",", "\"res5\"", ":", "5", "}", "[", "f", "]", "for", "f", "in", "out_features", "]", "\n", "max_stage_idx", "=", "max", "(", "out_stage_idx", ")", "\n", "in_channels", "=", "2", "*", "stem_width", "if", "deep_stem", "else", "in_channels", "\n", "for", "idx", ",", "stage_idx", "in", "enumerate", "(", "range", "(", "2", ",", "max_stage_idx", "+", "1", ")", ")", ":", "\n", "#", "\n", "        ", "idx_block_start", "=", "sum", "(", "[", "num_blocks_per_stage", "[", "i", "]", "for", "i", "in", "range", "(", "idx", ")", "]", ")", "\n", "curr_block_args", "=", "[", "block_args", "[", "c", "]", "for", "c", "in", "choice_indices", "[", "idx_block_start", ":", "idx_block_start", "+", "num_blocks_per_stage", "[", "idx", "]", "]", "]", "\n", "curr_block_args", "=", "{", "k", ":", "[", "v", "[", "k", "]", "for", "v", "in", "curr_block_args", "]", "for", "k", "in", "curr_block_args", "[", "0", "]", "}", "\n", "#", "\n", "dilation", "=", "res5_dilation", "if", "stage_idx", "==", "5", "else", "1", "\n", "first_stride", "=", "1", "if", "idx", "==", "0", "or", "(", "stage_idx", "==", "5", "and", "dilation", "==", "2", ")", "else", "2", "\n", "stage_kargs", "=", "{", "\n", "\"num_blocks\"", ":", "num_blocks_per_stage", "[", "idx", "]", ",", "\n", "\"stride_per_block\"", ":", "[", "first_stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks_per_stage", "[", "idx", "]", "-", "1", ")", ",", "\n", "\"in_channels\"", ":", "in_channels", ",", "\n", "\"out_channels\"", ":", "out_channels", ",", "\n", "\"norm\"", ":", "norm", ",", "\n", "\"avd\"", ":", "avd", ",", "\n", "\"avg_down\"", ":", "avg_down", ",", "\n", "# \"radix\": radix,", "\n", "\"radix_per_block\"", ":", "curr_block_args", "[", "\"radix\"", "]", ",", "\n", "# \"bottleneck_width\": bottleneck_width,", "\n", "\"bottleneck_width_per_block\"", ":", "curr_block_args", "[", "\"bottleneck_width\"", "]", ",", "\n", "}", "\n", "# Use BasicBlock for R18 and R34.", "\n", "if", "depth", "in", "[", "18", ",", "34", "]", ":", "\n", "            ", "stage_kargs", "[", "\"block_class\"", "]", "=", "BasicBlock", "\n", "", "else", ":", "\n", "            ", "stage_kargs", "[", "\"bottleneck_channels\"", "]", "=", "bottleneck_channels", "\n", "stage_kargs", "[", "\"stride_in_1x1\"", "]", "=", "stride_in_1x1", "\n", "stage_kargs", "[", "\"dilation\"", "]", "=", "dilation", "\n", "# stage_kargs[\"num_groups\"] = num_groups", "\n", "stage_kargs", "[", "\"num_groups_per_block\"", "]", "=", "curr_block_args", "[", "\"num_groups\"", "]", "\n", "if", "deform_on_per_stage", "[", "idx", "]", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "stage_kargs", "[", "\"block_class\"", "]", "=", "DeformBottleneckBlock", "\n", "stage_kargs", "[", "\"deform_modulated\"", "]", "=", "deform_modulated", "\n", "stage_kargs", "[", "\"deform_num_groups\"", "]", "=", "deform_num_groups", "\n", "", "else", ":", "\n", "                ", "stage_kargs", "[", "\"block_class\"", "]", "=", "BottleneckBlock", "\n", "", "", "blocks", "=", "ResNet", ".", "make_stage", "(", "**", "stage_kargs", ")", "\n", "in_channels", "=", "out_channels", "\n", "out_channels", "*=", "2", "\n", "bottleneck_channels", "*=", "2", "\n", "stages", ".", "append", "(", "blocks", ")", "\n", "", "return", "ResNet", "(", "stem", ",", "stages", ",", "out_features", "=", "out_features", ")", ".", "freeze", "(", "freeze_at", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.splat.SplAtConv2d.__init__": [[23, 55], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "max", "torch.nn.ReLU", "torch.nn.ReLU", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "splat.rSoftMax", "RFConv2d", "detectron2.layers.Conv2d", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "DropBlock2D"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "norm", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplAtConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "rectify", "=", "rectify", "and", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "if", "self", ".", "rectify", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv", "=", "RFConv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "average_mode", "=", "rectify_avg", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "", "self", ".", "use_bn", "=", "norm", "is", "not", "None", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn0", "=", "get_norm", "(", "norm", ",", "channels", "*", "radix", ")", "\n", "", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "get_norm", "(", "norm", ",", "inter_channels", ")", "\n", "", "self", ".", "fc2", "=", "Conv2d", "(", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "rsoftmax", "=", "rSoftMax", "(", "radix", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.splat.SplAtConv2d.forward": [[56, 86], ["splat.SplAtConv2d.conv", "splat.SplAtConv2d.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "splat.SplAtConv2d.fc1", "splat.SplAtConv2d.relu", "splat.SplAtConv2d.fc2", "splat.SplAtConv2d.rsoftmax().view", "sum.contiguous", "splat.SplAtConv2d.bn0", "splat.SplAtConv2d.dropblock", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "splat.SplAtConv2d.bn1", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "splat.SplAtConv2d.rsoftmax", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "x", "=", "self", ".", "dropblock", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "rchannel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splited", "=", "torch", ".", "split", "(", "x", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "gap", "=", "sum", "(", "splited", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "gap", "=", "self", ".", "bn1", "(", "gap", ")", "\n", "", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", "\n", "atten", "=", "self", ".", "rsoftmax", "(", "atten", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "attens", "=", "torch", ".", "split", "(", "atten", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "out", "=", "sum", "(", "[", "att", "*", "split", "for", "(", "att", ",", "split", ")", "in", "zip", "(", "attens", ",", "splited", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.splat.rSoftMax.__init__": [[88, 92], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radix", ",", "cardinality", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.splat.rSoftMax.forward": [[93, 102], ["torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.softmax", "torch.softmax", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "torch.sigmoid.view"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "batch", ",", "self", ".", "cardinality", ",", "self", ".", "radix", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.splat.SplAtConv2d_dcn.__init__": [[107, 145], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "max", "torch.nn.ReLU", "torch.nn.ReLU", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "splat.rSoftMax", "RFConv2d", "deform_conv_op", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "DropBlock2D"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "norm", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "\n", "deform_conv_op", "=", "None", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "deform_modulated", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplAtConv2d_dcn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deform_modulated", "=", "deform_modulated", "\n", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "rectify", "=", "rectify", "and", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "if", "self", ".", "rectify", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv", "=", "RFConv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "average_mode", "=", "rectify_avg", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "deform_conv_op", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", "[", "0", "]", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "deformable_groups", "=", "deformable_groups", ",", "**", "kwargs", ")", "\n", "", "self", ".", "use_bn", "=", "norm", "is", "not", "None", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn0", "=", "get_norm", "(", "norm", ",", "channels", "*", "radix", ")", "\n", "", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "get_norm", "(", "norm", ",", "inter_channels", ")", "\n", "", "self", ".", "fc2", "=", "Conv2d", "(", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "rsoftmax", "=", "rSoftMax", "(", "radix", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.splat.SplAtConv2d_dcn.forward": [[146, 184], ["splat.SplAtConv2d_dcn.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "splat.SplAtConv2d_dcn.fc1", "splat.SplAtConv2d_dcn.relu", "splat.SplAtConv2d_dcn.fc2", "splat.SplAtConv2d_dcn.rsoftmax().view", "sum.contiguous", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.sigmoid.sigmoid.sigmoid", "splat.SplAtConv2d_dcn.conv", "splat.SplAtConv2d_dcn.conv", "splat.SplAtConv2d_dcn.bn0", "splat.SplAtConv2d_dcn.dropblock", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "splat.SplAtConv2d_dcn.bn1", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "splat.SplAtConv2d_dcn.rsoftmax", "zip"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ",", "offset_input", ")", ":", "\n", "\n", "        ", "if", "self", ".", "deform_modulated", ":", "\n", "            ", "offset_x", ",", "offset_y", ",", "mask", "=", "torch", ".", "chunk", "(", "offset_input", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "offset_x", ",", "offset_y", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "mask", ".", "sigmoid", "(", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ",", "offset", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ",", "offset_input", ")", "\n", "\n", "", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "x", "=", "self", ".", "dropblock", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "rchannel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splited", "=", "torch", ".", "split", "(", "x", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "gap", "=", "sum", "(", "splited", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "gap", "=", "self", ".", "bn1", "(", "gap", ")", "\n", "", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", "\n", "atten", "=", "self", ".", "rsoftmax", "(", "atten", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "attens", "=", "torch", ".", "split", "(", "atten", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "out", "=", "sum", "(", "[", "att", "*", "split", "for", "(", "att", ",", "split", ")", "in", "zip", "(", "attens", ",", "splited", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.head.Res5ROIHeadsExtraNorm._build_res5_block": [[11, 17], ["super()._build_res5_block", "detectron2.layers.get_norm", "seq.add_module"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.head.Res5ROIHeadsExtraNorm._build_res5_block", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm"], ["def", "_build_res5_block", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "seq", ",", "out_channels", "=", "super", "(", ")", ".", "_build_res5_block", "(", "cfg", ")", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NORM", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", "\n", "seq", ".", "add_module", "(", "\"norm\"", ",", "norm", ")", "\n", "return", "seq", ",", "out_channels", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.MyBackbone.__init__": [[28, 34], ["detectron2.modeling.backbone.backbone.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "out_features", ",", "out_feature_channels", ",", "out_feature_strides", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "_out_features", "=", "out_features", "\n", "self", ".", "_out_feature_channels", "=", "out_feature_channels", "\n", "self", ".", "_out_feature_strides", "=", "out_feature_strides", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.MyBackbone.forward": [[35, 50], ["backbone.MyBackbone.model.conv1", "backbone.MyBackbone.model.bn1", "backbone.MyBackbone.model.relu", "backbone.MyBackbone.model.maxpool", "hasattr", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "x", "=", "self", ".", "model", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "maxpool", "(", "x", ")", "\n", "if", "\"stem\"", "in", "self", ".", "_out_features", ":", "\n", "            ", "outputs", "[", "'stem'", "]", "=", "x", "\n", "", "for", "name", "in", "[", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", "]", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ".", "model", ",", "name", ")", ":", "\n", "                ", "break", "\n", "", "x", "=", "getattr", "(", "self", ".", "model", ",", "name", ")", "(", "x", ")", "\n", "if", "name", "in", "self", ".", "_out_features", ":", "\n", "                ", "outputs", "[", "name", "]", "=", "x", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm": [[18, 25], ["len"], "function", ["None"], ["def", "get_norm", "(", "norm", ")", ":", "\n", "    ", "if", "len", "(", "norm", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "return", "{", "\n", "\"BN\"", ":", "nn", ".", "BatchNorm2d", ",", "\n", "\"SyncBN\"", ":", "nn", ".", "SyncBatchNorm", "\n", "}", "[", "norm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.build_my_backbone": [[52, 65], ["detectron2.modeling.backbone.BACKBONE_REGISTRY.register", "encoding.models.sseg.base.get_backbone", "backbone.MyBackbone", "backbone.get_norm", "max", "delattr"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.get_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.get_norm"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "build_my_backbone", "(", "cfg", ",", "input_shape", ")", ":", "\n", "    ", "model", "=", "get_backbone", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "MODEL", ",", "\n", "norm_layer", "=", "get_norm", "(", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NORM", ")", ",", "\n", "backbone_pretrained_path", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "PRETRAINED", ")", "\n", "for", "name", "in", "[", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", "]", ":", "\n", "        ", "if", "name", ">", "max", "(", "cfg", ".", "MODEL", ".", "RESNETS", ".", "OUT_FEATURES", ")", ":", "\n", "            ", "delattr", "(", "model", ",", "name", ")", "\n", "", "", "del", "model", ".", "fc", "\n", "return", "MyBackbone", "(", "model", ",", "\n", "cfg", ".", "MODEL", ".", "RESNETS", ".", "OUT_FEATURES", ",", "\n", "{", "'stem'", ":", "64", ",", "'layer1'", ":", "256", ",", "'layer2'", ":", "512", ",", "'layer3'", ":", "1024", ",", "'layer4'", ":", "2048", "}", ",", "\n", "{", "'stem'", ":", "4", ",", "'layer1'", ":", "4", ",", "'layer2'", ":", "8", ",", "'layer3'", ":", "16", ",", "'layer4'", ":", "32", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.build_my_fpn_backbone": [[67, 88], ["detectron2.modeling.backbone.BACKBONE_REGISTRY.register", "backbone.build_my_backbone", "detectron2.modeling.backbone.fpn.FPN", "detectron2.modeling.backbone.fpn.LastLevelMaxPool"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.build_my_backbone"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "build_my_fpn_backbone", "(", "cfg", ",", "input_shape", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        cfg: a detectron2 CfgNode\n\n    Returns:\n        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.\n    \"\"\"", "\n", "bottom_up", "=", "build_my_backbone", "(", "cfg", ",", "input_shape", ")", "\n", "in_features", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "IN_FEATURES", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "OUT_CHANNELS", "\n", "backbone", "=", "FPN", "(", "\n", "bottom_up", "=", "bottom_up", ",", "\n", "in_features", "=", "in_features", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "NORM", ",", "\n", "top_block", "=", "LastLevelMaxPool", "(", ")", ",", "\n", "fuse_type", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "FUSE_TYPE", ",", "\n", ")", "\n", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.backbone.build_resnest_fpn_backbone": [[90, 111], ["detectron2.modeling.backbone.BACKBONE_REGISTRY.register", "resnest.build_resnest_backbone", "detectron2.modeling.backbone.fpn.FPN", "detectron2.modeling.backbone.fpn.LastLevelMaxPool"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.my_model.resnest.build_resnest_backbone"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "build_resnest_fpn_backbone", "(", "cfg", ",", "input_shape", ":", "ShapeSpec", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        cfg: a detectron2 CfgNode\n\n    Returns:\n        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.\n    \"\"\"", "\n", "bottom_up", "=", "build_resnest_backbone", "(", "cfg", ",", "input_shape", ")", "\n", "in_features", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "IN_FEATURES", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "OUT_CHANNELS", "\n", "backbone", "=", "FPN", "(", "\n", "bottom_up", "=", "bottom_up", ",", "\n", "in_features", "=", "in_features", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "NORM", ",", "\n", "top_block", "=", "LastLevelMaxPool", "(", ")", ",", "\n", "fuse_type", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "FUSE_TYPE", ",", "\n", ")", "\n", "return", "backbone", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.Options.__init__": [[21, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# data settings", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Deep Encoding'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'imagenet'", ",", "\n", "help", "=", "'training dataset (default: imagenet)'", ")", "\n", "parser", ".", "add_argument", "(", "'--base-size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'base image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop-size'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "\n", "help", "=", "'crop image size'", ")", "\n", "# model params ", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'densenet'", ",", "\n", "help", "=", "'network model type (default: densenet)'", ")", "\n", "parser", ".", "add_argument", "(", "'--rectify'", ",", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "help", "=", "'rectify convolution'", ")", "\n", "parser", ".", "add_argument", "(", "'--rectify-avg'", ",", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "help", "=", "'rectify convolution'", ")", "\n", "# training hyper params", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'batch size for training (default: 128)'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'dataloader threads'", ")", "\n", "# cuda, seed and logging", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "# checking point", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--verify'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--export'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "# ", "\n", "parser", ".", "add_argument", "(", "'--choice-indices'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'choice indices for alone_resnest50'", ")", "\n", "#", "\n", "self", ".", "parser", "=", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.Options.parse": [[60, 63], ["verify.Options.parser.parse_args"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.main": [[65, 139], ["verify.Options.parse", "print", "torch.manual_seed", "torch.manual_seed", "encoding.transforms.get_transform", "encoding.datasets.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "encoding.models.get_model", "print", "nn.DataParallel.eval", "encoding.utils.AverageMeter", "encoding.utils.AverageMeter", "tqdm.tqdm", "enumerate", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "nn.DataParallel.cuda", "torch.DataParallel", "os.path.isfile", "tqdm.tqdm.set_description", "torch.save", "torch.save", "verify.Options", "print", "nn.DataParallel.module.load_state_dict", "RuntimeError", "os.path.isfile", "torch.no_grad", "torch.no_grad", "nn.DataParallel.", "encoding.utils.accuracy", "encoding.utils.AverageMeter.update", "encoding.utils.AverageMeter.update", "nn.DataParallel.module.state_dict", "torch.load", "torch.load", "print", "torch.load", "torch.load", "nn.DataParallel.module.load_state_dict", "RuntimeError", "data.cuda", "target.cuda", "data.size", "data.size"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.Options.parse", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.get_transform.get_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_zoo.get_model", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.accuracy.accuracy", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "main", "(", ")", ":", "\n", "# init the args", "\n", "    ", "args", "=", "Options", "(", ")", ".", "parse", "(", ")", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "print", "(", "args", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "# init dataloader", "\n", "", "_", ",", "transform_val", "=", "encoding", ".", "transforms", ".", "get_transform", "(", "args", ".", "dataset", ",", "args", ".", "base_size", ",", "args", ".", "crop_size", ")", "\n", "valset", "=", "encoding", ".", "datasets", ".", "get_dataset", "(", "args", ".", "dataset", ",", "root", "=", "'/data/ImageNet'", ",", "\n", "transform", "=", "transform_val", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", "if", "args", ".", "cuda", "else", "False", ")", "\n", "\n", "# init the model", "\n", "model_kwargs", "=", "{", "'pretrained'", ":", "True", "}", "\n", "\n", "if", "args", ".", "rectify", ":", "\n", "        ", "model_kwargs", "[", "'rectified_conv'", "]", "=", "True", "\n", "model_kwargs", "[", "'rectify_avg'", "]", "=", "args", ".", "rectify_avg", "\n", "\n", "#", "\n", "", "if", "args", ".", "choice_indices", "is", "not", "None", ":", "\n", "        ", "assert", "'alone_resnest50'", "in", "args", ".", "model", "\n", "model_kwargs", "[", "'choice_indices'", "]", "=", "args", ".", "choice_indices", "\n", "#", "\n", "\n", "", "model", "=", "encoding", ".", "models", ".", "get_model", "(", "args", ".", "model", ",", "**", "model_kwargs", ")", "\n", "print", "(", "model", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "# Please use CUDA_VISIBLE_DEVICES to control the number of gpus", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# checkpoint", "\n", "", "if", "args", ".", "verify", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "verify", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "verify", ")", ")", "\n", "model", ".", "module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "verify", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> no verify checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "verify", ")", ")", "\n", "", "", "elif", "args", ".", "resume", "is", "not", "None", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> no resume checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "is_best", "=", "False", "\n", "tbar", "=", "tqdm", "(", "val_loader", ",", "desc", "=", "'\\r'", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "tbar", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "data", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "tbar", ".", "set_description", "(", "'Top1: %.3f | Top5: %.3f'", "%", "(", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ")", "\n", "\n", "", "print", "(", "'Top1 Acc: %.3f | Top5 Acc: %.3f '", "%", "(", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ")", "\n", "\n", "if", "args", ".", "export", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "args", ".", "export", "+", "'.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.AllReduce.forward": [[33, 44], ["sorted", "torch.reduce_add_coalesced", "torch.reduce_add_coalesced", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "tuple", "inputs[].get_device", "range", "range", "len", "len", "i[].get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "num_inputs", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "num_inputs", "=", "num_inputs", "\n", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "num_inputs", ")", "]", "\n", "inputs", "=", "[", "inputs", "[", "i", ":", "i", "+", "num_inputs", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "num_inputs", ")", "]", "\n", "# sort before reduce sum", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ".", "get_device", "(", ")", ")", "\n", "results", "=", "comm", ".", "reduce_add_coalesced", "(", "inputs", ",", "ctx", ".", "target_gpus", "[", "0", "]", ")", "\n", "outputs", "=", "comm", ".", "broadcast_coalesced", "(", "results", ",", "ctx", ".", "target_gpus", ")", "\n", "return", "tuple", "(", "[", "t", "for", "tensors", "in", "outputs", "for", "t", "in", "tensors", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.AllReduce.backward": [[45, 53], ["torch.reduce_add_coalesced", "torch.reduce_add_coalesced", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "tuple", "range", "len", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "i", ".", "data", "for", "i", "in", "inputs", "]", "\n", "inputs", "=", "[", "inputs", "[", "i", ":", "i", "+", "ctx", ".", "num_inputs", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "ctx", ".", "num_inputs", ")", "]", "\n", "results", "=", "comm", ".", "reduce_add_coalesced", "(", "inputs", ",", "ctx", ".", "target_gpus", "[", "0", "]", ")", "\n", "outputs", "=", "comm", ".", "broadcast_coalesced", "(", "results", ",", "ctx", ".", "target_gpus", ")", "\n", "return", "(", "None", ",", ")", "+", "tuple", "(", "[", "Variable", "(", "t", ")", "for", "tensors", "in", "outputs", "for", "t", "in", "tensors", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.Reduce.forward": [[55, 60], ["sorted", "torch.reduce_add", "torch.reduce_add", "inputs[].get_device", "range", "len", "i.get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", "]", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", ".", "get_device", "(", ")", ")", "\n", "return", "comm", ".", "reduce_add", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.Reduce.backward": [[61, 64], ["torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradOutput", ")", ":", "\n", "        ", "return", "Broadcast", ".", "apply", "(", "ctx", ".", "target_gpus", ",", "gradOutput", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather": [[95, 97], ["None"], "methods", ["None"], ["def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.replicate": [[98, 101], ["super().replicate"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.replicate"], ["", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelModel", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelCriterion.forward": [[123, 134], ["parallel.DataParallelCriterion.scatter", "parallel.DataParallelCriterion.replicate", "parallel._criterion_parallel_apply", "parallel.DataParallelCriterion.module", "len", "parallel.DataParallelCriterion.module", "Reduce.apply", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.replicate", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel._criterion_parallel_apply"], ["def", "forward", "(", "self", ",", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", ":", "\n", "# input should be already scatterd", "\n", "# scattering the targets instead", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", "\n", "", "targets", ",", "kwargs", "=", "self", ".", "scatter", "(", "targets", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "_criterion_parallel_apply", "(", "replicas", ",", "inputs", ",", "targets", ",", "kwargs", ")", "\n", "return", "Reduce", ".", "apply", "(", "*", "outputs", ")", "/", "len", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.allreduce": [[26, 31], ["AllReduce.apply"], "function", ["None"], ["def", "allreduce", "(", "*", "inputs", ")", ":", "\n", "    ", "\"\"\"Cross GPU all reduce autograd operation for calculate mean and\n    variance in SyncBN.\n    \"\"\"", "\n", "return", "AllReduce", ".", "apply", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel._criterion_parallel_apply": [[136, 188], ["threading.Lock", "range", "len", "len", "len", "len", "torch.is_grad_enabled", "torch.is_grad_enabled", "len", "parallel._criterion_parallel_apply._worker"], "function", ["None"], ["", "", "def", "_criterion_parallel_apply", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", "=", "None", ",", "devices", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "modules", ")", "==", "len", "(", "inputs", ")", "\n", "assert", "len", "(", "targets", ")", "==", "len", "(", "inputs", ")", "\n", "if", "kwargs_tup", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "kwargs_tup", ")", "\n", "", "else", ":", "\n", "        ", "kwargs_tup", "=", "(", "{", "}", ",", ")", "*", "len", "(", "modules", ")", "\n", "", "if", "devices", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "devices", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "[", "None", "]", "*", "len", "(", "modules", ")", "\n", "\n", "", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "results", "=", "{", "}", "\n", "if", "torch_ver", "!=", "\"0.3\"", ":", "\n", "        ", "grad_enabled", "=", "torch", ".", "is_grad_enabled", "(", ")", "\n", "\n", "", "def", "_worker", "(", "i", ",", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", "=", "None", ")", ":", "\n", "        ", "if", "torch_ver", "!=", "\"0.3\"", ":", "\n", "            ", "torch", ".", "set_grad_enabled", "(", "grad_enabled", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "get_a_var", "(", "input", ")", ".", "get_device", "(", ")", "\n", "", "try", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "device", ")", ":", "\n", "                ", "output", "=", "module", "(", "*", "(", "input", "+", "target", ")", ",", "**", "kwargs", ")", "\n", "", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "output", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "e", "\n", "\n", "", "", "", "if", "len", "(", "modules", ")", ">", "1", ":", "\n", "        ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "_worker", ",", "\n", "args", "=", "(", "i", ",", "module", ",", "input", ",", "target", ",", "\n", "kwargs", ",", "device", ")", ",", ")", "\n", "for", "i", ",", "(", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", ")", "in", "\n", "enumerate", "(", "zip", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", ",", "devices", ")", ")", "]", "\n", "\n", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "_worker", "(", "0", ",", "modules", "[", "0", "]", ",", "inputs", "[", "0", "]", ",", "kwargs_tup", "[", "0", "]", ",", "devices", "[", "0", "]", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "output", "=", "results", "[", "i", "]", "\n", "if", "isinstance", "(", "output", ",", "Exception", ")", ":", "\n", "            ", "raise", "output", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.model_ema.ModelEma.__init__": [[29, 40], ["copy.deepcopy", "model_ema.ModelEma.ema.eval", "hasattr", "model_ema.ModelEma.ema.parameters", "model_ema.ModelEma.ema.to", "p.requires_grad_"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "decay", "=", "0.9999", ",", "device", "=", "''", ",", "resume", "=", "''", ")", ":", "\n", "# make a copy of the model for accumulating moving average of weights", "\n", "        ", "self", ".", "ema", "=", "deepcopy", "(", "model", ")", "\n", "self", ".", "ema", ".", "eval", "(", ")", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "device", "=", "device", "# perform ema on different device from model if set", "\n", "if", "device", ":", "\n", "            ", "self", ".", "ema", ".", "to", "(", "device", "=", "device", ")", "\n", "", "self", ".", "ema_has_module", "=", "hasattr", "(", "self", ".", "ema", ",", "'module'", ")", "\n", "for", "p", "in", "self", ".", "ema", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.model_ema.ModelEma.update": [[41, 53], ["hasattr", "torch.no_grad", "model.state_dict", "model_ema.ModelEma.ema.state_dict().items", "msd[].detach", "ema_v.copy_", "model_ema.ModelEma.ema.state_dict", "model_v.to.to.to"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.state_dict"], ["", "", "def", "update", "(", "self", ",", "model", ")", ":", "\n", "# correct a mismatch in state dict keys", "\n", "        ", "needs_module", "=", "hasattr", "(", "model", ",", "'module'", ")", "and", "not", "self", ".", "ema_has_module", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "msd", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "ema_v", "in", "self", ".", "ema", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "if", "needs_module", ":", "\n", "                    ", "k", "=", "'module.'", "+", "k", "\n", "", "model_v", "=", "msd", "[", "k", "]", ".", "detach", "(", ")", "\n", "if", "self", ".", "device", ":", "\n", "                    ", "model_v", "=", "model_v", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "", "ema_v", ".", "copy_", "(", "ema_v", "*", "self", ".", "decay", "+", "(", "1.", "-", "self", ".", "decay", ")", "*", "model_v", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.presets.load_image": [[13, 28], ["PIL.Image.open().convert", "torchvision", "PIL.Image.open", "int", "img.resize.resize", "img.resize.resize", "img.resize.resize", "int", "int"], "function", ["None"], ["def", "load_image", "(", "filename", ",", "size", "=", "None", ",", "scale", "=", "None", ",", "keep_asp", "=", "True", ",", "transform", "=", "input_transform", ")", ":", "\n", "    ", "\"\"\"Load the image for demos\"\"\"", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "if", "keep_asp", ":", "\n", "            ", "size2", "=", "int", "(", "size", "*", "1.0", "/", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "size", ",", "size2", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "size", ",", "size", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "", "", "elif", "scale", "is", "not", "None", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "(", "int", "(", "img", ".", "size", "[", "0", "]", "/", "scale", ")", ",", "int", "(", "img", ".", "size", "[", "1", "]", "/", "scale", ")", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "", "if", "transform", ":", "\n", "        ", "img", "=", "transform", "(", "img", ")", "\n", "", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.SegmentationMetric.__init__": [[45, 49], ["threading.Lock", "metrics.SegmentationMetric.reset"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.reset"], ["def", "__init__", "(", "self", ",", "nclass", ")", ":", "\n", "        ", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.SegmentationMetric.update": [[50, 76], ["isinstance", "metrics.batch_pix_accuracy", "metrics.batch_intersection_union", "metrics.SegmentationMetric.update.evaluate_worker"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.batch_pix_accuracy", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.batch_intersection_union"], ["", "def", "update", "(", "self", ",", "labels", ",", "preds", ")", ":", "\n", "        ", "def", "evaluate_worker", "(", "self", ",", "label", ",", "pred", ")", ":", "\n", "            ", "correct", ",", "labeled", "=", "batch_pix_accuracy", "(", "\n", "pred", ",", "label", ")", "\n", "inter", ",", "union", "=", "batch_intersection_union", "(", "\n", "pred", ",", "label", ",", "self", ".", "nclass", ")", "\n", "with", "self", ".", "lock", ":", "\n", "                ", "self", ".", "total_correct", "+=", "correct", "\n", "self", ".", "total_label", "+=", "labeled", "\n", "self", ".", "total_inter", "+=", "inter", "\n", "self", ".", "total_union", "+=", "union", "\n", "", "return", "\n", "\n", "", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "evaluate_worker", "(", "self", ",", "labels", ",", "preds", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "evaluate_worker", ",", "\n", "args", "=", "(", "self", ",", "label", ",", "pred", ")", ",", "\n", ")", "\n", "for", "(", "label", ",", "pred", ")", "in", "zip", "(", "labels", ",", "preds", ")", "]", "\n", "for", "thread", "in", "threads", ":", "\n", "                ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "                ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.SegmentationMetric.get_all": [[77, 79], ["None"], "methods", ["None"], ["", "", "def", "get_all", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_correct", ",", "self", ".", "total_label", ",", "self", ".", "total_inter", ",", "self", ".", "total_union", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.SegmentationMetric.get": [[80, 82], ["metrics.get_pixacc_miou"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.get_pixacc_miou"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "get_pixacc_miou", "(", "self", ".", "total_correct", ",", "self", ".", "total_label", ",", "self", ".", "total_inter", ",", "self", ".", "total_union", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.SegmentationMetric.reset": [[83, 89], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_inter", "=", "0", "\n", "self", ".", "total_union", "=", "0", "\n", "self", ".", "total_correct", "=", "0", "\n", "self", ".", "total_label", "=", "0", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.accuracy": [[19, 34], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.get_pixacc_miou": [[35, 40], ["IoU.mean", "numpy.spacing", "numpy.spacing"], "function", ["None"], ["", "", "def", "get_pixacc_miou", "(", "total_correct", ",", "total_label", ",", "total_inter", ",", "total_union", ")", ":", "\n", "    ", "pixAcc", "=", "1.0", "*", "total_correct", "/", "(", "np", ".", "spacing", "(", "1", ")", "+", "total_label", ")", "\n", "IoU", "=", "1.0", "*", "total_inter", "/", "(", "np", ".", "spacing", "(", "1", ")", "+", "total_union", ")", "\n", "mIoU", "=", "IoU", ".", "mean", "(", ")", "\n", "return", "pixAcc", ",", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.batch_pix_accuracy": [[90, 106], ["torch.max", "numpy.sum", "numpy.sum", "predict.cpu().numpy().astype", "target.cpu().numpy().astype", "predict.cpu().numpy", "target.cpu().numpy", "predict.cpu", "target.cpu"], "function", ["None"], ["", "", "def", "batch_pix_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"Batch Pixel Accuracy\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor\n    \"\"\"", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "target", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "(", "target", ">", "0", ")", ")", "\n", "assert", "pixel_correct", "<=", "pixel_labeled", ",", "\"Correct area should be smaller than Labeled\"", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.batch_intersection_union": [[108, 132], ["torch.max", "numpy.histogram", "numpy.histogram", "numpy.histogram", "predict.cpu().numpy().astype", "target.cpu().numpy().astype", "predict.cpu().numpy", "target.cpu().numpy", "predict.cpu", "target.cpu"], "function", ["None"], ["", "def", "batch_intersection_union", "(", "output", ",", "target", ",", "nclass", ")", ":", "\n", "    ", "\"\"\"Batch Intersection of Union\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor\n        nclass: number of categories (int)\n    \"\"\"", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "mini", "=", "1", "\n", "maxi", "=", "nclass", "\n", "nbins", "=", "nclass", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "\n", "predict", "=", "predict", "*", "(", "target", ">", "0", ")", ".", "astype", "(", "predict", ".", "dtype", ")", "\n", "intersection", "=", "predict", "*", "(", "predict", "==", "target", ")", "\n", "# areas of intersection and union", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "predict", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "target", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "assert", "(", "area_inter", "<=", "area_union", ")", ".", "all", "(", ")", ",", "\"Intersection area should be smaller than Union area\"", "\n", "return", "area_inter", ",", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.pixel_accuracy": [[135, 145], ["numpy.asarray", "numpy.asarray", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "pixel_accuracy", "(", "im_pred", ",", "im_lab", ")", ":", "\n", "    ", "im_pred", "=", "np", ".", "asarray", "(", "im_pred", ")", "\n", "im_lab", "=", "np", ".", "asarray", "(", "im_lab", ")", "\n", "\n", "# Remove classes from unlabeled pixels in gt image. ", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "im_lab", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "im_pred", "==", "im_lab", ")", "*", "(", "im_lab", ">", "0", ")", ")", "\n", "#pixel_accuracy = 1.0 * pixel_correct / pixel_labeled", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.intersection_and_union": [[147, 163], ["numpy.asarray", "numpy.asarray", "numpy.histogram", "numpy.histogram", "numpy.histogram"], "function", ["None"], ["", "def", "intersection_and_union", "(", "im_pred", ",", "im_lab", ",", "num_class", ")", ":", "\n", "    ", "im_pred", "=", "np", ".", "asarray", "(", "im_pred", ")", "\n", "im_lab", "=", "np", ".", "asarray", "(", "im_lab", ")", "\n", "# Remove classes from unlabeled pixels in gt image. ", "\n", "im_pred", "=", "im_pred", "*", "(", "im_lab", ">", "0", ")", "\n", "# Compute area intersection:", "\n", "intersection", "=", "im_pred", "*", "(", "im_pred", "==", "im_lab", ")", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "# Compute area union: ", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "im_pred", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "im_lab", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "return", "area_inter", ",", "area_union", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.dist_helper.torch_dist_sum": [[15, 29], ["isinstance", "tensor_args.append", "pending_res.append", "res.wait", "arg.clone().reshape().detach().cuda", "torch.tensor().reshape().cuda", "torch.distributed.all_reduce", "arg.clone().reshape().detach", "torch.tensor().reshape", "arg.clone().reshape", "torch.tensor", "arg.clone"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["def", "torch_dist_sum", "(", "gpu", ",", "*", "args", ")", ":", "\n", "    ", "process_group", "=", "torch", ".", "distributed", ".", "group", ".", "WORLD", "\n", "tensor_args", "=", "[", "]", "\n", "pending_res", "=", "[", "]", "\n", "for", "arg", "in", "args", ":", "\n", "        ", "if", "isinstance", "(", "arg", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "tensor_arg", "=", "arg", ".", "clone", "(", ")", ".", "reshape", "(", "-", "1", ")", ".", "detach", "(", ")", ".", "cuda", "(", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "tensor_arg", "=", "torch", ".", "tensor", "(", "arg", ")", ".", "reshape", "(", "-", "1", ")", ".", "cuda", "(", "gpu", ")", "\n", "", "tensor_args", ".", "append", "(", "tensor_arg", ")", "\n", "pending_res", ".", "append", "(", "torch", ".", "distributed", ".", "all_reduce", "(", "tensor_arg", ",", "group", "=", "process_group", ",", "async_op", "=", "True", ")", ")", "\n", "", "for", "res", "in", "pending_res", ":", "\n", "        ", "res", ".", "wait", "(", ")", "\n", "", "return", "tensor_args", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.save_checkpoint": [[11, 23], ["os.path.join", "torch.save", "os.path.exists", "os.makedirs", "shutil.copyfile", "shutil.copyfile", "shutil.copyfile", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "args", ",", "is_best", ",", "is_ema_best", "=", "False", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "save_process", "=", "False", ")", ":", "\n", "    ", "\"\"\"Saves checkpoint to disk\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output", ")", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "'model_best.pth.tar'", ")", ")", "\n", "", "if", "is_ema_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "'model_ema_best.pth.tar'", ")", ")", "\n", "", "if", "save_process", "and", "(", "state", "[", "'epoch'", "]", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "'epoch_%d.pth.tar'", "%", "state", "[", "'epoch'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.download": [[25, 82], ["os.path.expanduser", "os.path.isdir", "os.path.dirname", "print", "requests.get", "requests.get.headers.get", "url.split", "os.path.join", "os.path.exists", "os.path.abspath", "os.path.exists", "os.makedirs", "RuntimeError", "open", "UserWarning", "files.check_sha1", "os.path.expanduser", "requests.get.iter_content", "int", "tqdm.tqdm", "files.check_sha1", "url.split", "requests.get.iter_content", "f.write", "f.write", "int"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.check_sha1", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.check_sha1"], ["", "", "def", "download", "(", "url", ",", "path", "=", "None", ",", "overwrite", "=", "False", ",", "sha1_hash", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download an given URL\n    Parameters\n    ----------\n    url : str\n        URL to download\n    path : str, optional\n        Destination path to store downloaded file. By default stores to the\n        current directory with same name as in url.\n    overwrite : bool, optional\n        Whether to overwrite destination file if already exists.\n    sha1_hash : str, optional\n        Expected sha1 hash in hexadecimal digits. Will ignore existing file when hash is specified\n        but doesn't match.\n    Returns\n    -------\n    str\n        The file path of the downloaded file.\n    \"\"\"", "\n", "if", "path", "is", "None", ":", "\n", "        ", "fname", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "fname", "=", "path", "\n", "\n", "", "", "if", "overwrite", "or", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", "or", "(", "sha1_hash", "and", "not", "check_sha1", "(", "fname", ",", "sha1_hash", ")", ")", ":", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "fname", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n", "", "print", "(", "'Downloading %s from %s...'", "%", "(", "fname", ",", "url", ")", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "if", "r", ".", "status_code", "!=", "200", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Failed downloading url %s\"", "%", "url", ")", "\n", "", "total_length", "=", "r", ".", "headers", ".", "get", "(", "'content-length'", ")", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "if", "total_length", "is", "None", ":", "# no content length header", "\n", "                ", "for", "chunk", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "                    ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                        ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "else", ":", "\n", "                ", "total_length", "=", "int", "(", "total_length", ")", "\n", "for", "chunk", "in", "tqdm", "(", "r", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ",", "\n", "total", "=", "int", "(", "total_length", "/", "1024.", "+", "0.5", ")", ",", "\n", "unit", "=", "'KB'", ",", "unit_scale", "=", "False", ",", "dynamic_ncols", "=", "True", ")", ":", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "\n", "", "", "", "if", "sha1_hash", "and", "not", "check_sha1", "(", "fname", ",", "sha1_hash", ")", ":", "\n", "            ", "raise", "UserWarning", "(", "'File {} is downloaded but the content hash does not match. '", "'The repo may be outdated or download may be incomplete. '", "'If the \"repo_url\" is overridden, consider switching to '", "'the default repo.'", ".", "format", "(", "fname", ")", ")", "\n", "\n", "", "", "return", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.check_sha1": [[84, 106], ["hashlib.sha1", "open", "hashlib.sha1.hexdigest", "f.read", "hashlib.sha1.update"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update"], ["", "def", "check_sha1", "(", "filename", ",", "sha1_hash", ")", ":", "\n", "    ", "\"\"\"Check whether the sha1 hash of the file content matches the expected hash.\n    Parameters\n    ----------\n    filename : str\n        Path to the file.\n    sha1_hash : str\n        Expected sha1 hash in hexadecimal digits.\n    Returns\n    -------\n    bool\n        Whether the file content matches the expected hash.\n    \"\"\"", "\n", "sha1", "=", "hashlib", ".", "sha1", "(", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "data", "=", "f", ".", "read", "(", "1048576", ")", "\n", "if", "not", "data", ":", "\n", "                ", "break", "\n", "", "sha1", ".", "update", "(", "data", ")", "\n", "\n", "", "", "return", "sha1", ".", "hexdigest", "(", ")", "==", "sha1_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.mkdir": [[108, 117], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "\"\"\"make dir exists okay\"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.misc.AverageMeter.__init__": [[14, 16], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.misc.AverageMeter.reset": [[17, 21], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "#self.val = 0", "\n", "        ", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.misc.AverageMeter.update": [[22, 26], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "#self.val = val", "\n", "        ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.misc.AverageMeter.avg": [[27, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "avg", "=", "0", "if", "self", ".", "count", "==", "0", "else", "self", ".", "sum", "/", "self", ".", "count", "\n", "return", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.LR_Scheduler.__init__": [[31, 45], ["print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mode", ",", "base_lr", ",", "num_epochs", ",", "iters_per_epoch", "=", "0", ",", "\n", "lr_step", "=", "0", ",", "warmup_epochs", "=", "0", ",", "quiet", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "quiet", "=", "quiet", "\n", "if", "not", "quiet", ":", "\n", "            ", "print", "(", "'Using {} LR scheduler with warm-up epochs of {}!'", ".", "format", "(", "self", ".", "mode", ",", "warmup_epochs", ")", ")", "\n", "", "if", "mode", "==", "'step'", ":", "\n", "            ", "assert", "lr_step", "\n", "", "self", ".", "base_lr", "=", "base_lr", "\n", "self", ".", "lr_step", "=", "lr_step", "\n", "self", ".", "iters_per_epoch", "=", "iters_per_epoch", "\n", "self", ".", "epoch", "=", "-", "1", "\n", "self", ".", "warmup_iters", "=", "warmup_epochs", "*", "iters_per_epoch", "\n", "self", ".", "total_iters", "=", "(", "num_epochs", "-", "warmup_epochs", ")", "*", "iters_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.LR_Scheduler.__call__": [[46, 68], ["lr_scheduler.LR_Scheduler._adjust_learning_rate", "print", "math.cos", "pow"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.LR_Scheduler_Head._adjust_learning_rate"], ["", "def", "__call__", "(", "self", ",", "optimizer", ",", "i", ",", "epoch", ",", "best_pred", ")", ":", "\n", "        ", "T", "=", "epoch", "*", "self", ".", "iters_per_epoch", "+", "i", "\n", "# warm up lr schedule", "\n", "if", "self", ".", "warmup_iters", ">", "0", "and", "T", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "lr", "=", "self", ".", "base_lr", "*", "1.0", "*", "T", "/", "self", ".", "warmup_iters", "\n", "", "elif", "self", ".", "mode", "==", "'cos'", ":", "\n", "            ", "T", "=", "T", "-", "self", ".", "warmup_iters", "\n", "lr", "=", "0.5", "*", "self", ".", "base_lr", "*", "(", "1", "+", "math", ".", "cos", "(", "1.0", "*", "T", "/", "self", ".", "total_iters", "*", "math", ".", "pi", ")", ")", "\n", "", "elif", "self", ".", "mode", "==", "'poly'", ":", "\n", "            ", "T", "=", "T", "-", "self", ".", "warmup_iters", "\n", "lr", "=", "self", ".", "base_lr", "*", "pow", "(", "(", "1", "-", "1.0", "*", "T", "/", "self", ".", "total_iters", ")", ",", "0.9", ")", "\n", "", "elif", "self", ".", "mode", "==", "'step'", ":", "\n", "            ", "lr", "=", "self", ".", "base_lr", "*", "(", "0.1", "**", "(", "epoch", "//", "self", ".", "lr_step", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "", "if", "epoch", ">", "self", ".", "epoch", "and", "(", "epoch", "==", "0", "or", "best_pred", ">", "0.0", ")", ":", "\n", "            ", "if", "not", "self", ".", "quiet", ":", "\n", "                ", "print", "(", "'\\n=>Epoch %i, learning rate = %.4f, \\\n                    previous best = %.4f'", "%", "(", "epoch", ",", "lr", ",", "best_pred", ")", ")", "\n", "", "self", ".", "epoch", "=", "epoch", "\n", "", "assert", "lr", ">=", "0", "\n", "self", ".", "_adjust_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.LR_Scheduler._adjust_learning_rate": [[69, 72], ["range", "len"], "methods", ["None"], ["", "def", "_adjust_learning_rate", "(", "self", ",", "optimizer", ",", "lr", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "optimizer", ".", "param_groups", ")", ")", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.LR_Scheduler_Head._adjust_learning_rate": [[75, 83], ["len", "range", "len"], "methods", ["None"], ["def", "_adjust_learning_rate", "(", "self", ",", "optimizer", ",", "lr", ")", ":", "\n", "        ", "if", "len", "(", "optimizer", ".", "param_groups", ")", "==", "1", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "", "else", ":", "\n", "# enlarge the lr at the head", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "optimizer", ".", "param_groups", ")", ")", ":", "\n", "                ", "optimizer", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.__init__": [[109, 138], ["lr_scheduler.Scheduler.update_groups", "enumerate", "enumerate", "group.setdefault", "KeyError", "KeyError"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "param_group_field", ":", "str", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_type", "=", "'normal'", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "None", ",", "\n", "initialize", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "param_group_field", "=", "param_group_field", "\n", "self", ".", "_initial_param_group_field", "=", "f\"initial_{param_group_field}\"", "\n", "if", "initialize", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "param_group_field", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"{param_group_field} missing from param_groups[{i}]\"", ")", "\n", "", "group", ".", "setdefault", "(", "self", ".", "_initial_param_group_field", ",", "group", "[", "param_group_field", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "self", ".", "_initial_param_group_field", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"{self._initial_param_group_field} missing from param_groups[{i}]\"", ")", "\n", "", "", "", "self", ".", "base_values", "=", "[", "group", "[", "self", ".", "_initial_param_group_field", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "self", ".", "metric", "=", "None", "# any point to having this for all?", "\n", "self", ".", "noise_range_t", "=", "noise_range_t", "\n", "self", ".", "noise_pct", "=", "noise_pct", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "self", ".", "noise_seed", "=", "noise_seed", "if", "noise_seed", "is", "not", "None", "else", "42", "\n", "self", ".", "update_groups", "(", "self", ".", "base_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.state_dict": [[139, 141], ["lr_scheduler.Scheduler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict": [[142, 144], ["lr_scheduler.Scheduler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.get_epoch_values": [[145, 147], ["None"], "methods", ["None"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.get_update_values": [[148, 150], ["None"], "methods", ["None"], ["", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.step": [[151, 157], ["lr_scheduler.Scheduler.get_epoch_values", "lr_scheduler.Scheduler._add_noise", "lr_scheduler.Scheduler.update_groups"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.CosineLRScheduler.get_epoch_values", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler._add_noise", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.update_groups"], ["", "def", "step", "(", "self", ",", "epoch", ":", "int", ",", "metric", ":", "float", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "values", "=", "self", ".", "get_epoch_values", "(", "epoch", ")", "\n", "if", "values", "is", "not", "None", ":", "\n", "            ", "values", "=", "self", ".", "_add_noise", "(", "values", ",", "epoch", ")", "\n", "self", ".", "update_groups", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.step_update": [[158, 164], ["lr_scheduler.Scheduler.get_update_values", "lr_scheduler.Scheduler._add_noise", "lr_scheduler.Scheduler.update_groups"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.CosineLRScheduler.get_update_values", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler._add_noise", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.update_groups"], ["", "", "def", "step_update", "(", "self", ",", "num_updates", ":", "int", ",", "metric", ":", "float", "=", "None", ")", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "values", "=", "self", ".", "get_update_values", "(", "num_updates", ")", "\n", "if", "values", "is", "not", "None", ":", "\n", "            ", "values", "=", "self", ".", "_add_noise", "(", "values", ",", "num_updates", ")", "\n", "self", ".", "update_groups", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.update_groups": [[165, 170], ["zip", "isinstance", "len"], "methods", ["None"], ["", "", "def", "update_groups", "(", "self", ",", "values", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "values", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "values", "=", "[", "values", "]", "*", "len", "(", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "", "for", "param_group", ",", "value", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "values", ")", ":", "\n", "            ", "param_group", "[", "self", ".", "param_group_field", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler._add_noise": [[171, 190], ["isinstance", "torch.Generator", "torch.Generator.manual_seed", "torch.randn().item", "abs", "torch.randn", "torch.rand().item", "torch.rand"], "methods", ["None"], ["", "", "def", "_add_noise", "(", "self", ",", "lrs", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "noise_range_t", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "noise_range_t", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "apply_noise", "=", "self", ".", "noise_range_t", "[", "0", "]", "<=", "t", "<", "self", ".", "noise_range_t", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "apply_noise", "=", "t", ">=", "self", ".", "noise_range_t", "\n", "", "if", "apply_noise", ":", "\n", "                ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "noise_seed", "+", "t", ")", "\n", "if", "self", ".", "noise_type", "==", "'normal'", ":", "\n", "                    ", "while", "True", ":", "\n", "# resample if noise out of percent limit, brute force but shouldn't spin much", "\n", "                        ", "noise", "=", "torch", ".", "randn", "(", "1", ",", "generator", "=", "g", ")", ".", "item", "(", ")", "\n", "if", "abs", "(", "noise", ")", "<", "self", ".", "noise_pct", ":", "\n", "                            ", "break", "\n", "", "", "", "else", ":", "\n", "                    ", "noise", "=", "2", "*", "(", "torch", ".", "rand", "(", "1", ",", "generator", "=", "g", ")", ".", "item", "(", ")", "-", "0.5", ")", "*", "self", ".", "noise_pct", "\n", "", "lrs", "=", "[", "v", "+", "v", "*", "noise", "for", "v", "in", "lrs", "]", "\n", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.CosineLRScheduler.__init__": [[201, 241], ["lr_scheduler.Scheduler.__init__", "print", "lr_scheduler.Scheduler.update_groups"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "t_initial", ":", "int", ",", "\n", "t_mul", ":", "float", "=", "1.", ",", "\n", "lr_min", ":", "float", "=", "0.", ",", "\n", "decay_rate", ":", "float", "=", "1.", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "warmup_prefix", "=", "False", ",", "\n", "cycle_limit", "=", "0", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "initialize", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "assert", "t_initial", ">", "0", "\n", "assert", "lr_min", ">=", "0", "\n", "if", "t_initial", "==", "1", "and", "t_mul", "==", "1", "and", "decay_rate", "==", "1", ":", "\n", "            ", "print", "(", "\"Cosine annealing scheduler will have no effect on the learning \"", "\n", "\"rate since t_initial = t_mul = eta_mul = 1.\"", ",", "flush", "=", "True", ")", "\n", "", "self", ".", "t_initial", "=", "t_initial", "\n", "self", ".", "t_mul", "=", "t_mul", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "self", ".", "cycle_limit", "=", "cycle_limit", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "warmup_prefix", "=", "warmup_prefix", "\n", "self", ".", "t_in_epochs", "=", "t_in_epochs", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.CosineLRScheduler._get_lr": [[242, 270], ["math.floor", "math.log", "math.cos"], "methods", ["None"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "warmup_prefix", ":", "\n", "                ", "t", "=", "t", "-", "self", ".", "warmup_t", "\n", "\n", "", "if", "self", ".", "t_mul", "!=", "1", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "1", "-", "t", "/", "self", ".", "t_initial", "*", "(", "1", "-", "self", ".", "t_mul", ")", ",", "self", ".", "t_mul", ")", ")", "\n", "t_i", "=", "self", ".", "t_mul", "**", "i", "*", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "1", "-", "self", ".", "t_mul", "**", "i", ")", "/", "(", "1", "-", "self", ".", "t_mul", ")", "*", "self", ".", "t_initial", "\n", "", "else", ":", "\n", "                ", "i", "=", "t", "//", "self", ".", "t_initial", "\n", "t_i", "=", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "self", ".", "t_initial", "*", "i", ")", "\n", "\n", "", "gamma", "=", "self", ".", "decay_rate", "**", "i", "\n", "lr_min", "=", "self", ".", "lr_min", "*", "gamma", "\n", "lr_max_values", "=", "[", "v", "*", "gamma", "for", "v", "in", "self", ".", "base_values", "]", "\n", "\n", "if", "self", ".", "cycle_limit", "==", "0", "or", "(", "self", ".", "cycle_limit", ">", "0", "and", "i", "<", "self", ".", "cycle_limit", ")", ":", "\n", "                ", "lrs", "=", "[", "\n", "lr_min", "+", "0.5", "*", "(", "lr_max", "-", "lr_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "t_curr", "/", "t_i", ")", ")", "for", "lr_max", "in", "lr_max_values", "\n", "]", "\n", "", "else", ":", "\n", "                ", "lrs", "=", "[", "self", ".", "lr_min", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.CosineLRScheduler.get_epoch_values": [[271, 276], ["lr_scheduler.CosineLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.CosineLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.CosineLRScheduler.get_update_values": [[277, 282], ["lr_scheduler.CosineLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.CosineLRScheduler._get_lr"], ["", "", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "if", "not", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "num_updates", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.CosineLRScheduler.get_cycle_length": [[283, 291], ["max", "int", "math.floor"], "methods", ["None"], ["", "", "def", "get_cycle_length", "(", "self", ",", "cycles", "=", "0", ")", ":", "\n", "        ", "if", "not", "cycles", ":", "\n", "            ", "cycles", "=", "self", ".", "cycle_limit", "\n", "", "cycles", "=", "max", "(", "1", ",", "cycles", ")", "\n", "if", "self", ".", "t_mul", "==", "1.0", ":", "\n", "            ", "return", "self", ".", "t_initial", "*", "cycles", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "math", ".", "floor", "(", "-", "self", ".", "t_initial", "*", "(", "self", ".", "t_mul", "**", "cycles", "-", "1", ")", "/", "(", "1", "-", "self", ".", "t_mul", ")", ")", ")", "\n", "#", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.precise_bn.update_bn_stats": [[19, 93], ["torch.no_grad", "precise_bn.get_bn_modules", "enumerate", "enumerate", "len", "torch.zeros_like", "torch.zeros_like", "itertools.islice", "inputs.cuda.cuda", "enumerate", "torch.no_grad", "model", "model"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.contrastive_search_hook.get_bn_modules", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_bn_stats", "(", "\n", "model", ":", "nn", ".", "Module", ",", "data_loader", ":", "Iterable", "[", "Any", "]", ",", "num_iters", ":", "int", "=", "200", ",", "# pyre-ignore", "\n", "# my", "\n", "choice_indices", ":", "Iterable", "[", "Any", "]", "=", "None", "\n", "#", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Recompute and update the batch norm stats to make them more precise. During\n    training both BN stats and the weight are changing after every iteration, so\n    the running average can not precisely reflect the actual stats of the\n    current model.\n    In this function, the BN stats are recomputed with fixed weights, to make\n    the running average more precise. Specifically, it computes the true average\n    of per-batch mean/variance instead of the running average.\n    Args:\n        model (nn.Module): the model whose bn stats will be recomputed.\n            Note that:\n            1. This function will not alter the training mode of the given model.\n               Users are responsible for setting the layers that needs\n               precise-BN to training mode, prior to calling this function.\n            2. Be careful if your models contain other stateful layers in\n               addition to BN, i.e. layers whose state can change in forward\n               iterations.  This function will alter their state. If you wish\n               them unchanged, you need to either pass in a submodule without\n               those layers, or backup the states.\n        data_loader (iterator): an iterator. Produce data as inputs to the model.\n        num_iters (int): number of iterations to compute the stats.\n    \"\"\"", "\n", "bn_layers", "=", "get_bn_modules", "(", "model", ")", "\n", "\n", "if", "len", "(", "bn_layers", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "# In order to make the running stats only reflect the current batch, the", "\n", "# momentum is disabled.", "\n", "# bn.running_mean = (1 - momentum) * bn.running_mean + momentum * batch_mean", "\n", "# Setting the momentum to 1.0 to compute the stats without momentum.", "\n", "", "momentum_actual", "=", "[", "bn", ".", "momentum", "for", "bn", "in", "bn_layers", "]", "# pyre-ignore", "\n", "for", "bn", "in", "bn_layers", ":", "\n", "        ", "bn", ".", "momentum", "=", "1.0", "\n", "\n", "# Note that running_var actually means \"running average of variance\"", "\n", "", "running_mean", "=", "[", "\n", "torch", ".", "zeros_like", "(", "bn", ".", "running_mean", ")", "for", "bn", "in", "bn_layers", "# pyre-ignore", "\n", "]", "\n", "running_var", "=", "[", "torch", ".", "zeros_like", "(", "bn", ".", "running_var", ")", "for", "bn", "in", "bn_layers", "]", "# pyre-ignore", "\n", "\n", "ind", "=", "-", "1", "\n", "for", "ind", ",", "inputs", "in", "enumerate", "(", "itertools", ".", "islice", "(", "data_loader", ",", "num_iters", ")", ")", ":", "\n", "        ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# No need to backward", "\n", "# my", "\n", "            ", "if", "choice_indices", "is", "not", "None", ":", "\n", "                ", "model", "(", "inputs", ",", "choice_indices", "=", "choice_indices", ")", "\n", "", "else", ":", "\n", "#", "\n", "                ", "model", "(", "inputs", ")", "\n", "\n", "", "", "for", "i", ",", "bn", "in", "enumerate", "(", "bn_layers", ")", ":", "\n", "# Accumulates the bn stats.", "\n", "            ", "running_mean", "[", "i", "]", "+=", "(", "bn", ".", "running_mean", "-", "running_mean", "[", "i", "]", ")", "/", "(", "ind", "+", "1", ")", "\n", "running_var", "[", "i", "]", "+=", "(", "bn", ".", "running_var", "-", "running_var", "[", "i", "]", ")", "/", "(", "ind", "+", "1", ")", "\n", "# We compute the \"average of variance\" across iterations.", "\n", "", "", "assert", "ind", "==", "num_iters", "-", "1", ",", "(", "\n", "\"update_bn_stats is meant to run for {} iterations, \"", "\n", "\"but the dataloader stops at {} iterations.\"", ".", "format", "(", "num_iters", ",", "ind", ")", "\n", ")", "\n", "\n", "for", "i", ",", "bn", "in", "enumerate", "(", "bn_layers", ")", ":", "\n", "# Sets the precise bn stats.", "\n", "        ", "bn", ".", "running_mean", "=", "running_mean", "[", "i", "]", "\n", "bn", ".", "running_var", "=", "running_var", "[", "i", "]", "\n", "bn", ".", "momentum", "=", "momentum_actual", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.precise_bn.get_bn_modules": [[95, 110], ["model.modules", "isinstance"], "function", ["None"], ["", "", "def", "get_bn_modules", "(", "model", ":", "nn", ".", "Module", ")", "->", "List", "[", "nn", ".", "Module", "]", ":", "\n", "    ", "\"\"\"\n    Find all BatchNorm (BN) modules that are in training mode. See\n    fvcore.precise_bn.BN_MODULE_TYPES for a list of all modules that are\n    included in this search.\n    Args:\n        model (nn.Module): a model possibly containing BN modules.\n    Returns:\n        list[nn.Module]: all BN modules in the model.\n    \"\"\"", "\n", "# Finds all the bn layers.", "\n", "bn_layers", "=", "[", "\n", "m", "for", "m", "in", "model", ".", "modules", "(", ")", "if", "m", ".", "training", "and", "isinstance", "(", "m", ",", "BN_MODULE_TYPES", ")", "\n", "]", "\n", "return", "bn_layers", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.train_helper.MixUpWrapper.__init__": [[21, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ",", "num_classes", ",", "dataloader", ",", "device", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.train_helper.MixUpWrapper.mixup_loader": [[27, 43], ["torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "train_helper.MixUpWrapper.mixup_loader.mixup"], "methods", ["None"], ["", "def", "mixup_loader", "(", "self", ",", "loader", ")", ":", "\n", "        ", "def", "mixup", "(", "alpha", ",", "num_classes", ",", "data", ",", "target", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "bs", "=", "data", ".", "size", "(", "0", ")", "\n", "c", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "bs", ")", ".", "cuda", "(", ")", "\n", "\n", "md", "=", "c", "*", "data", "+", "(", "1", "-", "c", ")", "*", "data", "[", "perm", ",", ":", "]", "\n", "mt", "=", "c", "*", "target", "+", "(", "1", "-", "c", ")", "*", "target", "[", "perm", ",", ":", "]", "\n", "return", "md", ",", "mt", "\n", "\n", "", "", "for", "input", ",", "target", "in", "loader", ":", "\n", "            ", "input", ",", "target", "=", "input", ".", "cuda", "(", "self", ".", "device", ")", ",", "target", ".", "cuda", "(", "self", ".", "device", ")", "\n", "target", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "target", ",", "self", ".", "num_classes", ")", "\n", "i", ",", "t", "=", "mixup", "(", "self", ".", "alpha", ",", "self", ".", "num_classes", ",", "input", ",", "target", ")", "\n", "yield", "i", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.train_helper.MixUpWrapper.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.train_helper.MixUpWrapper.__iter__": [[47, 49], ["train_helper.MixUpWrapper.mixup_loader"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.train_helper.MixUpWrapper.mixup_loader"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mixup_loader", "(", "self", ".", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.train_helper.get_selabel_vector": [[51, 69], ["target.size", "torch.zeros", "torch.zeros", "range", "torch.histc", "torch.histc", "target[].data.float"], "function", ["None"], ["", "", "def", "get_selabel_vector", "(", "target", ",", "nclass", ")", ":", "\n", "    ", "r\"\"\"Get SE-Loss Label in a batch\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor (BxHxW)\n        nclass: number of categories (int)\n    Output:\n        2D tensor (BxnClass)\n    \"\"\"", "\n", "batch", "=", "target", ".", "size", "(", "0", ")", "\n", "tvect", "=", "torch", ".", "zeros", "(", "batch", ",", "nclass", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "        ", "hist", "=", "torch", ".", "histc", "(", "target", "[", "i", "]", ".", "data", ".", "float", "(", ")", ",", "\n", "bins", "=", "nclass", ",", "min", "=", "0", ",", "\n", "max", "=", "nclass", "-", "1", ")", "\n", "vect", "=", "hist", ">", "0", "\n", "tvect", "[", "i", "]", "=", "vect", "\n", "", "return", "tvect", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.pallete.get_mask_pallete": [[13, 27], ["PIL.Image.fromarray", "npimg.squeeze().astype", "Image.fromarray.putpalette", "Image.fromarray.putpalette", "npimg.squeeze", "Image.fromarray.putpalette"], "function", ["None"], ["def", "get_mask_pallete", "(", "npimg", ",", "dataset", "=", "'detail'", ")", ":", "\n", "    ", "\"\"\"Get image color pallete for visualizing masks\"\"\"", "\n", "# recovery boundary", "\n", "if", "dataset", "==", "'pascal_voc'", ":", "\n", "        ", "npimg", "[", "npimg", "==", "21", "]", "=", "255", "\n", "# put colormap", "\n", "", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "squeeze", "(", ")", ".", "astype", "(", "'uint8'", ")", ")", "\n", "if", "dataset", "==", "'ade20k'", ":", "\n", "        ", "out_img", ".", "putpalette", "(", "adepallete", ")", "\n", "", "elif", "dataset", "==", "'citys'", ":", "\n", "        ", "out_img", ".", "putpalette", "(", "citypallete", ")", "\n", "", "elif", "dataset", "in", "(", "'detail'", ",", "'pascal_voc'", ",", "'pascal_aug'", ")", ":", "\n", "        ", "out_img", ".", "putpalette", "(", "vocpallete", ")", "\n", "", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.pallete._get_voc_pallete": [[28, 44], ["range"], "function", ["None"], ["", "def", "_get_voc_pallete", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "pallete", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "lab", "=", "j", "\n", "pallete", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "(", "lab", ">", "0", ")", ":", "\n", "                    ", "pallete", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "pallete", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.gather.gather_tensors": [[7, 37], ["torch.get_world_size", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.all_gather", "max", "numpy.zeros", "input_array.reshape", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.all_gather", "torch.Tensor().cuda", "torch.Tensor().cuda", "x.cpu().numpy", "int", "list", "torch.Tensor().cuda", "torch.Tensor().cuda", "x.cpu().numpy", "x[].reshape", "torch.Tensor", "torch.Tensor", "range", "x.prod", "map", "range", "torch.Tensor", "torch.Tensor", "enumerate", "numpy.array", "torch.Tensor", "torch.Tensor", "x.cpu", "torch.Tensor", "torch.Tensor", "x.cpu", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["def", "gather_tensors", "(", "input_array", ")", ":", "\n", "    ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "## gather shapes first", "\n", "myshape", "=", "input_array", ".", "shape", "\n", "mycount", "=", "input_array", ".", "size", "\n", "shape_tensor", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "myshape", ")", ")", ".", "cuda", "(", ")", "\n", "all_shape", "=", "[", "\n", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "myshape", ")", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "all_shape", ",", "shape_tensor", ")", "\n", "## compute largest shapes", "\n", "all_shape", "=", "[", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "x", "in", "all_shape", "]", "\n", "all_count", "=", "[", "int", "(", "x", ".", "prod", "(", ")", ")", "for", "x", "in", "all_shape", "]", "\n", "all_shape", "=", "[", "list", "(", "map", "(", "int", ",", "x", ")", ")", "for", "x", "in", "all_shape", "]", "\n", "max_count", "=", "max", "(", "all_count", ")", "\n", "## padding tensors and gather them", "\n", "output_tensors", "=", "[", "\n", "torch", ".", "Tensor", "(", "max_count", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "padded_input_array", "=", "np", ".", "zeros", "(", "max_count", ")", "\n", "padded_input_array", "[", ":", "mycount", "]", "=", "input_array", ".", "reshape", "(", "-", "1", ")", "\n", "input_tensor", "=", "torch", ".", "Tensor", "(", "padded_input_array", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_gather", "(", "output_tensors", ",", "input_tensor", ")", "\n", "## unpadding gathered tensors", "\n", "padded_output", "=", "[", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "x", "in", "output_tensors", "]", "\n", "output", "=", "[", "\n", "x", "[", ":", "all_count", "[", "i", "]", "]", ".", "reshape", "(", "all_shape", "[", "i", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "padded_output", ")", "\n", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.gather.gather_tensors_batch": [[39, 70], ["torch.get_rank", "range", "gather.gather_tensors", "all_features.append", "numpy.concatenate", "range", "numpy.concatenate", "min", "len", "range", "range", "len", "range"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.gather.gather_tensors"], ["", "def", "gather_tensors_batch", "(", "input_array", ",", "part_size", "=", "100", ",", "ret_rank", "=", "-", "1", ")", ":", "\n", "# batch-wize gathering to avoid CUDA out of memory", "\n", "    ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "all_features", "=", "[", "]", "\n", "part_num", "=", "input_array", ".", "shape", "[", "0", "]", "//", "part_size", "+", "1", "if", "input_array", ".", "shape", "[", "\n", "0", "]", "%", "part_size", "!=", "0", "else", "input_array", ".", "shape", "[", "0", "]", "//", "part_size", "\n", "for", "i", "in", "range", "(", "part_num", ")", ":", "\n", "        ", "part_feat", "=", "input_array", "[", "i", "*", "\n", "part_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "\n", "part_size", ",", "input_array", ".", "shape", "[", "0", "]", ")", ",", "\n", "...", "]", "\n", "assert", "part_feat", ".", "shape", "[", "\n", "0", "]", ">", "0", ",", "\"rank: {}, length of part features should > 0\"", ".", "format", "(", "rank", ")", "\n", "#print(\"rank: {}, gather part: {}/{}, length: {}\".format(rank, i, part_num, len(part_feat)))", "\n", "gather_part_feat", "=", "gather_tensors", "(", "part_feat", ")", "\n", "all_features", ".", "append", "(", "gather_part_feat", ")", "\n", "", "if", "ret_rank", "==", "-", "1", ":", "\n", "        ", "all_features", "=", "[", "\n", "np", ".", "concatenate", "(", "[", "all_features", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "part_num", ")", "]", ",", "\n", "axis", "=", "0", ")", "for", "j", "in", "range", "(", "len", "(", "all_features", "[", "0", "]", ")", ")", "\n", "]", "\n", "return", "all_features", "\n", "", "else", ":", "\n", "        ", "if", "rank", "==", "ret_rank", ":", "\n", "            ", "all_features", "=", "[", "\n", "np", ".", "concatenate", "(", "[", "all_features", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "part_num", ")", "]", ",", "\n", "axis", "=", "0", ")", "for", "j", "in", "range", "(", "len", "(", "all_features", "[", "0", "]", ")", ")", "\n", "]", "\n", "return", "all_features", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.config_tools.traverse_replace": [[3, 13], ["isinstance", "d.items", "isinstance", "config_tools.traverse_replace", "config_tools.traverse_replace"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.config_tools.traverse_replace", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.config_tools.traverse_replace"], ["def", "traverse_replace", "(", "d", ",", "key", ",", "value", ")", ":", "\n", "    ", "if", "isinstance", "(", "d", ",", "(", "dict", ",", "Config", ")", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "key", ":", "\n", "                ", "d", "[", "k", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "traverse_replace", "(", "v", ",", "key", ",", "value", ")", "\n", "", "", "", "elif", "isinstance", "(", "d", ",", "(", "list", ",", "tuple", ",", "set", ")", ")", ":", "\n", "        ", "for", "v", "in", "d", ":", "\n", "            ", "traverse_replace", "(", "v", ",", "key", ",", "value", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.nondist_forward_collect": [[9, 37], ["mmcv.ProgressBar", "enumerate", "results[].keys", "len", "results.append", "mmcv.ProgressBar.update", "numpy.concatenate", "torch.no_grad", "func", "batch[].numpy"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update"], ["def", "nondist_forward_collect", "(", "func", ",", "data_loader", ",", "length", ")", ":", "\n", "    ", "'''Forward and collect network outputs.\n\n    This function performs forward propagation and collects outputs.\n    It can be used to collect results, features, losses, etc.\n\n    Args:\n        func (function): The function to process data. The output must be\n            a dictionary of CPU tensors.\n        length (int): Expected length of output arrays.\n\n    Returns:\n        results_all (dict(np.ndarray)): The concatenated outputs.\n    '''", "\n", "results", "=", "[", "]", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "data_loader", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "func", "(", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "results_all", "=", "{", "}", "\n", "for", "k", "in", "results", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "results_all", "[", "k", "]", "=", "np", ".", "concatenate", "(", "\n", "[", "batch", "[", "k", "]", ".", "numpy", "(", ")", "for", "batch", "in", "results", "]", ",", "axis", "=", "0", ")", "\n", "assert", "results_all", "[", "k", "]", ".", "shape", "[", "0", "]", "==", "length", "\n", "", "return", "results_all", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.dist_forward_collect": [[39, 84], ["enumerate", "results[].keys", "mmcv.ProgressBar", "results.append", "numpy.concatenate", "len", "torch.no_grad", "func", "mmcv.ProgressBar.update", "gather.gather_tensors_batch", "gather.gather_tensors_batch", "batch[].numpy", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.gather.gather_tensors_batch", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.gather.gather_tensors_batch"], ["", "def", "dist_forward_collect", "(", "func", ",", "data_loader", ",", "rank", ",", "length", ",", "ret_rank", "=", "-", "1", ")", ":", "\n", "    ", "'''Forward and collect network outputs in a distributed manner.\n\n    This function performs forward propagation and collects outputs.\n    It can be used to collect results, features, losses, etc.\n\n    Args:\n        func (function): The function to process data. The output must be\n            a dictionary of CPU tensors.\n        rank (int): This process id.\n        length (int): Expected length of output arrays.\n        ret_rank (int): The process that returns.\n            Other processes will return None.\n\n    Returns:\n        results_all (dict(np.ndarray)): The concatenated outputs.\n    '''", "\n", "results", "=", "[", "]", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "data_loader", ")", ")", "\n", "", "for", "idx", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "func", "(", "**", "data", ")", "# dict{key: tensor}", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "results_all", "=", "{", "}", "\n", "for", "k", "in", "results", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "results_cat", "=", "np", ".", "concatenate", "(", "[", "batch", "[", "k", "]", ".", "numpy", "(", ")", "for", "batch", "in", "results", "]", ",", "\n", "axis", "=", "0", ")", "\n", "if", "ret_rank", "==", "-", "1", ":", "\n", "            ", "results_gathered", "=", "gather_tensors_batch", "(", "results_cat", ",", "part_size", "=", "20", ")", "\n", "results_strip", "=", "np", ".", "concatenate", "(", "results_gathered", ",", "axis", "=", "0", ")", "[", ":", "length", "]", "\n", "", "else", ":", "\n", "            ", "results_gathered", "=", "gather_tensors_batch", "(", "\n", "results_cat", ",", "part_size", "=", "20", ",", "ret_rank", "=", "ret_rank", ")", "\n", "if", "rank", "==", "ret_rank", ":", "\n", "                ", "results_strip", "=", "np", ".", "concatenate", "(", "\n", "results_gathered", ",", "axis", "=", "0", ")", "[", ":", "length", "]", "\n", "", "else", ":", "\n", "                ", "results_strip", "=", "None", "\n", "", "", "results_all", "[", "k", "]", "=", "results_strip", "\n", "", "return", "results_all", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.get_model_complexity_info": [[37, 68], ["flops_counter.add_flops_counting_methods", "add_flops_counting_methods.eval", "add_flops_counting_methods.start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "flops_counter.get_model_parameters_number", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "torch.ones().new_empty", "torch.ones().new_empty", "add_flops_counting_methods.", "flops_counter.print_model_with_flops", "flops_counter.flops_to_string", "flops_counter.params_to_string", "torch.ones", "torch.ones", "next", "next", "add_flops_counting_methods.parameters", "add_flops_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_flops_counting_methods", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.start_flops_count", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.get_model_parameters_number", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.stop_flops_count", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.print_model_with_flops", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.flops_to_string", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.params_to_string"], ["def", "get_model_complexity_info", "(", "model", ",", "\n", "input_res", ",", "\n", "print_per_layer_stat", "=", "True", ",", "\n", "as_strings", "=", "True", ",", "\n", "input_constructor", "=", "None", ",", "\n", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", "\n", "assert", "len", "(", "input_res", ")", ">=", "2", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", "\n", "flops_model", ".", "start_flops_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "batch", "=", "torch", ".", "ones", "(", "(", ")", ")", ".", "new_empty", "(", "\n", "(", "1", ",", "*", "input_res", ")", ",", "\n", "dtype", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "dtype", ",", "\n", "device", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "flops_model", "(", "batch", ")", "\n", "\n", "", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ",", "ost", "=", "ost", ")", "\n", "", "flops_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "params_count", "=", "get_model_parameters_number", "(", "flops_model", ")", "\n", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "\n", "if", "as_strings", ":", "\n", "        ", "return", "flops_to_string", "(", "flops_count", ")", ",", "params_to_string", "(", "params_count", ")", "\n", "\n", "", "return", "flops_count", ",", "params_count", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.flops_to_string": [[70, 89], ["str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "'GMac'", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "flops", "//", "10", "**", "9", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' GMac'", "\n", "", "elif", "flops", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' MMac'", "\n", "", "elif", "flops", "//", "10", "**", "3", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' KMac'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "'GMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'MMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'KMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.params_to_string": [[91, 110], ["str", "str", "round", "str", "round"], "function", ["None"], ["", "", "", "def", "params_to_string", "(", "params_num", ")", ":", "\n", "    ", "\"\"\"converting number to string\n\n    :param float params_num: number\n    :returns str: number\n\n    >>> params_to_string(1e9)\n    '1000.0 M'\n    >>> params_to_string(2e5)\n    '200.0 k'\n    >>> params_to_string(3e-9)\n    '3e-09'\n    \"\"\"", "\n", "if", "params_num", "//", "10", "**", "6", ">", "0", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "6", ",", "2", ")", ")", "+", "' M'", "\n", "", "elif", "params_num", "//", "10", "**", "3", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "3", ",", "2", ")", ")", "+", "' k'", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "params_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.print_model_with_flops": [[112, 151], ["model.compute_average_flops_cost", "model.apply", "print", "model.apply", "flops_counter.is_supported_instance", "flops_counter..accumulate_flops", "accumulate_flops.__get__", "flops_repr.__get__", "hasattr", "hasattr", "flops_counter..children", "m.accumulate_flops", "flops_counter.flops_to_string", "flops_counter..original_extra_repr"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.flops_to_string"], ["", "", "def", "print_model_with_flops", "(", "model", ",", "units", "=", "'GMac'", ",", "precision", "=", "3", ",", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "total_flops", "=", "model", ".", "compute_average_flops_cost", "(", ")", "\n", "\n", "def", "accumulate_flops", "(", "self", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "__flops__", "/", "model", ".", "__batch_counter__", "\n", "", "else", ":", "\n", "            ", "sum", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "sum", "+=", "m", ".", "accumulate_flops", "(", ")", "\n", "", "return", "sum", "\n", "\n", "", "", "def", "flops_repr", "(", "self", ")", ":", "\n", "        ", "accumulated_flops_cost", "=", "self", ".", "accumulate_flops", "(", ")", "\n", "return", "', '", ".", "join", "(", "[", "\n", "flops_to_string", "(", "\n", "accumulated_flops_cost", ",", "units", "=", "units", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} MACs'", ".", "format", "(", "accumulated_flops_cost", "/", "total_flops", ")", ",", "\n", "self", ".", "original_extra_repr", "(", ")", "\n", "]", ")", "\n", "\n", "", "def", "add_extra_repr", "(", "m", ")", ":", "\n", "        ", "m", ".", "accumulate_flops", "=", "accumulate_flops", ".", "__get__", "(", "m", ")", "\n", "flops_extra_repr", "=", "flops_repr", ".", "__get__", "(", "m", ")", "\n", "if", "m", ".", "extra_repr", "!=", "flops_extra_repr", ":", "\n", "            ", "m", ".", "original_extra_repr", "=", "m", ".", "extra_repr", "\n", "m", ".", "extra_repr", "=", "flops_extra_repr", "\n", "assert", "m", ".", "extra_repr", "!=", "m", ".", "original_extra_repr", "\n", "\n", "", "", "def", "del_extra_repr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'original_extra_repr'", ")", ":", "\n", "            ", "m", ".", "extra_repr", "=", "m", ".", "original_extra_repr", "\n", "del", "m", ".", "original_extra_repr", "\n", "", "if", "hasattr", "(", "m", ",", "'accumulate_flops'", ")", ":", "\n", "            ", "del", "m", ".", "accumulate_flops", "\n", "\n", "", "", "model", ".", "apply", "(", "add_extra_repr", ")", "\n", "print", "(", "model", ",", "file", "=", "ost", ")", "\n", "model", ".", "apply", "(", "del_extra_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.get_model_parameters_number": [[153, 156], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_model_parameters_number", "(", "model", ")", ":", "\n", "    ", "params_num", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "params_num", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_flops_counting_methods": [[158, 176], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count", "net_main_module.apply"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.reset_flops_count"], ["", "def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "    ", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "\n", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "\n", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "\n", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "\n", "# Adding variables necessary for masked flops computation", "\n", "net_main_module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.compute_average_flops_cost": [[178, 192], ["flops_counter..modules", "flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.is_supported_instance"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Returns current mean flops consumption per image.\n    \"\"\"", "\n", "\n", "batches_count", "=", "self", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.start_flops_count": [[194, 203], ["flops_counter.add_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_batch_counter_hook_function"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n    \"\"\"", "\n", "add_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.stop_flops_count": [[205, 214], ["flops_counter.remove_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.remove_batch_counter_hook_function"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n    \"\"\"", "\n", "remove_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.reset_flops_count": [[216, 224], ["flops_counter.add_batch_counter_variables_or_reset", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_batch_counter_variables_or_reset"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Resets statistics computed so far.\n    \"\"\"", "\n", "add_batch_counter_variables_or_reset", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_flops_mask": [[226, 233], ["module.apply", "isinstance"], "function", ["None"], ["", "def", "add_flops_mask", "(", "module", ",", "mask", ")", ":", "\n", "\n", "    ", "def", "add_flops_mask_func", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "module", ".", "__mask__", "=", "mask", "\n", "\n", "", "", "module", ".", "apply", "(", "add_flops_mask_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.remove_flops_mask": [[235, 237], ["module.apply"], "function", ["None"], ["", "def", "remove_flops_mask", "(", "module", ")", ":", "\n", "    ", "module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.is_supported_instance": [[239, 244], ["issubclass", "type"], "function", ["None"], ["", "def", "is_supported_instance", "(", "module", ")", ":", "\n", "    ", "for", "mod", "in", "hook_mapping", ":", "\n", "        ", "if", "issubclass", "(", "type", "(", "module", ")", ",", "mod", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.empty_flops_counter_hook": [[246, 248], ["None"], "function", ["None"], ["", "def", "empty_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "__flops__", "+=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.upsample_flops_counter_hook": [[250, 257], ["int"], "function", ["None"], ["", "def", "upsample_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "output_size", "=", "output", "[", "0", "]", "\n", "batch_size", "=", "output_size", ".", "shape", "[", "0", "]", "\n", "output_elements_count", "=", "batch_size", "\n", "for", "val", "in", "output_size", ".", "shape", "[", "1", ":", "]", ":", "\n", "        ", "output_elements_count", "*=", "val", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "output_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.relu_flops_counter_hook": [[259, 262], ["output.numel", "int"], "function", ["None"], ["", "def", "relu_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "active_elements_count", "=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__flops__", "+=", "int", "(", "active_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.linear_flops_counter_hook": [[264, 268], ["int"], "function", ["None"], ["", "def", "linear_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "batch_size", "*", "input", ".", "shape", "[", "1", "]", "*", "output", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.pool_flops_counter_hook": [[270, 273], ["int", "numpy.prod"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.bn_flops_counter_hook": [[275, 282], ["numpy.prod", "int"], "function", ["None"], ["", "def", "bn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_flops", "=", "np", ".", "prod", "(", "input", ".", "shape", ")", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "*=", "2", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.gn_flops_counter_hook": [[284, 293], ["numpy.prod", "int"], "function", ["None"], ["", "def", "gn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "elems", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "# there is no precise FLOPs estimation of computing mean and variance,", "\n", "# and we just set it 2 * elems: half muladds for computing", "\n", "# means and half for computing vars", "\n", "batch_flops", "=", "3", "*", "elems", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "+=", "elems", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.deconv_flops_counter_hook": [[295, 320], ["int"], "function", ["None"], ["", "def", "deconv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "input_height", ",", "input_width", "=", "input", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "(", "\n", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "filters_per_channel", ")", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "input_height", "*", "input_width", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "bias_flops", "=", "0", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "bias_flops", "=", "out_channels", "*", "batch_size", "*", "output_height", "*", "output_height", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.conv_flops_counter_hook": [[322, 358], ["list", "list", "int", "numpy.prod", "conv_module.__mask__.expand", "conv_module.__mask__.expand.sum", "numpy.prod"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "list", "(", "conv_module", ".", "kernel_size", ")", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "np", ".", "prod", "(", "\n", "kernel_dims", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "\n", "if", "conv_module", ".", "__mask__", "is", "not", "None", ":", "\n", "# (b, 1, h, w)", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "flops_mask", "=", "conv_module", ".", "__mask__", ".", "expand", "(", "batch_size", ",", "1", ",", "output_height", ",", "\n", "output_width", ")", "\n", "active_elements_count", "=", "flops_mask", ".", "sum", "(", ")", "\n", "\n", "", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.batch_counter_hook": [[386, 396], ["len", "len", "print"], "function", ["None"], ["def", "batch_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "if", "len", "(", "input", ")", ">", "0", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "        ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Warning! No positional inputs found for a module, '", "\n", "'assuming batch size is 1.'", ")", "\n", "", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_batch_counter_variables_or_reset": [[398, 400], ["None"], "function", ["None"], ["", "def", "add_batch_counter_variables_or_reset", "(", "module", ")", ":", "\n", "    ", "module", ".", "__batch_counter__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_batch_counter_hook_function": [[402, 408], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.remove_batch_counter_hook_function": [[410, 414], ["hasattr", "module.__batch_counter_handle__.remove"], "function", ["None"], ["", "def", "remove_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "module", ".", "__batch_counter_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__batch_counter_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_flops_counter_variable_or_reset": [[416, 419], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.is_supported_instance"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_flops_counter_hook_function": [[421, 432], ["flops_counter.is_supported_instance", "hasattr", "hook_mapping.items", "issubclass", "type", "module.register_forward_hook"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.is_supported_instance"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "return", "\n", "\n", "", "for", "mod_type", ",", "counter_hook", "in", "hook_mapping", ".", "items", "(", ")", ":", "\n", "            ", "if", "issubclass", "(", "type", "(", "module", ")", ",", "mod_type", ")", ":", "\n", "                ", "handle", "=", "module", ".", "register_forward_hook", "(", "counter_hook", ")", "\n", "break", "\n", "\n", "", "", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.remove_flops_counter_hook_function": [[434, 439], ["flops_counter.is_supported_instance", "hasattr", "module.__flops_handle__.remove"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.is_supported_instance"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__flops_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.add_flops_mask_variable_or_reset": [[443, 446], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.flops_counter.is_supported_instance"], ["", "", "", "def", "add_flops_mask_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__mask__", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.get_root_logger": [[6, 41], ["logging.getLogger", "logging.getLogger.hasHandlers", "logging.basicConfig", "mmcv.runner.get_dist_info", "logging.getLogger.setLevel", "__name__.split", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.Formatter"], "function", ["None"], ["def", "get_root_logger", "(", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Get the root logger.\n\n    The logger will be initialized if it has not been initialized. By default a\n    StreamHandler will be added. If `log_file` is specified, a FileHandler will\n    also be added. The name of the root logger is the top-level package name,\n    e.g., \"openselfsup\".\n\n    Args:\n        log_file (str | None): The log filename. If specified, a FileHandler\n            will be added to the root logger.\n        log_level (int): The root logger level. Note that only the process of\n            rank 0 is affected, while other processes will set the level to\n            \"Error\" and be silent most of the time.\n\n    Returns:\n        logging.Logger: The root logger.\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "# i.e., openselfsup", "\n", "# if the logger has been initialized, just return it", "\n", "if", "logger", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "return", "logger", "\n", "\n", "", "format_str", "=", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", "\n", "logging", ".", "basicConfig", "(", "format", "=", "format_str", ",", "level", "=", "log_level", ")", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "'ERROR'", ")", "\n", "", "elif", "log_file", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "'w'", ")", "\n", "file_handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "format_str", ")", ")", "\n", "file_handler", ".", "setLevel", "(", "log_level", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log": [[43, 67], ["print", "logger.get_root_logger", "get_root_logger.log", "isinstance", "logger.log", "TypeError"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.get_root_logger"], ["", "def", "print_log", "(", "msg", ",", "logger", "=", "None", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Print a log message.\n\n    Args:\n        msg (str): The message to be logged.\n        logger (logging.Logger | str | None): The logger to be used. Some\n            special loggers are:\n            - \"root\": the root logger obtained with `get_root_logger()`.\n            - \"silent\": no message will be printed.\n            - None: The `print()` method will be used to print log messages.\n        level (int): Logging level. Only available when `logger` is a Logger\n            object or \"root\".\n    \"\"\"", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "print", "(", "msg", ")", "\n", "", "elif", "logger", "==", "'root'", ":", "\n", "        ", "_logger", "=", "get_root_logger", "(", ")", "\n", "_logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "", "elif", "isinstance", "(", "logger", ",", "logging", ".", "Logger", ")", ":", "\n", "        ", "logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "", "elif", "logger", "!=", "'silent'", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'logger should be either a logging.Logger object, \"root\", '", "\n", "'\"silent\" or None, but got {}'", ".", "format", "(", "logger", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.__init__": [[9, 12], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.__repr__": [[13, 17], ["list", "registry.Registry._module_dict.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'(name={}, items={})'", ".", "format", "(", "\n", "self", ".", "_name", ",", "list", "(", "self", ".", "_module_dict", ".", "keys", "(", ")", ")", ")", "\n", "return", "format_str", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.name": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.module_dict": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get": [[26, 28], ["registry.Registry._module_dict.get"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry._register_module": [[29, 43], ["inspect.isclass", "TypeError", "KeyError", "type"], "methods", ["None"], ["", "def", "_register_module", "(", "self", ",", "module_class", ",", "force", "=", "False", ")", ":", "\n", "        ", "\"\"\"Register a module.\n\n        Args:\n            module (:obj:`nn.Module`): Module to be registered.\n        \"\"\"", "\n", "if", "not", "inspect", ".", "isclass", "(", "module_class", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'module must be a class, but got {}'", ".", "format", "(", "\n", "type", "(", "module_class", ")", ")", ")", "\n", "", "module_name", "=", "module_class", ".", "__name__", "\n", "if", "not", "force", "and", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is already registered in {}'", ".", "format", "(", "\n", "module_name", ",", "self", ".", "name", ")", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module_class", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.register_module": [[44, 49], ["registry.Registry._register_module", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry._register_module"], ["", "def", "register_module", "(", "self", ",", "cls", "=", "None", ",", "force", "=", "False", ")", ":", "\n", "        ", "if", "cls", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "register_module", ",", "force", "=", "force", ")", "\n", "", "self", ".", "_register_module", "(", "cls", ",", "force", "=", "force", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg": [[51, 80], ["cfg.copy", "cfg.copy.pop", "mmcv.is_str", "registry.get.", "isinstance", "isinstance", "registry.get", "inspect.isclass", "default_args.items", "KeyError", "TypeError", "cfg.copy.setdefault", "type"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get"], ["", "", "def", "build_from_cfg", "(", "cfg", ",", "registry", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build a module from config dict.\n\n    Args:\n        cfg (dict): Config dict. It should at least contain the key \"type\".\n        registry (:obj:`Registry`): The registry to search the type from.\n        default_args (dict, optional): Default initialization arguments.\n\n    Returns:\n        obj: The constructed object.\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "assert", "isinstance", "(", "default_args", ",", "dict", ")", "or", "default_args", "is", "None", "\n", "args", "=", "cfg", ".", "copy", "(", ")", "\n", "obj_type", "=", "args", ".", "pop", "(", "'type'", ")", "\n", "if", "mmcv", ".", "is_str", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "registry", ".", "get", "(", "obj_type", ")", "\n", "if", "obj_cls", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not in the {} registry'", ".", "format", "(", "\n", "obj_type", ",", "registry", ".", "name", ")", ")", "\n", "", "", "elif", "inspect", ".", "isclass", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "obj_type", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type must be a str or valid type, but got {}'", ".", "format", "(", "\n", "type", "(", "obj_type", ")", ")", ")", "\n", "", "if", "default_args", "is", "not", "None", ":", "\n", "        ", "for", "name", ",", "value", "in", "default_args", ".", "items", "(", ")", ":", "\n", "            ", "args", ".", "setdefault", "(", "name", ",", "value", ")", "\n", "", "", "return", "obj_cls", "(", "**", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.misc.tensor2imgs": [[8, 19], ["tensor.size", "numpy.array", "numpy.array", "range", "tensor[].cpu().numpy().transpose", "mmcv.imdenormalize().astype", "imgs.append", "numpy.ascontiguousarray", "tensor[].cpu().numpy", "mmcv.imdenormalize", "tensor[].cpu"], "function", ["None"], ["import", "warnings", "\n", "\n", "__all__", "=", "[", "'AverageMeter'", ",", "'EncodingDeprecationWarning'", "]", "\n", "\n", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "#self.val = 0", "\n", "        ", "self", ".", "sum", "=", "0", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.misc.multi_apply": [[21, 25], ["six.moves.map", "tuple", "functools.partial", "six.moves.map", "six.moves.zip"], "function", ["None"], ["\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "#self.val = val", "\n", "        ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.misc.unmap": [[27, 38], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "avg", "=", "0", "if", "self", ".", "count", "==", "0", "else", "self", ".", "sum", "/", "self", ".", "count", "\n", "return", "avg", "\n", "\n", "", "", "class", "EncodingDeprecationWarning", "(", "DeprecationWarning", ")", ":", "\n", "    ", "pass", "\n", "\n", "", "warnings", ".", "simplefilter", "(", "'once'", ",", "EncodingDeprecationWarning", ")", "\n", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect_env.collect_env": [[14, 59], ["sys.version.replace", "torch.cuda.is_available", "subprocess.check_output", "gcc.decode().strip.decode().strip", "torch.__config__.show", "collections.defaultdict", "range", "collections.defaultdict.items", "os.isdir", "torch.cuda.device_count", "devices[].append", "gcc.decode().strip.decode", "os.join", "subprocess.check_output", "nvcc.decode().strip.decode().strip", "str", "nvcc.decode().strip.decode", "torch.cuda.get_device_name"], "function", ["None"], ["def", "collect_env", "(", ")", ":", "\n", "    ", "env_info", "=", "{", "}", "\n", "env_info", "[", "'sys.platform'", "]", "=", "sys", ".", "platform", "\n", "env_info", "[", "'Python'", "]", "=", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "\n", "cuda_available", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "env_info", "[", "'CUDA available'", "]", "=", "cuda_available", "\n", "\n", "if", "cuda_available", ":", "\n", "        ", "from", "torch", ".", "utils", ".", "cpp_extension", "import", "CUDA_HOME", "\n", "env_info", "[", "'CUDA_HOME'", "]", "=", "CUDA_HOME", "\n", "\n", "if", "CUDA_HOME", "is", "not", "None", "and", "osp", ".", "isdir", "(", "CUDA_HOME", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "nvcc", "=", "osp", ".", "join", "(", "CUDA_HOME", ",", "'bin/nvcc'", ")", "\n", "nvcc", "=", "subprocess", ".", "check_output", "(", "\n", "'\"{}\" -V | tail -n1'", ".", "format", "(", "nvcc", ")", ",", "shell", "=", "True", ")", "\n", "nvcc", "=", "nvcc", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", "\n", "", "except", "subprocess", ".", "SubprocessError", ":", "\n", "                ", "nvcc", "=", "'Not Available'", "\n", "", "env_info", "[", "'NVCC'", "]", "=", "nvcc", "\n", "\n", "", "devices", "=", "defaultdict", "(", "list", ")", "\n", "for", "k", "in", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ":", "\n", "            ", "devices", "[", "torch", ".", "cuda", ".", "get_device_name", "(", "k", ")", "]", ".", "append", "(", "str", "(", "k", ")", ")", "\n", "", "for", "name", ",", "devids", "in", "devices", ".", "items", "(", ")", ":", "\n", "            ", "env_info", "[", "'GPU '", "+", "','", ".", "join", "(", "devids", ")", "]", "=", "name", "\n", "\n", "", "", "gcc", "=", "subprocess", ".", "check_output", "(", "'gcc --version | head -n1'", ",", "shell", "=", "True", ")", "\n", "gcc", "=", "gcc", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", "\n", "env_info", "[", "'GCC'", "]", "=", "gcc", "\n", "\n", "env_info", "[", "'PyTorch'", "]", "=", "torch", ".", "__version__", "\n", "env_info", "[", "'PyTorch compiling details'", "]", "=", "torch", ".", "__config__", ".", "show", "(", ")", "\n", "\n", "env_info", "[", "'TorchVision'", "]", "=", "torchvision", ".", "__version__", "\n", "\n", "env_info", "[", "'OpenCV'", "]", "=", "cv2", ".", "__version__", "\n", "\n", "env_info", "[", "'MMCV'", "]", "=", "mmcv", ".", "__version__", "\n", "env_info", "[", "'OpenSelfSup'", "]", "=", "openselfsup", ".", "__version__", "\n", "#from openselfsup.ops import get_compiler_version, get_compiling_cuda_version", "\n", "#env_info['OpenSelfSup Compiler'] = get_compiler_version()", "\n", "#env_info['OpenSelfSup CUDA Compiler'] = get_compiling_cuda_version()", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.__init__": [[10, 46], ["len", "torch.zeros", "torch.LongTensor", "enumerate", "probs.sum", "probs.div_", "smaller.pop", "larger.pop", "probs.sum", "smaller.append", "larger.append", "len", "len", "smaller.append", "larger.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probs", ")", ":", "\n", "\n", "        ", "if", "probs", ".", "sum", "(", ")", ">", "1", ":", "\n", "            ", "probs", ".", "div_", "(", "probs", ".", "sum", "(", ")", ")", "\n", "", "K", "=", "len", "(", "probs", ")", "\n", "self", ".", "prob", "=", "torch", ".", "zeros", "(", "K", ")", "\n", "self", ".", "alias", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", "*", "K", ")", "\n", "\n", "# Sort the data into the outcomes with probabilities", "\n", "# that are larger and smaller than 1/K.", "\n", "smaller", "=", "[", "]", "\n", "larger", "=", "[", "]", "\n", "for", "kk", ",", "prob", "in", "enumerate", "(", "probs", ")", ":", "\n", "            ", "self", ".", "prob", "[", "kk", "]", "=", "K", "*", "prob", "\n", "if", "self", ".", "prob", "[", "kk", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "kk", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "kk", ")", "\n", "\n", "# Loop though and create little binary mixtures that", "\n", "# appropriately allocate the larger outcomes over the", "\n", "# overall uniform mixture.", "\n", "", "", "while", "len", "(", "smaller", ")", ">", "0", "and", "len", "(", "larger", ")", ">", "0", ":", "\n", "            ", "small", "=", "smaller", ".", "pop", "(", ")", "\n", "large", "=", "larger", ".", "pop", "(", ")", "\n", "\n", "self", ".", "alias", "[", "small", "]", "=", "large", "\n", "self", ".", "prob", "[", "large", "]", "=", "(", "self", ".", "prob", "[", "large", "]", "-", "1.0", ")", "+", "self", ".", "prob", "[", "small", "]", "\n", "\n", "if", "self", ".", "prob", "[", "large", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "large", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "large", ")", "\n", "\n", "", "", "for", "last_one", "in", "smaller", "+", "larger", ":", "\n", "            ", "self", ".", "prob", "[", "last_one", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda": [[47, 50], ["alias_multinomial.AliasMethod.prob.cuda", "alias_multinomial.AliasMethod.alias.cuda"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "prob", "=", "self", ".", "prob", ".", "cuda", "(", ")", "\n", "self", ".", "alias", "=", "self", ".", "alias", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.draw": [[51, 67], ["alias_multinomial.AliasMethod.alias.size", "torch.zeros().random_", "alias_multinomial.AliasMethod.prob.index_select", "alias_multinomial.AliasMethod.alias.index_select", "torch.bernoulli", "torch.zeros().random_.mul", "alias_multinomial.AliasMethod.mul", "torch.bernoulli.long", "torch.zeros"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "N", ")", ":", "\n", "        ", "'''\n            Draw N samples from multinomial\n        '''", "\n", "K", "=", "self", ".", "alias", ".", "size", "(", "0", ")", "\n", "\n", "kk", "=", "torch", ".", "zeros", "(", "\n", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "prob", ".", "device", ")", ".", "random_", "(", "0", ",", "K", ")", "\n", "prob", "=", "self", ".", "prob", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "alias", "=", "self", ".", "alias", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "# b is whether a random number is greater than q", "\n", "b", "=", "torch", ".", "bernoulli", "(", "prob", ")", "\n", "oq", "=", "kk", ".", "mul", "(", "b", ".", "long", "(", ")", ")", "\n", "oj", "=", "alias", ".", "mul", "(", "(", "1", "-", "b", ")", ".", "long", "(", ")", ")", "\n", "\n", "return", "oq", "+", "oj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.optimizers.LARS.__init__": [[32, 57], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "lr", "=", "required", ",", "\n", "momentum", "=", "0", ",", "\n", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "\n", "eta", "=", "0.001", ",", "\n", "nesterov", "=", "False", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "", "if", "eta", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid LARS coefficient value: {}\"", ".", "format", "(", "eta", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "\n", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ",", "eta", "=", "eta", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "\n", "", "super", "(", "LARS", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.optimizers.LARS.__setstate__": [[58, 62], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.optimizers.LARS.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "LARS", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.optimizers.LARS.step": [[63, 117], ["torch.no_grad", "group.get", "torch.enable_grad", "closure", "d_p.add.add.add().mul", "p.add_", "torch.norm().item", "torch.norm().item", "d_p.add.add.add", "torch.clone().detach", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.norm", "torch.norm", "torch.clone", "torch.clone().detach.mul_"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "eta", "=", "group", "[", "'eta'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "lr", "=", "group", "[", "'lr'", "]", "\n", "lars_exclude", "=", "group", ".", "get", "(", "'lars_exclude'", ",", "False", ")", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "d_p", "=", "p", ".", "grad", "\n", "\n", "if", "lars_exclude", ":", "\n", "                    ", "local_lr", "=", "1.", "\n", "", "else", ":", "\n", "                    ", "weight_norm", "=", "torch", ".", "norm", "(", "p", ")", ".", "item", "(", ")", "\n", "grad_norm", "=", "torch", ".", "norm", "(", "d_p", ")", ".", "item", "(", ")", "\n", "# Compute local learning rate for this layer", "\n", "local_lr", "=", "eta", "*", "weight_norm", "/", "(", "grad_norm", "+", "weight_decay", "*", "weight_norm", ")", "\n", "\n", "", "actual_lr", "=", "local_lr", "*", "lr", "\n", "d_p", "=", "d_p", ".", "add", "(", "p", ",", "alpha", "=", "weight_decay", ")", ".", "mul", "(", "actual_lr", ")", "\n", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "d_p", ",", "alpha", "=", "1", "-", "dampening", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "buf", ",", "alpha", "=", "momentum", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "", "", "p", ".", "add_", "(", "-", "d_p", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer": [[13, 57], ["cfg.copy", "cfg.copy.pop", "isinstance", "cfg.copy.pop", "cfg.copy.setdefault", "norm_layer.parameters", "isinstance", "KeyError", "str", "norm_layer", "norm_layer", "norm_layer._specify_ddp_gpu_num"], "function", ["None"], ["def", "build_norm_layer", "(", "cfg", ",", "num_features", ",", "postfix", "=", "''", ")", ":", "\n", "    ", "\"\"\" Build normalization layer\n\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): identify norm layer type.\n            layer args: args needed to instantiate a norm layer.\n            requires_grad (bool): [optional] whether stop gradient updates\n        num_features (int): number of channels from input.\n        postfix (int, str): appended into norm abbreviation to\n            create named layer.\n\n    Returns:\n        name (str): abbreviation + postfix\n        layer (nn.Module): created norm layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "assert", "isinstance", "(", "postfix", ",", "(", "int", ",", "str", ")", ")", "\n", "name", "=", "abbr", "+", "str", "(", "postfix", ")", "\n", "\n", "requires_grad", "=", "cfg_", ".", "pop", "(", "'requires_grad'", ",", "True", ")", "\n", "cfg_", ".", "setdefault", "(", "'eps'", ",", "1e-5", ")", "\n", "if", "layer_type", "!=", "'GN'", ":", "\n", "        ", "layer", "=", "norm_layer", "(", "num_features", ",", "**", "cfg_", ")", "\n", "if", "layer_type", "==", "'SyncBN'", ":", "\n", "            ", "layer", ".", "_specify_ddp_gpu_num", "(", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "'num_groups'", "in", "cfg_", "\n", "layer", "=", "norm_layer", "(", "num_channels", "=", "num_features", ",", "**", "cfg_", ")", "\n", "\n", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "return", "name", ",", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.scale.Scale.__init__": [[10, 13], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "scale", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.scale.Scale.forward": [[14, 16], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "scale", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.__init__": [[66, 144], ["torch.Module.__init__", "conv_module.build_conv_layer", "conv_module.ConvModule.init_weights", "isinstance", "isinstance", "isinstance", "set", "set", "warnings.warn", "norm.build_norm_layer", "conv_module.ConvModule.add_module", "len", "order.index", "order.index", "ValueError", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "'auto'", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "activation", "=", "'relu'", ",", "\n", "inplace", "=", "True", ",", "\n", "order", "=", "(", "'conv'", ",", "'norm'", ",", "'act'", ")", ")", ":", "\n", "        ", "super", "(", "ConvModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "conv_cfg", "is", "None", "or", "isinstance", "(", "conv_cfg", ",", "dict", ")", "\n", "assert", "norm_cfg", "is", "None", "or", "isinstance", "(", "norm_cfg", ",", "dict", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "order", "=", "order", "\n", "assert", "isinstance", "(", "self", ".", "order", ",", "tuple", ")", "and", "len", "(", "self", ".", "order", ")", "==", "3", "\n", "assert", "set", "(", "order", ")", "==", "set", "(", "[", "'conv'", ",", "'norm'", ",", "'act'", "]", ")", "\n", "\n", "self", ".", "with_norm", "=", "norm_cfg", "is", "not", "None", "\n", "self", ".", "with_activation", "=", "activation", "is", "not", "None", "\n", "# if the conv layer is before a norm layer, bias is unnecessary.", "\n", "if", "bias", "==", "'auto'", ":", "\n", "            ", "bias", "=", "False", "if", "self", ".", "with_norm", "else", "True", "\n", "", "self", ".", "with_bias", "=", "bias", "\n", "\n", "if", "self", ".", "with_norm", "and", "self", ".", "with_bias", ":", "\n", "            ", "warnings", ".", "warn", "(", "'ConvModule has norm and bias at the same time'", ")", "\n", "\n", "# build convolution layer", "\n", "", "self", ".", "conv", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "# export the attributes of self.conv to a higher level for convenience", "\n", "self", ".", "in_channels", "=", "self", ".", "conv", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "self", ".", "conv", ".", "out_channels", "\n", "self", ".", "kernel_size", "=", "self", ".", "conv", ".", "kernel_size", "\n", "self", ".", "stride", "=", "self", ".", "conv", ".", "stride", "\n", "self", ".", "padding", "=", "self", ".", "conv", ".", "padding", "\n", "self", ".", "dilation", "=", "self", ".", "conv", ".", "dilation", "\n", "self", ".", "transposed", "=", "self", ".", "conv", ".", "transposed", "\n", "self", ".", "output_padding", "=", "self", ".", "conv", ".", "output_padding", "\n", "self", ".", "groups", "=", "self", ".", "conv", ".", "groups", "\n", "\n", "# build normalization layers", "\n", "if", "self", ".", "with_norm", ":", "\n", "# norm layer is after conv layer", "\n", "            ", "if", "order", ".", "index", "(", "'norm'", ")", ">", "order", ".", "index", "(", "'conv'", ")", ":", "\n", "                ", "norm_channels", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "norm_channels", "=", "in_channels", "\n", "", "self", ".", "norm_name", ",", "norm", "=", "build_norm_layer", "(", "norm_cfg", ",", "norm_channels", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm_name", ",", "norm", ")", "\n", "\n", "# build activation layer", "\n", "", "if", "self", ".", "with_activation", ":", "\n", "# TODO: introduce `act_cfg` and supports more activation layers", "\n", "            ", "if", "self", ".", "activation", "not", "in", "[", "'relu'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'{} is currently not supported.'", ".", "format", "(", "\n", "self", ".", "activation", ")", ")", "\n", "", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "                ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "\n", "# Use msra init by default", "\n", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm": [[145, 148], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.init_weights": [[149, 154], ["mmcv.cnn.kaiming_init", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nonlinearity", "=", "'relu'", "if", "self", ".", "activation", "is", "None", "else", "self", ".", "activation", "\n", "kaiming_init", "(", "self", ".", "conv", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "constant_init", "(", "self", ".", "norm", ",", "1", ",", "bias", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.forward": [[155, 164], ["conv_module.ConvModule.conv", "conv_module.ConvModule.norm", "conv_module.ConvModule.activate"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "activate", "=", "True", ",", "norm", "=", "True", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "order", ":", "\n", "            ", "if", "layer", "==", "'conv'", ":", "\n", "                ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "elif", "layer", "==", "'norm'", "and", "norm", "and", "self", ".", "with_norm", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "elif", "layer", "==", "'act'", "and", "activate", "and", "self", ".", "with_activation", ":", "\n", "                ", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer": [[15, 41], ["cfg.copy.pop", "conv_layer", "dict", "cfg.copy", "KeyError", "isinstance"], "function", ["None"], ["def", "build_conv_layer", "(", "cfg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Build convolution layer\n\n    Args:\n        cfg (None or dict): cfg should contain:\n            type (str): identify conv layer type.\n            layer args: args needed to instantiate a conv layer.\n\n    Returns:\n        layer (nn.Module): created conv layer\n    \"\"\"", "\n", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg_", "=", "dict", "(", "type", "=", "'Conv'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "conv_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "conv_layer", "=", "conv_cfg", "[", "layer_type", "]", "\n", "\n", "", "layer", "=", "conv_layer", "(", "*", "args", ",", "**", "kwargs", ",", "**", "cfg_", ")", "\n", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.gather_layer.GatherLayer.forward": [[9, 16], ["ctx.save_for_backward", "torch.all_gather", "torch.all_gather", "tuple", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size", "torch.get_world_size"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ")", "\n", "output", "=", "[", "torch", ".", "zeros_like", "(", "input", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "output", ",", "input", ")", "\n", "return", "tuple", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.gather_layer.GatherLayer.backward": [[17, 23], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.get_rank", "torch.get_rank"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grads", ")", ":", "\n", "        ", "input", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad_out", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_out", "[", ":", "]", "=", "grads", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "return", "grad_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.sobel.Sobel.__init__": [[7, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data.fill_", "torch.Conv2d.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data[].copy_", "torch.Conv2d.weight.data[].copy_", "torch.Conv2d.bias.data.zero_", "torch.Sequential", "torch.Sequential", "sobel.Sobel.sobel.parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Sobel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "grayscale", "=", "nn", ".", "Conv2d", "(", "3", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "grayscale", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", "/", "3.0", ")", "\n", "grayscale", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "sobel_filter", "=", "nn", ".", "Conv2d", "(", "1", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "sobel_filter", ".", "weight", ".", "data", "[", "0", ",", "0", "]", ".", "copy_", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "0", ",", "-", "1", "]", ",", "[", "2", ",", "0", ",", "-", "2", "]", ",", "[", "1", ",", "0", ",", "-", "1", "]", "]", ")", ")", "\n", "sobel_filter", ".", "weight", ".", "data", "[", "1", ",", "0", "]", ".", "copy_", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", ")", "\n", "sobel_filter", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "sobel", "=", "nn", ".", "Sequential", "(", "grayscale", ",", "sobel_filter", ")", "\n", "for", "p", "in", "self", ".", "sobel", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.sobel.Sobel.forward": [[22, 24], ["sobel.Sobel.sobel"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "sobel", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.multi_pooling.MultiPooling.__init__": [[19, 34], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.AdaptiveAvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "pool_type", "=", "'adaptive'", ",", "\n", "in_indices", "=", "(", "0", ",", ")", ",", "\n", "backbone", "=", "'resnet50'", ")", ":", "\n", "        ", "super", "(", "MultiPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "pool_type", "in", "[", "'adaptive'", ",", "'specified'", "]", "\n", "if", "pool_type", "==", "'adaptive'", ":", "\n", "            ", "self", ".", "pools", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "self", ".", "POOL_SIZES", "[", "backbone", "]", "[", "l", "]", ")", "\n", "for", "l", "in", "in_indices", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pools", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "AvgPool2d", "(", "**", "self", ".", "POOL_PARAMS", "[", "backbone", "]", "[", "l", "]", ")", "\n", "for", "l", "in", "in_indices", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.multi_pooling.MultiPooling.forward": [[36, 39], ["isinstance", "p", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", "\n", "return", "[", "p", "(", "xx", ")", "for", "p", ",", "xx", "in", "zip", "(", "self", ".", "pools", ",", "x", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.accuracy.Accuracy.__init__": [[26, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.accuracy.Accuracy.forward": [[30, 32], ["accuracy.accuracy"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.accuracy.accuracy"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "accuracy", "(", "pred", ",", "target", ",", "self", ".", "topk", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.accuracy.accuracy": [[4, 22], ["isinstance", "isinstance", "max", "pred.topk", "pred_label.t.t", "pred_label.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "pred.size", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "pred", ",", "target", ",", "topk", "=", "1", ")", ":", "\n", "    ", "assert", "isinstance", "(", "topk", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "topk", ",", "int", ")", ":", "\n", "        ", "topk", "=", "(", "topk", ",", ")", "\n", "return_single", "=", "True", "\n", "", "else", ":", "\n", "        ", "return_single", "=", "False", "\n", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "_", ",", "pred_label", "=", "pred", ".", "topk", "(", "maxk", ",", "dim", "=", "1", ")", "\n", "pred_label", "=", "pred_label", ".", "t", "(", ")", "\n", "correct", "=", "pred_label", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred_label", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "pred", ".", "size", "(", "0", ")", ")", ")", "\n", "", "return", "res", "[", "0", "]", "if", "return_single", "else", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_ws.ConvWS2d.__init__": [[23, 43], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "ConvWS2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_ws.ConvWS2d.forward": [[44, 47], ["conv_ws.conv_ws_2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_ws.conv_ws_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "conv_ws_2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "eps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_ws.conv_ws_2d": [[5, 19], ["weight.size", "weight.view", "weight.view.mean().view", "weight.view.std().view", "torch.conv2d", "weight.view.mean", "weight.view.std"], "function", ["None"], ["def", "conv_ws_2d", "(", "input", ",", "\n", "weight", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "eps", "=", "1e-5", ")", ":", "\n", "    ", "c_in", "=", "weight", ".", "size", "(", "0", ")", "\n", "weight_flat", "=", "weight", ".", "view", "(", "c_in", ",", "-", "1", ")", "\n", "mean", "=", "weight_flat", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "std", "=", "weight_flat", ".", "std", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "weight", "=", "(", "weight", "-", "mean", ")", "/", "(", "std", "+", "eps", ")", "\n", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.Encoding.__init__": [[78, 85], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "encoding.Encoding.reset_params", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingCosine.reset_params"], ["def", "__init__", "(", "self", ",", "D", ",", "K", ")", ":", "\n", "        ", "super", "(", "Encoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# init codewords and smoothing factor", "\n", "self", ".", "D", ",", "self", ".", "K", "=", "D", ",", "K", "\n", "self", ".", "codewords", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "K", ",", "D", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "K", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.Encoding.reset_params": [[86, 90], ["encoding.Encoding.codewords.data.uniform_", "encoding.Encoding.scale.data.uniform_"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "std1", "=", "1.", "/", "(", "(", "self", ".", "K", "*", "self", ".", "D", ")", "**", "(", "1", "/", "2", ")", ")", "\n", "self", ".", "codewords", ".", "data", ".", "uniform_", "(", "-", "std1", ",", "std1", ")", "\n", "self", ".", "scale", ".", "data", ".", "uniform_", "(", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.Encoding.forward": [[91, 108], ["torch.softmax", "torch.softmax", "functions.aggregate", "X.view().transpose().contiguous.view().transpose().contiguous.size", "X.view().transpose().contiguous.view().transpose().contiguous.size", "X.view().transpose().contiguous.view().transpose().contiguous.dim", "X.view().transpose().contiguous.view().transpose().contiguous.transpose().contiguous", "functions.scaled_l2", "X.view().transpose().contiguous.view().transpose().contiguous.dim", "X.view().transpose().contiguous.view().transpose().contiguous.view().transpose().contiguous", "RuntimeError", "X.view().transpose().contiguous.view().transpose().contiguous.transpose", "X.view().transpose().contiguous.view().transpose().contiguous.view().transpose", "X.view().transpose().contiguous.view().transpose().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding.aggregate", "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding.scaled_l2"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "# input X is a 4D tensor", "\n", "        ", "assert", "(", "X", ".", "size", "(", "1", ")", "==", "self", ".", "D", ")", "\n", "B", ",", "D", "=", "X", ".", "size", "(", "0", ")", ",", "self", ".", "D", "\n", "if", "X", ".", "dim", "(", ")", "==", "3", ":", "\n", "# BxDxN => BxNxD", "\n", "            ", "X", "=", "X", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "elif", "X", ".", "dim", "(", ")", "==", "4", ":", "\n", "# BxDxHxW => Bx(HW)xD", "\n", "            ", "X", "=", "X", ".", "view", "(", "B", ",", "D", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Encoding Layer unknown input dims!'", ")", "\n", "# assignment weights BxNxK", "\n", "", "A", "=", "F", ".", "softmax", "(", "scaled_l2", "(", "X", ",", "self", ".", "codewords", ",", "self", ".", "scale", ")", ",", "dim", "=", "2", ")", "\n", "# aggregate", "\n", "E", "=", "aggregate", "(", "A", ",", "X", ",", "self", ".", "codewords", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.Encoding.__repr__": [[109, 113], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'N x '", "+", "str", "(", "self", ".", "D", ")", "+", "'=>'", "+", "str", "(", "self", ".", "K", ")", "+", "'x'", "+", "str", "(", "self", ".", "D", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingDrop.__init__": [[118, 125], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "encoding.EncodingDrop.reset_params", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingCosine.reset_params"], ["def", "__init__", "(", "self", ",", "D", ",", "K", ")", ":", "\n", "        ", "super", "(", "EncodingDrop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# init codewords and smoothing factor", "\n", "self", ".", "D", ",", "self", ".", "K", "=", "D", ",", "K", "\n", "self", ".", "codewords", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "K", ",", "D", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "K", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingDrop.reset_params": [[126, 130], ["encoding.EncodingDrop.codewords.data.uniform_", "encoding.EncodingDrop.scale.data.uniform_"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "std1", "=", "1.", "/", "(", "(", "self", ".", "K", "*", "self", ".", "D", ")", "**", "(", "1", "/", "2", ")", ")", "\n", "self", ".", "codewords", ".", "data", ".", "uniform_", "(", "-", "std1", ",", "std1", ")", "\n", "self", ".", "scale", ".", "data", ".", "uniform_", "(", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingDrop._drop": [[131, 136], ["encoding.EncodingDrop.scale.data.uniform_", "encoding.EncodingDrop.scale.data.zero_().add_", "encoding.EncodingDrop.scale.data.zero_"], "methods", ["None"], ["", "def", "_drop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "scale", ".", "data", ".", "uniform_", "(", "-", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", ".", "data", ".", "zero_", "(", ")", ".", "add_", "(", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingDrop.forward": [[137, 157], ["encoding.EncodingDrop._drop", "torch.softmax", "torch.softmax", "functions.aggregate", "encoding.EncodingDrop._drop", "X.view().transpose().contiguous.view().transpose().contiguous.size", "X.view().transpose().contiguous.view().transpose().contiguous.dim", "X.view().transpose().contiguous.view().transpose().contiguous.transpose().contiguous", "functions.scaled_l2", "X.view().transpose().contiguous.view().transpose().contiguous.size", "X.view().transpose().contiguous.view().transpose().contiguous.dim", "X.view().transpose().contiguous.view().transpose().contiguous.view().transpose().contiguous", "RuntimeError", "X.view().transpose().contiguous.view().transpose().contiguous.transpose", "X.view().transpose().contiguous.view().transpose().contiguous.size", "X.view().transpose().contiguous.view().transpose().contiguous.view().transpose", "X.view().transpose().contiguous.view().transpose().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingDrop._drop", "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding.aggregate", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingDrop._drop", "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding.scaled_l2"], ["", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "# input X is a 4D tensor", "\n", "        ", "assert", "(", "X", ".", "size", "(", "1", ")", "==", "self", ".", "D", ")", "\n", "if", "X", ".", "dim", "(", ")", "==", "3", ":", "\n", "# BxDxN", "\n", "            ", "B", ",", "D", "=", "X", ".", "size", "(", "0", ")", ",", "self", ".", "D", "\n", "X", "=", "X", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "elif", "X", ".", "dim", "(", ")", "==", "4", ":", "\n", "# BxDxHxW", "\n", "            ", "B", ",", "D", "=", "X", ".", "size", "(", "0", ")", ",", "self", ".", "D", "\n", "X", "=", "X", ".", "view", "(", "B", ",", "D", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Encoding Layer unknown input dims!'", ")", "\n", "", "self", ".", "_drop", "(", ")", "\n", "# assignment weights", "\n", "A", "=", "F", ".", "softmax", "(", "scaled_l2", "(", "X", ",", "self", ".", "codewords", ",", "self", ".", "scale", ")", ",", "dim", "=", "2", ")", "\n", "# aggregate", "\n", "E", "=", "aggregate", "(", "A", ",", "X", ",", "self", ".", "codewords", ")", "\n", "self", ".", "_drop", "(", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingDrop.__repr__": [[158, 162], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'N x '", "+", "str", "(", "self", ".", "D", ")", "+", "'=>'", "+", "str", "(", "self", ".", "K", ")", "+", "'x'", "+", "str", "(", "self", ".", "D", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.Inspiration.__init__": [[181, 189], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.autograd.Variable", "torch.autograd.Variable", "encoding.Inspiration.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.inplace_abn.InplaceAbn.reset_parameters"], ["def", "__init__", "(", "self", ",", "C", ",", "B", "=", "1", ")", ":", "\n", "        ", "super", "(", "Inspiration", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# B is equal to 1 or input mini_batch", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "C", ",", "C", ")", ",", "requires_grad", "=", "True", ")", "\n", "# non-parameter buffer", "\n", "self", ".", "G", "=", "Variable", "(", "torch", ".", "Tensor", "(", "B", ",", "C", ",", "C", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.Inspiration.reset_parameters": [[190, 192], ["encoding.Inspiration.weight.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "0.0", ",", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.Inspiration.setTarget": [[193, 195], ["None"], "methods", ["None"], ["", "def", "setTarget", "(", "self", ",", "target", ")", ":", "\n", "        ", "self", ".", "G", "=", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.Inspiration.forward": [[196, 201], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm().view_as", "torch.bmm().view_as", "torch.bmm().view_as", "torch.bmm().view_as", "encoding.Inspiration.weight.expand_as", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "encoding.Inspiration.P.transpose().expand", "X.view", "X.size", "X.size", "X.size", "encoding.Inspiration.P.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "# input X is a 3D feature map", "\n", "        ", "self", ".", "P", "=", "torch", ".", "bmm", "(", "self", ".", "weight", ".", "expand_as", "(", "self", ".", "G", ")", ",", "self", ".", "G", ")", "\n", "return", "torch", ".", "bmm", "(", "self", ".", "P", ".", "transpose", "(", "1", ",", "2", ")", ".", "expand", "(", "X", ".", "size", "(", "0", ")", ",", "self", ".", "C", ",", "self", ".", "C", ")", ",", "\n", "X", ".", "view", "(", "X", ".", "size", "(", "0", ")", ",", "X", ".", "size", "(", "1", ")", ",", "-", "1", ")", ")", ".", "view_as", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.Inspiration.__repr__": [[202, 205], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'N x '", "+", "str", "(", "self", ".", "C", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.UpsampleConv2d.__init__": [[265, 294], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.Parameter", "torch.nn.Parameter", "encoding.UpsampleConv2d.reset_parameters", "ValueError", "ValueError", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "encoding.UpsampleConv2d.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.inplace_abn.InplaceAbn.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "scale_factor", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "UpsampleConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", "*", "scale_factor", "*", "scale_factor", ",", "\n", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", "*", "scale_factor", "*", "scale_factor", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.UpsampleConv2d.reset_parameters": [[295, 303], ["encoding.UpsampleConv2d.weight.data.uniform_", "math.sqrt", "encoding.UpsampleConv2d.bias.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.UpsampleConv2d.forward": [[304, 308], ["torch.conv2d", "torch.conv2d", "torch.pixel_shuffle", "torch.pixel_shuffle"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "conv2d", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "return", "F", ".", "pixel_shuffle", "(", "out", ",", "self", ".", "scale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingCosine.__init__": [[311, 318], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "encoding.EncodingCosine.reset_params", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingCosine.reset_params"], ["    ", "def", "__init__", "(", "self", ",", "D", ",", "K", ")", ":", "\n", "        ", "super", "(", "EncodingCosine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# init codewords and smoothing factor", "\n", "self", ".", "D", ",", "self", ".", "K", "=", "D", ",", "K", "\n", "self", ".", "codewords", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "K", ",", "D", ")", ",", "requires_grad", "=", "True", ")", "\n", "#self.scale = Parameter(torch.Tensor(K), requires_grad=True)", "\n", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingCosine.reset_params": [[319, 322], ["encoding.EncodingCosine.codewords.data.uniform_"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "std1", "=", "1.", "/", "(", "(", "self", ".", "K", "*", "self", ".", "D", ")", "**", "(", "1", "/", "2", ")", ")", "\n", "self", ".", "codewords", ".", "data", ".", "uniform_", "(", "-", "std1", ",", "std1", ")", "\n", "#self.scale.data.uniform_(-1, 0)", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingCosine.forward": [[324, 343], ["functions.pairwise_cosine", "torch.softmax", "torch.softmax", "functions.aggregate", "X.view().transpose().contiguous.view().transpose().contiguous.size", "X.view().transpose().contiguous.view().transpose().contiguous.dim", "X.view().transpose().contiguous.view().transpose().contiguous.transpose().contiguous", "X.view().transpose().contiguous.view().transpose().contiguous.size", "X.view().transpose().contiguous.view().transpose().contiguous.dim", "X.view().transpose().contiguous.view().transpose().contiguous.view().transpose().contiguous", "RuntimeError", "X.view().transpose().contiguous.view().transpose().contiguous.transpose", "X.view().transpose().contiguous.view().transpose().contiguous.size", "X.view().transpose().contiguous.view().transpose().contiguous.view().transpose", "X.view().transpose().contiguous.view().transpose().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding.pairwise_cosine", "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding.aggregate"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "# input X is a 4D tensor", "\n", "        ", "assert", "(", "X", ".", "size", "(", "1", ")", "==", "self", ".", "D", ")", "\n", "if", "X", ".", "dim", "(", ")", "==", "3", ":", "\n", "# BxDxN", "\n", "            ", "B", ",", "D", "=", "X", ".", "size", "(", "0", ")", ",", "self", ".", "D", "\n", "X", "=", "X", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "elif", "X", ".", "dim", "(", ")", "==", "4", ":", "\n", "# BxDxHxW", "\n", "            ", "B", ",", "D", "=", "X", ".", "size", "(", "0", ")", ",", "self", ".", "D", "\n", "X", "=", "X", ".", "view", "(", "B", ",", "D", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Encoding Layer unknown input dims!'", ")", "\n", "# assignment weights NxKxD", "\n", "", "L", "=", "pairwise_cosine", "(", "X", ",", "self", ".", "codewords", ")", "\n", "A", "=", "F", ".", "softmax", "(", "L", ",", "dim", "=", "2", ")", "\n", "# aggregate", "\n", "E", "=", "aggregate", "(", "A", ",", "X", ",", "self", ".", "codewords", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.encoding.EncodingCosine.__repr__": [[344, 348], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'N x '", "+", "str", "(", "self", ".", "D", ")", "+", "'=>'", "+", "str", "(", "self", ".", "K", ")", "+", "'x'", "+", "str", "(", "self", ".", "D", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.rectify.RFConv2d.__init__": [[25, 40], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ",", "\n", "average_mode", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "rectify", "=", "average_mode", "or", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "average", "=", "average_mode", "\n", "\n", "super", "(", "RFConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.rectify.RFConv2d._conv_forward": [[41, 48], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.pad", "torch.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["None"], ["", "def", "_conv_forward", "(", "self", ",", "input", ",", "weight", ")", ":", "\n", "        ", "if", "self", ".", "padding_mode", "!=", "'zeros'", ":", "\n", "            ", "return", "F", ".", "conv2d", "(", "F", ".", "pad", "(", "input", ",", "self", ".", "_padding_repeated_twice", ",", "mode", "=", "self", ".", "padding_mode", ")", ",", "\n", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "_pair", "(", "0", ")", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.rectify.RFConv2d.forward": [[49, 55], ["functions.rectify.RFConv2d._conv_forward", "functions.rectify"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.nn.rectify.RFConv2d._conv_forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "_conv_forward", "(", "input", ",", "self", ".", "weight", ")", "\n", "if", "self", ".", "rectify", ":", "\n", "            ", "output", "=", "rectify", "(", "output", ",", "input", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "average", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.rectify.RFConv2d.extra_repr": [[56, 59], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "extra_repr", "(", ")", "+", "', rectify={}, average_mode={}'", ".", "format", "(", "self", ".", "rectify", ",", "self", ".", "average", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.splat.SplAtConv2d.__init__": [[17, 46], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "max", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "splat.rSoftMax", "rectify.RFConv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "dropblock.DropBlock2D"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["\n", "__all__", "=", "[", "'SplAtConv2d'", ",", "'SplAtConv2d_dcn'", "]", "\n", "\n", "class", "SplAtConv2d", "(", "Module", ")", ":", "\n", "    ", "\"\"\"Split-Attention Conv2d\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "norm", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplAtConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "rectify", "=", "rectify", "and", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "if", "self", ".", "rectify", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv", "=", "RFConv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "average_mode", "=", "rectify_avg", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "", "self", ".", "use_bn", "=", "norm", "is", "not", "None", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn0", "=", "get_norm", "(", "norm", ",", "channels", "*", "radix", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.splat.SplAtConv2d.forward": [[47, 77], ["splat.SplAtConv2d.conv", "splat.SplAtConv2d.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "splat.SplAtConv2d.fc1", "splat.SplAtConv2d.relu", "splat.SplAtConv2d.fc2", "splat.SplAtConv2d.rsoftmax().view", "sum.contiguous", "splat.SplAtConv2d.bn0", "splat.SplAtConv2d.dropblock", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "splat.SplAtConv2d.bn1", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "splat.SplAtConv2d.rsoftmax", "zip"], "methods", ["None"], ["", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "get_norm", "(", "norm", ",", "inter_channels", ")", "\n", "", "self", ".", "fc2", "=", "Conv2d", "(", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "rsoftmax", "=", "rSoftMax", "(", "radix", ",", "groups", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "x", "=", "self", ".", "dropblock", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "rchannel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splited", "=", "torch", ".", "split", "(", "x", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "gap", "=", "sum", "(", "splited", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "gap", "=", "self", ".", "bn1", "(", "gap", ")", "\n", "", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.splat.rSoftMax.__init__": [[79, 83], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "attens", "=", "torch", ".", "split", "(", "atten", ",", "rchannel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "out", "=", "sum", "(", "[", "att", "*", "split", "for", "(", "att", ",", "split", ")", "in", "zip", "(", "attens", ",", "splited", ")", "]", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.splat.rSoftMax.forward": [[84, 93], ["torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.softmax", "torch.softmax", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "torch.sigmoid.view"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "\n", "", "", "class", "rSoftMax", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "radix", ",", "cardinality", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.loss.LabelSmoothing.__init__": [[12, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.loss.LabelSmoothing.forward": [[21, 29], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.loss.NLLMultiLabelSmooth.__init__": [[31, 35], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "smoothing", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "NLLMultiLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.loss.NLLMultiLabelSmooth.forward": [[36, 52], ["x.float.float.float", "target.float.float.float", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.sum.sum.sum", "loss.mean", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "x", "=", "x", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", "*", "target", "\n", "nll_loss", "=", "nll_loss", ".", "sum", "(", "-", "1", ")", "\n", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "x", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.loss.SegmentationLosses.__init__": [[55, 65], ["torch.CrossEntropyLoss.__init__", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "se_loss", "=", "False", ",", "se_weight", "=", "0.2", ",", "nclass", "=", "-", "1", ",", "\n", "aux", "=", "False", ",", "aux_weight", "=", "0.4", ",", "weight", "=", "None", ",", "\n", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "__init__", "(", "weight", ",", "None", ",", "ignore_index", ")", "\n", "self", ".", "se_loss", "=", "se_loss", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "se_weight", "=", "se_weight", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "bceloss", "=", "nn", ".", "BCELoss", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.loss.SegmentationLosses.forward": [[66, 87], ["super().forward", "tuple", "super().forward", "super().forward", "tuple", "loss.SegmentationLosses._get_batch_label_vector().type_as", "super().forward", "loss.SegmentationLosses.bceloss", "tuple", "loss.SegmentationLosses._get_batch_label_vector().type_as", "super().forward", "super().forward", "loss.SegmentationLosses.bceloss", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss.SegmentationLosses._get_batch_label_vector", "loss.SegmentationLosses._get_batch_label_vector"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.loss.SegmentationLosses._get_batch_label_vector", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.loss.SegmentationLosses._get_batch_label_vector"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "if", "not", "self", ".", "se_loss", "and", "not", "self", ".", "aux", ":", "\n", "            ", "return", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", "\n", "", "elif", "not", "self", ".", "se_loss", ":", "\n", "            ", "pred1", ",", "pred2", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss1", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred1", ",", "target", ")", "\n", "loss2", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred2", ",", "target", ")", "\n", "return", "loss1", "+", "self", ".", "aux_weight", "*", "loss2", "\n", "", "elif", "not", "self", ".", "aux", ":", "\n", "            ", "pred", ",", "se_pred", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "se_target", "=", "self", ".", "_get_batch_label_vector", "(", "target", ",", "nclass", "=", "self", ".", "nclass", ")", ".", "type_as", "(", "pred", ")", "\n", "loss1", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred", ",", "target", ")", "\n", "loss2", "=", "self", ".", "bceloss", "(", "torch", ".", "sigmoid", "(", "se_pred", ")", ",", "se_target", ")", "\n", "return", "loss1", "+", "self", ".", "se_weight", "*", "loss2", "\n", "", "else", ":", "\n", "            ", "pred1", ",", "se_pred", ",", "pred2", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "se_target", "=", "self", ".", "_get_batch_label_vector", "(", "target", ",", "nclass", "=", "self", ".", "nclass", ")", ".", "type_as", "(", "pred1", ")", "\n", "loss1", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred1", ",", "target", ")", "\n", "loss2", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred2", ",", "target", ")", "\n", "loss3", "=", "self", ".", "bceloss", "(", "torch", ".", "sigmoid", "(", "se_pred", ")", ",", "se_target", ")", "\n", "return", "loss1", "+", "self", ".", "aux_weight", "*", "loss2", "+", "self", ".", "se_weight", "*", "loss3", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.loss.SegmentationLosses._get_batch_label_vector": [[88, 100], ["target.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "target[].cpu().data.float", "target[].cpu"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_batch_label_vector", "(", "target", ",", "nclass", ")", ":", "\n", "# target is a 3D Variable BxHxW, output is 2D BxnClass", "\n", "        ", "batch", "=", "target", ".", "size", "(", "0", ")", "\n", "tvect", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch", ",", "nclass", ")", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "hist", "=", "torch", ".", "histc", "(", "target", "[", "i", "]", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ",", "\n", "bins", "=", "nclass", ",", "min", "=", "0", ",", "\n", "max", "=", "nclass", "-", "1", ")", "\n", "vect", "=", "hist", ">", "0", "\n", "tvect", "[", "i", "]", "=", "vect", "\n", "", "return", "tvect", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.attention.ACFModule.__init__": [[16, 66], ["torch.Module.__init__", "torch.init.normal_", "torch.init.normal_", "attention.MixtureOfSoftMaxACF", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.init.normal_", "torch.init.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.init.normal_", "torch.init.normal_", "numpy.sqrt", "numpy.sqrt", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.init.normal_", "torch.init.normal_", "numpy.sqrt", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "n_mix", ",", "d_model", ",", "d_k", ",", "d_v", ",", "norm_layer", "=", "SyncBatchNorm", ",", "\n", "kq_transform", "=", "'conv'", ",", "value_transform", "=", "'conv'", ",", "\n", "pooling", "=", "True", ",", "concat", "=", "False", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "ACFModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "n_mix", "=", "n_mix", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "self", ".", "pooling", "=", "pooling", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "self", ".", "pooling", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "2", ",", "1", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "", "if", "kq_transform", "==", "'conv'", ":", "\n", "            ", "self", ".", "conv_qs", "=", "nn", ".", "Conv2d", "(", "d_model", ",", "n_head", "*", "d_k", ",", "1", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "conv_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "", "elif", "kq_transform", "==", "'ffn'", ":", "\n", "            ", "self", ".", "conv_qs", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "d_model", ",", "n_head", "*", "d_k", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "n_head", "*", "d_k", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_head", "*", "d_k", ",", "n_head", "*", "d_k", ",", "1", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "conv_qs", "[", "-", "1", "]", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "1.0", "/", "d_k", ")", ")", "\n", "", "elif", "kq_transform", "==", "'dffn'", ":", "\n", "            ", "self", ".", "conv_qs", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "d_model", ",", "n_head", "*", "d_k", ",", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "n_head", "*", "d_k", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_head", "*", "d_k", ",", "n_head", "*", "d_k", ",", "1", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "conv_qs", "[", "-", "1", "]", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "1.0", "/", "d_k", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "#self.conv_ks = nn.Conv2d(d_model, n_head*d_k, 1)", "\n", "", "self", ".", "conv_ks", "=", "self", ".", "conv_qs", "\n", "if", "value_transform", "==", "'conv'", ":", "\n", "            ", "self", ".", "conv_vs", "=", "nn", ".", "Conv2d", "(", "d_model", ",", "n_head", "*", "d_v", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "\n", "#nn.init.normal_(self.conv_ks.weight, mean=0, std=np.sqrt(2.0 / (d_model + d_k)))", "\n", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "conv_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "MixtureOfSoftMaxACF", "(", "n_mix", "=", "n_mix", ",", "d_k", "=", "d_k", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "n_head", "*", "d_v", ",", "d_model", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_layer", "=", "norm_layer", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.attention.ACFModule.forward": [[67, 92], ["x.size", "attention.ACFModule.attention", "torch.cat.transpose().contiguous().view", "torch.cat.transpose().contiguous().view", "attention.ACFModule.conv", "attention.ACFModule.conv_ks().view", "attention.ACFModule.conv_ks().view", "attention.ACFModule.conv_vs().view", "attention.ACFModule.conv_ks().view", "attention.ACFModule.conv_vs().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose().contiguous", "torch.cat.transpose().contiguous", "attention.ACFModule.norm_layer", "attention.ACFModule.conv_ks", "attention.ACFModule.conv_ks", "attention.ACFModule.conv_vs", "attention.ACFModule.conv_ks", "attention.ACFModule.conv_vs", "attention.ACFModule.norm_layer", "attention.ACFModule.pool", "attention.ACFModule.pool", "torch.cat.transpose", "torch.cat.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "b_", ",", "c_", ",", "h_", ",", "w_", "=", "x", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "pooling", ":", "\n", "            ", "qt", "=", "self", ".", "conv_ks", "(", "x", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_k", ",", "h_", "*", "w_", ")", "\n", "kt", "=", "self", ".", "conv_ks", "(", "self", ".", "pool", "(", "x", ")", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_k", ",", "h_", "*", "w_", "//", "4", ")", "\n", "vt", "=", "self", ".", "conv_vs", "(", "self", ".", "pool", "(", "x", ")", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_v", ",", "h_", "*", "w_", "//", "4", ")", "\n", "", "else", ":", "\n", "            ", "kt", "=", "self", ".", "conv_ks", "(", "x", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_k", ",", "h_", "*", "w_", ")", "\n", "qt", "=", "kt", "\n", "vt", "=", "self", ".", "conv_vs", "(", "x", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_v", ",", "h_", "*", "w_", ")", "\n", "\n", "", "output", ",", "attn", "=", "self", ".", "attention", "(", "qt", ",", "kt", ",", "vt", ")", "\n", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b_", ",", "n_head", "*", "d_v", ",", "h_", ",", "w_", ")", "\n", "\n", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "if", "self", ".", "concat", ":", "\n", "            ", "output", "=", "torch", ".", "cat", "(", "(", "self", ".", "norm_layer", "(", "output", ")", ",", "residual", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "norm_layer", "(", "output", ")", "+", "residual", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.attention.ACFModule.demo": [[93, 111], ["x.size", "attention.ACFModule.attention", "attn.view", "attention.ACFModule.conv_ks().view", "attention.ACFModule.conv_ks().view", "attention.ACFModule.conv_vs().view", "attention.ACFModule.conv_ks().view", "attention.ACFModule.conv_vs().view", "attention.ACFModule.conv_ks", "attention.ACFModule.conv_ks", "attention.ACFModule.conv_vs", "attention.ACFModule.conv_ks", "attention.ACFModule.conv_vs", "attention.ACFModule.pool", "attention.ACFModule.pool"], "methods", ["None"], ["", "def", "demo", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "b_", ",", "c_", ",", "h_", ",", "w_", "=", "x", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "pooling", ":", "\n", "            ", "qt", "=", "self", ".", "conv_ks", "(", "x", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_k", ",", "h_", "*", "w_", ")", "\n", "kt", "=", "self", ".", "conv_ks", "(", "self", ".", "pool", "(", "x", ")", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_k", ",", "h_", "*", "w_", "//", "4", ")", "\n", "vt", "=", "self", ".", "conv_vs", "(", "self", ".", "pool", "(", "x", ")", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_v", ",", "h_", "*", "w_", "//", "4", ")", "\n", "", "else", ":", "\n", "            ", "kt", "=", "self", ".", "conv_ks", "(", "x", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_k", ",", "h_", "*", "w_", ")", "\n", "qt", "=", "kt", "\n", "vt", "=", "self", ".", "conv_vs", "(", "x", ")", ".", "view", "(", "b_", "*", "n_head", ",", "d_v", ",", "h_", "*", "w_", ")", "\n", "\n", "", "_", ",", "attn", "=", "self", ".", "attention", "(", "qt", ",", "kt", ",", "vt", ")", "\n", "attn", ".", "view", "(", "b_", ",", "n_head", ",", "h_", "*", "w_", ",", "-", "1", ")", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.attention.ACFModule.extra_repr": [[112, 115], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'n_head={}, n_mix={}, d_k={}, pooling={}'", ".", "format", "(", "self", ".", "n_head", ",", "self", ".", "n_mix", ",", "self", ".", "d_k", ",", "self", ".", "pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.attention.MixtureOfSoftMaxACF.__init__": [[119, 132], ["torch.Module.__init__", "numpy.power", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Parameter", "torch.Parameter", "numpy.power", "attention.MixtureOfSoftMaxACF.weight.data.uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "n_mix", ",", "d_k", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MixtureOfSoftMaxACF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", "\n", "self", ".", "n_mix", "=", "n_mix", "\n", "self", ".", "att_drop", "=", "attn_dropout", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax1", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "softmax2", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "self", ".", "d_k", "=", "d_k", "\n", "if", "n_mix", ">", "1", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_mix", ",", "d_k", ")", ")", "\n", "std", "=", "np", ".", "power", "(", "n_mix", ",", "-", "0.5", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "std", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.attention.MixtureOfSoftMaxACF.forward": [[133, 158], ["qt.size", "qt.view().transpose", "kt.view.view.size", "kt.view.view.view", "vt.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "attention.MixtureOfSoftMaxACF.softmax2", "attention.MixtureOfSoftMaxACF.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "attention.MixtureOfSoftMaxACF.softmax1().view", "qt.view", "attention.MixtureOfSoftMaxACF.softmax1", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "qt", ",", "kt", ",", "vt", ")", ":", "\n", "        ", "B", ",", "d_k", ",", "N", "=", "qt", ".", "size", "(", ")", "\n", "m", "=", "self", ".", "n_mix", "\n", "assert", "d_k", "==", "self", ".", "d_k", "\n", "d", "=", "d_k", "//", "m", "\n", "if", "m", ">", "1", ":", "\n", "# \\bar{v} \\in R^{B, d_k, 1}", "\n", "            ", "bar_qt", "=", "torch", ".", "mean", "(", "qt", ",", "2", ",", "True", ")", "\n", "# pi \\in R^{B, m, 1}", "\n", "pi", "=", "self", ".", "softmax1", "(", "torch", ".", "matmul", "(", "self", ".", "weight", ",", "bar_qt", ")", ")", ".", "view", "(", "B", "*", "m", ",", "1", ",", "1", ")", "\n", "# reshape for n_mix", "\n", "", "q", "=", "qt", ".", "view", "(", "B", "*", "m", ",", "d", ",", "N", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "N2", "=", "kt", ".", "size", "(", "2", ")", "\n", "kt", "=", "kt", ".", "view", "(", "B", "*", "m", ",", "d", ",", "N2", ")", "\n", "v", "=", "vt", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# {Bm, N, N}", "\n", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "kt", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "attn", "=", "self", ".", "softmax2", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "if", "m", ">", "1", ":", "\n", "# attn \\in R^{Bm, N, N2} => R^{B, N, N2}", "\n", "            ", "attn", "=", "(", "attn", "*", "pi", ")", ".", "view", "(", "B", ",", "m", ",", "N", ",", "N2", ")", ".", "sum", "(", "1", ")", "\n", "", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "return", "output", ",", "attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.syncbn.DistSyncBatchNorm.__init__": [[78, 81], ["torch.nn.modules.batchnorm._BatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "process_group", "=", "None", ")", ":", "\n", "        ", "super", "(", "DistSyncBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", "\n", "self", ".", "process_group", "=", "process_group", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.syncbn.DistSyncBatchNorm.forward": [[82, 103], ["x.view.view.size", "x.view.view.view", "dist_syncbatchnorm", "dist_syncbatchnorm.view", "torch.distributed.get_world_size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "need_sync", "=", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", "\n", "process_group", "=", "None", "\n", "if", "need_sync", ":", "\n", "            ", "process_group", "=", "torch", ".", "distributed", ".", "group", ".", "WORLD", "\n", "if", "self", ".", "process_group", ":", "\n", "                ", "process_group", "=", "self", ".", "process_group", "\n", "", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", "process_group", ")", "\n", "need_sync", "=", "world_size", ">", "1", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "#def forward(ctx, x, gamma, beta, running_mean, running_var, eps, momentum, training, process_group):", "\n", "y", "=", "dist_syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "eps", ",", "self", ".", "momentum", ",", "self", ".", "training", ",", "process_group", ")", "\n", "\n", "#_var = _exs - _ex ** 2", "\n", "#running_mean.mul_((1 - ctx.momentum)).add_(ctx.momentum * _ex)", "\n", "#running_var.mul_((1 - ctx.momentum)).add_(ctx.momentum * _var)", "\n", "return", "y", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.syncbn.SyncBatchNorm.__init__": [[155, 168], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "list", "Queue", "range", "len", "Queue", "torch.cuda.device_count", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "sync", "=", "True", ",", "activation", "=", "\"none\"", ",", "slope", "=", "0.01", ",", "\n", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "SyncBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "True", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "inplace", "=", "False", "if", "activation", "==", "'none'", "else", "inplace", "\n", "#self.inplace = inplace", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "self", ".", "sync", "=", "sync", "if", "len", "(", "self", ".", "devices", ")", ">", "1", "else", "False", "\n", "# Initialize queues", "\n", "self", ".", "worker_ids", "=", "self", ".", "devices", "[", "1", ":", "]", "\n", "self", ".", "master_queue", "=", "Queue", "(", "len", "(", "self", ".", "worker_ids", ")", ")", "\n", "self", ".", "worker_queues", "=", "[", "Queue", "(", "1", ")", "for", "_", "in", "self", ".", "worker_ids", "]", "\n", "# running_exs", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.syncbn.SyncBatchNorm._check_input_dim": [[171, 173], ["None"], "methods", ["None"], ["", "def", "_check_input_dim", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.syncbn.SyncBatchNorm.forward": [[174, 203], ["x.view.view.size", "x.view.view.view", "super().forward", "x.view.view.get_device", "inp_syncbatchnorm().view", "syncbatchnorm().view", "inp_syncbatchnorm", "syncbatchnorm", "syncbn.SyncBatchNorm.worker_ids.index", "x.view.view.get_device"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "if", "x", ".", "get_device", "(", ")", "==", "self", ".", "devices", "[", "0", "]", ":", "\n", "# Master mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "True", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queues\"", ":", "self", ".", "worker_queues", ",", "\n", "\"worker_ids\"", ":", "self", ".", "worker_ids", "\n", "}", "\n", "", "else", ":", "\n", "# Worker mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "False", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queue\"", ":", "self", ".", "worker_queues", "[", "self", ".", "worker_ids", ".", "index", "(", "x", ".", "get_device", "(", ")", ")", "]", "\n", "}", "\n", "", "if", "self", ".", "inplace", ":", "\n", "            ", "return", "inp_syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "sync", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "\n", "self", ".", "activation", ",", "self", ".", "slope", ")", ".", "view", "(", "input_shape", ")", "\n", "", "else", ":", "\n", "            ", "return", "syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "sync", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "\n", "self", ".", "activation", ",", "self", ".", "slope", ")", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.syncbn.SyncBatchNorm.extra_repr": [[204, 210], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "activation", "==", "'none'", ":", "\n", "            ", "return", "'sync={}'", ".", "format", "(", "self", ".", "sync", ")", "\n", "", "else", ":", "\n", "            ", "return", "'sync={}, act={}, slope={}, inplace={}'", ".", "format", "(", "\n", "self", ".", "sync", ",", "self", ".", "activation", ",", "self", ".", "slope", ",", "self", ".", "inplace", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.syncbn.BatchNorm1d.__init__": [[217, 221], ["warnings.warn", "syncbn.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"encoding.nn.{} is now deprecated in favor of encoding.nn.{}.\"", "\n", ".", "format", "(", "'BatchNorm1d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "EncodingDeprecationWarning", ")", "\n", "super", "(", "BatchNorm1d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.syncbn.BatchNorm2d.__init__": [[227, 231], ["warnings.warn", "syncbn.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"encoding.nn.{} is now deprecated in favor of encoding.nn.{}.\"", "\n", ".", "format", "(", "'BatchNorm2d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "EncodingDeprecationWarning", ")", "\n", "super", "(", "BatchNorm2d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.syncbn.BatchNorm3d.__init__": [[237, 241], ["warnings.warn", "syncbn.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"encoding.nn.{} is now deprecated in favor of encoding.nn.{}.\"", "\n", ".", "format", "(", "'BatchNorm3d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "EncodingDeprecationWarning", ")", "\n", "super", "(", "BatchNorm3d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.ConvBnAct.__init__": [[26, 44], ["torch.Sequential.__init__", "customize.ConvBnAct.add_module", "customize.ConvBnAct.add_module", "conv_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "customize.ConvBnAct.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "radix", "=", "0", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "act", "=", "True", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "radix", ">", "0", ":", "\n", "            ", "conv_layer", "=", "SplAtConv2d", "\n", "conv_kwargs", "=", "{", "'radix'", ":", "radix", ",", "'rectify'", ":", "rectify", ",", "'rectify_avg'", ":", "rectify_avg", ",", "'norm_layer'", ":", "norm_layer", "}", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "RFConv2d", "if", "rectify", "else", "nn", ".", "Conv2d", "\n", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectify", "else", "{", "}", "\n", "", "self", ".", "add_module", "(", "\"conv\"", ",", "conv_layer", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "\n", "padding_mode", "=", "padding_mode", ",", "**", "conv_kwargs", ")", ")", "\n", "self", ".", "add_module", "(", "\"bn\"", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "if", "act", ":", "\n", "            ", "self", ".", "add_module", "(", "\"relu\"", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.GlobalAvgPool2d.__init__": [[47, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.GlobalAvgPool2d.forward": [[51, 53], ["torch.nn.functional.adaptive_avg_pool2d().view", "torch.nn.functional.adaptive_avg_pool2d().view", "inputs.size", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "F", ".", "adaptive_avg_pool2d", "(", "inputs", ",", "1", ")", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.GramMatrix.forward": [[61, 67], ["y.size", "y.view", "y.view.transpose", "y.view.bmm"], "methods", ["None"], ["def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "(", "b", ",", "ch", ",", "h", ",", "w", ")", "=", "y", ".", "size", "(", ")", "\n", "features", "=", "y", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "features_t", "=", "features", ".", "transpose", "(", "1", ",", "2", ")", "\n", "gram", "=", "features", ".", "bmm", "(", "features_t", ")", "/", "(", "ch", "*", "h", "*", "w", ")", "\n", "return", "gram", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.View.__init__": [[73, 79], ["torch.Module.__init__", "isinstance", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "View", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "Size", ")", ":", "\n", "            ", "self", ".", "size", "=", "args", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "torch", ".", "Size", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.View.forward": [[80, 82], ["input.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.Sum.__init__": [[85, 89], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "keep_dim", "=", "False", ")", ":", "\n", "        ", "super", "(", "Sum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "keep_dim", "=", "keep_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.Sum.forward": [[90, 92], ["input.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "sum", "(", "self", ".", "dim", ",", "self", ".", "keep_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.Mean.__init__": [[95, 99], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "keep_dim", "=", "False", ")", ":", "\n", "        ", "super", "(", "Mean", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "keep_dim", "=", "keep_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.Mean.forward": [[100, 102], ["input.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "mean", "(", "self", ".", "dim", ",", "self", ".", "keep_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.Normalize.__init__": [[123, 127], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.Normalize.forward": [[128, 130], ["torch.nn.functional.normalize", "torch.nn.functional.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "x", ",", "self", ".", "p", ",", "self", ".", "dim", ",", "eps", "=", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.ConcurrentModule.__init__": [[138, 140], ["torch.ModuleList.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "modules", "=", "None", ")", ":", "\n", "        ", "super", "(", "ConcurrentModule", ",", "self", ")", ".", "__init__", "(", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.ConcurrentModule.forward": [[141, 146], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.append", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "layer", "in", "self", ":", "\n", "            ", "outputs", ".", "append", "(", "layer", "(", "x", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.PyramidPooling.__init__": [[152, 174], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "norm_layer", ",", "up_kwargs", ")", ":", "\n", "        ", "super", "(", "PyramidPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "3", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "6", ")", "\n", "\n", "out_channels", "=", "int", "(", "in_channels", "/", "4", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "# bilinear interpolate options", "\n", "self", ".", "_up_kwargs", "=", "up_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.customize.PyramidPooling.forward": [[175, 182], ["x.size", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "customize.PyramidPooling.conv1", "customize.PyramidPooling.conv2", "customize.PyramidPooling.conv3", "customize.PyramidPooling.conv4", "customize.PyramidPooling.pool1", "customize.PyramidPooling.pool2", "customize.PyramidPooling.pool3", "customize.PyramidPooling.pool4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "feat1", "=", "F", ".", "interpolate", "(", "self", ".", "conv1", "(", "self", ".", "pool1", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "feat2", "=", "F", ".", "interpolate", "(", "self", ".", "conv2", "(", "self", ".", "pool2", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "feat3", "=", "F", ".", "interpolate", "(", "self", ".", "conv3", "(", "self", ".", "pool3", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "feat4", "=", "F", ".", "interpolate", "(", "self", ".", "conv4", "(", "self", ".", "pool4", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ")", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.__init__": [[24, 34], ["torch.nn.Module.__init__", "dropblock.DropBlock2D.register_buffer", "dropblock.DropBlock2D.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", ",", "block_size", ",", "share_channel", "=", "False", ")", ":", "\n", "        ", "super", "(", "DropBlock2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'i'", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "\n", "self", ".", "register_buffer", "(", "'drop_prob'", ",", "drop_prob", "*", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "inited", "=", "False", "\n", "self", ".", "step_size", "=", "0.0", "\n", "self", ".", "start_step", "=", "0", "\n", "self", ".", "nr_steps", "=", "0", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "share_channel", "=", "share_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.reset": [[35, 40], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"stop DropBlock\"\"\"", "\n", "self", ".", "inited", "=", "True", "\n", "self", ".", "i", "[", "0", "]", "=", "0", "\n", "self", ".", "drop_prob", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.reset_steps": [[41, 49], ["dropblock.DropBlock2D.drop_prob.item"], "methods", ["None"], ["", "def", "reset_steps", "(", "self", ",", "start_step", ",", "nr_steps", ",", "start_value", "=", "0", ",", "stop_value", "=", "None", ")", ":", "\n", "        ", "self", ".", "inited", "=", "True", "\n", "stop_value", "=", "self", ".", "drop_prob", ".", "item", "(", ")", "if", "stop_value", "is", "None", "else", "stop_value", "\n", "self", ".", "i", "[", "0", "]", "=", "0", "\n", "self", ".", "drop_prob", "[", "0", "]", "=", "start_value", "\n", "self", ".", "step_size", "=", "(", "stop_value", "-", "start_value", ")", "/", "nr_steps", "\n", "self", ".", "nr_steps", "=", "nr_steps", "\n", "self", ".", "start_step", "=", "start_step", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.forward": [[50, 74], ["dropblock.DropBlock2D.step", "dropblock.DropBlock2D._compute_gamma", "dropblock.DropBlock2D._compute_block_mask", "dropblock.DropBlock2D.drop_prob.item", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "block_mask.numel", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D._compute_gamma", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "self", ".", "drop_prob", ".", "item", "(", ")", "==", "0.", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "step", "(", ")", "\n", "\n", "# get gamma value", "\n", "gamma", "=", "self", ".", "_compute_gamma", "(", "x", ")", "\n", "\n", "# sample mask and place on input device", "\n", "if", "self", ".", "share_channel", ":", "\n", "                ", "mask", "=", "(", "torch", ".", "rand", "(", "*", "x", ".", "shape", "[", "2", ":", "]", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "<", "gamma", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "(", "torch", ".", "rand", "(", "*", "x", ".", "shape", "[", "1", ":", "]", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "<", "gamma", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# compute block mask", "\n", "", "block_mask", ",", "keeped", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "\n", "# apply block mask", "\n", "out", "=", "x", "*", "block_mask", "\n", "\n", "# scale output", "\n", "out", "=", "out", "*", "(", "block_mask", ".", "numel", "(", ")", "/", "keeped", ")", ".", "to", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D._compute_block_mask": [[75, 85], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d.numel", "torch.max_pool2d.sum().to", "torch.max_pool2d.sum"], "methods", ["None"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "block_mask", "=", "F", ".", "max_pool2d", "(", "mask", ",", "\n", "kernel_size", "=", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "block_size", "//", "2", ")", "\n", "\n", "keeped", "=", "block_mask", ".", "numel", "(", ")", "-", "block_mask", ".", "sum", "(", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "block_mask", "=", "1", "-", "block_mask", "\n", "\n", "return", "block_mask", ",", "keeped", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D._compute_gamma": [[86, 91], ["x.size", "dropblock.DropBlock2D.drop_prob.item"], "methods", ["None"], ["", "def", "_compute_gamma", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "gamma", "=", "self", ".", "drop_prob", ".", "item", "(", ")", "/", "(", "self", ".", "block_size", "**", "2", ")", "*", "(", "h", "*", "w", ")", "/", "(", "(", "w", "-", "self", ".", "block_size", "+", "1", ")", "*", "(", "h", "-", "self", ".", "block_size", "+", "1", ")", ")", "\n", "return", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.step": [[92, 98], ["dropblock.DropBlock2D.i.item"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "inited", "\n", "idx", "=", "self", ".", "i", ".", "item", "(", ")", "\n", "if", "idx", ">", "self", ".", "start_step", "and", "idx", "<", "self", ".", "start_step", "+", "self", ".", "nr_steps", ":", "\n", "            ", "self", ".", "drop_prob", "+=", "self", ".", "step_size", "\n", "", "self", ".", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D._load_from_state_dict": [[99, 110], ["super()._load_from_state_dict", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "idx_key", "=", "prefix", "+", "'i'", "\n", "drop_prob_key", "=", "prefix", "+", "'drop_prob'", "\n", "if", "idx_key", "not", "in", "state_dict", ":", "\n", "            ", "state_dict", "[", "idx_key", "]", "=", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "if", "idx_key", "not", "in", "drop_prob_key", ":", "\n", "            ", "state_dict", "[", "drop_prob_key", "]", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "super", "(", "DropBlock2D", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D._save_to_state_dict": [[111, 114], ["None"], "methods", ["None"], ["", "def", "_save_to_state_dict", "(", "self", ",", "destination", ",", "prefix", ",", "keep_vars", ")", ":", "\n", "        ", "\"\"\"overwrite save method\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.extra_repr": [[115, 117], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'drop_prob={}, step_size={}'", ".", "format", "(", "self", ".", "drop_prob", ",", "self", ".", "step_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.reset_dropblock": [[118, 127], ["isinstance", "m.reset_steps"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.reset_steps"], ["", "", "def", "reset_dropblock", "(", "start_step", ",", "nr_steps", ",", "start_value", ",", "stop_value", ",", "m", ")", ":", "\n", "    ", "\"\"\"\n    Example:\n        from functools import partial\n        apply_drop_prob = partial(reset_dropblock, 0, epochs*iters_per_epoch, 0.0, 0.1)\n        net.apply(apply_drop_prob)\n    \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "DropBlock2D", ")", ":", "\n", "        ", "m", ".", "reset_steps", "(", "start_step", ",", "nr_steps", ",", "start_value", ",", "stop_value", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding._aggregate.forward": [[19, 28], ["ctx.save_for_backward", "lib.gpu.aggregate_forward", "lib.cpu.aggregate_forward"], "methods", ["None"], ["\n", "__all__", "=", "[", "'Encoding'", ",", "'EncodingDrop'", ",", "'Inspiration'", ",", "'UpsampleConv2d'", ",", "\n", "'EncodingCosine'", "]", "\n", "\n", "class", "Encoding", "(", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding._aggregate.backward": [[29, 37], ["lib.gpu.aggregate_backward", "lib.cpu.aggregate_backward"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding._scaled_l2.forward": [[64, 72], ["ctx.save_for_backward", "lib.gpu.scaled_l2_forward", "lib.cpu.scaled_l2_forward"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding._scaled_l2.backward": [[73, 81], ["lib.gpu.scaled_l2_backward", "lib.cpu.scaled_l2_backward"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "D", ",", "K", ")", ":", "\n", "        ", "super", "(", "Encoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# init codewords and smoothing factor", "\n", "self", ".", "D", ",", "self", ".", "K", "=", "D", ",", "K", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding.aggregate": [[38, 62], ["_aggregate.apply"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding.scaled_l2": [[82, 96], ["_scaled_l2.apply"], "function", ["None"], ["self", ".", "codewords", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "K", ",", "D", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "K", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "reset_params", "(", ")", "\n", "\n", "", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "std1", "=", "1.", "/", "(", "(", "self", ".", "K", "*", "self", ".", "D", ")", "**", "(", "1", "/", "2", ")", ")", "\n", "self", ".", "codewords", ".", "data", ".", "uniform_", "(", "-", "std1", ",", "std1", ")", "\n", "self", ".", "scale", ".", "data", ".", "uniform_", "(", "-", "1", ",", "0", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "# input X is a 4D tensor", "\n", "        ", "assert", "(", "X", ".", "size", "(", "1", ")", "==", "self", ".", "D", ")", "\n", "B", ",", "D", "=", "X", ".", "size", "(", "0", ")", ",", "self", ".", "D", "\n", "if", "X", ".", "dim", "(", ")", "==", "3", ":", "\n", "# BxDxN => BxNxD", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.encoding.pairwise_cosine": [[98, 111], ["torch.matmul", "torch.matmul", "torch.normalize", "torch.normalize", "F.normalize.t"], "function", ["None"], ["", "elif", "X", ".", "dim", "(", ")", "==", "4", ":", "\n", "# BxDxHxW => Bx(HW)xD", "\n", "            ", "X", "=", "X", ".", "view", "(", "B", ",", "D", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Encoding Layer unknown input dims!'", ")", "\n", "# assignment weights BxNxK", "\n", "", "A", "=", "F", ".", "softmax", "(", "scaled_l2", "(", "X", ",", "self", ".", "codewords", ",", "self", ".", "scale", ")", ",", "dim", "=", "2", ")", "\n", "# aggregate", "\n", "E", "=", "aggregate", "(", "A", ",", "X", ",", "self", ".", "codewords", ")", "\n", "return", "E", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'N x '", "+", "str", "(", "self", ".", "D", ")", "+", "'=>'", "+", "str", "(", "self", ".", "K", ")", "+", "'x'"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.rectify._rectify.forward": [[18, 34], ["ctx.save_for_backward", "ctx.mark_dirty", "lib.gpu.conv_rectify", "lib.cpu.conv_rectify", "zip"], "methods", ["None"], ["\n", "__all__", "=", "[", "'RFConv2d'", "]", "\n", "\n", "\n", "class", "RFConv2d", "(", "Conv2d", ")", ":", "\n", "    ", "\"\"\"Rectified Convolution\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ",", "\n", "average_mode", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "rectify", "=", "average_mode", "or", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "average", "=", "average_mode", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.rectify._rectify.backward": [[35, 46], ["ctx.mark_dirty", "lib.gpu.conv_rectify", "lib.cpu.conv_rectify"], "methods", ["None"], ["\n", "super", "(", "RFConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "", "def", "_conv_forward", "(", "self", ",", "input", ",", "weight", ")", ":", "\n", "        ", "if", "self", ".", "padding_mode", "!=", "'zeros'", ":", "\n", "            ", "return", "F", ".", "conv2d", "(", "F", ".", "pad", "(", "input", ",", "self", ".", "_padding_repeated_twice", ",", "mode", "=", "self", ".", "padding_mode", ")", ",", "\n", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "_pair", "(", "0", ")", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.dist_syncbn.dist_syncbatchnorm_.forward": [[16, 71], ["x.contiguous.contiguous.contiguous", "torch.Tensor().to", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce.wait", "torch.distributed.all_reduce.wait", "torch.distributed.all_reduce.wait", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.save_for_backward", "ctx.save_for_backward", "x.contiguous.contiguous.numel", "x.contiguous.contiguous.size", "ValueError", "lib.gpu.expectation_forward", "lib.gpu.batchnorm_forward", "lib.cpu.batchnorm_forward", "running_mean.contiguous", "running_var.contiguous", "lib.gpu.batchnorm_forward", "lib.cpu.batchnorm_forward", "torch.Tensor", "running_mean.mul_", "running_var.mul_"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "gamma", ",", "beta", ",", "running_mean", ",", "running_var", ",", "eps", ",", "momentum", ",", "training", ",", "process_group", ")", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "process_group", "=", "process_group", "\n", "\n", "if", "not", "ctx", ".", "training", ":", "\n", "            ", "_ex", ",", "_var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "_exs", "=", "_var", "+", "_ex", "**", "2", "\n", "if", "x", ".", "is_cuda", ":", "\n", "                ", "y", "=", "lib", ".", "gpu", ".", "batchnorm_forward", "(", "x", ",", "_ex", ",", "_exs", ",", "gamma", ",", "beta", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "lib", ".", "cpu", ".", "batchnorm_forward", "(", "x", ",", "_ex", ",", "_exs", ",", "gamma", ",", "beta", ",", "ctx", ".", "eps", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "x", ",", "_ex", ",", "_exs", ",", "gamma", ",", "beta", ")", "\n", "return", "y", "\n", "\n", "", "size", "=", "x", ".", "numel", "(", ")", "//", "x", ".", "size", "(", "1", ")", "\n", "if", "size", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected more than 1 value per channel when training, got input size {}'", ".", "format", "(", "size", ")", ")", "\n", "\n", "", "if", "x", ".", "is_cuda", ":", "\n", "            ", "_ex", ",", "_exs", "=", "lib", ".", "gpu", ".", "expectation_forward", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "\n", "", "count", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "count_all_reduce", "=", "torch", ".", "distributed", ".", "all_reduce", "(", "count", ",", "group", "=", "process_group", ",", "async_op", "=", "True", ")", "\n", "_ex_all_reduce", "=", "torch", ".", "distributed", ".", "all_reduce", "(", "_ex", ",", "group", "=", "process_group", ",", "async_op", "=", "True", ")", "\n", "_exs_all_reduce", "=", "torch", ".", "distributed", ".", "all_reduce", "(", "_exs", ",", "group", "=", "process_group", ",", "async_op", "=", "True", ")", "\n", "\n", "count_all_reduce", ".", "wait", "(", ")", "\n", "_ex_all_reduce", ".", "wait", "(", ")", "\n", "_exs_all_reduce", ".", "wait", "(", ")", "\n", "\n", "_ex", "=", "_ex", "/", "count", "\n", "_exs", "=", "_exs", "/", "count", "\n", "\n", "# Update running stats", "\n", "_var", "=", "_exs", "-", "_ex", "**", "2", "\n", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "_ex", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "_var", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "running_mean", ",", "running_var", ")", "\n", "\n", "# BN forward + activation", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "y", "=", "lib", ".", "gpu", ".", "batchnorm_forward", "(", "x", ",", "_ex", ",", "_exs", ",", "gamma", ",", "beta", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "lib", ".", "cpu", ".", "batchnorm_forward", "(", "x", ",", "_ex", ",", "_exs", ",", "gamma", ",", "beta", ",", "ctx", ".", "eps", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "x", ",", "_ex", ",", "_exs", ",", "gamma", ",", "beta", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.dist_syncbn.dist_syncbatchnorm_.backward": [[72, 105], ["dz.contiguous.contiguous.contiguous", "lib.gpu.batchnorm_backward", "torch.Tensor().to", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce.wait", "torch.distributed.all_reduce.wait", "torch.distributed.all_reduce.wait", "lib.gpu.expectation_backward", "torch.Tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "x", ",", "_ex", ",", "_exs", ",", "gamma", ",", "beta", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# BN backward", "\n", "if", "dz", ".", "is_cuda", ":", "\n", "            ", "dx", ",", "_dex", ",", "_dexs", ",", "dgamma", ",", "dbeta", "=", "lib", ".", "gpu", ".", "batchnorm_backward", "(", "dz", ",", "x", ",", "_ex", ",", "_exs", ",", "gamma", ",", "beta", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "\n", "", "if", "ctx", ".", "training", ":", "\n", "            ", "process_group", "=", "ctx", ".", "process_group", "\n", "count", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "count_all_reduce", "=", "torch", ".", "distributed", ".", "all_reduce", "(", "count", ",", "group", "=", "process_group", ",", "async_op", "=", "True", ")", "\n", "_dex_all_reduce", "=", "torch", ".", "distributed", ".", "all_reduce", "(", "_dex", ",", "group", "=", "process_group", ",", "async_op", "=", "True", ")", "\n", "_dexs_all_reduce", "=", "torch", ".", "distributed", ".", "all_reduce", "(", "_dexs", ",", "group", "=", "process_group", ",", "async_op", "=", "True", ")", "\n", "\n", "count_all_reduce", ".", "wait", "(", ")", "\n", "_dex_all_reduce", ".", "wait", "(", ")", "\n", "_dexs_all_reduce", ".", "wait", "(", ")", "\n", "\n", "_dex", "=", "_dex", "/", "count", "\n", "_dexs", "=", "_dexs", "/", "count", "\n", "\n", "if", "x", ".", "is_cuda", ":", "\n", "                ", "dx_", "=", "lib", ".", "gpu", ".", "expectation_backward", "(", "x", ",", "_dex", ",", "_dexs", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplemented", "\n", "", "dx", "=", "dx", "+", "dx_", "\n", "\n", "", "return", "dx", ",", "dgamma", ",", "dbeta", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.moments_.forward": [[20, 28], ["ctx.save_for_backward", "lib.gpu.expectation_forward"], "methods", ["None"], ["\n", "from", ".", ".", "utils", ".", "misc", "import", "EncodingDeprecationWarning", "\n", "from", ".", ".", "functions", "import", "*", "\n", "\n", "\n", "__all__", "=", "[", "'DistSyncBatchNorm'", ",", "'SyncBatchNorm'", ",", "'BatchNorm1d'", ",", "'BatchNorm2d'", ",", "'BatchNorm3d'", "]", "\n", "\n", "class", "DistSyncBatchNorm", "(", "_BatchNorm", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.moments_.backward": [[29, 37], ["lib.gpu.expectation_backward"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.syncbatchnorm_.forward": [[39, 104], ["cls._parse_extra", "x.contiguous.contiguous.contiguous", "gamma.contiguous.contiguous.contiguous", "beta.contiguous.contiguous.contiguous", "ctx.save_for_backward", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "lib.gpu.batchnorm_forward", "lib.cpu.batchnorm_forward", "lib.gpu.expectation_forward", "running_mean.contiguous", "running_var.contiguous", "range", "torch.gather().mean", "torch.gather().mean", "torch.gather().mean", "torch.gather().mean", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "running_mean.mul_", "running_var.mul_", "ctx.master_queue.get", "ctx.master_queue.task_done", "torch.gather().mean.append", "torch.gather().mean.append", "queue.put", "torch.gather().mean.unsqueeze", "torch.gather().mean.unsqueeze", "_ex_w.unsqueeze", "_exs_w.unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather().mean.get_device"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.inp_syncbatchnorm_._parse_extra", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather"], ["\n", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "process_group", "=", "None", ")", ":", "\n", "        ", "super", "(", "DistSyncBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", "\n", "self", ".", "process_group", "=", "process_group", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "need_sync", "=", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", "\n", "process_group", "=", "None", "\n", "if", "need_sync", ":", "\n", "            ", "process_group", "=", "torch", ".", "distributed", ".", "group", ".", "WORLD", "\n", "if", "self", ".", "process_group", ":", "\n", "                ", "process_group", "=", "self", ".", "process_group", "\n", "", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", "process_group", ")", "\n", "need_sync", "=", "world_size", ">", "1", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "#def forward(ctx, x, gamma, beta, running_mean, running_var, eps, momentum, training, process_group):", "\n", "y", "=", "dist_syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "eps", ",", "self", ".", "momentum", ",", "self", ".", "training", ",", "process_group", ")", "\n", "\n", "#_var = _exs - _ex ** 2", "\n", "#running_mean.mul_((1 - ctx.momentum)).add_(ctx.momentum * _ex)", "\n", "#running_var.mul_((1 - ctx.momentum)).add_(ctx.momentum * _var)", "\n", "return", "y", ".", "view", "(", "input_shape", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.syncbatchnorm_.backward": [[105, 146], ["dz.contiguous.contiguous.contiguous", "lib.gpu.batchnorm_backward", "lib.gpu.expectation_backward", "range", "torch.gather().mean", "torch.gather().mean", "torch.gather().mean", "torch.gather().mean", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "ctx.master_queue.get", "ctx.master_queue.task_done", "torch.gather().mean.append", "torch.gather().mean.append", "queue.put", "torch.gather().mean.unsqueeze", "torch.gather().mean.unsqueeze", "_dex_w.unsqueeze", "_dexs_w.unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather().mean.get_device"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather"], ["", "", "class", "SyncBatchNorm", "(", "_BatchNorm", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.syncbatchnorm_._parse_extra": [[147, 157], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "sync", "=", "True", ",", "activation", "=", "\"none\"", ",", "slope", "=", "0.01", ",", "\n", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "SyncBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.inp_syncbatchnorm_.forward": [[177, 244], ["cls._parse_extra", "x.contiguous.contiguous.contiguous", "gamma.contiguous.contiguous.contiguous", "beta.contiguous.contiguous.contiguous", "syncbn._act_forward", "ctx.save_for_backward", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "lib.gpu.batchnorm_inp_forward", "lib.gpu.expectation_forward", "running_mean.contiguous", "running_var.contiguous", "range", "torch.gather().mean", "torch.gather().mean", "torch.gather().mean", "torch.gather().mean", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "running_mean.mul_", "running_var.mul_", "ctx.master_queue.get", "ctx.master_queue.task_done", "torch.gather().mean.append", "torch.gather().mean.append", "queue.put", "torch.gather().mean.unsqueeze", "torch.gather().mean.unsqueeze", "_ex_w.unsqueeze", "_exs_w.unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather().mean.get_device"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.inp_syncbatchnorm_._parse_extra", "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn._act_forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather"], ["# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "if", "x", ".", "get_device", "(", ")", "==", "self", ".", "devices", "[", "0", "]", ":", "\n", "# Master mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "True", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queues\"", ":", "self", ".", "worker_queues", ",", "\n", "\"worker_ids\"", ":", "self", ".", "worker_ids", "\n", "}", "\n", "", "else", ":", "\n", "# Worker mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "False", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queue\"", ":", "self", ".", "worker_queues", "[", "self", ".", "worker_ids", ".", "index", "(", "x", ".", "get_device", "(", ")", ")", "]", "\n", "}", "\n", "", "if", "self", ".", "inplace", ":", "\n", "            ", "return", "inp_syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "sync", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "\n", "self", ".", "activation", ",", "self", ".", "slope", ")", ".", "view", "(", "input_shape", ")", "\n", "", "else", ":", "\n", "            ", "return", "syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "sync", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "\n", "self", ".", "activation", ",", "self", ".", "slope", ")", ".", "view", "(", "input_shape", ")", "\n", "\n", "", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "activation", "==", "'none'", ":", "\n", "            ", "return", "'sync={}'", ".", "format", "(", "self", ".", "sync", ")", "\n", "", "else", ":", "\n", "            ", "return", "'sync={}, act={}, slope={}, inplace={}'", ".", "format", "(", "\n", "self", ".", "sync", ",", "self", ".", "activation", ",", "self", ".", "slope", ",", "self", ".", "inplace", "\n", ")", "\n", "\n", "", "", "", "class", "BatchNorm1d", "(", "SyncBatchNorm", ")", ":", "\n", "    ", "r\"\"\"\n    .. warning::\n        BatchNorm1d is deprecated in favor of :class:`encoding.nn.SyncBatchNorm`.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"encoding.nn.{} is now deprecated in favor of encoding.nn.{}.\"", "\n", ".", "format", "(", "'BatchNorm1d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "EncodingDeprecationWarning", ")", "\n", "super", "(", "BatchNorm1d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "class", "BatchNorm2d", "(", "SyncBatchNorm", ")", ":", "\n", "    ", "r\"\"\"\n    .. warning::\n        BatchNorm2d is deprecated in favor of :class:`encoding.nn.SyncBatchNorm`.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"encoding.nn.{} is now deprecated in favor of encoding.nn.{}.\"", "\n", ".", "format", "(", "'BatchNorm2d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "EncodingDeprecationWarning", ")", "\n", "super", "(", "BatchNorm2d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "class", "BatchNorm3d", "(", "SyncBatchNorm", ")", ":", "\n", "    ", "r\"\"\"\n    .. warning::\n        BatchNorm3d is deprecated in favor of :class:`encoding.nn.SyncBatchNorm`.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"encoding.nn.{} is now deprecated in favor of encoding.nn.{}.\"", "\n", ".", "format", "(", "'BatchNorm3d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "EncodingDeprecationWarning", ")", "\n", "super", "(", "BatchNorm3d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.inp_syncbatchnorm_.backward": [[245, 288], ["dz.contiguous.contiguous.contiguous", "syncbn._act_backward", "lib.gpu.batchnorm_inp_backward", "lib.gpu.expectation_inp_backward", "range", "torch.gather().mean", "torch.gather().mean", "torch.gather().mean", "torch.gather().mean", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "ctx.master_queue.get", "ctx.master_queue.task_done", "torch.gather().mean.append", "torch.gather().mean.append", "queue.put", "torch.gather().mean.unsqueeze", "torch.gather().mean.unsqueeze", "_dex_w.unsqueeze", "_dexs_w.unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather().mean.get_device"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn._act_backward", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.gather"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn.inp_syncbatchnorm_._parse_extra": [[289, 299], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn._act_forward": [[158, 166], ["ctx.activation.lower", "lib.gpu.leaky_relu_forward"], "function", ["None"], ["self", ".", "activation", "=", "activation", "\n", "self", ".", "inplace", "=", "False", "if", "activation", "==", "'none'", "else", "inplace", "\n", "#self.inplace = inplace", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "self", ".", "sync", "=", "sync", "if", "len", "(", "self", ".", "devices", ")", ">", "1", "else", "False", "\n", "# Initialize queues", "\n", "self", ".", "worker_ids", "=", "self", ".", "devices", "[", "1", ":", "]", "\n", "self", ".", "master_queue", "=", "Queue", "(", "len", "(", "self", ".", "worker_ids", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.syncbn._act_backward": [[167, 175], ["ctx.activation.lower", "lib.gpu.leaky_relu_backward"], "function", ["None"], ["self", ".", "worker_queues", "=", "[", "Queue", "(", "1", ")", "for", "_", "in", "self", ".", "worker_ids", "]", "\n", "# running_exs", "\n", "#self.register_buffer('running_exs', torch.ones(num_features))", "\n", "\n", "", "def", "_check_input_dim", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.functions.customize.NonMaxSuppression": [[18, 55], ["lib.gpu.non_max_suppression", "lib.cpu.non_max_suppression"], "function", ["None"], ["\n", "torch_ver", "=", "torch", ".", "__version__", "[", ":", "3", "]", "\n", "\n", "__all__", "=", "[", "'ConvBnAct'", ",", "'GlobalAvgPool2d'", ",", "'GramMatrix'", ",", "\n", "'View'", ",", "'Sum'", ",", "'Mean'", ",", "'Normalize'", ",", "'ConcurrentModule'", ",", "\n", "'PyramidPooling'", "]", "\n", "\n", "class", "ConvBnAct", "(", "nn", ".", "Sequential", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "radix", "=", "0", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "act", "=", "True", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "radix", ">", "0", ":", "\n", "            ", "conv_layer", "=", "SplAtConv2d", "\n", "conv_kwargs", "=", "{", "'radix'", ":", "radix", ",", "'rectify'", ":", "rectify", ",", "'rectify_avg'", ":", "rectify_avg", ",", "'norm_layer'", ":", "norm_layer", "}", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "RFConv2d", "if", "rectify", "else", "nn", ".", "Conv2d", "\n", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectify", "else", "{", "}", "\n", "", "self", ".", "add_module", "(", "\"conv\"", ",", "conv_layer", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "\n", "padding_mode", "=", "padding_mode", ",", "**", "conv_kwargs", ")", ")", "\n", "self", ".", "add_module", "(", "\"bn\"", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "if", "act", ":", "\n", "            ", "self", ".", "add_module", "(", "\"relu\"", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "\n", "", "", "", "class", "GlobalAvgPool2d", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "F", ".", "adaptive_avg_pool2d", "(", "inputs", ",", "1", ")", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "\n", "", "", "class", "GramMatrix", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.minc.MINCDataset.__init__": [[19, 33], ["os.path.expanduser", "os.path.join", "minc.find_classes", "minc.make_dataset", "os.path.join", "os.path.join", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.minc.find_classes", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.minc.make_dataset"], ["def", "__init__", "(", "self", ",", "root", "=", "os", ".", "path", ".", "expanduser", "(", "'~/.encoding/data/'", ")", ",", "\n", "train", "=", "True", ",", "transform", "=", "None", ",", "download", "=", "None", ")", ":", "\n", "        ", "split", "=", "'train'", "if", "train", "==", "True", "else", "'val'", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'minc-2500'", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "classes", ",", "class_to_idx", "=", "find_classes", "(", "root", "+", "'/images'", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'labels/train1.txt'", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'labels/test1.txt'", ")", "\n", "\n", "", "self", ".", "images", ",", "self", ".", "labels", "=", "make_dataset", "(", "filename", ",", "root", ",", "\n", "class_to_idx", ")", "\n", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.minc.MINCDataset.__getitem__": [[34, 41], ["PIL.Image.open().convert", "minc.MINCDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "_label", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "_img", "=", "self", ".", "transform", "(", "_img", ")", "\n", "\n", "", "return", "_img", ",", "_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.minc.MINCDataset.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.minc.find_classes": [[45, 50], ["classes.sort", "os.listdir", "os.path.isdir", "range", "os.path.join", "len"], "function", ["None"], ["", "", "def", "find_classes", "(", "dir", ")", ":", "\n", "    ", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "]", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.minc.make_dataset": [[52, 65], ["open", "os.path.join", "os.path.join", "os.path.isfile", "images.append", "labels.append", "line.rstrip", "os.path.split", "os.path.dirname"], "function", ["None"], ["", "def", "make_dataset", "(", "filename", ",", "datadir", ",", "class_to_idx", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "filename", ")", ",", "\"r\"", ")", "as", "lines", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "_image", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "line", ".", "rstrip", "(", "'\\n'", ")", ")", "\n", "_dirname", "=", "os", ".", "path", ".", "split", "(", "os", ".", "path", ".", "dirname", "(", "_image", ")", ")", "[", "1", "]", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_image", ")", "\n", "label", "=", "class_to_idx", "[", "_dirname", "]", "\n", "images", ".", "append", "(", "_image", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.coco.COCOSegmentation.__init__": [[13, 39], ["os.path.expanduser", "base.BaseDataset.__init__", "COCO", "os.path.exists", "print", "os.path.join", "os.path.join", "os.path.join", "print", "os.path.join", "os.path.join", "os.path.join", "torch.load", "list", "coco.COCOSegmentation._preprocess", "coco.COCOSegmentation.coco.imgs.keys"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation._preprocess"], ["def", "__init__", "(", "self", ",", "root", "=", "os", ".", "path", ".", "expanduser", "(", "'~/.encoding/data'", ")", ",", "split", "=", "'train'", ",", "\n", "mode", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "COCOSegmentation", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", ",", "mode", ",", "transform", ",", "target_transform", ",", "**", "kwargs", ")", "\n", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "from", "pycocotools", "import", "mask", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "print", "(", "'train set'", ")", "\n", "ann_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'annotations/instances_train2017.json'", ")", "\n", "ids_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'annotations/train_ids.pth'", ")", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'train2017'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'val set'", ")", "\n", "assert", "split", "==", "'val'", "\n", "ann_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'annotations/instances_val2017.json'", ")", "\n", "ids_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'annotations/val_ids.pth'", ")", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'val2017'", ")", "\n", "", "self", ".", "coco", "=", "COCO", "(", "ann_file", ")", "\n", "self", ".", "coco_mask", "=", "mask", "\n", "if", "os", ".", "path", ".", "exists", "(", "ids_file", ")", ":", "\n", "            ", "self", ".", "ids", "=", "torch", ".", "load", "(", "ids_file", ")", "\n", "", "else", ":", "\n", "            ", "ids", "=", "list", "(", "self", ".", "coco", ".", "imgs", ".", "keys", "(", ")", ")", "\n", "self", ".", "ids", "=", "self", ".", "_preprocess", "(", "ids", ",", "ids_file", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.coco.COCOSegmentation.__getitem__": [[40, 63], ["PIL.Image.open().convert", "coco.loadAnns", "PIL.Image.fromarray", "coco.loadImgs", "coco.getAnnIds", "coco.COCOSegmentation._gen_seg_mask", "coco.COCOSegmentation._sync_transform", "coco.COCOSegmentation.transform", "coco.COCOSegmentation.target_transform", "PIL.Image.open", "coco.COCOSegmentation._val_sync_transform", "coco.COCOSegmentation._mask_transform", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.coco.COCOSegmentation._gen_seg_mask", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18._sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation._val_sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation._mask_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "coco", "=", "self", ".", "coco", "\n", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "img_metadata", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "\n", "path", "=", "img_metadata", "[", "'file_name'", "]", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "path", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "cocotarget", "=", "coco", ".", "loadAnns", "(", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "self", ".", "_gen_seg_mask", "(", "\n", "cocotarget", ",", "img_metadata", "[", "'height'", "]", ",", "img_metadata", "[", "'width'", "]", ")", ")", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "mask", "=", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "# general resize, normalize and toTensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.coco.COCOSegmentation.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.coco.COCOSegmentation._gen_seg_mask": [[67, 83], ["numpy.zeros", "coco_mask.frPyObjects", "coco_mask.decode", "coco.COCOSegmentation.CAT_LIST.index", "len", "numpy.sum"], "methods", ["None"], ["", "def", "_gen_seg_mask", "(", "self", ",", "target", ",", "h", ",", "w", ")", ":", "\n", "        ", "mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "coco_mask", "=", "self", ".", "coco_mask", "\n", "for", "instance", "in", "target", ":", "\n", "            ", "rle", "=", "coco_mask", ".", "frPyObjects", "(", "instance", "[", "'segmentation'", "]", ",", "h", ",", "w", ")", "\n", "m", "=", "coco_mask", ".", "decode", "(", "rle", ")", "\n", "cat", "=", "instance", "[", "'category_id'", "]", "\n", "if", "cat", "in", "self", ".", "CAT_LIST", ":", "\n", "                ", "c", "=", "self", ".", "CAT_LIST", ".", "index", "(", "cat", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "m", ".", "shape", ")", "<", "3", ":", "\n", "                ", "mask", "[", ":", ",", ":", "]", "+=", "(", "mask", "==", "0", ")", "*", "(", "m", "*", "c", ")", "\n", "", "else", ":", "\n", "                ", "mask", "[", ":", ",", ":", "]", "+=", "(", "mask", "==", "0", ")", "*", "(", "(", "(", "np", ".", "sum", "(", "m", ",", "axis", "=", "2", ")", ")", ">", "0", ")", "*", "c", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.coco.COCOSegmentation._preprocess": [[84, 103], ["print", "tqdm.trange", "print", "torch.save", "len", "coco.COCOSegmentation.coco.loadAnns", "coco.COCOSegmentation._gen_seg_mask", "tqdm.trange.set_description", "len", "coco.COCOSegmentation.coco.getAnnIds", "coco.COCOSegmentation.coco.loadImgs", "new_ids.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.coco.COCOSegmentation._gen_seg_mask"], ["", "def", "_preprocess", "(", "self", ",", "ids", ",", "ids_file", ")", ":", "\n", "        ", "print", "(", "\"Preprocessing mask, this will take a while.\"", "+", "\"But don't worry, it only run once for each split.\"", ")", "\n", "tbar", "=", "trange", "(", "len", "(", "ids", ")", ")", "\n", "new_ids", "=", "[", "]", "\n", "for", "i", "in", "tbar", ":", "\n", "            ", "img_id", "=", "ids", "[", "i", "]", "\n", "cocotarget", "=", "self", ".", "coco", ".", "loadAnns", "(", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", ")", "\n", "img_metadata", "=", "self", ".", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "\n", "mask", "=", "self", ".", "_gen_seg_mask", "(", "cocotarget", ",", "img_metadata", "[", "'height'", "]", ",", "\n", "img_metadata", "[", "'width'", "]", ")", "\n", "# more than 1k pixels", "\n", "if", "(", "mask", ">", "0", ")", ".", "sum", "(", ")", ">", "1000", ":", "\n", "                ", "new_ids", ".", "append", "(", "img_id", ")", "\n", "", "tbar", ".", "set_description", "(", "'Doing: {}/{}, got {} qualified images'", ".", "format", "(", "i", ",", "len", "(", "ids", ")", ",", "len", "(", "new_ids", ")", ")", ")", "\n", "", "print", "(", "'Found number of qualified images: '", ",", "len", "(", "new_ids", ")", ")", "\n", "torch", ".", "save", "(", "new_ids", ",", "ids_file", ")", "\n", "return", "new_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.folder.FolderLoader.__init__": [[21, 28], ["folder.get_folder_images", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.folder.get_folder_images"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "images", "=", "get_folder_images", "(", "root", ")", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \\\n                \"", "+", "self", ".", "root", "+", "\"\\n\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.folder.FolderLoader.__getitem__": [[29, 34], ["PIL.Image.open().convert", "folder.FolderLoader.transform", "os.path.basename", "PIL.Image.open"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.folder.FolderLoader.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.folder.Dataloder.__init__": [[50, 68], ["torchvision.Compose", "print", "folder.FolderLoader", "torch.DataLoader", "torch.DataLoader", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "# the data augmentation is implemented as part of the dataloader", "\n", "        ", "assert", "(", "args", ".", "test", ")", "\n", "input_transform", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "ToTensor", "(", ")", ",", "\n", "transform", ".", "Normalize", "(", "args", ".", "mean", ",", "args", ".", "std", ")", "]", ")", "\n", "args", ".", "test_batch_size", "=", "1", "\n", "\n", "assert", "(", "args", ".", "test_folder", "is", "not", "None", ")", "\n", "print", "(", "'loading the data from: {}'", ".", "format", "(", "args", ".", "test_folder", ")", ")", "\n", "\n", "testset", "=", "FolderLoader", "(", "args", ".", "test_folder", ",", "input_transform", ")", "\n", "kwargs", "=", "{", "'num_workers'", ":", "args", ".", "workers", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "self", ".", "trainloader", "=", "None", "\n", "self", ".", "testloader", "=", "data", ".", "DataLoader", "(", "testset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.folder.Dataloder.getloader": [[69, 71], ["None"], "methods", ["None"], ["", "def", "getloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "trainloader", ",", "self", ".", "testloader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.folder.get_folder_images": [[39, 46], ["os.listdir", "filename.endswith", "os.path.join", "img_paths.append"], "function", ["None"], ["", "", "def", "get_folder_images", "(", "img_folder", ")", ":", "\n", "    ", "img_paths", "=", "[", "]", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "img_folder", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "\".jpg\"", ")", ":", "\n", "            ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "img_folder", ",", "filename", ")", "\n", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "", "", "return", "img_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset.__init__": [[18, 22], ["builder.build_datasource", "torchvision.transforms.Compose", "base.BaseDataset.utils.build_from_cfg"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_datasource", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg"], ["        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "mode", "=", "mode", "if", "mode", "is", "not", "None", "else", "split", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset.__getitem__": [[26, 29], ["None"], "methods", ["None"], ["            ", "print", "(", "'BaseDataset: base_size {}, crop_size {}'", ".", "format", "(", "base_size", ",", "crop_size", ")", ")", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset.num_class": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_class", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "NUM_CLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset.pred_offset": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset.make_pred": [[40, 42], ["None"], "methods", ["None"], ["", "def", "make_pred", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "pred_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset._val_sync_transform": [[43, 63], ["img.crop.crop.resize", "mask.crop.crop.resize", "int", "int", "img.crop.crop.crop", "mask.crop.crop.crop", "int", "int", "round", "round", "base.BaseDataset._mask_transform"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation._mask_transform"], ["", "def", "_val_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "outsize", "=", "self", ".", "crop_size", "\n", "short_size", "=", "outsize", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "w", ">", "h", ":", "\n", "            ", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "            ", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "outsize", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "outsize", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", ",", "y1", "+", "outsize", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", ",", "y1", "+", "outsize", ")", ")", "\n", "# final transform", "\n", "return", "img", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset._sync_transform": [[64, 97], ["random.randint", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "random.randint", "random.randint", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "random.random", "PIL.ImageOps.expand.transpose", "PIL.ImageOps.expand.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "base.BaseDataset._mask_transform"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation._mask_transform"], ["", "def", "_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# random mirror", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_size", "=", "self", ".", "crop_size", "\n", "# random scale (short edge)", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "long_size", "=", "random", ".", "randint", "(", "int", "(", "self", ".", "base_size", "*", "0.5", ")", ",", "int", "(", "self", ".", "base_size", "*", "2.0", ")", ")", "\n", "if", "h", ">", "w", ":", "\n", "            ", "oh", "=", "long_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "long_size", "/", "h", "+", "0.5", ")", "\n", "short_size", "=", "ow", "\n", "", "else", ":", "\n", "            ", "ow", "=", "long_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "long_size", "/", "w", "+", "0.5", ")", "\n", "short_size", "=", "oh", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "short_size", "<", "crop_size", ":", "\n", "            ", "padh", "=", "crop_size", "-", "oh", "if", "oh", "<", "crop_size", "else", "0", "\n", "padw", "=", "crop_size", "-", "ow", "if", "ow", "<", "crop_size", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_size", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_size", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "# final transform", "\n", "return", "img", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset._mask_transform": [[98, 100], ["torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.test_batchify_fn": [[102, 110], ["isinstance", "TypeError", "list", "isinstance", "error_msg.format", "zip", "type", "base.test_batchify_fn"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.test_batchify_fn"], ["", "", "def", "test_batchify_fn", "(", "data", ")", ":", "\n", "    ", "error_msg", "=", "\"batch must contain tensors, tuples or lists; found {}\"", "\n", "if", "isinstance", "(", "data", "[", "0", "]", ",", "(", "str", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "        ", "return", "list", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", "[", "0", "]", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "data", "=", "zip", "(", "*", "data", ")", "\n", "return", "[", "test_batchify_fn", "(", "i", ")", "for", "i", "in", "data", "]", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "batch", "[", "0", "]", ")", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.imagenet.ImageNetDataset.__init__": [[18, 24], ["os.path.expanduser", "os.path.join", "torchvision.ImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "os", ".", "path", ".", "expanduser", "(", "'~/.encoding/data'", ")", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "train", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "split", "=", "'train'", "if", "train", "==", "True", "else", "'val'", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", "\n", "super", "(", "ImageNetDataset", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "transform", ",", "target_transform", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapes.CitySegmentation.__init__": [[22, 42], ["base.BaseDataset.__init__", "cityscapes.get_city_pairs", "numpy.array", "numpy.array", "numpy.array", "numpy.array().astype", "len", "len", "len", "RuntimeError", "range", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.get_city_pairs"], ["def", "__init__", "(", "self", ",", "root", "=", "'/data/citys/'", ",", "split", "=", "'train'", ",", "\n", "mode", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CitySegmentation", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", ",", "mode", ",", "transform", ",", "target_transform", ",", "**", "kwargs", ")", "\n", "#self.root = os.path.join(root, self.BASE_DIR)", "\n", "self", ".", "images", ",", "self", ".", "mask_paths", "=", "get_city_pairs", "(", "self", ".", "root", ",", "self", ".", "split", ")", "\n", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "mask_paths", ")", ")", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Found 0 images in subfolders of: \\\n                \"", "+", "self", ".", "root", "+", "\"\\n\"", ")", "\n", "", "self", ".", "_indices", "=", "np", ".", "array", "(", "range", "(", "-", "1", ",", "19", ")", ")", "\n", "self", ".", "_classes", "=", "np", ".", "array", "(", "[", "0", ",", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "\n", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", "]", ")", "\n", "self", ".", "_key", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "-", "1", ",", "-", "1", ",", "0", ",", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "2", ",", "3", ",", "4", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "5", ",", "-", "1", ",", "6", ",", "7", ",", "8", ",", "9", ",", "\n", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "\n", "-", "1", ",", "-", "1", ",", "16", ",", "17", ",", "18", "]", ")", "\n", "self", ".", "_mapping", "=", "np", ".", "array", "(", "range", "(", "-", "1", ",", "len", "(", "self", ".", "_key", ")", "-", "1", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapes.CitySegmentation._class_to_index": [[43, 50], ["numpy.unique", "range", "numpy.digitize", "cityscapes.CitySegmentation._key[].reshape", "len", "mask.ravel"], "methods", ["None"], ["", "def", "_class_to_index", "(", "self", ",", "mask", ")", ":", "\n", "# assert the values", "\n", "        ", "values", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "values", ")", ")", ":", "\n", "            ", "assert", "(", "values", "[", "i", "]", "in", "self", ".", "_mapping", ")", "\n", "", "index", "=", "np", ".", "digitize", "(", "mask", ".", "ravel", "(", ")", ",", "self", ".", "_mapping", ",", "right", "=", "True", ")", "\n", "return", "self", ".", "_key", "[", "index", "]", ".", "reshape", "(", "mask", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapes.CitySegmentation._preprocess": [[51, 66], ["os.path.exists", "print", "tqdm.tqdm.tqdm", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "tqdm.tqdm.tqdm.set_description", "PIL.Image.fromarray", "torch.load.append", "torch.load.append", "cityscapes.CitySegmentation._class_to_index().astype", "cityscapes.CitySegmentation._class_to_index", "numpy.array", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation._class_to_index"], ["", "def", "_preprocess", "(", "self", ",", "mask_file", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "mask_file", ")", ":", "\n", "            ", "masks", "=", "torch", ".", "load", "(", "mask_file", ")", "\n", "return", "masks", "\n", "", "masks", "=", "[", "]", "\n", "print", "(", "\"Preprocessing mask, this will take a while.\"", "+", "\"But don't worry, it only run once for each split.\"", ")", "\n", "tbar", "=", "tqdm", "(", "self", ".", "mask_paths", ")", "\n", "for", "fname", "in", "tbar", ":", "\n", "            ", "tbar", ".", "set_description", "(", "\"Preprocessing masks {}\"", ".", "format", "(", "fname", ")", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "self", ".", "_class_to_index", "(", "\n", "np", ".", "array", "(", "Image", ".", "open", "(", "fname", ")", ")", ")", ".", "astype", "(", "'int8'", ")", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "torch", ".", "save", "(", "masks", ",", "mask_file", ")", "\n", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapes.CitySegmentation.__getitem__": [[67, 89], ["PIL.Image.open().convert", "PIL.Image.open", "cityscapes.CitySegmentation._sync_transform", "cityscapes.CitySegmentation.transform", "cityscapes.CitySegmentation.target_transform", "PIL.Image.open", "cityscapes.CitySegmentation.transform", "os.path.basename", "cityscapes.CitySegmentation._val_sync_transform", "cityscapes.CitySegmentation._mask_transform"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18._sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation._val_sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation._mask_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "#mask = self.masks[index]", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "mask_paths", "[", "index", "]", ")", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "mask", "=", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "# general resize, normalize and toTensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapes.CitySegmentation._mask_transform": [[90, 94], ["cityscapes.CitySegmentation._class_to_index", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "numpy.array().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation._class_to_index"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "#target = np.array(mask).astype('int32') - 1", "\n", "        ", "target", "=", "self", ".", "_class_to_index", "(", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "return", "torch", ".", "from_numpy", "(", "target", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapes.CitySegmentation.__len__": [[95, 97], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapes.CitySegmentation.make_pred": [[98, 104], ["numpy.unique", "range", "numpy.digitize", "cityscapes.CitySegmentation._classes[].reshape", "len", "mask.ravel"], "methods", ["None"], ["", "def", "make_pred", "(", "self", ",", "mask", ")", ":", "\n", "        ", "values", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "values", ")", ")", ":", "\n", "            ", "assert", "(", "values", "[", "i", "]", "in", "self", ".", "_indices", ")", "\n", "", "index", "=", "np", ".", "digitize", "(", "mask", ".", "ravel", "(", ")", ",", "self", ".", "_indices", ",", "right", "=", "True", ")", "\n", "return", "self", ".", "_classes", "[", "index", "]", ".", "reshape", "(", "mask", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapes.get_city_pairs": [[106, 142], ["os.walk", "print", "os.path.join", "os.path.join", "cityscapes.get_city_pairs.get_path_pairs"], "function", ["None"], ["", "", "def", "get_city_pairs", "(", "folder", ",", "split", "=", "'train'", ")", ":", "\n", "    ", "def", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", ":", "\n", "        ", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "for", "root", ",", "directories", ",", "files", "in", "os", ".", "walk", "(", "img_folder", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "                ", "if", "filename", ".", "endswith", "(", "\".png\"", ")", ":", "\n", "                    ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "foldername", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "imgpath", ")", ")", "\n", "maskname", "=", "filename", ".", "replace", "(", "'leftImg8bit'", ",", "'gtFine_labelIds'", ")", "\n", "maskpath", "=", "os", ".", "path", ".", "join", "(", "mask_folder", ",", "foldername", ",", "maskname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "imgpath", ")", "and", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "                        ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "mask_paths", ".", "append", "(", "maskpath", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'cannot find the mask or image:'", ",", "imgpath", ",", "maskpath", ")", "\n", "", "", "", "", "print", "(", "'Found {} images in the folder {}'", ".", "format", "(", "len", "(", "img_paths", ")", ",", "img_folder", ")", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n", "", "if", "split", "==", "'train'", "or", "split", "==", "'val'", "or", "split", "==", "'test'", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/'", "+", "split", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtFine/'", "+", "split", ")", "\n", "img_paths", ",", "mask_paths", "=", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "", "else", ":", "\n", "        ", "assert", "split", "==", "'trainval'", "\n", "print", "(", "'trainval set'", ")", "\n", "train_img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/train'", ")", "\n", "train_mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtFine/train'", ")", "\n", "val_img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/val'", ")", "\n", "val_mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtFine/val'", ")", "\n", "train_img_paths", ",", "train_mask_paths", "=", "get_path_pairs", "(", "train_img_folder", ",", "train_mask_folder", ")", "\n", "val_img_paths", ",", "val_mask_paths", "=", "get_path_pairs", "(", "val_img_folder", ",", "val_mask_folder", ")", "\n", "img_paths", "=", "train_img_paths", "+", "val_img_paths", "\n", "mask_paths", "=", "train_mask_paths", "+", "val_mask_paths", "\n", "", "return", "img_paths", ",", "mask_paths", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.ade20k.ADE20KSegmentation.__init__": [[23, 37], ["base.BaseDataset.__init__", "os.path.join", "os.path.exists", "ade20k._get_ade20k_pairs", "len", "RuntimeError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.ade20k._get_ade20k_pairs"], ["def", "__init__", "(", "self", ",", "root", "=", "'/data'", ",", "split", "=", "'train'", ",", "\n", "mode", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ADE20KSegmentation", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", ",", "mode", ",", "transform", ",", "target_transform", ",", "**", "kwargs", ")", "\n", "# assert exists and prepare dataset automatically", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "BASE_DIR", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", ",", "\"Please setup the dataset using\"", "+", "\"encoding/scripts/prepare_ade20k.py\"", "\n", "self", ".", "images", ",", "self", ".", "masks", "=", "_get_ade20k_pairs", "(", "root", ",", "split", ")", "\n", "if", "split", "!=", "'test'", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "masks", ")", ")", "\n", "", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \\\n                \"", "+", "root", "+", "\"\\n\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.ade20k.ADE20KSegmentation.__getitem__": [[38, 59], ["PIL.Image.open().convert", "PIL.Image.open", "ade20k.ADE20KSegmentation._sync_transform", "ade20k.ADE20KSegmentation.transform", "ade20k.ADE20KSegmentation.target_transform", "PIL.Image.open", "ade20k.ADE20KSegmentation.transform", "os.path.basename", "ade20k.ADE20KSegmentation._val_sync_transform", "ade20k.ADE20KSegmentation._mask_transform"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18._sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation._val_sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation._mask_transform"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "masks", "[", "index", "]", ")", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "mask", "=", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "# general resize, normalize and toTensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.ade20k.ADE20KSegmentation._mask_transform": [[98, 101], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "target", "=", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int64'", ")", "-", "1", "\n", "return", "torch", ".", "from_numpy", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.ade20k.ADE20KSegmentation.__len__": [[102, 104], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.ade20k.ADE20KSegmentation.pred_offset": [[105, 108], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.ade20k._get_ade20k_pairs": [[110, 150], ["os.listdir", "os.path.join", "os.path.join", "ade20k._get_ade20k_pairs.get_path_pairs"], "function", ["None"], ["", "", "def", "_get_ade20k_pairs", "(", "folder", ",", "split", "=", "'train'", ")", ":", "\n", "    ", "def", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", ":", "\n", "        ", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "img_folder", ")", ":", "\n", "            ", "basename", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "\".jpg\"", ")", ":", "\n", "                ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "img_folder", ",", "filename", ")", "\n", "maskname", "=", "basename", "+", "'.png'", "\n", "maskpath", "=", "os", ".", "path", ".", "join", "(", "mask_folder", ",", "maskname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "                    ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "mask_paths", ".", "append", "(", "maskpath", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'cannot find the mask:'", ",", "maskpath", ")", "\n", "", "", "", "return", "img_paths", ",", "mask_paths", "\n", "\n", "", "if", "split", "==", "'train'", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'images/training'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'annotations/training'", ")", "\n", "img_paths", ",", "mask_paths", "=", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", "\n", "print", "(", "'len(img_paths):'", ",", "len", "(", "img_paths", ")", ")", "\n", "assert", "len", "(", "img_paths", ")", "==", "20210", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'images/validation'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'annotations/validation'", ")", "\n", "img_paths", ",", "mask_paths", "=", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", "\n", "assert", "len", "(", "img_paths", ")", "==", "2000", "\n", "", "else", ":", "\n", "        ", "assert", "split", "==", "'trainval'", "\n", "train_img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'images/training'", ")", "\n", "train_mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'annotations/training'", ")", "\n", "val_img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'images/validation'", ")", "\n", "val_mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'annotations/validation'", ")", "\n", "train_img_paths", ",", "train_mask_paths", "=", "get_path_pairs", "(", "train_img_folder", ",", "train_mask_folder", ")", "\n", "val_img_paths", ",", "val_mask_paths", "=", "get_path_pairs", "(", "val_img_folder", ",", "val_mask_folder", ")", "\n", "img_paths", "=", "train_img_paths", "+", "val_img_paths", "\n", "mask_paths", "=", "train_mask_paths", "+", "val_mask_paths", "\n", "assert", "len", "(", "img_paths", ")", "==", "22210", "\n", "", "return", "img_paths", ",", "mask_paths", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation.__init__": [[20, 48], ["os.path.expanduser", "base.BaseDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "Detail", "pcontext.ContextSegmentation.detail.getImgs", "numpy.sort", "numpy.array().astype", "os.path.join", "print", "os.path.exists", "numpy.array", "torch.load", "pcontext.ContextSegmentation._preprocess", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation._preprocess"], ["def", "__init__", "(", "self", ",", "root", "=", "os", ".", "path", ".", "expanduser", "(", "'~/.encoding/data'", ")", ",", "split", "=", "'train'", ",", "\n", "mode", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ContextSegmentation", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", ",", "mode", ",", "transform", ",", "target_transform", ",", "**", "kwargs", ")", "\n", "from", "detail", "import", "Detail", "\n", "#from detail import mask", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "BASE_DIR", ")", "\n", "annFile", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'trainval_merged.json'", ")", "\n", "imgDir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'JPEGImages'", ")", "\n", "# training mode", "\n", "self", ".", "detail", "=", "Detail", "(", "annFile", ",", "imgDir", ",", "split", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "ids", "=", "self", ".", "detail", ".", "getImgs", "(", ")", "\n", "# generate masks", "\n", "self", ".", "_mapping", "=", "np", ".", "sort", "(", "np", ".", "array", "(", "[", "\n", "0", ",", "2", ",", "259", ",", "260", ",", "415", ",", "324", ",", "9", ",", "258", ",", "144", ",", "18", ",", "19", ",", "22", ",", "\n", "23", ",", "397", ",", "25", ",", "284", ",", "158", ",", "159", ",", "416", ",", "33", ",", "162", ",", "420", ",", "454", ",", "295", ",", "296", ",", "\n", "427", ",", "44", ",", "45", ",", "46", ",", "308", ",", "59", ",", "440", ",", "445", ",", "31", ",", "232", ",", "65", ",", "354", ",", "424", ",", "\n", "68", ",", "326", ",", "72", ",", "458", ",", "34", ",", "207", ",", "80", ",", "355", ",", "85", ",", "347", ",", "220", ",", "349", ",", "360", ",", "\n", "98", ",", "187", ",", "104", ",", "105", ",", "366", ",", "189", ",", "368", ",", "113", ",", "115", "]", ")", ")", "\n", "self", ".", "_key", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ".", "_mapping", ")", ")", ")", ".", "astype", "(", "'uint8'", ")", "\n", "mask_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "split", "+", "'.pth'", ")", "\n", "print", "(", "'mask_file:'", ",", "mask_file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "mask_file", ")", ":", "\n", "            ", "self", ".", "masks", "=", "torch", ".", "load", "(", "mask_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "masks", "=", "self", ".", "_preprocess", "(", "mask_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation._class_to_index": [[49, 56], ["numpy.unique", "range", "numpy.digitize", "pcontext.ContextSegmentation._key[].reshape", "len", "mask.ravel"], "methods", ["None"], ["", "", "def", "_class_to_index", "(", "self", ",", "mask", ")", ":", "\n", "# assert the values", "\n", "        ", "values", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "values", ")", ")", ":", "\n", "            ", "assert", "(", "values", "[", "i", "]", "in", "self", ".", "_mapping", ")", "\n", "", "index", "=", "np", ".", "digitize", "(", "mask", ".", "ravel", "(", ")", ",", "self", ".", "_mapping", ",", "right", "=", "True", ")", "\n", "return", "self", ".", "_key", "[", "index", "]", ".", "reshape", "(", "mask", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation._preprocess": [[57, 70], ["tqdm.trange", "print", "torch.save", "len", "PIL.Image.fromarray", "tqdm.trange.set_description", "pcontext.ContextSegmentation._class_to_index", "pcontext.ContextSegmentation.detail.getMask"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation._class_to_index"], ["", "def", "_preprocess", "(", "self", ",", "mask_file", ")", ":", "\n", "        ", "masks", "=", "{", "}", "\n", "tbar", "=", "trange", "(", "len", "(", "self", ".", "ids", ")", ")", "\n", "print", "(", "\"Preprocessing mask, this will take a while.\"", "+", "\"But don't worry, it only run once for each split.\"", ")", "\n", "for", "i", "in", "tbar", ":", "\n", "            ", "img_id", "=", "self", ".", "ids", "[", "i", "]", "\n", "mask", "=", "Image", ".", "fromarray", "(", "self", ".", "_class_to_index", "(", "\n", "self", ".", "detail", ".", "getMask", "(", "img_id", ")", ")", ")", "\n", "masks", "[", "img_id", "[", "'image_id'", "]", "]", "=", "mask", "\n", "tbar", ".", "set_description", "(", "\"Preprocessing masks {}\"", ".", "format", "(", "img_id", "[", "'image_id'", "]", ")", ")", "\n", "", "torch", ".", "save", "(", "masks", ",", "mask_file", ")", "\n", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation.__getitem__": [[71, 96], ["PIL.Image.open().convert", "pcontext.ContextSegmentation._sync_transform", "pcontext.ContextSegmentation.transform", "pcontext.ContextSegmentation.target_transform", "PIL.Image.open", "pcontext.ContextSegmentation.transform", "os.path.basename", "pcontext.ContextSegmentation._val_sync_transform", "pcontext.ContextSegmentation._mask_transform", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18._sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation._val_sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation._mask_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "path", "=", "img_id", "[", "'file_name'", "]", "\n", "iid", "=", "img_id", "[", "'image_id'", "]", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "detail", ".", "img_folder", ",", "path", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "path", ")", "\n", "# convert mask to 60 categories", "\n", "", "mask", "=", "self", ".", "masks", "[", "iid", "]", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "mask", "=", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "# general resize, normalize and toTensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation._mask_transform": [[97, 100], ["torch.from_numpy().long", "numpy.array().astype", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "target", "=", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", "-", "1", "\n", "return", "torch", ".", "from_numpy", "(", "target", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation.__len__": [[101, 103], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pcontext.ContextSegmentation.pred_offset": [[104, 107], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation.__init__": [[22, 33], ["os.path.join", "cityscapescoarse.get_city_pairs", "len", "len", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.get_city_pairs"], ["def", "__init__", "(", "self", ",", "data_folder", ",", "mode", "=", "'train'", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "self", ".", "BASE_DIR", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "images", ",", "self", ".", "masks", "=", "get_city_pairs", "(", "self", ".", "root", ",", "mode", ")", "\n", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "masks", ")", ")", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \\\n                \"", "+", "self", ".", "root", "+", "\"\\n\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation.__getitem__": [[34, 64], ["PIL.Image.open().convert", "PIL.Image.open", "numpy.array", "PIL.Image.fromarray", "cityscapescoarse.Segmentation._sync_transform", "cityscapescoarse.Segmentation.transform", "cityscapescoarse.Segmentation.target_transform", "PIL.Image.open", "cityscapescoarse.Segmentation.transform", "os.path.basename", "cityscapescoarse.Segmentation._val_sync_transform", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18._sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation._val_sync_transform"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "masks", "[", "index", "]", ")", "#.convert(\"P\")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask", "+=", "1", "\n", "mask", "[", "mask", "==", "256", "]", "=", "0", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ")", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'unknown mode for dataloader: {}'", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "\n", "\n", "# general resize, normalize and toTensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "#print(\"transform for input\")", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "#print(\"transform for label\")", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation.__len__": [[65, 67], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation._val_sync_transform": [[68, 91], ["img.crop.crop.resize", "mask.crop.crop.resize", "int", "int", "img.crop.crop.crop", "mask.crop.crop.crop", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "_val_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        synchronized transformation\n        \"\"\"", "\n", "outsize", "=", "720", "\n", "short", "=", "outsize", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "w", ">", "h", ":", "\n", "            ", "oh", "=", "short", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "            ", "ow", "=", "short", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "outsize", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "outsize", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", ",", "y1", "+", "outsize", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", ",", "y1", "+", "outsize", ")", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation._sync_transform": [[92, 133], ["random.randint", "img.filter.filter.resize", "PIL.ImageOps.expand.resize", "random.uniform", "img.filter.filter.rotate", "PIL.ImageOps.expand.rotate", "random.randint", "random.randint", "img.filter.filter.crop", "PIL.ImageOps.expand.crop", "random.random", "img.filter.filter.transpose", "PIL.ImageOps.expand.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "random.random", "img.filter.filter.filter", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.rotate", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.rotate"], ["", "def", "_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# random mirror", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "base_size", "=", "2048", "\n", "crop_size", "=", "720", "\n", "# random scale (short edge from 480 to 720)", "\n", "long_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "h", ">", "w", ":", "\n", "            ", "oh", "=", "long_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "short_size", "=", "ow", "\n", "", "else", ":", "\n", "            ", "ow", "=", "long_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "short_size", "=", "oh", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# random rotate -10~10, mask using NN rotate", "\n", "deg", "=", "random", ".", "uniform", "(", "-", "10", ",", "10", ")", "\n", "img", "=", "img", ".", "rotate", "(", "deg", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "rotate", "(", "deg", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "short_size", "<", "crop_size", ":", "\n", "            ", "padh", "=", "crop_size", "-", "oh", "if", "oh", "<", "crop_size", "else", "0", "\n", "padw", "=", "crop_size", "-", "ow", "if", "ow", "<", "crop_size", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop 480", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_size", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_size", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "# gaussian blur as in PSP ?", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "random", "(", ")", ")", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.get_city_pairs": [[135, 159], ["os.walk", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.splitext", "filename.endswith", "os.path.join", "os.path.basename", "filename.replace", "os.path.join", "os.path.dirname", "os.path.isfile", "os.path.isfile", "img_paths.append", "mask_paths.append", "print"], "function", ["None"], ["", "", "def", "get_city_pairs", "(", "folder", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/train_extra'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtCoarse/train_extra'", ")", "\n", "", "else", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'leftImg8bit/val'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'gtFine/val'", ")", "\n", "", "for", "root", ",", "directories", ",", "files", "in", "os", ".", "walk", "(", "img_folder", ")", ":", "\n", "        ", "for", "filename", "in", "files", ":", "\n", "            ", "basename", ",", "extension", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "\".png\"", ")", ":", "\n", "                ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "foldername", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "imgpath", ")", ")", "\n", "maskname", "=", "filename", ".", "replace", "(", "'leftImg8bit'", ",", "'gtCoarse_trainIds'", ")", "\n", "maskpath", "=", "os", ".", "path", ".", "join", "(", "mask_folder", ",", "foldername", ",", "maskname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "imgpath", ")", "and", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "                    ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "mask_paths", ".", "append", "(", "maskpath", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'cannot find the mask or image:'", ",", "imgpath", ",", "maskpath", ")", "\n", "\n", "", "", "", "", "return", "img_paths", ",", "mask_paths", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_aug.VOCAugSegmentation.__init__": [[18, 45], ["os.path.expanduser", "base.BaseDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "len", "len", "os.path.join", "RuntimeError", "os.path.join", "os.path.join", "os.path.isfile", "pascal_aug.VOCAugSegmentation.images.append", "os.path.join", "os.path.isfile", "pascal_aug.VOCAugSegmentation.masks.append", "line.rstrip", "line.rstrip"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "root", "=", "os", ".", "path", ".", "expanduser", "(", "'~/.encoding/data'", ")", ",", "split", "=", "'train'", ",", "\n", "mode", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VOCAugSegmentation", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "mode", ",", "transform", ",", "\n", "target_transform", ",", "**", "kwargs", ")", "\n", "# train/val/test splits are pre-cut", "\n", "_voc_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "TRAIN_BASE_DIR", ")", "\n", "_mask_dir", "=", "os", ".", "path", ".", "join", "(", "_voc_root", ",", "'cls'", ")", "\n", "_image_dir", "=", "os", ".", "path", ".", "join", "(", "_voc_root", ",", "'img'", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "_split_f", "=", "os", ".", "path", ".", "join", "(", "_voc_root", ",", "'trainval.txt'", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "_split_f", "=", "os", ".", "path", ".", "join", "(", "_voc_root", ",", "'val.txt'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unknown dataset split.'", ")", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "_split_f", ")", ",", "\"r\"", ")", "as", "lines", ":", "\n", "            ", "for", "line", "in", "lines", ":", "\n", "                ", "_image", "=", "os", ".", "path", ".", "join", "(", "_image_dir", ",", "line", ".", "rstrip", "(", "'\\n'", ")", "+", "\".jpg\"", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_image", ")", "\n", "self", ".", "images", ".", "append", "(", "_image", ")", "\n", "if", "self", ".", "mode", "!=", "'test'", ":", "\n", "                    ", "_mask", "=", "os", ".", "path", ".", "join", "(", "_mask_dir", ",", "line", ".", "rstrip", "(", "'\\n'", ")", "+", "\".mat\"", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_mask", ")", "\n", "self", ".", "masks", ".", "append", "(", "_mask", ")", "\n", "\n", "", "", "", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "masks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_aug.VOCAugSegmentation.__getitem__": [[46, 64], ["PIL.Image.open().convert", "pascal_aug.VOCAugSegmentation._load_mat", "pascal_aug.VOCAugSegmentation._sync_transform", "pascal_aug.VOCAugSegmentation.transform", "pascal_aug.VOCAugSegmentation.target_transform", "PIL.Image.open", "pascal_aug.VOCAugSegmentation.transform", "os.path.basename", "pascal_aug.VOCAugSegmentation._val_sync_transform"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_aug.VOCAugSegmentation._load_mat", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18._sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "_img", "=", "self", ".", "transform", "(", "_img", ")", "\n", "", "return", "_img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "", "_target", "=", "self", ".", "_load_mat", "(", "self", ".", "masks", "[", "index", "]", ")", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "_img", ",", "_target", "=", "self", ".", "_sync_transform", "(", "_img", ",", "_target", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "_img", ",", "_target", "=", "self", ".", "_val_sync_transform", "(", "_img", ",", "_target", ")", "\n", "# general resize, normalize and toTensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "_img", "=", "self", ".", "transform", "(", "_img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "_target", "=", "self", ".", "target_transform", "(", "_target", ")", "\n", "", "return", "_img", ",", "_target", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_aug.VOCAugSegmentation._load_mat": [[65, 70], ["scipy.io.loadmat", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "_load_mat", "(", "self", ",", "filename", ")", ":", "\n", "        ", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "filename", ",", "mat_dtype", "=", "True", ",", "squeeze_me", "=", "True", ",", "\n", "struct_as_record", "=", "False", ")", "\n", "mask", "=", "mat", "[", "'GTcls'", "]", ".", "Segmentation", "\n", "return", "Image", ".", "fromarray", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_aug.VOCAugSegmentation.__len__": [[71, 73], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.__init__.get_dataset": [[38, 40], ["name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.__init__._make_deprecate": [[41, 57], ["warnings.warn", "__init__.get_dataset"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.__init__.get_dataset"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18.__init__": [[34, 71], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "hpw18.Segmentation_HPW18._download", "os.path.join", "open", "len", "len", "os.path.join", "line.split", "os.path.isfile", "os.path.isfile", "hpw18.Segmentation_HPW18.images.append", "hpw18.Segmentation_HPW18.masks.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "_hpw18_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "BASE_DIR", ")", "\n", "_mask_dir", "=", "os", ".", "path", ".", "join", "(", "_hpw18_root", ",", "'SegmentationClassAug_256x384'", ")", "\n", "_image_dir", "=", "os", ".", "path", ".", "join", "(", "_hpw18_root", ",", "'JPEGImages_256x384'", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "_download", "(", ")", "\n", "\n", "# train/val/test splits are pre-cut", "\n", "", "_splits_dir", "=", "_hpw18_root", "\n", "_split_f", "=", "os", ".", "path", ".", "join", "(", "_splits_dir", ",", "'humanparsingImageMask_256x384_absPath_train.txt'", ")", "\n", "if", "not", "self", ".", "train", ":", "\n", "            ", "_split_f", "=", "os", ".", "path", ".", "join", "(", "_splits_dir", ",", "'humanparsingImageMask_256x384_absPath_val.txt'", ")", "\n", "\n", "", "print", "(", "\"reading from \"", ",", "_split_f", ")", "\n", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "_split_f", ")", ",", "\"r\"", ")", "as", "lines", ":", "\n", "            ", "for", "line", "in", "lines", ":", "\n", "                ", "s", "=", "line", ".", "split", "(", ")", "\n", "_image", "=", "s", "[", "0", "]", "# image absolution path", "\n", "_mask", "=", "s", "[", "1", "]", "# mask absolution path", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_image", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_mask", ")", "\n", "self", ".", "images", ".", "append", "(", "_image", ")", "\n", "self", ".", "masks", ".", "append", "(", "_mask", ")", "\n", "", "", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "masks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18.__getitem__": [[72, 89], ["PIL.Image.open().convert", "PIL.Image.open", "numpy.array", "PIL.Image.fromarray", "hpw18.Segmentation_HPW18._sync_transform", "hpw18.Segmentation_HPW18.transform", "hpw18.Segmentation_HPW18.target_transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18._sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "_timg", "=", "Image", ".", "open", "(", "self", ".", "masks", "[", "index", "]", ")", "\n", "_target", "=", "np", ".", "array", "(", "_timg", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "_target", "=", "Image", ".", "fromarray", "(", "_target", ")", "\n", "\n", "# synchrosized transform", "\n", "if", "self", ".", "train", ":", "\n", "            ", "_img", ",", "_target", "=", "self", ".", "_sync_transform", "(", "_img", ",", "_target", ")", "\n", "\n", "# general resize, normalize and toTensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "_img", "=", "self", ".", "transform", "(", "_img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "_target", "=", "self", ".", "target_transform", "(", "_target", ")", "\n", "\n", "", "return", "_img", ",", "_target", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18._sync_transform": [[93, 100], ["random.uniform", "img.rotate.rotate.rotate", "mask.rotate.rotate.rotate"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.rotate", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.rotate"], ["", "def", "_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# random rotate -10~10", "\n", "        ", "deg", "=", "random", ".", "uniform", "(", "-", "10", ",", "10", ")", "\n", "img", "=", "img", ".", "rotate", "(", "deg", ")", "\n", "mask", "=", "mask", ".", "rotate", "(", "deg", ",", "PIL", ".", "Image", ".", "NEAREST", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation.__init__": [[19, 50], ["os.path.expanduser", "base.BaseDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "tqdm.tqdm.tqdm", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "pascal_voc.VOCSegmentation.images.append", "len", "len", "os.path.join", "RuntimeError", "os.path.join", "os.path.isfile", "pascal_voc.VOCSegmentation.masks.append", "line.rstrip", "line.rstrip"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "root", "=", "os", ".", "path", ".", "expanduser", "(", "'~/.encoding/data'", ")", ",", "split", "=", "'train'", ",", "\n", "mode", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VOCSegmentation", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ",", "mode", ",", "transform", ",", "\n", "target_transform", ",", "**", "kwargs", ")", "\n", "_voc_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "BASE_DIR", ")", "\n", "_mask_dir", "=", "os", ".", "path", ".", "join", "(", "_voc_root", ",", "'SegmentationClass'", ")", "\n", "_image_dir", "=", "os", ".", "path", ".", "join", "(", "_voc_root", ",", "'JPEGImages'", ")", "\n", "# train/val/test splits are pre-cut", "\n", "_splits_dir", "=", "os", ".", "path", ".", "join", "(", "_voc_root", ",", "'ImageSets/Segmentation'", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "_split_f", "=", "os", ".", "path", ".", "join", "(", "_splits_dir", ",", "'trainval.txt'", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "_split_f", "=", "os", ".", "path", ".", "join", "(", "_splits_dir", ",", "'val.txt'", ")", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "_split_f", "=", "os", ".", "path", ".", "join", "(", "_splits_dir", ",", "'test.txt'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unknown dataset split.'", ")", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "_split_f", ")", ",", "\"r\"", ")", "as", "lines", ":", "\n", "            ", "for", "line", "in", "tqdm", "(", "lines", ")", ":", "\n", "                ", "_image", "=", "os", ".", "path", ".", "join", "(", "_image_dir", ",", "line", ".", "rstrip", "(", "'\\n'", ")", "+", "\".jpg\"", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_image", ")", "\n", "self", ".", "images", ".", "append", "(", "_image", ")", "\n", "if", "self", ".", "mode", "!=", "'test'", ":", "\n", "                    ", "_mask", "=", "os", ".", "path", ".", "join", "(", "_mask_dir", ",", "line", ".", "rstrip", "(", "'\\n'", ")", "+", "\".png\"", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_mask", ")", "\n", "self", ".", "masks", ".", "append", "(", "_mask", ")", "\n", "\n", "", "", "", "if", "self", ".", "mode", "!=", "'test'", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "masks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation.__getitem__": [[51, 72], ["PIL.Image.open().convert", "PIL.Image.open", "pascal_voc.VOCSegmentation._sync_transform", "pascal_voc.VOCSegmentation.transform", "pascal_voc.VOCSegmentation.target_transform", "PIL.Image.open", "pascal_voc.VOCSegmentation.transform", "os.path.basename", "pascal_voc.VOCSegmentation._val_sync_transform", "pascal_voc.VOCSegmentation._mask_transform"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.hpw18.Segmentation_HPW18._sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.cityscapescoarse.Segmentation._val_sync_transform", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation._mask_transform"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "", "target", "=", "Image", ".", "open", "(", "self", ".", "masks", "[", "index", "]", ")", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "_sync_transform", "(", "img", ",", "target", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "_val_sync_transform", "(", "img", ",", "target", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "mask", "=", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "# general resize, normalize and toTensor", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation._mask_transform": [[73, 77], ["numpy.array().astype", "torch.from_numpy().long", "numpy.array", "torch.from_numpy"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "target", "=", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", "\n", "target", "[", "target", "==", "255", "]", "=", "-", "1", "\n", "return", "torch", ".", "from_numpy", "(", "target", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.pascal_voc.VOCSegmentation.pred_offset": [[81, 84], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset.__len__": [[23, 25], ["base.BaseDataset.data_source.get_length"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length"], ["self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.base.BaseDataset.evaluate": [[30, 33], ["None"], "methods", ["None"], ["        ", "raise", "NotImplemented", "\n", "\n", "", "@", "property", "\n", "def", "num_class", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.npid.NPIDDataset.__init__": [[11, 13], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "NPIDDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.npid.NPIDDataset.__getitem__": [[14, 22], ["npid.NPIDDataset.data_source.get_sample", "isinstance", "npid.NPIDDataset.pipeline", "dict", "type"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "assert", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ",", "'The output from the data source must be an Image, got: {}. \\\n            Please ensure that the list file does not contain labels.'", ".", "format", "(", "\n", "type", "(", "img", ")", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "idx", "=", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.npid.NPIDDataset.evaluate": [[23, 26], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.RotationPredDataset.__init__": [[25, 27], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "RotationPredDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.RotationPredDataset.__getitem__": [[28, 38], ["rotation_pred.RotationPredDataset.data_source.get_sample", "isinstance", "rotation_pred.RotationPredDataset.pipeline", "torch.stack", "torch.LongTensor", "dict", "type", "rotation_pred.rotate"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.rotate"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "assert", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ",", "'The output from the data source must be an Image, got: {}. \\\n            Please ensure that the list file does not contain labels.'", ".", "format", "(", "\n", "type", "(", "img", ")", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "img", "=", "torch", ".", "stack", "(", "rotate", "(", "img", ")", ",", "dim", "=", "0", ")", "\n", "rotation_labels", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "rot_label", "=", "rotation_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.RotationPredDataset.evaluate": [[39, 41], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.rotate": [[8, 17], ["torch.flip", "torch.flip", "torch.flip().transpose", "img.transpose", "torch.flip"], "function", ["None"], ["def", "rotate", "(", "img", ")", ":", "\n", "    ", "'''\n    img: Tensor(CHW)\n    '''", "\n", "return", "[", "\n", "img", ",", "\n", "torch", ".", "flip", "(", "img", ".", "transpose", "(", "1", ",", "2", ")", ",", "[", "1", "]", ")", ",", "\n", "torch", ".", "flip", "(", "img", ",", "[", "1", ",", "2", "]", ")", ",", "\n", "torch", ".", "flip", "(", "img", ",", "[", "1", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder._concat_dataset": [[8, 28], ["cfg.get", "cfg.get", "cfg.get", "len", "range", "dataset_wrappers.ConcatDataset", "copy.deepcopy", "isinstance", "isinstance", "isinstance", "datasets.append", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset"], ["def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "ann_files", "=", "cfg", "[", "'ann_file'", "]", "\n", "img_prefixes", "=", "cfg", ".", "get", "(", "'img_prefix'", ",", "None", ")", "\n", "seg_prefixes", "=", "cfg", ".", "get", "(", "'seg_prefix'", ",", "None", ")", "\n", "proposal_files", "=", "cfg", ".", "get", "(", "'proposal_file'", ",", "None", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "data_cfg", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "if", "isinstance", "(", "img_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_prefix'", "]", "=", "img_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "seg_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'seg_prefix'", "]", "=", "seg_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'proposal_file'", "]", "=", "proposal_files", "[", "i", "]", "\n", "", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset": [[30, 40], ["isinstance", "dataset_wrappers.ConcatDataset", "dataset_wrappers.RepeatDataset", "openselfsup.utils.build_from_cfg", "builder.build_dataset", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset"], ["", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n", "", "elif", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_datasource": [[42, 44], ["openselfsup.utils.build_from_cfg"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg"], ["", "def", "build_datasource", "(", "cfg", ")", ":", "\n", "    ", "return", "build_from_cfg", "(", "cfg", ",", "DATASOURCES", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.deepcluster.DeepClusterDataset.__init__": [[11, 15], ["base.BaseDataset.__init__", "range", "deepcluster.DeepClusterDataset.data_source.get_length"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "DeepClusterDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "# init clustering labels", "\n", "self", ".", "labels", "=", "[", "-", "1", "for", "_", "in", "range", "(", "self", ".", "data_source", ".", "get_length", "(", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.deepcluster.DeepClusterDataset.__getitem__": [[16, 25], ["deepcluster.DeepClusterDataset.data_source.get_sample", "isinstance", "deepcluster.DeepClusterDataset.pipeline", "dict", "type"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "assert", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ",", "'The output from the data source must be an Image, got: {}. \\\n            Please ensure that the list file does not contain labels.'", ".", "format", "(", "\n", "type", "(", "img", ")", ")", "\n", "label", "=", "self", ".", "labels", "[", "idx", "]", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "pseudo_label", "=", "label", ",", "idx", "=", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.deepcluster.DeepClusterDataset.assign_labels": [[26, 31], ["len", "len", "len", "len"], "methods", ["None"], ["", "def", "assign_labels", "(", "self", ",", "labels", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "labels", ")", "==", "len", "(", "labels", ")", ",", "\"Inconsistent lenght of asigned labels, \\\n            {} vs {}\"", ".", "format", "(", "len", "(", "self", ".", "labels", ")", ",", "len", "(", "labels", ")", ")", "\n", "self", ".", "labels", "=", "labels", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.deepcluster.DeepClusterDataset.evaluate": [[32, 35], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.contrastive.ContrastiveDataset.__init__": [[14, 16], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "ContrastiveDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.contrastive.ContrastiveDataset.__getitem__": [[17, 27], ["contrastive.ContrastiveDataset.data_source.get_sample", "isinstance", "contrastive.ContrastiveDataset.pipeline", "contrastive.ContrastiveDataset.pipeline", "torch.cat", "dict", "type", "contrastive.ContrastiveDataset.unsqueeze", "contrastive.ContrastiveDataset.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "assert", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ",", "'The output from the data source must be an Image, got: {}. \\\n            Please ensure that the list file does not contain labels.'", ".", "format", "(", "\n", "type", "(", "img", ")", ")", "\n", "img1", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "img2", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "img_cat", "=", "torch", ".", "cat", "(", "(", "img1", ".", "unsqueeze", "(", "0", ")", ",", "img2", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "return", "dict", "(", "img", "=", "img_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.contrastive.ContrastiveDataset.evaluate": [[28, 30], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.contrastive.ContrastiveDatasetX.__init__": [[38, 40], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "ContrastiveDatasetX", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.contrastive.ContrastiveDatasetX.__getitem__": [[41, 54], ["contrastive.ContrastiveDatasetX.data_source.get_sample", "isinstance", "contrastive.ContrastiveDatasetX.pipeline", "contrastive.ContrastiveDatasetX.pipeline", "contrastive.ContrastiveDatasetX.pipeline", "contrastive.ContrastiveDatasetX.pipeline", "torch.cat", "dict", "type", "contrastive.ContrastiveDatasetX.unsqueeze", "contrastive.ContrastiveDatasetX.unsqueeze", "contrastive.ContrastiveDatasetX.unsqueeze", "contrastive.ContrastiveDatasetX.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "assert", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ",", "'The output from the data source must be an Image, got: {}. \\\n            Please ensure that the list file does not contain labels.'", ".", "format", "(", "\n", "type", "(", "img", ")", ")", "\n", "img1", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "img2", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "img3", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "img4", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "img_cat", "=", "torch", ".", "cat", "(", "(", "img1", ".", "unsqueeze", "(", "0", ")", ",", "img2", ".", "unsqueeze", "(", "0", ")", ",", "\n", "img3", ".", "unsqueeze", "(", "0", ")", ",", "img4", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "return", "dict", "(", "img", "=", "img_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.contrastive.ContrastiveDatasetX.evaluate": [[55, 57], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.classification.ClassificationDataset.__init__": [[14, 16], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "ClassificationDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.classification.ClassificationDataset.__getitem__": [[17, 21], ["classification.ClassificationDataset.data_source.get_sample", "classification.ClassificationDataset.pipeline", "dict"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "gt_label", "=", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.classification.ClassificationDataset.evaluate": [[22, 44], ["torch.LongTensor", "scores.size", "scores.topk", "pred.t.t.t", "pred.t.t.eq", "scores.size", "torch.LongTensor.size", "scores.size", "torch.LongTensor.size", "max", "torch.LongTensor.view().expand_as", "correct[].reshape().float().sum().item", "classification.ClassificationDataset.utils.print_log", "torch.LongTensor.view", "correct[].reshape().float().sum", "correct[].reshape().float", "correct[].reshape"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ",", "topk", "=", "(", "1", ",", "5", ")", ")", ":", "\n", "        ", "'''results: Tensor (NxC)\n        '''", "\n", "eval_res", "=", "{", "}", "\n", "\n", "target", "=", "torch", ".", "LongTensor", "(", "self", ".", "data_source", ".", "labels", ")", "\n", "assert", "scores", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"Inconsistent length for results and labels, {} vs {}\"", ".", "format", "(", "\n", "scores", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "num", "=", "scores", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "scores", ".", "topk", "(", "max", "(", "topk", ")", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "# KxN", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ".", "item", "(", ")", "\n", "acc", "=", "correct_k", "*", "100.0", "/", "num", "\n", "eval_res", "[", "\"{}_top{}\"", ".", "format", "(", "keyword", ",", "k", ")", "]", "=", "acc", "\n", "if", "logger", "is", "not", "None", "and", "logger", "!=", "'silent'", ":", "\n", "                ", "print_log", "(", "\n", "\"{}_top{}: {:.03f}\"", ".", "format", "(", "keyword", ",", "k", ",", "acc", ")", ",", "\n", "logger", "=", "logger", ")", "\n", "", "", "return", "eval_res", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.classification.StoragedClassificationDataset.__init__": [[48, 51], ["classification.ClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "storage", "=", "{", "}", "\n", "super", "(", "StoragedClassificationDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.classification.StoragedClassificationDataset.__getitem__": [[52, 60], ["classification.StoragedClassificationDataset.data_source.get_sample", "classification.StoragedClassificationDataset.pipeline", "dict"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "not", "in", "self", ".", "storage", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "item", "=", "dict", "(", "img", "=", "img", ",", "gt_label", "=", "target", ")", "\n", "self", ".", "storage", "[", "idx", "]", "=", "item", "\n", "return", "item", "\n", "", "return", "self", ".", "storage", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.classification.TrainValDataset.__init__": [[66, 69], ["base.BaseDataset.__init__", "builder.build_datasource"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_datasource"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "TrainValDataset", ",", "self", ")", ".", "__init__", "(", "data_source", "[", "0", "]", ",", "pipeline", ")", "\n", "self", ".", "data_source_val", "=", "build_datasource", "(", "data_source", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.classification.TrainValDataset.__getitem__": [[70, 78], ["classification.TrainValDataset.data_source.get_sample", "classification.TrainValDataset.pipeline", "classification.TrainValDataset.data_source_val.get_sample", "classification.TrainValDataset.pipeline", "torch.cat", "torch.LongTensor", "dict", "classification.TrainValDataset.data_source_val.get_length", "classification.TrainValDataset.unsqueeze", "classification.TrainValDataset.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample", "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample", "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_train", ",", "target_train", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img_train", "=", "self", ".", "pipeline", "(", "img_train", ")", "\n", "img_val", ",", "target_val", "=", "self", ".", "data_source_val", ".", "get_sample", "(", "idx", "%", "self", ".", "data_source_val", ".", "get_length", "(", ")", ")", "\n", "img_val", "=", "self", ".", "pipeline", "(", "img_val", ")", "\n", "img", "=", "torch", ".", "cat", "(", "(", "img_train", ".", "unsqueeze", "(", "0", ")", ",", "img_val", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "target", "=", "torch", ".", "LongTensor", "(", "[", "target_train", ",", "target_val", "]", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "gt_label", "=", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.classification.TrainValDataset.evaluate": [[79, 81], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.extraction.ExtractDataset.__init__": [[10, 12], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "ExtractDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.extraction.ExtractDataset.__getitem__": [[13, 21], ["extraction.ExtractDataset.data_source.get_sample", "isinstance", "extraction.ExtractDataset.pipeline", "dict"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "# my", "\n", "if", "isinstance", "(", "img", ",", "tuple", ")", ":", "\n", "            ", "img", "=", "img", "[", "0", "]", "\n", "#", "\n", "", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "return", "dict", "(", "img", "=", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.extraction.ExtractDataset.evaluate": [[22, 24], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.extraction.C2ExtractDataset.__init__": [[31, 36], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "C2ExtractDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "self", ".", "storage1", "=", "[", "]", "\n", "self", ".", "storage2", "=", "[", "]", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.extraction.C2ExtractDataset.__getitem__": [[37, 55], ["dict", "len", "extraction.C2ExtractDataset.data_source.get_length", "extraction.C2ExtractDataset.data_source.get_sample", "extraction.C2ExtractDataset.pipeline", "extraction.C2ExtractDataset.storage1.append", "len", "extraction.C2ExtractDataset.data_source.get_length", "extraction.C2ExtractDataset.data_source.get_sample", "extraction.C2ExtractDataset.pipeline", "extraction.C2ExtractDataset.storage2.append", "extraction.C2ExtractDataset.data_source.get_length", "extraction.C2ExtractDataset.data_source.get_length", "extraction.C2ExtractDataset.data_source.get_length"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length", "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample", "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length", "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample", "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length", "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length", "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "storage1", ")", "<", "self", ".", "data_source", ".", "get_length", "(", ")", ":", "\n", "            ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "self", ".", "storage1", ".", "append", "(", "img", ")", "\n", "", "elif", "len", "(", "self", ".", "storage2", ")", "<", "self", ".", "data_source", ".", "get_length", "(", ")", ":", "\n", "            ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "self", ".", "storage2", ".", "append", "(", "img", ")", "\n", "", "elif", "self", ".", "count", "<", "self", ".", "data_source", ".", "get_length", "(", ")", ":", "\n", "            ", "img", "=", "self", ".", "storage1", "[", "self", ".", "count", "]", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "storage2", "[", "self", ".", "count", "-", "self", ".", "data_source", ".", "get_length", "(", ")", "]", "\n", "\n", "", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", "==", "self", ".", "data_source", ".", "get_length", "(", ")", "*", "2", ":", "\n", "            ", "self", ".", "count", "=", "0", "\n", "", "return", "dict", "(", "img", "=", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.extraction.C2ExtractDataset.evaluate": [[56, 58], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.dataset_wrappers.ConcatDataset.__init__": [[18, 26], ["torch.utils.data.dataset.ConcatDataset.__init__", "hasattr", "range", "numpy.concatenate", "len", "flags.append"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "if", "hasattr", "(", "datasets", "[", "0", "]", ",", "'flag'", ")", ":", "\n", "            ", "flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "datasets", ")", ")", ":", "\n", "                ", "flags", ".", "append", "(", "datasets", "[", "i", "]", ".", "flag", ")", "\n", "", "self", ".", "flag", "=", "np", ".", "concatenate", "(", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.dataset_wrappers.RepeatDataset.__init__": [[42, 50], ["hasattr", "len", "numpy.tile"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n", "self", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "if", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", ":", "\n", "            ", "self", ".", "flag", "=", "np", ".", "tile", "(", "self", ".", "dataset", ".", "flag", ",", "times", ")", "\n", "\n", "", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.dataset_wrappers.RepeatDataset.__getitem__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.dataset_wrappers.RepeatDataset.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.byol.BYOLDataset.__init__": [[17, 23], ["builder.build_datasource", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "byol.BYOLDataset.utils.build_from_cfg", "byol.BYOLDataset.utils.build_from_cfg"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_datasource", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline1", ",", "pipeline2", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "build_datasource", "(", "data_source", ")", "\n", "pipeline1", "=", "[", "build_from_cfg", "(", "p", ",", "PIPELINES", ")", "for", "p", "in", "pipeline1", "]", "\n", "self", ".", "pipeline1", "=", "Compose", "(", "pipeline1", ")", "\n", "pipeline2", "=", "[", "build_from_cfg", "(", "p", ",", "PIPELINES", ")", "for", "p", "in", "pipeline2", "]", "\n", "self", ".", "pipeline2", "=", "Compose", "(", "pipeline2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.byol.BYOLDataset.__len__": [[24, 26], ["byol.BYOLDataset.data_source.get_length"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_source", ".", "get_length", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.byol.BYOLDataset.__getitem__": [[27, 33], ["byol.BYOLDataset.data_source.get_sample", "byol.BYOLDataset.pipeline1", "byol.BYOLDataset.pipeline2", "torch.cat", "dict", "byol.BYOLDataset.unsqueeze", "byol.BYOLDataset.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img1", "=", "self", ".", "pipeline1", "(", "img", ")", "\n", "img2", "=", "self", ".", "pipeline2", "(", "img", ")", "\n", "img_cat", "=", "torch", ".", "cat", "(", "(", "img1", ".", "unsqueeze", "(", "0", ")", ",", "img2", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "return", "dict", "(", "img", "=", "img_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.byol.BYOLDataset.evaluate": [[34, 36], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.relative_loc.RelativeLocDataset.__init__": [[35, 39], ["base.BaseDataset.__init__", "torchvision.transforms.Compose", "relative_loc.RelativeLocDataset.utils.build_from_cfg"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ",", "format_pipeline", ")", ":", "\n", "        ", "super", "(", "RelativeLocDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "format_pipeline", "=", "[", "build_from_cfg", "(", "p", ",", "PIPELINES", ")", "for", "p", "in", "format_pipeline", "]", "\n", "self", ".", "format_pipeline", "=", "Compose", "(", "format_pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.relative_loc.RelativeLocDataset.__getitem__": [[40, 53], ["relative_loc.RelativeLocDataset.data_source.get_sample", "isinstance", "relative_loc.RelativeLocDataset.pipeline", "relative_loc.image_to_patches", "torch.LongTensor", "dict", "type", "relative_loc.RelativeLocDataset.format_pipeline", "perms.append", "torch.cat", "range", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.relative_loc.image_to_patches"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "assert", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ",", "'The output from the data source must be an Image, got: {}. \\\n            Please ensure that the list file does not contain labels.'", ".", "format", "(", "\n", "type", "(", "img", ")", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "patches", "=", "image_to_patches", "(", "img", ")", "\n", "patches", "=", "[", "self", ".", "format_pipeline", "(", "p", ")", "for", "p", "in", "patches", "]", "\n", "perms", "=", "[", "]", "\n", "[", "perms", ".", "append", "(", "torch", ".", "cat", "(", "(", "patches", "[", "i", "]", ",", "patches", "[", "4", "]", ")", ",", "dim", "=", "0", ")", ")", "for", "i", "in", "range", "(", "9", ")", "if", "i", "!=", "4", "]", "\n", "patch_labels", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", ")", "\n", "return", "dict", "(", "img", "=", "torch", ".", "stack", "(", "perms", ")", ",", "patch_label", "=", "patch_labels", ")", "# 8(2C)HW, 8", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.relative_loc.RelativeLocDataset.evaluate": [[54, 56], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.relative_loc.image_to_patches": [[12, 28], ["range", "range", "torchvision.crop", "patches.append", "torchvision.transforms.RandomCrop"], "function", ["None"], ["def", "image_to_patches", "(", "img", ")", ":", "\n", "    ", "split_per_side", "=", "3", "\n", "patch_jitter", "=", "21", "\n", "h", ",", "w", "=", "img", ".", "size", "\n", "h_grid", "=", "h", "//", "split_per_side", "\n", "w_grid", "=", "w", "//", "split_per_side", "\n", "h_patch", "=", "h_grid", "-", "patch_jitter", "\n", "w_patch", "=", "w_grid", "-", "patch_jitter", "\n", "assert", "h_patch", ">", "0", "and", "w_patch", ">", "0", "\n", "patches", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "split_per_side", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "split_per_side", ")", ":", "\n", "            ", "p", "=", "TF", ".", "crop", "(", "img", ",", "i", "*", "h_grid", ",", "j", "*", "w_grid", ",", "h_grid", ",", "w_grid", ")", "\n", "p", "=", "RandomCrop", "(", "(", "h_patch", ",", "w_patch", ")", ")", "(", "p", ")", "\n", "patches", ".", "append", "(", "p", ")", "\n", "", "", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.short_hash": [[49, 53], ["ValueError"], "function", ["None"], ["def", "short_hash", "(", "name", ")", ":", "\n", "    ", "if", "name", "not", "in", "_model_sha1", ":", "\n", "        ", "raise", "ValueError", "(", "'Pretrained model for {name} is not available.'", ".", "format", "(", "name", "=", "name", ")", ")", "\n", "", "return", "_model_sha1", "[", "name", "]", "[", ":", "8", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file": [[54, 114], ["os.path.join", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.expanduser", "utils.download", "os.path.exists", "os.makedirs", "portalocker.Lock", "os.path.exists", "os.path.join", "os.environ.get", "utils.download", "os.remove", "utils.check_sha1", "ValueError", "model_store.short_hash", "utils.check_sha1", "print", "_url_format.format", "zipfile.ZipFile", "zf.extractall", "ValueError", "print"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.download", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.download", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.check_sha1", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.short_hash", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.files.check_sha1"], ["", "def", "get_model_file", "(", "name", ",", "root", "=", "os", ".", "path", ".", "join", "(", "'~'", ",", "'.encoding'", ",", "'models'", ")", ")", ":", "\n", "    ", "r\"\"\"Return location for the pretrained on local file system.\n\n    This function will download from online model zoo when model cannot be found or has mismatch.\n    The root directory will be created if it doesn't exist.\n\n    Parameters\n    ----------\n    name : str\n        Name of the model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n    Returns\n    -------\n    file_path\n        Path to the requested pretrained model file.\n    \"\"\"", "\n", "if", "name", "not", "in", "_model_sha1", ":", "\n", "        ", "from", "torchvision", ".", "models", ".", "resnet", "import", "model_urls", "\n", "if", "name", "not", "in", "model_urls", ":", "\n", "            ", "raise", "ValueError", "(", "'Pretrained model for {name} is not available.'", ".", "format", "(", "name", "=", "name", ")", ")", "\n", "", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "return", "download", "(", "model_urls", "[", "name", "]", ",", "\n", "path", "=", "root", ",", "\n", "overwrite", "=", "True", ")", "\n", "", "file_name", "=", "'{name}-{short_hash}'", ".", "format", "(", "name", "=", "name", ",", "short_hash", "=", "short_hash", "(", "name", ")", ")", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root", ")", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", "+", "'.pth'", ")", "\n", "sha1_hash", "=", "_model_sha1", "[", "name", "]", "\n", "\n", "lockfile", "=", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", "+", "'.lock'", ")", "\n", "with", "portalocker", ".", "Lock", "(", "lockfile", ",", "timeout", "=", "300", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "if", "check_sha1", "(", "file_path", ",", "sha1_hash", ")", ":", "\n", "                ", "return", "file_path", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Mismatch in the content of model file {} detected.'", "+", "\n", "' Downloading again.'", ".", "format", "(", "file_path", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Model file {} is not found. Downloading.'", ".", "format", "(", "file_path", ")", ")", "\n", "\n", "", "zip_file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", "+", "'.zip'", ")", "\n", "repo_url", "=", "os", ".", "environ", ".", "get", "(", "'ENCODING_REPO'", ",", "encoding_repo_url", ")", "\n", "if", "repo_url", "[", "-", "1", "]", "!=", "'/'", ":", "\n", "            ", "repo_url", "=", "repo_url", "+", "'/'", "\n", "", "download", "(", "_url_format", ".", "format", "(", "repo_url", "=", "repo_url", ",", "file_name", "=", "file_name", ")", ",", "\n", "path", "=", "zip_file_path", ",", "\n", "overwrite", "=", "True", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "zip_file_path", ")", "as", "zf", ":", "\n", "            ", "zf", ".", "extractall", "(", "root", ")", "\n", "", "os", ".", "remove", "(", "zip_file_path", ")", "\n", "\n", "if", "check_sha1", "(", "file_path", ",", "sha1_hash", ")", ":", "\n", "            ", "return", "file_path", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Downloaded file has different hash. Please try again.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.purge": [[115, 128], ["os.path.join", "os.path.expanduser", "os.listdir", "f.endswith", "os.remove", "os.path.join"], "function", ["None"], ["", "", "", "def", "purge", "(", "root", "=", "os", ".", "path", ".", "join", "(", "'~'", ",", "'.encoding'", ",", "'models'", ")", ")", ":", "\n", "    ", "r\"\"\"Purge all pretrained model files in local file store.\n\n    Parameters\n    ----------\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "files", "=", "os", ".", "listdir", "(", "root", ")", "\n", "for", "f", "in", "files", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".pth\"", ")", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.pretrained_model_list": [[129, 131], ["list", "_model_sha1.keys"], "function", ["None"], ["", "", "", "def", "pretrained_model_list", "(", ")", ":", "\n", "    ", "return", "list", "(", "_model_sha1", ".", "keys", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_zoo.get_model": [[59, 81], ["ValueError", "str", "sorted", "models.keys"], "function", ["None"], ["def", "get_model", "(", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Returns a pre-defined model by name\n\n    Parameters\n    ----------\n    name : str\n        Name of the model.\n    pretrained : bool\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n    Returns\n    -------\n    Module:\n        The model.\n    \"\"\"", "\n", "# name = name.lower()", "\n", "if", "name", "not", "in", "models", ":", "\n", "        ", "raise", "ValueError", "(", "'%s\\n\\t%s'", "%", "(", "str", "(", "name", ")", ",", "'\\n\\t'", ".", "join", "(", "sorted", "(", "models", ".", "keys", "(", ")", ")", ")", ")", ")", "\n", "", "net", "=", "models", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepten.DeepTen.__init__": [[20, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "backbone.resnet50s", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Encoding", "torch.View", "torch.Normalize", "torch.Linear", "torch.Linear", "backbone.resnet101s", "backbone.resnet152s", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet_variants.resnet50s", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet_variants.resnet101s", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet_variants.resnet152s"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ")", ":", "\n", "        ", "super", "(", "DeepTen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "# copying modules from pretrained models", "\n", "if", "self", ".", "backbone", "==", "'resnet50'", ":", "\n", "            ", "self", ".", "pretrained", "=", "resnet50s", "(", "pretrained", "=", "True", ",", "dilated", "=", "False", ")", "\n", "", "elif", "self", ".", "backbone", "==", "'resnet101'", ":", "\n", "            ", "self", ".", "pretrained", "=", "resnet101s", "(", "pretrained", "=", "True", ",", "dilated", "=", "False", ")", "\n", "", "elif", "self", ".", "backbone", "==", "'resnet152'", ":", "\n", "            ", "self", ".", "pretrained", "=", "resnet152s", "(", "pretrained", "=", "True", ",", "dilated", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'unknown backbone: {}'", ".", "format", "(", "self", ".", "backbone", ")", ")", "\n", "", "n_codes", "=", "32", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2048", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Encoding", "(", "D", "=", "128", ",", "K", "=", "n_codes", ")", ",", "\n", "View", "(", "-", "1", ",", "128", "*", "n_codes", ")", ",", "\n", "Normalize", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", "*", "n_codes", ",", "nclass", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepten.DeepTen.forward": [[43, 54], ["deepten.DeepTen.size", "deepten.DeepTen.pretrained.conv1", "deepten.DeepTen.pretrained.bn1", "deepten.DeepTen.pretrained.relu", "deepten.DeepTen.pretrained.maxpool", "deepten.DeepTen.pretrained.layer1", "deepten.DeepTen.pretrained.layer2", "deepten.DeepTen.pretrained.layer3", "deepten.DeepTen.pretrained.layer4", "deepten.DeepTen.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "layer4", "(", "x", ")", "\n", "return", "self", ".", "head", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepten.get_deepten": [[55, 79], ["deepten.DeepTen", "DeepTen.load_state_dict", "torch.load", "torch.load", "get_model_file", "dataset.lower"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "def", "get_deepten", "(", "dataset", "=", "'pascal_voc'", ",", "backbone", "=", "'resnet50'", ",", "pretrained", "=", "False", ",", "\n", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepTen model from the paper `\"Deep TEN: Texture Encoding Network\"\n    <https://arxiv.org/pdf/1612.02844v1.pdf>`_\n    Parameters\n    ----------\n    dataset : str, default pascal_voc\n        The dataset that model pretrained on. (pascal_voc, ade20k)\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n    Examples\n    --------\n    >>> model = get_deepten(dataset='minc', backbone='resnet50', pretrained=False)\n    >>> print(model)\n    \"\"\"", "\n", "from", ".", ".", "datasets", "import", "datasets", ",", "acronyms", "\n", "model", "=", "DeepTen", "(", "datasets", "[", "dataset", ".", "lower", "(", ")", "]", ".", "NUM_CLASS", ",", "backbone", "=", "backbone", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "from", ".", "model_store", "import", "get_model_file", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'deepten_%s_%s'", "%", "(", "backbone", ",", "acronyms", "[", "dataset", "]", ")", ",", "root", "=", "root", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepten.get_deepten_resnet50_minc": [[80, 98], ["deepten.get_deepten"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepten.get_deepten"], ["", "def", "get_deepten_resnet50_minc", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepTen model from the paper `\"Deep TEN: Texture Encoding Network\"\n    <https://arxiv.org/pdf/1612.02844v1.pdf>`_\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_deepten_resnet50_minc(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deepten", "(", "dataset", "=", "'minc'", ",", "backbone", "=", "'resnet50'", ",", "pretrained", "=", "pretrained", ",", "\n", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.odc.ODC.__init__": [[14, 38], ["torch.Module.__init__", "builder.build_backbone", "builder.build_neck", "odc.ODC.init_weights", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "odc.ODC.loss_weight.sum", "utils.Sobel", "builder.build_head", "builder.build_memory", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_memory"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "with_sobel", "=", "False", ",", "\n", "neck", "=", "None", ",", "\n", "head", "=", "None", ",", "\n", "memory_bank", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "ODC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_sobel", "=", "with_sobel", "\n", "if", "with_sobel", ":", "\n", "            ", "self", ".", "sobel_layer", "=", "Sobel", "(", ")", "\n", "", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "if", "head", "is", "not", "None", ":", "\n", "            ", "self", ".", "head", "=", "builder", ".", "build_head", "(", "head", ")", "\n", "", "if", "memory_bank", "is", "not", "None", ":", "\n", "            ", "self", ".", "memory_bank", "=", "builder", ".", "build_memory", "(", "memory_bank", ")", "\n", "", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "# set reweight tensors", "\n", "self", ".", "num_classes", "=", "head", ".", "num_classes", "\n", "self", ".", "loss_weight", "=", "torch", ".", "ones", "(", "(", "self", ".", "num_classes", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_weight", "/=", "self", ".", "loss_weight", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.odc.ODC.init_weights": [[39, 45], ["odc.ODC.backbone.init_weights", "odc.ODC.neck.init_weights", "odc.ODC.head.init_weights", "odc.ODC.utils.print_log"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "print_log", "(", "'load model from: {}'", ".", "format", "(", "pretrained", ")", ",", "logger", "=", "'root'", ")", "\n", "", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "neck", ".", "init_weights", "(", "init_linear", "=", "'kaiming'", ")", "\n", "self", ".", "head", ".", "init_weights", "(", "init_linear", "=", "'normal'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.odc.ODC.forward_backbone": [[46, 56], ["odc.ODC.backbone", "odc.ODC.sobel_layer"], "methods", ["None"], ["", "def", "forward_backbone", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Forward backbone\n    \n        Returns:\n            x (tuple): backbone outputs\n        \"\"\"", "\n", "if", "self", ".", "with_sobel", ":", "\n", "            ", "img", "=", "self", ".", "sobel_layer", "(", "img", ")", "\n", "", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.odc.ODC.forward_train": [[57, 74], ["odc.ODC.forward_backbone", "odc.ODC.neck", "odc.ODC.head", "odc.ODC.head.loss", "odc.ODC.memory_bank.update_samples_memory", "feature[].detach", "odc.ODC.memory_bank.label_bank[].cuda", "idx.cpu"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.loss", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.update_samples_memory", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "forward_train", "(", "self", ",", "img", ",", "idx", ",", "**", "kwargs", ")", ":", "\n", "# forward & backward", "\n", "        ", "x", "=", "self", ".", "forward_backbone", "(", "img", ")", "\n", "feature", "=", "self", ".", "neck", "(", "x", ")", "\n", "outs", "=", "self", ".", "head", "(", "feature", ")", "\n", "if", "self", ".", "memory_bank", ".", "label_bank", ".", "is_cuda", ":", "\n", "            ", "loss_inputs", "=", "(", "outs", ",", "self", ".", "memory_bank", ".", "label_bank", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "loss_inputs", "=", "(", "outs", ",", "self", ".", "memory_bank", ".", "label_bank", "[", "idx", ".", "cpu", "(", ")", "]", ".", "cuda", "(", ")", ")", "\n", "", "losses", "=", "self", ".", "head", ".", "loss", "(", "*", "loss_inputs", ")", "\n", "\n", "# update samples memory", "\n", "change_ratio", "=", "self", ".", "memory_bank", ".", "update_samples_memory", "(", "\n", "idx", ",", "feature", "[", "0", "]", ".", "detach", "(", ")", ")", "\n", "losses", "[", "'change_ratio'", "]", "=", "change_ratio", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.odc.ODC.forward_test": [[75, 81], ["odc.ODC.forward_backbone", "odc.ODC.head", "dict", "out.cpu", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], ["", "def", "forward_test", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_backbone", "(", "img", ")", "# tuple", "\n", "outs", "=", "self", ".", "head", "(", "x", ")", "\n", "keys", "=", "[", "'head{}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "outs", ")", ")", "]", "\n", "out_tensors", "=", "[", "out", ".", "cpu", "(", ")", "for", "out", "in", "outs", "]", "# NxC", "\n", "return", "dict", "(", "zip", "(", "keys", ",", "out_tensors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.odc.ODC.forward": [[82, 91], ["odc.ODC.forward_train", "odc.ODC.forward_test", "odc.ODC.forward_backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], ["", "def", "forward", "(", "self", ",", "img", ",", "mode", "=", "'train'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "return", "self", ".", "forward_test", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'extract'", ":", "\n", "            ", "return", "self", ".", "forward_backbone", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such mode: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.odc.ODC.set_reweight": [[92, 104], ["numpy.bincount().astype", "odc.ODC.loss_weight.copy_", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "inv_hist.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "odc.ODC.memory_bank.label_bank.cpu().numpy", "odc.ODC.memory_bank.label_bank.numpy", "numpy.bincount", "odc.ODC.memory_bank.label_bank.cpu"], "methods", ["None"], ["", "", "def", "set_reweight", "(", "self", ",", "labels", "=", "None", ",", "reweight_pow", "=", "0.5", ")", ":", "\n", "        ", "if", "labels", "is", "None", ":", "\n", "            ", "if", "self", ".", "memory_bank", ".", "label_bank", ".", "is_cuda", ":", "\n", "                ", "labels", "=", "self", ".", "memory_bank", ".", "label_bank", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "labels", "=", "self", ".", "memory_bank", ".", "label_bank", ".", "numpy", "(", ")", "\n", "", "", "hist", "=", "np", ".", "bincount", "(", "\n", "labels", ",", "minlength", "=", "self", ".", "num_classes", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inv_hist", "=", "(", "1.", "/", "(", "hist", "+", "1e-5", ")", ")", "**", "reweight_pow", "\n", "weight", "=", "inv_hist", "/", "inv_hist", ".", "sum", "(", ")", "\n", "self", ".", "loss_weight", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "weight", ")", ")", "\n", "self", ".", "head", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "loss_weight", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.simclr.SimCLR.__init__": [[14, 20], ["torch.Module.__init__", "builder.build_backbone", "builder.build_neck", "builder.build_head", "simclr.SimCLR.init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "neck", "=", "None", ",", "head", "=", "None", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "SimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "self", ".", "head", "=", "builder", ".", "build_head", "(", "head", ")", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.simclr.SimCLR._create_buffer": [[21, 30], ["torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().unsqueeze().repeat().view().squeeze().cuda", "torch.arange().unsqueeze().repeat().view().squeeze().cuda", "torch.arange().unsqueeze().repeat().view().squeeze().cuda", "torch.arange().unsqueeze().repeat().view().squeeze().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().unsqueeze().repeat().view().squeeze", "torch.arange().unsqueeze().repeat().view().squeeze", "torch.arange().unsqueeze().repeat().view().squeeze", "torch.arange().unsqueeze().repeat().view().squeeze", "torch.arange().unsqueeze().repeat().view", "torch.arange().unsqueeze().repeat().view", "torch.arange().unsqueeze().repeat().view", "torch.arange().unsqueeze().repeat().view", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "@", "staticmethod", "\n", "def", "_create_buffer", "(", "N", ")", ":", "\n", "        ", "mask", "=", "1", "-", "torch", ".", "eye", "(", "N", "*", "2", ",", "dtype", "=", "torch", ".", "uint8", ")", ".", "cuda", "(", ")", "\n", "pos_ind", "=", "(", "torch", ".", "arange", "(", "N", "*", "2", ")", ".", "cuda", "(", ")", ",", "\n", "2", "*", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "\n", "1", ",", "2", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", ")", "\n", "neg_mask", "=", "torch", ".", "ones", "(", "(", "N", "*", "2", ",", "N", "*", "2", "-", "1", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", ".", "cuda", "(", ")", "\n", "neg_mask", "[", "pos_ind", "]", "=", "0", "\n", "return", "mask", ",", "pos_ind", ",", "neg_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.simclr.SimCLR.init_weights": [[31, 36], ["simclr.SimCLR.backbone.init_weights", "simclr.SimCLR.neck.init_weights", "simclr.SimCLR.utils.print_log"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "print_log", "(", "'load model from: {}'", ".", "format", "(", "pretrained", ")", ",", "logger", "=", "'root'", ")", "\n", "", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "neck", ".", "init_weights", "(", "init_linear", "=", "'kaiming'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.simclr.SimCLR.forward_backbone": [[37, 45], ["simclr.SimCLR.backbone"], "methods", ["None"], ["", "def", "forward_backbone", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Forward backbone\n\n        Returns:\n            x (tuple): backbone outputs\n        \"\"\"", "\n", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.simclr.SimCLR.forward_train": [[46, 66], ["img.reshape.reshape.reshape", "simclr.SimCLR.forward_backbone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "simclr.SimCLR._create_buffer", "torch.masked_select().reshape", "torch.masked_select().reshape", "torch.masked_select().reshape", "torch.masked_select().reshape", "s[].unsqueeze", "torch.masked_select().reshape", "torch.masked_select().reshape", "torch.masked_select().reshape", "torch.masked_select().reshape", "simclr.SimCLR.head", "img.reshape.reshape.dim", "img.reshape.reshape.dim", "img.reshape.reshape.size", "img.reshape.reshape.size", "img.reshape.reshape.size", "simclr.SimCLR.neck", "utils.GatherLayer.apply", "torch.cat.size", "torch.cat.size", "torch.cat.permute", "torch.cat.permute", "torch.masked_select().reshape.size", "torch.masked_select().reshape.size", "torch.masked_select().reshape.size", "torch.masked_select().reshape.size", "img.reshape.reshape.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.cat.size", "torch.cat.size", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.simclr.SimCLR._create_buffer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm"], ["", "def", "forward_train", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "dim", "(", ")", "==", "5", ",", "\"Input must have 5 dims, got: {}\"", ".", "format", "(", "img", ".", "dim", "(", ")", ")", "\n", "img", "=", "img", ".", "reshape", "(", "\n", "img", ".", "size", "(", "0", ")", "*", "2", ",", "img", ".", "size", "(", "2", ")", ",", "img", ".", "size", "(", "3", ")", ",", "img", ".", "size", "(", "4", ")", ")", "\n", "x", "=", "self", ".", "forward_backbone", "(", "img", ")", "# 2n", "\n", "z", "=", "self", ".", "neck", "(", "x", ")", "[", "0", "]", "# (2n)xd", "\n", "z", "=", "z", "/", "(", "torch", ".", "norm", "(", "z", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-10", ")", "\n", "z", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "z", ")", ",", "dim", "=", "0", ")", "# (2N)xd", "\n", "assert", "z", ".", "size", "(", "0", ")", "%", "2", "==", "0", "\n", "N", "=", "z", ".", "size", "(", "0", ")", "//", "2", "\n", "s", "=", "torch", ".", "matmul", "(", "z", ",", "z", ".", "permute", "(", "1", ",", "0", ")", ")", "# (2N)x(2N)", "\n", "mask", ",", "pos_ind", ",", "neg_mask", "=", "self", ".", "_create_buffer", "(", "N", ")", "\n", "# remove diagonal, (2N)x(2N-1)", "\n", "s", "=", "torch", ".", "masked_select", "(", "s", ",", "mask", "==", "1", ")", ".", "reshape", "(", "s", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "positive", "=", "s", "[", "pos_ind", "]", ".", "unsqueeze", "(", "1", ")", "# (2N)x1", "\n", "# select negative, (2N)x(2N-2)", "\n", "negative", "=", "torch", ".", "masked_select", "(", "s", ",", "neg_mask", "==", "1", ")", ".", "reshape", "(", "s", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "losses", "=", "self", ".", "head", "(", "positive", ",", "negative", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.simclr.SimCLR.forward_test": [[67, 69], ["None"], "methods", ["None"], ["", "def", "forward_test", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.simclr.SimCLR.forward": [[70, 79], ["simclr.SimCLR.forward_train", "simclr.SimCLR.forward_test", "simclr.SimCLR.forward_backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], ["", "def", "forward", "(", "self", ",", "img", ",", "mode", "=", "'train'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "return", "self", ".", "forward_test", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'extract'", ":", "\n", "            ", "return", "self", ".", "forward_backbone", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such mode: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.npid.NPID.__init__": [[20, 37], ["torch.Module.__init__", "builder.build_backbone", "builder.build_neck", "builder.build_head", "builder.build_memory", "npid.NPID.init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_memory", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights"], ["img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "idx", "=", "idx", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.npid.NPID.init_weights": [[38, 43], ["npid.NPID.backbone.init_weights", "npid.NPID.neck.init_weights", "npid.NPID.utils.print_log"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.npid.NPID.forward_backbone": [[44, 52], ["npid.NPID.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.npid.NPID.forward_train": [[53, 88], ["npid.NPID.forward_backbone", "idx.cuda.cuda.cuda", "torch.functional.normalize", "torch.functional.normalize", "npid.NPID.memory_bank.multinomial.draw", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "npid.NPID.head", "npid.NPID.neck", "neg_idx.flatten.flatten.view", "neg_idx.flatten.flatten.flatten", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "npid.NPID.memory_bank.update", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.functional.normalize.detach", "idx.cuda.cuda.view", "wrong.sum().item", "npid.NPID.memory_bank.multinomial.draw", "torch.functional.normalize.unsqueeze", "wrong.sum().item", "wrong.sum", "wrong.sum"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.draw", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.draw"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.npid.NPID.forward_test": [[89, 91], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.npid.NPID.forward": [[92, 101], ["npid.NPID.forward_train", "npid.NPID.forward_test", "npid.NPID.forward_backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.pinas.PiNAS._momentum_update_key_encoder": [[12, 23], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "pinas.PiNAS.encoder_q[].ema_blocks", "pinas.PiNAS.encoder_k[].ema_blocks", "block_q.parameters", "block_k.parameters"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet.ema_blocks", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet.ema_blocks"], ["    ", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ",", "choice_indices", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "block_q", ",", "block_k", "in", "zip", "(", "self", ".", "encoder_q", "[", "0", "]", ".", "ema_blocks", "(", "choice_indices", ")", "+", "[", "self", ".", "encoder_q", "[", "1", "]", "]", ",", "\n", "self", ".", "encoder_k", "[", "0", "]", ".", "ema_blocks", "(", "choice_indices", ")", "+", "[", "self", ".", "encoder_k", "[", "1", "]", "]", ")", ":", "\n", "            ", "for", "param_q", ",", "param_k", "in", "zip", "(", "block_q", ".", "parameters", "(", ")", ",", "\n", "block_k", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "momentum", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.pinas.PiNAS.forward_train": [[24, 92], ["img[].contiguous", "img[].contiguous", "img[].contiguous", "img[].contiguous", "numpy.array", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "pinas.PiNAS.head", "pinas.PiNAS.head", "pinas.PiNAS._dequeue_and_enqueue", "img.dim", "img.dim", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pinas.PiNAS._momentum_update_key_encoder", "pinas.PiNAS._batch_shuffle_ddp", "torch.functional.normalize", "torch.functional.normalize", "pinas.PiNAS._batch_unshuffle_ddp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pinas.PiNAS._momentum_update_key_encoder", "pinas.PiNAS._batch_shuffle_ddp", "torch.functional.normalize", "torch.functional.normalize", "pinas.PiNAS._batch_unshuffle_ddp", "numpy.random.choice", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "pinas.PiNAS.queue.clone().detach", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "pinas.PiNAS.queue.clone().detach", "range", "pinas.PiNAS.queue.clone", "pinas.PiNAS.queue.clone"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._dequeue_and_enqueue", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._momentum_update_key_encoder", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._batch_shuffle_ddp", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._batch_unshuffle_ddp", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._momentum_update_key_encoder", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._batch_shuffle_ddp", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._batch_unshuffle_ddp"], ["", "", "", "def", "forward_train", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "dim", "(", ")", "==", "5", ",", "\"Input must have 5 dims, got: {}\"", ".", "format", "(", "img", ".", "dim", "(", ")", ")", "\n", "im_q_0", "=", "img", "[", ":", ",", "0", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "im_k_0", "=", "img", "[", ":", ",", "1", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "im_q_1", "=", "img", "[", ":", ",", "2", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "im_k_1", "=", "img", "[", ":", ",", "3", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "# compute query features", "\n", "assert", "'choice_indices'", "not", "in", "kwargs", "and", "'extract'", "not", "in", "kwargs", "\n", "\n", "choice_indices", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "choice", "(", "self", ".", "encoder_q", "[", "0", "]", ".", "candidate_num", ",", "\n", "2", ",", "replace", "=", "False", ")", "for", "_", "in", "range", "(", "16", ")", "]", ")", "\n", "choice_indices_0", "=", "choice_indices", "[", ":", ",", "0", "]", "\n", "choice_indices_1", "=", "choice_indices", "[", ":", ",", "1", "]", "\n", "\n", "# step 0", "\n", "q_0", "=", "self", ".", "encoder_q", "[", "0", "]", "(", "im_q_0", ",", "choice_indices_0", ")", "# queries: NxC", "\n", "q_0", "=", "self", ".", "encoder_q", "[", "1", "]", "(", "q_0", ")", "[", "0", "]", "\n", "q_0", "=", "nn", ".", "functional", ".", "normalize", "(", "q_0", ",", "dim", "=", "1", ")", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", "choice_indices_0", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k_0", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k_0", ")", "\n", "\n", "k_0", "=", "self", ".", "encoder_k", "[", "0", "]", "(", "im_k_0", ",", "choice_indices_0", ")", "# keys: NxC", "\n", "k_0", "=", "self", ".", "encoder_k", "[", "1", "]", "(", "k_0", ")", "[", "0", "]", "\n", "k_0", "=", "nn", ".", "functional", ".", "normalize", "(", "k_0", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k_0", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k_0", ",", "idx_unshuffle", ")", "\n", "\n", "# step 1", "\n", "", "q_1", "=", "self", ".", "encoder_q", "[", "0", "]", "(", "im_q_1", ",", "choice_indices_1", ")", "# queries: NxC", "\n", "q_1", "=", "self", ".", "encoder_q", "[", "1", "]", "(", "q_1", ")", "[", "0", "]", "\n", "q_1", "=", "nn", ".", "functional", ".", "normalize", "(", "q_1", ",", "dim", "=", "1", ")", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", "choice_indices_1", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k_1", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k_1", ")", "\n", "\n", "k_1", "=", "self", ".", "encoder_k", "[", "0", "]", "(", "im_k_1", ",", "choice_indices_1", ")", "# keys: NxC", "\n", "k_1", "=", "self", ".", "encoder_k", "[", "1", "]", "(", "k_1", ")", "[", "0", "]", "\n", "k_1", "=", "nn", ".", "functional", ".", "normalize", "(", "k_1", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k_1", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k_1", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos_0", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q_0", ",", "k_1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg_0", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q_0", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "# positive logits: Nx1", "\n", "l_pos_1", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q_1", ",", "k_0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg_1", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q_1", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "losses_0", "=", "self", ".", "head", "(", "l_pos_0", ",", "l_neg_0", ")", "\n", "losses_1", "=", "self", ".", "head", "(", "l_pos_1", ",", "l_neg_1", ")", "\n", "losses", "=", "{", "k", ":", "(", "losses_0", "[", "k", "]", "+", "losses_1", "[", "k", "]", ")", "for", "k", "in", "losses_0", "}", "\n", "self", ".", "_dequeue_and_enqueue", "(", "(", "k_0", "+", "k_1", ")", "/", "2", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.pinas.PiNAS.forward_test": [[93, 140], ["img[].contiguous", "img[].contiguous", "img[].contiguous", "img[].contiguous", "kwargs.pop", "numpy.array", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "pinas.PiNAS.head", "pinas.PiNAS.head", "img.dim", "img.dim", "numpy.random.choice", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "pinas.PiNAS.queue.clone().detach", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "pinas.PiNAS.queue.clone().detach", "list", "range", "pinas.PiNAS.queue.clone", "pinas.PiNAS.queue.clone", "set", "set", "range"], "methods", ["None"], ["", "def", "forward_test", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "dim", "(", ")", "==", "5", ",", "\"Input must have 5 dims, got: {}\"", ".", "format", "(", "img", ".", "dim", "(", ")", ")", "\n", "im_q_0", "=", "img", "[", ":", ",", "0", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "im_k_0", "=", "img", "[", ":", ",", "1", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "im_q_1", "=", "img", "[", ":", ",", "2", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "im_k_1", "=", "img", "[", ":", ",", "3", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "# compute query features", "\n", "choice_indices_0", "=", "kwargs", ".", "pop", "(", "'choice_indices'", ")", "\n", "choice_indices_1", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "choice", "(", "\n", "list", "(", "set", "(", "range", "(", "self", ".", "encoder_q", "[", "0", "]", ".", "candidate_num", ")", ")", "-", "set", "(", "[", "choice_indices_0", "[", "i", "]", "]", ")", ")", ")", "for", "i", "in", "range", "(", "16", ")", "]", ")", "\n", "\n", "# step 0", "\n", "q_0", "=", "self", ".", "encoder_q", "[", "0", "]", "(", "im_q_0", ",", "choice_indices_0", ")", "# queries: NxC", "\n", "q_0", "=", "self", ".", "encoder_q", "[", "1", "]", "(", "q_0", ")", "[", "0", "]", "\n", "q_0", "=", "nn", ".", "functional", ".", "normalize", "(", "q_0", ",", "dim", "=", "1", ")", "\n", "\n", "k_0", "=", "self", ".", "encoder_k", "[", "0", "]", "(", "im_k_0", ",", "choice_indices_0", ")", "# keys: NxC", "\n", "k_0", "=", "self", ".", "encoder_k", "[", "1", "]", "(", "k_0", ")", "[", "0", "]", "\n", "k_0", "=", "nn", ".", "functional", ".", "normalize", "(", "k_0", ",", "dim", "=", "1", ")", "\n", "\n", "# step 1", "\n", "q_1", "=", "self", ".", "encoder_q", "[", "0", "]", "(", "im_q_1", ",", "choice_indices_1", ")", "# queries: NxC", "\n", "q_1", "=", "self", ".", "encoder_q", "[", "1", "]", "(", "q_1", ")", "[", "0", "]", "\n", "q_1", "=", "nn", ".", "functional", ".", "normalize", "(", "q_1", ",", "dim", "=", "1", ")", "\n", "\n", "k_1", "=", "self", ".", "encoder_k", "[", "0", "]", "(", "im_k_1", ",", "choice_indices_1", ")", "# keys: NxC", "\n", "k_1", "=", "self", ".", "encoder_k", "[", "1", "]", "(", "k_1", ")", "[", "0", "]", "\n", "k_1", "=", "nn", ".", "functional", ".", "normalize", "(", "k_1", ",", "dim", "=", "1", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "l_pos_0", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q_0", ",", "k_1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg_0", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q_0", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "# positive logits: Nx1", "\n", "l_pos_1", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q_1", ",", "k_0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg_1", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q_1", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "losses_0", "=", "self", ".", "head", "(", "l_pos_0", ",", "l_neg_0", ")", "\n", "losses_1", "=", "self", ".", "head", "(", "l_pos_1", ",", "l_neg_1", ")", "\n", "losses", "=", "{", "k", ":", "(", "losses_0", "[", "k", "]", "+", "losses_1", "[", "k", "]", ")", "for", "k", "in", "losses_0", "}", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.pinas.PiNAS.forward_key": [[141, 152], ["kwargs.pop", "torch.functional.normalize", "torch.functional.normalize", "img.dim", "img.dim"], "methods", ["None"], ["", "def", "forward_key", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "dim", "(", ")", "==", "4", ",", "\"Input must have 4 dims, got: {}\"", ".", "format", "(", "img", ".", "dim", "(", ")", ")", "\n", "\n", "choice_indices", "=", "kwargs", ".", "pop", "(", "'choice_indices'", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "[", "0", "]", "(", "img", ",", "choice_indices", ")", "# keys: NxC", "\n", "k", "=", "self", ".", "encoder_k", "[", "1", "]", "(", "k", ")", "[", "0", "]", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.pinas.PiNAS.forward_extract": [[153, 165], ["kwargs.pop", "pinas.PiNAS.encoder_q[].avgpool", "torch.functional.normalize", "torch.functional.normalize", "moco.concat_all_gather", "img.dim", "img.dim"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.concat_all_gather"], ["", "def", "forward_extract", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "dim", "(", ")", "==", "4", ",", "\"Input must have 4 dims, got: {}\"", ".", "format", "(", "img", ".", "dim", "(", ")", ")", "\n", "im_q", "=", "img", "\n", "# compute query features", "\n", "choice_indices", "=", "kwargs", ".", "pop", "(", "'choice_indices'", ")", "\n", "q", "=", "self", ".", "encoder_q", "[", "0", "]", "(", "im_q", ",", "choice_indices", ")", "# queries: NxC", "\n", "q", "=", "self", ".", "encoder_q", "[", "1", "]", ".", "avgpool", "(", "q", "[", "0", "]", ")", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "q", "=", "concat_all_gather", "(", "q", ")", "\n", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.pinas.PiNAS.forward": [[166, 177], ["pinas.PiNAS.forward_train", "pinas.PiNAS.forward_test", "pinas.PiNAS.forward_key", "pinas.PiNAS.forward_extract", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.pinas.PiNAS.forward_key", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.pinas.PiNAS.forward_extract"], ["", "def", "forward", "(", "self", ",", "img", ",", "mode", "=", "'train'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "return", "self", ".", "forward_test", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'key'", ":", "\n", "            ", "return", "self", ".", "forward_key", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'extract'", ":", "\n", "            ", "return", "self", ".", "forward_extract", "(", "img", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such mode: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.rotation_pred.RotationPred.__init__": [[13, 19], ["torch.Module.__init__", "builder.build_backbone", "rotation_pred.RotationPred.init_weights", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head"], ["img", ",", "\n", "torch", ".", "flip", "(", "img", ".", "transpose", "(", "1", ",", "2", ")", ",", "[", "1", "]", ")", ",", "\n", "torch", ".", "flip", "(", "img", ",", "[", "1", ",", "2", "]", ")", ",", "\n", "torch", ".", "flip", "(", "img", ",", "[", "1", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.rotation_pred.RotationPred.init_weights": [[20, 25], ["rotation_pred.RotationPred.backbone.init_weights", "rotation_pred.RotationPred.head.init_weights", "rotation_pred.RotationPred.utils.print_log"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["", "@", "DATASETS", ".", "register_module", "\n", "class", "RotationPredDataset", "(", "BaseDataset", ")", ":", "\n", "    ", "\"\"\"Dataset for rotation prediction \n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.rotation_pred.RotationPred.forward_backbone": [[26, 34], ["rotation_pred.RotationPred.backbone"], "methods", ["None"], ["        ", "super", "(", "RotationPredDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "assert", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ",", "'The output from the data source must be an Image, got: {}. \\\n            Please ensure that the list file does not contain labels.'", ".", "format", "(", "\n", "type", "(", "img", ")", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.rotation_pred.RotationPred.forward_train": [[35, 41], ["rotation_pred.RotationPred.forward_backbone", "rotation_pred.RotationPred.head", "rotation_pred.RotationPred.head.loss"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.loss"], ["img", "=", "torch", ".", "stack", "(", "rotate", "(", "img", ")", ",", "dim", "=", "0", ")", "\n", "rotation_labels", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "rot_label", "=", "rotation_labels", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.rotation_pred.RotationPred.forward_test": [[42, 48], ["rotation_pred.RotationPred.forward_backbone", "rotation_pred.RotationPred.head", "dict", "out.cpu", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.rotation_pred.RotationPred.forward": [[49, 64], ["img.view.view.view", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "rotation_pred.RotationPred.forward_train", "img.view.view.dim", "torch.flatten.dim", "torch.flatten.dim", "img.view.view.size", "img.view.view.size", "img.view.view.size", "rotation_pred.RotationPred.forward_test", "img.view.view.size", "img.view.view.size", "rotation_pred.RotationPred.forward_backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.super_classification.SuperClassification.__init__": [[14, 35], ["torch.Module.__init__", "builder.build_backbone", "super_classification.SuperClassification.init_weights", "utils.Sobel", "builder.build_neck", "builder.build_head", "numpy.expand_dims().repeat", "numpy.expand_dims", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "with_sobel", "=", "False", ",", "\n", "neck", "=", "None", ",", "\n", "head", "=", "None", ",", "\n", "pretrained", "=", "None", ",", "\n", "fairnas", "=", "False", ")", ":", "\n", "        ", "super", "(", "SuperClassification", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_sobel", "=", "with_sobel", "\n", "if", "with_sobel", ":", "\n", "            ", "self", ".", "sobel_layer", "=", "Sobel", "(", ")", "\n", "", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "", "if", "head", "is", "not", "None", ":", "\n", "            ", "self", ".", "head", "=", "builder", ".", "build_head", "(", "head", ")", "\n", "", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "fairnas", "=", "fairnas", "\n", "if", "fairnas", ":", "\n", "            ", "self", ".", "choice_indices", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "self", ".", "backbone", ".", "candidate_num", ")", ",", "1", ")", ".", "repeat", "(", "16", ",", "1", ")", "\n", "self", ".", "ptr", "=", "self", ".", "backbone", ".", "candidate_num", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.super_classification.SuperClassification.init_weights": [[36, 43], ["super_classification.SuperClassification.backbone.init_weights", "hasattr", "super_classification.SuperClassification.head.init_weights", "super_classification.SuperClassification.utils.print_log", "super_classification.SuperClassification.neck.init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights"], ["", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "print_log", "(", "'load model from: {}'", ".", "format", "(", "pretrained", ")", ",", "logger", "=", "'root'", ")", "\n", "", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "hasattr", "(", "self", ",", "'neck'", ")", ":", "\n", "            ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "self", ".", "head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.super_classification.SuperClassification.forward_backbone": [[44, 56], ["super_classification.SuperClassification.backbone", "super_classification.SuperClassification.sobel_layer", "numpy.random.randint"], "methods", ["None"], ["", "def", "forward_backbone", "(", "self", ",", "img", ",", "choice_indices", "=", "None", ")", ":", "\n", "        ", "\"\"\"Forward backbone\n\n        Returns:\n            x (tuple): backbone outputs\n        \"\"\"", "\n", "if", "self", ".", "with_sobel", ":", "\n", "            ", "img", "=", "self", ".", "sobel_layer", "(", "img", ")", "\n", "", "if", "choice_indices", "is", "None", ":", "\n", "            ", "choice_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "backbone", ".", "candidate_num", ",", "16", ")", "\n", "", "x", "=", "self", ".", "backbone", "(", "img", ",", "choice_indices", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.super_classification.SuperClassification.forward_train": [[57, 84], ["kwargs.pop", "super_classification.SuperClassification.forward_backbone", "hasattr", "super_classification.SuperClassification.head", "super_classification.SuperClassification.head.loss", "super_classification.SuperClassification.forward_backbone", "hasattr", "super_classification.SuperClassification.head", "super_classification.SuperClassification.head.loss", "super_classification.SuperClassification.neck", "range", "super_classification.SuperClassification.neck", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.loss", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.loss"], ["", "def", "forward_train", "(", "self", ",", "img", ",", "gt_label", ",", "**", "kwargs", ")", ":", "\n", "        ", "choice_indices", "=", "kwargs", ".", "pop", "(", "'choice_indices'", ",", "None", ")", "\n", "if", "not", "self", ".", "fairnas", ":", "\n", "            ", "x", "=", "self", ".", "forward_backbone", "(", "img", ",", "choice_indices", ")", "\n", "if", "hasattr", "(", "self", ",", "'neck'", ")", ":", "\n", "                ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "outs", "=", "self", ".", "head", "(", "x", ")", "\n", "loss_inputs", "=", "(", "outs", ",", "gt_label", ")", "\n", "losses", "=", "self", ".", "head", ".", "loss", "(", "*", "loss_inputs", ")", "\n", "", "else", ":", "\n", "            ", "assert", "choice_indices", "is", "None", "\n", "\n", "if", "self", ".", "ptr", "==", "self", ".", "backbone", ".", "candidate_num", ":", "\n", "                ", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "                    ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "choice_indices", "[", ":", ",", "i", "]", ")", "\n", "", "self", ".", "ptr", "=", "0", "\n", "\n", "", "x", "=", "self", ".", "forward_backbone", "(", "img", ",", "self", ".", "choice_indices", "[", "self", ".", "ptr", "]", ")", "\n", "if", "hasattr", "(", "self", ",", "'neck'", ")", ":", "\n", "                ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "outs", "=", "self", ".", "head", "(", "x", ")", "\n", "loss_inputs", "=", "(", "outs", ",", "gt_label", ")", "\n", "losses", "=", "self", ".", "head", ".", "loss", "(", "*", "loss_inputs", ")", "\n", "\n", "self", ".", "ptr", "+=", "1", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.super_classification.SuperClassification.forward_test": [[85, 93], ["super_classification.SuperClassification.forward_backbone", "hasattr", "super_classification.SuperClassification.head", "dict", "super_classification.SuperClassification.neck", "out.cpu", "zip", "kwargs.pop", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], ["", "def", "forward_test", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_backbone", "(", "img", ",", "choice_indices", "=", "kwargs", ".", "pop", "(", "'choice_indices'", ",", "None", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "'neck'", ")", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "outs", "=", "self", ".", "head", "(", "x", ")", "\n", "keys", "=", "[", "'head{}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "outs", ")", ")", "]", "\n", "out_tensors", "=", "[", "out", ".", "cpu", "(", ")", "for", "out", "in", "outs", "]", "# NxC", "\n", "return", "dict", "(", "zip", "(", "keys", ",", "out_tensors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.super_classification.SuperClassification.forward": [[94, 103], ["super_classification.SuperClassification.forward_train", "super_classification.SuperClassification.forward_test", "super_classification.SuperClassification.forward_backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], ["", "def", "forward", "(", "self", ",", "img", ",", "mode", "=", "'train'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "return", "self", ".", "forward_test", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'extract'", ":", "\n", "            ", "return", "self", ".", "forward_backbone", "(", "img", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such mode: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build": [[7, 15], ["isinstance", "torch.nn.Sequential", "openselfsup.utils.build_from_cfg", "openselfsup.utils.build_from_cfg", "registry.BACKBONES", "registry.NECKS", "registry.MEMORIES", "registry.HEADS", "registry.LOSSES", "registry.MODELS"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg"], ["\n", "def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "ann_files", "=", "cfg", "[", "'ann_file'", "]", "\n", "img_prefixes", "=", "cfg", ".", "get", "(", "'img_prefix'", ",", "None", ")", "\n", "seg_prefixes", "=", "cfg", ".", "get", "(", "'seg_prefix'", ",", "None", ")", "\n", "proposal_files", "=", "cfg", ".", "get", "(", "'proposal_file'", ",", "None", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone": [[17, 19], ["builder.build"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build"], ["        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "data_cfg", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "if", "isinstance", "(", "img_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck": [[21, 23], ["builder.build"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build"], ["", "if", "isinstance", "(", "seg_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'seg_prefix'", "]", "=", "seg_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_memory": [[25, 27], ["builder.build"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build"], ["", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head": [[29, 31], ["builder.build"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build"], ["\n", "", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_loss": [[33, 35], ["builder.build"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build"], ["", "elif", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_model": [[37, 39], ["builder.build"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build"], ["        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "\n", "", "return", "dataset", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepcluster.DeepCluster.__init__": [[16, 37], ["torch.Module.__init__", "builder.build_backbone", "builder.build_neck", "deepcluster.DeepCluster.init_weights", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "deepcluster.DeepCluster.loss_weight.sum", "utils.Sobel", "builder.build_head", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "assert", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ",", "'The output from the data source must be an Image, got: {}. \\\n            Please ensure that the list file does not contain labels.'", ".", "format", "(", "\n", "type", "(", "img", ")", ")", "\n", "label", "=", "self", ".", "labels", "[", "idx", "]", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "pseudo_label", "=", "label", ",", "idx", "=", "idx", ")", "\n", "\n", "", "def", "assign_labels", "(", "self", ",", "labels", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "labels", ")", "==", "len", "(", "labels", ")", ",", "\"Inconsistent lenght of asigned labels, \\\n            {} vs {}\"", ".", "format", "(", "len", "(", "self", ".", "labels", ")", ",", "len", "(", "labels", ")", ")", "\n", "self", ".", "labels", "=", "labels", "[", ":", "]", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepcluster.DeepCluster.init_weights": [[38, 44], ["deepcluster.DeepCluster.backbone.init_weights", "deepcluster.DeepCluster.neck.init_weights", "deepcluster.DeepCluster.head.init_weights", "deepcluster.DeepCluster.utils.print_log"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepcluster.DeepCluster.forward_backbone": [[45, 55], ["deepcluster.DeepCluster.backbone", "deepcluster.DeepCluster.sobel_layer"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepcluster.DeepCluster.forward_train": [[56, 64], ["deepcluster.DeepCluster.forward_backbone", "deepcluster.DeepCluster.neck", "deepcluster.DeepCluster.head", "deepcluster.DeepCluster.head.loss", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.loss"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepcluster.DeepCluster.forward_test": [[65, 71], ["deepcluster.DeepCluster.forward_backbone", "deepcluster.DeepCluster.head", "dict", "out.cpu", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepcluster.DeepCluster.forward": [[72, 81], ["deepcluster.DeepCluster.forward_train", "deepcluster.DeepCluster.forward_test", "deepcluster.DeepCluster.forward_backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepcluster.DeepCluster.set_reweight": [[82, 89], ["numpy.bincount().astype", "deepcluster.DeepCluster.loss_weight.copy_", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "inv_hist.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.bincount"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.classification.Classification.__init__": [[16, 29], ["torch.Module.__init__", "builder.build_backbone", "classification.Classification.init_weights", "utils.Sobel", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head"], ["\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "gt_label", "=", "target", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ",", "topk", "=", "(", "1", ",", "5", ")", ")", ":", "\n", "        ", "'''results: Tensor (NxC)\n        '''", "\n", "eval_res", "=", "{", "}", "\n", "\n", "target", "=", "torch", ".", "LongTensor", "(", "self", ".", "data_source", ".", "labels", ")", "\n", "assert", "scores", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"Inconsistent length for results and labels, {} vs {}\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.classification.Classification.init_weights": [[30, 35], ["classification.Classification.backbone.init_weights", "classification.Classification.head.init_weights", "classification.Classification.utils.print_log"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["scores", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "num", "=", "scores", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "scores", ".", "topk", "(", "max", "(", "topk", ")", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "# KxN", "\n", "for", "k", "in", "topk", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.classification.Classification.forward_backbone": [[36, 46], ["classification.Classification.backbone", "classification.Classification.sobel_layer"], "methods", ["None"], ["            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ".", "item", "(", ")", "\n", "acc", "=", "correct_k", "*", "100.0", "/", "num", "\n", "eval_res", "[", "\"{}_top{}\"", ".", "format", "(", "keyword", ",", "k", ")", "]", "=", "acc", "\n", "if", "logger", "is", "not", "None", "and", "logger", "!=", "'silent'", ":", "\n", "                ", "print_log", "(", "\n", "\"{}_top{}: {:.03f}\"", ".", "format", "(", "keyword", ",", "k", ",", "acc", ")", ",", "\n", "logger", "=", "logger", ")", "\n", "", "", "return", "eval_res", "\n", "\n", "\n", "", "", "@", "DATASETS", ".", "register_module", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.classification.Classification.forward_train": [[47, 53], ["classification.Classification.forward_backbone", "classification.Classification.head", "classification.Classification.head.loss"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.loss"], ["class", "StoragedClassificationDataset", "(", "ClassificationDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "storage", "=", "{", "}", "\n", "super", "(", "StoragedClassificationDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "not", "in", "self", ".", "storage", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.classification.Classification.forward_test": [[54, 60], ["classification.Classification.forward_backbone", "classification.Classification.head", "dict", "out.cpu", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], ["            ", "img", ",", "target", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "item", "=", "dict", "(", "img", "=", "img", ",", "gt_label", "=", "target", ")", "\n", "self", ".", "storage", "[", "idx", "]", "=", "item", "\n", "return", "item", "\n", "", "return", "self", ".", "storage", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.classification.Classification.forward_try": [[61, 68], ["classification.Classification.forward_backbone", "classification.Classification.head.avg_pool", "moco.concat_all_gather", "moco.concat_all_gather"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.concat_all_gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.concat_all_gather"], ["\n", "", "", "from", ".", "builder", "import", "build_datasource", "\n", "\n", "@", "DATASETS", ".", "register_module", "\n", "class", "TrainValDataset", "(", "BaseDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "TrainValDataset", ",", "self", ")", ".", "__init__", "(", "data_source", "[", "0", "]", ",", "pipeline", ")", "\n", "self", ".", "data_source_val", "=", "build_datasource", "(", "data_source", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.classification.Classification.aug_test": [[69, 74], ["numpy.mean", "classification.Classification.head", "classification.Classification.forward_backbone"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], ["\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_train", ",", "target_train", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img_train", "=", "self", ".", "pipeline", "(", "img_train", ")", "\n", "img_val", ",", "target_val", "=", "self", ".", "data_source_val", ".", "get_sample", "(", "idx", "%", "self", ".", "data_source_val", ".", "get_length", "(", ")", ")", "\n", "img_val", "=", "self", ".", "pipeline", "(", "img_val", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.classification.Classification.forward": [[75, 86], ["classification.Classification.forward_train", "classification.Classification.forward_test", "classification.Classification.forward_backbone", "classification.Classification.forward_try", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.classification.Classification.forward_try"], ["img", "=", "torch", ".", "cat", "(", "(", "img_train", ".", "unsqueeze", "(", "0", ")", ",", "img_val", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "target", "=", "torch", ".", "LongTensor", "(", "[", "target_train", ",", "target_val", "]", ")", "\n", "return", "dict", "(", "img", "=", "img", ",", "gt_label", "=", "target", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO.__init__": [[17, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "moco.MOCO.encoder_k.parameters", "builder.build_head", "moco.MOCO.init_weights", "moco.MOCO.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "moco.MOCO.register_buffer", "builder.build_backbone", "builder.build_neck", "builder.build_backbone", "builder.build_neck", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "head", "=", "None", ",", "\n", "pretrained", "=", "None", ",", "\n", "queue_len", "=", "65536", ",", "\n", "feat_dim", "=", "128", ",", "\n", "momentum", "=", "0.999", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MOCO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder_q", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "build_backbone", "(", "backbone", ")", ",", "builder", ".", "build_neck", "(", "neck", ")", ")", "\n", "self", ".", "encoder_k", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "build_backbone", "(", "backbone", ")", ",", "builder", ".", "build_neck", "(", "neck", ")", ")", "\n", "self", ".", "backbone", "=", "self", ".", "encoder_q", "[", "0", "]", "\n", "for", "param", "in", "self", ".", "encoder_k", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "head", "=", "builder", ".", "build_head", "(", "head", ")", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "queue_len", "=", "queue_len", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "# create the queue", "\n", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "feat_dim", ",", "queue_len", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO.init_weights": [[45, 53], ["moco.MOCO.encoder_q[].init_weights", "moco.MOCO.encoder_q[].init_weights", "zip", "moco.MOCO.utils.print_log", "moco.MOCO.encoder_q.parameters", "moco.MOCO.encoder_k.parameters", "param_k.data.copy_"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "print_log", "(", "'load model from: {}'", ".", "format", "(", "pretrained", ")", ",", "logger", "=", "'root'", ")", "\n", "", "self", ".", "encoder_q", "[", "0", "]", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "encoder_q", "[", "1", "]", ".", "init_weights", "(", "init_linear", "=", "'kaiming'", ")", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "\n", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._momentum_update_key_encoder": [[54, 63], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "moco.MOCO.encoder_q.parameters", "moco.MOCO.encoder_k.parameters"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "\n", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "momentum", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._dequeue_and_enqueue": [[64, 79], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.concat_all_gather", "int", "concat_all_gather.transpose"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "queue_len", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "transpose", "(", "0", ",", "1", ")", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "queue_len", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._batch_shuffle_ddp": [[80, 107], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.concat_all_gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._batch_unshuffle_ddp": [[108, 126], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO.forward_train": [[127, 160], ["img[].contiguous", "img[].contiguous", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "moco.MOCO.head", "moco.MOCO._dequeue_and_enqueue", "img.dim", "img.dim", "moco.MOCO.encoder_q", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.MOCO._momentum_update_key_encoder", "moco.MOCO._batch_shuffle_ddp", "torch.functional.normalize", "torch.functional.normalize", "moco.MOCO._batch_unshuffle_ddp", "moco.MOCO.encoder_k", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "moco.MOCO.queue.clone().detach", "moco.MOCO.queue.clone"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._dequeue_and_enqueue", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._momentum_update_key_encoder", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._batch_shuffle_ddp", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO._batch_unshuffle_ddp"], ["", "def", "forward_train", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "dim", "(", ")", "==", "5", ",", "\"Input must have 5 dims, got: {}\"", ".", "format", "(", "img", ".", "dim", "(", ")", ")", "\n", "im_q", "=", "img", "[", ":", ",", "0", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "im_k", "=", "img", "[", ":", ",", "1", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "[", "0", "]", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "[", "0", "]", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "losses", "=", "self", ".", "head", "(", "l_pos", ",", "l_neg", ")", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO.forward_test": [[161, 163], ["None"], "methods", ["None"], ["", "def", "forward_test", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.MOCO.forward": [[164, 173], ["moco.MOCO.forward_train", "moco.MOCO.forward_test", "moco.MOCO.backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test"], ["", "def", "forward", "(", "self", ",", "img", ",", "mode", "=", "'train'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "return", "self", ".", "forward_test", "(", "img", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "==", "'extract'", ":", "\n", "            ", "return", "self", ".", "backbone", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such mode: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.moco.concat_all_gather": [[176, 190], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "\n", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "\n", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.byol.BYOL.__init__": [[15, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "byol.BYOL.target_net.parameters", "builder.build_head", "byol.BYOL.init_weights", "builder.build_backbone", "builder.build_neck", "builder.build_backbone", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck"], ["\n", "\n", "def", "__init__", "(", "self", ",", "data_source", ",", "pipeline1", ",", "pipeline2", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "build_datasource", "(", "data_source", ")", "\n", "pipeline1", "=", "[", "build_from_cfg", "(", "p", ",", "PIPELINES", ")", "for", "p", "in", "pipeline1", "]", "\n", "self", ".", "pipeline1", "=", "Compose", "(", "pipeline1", ")", "\n", "pipeline2", "=", "[", "build_from_cfg", "(", "p", ",", "PIPELINES", ")", "for", "p", "in", "pipeline2", "]", "\n", "self", ".", "pipeline2", "=", "Compose", "(", "pipeline2", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_source", ".", "get_length", "(", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img1", "=", "self", ".", "pipeline1", "(", "img", ")", "\n", "img2", "=", "self", ".", "pipeline2", "(", "img", ")", "\n", "img_cat", "=", "torch", ".", "cat", "(", "(", "img1", ".", "unsqueeze", "(", "0", ")", ",", "img2", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "return", "dict", "(", "img", "=", "img_cat", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.byol.BYOL.init_weights": [[36, 46], ["byol.BYOL.online_net[].init_weights", "byol.BYOL.online_net[].init_weights", "zip", "byol.BYOL.head.init_weights", "byol.BYOL.utils.print_log", "byol.BYOL.online_net.parameters", "byol.BYOL.target_net.parameters", "param_tgt.data.copy_"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.byol.BYOL._momentum_update": [[47, 56], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "byol.BYOL.online_net.parameters", "byol.BYOL.target_net.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.byol.BYOL.forward_train": [[57, 72], ["img[].contiguous", "img[].contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "byol.BYOL.head", "byol.BYOL._momentum_update", "img.dim", "img.dim", "byol.BYOL.online_net", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "[].clone().detach", "[].clone", "byol.BYOL.target_net"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.byol.BYOL._momentum_update"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.byol.BYOL.forward_test": [[73, 75], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.byol.BYOL.forward": [[76, 85], ["byol.BYOL.forward_train", "byol.BYOL.forward_test", "byol.BYOL.backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.__init__": [[13, 21], ["torch.Module.__init__", "builder.build_backbone", "relative_loc.RelativeLoc.init_weights", "builder.build_neck", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_head"], ["    ", "split_per_side", "=", "3", "\n", "patch_jitter", "=", "21", "\n", "h", ",", "w", "=", "img", ".", "size", "\n", "h_grid", "=", "h", "//", "split_per_side", "\n", "w_grid", "=", "w", "//", "split_per_side", "\n", "h_patch", "=", "h_grid", "-", "patch_jitter", "\n", "w_patch", "=", "w_grid", "-", "patch_jitter", "\n", "assert", "h_patch", ">", "0", "and", "w_patch", ">", "0", "\n", "patches", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.init_weights": [[22, 28], ["relative_loc.RelativeLoc.backbone.init_weights", "relative_loc.RelativeLoc.neck.init_weights", "relative_loc.RelativeLoc.head.init_weights", "relative_loc.RelativeLoc.utils.print_log"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["for", "i", "in", "range", "(", "split_per_side", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "split_per_side", ")", ":", "\n", "            ", "p", "=", "TF", ".", "crop", "(", "img", ",", "i", "*", "h_grid", ",", "j", "*", "w_grid", ",", "h_grid", ",", "w_grid", ")", "\n", "p", "=", "RandomCrop", "(", "(", "h_patch", ",", "w_patch", ")", ")", "(", "p", ")", "\n", "patches", ".", "append", "(", "p", ")", "\n", "", "", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone": [[29, 37], ["relative_loc.RelativeLoc.backbone"], "methods", ["None"], ["\n", "", "@", "DATASETS", ".", "register_module", "\n", "class", "RelativeLocDataset", "(", "BaseDataset", ")", ":", "\n", "    ", "\"\"\"Dataset for relative patch location\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ",", "format_pipeline", ")", ":", "\n", "        ", "super", "(", "RelativeLocDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "format_pipeline", "=", "[", "build_from_cfg", "(", "p", ",", "PIPELINES", ")", "for", "p", "in", "format_pipeline", "]", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train": [[38, 48], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "relative_loc.RelativeLoc.forward_backbone", "relative_loc.RelativeLoc.forward_backbone", "relative_loc.RelativeLoc.neck", "relative_loc.RelativeLoc.head", "relative_loc.RelativeLoc.head.loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.loss"], ["self", ".", "format_pipeline", "=", "Compose", "(", "format_pipeline", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "assert", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ",", "'The output from the data source must be an Image, got: {}. \\\n            Please ensure that the list file does not contain labels.'", ".", "format", "(", "\n", "type", "(", "img", ")", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "patches", "=", "image_to_patches", "(", "img", ")", "\n", "patches", "=", "[", "self", ".", "format_pipeline", "(", "p", ")", "for", "p", "in", "patches", "]", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test": [[49, 59], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "relative_loc.RelativeLoc.forward_backbone", "relative_loc.RelativeLoc.forward_backbone", "relative_loc.RelativeLoc.neck", "relative_loc.RelativeLoc.head", "dict", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "out.cpu", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], ["perms", "=", "[", "]", "\n", "[", "perms", ".", "append", "(", "torch", ".", "cat", "(", "(", "patches", "[", "i", "]", ",", "patches", "[", "4", "]", ")", ",", "dim", "=", "0", ")", ")", "for", "i", "in", "range", "(", "9", ")", "if", "i", "!=", "4", "]", "\n", "patch_labels", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", ")", "\n", "return", "dict", "(", "img", "=", "torch", ".", "stack", "(", "perms", ")", ",", "patch_label", "=", "patch_labels", ")", "# 8(2C)HW, 8", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward": [[60, 75], ["img.view.view.view", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_loc.RelativeLoc.forward_train", "img.view.view.dim", "torch.flatten.dim", "torch.flatten.dim", "img.view.view.size", "img.view.view.size", "img.view.view.size", "relative_loc.RelativeLoc.forward_test", "img.view.view.size", "img.view.view.size", "relative_loc.RelativeLoc.forward_backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.relative_loc.RelativeLoc.forward_backbone"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.LinearNeck.__init__": [[32, 38], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "LinearNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.LinearNeck.init_weights": [[39, 41], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.LinearNeck.forward": [[42, 48], ["len", "necks.LinearNeck.avgpool", "necks.LinearNeck.fc", "necks.LinearNeck.view", "necks.LinearNeck.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "return", "[", "self", ".", "fc", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.RelativeLocNeck.__init__": [[55, 81], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "packaging.version.parse", "packaging.version.parse", "utils.build_norm_layer", "torch.BatchNorm1d", "torch.BatchNorm1d", "dict"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.Options.parse", "home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.Options.parse", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "sync_bn", "=", "False", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "RelativeLocNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", "<", "version", ".", "parse", "(", "\"1.4.0\"", ")", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "False", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", "*", "2", ",", "out_channels", ")", "\n", "if", "sync_bn", ":", "\n", "            ", "_", ",", "self", ".", "bn", "=", "build_norm_layer", "(", "\n", "dict", "(", "type", "=", "'SyncBN'", ",", "momentum", "=", "0.003", ")", ",", "\n", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "\n", "out_channels", ",", "momentum", "=", "0.003", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.RelativeLocNeck.init_weights": [[82, 84], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ",", "std", "=", "0.005", ",", "bias", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.RelativeLocNeck._forward_syncbn": [[85, 92], ["module.dim", "module().squeeze().squeeze", "module", "module().squeeze", "module", "module.unsqueeze().unsqueeze", "module.unsqueeze"], "methods", ["None"], ["", "def", "_forward_syncbn", "(", "self", ",", "module", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "2", "\n", "if", "self", ".", "expand_for_syncbn", ":", "\n", "            ", "x", "=", "module", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.RelativeLocNeck.forward": [[93, 107], ["necks.RelativeLocNeck.view", "necks.RelativeLocNeck.fc", "necks.RelativeLocNeck.relu", "necks.RelativeLocNeck.drop", "len", "necks.RelativeLocNeck.avgpool", "necks.RelativeLocNeck.size", "necks.RelativeLocNeck._forward_syncbn", "necks.RelativeLocNeck.bn"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckSimCLR._forward_syncbn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "sync_bn", ":", "\n", "            ", "x", "=", "self", ".", "_forward_syncbn", "(", "self", ".", "bn", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV0.__init__": [[114, 143], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "packaging.version.parse", "packaging.version.parse", "utils.build_norm_layer", "torch.BatchNorm1d", "torch.BatchNorm1d", "dict"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.Options.parse", "home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.Options.parse", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "hid_channels", ",", "\n", "out_channels", ",", "\n", "sync_bn", "=", "False", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "NonLinearNeckV0", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", "<", "version", ".", "parse", "(", "\"1.4.0\"", ")", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "False", "\n", "\n", "", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "in_channels", ",", "hid_channels", ")", "\n", "if", "sync_bn", ":", "\n", "            ", "_", ",", "self", ".", "bn0", "=", "build_norm_layer", "(", "\n", "dict", "(", "type", "=", "'SyncBN'", ",", "momentum", "=", "0.001", ",", "affine", "=", "False", ")", ",", "\n", "hid_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "hid_channels", ",", "momentum", "=", "0.001", ",", "affine", "=", "False", ")", "\n", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "hid_channels", ",", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV0.init_weights": [[144, 146], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV0._forward_syncbn": [[147, 154], ["module.dim", "module().squeeze().squeeze", "module", "module().squeeze", "module", "module.unsqueeze().unsqueeze", "module.unsqueeze"], "methods", ["None"], ["", "def", "_forward_syncbn", "(", "self", ",", "module", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "2", "\n", "if", "self", ".", "expand_for_syncbn", ":", "\n", "            ", "x", "=", "module", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV0.forward": [[155, 171], ["necks.NonLinearNeckV0.view", "necks.NonLinearNeckV0.fc0", "necks.NonLinearNeckV0.relu", "necks.NonLinearNeckV0.drop", "necks.NonLinearNeckV0.fc1", "necks.NonLinearNeckV0.relu", "len", "necks.NonLinearNeckV0.avgpool", "necks.NonLinearNeckV0.size", "necks.NonLinearNeckV0._forward_syncbn", "necks.NonLinearNeckV0.bn0"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckSimCLR._forward_syncbn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc0", "(", "x", ")", "\n", "if", "self", ".", "sync_bn", ":", "\n", "            ", "x", "=", "self", ".", "_forward_syncbn", "(", "self", ".", "bn0", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV1.__init__": [[177, 189], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "hid_channels", ",", "\n", "out_channels", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "NonLinearNeckV1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "hid_channels", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hid_channels", ",", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV1.init_weights": [[190, 192], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV1.forward": [[193, 199], ["len", "necks.NonLinearNeckV1.avgpool", "necks.NonLinearNeckV1.mlp", "necks.NonLinearNeckV1.view", "necks.NonLinearNeckV1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "return", "[", "self", ".", "mlp", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV2.__init__": [[205, 219], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "hid_channels", ",", "\n", "out_channels", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "NonLinearNeckV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "hid_channels", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hid_channels", ",", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV2.init_weights": [[220, 222], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckV2.forward": [[223, 229], ["len", "len", "necks.NonLinearNeckV2.avgpool", "necks.NonLinearNeckV2.mlp", "necks.NonLinearNeckV2.view", "necks.NonLinearNeckV2.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", ",", "\"Got: {}\"", ".", "format", "(", "len", "(", "x", ")", ")", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "return", "[", "self", ".", "mlp", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckSimCLR.__init__": [[250, 284], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "utils.build_norm_layer", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "packaging.version.parse", "packaging.version.parse", "dict", "necks.NonLinearNeckSimCLR.add_module", "necks.NonLinearNeckSimCLR.add_module", "necks.NonLinearNeckSimCLR.fc_names.append", "necks.NonLinearNeckSimCLR.bn_names.append", "torch.Linear", "torch.Linear", "utils.build_norm_layer", "dict"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.Options.parse", "home.repos.pwc.inspect_result.ernie1_pi-nas.recognition.verify.Options.parse", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "hid_channels", ",", "\n", "out_channels", ",", "\n", "num_layers", "=", "2", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "NonLinearNeckSimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", "<", "version", ".", "parse", "(", "\"1.4.0\"", ")", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "False", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "in_channels", ",", "hid_channels", ",", "bias", "=", "False", ")", "\n", "_", ",", "self", ".", "bn0", "=", "build_norm_layer", "(", "\n", "dict", "(", "type", "=", "'SyncBN'", ")", ",", "hid_channels", ")", "\n", "\n", "self", ".", "fc_names", "=", "[", "]", "\n", "self", ".", "bn_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_layers", ")", ":", "\n", "            ", "this_channels", "=", "out_channels", "if", "i", "==", "num_layers", "-", "1", "else", "hid_channels", "\n", "self", ".", "add_module", "(", "\n", "\"fc{}\"", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "Linear", "(", "hid_channels", ",", "this_channels", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "\"bn{}\"", ".", "format", "(", "i", ")", ",", "\n", "build_norm_layer", "(", "dict", "(", "type", "=", "'SyncBN'", ")", ",", "this_channels", ")", "[", "1", "]", ")", "\n", "self", ".", "fc_names", ".", "append", "(", "\"fc{}\"", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "bn_names", ".", "append", "(", "\"bn{}\"", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckSimCLR.init_weights": [[285, 287], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks._init_weights"], ["", "", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckSimCLR._forward_syncbn": [[288, 295], ["module.dim", "module().squeeze().squeeze", "module", "module().squeeze", "module", "module.unsqueeze().unsqueeze", "module.unsqueeze"], "methods", ["None"], ["", "def", "_forward_syncbn", "(", "self", ",", "module", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "2", "\n", "if", "self", ".", "expand_for_syncbn", ":", "\n", "            ", "x", "=", "module", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckSimCLR.forward": [[296, 311], ["necks.NonLinearNeckSimCLR.view", "necks.NonLinearNeckSimCLR.fc0", "necks.NonLinearNeckSimCLR._forward_syncbn", "zip", "len", "necks.NonLinearNeckSimCLR.avgpool", "necks.NonLinearNeckSimCLR.size", "getattr", "getattr", "necks.NonLinearNeckSimCLR.relu", "getattr.", "necks.NonLinearNeckSimCLR._forward_syncbn"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckSimCLR._forward_syncbn", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.NonLinearNeckSimCLR._forward_syncbn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc0", "(", "x", ")", "\n", "x", "=", "self", ".", "_forward_syncbn", "(", "self", ".", "bn0", ",", "x", ")", "\n", "for", "fc_name", ",", "bn_name", "in", "zip", "(", "self", ".", "fc_names", ",", "self", ".", "bn_names", ")", ":", "\n", "            ", "fc", "=", "getattr", "(", "self", ",", "fc_name", ")", "\n", "bn", "=", "getattr", "(", "self", ",", "bn_name", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "_forward_syncbn", "(", "bn", ",", "x", ")", "\n", "", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.AvgPoolNeck.__init__": [[316, 319], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AvgPoolNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.AvgPoolNeck.init_weights": [[320, 322], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks.AvgPoolNeck.forward": [[323, 326], ["len", "necks.AvgPoolNeck.avg_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "return", "[", "self", ".", "avg_pool", "(", "x", "[", "0", "]", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.models.necks._init_weights": [[10, 25], ["module.modules", "isinstance", "isinstance", "mmcv.cnn.normal_init", "mmcv.cnn.kaiming_init", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["def", "_init_weights", "(", "module", ",", "init_linear", "=", "'normal'", ",", "std", "=", "0.01", ",", "bias", "=", "0.", ")", ":", "\n", "    ", "assert", "init_linear", "in", "[", "'normal'", ",", "'kaiming'", "]", ",", "\"Undefined init_linear: {}\"", ".", "format", "(", "init_linear", ")", "\n", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "if", "init_linear", "==", "'normal'", ":", "\n", "                ", "normal_init", "(", "m", ",", "std", "=", "std", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "                ", "kaiming_init", "(", "m", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "\n", "nn", ".", "GroupNorm", ",", "nn", ".", "SyncBatchNorm", ")", ")", ":", "\n", "            ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet_variants.resnet50s": [[11, 23], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["def", "resnet50s", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNetS-50 model as in PSPNet.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "kwargs", "[", "'deep_stem'", "]", "=", "True", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnet50s'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet_variants.resnet101s": [[24, 36], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "def", "resnet101s", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNetS-101 model as in PSPNet.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "kwargs", "[", "'deep_stem'", "]", "=", "True", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnet101s'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet_variants.resnet152s": [[37, 49], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "def", "resnet152s", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNetS-152 model as in PSPNet.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "kwargs", "[", "'deep_stem'", "]", "=", "True", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnet152s'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet_variants.resnet50d": [[51, 59], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "def", "resnet50d", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "32", ",", "\n", "avg_down", "=", "True", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnet50d'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.alone_resnest50.AloneResnet50.__init__": [[10, 14], ["kwargs.pop", "kwargs.pop", "resnet.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "block_args", "=", "kwargs", ".", "pop", "(", "'block_args'", ")", "\n", "self", ".", "choice_indices", "=", "kwargs", ".", "pop", "(", "'choice_indices'", ")", "\n", "super", "(", "AloneResnet50", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.alone_resnest50.AloneResnet50._layer_block_args": [[15, 18], ["int", "math.log"], "methods", ["None"], ["", "def", "_layer_block_args", "(", "self", ",", "planes", ")", ":", "\n", "        ", "start", ",", "end", "=", "[", "[", "0", ",", "3", "]", ",", "[", "3", ",", "7", "]", ",", "[", "7", ",", "13", "]", ",", "[", "13", ",", "16", "]", "]", "[", "int", "(", "math", ".", "log", "(", "planes", "//", "64", ",", "2", ")", ")", "]", "\n", "return", "[", "self", ".", "block_args", "[", "c", "]", "for", "c", "in", "self", ".", "choice_indices", "[", "start", ":", "end", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.alone_resnest50.AloneResnet50._make_layer": [[19, 77], ["alone_resnest50.AloneResnet50._layer_block_args", "range", "torch.Sequential", "torch.Sequential", "down_layers.append", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "down_layers.append", "down_layers.append", "norm_layer", "block", "layers.append", "RuntimeError", "block", "down_layers.append", "down_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.alone_resnest50.AloneResnet50._layer_block_args"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "is_first", "=", "True", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "down_layers", "=", "[", "]", "\n", "if", "self", ".", "avg_down", ":", "\n", "                ", "if", "dilation", "==", "1", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layer_block_args", "=", "self", ".", "_layer_block_args", "(", "planes", ")", "\n", "if", "dilation", "==", "1", "or", "dilation", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "layer_block_args", "[", "0", "]", "[", "'radix'", "]", ",", "\n", "cardinality", "=", "layer_block_args", "[", "0", "]", "[", "'cardinality'", "]", ",", "\n", "bottleneck_width", "=", "layer_block_args", "[", "0", "]", "[", "'base_width'", "]", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "1", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "layer_block_args", "[", "0", "]", "[", "'radix'", "]", ",", "\n", "cardinality", "=", "layer_block_args", "[", "0", "]", "[", "'cardinality'", "]", ",", "\n", "bottleneck_width", "=", "layer_block_args", "[", "0", "]", "[", "'base_width'", "]", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "2", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "radix", "=", "layer_block_args", "[", "i", "]", "[", "'radix'", "]", ",", "\n", "cardinality", "=", "layer_block_args", "[", "i", "]", "[", "'cardinality'", "]", ",", "\n", "bottleneck_width", "=", "layer_block_args", "[", "i", "]", "[", "'base_width'", "]", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "dilation", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.alone_resnest50.alone_resnest50": [[87, 95], ["alone_resnest50.AloneResnet50", "print", "print", "AloneResnet50.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict"], ["def", "alone_resnest50", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "backbone_pretrained_path", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "AloneResnet50", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "32", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ",", "block_args", "=", "block_args", ",", "**", "kwargs", ")", "\n", "if", "backbone_pretrained_path", ":", "\n", "        ", "print", "(", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "backbone_pretrained_path", ",", "map_location", "=", "'cpu'", ")", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", ",", "flush", "=", "True", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "backbone_pretrained_path", ")", ",", "flush", "=", "True", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.wideresnet.BasicBlock.__init__": [[19, 33], ["torch.Module.__init__", "ABN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ABN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "expansion", "=", "1", ",", "downsample", "=", "None", ",", "\n", "previous_dilation", "=", "1", ",", "dropout", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "ABN", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "ABN", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "expansion", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "previous_dilation", ",", "dilation", "=", "previous_dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "drop", "=", "None", "\n", "if", "dropout", ">", "0.0", ":", "\n", "            ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.wideresnet.BasicBlock.forward": [[34, 49], ["wideresnet.BasicBlock.conv1", "wideresnet.BasicBlock.bn2", "wideresnet.BasicBlock.conv2", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.downsample", "x.clone", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.drops"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "downsample", ":", "\n", "            ", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "residual", "=", "self", ".", "downsample", "(", "bn1", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "x", ".", "clone", "(", ")", "\n", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "bn1", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "drop", ":", "\n", "            ", "out", "=", "self", ".", "drops", "(", "out", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "out", "+", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.wideresnet.Bottleneck.__init__": [[55, 72], ["torch.Module.__init__", "ABN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ABN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ABN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "expansion", "=", "4", ",", "dropout", "=", "0.0", ",", "\n", "downsample", "=", "None", ",", "previous_dilation", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "ABN", "(", "inplanes", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "ABN", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "expansion", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn3", "=", "ABN", "(", "planes", "*", "expansion", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "expansion", "//", "2", ",", "planes", "*", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "drop", "=", "None", "\n", "if", "dropout", ">", "0.0", ":", "\n", "            ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.wideresnet.Bottleneck.forward": [[73, 92], ["wideresnet.Bottleneck.conv1", "wideresnet.Bottleneck.bn2", "wideresnet.Bottleneck.conv2", "wideresnet.Bottleneck.bn3", "wideresnet.Bottleneck.conv3", "wideresnet.Bottleneck.bn1", "wideresnet.Bottleneck.downsample", "x.clone", "wideresnet.Bottleneck.bn1", "wideresnet.Bottleneck.drop"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "downsample", ":", "\n", "            ", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "residual", "=", "self", ".", "downsample", "(", "bn1", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "x", ".", "clone", "(", ")", "\n", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "bn1", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop", ":", "\n", "            ", "out", "=", "self", ".", "drop", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "out", "+", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.wideresnet.WideResNet.__init__": [[119, 149], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "wideresnet.WideResNet._make_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "wideresnet.WideResNet._make_layer", "wideresnet.WideResNet._make_layer", "ABN", "torch.GlobalAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "wideresnet.WideResNet._make_layer", "wideresnet.WideResNet._make_layer", "wideresnet.WideResNet._make_layer", "wideresnet.WideResNet._make_layer", "wideresnet.WideResNet._make_layer", "wideresnet.WideResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer"], ["def", "__init__", "(", "self", ",", "layers", ",", "classes", "=", "1000", ",", "dilated", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mod1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "mod2", "=", "self", ".", "_make_layer", "(", "2", ",", "BasicBlock", ",", "128", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "mod3", "=", "self", ".", "_make_layer", "(", "3", ",", "BasicBlock", ",", "256", ",", "layers", "[", "1", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "mod4", "=", "self", ".", "_make_layer", "(", "4", ",", "BasicBlock", ",", "512", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "\n", "if", "dilated", ":", "\n", "            ", "self", ".", "mod5", "=", "self", ".", "_make_layer", "(", "5", ",", "BasicBlock", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "\n", "expansion", "=", "2", ")", "\n", "self", ".", "mod6", "=", "self", ".", "_make_layer", "(", "6", ",", "Bottleneck", ",", "512", ",", "layers", "[", "4", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "\n", "expansion", "=", "4", ",", "dropout", "=", "0.3", ")", "\n", "self", ".", "mod7", "=", "self", ".", "_make_layer", "(", "7", ",", "Bottleneck", ",", "1024", ",", "layers", "[", "5", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "\n", "expansion", "=", "4", ",", "dropout", "=", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mod5", "=", "self", ".", "_make_layer", "(", "5", ",", "BasicBlock", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "expansion", "=", "2", ")", "\n", "self", ".", "mod6", "=", "self", ".", "_make_layer", "(", "6", ",", "Bottleneck", ",", "512", ",", "layers", "[", "4", "]", ",", "stride", "=", "2", ",", "\n", "expansion", "=", "4", ",", "dropout", "=", "0.3", ")", "\n", "self", ".", "mod7", "=", "self", ".", "_make_layer", "(", "7", ",", "Bottleneck", ",", "1024", ",", "layers", "[", "5", "]", ",", "stride", "=", "1", ",", "expansion", "=", "4", ",", "\n", "dropout", "=", "0.5", ")", "\n", "", "self", ".", "bn_out", "=", "ABN", "(", "4096", ")", "\n", "\n", "self", ".", "avgpool", "=", "GlobalAvgPool2d", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "4096", ",", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.wideresnet.WideResNet._make_layer": [[150, 177], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "layers.append", "layers.append", "block", "block", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "stage_index", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "expansion", "=", "1", ",", "\n", "dropout", "=", "0.0", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "dilation", "in", "(", "1", ",", "2", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "1", ",", "expansion", "=", "expansion", ",", "\n", "dropout", "=", "dropout", ",", "downsample", "=", "downsample", ",", "previous_dilation", "=", "dilation", ")", ")", "\n", "", "elif", "dilation", "==", "4", "and", "stage_index", "<", "7", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "2", ",", "expansion", "=", "expansion", ",", "\n", "dropout", "=", "dropout", ",", "downsample", "=", "downsample", ",", "previous_dilation", "=", "dilation", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "stage_index", "==", "7", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "expansion", "=", "expansion", ",", "\n", "dropout", "=", "dropout", ",", "downsample", "=", "downsample", ",", "previous_dilation", "=", "dilation", ")", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "expansion", "=", "expansion", ",", "\n", "dropout", "=", "dropout", ",", "previous_dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.wideresnet.WideResNet.forward": [[178, 196], ["wideresnet.WideResNet.mod1", "wideresnet.WideResNet.pool2", "wideresnet.WideResNet.mod2", "wideresnet.WideResNet.pool3", "wideresnet.WideResNet.mod3", "wideresnet.WideResNet.mod4", "wideresnet.WideResNet.mod5", "wideresnet.WideResNet.mod6", "wideresnet.WideResNet.mod7", "wideresnet.WideResNet.bn_out", "wideresnet.WideResNet.avgpool", "wideresnet.WideResNet.view", "wideresnet.WideResNet.fc", "wideresnet.WideResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mod1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "x", "=", "self", ".", "mod2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pool3", "(", "x", ")", "\n", "x", "=", "self", ".", "mod3", "(", "x", ")", "\n", "x", "=", "self", ".", "mod4", "(", "x", ")", "\n", "x", "=", "self", ".", "mod5", "(", "x", ")", "\n", "x", "=", "self", ".", "mod6", "(", "x", ")", "\n", "x", "=", "self", ".", "mod7", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn_out", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.wideresnet.wideresnet38": [[197, 208], ["wideresnet.WideResNet", "WideResNet.load_state_dict", "torch.load", "torch.load", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "def", "wideresnet38", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a WideResNet-38 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "WideResNet", "(", "[", "3", ",", "3", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'wideresnet38'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.wideresnet.wideresnet50": [[210, 221], ["wideresnet.WideResNet", "WideResNet.load_state_dict", "torch.load", "torch.load", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "def", "wideresnet50", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a WideResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "WideResNet", "(", "[", "3", ",", "3", ",", "6", ",", "6", ",", "3", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'wideresnet50'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnest.resnest50": [[19, 30], ["resnet.ResNet", "print", "print", "resnet.ResNet.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict"], ["from", "detectron2", ".", "modeling", ".", "backbone", ".", "backbone", "import", "Backbone", "\n", "\n", "__all__", "=", "[", "\n", "\"ResNetBlockBase\"", ",", "\n", "\"BasicBlock\"", ",", "\n", "\"BottleneckBlock\"", ",", "\n", "\"DeformBottleneckBlock\"", ",", "\n", "\"BasicStem\"", ",", "\n", "\"ResNet\"", ",", "\n", "\"make_stage\"", ",", "\n", "\"build_resnest_backbone\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnest.resnest101": [[31, 40], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["\n", "\n", "class", "BasicBlock", "(", "CNNBlockBase", ")", ":", "\n", "    ", "\"\"\"\n    The basic residual block for ResNet-18 and ResNet-34 defined in :paper:`ResNet`,\n    with two 3x3 conv layers and a projection shortcut if needed.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "*", ",", "stride", "=", "1", ",", "norm", "=", "\"BN\"", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnest.resnest200": [[41, 50], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "stride", ")", "\n", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnest.resnest269": [[51, 60], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["            ", "self", ".", "shortcut", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnest.resnest50_fast": [[61, 70], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["\n", "", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnest.resnest101_fast": [[71, 80], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["\n", "self", ".", "conv2", "=", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.Bottleneck.__init__": [[25, 86], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "torch.AvgPool2d", "torch.AvgPool2d", "torch.DropBlock2D", "torch.DropBlock2D", "torch.SplAtConv2d", "zeros_", "torch.DropBlock2D", "torch.RFConv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "radix", "=", "0", ",", "cardinality", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "dilation", "=", "1", ",", "is_first", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "norm_layer", "=", "None", ",", "dropblock_prob", "=", "0.0", ",", "last_gamma", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "int", "(", "planes", "*", "(", "bottleneck_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "group_width", ")", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "and", "(", "stride", ">", "1", "or", "is_first", ")", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "stride", "=", "1", "\n", "\n", "", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock1", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "if", "radix", "==", "1", ":", "\n", "                ", "self", ".", "dropblock2", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "dropblock3", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "\n", "", "if", "radix", ">=", "1", ":", "# if radix > 1:", "\n", "            ", "self", ".", "conv2", "=", "SplAtConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "radix", "=", "radix", ",", "rectify", "=", "rectified_conv", ",", "\n", "rectify_avg", "=", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "#", "\n", "self", ".", "bn2", "=", "None", "\n", "#", "\n", "", "elif", "rectified_conv", ":", "\n", "            ", "self", ".", "conv2", "=", "RFConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "average_mode", "=", "rectify_avg", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "4", ")", "\n", "\n", "if", "last_gamma", ":", "\n", "            ", "from", "torch", ".", "nn", ".", "init", "import", "zeros_", "\n", "zeros_", "(", "self", ".", "bn3", ".", "weight", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.Bottleneck.forward": [[87, 122], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.dropblock1", "resnet.Bottleneck.avd_layer", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.avd_layer", "resnet.Bottleneck.dropblock3", "resnet.Bottleneck.downsample", "resnet.Bottleneck.dropblock2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "# if self.radix == 1:", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "                ", "out", "=", "self", ".", "dropblock2", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd", "and", "not", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock3", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.ResNet.__init__": [[148, 235], ["torch.Module.__init__", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.GlobalAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "resnet.ResNet._freeze_stages", "torch.Sequential", "torch.Sequential", "conv_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Dropout", "torch.Dropout", "isinstance", "conv_layer", "norm_layer", "torch.ReLU", "torch.ReLU", "conv_layer", "norm_layer", "torch.ReLU", "torch.ReLU", "conv_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "radix", "=", "0", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "num_classes", "=", "1000", ",", "dilated", "=", "False", ",", "dilation", "=", "1", ",", "\n", "deep_stem", "=", "False", ",", "stem_width", "=", "64", ",", "avg_down", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "\n", "final_drop", "=", "0.0", ",", "dropblock_prob", "=", "0", ",", "\n", "last_gamma", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "#", "\n", "frozen_stages", "=", "-", "1", ",", "norm_eval", "=", "''", "\n", "#", "\n", ")", ":", "\n", "        ", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "# ResNet-D params", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "64", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "last_gamma", "=", "last_gamma", "\n", "# ResNeSt params", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "#", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "#", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rectified_conv", "=", "rectified_conv", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "if", "rectified_conv", ":", "\n", "            ", "conv_layer", "=", "RFConv2d", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "nn", ".", "Conv2d", "\n", "", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectified_conv", "else", "{", "}", "\n", "if", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", "(", "3", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_layer", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "**", "conv_kwargs", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ",", "is_first", "=", "False", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "if", "dilated", "or", "dilation", "==", "4", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "dilation", "==", "2", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "self", ".", "avgpool", "=", "GlobalAvgPool2d", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "final_drop", ")", "if", "final_drop", ">", "0.0", "else", "None", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "norm_layer", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "#", "\n", "", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.ResNet._freeze_stages": [[236, 248], ["range", "getattr", "getattr.eval", "getattr.parameters", "getattr.eval", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "m", "in", "[", "self", ".", "conv1", ",", "self", ".", "bn1", "]", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.ResNet._make_layer": [[250, 304], ["range", "torch.Sequential", "torch.Sequential", "down_layers.append", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "down_layers.append", "down_layers.append", "norm_layer", "block", "layers.append", "RuntimeError", "block", "down_layers.append", "down_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "is_first", "=", "True", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "down_layers", "=", "[", "]", "\n", "if", "self", ".", "avg_down", ":", "\n", "                ", "if", "dilation", "==", "1", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "dilation", "==", "1", "or", "dilation", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "1", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "2", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "dilation", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.ResNet.forward": [[305, 324], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc", "resnet.ResNet.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "#x = x.view(x.size(0), -1)", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "if", "self", ".", "drop", ":", "\n", "            ", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.ResNet.train": [[326, 340], ["super().train", "resnet.ResNet._freeze_stages", "resnet.ResNet.modules", "isinstance", "resnet.ResNet.modules", "m.eval", "isinstance", "m.train"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", ":", "\n", "            ", "if", "self", ".", "norm_eval", "==", "'all_true'", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                    ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "", "", "", "elif", "self", ".", "norm_eval", "==", "'all_false'", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                    ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                        ", "m", ".", "train", "(", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.resnet50": [[342, 355], ["resnet.ResNet", "print", "print", "ResNet.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict"], ["", "", "", "", "", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "backbone_pretrained_path", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "backbone_pretrained_path", ":", "\n", "# model.load_state_dict(torch.load(", "\n", "#     get_model_file('resnet50', root=root)), strict=False)", "\n", "        ", "print", "(", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "backbone_pretrained_path", ",", "map_location", "=", "'cpu'", ")", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", ",", "flush", "=", "True", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "backbone_pretrained_path", ")", ",", "flush", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.resnet101": [[357, 368], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnet101'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnet.resnet152": [[370, 381], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnet152'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.SeparableConv2d.__init__": [[21, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "inplanes", ",", "kernel_size", ",", "stride", ",", "0", ",", "dilation", ",", "\n", "groups", "=", "inplanes", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "inplanes", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.SeparableConv2d.forward": [[29, 35], ["xception.fixed_padding", "xception.SeparableConv2d.conv1", "xception.SeparableConv2d.bn", "xception.SeparableConv2d.pointwise"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.fixed_padding"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "fixed_padding", "(", "x", ",", "self", ".", "conv1", ".", "kernel_size", "[", "0", "]", ",", "dilation", "=", "self", ".", "conv1", ".", "dilation", "[", "0", "]", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Block.__init__": [[38, 75], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "xception.SeparableConv2d", "norm_layer", "rep.append", "xception.SeparableConv2d", "norm_layer", "xception.SeparableConv2d", "norm_layer", "xception.SeparableConv2d", "norm_layer", "rep.append", "rep.append", "rep.append", "xception.SeparableConv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "reps", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "planes", "!=", "inplanes", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "norm_layer", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "filters", "=", "inplanes", "\n", "if", "grow_first", ":", "\n", "            ", "if", "start_with_relu", ":", "\n", "                ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "", "rep", ".", "append", "(", "SeparableConv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "planes", ")", ")", "\n", "filters", "=", "planes", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "if", "grow_first", "or", "start_with_relu", ":", "\n", "                ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "1", ",", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "filters", ")", ")", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "planes", ")", ")", "\n", "", "if", "stride", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "planes", ",", "planes", ",", "3", ",", "2", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "planes", ")", ")", "\n", "", "elif", "is_last", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "planes", ")", ")", "\n", "#if not start_with_relu:", "\n", "#    rep = rep[1:]", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Block.forward": [[76, 85], ["xception.Block.rep", "xception.Block.skip", "xception.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "", "x", "=", "x", "+", "skip", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Xception65.__init__": [[89, 152], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "xception.Block", "xception.Block", "xception.Block", "range", "torch.Sequential", "torch.Sequential", "xception.Block", "xception.SeparableConv2d", "norm_layer", "xception.SeparableConv2d", "norm_layer", "xception.SeparableConv2d", "norm_layer", "torch.GlobalAvgPool2d", "torch.Linear", "torch.Linear", "xception.Xception65._init_weight", "midflowblocks.append", "collections.OrderedDict", "xception.Block"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Xception71._init_weight"], ["def", "__init__", "(", "self", ",", "output_stride", "=", "32", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Xception65", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "output_stride", "==", "32", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block20_stride", "=", "2", "\n", "exit_block_dilations", "=", "(", "1", ",", "1", ")", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block20_stride", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "entry_block3_stride", "=", "1", "\n", "middle_block_dilation", "=", "2", "\n", "exit_block20_stride", "=", "1", "\n", "exit_block_dilations", "=", "(", "2", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Entry flow", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "64", ")", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "reps", "=", "2", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "False", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "reps", "=", "2", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "False", ",", "\n", "grow_first", "=", "True", ")", "\n", "#print('self.block2', self.block2)", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "reps", "=", "2", ",", "stride", "=", "entry_block3_stride", ",", "norm_layer", "=", "norm_layer", ",", "\n", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ",", "is_last", "=", "True", ")", "\n", "\n", "# Middle flow", "\n", "midflowblocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ",", "20", ")", ":", "\n", "            ", "midflowblocks", ".", "append", "(", "(", "'block%d'", "%", "i", ",", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "middle_block_dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "True", ",", "\n", "grow_first", "=", "True", ")", ")", ")", "\n", "", "self", ".", "midflow", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "midflowblocks", ")", ")", "\n", "\n", "# Exit flow", "\n", "self", ".", "block20", "=", "Block", "(", "728", ",", "1024", ",", "reps", "=", "2", ",", "stride", "=", "exit_block20_stride", ",", "dilation", "=", "exit_block_dilations", "[", "0", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ",", "is_last", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "1536", ")", "\n", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "1536", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "bn4", "=", "norm_layer", "(", "1536", ")", "\n", "\n", "self", ".", "conv5", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "bn5", "=", "norm_layer", "(", "2048", ")", "\n", "\n", "self", ".", "avgpool", "=", "GlobalAvgPool2d", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "1000", ")", "\n", "\n", "# Init weights", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Xception65.forward": [[153, 194], ["xception.Xception65.conv1", "xception.Xception65.bn1", "xception.Xception65.relu", "xception.Xception65.conv2", "xception.Xception65.bn2", "xception.Xception65.relu", "xception.Xception65.block1", "xception.Xception65.relu", "xception.Xception65.block2", "xception.Xception65.block3", "xception.Xception65.midflow", "xception.Xception65.block20", "xception.Xception65.relu", "xception.Xception65.conv3", "xception.Xception65.bn3", "xception.Xception65.relu", "xception.Xception65.conv4", "xception.Xception65.bn4", "xception.Xception65.relu", "xception.Xception65.conv5", "xception.Xception65.bn5", "xception.Xception65.relu", "xception.Xception65.avgpool", "xception.Xception65.view", "xception.Xception65.fc", "xception.Xception65.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Entry flow", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "# add relu here", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#c1 = x", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "#c2 = x", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "\n", "# Middle flow", "\n", "x", "=", "self", ".", "midflow", "(", "x", ")", "\n", "#c3 = x", "\n", "\n", "# Exit flow", "\n", "x", "=", "self", ".", "block20", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Xception65._init_weight": [[195, 206], ["xception.Xception65.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SyncBatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Xception71.__init__": [[210, 278], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "xception.Block", "block2.append", "block2.append", "block2.append", "torch.Sequential", "torch.Sequential", "xception.Block", "range", "torch.Sequential", "torch.Sequential", "xception.Block", "xception.SeparableConv2d", "norm_layer", "xception.SeparableConv2d", "norm_layer", "xception.SeparableConv2d", "norm_layer", "torch.GlobalAvgPool2d", "torch.Linear", "torch.Linear", "xception.Xception71._init_weight", "xception.Block", "xception.Block", "xception.Block", "midflowblocks.append", "collections.OrderedDict", "xception.Block"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Xception71._init_weight"], ["def", "__init__", "(", "self", ",", "output_stride", "=", "32", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Xception71", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "output_stride", "==", "32", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block20_stride", "=", "2", "\n", "exit_block_dilations", "=", "(", "1", ",", "1", ")", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block20_stride", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "entry_block3_stride", "=", "1", "\n", "middle_block_dilation", "=", "2", "\n", "exit_block20_stride", "=", "1", "\n", "exit_block_dilations", "=", "(", "2", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Entry flow", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "64", ")", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "reps", "=", "2", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "False", ")", "\n", "block2", "=", "[", "]", "\n", "block2", ".", "append", "(", "Block", "(", "128", ",", "256", ",", "reps", "=", "2", ",", "stride", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "False", ",", "\n", "grow_first", "=", "True", ")", ")", "\n", "block2", ".", "append", "(", "Block", "(", "256", ",", "256", ",", "reps", "=", "2", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "False", ",", "\n", "grow_first", "=", "True", ")", ")", "\n", "block2", ".", "append", "(", "Block", "(", "256", ",", "728", ",", "reps", "=", "2", ",", "stride", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "False", ",", "\n", "grow_first", "=", "True", ")", ")", "\n", "self", ".", "block2", "=", "nn", ".", "Sequential", "(", "*", "block2", ")", "\n", "self", ".", "block3", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "2", ",", "stride", "=", "entry_block3_stride", ",", "norm_layer", "=", "norm_layer", ",", "\n", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ",", "is_last", "=", "True", ")", "\n", "\n", "# Middle flow", "\n", "midflowblocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ",", "20", ")", ":", "\n", "            ", "midflowblocks", ".", "append", "(", "(", "'block%d'", "%", "i", ",", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "middle_block_dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "True", ",", "\n", "grow_first", "=", "True", ")", ")", ")", "\n", "", "self", ".", "midflow", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "midflowblocks", ")", ")", "\n", "\n", "# Exit flow", "\n", "self", ".", "block20", "=", "Block", "(", "728", ",", "1024", ",", "reps", "=", "2", ",", "stride", "=", "exit_block20_stride", ",", "dilation", "=", "exit_block_dilations", "[", "0", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ",", "is_last", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "1536", ")", "\n", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "1536", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "bn4", "=", "norm_layer", "(", "1536", ")", "\n", "\n", "self", ".", "conv5", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "bn5", "=", "norm_layer", "(", "2048", ")", "\n", "\n", "self", ".", "avgpool", "=", "GlobalAvgPool2d", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "1000", ")", "\n", "\n", "# Init weights", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Xception71.forward": [[279, 318], ["xception.Xception71.conv1", "xception.Xception71.bn1", "xception.Xception71.relu", "xception.Xception71.conv2", "xception.Xception71.bn2", "xception.Xception71.relu", "xception.Xception71.block1", "xception.Xception71.relu", "xception.Xception71.block2", "xception.Xception71.block3", "xception.Xception71.midflow", "xception.Xception71.block20", "xception.Xception71.relu", "xception.Xception71.conv3", "xception.Xception71.bn3", "xception.Xception71.relu", "xception.Xception71.conv4", "xception.Xception71.bn4", "xception.Xception71.relu", "xception.Xception71.conv5", "xception.Xception71.bn5", "xception.Xception71.relu", "xception.Xception71.avgpool", "xception.Xception71.view", "xception.Xception71.fc", "xception.Xception71.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Entry flow", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "# add relu here", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "low_level_feat", "=", "x", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "\n", "# Middle flow", "\n", "x", "=", "self", ".", "midflow", "(", "x", ")", "\n", "\n", "# Exit flow", "\n", "x", "=", "self", ".", "block20", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "#, low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.Xception71._init_weight": [[319, 330], ["xception.Xception71.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SyncBatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.fixed_padding": [[11, 18], ["torch.pad"], "function", ["None"], ["def", "fixed_padding", "(", "inputs", ",", "kernel_size", ",", "dilation", ")", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "padded_inputs", "=", "F", ".", "pad", "(", "inputs", ",", "(", "pad_beg", ",", "pad_end", ",", "pad_beg", ",", "pad_end", ")", ")", "\n", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.xception.xception65": [[332, 342], ["xception.Xception65", "Xception65.load_state_dict", "torch.load", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "", "", "def", "xception65", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "Xception65", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "get_model_file", "(", "'xception65'", ",", "root", "=", "root", ")", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnext.resnext50_32x4d": [[8, 23], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'bottleneck_width'", "]", "=", "4", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnext50_32x4d'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbone.resnext.resnext101_32x8d": [[24, 39], ["resnet.ResNet", "resnet.ResNet.load_state_dict", "torch.load", "model_store.get_model_file"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'bottleneck_width'", "]", "=", "8", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnext101_32x8d'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.SwishJit.__init__": [[33, 35], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "SwishJit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.SwishJit.forward": [[36, 38], ["activations_jit.swish_jit"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.swish_jit"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "swish_jit", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.MishJit.__init__": [[41, 43], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "MishJit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.MishJit.forward": [[44, 46], ["activations_jit.mish_jit"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.mish_jit"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "mish_jit", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.HardSigmoidJit.__init__": [[55, 57], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "HardSigmoidJit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.HardSigmoidJit.forward": [[58, 60], ["activations_jit.hard_sigmoid_jit"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.hard_sigmoid_jit"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "hard_sigmoid_jit", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.HardSwishJit.__init__": [[69, 71], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "HardSwishJit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.HardSwishJit.forward": [[72, 74], ["activations_jit.hard_swish_jit"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.hard_swish_jit"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "hard_swish_jit", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.HardMishJit.__init__": [[86, 88], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "HardMishJit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.HardMishJit.forward": [[89, 91], ["activations_jit.hard_mish_jit"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.hard_mish_jit"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "hard_mish_jit", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.swish_jit": [[18, 23], ["x.mul", "x.sigmoid"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["@", "torch", ".", "jit", ".", "script", "\n", "def", "swish_jit", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Swish - Described in: https://arxiv.org/abs/1710.05941\n    \"\"\"", "\n", "return", "x", ".", "mul", "(", "x", ".", "sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.mish_jit": [[25, 30], ["x.mul", "torch.nn.functional.softplus().tanh", "torch.nn.functional.softplus"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.tanh"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "mish_jit", "(", "x", ",", "_inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Mish: A Self Regularized Non-Monotonic Neural Activation Function - https://arxiv.org/abs/1908.08681\n    \"\"\"", "\n", "return", "x", ".", "mul", "(", "F", ".", "softplus", "(", "x", ")", ".", "tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.hard_sigmoid_jit": [[48, 52], ["None"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hard_sigmoid_jit", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "# return F.relu6(x + 3.) / 6.", "\n", "    ", "return", "(", "x", "+", "3", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "6", ")", ".", "div", "(", "6.", ")", "# clamp seems ever so slightly faster?", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.hard_swish_jit": [[62, 66], ["None"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hard_swish_jit", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "# return x * (F.relu6(x + 3.) / 6)", "\n", "    ", "return", "x", "*", "(", "x", "+", "3", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "6", ")", ".", "div", "(", "6.", ")", "# clamp seems ever so slightly faster?", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_jit.hard_mish_jit": [[76, 83], ["None"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hard_mish_jit", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" Hard Mish\n    Experimental, based on notes by Mish author Diganta Misra at\n      https://github.com/digantamisra98/H-Mish/blob/0da20d4bc58e696b6803f2523c58d3c8a82782d0/README.md\n    \"\"\"", "\n", "return", "0.5", "*", "x", "*", "(", "x", "+", "2", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.test_time_pool.TestTimePoolHead.__init__": [[14, 27], ["torch.nn.Module.__init__", "test_time_pool.TestTimePoolHead.base.get_classifier", "isinstance", "test_time_pool.TestTimePoolHead.base.reset_classifier", "torch.nn.Conv2d", "test_time_pool.TestTimePoolHead.fc.weight.data.copy_", "test_time_pool.TestTimePoolHead.fc.bias.data.copy_", "test_time_pool.TestTimePoolHead.weight.data.view", "test_time_pool.TestTimePoolHead.bias.data.view", "test_time_pool.TestTimePoolHead.fc.weight.size", "test_time_pool.TestTimePoolHead.fc.bias.size"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base", ",", "original_pool", "=", "7", ")", ":", "\n", "        ", "super", "(", "TestTimePoolHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base", "=", "base", "\n", "self", ".", "original_pool", "=", "original_pool", "\n", "base_fc", "=", "self", ".", "base", ".", "get_classifier", "(", ")", "\n", "if", "isinstance", "(", "base_fc", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "self", ".", "fc", "=", "base_fc", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "base", ".", "num_features", ",", "self", ".", "base", ".", "num_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "copy_", "(", "base_fc", ".", "weight", ".", "data", ".", "view", "(", "self", ".", "fc", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "copy_", "(", "base_fc", ".", "bias", ".", "data", ".", "view", "(", "self", ".", "fc", ".", "bias", ".", "size", "(", ")", ")", ")", "\n", "", "self", ".", "base", ".", "reset_classifier", "(", "0", ")", "# delete original fc layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.test_time_pool.TestTimePoolHead.forward": [[28, 34], ["test_time_pool.TestTimePoolHead.base.forward_features", "torch.avg_pool2d", "test_time_pool.TestTimePoolHead.fc", "adaptive_avgmax_pool.adaptive_avgmax_pool2d", "adaptive_avgmax_pool.adaptive_avgmax_pool2d.view", "adaptive_avgmax_pool.adaptive_avgmax_pool2d.size"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNet.forward_features", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.adaptive_avgmax_pool2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "self", ".", "original_pool", ",", "stride", "=", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "adaptive_avgmax_pool2d", "(", "x", ",", "1", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.test_time_pool.apply_test_time_pool": [[36, 48], ["logging.info", "test_time_pool.TestTimePoolHead", "hasattr", "str", "str"], "function", ["None"], ["", "", "def", "apply_test_time_pool", "(", "model", ",", "config", ",", "args", ")", ":", "\n", "    ", "test_time_pool", "=", "False", "\n", "if", "not", "hasattr", "(", "model", ",", "'default_cfg'", ")", "or", "not", "model", ".", "default_cfg", ":", "\n", "        ", "return", "model", ",", "False", "\n", "", "if", "not", "args", ".", "no_test_pool", "and", "config", "[", "'input_size'", "]", "[", "-", "1", "]", ">", "model", ".", "default_cfg", "[", "'input_size'", "]", "[", "-", "1", "]", "and", "config", "[", "'input_size'", "]", "[", "-", "2", "]", ">", "model", ".", "default_cfg", "[", "'input_size'", "]", "[", "-", "2", "]", ":", "\n", "        ", "logging", ".", "info", "(", "'Target input size %s > pretrained default %s, using test time pooling'", "%", "\n", "(", "str", "(", "config", "[", "'input_size'", "]", "[", "-", "2", ":", "]", ")", ",", "str", "(", "model", ".", "default_cfg", "[", "'input_size'", "]", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "model", "=", "TestTimePoolHead", "(", "model", ",", "original_pool", "=", "model", ".", "default_cfg", "[", "'pool_size'", "]", ")", "\n", "test_time_pool", "=", "True", "\n", "", "return", "model", ",", "test_time_pool", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv2d_same.Conv2dSame.__init__": [[24, 28], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2dSame", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "0", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv2d_same.Conv2dSame.forward": [[29, 31], ["conv2d_same.conv2d_same"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv2d_same.conv2d_same"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "conv2d_same", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv2d_same.conv2d_same": [[13, 18], ["padding.pad_same", "torch.conv2d"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.pad_same"], ["def", "conv2d_same", "(", "\n", "x", ",", "weight", ":", "torch", ".", "Tensor", ",", "bias", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "stride", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "0", ",", "0", ")", ",", "dilation", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "groups", ":", "int", "=", "1", ")", ":", "\n", "    ", "x", "=", "pad_same", "(", "x", ",", "weight", ".", "shape", "[", "-", "2", ":", "]", ",", "stride", ",", "dilation", ")", "\n", "return", "F", ".", "conv2d", "(", "x", ",", "weight", ",", "bias", ",", "stride", ",", "(", "0", ",", "0", ")", ",", "dilation", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv2d_same.create_conv2d_pad": [[33, 41], ["kwargs.pop", "kwargs.setdefault", "padding.get_padding_value", "conv2d_same.Conv2dSame", "torch.Conv2d"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.get_padding_value"], ["", "", "def", "create_conv2d_pad", "(", "in_chs", ",", "out_chs", ",", "kernel_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "padding", "=", "kwargs", ".", "pop", "(", "'padding'", ",", "''", ")", "\n", "kwargs", ".", "setdefault", "(", "'bias'", ",", "False", ")", "\n", "padding", ",", "is_dynamic", "=", "get_padding_value", "(", "padding", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "if", "is_dynamic", ":", "\n", "        ", "return", "Conv2dSame", "(", "in_chs", ",", "out_chs", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Conv2d", "(", "in_chs", ",", "out_chs", ",", "kernel_size", ",", "padding", "=", "padding", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_conv2d.create_conv2d": [[11, 31], ["isinstance", "mixed_conv2d.MixedConv2d", "kwargs.pop", "kwargs.pop", "cond_conv2d.CondConv2d", "conv2d_same.create_conv2d_pad"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv2d_same.create_conv2d_pad"], ["def", "create_conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Select a 2d convolution implementation based on arguments\n    Creates and returns one of torch.nn.Conv2d, Conv2dSame, MixedConv2d, or CondConv2d.\n\n    Used extensively by EfficientNet, MobileNetv3 and related networks.\n    \"\"\"", "\n", "if", "isinstance", "(", "kernel_size", ",", "list", ")", ":", "\n", "        ", "assert", "'num_experts'", "not", "in", "kwargs", "# MixNet + CondConv combo not supported currently", "\n", "assert", "'groups'", "not", "in", "kwargs", "# MixedConv groups are defined by kernel list", "\n", "# We're going to use only lists for defining the MixedConv2d kernel groups,", "\n", "# ints, tuples, other iterables will continue to pass to normal conv and specify h, w.", "\n", "m", "=", "MixedConv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "depthwise", "=", "kwargs", ".", "pop", "(", "'depthwise'", ",", "False", ")", "\n", "groups", "=", "out_channels", "if", "depthwise", "else", "kwargs", ".", "pop", "(", "'groups'", ",", "1", ")", "\n", "if", "'num_experts'", "in", "kwargs", "and", "kwargs", "[", "'num_experts'", "]", ">", "0", ":", "\n", "            ", "m", "=", "CondConv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "groups", "=", "groups", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "create_conv2d_pad", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "groups", "=", "groups", ",", "**", "kwargs", ")", "\n", "", "", "return", "m", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.blur_pool.BlurPool2d.__init__": [[34, 44], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "padding.get_padding", "numpy.poly1d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.get_padding"], ["def", "__init__", "(", "self", ",", "channels", ",", "filt_size", "=", "3", ",", "stride", "=", "2", ")", "->", "None", ":", "\n", "        ", "super", "(", "BlurPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "filt_size", ">", "1", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "filt_size", "=", "filt_size", "\n", "self", ".", "stride", "=", "stride", "\n", "pad_size", "=", "[", "get_padding", "(", "filt_size", ",", "stride", ",", "dilation", "=", "1", ")", "]", "*", "4", "\n", "self", ".", "padding", "=", "nn", ".", "ReflectionPad2d", "(", "pad_size", ")", "\n", "self", ".", "_coeffs", "=", "torch", ".", "tensor", "(", "(", "np", ".", "poly1d", "(", "(", "0.5", ",", "0.5", ")", ")", "**", "(", "self", ".", "filt_size", "-", "1", ")", ")", ".", "coeffs", ")", "# for torchscript compat", "\n", "self", ".", "filt", "=", "{", "}", "# lazy init by device for DataParallel compat", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.blur_pool.BlurPool2d._create_filter": [[45, 48], ["blur_filter[].repeat"], "methods", ["None"], ["", "def", "_create_filter", "(", "self", ",", "like", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "blur_filter", "=", "(", "self", ".", "_coeffs", "[", ":", ",", "None", "]", "*", "self", ".", "_coeffs", "[", "None", ",", ":", "]", ")", ".", "to", "(", "dtype", "=", "like", ".", "dtype", ",", "device", "=", "like", ".", "device", ")", "\n", "return", "blur_filter", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "self", ".", "channels", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.blur_pool.BlurPool2d._apply": [[49, 53], ["super()._apply"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.blur_pool.BlurPool2d._apply"], ["", "def", "_apply", "(", "self", ",", "fn", ")", ":", "\n", "# override nn.Module _apply, reset filter cache if used", "\n", "        ", "self", ".", "filt", "=", "{", "}", "\n", "super", "(", "BlurPool2d", ",", "self", ")", ".", "_apply", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.blur_pool.BlurPool2d.forward": [[54, 59], ["blur_pool.BlurPool2d.filt.get", "torch.conv2d", "torch.conv2d", "torch.conv2d", "str", "blur_pool.BlurPool2d._create_filter", "blur_pool.BlurPool2d.padding"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.anti_aliasing.DownsampleJIT._create_filter"], ["", "def", "forward", "(", "self", ",", "input_tensor", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "C", "=", "input_tensor", ".", "shape", "[", "1", "]", "\n", "blur_filt", "=", "self", ".", "filt", ".", "get", "(", "str", "(", "input_tensor", ".", "device", ")", ",", "self", ".", "_create_filter", "(", "input_tensor", ")", ")", "\n", "return", "F", ".", "conv2d", "(", "\n", "self", ".", "padding", "(", "input_tensor", ")", ",", "blur_filt", ",", "stride", "=", "self", ".", "stride", ",", "groups", "=", "C", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_no_jit.__init__": [[30, 34], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_no_jit.__enter__": [[35, 37], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_no_jit.__exit__": [[38, 42], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_exportable.__init__": [[49, 53], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_exportable.__enter__": [[54, 56], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_exportable.__exit__": [[57, 61], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_scriptable.__init__": [[68, 72], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_scriptable.__enter__": [[73, 75], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_scriptable.__exit__": [[76, 80], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_layer_config.__init__": [[86, 105], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_layer_config.__enter__": [[106, 108], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.set_layer_config.__exit__": [[109, 116], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_no_jit": [[25, 27], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_exportable": [[44, 46], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_scriptable": [[63, 65], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.ChannelAttn.__init__": [[19, 26], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.Conv2d", "act_layer", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "reduction", "=", "16", ",", "act_layer", "=", "nn", ".", "ReLU", ")", ":", "\n", "        ", "super", "(", "ChannelAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "act", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.ChannelAttn.forward": [[27, 34], ["cbam.ChannelAttn.avg_pool", "cbam.ChannelAttn.max_pool", "cbam.ChannelAttn.fc2", "cbam.ChannelAttn.fc2", "cbam.ChannelAttn.act", "cbam.ChannelAttn.act", "x_attn.sigmoid", "cbam.ChannelAttn.fc1", "cbam.ChannelAttn.fc1"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_avg", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x_max", "=", "self", ".", "max_pool", "(", "x", ")", "\n", "x_avg", "=", "self", ".", "fc2", "(", "self", ".", "act", "(", "self", ".", "fc1", "(", "x_avg", ")", ")", ")", "\n", "x_max", "=", "self", ".", "fc2", "(", "self", ".", "act", "(", "self", ".", "fc1", "(", "x_max", ")", ")", ")", "\n", "x_attn", "=", "x_avg", "+", "x_max", "\n", "return", "x", "*", "x_attn", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.LightChannelAttn.__init__": [[39, 41], ["cbam.ChannelAttn.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "LightChannelAttn", ",", "self", ")", ".", "__init__", "(", "channels", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.LightChannelAttn.forward": [[42, 46], ["cbam.LightChannelAttn.fc2", "cbam.LightChannelAttn.act", "cbam.LightChannelAttn.sigmoid", "cbam.LightChannelAttn.avg_pool", "cbam.LightChannelAttn.max_pool", "cbam.LightChannelAttn.fc1"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_pool", "=", "0.5", "*", "self", ".", "avg_pool", "(", "x", ")", "+", "0.5", "*", "self", ".", "max_pool", "(", "x", ")", "\n", "x_attn", "=", "self", ".", "fc2", "(", "self", ".", "act", "(", "self", ".", "fc1", "(", "x_pool", ")", ")", ")", "\n", "return", "x", "*", "x_attn", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.SpatialAttn.__init__": [[51, 54], ["torch.nn.Module.__init__", "conv_bn_act.ConvBnAct"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "SpatialAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ConvBnAct", "(", "2", ",", "1", ",", "kernel_size", ",", "act_layer", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.SpatialAttn.forward": [[55, 61], ["torch.mean", "torch.cat", "cbam.SpatialAttn.conv", "torch.max", "cbam.SpatialAttn.sigmoid"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_avg", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x_max", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x_attn", "=", "torch", ".", "cat", "(", "[", "x_avg", ",", "x_max", "]", ",", "dim", "=", "1", ")", "\n", "x_attn", "=", "self", ".", "conv", "(", "x_attn", ")", "\n", "return", "x", "*", "x_attn", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.LightSpatialAttn.__init__": [[66, 69], ["torch.nn.Module.__init__", "conv_bn_act.ConvBnAct"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "LightSpatialAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ConvBnAct", "(", "1", ",", "1", ",", "kernel_size", ",", "act_layer", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.LightSpatialAttn.forward": [[70, 76], ["torch.mean", "cbam.LightSpatialAttn.conv", "torch.max", "cbam.LightSpatialAttn.sigmoid"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_avg", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x_max", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x_attn", "=", "0.5", "*", "x_avg", "+", "0.5", "*", "x_max", "\n", "x_attn", "=", "self", ".", "conv", "(", "x_attn", ")", "\n", "return", "x", "*", "x_attn", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.CbamModule.__init__": [[79, 83], ["torch.nn.Module.__init__", "cbam.ChannelAttn", "cbam.SpatialAttn"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "spatial_kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "CbamModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channel", "=", "ChannelAttn", "(", "channels", ")", "\n", "self", ".", "spatial", "=", "SpatialAttn", "(", "spatial_kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.CbamModule.forward": [[84, 88], ["cbam.CbamModule.channel", "cbam.CbamModule.spatial"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "channel", "(", "x", ")", "\n", "x", "=", "self", ".", "spatial", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.LightCbamModule.__init__": [[91, 95], ["torch.nn.Module.__init__", "cbam.LightChannelAttn", "cbam.LightSpatialAttn"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "spatial_kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "LightCbamModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channel", "=", "LightChannelAttn", "(", "channels", ")", "\n", "self", ".", "spatial", "=", "LightSpatialAttn", "(", "spatial_kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cbam.LightCbamModule.forward": [[96, 100], ["cbam.LightCbamModule.channel", "cbam.LightCbamModule.spatial"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "channel", "(", "x", ")", "\n", "x", "=", "self", ".", "spatial", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.eca.EcaModule.__init__": [[52, 62], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv1d", "int", "max", "abs", "math.log"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "channels", "=", "None", ",", "kernel_size", "=", "3", ",", "gamma", "=", "2", ",", "beta", "=", "1", ")", ":", "\n", "        ", "super", "(", "EcaModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "kernel_size", "%", "2", "==", "1", "\n", "\n", "if", "channels", "is", "not", "None", ":", "\n", "            ", "t", "=", "int", "(", "abs", "(", "math", ".", "log", "(", "channels", ",", "2", ")", "+", "beta", ")", "/", "gamma", ")", "\n", "kernel_size", "=", "max", "(", "t", "if", "t", "%", "2", "else", "t", "+", "1", ",", "3", ")", "\n", "\n", "", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "1", ",", "1", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.eca.EcaModule.forward": [[63, 73], ["eca.EcaModule.avg_pool", "y.view().sigmoid.view().sigmoid.view", "eca.EcaModule.conv", "y.view().sigmoid.view().sigmoid.view().sigmoid", "y.view().sigmoid.view().sigmoid.expand_as", "y.view().sigmoid.view().sigmoid.view"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Feature descriptor on the global spatial information", "\n", "        ", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "# Reshape for convolution", "\n", "y", "=", "y", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ")", "\n", "# Two different branches of ECA module", "\n", "y", "=", "self", ".", "conv", "(", "y", ")", "\n", "# Multi-scale information fusion", "\n", "y", "=", "y", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ",", "1", ")", ".", "sigmoid", "(", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.eca.CecaModule.__init__": [[95, 110], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv1d", "int", "max", "abs", "math.log"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "channels", "=", "None", ",", "kernel_size", "=", "3", ",", "gamma", "=", "2", ",", "beta", "=", "1", ")", ":", "\n", "        ", "super", "(", "CecaModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "kernel_size", "%", "2", "==", "1", "\n", "\n", "if", "channels", "is", "not", "None", ":", "\n", "            ", "t", "=", "int", "(", "abs", "(", "math", ".", "log", "(", "channels", ",", "2", ")", "+", "beta", ")", "/", "gamma", ")", "\n", "kernel_size", "=", "max", "(", "t", "if", "t", "%", "2", "else", "t", "+", "1", ",", "3", ")", "\n", "\n", "", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "#pytorch circular padding mode is buggy as of pytorch 1.4", "\n", "#see https://github.com/pytorch/pytorch/pull/17240", "\n", "\n", "#implement manual circular padding", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "1", ",", "1", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.eca.CecaModule.forward": [[111, 125], ["eca.CecaModule.avg_pool", "torch.pad", "eca.CecaModule.conv", "y.view().sigmoid.view().sigmoid.view().sigmoid", "y.view().sigmoid.view().sigmoid.view", "y.view().sigmoid.view().sigmoid.expand_as", "y.view().sigmoid.view().sigmoid.view"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Feature descriptor on the global spatial information", "\n", "        ", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "# Manually implement circular padding, F.pad does not seemed to be bugged", "\n", "y", "=", "F", ".", "pad", "(", "y", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ")", ",", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", ",", "mode", "=", "'circular'", ")", "\n", "\n", "# Two different branches of ECA module", "\n", "y", "=", "self", ".", "conv", "(", "y", ")", "\n", "\n", "# Multi-scale information fusion", "\n", "y", "=", "y", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ",", "1", ")", ".", "sigmoid", "(", ")", "\n", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.median_pool.MedianPool2d.__init__": [[17, 23], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._quadruple", "torch.nn.modules.utils._quadruple", "torch.nn.modules.utils._quadruple"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "same", "=", "False", ")", ":", "\n", "        ", "super", "(", "MedianPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_quadruple", "(", "padding", ")", "# convert to l, r, t, b", "\n", "self", ".", "same", "=", "same", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.median_pool.MedianPool2d._padding": [[24, 43], ["x.size", "max", "max", "max", "max"], "methods", ["None"], ["", "def", "_padding", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "same", ":", "\n", "            ", "ih", ",", "iw", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "if", "ih", "%", "self", ".", "stride", "[", "0", "]", "==", "0", ":", "\n", "                ", "ph", "=", "max", "(", "self", ".", "k", "[", "0", "]", "-", "self", ".", "stride", "[", "0", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "ph", "=", "max", "(", "self", ".", "k", "[", "0", "]", "-", "(", "ih", "%", "self", ".", "stride", "[", "0", "]", ")", ",", "0", ")", "\n", "", "if", "iw", "%", "self", ".", "stride", "[", "1", "]", "==", "0", ":", "\n", "                ", "pw", "=", "max", "(", "self", ".", "k", "[", "1", "]", "-", "self", ".", "stride", "[", "1", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "pw", "=", "max", "(", "self", ".", "k", "[", "1", "]", "-", "(", "iw", "%", "self", ".", "stride", "[", "1", "]", ")", ",", "0", ")", "\n", "", "pl", "=", "pw", "//", "2", "\n", "pr", "=", "pw", "-", "pl", "\n", "pt", "=", "ph", "//", "2", "\n", "pb", "=", "ph", "-", "pt", "\n", "padding", "=", "(", "pl", ",", "pr", ",", "pt", ",", "pb", ")", "\n", "", "else", ":", "\n", "            ", "padding", "=", "self", ".", "padding", "\n", "", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.median_pool.MedianPool2d.forward": [[44, 49], ["torch.pad", "torch.pad", "torch.pad", "x.unfold().unfold.unfold().unfold.unfold().unfold", "median_pool.MedianPool2d._padding", "x.unfold().unfold.unfold().unfold.contiguous().view().median", "x.unfold().unfold.unfold().unfold.unfold", "x.unfold().unfold.unfold().unfold.contiguous().view", "x.unfold().unfold.unfold().unfold.contiguous", "x.unfold().unfold.unfold().unfold.size"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.median_pool.MedianPool2d._padding"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "pad", "(", "x", ",", "self", ".", "_padding", "(", "x", ")", ",", "mode", "=", "'reflect'", ")", "\n", "x", "=", "x", ".", "unfold", "(", "2", ",", "self", ".", "k", "[", "0", "]", ",", "self", ".", "stride", "[", "0", "]", ")", ".", "unfold", "(", "3", ",", "self", ".", "k", "[", "1", "]", ",", "self", ".", "stride", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", ")", "[", ":", "4", "]", "+", "(", "-", "1", ",", ")", ")", ".", "median", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.split_batchnorm.SplitBatchNorm2d.__init__": [[20, 27], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "range"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ",", "num_splits", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", ")", "\n", "assert", "num_splits", ">", "1", ",", "'Should have at least one aux BN layer (num_splits at least 2)'", "\n", "self", ".", "num_splits", "=", "num_splits", "\n", "self", ".", "aux_bn", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", ")", "for", "_", "in", "range", "(", "num_splits", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.split_batchnorm.SplitBatchNorm2d.forward": [[28, 39], ["input.split", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "super().forward", "super().forward", "x.append", "a"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "# aux BN only relevant while training", "\n", "            ", "split_size", "=", "input", ".", "shape", "[", "0", "]", "//", "self", ".", "num_splits", "\n", "assert", "input", ".", "shape", "[", "0", "]", "==", "split_size", "*", "self", ".", "num_splits", ",", "\"batch size must be evenly divisible by num_splits\"", "\n", "split_input", "=", "input", ".", "split", "(", "split_size", ")", "\n", "x", "=", "[", "super", "(", ")", ".", "forward", "(", "split_input", "[", "0", "]", ")", "]", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "self", ".", "aux_bn", ")", ":", "\n", "                ", "x", ".", "append", "(", "a", "(", "split_input", "[", "i", "+", "1", "]", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.split_batchnorm.convert_splitbn_model": [[41, 76], ["isinstance", "isinstance", "module.named_children", "split_batchnorm.SplitBatchNorm2d", "SplitBatchNorm2d.add_module", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.running_mean.clone", "module.running_var.clone", "module.num_batches_tracked.clone", "split_batchnorm.convert_splitbn_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.split_batchnorm.convert_splitbn_model"], ["", "", "", "def", "convert_splitbn_model", "(", "module", ",", "num_splits", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Recursively traverse module and its children to replace all instances of\n    ``torch.nn.modules.batchnorm._BatchNorm`` with `SplitBatchnorm2d`.\n    Args:\n        module (torch.nn.Module): input module\n        num_splits: number of separate batchnorm layers to split input across\n    Example::\n        >>> # model is an instance of torch.nn.Module\n        >>> model = timm.models.convert_splitbn_model(model, num_splits=2)\n    \"\"\"", "\n", "mod", "=", "module", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "instancenorm", ".", "_InstanceNorm", ")", ":", "\n", "        ", "return", "module", "\n", "", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "mod", "=", "SplitBatchNorm2d", "(", "\n", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ",", "\n", "module", ".", "track_running_stats", ",", "num_splits", "=", "num_splits", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "mod", ".", "num_batches_tracked", "=", "module", ".", "num_batches_tracked", "\n", "if", "module", ".", "affine", ":", "\n", "            ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "for", "aux", "in", "mod", ".", "aux_bn", ":", "\n", "            ", "aux", ".", "running_mean", "=", "module", ".", "running_mean", ".", "clone", "(", ")", "\n", "aux", ".", "running_var", "=", "module", ".", "running_var", ".", "clone", "(", ")", "\n", "aux", ".", "num_batches_tracked", "=", "module", ".", "num_batches_tracked", ".", "clone", "(", ")", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "aux", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "aux", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_splitbn_model", "(", "child", ",", "num_splits", "=", "num_splits", ")", ")", "\n", "", "del", "module", "\n", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv_bn_act.ConvBnAct.__init__": [[12, 25], ["torch.nn.Module.__init__", "create_conv2d.create_conv2d.create_conv2d", "create_norm_act.convert_norm_act_type", "norm_act_layer", "aa_layer"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_conv2d.create_conv2d", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_norm_act.convert_norm_act_type"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "''", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "norm_kwargs", "=", "None", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "apply_act", "=", "True", ",", "\n", "drop_block", "=", "None", ",", "aa_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ConvBnAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "use_aa", "=", "aa_layer", "is", "not", "None", "\n", "self", ".", "conv", "=", "create_conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", "if", "use_aa", "else", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n", "# NOTE for backwards compatibility with models that use separate norm and act layer definitions", "\n", "norm_act_layer", ",", "norm_act_args", "=", "convert_norm_act_type", "(", "norm_layer", ",", "act_layer", ",", "norm_kwargs", ")", "\n", "self", ".", "bn", "=", "norm_act_layer", "(", "out_channels", ",", "apply_act", "=", "apply_act", ",", "drop_block", "=", "drop_block", ",", "**", "norm_act_args", ")", "\n", "self", ".", "aa", "=", "aa_layer", "(", "channels", "=", "out_channels", ")", "if", "stride", "==", "2", "and", "use_aa", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv_bn_act.ConvBnAct.forward": [[26, 32], ["conv_bn_act.ConvBnAct.conv", "conv_bn_act.ConvBnAct.bn", "conv_bn_act.ConvBnAct.aa"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "if", "self", ".", "aa", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "aa", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.mixed_conv2d.MixedConv2d.__init__": [[26, 46], ["torch.nn.ModuleDict.__init__", "len", "mixed_conv2d._split_channels", "mixed_conv2d._split_channels", "sum", "sum", "enumerate", "isinstance", "zip", "mixed_conv2d.MixedConv2d.add_module", "str", "conv2d_same.create_conv2d_pad"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.mixed_conv2d._split_channels", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.mixed_conv2d._split_channels", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv2d_same.create_conv2d_pad"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "''", ",", "dilation", "=", "1", ",", "depthwise", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MixedConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "kernel_size", "=", "kernel_size", "if", "isinstance", "(", "kernel_size", ",", "list", ")", "else", "[", "kernel_size", "]", "\n", "num_groups", "=", "len", "(", "kernel_size", ")", "\n", "in_splits", "=", "_split_channels", "(", "in_channels", ",", "num_groups", ")", "\n", "out_splits", "=", "_split_channels", "(", "out_channels", ",", "num_groups", ")", "\n", "self", ".", "in_channels", "=", "sum", "(", "in_splits", ")", "\n", "self", ".", "out_channels", "=", "sum", "(", "out_splits", ")", "\n", "for", "idx", ",", "(", "k", ",", "in_ch", ",", "out_ch", ")", "in", "enumerate", "(", "zip", "(", "kernel_size", ",", "in_splits", ",", "out_splits", ")", ")", ":", "\n", "            ", "conv_groups", "=", "out_ch", "if", "depthwise", "else", "1", "\n", "# use add_module to keep key space clean", "\n", "self", ".", "add_module", "(", "\n", "str", "(", "idx", ")", ",", "\n", "create_conv2d_pad", "(", "\n", "in_ch", ",", "out_ch", ",", "k", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "conv_groups", ",", "**", "kwargs", ")", "\n", ")", "\n", "", "self", ".", "splits", "=", "in_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.mixed_conv2d.MixedConv2d.forward": [[47, 52], ["torch.split", "torch.cat", "c", "enumerate", "mixed_conv2d.MixedConv2d.values"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "splits", ",", "1", ")", "\n", "x_out", "=", "[", "c", "(", "x_split", "[", "i", "]", ")", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "values", "(", ")", ")", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x_out", ",", "1", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.mixed_conv2d._split_channels": [[14, 18], ["sum", "range"], "function", ["None"], ["def", "_split_channels", "(", "num_chan", ",", "num_groups", ")", ":", "\n", "    ", "split", "=", "[", "num_chan", "//", "num_groups", "for", "_", "in", "range", "(", "num_groups", ")", "]", "\n", "split", "[", "0", "]", "+=", "num_chan", "-", "sum", "(", "split", ")", "\n", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_act.get_act_fn": [[75, 91], ["config.is_no_jit", "config.is_no_jit", "config.is_exportable", "config.is_scriptable"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_no_jit", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_no_jit", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_exportable", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_scriptable"], ["def", "get_act_fn", "(", "name", "=", "'relu'", ")", ":", "\n", "    ", "\"\"\" Activation Function Factory\n    Fetching activation fns by name with this function allows export or torch script friendly\n    functions to be returned dynamically based on current config.\n    \"\"\"", "\n", "if", "not", "name", ":", "\n", "        ", "return", "None", "\n", "", "if", "not", "(", "is_no_jit", "(", ")", "or", "is_exportable", "(", ")", "or", "is_scriptable", "(", ")", ")", ":", "\n", "# If not exporting or scripting the model, first look for a memory-efficient version with", "\n", "# custom autograd, then fallback", "\n", "        ", "if", "name", "in", "_ACT_FN_ME", ":", "\n", "            ", "return", "_ACT_FN_ME", "[", "name", "]", "\n", "", "", "if", "not", "is_no_jit", "(", ")", ":", "\n", "        ", "if", "name", "in", "_ACT_FN_JIT", ":", "\n", "            ", "return", "_ACT_FN_JIT", "[", "name", "]", "\n", "", "", "return", "_ACT_FN_DEFAULT", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_act.get_act_layer": [[93, 107], ["config.is_no_jit", "config.is_no_jit", "config.is_exportable", "config.is_scriptable"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_no_jit", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_no_jit", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_exportable", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.config.is_scriptable"], ["", "def", "get_act_layer", "(", "name", "=", "'relu'", ")", ":", "\n", "    ", "\"\"\" Activation Layer Factory\n    Fetching activation layers by name with this function allows export or torch script friendly\n    functions to be returned dynamically based on current config.\n    \"\"\"", "\n", "if", "not", "name", ":", "\n", "        ", "return", "None", "\n", "", "if", "not", "(", "is_no_jit", "(", ")", "or", "is_exportable", "(", ")", "or", "is_scriptable", "(", ")", ")", ":", "\n", "        ", "if", "name", "in", "_ACT_LAYER_ME", ":", "\n", "            ", "return", "_ACT_LAYER_ME", "[", "name", "]", "\n", "", "", "if", "not", "is_no_jit", "(", ")", ":", "\n", "        ", "if", "name", "in", "_ACT_LAYER_JIT", ":", "\n", "            ", "return", "_ACT_LAYER_JIT", "[", "name", "]", "\n", "", "", "return", "_ACT_LAYER_DEFAULT", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_act.create_act_layer": [[109, 115], ["create_act.get_act_layer", "get_act_layer."], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_act.get_act_layer"], ["", "def", "create_act_layer", "(", "name", ",", "inplace", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "act_layer", "=", "get_act_layer", "(", "name", ")", "\n", "if", "act_layer", "is", "not", "None", ":", "\n", "        ", "return", "act_layer", "(", "inplace", "=", "inplace", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.anti_aliasing.AntiAliasDownsampleLayer.__init__": [[8, 14], ["torch.Module.__init__", "anti_aliasing.Downsample", "anti_aliasing.DownsampleJIT"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ":", "int", "=", "0", ",", "filt_size", ":", "int", "=", "3", ",", "stride", ":", "int", "=", "2", ",", "no_jit", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "AntiAliasDownsampleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "no_jit", ":", "\n", "            ", "self", ".", "op", "=", "Downsample", "(", "channels", ",", "filt_size", ",", "stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "op", "=", "DownsampleJIT", "(", "channels", ",", "filt_size", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.anti_aliasing.AntiAliasDownsampleLayer.forward": [[17, 19], ["anti_aliasing.AntiAliasDownsampleLayer.op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.anti_aliasing.DownsampleJIT.__init__": [[23, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "channels", ":", "int", "=", "0", ",", "filt_size", ":", "int", "=", "3", ",", "stride", ":", "int", "=", "2", ")", ":", "\n", "        ", "self", ".", "channels", "=", "channels", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "filt_size", "=", "filt_size", "\n", "assert", "self", ".", "filt_size", "==", "3", "\n", "assert", "stride", "==", "2", "\n", "self", ".", "filt", "=", "{", "}", "# lazy init by device for DataParallel compat", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.anti_aliasing.DownsampleJIT._create_filter": [[31, 36], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "filt[].repeat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "_create_filter", "(", "self", ",", "like", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "filt", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "2.", ",", "1.", "]", ",", "dtype", "=", "like", ".", "dtype", ",", "device", "=", "like", ".", "device", ")", "\n", "filt", "=", "filt", "[", ":", ",", "None", "]", "*", "filt", "[", "None", ",", ":", "]", "\n", "filt", "=", "filt", "/", "torch", ".", "sum", "(", "filt", ")", "\n", "return", "filt", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "(", "self", ".", "channels", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.anti_aliasing.DownsampleJIT.__call__": [[37, 41], ["torch.pad", "torch.pad", "torch.pad", "torch.pad", "anti_aliasing.DownsampleJIT.filt.get", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "str", "anti_aliasing.DownsampleJIT._create_filter"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.anti_aliasing.DownsampleJIT._create_filter"], ["", "def", "__call__", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "input_pad", "=", "F", ".", "pad", "(", "input", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'reflect'", ")", "\n", "filt", "=", "self", ".", "filt", ".", "get", "(", "str", "(", "input", ".", "device", ")", ",", "self", ".", "_create_filter", "(", "input", ")", ")", "\n", "return", "F", ".", "conv2d", "(", "input_pad", ",", "filt", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "groups", "=", "input", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.anti_aliasing.Downsample.__init__": [[44, 57], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "anti_aliasing.Downsample.register_buffer", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "filt[].repeat"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", "=", "None", ",", "filt_size", "=", "3", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Downsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "filt_size", "=", "filt_size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "assert", "self", ".", "filt_size", "==", "3", "\n", "filt", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "2.", ",", "1.", "]", ")", "\n", "filt", "=", "filt", "[", ":", ",", "None", "]", "*", "filt", "[", "None", ",", ":", "]", "\n", "filt", "=", "filt", "/", "torch", ".", "sum", "(", "filt", ")", "\n", "\n", "# self.filt = filt[None, None, :, :].repeat((self.channels, 1, 1, 1))", "\n", "self", ".", "register_buffer", "(", "'filt'", ",", "filt", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "(", "self", ".", "channels", ",", "1", ",", "1", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.anti_aliasing.Downsample.forward": [[58, 61], ["torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input_pad", "=", "F", ".", "pad", "(", "input", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'reflect'", ")", "\n", "return", "F", ".", "conv2d", "(", "input_pad", ",", "self", ".", "filt", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "0", ",", "groups", "=", "input", ".", "shape", "[", "1", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.DropBlock2d.__init__": [[112, 128], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drop_prob", "=", "0.1", ",", "\n", "block_size", "=", "7", ",", "\n", "gamma_scale", "=", "1.0", ",", "\n", "with_noise", "=", "False", ",", "\n", "inplace", "=", "False", ",", "\n", "batchwise", "=", "False", ",", "\n", "fast", "=", "True", ")", ":", "\n", "        ", "super", "(", "DropBlock2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "gamma_scale", "=", "gamma_scale", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "with_noise", "=", "with_noise", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "batchwise", "=", "batchwise", "\n", "self", ".", "fast", "=", "fast", "# FIXME finish comparisons of fast vs not", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.DropBlock2d.forward": [[129, 138], ["drop.drop_block_fast_2d", "drop.drop_block_2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.drop_block_fast_2d", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.drop_block_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "not", "self", ".", "drop_prob", ":", "\n", "            ", "return", "x", "\n", "", "if", "self", ".", "fast", ":", "\n", "            ", "return", "drop_block_fast_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "", "else", ":", "\n", "            ", "return", "drop_block_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.DropPath.__init__": [[162, 165], ["torch.ModuleDict.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.DropPath.forward": [[166, 168], ["drop.drop_path"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.drop_block_2d": [[22, 68], ["min", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.reshape().to", "torch.reshape().to", "torch.reshape().to", "min", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.max_pool2d", "torch.reshape", "torch.reshape", "torch.reshape", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.mul_", "block_mask.numel", "block_mask.to().sum().add", "block_mask.to().sum", "block_mask.to"], "function", ["None"], ["def", "drop_block_2d", "(", "\n", "x", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "gamma_scale", ":", "float", "=", "1.0", ",", "\n", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n\n    DropBlock with an experimental gaussian noise option. This layer has been tested on a few training\n    runs with success, but needs further validation and possibly optimization for lower runtime impact.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "# seed_drop_rate, the gamma parameter", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "# Forces the block to be inside the feature map.", "\n", "w_i", ",", "h_i", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "W", ")", ".", "to", "(", "x", ".", "device", ")", ",", "torch", ".", "arange", "(", "H", ")", ".", "to", "(", "x", ".", "device", ")", ")", "\n", "valid_block", "=", "(", "(", "w_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "w_i", "<", "W", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "&", "(", "(", "h_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "h_i", "<", "H", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "\n", "valid_block", "=", "torch", ".", "reshape", "(", "valid_block", ",", "(", "1", ",", "1", ",", "H", ",", "W", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand_like", "(", "x", ")", "\n", "", "block_mask", "=", "(", "(", "2", "-", "gamma", "-", "valid_block", "+", "uniform_noise", ")", ">=", "1", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "block_mask", "=", "-", "F", ".", "max_pool2d", "(", "\n", "-", "block_mask", ",", "\n", "kernel_size", "=", "clipped_block_size", ",", "# block_size,", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "(", "1", "-", "block_mask", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "+", "normal_noise", "*", "(", "1", "-", "block_mask", ")", "\n", "", "", "else", ":", "\n", "        ", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.drop_block_fast_2d": [[70, 107], ["min", "torch.max_pool2d", "min", "F.max_pool2d.to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "x.mul_", "F.max_pool2d.numel", "F.max_pool2d.to().sum().add", "F.max_pool2d.to().sum", "F.max_pool2d.to"], "function", ["None"], ["", "def", "drop_block_fast_2d", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "\n", "gamma_scale", ":", "float", "=", "1.0", ",", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n\n    DropBlock with an experimental gaussian noise option. Simplied from above without concern for valid\n    block mask at edges.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "block_mask", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "<", "gamma", "\n", "", "else", ":", "\n", "# mask per batch element", "\n", "        ", "block_mask", "=", "torch", ".", "rand_like", "(", "x", ")", "<", "gamma", "\n", "", "block_mask", "=", "F", ".", "max_pool2d", "(", "\n", "block_mask", ".", "to", "(", "x", ".", "dtype", ")", ",", "kernel_size", "=", "clipped_block_size", ",", "stride", "=", "1", ",", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "1.", "-", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "block_mask", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "(", "1.", "-", "block_mask", ")", "+", "normal_noise", "*", "block_mask", "\n", "", "", "else", ":", "\n", "        ", "block_mask", "=", "1", "-", "block_mask", "\n", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.drop_path": [[140, 157], ["random_tensor.floor_", "torch.rand", "torch.rand", "torch.rand", "x.div", "x.size"], "function", ["None"], ["", "", "", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.SwishJitAutoFn.forward": [[34, 38], ["ctx.save_for_backward", "activations_me.swish_jit_fwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.swish_jit_fwd"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "x", ")", "\n", "return", "swish_jit_fwd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.SwishJitAutoFn.backward": [[39, 43], ["activations_me.swish_jit_bwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.swish_jit_bwd"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "return", "swish_jit_bwd", "(", "x", ",", "grad_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.SwishMe.__init__": [[50, 52], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "SwishMe", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.SwishMe.forward": [[53, 55], ["SwishJitAutoFn.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "SwishJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.MishJitAutoFn.forward": [[73, 77], ["ctx.save_for_backward", "activations_me.mish_jit_fwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.mish_jit_fwd"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "x", ")", "\n", "return", "mish_jit_fwd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.MishJitAutoFn.backward": [[78, 82], ["activations_me.mish_jit_bwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.mish_jit_bwd"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "return", "mish_jit_bwd", "(", "x", ",", "grad_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.MishMe.__init__": [[89, 91], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "MishMe", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.MishMe.forward": [[92, 94], ["MishJitAutoFn.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "MishJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardSigmoidJitAutoFn.forward": [[108, 112], ["ctx.save_for_backward", "activations_me.hard_sigmoid_jit_fwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_sigmoid_jit_fwd"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "x", ")", "\n", "return", "hard_sigmoid_jit_fwd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardSigmoidJitAutoFn.backward": [[113, 117], ["activations_me.hard_sigmoid_jit_bwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_sigmoid_jit_bwd"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "return", "hard_sigmoid_jit_bwd", "(", "x", ",", "grad_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardSigmoidMe.__init__": [[124, 126], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "HardSigmoidMe", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardSigmoidMe.forward": [[127, 129], ["HardSigmoidJitAutoFn.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "HardSigmoidJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardSwishJitAutoFn.forward": [[145, 149], ["ctx.save_for_backward", "activations_me.hard_swish_jit_fwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_swish_jit_fwd"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "x", ")", "\n", "return", "hard_swish_jit_fwd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardSwishJitAutoFn.backward": [[150, 154], ["activations_me.hard_swish_jit_bwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_swish_jit_bwd"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "return", "hard_swish_jit_bwd", "(", "x", ",", "grad_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardSwishMe.__init__": [[161, 163], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "HardSwishMe", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardSwishMe.forward": [[164, 166], ["HardSwishJitAutoFn.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "HardSwishJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardMishJitAutoFn.forward": [[185, 189], ["ctx.save_for_backward", "activations_me.hard_mish_jit_fwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_mish_jit_fwd"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "x", ")", "\n", "return", "hard_mish_jit_fwd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardMishJitAutoFn.backward": [[190, 194], ["activations_me.hard_mish_jit_bwd"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_mish_jit_bwd"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "return", "hard_mish_jit_bwd", "(", "x", ",", "grad_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardMishMe.__init__": [[201, 203], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "HardMishMe", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardMishMe.forward": [[204, 206], ["HardMishJitAutoFn.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "HardMishJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.swish_jit_fwd": [[17, 20], ["x.mul", "torch.sigmoid"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["@", "torch", ".", "jit", ".", "script", "\n", "def", "swish_jit_fwd", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "mul", "(", "torch", ".", "sigmoid", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.swish_jit_bwd": [[22, 26], ["torch.sigmoid"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "swish_jit_bwd", "(", "x", ",", "grad_output", ")", ":", "\n", "    ", "x_sigmoid", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "grad_output", "*", "(", "x_sigmoid", "*", "(", "1", "+", "x", "*", "(", "1", "-", "x_sigmoid", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.swish_me": [[45, 47], ["SwishJitAutoFn.apply"], "function", ["None"], ["", "", "def", "swish_me", "(", "x", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "SwishJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.mish_jit_fwd": [[57, 60], ["x.mul", "torch.tanh", "torch.nn.functional.softplus"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.tanh"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "mish_jit_fwd", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "mul", "(", "torch", ".", "tanh", "(", "F", ".", "softplus", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.mish_jit_bwd": [[62, 67], ["torch.sigmoid", "torch.nn.functional.softplus().tanh", "grad_output.mul", "torch.nn.functional.softplus"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.tanh"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "mish_jit_bwd", "(", "x", ",", "grad_output", ")", ":", "\n", "    ", "x_sigmoid", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "x_tanh_sp", "=", "F", ".", "softplus", "(", "x", ")", ".", "tanh", "(", ")", "\n", "return", "grad_output", ".", "mul", "(", "x_tanh_sp", "+", "x", "*", "x_sigmoid", "*", "(", "1", "-", "x_tanh_sp", "*", "x_tanh_sp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.mish_me": [[84, 86], ["MishJitAutoFn.apply"], "function", ["None"], ["", "", "def", "mish_me", "(", "x", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "MishJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_sigmoid_jit_fwd": [[96, 99], ["None"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hard_sigmoid_jit_fwd", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "(", "x", "+", "3", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "6", ")", ".", "div", "(", "6.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_sigmoid_jit_bwd": [[101, 105], ["torch.ones_like"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hard_sigmoid_jit_bwd", "(", "x", ",", "grad_output", ")", ":", "\n", "    ", "m", "=", "torch", ".", "ones_like", "(", "x", ")", "*", "(", "(", "x", ">=", "-", "3.", ")", "&", "(", "x", "<=", "3.", ")", ")", "/", "6.", "\n", "return", "grad_output", "*", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_sigmoid_me": [[119, 121], ["HardSigmoidJitAutoFn.apply"], "function", ["None"], ["", "", "def", "hard_sigmoid_me", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "HardSigmoidJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_swish_jit_fwd": [[131, 134], ["None"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hard_swish_jit_fwd", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "(", "x", "+", "3", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "6", ")", ".", "div", "(", "6.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_swish_jit_bwd": [[136, 141], ["torch.where", "torch.ones_like"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hard_swish_jit_bwd", "(", "x", ",", "grad_output", ")", ":", "\n", "    ", "m", "=", "torch", ".", "ones_like", "(", "x", ")", "*", "(", "x", ">=", "3.", ")", "\n", "m", "=", "torch", ".", "where", "(", "(", "x", ">=", "-", "3.", ")", "&", "(", "x", "<=", "3.", ")", ",", "x", "/", "3.", "+", ".5", ",", "m", ")", "\n", "return", "grad_output", "*", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_swish_me": [[156, 158], ["HardSwishJitAutoFn.apply"], "function", ["None"], ["", "", "def", "hard_swish_me", "(", "x", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "HardSwishJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_mish_jit_fwd": [[168, 171], ["None"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hard_mish_jit_fwd", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "x", "+", "2", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_mish_jit_bwd": [[173, 178], ["torch.where", "torch.ones_like"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hard_mish_jit_bwd", "(", "x", ",", "grad_output", ")", ":", "\n", "    ", "m", "=", "torch", ".", "ones_like", "(", "x", ")", "*", "(", "x", ">=", "-", "2.", ")", "\n", "m", "=", "torch", ".", "where", "(", "(", "x", ">=", "-", "2.", ")", "&", "(", "x", "<=", "0.", ")", ",", "x", "+", "1.", ",", "m", ")", "\n", "return", "grad_output", "*", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.hard_mish_me": [[196, 198], ["HardMishJitAutoFn.apply"], "function", ["None"], ["", "", "def", "hard_mish_me", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "HardMishJitAutoFn", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.pool2d_same.AvgPool2dSame.__init__": [[24, 28], ["helpers.tup_pair", "helpers.tup_pair", "torch.AvgPool2d.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", ":", "int", ",", "stride", "=", "None", ",", "padding", "=", "0", ",", "ceil_mode", "=", "False", ",", "count_include_pad", "=", "True", ")", ":", "\n", "        ", "kernel_size", "=", "tup_pair", "(", "kernel_size", ")", "\n", "stride", "=", "tup_pair", "(", "stride", ")", "\n", "super", "(", "AvgPool2dSame", ",", "self", ")", ".", "__init__", "(", "kernel_size", ",", "stride", ",", "(", "0", ",", "0", ")", ",", "ceil_mode", ",", "count_include_pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.pool2d_same.AvgPool2dSame.forward": [[29, 32], ["pool2d_same.avg_pool2d_same"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.pool2d_same.avg_pool2d_same"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "avg_pool2d_same", "(", "\n", "x", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "ceil_mode", ",", "self", ".", "count_include_pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.pool2d_same.MaxPool2dSame.__init__": [[44, 48], ["helpers.tup_pair", "helpers.tup_pair", "torch.MaxPool2d.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", ":", "int", ",", "stride", "=", "None", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "ceil_mode", "=", "False", ",", "count_include_pad", "=", "True", ")", ":", "\n", "        ", "kernel_size", "=", "tup_pair", "(", "kernel_size", ")", "\n", "stride", "=", "tup_pair", "(", "stride", ")", "\n", "super", "(", "MaxPool2dSame", ",", "self", ")", ".", "__init__", "(", "kernel_size", ",", "stride", ",", "(", "0", ",", "0", ")", ",", "dilation", ",", "ceil_mode", ",", "count_include_pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.pool2d_same.MaxPool2dSame.forward": [[49, 51], ["pool2d_same.max_pool2d_same"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.pool2d_same.max_pool2d_same"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "max_pool2d_same", "(", "x", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "ceil_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.pool2d_same.avg_pool2d_same": [[14, 19], ["padding.pad_same", "torch.avg_pool2d"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.pad_same"], ["def", "avg_pool2d_same", "(", "x", ",", "kernel_size", ":", "List", "[", "int", "]", ",", "stride", ":", "List", "[", "int", "]", ",", "padding", ":", "List", "[", "int", "]", "=", "(", "0", ",", "0", ")", ",", "\n", "ceil_mode", ":", "bool", "=", "False", ",", "count_include_pad", ":", "bool", "=", "True", ")", ":", "\n", "# FIXME how to deal with count_include_pad vs not for external padding?", "\n", "    ", "x", "=", "pad_same", "(", "x", ",", "kernel_size", ",", "stride", ")", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", ",", "stride", ",", "(", "0", ",", "0", ")", ",", "ceil_mode", ",", "count_include_pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.pool2d_same.max_pool2d_same": [[34, 39], ["padding.pad_same", "torch.max_pool2d", "float"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.pad_same"], ["", "", "def", "max_pool2d_same", "(", "\n", "x", ",", "kernel_size", ":", "List", "[", "int", "]", ",", "stride", ":", "List", "[", "int", "]", ",", "padding", ":", "List", "[", "int", "]", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", ":", "List", "[", "int", "]", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", ":", "bool", "=", "False", ")", ":", "\n", "    ", "x", "=", "pad_same", "(", "x", ",", "kernel_size", ",", "stride", ",", "value", "=", "-", "float", "(", "'inf'", ")", ")", "\n", "return", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", ",", "stride", ",", "(", "0", ",", "0", ")", ",", "dilation", ",", "ceil_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.pool2d_same.create_pool2d": [[53, 71], ["kwargs.pop", "padding.get_padding_value", "pool2d_same.AvgPool2dSame", "torch.AvgPool2d", "pool2d_same.MaxPool2dSame", "torch.MaxPool2d"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.get_padding_value"], ["", "", "def", "create_pool2d", "(", "pool_type", ",", "kernel_size", ",", "stride", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "stride", "=", "stride", "or", "kernel_size", "\n", "padding", "=", "kwargs", ".", "pop", "(", "'padding'", ",", "''", ")", "\n", "padding", ",", "is_dynamic", "=", "get_padding_value", "(", "padding", ",", "kernel_size", ",", "stride", "=", "stride", ",", "**", "kwargs", ")", "\n", "if", "is_dynamic", ":", "\n", "        ", "if", "pool_type", "==", "'avg'", ":", "\n", "            ", "return", "AvgPool2dSame", "(", "kernel_size", ",", "stride", "=", "stride", ",", "**", "kwargs", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "            ", "return", "MaxPool2dSame", "(", "kernel_size", ",", "stride", "=", "stride", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "f'Unsupported pool type {pool_type}'", "\n", "", "", "else", ":", "\n", "        ", "if", "pool_type", "==", "'avg'", ":", "\n", "            ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "**", "kwargs", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "            ", "return", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "f'Unsupported pool type {pool_type}'", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.se.SEModule.__init__": [[7, 18], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "act_layer", "torch.nn.Conv2d", "create_act.get_act_fn", "max"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_act.get_act_fn"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", "=", "16", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "min_channels", "=", "8", ",", "reduction_channels", "=", "None", ",", "\n", "gate_fn", "=", "'sigmoid'", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "reduction_channels", "=", "reduction_channels", "or", "max", "(", "channels", "//", "reduction", ",", "min_channels", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "\n", "channels", ",", "reduction_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "act", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "\n", "reduction_channels", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "gate_fn", "=", "get_act_fn", "(", "gate_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.se.SEModule.forward": [[19, 25], ["se.SEModule.avg_pool", "se.SEModule.fc1", "se.SEModule.act", "se.SEModule.fc2", "se.SEModule.gate_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_se", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x_se", "=", "self", ".", "fc1", "(", "x_se", ")", "\n", "x_se", "=", "self", ".", "act", "(", "x_se", ")", "\n", "x_se", "=", "self", ".", "fc2", "(", "x_se", ")", "\n", "return", "x", "*", "self", ".", "gate_fn", "(", "x_se", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.se.EffectiveSEModule.__init__": [[31, 36], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "create_act.get_act_fn"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_act.get_act_fn"], ["def", "__init__", "(", "self", ",", "channel", ",", "gate_fn", "=", "'hard_sigmoid'", ")", ":", "\n", "        ", "super", "(", "EffectiveSEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "channel", ",", "channel", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "gate_fn", "=", "get_act_fn", "(", "gate_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.se.EffectiveSEModule.forward": [[37, 41], ["se.EffectiveSEModule.avg_pool", "se.EffectiveSEModule.fc", "se.EffectiveSEModule.gate_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_se", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x_se", "=", "self", ".", "fc", "(", "x_se", ")", "\n", "return", "x", "*", "self", ".", "gate_fn", "(", "x_se", ",", "inplace", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.split_attn.RadixSoftmax.__init__": [[15, 19], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radix", ",", "cardinality", ")", ":", "\n", "        ", "super", "(", "RadixSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.split_attn.RadixSoftmax.forward": [[20, 29], ["torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.softmax", "torch.softmax", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "torch.sigmoid.view"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "batch", ",", "self", ".", "cardinality", ",", "self", ".", "radix", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.split_attn.SplitAttnConv2d.__init__": [[34, 53], ["torch.nn.Module.__init__", "max", "torch.nn.Conv2d", "torch.nn.Conv2d", "act_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "act_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "split_attn.RadixSoftmax", "norm_layer", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "act_layer", "=", "nn", ".", "ReLU", ",", "norm_layer", "=", "None", ",", "drop_block", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplitAttnConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "mid_chs", "=", "out_channels", "*", "radix", "\n", "attn_chs", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "mid_chs", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "self", ".", "bn0", "=", "norm_layer", "(", "mid_chs", ")", "if", "norm_layer", "is", "not", "None", "else", "None", "\n", "self", ".", "act0", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "attn_chs", ",", "1", ",", "groups", "=", "groups", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "attn_chs", ")", "if", "norm_layer", "is", "not", "None", "else", "None", "\n", "self", ".", "act1", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "attn_chs", ",", "mid_chs", ",", "1", ",", "groups", "=", "groups", ")", "\n", "self", ".", "rsoftmax", "=", "RadixSoftmax", "(", "radix", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.split_attn.SplitAttnConv2d.forward": [[54, 81], ["split_attn.SplitAttnConv2d.conv", "split_attn.SplitAttnConv2d.act0", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "split_attn.SplitAttnConv2d.fc1", "split_attn.SplitAttnConv2d.act1", "split_attn.SplitAttnConv2d.fc2", "split_attn.SplitAttnConv2d.rsoftmax().view", "out.contiguous", "split_attn.SplitAttnConv2d.bn0", "split_attn.SplitAttnConv2d.drop_block", "x.reshape.reshape.reshape", "x.reshape.reshape.sum", "split_attn.SplitAttnConv2d.bn1", "split_attn.SplitAttnConv2d.rsoftmax", "split_attn.SplitAttnConv2d.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn0", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "drop_block", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "drop_block", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act0", "(", "x", ")", "\n", "\n", "B", ",", "RC", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "(", "B", ",", "self", ".", "radix", ",", "RC", "//", "self", ".", "radix", ",", "H", ",", "W", ")", ")", "\n", "x_gap", "=", "x", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_gap", "=", "x", "\n", "", "x_gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "x_gap", ",", "1", ")", "\n", "x_gap", "=", "self", ".", "fc1", "(", "x_gap", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x_gap", "=", "self", ".", "bn1", "(", "x_gap", ")", "\n", "", "x_gap", "=", "self", ".", "act1", "(", "x_gap", ")", "\n", "x_attn", "=", "self", ".", "fc2", "(", "x_gap", ")", "\n", "\n", "x_attn", "=", "self", ".", "rsoftmax", "(", "x_attn", ")", ".", "view", "(", "B", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "out", "=", "(", "x", "*", "x_attn", ".", "reshape", "(", "(", "B", ",", "self", ".", "radix", ",", "RC", "//", "self", ".", "radix", ",", "1", ",", "1", ")", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "*", "x_attn", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.AdaptiveAvgMaxPool2d.__init__": [[53, 56], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "AdaptiveAvgMaxPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.AdaptiveAvgMaxPool2d.forward": [[57, 59], ["adaptive_avgmax_pool.adaptive_avgmax_pool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.adaptive_avgmax_pool2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "adaptive_avgmax_pool2d", "(", "x", ",", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.AdaptiveCatAvgMaxPool2d.__init__": [[62, 65], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "AdaptiveCatAvgMaxPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.AdaptiveCatAvgMaxPool2d.forward": [[66, 68], ["adaptive_avgmax_pool.adaptive_catavgmax_pool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.adaptive_catavgmax_pool2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "adaptive_catavgmax_pool2d", "(", "x", ",", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.SelectAdaptivePool2d.__init__": [[73, 88], ["torch.Module.__init__", "adaptive_avgmax_pool.AdaptiveAvgMaxPool2d", "adaptive_avgmax_pool.AdaptiveCatAvgMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "output_size", "=", "1", ",", "pool_type", "=", "'avg'", ",", "flatten", "=", "False", ")", ":", "\n", "        ", "super", "(", "SelectAdaptivePool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "pool_type", "=", "pool_type", "\n", "self", ".", "flatten", "=", "flatten", "\n", "if", "pool_type", "==", "'avgmax'", ":", "\n", "            ", "self", ".", "pool", "=", "AdaptiveAvgMaxPool2d", "(", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'catavgmax'", ":", "\n", "            ", "self", ".", "pool", "=", "AdaptiveCatAvgMaxPool2d", "(", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "if", "pool_type", "!=", "'avg'", ":", "\n", "                ", "assert", "False", ",", "'Invalid pool type: %s'", "%", "pool_type", "\n", "", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.SelectAdaptivePool2d.forward": [[89, 94], ["adaptive_avgmax_pool.SelectAdaptivePool2d.pool", "x.flatten.flatten.flatten"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.SelectAdaptivePool2d.feat_mult": [[95, 97], ["adaptive_avgmax_pool.adaptive_pool_feat_mult"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.adaptive_pool_feat_mult"], ["", "def", "feat_mult", "(", "self", ")", ":", "\n", "        ", "return", "adaptive_pool_feat_mult", "(", "self", ".", "pool_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.SelectAdaptivePool2d.__repr__": [[98, 102], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "'output_size='", "+", "str", "(", "self", ".", "output_size", ")", "+", "', pool_type='", "+", "self", ".", "pool_type", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.adaptive_pool_feat_mult": [[17, 22], ["None"], "function", ["None"], ["def", "adaptive_pool_feat_mult", "(", "pool_type", "=", "'avg'", ")", ":", "\n", "    ", "if", "pool_type", "==", "'catavgmax'", ":", "\n", "        ", "return", "2", "\n", "", "else", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.adaptive_avgmax_pool2d": [[24, 28], ["torch.adaptive_avg_pool2d", "torch.adaptive_max_pool2d"], "function", ["None"], ["", "", "def", "adaptive_avgmax_pool2d", "(", "x", ",", "output_size", "=", "1", ")", ":", "\n", "    ", "x_avg", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "output_size", ")", "\n", "x_max", "=", "F", ".", "adaptive_max_pool2d", "(", "x", ",", "output_size", ")", "\n", "return", "0.5", "*", "(", "x_avg", "+", "x_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.adaptive_catavgmax_pool2d": [[30, 34], ["torch.adaptive_avg_pool2d", "torch.adaptive_max_pool2d", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "adaptive_catavgmax_pool2d", "(", "x", ",", "output_size", "=", "1", ")", ":", "\n", "    ", "x_avg", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "output_size", ")", "\n", "x_max", "=", "F", ".", "adaptive_max_pool2d", "(", "x", ",", "output_size", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x_avg", ",", "x_max", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.select_adaptive_pool2d": [[36, 50], ["torch.adaptive_avg_pool2d", "adaptive_avgmax_pool.adaptive_avgmax_pool2d", "adaptive_avgmax_pool.adaptive_catavgmax_pool2d", "torch.adaptive_max_pool2d"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.adaptive_avgmax_pool2d", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.adaptive_avgmax_pool.adaptive_catavgmax_pool2d"], ["", "def", "select_adaptive_pool2d", "(", "x", ",", "pool_type", "=", "'avg'", ",", "output_size", "=", "1", ")", ":", "\n", "    ", "\"\"\"Selectable global pooling function with dynamic input kernel size\n    \"\"\"", "\n", "if", "pool_type", "==", "'avg'", ":", "\n", "        ", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'avgmax'", ":", "\n", "        ", "x", "=", "adaptive_avgmax_pool2d", "(", "x", ",", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'catavgmax'", ":", "\n", "        ", "x", "=", "adaptive_catavgmax_pool2d", "(", "x", ",", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "        ", "x", "=", "F", ".", "adaptive_max_pool2d", "(", "x", ",", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'Invalid pool type: %s'", "%", "pool_type", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.helpers._ntuple": [[10, 16], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["def", "_ntuple", "(", "n", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "            ", "return", "x", "\n", "", "return", "tuple", "(", "repeat", "(", "x", ",", "n", ")", ")", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.separable_conv.SeparableConvBnAct.__init__": [[10, 25], ["torch.nn.Module.__init__", "create_conv2d.create_conv2d.create_conv2d", "create_conv2d.create_conv2d.create_conv2d", "create_norm_act.convert_norm_act_type", "norm_act_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_conv2d.create_conv2d", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_conv2d.create_conv2d", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_norm_act.convert_norm_act_type"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "''", ",", "bias", "=", "False", ",", "\n", "channel_multiplier", "=", "1.0", ",", "pw_kernel_size", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "norm_kwargs", "=", "None", ",", "\n", "act_layer", "=", "nn", ".", "ReLU", ",", "apply_act", "=", "True", ",", "drop_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "SeparableConvBnAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_kwargs", "=", "norm_kwargs", "or", "{", "}", "\n", "\n", "self", ".", "conv_dw", "=", "create_conv2d", "(", "\n", "in_channels", ",", "int", "(", "in_channels", "*", "channel_multiplier", ")", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "padding", "=", "padding", ",", "depthwise", "=", "True", ")", "\n", "\n", "self", ".", "conv_pw", "=", "create_conv2d", "(", "\n", "int", "(", "in_channels", "*", "channel_multiplier", ")", ",", "out_channels", ",", "pw_kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "\n", "norm_act_layer", ",", "norm_act_args", "=", "convert_norm_act_type", "(", "norm_layer", ",", "act_layer", ",", "norm_kwargs", ")", "\n", "self", ".", "bn", "=", "norm_act_layer", "(", "out_channels", ",", "apply_act", "=", "apply_act", ",", "drop_block", "=", "drop_block", ",", "**", "norm_act_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.separable_conv.SeparableConvBnAct.forward": [[26, 32], ["separable_conv.SeparableConvBnAct.conv_dw", "separable_conv.SeparableConvBnAct.conv_pw", "separable_conv.SeparableConvBnAct.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_dw", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_pw", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.separable_conv.SeparableConv2d.__init__": [[37, 47], ["torch.nn.Module.__init__", "create_conv2d.create_conv2d.create_conv2d", "create_conv2d.create_conv2d.create_conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_conv2d.create_conv2d", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_conv2d.create_conv2d"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "''", ",", "bias", "=", "False", ",", "\n", "channel_multiplier", "=", "1.0", ",", "pw_kernel_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_dw", "=", "create_conv2d", "(", "\n", "in_channels", ",", "int", "(", "in_channels", "*", "channel_multiplier", ")", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "padding", "=", "padding", ",", "depthwise", "=", "True", ")", "\n", "\n", "self", ".", "conv_pw", "=", "create_conv2d", "(", "\n", "int", "(", "in_channels", "*", "channel_multiplier", ")", ",", "out_channels", ",", "pw_kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.separable_conv.SeparableConv2d.forward": [[48, 52], ["separable_conv.SeparableConv2d.conv_dw", "separable_conv.SeparableConv2d.conv_pw"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_dw", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_pw", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.weight_init._no_grad_trunc_normal_": [[6, 40], ["warnings.warn", "torch.no_grad", "weight_init._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.weight_init.trunc_normal_": [[42, 61], ["weight_init._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.weight_init._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.get_padding": [[12, 15], ["None"], "function", ["None"], ["def", "get_padding", "(", "kernel_size", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ",", "**", "_", ")", "->", "int", ":", "\n", "    ", "padding", "=", "(", "(", "stride", "-", "1", ")", "+", "dilation", "*", "(", "kernel_size", "-", "1", ")", ")", "//", "2", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.get_same_padding": [[18, 20], ["max", "math.ceil"], "function", ["None"], ["", "def", "get_same_padding", "(", "x", ":", "int", ",", "k", ":", "int", ",", "s", ":", "int", ",", "d", ":", "int", ")", ":", "\n", "    ", "return", "max", "(", "(", "math", ".", "ceil", "(", "x", "/", "s", ")", "-", "1", ")", "*", "s", "+", "(", "k", "-", "1", ")", "*", "d", "+", "1", "-", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.is_static_pad": [[23, 25], ["None"], "function", ["None"], ["", "def", "is_static_pad", "(", "kernel_size", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ",", "**", "_", ")", ":", "\n", "    ", "return", "stride", "==", "1", "and", "(", "dilation", "*", "(", "kernel_size", "-", "1", ")", ")", "%", "2", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.pad_same": [[28, 34], ["F.pad.size", "padding.get_same_padding", "padding.get_same_padding", "torch.pad"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.get_same_padding", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.get_same_padding"], ["", "def", "pad_same", "(", "x", ",", "k", ":", "List", "[", "int", "]", ",", "s", ":", "List", "[", "int", "]", ",", "d", ":", "List", "[", "int", "]", "=", "(", "1", ",", "1", ")", ",", "value", ":", "float", "=", "0", ")", ":", "\n", "    ", "ih", ",", "iw", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "pad_h", ",", "pad_w", "=", "get_same_padding", "(", "ih", ",", "k", "[", "0", "]", ",", "s", "[", "0", "]", ",", "d", "[", "0", "]", ")", ",", "get_same_padding", "(", "iw", ",", "k", "[", "1", "]", ",", "s", "[", "1", "]", ",", "d", "[", "1", "]", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "        ", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "pad_w", "//", "2", ",", "pad_w", "-", "pad_w", "//", "2", ",", "pad_h", "//", "2", ",", "pad_h", "-", "pad_h", "//", "2", "]", ",", "value", "=", "value", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.get_padding_value": [[36, 57], ["isinstance", "get_padding.lower", "padding.is_static_pad", "padding.get_padding", "padding.get_padding"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.is_static_pad", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.get_padding", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.get_padding"], ["", "def", "get_padding_value", "(", "padding", ",", "kernel_size", ",", "**", "kwargs", ")", "->", "Tuple", "[", "Tuple", ",", "bool", "]", ":", "\n", "    ", "dynamic", "=", "False", "\n", "if", "isinstance", "(", "padding", ",", "str", ")", ":", "\n", "# for any string padding, the padding will be calculated for you, one of three ways", "\n", "        ", "padding", "=", "padding", ".", "lower", "(", ")", "\n", "if", "padding", "==", "'same'", ":", "\n", "# TF compatible 'SAME' padding, has a performance and GPU memory allocation impact", "\n", "            ", "if", "is_static_pad", "(", "kernel_size", ",", "**", "kwargs", ")", ":", "\n", "# static case, no extra overhead", "\n", "                ", "padding", "=", "get_padding", "(", "kernel_size", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# dynamic 'SAME' padding, has runtime/GPU memory overhead", "\n", "                ", "padding", "=", "0", "\n", "dynamic", "=", "True", "\n", "", "", "elif", "padding", "==", "'valid'", ":", "\n", "# 'VALID' padding, same as padding=0", "\n", "            ", "padding", "=", "0", "\n", "", "else", ":", "\n", "# Default to PyTorch style 'same'-ish symmetric padding", "\n", "            ", "padding", "=", "get_padding", "(", "kernel_size", ",", "**", "kwargs", ")", "\n", "", "", "return", "padding", ",", "dynamic", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.Swish.__init__": [[21, 24], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.Swish.forward": [[25, 27], ["activations.swish"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.swish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "swish", "(", "x", ",", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.Mish.__init__": [[39, 41], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "Mish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.Mish.forward": [[42, 44], ["activations.mish"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.mish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "mish", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.Sigmoid.__init__": [[52, 55], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "Sigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.Sigmoid.forward": [[56, 58], ["x.sigmoid_", "x.sigmoid"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "sigmoid_", "(", ")", "if", "self", ".", "inplace", "else", "x", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.Tanh.__init__": [[66, 69], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "Tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.Tanh.forward": [[70, 72], ["x.tanh_", "x.tanh"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.tanh"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "tanh_", "(", ")", "if", "self", ".", "inplace", "else", "x", ".", "tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.HardSwish.__init__": [[80, 83], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "HardSwish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.HardSwish.forward": [[84, 86], ["activations.hard_swish"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.hard_swish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "hard_swish", "(", "x", ",", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.HardSigmoid.__init__": [[96, 99], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "HardSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.HardSigmoid.forward": [[100, 102], ["activations.hard_sigmoid"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.hard_sigmoid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "hard_sigmoid", "(", "x", ",", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.HardMish.__init__": [[116, 119], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "HardMish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.HardMish.forward": [[120, 122], ["activations.hard_mish"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.hard_mish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "hard_mish", "(", "x", ",", "self", ".", "inplace", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.swish": [[14, 18], ["x.mul_", "x.mul", "x.sigmoid", "x.sigmoid"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["def", "swish", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Swish - Described in: https://arxiv.org/abs/1710.05941\n    \"\"\"", "\n", "return", "x", ".", "mul_", "(", "x", ".", "sigmoid", "(", ")", ")", "if", "inplace", "else", "x", ".", "mul", "(", "x", ".", "sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.mish": [[29, 34], ["x.mul", "torch.nn.functional.softplus().tanh", "torch.nn.functional.softplus"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.tanh"], ["", "", "def", "mish", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Mish: A Self Regularized Non-Monotonic Neural Activation Function - https://arxiv.org/abs/1908.08681\n    NOTE: I don't have a working inplace variant\n    \"\"\"", "\n", "return", "x", ".", "mul", "(", "F", ".", "softplus", "(", "x", ")", ".", "tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid": [[46, 48], ["x.sigmoid_", "x.sigmoid"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.sigmoid"], ["", "", "def", "sigmoid", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "x", ".", "sigmoid_", "(", ")", "if", "inplace", "else", "x", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.tanh": [[60, 62], ["x.tanh_", "x.tanh"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.tanh"], ["", "", "def", "tanh", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "x", ".", "tanh_", "(", ")", "if", "inplace", "else", "x", ".", "tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.hard_swish": [[74, 77], ["torch.nn.functional.relu6().div_", "x.mul_", "x.mul", "torch.nn.functional.relu6"], "function", ["None"], ["", "", "def", "hard_swish", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "inner", "=", "F", ".", "relu6", "(", "x", "+", "3.", ")", ".", "div_", "(", "6.", ")", "\n", "return", "x", ".", "mul_", "(", "inner", ")", "if", "inplace", "else", "x", ".", "mul", "(", "inner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.hard_sigmoid": [[88, 93], ["x.add_().clamp_().div_", "torch.nn.functional.relu6", "x.add_().clamp_", "x.add_"], "function", ["None"], ["", "", "def", "hard_sigmoid", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "inplace", ":", "\n", "        ", "return", "x", ".", "add_", "(", "3.", ")", ".", "clamp_", "(", "0.", ",", "6.", ")", ".", "div_", "(", "6.", ")", "\n", "", "else", ":", "\n", "        ", "return", "F", ".", "relu6", "(", "x", "+", "3.", ")", "/", "6.", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations.hard_mish": [[104, 113], ["x.mul_"], "function", ["None"], ["", "", "def", "hard_mish", "(", "x", ",", "inplace", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" Hard Mish\n    Experimental, based on notes by Mish author Diganta Misra at\n      https://github.com/digantamisra98/H-Mish/blob/0da20d4bc58e696b6803f2523c58d3c8a82782d0/README.md\n    \"\"\"", "\n", "if", "inplace", ":", "\n", "        ", "return", "x", ".", "mul_", "(", "0.5", "*", "(", "x", "+", "2", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "0.5", "*", "x", "*", "(", "x", "+", "2", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.evo_norm.EvoNormBatch2d.__init__": [[17, 29], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "evo_norm.EvoNormBatch2d.register_buffer", "evo_norm.EvoNormBatch2d.reset_parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.inplace_abn.InplaceAbn.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "apply_act", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-5", ",", "drop_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "EvoNormBatch2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_act", "=", "apply_act", "# apply activation (non-linearity)", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "eps", "=", "eps", "\n", "param_shape", "=", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "if", "apply_act", ":", "\n", "            ", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.evo_norm.EvoNormBatch2d.reset_parameters": [[30, 35], ["torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.ones_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "if", "self", ".", "apply_act", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.evo_norm.EvoNormBatch2d.forward": [[36, 51], ["x.dim", "x.var", "evo_norm.EvoNormBatch2d.running_var.copy_", "evo_norm.EvoNormBatch2d.v.to", "d.max.max.max", "x.var.detach", "x.var"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "'expected 4D input'", "\n", "x_type", "=", "x", ".", "dtype", "\n", "if", "self", ".", "training", ":", "\n", "            ", "var", "=", "x", ".", "var", "(", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "running_var", ".", "copy_", "(", "self", ".", "momentum", "*", "var", ".", "detach", "(", ")", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "var", "=", "self", ".", "running_var", "\n", "\n", "", "if", "self", ".", "apply_act", ":", "\n", "            ", "v", "=", "self", ".", "v", ".", "to", "(", "dtype", "=", "x_type", ")", "\n", "d", "=", "(", "x", "*", "v", ")", "+", "(", "x", ".", "var", "(", "dim", "=", "(", "2", ",", "3", ")", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", ".", "to", "(", "dtype", "=", "x_type", ")", "\n", "d", "=", "d", ".", "max", "(", "(", "var", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", ".", "to", "(", "dtype", "=", "x_type", ")", ")", "\n", "x", "=", "x", "/", "d", "\n", "", "return", "x", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.evo_norm.EvoNormSample2d.__init__": [[54, 65], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "evo_norm.EvoNormSample2d.reset_parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.inplace_abn.InplaceAbn.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "apply_act", "=", "True", ",", "groups", "=", "8", ",", "eps", "=", "1e-5", ",", "drop_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "EvoNormSample2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_act", "=", "apply_act", "# apply activation (non-linearity)", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "eps", "=", "eps", "\n", "param_shape", "=", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "if", "apply_act", ":", "\n", "            ", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.evo_norm.EvoNormSample2d.reset_parameters": [[66, 71], ["torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.ones_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "if", "self", ".", "apply_act", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.evo_norm.EvoNormSample2d.forward": [[72, 82], ["x.reshape.reshape.dim", "x.reshape.reshape.reshape", "x.reshape.reshape.reshape", "x.reshape.reshape.var"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "'expected 4D input'", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "assert", "C", "%", "self", ".", "groups", "==", "0", "\n", "if", "self", ".", "apply_act", ":", "\n", "            ", "n", "=", "(", "x", "*", "self", ".", "v", ")", ".", "sigmoid", "(", ")", ".", "reshape", "(", "B", ",", "self", ".", "groups", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "self", ".", "groups", ",", "-", "1", ")", "\n", "x", "=", "n", "/", "(", "x", ".", "var", "(", "dim", "=", "-", "1", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "", "return", "x", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_norm_act.get_norm_act_layer": [[14, 29], ["layer_class.replace().lower.replace().lower", "layer_class.replace().lower.startswith", "layer_class.replace().lower.startswith", "layer_class.replace().lower.replace"], "function", ["None"], ["def", "get_norm_act_layer", "(", "layer_class", ")", ":", "\n", "    ", "layer_class", "=", "layer_class", ".", "replace", "(", "'_'", ",", "''", ")", ".", "lower", "(", ")", "\n", "if", "layer_class", ".", "startswith", "(", "\"batchnorm\"", ")", ":", "\n", "        ", "layer", "=", "BatchNormAct2d", "\n", "", "elif", "layer_class", ".", "startswith", "(", "\"groupnorm\"", ")", ":", "\n", "        ", "layer", "=", "GroupNormAct", "\n", "", "elif", "layer_class", "==", "\"evonormbatch\"", ":", "\n", "        ", "layer", "=", "EvoNormBatch2d", "\n", "", "elif", "layer_class", "==", "\"evonormsample\"", ":", "\n", "        ", "layer", "=", "EvoNormSample2d", "\n", "", "elif", "layer_class", "==", "\"iabn\"", "or", "layer_class", "==", "\"inplaceabn\"", ":", "\n", "        ", "layer", "=", "InplaceAbn", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"Invalid norm_act layer (%s)\"", "%", "layer_class", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_norm_act.create_norm_act": [[31, 40], ["layer_type.split", "create_norm_act.get_norm_act_layer", "get_norm_act_layer.", "len", "torch.jit.script", "torch.jit.script"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_norm_act.get_norm_act_layer"], ["", "def", "create_norm_act", "(", "layer_type", ",", "num_features", ",", "apply_act", "=", "True", ",", "jit", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "layer_parts", "=", "layer_type", ".", "split", "(", "'-'", ")", "# e.g. batchnorm-leaky_relu", "\n", "assert", "len", "(", "layer_parts", ")", "in", "(", "1", ",", "2", ")", "\n", "layer", "=", "get_norm_act_layer", "(", "layer_parts", "[", "0", "]", ")", "\n", "#activation_class = layer_parts[1].lower() if len(layer_parts) > 1 else ''   # FIXME support string act selection?", "\n", "layer_instance", "=", "layer", "(", "num_features", ",", "apply_act", "=", "apply_act", ",", "**", "kwargs", ")", "\n", "if", "jit", ":", "\n", "        ", "layer_instance", "=", "torch", ".", "jit", ".", "script", "(", "layer_instance", ")", "\n", "", "return", "layer_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_norm_act.convert_norm_act_type": [[42, 65], ["isinstance", "isinstance", "isinstance", "norm_kwargs.copy", "create_norm_act.get_norm_act_layer", "isinstance", "norm_layer.__name__.lower", "norm_layer.__name__.lower.startswith", "norm_act_args.update", "norm_layer.__name__.lower.startswith", "dict"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_norm_act.get_norm_act_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update"], ["", "def", "convert_norm_act_type", "(", "norm_layer", ",", "act_layer", ",", "norm_kwargs", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "norm_layer", ",", "(", "type", ",", "str", ",", "types", ".", "FunctionType", ",", "functools", ".", "partial", ")", ")", "\n", "assert", "act_layer", "is", "None", "or", "isinstance", "(", "act_layer", ",", "(", "type", ",", "str", ",", "types", ".", "FunctionType", ",", "functools", ".", "partial", ")", ")", "\n", "norm_act_args", "=", "norm_kwargs", ".", "copy", "(", ")", "if", "norm_kwargs", "else", "{", "}", "\n", "if", "isinstance", "(", "norm_layer", ",", "str", ")", ":", "\n", "        ", "norm_act_layer", "=", "get_norm_act_layer", "(", "norm_layer", ")", "\n", "", "elif", "norm_layer", "in", "_NORM_ACT_TYPES", ":", "\n", "        ", "norm_act_layer", "=", "norm_layer", "\n", "", "elif", "isinstance", "(", "norm_layer", ",", "(", "types", ".", "FunctionType", ",", "functools", ".", "partial", ")", ")", ":", "\n", "# assuming this is a lambda/fn/bound partial that creates norm_act layer", "\n", "        ", "norm_act_layer", "=", "norm_layer", "\n", "", "else", ":", "\n", "        ", "type_name", "=", "norm_layer", ".", "__name__", ".", "lower", "(", ")", "\n", "if", "type_name", ".", "startswith", "(", "'batchnorm'", ")", ":", "\n", "            ", "norm_act_layer", "=", "BatchNormAct2d", "\n", "", "elif", "type_name", ".", "startswith", "(", "'groupnorm'", ")", ":", "\n", "            ", "norm_act_layer", "=", "GroupNormAct", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "f\"No equivalent norm_act layer for {type_name}\"", "\n", "# Must pass `act_layer` through for backwards compat where `act_layer=None` implies no activation.", "\n", "# Newer models will use `apply_act` and likely have `act_layer` arg bound to relevant NormAct types.", "\n", "", "norm_act_args", ".", "update", "(", "dict", "(", "act_layer", "=", "act_layer", ")", ")", "\n", "", "return", "norm_act_layer", ",", "norm_act_args", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.norm_act.BatchNormAct2d.__init__": [[17, 27], ["torch.nn.BatchNorm2d.__init__", "isinstance", "create_act.get_act_layer", "create_act.get_act_layer."], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_act.get_act_layer"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ",", "\n", "apply_act", "=", "True", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "inplace", "=", "True", ",", "drop_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "BatchNormAct2d", ",", "self", ")", ".", "__init__", "(", "\n", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "if", "isinstance", "(", "act_layer", ",", "str", ")", ":", "\n", "            ", "act_layer", "=", "get_act_layer", "(", "act_layer", ")", "\n", "", "if", "act_layer", "is", "not", "None", "and", "apply_act", ":", "\n", "            ", "self", ".", "act", "=", "act_layer", "(", "inplace", "=", "inplace", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.norm_act.BatchNormAct2d._forward_jit": [[28, 53], ["torch.nn.functional.batch_norm", "float"], "methods", ["None"], ["", "", "def", "_forward_jit", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" A cut & paste of the contents of the PyTorch BatchNorm2d forward function\n        \"\"\"", "\n", "# exponential_average_factor is self.momentum set to", "\n", "# (when it is available) only so that if gets updated", "\n", "# in ONNX graph when this node is exported to ONNX.", "\n", "if", "self", ".", "momentum", "is", "None", ":", "\n", "            ", "exponential_average_factor", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "track_running_stats", ":", "\n", "# TODO: if statement only here to tell the jit to skip emitting this when it is None", "\n", "            ", "if", "self", ".", "num_batches_tracked", "is", "not", "None", ":", "\n", "                ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "if", "self", ".", "momentum", "is", "None", ":", "# use cumulative moving average", "\n", "                    ", "exponential_average_factor", "=", "1.0", "/", "float", "(", "self", ".", "num_batches_tracked", ")", "\n", "", "else", ":", "# use exponential moving average", "\n", "                    ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "", "", "", "x", "=", "F", ".", "batch_norm", "(", "\n", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "\n", "exponential_average_factor", ",", "self", ".", "eps", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.norm_act.BatchNormAct2d._forward_python": [[54, 57], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_forward_python", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "super", "(", "BatchNormAct2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.norm_act.BatchNormAct2d.forward": [[58, 67], ["torch.jit.is_scripting", "norm_act.BatchNormAct2d._forward_jit", "norm_act.BatchNormAct2d._forward_python", "norm_act.BatchNormAct2d.act"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.norm_act.BatchNormAct2d._forward_jit", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.norm_act.BatchNormAct2d._forward_python"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# FIXME cannot call parent forward() and maintain jit.script compatibility?", "\n", "        ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "            ", "x", "=", "self", ".", "_forward_jit", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "_forward_python", "(", "x", ")", "\n", "", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.norm_act.GroupNormAct.__init__": [[71, 80], ["torch.nn.GroupNorm.__init__", "isinstance", "create_act.get_act_layer", "create_act.get_act_layer."], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_act.get_act_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_groups", ",", "num_channels", ",", "eps", "=", "1e-5", ",", "affine", "=", "True", ",", "\n", "apply_act", "=", "True", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "inplace", "=", "True", ",", "drop_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "GroupNormAct", ",", "self", ")", ".", "__init__", "(", "num_groups", ",", "num_channels", ",", "eps", "=", "eps", ",", "affine", "=", "affine", ")", "\n", "if", "isinstance", "(", "act_layer", ",", "str", ")", ":", "\n", "            ", "act_layer", "=", "get_act_layer", "(", "act_layer", ")", "\n", "", "if", "act_layer", "is", "not", "None", "and", "apply_act", ":", "\n", "            ", "self", ".", "act", "=", "act_layer", "(", "inplace", "=", "inplace", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.norm_act.GroupNormAct.forward": [[81, 86], ["torch.nn.functional.group_norm", "norm_act.GroupNormAct.act"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "group_norm", "(", "x", ",", "self", ".", "num_groups", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "eps", ")", "\n", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_attn.create_attn": [[11, 38], ["isinstance", "module_cls", "attn_type.lower.lower", "isinstance"], "function", ["None"], ["def", "create_attn", "(", "attn_type", ",", "channels", ",", "**", "kwargs", ")", ":", "\n", "    ", "module_cls", "=", "None", "\n", "if", "attn_type", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "attn_type", ",", "str", ")", ":", "\n", "            ", "attn_type", "=", "attn_type", ".", "lower", "(", ")", "\n", "if", "attn_type", "==", "'se'", ":", "\n", "                ", "module_cls", "=", "SEModule", "\n", "", "elif", "attn_type", "==", "'ese'", ":", "\n", "                ", "module_cls", "=", "EffectiveSEModule", "\n", "", "elif", "attn_type", "==", "'eca'", ":", "\n", "                ", "module_cls", "=", "EcaModule", "\n", "", "elif", "attn_type", "==", "'ceca'", ":", "\n", "                ", "module_cls", "=", "CecaModule", "\n", "", "elif", "attn_type", "==", "'cbam'", ":", "\n", "                ", "module_cls", "=", "CbamModule", "\n", "", "elif", "attn_type", "==", "'lcbam'", ":", "\n", "                ", "module_cls", "=", "LightCbamModule", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "\"Invalid attn module (%s)\"", "%", "attn_type", "\n", "", "", "elif", "isinstance", "(", "attn_type", ",", "bool", ")", ":", "\n", "            ", "if", "attn_type", ":", "\n", "                ", "module_cls", "=", "SEModule", "\n", "", "", "else", ":", "\n", "            ", "module_cls", "=", "attn_type", "\n", "", "", "if", "module_cls", "is", "not", "None", ":", "\n", "        ", "return", "module_cls", "(", "channels", ",", "**", "kwargs", ")", "\n", "", "return", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cond_conv2d.CondConv2d.__init__": [[43, 72], ["torch.nn.Module.__init__", "helpers.tup_pair", "helpers.tup_pair", "padding.get_padding_value", "helpers.tup_pair", "helpers.tup_pair", "torch.nn.Parameter", "cond_conv2d.CondConv2d.reset_parameters", "torch.Tensor", "torch.nn.Parameter", "cond_conv2d.CondConv2d.register_parameter", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.padding.get_padding_value", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.inplace_abn.InplaceAbn.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "''", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "num_experts", "=", "4", ")", ":", "\n", "        ", "super", "(", "CondConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "tup_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "tup_pair", "(", "stride", ")", "\n", "padding_val", ",", "is_padding_dynamic", "=", "get_padding_value", "(", "\n", "padding", ",", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "dynamic_padding", "=", "is_padding_dynamic", "# if in forward to work with torchscript", "\n", "self", ".", "padding", "=", "tup_pair", "(", "padding_val", ")", "\n", "self", ".", "dilation", "=", "tup_pair", "(", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "\n", "self", ".", "weight_shape", "=", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", "//", "self", ".", "groups", ")", "+", "self", ".", "kernel_size", "\n", "weight_num_param", "=", "1", "\n", "for", "wd", "in", "self", ".", "weight_shape", ":", "\n", "            ", "weight_num_param", "*=", "wd", "\n", "", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "num_experts", ",", "weight_num_param", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias_shape", "=", "(", "self", ".", "out_channels", ",", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "num_experts", ",", "self", ".", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cond_conv2d.CondConv2d.reset_parameters": [[73, 83], ["cond_conv2d.get_condconv_initializer", "get_condconv_initializer.", "functools.partial", "numpy.prod", "cond_conv2d.get_condconv_initializer", "get_condconv_initializer.", "math.sqrt", "functools.partial", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cond_conv2d.get_condconv_initializer", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cond_conv2d.get_condconv_initializer"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "init_weight", "=", "get_condconv_initializer", "(", "\n", "partial", "(", "nn", ".", "init", ".", "kaiming_uniform_", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", ",", "self", ".", "num_experts", ",", "self", ".", "weight_shape", ")", "\n", "init_weight", "(", "self", ".", "weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", "=", "np", ".", "prod", "(", "self", ".", "weight_shape", "[", "1", ":", "]", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init_bias", "=", "get_condconv_initializer", "(", "\n", "partial", "(", "nn", ".", "init", ".", "uniform_", ",", "a", "=", "-", "bound", ",", "b", "=", "bound", ")", ",", "self", ".", "num_experts", ",", "self", ".", "bias_shape", ")", "\n", "init_bias", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cond_conv2d.CondConv2d.forward": [[84, 123], ["torch.matmul", "weight.view.view.view", "x.view.view.view", "torch.nn.functional.conv2d.permute().view", "torch.matmul", "bias.view.view.view", "conv2d_same.conv2d_same.conv2d_same", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d.permute"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.conv2d_same.conv2d_same"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "routing_weights", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "weight", "=", "torch", ".", "matmul", "(", "routing_weights", ",", "self", ".", "weight", ")", "\n", "new_weight_shape", "=", "(", "B", "*", "self", ".", "out_channels", ",", "self", ".", "in_channels", "//", "self", ".", "groups", ")", "+", "self", ".", "kernel_size", "\n", "weight", "=", "weight", ".", "view", "(", "new_weight_shape", ")", "\n", "bias", "=", "None", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "torch", ".", "matmul", "(", "routing_weights", ",", "self", ".", "bias", ")", "\n", "bias", "=", "bias", ".", "view", "(", "B", "*", "self", ".", "out_channels", ")", "\n", "# move batch elements with channels so each batch element can be efficiently convolved with separate kernel", "\n", "", "x", "=", "x", ".", "view", "(", "1", ",", "B", "*", "C", ",", "H", ",", "W", ")", "\n", "if", "self", ".", "dynamic_padding", ":", "\n", "            ", "out", "=", "conv2d_same", "(", "\n", "x", ",", "weight", ",", "bias", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "groups", "=", "self", ".", "groups", "*", "B", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "weight", ",", "bias", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "groups", "=", "self", ".", "groups", "*", "B", ")", "\n", "", "out", "=", "out", ".", "permute", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", ".", "view", "(", "B", ",", "self", ".", "out_channels", ",", "out", ".", "shape", "[", "-", "2", "]", ",", "out", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# Literal port (from TF definition)", "\n", "# x = torch.split(x, 1, 0)", "\n", "# weight = torch.split(weight, 1, 0)", "\n", "# if self.bias is not None:", "\n", "#     bias = torch.matmul(routing_weights, self.bias)", "\n", "#     bias = torch.split(bias, 1, 0)", "\n", "# else:", "\n", "#     bias = [None] * B", "\n", "# out = []", "\n", "# for xi, wi, bi in zip(x, weight, bias):", "\n", "#     wi = wi.view(*self.weight_shape)", "\n", "#     if bi is not None:", "\n", "#         bi = bi.view(*self.bias_shape)", "\n", "#     out.append(self.conv_fn(", "\n", "#         xi, wi, bi, stride=self.stride, padding=self.padding,", "\n", "#         dilation=self.dilation, groups=self.groups))", "\n", "# out = torch.cat(out, 0)", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.cond_conv2d.get_condconv_initializer": [[21, 32], ["numpy.prod", "range", "ValueError", "initializer", "len", "weight[].view"], "function", ["None"], ["def", "get_condconv_initializer", "(", "initializer", ",", "num_experts", ",", "expert_shape", ")", ":", "\n", "    ", "def", "condconv_initializer", "(", "weight", ")", ":", "\n", "        ", "\"\"\"CondConv initializer function.\"\"\"", "\n", "num_params", "=", "np", ".", "prod", "(", "expert_shape", ")", "\n", "if", "(", "len", "(", "weight", ".", "shape", ")", "!=", "2", "or", "weight", ".", "shape", "[", "0", "]", "!=", "num_experts", "or", "\n", "weight", ".", "shape", "[", "1", "]", "!=", "num_params", ")", ":", "\n", "            ", "raise", "(", "ValueError", "(", "\n", "'CondConv variables must have shape [num_experts, num_params]'", ")", ")", "\n", "", "for", "i", "in", "range", "(", "num_experts", ")", ":", "\n", "            ", "initializer", "(", "weight", "[", "i", "]", ".", "view", "(", "expert_shape", ")", ")", "\n", "", "", "return", "condconv_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.space_to_depth.SpaceToDepth.__init__": [[6, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "block_size", "==", "4", "\n", "self", ".", "bs", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.space_to_depth.SpaceToDepth.forward": [[11, 17], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "self", ".", "bs", ",", "self", ".", "bs", ",", "W", "//", "self", ".", "bs", ",", "self", ".", "bs", ")", "# (N, C, H//bs, bs, W//bs, bs)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# (N, bs, bs, C, H//bs, W//bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "(", "self", ".", "bs", "**", "2", ")", ",", "H", "//", "self", ".", "bs", ",", "W", "//", "self", ".", "bs", ")", "# (N, C*bs^2, H//bs, W//bs)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.space_to_depth.SpaceToDepthJit.__call__": [[21, 28], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "# assuming hard-coded that block_size==4 for acceleration", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "4", ",", "4", ",", "W", "//", "4", ",", "4", ")", "# (N, C, H//bs, bs, W//bs, bs)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# (N, bs, bs, C, H//bs, W//bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "16", ",", "H", "//", "4", ",", "W", "//", "4", ")", "# (N, C*bs^2, H//bs, W//bs)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.space_to_depth.SpaceToDepthModule.__init__": [[31, 37], ["torch.Module.__init__", "space_to_depth.SpaceToDepthJit", "space_to_depth.SpaceToDepth"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "no_jit", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "no_jit", ":", "\n", "            ", "self", ".", "op", "=", "SpaceToDepthJit", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "op", "=", "SpaceToDepth", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.space_to_depth.SpaceToDepthModule.forward": [[38, 40], ["space_to_depth.SpaceToDepthModule.op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.space_to_depth.DepthToSpace.__init__": [[44, 47], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bs", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.space_to_depth.DepthToSpace.forward": [[48, 54], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "self", ".", "bs", ",", "self", ".", "bs", ",", "C", "//", "(", "self", ".", "bs", "**", "2", ")", ",", "H", ",", "W", ")", "# (N, bs, bs, C//bs^2, H, W)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "5", ",", "2", ")", ".", "contiguous", "(", ")", "# (N, C//bs^2, H, bs, W, bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "//", "(", "self", ".", "bs", "**", "2", ")", ",", "H", "*", "self", ".", "bs", ",", "W", "*", "self", ".", "bs", ")", "# (N, C//bs^2, H * bs, W * bs)", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.selective_kernel.SelectiveKernelAttn.__init__": [[21, 35], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "norm_layer", "act_layer", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "num_paths", "=", "2", ",", "attn_channels", "=", "32", ",", "\n", "act_layer", "=", "nn", ".", "ReLU", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\" Selective Kernel Attention Module\n\n        Selective Kernel attention mechanism factored out into its own module.\n\n        \"\"\"", "\n", "super", "(", "SelectiveKernelAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_paths", "=", "num_paths", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc_reduce", "=", "nn", ".", "Conv2d", "(", "channels", ",", "attn_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "attn_channels", ")", "\n", "self", ".", "act", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc_select", "=", "nn", ".", "Conv2d", "(", "attn_channels", ",", "channels", "*", "num_paths", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.selective_kernel.SelectiveKernelAttn.forward": [[36, 48], ["torch.sum", "selective_kernel.SelectiveKernelAttn.pool", "selective_kernel.SelectiveKernelAttn.fc_reduce", "selective_kernel.SelectiveKernelAttn.bn", "selective_kernel.SelectiveKernelAttn.act", "selective_kernel.SelectiveKernelAttn.fc_select", "torch.softmax.view", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "num_paths", "\n", "x", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_reduce", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_select", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "self", ".", "num_paths", ",", "C", "//", "self", ".", "num_paths", ",", "H", ",", "W", ")", "\n", "x", "=", "torch", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.selective_kernel.SelectiveKernelConv.__init__": [[52, 109], ["torch.nn.Module.__init__", "selective_kernel._kernel_valid", "len", "min", "dict", "torch.nn.ModuleList", "max", "selective_kernel.SelectiveKernelAttn", "isinstance", "int", "len", "len", "conv_bn_act.ConvBnAct", "zip"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.selective_kernel._kernel_valid"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "None", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "attn_reduction", "=", "16", ",", "min_attn_channels", "=", "32", ",", "keep_3x3", "=", "True", ",", "split_input", "=", "False", ",", "\n", "drop_block", "=", "None", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "aa_layer", "=", "None", ")", ":", "\n", "        ", "\"\"\" Selective Kernel Convolution Module\n\n        As described in Selective Kernel Networks (https://arxiv.org/abs/1903.06586) with some modifications.\n\n        Largest change is the input split, which divides the input channels across each convolution path, this can\n        be viewed as a grouping of sorts, but the output channel counts expand to the module level value. This keeps\n        the parameter count from ballooning when the convolutions themselves don't have groups, but still provides\n        a noteworthy increase in performance over similar param count models without this attention layer. -Ross W\n\n        Args:\n            in_channels (int):  module input (feature) channel count\n            out_channels (int):  module output (feature) channel count\n            kernel_size (int, list): kernel size for each convolution branch\n            stride (int): stride for convolutions\n            dilation (int): dilation for module as a whole, impacts dilation of each branch\n            groups (int): number of groups for each branch\n            attn_reduction (int, float): reduction factor for attention features\n            min_attn_channels (int): minimum attention feature channels\n            keep_3x3 (bool): keep all branch convolution kernels as 3x3, changing larger kernels for dilations\n            split_input (bool): split input channels evenly across each convolution branch, keeps param count lower,\n                can be viewed as grouping by path, output expands to module out_channels count\n            drop_block (nn.Module): drop block module\n            act_layer (nn.Module): activation layer to use\n            norm_layer (nn.Module): batchnorm/norm layer to use\n        \"\"\"", "\n", "super", "(", "SelectiveKernelConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "kernel_size", "or", "[", "3", ",", "5", "]", "# default to one 3x3 and one 5x5 branch. 5x5 -> 3x3 + dilation", "\n", "_kernel_valid", "(", "kernel_size", ")", "\n", "if", "not", "isinstance", "(", "kernel_size", ",", "list", ")", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", "]", "*", "2", "\n", "", "if", "keep_3x3", ":", "\n", "            ", "dilation", "=", "[", "dilation", "*", "(", "k", "-", "1", ")", "//", "2", "for", "k", "in", "kernel_size", "]", "\n", "kernel_size", "=", "[", "3", "]", "*", "len", "(", "kernel_size", ")", "\n", "", "else", ":", "\n", "            ", "dilation", "=", "[", "dilation", "]", "*", "len", "(", "kernel_size", ")", "\n", "", "self", ".", "num_paths", "=", "len", "(", "kernel_size", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "split_input", "=", "split_input", "\n", "if", "self", ".", "split_input", ":", "\n", "            ", "assert", "in_channels", "%", "self", ".", "num_paths", "==", "0", "\n", "in_channels", "=", "in_channels", "//", "self", ".", "num_paths", "\n", "", "groups", "=", "min", "(", "out_channels", ",", "groups", ")", "\n", "\n", "conv_kwargs", "=", "dict", "(", "\n", "stride", "=", "stride", ",", "groups", "=", "groups", ",", "drop_block", "=", "drop_block", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "\n", "aa_layer", "=", "aa_layer", ")", "\n", "self", ".", "paths", "=", "nn", ".", "ModuleList", "(", "[", "\n", "ConvBnAct", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "k", ",", "dilation", "=", "d", ",", "**", "conv_kwargs", ")", "\n", "for", "k", ",", "d", "in", "zip", "(", "kernel_size", ",", "dilation", ")", "]", ")", "\n", "\n", "attn_channels", "=", "max", "(", "int", "(", "out_channels", "/", "attn_reduction", ")", ",", "min_attn_channels", ")", "\n", "self", ".", "attn", "=", "SelectiveKernelAttn", "(", "out_channels", ",", "self", ".", "num_paths", ",", "attn_channels", ")", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.selective_kernel.SelectiveKernelConv.forward": [[110, 121], ["torch.stack", "selective_kernel.SelectiveKernelConv.attn", "torch.sum", "torch.split", "op", "op", "enumerate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "split_input", ":", "\n", "            ", "x_split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "in_channels", "//", "self", ".", "num_paths", ",", "1", ")", "\n", "x_paths", "=", "[", "op", "(", "x_split", "[", "i", "]", ")", "for", "i", ",", "op", "in", "enumerate", "(", "self", ".", "paths", ")", "]", "\n", "", "else", ":", "\n", "            ", "x_paths", "=", "[", "op", "(", "x", ")", "for", "op", "in", "self", ".", "paths", "]", "\n", "", "x", "=", "torch", ".", "stack", "(", "x_paths", ",", "dim", "=", "1", ")", "\n", "x_attn", "=", "self", ".", "attn", "(", "x", ")", "\n", "x", "=", "x", "*", "x_attn", "\n", "x", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.selective_kernel._kernel_valid": [[13, 18], ["isinstance", "selective_kernel._kernel_valid"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.selective_kernel._kernel_valid"], ["def", "_kernel_valid", "(", "k", ")", ":", "\n", "    ", "if", "isinstance", "(", "k", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "for", "ki", "in", "k", ":", "\n", "            ", "return", "_kernel_valid", "(", "ki", ")", "\n", "", "", "assert", "k", ">=", "3", "and", "k", "%", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.inplace_abn.InplaceAbn.__init__": [[40, 71], ["torch.nn.Module.__init__", "inplace_abn.InplaceAbn.register_buffer", "inplace_abn.InplaceAbn.register_buffer", "inplace_abn.InplaceAbn.reset_parameters", "isinstance", "torch.nn.Parameter", "torch.nn.Parameter", "inplace_abn.InplaceAbn.register_parameter", "inplace_abn.InplaceAbn.register_parameter", "torch.zeros", "torch.ones", "isinstance", "torch.ones", "torch.zeros", "isinstance"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.inplace_abn.InplaceAbn.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "apply_act", "=", "True", ",", "\n", "act_layer", "=", "\"leaky_relu\"", ",", "act_param", "=", "0.01", ",", "drop_block", "=", "None", ",", ")", ":", "\n", "        ", "super", "(", "InplaceAbn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "if", "apply_act", ":", "\n", "            ", "if", "isinstance", "(", "act_layer", ",", "str", ")", ":", "\n", "                ", "assert", "act_layer", "in", "(", "'leaky_relu'", ",", "'elu'", ",", "'identity'", ")", "\n", "self", ".", "act_name", "=", "act_layer", "\n", "", "else", ":", "\n", "# convert act layer passed as type to string", "\n", "                ", "if", "isinstance", "(", "act_layer", ",", "nn", ".", "ELU", ")", ":", "\n", "                    ", "self", ".", "act_name", "=", "'elu'", "\n", "", "elif", "isinstance", "(", "act_layer", ",", "nn", ".", "LeakyReLU", ")", ":", "\n", "                    ", "self", ".", "act_name", "=", "'leaky_relu'", "\n", "", "else", ":", "\n", "                    ", "assert", "False", ",", "f'Invalid act layer {act_layer.__name__} for IABN'", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "act_name", "=", "'identity'", "\n", "", "self", ".", "act_param", "=", "act_param", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.inplace_abn.InplaceAbn.reset_parameters": [[72, 78], ["torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_mean", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_var", ",", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.inplace_abn.InplaceAbn.forward": [[79, 86], ["inplace_abn", "isinstance"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "inplace_abn", "(", "\n", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "act_name", ",", "self", ".", "act_param", ")", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "            ", "output", "=", "output", "[", "0", "]", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.upernet.UperNet.__init__": [[45, 49], ["base.BaseNet.__init__", "upernet.UperNetHead"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ",", "aux", "=", "True", ",", "se_loss", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UperNet", ",", "self", ")", ".", "__init__", "(", "nclass", ",", "backbone", ",", "aux", ",", "se_loss", ",", "dilated", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "head", "=", "UperNetHead", "(", "nclass", ",", "norm_layer", ",", "up_kwargs", "=", "self", ".", "_up_kwargs", ")", "\n", "assert", "not", "aux", ",", "\"UperNet does not support aux loss\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.upernet.UperNet.forward": [[50, 57], ["upernet.UperNet.base_forward", "list", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "tuple", "list.size", "upernet.UperNet.head"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "imsize", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "features", "=", "self", ".", "base_forward", "(", "x", ")", "\n", "\n", "x", "=", "list", "(", "self", ".", "head", "(", "*", "features", ")", ")", "\n", "x", "[", "0", "]", "=", "upsample", "(", "x", "[", "0", "]", ",", "imsize", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "return", "tuple", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.upernet.UperNetHead.__init__": [[60, 66], ["fcfpn.FCFPNHead.__init__", "torch.PyramidPooling"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "norm_layer", "=", "None", ",", "fpn_inchannels", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "\n", "fpn_dim", "=", "256", ",", "up_kwargs", "=", "None", ")", ":", "\n", "        ", "fpn_inchannels", "[", "-", "1", "]", "=", "fpn_inchannels", "[", "-", "1", "]", "*", "2", "\n", "super", "(", "UperNetHead", ",", "self", ")", ".", "__init__", "(", "out_channels", ",", "norm_layer", ",", "fpn_inchannels", ",", "\n", "fpn_dim", ",", "up_kwargs", ")", "\n", "self", ".", "extramodule", "=", "PyramidPooling", "(", "fpn_inchannels", "[", "-", "1", "]", "//", "2", ",", "norm_layer", ",", "up_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.upernet.get_upernet": [[68, 98], ["upernet.UperNet", "UperNet.load_state_dict", "torch.load", "torch.load", "get_model_file", "dataset.lower"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "def", "get_upernet", "(", "dataset", "=", "'pascal_voc'", ",", "backbone", "=", "'resnet50s'", ",", "pretrained", "=", "False", ",", "\n", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"UperNet model from the paper `\"Fully Convolutional Network for semantic segmentation\"\n    <https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_upernet.pdf>`_\n    Parameters\n    ----------\n    dataset : str, default pascal_voc\n        The dataset that model pretrained on. (pascal_voc, ade20k)\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n    Examples\n    --------\n    >>> model = get_upernet(dataset='pascal_voc', backbone='resnet50s', pretrained=False)\n    >>> print(model)\n    \"\"\"", "\n", "acronyms", "=", "{", "\n", "'pascal_voc'", ":", "'voc'", ",", "\n", "'pascal_aug'", ":", "'voc'", ",", "\n", "'ade20k'", ":", "'ade'", ",", "\n", "}", "\n", "# infer number of classes", "\n", "from", "...", "datasets", "import", "datasets", ",", "VOCSegmentation", ",", "VOCAugSegmentation", ",", "ADE20KSegmentation", "\n", "model", "=", "UperNet", "(", "datasets", "[", "dataset", ".", "lower", "(", ")", "]", ".", "NUM_CLASS", ",", "backbone", "=", "backbone", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "from", ".", ".", "model_store", "import", "get_model_file", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'upernet_%s_%s'", "%", "(", "backbone", ",", "acronyms", "[", "dataset", "]", ")", ",", "root", "=", "root", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.upernet.get_upernet_50_ade": [[100, 118], ["upernet.get_upernet"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.upernet.get_upernet"], ["", "def", "get_upernet_50_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet-PSP model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_upernet_50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_upernet", "(", "'ade20k'", ",", "'resnet50s'", ",", "pretrained", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.__init__": [[57, 76], ["torch.Module.__init__", "base.get_backbone"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.get_backbone"], ["x1", "=", "int", "(", "round", "(", "(", "w", "-", "outsize", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "outsize", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", ",", "y1", "+", "outsize", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", ",", "y1", "+", "outsize", ")", ")", "\n", "# final transform", "\n", "return", "img", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "\n", "", "def", "_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# random mirror", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_size", "=", "self", ".", "crop_size", "\n", "# random scale (short edge)", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "long_size", "=", "random", ".", "randint", "(", "int", "(", "self", ".", "base_size", "*", "0.5", ")", ",", "int", "(", "self", ".", "base_size", "*", "2.0", ")", ")", "\n", "if", "h", ">", "w", ":", "\n", "            ", "oh", "=", "long_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "long_size", "/", "h", "+", "0.5", ")", "\n", "short_size", "=", "ow", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward": [[77, 101], ["base.BaseNet.backbone.startswith", "base.BaseNet.pretrained.mod1", "base.BaseNet.pretrained.pool2", "base.BaseNet.pretrained.mod2", "base.BaseNet.pretrained.pool3", "base.BaseNet.pretrained.mod3", "base.BaseNet.pretrained.mod4", "base.BaseNet.pretrained.mod5", "base.BaseNet.clone", "base.BaseNet.pretrained.mod6", "base.BaseNet.pretrained.mod7", "base.BaseNet.pretrained.bn_out", "base.BaseNet.pretrained.conv1", "base.BaseNet.pretrained.bn1", "base.BaseNet.pretrained.relu", "base.BaseNet.pretrained.maxpool", "base.BaseNet.pretrained.layer1", "base.BaseNet.pretrained.layer2", "base.BaseNet.pretrained.layer3", "base.BaseNet.pretrained.layer4"], "methods", ["None"], ["", "else", ":", "\n", "            ", "ow", "=", "long_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "long_size", "/", "w", "+", "0.5", ")", "\n", "short_size", "=", "oh", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "short_size", "<", "crop_size", ":", "\n", "            ", "padh", "=", "crop_size", "-", "oh", "if", "oh", "<", "crop_size", "else", "0", "\n", "padw", "=", "crop_size", "-", "ow", "if", "ow", "<", "crop_size", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_size", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_size", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "# final transform", "\n", "return", "img", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "\n", "", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask", ")", ")", ".", "long", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.evaluate": [[102, 111], ["base.BaseNet.forward", "isinstance", "utils.batch_pix_accuracy", "utils.batch_intersection_union"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.batch_pix_accuracy", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.metrics.batch_intersection_union"], ["", "", "def", "test_batchify_fn", "(", "data", ")", ":", "\n", "    ", "error_msg", "=", "\"batch must contain tensors, tuples or lists; found {}\"", "\n", "if", "isinstance", "(", "data", "[", "0", "]", ",", "(", "str", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "        ", "return", "list", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", "[", "0", "]", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "data", "=", "zip", "(", "*", "data", ")", "\n", "return", "[", "test_batchify_fn", "(", "i", ")", "for", "i", "in", "data", "]", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "batch", "[", "0", "]", ")", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.MultiEvalModule.__init__": [[115, 132], ["torch.nn.parallel.data_parallel.DataParallel.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.MultiEvalModule.parallel_forward": [[133, 151], ["base.MultiEvalModule.replicate", "base.MultiEvalModule.parallel_apply", "torch.nn.parallel.scatter_gather.scatter", "torch.nn.parallel.scatter_gather.scatter", "torch.nn.parallel.scatter_gather.scatter", "len", "len", "inputs.extend", "input.unsqueeze().cuda", "zip", "len", "len", "kwargs.extend", "len", "input.unsqueeze", "range", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.encoding.parallel.DataParallelModel.replicate", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.MultiEvalModule.forward": [[152, 244], ["image.size", "int", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "image.new().resize_().zero_().cuda", "base.resize_image", "int", "base.resize_image", "int", "base.resize_image", "base.module_inference", "image.new().resize_().zero_", "math.ceil", "int", "int", "base.pad_image", "base.module_inference", "base.crop_image", "pad_image.size", "range", "int", "int", "base.pad_image", "int", "int", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "image.new().resize_().zero_().cuda", "image.new().resize_().zero_().cuda", "range", "image.new().resize_", "math.ceil", "math.ceil", "min", "min", "base.crop_image", "base.pad_image", "base.module_inference", "base.crop_image", "image.new().resize_().zero_", "image.new().resize_().zero_", "image.new", "image.new().resize_", "image.new().resize_", "image.new", "image.new"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.resize_image", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.resize_image", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.resize_image", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.module_inference", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.pad_image", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.module_inference", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.crop_image", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.pad_image", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.crop_image", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.pad_image", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.module_inference", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.crop_image"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.get_backbone": [[25, 55], ["name.lower.lower", "ValueError", "str", "sorted", "models.keys"], "function", ["None"], ["if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "print", "(", "'BaseDataset: base_size {}, crop_size {}'", ".", "format", "(", "base_size", ",", "crop_size", ")", ")", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n", "", "@", "property", "\n", "def", "num_class", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "NUM_CLASS", "\n", "\n", "", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n", "", "def", "make_pred", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "pred_offset", "\n", "\n", "", "def", "_val_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "outsize", "=", "self", ".", "crop_size", "\n", "short_size", "=", "outsize", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "w", ">", "h", ":", "\n", "            ", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "            ", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.module_inference": [[246, 253], ["module.evaluate", "module.evaluate.exp", "base.flip_image", "module.evaluate", "base.flip_image"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.evaluate", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.flip_image", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.evaluate", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.flip_image"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.resize_image": [[254, 256], ["torch.interpolate"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.pad_image": [[257, 269], ["img.size", "img.new().resize_", "range", "numpy.array", "torch.pad", "numpy.array", "img.new", "img.new().resize_.size", "img.new().resize_.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.crop_image": [[270, 272], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.flip_image": [[273, 278], ["img.index_select", "img.dim", "torch.cuda.device_of", "torch.cuda.device_of", "torch.cuda.device_of", "torch.arange().type_as().long", "torch.arange().type_as().long", "torch.arange().type_as().long", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "torch.arange", "torch.arange", "torch.arange", "img.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.DeepLabV3.__init__": [[39, 44], ["base.BaseNet.__init__", "deeplab.DeepLabV3Head", "fcn.FCNHead"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ",", "aux", "=", "True", ",", "se_loss", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeepLabV3", ",", "self", ")", ".", "__init__", "(", "nclass", ",", "backbone", ",", "aux", ",", "se_loss", ",", "norm_layer", "=", "norm_layer", ",", "**", "kwargs", ")", "\n", "self", ".", "head", "=", "DeepLabV3Head", "(", "2048", ",", "nclass", ",", "norm_layer", ",", "self", ".", "_up_kwargs", ")", "\n", "if", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "FCNHead", "(", "1024", ",", "nclass", ",", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.DeepLabV3.forward": [[45, 58], ["torch.nn.functional.interpolate.size", "torch.nn.functional.interpolate.size", "deeplab.DeepLabV3.head", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "outputs.append", "tuple", "deeplab.DeepLabV3.base_forward", "deeplab.DeepLabV3.base_forward", "deeplab.DeepLabV3.auxlayer", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "outputs.append"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "choice_indices", "=", "None", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "base_forward", "(", "x", ")", "if", "choice_indices", "is", "None", "else", "self", ".", "base_forward", "(", "x", ",", "choice_indices", "=", "choice_indices", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "x", "=", "self", ".", "head", "(", "c4", ")", "\n", "x", "=", "interpolate", "(", "x", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "outputs", ".", "append", "(", "x", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "auxout", "=", "self", ".", "auxlayer", "(", "c3", ")", "\n", "auxout", "=", "interpolate", "(", "auxout", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "outputs", ".", "append", "(", "auxout", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.DeepLabV3Head.__init__": [[61, 71], ["torch.Module.__init__", "deeplab.ASPP_Module", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ",", "up_kwargs", ",", "atrous_rates", "=", "[", "12", ",", "24", ",", "36", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeepLabV3Head", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "in_channels", "//", "8", "\n", "self", ".", "aspp", "=", "ASPP_Module", "(", "in_channels", ",", "atrous_rates", ",", "norm_layer", ",", "up_kwargs", ",", "**", "kwargs", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inter_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inter_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.DeepLabV3Head.forward": [[72, 76], ["deeplab.DeepLabV3Head.aspp", "deeplab.DeepLabV3Head.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "x", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.AsppPooling.__init__": [[87, 94], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ",", "up_kwargs", ")", ":", "\n", "        ", "super", "(", "AsppPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_up_kwargs", "=", "up_kwargs", "\n", "self", ".", "gap", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.AsppPooling.forward": [[95, 99], ["x.size", "deeplab.AsppPooling.gap", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "pool", "=", "self", ".", "gap", "(", "x", ")", "\n", "return", "interpolate", "(", "pool", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.ASPP_Module.__init__": [[101, 119], ["torch.Module.__init__", "tuple", "torch.Sequential", "torch.Sequential", "deeplab.ASPPConv", "deeplab.ASPPConv", "deeplab.ASPPConv", "deeplab.AsppPooling", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.ASPPConv", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.ASPPConv", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.ASPPConv"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "atrous_rates", ",", "norm_layer", ",", "up_kwargs", ")", ":", "\n", "        ", "super", "(", "ASPP_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "in_channels", "//", "8", "\n", "rate1", ",", "rate2", ",", "rate3", "=", "tuple", "(", "atrous_rates", ")", "\n", "self", ".", "b0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "b1", "=", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate1", ",", "norm_layer", ")", "\n", "self", ".", "b2", "=", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate2", ",", "norm_layer", ")", "\n", "self", ".", "b3", "=", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate3", ",", "norm_layer", ")", "\n", "self", ".", "b4", "=", "AsppPooling", "(", "in_channels", ",", "out_channels", ",", "norm_layer", ",", "up_kwargs", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "5", "*", "out_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.5", ",", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.ASPP_Module.forward": [[120, 128], ["deeplab.ASPP_Module.b0", "deeplab.ASPP_Module.b1", "deeplab.ASPP_Module.b2", "deeplab.ASPP_Module.b3", "deeplab.ASPP_Module.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplab.ASPP_Module.project"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat0", "=", "self", ".", "b0", "(", "x", ")", "\n", "feat1", "=", "self", ".", "b1", "(", "x", ")", "\n", "feat2", "=", "self", ".", "b2", "(", "x", ")", "\n", "feat3", "=", "self", ".", "b3", "(", "x", ")", "\n", "feat4", "=", "self", ".", "b4", "(", "x", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ")", ",", "1", ")", "\n", "return", "self", ".", "project", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.ASPPConv": [[78, 85], ["torch.Sequential", "torch.Conv2d", "norm_layer", "torch.ReLU"], "function", ["None"], ["", "", "def", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "atrous_rate", ",", "norm_layer", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "atrous_rate", ",", "\n", "dilation", "=", "atrous_rate", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab": [[129, 139], ["deeplab.DeepLabV3", "DeepLabV3.load_state_dict", "torch.load", "torch.load", "get_model_file", "dataset.lower"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "def", "get_deeplab", "(", "dataset", "=", "'pascal_voc'", ",", "backbone", "=", "'resnet50s'", ",", "pretrained", "=", "False", ",", "\n", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "# infer number of classes", "\n", "    ", "from", "...", "datasets", "import", "datasets", ",", "acronyms", "\n", "model", "=", "DeepLabV3", "(", "datasets", "[", "dataset", ".", "lower", "(", ")", "]", ".", "NUM_CLASS", ",", "backbone", "=", "backbone", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "from", ".", ".", "model_store", "import", "get_model_file", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'deeplab_%s_%s'", "%", "(", "backbone", ",", "acronyms", "[", "dataset", "]", ")", ",", "root", "=", "root", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab_resnet50_ade": [[140, 158], ["deeplab.get_deeplab"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab"], ["", "def", "get_deeplab_resnet50_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepLabV3 model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_deeplab_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deeplab", "(", "'ade20k'", ",", "'resnet50s'", ",", "pretrained", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab_resnest50_ade": [[159, 177], ["deeplab.get_deeplab"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab"], ["", "def", "get_deeplab_resnest50_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepLabV3 model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_deeplab_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deeplab", "(", "'ade20k'", ",", "'resnest50'", ",", "pretrained", ",", "aux", "=", "True", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab_resnest101_ade": [[178, 196], ["deeplab.get_deeplab"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab"], ["", "def", "get_deeplab_resnest101_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepLabV3 model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_deeplab_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deeplab", "(", "'ade20k'", ",", "'resnest101'", ",", "pretrained", ",", "aux", "=", "True", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab_resnest200_ade": [[197, 215], ["deeplab.get_deeplab"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab"], ["", "def", "get_deeplab_resnest200_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepLabV3 model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_deeplab_resnest200_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deeplab", "(", "'ade20k'", ",", "'resnest200'", ",", "pretrained", ",", "aux", "=", "True", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab_resnest269_ade": [[217, 235], ["deeplab.get_deeplab"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab"], ["", "def", "get_deeplab_resnest269_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepLabV3 model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_deeplab_resnest200_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deeplab", "(", "'ade20k'", ",", "'resnest269'", ",", "pretrained", ",", "aux", "=", "True", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab_resnest50_pcontext": [[236, 253], ["deeplab.get_deeplab"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab"], ["", "def", "get_deeplab_resnest50_pcontext", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepLabV3 model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n    Examples\n    --------\n    >>> model = get_deeplab_resnest101_pcontext(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deeplab", "(", "'pcontext'", ",", "'resnest50'", ",", "pretrained", ",", "aux", "=", "True", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab_resnest101_pcontext": [[254, 272], ["deeplab.get_deeplab"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab"], ["", "def", "get_deeplab_resnest101_pcontext", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepLabV3 model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_deeplab_resnest101_pcontext(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deeplab", "(", "'pcontext'", ",", "'resnest101'", ",", "pretrained", ",", "aux", "=", "True", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab_resnest200_pcontext": [[273, 291], ["deeplab.get_deeplab"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab"], ["", "def", "get_deeplab_resnest200_pcontext", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepLabV3 model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = deeplab_resnest200_pcontext(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deeplab", "(", "'pcontext'", ",", "'resnest200'", ",", "pretrained", ",", "aux", "=", "True", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab_resnest269_pcontext": [[293, 311], ["deeplab.get_deeplab"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.deeplab.get_deeplab"], ["", "def", "get_deeplab_resnest269_pcontext", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"DeepLabV3 model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_deeplab_resnest269_pcontext(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_deeplab", "(", "'pcontext'", ",", "'resnest269'", ",", "pretrained", ",", "aux", "=", "True", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.psp.PSP.__init__": [[18, 23], ["base.BaseNet.__init__", "psp.PSPHead", "fcn.FCNHead"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ",", "aux", "=", "True", ",", "se_loss", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PSP", ",", "self", ")", ".", "__init__", "(", "nclass", ",", "backbone", ",", "aux", ",", "se_loss", ",", "norm_layer", "=", "norm_layer", ",", "**", "kwargs", ")", "\n", "self", ".", "head", "=", "PSPHead", "(", "2048", ",", "nclass", ",", "norm_layer", ",", "self", ".", "_up_kwargs", ")", "\n", "if", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "FCNHead", "(", "1024", ",", "nclass", ",", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.psp.PSP.forward": [[24, 37], ["torch.nn.functional.interpolate.size", "torch.nn.functional.interpolate.size", "psp.PSP.base_forward", "psp.PSP.head", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "outputs.append", "tuple", "psp.PSP.auxlayer", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "outputs.append"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "_", ",", "_", ",", "c3", ",", "c4", "=", "self", ".", "base_forward", "(", "x", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "x", "=", "self", ".", "head", "(", "c4", ")", "\n", "x", "=", "interpolate", "(", "x", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "outputs", ".", "append", "(", "x", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "auxout", "=", "self", ".", "auxlayer", "(", "c3", ")", "\n", "auxout", "=", "interpolate", "(", "auxout", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "outputs", ".", "append", "(", "auxout", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.psp.PSPHead.__init__": [[40, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.PyramidPooling", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ",", "up_kwargs", ")", ":", "\n", "        ", "super", "(", "PSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "in_channels", "//", "4", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "PyramidPooling", "(", "in_channels", ",", "norm_layer", ",", "up_kwargs", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "*", "2", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inter_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.psp.PSPHead.forward": [[50, 52], ["psp.PSPHead.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv5", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.psp.get_psp": [[53, 63], ["psp.PSP", "PSP.load_state_dict", "torch.load", "torch.load", "get_model_file", "dataset.lower"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "def", "get_psp", "(", "dataset", "=", "'pascal_voc'", ",", "backbone", "=", "'resnet50s'", ",", "pretrained", "=", "False", ",", "\n", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "# infer number of classes", "\n", "    ", "from", "...", "datasets", "import", "datasets", ",", "acronyms", "\n", "model", "=", "PSP", "(", "datasets", "[", "dataset", ".", "lower", "(", ")", "]", ".", "NUM_CLASS", ",", "backbone", "=", "backbone", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "from", ".", ".", "model_store", "import", "get_model_file", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'psp_%s_%s'", "%", "(", "backbone", ",", "acronyms", "[", "dataset", "]", ")", ",", "root", "=", "root", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.psp.get_psp_resnet50_ade": [[64, 82], ["psp.get_psp"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.psp.get_psp"], ["", "def", "get_psp_resnet50_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"PSP model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_psp_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_psp", "(", "'ade20k'", ",", "'resnet50s'", ",", "pretrained", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.FCN.__init__": [[43, 50], ["base.BaseNet.__init__", "fcn.FCNHead", "fcn.FCNHead"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ",", "aux", "=", "True", ",", "se_loss", "=", "False", ",", "with_global", "=", "False", ",", "\n", "norm_layer", "=", "SyncBatchNorm", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FCN", ",", "self", ")", ".", "__init__", "(", "nclass", ",", "backbone", ",", "aux", ",", "se_loss", ",", "norm_layer", "=", "norm_layer", ",", "\n", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "head", "=", "FCNHead", "(", "2048", ",", "nclass", ",", "norm_layer", ",", "self", ".", "_up_kwargs", ",", "with_global", ")", "\n", "if", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "FCNHead", "(", "1024", ",", "nclass", ",", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.FCN.forward": [[51, 63], ["fcn.FCN.base_forward", "fcn.FCN.head", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "tuple", "torch.nn.functional.interpolate.size", "torch.nn.functional.interpolate.size", "fcn.FCN.auxlayer", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "outputs.append"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "imsize", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "_", ",", "_", ",", "c3", ",", "c4", "=", "self", ".", "base_forward", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "head", "(", "c4", ")", "\n", "x", "=", "interpolate", "(", "x", ",", "imsize", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "outputs", "=", "[", "x", "]", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "auxout", "=", "self", ".", "auxlayer", "(", "c3", ")", "\n", "auxout", "=", "interpolate", "(", "auxout", ",", "imsize", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "outputs", ".", "append", "(", "auxout", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.Identity.__init__": [[66, 68], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.Identity.forward": [[69, 71], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.GlobalPooling.__init__": [[73, 80], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ",", "up_kwargs", ")", ":", "\n", "        ", "super", "(", "GlobalPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_up_kwargs", "=", "up_kwargs", "\n", "self", ".", "gap", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.GlobalPooling.forward": [[81, 85], ["x.size", "fcn.GlobalPooling.gap", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "pool", "=", "self", ".", "gap", "(", "x", ")", "\n", "return", "interpolate", "(", "pool", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.FCNHead.__init__": [[88, 109], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConcurrentModule", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "fcn.Identity", "fcn.GlobalPooling"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ",", "up_kwargs", "=", "{", "}", ",", "with_global", "=", "False", ")", ":", "\n", "        ", "super", "(", "FCNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "in_channels", "//", "4", "\n", "self", ".", "_up_kwargs", "=", "up_kwargs", "\n", "if", "with_global", ":", "\n", "            ", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "ConcurrentModule", "(", "[", "\n", "Identity", "(", ")", ",", "\n", "GlobalPooling", "(", "inter_channels", ",", "inter_channels", ",", "\n", "norm_layer", ",", "self", ".", "_up_kwargs", ")", ",", "\n", "]", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "inter_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inter_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.FCNHead.forward": [[110, 112], ["fcn.FCNHead.conv5"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv5", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.get_fcn": [[114, 139], ["fcn.FCN", "FCN.load_state_dict", "torch.load", "torch.load", "get_model_file", "dataset.lower"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "def", "get_fcn", "(", "dataset", "=", "'pascal_voc'", ",", "backbone", "=", "'resnet50s'", ",", "pretrained", "=", "False", ",", "\n", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"FCN model from the paper `\"Fully Convolutional Network for semantic segmentation\"\n    <https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf>`_\n    Parameters\n    ----------\n    dataset : str, default pascal_voc\n        The dataset that model pretrained on. (pascal_voc, ade20k)\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n    Examples\n    --------\n    >>> model = get_fcn(dataset='pascal_voc', backbone='resnet50s', pretrained=False)\n    >>> print(model)\n    \"\"\"", "\n", "# infer number of classes", "\n", "from", "...", "datasets", "import", "datasets", ",", "acronyms", "\n", "model", "=", "FCN", "(", "datasets", "[", "dataset", ".", "lower", "(", ")", "]", ".", "NUM_CLASS", ",", "backbone", "=", "backbone", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "from", ".", ".", "model_store", "import", "get_model_file", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'fcn_%s_%s'", "%", "(", "backbone", ",", "acronyms", "[", "dataset", "]", ")", ",", "root", "=", "root", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.get_fcn_resnet50_pcontext": [[140, 158], ["fcn.get_fcn"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.get_fcn"], ["", "def", "get_fcn_resnet50_pcontext", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet-PSP model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_fcn_resnet50_pcontext(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_fcn", "(", "'pcontext'", ",", "'resnet50s'", ",", "pretrained", ",", "root", "=", "root", ",", "aux", "=", "False", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.get_fcn_resnet50_ade": [[159, 177], ["fcn.get_fcn"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.get_fcn"], ["", "def", "get_fcn_resnet50_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet-PSP model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_fcn_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_fcn", "(", "'ade20k'", ",", "'resnet50s'", ",", "pretrained", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.get_fcn_resnest50_ade": [[178, 197], ["fcn.get_fcn"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.get_fcn"], ["", "def", "get_fcn_resnest50_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet-PSP model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_fcn_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "kwargs", "[", "'aux'", "]", "=", "True", "\n", "return", "get_fcn", "(", "'ade20k'", ",", "'resnest50'", ",", "pretrained", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.get_fcn_resnest50_pcontext": [[198, 217], ["fcn.get_fcn"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcn.get_fcn"], ["", "def", "get_fcn_resnest50_pcontext", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet-PSP model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_fcn_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "kwargs", "[", "'aux'", "]", "=", "True", "\n", "return", "get_fcn", "(", "'pcontext'", ",", "'resnest50'", ",", "pretrained", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.ATTEN.__init__": [[21, 33], ["base.BaseNet.__init__", "atten.ATTENHead", "atten.ATTEN.backbone.startswith", "fcn.FCNHead"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ",", "nheads", "=", "8", ",", "nmixs", "=", "1", ",", "with_global", "=", "True", ",", "\n", "with_enc", "=", "True", ",", "with_lateral", "=", "False", ",", "aux", "=", "True", ",", "se_loss", "=", "False", ",", "\n", "norm_layer", "=", "SyncBatchNorm", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ATTEN", ",", "self", ")", ".", "__init__", "(", "nclass", ",", "backbone", ",", "aux", ",", "se_loss", ",", "\n", "norm_layer", "=", "norm_layer", ",", "**", "kwargs", ")", "\n", "in_channels", "=", "4096", "if", "self", ".", "backbone", ".", "startswith", "(", "'wideresnet'", ")", "else", "2048", "\n", "self", ".", "head", "=", "ATTENHead", "(", "in_channels", ",", "nclass", ",", "norm_layer", ",", "self", ".", "_up_kwargs", ",", "\n", "nheads", "=", "nheads", ",", "nmixs", "=", "nmixs", ",", "with_global", "=", "with_global", ",", "\n", "with_enc", "=", "with_enc", ",", "se_loss", "=", "se_loss", ",", "\n", "lateral", "=", "with_lateral", ")", "\n", "if", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "FCNHead", "(", "1024", ",", "nclass", ",", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.ATTEN.forward": [[34, 47], ["atten.ATTEN.base_forward", "list", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "tuple", "list.size", "atten.ATTEN.head", "atten.ATTEN.auxlayer", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "list.append"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "imsize", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "#_, _, c3, c4 = self.base_forward(x)", "\n", "#x = list(self.head(c4))", "\n", "features", "=", "self", ".", "base_forward", "(", "x", ")", "\n", "x", "=", "list", "(", "self", ".", "head", "(", "*", "features", ")", ")", "\n", "x", "[", "0", "]", "=", "interpolate", "(", "x", "[", "0", "]", ",", "imsize", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "if", "self", ".", "aux", ":", "\n", "#auxout = self.auxlayer(c3)", "\n", "            ", "auxout", "=", "self", ".", "auxlayer", "(", "features", "[", "2", "]", ")", "\n", "auxout", "=", "interpolate", "(", "auxout", ",", "imsize", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "x", ".", "append", "(", "auxout", ")", "\n", "", "return", "tuple", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.ATTEN.demo": [[48, 52], ["atten.ATTEN.base_forward", "atten.ATTEN.head.demo", "x.size"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward", "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.ATTENHead.demo"], ["", "def", "demo", "(", "self", ",", "x", ")", ":", "\n", "        ", "imsize", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "features", "=", "self", ".", "base_forward", "(", "x", ")", "\n", "return", "self", ".", "head", ".", "demo", "(", "*", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.GlobalPooling.__init__": [[54, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ",", "up_kwargs", ")", ":", "\n", "        ", "super", "(", "GlobalPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_up_kwargs", "=", "up_kwargs", "\n", "self", ".", "gap", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.GlobalPooling.forward": [[62, 66], ["x.size", "atten.GlobalPooling.gap", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "pool", "=", "self", ".", "gap", "(", "x", ")", "\n", "return", "interpolate", "(", "pool", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.ATTENHead.__init__": [[68, 113], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ACFModule", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.ConcurrentModule", "torch.Sequential", "torch.Sequential", "encnet.EncModule", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "atten.GlobalPooling", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ",", "up_kwargs", ",", "\n", "nheads", ",", "nmixs", ",", "with_global", ",", "\n", "with_enc", ",", "se_loss", ",", "lateral", ")", ":", "\n", "        ", "super", "(", "ATTENHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_enc", "=", "with_enc", "\n", "self", ".", "se_loss", "=", "se_loss", "\n", "self", ".", "_up_kwargs", "=", "up_kwargs", "\n", "inter_channels", "=", "in_channels", "//", "4", "\n", "self", ".", "lateral", "=", "lateral", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "lateral", ":", "\n", "            ", "self", ".", "connect", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", ")", "\n", "self", ".", "fusion", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", "*", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "extended_channels", "=", "0", "\n", "self", ".", "atten", "=", "ACFModule", "(", "nheads", ",", "nmixs", ",", "inter_channels", ",", "inter_channels", "//", "nheads", "*", "nmixs", ",", "\n", "inter_channels", "//", "nheads", ",", "norm_layer", ")", "\n", "if", "with_global", ":", "\n", "            ", "extended_channels", "=", "inter_channels", "\n", "self", ".", "atten_layers", "=", "ConcurrentModule", "(", "[", "\n", "GlobalPooling", "(", "inter_channels", ",", "extended_channels", ",", "norm_layer", ",", "self", ".", "_up_kwargs", ")", ",", "\n", "self", ".", "atten", ",", "\n", "#nn.Sequential(*atten),", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "atten_layers", "=", "nn", ".", "Sequential", "(", "*", "atten", ")", "\n", "", "if", "with_enc", ":", "\n", "            ", "self", ".", "encmodule", "=", "EncModule", "(", "inter_channels", "+", "extended_channels", ",", "out_channels", ",", "ncodes", "=", "32", ",", "\n", "se_loss", "=", "se_loss", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "0.1", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inter_channels", "+", "extended_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.ATTENHead.forward": [[114, 127], ["atten.ATTENHead.conv5", "atten.ATTENHead.atten_layers", "atten.ATTENHead.conv6", "tuple", "atten.ATTENHead.fusion", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "atten.ATTENHead.encmodule"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "feat", "=", "self", ".", "conv5", "(", "inputs", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "lateral", ":", "\n", "            ", "c2", "=", "self", ".", "connect", "[", "0", "]", "(", "inputs", "[", "1", "]", ")", "\n", "c3", "=", "self", ".", "connect", "[", "1", "]", "(", "inputs", "[", "2", "]", ")", "\n", "feat", "=", "self", ".", "fusion", "(", "torch", ".", "cat", "(", "[", "feat", ",", "c2", ",", "c3", "]", ",", "1", ")", ")", "\n", "", "feat", "=", "self", ".", "atten_layers", "(", "feat", ")", "\n", "if", "self", ".", "with_enc", ":", "\n", "            ", "outs", "=", "list", "(", "self", ".", "encmodule", "(", "feat", ")", ")", "\n", "", "else", ":", "\n", "            ", "outs", "=", "[", "feat", "]", "\n", "", "outs", "[", "0", "]", "=", "self", ".", "conv6", "(", "outs", "[", "0", "]", ")", "\n", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.ATTENHead.demo": [[128, 136], ["atten.ATTENHead.conv5", "atten.ATTENHead.atten.demo", "atten.ATTENHead.fusion", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.ATTENHead.demo"], ["", "def", "demo", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "feat", "=", "self", ".", "conv5", "(", "inputs", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "lateral", ":", "\n", "            ", "c2", "=", "self", ".", "connect", "[", "0", "]", "(", "inputs", "[", "1", "]", ")", "\n", "c3", "=", "self", ".", "connect", "[", "1", "]", "(", "inputs", "[", "2", "]", ")", "\n", "feat", "=", "self", ".", "fusion", "(", "torch", ".", "cat", "(", "[", "feat", ",", "c2", ",", "c3", "]", ",", "1", ")", ")", "\n", "", "attn", "=", "self", ".", "atten", ".", "demo", "(", "feat", ")", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.atten.get_atten": [[137, 164], ["atten.ATTEN", "ATTEN.load_state_dict", "torch.load", "torch.load", "get_model_file", "dataset.lower"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "def", "get_atten", "(", "dataset", "=", "'pascal_voc'", ",", "backbone", "=", "'resnet50s'", ",", "pretrained", "=", "False", ",", "\n", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ATTEN model from the paper `\"Fully Convolutional Network for semantic segmentation\"\n    <https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_atten.pdf>`_\n    Parameters\n    ----------\n    dataset : str, default pascal_voc\n        The dataset that model pretrained on. (pascal_voc, ade20k)\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    pooling_mode : str, default 'avg'\n        Using 'max' pool or 'avg' pool in the Attention module.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n    Examples\n    --------\n    >>> model = get_atten(dataset='pascal_voc', backbone='resnet50s', pretrained=False)\n    >>> print(model)\n    \"\"\"", "\n", "# infer number of classes", "\n", "from", "...", "datasets", "import", "datasets", ",", "acronyms", "\n", "model", "=", "ATTEN", "(", "datasets", "[", "dataset", ".", "lower", "(", ")", "]", ".", "NUM_CLASS", ",", "backbone", "=", "backbone", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "from", ".", "model_store", "import", "get_model_file", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'atten_%s_%s'", "%", "(", "backbone", ",", "acronyms", "[", "dataset", "]", ")", ",", "root", "=", "root", ")", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcfpn.FCFPN.__init__": [[43, 47], ["base.BaseNet.__init__", "fcfpn.FCFPNHead"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ",", "aux", "=", "True", ",", "se_loss", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FCFPN", ",", "self", ")", ".", "__init__", "(", "nclass", ",", "backbone", ",", "aux", ",", "se_loss", ",", "dilated", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "head", "=", "FCFPNHead", "(", "nclass", ",", "norm_layer", ",", "up_kwargs", "=", "self", ".", "_up_kwargs", ")", "\n", "assert", "not", "aux", ",", "\"FCFPN does not support aux loss\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcfpn.FCFPN.forward": [[48, 55], ["fcfpn.FCFPN.base_forward", "list", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "tuple", "list.size", "fcfpn.FCFPN.head"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "imsize", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "features", "=", "self", ".", "base_forward", "(", "x", ")", "\n", "\n", "x", "=", "list", "(", "self", ".", "head", "(", "*", "features", ")", ")", "\n", "x", "[", "0", "]", "=", "upsample", "(", "x", "[", "0", "]", ",", "imsize", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "return", "tuple", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcfpn.FCFPNHead.__init__": [[58, 89], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fpn_lateral.append", "fpn_out.append", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "len", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "len", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "norm_layer", "=", "None", ",", "fpn_inchannels", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "\n", "fpn_dim", "=", "256", ",", "up_kwargs", "=", "None", ")", ":", "\n", "        ", "super", "(", "FCFPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# bilinear upsample options", "\n", "assert", "up_kwargs", "is", "not", "None", "\n", "self", ".", "_up_kwargs", "=", "up_kwargs", "\n", "fpn_lateral", "=", "[", "]", "\n", "for", "fpn_inchannel", "in", "fpn_inchannels", "[", ":", "-", "1", "]", ":", "\n", "            ", "fpn_lateral", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "fpn_inchannel", ",", "fpn_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "fpn_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", ")", "\n", "", "self", ".", "fpn_lateral", "=", "nn", ".", "ModuleList", "(", "fpn_lateral", ")", "\n", "fpn_out", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "fpn_inchannels", ")", "-", "1", ")", ":", "\n", "            ", "fpn_out", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "fpn_dim", ",", "fpn_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "fpn_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", ")", "\n", "", "self", ".", "fpn_out", "=", "nn", ".", "ModuleList", "(", "fpn_out", ")", "\n", "self", ".", "c4conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "fpn_inchannels", "[", "-", "1", "]", ",", "fpn_dim", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "fpn_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "inter_channels", "=", "len", "(", "fpn_inchannels", ")", "*", "fpn_dim", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inter_channels", ",", "512", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "out_channels", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcfpn.FCFPNHead.forward": [[90, 115], ["hasattr", "fcfpn.FCFPNHead.c4conv", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "reversed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fcfpn.FCFPNHead.extramodule", "inputs[].size", "range", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.cat.append", "torch.cat.append", "fcfpn.FCFPNHead.conv5", "len", "feat_i.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "c4", "=", "inputs", "[", "-", "1", "]", "\n", "#se_pred = False", "\n", "if", "hasattr", "(", "self", ",", "'extramodule'", ")", ":", "\n", "#if self.extramodule.se_loss:", "\n", "#    se_pred = True", "\n", "#    feat, se_out = self.extramodule(feat)", "\n", "#else:", "\n", "            ", "c4", "=", "self", ".", "extramodule", "(", "c4", ")", "\n", "", "feat", "=", "self", ".", "c4conv", "(", "c4", ")", "\n", "c1_size", "=", "inputs", "[", "0", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "feat_up", "=", "upsample", "(", "feat", ",", "c1_size", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "fpn_features", "=", "[", "feat_up", "]", "\n", "# c4, c3, c2, c1", "\n", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "inputs", ")", "-", "1", ")", ")", ":", "\n", "            ", "feat_i", "=", "self", ".", "fpn_lateral", "[", "i", "]", "(", "inputs", "[", "i", "]", ")", "\n", "feat", "=", "upsample", "(", "feat", ",", "feat_i", ".", "size", "(", ")", "[", "2", ":", "]", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "feat", "=", "feat", "+", "feat_i", "\n", "# upsample to the same size with c1", "\n", "feat_up", "=", "upsample", "(", "self", ".", "fpn_out", "[", "i", "]", "(", "feat", ")", ",", "c1_size", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "fpn_features", ".", "append", "(", "feat_up", ")", "\n", "", "fpn_features", "=", "torch", ".", "cat", "(", "fpn_features", ",", "1", ")", "\n", "#if se_pred:", "\n", "#    return (self.conv5(fpn_features), se_out)", "\n", "return", "(", "self", ".", "conv5", "(", "fpn_features", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcfpn.get_fcfpn": [[117, 147], ["fcfpn.FCFPN", "FCFPN.load_state_dict", "torch.load", "torch.load", "get_model_file", "dataset.lower"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "def", "get_fcfpn", "(", "dataset", "=", "'pascal_voc'", ",", "backbone", "=", "'resnet50'", ",", "pretrained", "=", "False", ",", "\n", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"FCFPN model from the paper `\"Fully Convolutional Network for semantic segmentation\"\n    <https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcfpn.pdf>`_\n    Parameters\n    ----------\n    dataset : str, default pascal_voc\n        The dataset that model pretrained on. (pascal_voc, ade20k)\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n    Examples\n    --------\n    >>> model = get_fcfpn(dataset='pascal_voc', backbone='resnet50s', pretrained=False)\n    >>> print(model)\n    \"\"\"", "\n", "acronyms", "=", "{", "\n", "'pascal_voc'", ":", "'voc'", ",", "\n", "'pascal_aug'", ":", "'voc'", ",", "\n", "'ade20k'", ":", "'ade'", ",", "\n", "}", "\n", "# infer number of classes", "\n", "from", "...", "datasets", "import", "datasets", ",", "VOCSegmentation", ",", "VOCAugSegmentation", ",", "ADE20KSegmentation", "\n", "model", "=", "FCFPN", "(", "datasets", "[", "dataset", ".", "lower", "(", ")", "]", ".", "NUM_CLASS", ",", "backbone", "=", "backbone", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "from", ".", ".", "model_store", "import", "get_model_file", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'fcfpn_%s_%s'", "%", "(", "backbone", ",", "acronyms", "[", "dataset", "]", ")", ",", "root", "=", "root", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcfpn.get_fcfpn_50_ade": [[149, 167], ["fcfpn.get_fcfpn"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.fcfpn.get_fcfpn"], ["", "def", "get_fcfpn_50_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet-PSP model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_fcfpn_50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_fcfpn", "(", "'ade20k'", ",", "'resnet50s'", ",", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.__init__.get_segmentation_model": [[10, 21], ["name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.EncNet.__init__": [[21, 30], ["base.BaseNet.__init__", "encnet.EncHead", "fcn.FCNHead"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ",", "aux", "=", "True", ",", "se_loss", "=", "True", ",", "lateral", "=", "False", ",", "\n", "norm_layer", "=", "SyncBatchNorm", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EncNet", ",", "self", ")", ".", "__init__", "(", "nclass", ",", "backbone", ",", "aux", ",", "se_loss", ",", "\n", "norm_layer", "=", "norm_layer", ",", "**", "kwargs", ")", "\n", "self", ".", "head", "=", "EncHead", "(", "2048", ",", "self", ".", "nclass", ",", "se_loss", "=", "se_loss", ",", "\n", "lateral", "=", "lateral", ",", "norm_layer", "=", "norm_layer", ",", "\n", "up_kwargs", "=", "self", ".", "_up_kwargs", ")", "\n", "if", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "FCNHead", "(", "1024", ",", "nclass", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.EncNet.forward": [[31, 42], ["encnet.EncNet.base_forward", "list", "torch.interpolate", "torch.interpolate", "torch.interpolate", "tuple", "list.size", "encnet.EncNet.head", "encnet.EncNet.auxlayer", "torch.interpolate", "torch.interpolate", "torch.interpolate", "list.append"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.base.BaseNet.base_forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "imsize", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "features", "=", "self", ".", "base_forward", "(", "x", ")", "\n", "\n", "x", "=", "list", "(", "self", ".", "head", "(", "*", "features", ")", ")", "\n", "x", "[", "0", "]", "=", "F", ".", "interpolate", "(", "x", "[", "0", "]", ",", "imsize", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "auxout", "=", "self", ".", "auxlayer", "(", "features", "[", "2", "]", ")", "\n", "auxout", "=", "F", ".", "interpolate", "(", "auxout", ",", "imsize", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "x", ".", "append", "(", "auxout", ")", "\n", "", "return", "tuple", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.EncModule.__init__": [[45, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Encoding", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Mean", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "nclass", ",", "ncodes", "=", "32", ",", "se_loss", "=", "True", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "EncModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se_loss", "=", "se_loss", "\n", "self", ".", "encoding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Encoding", "(", "D", "=", "in_channels", ",", "K", "=", "ncodes", ")", ",", "\n", "norm_layer", "(", "ncodes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Mean", "(", "dim", "=", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "in_channels", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "if", "self", ".", "se_loss", ":", "\n", "            ", "self", ".", "selayer", "=", "nn", ".", "Linear", "(", "in_channels", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.EncModule.forward": [[62, 71], ["encnet.EncModule.encoding", "x.size", "encnet.EncModule.fc", "encnet.EncModule.view", "tuple", "torch.relu_", "torch.relu_", "torch.relu_", "outputs.append", "encnet.EncModule.selayer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "en", "=", "self", ".", "encoding", "(", "x", ")", "\n", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "gamma", "=", "self", ".", "fc", "(", "en", ")", "\n", "y", "=", "gamma", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "outputs", "=", "[", "F", ".", "relu_", "(", "x", "+", "x", "*", "y", ")", "]", "\n", "if", "self", ".", "se_loss", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "selayer", "(", "en", ")", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.EncHead.__init__": [[74, 103], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "encnet.EncModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "se_loss", "=", "True", ",", "lateral", "=", "True", ",", "\n", "norm_layer", "=", "None", ",", "up_kwargs", "=", "None", ")", ":", "\n", "        ", "super", "(", "EncHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se_loss", "=", "se_loss", "\n", "self", ".", "lateral", "=", "lateral", "\n", "self", ".", "up_kwargs", "=", "up_kwargs", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "512", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "lateral", ":", "\n", "            ", "self", ".", "connect", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", ")", "\n", "self", ".", "fusion", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", "*", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "self", ".", "encmodule", "=", "EncModule", "(", "512", ",", "out_channels", ",", "ncodes", "=", "32", ",", "\n", "se_loss", "=", "se_loss", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "0.1", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "out_channels", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.EncHead.forward": [[104, 113], ["encnet.EncHead.conv5", "list", "encnet.EncHead.conv6", "tuple", "encnet.EncHead.fusion", "encnet.EncHead.encmodule", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "feat", "=", "self", ".", "conv5", "(", "inputs", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "lateral", ":", "\n", "            ", "c2", "=", "self", ".", "connect", "[", "0", "]", "(", "inputs", "[", "1", "]", ")", "\n", "c3", "=", "self", ".", "connect", "[", "1", "]", "(", "inputs", "[", "2", "]", ")", "\n", "feat", "=", "self", ".", "fusion", "(", "torch", ".", "cat", "(", "[", "feat", ",", "c2", ",", "c3", "]", ",", "1", ")", ")", "\n", "", "outs", "=", "list", "(", "self", ".", "encmodule", "(", "feat", ")", ")", "\n", "outs", "[", "0", "]", "=", "self", ".", "conv6", "(", "outs", "[", "0", "]", ")", "\n", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet": [[115, 146], ["encnet.EncNet", "dataset.lower().startswith", "EncNet.load_state_dict", "torch.load", "torch.load", "torch.load", "dataset.lower", "get_model_file", "dataset.lower"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.model_store.get_model_file"], ["", "", "def", "get_encnet", "(", "dataset", "=", "'pascal_voc'", ",", "backbone", "=", "'resnet50s'", ",", "pretrained", "=", "False", ",", "\n", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    dataset : str, default pascal_voc\n        The dataset that model pretrained on. (pascal_voc, ade20k)\n    backbone : str, default resnet50s\n        The backbone network. (resnet50s, 101s, 152s)\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_encnet(dataset='pascal_voc', backbone='resnet50s', pretrained=False)\n    >>> print(model)\n    \"\"\"", "\n", "kwargs", "[", "'lateral'", "]", "=", "True", "if", "dataset", ".", "lower", "(", ")", ".", "startswith", "(", "'p'", ")", "else", "False", "\n", "# infer number of classes", "\n", "from", "...", "datasets", "import", "datasets", ",", "acronyms", "\n", "model", "=", "EncNet", "(", "datasets", "[", "dataset", ".", "lower", "(", ")", "]", ".", "NUM_CLASS", ",", "backbone", "=", "backbone", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "from", ".", ".", "model_store", "import", "get_model_file", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'encnet_%s_%s'", "%", "(", "backbone", ",", "acronyms", "[", "dataset", "]", ")", ",", "root", "=", "root", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet_resnet50_pcontext": [[147, 166], ["encnet.get_encnet"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet"], ["", "def", "get_encnet_resnet50_pcontext", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_encnet_resnet50_pcontext(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_encnet", "(", "'pcontext'", ",", "'resnet50s'", ",", "pretrained", ",", "root", "=", "root", ",", "aux", "=", "True", ",", "\n", "base_size", "=", "520", ",", "crop_size", "=", "480", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet_resnet101_coco": [[167, 186], ["encnet.get_encnet"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet"], ["", "def", "get_encnet_resnet101_coco", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_encnet_resnet101_coco(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_encnet", "(", "'coco'", ",", "'resnet101s'", ",", "pretrained", ",", "root", "=", "root", ",", "aux", "=", "True", ",", "\n", "base_size", "=", "520", ",", "crop_size", "=", "480", ",", "lateral", "=", "True", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet_resnet101_pcontext": [[187, 206], ["encnet.get_encnet"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet"], ["", "def", "get_encnet_resnet101_pcontext", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_encnet_resnet101_pcontext(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_encnet", "(", "'pcontext'", ",", "'resnet101s'", ",", "pretrained", ",", "root", "=", "root", ",", "aux", "=", "True", ",", "\n", "base_size", "=", "520", ",", "crop_size", "=", "480", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet_resnet50_ade": [[207, 226], ["encnet.get_encnet"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet"], ["", "def", "get_encnet_resnet50_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_encnet_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_encnet", "(", "'ade20k'", ",", "'resnet50s'", ",", "pretrained", ",", "root", "=", "root", ",", "aux", "=", "True", ",", "\n", "base_size", "=", "520", ",", "crop_size", "=", "480", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet_resnet101_ade": [[227, 246], ["encnet.get_encnet"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet"], ["", "def", "get_encnet_resnet101_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_encnet_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_encnet", "(", "'ade20k'", ",", "'resnet101s'", ",", "pretrained", ",", "root", "=", "root", ",", "aux", "=", "True", ",", "\n", "base_size", "=", "640", ",", "crop_size", "=", "576", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet_resnet152_ade": [[247, 266], ["encnet.get_encnet"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.sseg.encnet.get_encnet"], ["", "def", "get_encnet_resnet152_ade", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"EncNet model from the paper `\"Context Encoding for Semantic Segmentation\"\n    <https://arxiv.org/pdf/1803.08904.pdf>`_\n\n    Parameters\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.encoding/models'\n        Location for keeping the model parameters.\n\n\n    Examples\n    --------\n    >>> model = get_encnet_resnet50_ade(pretrained=True)\n    >>> print(model)\n    \"\"\"", "\n", "return", "get_encnet", "(", "'ade20k'", ",", "'resnet152s'", ",", "pretrained", ",", "root", "=", "root", ",", "aux", "=", "True", ",", "\n", "base_size", "=", "520", ",", "crop_size", "=", "480", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.get_transform.get_transform": [[12, 81], ["Normalize", "int", "train_transforms.extend", "val_transforms.extend", "Compose", "Compose", "train_transforms.append", "train_transforms.extend", "val_transforms.extend", "train_transforms.extend", "val_transforms.extend", "Compose", "Compose", "RandAugment", "RandomHorizontalFlip", "ColorJitter", "ToTensor", "transforms.Lighting", "ToTensor", "Compose", "Compose", "transforms.ERandomCrop", "transforms.ECenterCrop", "RandomResizedCrop", "Resize", "CenterCrop", "Resize", "RandomResizedCrop", "RandomHorizontalFlip", "ColorJitter", "ToTensor", "transforms.Lighting", "Resize", "CenterCrop", "ToTensor", "RandomCrop", "RandomHorizontalFlip", "ToTensor", "Normalize", "ToTensor", "Normalize"], "function", ["None"], ["def", "get_transform", "(", "dataset", ",", "base_size", "=", "None", ",", "crop_size", "=", "224", ",", "rand_aug", "=", "False", ",", "etrans", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "normalize", "=", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "base_size", "=", "base_size", "if", "base_size", "is", "not", "None", "else", "int", "(", "1.0", "*", "crop_size", "/", "0.875", ")", "\n", "if", "dataset", "==", "'imagenet'", ":", "\n", "        ", "train_transforms", "=", "[", "]", "\n", "val_transforms", "=", "[", "]", "\n", "if", "rand_aug", ":", "\n", "            ", "from", ".", "autoaug", "import", "RandAugment", "\n", "train_transforms", ".", "append", "(", "RandAugment", "(", "2", ",", "12", ")", ")", "\n", "", "if", "etrans", ":", "\n", "            ", "train_transforms", ".", "extend", "(", "[", "\n", "ERandomCrop", "(", "crop_size", ")", ",", "\n", "]", ")", "\n", "val_transforms", ".", "extend", "(", "[", "\n", "ECenterCrop", "(", "crop_size", ")", ",", "\n", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "train_transforms", ".", "extend", "(", "[", "\n", "RandomResizedCrop", "(", "crop_size", ")", ",", "\n", "]", ")", "\n", "val_transforms", ".", "extend", "(", "[", "\n", "Resize", "(", "base_size", ")", ",", "\n", "CenterCrop", "(", "crop_size", ")", ",", "\n", "]", ")", "\n", "", "train_transforms", ".", "extend", "(", "[", "\n", "RandomHorizontalFlip", "(", ")", ",", "\n", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Lighting", "(", "0.1", ",", "_imagenet_pca", "[", "'eigval'", "]", ",", "_imagenet_pca", "[", "'eigvec'", "]", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "val_transforms", ".", "extend", "(", "[", "\n", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "transform_train", "=", "Compose", "(", "train_transforms", ")", "\n", "transform_val", "=", "Compose", "(", "val_transforms", ")", "\n", "", "elif", "dataset", "==", "'minc'", ":", "\n", "        ", "transform_train", "=", "Compose", "(", "[", "\n", "Resize", "(", "base_size", ")", ",", "\n", "RandomResizedCrop", "(", "crop_size", ")", ",", "\n", "RandomHorizontalFlip", "(", ")", ",", "\n", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Lighting", "(", "0.1", ",", "_imagenet_pca", "[", "'eigval'", "]", ",", "_imagenet_pca", "[", "'eigvec'", "]", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "transform_val", "=", "Compose", "(", "[", "\n", "Resize", "(", "base_size", ")", ",", "\n", "CenterCrop", "(", "crop_size", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "elif", "dataset", "==", "'cifar10'", ":", "\n", "        ", "transform_train", "=", "Compose", "(", "[", "\n", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "RandomHorizontalFlip", "(", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "\n", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "transform_val", "=", "Compose", "(", "[", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "\n", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "", "return", "transform_train", ",", "transform_val", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.transforms.Lighting.__init__": [[19, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.transforms.Lighting.__call__": [[24, 35], ["img.new().resize_().normal_", "transforms.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "transforms.Lighting.view().expand_as", "img.new().resize_", "transforms.Lighting.eigvec.type_as().clone().mul().mul().sum", "transforms.Lighting.view", "img.new", "transforms.Lighting.eigvec.type_as().clone().mul().mul", "transforms.Lighting.eigval.view().expand", "transforms.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "transforms.Lighting.eigval.view", "transforms.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "transforms.Lighting.eigvec.type_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.transforms.ERandomCrop.__init__": [[39, 53], ["transforms.ECenterCrop", "torchvision.transforms.Resize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgsize", ",", "min_covered", "=", "0.1", ",", "aspect_ratio_range", "=", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", ",", "\n", "area_range", "=", "(", "0.1", ",", "1.0", ")", ",", "max_attempts", "=", "10", ")", ":", "\n", "        ", "assert", "0.0", "<", "min_covered", "\n", "assert", "0", "<", "aspect_ratio_range", "[", "0", "]", "<=", "aspect_ratio_range", "[", "1", "]", "\n", "assert", "0", "<", "area_range", "[", "0", "]", "<=", "area_range", "[", "1", "]", "\n", "assert", "1", "<=", "max_attempts", "\n", "\n", "self", ".", "imgsize", "=", "imgsize", "\n", "self", ".", "min_covered", "=", "min_covered", "\n", "self", ".", "aspect_ratio_range", "=", "aspect_ratio_range", "\n", "self", ".", "area_range", "=", "area_range", "\n", "self", ".", "max_attempts", "=", "max_attempts", "\n", "self", ".", "_fallback", "=", "ECenterCrop", "(", "imgsize", ")", "\n", "self", ".", "resize_method", "=", "Resize", "(", "(", "imgsize", ",", "imgsize", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.transforms.ERandomCrop.__call__": [[54, 95], ["range", "transforms.ERandomCrop._fallback", "random.uniform", "int", "int", "int", "int", "random.randint", "random.randint", "img.crop.crop.crop", "transforms.ERandomCrop.resize_method", "round", "round", "int", "round", "round", "transforms.ERandomCrop._fallback", "math.sqrt", "math.sqrt", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "original_width", ",", "original_height", "=", "img", ".", "size", "\n", "min_area", "=", "self", ".", "area_range", "[", "0", "]", "*", "(", "original_width", "*", "original_height", ")", "\n", "max_area", "=", "self", ".", "area_range", "[", "1", "]", "*", "(", "original_width", "*", "original_height", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "max_attempts", ")", ":", "\n", "            ", "aspect_ratio", "=", "random", ".", "uniform", "(", "*", "self", ".", "aspect_ratio_range", ")", "\n", "height", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "min_area", "/", "aspect_ratio", ")", ")", ")", "\n", "max_height", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "max_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "max_height", "*", "aspect_ratio", ">", "original_width", ":", "\n", "                ", "max_height", "=", "(", "original_width", "+", "0.5", "-", "1e-7", ")", "/", "aspect_ratio", "\n", "max_height", "=", "int", "(", "max_height", ")", "\n", "if", "max_height", "*", "aspect_ratio", ">", "original_width", ":", "\n", "                    ", "max_height", "-=", "1", "\n", "\n", "", "", "if", "max_height", ">", "original_height", ":", "\n", "                ", "max_height", "=", "original_height", "\n", "\n", "", "if", "height", ">=", "max_height", ":", "\n", "                ", "height", "=", "max_height", "\n", "\n", "", "height", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "height", ",", "max_height", ")", ")", ")", "\n", "width", "=", "int", "(", "round", "(", "height", "*", "aspect_ratio", ")", ")", "\n", "area", "=", "width", "*", "height", "\n", "\n", "if", "area", "<", "min_area", "or", "area", ">", "max_area", ":", "\n", "                ", "continue", "\n", "", "if", "width", ">", "original_width", "or", "height", ">", "original_height", ":", "\n", "                ", "continue", "\n", "", "if", "area", "<", "self", ".", "min_covered", "*", "(", "original_width", "*", "original_height", ")", ":", "\n", "                ", "continue", "\n", "", "if", "width", "==", "original_width", "and", "height", "==", "original_height", ":", "\n", "                ", "return", "self", ".", "_fallback", "(", "img", ")", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "original_width", "-", "width", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "original_height", "-", "height", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x", ",", "y", ",", "x", "+", "width", ",", "y", "+", "height", ")", ")", "\n", "return", "self", ".", "resize_method", "(", "img", ")", "\n", "\n", "", "return", "self", ".", "_fallback", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.transforms.ECenterCrop.__init__": [[106, 109], ["torchvision.transforms.Resize"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "imgsize", ")", ":", "\n", "        ", "self", ".", "imgsize", "=", "imgsize", "\n", "self", ".", "resize_method", "=", "Resize", "(", "(", "imgsize", ",", "imgsize", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.transforms.ECenterCrop.__call__": [[110, 121], ["min", "int", "int", "img.crop.crop.crop", "transforms.ECenterCrop.resize_method", "round", "round", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "image_width", ",", "image_height", "=", "img", ".", "size", "\n", "image_short", "=", "min", "(", "image_width", ",", "image_height", ")", "\n", "\n", "crop_size", "=", "float", "(", "self", ".", "imgsize", ")", "/", "(", "self", ".", "imgsize", "+", "32", ")", "*", "image_short", "\n", "\n", "crop_height", ",", "crop_width", "=", "crop_size", ",", "crop_size", "\n", "crop_top", "=", "int", "(", "round", "(", "(", "image_height", "-", "crop_height", ")", "/", "2.", ")", ")", "\n", "crop_left", "=", "int", "(", "round", "(", "(", "image_width", "-", "crop_width", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "crop_left", ",", "crop_top", ",", "crop_left", "+", "crop_width", ",", "crop_top", "+", "crop_height", ")", ")", "\n", "return", "self", ".", "resize_method", "(", "img", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.RandAugment.__init__": [[185, 189], ["autoaug.rand_augment_list"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.rand_augment_list"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_list", "=", "rand_augment_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.RandAugment.__call__": [[190, 198], ["random.choices", "op", "random.random", "random.uniform", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_list", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "minval", ",", "maxval", "in", "ops", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", ">", "random", ".", "uniform", "(", "0.2", ",", "0.8", ")", ":", "\n", "                ", "continue", "\n", "", "val", "=", "(", "float", "(", "self", ".", "m", ")", "/", "30", ")", "*", "float", "(", "maxval", "-", "minval", ")", "+", "minval", "\n", "img", "=", "op", "(", "img", ",", "val", ")", "\n", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.ShearX": [[22, 28], ["img.transform", "random.random"], "function", ["None"], ["def", "ShearX", "(", "img", ",", "v", ",", "resample", "=", "RESAMPLE_MODE", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "RANDOM_MIRROR", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "resample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.ShearY": [[29, 35], ["img.transform", "random.random"], "function", ["None"], ["", "def", "ShearY", "(", "img", ",", "v", ",", "resample", "=", "RESAMPLE_MODE", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "RANDOM_MIRROR", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "resample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.TranslateX": [[37, 44], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateX", "(", "img", ",", "v", ",", "resample", "=", "RESAMPLE_MODE", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "RANDOM_MIRROR", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "resample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.TranslateY": [[46, 53], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateY", "(", "img", ",", "v", ",", "resample", "=", "RESAMPLE_MODE", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "RANDOM_MIRROR", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ",", "\n", "resample", "=", "resample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.TranslateXabs": [[55, 61], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateXabs", "(", "img", ",", "v", ",", "resample", "=", "RESAMPLE_MODE", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "resample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.TranslateYabs": [[63, 69], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateYabs", "(", "img", ",", "v", ",", "resample", "=", "RESAMPLE_MODE", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ",", "\n", "resample", "=", "resample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Rotate": [[71, 76], ["img.rotate", "random.random"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.rotation_pred.rotate"], ["", "def", "Rotate", "(", "img", ",", "v", ")", ":", "# [-30, 30]", "\n", "    ", "assert", "-", "30", "<=", "v", "<=", "30", "\n", "if", "RANDOM_MIRROR", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.AutoContrast": [[78, 80], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["", "def", "AutoContrast", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Invert": [[82, 84], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Equalize": [[86, 88], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Flip": [[90, 92], ["PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror"], "function", ["None"], ["", "def", "Flip", "(", "img", ",", "_", ")", ":", "# not from the paper", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "mirror", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Solarize": [[94, 97], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize"], "function", ["None"], ["", "def", "Solarize", "(", "img", ",", "v", ")", ":", "# [0, 256]", "\n", "    ", "assert", "0", "<=", "v", "<=", "256", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.SolarizeAdd": [[99, 106], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "numpy.array"], "function", ["None"], ["", "def", "SolarizeAdd", "(", "img", ",", "addition", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "addition", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Posterize": [[108, 112], ["int", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize"], "function", ["None"], ["", "def", "Posterize", "(", "img", ",", "v", ")", ":", "# [4, 8]", "\n", "#assert 4 <= v <= 8", "\n", "    ", "v", "=", "int", "(", "v", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Contrast": [[113, 116], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Contrast", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Contrast", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Contrast", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Color": [[118, 121], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Color", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Color", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Color", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Color"], ["", "def", "Color", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Brightness": [[123, 126], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Brightness", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Brightness", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Brightness", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Sharpness": [[128, 131], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Sharpness", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Sharpness", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Sharpness", "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.CutoutAbs": [[133, 152], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "min", "min", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "# assert 0 <= v <= 20", "\n", "    ", "if", "v", "<", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "h", ")", "\n", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.", ")", ")", "\n", "x1", "=", "min", "(", "w", ",", "x0", "+", "v", ")", "\n", "y1", "=", "min", "(", "h", ",", "y0", "+", "v", ")", "\n", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "color", "=", "(", "125", ",", "123", ",", "114", ")", "\n", "# color = (0, 0, 0)", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.Cutout": [[154, 161], ["autoaug.CutoutAbs"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.CutoutAbs"], ["", "def", "Cutout", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "    ", "assert", "0.0", "<=", "v", "<=", "0.2", "\n", "if", "v", "<=", "0.", ":", "\n", "        ", "return", "img", "\n", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.transforms.autoaug.rand_augment_list": [[162, 183], ["None"], "function", ["None"], ["", "def", "rand_augment_list", "(", ")", ":", "# 16 oeprations and their ranges", "\n", "    ", "l", "=", "[", "\n", "(", "AutoContrast", ",", "0", ",", "1", ")", ",", "\n", "(", "Equalize", ",", "0", ",", "1", ")", ",", "\n", "(", "Invert", ",", "0", ",", "1", ")", ",", "\n", "(", "Rotate", ",", "0", ",", "30", ")", ",", "\n", "(", "Posterize", ",", "0", ",", "4", ")", ",", "\n", "(", "Solarize", ",", "0", ",", "256", ")", ",", "\n", "(", "SolarizeAdd", ",", "0", ",", "110", ")", ",", "\n", "(", "Color", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Contrast", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Brightness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Sharpness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "ShearX", ",", "0.", ",", "0.3", ")", ",", "\n", "(", "ShearY", ",", "0.", ",", "0.3", ")", ",", "\n", "(", "CutoutAbs", ",", "0", ",", "40", ")", ",", "\n", "(", "TranslateXabs", ",", "0.", ",", "100", ")", ",", "\n", "(", "TranslateYabs", ",", "0.", ",", "100", ")", ",", "\n", "]", "\n", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.OpenSelfSup.setup.readme": [[8, 12], ["open", "f.read"], "function", ["None"], ["\n", "version", "=", "'0.1.1'", "\n", "try", ":", "\n", "    ", "if", "not", "os", ".", "getenv", "(", "'RELEASE'", ")", ":", "\n", "        ", "from", "datetime", "import", "date", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.OpenSelfSup.setup.get_git_hash": [[26, 50], ["setup.get_git_hash._minimal_ext_cmd"], "function", ["None"], ["\n", "", "", "requirements", "=", "[", "\n", "'numpy'", ",", "\n", "'tqdm'", ",", "\n", "'nose'", ",", "\n", "'portalocker'", ",", "\n", "'torch>=1.4.0'", ",", "\n", "'torchvision>=0.5.0'", ",", "\n", "'Pillow'", ",", "\n", "'scipy'", ",", "\n", "'requests'", ",", "\n", "]", "\n", "\n", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "create_version_file", "(", ")", "\n", "setup", "(", "\n", "name", "=", "\"Pi-NAS\"", ",", "\n", "version", "=", "version", ",", "\n", "author", "=", "\"Anonymous-Pi-NAS\"", ",", "\n", "author_email", "=", "\"\"", ",", "\n", "url", "=", "\"https://github.com/Anonymous-Pi-NAS/Pi-NAS\"", ",", "\n", "description", "=", "\"Pi-NAS Package\"", ",", "\n", "long_description", "=", "\"\"", ",", "\n", "long_description_content_type", "=", "'text/markdown'", ",", "\n", "license", "=", "'MIT'", ",", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.OpenSelfSup.setup.get_hash": [[52, 65], ["os.path.exists", "os.path.exists", "setup.get_git_hash", "__version__.split", "ImportError"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.OpenSelfSup.setup.get_git_hash"], ["packages", "=", "find_packages", "(", "exclude", "=", "[", "\"tests\"", ",", "\"experiments\"", "]", ")", ",", "\n", "package_data", "=", "{", "'encoding'", ":", "[", "\n", "'LICENSE'", ",", "\n", "'lib/cpu/*.h'", ",", "\n", "'lib/cpu/*.cpp'", ",", "\n", "'lib/gpu/*.h'", ",", "\n", "'lib/gpu/*.cpp'", ",", "\n", "'lib/gpu/*.cu'", ",", "\n", "]", "}", ",", "\n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.OpenSelfSup.setup.write_version_py": [[67, 79], ["setup.get_hash", "open", "f.write", "content.format", "time.asctime"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.OpenSelfSup.setup.get_hash"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.OpenSelfSup.setup.get_version": [[81, 85], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.OpenSelfSup.setup.parse_requirements": [[87, 164], ["list", "line.strip.startswith", "exists", "setup.parse_requirements.gen_packages_items"], "function", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.publish_model.parse_args": [[5, 11], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Process a checkpoint to be published'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint filename'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.publish_model.process_checkpoint": [[13, 25], ["subprocess.Popen", "subprocess.check_output().decode", "out_file.endswith", "print", "subprocess.Popen", "subprocess.check_output"], "function", ["None"], ["", "def", "process_checkpoint", "(", "in_file", ")", ":", "\n", "    ", "tmp_file", "=", "in_file", "+", "\".tmp\"", "\n", "subprocess", ".", "Popen", "(", "[", "'cp'", ",", "in_file", ",", "tmp_file", "]", ")", "\n", "sha", "=", "subprocess", ".", "check_output", "(", "[", "'sha256sum'", ",", "tmp_file", "]", ")", ".", "decode", "(", ")", "\n", "out_file", "=", "in_file", "\n", "if", "out_file", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "        ", "out_file", "=", "out_file", "[", ":", "-", "4", "]", "\n", "", "final_file", "=", "out_file", "+", "f'-{sha[:8]}.pth'", "\n", "assert", "final_file", "!=", "in_file", ",", "\"The output filename is the same as the input file.\"", "\n", "print", "(", "\"Output file: {}\"", ".", "format", "(", "final_file", ")", ")", "\n", "subprocess", ".", "Popen", "(", "[", "'mv'", ",", "tmp_file", ",", "final_file", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.publish_model.main": [[27, 30], ["publish_model.parse_args", "publish_model.process_checkpoint"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args", "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.publish_model.process_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "process_checkpoint", "(", "args", ".", "in_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract_backbone_weights.parse_args": [[5, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'This script extracts backbone weights from a checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'output'", ",", "type", "=", "str", ",", "help", "=", "'destination file name'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--part'", ",", "type", "=", "str", ",", "default", "=", "'backbone'", ",", "help", "=", "'part of weights'", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract_backbone_weights.main": [[18, 31], ["extract_backbone_weights.parse_args", "parse_args.output.endswith", "torch.load", "dict", "ck[].items", "torch.save", "key.startswith", "Exception", "torch.device", "dict", "len"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "assert", "args", ".", "output", ".", "endswith", "(", "\".pth\"", ")", "\n", "ck", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "output_dict", "=", "dict", "(", "state_dict", "=", "dict", "(", ")", ",", "author", "=", "\"OpenSelfSup\"", ")", "\n", "has_backbone", "=", "False", "\n", "for", "key", ",", "value", "in", "ck", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "args", ".", "part", ")", ":", "\n", "            ", "output_dict", "[", "'state_dict'", "]", "[", "key", "[", "len", "(", "args", ".", "part", ")", "+", "1", ":", "]", "]", "=", "value", "\n", "has_backbone", "=", "True", "\n", "", "", "if", "not", "has_backbone", ":", "\n", "        ", "raise", "Exception", "(", "\"Cannot find a backbone module in the checkpoint.\"", ")", "\n", "", "torch", ".", "save", "(", "output_dict", ",", "args", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.count_parameters.parse_args": [[7, 12], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.count_parameters.main": [[14, 35], ["count_parameters.parse_args", "mmcv.Config.fromfile", "openselfsup.models.build_model", "print", "print", "print", "print", "sum", "sum", "sum", "sum", "p.numel", "p.numel", "p.numel", "p.numel", "openselfsup.models.build_model.parameters", "openselfsup.models.build_model.parameters", "openselfsup.models.build_model.backbone.parameters", "openselfsup.models.build_model.backbone.parameters"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "\n", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "num_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "/", "1000000.", "\n", "num_grad_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "/", "1000000.", "\n", "num_backbone_params", "=", "sum", "(", "\n", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "backbone", ".", "parameters", "(", ")", ")", "/", "1000000.", "\n", "num_backbone_grad_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "backbone", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "/", "1000000.", "\n", "print", "(", "\n", "\"Number of backbone parameters: {:.5g} M\"", ".", "format", "(", "num_backbone_params", ")", ")", "\n", "print", "(", "\"Number of backbone parameters requiring grad: {:.5g} M\"", ".", "format", "(", "\n", "num_backbone_grad_params", ")", ")", "\n", "print", "(", "\"Number of total parameters: {:.5g} M\"", ".", "format", "(", "num_params", ")", ")", "\n", "print", "(", "\"Number of total parameters requiring grad: {:.5g} M\"", ".", "format", "(", "\n", "num_grad_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.train.parse_args": [[20, 62], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume_from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pretrained'", ",", "default", "=", "None", ",", "help", "=", "'pretrained model file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "# my", "\n", "parser", ".", "add_argument", "(", "\n", "'--imgs_per_gpu'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'override cfg.data.imgs_per_gpu'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--val_imgs_per_gpu'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'override cfg.custom_hooks[0].imgs_per_gpu'", ")", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "29500", ",", "\n", "help", "=", "'port only works when launcher==\"slurm\"'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.train.main": [[64, 152], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "openselfsup.utils.get_root_logger", "dict", "openselfsup.utils.collect_env", "openselfsup.utils.get_root_logger.info", "openselfsup.utils.get_root_logger.info", "openselfsup.utils.get_root_logger.info", "openselfsup.models.build_model", "openselfsup.apis.train_model", "importlib.util.find_spec", "openselfsup.utils.traverse_replace", "mmcv.runner.init_dist", "os.abspath", "time.localtime", "openselfsup.utils.get_root_logger.info", "openselfsup.apis.set_random_seed", "isinstance", "openselfsup.datasets.build_dataset", "len", "dict", "openselfsup.utils.collect_env.items"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect_env.collect_env", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_model", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.train_model", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.config_tools.traverse_replace", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.set_random_seed", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "# my", "\n", "if", "args", ".", "imgs_per_gpu", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "data", ".", "imgs_per_gpu", "=", "args", ".", "imgs_per_gpu", "\n", "", "if", "args", ".", "val_imgs_per_gpu", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "custom_hooks", "[", "0", "]", ".", "imgs_per_gpu", "=", "args", ".", "val_imgs_per_gpu", "\n", "#", "\n", "\n", "# check memcached package exists", "\n", "", "if", "importlib", ".", "util", ".", "find_spec", "(", "'mc'", ")", "is", "None", ":", "\n", "        ", "traverse_replace", "(", "cfg", ",", "'memcached'", ",", "False", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "assert", "cfg", ".", "model", ".", "type", "not", "in", "[", "'DeepCluster'", ",", "'MOCO'", ",", "'SimCLR'", ",", "'ODC'", ",", "'NPID'", "]", ",", "\"{} does not support non-dist training.\"", ".", "format", "(", "cfg", ".", "model", ".", "type", ")", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "if", "args", ".", "launcher", "==", "'slurm'", ":", "\n", "            ", "cfg", ".", "dist_params", "[", "'port'", "]", "=", "args", ".", "port", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'train_{}.log'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "logger", ".", "info", "(", "'Config:\\n{}'", ".", "format", "(", "cfg", ".", "text", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}, deterministic: {}'", ".", "format", "(", "\n", "args", ".", "seed", ",", "args", ".", "deterministic", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "\n", "if", "args", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "args", ".", "pretrained", ",", "str", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "args", ".", "pretrained", "\n", "", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "assert", "len", "(", "cfg", ".", "workflow", ")", "==", "1", ",", "\"Validation is called by hook.\"", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save openselfsup version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "openselfsup_version", "=", "__version__", ",", "config", "=", "cfg", ".", "text", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "train_model", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.test.single_gpu_test": [[18, 24], ["model.eval", "openselfsup.utils.nondist_forward_collect", "model", "len"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.nondist_forward_collect"], ["from", "encoding", ".", "nn", "import", "SegmentationLosses", ",", "SyncBatchNorm", "\n", "from", "encoding", ".", "parallel", "import", "DataParallelModel", ",", "DataParallelCriterion", "\n", "from", "encoding", ".", "datasets", "import", "get_dataset", ",", "test_batchify_fn", "\n", "from", "encoding", ".", "models", "import", "get_model", ",", "get_segmentation_model", ",", "MultiEvalModule", "\n", "\n", "\n", "class", "Options", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.test.multi_gpu_test": [[26, 33], ["model.eval", "mmcv.runner.get_dist_info", "openselfsup.utils.dist_forward_collect", "model", "len"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.dist_forward_collect"], ["        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch Segmentation'", ")", "\n", "# model and dataset ", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'encnet'", ",", "\n", "help", "=", "'model name (default: encnet)'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "'resnet50'", ",", "\n", "help", "=", "'backbone name (default: resnet50)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'ade20k'", ",", "\n", "help", "=", "'dataset name (default: pascal12)'", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.test.parse_args": [[35, 58], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["metavar", "=", "'N'", ",", "help", "=", "'dataloader threads'", ")", "\n", "parser", ".", "add_argument", "(", "'--base-size'", ",", "type", "=", "int", ",", "default", "=", "520", ",", "\n", "help", "=", "'base image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop-size'", ",", "type", "=", "int", ",", "default", "=", "480", ",", "\n", "help", "=", "'crop image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-split'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'dataset train split (default: train)'", ")", "\n", "# training hyper params", "\n", "parser", ".", "add_argument", "(", "'--aux'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Auxilary Loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--se-loss'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Semantic Encoding Loss SE-loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--se-weight'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'SE-loss weight (default: 0.2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                            training (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                            testing (default: same as batch size)'", ")", "\n", "# cuda, seed and logging", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "\n", "False", ",", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.test.main": [[60, 119], ["test.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "time.strftime", "os.join", "openselfsup.utils.get_root_logger", "openselfsup.datasets.build_dataset", "openselfsup.datasets.build_dataloader", "openselfsup.models.build_model", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "importlib.util.find_spec", "openselfsup.utils.traverse_replace", "mmcv.runner.init_dist", "time.localtime", "mmcv.parallel.MMDataParallel", "test.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "test.multi_gpu_test", "multi_gpu_test.items", "mmcv.parallel.MMDistributedDataParallel.cuda", "openselfsup.datasets.build_dataset.evaluate", "torch.from_numpy", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_model", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.config_tools.traverse_replace", "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.test.single_gpu_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.test.multi_gpu_test", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.evaluate"], ["# checking point", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--verify'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--model-zoo'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'evaluating on model zoo model'", ")", "\n", "# evaluation option", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'evaluating mIoU'", ")", "\n", "parser", ".", "add_argument", "(", "'--export'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--acc-bn'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Re-accumulate BN statistics'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-val'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'generate masks on val set'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-val'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'skip validation during training'", ")", "\n", "# test option", "\n", "parser", ".", "add_argument", "(", "'--test-folder'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'path to test image folder'", ")", "\n", "# the parser", "\n", "parser", ".", "add_argument", "(", "'--choice-indices'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'choice indices for alone_resnest50'", ")", "\n", "self", ".", "parser", "=", "parser", "\n", "\n", "", "def", "parse", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "print", "(", "args", ")", "\n", "return", "args", "\n", "\n", "", "", "def", "test", "(", "args", ")", ":", "\n", "# output folder", "\n", "    ", "outdir", "=", "'outdir'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "# data transforms", "\n", "", "input_transform", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "ToTensor", "(", ")", ",", "\n", "transform", ".", "Normalize", "(", "[", ".485", ",", ".456", ",", ".406", "]", ",", "[", ".229", ",", ".224", ",", ".225", "]", ")", "]", ")", "\n", "# dataset", "\n", "if", "args", ".", "eval", ":", "\n", "        ", "testset", "=", "get_dataset", "(", "args", ".", "dataset", ",", "split", "=", "'val'", ",", "mode", "=", "'testval'", ",", "\n", "transform", "=", "input_transform", ")", "\n", "", "elif", "args", ".", "test_val", ":", "\n", "        ", "testset", "=", "get_dataset", "(", "args", ".", "dataset", ",", "split", "=", "'val'", ",", "mode", "=", "'test'", ",", "\n", "transform", "=", "input_transform", ")", "\n", "", "else", ":", "\n", "        ", "testset", "=", "get_dataset", "(", "args", ".", "dataset", ",", "split", "=", "'test'", ",", "mode", "=", "'test'", ",", "\n", "transform", "=", "input_transform", ")", "\n", "# dataloader", "\n", "", "loader_kwargs", "=", "{", "'num_workers'", ":", "args", ".", "workers", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "test_data", "=", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "drop_last", "=", "False", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "test_batchify_fn", ",", "**", "loader_kwargs", ")", "\n", "# model", "\n", "pretrained", "=", "args", ".", "resume", "is", "None", "and", "args", ".", "verify", "is", "None", "\n", "if", "args", ".", "model_zoo", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.upgrade_models.parse_args": [[5, 12], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save-path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'destination file name'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.upgrade_models.main": [[14, 24], ["upgrade_models.parse_args", "torch.load", "dict", "torch.load.items", "torch.save", "key.startswith", "torch.device", "dict"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "ck", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "output_dict", "=", "dict", "(", "state_dict", "=", "dict", "(", ")", ",", "author", "=", "'OpenSelfSup'", ")", "\n", "for", "key", ",", "value", "in", "ck", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'head'", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "output_dict", "[", "'state_dict'", "]", "[", "key", "]", "=", "value", "\n", "", "", "torch", ".", "save", "(", "output_dict", ",", "args", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.ExtractProcess.__init__": [[22, 28], ["extract.ExtractProcess.models.utils.MultiPooling"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "pool_type", "=", "'specified'", ",", "\n", "backbone", "=", "'resnet50'", ",", "\n", "layer_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", ")", ":", "\n", "        ", "self", ".", "multi_pooling", "=", "MultiPooling", "(", "\n", "pool_type", ",", "in_indices", "=", "layer_indices", ",", "backbone", "=", "backbone", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.ExtractProcess._forward_func": [[29, 36], ["model", "extract.ExtractProcess.multi_pooling", "xx.view", "feat.cpu", "xx.size", "enumerate"], "methods", ["None"], ["", "def", "_forward_func", "(", "self", ",", "model", ",", "**", "x", ")", ":", "\n", "        ", "backbone_feats", "=", "model", "(", "mode", "=", "'extract'", ",", "**", "x", ")", "\n", "pooling_feats", "=", "self", ".", "multi_pooling", "(", "backbone_feats", ")", "\n", "flat_feats", "=", "[", "xx", ".", "view", "(", "xx", ".", "size", "(", "0", ")", ",", "-", "1", ")", "for", "xx", "in", "pooling_feats", "]", "\n", "feat_dict", "=", "{", "'feat{}'", ".", "format", "(", "i", "+", "1", ")", ":", "feat", ".", "cpu", "(", ")", "for", "i", ",", "feat", "in", "enumerate", "(", "flat_feats", ")", "}", "\n", "return", "feat_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.ExtractProcess.extract": [[37, 48], ["model.eval", "extract.ExtractProcess._forward_func", "mmcv.runner.get_dist_info", "extract.ExtractProcess.utils.dist_forward_collect", "extract.ExtractProcess.utils.nondist_forward_collect", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.extractor.Extractor._forward_func", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.dist_forward_collect", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.nondist_forward_collect"], ["", "def", "extract", "(", "self", ",", "model", ",", "data_loader", ",", "distributed", "=", "False", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "func", "=", "lambda", "**", "x", ":", "self", ".", "_forward_func", "(", "model", ",", "**", "x", ")", "\n", "if", "distributed", ":", "\n", "            ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "results", "=", "dist_forward_collect", "(", "func", ",", "data_loader", ",", "rank", ",", "\n", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "nondist_forward_collect", "(", "func", ",", "data_loader", ",", "\n", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args": [[50, 83], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'OpenSelfSup extract features of a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "default", "=", "None", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pretrained'", ",", "default", "=", "'random'", ",", "\n", "help", "=", "'pretrained model file, exclusive to --checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset-config'", ",", "\n", "default", "=", "'benchmarks/extract_info/voc07.py'", ",", "\n", "help", "=", "'extract dataset config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--layer-ind'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'layer indices, separated by comma, e.g., \"0,1,2,3,4\"'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "29500", ",", "\n", "help", "=", "'port only works when launcher==\"slurm\"'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.main": [[85, 179], ["extract.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "openselfsup.utils.get_root_logger", "mmcv.Config.fromfile", "openselfsup.datasets.build_dataset", "openselfsup.datasets.build_dataloader", "openselfsup.models.build_model", "extract.ExtractProcess", "ExtractProcess.extract", "mmcv.runner.get_dist_info", "mmcv.mkdir_or_exist", "int", "importlib.util.find_spec", "mmcv.runner.init_dist", "os.abspath", "time.localtime", "isinstance", "openselfsup.utils.get_root_logger.info", "mmcv.runner.load_checkpoint", "mmcv.parallel.MMDataParallel", "mmcv.parallel.MMDistributedDataParallel", "extractor.extract.items", "parse_args.layer_ind.split", "hasattr", "openselfsup.utils.get_root_logger.info", "openselfsup.utils.get_root_logger.info", "mmcv.parallel.MMDistributedDataParallel.cuda", "len", "range", "torch.cuda.current_device", "numpy.save", "getattr", "numpy.save", "numpy.save"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_model", "home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.ExtractProcess.extract", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "layer_ind", "=", "[", "int", "(", "idx", ")", "for", "idx", "in", "args", ".", "layer_ind", ".", "split", "(", "','", ")", "]", "\n", "cfg", ".", "model", ".", "backbone", ".", "out_indices", "=", "layer_ind", "\n", "\n", "# checkpoint and pretrained are exclusive", "\n", "assert", "args", ".", "pretrained", "==", "\"random\"", "or", "args", ".", "checkpoint", "is", "None", ",", "\"Checkpoint and pretrained are exclusive.\"", "\n", "\n", "# check memcached package exists", "\n", "if", "importlib", ".", "util", ".", "find_spec", "(", "'mc'", ")", "is", "None", ":", "\n", "        ", "for", "field", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "if", "hasattr", "(", "cfg", ".", "data", ",", "field", ")", ":", "\n", "                ", "getattr", "(", "cfg", ".", "data", ",", "field", ")", ".", "data_source", ".", "memcached", "=", "False", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "if", "args", ".", "launcher", "==", "'slurm'", ":", "\n", "            ", "cfg", ".", "dist_params", "[", "'port'", "]", "=", "args", ".", "port", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# logger", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'extract_{}.log'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# build the dataloader", "\n", "dataset_cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "dataset_config", ")", "\n", "dataset", "=", "build_dataset", "(", "dataset_cfg", ".", "data", ".", "extract", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "dataset_cfg", ".", "data", ".", "imgs_per_gpu", ",", "\n", "workers_per_gpu", "=", "dataset_cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# specify pretrained model", "\n", "if", "args", ".", "pretrained", "!=", "'random'", ":", "\n", "        ", "assert", "isinstance", "(", "args", ".", "pretrained", ",", "str", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "args", ".", "pretrained", "\n", "\n", "# build the model and load checkpoint", "\n", "", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Use checkpoint: {} to extract features\"", ".", "format", "(", "\n", "args", ".", "checkpoint", ")", ")", "\n", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "args", ".", "pretrained", "!=", "\"random\"", ":", "\n", "        ", "logger", ".", "info", "(", "'Use pretrained model: {} to extract features'", ".", "format", "(", "\n", "args", ".", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'No checkpoint or pretrained is give, use random init.'", ")", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "\n", "# build extraction processor", "\n", "", "extractor", "=", "ExtractProcess", "(", "\n", "pool_type", "=", "'specified'", ",", "backbone", "=", "'resnet50'", ",", "layer_indices", "=", "layer_ind", ")", "\n", "\n", "# run", "\n", "outputs", "=", "extractor", ".", "extract", "(", "model", ",", "data_loader", ",", "distributed", "=", "distributed", ")", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "mmcv", ".", "mkdir_or_exist", "(", "\"{}/features/\"", ".", "format", "(", "args", ".", "work_dir", ")", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "for", "key", ",", "val", "in", "outputs", ".", "items", "(", ")", ":", "\n", "            ", "split_num", "=", "len", "(", "dataset_cfg", ".", "split_name", ")", "\n", "split_at", "=", "dataset_cfg", ".", "split_at", "\n", "for", "ss", "in", "range", "(", "split_num", ")", ":", "\n", "                ", "output_file", "=", "\"{}/features/{}_{}.npy\"", ".", "format", "(", "\n", "args", ".", "work_dir", ",", "dataset_cfg", ".", "split_name", "[", "ss", "]", ",", "key", ")", "\n", "if", "ss", "==", "0", ":", "\n", "                    ", "np", ".", "save", "(", "output_file", ",", "val", "[", ":", "split_at", "[", "0", "]", "]", ")", "\n", "", "elif", "ss", "==", "split_num", "-", "1", ":", "\n", "                    ", "np", ".", "save", "(", "output_file", ",", "val", "[", "split_at", "[", "-", "1", "]", ":", "]", ")", "\n", "", "else", ":", "\n", "                    ", "np", ".", "save", "(", "output_file", ",", "val", "[", "split_at", "[", "ss", "-", "1", "]", ":", "split_at", "[", "ss", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.load_json": [[30, 45], ["os.path.exists", "sorted", "sorted", "range", "open", "json.load", "list", "list", "numpy.empty", "numpy.empty", "len", "range", "json.load.keys", "data[].keys", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "load_json", "(", "file_path", ",", "ground_truth", "=", "True", ")", ":", "\n", "    ", "import", "json", "\n", "assert", "os", ".", "path", ".", "exists", "(", "file_path", ")", ",", "\"{} does not exist\"", ".", "format", "(", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "img_ids", "=", "sorted", "(", "list", "(", "data", ".", "keys", "(", ")", ")", ")", "\n", "cls_names", "=", "sorted", "(", "list", "(", "data", "[", "img_ids", "[", "0", "]", "]", ".", "keys", "(", ")", ")", ")", "\n", "if", "ground_truth", ":", "\n", "        ", "output", "=", "np", ".", "empty", "(", "(", "len", "(", "img_ids", ")", ",", "len", "(", "cls_names", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "np", ".", "empty", "(", "(", "len", "(", "img_ids", ")", ",", "len", "(", "cls_names", ")", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "img_ids", ")", ")", ":", "\n", "        ", "for", "cls_idx", "in", "range", "(", "len", "(", "cls_names", ")", ")", ":", "\n", "            ", "output", "[", "idx", "]", "[", "cls_idx", "]", "=", "data", "[", "img_ids", "[", "idx", "]", "]", "[", "cls_names", "[", "cls_idx", "]", "]", "\n", "", "", "return", "output", ",", "img_ids", ",", "cls_names", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.save_json": [[47, 59], ["range", "logger.info", "len", "range", "open", "json.dump", "len", "int"], "function", ["None"], ["", "def", "save_json", "(", "input_data", ",", "img_ids", ",", "cls_names", ",", "output_file", ")", ":", "\n", "    ", "output_dict", "=", "{", "}", "\n", "for", "img_idx", "in", "range", "(", "len", "(", "img_ids", ")", ")", ":", "\n", "        ", "img_id", "=", "img_ids", "[", "img_idx", "]", "\n", "out_lbl", "=", "{", "}", "\n", "for", "cls_idx", "in", "range", "(", "len", "(", "cls_names", ")", ")", ":", "\n", "            ", "name", "=", "cls_names", "[", "cls_idx", "]", "\n", "out_lbl", "[", "name", "]", "=", "int", "(", "input_data", "[", "img_idx", "]", "[", "cls_idx", "]", ")", "\n", "", "output_dict", "[", "img_id", "]", "=", "out_lbl", "\n", "", "logger", ".", "info", "(", "'Saving file: {}'", ".", "format", "(", "output_file", ")", ")", "\n", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.sample_symbol": [[61, 70], ["logger.info", "range", "random.sample", "numpy.where", "list"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.LearningPhase.sample"], ["", "", "def", "sample_symbol", "(", "input_targets", ",", "output_target", ",", "symbol", ",", "num", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'Sampling symbol: {} for num: {}'", ".", "format", "(", "symbol", ",", "num", ")", ")", "\n", "num_classes", "=", "input_targets", ".", "shape", "[", "1", "]", "\n", "for", "idx", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "symbol_data", "=", "np", ".", "where", "(", "input_targets", "[", ":", ",", "idx", "]", "==", "symbol", ")", "[", "0", "]", "\n", "sampled", "=", "random", ".", "sample", "(", "list", "(", "symbol_data", ")", ",", "num", ")", "\n", "for", "index", "in", "sampled", ":", "\n", "            ", "output_target", "[", "index", ",", "idx", "]", "=", "symbol", "\n", "", "", "return", "output_target", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.generate_independent_sample": [[72, 97], ["range", "logger.info", "int", "opts.k_values.split", "logger.info", "create_voc_low_shot_challenge_samples.sample_symbol", "create_voc_low_shot_challenge_samples.sample_symbol", "os.path.join", "create_voc_low_shot_challenge_samples.save_json", "os.path.join", "logger.info", "numpy.save", "numpy.ones", "[].split", "opts.targets_data_file.split"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.sample_symbol", "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.sample_symbol", "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.save_json"], ["", "def", "generate_independent_sample", "(", "opts", ",", "targets", ",", "img_ids", ",", "cls_names", ")", ":", "\n", "    ", "k_values", "=", "[", "int", "(", "val", ")", "for", "val", "in", "opts", ".", "k_values", ".", "split", "(", "\",\"", ")", "]", "\n", "# the way sample works is: for each independent sample, and a given k value", "\n", "# we create a matrix of the same shape as given targets file. We initialize", "\n", "# this matrix with -1 (ignore label). We then sample k positive and", "\n", "# (num_classes-1) * k negatives.", "\n", "# N x 20 shape", "\n", "num_classes", "=", "targets", ".", "shape", "[", "1", "]", "\n", "for", "idx", "in", "range", "(", "opts", ".", "num_samples", ")", ":", "\n", "        ", "for", "k", "in", "k_values", ":", "\n", "            ", "logger", ".", "info", "(", "'Sampling: {} time for k-value: {}'", ".", "format", "(", "idx", "+", "1", ",", "k", ")", ")", "\n", "output", "=", "np", ".", "ones", "(", "targets", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", "*", "-", "1", "\n", "output", "=", "sample_symbol", "(", "targets", ",", "output", ",", "1", ",", "k", ")", "\n", "output", "=", "sample_symbol", "(", "targets", ",", "output", ",", "0", ",", "(", "num_classes", "-", "1", ")", "*", "k", ")", "\n", "prefix", "=", "opts", ".", "targets_data_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "\n", "opts", ".", "output_path", ",", "\n", "'{}_sample{}_k{}.json'", ".", "format", "(", "prefix", ",", "idx", "+", "1", ",", "k", ")", ")", "\n", "save_json", "(", "output", ",", "img_ids", ",", "cls_names", ",", "output_file", ")", "\n", "npy_output_file", "=", "os", ".", "path", ".", "join", "(", "\n", "opts", ".", "output_path", ",", "\n", "'{}_sample{}_k{}.npy'", ".", "format", "(", "prefix", ",", "idx", "+", "1", ",", "k", ")", ")", "\n", "logger", ".", "info", "(", "'Saving npy file: {}'", ".", "format", "(", "npy_output_file", ")", ")", "\n", "np", ".", "save", "(", "npy_output_file", ",", "output", ")", "\n", "", "", "logger", ".", "info", "(", "'Done!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.main": [[99, 128], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "create_voc_low_shot_challenge_samples.load_json", "create_voc_low_shot_challenge_samples.generate_independent_sample", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args", "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.load_json", "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_low_shot_challenge_samples.generate_independent_sample"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Sample Low shot data for VOC'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--targets_data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Json file containing image labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"path where low-shot samples should be saved\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--k_values'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"1,2,4,8,16,32,64,96\"", ",", "\n", "help", "=", "\"Low-shot k-values for svm testing.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_samples'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "\"Number of independent samples.\"", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "targets", ",", "img_ids", ",", "cls_names", "=", "load_json", "(", "opts", ".", "targets_data_file", ")", "\n", "generate_independent_sample", "(", "opts", ",", "targets", ",", "img_ids", ",", "cls_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.validate_files": [[32, 42], ["len", "output_files.append", "[].split", "item.split"], "function", ["None"], ["def", "validate_files", "(", "input_files", ")", ":", "\n", "    ", "\"\"\"\n    The valid files will have name: <class_name>_<split>.txt. We want to remove\n    all the other files from the input.\n    \"\"\"", "\n", "output_files", "=", "[", "]", "\n", "for", "item", "in", "input_files", ":", "\n", "        ", "if", "len", "(", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", ")", "==", "2", ":", "\n", "            ", "output_files", ".", "append", "(", "item", ")", "\n", "", "", "return", "output_files", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.get_data_files": [[44, 73], ["os.path.join", "os.path.exists", "glob.glob", "create_voc_data_files.validate_files", "os.path.join", "glob.glob", "glob.glob", "create_voc_data_files.validate_files", "create_voc_data_files.validate_files", "glob.glob", "create_voc_data_files.validate_files", "create_voc_data_files.validate_files", "len", "len", "os.path.join", "os.path.join", "len", "len", "os.path.join", "len", "glob.glob", "glob.glob", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.validate_files", "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.validate_files", "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.validate_files", "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.validate_files", "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.validate_files"], ["", "def", "get_data_files", "(", "split", ",", "args", ")", ":", "\n", "    ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_source_dir", ",", "'ImageSets/Main'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ",", "\"Data: {} doesn't exist\"", ".", "format", "(", "data_dir", ")", "\n", "test_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_test.txt'", ")", ")", "\n", "test_data_files", "=", "validate_files", "(", "test_data_files", ")", "\n", "if", "args", ".", "separate_partitions", ">", "0", ":", "\n", "        ", "train_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_train.txt'", ")", ")", "\n", "val_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_val.txt'", ")", ")", "\n", "train_data_files", "=", "validate_files", "(", "train_data_files", ")", "\n", "val_data_files", "=", "validate_files", "(", "val_data_files", ")", "\n", "assert", "len", "(", "train_data_files", ")", "==", "len", "(", "val_data_files", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "data_files", "=", "train_data_files", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "data_files", "=", "test_data_files", "\n", "", "else", ":", "\n", "            ", "data_files", "=", "val_data_files", "\n", "", "", "else", ":", "\n", "        ", "train_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_trainval.txt'", ")", ")", "\n", "if", "len", "(", "test_data_files", ")", "==", "0", ":", "\n", "# For VOC2012 dataset, we have trainval, val and train data.", "\n", "            ", "train_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_train.txt'", ")", ")", "\n", "test_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_val.txt'", ")", ")", "\n", "", "test_data_files", "=", "validate_files", "(", "test_data_files", ")", "\n", "train_data_files", "=", "validate_files", "(", "train_data_files", ")", "\n", "data_files", "=", "train_data_files", "if", "(", "split", "\n", "==", "'train'", ")", "else", "test_data_files", "\n", "", "assert", "len", "(", "train_data_files", ")", "==", "len", "(", "test_data_files", ")", ",", "\"Missing classes\"", "\n", "return", "data_files", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.get_images_labels_info": [[75, 130], ["os.path.exists", "create_voc_data_files.get_data_files", "enumerate", "sorted", "sorted", "img_labels_map.keys", "img_paths.append", "img_labels.append", "sorted", "sorted", "range", "open", "os.path.join", "cls_names.append", "img_labels_map.keys", "img_ids.append", "json_img_labels.append", "len", "range", "[].split", "len", "int", "line.strip().split", "int", "logger.info", "line.strip", "numpy.ones", "[].split", "len", "item.split"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.get_data_files"], ["", "def", "get_images_labels_info", "(", "split", ",", "args", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "data_source_dir", ")", ",", "\"Data source NOT found. Abort\"", "\n", "\n", "data_files", "=", "get_data_files", "(", "split", ",", "args", ")", "\n", "# we will construct a map for image name to the vector of -1, 0, 1", "\n", "# we sort the data_files which gives sorted class names as well", "\n", "img_labels_map", "=", "{", "}", "\n", "for", "cls_num", ",", "data_path", "in", "enumerate", "(", "sorted", "(", "data_files", ")", ")", ":", "\n", "# for this class, we have images and each image will have label", "\n", "# 1, -1, 0 -> present, not present, ignore respectively as in VOC data.", "\n", "        ", "with", "open", "(", "data_path", ",", "'r'", ")", "as", "fopen", ":", "\n", "            ", "for", "line", "in", "fopen", ":", "\n", "                ", "try", ":", "\n", "                    ", "img_name", ",", "orig_label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "img_name", "not", "in", "img_labels_map", ":", "\n", "                        ", "img_labels_map", "[", "img_name", "]", "=", "-", "np", ".", "ones", "(", "\n", "len", "(", "data_files", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "orig_label", "=", "int", "(", "orig_label", ")", "\n", "# in VOC data, -1 (not present), set it to 0 as train target", "\n", "if", "orig_label", "==", "-", "1", ":", "\n", "                        ", "orig_label", "=", "0", "\n", "# in VOC data, 0 (ignore), set it to -1 as train target", "\n", "", "elif", "orig_label", "==", "0", ":", "\n", "                        ", "orig_label", "=", "-", "1", "\n", "", "img_labels_map", "[", "img_name", "]", "[", "cls_num", "]", "=", "orig_label", "\n", "", "except", "Exception", ":", "\n", "                    ", "logger", ".", "info", "(", "'Error processing: {} data_path: {}'", ".", "format", "(", "\n", "line", ",", "data_path", ")", ")", "\n", "\n", "", "", "", "", "img_paths", ",", "img_labels", "=", "[", "]", ",", "[", "]", "\n", "for", "item", "in", "sorted", "(", "img_labels_map", ".", "keys", "(", ")", ")", ":", "\n", "        ", "img_paths", ".", "append", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_source_dir", ",", "'JPEGImages'", ",", "item", "+", "'.jpg'", ")", ")", "\n", "img_labels", ".", "append", "(", "img_labels_map", "[", "item", "]", ")", "\n", "\n", "", "output_dict", "=", "{", "}", "\n", "if", "args", ".", "generate_json", ":", "\n", "        ", "cls_names", "=", "[", "]", "\n", "for", "item", "in", "sorted", "(", "data_files", ")", ":", "\n", "            ", "name", "=", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "cls_names", ".", "append", "(", "name", ")", "\n", "\n", "", "img_ids", ",", "json_img_labels", "=", "[", "]", ",", "[", "]", "\n", "for", "item", "in", "sorted", "(", "img_labels_map", ".", "keys", "(", ")", ")", ":", "\n", "            ", "img_ids", ".", "append", "(", "item", ")", "\n", "json_img_labels", ".", "append", "(", "img_labels_map", "[", "item", "]", ")", "\n", "\n", "", "for", "img_idx", "in", "range", "(", "len", "(", "img_ids", ")", ")", ":", "\n", "            ", "img_id", "=", "img_ids", "[", "img_idx", "]", "\n", "out_lbl", "=", "{", "}", "\n", "for", "cls_idx", "in", "range", "(", "len", "(", "cls_names", ")", ")", ":", "\n", "                ", "name", "=", "cls_names", "[", "cls_idx", "]", "\n", "out_lbl", "[", "name", "]", "=", "int", "(", "json_img_labels", "[", "img_idx", "]", "[", "cls_idx", "]", ")", "\n", "", "output_dict", "[", "img_id", "]", "=", "out_lbl", "\n", "", "", "return", "img_paths", ",", "img_labels", ",", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.main": [[132, 190], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logger.info", "partitions.append", "logger.info", "create_voc_data_files.get_images_labels_info", "os.path.join", "os.path.join", "logger.info", "logger.info", "logger.info", "logger.info", "numpy.save", "numpy.save", "numpy.array", "numpy.array", "os.path.join", "logger.info", "open", "json.dump", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.tools.extract.parse_args", "home.repos.pwc.inspect_result.ernie1_pi-nas.prepare_data.create_voc_data_files.get_images_labels_info"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Create VOC data files\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_source_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path to data directory containing ImageSets and JPEGImages\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Output directory where images/label information will be written\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--separate_partitions'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Whether to create files separately for partitions train/test/val\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--generate_json'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Whether to json files for partitions train/test/val\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# given the data directory for the partitions train, val, and test, we will", "\n", "# write numpy files for each partition.", "\n", "partitions", "=", "[", "'train'", ",", "'test'", "]", "\n", "if", "args", ".", "separate_partitions", ">", "0", ":", "\n", "        ", "partitions", ".", "append", "(", "'val'", ")", "\n", "\n", "", "for", "partition", "in", "partitions", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "'========Preparing {} data files========'", ".", "format", "(", "partition", ")", ")", "\n", "imgs_info", ",", "lbls_info", ",", "output_dict", "=", "get_images_labels_info", "(", "\n", "partition", ",", "args", ")", "\n", "img_info_out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "partition", "+", "'_images.npy'", ")", "\n", "label_info_out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "partition", "+", "'_labels.npy'", ")", "\n", "logger", ".", "info", "(", "\n", "'=================SAVING DATA files======================='", ")", "\n", "logger", ".", "info", "(", "'partition: {} saving img_paths to: {}'", ".", "format", "(", "\n", "partition", ",", "img_info_out_path", ")", ")", "\n", "logger", ".", "info", "(", "'partition: {} saving lbls_paths: {}'", ".", "format", "(", "\n", "partition", ",", "label_info_out_path", ")", ")", "\n", "logger", ".", "info", "(", "'partition: {} imgs: {}'", ".", "format", "(", "partition", ",", "\n", "np", ".", "array", "(", "imgs_info", ")", ".", "shape", ")", ")", "\n", "np", ".", "save", "(", "img_info_out_path", ",", "np", ".", "array", "(", "imgs_info", ")", ")", "\n", "np", ".", "save", "(", "label_info_out_path", ",", "np", ".", "array", "(", "lbls_info", ")", ")", "\n", "if", "args", ".", "generate_json", ":", "\n", "            ", "json_out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "partition", "+", "'_targets.json'", ")", "\n", "import", "json", "\n", "with", "open", "(", "json_out_path", ",", "'w'", ")", "as", "fp", ":", "\n", "                ", "json", ".", "dump", "(", "output_dict", ",", "fp", ")", "\n", "", "logger", ".", "info", "(", "'Saved Json to: {}'", ".", "format", "(", "json_out_path", ")", ")", "\n", "", "", "logger", ".", "info", "(", "'DONE!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.Kmeans.__init__": [[119, 122], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "pca_dim", "=", "256", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "pca_dim", "=", "pca_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.Kmeans.cluster": [[123, 140], ["time.time", "clustering.preprocess_features", "clustering.run_kmeans", "numpy.array", "print", "time.time"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.preprocess_features", "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.run_kmeans"], ["", "def", "cluster", "(", "self", ",", "feat", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"Performs k-means clustering.\n            Args:\n                x_data (np.array N * dim): data to cluster\n        \"\"\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# PCA-reducing, whitening and L2-normalization", "\n", "xb", "=", "preprocess_features", "(", "feat", ",", "self", ".", "pca_dim", ")", "\n", "\n", "# cluster the data", "\n", "I", ",", "loss", "=", "run_kmeans", "(", "xb", ",", "self", ".", "k", ",", "verbose", ")", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "I", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'k-means time: {0:.0f} s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "end", ")", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.PIC.__init__": [[251, 263], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "args", "=", "None", ",", "\n", "sigma", "=", "0.2", ",", "\n", "nnn", "=", "5", ",", "\n", "alpha", "=", "0.001", ",", "\n", "distribute_singletons", "=", "True", ",", "\n", "pca_dim", "=", "256", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "nnn", "=", "nnn", "\n", "self", ".", "distribute_singletons", "=", "distribute_singletons", "\n", "self", ".", "pca_dim", "=", "pca_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.PIC.cluster": [[264, 309], ["time.time", "clustering.preprocess_features", "clustering.make_graph", "clustering.run_pic", "set", "enumerate", "enumerate", "numpy.all", "images_lists[].append", "numpy.ones", "clustering.PIC.images_lists.append", "print", "images_lists[].append", "len", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.preprocess_features", "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.make_graph", "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.run_pic"], ["", "def", "cluster", "(", "self", ",", "data", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# preprocess the data", "\n", "xb", "=", "preprocess_features", "(", "data", ",", "self", ".", "pca_dim", ")", "\n", "\n", "# construct nnn graph", "\n", "I", ",", "D", "=", "make_graph", "(", "xb", ",", "self", ".", "nnn", ")", "\n", "\n", "# run PIC", "\n", "clust", "=", "run_pic", "(", "I", ",", "D", ",", "self", ".", "sigma", ",", "self", ".", "alpha", ")", "\n", "images_lists", "=", "{", "}", "\n", "for", "h", "in", "set", "(", "clust", ")", ":", "\n", "            ", "images_lists", "[", "h", "]", "=", "[", "]", "\n", "", "for", "data", ",", "c", "in", "enumerate", "(", "clust", ")", ":", "\n", "            ", "images_lists", "[", "c", "]", ".", "append", "(", "data", ")", "\n", "\n", "# allocate singletons to clusters of their closest NN not singleton", "\n", "", "if", "self", ".", "distribute_singletons", ":", "\n", "            ", "clust_NN", "=", "{", "}", "\n", "for", "i", "in", "images_lists", ":", "\n", "# if singleton", "\n", "                ", "if", "len", "(", "images_lists", "[", "i", "]", ")", "==", "1", ":", "\n", "                    ", "s", "=", "images_lists", "[", "i", "]", "[", "0", "]", "\n", "# for NN", "\n", "for", "n", "in", "I", "[", "s", ",", "1", ":", "]", ":", "\n", "# if NN is not a singleton", "\n", "                        ", "if", "not", "len", "(", "images_lists", "[", "clust", "[", "n", "]", "]", ")", "==", "1", ":", "\n", "                            ", "clust_NN", "[", "s", "]", "=", "n", "\n", "break", "\n", "", "", "", "", "for", "s", "in", "clust_NN", ":", "\n", "                ", "del", "images_lists", "[", "clust", "[", "s", "]", "]", "\n", "clust", "[", "s", "]", "=", "clust", "[", "clust_NN", "[", "s", "]", "]", "\n", "images_lists", "[", "clust", "[", "s", "]", "]", ".", "append", "(", "s", ")", "\n", "\n", "", "", "self", ".", "images_lists", "=", "[", "]", "\n", "self", ".", "labels", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "data", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "images_lists", ")", ":", "\n", "            ", "self", ".", "images_lists", ".", "append", "(", "images_lists", "[", "c", "]", ")", "\n", "self", ".", "labels", "[", "images_lists", "[", "c", "]", "]", "=", "i", "\n", "", "assert", "np", ".", "all", "(", "self", ".", "labels", "!=", "-", "1", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'pic time: {0:.0f} s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "end", ")", ")", "\n", "", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.preprocess_features": [[12, 46], ["numpy.any", "numpy.any", "numpy.linalg.norm", "numpy.isnan", "Exception", "print", "faiss.PCAMatrix", "faiss.PCAMatrix.train", "faiss.PCAMatrix.apply_py", "numpy.isnan", "Exception", "numpy.isnan().sum().item", "float", "numpy.size", "numpy.isnan", "numpy.isnan().sum", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train"], ["def", "preprocess_features", "(", "npdata", ",", "pca", ")", ":", "\n", "    ", "\"\"\"Preprocess an array of features.\n    Args:\n        npdata (np.array N * ndim): features to preprocess\n        pca (int): dim of output\n    Returns:\n        np.array of dim N * pca: data PCA-reduced, whitened and L2-normalized\n    \"\"\"", "\n", "_", ",", "ndim", "=", "npdata", ".", "shape", "\n", "#npdata =  npdata.astype('float32')", "\n", "assert", "npdata", ".", "dtype", "==", "np", ".", "float32", "\n", "\n", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "npdata", ")", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"nan occurs\"", ")", "\n", "", "if", "pca", "!=", "-", "1", ":", "\n", "        ", "print", "(", "\"\\nPCA from dim {} to dim {}\"", ".", "format", "(", "ndim", ",", "pca", ")", ")", "\n", "mat", "=", "faiss", ".", "PCAMatrix", "(", "ndim", ",", "pca", ",", "eigen_power", "=", "-", "0.5", ")", "\n", "mat", ".", "train", "(", "npdata", ")", "\n", "assert", "mat", ".", "is_trained", "\n", "npdata", "=", "mat", ".", "apply_py", "(", "npdata", ")", "\n", "", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "npdata", ")", ")", ":", "\n", "        ", "percent", "=", "np", ".", "isnan", "(", "npdata", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "float", "(", "np", ".", "size", "(", "npdata", ")", ")", "*", "100", "\n", "if", "percent", ">", "0.1", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"More than 0.1% nan occurs after pca, percent: {}%\"", ".", "format", "(", "\n", "percent", ")", ")", "\n", "", "else", ":", "\n", "            ", "npdata", "[", "np", ".", "isnan", "(", "npdata", ")", "]", "=", "0.", "\n", "# L2 normalization", "\n", "", "", "row_sums", "=", "np", ".", "linalg", ".", "norm", "(", "npdata", ",", "axis", "=", "1", ")", "\n", "\n", "npdata", "=", "npdata", "/", "(", "row_sums", "[", ":", ",", "np", ".", "newaxis", "]", "+", "1e-10", ")", "\n", "\n", "return", "npdata", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.make_graph": [[48, 69], ["faiss.StandardGpuResources", "faiss.GpuIndexFlatConfig", "faiss.GpuIndexFlatL2", "faiss.GpuIndexFlatL2.add", "faiss.GpuIndexFlatL2.search", "int", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_runner.SearchRunner.search"], ["", "def", "make_graph", "(", "xb", ",", "nnn", ")", ":", "\n", "    ", "\"\"\"Builds a graph of nearest neighbors.\n    Args:\n        xb (np.array): data\n        nnn (int): number of nearest neighbors\n    Returns:\n        list: for each data the list of ids to its nnn nearest neighbors\n        list: for each data the list of distances to its nnn NN\n    \"\"\"", "\n", "N", ",", "dim", "=", "xb", ".", "shape", "\n", "\n", "# we need only a StandardGpuResources per GPU", "\n", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "\n", "# L2", "\n", "flat_config", "=", "faiss", ".", "GpuIndexFlatConfig", "(", ")", "\n", "flat_config", ".", "device", "=", "int", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "-", "1", "\n", "index", "=", "faiss", ".", "GpuIndexFlatL2", "(", "res", ",", "dim", ",", "flat_config", ")", "\n", "index", ".", "add", "(", "xb", ")", "\n", "D", ",", "I", "=", "index", ".", "search", "(", "xb", ",", "nnn", "+", "1", ")", "\n", "return", "I", ",", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.run_kmeans": [[71, 105], ["faiss.Clustering", "numpy.random.randint", "faiss.StandardGpuResources", "faiss.GpuIndexFlatConfig", "faiss.GpuIndexFlatL2", "faiss.Clustering.train", "faiss.GpuIndexFlatL2.search", "faiss.vector_to_array", "print", "int"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_runner.SearchRunner.search"], ["", "def", "run_kmeans", "(", "x", ",", "nmb_clusters", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Runs kmeans on 1 GPU.\n    Args:\n        x: data\n        nmb_clusters (int): number of clusters\n    Returns:\n        list: ids of data in each cluster\n    \"\"\"", "\n", "n_data", ",", "d", "=", "x", ".", "shape", "\n", "\n", "# faiss implementation of k-means", "\n", "clus", "=", "faiss", ".", "Clustering", "(", "d", ",", "nmb_clusters", ")", "\n", "\n", "# Change faiss seed at each k-means so that the randomly picked", "\n", "# initialization centroids do not correspond to the same feature ids", "\n", "# from an epoch to another.", "\n", "clus", ".", "seed", "=", "np", ".", "random", ".", "randint", "(", "1234", ")", "\n", "\n", "clus", ".", "niter", "=", "20", "\n", "clus", ".", "max_points_per_centroid", "=", "10000000", "\n", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "flat_config", "=", "faiss", ".", "GpuIndexFlatConfig", "(", ")", "\n", "flat_config", ".", "useFloat16", "=", "False", "\n", "flat_config", ".", "device", "=", "0", "\n", "index", "=", "faiss", ".", "GpuIndexFlatL2", "(", "res", ",", "d", ",", "flat_config", ")", "\n", "\n", "# perform the training", "\n", "clus", ".", "train", "(", "x", ",", "index", ")", "\n", "_", ",", "I", "=", "index", ".", "search", "(", "x", ",", "1", ")", "\n", "losses", "=", "faiss", ".", "vector_to_array", "(", "clus", ".", "obj", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'k-means loss evolution: {0}'", ".", "format", "(", "losses", ")", ")", "\n", "\n", "", "return", "[", "int", "(", "n", "[", "0", "]", ")", "for", "n", "in", "I", "]", ",", "losses", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.arrange_clustering": [[107, 115], ["enumerate", "numpy.argsort", "image_indexes.extend", "pseudolabels.extend", "numpy.asarray", "len"], "function", ["None"], ["", "def", "arrange_clustering", "(", "images_lists", ")", ":", "\n", "    ", "pseudolabels", "=", "[", "]", "\n", "image_indexes", "=", "[", "]", "\n", "for", "cluster", ",", "images", "in", "enumerate", "(", "images_lists", ")", ":", "\n", "        ", "image_indexes", ".", "extend", "(", "images", ")", "\n", "pseudolabels", ".", "extend", "(", "[", "cluster", "]", "*", "len", "(", "images", ")", ")", "\n", "", "indexes", "=", "np", ".", "argsort", "(", "image_indexes", ")", "\n", "return", "np", ".", "asarray", "(", "pseudolabels", ")", "[", "indexes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.make_adjacencyW": [[142, 167], ["numpy.reshape", "numpy.multiply", "numpy.vectorize", "np.vectorize."], "function", ["None"], ["", "", "def", "make_adjacencyW", "(", "I", ",", "D", ",", "sigma", ")", ":", "\n", "    ", "\"\"\"Create adjacency matrix with a Gaussian kernel.\n    Args:\n        I (numpy array): for each vertex the ids to its nnn linked vertices\n                  + first column of identity.\n        D (numpy array): for each data the l2 distances to its nnn linked vertices\n                  + first column of zeros.\n        sigma (float): Bandwith of the Gaussian kernel.\n\n    Returns:\n        csr_matrix: affinity matrix of the graph.\n    \"\"\"", "\n", "V", ",", "k", "=", "I", ".", "shape", "\n", "k", "=", "k", "-", "1", "\n", "indices", "=", "np", ".", "reshape", "(", "np", ".", "delete", "(", "I", ",", "0", ",", "1", ")", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "indptr", "=", "np", ".", "multiply", "(", "k", ",", "np", ".", "arange", "(", "V", "+", "1", ")", ")", "\n", "\n", "def", "exp_ker", "(", "d", ")", ":", "\n", "        ", "return", "np", ".", "exp", "(", "-", "d", "/", "sigma", "**", "2", ")", "\n", "\n", "", "exp_ker", "=", "np", ".", "vectorize", "(", "exp_ker", ")", "\n", "res_D", "=", "exp_ker", "(", "D", ")", "\n", "data", "=", "np", ".", "reshape", "(", "np", ".", "delete", "(", "res_D", ",", "0", ",", "1", ")", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "adj_matrix", "=", "csr_matrix", "(", "(", "data", "[", "0", "]", ",", "indices", "[", "0", "]", ",", "indptr", ")", ",", "shape", "=", "(", "V", ",", "V", ")", ")", "\n", "return", "adj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.run_pic": [[169, 200], ["clustering.make_adjacencyW", "time.time", "v0.astype", "time.time", "range", "make_adjacencyW.transpose", "numpy.ones", "numpy.zeros", "np.zeros.sum", "int", "W.transpose().dot", "clustering.find_maxima_cluster", "W.transpose"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.make_adjacencyW", "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.find_maxima_cluster"], ["", "def", "run_pic", "(", "I", ",", "D", ",", "sigma", ",", "alpha", ")", ":", "\n", "    ", "\"\"\"Run PIC algorithm\"\"\"", "\n", "a", "=", "make_adjacencyW", "(", "I", ",", "D", ",", "sigma", ")", "\n", "graph", "=", "a", "+", "a", ".", "transpose", "(", ")", "\n", "cgraph", "=", "graph", "\n", "nim", "=", "graph", ".", "shape", "[", "0", "]", "\n", "\n", "W", "=", "graph", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "v0", "=", "np", ".", "ones", "(", "nim", ")", "/", "nim", "\n", "\n", "# power iterations", "\n", "v", "=", "v0", ".", "astype", "(", "'float32'", ")", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "dt", "=", "0", "\n", "for", "i", "in", "range", "(", "200", ")", ":", "\n", "        ", "vnext", "=", "np", ".", "zeros", "(", "nim", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "vnext", "=", "vnext", "+", "W", ".", "transpose", "(", ")", ".", "dot", "(", "v", ")", "\n", "\n", "vnext", "=", "alpha", "*", "vnext", "+", "(", "1", "-", "alpha", ")", "/", "nim", "\n", "# L1 normalize", "\n", "vnext", "/=", "vnext", ".", "sum", "(", ")", "\n", "v", "=", "vnext", "\n", "\n", "if", "(", "i", "==", "200", "-", "1", ")", ":", "\n", "            ", "clust", "=", "find_maxima_cluster", "(", "W", ",", "v", ")", "\n", "\n", "", "", "return", "[", "int", "(", "i", ")", "for", "i", "in", "clust", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.find_maxima_cluster": [[202, 233], ["numpy.zeros", "list", "range", "range", "range", "range", "range", "numpy.ones"], "function", ["None"], ["", "def", "find_maxima_cluster", "(", "W", ",", "v", ")", ":", "\n", "    ", "n", ",", "m", "=", "W", ".", "shape", "\n", "assert", "(", "n", "==", "m", ")", "\n", "assign", "=", "np", ".", "zeros", "(", "n", ")", "\n", "# for each node", "\n", "pointers", "=", "list", "(", "range", "(", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "best_vi", "=", "0", "\n", "l0", "=", "W", ".", "indptr", "[", "i", "]", "\n", "l1", "=", "W", ".", "indptr", "[", "i", "+", "1", "]", "\n", "for", "l", "in", "range", "(", "l0", ",", "l1", ")", ":", "\n", "            ", "j", "=", "W", ".", "indices", "[", "l", "]", "\n", "vi", "=", "W", ".", "data", "[", "l", "]", "*", "(", "v", "[", "j", "]", "-", "v", "[", "i", "]", ")", "\n", "if", "vi", ">", "best_vi", ":", "\n", "                ", "best_vi", "=", "vi", "\n", "pointers", "[", "i", "]", "=", "j", "\n", "", "", "", "n_clus", "=", "0", "\n", "cluster_ids", "=", "-", "1", "*", "np", ".", "ones", "(", "n", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "if", "pointers", "[", "i", "]", "==", "i", ":", "\n", "            ", "cluster_ids", "[", "i", "]", "=", "n_clus", "\n", "n_clus", "=", "n_clus", "+", "1", "\n", "", "", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "# go from pointers to pointers starting from i until reached a local optim", "\n", "        ", "current_node", "=", "i", "\n", "while", "pointers", "[", "current_node", "]", "!=", "current_node", ":", "\n", "            ", "current_node", "=", "pointers", "[", "current_node", "]", "\n", "\n", "", "assign", "[", "i", "]", "=", "cluster_ids", "[", "current_node", "]", "\n", "assert", "(", "assign", "[", "i", "]", ">=", "0", ")", "\n", "", "return", "assign", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.cifar.Cifar10.__init__": [[16, 26], ["torchvision.datasets.CIFAR10", "Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "split", ")", ":", "\n", "        ", "assert", "split", "in", "[", "'train'", ",", "'test'", "]", "\n", "try", ":", "\n", "            ", "self", ".", "cifar", "=", "CIFAR10", "(", "\n", "root", "=", "root", ",", "train", "=", "split", "==", "'train'", ",", "download", "=", "False", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "\"Please download CIFAR10 manually, \\\n                  in case of downloading the dataset parallelly \\\n                  that may corrupt the dataset.\"", ")", "\n", "", "self", ".", "labels", "=", "self", ".", "cifar", ".", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.cifar.Cifar10.get_length": [[27, 29], ["len"], "methods", ["None"], ["", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "cifar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.cifar.Cifar10.get_sample": [[30, 34], ["PIL.Image.fromarray"], "methods", ["None"], ["", "def", "get_sample", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "Image", ".", "fromarray", "(", "self", ".", "cifar", ".", "data", "[", "idx", "]", ")", "\n", "target", "=", "self", ".", "labels", "[", "idx", "]", "# img: HWC, RGB", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.cifar.Cifar100.__init__": [[41, 51], ["torchvision.datasets.CIFAR100", "Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "split", ")", ":", "\n", "        ", "assert", "split", "in", "[", "'train'", ",", "'test'", "]", "\n", "try", ":", "\n", "            ", "self", ".", "cifar", "=", "CIFAR100", "(", "\n", "root", "=", "root", ",", "train", "=", "split", "==", "'train'", ",", "download", "=", "False", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "\"Please download CIFAR10 manually, \\\n                  in case of downloading the dataset parallelly \\\n                  that may corrupt the dataset.\"", ")", "\n", "", "self", ".", "labels", "=", "self", ".", "cifar", ".", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.cifar.Cifar100.get_length": [[52, 54], ["len"], "methods", ["None"], ["", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "cifar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.cifar.Cifar100.get_sample": [[55, 59], ["PIL.Image.fromarray"], "methods", ["None"], ["", "def", "get_sample", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "Image", ".", "fromarray", "(", "self", ".", "cifar", ".", "data", "[", "idx", "]", ")", "\n", "target", "=", "self", ".", "labels", "[", "idx", "]", "# img: HWC, RGB", "\n", "return", "img", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.__init__": [[11, 24], ["open", "f.readlines", "len", "zip", "os.path.join", "lines[].split", "int", "l.strip", "l.strip().split", "l.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_file", ",", "memcached", "=", "False", ",", "mclient_path", "=", "None", ")", ":", "\n", "        ", "with", "open", "(", "list_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "has_labels", "=", "len", "(", "lines", "[", "0", "]", ".", "split", "(", ")", ")", "==", "2", "\n", "if", "self", ".", "has_labels", ":", "\n", "            ", "self", ".", "fns", ",", "self", ".", "labels", "=", "zip", "(", "*", "[", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "l", "in", "lines", "]", ")", "\n", "self", ".", "labels", "=", "[", "int", "(", "l", ")", "for", "l", "in", "self", ".", "labels", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "fns", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "lines", "]", "\n", "", "self", ".", "fns", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "fn", ")", "for", "fn", "in", "self", ".", "fns", "]", "\n", "self", ".", "memcached", "=", "memcached", "\n", "self", ".", "mclient_path", "=", "mclient_path", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList._init_memcached": [[25, 30], ["utils.McLoader"], "methods", ["None"], ["", "def", "_init_memcached", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "assert", "self", ".", "mclient_path", "is", "not", "None", "\n", "self", ".", "mc_loader", "=", "McLoader", "(", "self", ".", "mclient_path", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_length": [[31, 33], ["len"], "methods", ["None"], ["", "", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "fns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList.get_sample": [[34, 47], ["PIL.Image.open.convert", "image_list.ImageList._init_memcached", "image_list.ImageList.mc_loader", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.image_list.ImageList._init_memcached"], ["", "def", "get_sample", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "memcached", ":", "\n", "            ", "self", ".", "_init_memcached", "(", ")", "\n", "", "if", "self", ".", "memcached", ":", "\n", "            ", "img", "=", "self", ".", "mc_loader", "(", "self", ".", "fns", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "self", ".", "fns", "[", "idx", "]", ")", "\n", "", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "has_labels", ":", "\n", "            ", "target", "=", "self", ".", "labels", "[", "idx", "]", "\n", "return", "img", ",", "target", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.imagenet.ImageNet.__init__": [[8, 11], ["image_list.ImageList.__init__"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", "\n", "\n", "import", "os", "\n", "import", "torchvision", ".", "transforms", "as", "transforms", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.utils.McLoader.__init__": [[16, 25], ["mc.MemcachedClient.GetInstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mclient_path", ")", ":", "\n", "        ", "assert", "mclient_path", "is", "not", "None", ",", "\"Please specify 'data_mclient_path' in the config.\"", "\n", "self", ".", "mclient_path", "=", "mclient_path", "\n", "server_list_config_file", "=", "\"{}/server_list.conf\"", ".", "format", "(", "\n", "self", ".", "mclient_path", ")", "\n", "client_config_file", "=", "\"{}/client.conf\"", ".", "format", "(", "self", ".", "mclient_path", ")", "\n", "self", ".", "mclient", "=", "mc", ".", "MemcachedClient", ".", "GetInstance", "(", "server_list_config_file", ",", "\n", "client_config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.utils.McLoader.__call__": [[26, 37], ["mc.pyvector", "utils.McLoader.mclient.Get", "mc.ConvertBuffer", "utils.pil_loader", "print"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.utils.pil_loader"], ["", "def", "__call__", "(", "self", ",", "fn", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "img_value", "=", "mc", ".", "pyvector", "(", ")", "\n", "self", ".", "mclient", ".", "Get", "(", "fn", ",", "img_value", ")", "\n", "img_value_str", "=", "mc", ".", "ConvertBuffer", "(", "img_value", ")", "\n", "img", "=", "pil_loader", "(", "img_value_str", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'Read image failed ({})'", ".", "format", "(", "fn", ")", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.data_sources.utils.pil_loader": [[9, 12], ["io.BytesIO", "PIL.Image.open"], "function", ["None"], ["", "def", "pil_loader", "(", "img_str", ")", ":", "\n", "    ", "buff", "=", "io", ".", "BytesIO", "(", "img_str", ")", "\n", "return", "Image", ".", "open", "(", "buff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.RandomAppliedTrans.__init__": [[38, 41], ["torchvision.transforms.RandomApply", "transforms.RandomAppliedTrans.utils.build_from_cfg"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg"], ["", "", "class", "ERandomCrop", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "imgsize", ",", "min_covered", "=", "0.1", ",", "aspect_ratio_range", "=", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", ",", "\n", "area_range", "=", "(", "0.1", ",", "1.0", ")", ",", "max_attempts", "=", "10", ")", ":", "\n", "        ", "assert", "0.0", "<", "min_covered", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.RandomAppliedTrans.__call__": [[42, 44], ["torchvision.transforms.RandomAppliedTrans.trans"], "methods", ["None"], ["assert", "0", "<", "aspect_ratio_range", "[", "0", "]", "<=", "aspect_ratio_range", "[", "1", "]", "\n", "assert", "0", "<", "area_range", "[", "0", "]", "<=", "area_range", "[", "1", "]", "\n", "assert", "1", "<=", "max_attempts", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.RandomAppliedTrans.__repr__": [[45, 48], ["None"], "methods", ["None"], ["\n", "self", ".", "imgsize", "=", "imgsize", "\n", "self", ".", "min_covered", "=", "min_covered", "\n", "self", ".", "aspect_ratio_range", "=", "aspect_ratio_range", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.Lighting.__init__": [[65, 69], ["None"], "methods", ["None"], ["                ", "max_height", "=", "(", "original_width", "+", "0.5", "-", "1e-7", ")", "/", "aspect_ratio", "\n", "max_height", "=", "int", "(", "max_height", ")", "\n", "if", "max_height", "*", "aspect_ratio", ">", "original_width", ":", "\n", "                    ", "max_height", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.Lighting.__call__": [[70, 83], ["isinstance", "img.new().resize_().normal_", "torchvision.transforms.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "type", "torchvision.transforms.Lighting.view().expand_as", "img.new().resize_", "torchvision.transforms.Lighting.eigvec.type_as().clone().mul().mul().sum", "torchvision.transforms.Lighting.view", "img.new", "torchvision.transforms.Lighting.eigvec.type_as().clone().mul().mul", "torchvision.transforms.Lighting.eigval.view().expand", "torchvision.transforms.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "torchvision.transforms.Lighting.eigval.view", "torchvision.transforms.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "torchvision.transforms.Lighting.eigvec.type_as"], "methods", ["None"], ["", "", "if", "max_height", ">", "original_height", ":", "\n", "                ", "max_height", "=", "original_height", "\n", "\n", "", "if", "height", ">=", "max_height", ":", "\n", "                ", "height", "=", "max_height", "\n", "\n", "", "height", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "height", ",", "max_height", ")", ")", ")", "\n", "width", "=", "int", "(", "round", "(", "height", "*", "aspect_ratio", ")", ")", "\n", "area", "=", "width", "*", "height", "\n", "\n", "if", "area", "<", "min_area", "or", "area", ">", "max_area", ":", "\n", "                ", "continue", "\n", "", "if", "width", ">", "original_width", "or", "height", ">", "original_height", ":", "\n", "                ", "continue", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.Lighting.__repr__": [[84, 87], ["None"], "methods", ["None"], ["", "if", "area", "<", "self", ".", "min_covered", "*", "(", "original_width", "*", "original_height", ")", ":", "\n", "                ", "continue", "\n", "", "if", "width", "==", "original_width", "and", "height", "==", "original_height", ":", "\n", "                ", "return", "self", ".", "_fallback", "(", "img", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.GaussianBlur.__init__": [[106, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "imgsize", ")", ":", "\n", "        ", "self", ".", "imgsize", "=", "imgsize", "\n", "self", ".", "resize_method", "=", "Resize", "(", "(", "imgsize", ",", "imgsize", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.GaussianBlur.__call__": [[110, 114], ["numpy.random.uniform", "img.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "image_width", ",", "image_height", "=", "img", ".", "size", "\n", "image_short", "=", "min", "(", "image_width", ",", "image_height", ")", "\n", "\n", "crop_size", "=", "float", "(", "self", ".", "imgsize", ")", "/", "(", "self", ".", "imgsize", "+", "32", ")", "*", "image_short", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.GaussianBlur.__repr__": [[115, 118], ["None"], "methods", ["None"], ["\n", "crop_height", ",", "crop_width", "=", "crop_size", ",", "crop_size", "\n", "crop_top", "=", "int", "(", "round", "(", "(", "image_height", "-", "crop_height", ")", "/", "2.", ")", ")", "\n", "crop_left", "=", "int", "(", "round", "(", "(", "image_width", "-", "crop_width", ")", "/", "2.", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.Solarization.__init__": [[123, 125], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.Solarization.__call__": [[126, 130], ["numpy.array", "numpy.where", "PIL.Image.fromarray", "numpy.where.astype"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.pipelines.transforms.Solarization.__repr__": [[131, 134], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedSampler.__init__": [[13, 32], ["torch.utils.data.DistributedSampler.__init__", "math.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "replace", "=", "False", ",", "\n", "# my", "\n", "repeat", "=", "1", ",", "\n", "imgs_per_gpu", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "replace", "=", "replace", "\n", "self", ".", "unif_sampling_flag", "=", "False", "\n", "# my", "\n", "self", ".", "repeat", "=", "repeat", "\n", "self", ".", "imgs_per_gpu", "=", "imgs_per_gpu", "\n", "if", "self", ".", "repeat", "!=", "1", ":", "\n", "            ", "self", ".", "num_samples", "=", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "/", "self", ".", "num_replicas", "/", "self", ".", "imgs_per_gpu", ")", "*", "self", ".", "imgs_per_gpu", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedSampler.__iter__": [[33, 48], ["sampler.DistributedSampler.generate_new_list", "iter", "numpy.array", "iter", "numpy.repeat().flatten().tolist", "numpy.repeat().flatten", "numpy.repeat", "numpy.split"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedSampler.generate_new_list"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "not", "self", ".", "unif_sampling_flag", ":", "\n", "            ", "self", ".", "generate_new_list", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "unif_sampling_flag", "=", "False", "\n", "", "if", "self", ".", "repeat", "==", "1", ":", "\n", "            ", "return", "iter", "(", "self", ".", "indices", "[", "self", ".", "rank", "*", "self", ".", "num_samples", ":", "(", "self", ".", "rank", "+", "1", ")", "*", "\n", "self", ".", "num_samples", "]", ")", "\n", "# my", "\n", "", "else", ":", "\n", "            ", "indices", "=", "np", ".", "array", "(", "self", ".", "indices", "[", "self", ".", "rank", "*", "self", ".", "num_samples", ":", "(", "self", ".", "rank", "+", "1", ")", "*", "\n", "self", ".", "num_samples", "]", ")", "\n", "return", "iter", "(", "np", ".", "repeat", "(", "np", ".", "split", "(", "indices", ",", "self", ".", "num_samples", "/", "self", ".", "imgs_per_gpu", ")", ",", "\n", "self", ".", "repeat", ",", "0", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedSampler.__len__": [[50, 52], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "self", ".", "repeat", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedSampler.generate_new_list": [[53, 73], ["torch.Generator", "torch.Generator.manual_seed", "torch.arange().tolist", "len", "torch.randint().tolist", "torch.randperm().tolist", "torch.arange", "len", "torch.randint", "torch.randperm", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "generate_new_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "if", "self", ".", "replace", ":", "\n", "                ", "indices", "=", "torch", ".", "randint", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "len", "(", "self", ".", "dataset", ")", ",", "\n", "size", "=", "(", "len", "(", "self", ".", "dataset", ")", ",", ")", ",", "\n", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                ", "indices", "=", "torch", ".", "randperm", "(", "\n", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedSampler.set_uniform_indices": [[74, 102], ["numpy.random.seed", "len", "enumerate", "enumerate", "numpy.array", "numpy.random.shuffle", "indices[].astype().tolist", "len", "len", "int", "images_lists[].append", "indices[].astype().tolist.extend", "len", "len", "len", "len", "range", "len", "numpy.random.choice", "indices[].astype", "len", "len"], "methods", ["None"], ["", "def", "set_uniform_indices", "(", "self", ",", "labels", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "unif_sampling_flag", "=", "True", "\n", "assert", "self", ".", "shuffle", ",", "\"Using uniform sampling, the indices must be shuffled.\"", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "epoch", ")", "\n", "assert", "(", "len", "(", "labels", ")", "==", "len", "(", "self", ".", "dataset", ")", ")", "\n", "N", "=", "len", "(", "labels", ")", "\n", "size_per_label", "=", "int", "(", "N", "/", "num_classes", ")", "+", "1", "\n", "indices", "=", "[", "]", "\n", "images_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "images_lists", "[", "l", "]", ".", "append", "(", "i", ")", "\n", "", "for", "i", ",", "l", "in", "enumerate", "(", "images_lists", ")", ":", "\n", "            ", "if", "len", "(", "l", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indices", ".", "extend", "(", "\n", "np", ".", "random", ".", "choice", "(", "\n", "l", ",", "size_per_label", ",", "replace", "=", "(", "len", "(", "l", ")", "<=", "size_per_label", ")", ")", ")", "\n", "", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "indices", "=", "indices", "[", ":", "N", "]", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "assert", "len", "(", "indices", ")", "<=", "self", ".", "total_size", ",", "\"{} vs {}\"", ".", "format", "(", "len", "(", "indices", ")", ",", "self", ".", "total_size", ")", "\n", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", ",", "\"{} vs {}\"", ".", "format", "(", "len", "(", "indices", ")", ",", "self", ".", "total_size", ")", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.GroupSampler.__init__": [[106, 116], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "np", ".", "ceil", "(", "\n", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.GroupSampler.__iter__": [[117, 140], ["enumerate", "numpy.concatenate", "numpy.concatenate", "indices.astype().tolist.astype().tolist.astype().tolist", "iter", "numpy.random.shuffle", "numpy.concatenate", "indices.astype().tolist.astype().tolist.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "indices.astype().tolist.astype().tolist.astype", "int", "numpy.random.choice", "range", "numpy.ceil", "len"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "\n", "[", "indice", ",", "np", ".", "random", ".", "choice", "(", "indice", ",", "num_extra", ")", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "\n", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "indices", ".", "astype", "(", "np", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.GroupSampler.__len__": [[141, 143], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGroupSampler.__init__": [[160, 186], ["mmcv.runner.get_dist_info", "hasattr", "numpy.bincount", "enumerate", "int", "math.ceil"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ")", ":", "\n", "        ", "_rank", ",", "_num_replicas", "=", "get_dist_info", "(", ")", "\n", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "_num_replicas", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "_rank", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "group_sizes", "[", "i", "]", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "\n", "self", ".", "num_replicas", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGroupSampler.__iter__": [[187, 226], ["torch.Generator", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "indice[].tolist.copy", "range", "indice[].tolist.extend", "indices.extend", "list", "range", "numpy.where", "len", "len", "indice[].tolist.extend", "torch.randperm", "int", "len", "list", "math.ceil", "torch.randperm", "int"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "indice", "=", "indice", "[", "list", "(", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "\n", "generator", "=", "g", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "# pad indice", "\n", "tmp", "=", "indice", ".", "copy", "(", ")", "\n", "for", "_", "in", "range", "(", "extra", "//", "size", ")", ":", "\n", "                    ", "indice", ".", "extend", "(", "tmp", ")", "\n", "", "indice", ".", "extend", "(", "tmp", "[", ":", "extra", "%", "size", "]", ")", "\n", "indices", ".", "extend", "(", "indice", ")", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "\n", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "generator", "=", "g", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "\n", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGroupSampler.__len__": [[227, 229], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGroupSampler.set_epoch": [[230, 232], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGivenIterationSampler.__init__": [[236, 255], ["mmcv.runner.get_dist_info", "sampler.DistributedGivenIterationSampler.gen_new_list"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGivenIterationSampler.gen_new_list"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "total_iter", ",", "\n", "batch_size", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "last_iter", "=", "-", "1", ")", ":", "\n", "        ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "assert", "rank", "<", "world_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "total_iter", "=", "total_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "last_iter", "=", "last_iter", "\n", "\n", "self", ".", "total_size", "=", "self", ".", "total_iter", "*", "self", ".", "batch_size", "\n", "\n", "self", ".", "indices", "=", "self", ".", "gen_new_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGivenIterationSampler.__iter__": [[256, 258], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indices", "[", "(", "self", ".", "last_iter", "+", "1", ")", "*", "self", ".", "batch_size", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGivenIterationSampler.set_uniform_indices": [[259, 290], ["numpy.random.seed", "len", "enumerate", "enumerate", "numpy.array", "numpy.random.shuffle", "indices[].astype", "numpy.tile", "numpy.random.shuffle", "len", "len", "int", "images_lists[].append", "numpy.tile.extend", "len", "range", "len", "numpy.random.choice", "len"], "methods", ["None"], ["", "def", "set_uniform_indices", "(", "self", ",", "labels", ",", "num_classes", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "assert", "(", "len", "(", "labels", ")", "==", "len", "(", "self", ".", "dataset", ")", ")", "\n", "N", "=", "len", "(", "labels", ")", "\n", "size_per_label", "=", "int", "(", "N", "/", "num_classes", ")", "+", "1", "\n", "indices", "=", "[", "]", "\n", "images_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "images_lists", "[", "l", "]", ".", "append", "(", "i", ")", "\n", "", "for", "i", ",", "l", "in", "enumerate", "(", "images_lists", ")", ":", "\n", "            ", "if", "len", "(", "l", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indices", ".", "extend", "(", "\n", "np", ".", "random", ".", "choice", "(", "\n", "l", ",", "size_per_label", ",", "replace", "=", "(", "len", "(", "l", ")", "<=", "size_per_label", ")", ")", ")", "\n", "", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "indices", "=", "indices", "[", ":", "N", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "# repeat", "\n", "all_size", "=", "self", ".", "total_size", "*", "self", ".", "world_size", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "num_repeat", "=", "(", "all_size", "-", "1", ")", "//", "indices", ".", "shape", "[", "0", "]", "+", "1", "\n", "indices", "=", "np", ".", "tile", "(", "indices", ",", "num_repeat", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "# slice", "\n", "beg", "=", "self", ".", "total_size", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "beg", ":", "beg", "+", "self", ".", "total_size", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "# set", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGivenIterationSampler.gen_new_list": [[291, 310], ["numpy.random.seed", "numpy.arange", "numpy.tile", "numpy.random.shuffle", "len", "len"], "methods", ["None"], ["", "def", "gen_new_list", "(", "self", ")", ":", "\n", "\n", "# each process shuffle all list with same seed, and pick one piece according to rank", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "all_size", "=", "self", ".", "total_size", "*", "self", ".", "world_size", "\n", "indices", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "num_repeat", "=", "(", "all_size", "-", "1", ")", "//", "indices", ".", "shape", "[", "0", "]", "+", "1", "\n", "indices", "=", "np", ".", "tile", "(", "indices", ",", "num_repeat", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "beg", "=", "self", ".", "total_size", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "beg", ":", "beg", "+", "self", ".", "total_size", "]", "\n", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGivenIterationSampler.__len__": [[311, 317], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# note here we do not take last iter into consideration, since __len__", "\n", "# should only be used for displaying, the correct remaining size is", "\n", "# handled by dataloader", "\n", "#return self.total_size - (self.last_iter+1)*self.batch_size", "\n", "        ", "return", "self", ".", "total_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGivenIterationSampler.set_epoch": [[318, 320], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader": [[21, 83], ["torch.utils.data.DataLoader", "mmcv.runner.get_dist_info", "sampler.DistributedSampler", "torch.utils.data.RandomSampler", "functools.partial"], "function", ["None"], ["", "def", "build_dataloader", "(", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "dist", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "\n", "replace", "=", "False", ",", "\n", "seed", "=", "None", ",", "\n", "# my", "\n", "repeat", "=", "1", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build PyTorch DataLoader.\n\n    In distributed training, each GPU/process has a dataloader.\n    In non-distributed training, there is only one dataloader for all GPUs.\n\n    Args:\n        dataset (Dataset): A PyTorch dataset.\n        imgs_per_gpu (int): Number of images on each GPU, i.e., batch size of\n            each GPU.\n        workers_per_gpu (int): How many subprocesses to use for data loading\n            for each GPU.\n        num_gpus (int): Number of GPUs. Only used in non-distributed training.\n        dist (bool): Distributed training/test or not. Default: True.\n        shuffle (bool): Whether to shuffle the data at every epoch.\n            Default: True.\n        replace (bool): Replace or not in random shuffle.\n            It works on when shuffle is True.\n        kwargs: any keyword argument to be used to initialize DataLoader\n\n    Returns:\n        DataLoader: A PyTorch dataloader.\n    \"\"\"", "\n", "if", "dist", ":", "\n", "        ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# sampler = DistributedSampler(", "\n", "#     dataset, world_size, rank, shuffle=shuffle, replace=replace)", "\n", "# my", "\n", "sampler", "=", "DistributedSampler", "(", "\n", "dataset", ",", "world_size", ",", "rank", ",", "shuffle", "=", "shuffle", ",", "replace", "=", "replace", ",", "\n", "repeat", "=", "repeat", ",", "imgs_per_gpu", "=", "imgs_per_gpu", ")", "\n", "batch_size", "=", "imgs_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "        ", "if", "replace", ":", "\n", "            ", "raise", "NotImplemented", "\n", "", "sampler", "=", "RandomSampler", "(", "\n", "dataset", ")", "if", "shuffle", "else", "None", "# TODO: set replace", "\n", "batch_size", "=", "num_gpus", "*", "imgs_per_gpu", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "partial", "(", "collate", ",", "samples_per_gpu", "=", "imgs_per_gpu", ")", ",", "\n", "pin_memory", "=", "False", ",", "\n", "worker_init_fn", "=", "worker_init_fn", "if", "seed", "is", "not", "None", "else", "None", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.worker_init_fn": [[85, 88], ["numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "worker_init_fn", "(", "seed", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.__init__": [[11, 29], ["search_phase.SearchPhase.sampleFunction", "network.reshape.reshape.reshape", "numpy.delete", "numpy.array", "numpy.array", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "initial_samples", "=", "[", "]", ",", "initial_sample", "=", "80", ",", "selects", "=", "10", ",", "\n", "height_level", "=", "[", "400", ",", "800", ",", "1600", ",", "3200", "]", ",", "sample_func", "=", "None", ",", "\n", "get_net_acc", "=", "None", ",", "logger", "=", "None", ",", "work_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "sampleFunction", "=", "sample_func", "\n", "self", ".", "get_net_acc", "=", "get_net_acc", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "work_dir", "=", "work_dir", "\n", "network", "=", "self", ".", "sampleFunction", "(", ")", "\n", "network", "=", "network", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "X", "=", "np", ".", "delete", "(", "network", ",", "0", ",", "0", ")", "\n", "self", ".", "y", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "assert", "len", "(", "initial_samples", ")", "<=", "initial_sample", "\n", "self", ".", "initial_samples", "=", "np", ".", "array", "(", "initial_samples", ")", "\n", "self", ".", "initial_sample", "=", "initial_sample", "\n", "self", ".", "selects", "=", "selects", "\n", "self", ".", "height_level", "=", "height_level", "\n", "self", ".", "current_select", "=", "0", "\n", "self", ".", "net_acc", "=", "[", "]", "\n", "# @abc.abstractmethod", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.selectSample": [[34, 73], ["set", "numpy.random.seed", "set.add", "len", "search_phase.SearchPhase.sampleFunction", "set.add", "torch.get_rank", "torch.get_rank", "learning_phase.LearningPhase", "len", "numpy.random.seed", "search_phase.SearchPhase.sampleFunction", "search_phase.SearchPhase.height", "torch.broadcast", "torch.broadcast", "numpy.array", "numpy.random.seed", "torch.get_rank", "torch.get_rank", "learning_phase.LearningPhase", "len", "str", "str", "torch.get_rank", "torch.get_rank", "search_phase.SearchPhase.classifier.ucb_select", "search_phase.SearchPhase.classifier.sample", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.int().cpu", "torch.zeros().cuda.int().cpu", "len", "search_phase.SearchPhase.height", "str", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda.int", "torch.zeros().cuda.int"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.height", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.LearningPhase.ucb_select", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.LearningPhase.sample", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.height"], ["", "def", "selectSample", "(", "self", ")", ":", "\n", "        ", "XSet", "=", "set", "(", ")", "\n", "\n", "for", "X_s", "in", "self", ".", "initial_samples", ":", "\n", "            ", "X_s_str", "=", "'_'", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "X_s", "]", ")", "\n", "XSet", ".", "add", "(", "X_s_str", ")", "\n", "yield", "X_s", "\n", "\n", "", "while", "len", "(", "self", ".", "y", ")", "<", "self", ".", "initial_sample", ":", "\n", "            ", "X_s", "=", "self", ".", "sampleFunction", "(", ")", "\n", "X_s_str", "=", "'_'", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "X_s", "]", ")", "\n", "while", "X_s_str", "in", "XSet", ":", "\n", "                ", "X_s", "=", "self", ".", "sampleFunction", "(", ")", "\n", "X_s_str", "=", "'_'", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "X_s", "]", ")", "\n", "", "XSet", ".", "add", "(", "X_s_str", ")", "\n", "yield", "X_s", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "LearningPhase", "(", "self", ".", "X", ",", "self", ".", "y", ",", "self", ".", "height", "(", ")", ",", "1", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "len", "(", "self", ".", "y", ")", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "self", ".", "current_select", "=", "0", "\n", "while", "self", ".", "current_select", "<", "self", ".", "selects", ":", "\n", "                ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                    ", "self", ".", "path_model", ",", "self", ".", "path_node", "=", "self", ".", "classifier", ".", "ucb_select", "(", ")", "\n", "X_s", "=", "self", ".", "classifier", ".", "sample", "(", "self", ".", "path_model", ",", "self", ".", "path_node", ",", "self", ".", "sampleFunction", ")", "\n", "X_s", "=", "torch", ".", "Tensor", "(", "X_s", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "X_s", "=", "torch", ".", "zeros", "(", "self", ".", "X", ".", "shape", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "", "dist", ".", "broadcast", "(", "X_s", ",", "0", ")", "\n", "X_s", "=", "np", ".", "array", "(", "X_s", ".", "int", "(", ")", ".", "cpu", "(", ")", ",", "dtype", "=", "int", ")", "\n", "np", ".", "random", ".", "seed", "(", "len", "(", "self", ".", "y", ")", ")", "\n", "\n", "yield", "X_s", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "self", ".", "classifier", "=", "LearningPhase", "(", "self", ".", "X", ",", "self", ".", "y", ",", "self", ".", "height", "(", ")", ",", "1", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "len", "(", "self", ".", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.height": [[74, 77], ["len", "numpy.searchsorted"], "methods", ["None"], ["", "", "def", "height", "(", "self", ")", ":", "\n", "        ", "l", "=", "len", "(", "self", ".", "y", ")", "\n", "return", "np", ".", "searchsorted", "(", "self", ".", "height_level", ",", "l", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.back_propagate": [[78, 89], ["network.reshape.reshape.reshape", "numpy.array", "numpy.concatenate", "numpy.concatenate", "len", "torch.get_rank", "torch.get_rank"], "methods", ["None"], ["", "def", "back_propagate", "(", "self", ",", "network", ",", "acc", ")", ":", "\n", "        ", "if", "acc", "!=", "None", ":", "\n", "            ", "network", "=", "network", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", "\n", "acc", "=", "np", ".", "array", "(", "[", "acc", "]", ")", "\n", "self", ".", "X", "=", "np", ".", "concatenate", "(", "[", "self", ".", "X", ",", "network", "]", ")", "\n", "self", ".", "y", "=", "np", ".", "concatenate", "(", "[", "self", ".", "y", ",", "acc", "]", ")", "\n", "", "if", "len", "(", "self", ".", "y", ")", ">", "self", ".", "initial_sample", ":", "\n", "            ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "for", "n", "in", "self", ".", "path_model", ":", "\n", "                    ", "n", ".", "n", "=", "n", ".", "n", "+", "1", "\n", "", "", "self", ".", "current_select", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.step_start_trigger": [[90, 93], ["None"], "methods", ["None"], ["", "", "def", "step_start_trigger", "(", "self", ")", ":", "\n", "# define your method before learning action space", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.step_end_trigger": [[94, 97], ["search_phase.SearchPhase.save_net_acc", "torch.get_rank", "torch.get_rank", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.save_net_acc"], ["", "def", "step_end_trigger", "(", "self", ")", ":", "\n", "        ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "len", "(", "self", ".", "y", ")", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "save_net_acc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.run_end_trigger": [[98, 101], ["torch.get_rank", "torch.get_rank", "search_phase.SearchPhase.save_net_acc"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.save_net_acc"], ["", "", "def", "run_end_trigger", "(", "self", ")", ":", "\n", "        ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "save_net_acc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.save_net_acc": [[102, 105], ["open", "pickle.dump", "os.path.join", "len"], "methods", ["None"], ["", "", "def", "save_net_acc", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "work_dir", ",", "'Xy_%d.pkl'", "%", "len", "(", "self", ".", "y", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "{", "'X'", ":", "self", ".", "X", ",", "'y'", ":", "self", ".", "y", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.run": [[106, 127], ["search_phase.SearchPhase.selectSample", "search_phase.SearchPhase.run_end_trigger", "search_phase.SearchPhase.step_start_trigger", "next", "search_phase.SearchPhase.back_propagate", "search_phase.SearchPhase.step_end_trigger", "len", "torch.get_rank", "torch.get_rank", "search_phase.SearchPhase.logger.info", "isinstance", "search_phase.SearchPhase.get_net_acc", "torch.get_rank", "torch.get_rank", "search_phase.SearchPhase.logger.info", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.selectSample", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.run_end_trigger", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.step_start_trigger", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.back_propagate", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.step_end_trigger"], ["", "", "def", "run", "(", "self", ",", "target_accuracy", "=", "1", ",", "max_samples", "=", "10000000", ")", ":", "\n", "        ", "sample", "=", "self", ".", "selectSample", "(", ")", "\n", "self", ".", "current_max_accuracy", "=", "0", "\n", "self", ".", "current_best_net", "=", "None", "\n", "while", "(", "self", ".", "current_max_accuracy", "<", "target_accuracy", "and", "len", "(", "self", ".", "y", ")", "<", "max_samples", ")", ":", "\n", "            ", "self", ".", "step_start_trigger", "(", ")", "\n", "network", "=", "next", "(", "sample", ")", "# Sampling a network for training", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'enconding ({}): {}'", ".", "format", "(", "len", "(", "self", ".", "y", ")", "+", "1", ",", "network", ")", ")", "\n", "", "if", "not", "isinstance", "(", "network", ",", "dict", ")", ":", "\n", "                ", "accuracy", "=", "self", ".", "get_net_acc", "(", "network", ")", "# Get the accuracy of the sampling network after training", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'accuracy: {}\\n'", ".", "format", "(", "accuracy", ")", ")", "\n", "", "self", ".", "back_propagate", "(", "network", ",", "accuracy", ")", "# update the learning phase according to the network and it's accuracy", "\n", "if", "accuracy", ">", "self", ".", "current_max_accuracy", ":", "\n", "                ", "self", ".", "current_max_accuracy", "=", "accuracy", "\n", "self", ".", "current_best_net", "=", "network", "\n", "", "self", ".", "step_end_trigger", "(", ")", "\n", "", "self", ".", "run_end_trigger", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_phase.SearchPhase.get_top_accuracy": [[128, 134], ["top_k.append", "numpy.argsort"], "methods", ["None"], ["", "def", "get_top_accuracy", "(", "self", ",", "k", ")", ":", "\n", "        ", "top_k", "=", "[", "]", "\n", "top_k_index", "=", "np", ".", "argsort", "(", "self", ".", "y", ")", "[", ":", ":", "-", "1", "]", "[", ":", "k", "]", "\n", "for", "index", "in", "top_k_index", ":", "\n", "            ", "top_k", ".", "append", "(", "[", "self", ".", "X", "[", "index", "]", ",", "self", ".", "y", "[", "index", "]", "]", ")", "\n", "", "return", "top_k", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.set_random_seed": [[23, 40], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["parser", ".", "add_argument", "(", "\n", "'--work_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume_from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pretrained'", ",", "default", "=", "None", ",", "help", "=", "'pretrained model file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "# my", "\n", "parser", ".", "add_argument", "(", "\n", "'--imgs_per_gpu'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'override cfg.data.imgs_per_gpu'", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.parse_losses": [[42, 64], ["collections.OrderedDict", "losses.items", "sum", "collections.OrderedDict.items", "isinstance", "loss_value.data.clone.item", "loss_value.data.clone.mean", "isinstance", "torch.is_available", "torch.is_initialized", "loss_value.data.clone.data.clone", "torch.all_reduce", "sum", "TypeError", "collections.OrderedDict.items", "loss_value.data.clone.div_", "torch.get_world_size", "_loss.mean"], "function", ["None"], ["'--val_imgs_per_gpu'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'override cfg.custom_hooks[0].imgs_per_gpu'", ")", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "29500", ",", "\n", "help", "=", "'port only works when launcher==\"slurm\"'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.batch_processor": [[66, 89], ["model", "train.parse_losses", "dict", "len"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.parse_losses"], ["\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "# my", "\n", "if", "args", ".", "imgs_per_gpu", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "data", ".", "imgs_per_gpu", "=", "args", ".", "imgs_per_gpu", "\n", "", "if", "args", ".", "val_imgs_per_gpu", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "custom_hooks", "[", "0", "]", ".", "imgs_per_gpu", "=", "args", ".", "val_imgs_per_gpu", "\n", "#", "\n", "\n", "# check memcached package exists", "\n", "", "if", "importlib", ".", "util", ".", "find_spec", "(", "'mc'", ")", "is", "None", ":", "\n", "        ", "traverse_replace", "(", "cfg", ",", "'memcached'", ",", "False", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.train_model": [[91, 106], ["openselfsup.utils.get_root_logger", "train._dist_train", "train._non_dist_train"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train._dist_train", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train._non_dist_train"], ["        ", "distributed", "=", "False", "\n", "assert", "cfg", ".", "model", ".", "type", "not", "in", "[", "'DeepCluster'", ",", "'MOCO'", ",", "'SimCLR'", ",", "'ODC'", ",", "'NPID'", "]", ",", "\"{} does not support non-dist training.\"", ".", "format", "(", "cfg", ".", "model", ".", "type", ")", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "if", "args", ".", "launcher", "==", "'slurm'", ":", "\n", "            ", "cfg", ".", "dist_params", "[", "'port'", "]", "=", "args", ".", "port", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'train_{}.log'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.build_optimizer": [[108, 174], ["hasattr", "optimizer_cfg.copy.copy", "optimizer_cfg.copy.pop", "mmcv.runner.obj_from_dict", "isinstance", "model.named_parameters", "getattr", "getattr.", "dict", "optimizer_cfg.pop.items", "params.append", "optimizer_cfg.copy.pop", "params.append", "re.search", "model.parameters", "options.items", "key.endswith", "openselfsup.utils.print_log", "torch.is_initialized", "torch.get_rank"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_runner.SearchRunner.search", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "logger", ".", "info", "(", "'Config:\\n{}'", ".", "format", "(", "cfg", ".", "text", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}, deterministic: {}'", ".", "format", "(", "\n", "args", ".", "seed", ",", "args", ".", "deterministic", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "\n", "if", "args", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "args", ".", "pretrained", ",", "str", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "args", ".", "pretrained", "\n", "", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "assert", "len", "(", "cfg", ".", "workflow", ")", "==", "1", ",", "\"Validation is called by hook.\"", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save openselfsup version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "openselfsup_version", "=", "__version__", ",", "config", "=", "cfg", ".", "text", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "train_model", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train._dist_train": [[176, 245], ["train.build_optimizer", "mmcv.parallel.MMDistributedDataParallel", "mmcv.runner.Runner", "openselfsup.hooks.DistOptimizerHook", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.register_hook", "cfg.get", "mmcv.runner.Runner.run", "isinstance", "openselfsup.datasets.build_dataloader", "apex.amp.initialize", "openselfsup.utils.print_log", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmcv.runner.DistSamplerSeedHook", "hook.pop", "mmcv.runner.Runner.resume", "mmcv.parallel.MMDistributedDataParallel.cuda", "dict", "dict", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.load_checkpoint", "getattr", "getattr", "getattr", "torch.cuda.current_device", "torch.cuda.current_device", "openselfsup.hooks.build_hook", "openselfsup.hooks.build_hook"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.build_optimizer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_runner.SearchRunner.run", "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.builder.build_hook", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.builder.build_hook"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train._non_dist_train": [[247, 307], ["mmcv.parallel.MMDataParallel().cuda", "train.build_optimizer", "mmcv.runner.Runner", "mmcv.runner.Runner.register_training_hooks", "cfg.get", "mmcv.runner.Runner.run", "isinstance", "openselfsup.datasets.build_dataloader", "NotImplementedError", "hook.pop", "mmcv.runner.Runner.resume", "mmcv.parallel.MMDataParallel", "dict", "dict", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.load_checkpoint", "getattr", "getattr", "openselfsup.hooks.build_hook", "openselfsup.hooks.build_hook", "range"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.train.build_optimizer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_runner.SearchRunner.run", "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.builder.build_hook", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.builder.build_hook"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.LearningPhase.__init__": [[70, 101], ["set", "numpy.median", "numpy.median", "range", "learning_phase.train_classifier", "learning_phase.LearningPhase", "learning_phase.LearningPhase", "learning_phase.LearningPhase.XSet.add", "learning_phase.train_classifier", "learning_phase.LearningPhase.path_list.append", "learning_phase.LearningPhase.path_list.append", "max", "str"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.train_classifier", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.train_classifier"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "y", ",", "height", ",", "h", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "XSet", "=", "set", "(", ")", "\n", "if", "self", ".", "h", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "s", "=", "'_'", ".", "join", "(", "[", "str", "(", "j", ")", "for", "j", "in", "X", "[", "i", "]", "]", ")", "\n", "self", ".", "XSet", ".", "add", "(", "s", ")", "\n", "", "", "self", ".", "m", "=", "np", ".", "median", "(", "y", ")", "\n", "\n", "self", ".", "threshold", "=", "np", ".", "median", "(", "y", ")", "\n", "self", ".", "n", "=", "0", "\n", "if", "self", ".", "height", ">", "0", ":", "\n", "            ", "self", ".", "model", "=", "train_classifier", "(", "X", ",", "y", ">=", "self", ".", "m", ")", "\n", "build_trial", "=", "0", "\n", "while", "self", ".", "model", ".", "best_score", "[", "\"valid_0\"", "]", "[", "\"binary_error\"", "]", ">=", "0.5", "+", "max", "(", "0", ",", "(", "build_trial", "-", "100.0", ")", "/", "1000.0", "*", "0.3", ")", ":", "\n", "                 ", "build_trial", "+=", "1", "\n", "self", ".", "model", "=", "train_classifier", "(", "X", ",", "y", ">=", "self", ".", "m", ")", "\n", "\n", "", "self", ".", "path_list", "=", "[", "]", "\n", "self", ".", "left", "=", "LearningPhase", "(", "X", "[", "y", ">=", "self", ".", "m", "]", ",", "y", "[", "y", ">=", "self", ".", "m", "]", ",", "self", ".", "height", "-", "1", ",", "self", ".", "h", "+", "1", ")", "\n", "for", "p", "in", "self", ".", "left", ".", "path_list", ":", "\n", "                ", "self", ".", "path_list", ".", "append", "(", "'l'", "+", "p", ")", "\n", "", "self", ".", "right", "=", "LearningPhase", "(", "X", "[", "y", "<", "self", ".", "m", "]", ",", "y", "[", "y", "<", "self", ".", "m", "]", ",", "self", ".", "height", "-", "1", ",", "self", ".", "h", "+", "1", ")", "\n", "for", "p", "in", "self", ".", "right", ".", "path_list", ":", "\n", "                ", "self", ".", "path_list", ".", "append", "(", "'r'", "+", "p", ")", "\n", "", "self", ".", "threshold", "=", "self", ".", "right", ".", "m", "\n", "", "else", ":", "\n", "            ", "self", ".", "path_list", "=", "[", "''", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.LearningPhase.ucb_select": [[103, 118], ["path_model.append", "learning_phase.get_ucb", "learning_phase.get_ucb", "p_node.append", "p_node.append"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.get_ucb", "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.get_ucb"], ["", "", "def", "ucb_select", "(", "self", ")", ":", "\n", "        ", "path_model", "=", "[", "]", "\n", "c", "=", "self", "\n", "p_node", "=", "[", "]", "\n", "while", "c", ".", "height", "!=", "0", ":", "\n", "            ", "path_model", ".", "append", "(", "c", ")", "\n", "c_w", "=", "0.5", "-", "c", ".", "model", ".", "best_score", "[", "\"valid_0\"", "]", "[", "\"binary_error\"", "]", "\n", "l_ucb", "=", "get_ucb", "(", "c", ".", "left", ".", "m", ",", "c", ".", "left", ".", "n", ",", "c", ".", "n", ",", "c", ".", "threshold", ")", "\n", "r_ucb", "=", "get_ucb", "(", "c", ".", "right", ".", "m", ",", "c", ".", "right", ".", "n", ",", "c", ".", "n", ",", "c", ".", "threshold", ")", "\n", "c", "=", "c", ".", "left", "if", "l_ucb", ">=", "r_ucb", "else", "c", ".", "right", "\n", "if", "l_ucb", ">=", "r_ucb", ":", "\n", "                ", "p_node", ".", "append", "(", "'l'", ")", "\n", "", "else", ":", "\n", "                ", "p_node", ".", "append", "(", "'r'", ")", "\n", "", "", "return", "path_model", ",", "p_node", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.LearningPhase.constrain": [[119, 127], ["pandas.DataFrame", "zip", "pandas.DataFrame.reshape", "m.model.predict"], "methods", ["None"], ["", "def", "constrain", "(", "self", ",", "path_model", ",", "path_node", ",", "x", ")", ":", "\n", "        ", "x", "=", "pd", ".", "DataFrame", "(", "x", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "for", "m", ",", "n", "in", "zip", "(", "path_model", ",", "path_node", ")", ":", "\n", "            ", "predict", "=", "m", ".", "model", ".", "predict", "(", "x", ")", "\n", "if", "not", "(", "(", "n", "==", "'l'", "and", "predict", ">=", "0.5", ")", "or", "(", "n", "==", "'r'", "and", "predict", "<", "0.5", ")", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.LearningPhase.path": [[128, 140], ["learning_phase.LearningPhase.model.predict", "pandas.DataFrame", "p.append", "p.append", "x.reshape"], "methods", ["None"], ["", "def", "path", "(", "self", ",", "x", ")", ":", "\n", "        ", "c", "=", "self", "\n", "p", "=", "[", "]", "\n", "while", "c", ".", "height", "!=", "0", ":", "\n", "            ", "predict", "=", "c", ".", "model", ".", "predict", "(", "pd", ".", "DataFrame", "(", "x", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", ")", ")", "\n", "if", "predict", ">=", "0.5", ":", "\n", "                ", "p", ".", "append", "(", "'l'", ")", "\n", "c", "=", "c", ".", "left", "\n", "", "else", ":", "\n", "                ", "p", ".", "append", "(", "'r'", ")", "\n", "c", "=", "c", ".", "right", "\n", "", "", "return", "''", ".", "join", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.LearningPhase.sample": [[141, 161], ["sampleFunction", "sampleFunction", "learning_phase.LearningPhase.constrain", "sampleFunction", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.LearningPhase.constrain"], ["", "def", "sample", "(", "self", ",", "path_model", ",", "path_node", ",", "sampleFunction", ")", ":", "\n", "        ", "sample_n", "=", "200000", "\n", "i", "=", "0", "\n", "path_n", "=", "''", ".", "join", "(", "path_node", ")", "\n", "while", "i", "<", "sample_n", ":", "\n", "            ", "X_s", "=", "sampleFunction", "(", ")", "\n", "if", "self", ".", "constrain", "(", "path_model", ",", "path_node", ",", "X_s", ")", ":", "\n", "                ", "X_s_str", "=", "'_'", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "X_s", "]", ")", "\n", "if", "X_s_str", "not", "in", "self", ".", "XSet", ":", "\n", "                    ", "return", "X_s", "\n", "\n", "", "", "i", "+=", "1", "\n", "", "i", "=", "0", "\n", "while", "i", "<", "sample_n", ":", "\n", "            ", "X_s", "=", "sampleFunction", "(", ")", "\n", "X_s_str", "=", "'_'", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "X_s", "]", ")", "\n", "if", "X_s_str", "not", "in", "self", ".", "XSet", ":", "\n", "                ", "return", "X_s", "\n", "", "", "X_s", "=", "sampleFunction", "(", ")", "\n", "return", "X_s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.train_classifier": [[14, 60], ["pandas.DataFrame", "pandas.DataFrame", "learning_phase.data_split", "lightgbm.Dataset", "lightgbm.Dataset", "hyperopt.Trials", "hyperopt.hp.loguniform", "hyperopt.hp.choice", "hyperopt.hp.choice", "hyperopt.hp.quniform", "hyperopt.hp.quniform", "hyperopt.hp.choice", "hyperopt.hp.uniform", "hyperopt.hp.uniform", "hyperopt.hp.uniform", "lightgbm.train", "open", "contextlib.redirect_stdout", "hyperopt.tpe.logger.setLevel", "hyperopt.fmin", "hyperopt.space_eval", "lightgbm.train", "numpy.log", "numpy.log", "numpy.linspace", "numpy.linspace", "numpy.random.RandomState"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.data_split", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train"], ["def", "train_classifier", "(", "X", ",", "y", ")", ":", "\n", "\n", "    ", "params", "=", "{", "\n", "\"objective\"", ":", "\"binary\"", ",", "\n", "\"metric\"", ":", "\"binary_error\"", ",", "\n", "\"verbosity\"", ":", "-", "1", ",", "\n", "\"seed\"", ":", "0", ",", "\n", "\"num_threads\"", ":", "4", "\n", "}", "\n", "\n", "X", "=", "pd", ".", "DataFrame", "(", "X", ")", "\n", "y", "=", "pd", ".", "DataFrame", "(", "y", ")", "\n", "\n", "X_train", ",", "X_val", ",", "y_train", ",", "y_val", "=", "data_split", "(", "X", ",", "y", ",", "0.2", ")", "\n", "\n", "train_data", "=", "lgb", ".", "Dataset", "(", "X_train", ",", "label", "=", "y_train", ")", "\n", "valid_data", "=", "lgb", ".", "Dataset", "(", "X_val", ",", "label", "=", "y_val", ")", "\n", "\n", "space", "=", "{", "\n", "\"learning_rate\"", ":", "hp", ".", "loguniform", "(", "\"learning_rate\"", ",", "np", ".", "log", "(", "0.01", ")", ",", "np", ".", "log", "(", "0.5", ")", ")", ",", "\n", "\"max_depth\"", ":", "hp", ".", "choice", "(", "\"max_depth\"", ",", "[", "-", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ")", ",", "\n", "\"num_leaves\"", ":", "hp", ".", "choice", "(", "\"num_leaves\"", ",", "np", ".", "linspace", "(", "10", ",", "200", ",", "50", ",", "dtype", "=", "int", ")", ")", ",", "\n", "\"feature_fraction\"", ":", "hp", ".", "quniform", "(", "\"feature_fraction\"", ",", "0.5", ",", "1.0", ",", "0.1", ")", ",", "\n", "\"bagging_fraction\"", ":", "hp", ".", "quniform", "(", "\"bagging_fraction\"", ",", "0.5", ",", "1.0", ",", "0.1", ")", ",", "\n", "\"bagging_freq\"", ":", "hp", ".", "choice", "(", "\"bagging_freq\"", ",", "np", ".", "linspace", "(", "0", ",", "50", ",", "10", ",", "dtype", "=", "int", ")", ")", ",", "\n", "\"reg_alpha\"", ":", "hp", ".", "uniform", "(", "\"reg_alpha\"", ",", "0", ",", "2", ")", ",", "\n", "\"reg_lambda\"", ":", "hp", ".", "uniform", "(", "\"reg_lambda\"", ",", "0", ",", "2", ")", ",", "\n", "\"min_child_weight\"", ":", "hp", ".", "uniform", "(", "'min_child_weight'", ",", "0.5", ",", "10", ")", ",", "\n", "}", "\n", "\n", "def", "objective", "(", "hyperparams", ")", ":", "\n", "            ", "model", "=", "lgb", ".", "train", "(", "{", "**", "params", ",", "**", "hyperparams", "}", ",", "train_data", ",", "100", ",", "\n", "valid_data", ",", "early_stopping_rounds", "=", "100", ",", "verbose_eval", "=", "0", ")", "\n", "score", "=", "model", ".", "best_score", "[", "\"valid_0\"", "]", "[", "params", "[", "\"metric\"", "]", "]", "\n", "return", "{", "'loss'", ":", "score", ",", "'status'", ":", "STATUS_OK", "}", "\n", "\n", "", "trials", "=", "Trials", "(", ")", "\n", "with", "open", "(", "os", ".", "devnull", ",", "\"w+\"", ")", "as", "file", ",", "redirect_stdout", "(", "file", ")", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "best", "=", "hyperopt", ".", "fmin", "(", "fn", "=", "objective", ",", "space", "=", "space", ",", "trials", "=", "trials", ",", "\n", "algo", "=", "tpe", ".", "suggest", ",", "max_evals", "=", "10", ",", "verbose", "=", "0", ",", "\n", "rstate", "=", "np", ".", "random", ".", "RandomState", "(", "1", ")", ")", "\n", "\n", "hyperparams", "=", "space_eval", "(", "space", ",", "best", ")", "\n", "model", "=", "lgb", ".", "train", "(", "{", "**", "params", ",", "**", "hyperparams", "}", ",", "train_data", ",", "100", ",", "valid_data", ",", "early_stopping_rounds", "=", "100", ",", "verbose_eval", "=", "0", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.data_split": [[61, 63], ["sklearn.model_selection.train_test_split"], "function", ["None"], ["", "def", "data_split", "(", "X", ":", "pd", ".", "DataFrame", ",", "y", ":", "pd", ".", "Series", ",", "test_size", ":", "float", "=", "0.2", ")", ":", "\n", "    ", "return", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "test_size", ",", "random_state", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.learning_phase.get_ucb": [[65, 68], ["None"], "function", ["None"], ["", "def", "get_ucb", "(", "m", ",", "n_next", ",", "n_curt", ",", "threshold", ")", ":", "\n", "    ", "m", "=", "m", "-", "threshold", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_runner.SearchRunner.search": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "search", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "# search is called by hook before this function", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_runner.SearchRunner.run": [[9, 12], ["super().run"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_runner.SearchRunner.run"], ["", "def", "run", "(", "self", ",", "data_loaders", ",", "workflow", ",", "max_epochs", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data_loader", "=", "data_loaders", "[", "0", "]", "\n", "super", "(", ")", ".", "run", "(", "data_loaders", ",", "workflow", ",", "max_epochs", ",", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.cls_head.ClsHead.__init__": [[13, 27], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.Linear", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "with_avg_pool", "=", "False", ",", "\n", "in_channels", "=", "2048", ",", "\n", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ClsHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.cls_head.ClsHead.init_weights": [[28, 43], ["cls_head.ClsHead.modules", "isinstance", "isinstance", "mmcv.cnn.normal_init", "mmcv.cnn.kaiming_init", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ",", "std", "=", "0.01", ",", "bias", "=", "0.", ")", ":", "\n", "        ", "assert", "init_linear", "in", "[", "'normal'", ",", "'kaiming'", "]", ",", "\"Undefined init_linear: {}\"", ".", "format", "(", "init_linear", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "init_linear", "==", "'normal'", ":", "\n", "                    ", "normal_init", "(", "m", ",", "std", "=", "std", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "                    ", "kaiming_init", "(", "m", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "\n", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ",", "nn", ".", "SyncBatchNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.cls_head.ClsHead.forward": [[44, 54], ["cls_head.ClsHead.view", "cls_head.ClsHead.fc_cls", "isinstance", "cls_head.ClsHead.avg_pool", "cls_head.ClsHead.size", "len", "cls_head.ClsHead.dim", "cls_head.ClsHead.dim"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "\"Tensor must has 4 dims, got: {}\"", ".", "format", "(", "x", ".", "dim", "(", ")", ")", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cls_score", "=", "self", ".", "fc_cls", "(", "x", ")", "\n", "return", "[", "cls_score", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.cls_head.ClsHead.loss": [[55, 61], ["dict", "cls_head.ClsHead.criterion", "utils.accuracy", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.accuracy.accuracy"], ["", "def", "loss", "(", "self", ",", "cls_score", ",", "labels", ")", ":", "\n", "        ", "losses", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "cls_score", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "cls_score", ")", "==", "1", "\n", "losses", "[", "'loss'", "]", "=", "self", ".", "criterion", "(", "cls_score", "[", "0", "]", ",", "labels", ")", "\n", "losses", "[", "'acc'", "]", "=", "accuracy", "(", "cls_score", "[", "0", "]", ",", "labels", ")", "\n", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.__init__": [[15, 45], ["dict", "torch.Module.__init__", "torch.CrossEntropyLoss", "utils.MultiPooling", "torch.ModuleList", "torch.ModuleList", "multi_cls_head.MultiClsHead.fcs.append", "torch.Linear", "torch.Linear", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "pool_type", "=", "'adaptive'", ",", "\n", "in_indices", "=", "(", "0", ",", ")", ",", "\n", "with_last_layer_unpool", "=", "False", ",", "\n", "backbone", "=", "'resnet50'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "MultiClsHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "norm_cfg", "[", "'type'", "]", "in", "[", "'BN'", ",", "'SyncBN'", ",", "'GN'", ",", "'null'", "]", "\n", "\n", "self", ".", "with_last_layer_unpool", "=", "with_last_layer_unpool", "\n", "self", ".", "with_norm", "=", "norm_cfg", "[", "'type'", "]", "!=", "'null'", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "multi_pooling", "=", "MultiPooling", "(", "pool_type", ",", "in_indices", ",", "backbone", ")", "\n", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "self", ".", "norms", "=", "nn", ".", "ModuleList", "(", "[", "\n", "build_norm_layer", "(", "norm_cfg", ",", "self", ".", "FEAT_CHANNELS", "[", "backbone", "]", "[", "l", "]", ")", "[", "1", "]", "\n", "for", "l", "in", "in_indices", "\n", "]", ")", "\n", "\n", "", "self", ".", "fcs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Linear", "(", "self", ".", "multi_pooling", ".", "POOL_DIMS", "[", "backbone", "]", "[", "l", "]", ",", "num_classes", ")", "\n", "for", "l", "in", "in_indices", "\n", "]", ")", "\n", "if", "with_last_layer_unpool", ":", "\n", "            ", "self", ".", "fcs", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "FEAT_LAST_UNPOOL", "[", "backbone", "]", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.init_weights": [[46, 57], ["multi_cls_head.MultiClsHead.modules", "isinstance", "torch.init.normal_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "\n", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ",", "nn", ".", "SyncBatchNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.forward": [[58, 70], ["isinstance", "multi_cls_head.MultiClsHead.multi_pooling", "multi_cls_head.MultiClsHead.append", "xx.view", "fc", "n", "xx.size", "zip", "zip"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "self", ".", "with_last_layer_unpool", ":", "\n", "            ", "last_x", "=", "x", "[", "-", "1", "]", "\n", "", "x", "=", "self", ".", "multi_pooling", "(", "x", ")", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "x", "=", "[", "n", "(", "xx", ")", "for", "n", ",", "xx", "in", "zip", "(", "self", ".", "norms", ",", "x", ")", "]", "\n", "", "if", "self", ".", "with_last_layer_unpool", ":", "\n", "            ", "x", ".", "append", "(", "last_x", ")", "\n", "", "x", "=", "[", "xx", ".", "view", "(", "xx", ".", "size", "(", "0", ")", ",", "-", "1", ")", "for", "xx", "in", "x", "]", "\n", "x", "=", "[", "fc", "(", "xx", ")", "for", "fc", ",", "xx", "in", "zip", "(", "self", ".", "fcs", ",", "x", ")", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.multi_cls_head.MultiClsHead.loss": [[71, 78], ["dict", "enumerate", "multi_cls_head.MultiClsHead.criterion", "utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.accuracy.accuracy"], ["", "def", "loss", "(", "self", ",", "cls_score", ",", "labels", ")", ":", "\n", "        ", "losses", "=", "dict", "(", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "cls_score", ")", ":", "\n", "# keys must contain \"loss\"", "\n", "            ", "losses", "[", "'loss.{}'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "self", ".", "criterion", "(", "s", ",", "labels", ")", "\n", "losses", "[", "'acc.{}'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "accuracy", "(", "s", ",", "labels", ")", "\n", "", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.latent_pred_head.LatentPredictHead.__init__": [[13, 16], ["torch.Module.__init__", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.builder.build_neck"], ["def", "__init__", "(", "self", ",", "predictor", ")", ":", "\n", "        ", "super", "(", "LatentPredictHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictor", "=", "builder", ".", "build_neck", "(", "predictor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.latent_pred_head.LatentPredictHead.init_weights": [[17, 19], ["latent_pred_head.LatentPredictHead.predictor.init_weights"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "self", ".", "predictor", ".", "init_weights", "(", "init_linear", "=", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.latent_pred_head.LatentPredictHead.forward": [[20, 32], ["input.size", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "dict", "latent_pred_head.LatentPredictHead.predictor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "'''\n        Args:\n            input (Tensor): NxC input features.\n            target (Tensor): NxC target features.\n        '''", "\n", "N", "=", "input", ".", "size", "(", "0", ")", "\n", "pred", "=", "self", ".", "predictor", "(", "[", "input", "]", ")", "[", "0", "]", "\n", "pred_norm", "=", "nn", ".", "functional", ".", "normalize", "(", "pred", ",", "dim", "=", "1", ")", "\n", "target_norm", "=", "nn", ".", "functional", ".", "normalize", "(", "target", ",", "dim", "=", "1", ")", "\n", "loss", "=", "2", "-", "2", "*", "(", "pred_norm", "*", "target_norm", ")", ".", "sum", "(", ")", "/", "N", "\n", "return", "dict", "(", "loss", "=", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.latent_pred_head.LatentClsHead.__init__": [[39, 44], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "predictor", ")", ":", "\n", "        ", "super", "(", "LatentClsHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictor", "=", "nn", ".", "Linear", "(", "predictor", ".", "in_channels", ",", "\n", "predictor", ".", "num_classes", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.latent_pred_head.LatentClsHead.init_weights": [[45, 47], ["mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "predictor", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.latent_pred_head.LatentClsHead.forward": [[48, 59], ["latent_pred_head.LatentClsHead.predictor", "latent_pred_head.LatentClsHead.criterion", "dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "latent_pred_head.LatentClsHead.predictor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "'''\n        Args:\n            input (Tensor): NxC input features.\n            target (Tensor): NxC target features.\n        '''", "\n", "pred", "=", "self", ".", "predictor", "(", "input", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "label", "=", "torch", ".", "argmax", "(", "self", ".", "predictor", "(", "target", ")", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "", "loss", "=", "self", ".", "criterion", "(", "pred", ",", "label", ")", "\n", "return", "dict", "(", "loss", "=", "loss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.contrastive_head.ContrastiveHead.__init__": [[14, 18], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "temperature", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "ContrastiveHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.heads.contrastive_head.ContrastiveHead.forward": [[19, 32], ["pos.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "dict", "contrastive_head.ContrastiveHead.criterion", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "forward", "(", "self", ",", "pos", ",", "neg", ")", ":", "\n", "        ", "'''\n        Args:\n            pos (Tensor): Nx1 positive similarity\n            neg (Tensor): Nxk negative similarity\n        '''", "\n", "N", "=", "pos", ".", "size", "(", "0", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "pos", ",", "neg", ")", ",", "dim", "=", "1", ")", "\n", "logits", "/=", "self", ".", "temperature", "\n", "labels", "=", "torch", ".", "zeros", "(", "(", "N", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "losses", "=", "dict", "(", ")", "\n", "losses", "[", "'loss'", "]", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.__init__": [[13, 21], ["torch.Module.__init__", "mmcv.runner.get_dist_info", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "simple_memory.SimpleMemory.utils.AliasMethod", "simple_memory.SimpleMemory.multinomial.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["    ", "def", "__init__", "(", "self", ",", "length", ",", "feat_dim", ",", "momentum", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimpleMemory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rank", ",", "self", ".", "num_replicas", "=", "get_dist_info", "(", ")", "\n", "self", ".", "feature_bank", "=", "torch", ".", "randn", "(", "length", ",", "feat_dim", ")", ".", "cuda", "(", ")", "\n", "self", ".", "feature_bank", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "feature_bank", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "torch", ".", "ones", "(", "length", ")", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update": [[22, 30], ["torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "simple_memory.SimpleMemory._gather", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._gather"], ["", "def", "update", "(", "self", ",", "ind", ",", "feature", ")", ":", "\n", "        ", "feature_norm", "=", "nn", ".", "functional", ".", "normalize", "(", "feature", ")", "\n", "ind", ",", "feature_norm", "=", "self", ".", "_gather", "(", "ind", ",", "feature_norm", ")", "\n", "feature_old", "=", "self", ".", "feature_bank", "[", "ind", ",", "...", "]", "\n", "feature_new", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "feature_old", "+", "self", ".", "momentum", "*", "feature_norm", "\n", "feature_new_norm", "=", "nn", ".", "functional", ".", "normalize", "(", "feature_new", ")", "\n", "self", ".", "feature_bank", "[", "ind", ",", "...", "]", "=", "feature_new_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory._gather": [[31, 43], ["torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "range", "range", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "_gather", "(", "self", ",", "ind", ",", "feature", ")", ":", "# gather ind and feature", "\n", "        ", "ind_gathered", "=", "[", "\n", "torch", ".", "ones_like", "(", "ind", ")", ".", "cuda", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_replicas", ")", "\n", "]", "\n", "feature_gathered", "=", "[", "\n", "torch", ".", "ones_like", "(", "feature", ")", ".", "cuda", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_replicas", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "ind_gathered", ",", "ind", ")", "\n", "dist", ".", "all_gather", "(", "feature_gathered", ",", "feature", ")", "\n", "ind_gathered", "=", "torch", ".", "cat", "(", "ind_gathered", ",", "dim", "=", "0", ")", "\n", "feature_gathered", "=", "torch", ".", "cat", "(", "feature_gathered", ",", "dim", "=", "0", ")", "\n", "return", "ind_gathered", ",", "feature_gathered", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.__init__": [[15, 32], ["torch.Module.__init__", "mmcv.runner.get_dist_info", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "sklearn.cluster.KMeans", "kwargs.get", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "length", ",", "feat_dim", ",", "momentum", ",", "num_classes", ",", "min_cluster", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ODCMemory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rank", ",", "self", ".", "num_replicas", "=", "get_dist_info", "(", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "feature_bank", "=", "torch", ".", "zeros", "(", "(", "length", ",", "feat_dim", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "self", ".", "label_bank", "=", "torch", ".", "zeros", "(", "(", "length", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "centroids", "=", "torch", ".", "zeros", "(", "(", "num_classes", ",", "feat_dim", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "self", ".", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "2", ",", "random_state", "=", "0", ",", "max_iter", "=", "20", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "initialized", "=", "False", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "min_cluster", "=", "min_cluster", "\n", "self", ".", "debug", "=", "kwargs", ".", "get", "(", "'debug'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.init_memory": [[33, 44], ["odc_memory.ODCMemory.label_bank.copy_", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "odc_memory.ODCMemory.feature_bank.copy_", "odc_memory.ODCMemory._compute_centroids", "odc_memory.ODCMemory.centroids.copy_", "numpy.linalg.norm().reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.bincount", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._compute_centroids", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm"], ["", "def", "init_memory", "(", "self", ",", "feature", ",", "label", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "True", "\n", "self", ".", "label_bank", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", ")", "\n", "# make sure no empty clusters", "\n", "assert", "(", "np", ".", "bincount", "(", "label", ",", "minlength", "=", "self", ".", "num_classes", ")", "!=", "0", ")", ".", "all", "(", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "feature", "/=", "(", "np", ".", "linalg", ".", "norm", "(", "feature", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "1e-10", ")", "\n", "self", ".", "feature_bank", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "feature", ")", ")", "\n", "centroids", "=", "self", ".", "_compute_centroids", "(", ")", "\n", "self", ".", "centroids", ".", "copy_", "(", "centroids", ")", "\n", "", "dist", ".", "broadcast", "(", "self", ".", "centroids", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._compute_centroids_ind": [[45, 54], ["len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "odc_memory.ODCMemory.feature_bank[].mean", "numpy.where", "odc_memory.ODCMemory.label_bank.numpy"], "methods", ["None"], ["", "def", "_compute_centroids_ind", "(", "self", ",", "cinds", ")", ":", "\n", "        ", "'''compute a few centroids'''", "\n", "assert", "self", ".", "rank", "==", "0", "\n", "num", "=", "len", "(", "cinds", ")", "\n", "centroids", "=", "torch", ".", "zeros", "(", "(", "num", ",", "self", ".", "feat_dim", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "cinds", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "self", ".", "label_bank", ".", "numpy", "(", ")", "==", "c", ")", "[", "0", "]", "\n", "centroids", "[", "i", ",", ":", "]", "=", "self", ".", "feature_bank", "[", "ind", ",", ":", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._compute_centroids": [[55, 70], ["odc_memory.ODCMemory.label_bank.numpy", "numpy.argsort", "numpy.insert", "numpy.insert", "odc_memory.ODCMemory.centroids.cpu().clone", "zip", "len", "len", "odc_memory.ODCMemory.feature_bank[].mean", "numpy.where", "odc_memory.ODCMemory.centroids.cpu"], "methods", ["None"], ["", "def", "_compute_centroids", "(", "self", ")", ":", "\n", "        ", "'''compute all non-empty centroids'''", "\n", "assert", "self", ".", "rank", "==", "0", "\n", "l", "=", "self", ".", "label_bank", ".", "numpy", "(", ")", "\n", "argl", "=", "np", ".", "argsort", "(", "l", ")", "\n", "sortl", "=", "l", "[", "argl", "]", "\n", "diff_pos", "=", "np", ".", "where", "(", "sortl", "[", "1", ":", "]", "-", "sortl", "[", ":", "-", "1", "]", "!=", "0", ")", "[", "0", "]", "+", "1", "\n", "start", "=", "np", ".", "insert", "(", "diff_pos", ",", "0", ",", "0", ")", "\n", "end", "=", "np", ".", "insert", "(", "diff_pos", ",", "len", "(", "diff_pos", ")", ",", "len", "(", "l", ")", ")", "\n", "class_start", "=", "sortl", "[", "start", "]", "\n", "# keep empty class centroids unchanged", "\n", "centroids", "=", "self", ".", "centroids", ".", "cpu", "(", ")", ".", "clone", "(", ")", "\n", "for", "i", ",", "st", ",", "ed", "in", "zip", "(", "class_start", ",", "start", ",", "end", ")", ":", "\n", "            ", "centroids", "[", "i", ",", ":", "]", "=", "self", ".", "feature_bank", "[", "argl", "[", "st", ":", "ed", "]", ",", ":", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._gather": [[71, 89], ["torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "range", "range", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "_gather", "(", "self", ",", "ind", ",", "feature", ")", ":", "# gather ind and feature", "\n", "#if not hasattr(self, 'ind_gathered'):", "\n", "#    self.ind_gathered = [torch.ones_like(ind).cuda()", "\n", "#                         for _ in range(self.num_replicas)]", "\n", "#if not hasattr(self, 'feature_gathered'):", "\n", "#    self.feature_gathered = [torch.ones_like(feature).cuda()", "\n", "#                             for _ in range(self.num_replicas)]", "\n", "        ", "ind_gathered", "=", "[", "\n", "torch", ".", "ones_like", "(", "ind", ")", ".", "cuda", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_replicas", ")", "\n", "]", "\n", "feature_gathered", "=", "[", "\n", "torch", ".", "ones_like", "(", "feature", ")", ".", "cuda", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_replicas", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "ind_gathered", ",", "ind", ")", "\n", "dist", ".", "all_gather", "(", "feature_gathered", ",", "feature", ")", "\n", "ind_gathered", "=", "torch", ".", "cat", "(", "ind_gathered", ",", "dim", "=", "0", ")", "\n", "feature_gathered", "=", "torch", ".", "cat", "(", "feature_gathered", ",", "dim", "=", "0", ")", "\n", "return", "ind_gathered", ",", "feature_gathered", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.update_samples_memory": [[90, 116], ["odc_memory.ODCMemory._gather", "ind.cpu.cpu.cpu", "torch.barrier", "torch.barrier", "torch.barrier", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm.argmax", "torch.mm.argmax", "torch.mm.argmax", "torch.mm.argmax.cpu", "similarity_to_centroids.argmax.cpu.clone", "odc_memory.ODCMemory.feature_bank[].cuda", "feature_norm.cpu", "feature_norm.permute", "float", "feature.norm().view", "feature_new.norm().view", "feature.norm", "feature_new.norm"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._gather", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.ConvModule.norm"], ["", "def", "update_samples_memory", "(", "self", ",", "ind", ",", "feature", ")", ":", "# ind, feature: cuda tensor", "\n", "        ", "assert", "self", ".", "initialized", "\n", "feature_norm", "=", "feature", "/", "(", "feature", ".", "norm", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "1e-10", "\n", ")", "# normalize", "\n", "ind", ",", "feature_norm", "=", "self", ".", "_gather", "(", "\n", "ind", ",", "feature_norm", ")", "# ind: (N*w), feature: (N*w)xk, cuda tensor", "\n", "ind", "=", "ind", ".", "cpu", "(", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "feature_old", "=", "self", ".", "feature_bank", "[", "ind", ",", "...", "]", ".", "cuda", "(", ")", "\n", "feature_new", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "feature_old", "+", "self", ".", "momentum", "*", "feature_norm", "\n", "feature_norm", "=", "feature_new", "/", "(", "\n", "feature_new", ".", "norm", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "1e-10", ")", "\n", "self", ".", "feature_bank", "[", "ind", ",", "...", "]", "=", "feature_norm", ".", "cpu", "(", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "broadcast", "(", "feature_norm", ",", "0", ")", "\n", "# compute new labels", "\n", "similarity_to_centroids", "=", "torch", ".", "mm", "(", "self", ".", "centroids", ",", "\n", "feature_norm", ".", "permute", "(", "1", ",", "0", ")", ")", "# CxN", "\n", "newlabel", "=", "similarity_to_centroids", ".", "argmax", "(", "dim", "=", "0", ")", "# cuda tensor", "\n", "newlabel_cpu", "=", "newlabel", ".", "cpu", "(", ")", "\n", "change_ratio", "=", "(", "newlabel_cpu", "!=", "\n", "self", ".", "label_bank", "[", "ind", "]", ")", ".", "sum", "(", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "/", "float", "(", "newlabel_cpu", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "label_bank", "[", "ind", "]", "=", "newlabel_cpu", ".", "clone", "(", ")", "# copy to cpu", "\n", "return", "change_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.deal_with_small_clusters": [[117, 148], ["numpy.bincount", "[].tolist", "odc_memory.ODCMemory._redirect_empty_clusters", "odc_memory.ODCMemory.label_bank.numpy", "print", "len", "numpy.where", "len", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.where", "numpy.bincount.min", "len", "torch.mm().argmax", "torch.mm().argmax", "torch.mm().argmax", "torch.mm().argmax", "torch.mm().argmax", "torch.mm().argmax", "torch.mm().argmax", "torch.mm().argmax", "torch.mm().argmax", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.cpu().numpy", "torch.zeros().cuda.cpu().numpy", "torch.zeros().cuda.cpu().numpy", "odc_memory.ODCMemory.label_bank.numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.setdiff1d", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda.cpu", "torch.zeros().cuda.cpu", "torch.zeros().cuda.cpu", "numpy.arange", "numpy.array", "odc_memory.ODCMemory.feature_bank[].cuda().permute", "odc_memory.ODCMemory.feature_bank[].cuda"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._redirect_empty_clusters", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "deal_with_small_clusters", "(", "self", ")", ":", "\n", "# check empty class", "\n", "        ", "hist", "=", "np", ".", "bincount", "(", "self", ".", "label_bank", ".", "numpy", "(", ")", ",", "minlength", "=", "self", ".", "num_classes", ")", "\n", "small_clusters", "=", "np", ".", "where", "(", "hist", "<", "self", ".", "min_cluster", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "if", "self", ".", "debug", "and", "self", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "\"mincluster: {}, num of small class: {}\"", ".", "format", "(", "\n", "hist", ".", "min", "(", ")", ",", "len", "(", "small_clusters", ")", ")", ")", "\n", "", "if", "len", "(", "small_clusters", ")", "==", "0", ":", "\n", "            ", "return", "\n", "# re-assign samples in small clusters to make them empty", "\n", "", "for", "s", "in", "small_clusters", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "self", ".", "label_bank", ".", "numpy", "(", ")", "==", "s", ")", "[", "0", "]", "\n", "if", "len", "(", "ind", ")", ">", "0", ":", "\n", "                ", "inclusion", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "setdiff1d", "(", "\n", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ",", "\n", "np", ".", "array", "(", "small_clusters", ")", ",", "\n", "assume_unique", "=", "True", ")", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                    ", "target_ind", "=", "torch", ".", "mm", "(", "\n", "self", ".", "centroids", "[", "inclusion", ",", ":", "]", ",", "\n", "self", ".", "feature_bank", "[", "ind", ",", ":", "]", ".", "cuda", "(", ")", ".", "permute", "(", "\n", "1", ",", "0", ")", ")", ".", "argmax", "(", "dim", "=", "0", ")", "\n", "target", "=", "inclusion", "[", "target_ind", "]", "\n", "", "else", ":", "\n", "                    ", "target", "=", "torch", ".", "zeros", "(", "(", "ind", ".", "shape", "[", "0", "]", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "int64", ")", ".", "cuda", "(", ")", "\n", "", "dist", ".", "all_reduce", "(", "target", ")", "\n", "self", ".", "label_bank", "[", "ind", "]", "=", "torch", ".", "from_numpy", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# deal with empty cluster", "\n", "", "", "self", ".", "_redirect_empty_clusters", "(", "small_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.update_centroids_memory": [[149, 161], ["torch.broadcast", "torch.broadcast", "torch.broadcast", "print", "odc_memory.ODCMemory._compute_centroids", "odc_memory.ODCMemory.centroids.copy_", "odc_memory.ODCMemory._compute_centroids_ind", "odc_memory.ODCMemory.cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._compute_centroids", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._compute_centroids_ind", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "update_centroids_memory", "(", "self", ",", "cinds", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "if", "self", ".", "debug", ":", "\n", "                ", "print", "(", "\"updating centroids ...\"", ")", "\n", "", "if", "cinds", "is", "None", ":", "\n", "                ", "center", "=", "self", ".", "_compute_centroids", "(", ")", "\n", "self", ".", "centroids", ".", "copy_", "(", "center", ")", "\n", "", "else", ":", "\n", "                ", "center", "=", "self", ".", "_compute_centroids_ind", "(", "cinds", ")", "\n", "self", ".", "centroids", "[", "\n", "torch", ".", "LongTensor", "(", "cinds", ")", ".", "cuda", "(", ")", ",", ":", "]", "=", "center", ".", "cuda", "(", ")", "\n", "", "", "dist", ".", "broadcast", "(", "self", ".", "centroids", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._partition_max_cluster": [[162, 181], ["numpy.any", "odc_memory.ODCMemory.kmeans.fit", "numpy.where", "len", "numpy.isnan", "Exception", "print", "numpy.random.choice", "numpy.setdiff1d", "max_cluster_features.numpy", "len", "len", "len"], "methods", ["None"], ["", "def", "_partition_max_cluster", "(", "self", ",", "max_cluster", ")", ":", "\n", "        ", "assert", "self", ".", "rank", "==", "0", "\n", "max_cluster_inds", "=", "np", ".", "where", "(", "self", ".", "label_bank", "==", "max_cluster", ")", "[", "0", "]", "\n", "\n", "assert", "len", "(", "max_cluster_inds", ")", ">=", "2", "\n", "max_cluster_features", "=", "self", ".", "feature_bank", "[", "max_cluster_inds", ",", ":", "]", "\n", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "max_cluster_features", ".", "numpy", "(", ")", ")", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Has nan in features.\"", ")", "\n", "", "kmeans_ret", "=", "self", ".", "kmeans", ".", "fit", "(", "max_cluster_features", ")", "\n", "sub_cluster1_ind", "=", "max_cluster_inds", "[", "kmeans_ret", ".", "labels_", "==", "0", "]", "\n", "sub_cluster2_ind", "=", "max_cluster_inds", "[", "kmeans_ret", ".", "labels_", "==", "1", "]", "\n", "if", "not", "(", "len", "(", "sub_cluster1_ind", ")", ">", "0", "and", "len", "(", "sub_cluster2_ind", ")", ">", "0", ")", ":", "\n", "            ", "print", "(", "\n", "\"Warning: kmeans partition fails, resort to random partition.\"", ")", "\n", "sub_cluster1_ind", "=", "np", ".", "random", ".", "choice", "(", "\n", "max_cluster_inds", ",", "len", "(", "max_cluster_inds", ")", "//", "2", ",", "replace", "=", "False", ")", "\n", "sub_cluster2_ind", "=", "np", ".", "setdiff1d", "(", "\n", "max_cluster_inds", ",", "sub_cluster1_ind", ",", "assume_unique", "=", "True", ")", "\n", "", "return", "sub_cluster1_ind", ",", "sub_cluster2_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._redirect_empty_clusters": [[182, 218], ["numpy.bincount().argmax().item", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "odc_memory.ODCMemory.update_centroids_memory", "odc_memory.ODCMemory._partition_max_cluster", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.cpu().numpy", "torch.zeros().cuda.cpu().numpy", "torch.zeros().cuda.cpu().numpy", "torch.zeros().cuda.cpu().numpy", "torch.zeros().cuda.cpu().numpy", "torch.zeros().cuda.cpu().numpy", "numpy.bincount().argmax", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda.cpu", "torch.zeros().cuda.cpu", "torch.zeros().cuda.cpu", "torch.zeros().cuda.cpu", "torch.zeros().cuda.cpu", "torch.zeros().cuda.cpu", "numpy.bincount", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.update_centroids_memory", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory._partition_max_cluster", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "_redirect_empty_clusters", "(", "self", ",", "empty_clusters", ")", ":", "\n", "        ", "for", "e", "in", "empty_clusters", ":", "\n", "            ", "assert", "(", "self", ".", "label_bank", "!=", "e", ")", ".", "all", "(", ")", ".", "item", "(", ")", ",", "\"Cluster #{} is not an empty cluster.\"", ".", "format", "(", "e", ")", "\n", "max_cluster", "=", "np", ".", "bincount", "(", "\n", "self", ".", "label_bank", ",", "minlength", "=", "self", ".", "num_classes", ")", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "# gather partitioning indices", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                ", "sub_cluster1_ind", ",", "sub_cluster2_ind", "=", "self", ".", "_partition_max_cluster", "(", "\n", "max_cluster", ")", "\n", "size1", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "sub_cluster1_ind", ")", "]", ")", ".", "cuda", "(", ")", "\n", "size2", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "sub_cluster2_ind", ")", "]", ")", ".", "cuda", "(", ")", "\n", "sub_cluster1_ind_tensor", "=", "torch", ".", "from_numpy", "(", "\n", "sub_cluster1_ind", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "sub_cluster2_ind_tensor", "=", "torch", ".", "from_numpy", "(", "\n", "sub_cluster2_ind", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "size1", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "size2", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "", "dist", ".", "all_reduce", "(", "size1", ")", "\n", "dist", ".", "all_reduce", "(", "size2", ")", "\n", "if", "self", ".", "rank", "!=", "0", ":", "\n", "                ", "sub_cluster1_ind_tensor", "=", "torch", ".", "zeros", "(", "\n", "(", "size1", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "cuda", "(", ")", "\n", "sub_cluster2_ind_tensor", "=", "torch", ".", "zeros", "(", "\n", "(", "size2", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "cuda", "(", ")", "\n", "", "dist", ".", "broadcast", "(", "sub_cluster1_ind_tensor", ",", "0", ")", "\n", "dist", ".", "broadcast", "(", "sub_cluster2_ind_tensor", ",", "0", ")", "\n", "if", "self", ".", "rank", "!=", "0", ":", "\n", "                ", "sub_cluster1_ind", "=", "sub_cluster1_ind_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sub_cluster2_ind", "=", "sub_cluster2_ind_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# reassign samples in partition #2 to the empty class", "\n", "", "self", ".", "label_bank", "[", "sub_cluster2_ind", "]", "=", "e", "\n", "# update centroids of max_cluster and e", "\n", "self", ".", "update_centroids_memory", "(", "[", "max_cluster", ",", "e", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.BasicBlock.__init__": [[21, 52], ["torch.Module.__init__", "conv_layer", "norm_layer", "act_layer", "conv_layer", "norm_layer", "layers.create_attn", "act_layer", "aa_layer"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_attn.create_attn"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "cardinality", "=", "1", ",", "base_width", "=", "64", ",", "\n", "reduce_first", "=", "1", ",", "dilation", "=", "1", ",", "first_dilation", "=", "None", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "conv_layer", "=", "nn", ".", "Conv2d", ",", "attn_layer", "=", "None", ",", "aa_layer", "=", "None", ",", "drop_block", "=", "None", ",", "drop_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "cardinality", "==", "1", ",", "'BasicBlock only supports cardinality of 1'", "\n", "assert", "base_width", "==", "64", ",", "'BasicBlock does not support changing base width'", "\n", "first_planes", "=", "planes", "//", "reduce_first", "\n", "outplanes", "=", "planes", "*", "self", ".", "expansion", "\n", "first_dilation", "=", "first_dilation", "or", "dilation", "\n", "use_aa", "=", "aa_layer", "is", "not", "None", "\n", "\n", "self", ".", "conv1", "=", "conv_layer", "(", "\n", "inplanes", ",", "first_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", "if", "use_aa", "else", "stride", ",", "padding", "=", "first_dilation", ",", "\n", "dilation", "=", "first_dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "first_planes", ")", "\n", "self", ".", "act1", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "aa", "=", "aa_layer", "(", "channels", "=", "first_planes", ")", "if", "stride", "==", "2", "and", "use_aa", "else", "None", "\n", "\n", "self", ".", "conv2", "=", "conv_layer", "(", "\n", "first_planes", ",", "outplanes", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "outplanes", ")", "\n", "\n", "self", ".", "se", "=", "create_attn", "(", "attn_layer", ",", "outplanes", ")", "\n", "\n", "self", ".", "act2", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "drop_path", "=", "drop_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.BasicBlock.zero_init_last_bn": [[53, 55], ["torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "zero_init_last_bn", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bn2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.BasicBlock.forward": [[56, 84], ["super_resnest.BasicBlock.conv1", "super_resnest.BasicBlock.bn1", "super_resnest.BasicBlock.act1", "super_resnest.BasicBlock.conv2", "super_resnest.BasicBlock.bn2", "super_resnest.BasicBlock.act2", "super_resnest.BasicBlock.drop_block", "super_resnest.BasicBlock.aa", "super_resnest.BasicBlock.drop_block", "super_resnest.BasicBlock.se", "super_resnest.BasicBlock.drop_path", "super_resnest.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "if", "self", ".", "drop_block", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "drop_block", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "if", "self", ".", "aa", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "aa", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "if", "self", ".", "drop_block", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "drop_block", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "se", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "se", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "drop_path", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "drop_path", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "", "x", "+=", "residual", "\n", "x", "=", "self", ".", "act2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.Bottleneck.__init__": [[89, 123], ["torch.Module.__init__", "conv_layer", "norm_layer", "act_layer", "conv_layer", "norm_layer", "act_layer", "conv_layer", "norm_layer", "layers.create_attn", "act_layer", "aa_layer"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.create_attn.create_attn"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "cardinality", "=", "1", ",", "base_width", "=", "64", ",", "\n", "reduce_first", "=", "1", ",", "dilation", "=", "1", ",", "first_dilation", "=", "None", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "conv_layer", "=", "nn", ".", "Conv2d", ",", "attn_layer", "=", "None", ",", "aa_layer", "=", "None", ",", "drop_block", "=", "None", ",", "drop_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# width = int(math.floor(planes * (base_width / 64)) * cardinality)", "\n", "width", "=", "planes", "*", "cardinality", "\n", "first_planes", "=", "width", "//", "reduce_first", "\n", "outplanes", "=", "planes", "*", "self", ".", "expansion", "\n", "first_dilation", "=", "first_dilation", "or", "dilation", "\n", "use_aa", "=", "aa_layer", "is", "not", "None", "\n", "\n", "self", ".", "conv1", "=", "conv_layer", "(", "inplanes", ",", "first_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "first_planes", ")", "\n", "self", ".", "act1", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "conv_layer", "(", "\n", "first_planes", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", "if", "use_aa", "else", "stride", ",", "\n", "padding", "=", "first_dilation", ",", "dilation", "=", "first_dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "act2", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "aa", "=", "aa_layer", "(", "channels", "=", "width", ")", "if", "stride", "==", "2", "and", "use_aa", "else", "None", "\n", "\n", "self", ".", "conv3", "=", "conv_layer", "(", "width", ",", "outplanes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "outplanes", ")", "\n", "\n", "self", ".", "se", "=", "create_attn", "(", "attn_layer", ",", "outplanes", ")", "\n", "\n", "self", ".", "act3", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "drop_path", "=", "drop_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.Bottleneck.zero_init_last_bn": [[124, 126], ["torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "zero_init_last_bn", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bn3", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.Bottleneck.forward": [[127, 161], ["super_resnest.Bottleneck.conv1", "super_resnest.Bottleneck.bn1", "super_resnest.Bottleneck.act1", "super_resnest.Bottleneck.conv2", "super_resnest.Bottleneck.bn2", "super_resnest.Bottleneck.act2", "super_resnest.Bottleneck.conv3", "super_resnest.Bottleneck.bn3", "super_resnest.Bottleneck.act3", "super_resnest.Bottleneck.drop_block", "super_resnest.Bottleneck.drop_block", "super_resnest.Bottleneck.aa", "super_resnest.Bottleneck.drop_block", "super_resnest.Bottleneck.se", "super_resnest.Bottleneck.drop_path", "super_resnest.Bottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "if", "self", ".", "drop_block", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "drop_block", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "if", "self", ".", "drop_block", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "drop_block", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act2", "(", "x", ")", "\n", "if", "self", ".", "aa", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "aa", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "if", "self", ".", "drop_block", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "drop_block", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "se", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "se", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "drop_path", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "drop_path", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "", "x", "+=", "residual", "\n", "x", "=", "self", ".", "act3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNestBottleneck.__init__": [[208, 251], ["torch.Module.__init__", "conv_layer", "norm_layer", "act_layer", "conv_layer", "norm_layer", "act_layer", "int", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "layers.split_attn.SplitAttnConv2d", "conv_layer", "norm_layer", "act_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "radix", "=", "1", ",", "cardinality", "=", "1", ",", "base_width", "=", "64", ",", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "is_first", "=", "False", ",", "\n", "reduce_first", "=", "1", ",", "dilation", "=", "1", ",", "first_dilation", "=", "None", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "conv_layer", "=", "nn", ".", "Conv2d", ",", "attn_layer", "=", "None", ",", "aa_layer", "=", "None", ",", "drop_block", "=", "None", ",", "drop_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNestBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "reduce_first", "==", "1", "# not supported", "\n", "assert", "attn_layer", "is", "None", "# not supported", "\n", "assert", "aa_layer", "is", "None", "# TODO not yet supported", "\n", "assert", "drop_path", "is", "None", "# TODO not yet supported", "\n", "\n", "group_width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "first_dilation", "=", "first_dilation", "or", "dilation", "\n", "if", "avd", "and", "(", "stride", ">", "1", "or", "is_first", ")", ":", "\n", "            ", "avd_stride", "=", "stride", "\n", "stride", "=", "1", "\n", "", "else", ":", "\n", "            ", "avd_stride", "=", "0", "\n", "", "self", ".", "radix", "=", "radix", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "\n", "self", ".", "conv1", "=", "conv_layer", "(", "inplanes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "group_width", ")", "\n", "self", ".", "act1", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avd_first", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "avd_stride", ",", "padding", "=", "1", ")", "if", "avd_stride", ">", "0", "and", "avd_first", "else", "None", "\n", "\n", "if", "self", ".", "radix", ">=", "1", ":", "\n", "            ", "self", ".", "conv2", "=", "SplitAttnConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "first_dilation", ",", "\n", "dilation", "=", "first_dilation", ",", "groups", "=", "cardinality", ",", "radix", "=", "radix", ",", "norm_layer", "=", "norm_layer", ",", "drop_block", "=", "drop_block", ")", "\n", "self", ".", "bn2", "=", "None", "# FIXME revisit, here to satisfy current torchscript fussyness", "\n", "self", ".", "act2", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "conv_layer", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "first_dilation", ",", "\n", "dilation", "=", "first_dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "self", ".", "act2", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "avd_last", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "avd_stride", ",", "padding", "=", "1", ")", "if", "avd_stride", ">", "0", "and", "not", "avd_first", "else", "None", "\n", "\n", "self", ".", "conv3", "=", "conv_layer", "(", "group_width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "4", ")", "\n", "self", ".", "act3", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNestBottleneck.zero_init_last_bn": [[252, 254], ["torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "zero_init_last_bn", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bn3", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNestBottleneck.forward": [[255, 288], ["super_resnest.ResNestBottleneck.conv1", "super_resnest.ResNestBottleneck.bn1", "super_resnest.ResNestBottleneck.act1", "super_resnest.ResNestBottleneck.conv2", "super_resnest.ResNestBottleneck.conv3", "super_resnest.ResNestBottleneck.bn3", "super_resnest.ResNestBottleneck.act3", "super_resnest.ResNestBottleneck.drop_block", "super_resnest.ResNestBottleneck.avd_first", "super_resnest.ResNestBottleneck.bn2", "super_resnest.ResNestBottleneck.act2", "super_resnest.ResNestBottleneck.avd_last", "super_resnest.ResNestBottleneck.drop_block", "super_resnest.ResNestBottleneck.downsample", "super_resnest.ResNestBottleneck.drop_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "self", ".", "drop_block", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "drop_block", "(", "out", ")", "\n", "", "out", "=", "self", ".", "act1", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd_first", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "avd_first", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "drop_block", "is", "not", "None", ":", "\n", "                ", "out", "=", "self", ".", "drop_block", "(", "out", ")", "\n", "", "out", "=", "self", ".", "act2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd_last", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "avd_last", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "drop_block", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "drop_block", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "act3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNet.__init__": [[366, 451], ["dict", "dict", "torch.Module.__init__", "norm_layer", "act_layer", "list", "dict", "super_resnest.ResNet._make_layer", "super_resnest.ResNet._make_layer", "super_resnest.ResNet._make_layer", "super_resnest.ResNet._make_layer", "layers.SelectAdaptivePool2d", "super_resnest.ResNet.named_modules", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "layers.DropPath", "layers.DropBlock2d", "layers.DropBlock2d", "zip", "isinstance", "super_resnest.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "hasattr", "range", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "m.zero_init_last_bn", "conv_layer", "norm_layer", "act_layer", "conv_layer", "norm_layer", "act_layer", "conv_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "aa_layer"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNestBottleneck.zero_init_last_bn"], ["def", "__init__", "(", "self", ",", "block", "=", "ResNestBottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "\n", "cardinality", "=", "1", ",", "base_width", "=", "64", ",", "stem_width", "=", "64", ",", "stem_type", "=", "''", ",", "\n", "block_reduce_first", "=", "1", ",", "down_kernel_size", "=", "1", ",", "avg_down", "=", "False", ",", "output_stride", "=", "32", ",", "\n", "act_layer", "=", "nn", ".", "ReLU", ",", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ",", "aa_layer", "=", "None", ",", "drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.", ",", "drop_block_rate", "=", "0.", ",", "global_pool", "=", "'avg'", ",", "zero_init_last_bn", "=", "True", ",", "block_args", "=", "None", ")", ":", "\n", "        ", "block_args", "=", "block_args", "or", "dict", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "deep_stem", "=", "'deep'", "in", "stem_type", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "stem_width", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "base_width", "=", "base_width", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "# self.expansion = block.expansion", "\n", "# my", "\n", "if", "norm_cfg", "[", "'type'", "]", "==", "'SwitchableBN'", ":", "\n", "            ", "norm_layer", "=", "Norm_cfg", "[", "'SwitchableBN'", "]", "(", "norm_cfg", ")", "\n", "", "else", ":", "\n", "            ", "norm_layer", "=", "Norm_cfg", "[", "norm_cfg", "[", "'type'", "]", "]", "[", "1", "]", "\n", "", "conv_layer", "=", "Conv_cfg", "[", "conv_cfg", "[", "'type'", "]", "]", "\n", "#", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Stem", "\n", "if", "deep_stem", ":", "\n", "            ", "stem_chs_1", "=", "stem_chs_2", "=", "stem_width", "\n", "if", "'tiered'", "in", "stem_type", ":", "\n", "                ", "stem_chs_1", "=", "3", "*", "(", "stem_width", "//", "4", ")", "\n", "stem_chs_2", "=", "stem_width", "if", "'narrow'", "in", "stem_type", "else", "6", "*", "(", "stem_width", "//", "4", ")", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "conv_layer", "(", "in_chans", ",", "stem_chs_1", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "stem_chs_1", ")", ",", "\n", "act_layer", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_chs_1", ",", "stem_chs_2", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "stem_chs_2", ")", ",", "\n", "act_layer", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_chs_2", ",", "self", ".", "inplanes", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_layer", "(", "in_chans", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "act1", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "# Stem Pooling", "\n", "if", "aa_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "maxpool", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "aa_layer", "(", "channels", "=", "self", ".", "inplanes", ",", "stride", "=", "2", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "# Feature Blocks", "\n", "", "dp", "=", "DropPath", "(", "drop_path_rate", ")", "if", "drop_path_rate", "else", "None", "\n", "db_3", "=", "DropBlock2d", "(", "drop_block_rate", ",", "7", ",", "0.25", ")", "if", "drop_block_rate", "else", "None", "\n", "db_4", "=", "DropBlock2d", "(", "drop_block_rate", ",", "7", ",", "1.00", ")", "if", "drop_block_rate", "else", "None", "\n", "channels", ",", "strides", ",", "dilations", "=", "[", "base_width", "*", "2", "**", "i", "for", "i", "in", "range", "(", "4", ")", "]", ",", "[", "1", ",", "2", ",", "2", ",", "2", "]", ",", "[", "1", "]", "*", "4", "# my", "\n", "if", "output_stride", "==", "16", ":", "\n", "            ", "strides", "[", "3", "]", "=", "1", "\n", "dilations", "[", "3", "]", "=", "2", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "strides", "[", "2", ":", "4", "]", "=", "[", "1", ",", "1", "]", "\n", "dilations", "[", "2", ":", "4", "]", "=", "[", "2", ",", "4", "]", "\n", "", "else", ":", "\n", "            ", "assert", "output_stride", "==", "32", "\n", "", "layer_args", "=", "list", "(", "zip", "(", "channels", ",", "layers", ",", "strides", ",", "dilations", ")", ")", "\n", "layer_kwargs", "=", "dict", "(", "\n", "reduce_first", "=", "block_reduce_first", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "\n", "conv_layer", "=", "conv_layer", ",", "aa_layer", "=", "aa_layer", ",", "\n", "avg_down", "=", "avg_down", ",", "down_kernel_size", "=", "down_kernel_size", ",", "drop_path", "=", "dp", ",", "**", "block_args", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "*", "layer_args", "[", "0", "]", ",", "**", "layer_kwargs", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "*", "layer_args", "[", "1", "]", ",", "**", "layer_kwargs", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "drop_block", "=", "db_3", ",", "*", "layer_args", "[", "2", "]", ",", "**", "layer_kwargs", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "drop_block", "=", "db_4", ",", "*", "layer_args", "[", "3", "]", ",", "**", "layer_kwargs", ")", "\n", "\n", "# Head (Pooling and Classifier)", "\n", "self", ".", "global_pool", "=", "SelectAdaptivePool2d", "(", "pool_type", "=", "global_pool", ")", "\n", "\n", "for", "n", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "", "", "if", "zero_init_last_bn", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "'zero_init_last_bn'", ")", ":", "\n", "                    ", "m", ".", "zero_init_last_bn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNet._make_layer": [[452, 471], ["dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dict", "block", "block", "super_resnest.downsample_avg", "super_resnest.downsample_conv", "range", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.downsample_avg", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.downsample_conv", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "reduce_first", "=", "1", ",", "\n", "avg_down", "=", "False", ",", "down_kernel_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "first_dilation", "=", "1", "if", "dilation", "in", "(", "1", ",", "2", ")", "else", "2", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample_args", "=", "dict", "(", "\n", "in_channels", "=", "self", ".", "inplanes", ",", "out_channels", "=", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "down_kernel_size", ",", "\n", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "first_dilation", "=", "first_dilation", ",", "\n", "norm_layer", "=", "kwargs", ".", "get", "(", "'norm_layer'", ")", ",", "conv_layer", "=", "kwargs", ".", "get", "(", "'conv_layer'", ")", ")", "\n", "downsample", "=", "downsample_avg", "(", "**", "downsample_args", ")", "if", "avg_down", "else", "downsample_conv", "(", "**", "downsample_args", ")", "\n", "\n", "", "block_kwargs", "=", "dict", "(", "\n", "cardinality", "=", "self", ".", "cardinality", ",", "base_width", "=", "self", ".", "base_width", ",", "reduce_first", "=", "reduce_first", ",", "\n", "dilation", "=", "dilation", ",", "**", "kwargs", ")", "\n", "layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "first_dilation", "=", "first_dilation", ",", "**", "block_kwargs", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "layers", "+=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "**", "block_kwargs", ")", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNet.init_weights": [[472, 480], ["isinstance", "super_resnest.ResNet.utils.get_root_logger", "mmcv.runner.load_checkpoint", "TypeError"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.get_root_logger"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "True", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNet.forward_features": [[481, 492], ["super_resnest.ResNet.conv1", "super_resnest.ResNet.bn1", "super_resnest.ResNet.act1", "super_resnest.ResNet.maxpool", "super_resnest.ResNet.layer1", "super_resnest.ResNet.layer2", "super_resnest.ResNet.layer3", "super_resnest.ResNet.layer4"], "methods", ["None"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNet.forward": [[493, 499], ["super_resnest.ResNet.forward_features", "super_resnest.ResNet.global_pool().flatten", "torch.dropout", "torch.dropout", "torch.dropout", "super_resnest.ResNet.global_pool", "float"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.ResNet.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "global_pool", "(", "x", ")", ".", "flatten", "(", "1", ")", "\n", "if", "self", ".", "drop_rate", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "float", "(", "self", ".", "drop_rate", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet.__init__": [[524, 530], ["super_resnest.ResNet.__init__", "super_resnest.SuperResNet._freeze_stages"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._freeze_stages"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "candidate_num", "=", "0", ",", "frozen_stages", "=", "-", "1", ",", "norm_eval", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "candidate_num", "=", "candidate_num", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "super", "(", "SuperResNet", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._make_layer": [[531, 564], ["kwargs.pop", "kwargs.pop", "dict", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "dict", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "len", "kwargs.get", "kwargs.get", "len", "super_resnest.get_block", "super_resnest.get_block", "super_resnest.downsample_avg", "super_resnest.downsample_conv", "range", "range", "super_resnest.downsample_avg", "super_resnest.downsample_conv", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.get_block", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.get_block", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.downsample_avg", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.downsample_conv", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.downsample_avg", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.downsample_conv"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "reduce_first", "=", "1", ",", "\n", "avg_down", "=", "False", ",", "down_kernel_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "# \u9ed8\u8ba4 block.expansion = 4\uff0cblock\u5728\u8fd9\u91cc\u4e0d\u7528", "\n", "        ", "downsample_share", "=", "kwargs", ".", "pop", "(", "'downsample_share'", ",", "True", ")", "\n", "candidate_args", "=", "kwargs", ".", "pop", "(", "'candidate_args'", ")", "\n", "\n", "downsample", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "candidate_args", ")", ")", "]", "\n", "first_dilation", "=", "1", "if", "dilation", "in", "(", "1", ",", "2", ")", "else", "2", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "4", ":", "\n", "            ", "downsample_args", "=", "dict", "(", "\n", "in_channels", "=", "self", ".", "inplanes", ",", "out_channels", "=", "planes", "*", "4", ",", "kernel_size", "=", "down_kernel_size", ",", "\n", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "first_dilation", "=", "first_dilation", ",", "\n", "norm_layer", "=", "kwargs", ".", "get", "(", "'norm_layer'", ")", ",", "conv_layer", "=", "kwargs", ".", "get", "(", "'conv_layer'", ")", ")", "\n", "if", "downsample_share", ":", "\n", "                ", "downsample", "=", "[", "downsample_avg", "(", "**", "downsample_args", ")", "if", "avg_down", "else", "downsample_conv", "(", "**", "downsample_args", ")", "]", "*", "len", "(", "candidate_args", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "[", "downsample_avg", "(", "**", "downsample_args", ")", "if", "avg_down", "else", "downsample_conv", "(", "**", "downsample_args", ")", "for", "_", "in", "range", "(", "len", "(", "candidate_args", ")", ")", "]", "\n", "\n", "", "", "block_kwargs", "=", "dict", "(", "reduce_first", "=", "reduce_first", ",", "dilation", "=", "dilation", ",", "**", "kwargs", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "ModuleList", "(", "\n", "[", "get_block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", "[", "i", "]", ",", "\n", "first_dilation", "=", "first_dilation", ",", "**", "block_kwargs", ",", "**", "candidate_args", "[", "i", "]", "\n", ")", "for", "i", "in", "range", "(", "len", "(", "candidate_args", ")", ")", "]", ")", "]", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "4", "\n", "layers", "+=", "[", "nn", ".", "ModuleList", "(", "\n", "[", "get_block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "**", "block_kwargs", ",", "**", "candidate_arg", "\n", ")", "for", "candidate_arg", "in", "candidate_args", "]", ")", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", "]", "\n", "\n", "return", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet._freeze_stages": [[565, 577], ["range", "getattr", "getattr.eval", "getattr.parameters", "getattr.eval", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "m", "in", "[", "self", ".", "conv1", ",", "self", ".", "bn1", "]", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet.forward": [[578, 589], ["super_resnest.SuperResNet.conv1", "super_resnest.SuperResNet.bn1", "super_resnest.SuperResNet.act1", "super_resnest.SuperResNet.maxpool", "zip", "getattr"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "choice_indices", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "for", "layer_index", ",", "choice_index", "in", "zip", "(", "self", ".", "layer_indices", ",", "choice_indices", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "layer_index", "[", "0", "]", ")", "[", "layer_index", "[", "1", "]", "]", "[", "choice_index", "]", "(", "x", ")", "\n", "#         x = self.global_pool(x).flatten(1)", "\n", "#         if self.drop_rate:", "\n", "#             x = F.dropout(x, p=float(self.drop_rate), training=self.training)", "\n", "", "return", "(", "x", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet.ema_blocks": [[590, 595], ["zip", "blocks.append", "getattr"], "methods", ["None"], ["", "def", "ema_blocks", "(", "self", ",", "choice_indices", ")", ":", "\n", "        ", "blocks", "=", "[", "self", ".", "conv1", ",", "self", ".", "bn1", "]", "\n", "for", "layer_index", ",", "choice_index", "in", "zip", "(", "self", ".", "layer_indices", ",", "choice_indices", ")", ":", "\n", "            ", "blocks", ".", "append", "(", "getattr", "(", "self", ",", "layer_index", "[", "0", "]", ")", "[", "layer_index", "[", "1", "]", "]", "[", "choice_index", "]", ")", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.SuperResNet.train": [[596, 612], ["super().train", "super_resnest.SuperResNet._freeze_stages", "super_resnest.SuperResNet.modules", "isinstance", "super_resnest.SuperResNet.modules", "m.eval", "isinstance", "m.train"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "SuperResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", ":", "\n", "            ", "if", "self", ".", "norm_eval", "==", "'all_true'", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                    ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "", "", "", "elif", "self", ".", "norm_eval", "==", "'all_false'", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                    ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                        ", "m", ".", "train", "(", ")", "\n", "", "", "", "elif", "self", ".", "norm_eval", "!=", "''", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.get_padding": [[13, 16], ["None"], "function", ["None"], ["def", "get_padding", "(", "kernel_size", ",", "stride", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "padding", "=", "(", "(", "stride", "-", "1", ")", "+", "dilation", "*", "(", "kernel_size", "-", "1", ")", ")", "//", "2", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.downsample_conv": [[163, 176], ["super_resnest.get_padding", "torch.Sequential", "conv_layer", "norm_layer"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.get_padding"], ["", "", "def", "downsample_conv", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "first_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "conv_layer", "=", "None", ")", ":", "\n", "    ", "norm_layer", "=", "norm_layer", "or", "nn", ".", "BatchNorm2d", "\n", "conv_layer", "=", "conv_layer", "or", "nn", ".", "Conv2d", "\n", "kernel_size", "=", "1", "if", "stride", "==", "1", "and", "dilation", "==", "1", "else", "kernel_size", "\n", "first_dilation", "=", "(", "first_dilation", "or", "dilation", ")", "if", "kernel_size", ">", "1", "else", "1", "\n", "p", "=", "get_padding", "(", "kernel_size", ",", "stride", ",", "first_dilation", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "[", "\n", "conv_layer", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "p", ",", "dilation", "=", "first_dilation", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.downsample_avg": [[179, 195], ["torch.Sequential", "torch.Identity", "avg_pool_fn", "conv_layer", "norm_layer"], "function", ["None"], ["", "def", "downsample_avg", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "first_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "conv_layer", "=", "None", ")", ":", "\n", "    ", "norm_layer", "=", "norm_layer", "or", "nn", ".", "BatchNorm2d", "\n", "conv_layer", "=", "conv_layer", "or", "nn", ".", "Conv2d", "\n", "avg_stride", "=", "stride", "if", "dilation", "==", "1", "else", "1", "\n", "if", "stride", "==", "1", "and", "dilation", "==", "1", ":", "\n", "        ", "pool", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "avg_pool_fn", "=", "AvgPool2dSame", "if", "avg_stride", "==", "1", "and", "dilation", ">", "1", "else", "nn", ".", "AvgPool2d", "\n", "pool", "=", "avg_pool_fn", "(", "2", ",", "avg_stride", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "[", "\n", "pool", ",", "\n", "conv_layer", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.super_resnest.get_block": [[501, 510], ["kwargs.pop"], "function", ["None"], ["", "", "def", "get_block", "(", "**", "kwargs", ")", ":", "\n", "    ", "blocks", "=", "{", "\n", "'Bottleneck'", ":", "Bottleneck", ",", "\n", "'ResNestBottleneck'", ":", "ResNestBottleneck", ",", "\n", "}", "\n", "name", "=", "kwargs", ".", "pop", "(", "'block'", ",", "'ResNestBottleneck'", ")", "\n", "\n", "block", "=", "blocks", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.BasicBlock.__init__": [[15, 49], ["dict", "torch.Module.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "resnet.BasicBlock.add_module", "utils.build_conv_layer", "resnet.BasicBlock.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer"], ["from", ".", ".", "model_store", "import", "get_model_file", "\n", "\n", "__all__", "=", "[", "'ResNet'", ",", "'Bottleneck'", ",", "\n", "'resnet50'", ",", "'resnet101'", ",", "'resnet152'", "]", "\n", "\n", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"ResNet Bottleneck\n    \"\"\"", "\n", "# pylint: disable=unused-argument", "\n", "expansion", "=", "4", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "radix", "=", "0", ",", "cardinality", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "dilation", "=", "1", ",", "is_first", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "norm_layer", "=", "None", ",", "dropblock_prob", "=", "0.0", ",", "last_gamma", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "int", "(", "planes", "*", "(", "bottleneck_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "group_width", ")", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "and", "(", "stride", ">", "1", "or", "is_first", ")", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "stride", "=", "1", "\n", "\n", "", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock1", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "if", "radix", "==", "1", ":", "\n", "                ", "self", ".", "dropblock2", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "dropblock3", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "\n", "", "if", "radix", ">=", "1", ":", "# if radix > 1:", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.BasicBlock.norm1": [[50, 53], ["getattr"], "methods", ["None"], ["            ", "self", ".", "conv2", "=", "SplAtConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.BasicBlock.norm2": [[54, 57], ["getattr"], "methods", ["None"], ["radix", "=", "radix", ",", "rectify", "=", "rectified_conv", ",", "\n", "rectify_avg", "=", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.BasicBlock.forward": [[58, 75], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.norm1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.norm2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.Bottleneck.norm2"], ["#", "\n", "self", ".", "bn2", "=", "None", "\n", "#", "\n", "", "elif", "rectified_conv", ":", "\n", "            ", "self", ".", "conv2", "=", "RFConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "average_mode", "=", "rectify_avg", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.Bottleneck.__init__": [[80, 146], ["dict", "torch.Module.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "resnet.Bottleneck.add_module", "utils.build_conv_layer", "resnet.Bottleneck.add_module", "utils.build_conv_layer", "resnet.Bottleneck.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer"], ["            ", "from", "torch", ".", "nn", ".", "init", "import", "zeros_", "\n", "zeros_", "(", "self", ".", "bn3", ".", "weight", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "# if self.radix == 1:", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "                ", "out", "=", "self", ".", "dropblock2", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd", "and", "not", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock3", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"ResNet Variants\n\n    Parameters\n    ----------\n    block : Block\n        Class for the residual block. Options are BasicBlockV1, BottleneckV1.\n    layers : list of int\n        Numbers of layers in each block\n    classes : int, default 1000\n        Number of classification classes.\n    dilated : bool, default False\n        Applying dilation strategy to pretrained ResNet yielding a stride-8 model,\n        typically used in Semantic Segmentation.\n    norm_layer : object\n        Normalization layer used in backbone network (default: :class:`mxnet.gluon.nn.BatchNorm`;\n        for Synchronized Cross-GPU BachNormalization).\n\n    Reference:\n\n        - He, Kaiming, et al. \"Deep residual learning for image recognition.\" Proceedings of the IEEE conference on computer vision and pattern recognition. 2016.\n\n        - Yu, Fisher, and Vladlen Koltun. \"Multi-scale context aggregation by dilated convolutions.\"\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.Bottleneck.norm1": [[147, 150], ["getattr"], "methods", ["None"], ["# pylint: disable=unused-variable", "\n", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "radix", "=", "0", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "num_classes", "=", "1000", ",", "dilated", "=", "False", ",", "dilation", "=", "1", ",", "\n", "deep_stem", "=", "False", ",", "stem_width", "=", "64", ",", "avg_down", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.Bottleneck.norm2": [[151, 154], ["getattr"], "methods", ["None"], ["rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "\n", "final_drop", "=", "0.0", ",", "dropblock_prob", "=", "0", ",", "\n", "last_gamma", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.Bottleneck.norm3": [[155, 158], ["getattr"], "methods", ["None"], ["#", "\n", "frozen_stages", "=", "-", "1", ",", "norm_eval", "=", "''", "\n", "#", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.Bottleneck.forward": [[159, 190], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.norm1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.norm2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.Bottleneck.norm3"], ["        ", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "# ResNet-D params", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "64", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "last_gamma", "=", "last_gamma", "\n", "# ResNeSt params", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "#", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "#", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rectified_conv", "=", "rectified_conv", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "if", "rectified_conv", ":", "\n", "            ", "conv_layer", "=", "RFConv2d", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "nn", ".", "Conv2d", "\n", "", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectified_conv", "else", "{", "}", "\n", "if", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", "(", "3", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.__init__": [[291, 355], ["dict", "torch.Module.__init__", "resnet.ResNet._make_stem_layer", "enumerate", "resnet.ResNet._freeze_stages", "KeyError", "len", "len", "max", "resnet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnext.make_res_layer"], ["\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "dilation", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "#x = x.view(x.size(0), -1)", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "if", "self", ".", "drop", ":", "\n", "            ", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "#", "\n", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", ":", "\n", "            ", "if", "self", ".", "norm_eval", "==", "'all_true'", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                    ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "", "", "", "elif", "self", ".", "norm_eval", "==", "'all_false'", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                    ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                        ", "m", ".", "train", "(", ")", "\n", "#", "\n", "\n", "", "", "", "", "", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "backbone_pretrained_path", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "backbone_pretrained_path", ":", "\n", "# model.load_state_dict(torch.load(", "\n", "#     get_model_file('resnet50', root=root)), strict=False)", "\n", "        ", "print", "(", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "backbone_pretrained_path", ",", "map_location", "=", "'cpu'", ")", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", ",", "flush", "=", "True", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "backbone_pretrained_path", ")", ",", "flush", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.norm1": [[356, 359], ["getattr"], "methods", ["None"], ["\n", "", "def", "resnet101", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._make_stem_layer": [[360, 373], ["utils.build_conv_layer", "utils.build_norm_layer", "resnet.ResNet.add_module", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer"], ["\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnet101'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet152", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._freeze_stages": [[374, 386], ["range", "resnet.ResNet.norm1.eval", "getattr", "getattr.eval", "getattr.parameters", "getattr.parameters"], "methods", ["None"], ["\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnet152'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights": [[387, 406], ["isinstance", "resnet.ResNet.utils.get_root_logger", "mmcv.runner.load_checkpoint", "resnet.ResNet.modules", "TypeError", "isinstance", "resnet.ResNet.modules", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.get_root_logger"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.forward": [[407, 422], ["resnet.ResNet.conv1", "resnet.ResNet.norm1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "enumerate", "tuple", "outs.append", "getattr", "getattr.", "outs.append"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.norm1"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train": [[423, 444], ["super().train", "resnet.ResNet._freeze_stages", "resnet.ResNet.modules", "isinstance", "resnet.ResNet.modules", "m.eval", "isinstance", "m.train"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.make_res_layer": [[192, 241], ["dict", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "utils.build_conv_layer", "block", "utils.build_norm_layer"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer"], ["", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_layer", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "**", "conv_kwargs", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ",", "is_first", "=", "False", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "if", "dilated", "or", "dilation", "==", "4", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "dilation", "==", "2", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "self", ".", "avgpool", "=", "GlobalAvgPool2d", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "final_drop", ")", "if", "final_drop", ">", "0.0", "else", "None", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "norm_layer", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "#", "\n", "", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n", "", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "m", "in", "[", "self", ".", "conv1", ",", "self", ".", "bn1", "]", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnext.Bottleneck.__init__": [[13, 76], ["resnet.Bottleneck.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.add_module", "utils.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.dcn.pop", "utils.build_conv_layer", "utils.build_conv_layer", "math.floor"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer"], ["\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'bottleneck_width'", "]", "=", "4", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnext50_32x4d'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n", "", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'bottleneck_width'", "]", "=", "8", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "get_model_file", "(", "'resnext101_32x8d'", ",", "root", "=", "root", ")", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnext.ResNeXt.__init__": [[189, 223], ["resnet.ResNet.__init__", "enumerate", "resnext.ResNeXt._freeze_stages", "resnext.make_res_layer", "resnext.ResNeXt.add_module", "resnext.ResNeXt.res_layers.append"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnext.make_res_layer"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnext.make_res_layer": [[78, 139], ["dict", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "utils.build_conv_layer", "block", "utils.build_norm_layer"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.norm.build_norm_layer"], []], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.optimizer_hook.DistOptimizerHook.__init__": [[11, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "update_interval", "=", "1", ",", "loss_div_update_interval", "=", "True", ",", "\n", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ",", "use_fp16", "=", "False", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "self", ".", "update_interval", "=", "update_interval", "\n", "self", ".", "loss_div_update_interval", "=", "loss_div_update_interval", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.optimizer_hook.DistOptimizerHook.before_run": [[20, 22], ["runner.optimizer.zero_grad"], "methods", ["None"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.optimizer_hook.DistOptimizerHook.after_train_iter": [[23, 42], ["optimizer_hook.DistOptimizerHook.every_n_iters", "runner.outputs[].backward", "runner.optimizer.step", "runner.optimizer.zero_grad", "apex.amp.scale_loss", "scaled_loss.backward", "optimizer_hook.DistOptimizerHook.clip_grads", "runner.model.parameters", "torch.sum", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardMishJitAutoFn.backward", "home.repos.pwc.inspect_result.ernie1_pi-nas.nn.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.ernie1_pi-nas.layers.activations_me.HardMishJitAutoFn.backward"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "self", ".", "loss_div_update_interval", ":", "\n", "            ", "runner", ".", "outputs", "[", "'loss'", "]", "/=", "self", ".", "update_interval", "\n", "", "if", "self", ".", "use_fp16", ":", "\n", "            ", "with", "apex", ".", "amp", ".", "scale_loss", "(", "runner", ".", "outputs", "[", "'loss'", "]", ",", "runner", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "runner", ".", "outputs", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "", "if", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "update_interval", ")", ":", "\n", "            ", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "                ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "# my (for supernet)", "\n", "", "for", "group", "in", "runner", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                    ", "if", "not", "p", ".", "grad", "is", "None", "and", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "p", ".", "grad", ".", "data", ")", ")", "==", "0.0", ":", "\n", "                        ", "p", ".", "grad", "=", "None", "\n", "#", "\n", "", "", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.odc_hook.ODCHook.__init__": [[12, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "centroids_update_interval", ",", "\n", "deal_with_small_clusters_interval", ",", "\n", "evaluate_interval", ",", "\n", "reweight", ",", "\n", "reweight_pow", ",", "\n", "dist_mode", "=", "True", ")", ":", "\n", "        ", "assert", "dist_mode", ",", "\"non-dist mode is not implemented\"", "\n", "self", ".", "centroids_update_interval", "=", "centroids_update_interval", "\n", "self", ".", "deal_with_small_clusters_interval", "=", "deal_with_small_clusters_interval", "\n", "self", ".", "evaluate_interval", "=", "evaluate_interval", "\n", "self", ".", "reweight", "=", "reweight", "\n", "self", ".", "reweight_pow", "=", "reweight_pow", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.odc_hook.ODCHook.after_train_iter": [[27, 45], ["odc_hook.ODCHook.every_n_iters", "odc_hook.ODCHook.every_n_iters", "runner.model.module.set_reweight", "odc_hook.ODCHook.every_n_iters", "runner.model.module.memory_bank.update_centroids_memory", "runner.model.module.memory_bank.deal_with_small_clusters", "odc_hook.ODCHook.evaluate", "new_labels.cpu.cpu.cpu", "new_labels.cpu.cpu.numpy"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepcluster.DeepCluster.set_reweight", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.update_centroids_memory", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.deal_with_small_clusters", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.evaluate"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "# centroids update", "\n", "        ", "if", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "centroids_update_interval", ")", ":", "\n", "            ", "runner", ".", "model", ".", "module", ".", "memory_bank", ".", "update_centroids_memory", "(", ")", "\n", "\n", "# deal with small clusters", "\n", "", "if", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "deal_with_small_clusters_interval", ")", ":", "\n", "            ", "runner", ".", "model", ".", "module", ".", "memory_bank", ".", "deal_with_small_clusters", "(", ")", "\n", "\n", "# reweight", "\n", "", "runner", ".", "model", ".", "module", ".", "set_reweight", "(", ")", "\n", "\n", "# evaluate", "\n", "if", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "evaluate_interval", ")", ":", "\n", "            ", "new_labels", "=", "runner", ".", "model", ".", "module", ".", "memory_bank", ".", "label_bank", "\n", "if", "new_labels", ".", "is_cuda", ":", "\n", "                ", "new_labels", "=", "new_labels", ".", "cpu", "(", ")", "\n", "", "self", ".", "evaluate", "(", "runner", ",", "new_labels", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.odc_hook.ODCHook.after_train_epoch": [[46, 56], ["odc_hook.ODCHook.every_n_epochs", "numpy.save", "new_labels.cpu.cpu.cpu", "new_labels.cpu.cpu.numpy"], "methods", ["None"], ["", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "# save cluster", "\n", "        ", "if", "self", ".", "every_n_epochs", "(", "runner", ",", "10", ")", "and", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "new_labels", "=", "runner", ".", "model", ".", "module", ".", "memory_bank", ".", "label_bank", "\n", "if", "new_labels", ".", "is_cuda", ":", "\n", "                ", "new_labels", "=", "new_labels", ".", "cpu", "(", ")", "\n", "", "np", ".", "save", "(", "\n", "\"{}/cluster_epoch_{}.npy\"", ".", "format", "(", "runner", ".", "work_dir", ",", "\n", "runner", ".", "epoch", ")", ",", "\n", "new_labels", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.odc_hook.ODCHook.evaluate": [[57, 68], ["numpy.bincount", "numpy.bincount.min", "numpy.bincount.max", "odc_hook.ODCHook.utils.print_log", "empty_cls.item", "minimal_cls_size.item", "maximal_cls_size.item"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["", "", "def", "evaluate", "(", "self", ",", "runner", ",", "new_labels", ")", ":", "\n", "        ", "hist", "=", "np", ".", "bincount", "(", "\n", "new_labels", ",", "minlength", "=", "runner", ".", "model", ".", "module", ".", "memory_bank", ".", "num_classes", ")", "\n", "empty_cls", "=", "(", "hist", "==", "0", ")", ".", "sum", "(", ")", "\n", "minimal_cls_size", ",", "maximal_cls_size", "=", "hist", ".", "min", "(", ")", ",", "hist", ".", "max", "(", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print_log", "(", "\n", "\"empty_num: {}\\tmin_cluster: {}\\tmax_cluster:{}\"", ".", "format", "(", "\n", "empty_cls", ".", "item", "(", ")", ",", "minimal_cls_size", ".", "item", "(", ")", ",", "\n", "maximal_cls_size", ".", "item", "(", ")", ")", ",", "\n", "logger", "=", "'root'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.validate_hook.ValidateHook.__init__": [[13, 48], ["isinstance", "datasets.build_dataloader", "eval_kwargs.get", "isinstance", "datasets.build_dataset", "datasets.build_dataloader", "datasets.build_dataset", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.Registry.get", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "dist_mode", "=", "True", ",", "\n", "initial", "=", "True", ",", "\n", "interval", "=", "1", ",", "\n", "**", "eval_kwargs", ")", ":", "\n", "        ", "from", "openselfsup", "import", "datasets", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "elif", "isinstance", "(", "dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "build_dataset", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "dataset", ")", ")", ")", "\n", "", "self", ".", "data_loader", "=", "datasets", ".", "build_dataloader", "(", "\n", "self", ".", "dataset", ",", "\n", "eval_kwargs", "[", "'imgs_per_gpu'", "]", ",", "\n", "eval_kwargs", "[", "'workers_per_gpu'", "]", ",", "\n", "dist", "=", "dist_mode", ",", "\n", "shuffle", "=", "False", ")", "\n", "self", ".", "dist_mode", "=", "dist_mode", "\n", "self", ".", "initial", "=", "initial", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "# my", "\n", "self", ".", "update_bn", "=", "eval_kwargs", ".", "get", "(", "'update_bn'", ",", "False", ")", "\n", "if", "self", ".", "update_bn", ":", "\n", "            ", "self", ".", "train_dataset", "=", "datasets", ".", "build_dataset", "(", "eval_kwargs", "[", "'train_dataset'", "]", ")", "\n", "self", ".", "train_data_loader", "=", "datasets", ".", "build_dataloader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "eval_kwargs", "[", "'imgs_per_gpu'", "]", ",", "\n", "eval_kwargs", "[", "'workers_per_gpu'", "]", ",", "\n", "dist", "=", "dist_mode", ",", "\n", "shuffle", "=", "False", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.validate_hook.ValidateHook.before_run": [[50, 53], ["validate_hook.ValidateHook._run_validate"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.validate_hook.ValidateHook._run_validate"], ["", "", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "self", ".", "initial", ":", "\n", "            ", "self", ".", "_run_validate", "(", "runner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.validate_hook.ValidateHook.after_train_epoch": [[54, 58], ["validate_hook.ValidateHook._run_validate", "validate_hook.ValidateHook.every_n_epochs"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.validate_hook.ValidateHook._run_validate"], ["", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "self", ".", "_run_validate", "(", "runner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.validate_hook.ValidateHook._run_validate": [[59, 77], ["runner.model.eval", "runner.model.train", "validate_hook.update_bn_stats", "runner.model", "validate_hook.ValidateHook.utils.dist_forward_collect", "validate_hook.ValidateHook.utils.nondist_forward_collect", "validate_hook.ValidateHook.utils.nondist_forward_collect.items", "len", "len", "validate_hook.ValidateHook._evaluate", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.contrastive_search_hook.update_bn_stats", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.dist_forward_collect", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.nondist_forward_collect", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.search_hook.SearchHook._evaluate"], ["", "def", "_run_validate", "(", "self", ",", "runner", ")", ":", "\n", "# my", "\n", "        ", "if", "self", ".", "update_bn", ":", "\n", "            ", "update_bn_stats", "(", "self", ".", "train_data_loader", ",", "runner", ",", "num_iters", "=", "196", ")", "\n", "#", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "\n", "func", "=", "lambda", "**", "x", ":", "runner", ".", "model", "(", "mode", "=", "'test'", ",", "**", "x", ")", "\n", "if", "self", ".", "dist_mode", ":", "\n", "            ", "results", "=", "dist_forward_collect", "(", "\n", "func", ",", "self", ".", "data_loader", ",", "runner", ".", "rank", ",", "\n", "len", "(", "self", ".", "dataset", ")", ")", "# dict{key: np.ndarray}", "\n", "", "else", ":", "\n", "            ", "results", "=", "nondist_forward_collect", "(", "func", ",", "self", ".", "data_loader", ",", "\n", "len", "(", "self", ".", "dataset", ")", ")", "\n", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "for", "name", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_evaluate", "(", "runner", ",", "torch", ".", "from_numpy", "(", "val", ")", ",", "name", ")", "\n", "", "", "runner", ".", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.validate_hook.ValidateHook._evaluate": [[78, 87], ["validate_hook.ValidateHook.dataset.evaluate", "validate_hook.ValidateHook.items"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.evaluate"], ["", "def", "_evaluate", "(", "self", ",", "runner", ",", "results", ",", "keyword", ")", ":", "\n", "        ", "eval_res", "=", "self", ".", "dataset", ".", "evaluate", "(", "\n", "results", ",", "\n", "keyword", "=", "keyword", ",", "\n", "logger", "=", "runner", ".", "logger", ",", "\n", "**", "self", ".", "eval_kwargs", "[", "'eval_param'", "]", ")", "\n", "for", "name", ",", "val", "in", "eval_res", ".", "items", "(", ")", ":", "\n", "            ", "runner", ".", "log_buffer", ".", "output", "[", "name", "]", "=", "val", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.validate_hook.update_bn_stats": [[92, 144], ["runner.model.train", "contrastive_search_hook.get_bn_modules", "enumerate", "enumerate", "runner.model.eval", "len", "torch.zeros_like", "torch.zeros_like", "runner.logger.info", "mmcv.ProgressBar", "itertools.islice", "enumerate", "torch.no_grad", "runner.model", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.contrastive_search_hook.get_bn_modules", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update"], ["def", "update_bn_stats", "(", "data_loader", ",", "runner", ",", "num_iters", "=", "200", ")", ":", "\n", "    ", "runner", ".", "model", ".", "train", "(", ")", "\n", "\n", "bn_layers", "=", "get_bn_modules", "(", "runner", ".", "model", ")", "\n", "\n", "if", "len", "(", "bn_layers", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "# In order to make the running stats only reflect the current batch, the", "\n", "# momentum is disabled.", "\n", "# bn.running_mean = (1 - momentum) * bn.running_mean + momentum * batch_mean", "\n", "# Setting the momentum to 1.0 to compute the stats without momentum.", "\n", "", "momentum_actual", "=", "[", "bn", ".", "momentum", "for", "bn", "in", "bn_layers", "]", "# pyre-ignore", "\n", "for", "bn", "in", "bn_layers", ":", "\n", "        ", "bn", ".", "momentum", "=", "1.0", "\n", "\n", "# Note that running_var actually means \"running average of variance\"", "\n", "", "running_mean", "=", "[", "\n", "torch", ".", "zeros_like", "(", "bn", ".", "running_mean", ")", "for", "bn", "in", "bn_layers", "# pyre-ignore", "\n", "]", "\n", "running_var", "=", "[", "torch", ".", "zeros_like", "(", "bn", ".", "running_var", ")", "for", "bn", "in", "bn_layers", "]", "# pyre-ignore", "\n", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "        ", "runner", ".", "logger", ".", "info", "(", "'update bn'", ")", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "num_iters", ")", "\n", "", "idx", "=", "-", "1", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "itertools", ".", "islice", "(", "data_loader", ",", "num_iters", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "# No need to backward", "\n", "# runner.model(**data, choice_indices=choice_indices, extract=True)", "\n", "            ", "runner", ".", "model", "(", "**", "data", ")", "\n", "\n", "", "for", "i", ",", "bn", "in", "enumerate", "(", "bn_layers", ")", ":", "\n", "# Accumulates the bn stats.", "\n", "            ", "running_mean", "[", "i", "]", "+=", "(", "bn", ".", "running_mean", "-", "running_mean", "[", "i", "]", ")", "/", "(", "idx", "+", "1", ")", "\n", "running_var", "[", "i", "]", "+=", "(", "bn", ".", "running_var", "-", "running_var", "[", "i", "]", ")", "/", "(", "idx", "+", "1", ")", "\n", "# We compute the \"average of variance\" across iterations.", "\n", "\n", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "assert", "idx", "==", "num_iters", "-", "1", ",", "(", "\n", "\"update_bn_stats is meant to run for {} iterations, \"", "\n", "\"but the dataloader stops at {} iterations.\"", ".", "format", "(", "num_iters", ",", "idx", ")", "\n", ")", "\n", "\n", "for", "i", ",", "bn", "in", "enumerate", "(", "bn_layers", ")", ":", "\n", "# Sets the precise bn stats.", "\n", "        ", "bn", ".", "running_mean", "=", "running_mean", "[", "i", "]", "\n", "bn", ".", "running_var", "=", "running_var", "[", "i", "]", "\n", "bn", ".", "momentum", "=", "momentum_actual", "[", "i", "]", "\n", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.extractor.Extractor.__init__": [[9, 31], ["isinstance", "datasets.build_dataloader", "torch.AdaptiveAvgPool2d", "isinstance", "datasets.build_dataset", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "dist_mode", "=", "False", ")", ":", "\n", "        ", "from", "openselfsup", "import", "datasets", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "elif", "isinstance", "(", "dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "build_dataset", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "dataset", ")", ")", ")", "\n", "", "self", ".", "data_loader", "=", "datasets", ".", "build_dataloader", "(", "\n", "self", ".", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "dist", "=", "dist_mode", ",", "\n", "shuffle", "=", "False", ")", "\n", "self", ".", "dist_mode", "=", "dist_mode", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.extractor.Extractor._forward_func": [[32, 37], ["runner.model", "last_layer_feat.view.view.view", "dict", "runner.model.module.neck", "last_layer_feat.view.view.size", "last_layer_feat.view.view.cpu"], "methods", ["None"], ["", "def", "_forward_func", "(", "self", ",", "runner", ",", "**", "x", ")", ":", "\n", "        ", "backbone_feat", "=", "runner", ".", "model", "(", "mode", "=", "'extract'", ",", "**", "x", ")", "\n", "last_layer_feat", "=", "runner", ".", "model", ".", "module", ".", "neck", "(", "[", "backbone_feat", "[", "-", "1", "]", "]", ")", "[", "0", "]", "\n", "last_layer_feat", "=", "last_layer_feat", ".", "view", "(", "last_layer_feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "dict", "(", "feature", "=", "last_layer_feat", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.extractor.Extractor.__call__": [[38, 51], ["extractor.Extractor._forward_func", "extractor.Extractor.utils.dist_forward_collect", "extractor.Extractor.utils.nondist_forward_collect", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.extractor.Extractor._forward_func", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.dist_forward_collect", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.nondist_forward_collect"], ["", "def", "__call__", "(", "self", ",", "runner", ")", ":", "\n", "        ", "func", "=", "lambda", "**", "x", ":", "self", ".", "_forward_func", "(", "runner", ",", "**", "x", ")", "\n", "if", "self", ".", "dist_mode", ":", "\n", "            ", "feats", "=", "dist_forward_collect", "(", "\n", "func", ",", "\n", "self", ".", "data_loader", ",", "\n", "runner", ".", "rank", ",", "\n", "len", "(", "self", ".", "dataset", ")", ",", "\n", "ret_rank", "=", "-", "1", ")", "[", "'feature'", "]", "# NxD", "\n", "", "else", ":", "\n", "            ", "feats", "=", "nondist_forward_collect", "(", "func", ",", "self", ".", "data_loader", ",", "\n", "len", "(", "self", ".", "dataset", ")", ")", "[", "'feature'", "]", "\n", "", "return", "feats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.__init__": [[17, 40], ["extractor.Extractor", "deepcluster_hook.DeepClusterHook.third_party.clustering.pop"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "extractor", ",", "\n", "clustering", ",", "\n", "unif_sampling", ",", "\n", "reweight", ",", "\n", "reweight_pow", ",", "\n", "init_memory", "=", "False", ",", "# for ODC", "\n", "initial", "=", "True", ",", "\n", "interval", "=", "1", ",", "\n", "dist_mode", "=", "True", ",", "\n", "data_loaders", "=", "None", ")", ":", "\n", "        ", "self", ".", "extractor", "=", "Extractor", "(", "dist_mode", "=", "dist_mode", ",", "**", "extractor", ")", "\n", "self", ".", "clustering_type", "=", "clustering", ".", "pop", "(", "'type'", ")", "\n", "self", ".", "clustering_cfg", "=", "clustering", "\n", "self", ".", "unif_sampling", "=", "unif_sampling", "\n", "self", ".", "reweight", "=", "reweight", "\n", "self", ".", "reweight_pow", "=", "reweight_pow", "\n", "self", ".", "init_memory", "=", "init_memory", "\n", "self", ".", "initial", "=", "initial", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "dist_mode", "=", "dist_mode", "\n", "self", ".", "data_loaders", "=", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.before_run": [[41, 44], ["deepcluster_hook.DeepClusterHook.deepcluster"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.deepcluster"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "self", ".", "initial", ":", "\n", "            ", "self", ".", "deepcluster", "(", "runner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.after_train_epoch": [[45, 49], ["deepcluster_hook.DeepClusterHook.deepcluster", "deepcluster_hook.DeepClusterHook.every_n_epochs"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.deepcluster"], ["", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "self", ".", "deepcluster", "(", "runner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.deepcluster": [[50, 99], ["runner.model.eval", "deepcluster_hook.DeepClusterHook.extractor", "runner.model.train", "list", "deepcluster_hook.DeepClusterHook.data_loaders[].dataset.assign_labels", "runner.model.module.head.init_weights", "clustering_algo.cluster", "isinstance", "clustering_algo.labels.astype", "numpy.save", "deepcluster_hook.DeepClusterHook.evaluate", "numpy.zeros", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.broadcast", "torch.broadcast", "torch.from_numpy().cuda.cpu().numpy", "torch.from_numpy().cuda.cpu().numpy", "deepcluster_hook.DeepClusterHook.data_loaders[].sampler.set_uniform_indices", "runner.model.module.set_reweight", "runner.model.module.head.state_dict().values", "runner.model.module.memory_bank.init_memory", "torch.broadcast", "torch.broadcast", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.cpu", "torch.from_numpy().cuda.cpu", "runner.model.module.head.state_dict"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.deepcluster.DeepClusterDataset.assign_labels", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ernie1_pi-nas.third_party.clustering.PIC.cluster", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.evaluate", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.sampler.DistributedGivenIterationSampler.set_uniform_indices", "home.repos.pwc.inspect_result.ernie1_pi-nas.models.deepcluster.DeepCluster.set_reweight", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.odc_memory.ODCMemory.init_memory", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.lr_scheduler.Scheduler.state_dict"], ["", "def", "deepcluster", "(", "self", ",", "runner", ")", ":", "\n", "# step 1: get features", "\n", "        ", "runner", ".", "model", ".", "eval", "(", ")", "\n", "features", "=", "self", ".", "extractor", "(", "runner", ")", "\n", "runner", ".", "model", ".", "train", "(", ")", "\n", "\n", "# step 2: get labels", "\n", "if", "not", "self", ".", "dist_mode", "or", "(", "self", ".", "dist_mode", "and", "runner", ".", "rank", "==", "0", ")", ":", "\n", "            ", "clustering_algo", "=", "_clustering", ".", "__dict__", "[", "self", ".", "clustering_type", "]", "(", "\n", "**", "self", ".", "clustering_cfg", ")", "\n", "# Features are normalized during clustering", "\n", "clustering_algo", ".", "cluster", "(", "features", ",", "verbose", "=", "True", ")", "\n", "assert", "isinstance", "(", "clustering_algo", ".", "labels", ",", "np", ".", "ndarray", ")", "\n", "new_labels", "=", "clustering_algo", ".", "labels", ".", "astype", "(", "np", ".", "int64", ")", "\n", "np", ".", "save", "(", "\n", "\"{}/cluster_epoch_{}.npy\"", ".", "format", "(", "runner", ".", "work_dir", ",", "\n", "runner", ".", "epoch", ")", ",", "new_labels", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "new_labels", ")", "\n", "", "else", ":", "\n", "            ", "new_labels", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "data_loaders", "[", "0", "]", ".", "dataset", ")", ",", ")", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "if", "self", ".", "dist_mode", ":", "\n", "            ", "new_labels_tensor", "=", "torch", ".", "from_numpy", "(", "new_labels", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "broadcast", "(", "new_labels_tensor", ",", "0", ")", "\n", "new_labels", "=", "new_labels_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "new_labels_list", "=", "list", "(", "new_labels", ")", "\n", "\n", "# step 3: assign new labels", "\n", "self", ".", "data_loaders", "[", "0", "]", ".", "dataset", ".", "assign_labels", "(", "new_labels_list", ")", "\n", "\n", "# step 4 (a): set uniform sampler", "\n", "if", "self", ".", "unif_sampling", ":", "\n", "            ", "self", ".", "data_loaders", "[", "0", "]", ".", "sampler", ".", "set_uniform_indices", "(", "\n", "new_labels_list", ",", "self", ".", "clustering_cfg", ".", "k", ")", "\n", "\n", "# step 4 (b): set loss reweight", "\n", "", "if", "self", ".", "reweight", ":", "\n", "            ", "runner", ".", "model", ".", "module", ".", "set_reweight", "(", "new_labels", ",", "self", ".", "reweight_pow", ")", "\n", "\n", "# step 5: randomize classifier", "\n", "", "runner", ".", "model", ".", "module", ".", "head", ".", "init_weights", "(", "init_linear", "=", "'normal'", ")", "\n", "if", "self", ".", "dist_mode", ":", "\n", "            ", "for", "p", "in", "runner", ".", "model", ".", "module", ".", "head", ".", "state_dict", "(", ")", ".", "values", "(", ")", ":", "\n", "                ", "dist", ".", "broadcast", "(", "p", ",", "0", ")", "\n", "\n", "# step 6: init memory for ODC", "\n", "", "", "if", "self", ".", "init_memory", ":", "\n", "            ", "runner", ".", "model", ".", "module", ".", "memory_bank", ".", "init_memory", "(", "features", ",", "new_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.evaluate": [[100, 110], ["numpy.bincount", "numpy.bincount.min", "numpy.bincount.max", "deepcluster_hook.DeepClusterHook.utils.print_log", "empty_cls.item", "minimal_cls_size.item", "maximal_cls_size.item"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.logger.print_log"], ["", "", "def", "evaluate", "(", "self", ",", "runner", ",", "new_labels", ")", ":", "\n", "        ", "hist", "=", "np", ".", "bincount", "(", "new_labels", ",", "minlength", "=", "self", ".", "clustering_cfg", ".", "k", ")", "\n", "empty_cls", "=", "(", "hist", "==", "0", ")", ".", "sum", "(", ")", "\n", "minimal_cls_size", ",", "maximal_cls_size", "=", "hist", ".", "min", "(", ")", ",", "hist", ".", "max", "(", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print_log", "(", "\n", "\"empty_num: {}\\tmin_cluster: {}\\tmax_cluster:{}\"", ".", "format", "(", "\n", "empty_cls", ".", "item", "(", ")", ",", "minimal_cls_size", ".", "item", "(", ")", ",", "\n", "maximal_cls_size", ".", "item", "(", ")", ")", ",", "\n", "logger", "=", "'root'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.builder.build_hook": [[6, 8], ["openselfsup.utils.build_from_cfg"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.utils.registry.build_from_cfg"], ["\n", "\n", "def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.search_hook.SearchHook.__init__": [[19, 58], ["isinstance", "datasets.build_dataloader", "isinstance", "datasets.build_dataloader", "isinstance", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "datasets.build_dataset", "TypeError", "datasets.build_dataset", "TypeError", "type", "type"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.ernie1_pi-nas.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.ernie1_pi-nas.datasets.builder.build_dataset"], ["    ", "def", "__init__", "(", "self", ",", "\n", "train_dataset", ",", "\n", "val_dataset", ",", "\n", "dist_mode", "=", "True", ",", "\n", "**", "eval_kwargs", ")", ":", "\n", "        ", "from", "openselfsup", "import", "datasets", "\n", "if", "isinstance", "(", "train_dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "train_dataset", "=", "train_dataset", "\n", "", "elif", "isinstance", "(", "train_dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "train_dataset", "=", "datasets", ".", "build_dataset", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'train_dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "train_dataset", ")", ")", ")", "\n", "", "self", ".", "train_data_loader", "=", "datasets", ".", "build_dataloader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "eval_kwargs", "[", "'imgs_per_gpu'", "]", ",", "\n", "eval_kwargs", "[", "'workers_per_gpu'", "]", ",", "\n", "dist", "=", "dist_mode", ",", "\n", "shuffle", "=", "False", ")", "\n", "if", "isinstance", "(", "val_dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "val_dataset", "=", "val_dataset", "\n", "", "elif", "isinstance", "(", "val_dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "val_dataset", "=", "datasets", ".", "build_dataset", "(", "val_dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'val_dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "val_dataset", ")", ")", ")", "\n", "", "self", ".", "val_data_loader", "=", "datasets", ".", "build_dataloader", "(", "\n", "self", ".", "val_dataset", ",", "\n", "eval_kwargs", "[", "'imgs_per_gpu'", "]", ",", "\n", "eval_kwargs", "[", "'workers_per_gpu'", "]", ",", "\n", "dist", "=", "dist_mode", ",", "\n", "shuffle", "=", "False", ")", "\n", "self", ".", "dist_mode", "=", "dist_mode", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "self", ".", "lookup", "=", "None", "\n", "if", "'lookup'", "in", "eval_kwargs", "and", "eval_kwargs", "[", "'lookup'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "lookup", "=", "torch", ".", "load", "(", "eval_kwargs", "[", "'lookup'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.search_hook.SearchHook.before_run": [[59, 86], ["runner.model.eval", "search_hook.SearchHook.apis.search_phase.SearchPhase", "search_hook.SearchHook._searcher.run", "runner.model.train", "runner.model.module.modules", "numpy.random.randint", "search_hook.SearchHook._get_net_acc", "runner.model.module.modules", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.apis.search_runner.SearchRunner.run", "home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.search_hook.SearchHook._get_net_acc"], ["", "", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "#", "\n", "        ", "runner", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "eval_kwargs", "[", "'bn'", "]", "==", "'train'", ":", "\n", "            ", "for", "m", "in", "runner", ".", "model", ".", "module", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "track_running_stats", "=", "False", "\n", "#", "\n", "", "", "", "sample_func", "=", "lambda", ":", "np", ".", "random", ".", "randint", "(", "0", ",", "\n", "runner", ".", "model", ".", "module", ".", "backbone", ".", "candidate_num", ",", "16", ")", "\n", "get_net_acc", "=", "lambda", "choice_indices", ":", "self", ".", "_get_net_acc", "(", "runner", ",", "choice_indices", ")", "\n", "self", ".", "_searcher", "=", "SearchPhase", "(", "\n", "initial_samples", "=", "self", ".", "eval_kwargs", "[", "'initial_samples'", "]", ",", "\n", "initial_sample", "=", "self", ".", "eval_kwargs", "[", "'initial_sample'", "]", ",", "\n", "selects", "=", "self", ".", "eval_kwargs", "[", "'selects'", "]", ",", "\n", "height_level", "=", "self", ".", "eval_kwargs", "[", "'height_level'", "]", ",", "\n", "sample_func", "=", "sample_func", ",", "\n", "get_net_acc", "=", "get_net_acc", ",", "\n", "logger", "=", "runner", ".", "logger", ",", "\n", "work_dir", "=", "runner", ".", "work_dir", ")", "\n", "self", ".", "_searcher", ".", "run", "(", "target_accuracy", "=", "100", ",", "max_samples", "=", "self", ".", "eval_kwargs", "[", "'max_samples'", "]", ")", "\n", "#", "\n", "runner", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "eval_kwargs", "[", "'bn'", "]", "==", "'train'", ":", "\n", "            ", "for", "m", "in", "runner", ".", "model", ".", "module", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "track_running_stats", "=", "True", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.search_hook.SearchHook._get_net_acc": [[88, 112], ["contrastive_search_hook.update_bn_stats", "runner.model", "search_hook.SearchHook.utils.dist_forward_collect", "search_hook.SearchHook.utils.nondist_forward_collect", "search_hook.SearchHook._evaluate", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "search_hook.SearchHook.utils.nondist_forward_collect.items", "str"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.contrastive_search_hook.update_bn_stats", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.dist_forward_collect", "home.repos.pwc.inspect_result.ernie1_pi-nas.utils.collect.nondist_forward_collect", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.search_hook.SearchHook._evaluate"], ["", "", "", "", "def", "_get_net_acc", "(", "self", ",", "runner", ",", "choice_indices", ")", ":", "\n", "        ", "if", "self", ".", "lookup", "is", "not", "None", ":", "\n", "            ", "choice_indices_text", "=", "''", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "choice_indices", "]", ")", "\n", "if", "choice_indices_text", "in", "self", ".", "lookup", ":", "\n", "                ", "return", "self", ".", "lookup", "[", "choice_indices_text", "]", "\n", "\n", "", "", "if", "self", ".", "eval_kwargs", "[", "'bn'", "]", "==", "'update'", ":", "\n", "            ", "frozen_stages", "=", "runner", ".", "model", ".", "module", ".", "backbone", ".", "frozen_stages", "\n", "runner", ".", "model", ".", "module", ".", "backbone", ".", "frozen_stages", "=", "-", "1", "\n", "update_bn_stats", "(", "self", ".", "train_data_loader", ",", "runner", ",", "choice_indices", ",", "num_iters", "=", "49", ")", "\n", "runner", ".", "model", ".", "module", ".", "backbone", ".", "frozen_stages", "=", "frozen_stages", "\n", "\n", "", "func", "=", "lambda", "**", "x", ":", "runner", ".", "model", "(", "mode", "=", "'test'", ",", "**", "x", ",", "choice_indices", "=", "choice_indices", ")", "\n", "if", "self", ".", "dist_mode", ":", "\n", "            ", "results", "=", "dist_forward_collect", "(", "\n", "func", ",", "self", ".", "val_data_loader", ",", "runner", ".", "rank", ",", "\n", "len", "(", "self", ".", "val_dataset", ")", ")", "# dict{key: np.ndarray}", "\n", "", "else", ":", "\n", "            ", "results", "=", "nondist_forward_collect", "(", "func", ",", "self", ".", "val_data_loader", ",", "\n", "len", "(", "self", ".", "val_dataset", ")", ")", "\n", "\n", "", "results", "=", "{", "name", ":", "self", ".", "_evaluate", "(", "runner", ",", "torch", ".", "from_numpy", "(", "val", ")", ",", "name", ")", "for", "name", ",", "val", "in", "results", ".", "items", "(", ")", "}", "\n", "return", "results", "[", "'head0'", "]", "[", "'head0_top1'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.search_hook.SearchHook._evaluate": [[113, 119], ["search_hook.SearchHook.val_dataset.evaluate"], "methods", ["home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.deepcluster_hook.DeepClusterHook.evaluate"], ["", "def", "_evaluate", "(", "self", ",", "runner", ",", "results", ",", "keyword", ")", ":", "\n", "        ", "eval_res", "=", "self", ".", "val_dataset", ".", "evaluate", "(", "\n", "results", ",", "\n", "keyword", "=", "keyword", ",", "\n", "**", "self", ".", "eval_kwargs", "[", "'eval_param'", "]", ")", "\n", "return", "eval_res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.contrastive_search_hook.get_bn_modules": [[27, 42], ["model.modules", "isinstance"], "function", ["None"], ["def", "get_bn_modules", "(", "model", ":", "torch", ".", "nn", ".", "Module", ")", "->", "List", "[", "torch", ".", "nn", ".", "Module", "]", ":", "\n", "    ", "\"\"\"\n    Find all BatchNorm (BN) modules that are in training mode. See\n    fvcore.precise_bn.BN_MODULE_TYPES for a list of all modules that are\n    included in this search.\n    Args:\n        model (nn.Module): a model possibly containing BN modules.\n    Returns:\n        list[nn.Module]: all BN modules in the model.\n    \"\"\"", "\n", "# Finds all the bn layers.", "\n", "bn_layers", "=", "[", "\n", "m", "for", "m", "in", "model", ".", "modules", "(", ")", "if", "m", ".", "training", "and", "isinstance", "(", "m", ",", "BN_MODULE_TYPES", ")", "\n", "]", "\n", "return", "bn_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.contrastive_search_hook.update_bn_stats": [[45, 98], ["runner.model.train", "contrastive_search_hook.get_bn_modules", "range", "enumerate", "runner.model.eval", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "mmcv.ProgressBar", "enumerate", "itertools.islice", "enumerate", "torch.no_grad", "torch.no_grad", "runner.model", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.ernie1_pi-nas.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.contrastive_search_hook.get_bn_modules", "home.repos.pwc.inspect_result.ernie1_pi-nas.memories.simple_memory.SimpleMemory.update"], ["", "def", "update_bn_stats", "(", "data_loader", ",", "runner", ",", "choice_indices", ",", "ema", "=", "False", ",", "num_iters", "=", "200", ",", "num_epochs", "=", "1", ")", ":", "\n", "    ", "runner", ".", "model", ".", "train", "(", ")", "\n", "\n", "bn_layers", "=", "get_bn_modules", "(", "runner", ".", "model", ")", "\n", "for", "m", "in", "bn_layers", ":", "\n", "        ", "m", ".", "track_running_stats", "=", "True", "\n", "\n", "", "if", "len", "(", "bn_layers", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "# In order to make the running stats only reflect the current batch, the", "\n", "# momentum is disabled.", "\n", "# bn.running_mean = (1 - momentum) * bn.running_mean + momentum * batch_mean", "\n", "# Setting the momentum to 1.0 to compute the stats without momentum.", "\n", "", "momentum_actual", "=", "[", "bn", ".", "momentum", "for", "bn", "in", "bn_layers", "]", "# pyre-ignore", "\n", "for", "bn", "in", "bn_layers", ":", "\n", "        ", "bn", ".", "momentum", "=", "1.0", "\n", "\n", "# Note that running_var actually means \"running average of variance\"", "\n", "", "running_mean", "=", "[", "\n", "torch", ".", "zeros_like", "(", "bn", ".", "running_mean", ")", "for", "bn", "in", "bn_layers", "# pyre-ignore", "\n", "]", "\n", "running_var", "=", "[", "torch", ".", "zeros_like", "(", "bn", ".", "running_var", ")", "for", "bn", "in", "bn_layers", "]", "# pyre-ignore", "\n", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "num_iters", "*", "num_epochs", ")", "\n", "", "idx", "=", "-", "1", "\n", "for", "e", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "for", "idx", ",", "data", "in", "enumerate", "(", "itertools", ".", "islice", "(", "data_loader", ",", "num_iters", ")", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "# No need to backward", "\n", "                ", "runner", ".", "model", "(", "data", "[", "'img'", "]", ",", "choice_indices", "=", "choice_indices", ",", "mode", "=", "'extract'", ",", "ema", "=", "ema", ")", "\n", "\n", "", "for", "i", ",", "bn", "in", "enumerate", "(", "bn_layers", ")", ":", "\n", "# Accumulates the bn stats.", "\n", "                ", "running_mean", "[", "i", "]", "+=", "(", "bn", ".", "running_mean", "-", "running_mean", "[", "i", "]", ")", "/", "(", "e", "*", "num_iters", "+", "idx", "+", "1", ")", "\n", "running_var", "[", "i", "]", "+=", "(", "bn", ".", "running_var", "-", "running_var", "[", "i", "]", ")", "/", "(", "e", "*", "num_iters", "+", "idx", "+", "1", ")", "\n", "# We compute the \"average of variance\" across iterations.", "\n", "\n", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "", "assert", "idx", "==", "num_iters", "-", "1", ",", "(", "\n", "\"update_bn_stats is meant to run for {} iterations, \"", "\n", "\"but the dataloader stops at {} iterations.\"", ".", "format", "(", "num_iters", ",", "idx", ")", "\n", ")", "\n", "\n", "for", "i", ",", "bn", "in", "enumerate", "(", "bn_layers", ")", ":", "\n", "# Sets the precise bn stats.", "\n", "        ", "bn", ".", "running_mean", "=", "running_mean", "[", "i", "]", "\n", "bn", ".", "running_var", "=", "running_var", "[", "i", "]", "\n", "bn", ".", "momentum", "=", "momentum_actual", "[", "i", "]", "\n", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.__init__": [[16, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "end_momentum", "=", "1.", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "end_momentum", "=", "end_momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.ernie1_pi-nas.hooks.byol_hook.BYOLHook.before_train_iter": [[19, 30], ["hasattr", "hasattr", "math.cos", "float"], "methods", ["None"], ["", "def", "before_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "assert", "hasattr", "(", "runner", ".", "model", ".", "module", ",", "'momentum'", ")", ",", "\"The runner must have attribute \\\"momentum\\\" in BYOLHook.\"", "\n", "assert", "hasattr", "(", "runner", ".", "model", ".", "module", ",", "'base_momentum'", ")", ",", "\"The runner must have attribute \\\"base_momentum\\\" in BYOLHook.\"", "\n", "cur_iter", "=", "runner", ".", "iter", "\n", "max_iter", "=", "runner", ".", "max_iters", "\n", "base_m", "=", "runner", ".", "model", ".", "module", ".", "base_momentum", "\n", "m", "=", "self", ".", "end_momentum", "-", "(", "self", ".", "end_momentum", "-", "base_m", ")", "*", "(", "\n", "cos", "(", "pi", "*", "cur_iter", "/", "float", "(", "max_iter", ")", ")", "+", "1", ")", "/", "2", "\n", "runner", ".", "model", ".", "module", ".", "momentum", "=", "m", "\n", "", "", ""]]}