{"home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.flags.flag_dict": [[58, 68], ["FLAGS", "FLAGS.get_key_flags_for_module", "sys.stdout.flush", "FLAGS.find_module_defining_flag", "print"], "function", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.flush"], ["def", "flag_dict", "(", ")", ":", "\n", "    ", "FLAGS", "(", "sys", ".", "argv", ")", "\n", "_flags", "=", "FLAGS", ".", "get_key_flags_for_module", "(", "\n", "FLAGS", ".", "find_module_defining_flag", "(", "\"gpu\"", ")", ")", "\n", "_flag_dict", "=", "{", "}", "\n", "for", "flag", "in", "_flags", ":", "\n", "        ", "print", "(", "f\"{flag.name}: {flag.value}\"", ")", "\n", "_flag_dict", "[", "flag", ".", "name", "]", "=", "flag", ".", "value", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "_flag_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.my_model.MyModel.__init__": [[20, 40], ["tensorflow.python.keras.models.Model.__init__", "layers.embedding.Embedding", "layers.embedding.Embedding", "transformer.transformer.Transformer"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "FLAGS", ",", "num_nodes", ")", ":", "\n", "        ", "super", "(", "MyModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding_layer_2nd", "=", "Embedding", "(", "num_nodes", ",", "FLAGS", ".", "output_size", ")", "\n", "self", ".", "embedding_layer_2nd_context", "=", "Embedding", "(", "num_nodes", ",", "FLAGS", ".", "output_size", ")", "\n", "\n", "transformer_hparams", "=", "{", "\n", "\"hidden_size\"", ":", "FLAGS", ".", "hidden_size", ",", "\n", "\"output_size\"", ":", "FLAGS", ".", "output_size", ",", "\n", "\"num_heads\"", ":", "FLAGS", ".", "num_heads", ",", "\n", "\"filter_size\"", ":", "FLAGS", ".", "filter_size", ",", "\n", "\"num_hidden_layers\"", ":", "FLAGS", ".", "num_hidden_layers", ",", "\n", "\"with_ffn\"", ":", "FLAGS", ".", "with_ffn", ",", "\n", "\"attention_dropout\"", ":", "FLAGS", ".", "dropout_rate", ",", "\n", "\"relu_dropout\"", ":", "FLAGS", ".", "dropout_rate", ",", "\n", "\"layer_postprocess_dropout\"", ":", "FLAGS", ".", "dropout_rate", ",", "\n", "\n", "}", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "transformer_hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.my_model.MyModel.call": [[41, 53], ["my_model.MyModel._struc_call", "my_model.MyModel._meta_call", "my_model.MyModel._struc_call", "my_model.MyModel._meta_call"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.my_model.MyModel._struc_call", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.my_model.MyModel._meta_call", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.my_model.MyModel._struc_call", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.my_model.MyModel._meta_call"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"struc\"", ":", "\n", "            ", "return", "self", ".", "_struc_call", "(", "inputs", ")", "\n", "", "elif", "mode", "==", "\"meta\"", ":", "\n", "            ", "return", "self", ".", "_meta_call", "(", "inputs", ",", "training", "=", "training", ")", "\n", "", "elif", "mode", "==", "\"all\"", ":", "\n", "            ", "struc_outputs", "=", "self", ".", "_struc_call", "(", "inputs", ")", "\n", "meta_outputs", "=", "self", ".", "_meta_call", "(", "inputs", ",", "training", "=", "training", ")", "\n", "outputs", "=", "{", "**", "struc_outputs", ",", "**", "meta_outputs", "}", "\n", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.my_model.MyModel._struc_call": [[54, 69], ["my_model.MyModel.embedding_layer_2nd", "my_model.MyModel.embedding_layer_2nd_context", "my_model.MyModel.embedding_layer_2nd_context"], "methods", ["None"], ["", "", "def", "_struc_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "unsup_inputs", "=", "inputs", "[", "\"unsup\"", "]", "\n", "nodes_u", "=", "unsup_inputs", "[", "\"nodes_u\"", "]", "\n", "nodes_v", "=", "unsup_inputs", "[", "\"nodes_v\"", "]", "\n", "nodes_neg", "=", "unsup_inputs", "[", "\"nodes_neg\"", "]", "\n", "\n", "embeddings_u_2nd", "=", "self", ".", "embedding_layer_2nd", "(", "nodes_u", ")", "\n", "embeddings_v_2nd", "=", "self", ".", "embedding_layer_2nd_context", "(", "nodes_v", ")", "\n", "embeddings_neg_2nd", "=", "self", ".", "embedding_layer_2nd_context", "(", "nodes_neg", ")", "\n", "return", "{", "\n", "\"unsup\"", ":", "{", "\n", "\"2nd\"", ":", "{", "\n", "\"nodes_u\"", ":", "embeddings_u_2nd", ",", "\n", "\"nodes_v\"", ":", "embeddings_v_2nd", ",", "\n", "\"nodes_neg\"", ":", "embeddings_neg_2nd", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.my_model.MyModel._meta_call": [[73, 122], ["tensorflow.dynamic_partition", "tensorflow.reshape", "tensorflow.reshape", "my_model.MyModel.embedding_layer_2nd", "my_model.MyModel.embedding_layer_2nd", "my_model.MyModel.embedding_layer_2nd", "tensorflow.tile", "tensorflow.tile", "tensorflow.concat", "tensorflow.concat", "my_model.MyModel.transformer", "my_model.MyModel.transformer", "tensorflow.split", "tensorflow.split", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.stack", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.shape", "tensorflow.square", "tensorflow.square", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "_meta_call", "(", "self", ",", "inputs", ",", "training", ")", ":", "\n", "        ", "meta_inputs", "=", "inputs", "[", "\"meta\"", "]", "\n", "train_nodes", "=", "meta_inputs", "[", "\"train_nodes\"", "]", "\n", "train_labels", "=", "meta_inputs", "[", "\"train_labels\"", "]", "\n", "neg_train_nodes", ",", "pos_train_nodes", "=", "tf", ".", "dynamic_partition", "(", "\n", "train_nodes", ",", "tf", ".", "cast", "(", "train_labels", ",", "tf", ".", "int32", ")", ",", "2", ")", "\n", "\n", "neg_train_nodes", "=", "tf", ".", "reshape", "(", "neg_train_nodes", ",", "\n", "(", "train_nodes", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "pos_train_nodes", "=", "tf", ".", "reshape", "(", "pos_train_nodes", ",", "\n", "(", "train_nodes", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "neg_train_embeddings", "=", "self", ".", "embedding_layer_2nd", "(", "neg_train_nodes", ")", "\n", "pos_train_embeddings", "=", "self", ".", "embedding_layer_2nd", "(", "pos_train_nodes", ")", "\n", "\n", "test_nodes", "=", "meta_inputs", "[", "\"test_nodes\"", "]", "\n", "test_embeddings", "=", "self", ".", "embedding_layer_2nd", "(", "test_nodes", ")", "\n", "\n", "neg_train_embeddings_for_att", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "neg_train_embeddings", ",", "axis", "=", "1", ")", ",", "multiples", "=", "[", "1", ",", "tf", ".", "shape", "(", "test_embeddings", ")", "[", "1", "]", ",", "1", ",", "1", "]", ")", "\n", "pos_train_embeddings_for_att", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "pos_train_embeddings", ",", "axis", "=", "1", ")", ",", "multiples", "=", "[", "1", ",", "tf", ".", "shape", "(", "test_embeddings", ")", "[", "1", "]", ",", "1", ",", "1", "]", ")", "\n", "\n", "transformer_input_for_neg", "=", "tf", ".", "concat", "(", "[", "neg_train_embeddings_for_att", ",", "tf", ".", "expand_dims", "(", "test_embeddings", ",", "axis", "=", "2", ")", "]", ",", "axis", "=", "2", ")", "\n", "transformer_input_for_pos", "=", "tf", ".", "concat", "(", "[", "pos_train_embeddings_for_att", ",", "tf", ".", "expand_dims", "(", "test_embeddings", ",", "axis", "=", "2", ")", "]", ",", "axis", "=", "2", ")", "\n", "\n", "transformer_output_for_neg", "=", "self", ".", "transformer", "(", "transformer_input_for_neg", ",", "training", "=", "training", ")", "\n", "transformer_output_for_pos", "=", "self", ".", "transformer", "(", "transformer_input_for_pos", ",", "training", "=", "training", ")", "\n", "\n", "adapted_neg_train_embeddings", ",", "test_embeddings_for_neg", "=", "tf", ".", "split", "(", "\n", "transformer_output_for_neg", ",", "[", "tf", ".", "shape", "(", "neg_train_nodes", ")", "[", "1", "]", ",", "1", "]", ",", "axis", "=", "2", ")", "\n", "adapted_pos_train_embeddings", ",", "test_embeddings_for_pos", "=", "tf", ".", "split", "(", "\n", "transformer_output_for_pos", ",", "[", "tf", ".", "shape", "(", "pos_train_nodes", ")", "[", "1", "]", ",", "1", "]", ",", "axis", "=", "2", ")", "\n", "\n", "neg_proto", "=", "tf", ".", "reduce_mean", "(", "adapted_neg_train_embeddings", ",", "axis", "=", "2", ")", "\n", "pos_proto", "=", "tf", ".", "reduce_mean", "(", "adapted_pos_train_embeddings", ",", "axis", "=", "2", ")", "\n", "test_embeddings_for_neg", "=", "tf", ".", "squeeze", "(", "test_embeddings_for_neg", ",", "axis", "=", "2", ")", "\n", "test_embeddings_for_pos", "=", "tf", ".", "squeeze", "(", "test_embeddings_for_pos", ",", "axis", "=", "2", ")", "\n", "\n", "depth", "=", "self", ".", "transformer", ".", "hparams", "[", "\"output_size\"", "]", "\n", "distance_neg", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "test_embeddings_for_neg", "-", "neg_proto", ")", ",", "axis", "=", "2", ")", "/", "(", "depth", "**", "0.5", ")", "\n", "distance_pos", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "test_embeddings_for_pos", "-", "pos_proto", ")", ",", "axis", "=", "2", ")", "/", "(", "depth", "**", "0.5", ")", "\n", "\n", "distance", "=", "tf", ".", "stack", "(", "[", "distance_neg", ",", "distance_pos", "]", ",", "axis", "=", "2", ")", "\n", "\n", "outputs", "=", "{", "\n", "\"meta\"", ":", "{", "\n", "\"logits\"", ":", "distance", "\n", "}", "\n", "}", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject.__init__": [[17, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "FLAGS", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "weight_decay", "=", "FLAGS", ".", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject.calculate_loss": [[21, 40], ["tensorflow.name_scope", "loss_object.LossObject._calculate_unsup_loss", "tensorflow.name_scope", "loss_object.LossObject._calculate_meta_loss", "loss_object.LossObject._calculate_reg_loss"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject._calculate_unsup_loss", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject._calculate_meta_loss", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject._calculate_reg_loss"], ["", "def", "calculate_loss", "(", "self", ",", "outputs", ",", "inputs", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"struc\"", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"struc_loss\"", ")", ":", "\n", "                ", "unsup_loss", ",", "unsup_info", "=", "self", ".", "_calculate_unsup_loss", "(", "\n", "outputs", "[", "\"unsup\"", "]", ",", "inputs", "[", "\"unsup\"", "]", ")", "\n", "loss", "=", "unsup_loss", "\n", "info", "=", "unsup_info", "\n", "\n", "", "", "elif", "mode", "==", "\"meta\"", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"meta_loss\"", ")", ":", "\n", "                ", "meta_loss", ",", "meta_info", "=", "self", ".", "_calculate_meta_loss", "(", "\n", "outputs", "[", "\"meta\"", "]", ",", "inputs", "[", "\"meta\"", "]", ")", "\n", "reg_loss", "=", "self", ".", "_calculate_reg_loss", "(", ")", "\n", "loss", "=", "meta_loss", "+", "self", ".", "weight_decay", "*", "reg_loss", "\n", "info", "=", "{", "\"meta\"", ":", "meta_info", "[", "\"meta\"", "]", ",", "\"reg\"", ":", "reg_loss", "}", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "return", "loss", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject._calculate_meta_loss": [[41, 50], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "_calculate_meta_loss", "(", "self", ",", "outputs", ",", "inputs", ")", ":", "\n", "        ", "logits", "=", "outputs", "[", "\"logits\"", "]", "\n", "labels", "=", "inputs", "[", "\"test_labels\"", "]", "\n", "\n", "losses", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "labels", ",", "logits", "=", "logits", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "info", "=", "{", "\"meta\"", ":", "{", "}", "}", "\n", "return", "loss", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject._calculate_reg_loss": [[51, 63], ["re.search", "tensorflow.math.add_n", "tensorflow.constant", "loss_object.LossObject.reg_names.append", "reg_losses.append", "tensorflow.nn.l2_loss", "var.name.find"], "methods", ["None"], ["", "def", "_calculate_reg_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "reg_names", "=", "[", "]", "\n", "reg_losses", "=", "[", "]", "\n", "for", "var", "in", "self", ".", "model", ".", "trainable_variables", ":", "\n", "            ", "if", "re", ".", "search", "(", "\"kernel\"", ",", "var", ".", "name", ")", ":", "\n", "                ", "self", ".", "reg_names", ".", "append", "(", "var", ".", "name", "[", ":", "var", ".", "name", ".", "find", "(", "\":\"", ")", "]", ")", "\n", "reg_losses", ".", "append", "(", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", ")", "\n", "", "", "if", "reg_losses", ":", "\n", "            ", "reg_loss", "=", "tf", ".", "math", ".", "add_n", "(", "reg_losses", ")", "\n", "", "else", ":", "\n", "            ", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "return", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject._calculate_unsup_loss": [[64, 82], ["loss_object.LossObject._calculate_unsup_loss._calculate_loss"], "methods", ["None"], ["", "def", "_calculate_unsup_loss", "(", "self", ",", "outputs", ",", "inputs", ")", ":", "\n", "\n", "        ", "def", "_calculate_loss", "(", "embed_u", ",", "embed_v", ",", "embed_neg", ")", ":", "\n", "            ", "positive_losses", "=", "tf", ".", "math", ".", "log_sigmoid", "(", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "embed_u", ",", "embed_v", ")", ",", "axis", "=", "1", ")", ")", "\n", "positive_loss", "=", "-", "tf", ".", "reduce_mean", "(", "positive_losses", ")", "\n", "negative_losses", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "math", ".", "log_sigmoid", "(", "\n", "-", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "tf", ".", "expand_dims", "(", "embed_u", ",", "1", ")", ",", "\n", "embed_neg", ")", ",", "\n", "axis", "=", "-", "1", ")", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "negative_loss", "=", "-", "tf", ".", "reduce_mean", "(", "negative_losses", ")", "\n", "return", "positive_loss", "+", "negative_loss", "\n", "\n", "", "loss_2nd", "=", "_calculate_loss", "(", "outputs", "[", "\"2nd\"", "]", "[", "\"nodes_u\"", "]", ",", "outputs", "[", "\"2nd\"", "]", "[", "\"nodes_v\"", "]", ",", "outputs", "[", "\"2nd\"", "]", "[", "\"nodes_neg\"", "]", ")", "\n", "return", "loss_2nd", ",", "{", "\"struc\"", ":", "{", "\"2nd\"", ":", "loss_2nd", "}", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer._setup_tf_resource": [[25, 35], ["tensorflow.config.experimental.list_physical_devices", "ray.is_initialized", "tensorflow.config.experimental.set_visible_devices", "tensorflow.config.experimental.set_memory_growth", "tensorflow.config.threading.set_intra_op_parallelism_threads", "tensorflow.config.threading.set_inter_op_parallelism_threads"], "methods", ["None"], ["    ", "def", "_setup_tf_resource", "(", "self", ",", "gpu_id", ")", ":", "\n", "        ", "gpus", "=", "tf", ".", "config", ".", "experimental", ".", "list_physical_devices", "(", "\"GPU\"", ")", "\n", "if", "ray", ".", "is_initialized", "(", ")", ":", "\n", "            ", "gpu_id", "=", "0", "# ray automatically set CUDA_VISIBLE_DEVICES for remote process", "\n", "", "else", ":", "\n", "            ", "gpu_id", "=", "gpu_id", "# local run", "\n", "", "tf", ".", "config", ".", "experimental", ".", "set_visible_devices", "(", "gpus", "[", "gpu_id", "]", ",", "\"GPU\"", ")", "\n", "tf", ".", "config", ".", "experimental", ".", "set_memory_growth", "(", "gpus", "[", "gpu_id", "]", ",", "True", ")", "\n", "tf", ".", "config", ".", "threading", ".", "set_intra_op_parallelism_threads", "(", "2", ")", "\n", "tf", ".", "config", ".", "threading", ".", "set_inter_op_parallelism_threads", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer._setup": [[36, 60], ["utils.DotDict", "trainer.Trainer._setup_tf_resource", "tensorflow.random.set_seed", "numpy.random.RandomState", "data_generator.DataGenerator", "my_model.MyModel", "loss_object.LossObject", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam", "tensorflow.function", "tensorflow.function", "tensorflow.function"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer._setup_tf_resource"], ["", "def", "_setup", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "FLAGS", "=", "FLAGS", "=", "DotDict", "(", "config", ")", "\n", "self", ".", "_setup_tf_resource", "(", "FLAGS", ".", "gpu", ")", "\n", "\n", "tf", ".", "random", ".", "set_seed", "(", "FLAGS", ".", "seed", ")", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "FLAGS", ".", "seed", ")", "\n", "\n", "self", ".", "data_generator", "=", "DataGenerator", "(", "FLAGS", "=", "FLAGS", ")", "\n", "\n", "self", ".", "model", "=", "model", "=", "MyModel", "(", "FLAGS", "=", "FLAGS", ",", "num_nodes", "=", "self", ".", "data_generator", ".", "num_nodes", ")", "\n", "\n", "self", ".", "loss_object", "=", "LossObject", "(", "model", "=", "model", ",", "FLAGS", "=", "FLAGS", ")", "\n", "\n", "learning_rate_struc", "=", "FLAGS", ".", "learning_rate_struc", "\n", "learning_rate_meta", "=", "FLAGS", ".", "learning_rate_meta", "\n", "self", ".", "optimizer_struc", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "learning_rate", "=", "learning_rate_struc", ")", "\n", "self", ".", "optimizer_meta", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "learning_rate", "=", "learning_rate_meta", ")", "\n", "\n", "if", "FLAGS", ".", "autograph", ":", "\n", "            ", "self", ".", "train_one_step_struc", "=", "tf", ".", "function", "(", "self", ".", "train_one_step_struc", ")", "\n", "self", ".", "train_one_step_meta", "=", "tf", ".", "function", "(", "self", ".", "train_one_step_meta", ")", "\n", "self", ".", "ag_model", "=", "tf", ".", "function", "(", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ag_model", "=", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer._train": [[61, 136], ["range", "tensorflow.python.util.nest.map_structure", "utils.calculate_metrics", "trainer.Trainer._test", "trainer.Trainer._test", "hasattr", "trainer.Trainer.rng.rand", "trainer.Trainer.data_generator.get_unsup_data", "trainer.Trainer.train_one_step_struc", "outputs.update", "trainer.Trainer.data_generator.get_data", "trainer.Trainer.train_one_step_meta", "outputs.update", "[].numpy", "[].numpy", "float", "callable", "trainer.Trainer.optimizer_struc.lr().numpy", "trainer.Trainer.optimizer_struc.lr.numpy", "callable", "trainer.Trainer.optimizer_meta.lr().numpy", "trainer.Trainer.optimizer_meta.lr.numpy", "numpy.floor", "trainer.Trainer.optimizer_struc.lr", "trainer.Trainer.optimizer_meta.lr"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.calculate_metrics", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer._test", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer._test", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.get_unsup_data", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer.train_one_step_struc", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.get_data", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer.train_one_step_meta"], ["", "", "def", "_train", "(", "self", ")", ":", "\n", "        ", "FLAGS", "=", "self", ".", "FLAGS", "\n", "for", "_", "in", "range", "(", "FLAGS", ".", "valid_step_period", ")", ":", "\n", "            ", "threshold", "=", "(", "1.0", "-", "1.0", "/", "(", "1.0", "+", "self", ".", "FLAGS", ".", "decay_rate", "*", "np", ".", "floor", "(", "self", ".", "step", "/", "self", ".", "FLAGS", ".", "decay_steps", ")", ")", ")", "\n", "loss_and_info", "=", "{", "\n", "\"loss\"", ":", "{", "}", ",", "\n", "\"info\"", ":", "{", "\"threshold\"", ":", "threshold", "}", ",", "\n", "\"metrics\"", ":", "{", "}", ",", "\n", "\"csv_fieldnames\"", ":", "self", ".", "csv_fieldnames", "\n", "}", "\n", "outputs", "=", "{", "}", "\n", "if", "self", ".", "rng", ".", "rand", "(", ")", ">", "threshold", ":", "\n", "                ", "inputs", "=", "self", ".", "data_generator", ".", "get_unsup_data", "(", ")", "\n", "struc_loss_and_info", ",", "struc_outputs", "=", "self", ".", "train_one_step_struc", "(", "inputs", ")", "\n", "outputs", ".", "update", "(", "struc_outputs", ")", "\n", "loss_and_info", "[", "\"loss\"", "]", "[", "\"struc\"", "]", "=", "struc_loss_and_info", "[", "\"loss\"", "]", "\n", "loss_and_info", "[", "\"info\"", "]", "[", "\"struc\"", "]", "=", "struc_loss_and_info", "[", "\"info\"", "]", "\n", "loss_and_info", "[", "\"info\"", "]", "[", "\"struc_lr\"", "]", "=", "(", "\n", "self", ".", "optimizer_struc", ".", "lr", "(", "self", ".", "optimizer_struc", ".", "iterations", "-", "1", ")", ".", "numpy", "(", ")", "\n", "if", "callable", "(", "self", ".", "optimizer_struc", ".", "lr", ")", "else", "self", ".", "optimizer_struc", ".", "lr", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "inputs", "=", "self", ".", "data_generator", ".", "get_data", "(", ")", "\n", "meta_loss_and_info", ",", "meta_outputs", "=", "self", ".", "train_one_step_meta", "(", "inputs", ")", "\n", "outputs", ".", "update", "(", "meta_outputs", ")", "\n", "loss_and_info", "[", "\"loss\"", "]", "[", "\"meta\"", "]", "=", "meta_loss_and_info", "[", "\"loss\"", "]", "\n", "loss_and_info", "[", "\"info\"", "]", "[", "\"meta\"", "]", "=", "meta_loss_and_info", "[", "\"info\"", "]", "\n", "loss_and_info", "[", "\"info\"", "]", "[", "\"meta_lr\"", "]", "=", "(", "\n", "self", ".", "optimizer_meta", ".", "lr", "(", "self", ".", "optimizer_meta", ".", "iterations", "-", "1", ")", ".", "numpy", "(", ")", "\n", "if", "callable", "(", "self", ".", "optimizer_meta", ".", "lr", ")", "else", "self", ".", "optimizer_meta", ".", "lr", ".", "numpy", "(", ")", ")", "\n", "\n", "", "self", ".", "_iteration", "+=", "1", "\n", "self", ".", "_iterations_since_restore", "+=", "1", "\n", "\n", "", "self", ".", "_iteration", "-=", "1", "\n", "self", ".", "_iterations_since_restore", "-=", "1", "\n", "\n", "if", "\"meta\"", "in", "outputs", ":", "\n", "            ", "metrics", "=", "calculate_metrics", "(", "inputs", "[", "\"meta\"", "]", "[", "\"test_labels\"", "]", ".", "numpy", "(", ")", ",", "\n", "outputs", "[", "\"meta\"", "]", "[", "\"logits\"", "]", ".", "numpy", "(", ")", ")", "\n", "loss_and_info", "[", "\"metrics\"", "]", "[", "\"metatrain\"", "]", "=", "metrics", "\n", "", "if", "(", "self", ".", "step", "+", "1", ")", "%", "FLAGS", ".", "valid_step_period", "==", "0", ":", "\n", "            ", "valid_metrics", "=", "self", ".", "_test", "(", "\"valid\"", ")", "\n", "test_metrics", "=", "self", ".", "_test", "(", "\"test\"", ")", "\n", "loss_and_info", "[", "\"metrics\"", "]", "[", "\"metaval\"", "]", "=", "valid_metrics", "\n", "loss_and_info", "[", "\"metrics\"", "]", "[", "\"metatest\"", "]", "=", "test_metrics", "\n", "\n", "", "def", "_func", "(", "x", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "y", "=", "float", "(", "x", ")", "\n", "", "except", "(", "TypeError", ",", "ValueError", ")", ":", "\n", "                ", "y", "=", "x", "\n", "", "return", "y", "\n", "", "result", "=", "nest", ".", "map_structure", "(", "_func", ",", "loss_and_info", ")", "\n", "ahb_metric", "=", "(", "\n", "loss_and_info", "[", "\"metrics\"", "]", "[", "\"metaval\"", "]", "[", "\"roc_auc\"", "]", "+", "\n", "loss_and_info", "[", "\"metrics\"", "]", "[", "\"metaval\"", "]", "[", "\"f1\"", "]", ")", "\n", "\n", "if", "not", "hasattr", "(", "self", ",", "\"_best_ahb_metric\"", ")", ":", "\n", "            ", "self", ".", "_best_ahb_metric", "=", "ahb_metric", "\n", "self", ".", "_metric_after_best", "=", "0.0", "\n", "self", ".", "_step_after_best", "=", "0", "\n", "", "if", "ahb_metric", ">", "self", ".", "_best_ahb_metric", ":", "\n", "            ", "self", ".", "_best_ahb_metric", "=", "ahb_metric", "\n", "self", ".", "_metric_after_best", "=", "0.0", "\n", "self", ".", "_step_after_best", "=", "0", "\n", "deviation_after_best", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "_metric_after_best", "+=", "ahb_metric", "\n", "self", ".", "_step_after_best", "+=", "1", "\n", "deviation_after_best", "=", "self", ".", "_best_ahb_metric", "-", "self", ".", "_metric_after_best", "/", "self", ".", "_step_after_best", "\n", "\n", "", "result", "[", "\"best_ahb_metric\"", "]", "=", "self", ".", "_best_ahb_metric", "\n", "result", "[", "\"deviation_after_best\"", "]", "=", "deviation_after_best", "\n", "result", "[", "\"hpo_metric\"", "]", "=", "self", ".", "_best_ahb_metric", "-", "deviation_after_best", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer._test": [[137, 159], ["trainer.Trainer.data_generator.get_data", "tensorflow.python.util.nest.flatten", "range", "list", "tensorflow.python.util.nest.pack_sequence_as", "utils.calculate_metrics", "tensorflow.python.util.nest.pack_sequence_as", "trainer.Trainer.ag_model", "tensorflow.python.util.nest.flatten", "all_this_flat_outputs.append", "zip", "tensorflow.concat", "[].numpy", "[].numpy"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.get_data", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.calculate_metrics"], ["", "def", "_test", "(", "self", ",", "mode", ",", "test_num_pos", "=", "None", ",", "test_num_neg", "=", "None", ")", ":", "\n", "        ", "FLAGS", "=", "self", ".", "FLAGS", "\n", "num_tasks", "=", "1000", "\n", "inputs", "=", "self", ".", "data_generator", ".", "get_data", "(", "mode", ",", "num_tasks", ")", "\n", "\n", "flat_inputs", "=", "nest", ".", "flatten", "(", "inputs", ")", "\n", "all_this_flat_outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_tasks", ",", "FLAGS", ".", "meta_batch_size", ")", ":", "\n", "# print(i, i+FLAGS.meta_batch_size)", "\n", "            ", "this_flat_inputs", "=", "[", "x", "[", "i", ":", "i", "+", "FLAGS", ".", "meta_batch_size", "]", "for", "x", "in", "flat_inputs", "]", "\n", "this_inputs", "=", "nest", ".", "pack_sequence_as", "(", "inputs", ",", "this_flat_inputs", ")", "\n", "this_outputs", "=", "self", ".", "ag_model", "(", "this_inputs", ",", "training", "=", "False", ",", "mode", "=", "\"meta\"", ")", "\n", "this_flat_outputs", "=", "nest", ".", "flatten", "(", "this_outputs", ")", "\n", "all_this_flat_outputs", ".", "append", "(", "this_flat_outputs", ")", "\n", "", "all_flat_outputs", "=", "list", "(", "zip", "(", "*", "all_this_flat_outputs", ")", ")", "\n", "flat_outputs", "=", "[", "tf", ".", "concat", "(", "x", ",", "axis", "=", "0", ")", "for", "x", "in", "all_flat_outputs", "]", "\n", "outputs", "=", "nest", ".", "pack_sequence_as", "(", "this_outputs", ",", "flat_outputs", ")", "\n", "\n", "metrics", "=", "calculate_metrics", "(", "\n", "inputs", "[", "\"meta\"", "]", "[", "\"test_labels\"", "]", ".", "numpy", "(", ")", ",", "\n", "outputs", "[", "\"meta\"", "]", "[", "\"logits\"", "]", ".", "numpy", "(", ")", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer.train_one_step_struc": [[160, 178], ["tensorflow.name_scope", "tensorflow.GradientTape", "trainer.Trainer.model", "trainer.Trainer.loss_object.calculate_loss", "tensorflow.name_scope", "tape.gradient", "tensorflow.name_scope", "trainer.Trainer.optimizer_struc.apply_gradients", "zip"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject.calculate_loss"], ["", "def", "train_one_step_struc", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"struc\"", ")", ":", "\n", "            ", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "                ", "outputs", "=", "self", ".", "model", "(", "inputs", ",", "training", "=", "True", ",", "mode", "=", "\"struc\"", ")", "\n", "loss", ",", "info", "=", "self", ".", "loss_object", ".", "calculate_loss", "(", "outputs", ",", "inputs", ",", "mode", "=", "\"struc\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"compute_grads\"", ")", ":", "\n", "                ", "weights_for_grad", "=", "[", "w", "for", "w", "in", "self", ".", "model", ".", "trainable_weights", "if", "\"embedding\"", "in", "w", ".", "name", "]", "\n", "gradients", "=", "tape", ".", "gradient", "(", "loss", ",", "weights_for_grad", ")", "\n", "grads_and_vars", "=", "[", "(", "grad", ",", "var", ")", "for", "grad", ",", "var", "\n", "in", "zip", "(", "gradients", ",", "weights_for_grad", ")", "\n", "if", "grad", "is", "not", "None", "]", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"apply_grads\"", ")", ":", "\n", "                ", "self", ".", "optimizer_struc", ".", "apply_gradients", "(", "grads_and_vars", ")", "\n", "\n", "", "", "ret", "=", "{", "\"loss\"", ":", "loss", ",", "\"info\"", ":", "info", "}", ",", "outputs", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer.train_one_step_meta": [[179, 197], ["tensorflow.name_scope", "tensorflow.GradientTape", "trainer.Trainer.model", "trainer.Trainer.loss_object.calculate_loss", "tensorflow.name_scope", "tape.gradient", "tensorflow.name_scope", "trainer.Trainer.optimizer_meta.apply_gradients", "zip"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.loss_object.LossObject.calculate_loss"], ["", "def", "train_one_step_meta", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"meta\"", ")", ":", "\n", "            ", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "                ", "outputs", "=", "self", ".", "model", "(", "inputs", ",", "training", "=", "True", ",", "mode", "=", "\"meta\"", ")", "\n", "loss", ",", "info", "=", "self", ".", "loss_object", ".", "calculate_loss", "(", "outputs", ",", "inputs", ",", "mode", "=", "\"meta\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"compute_grads\"", ")", ":", "\n", "                ", "weights_for_grad", "=", "[", "w", "for", "w", "in", "self", ".", "model", ".", "trainable_weights", "]", "\n", "gradients", "=", "tape", ".", "gradient", "(", "loss", ",", "weights_for_grad", ")", "\n", "grads_and_vars", "=", "[", "(", "grad", ",", "var", ")", "for", "grad", ",", "var", "\n", "in", "zip", "(", "gradients", ",", "weights_for_grad", ")", "\n", "if", "grad", "is", "not", "None", "]", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"apply_grads\"", ")", ":", "\n", "                ", "self", ".", "optimizer_meta", ".", "apply_gradients", "(", "grads_and_vars", ")", "\n", "\n", "", "", "ret", "=", "{", "\"loss\"", ":", "loss", ",", "\"info\"", ":", "info", "}", ",", "outputs", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer.step": [[198, 201], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.trainer.Trainer.csv_fieldnames": [[202, 221], ["hasattr", "list", "utils.flatten_dict"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.flatten_dict"], ["", "@", "property", "\n", "def", "csv_fieldnames", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_csv_fieldnames\"", ")", ":", "\n", "            ", "return", "self", ".", "_csv_fieldnames", "\n", "", "result_structure", "=", "{", "\n", "\"metrics\"", ":", "{", "\n", "\"metatrain\"", ":", "{", "\"roc_auc\"", ":", "None", ",", "\"precision\"", ":", "None", ",", "\n", "\"recall\"", ":", "None", ",", "\"f1\"", ":", "None", "}", ",", "\n", "\"metaval\"", ":", "{", "\"roc_auc\"", ":", "None", ",", "\"precision\"", ":", "None", ",", "\n", "\"recall\"", ":", "None", ",", "\"f1\"", ":", "None", "}", ",", "\n", "\"metatest\"", ":", "{", "\"roc_auc\"", ":", "None", ",", "\"precision\"", ":", "None", ",", "\n", "\"recall\"", ":", "None", ",", "\"f1\"", ":", "None", "}", "\n", "}", ",", "\n", "\"deviation_after_best\"", ":", "None", ",", "\n", "\"training_iteration\"", ":", "None", "\n", "}", "\n", "fieldnames", "=", "list", "(", "flatten_dict", "(", "result_structure", ")", ")", "\n", "self", ".", "_csv_fieldnames", "=", "fieldnames", "\n", "return", "self", ".", "_csv_fieldnames", "\n", "", "", ""]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger._init": [[50, 57], ["ray_logger.TF2Logger.update_config", "distutils.version.LooseVersion", "distutils.version.LooseVersion"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.update_config"], ["    ", "def", "_init", "(", "self", ")", ":", "\n", "        ", "use_tf2_api", "=", "distutils", ".", "version", ".", "LooseVersion", "(", "tf", ".", "version", ".", "VERSION", ")", ">=", "distutils", ".", "version", ".", "LooseVersion", "(", "\"2.0\"", ")", "\n", "if", "not", "use_tf2_api", ":", "\n", "            ", "raise", "ImportError", "\n", "", "self", ".", "update_config", "(", "self", ".", "config", ")", "\n", "self", ".", "_file_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.on_result": [[58, 78], ["result.copy", "list", "ray_logger.to_tf_values", "tensorflow.summary.create_file_writer", "result.copy.keys", "result.get", "tensorflow.device", "ray_logger.TF2Logger._file_writer.as_default", "ray_logger.TF2Logger._file_writer.flush", "tensorflow.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.to_tf_values", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.flush"], ["", "def", "on_result", "(", "self", ",", "result", ")", ":", "\n", "        ", "if", "self", ".", "_file_writer", "is", "None", ":", "\n", "            ", "self", ".", "_file_writer", "=", "tf", ".", "summary", ".", "create_file_writer", "(", "self", ".", "logdir", ")", "\n", "", "tmp", "=", "result", ".", "copy", "(", ")", "\n", "for", "k", "in", "[", "\n", "\"config\"", ",", "\"pid\"", ",", "\"timestamp\"", ",", "TIME_TOTAL_S", ",", "TRAINING_ITERATION", "\n", "]", ":", "\n", "            ", "if", "k", "in", "tmp", ":", "\n", "                ", "del", "tmp", "[", "k", "]", "\n", "", "", "for", "k", "in", "list", "(", "tmp", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "\"since\"", "in", "k", ":", "\n", "                ", "del", "tmp", "[", "k", "]", "\n", "# values = to_tf_values(tmp, [\"ray\", \"tune\"])", "\n", "", "", "values", "=", "to_tf_values", "(", "tmp", ",", "[", "]", ")", "\n", "t", "=", "result", ".", "get", "(", "TIMESTEPS_TOTAL", ")", "or", "result", "[", "TRAINING_ITERATION", "]", "\n", "with", "tf", ".", "device", "(", "\"/device:CPU:0\"", ")", ":", "\n", "            ", "with", "self", ".", "_file_writer", ".", "as_default", "(", ")", ":", "\n", "                ", "for", "attr", ",", "value", "in", "values", ":", "\n", "                    ", "tf", ".", "summary", ".", "scalar", "(", "attr", ",", "value", ",", "step", "=", "t", ")", "\n", "", "self", ".", "_file_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.flush": [[79, 82], ["ray_logger.TF2Logger._file_writer.flush"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.flush"], ["", "", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_file_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "_file_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.close": [[83, 86], ["ray_logger.TF2Logger._file_writer.close"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_file_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "_file_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.update_config": [[87, 100], ["os.path.join", "os.path.join", "open", "json.dump", "open", "ray.dump"], "methods", ["None"], ["", "", "def", "update_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "config_out", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logdir", ",", "\"params.json\"", ")", "\n", "with", "open", "(", "config_out", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "\n", "self", ".", "config", ",", "\n", "f", ",", "\n", "indent", "=", "2", ",", "\n", "sort_keys", "=", "True", ",", "\n", "cls", "=", "tune_logger", ".", "_SafeFallbackEncoder", ")", "\n", "", "config_pkl", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logdir", ",", "\"params.pkl\"", ")", "\n", "with", "open", "(", "config_pkl", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "cloudpickle", ".", "dump", "(", "self", ".", "config", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.CSVLogger.on_result": [[103, 121], ["ray.tune.utils.flatten_dict.copy", "ray.tune.utils.flatten_dict", "ray_logger.CSVLogger._csv_out.writerow", "ray_logger.CSVLogger._file.flush", "ray.tune.utils.flatten_dict.copy.pop", "csv.DictWriter", "ray_logger.CSVLogger._csv_out.writeheader", "ray.tune.utils.flatten_dict.keys", "ray.tune.utils.flatten_dict.items"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.flatten_dict", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.TF2Logger.flush"], ["    ", "def", "on_result", "(", "self", ",", "result", ")", ":", "\n", "        ", "tmp", "=", "result", ".", "copy", "(", ")", "\n", "if", "\"config\"", "in", "tmp", ":", "\n", "            ", "del", "tmp", "[", "\"config\"", "]", "\n", "", "if", "\"csv_fieldnames\"", "in", "tmp", ":", "\n", "            ", "csv_fieldnames", "=", "tmp", ".", "pop", "(", "\"csv_fieldnames\"", ")", "\n", "", "else", ":", "\n", "            ", "csv_fieldnames", "=", "None", "\n", "", "result", "=", "flatten_dict", "(", "tmp", ",", "delimiter", "=", "\"/\"", ")", "\n", "if", "self", ".", "_csv_out", "is", "None", ":", "\n", "            ", "self", ".", "_csv_out", "=", "csv", ".", "DictWriter", "(", "self", ".", "_file", ",", "\n", "csv_fieldnames", "or", "result", ".", "keys", "(", ")", ")", "\n", "if", "not", "self", ".", "_continuing", ":", "\n", "                ", "self", ".", "_csv_out", ".", "writeheader", "(", ")", "\n", "", "", "self", ".", "_csv_out", ".", "writerow", "(", "\n", "{", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "result", ".", "items", "(", ")", "if", "k", "in", "self", ".", "_csv_out", ".", "fieldnames", "}", ")", "\n", "self", ".", "_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.to_tf_values": [[26, 37], ["result.items", "type", "values.append", "type", "values.extend", "ray_logger.to_tf_values"], "function", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.to_tf_values"], ["def", "to_tf_values", "(", "result", ",", "path", ")", ":", "\n", "    ", "values", "=", "[", "]", "\n", "type_list", "=", "[", "int", ",", "float", ",", "np", ".", "float32", ",", "np", ".", "float64", ",", "np", ".", "int32", ",", "np", ".", "int64", "]", "\n", "for", "attr", ",", "value", "in", "result", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "value", ")", "in", "type_list", ":", "\n", "                ", "values", ".", "append", "(", "(", "\n", "\"/\"", ".", "join", "(", "path", "+", "[", "attr", "]", ")", ",", "value", ")", ")", "\n", "", "elif", "type", "(", "value", ")", "is", "dict", ":", "\n", "                ", "values", ".", "extend", "(", "to_tf_values", "(", "value", ",", "path", "+", "[", "attr", "]", ")", ")", "\n", "", "", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.ray_logger.tf2_logger_creator_factory": [[39, 47], ["ray.tune.trial.Trial.create_logdir", "ray.tune.logger.UnifiedLogger"], "function", ["None"], ["", "def", "tf2_logger_creator_factory", "(", "identifier", ",", "local_dir", "=", "None", ")", ":", "\n", "    ", "local_dir", "=", "local_dir", "or", "DEFAULT_RESULTS_DIR", "\n", "def", "tf2_logger_creator", "(", "config", ")", ":", "\n", "        ", "logdir", "=", "Trial", ".", "create_logdir", "(", "identifier", ",", "local_dir", ")", "\n", "logger", "=", "tune_logger", ".", "UnifiedLogger", "(", "config", ",", "logdir", ",", "loggers", "=", "LOGGERS", ")", "\n", "# logger = TF2Logger(config, logdir)", "\n", "return", "logger", "\n", "", "return", "tf2_logger_creator", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.__init__": [[22, 44], ["numpy.random.RandomState", "numpy.random.RandomState", "os.join", "data_generator.DataGenerator._load_basic_data", "data_generator.DataGenerator._split_data", "os.dirname", "data_generator.DataGenerator._load_context_pairs", "data_generator.DataGenerator._load_sampling_table", "data_generator.DataGenerator._build_tf_dataset", "os.abspath"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._load_basic_data", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._split_data", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._load_context_pairs", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._load_sampling_table", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._build_tf_dataset"], ["    ", "def", "__init__", "(", "self", ",", "FLAGS", ",", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "seed", "=", "FLAGS", ".", "seed", "\n", "self", ".", "rng_basic", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "self", ".", "rng_tasks", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "self", ".", "dataset", "=", "FLAGS", ".", "dataset_str", "\n", "self", ".", "dataset_path", "=", "osp", ".", "join", "(", "\n", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "__file__", ")", ")", ",", "\"datasets\"", ",", "\n", "f\"{FLAGS.dataset_str}/{FLAGS.dataset_str}_nx.pkl\"", ")", "\n", "self", ".", "unsup_batch_size", "=", "FLAGS", ".", "unsup_batch_size", "\n", "self", ".", "unsup_num_neg_samples", "=", "FLAGS", ".", "unsup_num_neg_samples", "\n", "self", ".", "meta_batch_size", "=", "FLAGS", ".", "meta_batch_size", "\n", "self", ".", "metatrain_label_ratio", "=", "FLAGS", ".", "metatrain_label_ratio", "\n", "self", ".", "metatest_label_ratio", "=", "FLAGS", ".", "metatest_label_ratio", "\n", "self", ".", "meta_num_pos_nodes", "=", "FLAGS", ".", "meta_num_pos_nodes", "\n", "self", ".", "meta_num_neg_nodes", "=", "FLAGS", ".", "meta_num_neg_nodes", "\n", "\n", "self", ".", "_load_basic_data", "(", ")", "\n", "self", ".", "_split_data", "(", ")", "\n", "if", "training", ":", "\n", "            ", "self", ".", "_load_context_pairs", "(", ")", "\n", "self", ".", "_load_sampling_table", "(", ")", "\n", "self", ".", "_build_tf_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.get_unsup_data": [[45, 53], ["next", "tensorflow.convert_to_tensor", "hasattr", "iter", "data_generator.DataGenerator.negative_sampling"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.negative_sampling"], ["", "", "def", "get_unsup_data", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"unsup_iterator\"", ")", ":", "\n", "            ", "self", ".", "unsup_iterator", "=", "iter", "(", "self", ".", "tf_dataset_unsupervised", ")", "\n", "", "batch_data", "=", "next", "(", "self", ".", "unsup_iterator", ")", "\n", "batch_data", "=", "{", "\"unsup\"", ":", "batch_data", "}", "\n", "batch_data", "[", "\"unsup\"", "]", "[", "\"nodes_neg\"", "]", "=", "tf", ".", "convert_to_tensor", "(", "\n", "self", ".", "negative_sampling", "(", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.get_data": [[54, 67], ["next", "tensorflow.convert_to_tensor", "data_generator.DataGenerator.get_tasks", "hasattr", "iter", "data_generator.DataGenerator.negative_sampling"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.get_tasks", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.negative_sampling"], ["", "def", "get_data", "(", "self", ",", "mode", "=", "\"train\"", ",", "num_tasks", "=", "None", ",", "test_num_pos", "=", "None", ",", "test_num_neg", "=", "None", ",", "test_num", "=", "None", ")", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "\"iterator\"", ")", ":", "\n", "                ", "self", ".", "iterator", "=", "iter", "(", "self", ".", "tf_dataset", ")", "\n", "", "batch_data", "=", "next", "(", "self", ".", "iterator", ")", "\n", "batch_data", "[", "\"unsup\"", "]", "[", "\"nodes_neg\"", "]", "=", "tf", ".", "convert_to_tensor", "(", "\n", "self", ".", "negative_sampling", "(", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "            ", "assert", "num_tasks", "is", "not", "None", "\n", "assert", "mode", "==", "\"valid\"", "or", "mode", "==", "\"test\"", "\n", "batch_data", "=", "{", "}", "\n", "batch_data", "[", "\"meta\"", "]", "=", "self", ".", "get_tasks", "(", "mode", ",", "num_tasks", ",", "test_num_pos", "=", "test_num_pos", ",", "test_num_neg", "=", "test_num_neg", ")", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.get_tasks": [[68, 100], ["utils.sample_tasks", "utils.batching_tasks", "tensorflow.python.util.nest.map_structure", "dict", "dict._asdict", "tensorflow.convert_to_tensor", "hasattr", "len", "hasattr", "len"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.sample_tasks", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.batching_tasks"], ["", "def", "get_tasks", "(", "self", ",", "mode", ",", "num_tasks", "=", "None", ",", "rng", "=", "None", ",", "test_num_pos", "=", "None", ",", "test_num_neg", "=", "None", ")", ":", "\n", "        ", "rng", "=", "rng", "or", "self", ".", "rng_tasks", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "num_tasks", "=", "self", ".", "meta_batch_size", "\n", "sample_from", "=", "self", ".", "metatrain_labels", "\n", "", "else", ":", "\n", "            ", "assert", "num_tasks", "is", "not", "None", "\n", "num_tasks", "=", "num_tasks", "\n", "if", "mode", "==", "\"valid\"", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "\"_metaval_tasks\"", ")", "and", "len", "(", "self", ".", "_metaval_tasks", "[", "\"label_id\"", "]", ")", "==", "num_tasks", ":", "\n", "                    ", "return", "self", ".", "_metaval_tasks", "\n", "", "sample_from", "=", "self", ".", "metaval_labels", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "\"_metatest_tasks\"", ")", "and", "len", "(", "self", ".", "_metatest_tasks", "[", "\"label_id\"", "]", ")", "==", "num_tasks", ":", "\n", "                    ", "return", "self", ".", "_metatest_tasks", "\n", "", "sample_from", "=", "self", ".", "metatest_labels", "\n", "\n", "", "", "tasks", "=", "sample_tasks", "(", "\n", "rng", ",", "num_tasks", ",", "\n", "self", ".", "meta_num_pos_nodes", ",", "self", ".", "meta_num_neg_nodes", ",", "\n", "sample_from", ",", "self", ".", "G", ")", "\n", "tasks", "=", "batching_tasks", "(", "tasks", ")", "\n", "tasks", "=", "nest", ".", "map_structure", "(", "lambda", "x", ":", "tf", ".", "convert_to_tensor", "(", "x", ")", ",", "tasks", ")", "\n", "tasks", "=", "dict", "(", "tasks", ".", "_asdict", "(", ")", ")", "\n", "if", "mode", "==", "\"valid\"", ":", "\n", "            ", "self", ".", "_metaval_tasks", "=", "tasks", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "            ", "self", ".", "_metatest_tasks", "=", "tasks", "\n", "\n", "", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._build_tf_dataset": [[101, 108], ["data_generator.DataGenerator._build_tf_dataset_unsupervised", "data_generator.DataGenerator._build_tf_dataset_meta", "tensorflow.data.Dataset.zip", "tensorflow.data.Dataset.zip.prefetch"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._build_tf_dataset_unsupervised", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._build_tf_dataset_meta"], ["", "def", "_build_tf_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build_tf_dataset_unsupervised", "(", ")", "\n", "self", ".", "_build_tf_dataset_meta", "(", ")", "\n", "tf_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "{", "\n", "\"unsup\"", ":", "self", ".", "tf_dataset_unsupervised", ",", "\n", "\"meta\"", ":", "self", ".", "tf_dataset_meta", "}", ")", "\n", "self", ".", "tf_dataset", "=", "tf_dataset", ".", "prefetch", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._build_tf_dataset_unsupervised": [[109, 124], ["tensorflow.data.Dataset.from_tensor_slices", "tf_dataset.shuffle.shuffle.repeat", "tf_dataset.shuffle.shuffle.batch", "tf_dataset.shuffle.shuffle.shuffle", "tf_dataset.shuffle.shuffle.shuffle"], "methods", ["None"], ["", "def", "_build_tf_dataset_unsupervised", "(", "self", ")", ":", "\n", "        ", "dataset_tensors", "=", "{", "\n", "\"nodes_u\"", ":", "self", ".", "nodes_u", ",", "\n", "\"nodes_v\"", ":", "self", ".", "nodes_v", "}", "\n", "tf_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "dataset_tensors", ")", "\n", "if", "self", ".", "dataset", "==", "\"Flickr\"", ":", "\n", "            ", "tf_dataset", "=", "tf_dataset", ".", "shuffle", "(", "750000", ")", "\n", "", "else", ":", "\n", "            ", "tf_dataset", "=", "tf_dataset", ".", "shuffle", "(", "self", ".", "nodes_u", ".", "shape", "[", "0", "]", ")", "\n", "# tf_dataset = tf.data.Dataset.range(self.num_nodes)", "\n", "# tf_dataset = tf_dataset.map(lambda x: {\"nodes\": x})", "\n", "# tf_dataset = tf_dataset.shuffle(self.num_nodes)", "\n", "", "tf_dataset", "=", "tf_dataset", ".", "repeat", "(", ")", "\n", "tf_dataset", "=", "tf_dataset", ".", "batch", "(", "self", ".", "unsup_batch_size", ")", "\n", "self", ".", "tf_dataset_unsupervised", "=", "tf_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._build_tf_dataset_meta": [[125, 136], ["tensorflow.data.Dataset.from_generator", "numpy.random.RandomState", "data_generator.DataGenerator.get_tasks"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.get_tasks"], ["", "def", "_build_tf_dataset_meta", "(", "self", ")", ":", "\n", "        ", "def", "gen", "(", ")", ":", "\n", "            ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "while", "True", ":", "\n", "                ", "yield", "self", ".", "get_tasks", "(", "\"train\"", ",", "rng", "=", "rng", ")", "\n", "", "", "tf_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "gen", ",", "output_types", "=", "{", "\n", "\"label_id\"", ":", "tf", ".", "int64", ",", "\n", "\"train_nodes\"", ":", "tf", ".", "int64", ",", "\"train_labels\"", ":", "tf", ".", "int64", ",", "\n", "\"test_nodes\"", ":", "tf", ".", "int64", ",", "\"test_labels\"", ":", "tf", ".", "int64", "}", ")", "\n", "self", ".", "tf_dataset_meta", "=", "tf_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._load_basic_data": [[137, 148], ["networkx.read_gpickle", "data_generator.DataGenerator.G.graph[].astype", "data_generator.DataGenerator.G.number_of_nodes", "networkx.convert_matrix.to_scipy_sparse_matrix", "numpy.asarray().flatten", "list", "numpy.asarray", "range", "data_generator.DataGenerator.adj.sum", "data_generator.DataGenerator.G.number_of_nodes"], "methods", ["None"], ["", "def", "_load_basic_data", "(", "self", ")", ":", "\n", "# load graph and obtain relevant information", "\n", "        ", "self", ".", "G", "=", "nx", ".", "read_gpickle", "(", "self", ".", "dataset_path", ")", "\n", "self", ".", "labels", "=", "self", ".", "G", ".", "graph", "[", "\"label_array\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "num_nodes", "=", "self", ".", "G", ".", "number_of_nodes", "(", ")", "\n", "self", ".", "adj", "=", "nx", ".", "convert_matrix", ".", "to_scipy_sparse_matrix", "(", "\n", "self", ".", "G", ",", "\n", "nodelist", "=", "list", "(", "range", "(", "self", ".", "G", ".", "number_of_nodes", "(", ")", ")", ")", ",", "\n", "format", "=", "\"csr\"", ")", "\n", "self", ".", "degrees", "=", "np", ".", "asarray", "(", "self", ".", "adj", ".", "sum", "(", "axis", "=", "1", ")", ",", "\n", "dtype", "=", "np", ".", "int64", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._load_context_pairs": [[149, 151], ["data_generator.DataGenerator.adj.nonzero"], "methods", ["None"], ["", "def", "_load_context_pairs", "(", "self", ")", ":", "\n", "        ", "self", ".", "nodes_u", ",", "self", ".", "nodes_v", "=", "self", ".", "adj", ".", "nonzero", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._load_sampling_table": [[152, 160], ["os.join", "os.isfile", "os.dirname", "numpy.load", "data_generator.DataGenerator._generate_sampling_table", "os.abspath"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._generate_sampling_table"], ["", "def", "_load_sampling_table", "(", "self", ")", ":", "\n", "        ", "self", ".", "sampling_table_file", "=", "osp", ".", "join", "(", "\n", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "self", ".", "dataset_path", ")", ")", ",", "\n", "\"sampling_table.npy\"", ")", "\n", "if", "osp", ".", "isfile", "(", "self", ".", "sampling_table_file", ")", ":", "\n", "            ", "self", ".", "sampling_table", "=", "np", ".", "load", "(", "self", ".", "sampling_table_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_generate_sampling_table", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._split_data": [[161, 171], ["int", "int", "data_generator.DataGenerator.rng_basic.permutation", "numpy.split"], "methods", ["None"], ["", "", "def", "_split_data", "(", "self", ")", ":", "\n", "        ", "num_labels", "=", "self", ".", "labels", ".", "shape", "[", "1", "]", "\n", "num_metatrain_labels", "=", "int", "(", "num_labels", "*", "self", ".", "metatrain_label_ratio", ")", "\n", "num_metatest_labels", "=", "int", "(", "num_labels", "*", "self", ".", "metatest_label_ratio", ")", "\n", "\n", "shuffled_labels", "=", "self", ".", "rng_basic", ".", "permutation", "(", "num_labels", ")", "\n", "self", ".", "metatrain_labels", ",", "self", ".", "metatest_labels", ",", "self", ".", "metaval_labels", "=", "np", ".", "split", "(", "shuffled_labels", ",", "\n", "[", "num_metatrain_labels", ",", "\n", "num_metatrain_labels", "+", "num_metatest_labels", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator._generate_sampling_table": [[172, 200], ["print", "data_generator.DataGenerator.degrees.copy", "sum", "numpy.zeros", "range", "numpy.save", "int", "math.pow", "float", "range", "math.pow", "float"], "methods", ["None"], ["", "def", "_generate_sampling_table", "(", "self", ")", ":", "\n", "        ", "import", "math", "\n", "table_size", "=", "1e8", "\n", "power", "=", "0.75", "\n", "numNodes", "=", "self", ".", "num_nodes", "\n", "\n", "print", "(", "\"Pre-procesing for non-uniform negative sampling!\"", ")", "\n", "node_degree", "=", "self", ".", "degrees", ".", "copy", "(", ")", "\n", "# node_degree = np.zeros(numNodes)  # out degree", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# look_up = self.g.look_up_dict", "\n", "# for edge in self.g.G.edges():", "\n", "#     node_degree[look_up[edge[0]]", "\n", "#                 ] += self.g.G[edge[0]][edge[1]][\"weight\"]", "\n", "\n", "norm", "=", "sum", "(", "[", "math", ".", "pow", "(", "node_degree", "[", "i", "]", ",", "power", ")", "for", "i", "in", "range", "(", "numNodes", ")", "]", ")", "\n", "\n", "self", ".", "sampling_table", "=", "np", ".", "zeros", "(", "int", "(", "table_size", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "\n", "p", "=", "0", "\n", "i", "=", "0", "\n", "for", "j", "in", "range", "(", "numNodes", ")", ":", "\n", "            ", "p", "+=", "float", "(", "math", ".", "pow", "(", "node_degree", "[", "j", "]", ",", "power", ")", ")", "/", "norm", "\n", "while", "i", "<", "table_size", "and", "float", "(", "i", ")", "/", "table_size", "<", "p", ":", "\n", "                ", "self", ".", "sampling_table", "[", "i", "]", "=", "j", "\n", "i", "+=", "1", "\n", "", "", "np", ".", "save", "(", "self", ".", "sampling_table_file", ",", "self", ".", "sampling_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.data_generator.DataGenerator.negative_sampling": [[201, 210], ["range", "numpy.asarray", "data_generator.DataGenerator.rng_basic.randint", "numpy.asarray.append"], "methods", ["None"], ["", "def", "negative_sampling", "(", "self", ")", ":", "\n", "        ", "negative_samples", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "unsup_batch_size", ")", ":", "\n", "            ", "random_indices", "=", "self", ".", "rng_basic", ".", "randint", "(", "\n", "0", ",", "self", ".", "sampling_table", ".", "shape", "[", "0", "]", ",", "\n", "size", "=", "self", ".", "unsup_num_neg_samples", ")", "\n", "negative_samples", ".", "append", "(", "self", ".", "sampling_table", "[", "random_indices", "]", ")", "\n", "", "negative_samples", "=", "np", ".", "asarray", "(", "negative_samples", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "negative_samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.DotDict.__init__": [[289, 292], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DotDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.DotDict.__getattribute__": [[293, 299], ["dict.__getattribute__", "isinstance", "utils.DotDict"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.DotDict.__getattribute__"], ["", "def", "__getattribute__", "(", "self", ",", "item", ")", ":", "\n", "        ", "value", "=", "dict", ".", "__getattribute__", "(", "self", ",", "item", ")", "\n", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "return", "DotDict", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.batching_tasks": [[29, 38], ["isinstance", "isinstance", "TaskInfo", "numpy.stack", "getattr"], "function", ["None"], ["def", "batching_tasks", "(", "tasks", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tasks", ",", "list", ")", "\n", "assert", "isinstance", "(", "tasks", "[", "0", "]", ",", "TaskInfo", ")", "\n", "new", "=", "{", "}", "\n", "for", "attr", "in", "[", "\"label_id\"", ",", "\"train_nodes\"", ",", "\"train_labels\"", ",", "\n", "\"test_nodes\"", ",", "\"test_labels\"", "]", ":", "\n", "        ", "new", "[", "attr", "]", "=", "np", ".", "stack", "(", "[", "getattr", "(", "t", ",", "attr", ")", "for", "t", "in", "tasks", "]", ")", "\n", "", "batch_tasks", "=", "TaskInfo", "(", "**", "new", ")", "\n", "return", "batch_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.sample_tasks": [[40, 60], ["len", "utils.sample_a_task", "any", "tasks.append", "ipdb.set_trace", "utils.compare_tasks"], "function", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.sample_a_task", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.compare_tasks"], ["", "def", "sample_tasks", "(", "\n", "rng", ",", "\n", "num_tasks", ",", "\n", "num_positive_nodes", ",", "\n", "num_negative_nodes", ",", "\n", "sample_from_labels", ",", "\n", "G", ",", "\n", "test_num_pos", "=", "None", ",", "\n", "test_num_neg", "=", "None", ")", ":", "\n", "    ", "tasks", "=", "[", "]", "\n", "while", "len", "(", "tasks", ")", "<", "num_tasks", ":", "\n", "        ", "tmp_task", "=", "sample_a_task", "(", "\n", "rng", ",", "num_positive_nodes", ",", "num_negative_nodes", ",", "\n", "sample_from_labels", ",", "G", ",", "\n", "test_num_pos", ",", "test_num_neg", ")", "\n", "if", "not", "any", "(", "[", "compare_tasks", "(", "t", ",", "tmp_task", ")", "for", "t", "in", "tasks", "]", ")", ":", "\n", "            ", "tasks", ".", "append", "(", "tmp_task", ")", "\n", "", "else", ":", "\n", "            ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.sample_a_task": [[62, 104], ["rng.choice", "rng.choice", "numpy.split", "numpy.split", "rng.permutation", "rng.permutation", "TaskInfo", "rng.choice", "numpy.nonzero", "numpy.nonzero", "numpy.concatenate", "numpy.concatenate", "numpy.count_nonzero"], "function", ["None"], ["", "def", "sample_a_task", "(", "\n", "rng", ",", "\n", "num_positive_nodes", ",", "\n", "num_negative_nodes", ",", "\n", "sample_from_labels", ",", "\n", "G", ",", "\n", "test_num_pos", ",", "\n", "test_num_neg", ")", ":", "\n", "    ", "if", "test_num_pos", "is", "None", ":", "\n", "        ", "test_num_pos", "=", "num_positive_nodes", "\n", "test_num_neg", "=", "num_negative_nodes", "\n", "", "label_array", "=", "G", ".", "graph", "[", "\"label_array\"", "]", "\n", "sampled_label", "=", "None", "\n", "while", "not", "sampled_label", ":", "\n", "        ", "tmp", "=", "rng", ".", "choice", "(", "sample_from_labels", ")", "\n", "if", "np", ".", "count_nonzero", "(", "label_array", "[", ":", ",", "tmp", "]", ")", ">", "num_positive_nodes", "+", "test_num_pos", ":", "\n", "            ", "sampled_label", "=", "tmp", "\n", "", "", "all_pos_nodes", "=", "np", ".", "nonzero", "(", "label_array", "[", ":", ",", "sampled_label", "]", "!=", "0", ")", "[", "0", "]", "\n", "all_neg_nodes", "=", "np", ".", "nonzero", "(", "label_array", "[", ":", ",", "sampled_label", "]", "==", "0", ")", "[", "0", "]", "\n", "sampled_pos_nodes", "=", "rng", ".", "choice", "(", "all_pos_nodes", ",", "\n", "size", "=", "num_positive_nodes", "+", "test_num_pos", ",", "\n", "replace", "=", "False", ")", "\n", "sampled_neg_nodes", "=", "rng", ".", "choice", "(", "all_neg_nodes", ",", "\n", "size", "=", "num_negative_nodes", "+", "test_num_neg", ",", "\n", "replace", "=", "False", ")", "\n", "train_pos_nodes", ",", "test_pos_nodes", "=", "np", ".", "split", "(", "\n", "sampled_pos_nodes", ",", "[", "num_positive_nodes", "]", ")", "\n", "train_neg_nodes", ",", "test_neg_nodes", "=", "np", ".", "split", "(", "\n", "sampled_neg_nodes", ",", "[", "num_negative_nodes", "]", ")", "\n", "\n", "train_nodes", "=", "rng", ".", "permutation", "(", "\n", "np", ".", "concatenate", "(", "(", "train_pos_nodes", ",", "train_neg_nodes", ")", ")", ")", "\n", "train_labels", "=", "label_array", "[", "train_nodes", ",", "sampled_label", "]", "\n", "test_nodes", "=", "rng", ".", "permutation", "(", "\n", "np", ".", "concatenate", "(", "(", "test_pos_nodes", ",", "test_neg_nodes", ")", ")", ")", "\n", "test_labels", "=", "label_array", "[", "test_nodes", ",", "sampled_label", "]", "\n", "task", "=", "TaskInfo", "(", "label_id", "=", "sampled_label", ",", "\n", "train_nodes", "=", "train_nodes", ",", "\n", "train_labels", "=", "train_labels", ",", "\n", "test_nodes", "=", "test_nodes", ",", "\n", "test_labels", "=", "test_labels", ")", "\n", "return", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.sample_fixed_tasks": [[105, 162], ["len", "rng.choice", "rng.choice", "rng.permutation", "TaskInfo", "rng.choice", "numpy.nonzero", "numpy.nonzero", "numpy.concatenate", "numpy.asarray", "any", "tasks.append", "ipdb.set_trace", "numpy.count_nonzero", "len", "rng.randint", "numpy.sum", "np.asarray.append", "utils.compare_tasks"], "function", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.compare_tasks"], ["", "def", "sample_fixed_tasks", "(", "\n", "rng", ",", "\n", "num_tasks", ",", "\n", "num_positive_nodes", ",", "\n", "num_negative_nodes", ",", "\n", "sample_from_labels", ",", "\n", "G", ",", "\n", "test_num", ")", ":", "\n", "    ", "tasks", "=", "[", "]", "\n", "while", "len", "(", "tasks", ")", "<", "num_tasks", ":", "\n", "        ", "label_array", "=", "G", ".", "graph", "[", "\"label_array\"", "]", "\n", "sampled_label", "=", "None", "\n", "while", "not", "sampled_label", ":", "\n", "            ", "tmp", "=", "rng", ".", "choice", "(", "sample_from_labels", ")", "\n", "if", "np", ".", "count_nonzero", "(", "label_array", "[", ":", ",", "tmp", "]", ")", ">", "num_positive_nodes", ":", "\n", "                ", "sampled_label", "=", "tmp", "\n", "", "", "all_pos_nodes", "=", "np", ".", "nonzero", "(", "label_array", "[", ":", ",", "sampled_label", "]", "!=", "0", ")", "[", "0", "]", "\n", "all_neg_nodes", "=", "np", ".", "nonzero", "(", "label_array", "[", ":", ",", "sampled_label", "]", "==", "0", ")", "[", "0", "]", "\n", "sampled_pos_nodes", "=", "rng", ".", "choice", "(", "all_pos_nodes", ",", "\n", "size", "=", "num_positive_nodes", ",", "\n", "replace", "=", "False", ")", "\n", "sampled_neg_nodes", "=", "rng", ".", "choice", "(", "all_neg_nodes", ",", "\n", "size", "=", "num_negative_nodes", ",", "\n", "replace", "=", "False", ")", "\n", "# train_pos_nodes, test_pos_nodes = np.split(", "\n", "#     sampled_pos_nodes, [num_positive_nodes])", "\n", "# train_neg_nodes, test_neg_nodes = np.split(", "\n", "#     sampled_neg_nodes, [num_negative_nodes])", "\n", "\n", "train_nodes", "=", "rng", ".", "permutation", "(", "\n", "np", ".", "concatenate", "(", "(", "sampled_pos_nodes", ",", "sampled_neg_nodes", ")", ")", ")", "\n", "train_labels", "=", "label_array", "[", "train_nodes", ",", "sampled_label", "]", "\n", "# test_nodes = rng.permutation(", "\n", "#     np.concatenate((test_pos_nodes, test_neg_nodes)))", "\n", "\n", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "            ", "test_nodes", "=", "[", "]", "\n", "while", "len", "(", "test_nodes", ")", "<", "test_num", ":", "\n", "                ", "tmp", "=", "rng", ".", "randint", "(", "label_array", ".", "shape", "[", "0", "]", ")", "\n", "if", "tmp", "not", "in", "train_nodes", ":", "\n", "                    ", "test_nodes", ".", "append", "(", "tmp", ")", "\n", "", "", "test_nodes", "=", "np", ".", "asarray", "(", "test_nodes", ")", "\n", "test_labels", "=", "label_array", "[", "test_nodes", ",", "sampled_label", "]", "\n", "if", "np", ".", "sum", "(", "test_labels", ")", ">", "0", ":", "\n", "                ", "done", "=", "True", "\n", "", "", "task", "=", "TaskInfo", "(", "label_id", "=", "sampled_label", ",", "\n", "train_nodes", "=", "train_nodes", ",", "\n", "train_labels", "=", "train_labels", ",", "\n", "test_nodes", "=", "test_nodes", ",", "\n", "test_labels", "=", "test_labels", ")", "\n", "\n", "if", "not", "any", "(", "[", "compare_tasks", "(", "t", ",", "task", ")", "for", "t", "in", "tasks", "]", ")", ":", "\n", "            ", "tasks", ".", "append", "(", "task", ")", "\n", "", "else", ":", "\n", "            ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.sample_random_tasks": [[164, 187], ["len", "rng.choice", "numpy.split", "TaskInfo", "G.number_of_nodes", "numpy.zeros_like", "numpy.zeros_like", "any", "tasks.append", "ipdb.set_trace", "rng.permutation", "rng.permutation", "utils.compare_tasks"], "function", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.compare_tasks"], ["", "def", "sample_random_tasks", "(", "\n", "rng", ",", "\n", "num_tasks", ",", "\n", "num_positive_nodes", ",", "\n", "num_negative_nodes", ",", "\n", "G", ")", ":", "\n", "    ", "tasks", "=", "[", "]", "\n", "while", "len", "(", "tasks", ")", "<", "num_tasks", ":", "\n", "        ", "random_nodes", "=", "rng", ".", "choice", "(", "G", ".", "number_of_nodes", "(", ")", ",", "\n", "size", "=", "2", "*", "(", "num_positive_nodes", "+", "num_negative_nodes", ")", ",", "\n", "replace", "=", "False", ")", "\n", "train_nodes", ",", "test_nodes", "=", "np", ".", "split", "(", "random_nodes", ",", "2", ")", "\n", "train_labels", ",", "test_labels", "=", "np", ".", "zeros_like", "(", "train_nodes", ")", ",", "np", ".", "zeros_like", "(", "test_nodes", ")", "\n", "train_labels", "[", "rng", ".", "permutation", "(", "train_labels", ".", "shape", "[", "0", "]", ")", "[", ":", "num_positive_nodes", "]", "]", "=", "1", "\n", "test_labels", "[", "rng", ".", "permutation", "(", "test_labels", ".", "shape", "[", "0", "]", ")", "[", ":", "num_positive_nodes", "]", "]", "=", "1", "\n", "tmp_task", "=", "TaskInfo", "(", "label_id", "=", "-", "1", ",", "\n", "train_nodes", "=", "train_nodes", ",", "train_labels", "=", "train_labels", ",", "\n", "test_nodes", "=", "test_nodes", ",", "test_labels", "=", "test_labels", ")", "\n", "if", "not", "any", "(", "[", "compare_tasks", "(", "t", ",", "tmp_task", ")", "for", "t", "in", "tasks", "]", ")", ":", "\n", "            ", "tasks", ".", "append", "(", "tmp_task", ")", "\n", "", "else", ":", "\n", "            ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.compare_tasks": [[189, 199], ["set", "set", "getattr", "getattr"], "function", ["None"], ["", "def", "compare_tasks", "(", "task_1", ",", "task_2", ")", ":", "\n", "    ", "if", "task_1", ".", "label_id", "!=", "task_2", ".", "label_id", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "for", "attr", "in", "[", "\"train_nodes\"", ",", "\"test_nodes\"", "]", ":", "\n", "            ", "if", "set", "(", "getattr", "(", "task_1", ",", "attr", ")", ")", "==", "set", "(", "getattr", "(", "task_2", ",", "attr", ")", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils._sample_tasks": [[201, 234], ["len", "rng.choice", "set", "numpy.asarray", "rng.shuffle", "np.asarray.update", "list", "numpy.all", "numpy.all", "TaskInfo", "print", "label_array[].nonzero", "[].sum", "[].sum", "any", "all_tasks.append", "ipdb.set_trace", "utils.compare_tasks", "len"], "function", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.compare_tasks"], ["", "", "def", "_sample_tasks", "(", "rng", ",", "\n", "num_tasks", ",", "\n", "num_labels_per_task", ",", "\n", "num_shots_per_label", ",", "\n", "sample_from_labels", ",", "\n", "label_array", ")", ":", "\n", "    ", "all_tasks", "=", "[", "]", "\n", "while", "len", "(", "all_tasks", ")", "<", "num_tasks", ":", "\n", "        ", "sampled_labels", "=", "rng", ".", "choice", "(", "sample_from_labels", ",", "\n", "size", "=", "num_labels_per_task", ",", "\n", "replace", "=", "False", ")", "\n", "associated_nodes", "=", "set", "(", ")", "\n", "for", "label", "in", "sampled_labels", ":", "\n", "            ", "nodes", "=", "label_array", "[", ":", ",", "label", "]", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "associated_nodes", ".", "update", "(", "nodes", ")", "\n", "", "associated_nodes", "=", "np", ".", "asarray", "(", "list", "(", "associated_nodes", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "num_sampled_nodes", "=", "num_labels_per_task", "*", "num_shots_per_label", "\n", "rng", ".", "shuffle", "(", "associated_nodes", ")", "\n", "train_nodes", "=", "associated_nodes", "[", ":", "num_sampled_nodes", "]", "\n", "test_nodes", "=", "associated_nodes", "[", "num_sampled_nodes", ":", "num_sampled_nodes", "*", "2", "]", "\n", "if", "np", ".", "all", "(", "label_array", "[", "train_nodes", "]", "[", ":", ",", "sampled_labels", "]", ".", "sum", "(", "0", ")", ")", "and", "np", ".", "all", "(", "label_array", "[", "test_nodes", "]", "[", ":", ",", "sampled_labels", "]", ".", "sum", "(", "0", ")", ")", ":", "\n", "            ", "task", "=", "TaskInfo", "(", "labels", "=", "sampled_labels", ",", "\n", "train_nodes", "=", "train_nodes", ",", "\n", "test_nodes", "=", "test_nodes", ")", "\n", "if", "not", "any", "(", "[", "compare_tasks", "(", "x", ",", "task", ")", "for", "x", "in", "all_tasks", "]", ")", ":", "\n", "                ", "all_tasks", ".", "append", "(", "task", ")", "\n", "", "else", ":", "\n", "                ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "print", "(", "f\"{len(all_tasks)}\"", ")", "\n", "\n", "", "", "return", "all_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.calculate_metrics": [[236, 270], ["tensorflow.nn.softmax().numpy", "numpy.argmax", "zip", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "accs.append", "aucs.append", "precisions.append", "recalls.append", "f1s.append", "tensorflow.nn.softmax", "sklearn.metrics.accuracy_score", "sklearn.metrics.roc_auc_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score"], "function", ["None"], ["", "def", "calculate_metrics", "(", "labels", ",", "logits", ")", ":", "\n", "    ", "true_labels", "=", "labels", "\n", "pred_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "axis", "=", "-", "1", ")", ".", "numpy", "(", ")", "\n", "pred_scores", "=", "pred_probs", "[", ":", ",", ":", ",", "1", "]", "\n", "pred_labels", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "# pred_scores = tf.sigmoid(logits).numpy().squeeze()", "\n", "# pred_labels = np.asarray(pred_scores > 0.5, np.int64)", "\n", "accs", "=", "[", "]", "\n", "# baccs = []", "\n", "aucs", "=", "[", "]", "\n", "precisions", "=", "[", "]", "\n", "recalls", "=", "[", "]", "\n", "f1s", "=", "[", "]", "\n", "# for y_true, y_pred in zip(true_labels, pred_labels):", "\n", "for", "y_true", ",", "y_pred", ",", "y_score", "in", "zip", "(", "true_labels", ",", "pred_labels", ",", "pred_scores", ")", ":", "\n", "        ", "accs", ".", "append", "(", "metrics", ".", "accuracy_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "# baccs.append(metrics.balanced_accuracy_score(y_true, y_pred))", "\n", "aucs", ".", "append", "(", "metrics", ".", "roc_auc_score", "(", "y_true", ",", "y_score", ")", ")", "\n", "precisions", ".", "append", "(", "metrics", ".", "precision_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "recalls", ".", "append", "(", "metrics", ".", "recall_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "f1s", ".", "append", "(", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "", "acc", "=", "np", ".", "mean", "(", "accs", ")", "\n", "auc", "=", "np", ".", "mean", "(", "aucs", ")", "\n", "precison", "=", "np", ".", "mean", "(", "precisions", ")", "\n", "recall", "=", "np", ".", "mean", "(", "recalls", ")", "\n", "f1", "=", "np", ".", "mean", "(", "f1s", ")", "\n", "outputs", "=", "{", "\n", "# \"accuracy\": acc,", "\n", "\"roc_auc\"", ":", "auc", ",", "\n", "\"precision\"", ":", "precison", ",", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"f1\"", ":", "f1", "\n", "}", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.None.utils.flatten_dict": [[272, 286], ["dt.copy.copy", "any", "dt.copy.items", "dt.copy.update", "isinstance", "isinstance", "dt.copy.values", "value.items", "remove.append", "separator.join"], "function", ["None"], ["", "def", "flatten_dict", "(", "dt", ",", "separator", "=", "\"/\"", ")", ":", "\n", "    ", "dt", "=", "dt", ".", "copy", "(", ")", "\n", "while", "any", "(", "isinstance", "(", "v", ",", "dict", ")", "for", "v", "in", "dt", ".", "values", "(", ")", ")", ":", "\n", "        ", "remove", "=", "[", "]", "\n", "add", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "dt", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "for", "subkey", ",", "v", "in", "value", ".", "items", "(", ")", ":", "\n", "                    ", "add", "[", "separator", ".", "join", "(", "[", "key", ",", "subkey", "]", ")", "]", "=", "v", "\n", "", "remove", ".", "append", "(", "key", ")", "\n", "", "", "dt", ".", "update", "(", "add", ")", "\n", "for", "k", "in", "remove", ":", "\n", "            ", "del", "dt", "[", "k", "]", "\n", "", "", "return", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.BlogCatalog.standardize.standardize": [[18, 65], ["os.dirname", "collections.defaultdict", "dict", "networkx.Graph", "dict.items", "numpy.asarray", "networkx.write_gpickle", "networkx.write_gpickle", "os.abspath", "open", "open", "open", "open", "nx.Graph.add_node", "nx.Graph.add_edge", "line.rstrip", "int", "tuple", "line.rstrip", "int", "line.rstrip().split", "node_groups[].add", "int", "line.rstrip().split", "range", "range", "line.rstrip", "len", "nx.Graph.number_of_nodes", "line.rstrip"], "function", ["None"], ["def", "standardize", "(", ")", ":", "\n", "    ", "filepath", "=", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n", "# load nodes", "\n", "with", "open", "(", "f\"{filepath}/original/nodes.csv\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "nodes", "=", "{", "line", ".", "rstrip", "(", ")", "for", "line", "in", "f", "}", "\n", "", "node_mapping", "=", "{", "x", ":", "int", "(", "x", ")", "-", "1", "for", "x", "in", "nodes", "}", "\n", "\n", "# load edges", "\n", "with", "open", "(", "f\"{filepath}/original/edges.csv\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "edges", "=", "{", "tuple", "(", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\",\"", ")", ")", "for", "line", "in", "f", "}", "\n", "\n", "# load groups", "\n", "", "with", "open", "(", "f\"{filepath}/original/groups.csv\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "groups", "=", "{", "line", ".", "rstrip", "(", ")", "for", "line", "in", "f", "}", "\n", "", "group_mapping", "=", "{", "x", ":", "int", "(", "x", ")", "-", "1", "for", "x", "in", "groups", "}", "\n", "\n", "# load node-group edges", "\n", "node_groups", "=", "defaultdict", "(", "set", ")", "\n", "with", "open", "(", "f\"{filepath}/original/group-edges.csv\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "node", ",", "group", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "node_groups", "[", "node", "]", ".", "add", "(", "group", ")", "\n", "", "", "node_groups", "=", "dict", "(", "node_groups", ")", "\n", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "# add nodes", "\n", "for", "node", "in", "nodes", ":", "\n", "        ", "G", ".", "add_node", "(", "node_mapping", "[", "node", "]", ")", "\n", "# add edges", "\n", "", "for", "edge", "in", "edges", ":", "\n", "        ", "G", ".", "add_edge", "(", "node_mapping", "[", "edge", "[", "0", "]", "]", ",", "node_mapping", "[", "edge", "[", "1", "]", "]", ")", "\n", "# add groups", "\n", "", "for", "node", ",", "groups", "in", "node_groups", ".", "items", "(", ")", ":", "\n", "        ", "mapped_groups", "=", "[", "group_mapping", "[", "x", "]", "for", "x", "in", "groups", "]", "\n", "label", "=", "[", "int", "(", "i", "in", "mapped_groups", ")", "for", "i", "in", "range", "(", "len", "(", "group_mapping", ")", ")", "]", "\n", "G", ".", "nodes", "[", "node_mapping", "[", "node", "]", "]", "[", "\"label\"", "]", "=", "label", "\n", "\n", "", "label_array", "=", "np", ".", "asarray", "(", "\n", "[", "G", ".", "nodes", "[", "i", "]", "[", "\"label\"", "]", "for", "i", "in", "range", "(", "G", ".", "number_of_nodes", "(", ")", ")", "]", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "G", ".", "graph", "[", "\"label_array\"", "]", "=", "label_array", "\n", "\n", "nx", ".", "write_gpickle", "(", "G", ",", "f\"{filepath}/BlogCatalog_nx.pkl\"", ")", "\n", "nx", ".", "write_gpickle", "(", "G", ",", "f\"{filepath}/BlogCatalog_nx.pkl2\"", ",", "protocol", "=", "2", ")", "\n", "\n", "return", "G", "\n", "", ""]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.PPI.standardize.standardize": [[19, 55], ["os.dirname", "scipy.io.loadmat", "network.setdiag", "network.eliminate_zeros", "numpy.asarray().flatten", "networkx.Graph", "range", "zip", "enumerate", "numpy.asarray", "networkx.write_gpickle", "networkx.write_gpickle", "os.abspath", "nx.Graph.add_node", "row.toarray().flatten().astype().tolist", "numpy.asarray", "network.nonzero", "nx.Graph.add_edge", "nx.Graph.add_edge", "network.sum", "row.toarray().flatten().astype", "range", "nx.Graph.number_of_nodes", "row.toarray().flatten", "row.toarray"], "function", ["None"], ["    ", "filepath", "=", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n", "# load nodes", "\n", "with", "open", "(", "f\"{filepath}/original/nodes.csv\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "nodes", "=", "{", "line", ".", "rstrip", "(", ")", "for", "line", "in", "f", "}", "\n", "", "node_mapping", "=", "{", "x", ":", "int", "(", "x", ")", "-", "1", "for", "x", "in", "nodes", "}", "\n", "\n", "# load edges", "\n", "with", "open", "(", "f\"{filepath}/original/edges.csv\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "edges", "=", "{", "tuple", "(", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\",\"", ")", ")", "for", "line", "in", "f", "}", "\n", "\n", "# load groups", "\n", "", "with", "open", "(", "f\"{filepath}/original/groups.csv\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "groups", "=", "{", "line", ".", "rstrip", "(", ")", "for", "line", "in", "f", "}", "\n", "", "group_mapping", "=", "{", "x", ":", "int", "(", "x", ")", "-", "1", "for", "x", "in", "groups", "}", "\n", "\n", "# load node-group edges", "\n", "node_groups", "=", "defaultdict", "(", "set", ")", "\n", "with", "open", "(", "f\"{filepath}/original/group-edges.csv\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "node", ",", "group", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "node_groups", "[", "node", "]", ".", "add", "(", "group", ")", "\n", "", "", "node_groups", "=", "dict", "(", "node_groups", ")", "\n", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "# add nodes", "\n", "for", "node", "in", "nodes", ":", "\n", "        ", "G", ".", "add_node", "(", "node_mapping", "[", "node", "]", ")", "\n", "# add edges", "\n", "", "for", "edge", "in", "edges", ":", "\n", "        ", "G", ".", "add_edge", "(", "node_mapping", "[", "edge", "[", "0", "]", "]", ",", "node_mapping", "[", "edge", "[", "1", "]", "]", ")", "\n", "# add groups", "\n", "", "for", "node", ",", "groups", "in", "node_groups", ".", "items", "(", ")", ":", "\n", "        ", "mapped_groups", "=", "[", "group_mapping", "[", "x", "]", "for", "x", "in", "groups", "]", "\n", "label", "=", "[", "int", "(", "i", "in", "mapped_groups", ")", "for", "i", "in", "range", "(", "len", "(", "group_mapping", ")", ")", "]", "\n", "G", ".", "nodes", "[", "node_mapping", "[", "node", "]", "]", "[", "\"label\"", "]", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.layers.embedding.Embedding.__init__": [[17, 25], ["tensorflow.python.keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "hidden_size", ",", "dtype", "=", "None", ",", "init_value", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", "dtype", "=", "dtype", ",", "name", "=", "name", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "init_value", "=", "init_value", "\n", "if", "self", ".", "init_value", "is", "not", "None", ":", "\n", "            ", "value_shape", "=", "init_value", ".", "shape", "\n", "assert", "vocab_size", "==", "value_shape", "[", "0", "]", ",", "hidden_size", "==", "value_shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.layers.embedding.Embedding.build": [[26, 42], ["tensorflow.python.keras.layers.Layer.build", "tensorflow.random_uniform_initializer", "tensorflow.name_scope", "embedding.Embedding.add_weight", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.LayerNormalization.build"], ["", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "self", ".", "init_value", "is", "None", ":", "\n", "            ", "init_width", "=", "0.5", "/", "self", ".", "hidden_size", "\n", "_initializer", "=", "tf", ".", "random_uniform_initializer", "(", "\n", "minval", "=", "-", "init_width", ",", "maxval", "=", "init_width", ")", "\n", "", "else", ":", "\n", "            ", "def", "_initializer", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "return", "tf", ".", "constant", "(", "self", ".", "init_value", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "", "with", "tf", ".", "name_scope", "(", "\"embedding_and_softmax\"", ")", ":", "\n", "            ", "self", ".", "embeddings", "=", "self", ".", "add_weight", "(", "\n", "\"weights\"", ",", "\n", "shape", "=", "[", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "_initializer", ",", "\n", "trainable", "=", "True", ")", "\n", "", "keras_layers", ".", "Layer", ".", "build", "(", "self", ",", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.layers.embedding.Embedding.call": [[43, 50], ["embedding.Embedding._embedding", "embedding.Embedding._linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.layers.embedding.Embedding._embedding", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.layers.embedding.Embedding._linear"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mode", "=", "\"embedding\"", ")", ":", "\n", "        ", "if", "mode", "==", "\"embedding\"", ":", "\n", "            ", "return", "self", ".", "_embedding", "(", "inputs", ")", "\n", "", "elif", "mode", "==", "\"linear\"", ":", "\n", "            ", "return", "self", ".", "_linear", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"mode {mode} is not valid.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.layers.embedding.Embedding._embedding": [[51, 57], ["tensorflow.name_scope", "tensorflow.gather"], "methods", ["None"], ["", "", "def", "_embedding", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs: an int tensor with shape [batch_size, length]", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "embeddings", "=", "tf", ".", "gather", "(", "self", ".", "embeddings", ",", "inputs", ")", "\n", "# embeddings = tf.nn.embedding_lookup(self.embeddings, inputs)", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.layers.embedding.Embedding._linear": [[58, 68], ["tensorflow.name_scope", "tensorflow.shape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape"], "methods", ["None"], ["", "def", "_linear", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs: a float tensor with shape [batch_size, length, hidden_size]", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"presoftmax_linear\"", ")", ":", "\n", "            ", "input_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "batch_size", ",", "length", "=", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "embeddings", ",", "transpose_b", "=", "True", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "logits", ",", "[", "batch_size", ",", "length", ",", "self", ".", "vocab_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.ffn.FeedForwardNetwork.__init__": [[17, 30], ["tensorflow.python.keras.layers.Layer.__init__", "tensorflow.python.keras.layers.Dense", "tensorflow.python.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "filter_size", ",", "relu_dropout", ")", ":", "\n", "        ", "super", "(", "FeedForwardNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "relu_dropout", "=", "relu_dropout", "\n", "\n", "self", ".", "filter_dense_layer", "=", "keras_layers", ".", "Dense", "(", "\n", "filter_size", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "\"filter_layer\"", ")", "\n", "self", ".", "output_dense_layer", "=", "keras_layers", ".", "Dense", "(", "\n", "hidden_size", ",", "use_bias", "=", "True", ",", "name", "=", "\"output_layer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.ffn.FeedForwardNetwork.call": [[31, 49], ["ffn.FeedForwardNetwork.filter_dense_layer", "ffn.FeedForwardNetwork.output_dense_layer", "tensorflow.nn.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: A tensor with shape [batch_size, length, hidden_size]\n            training (boolean): whether in training mode or not.\n\n        Returns:\n            Output of the feedforward network.\n            tensor with shape [batch_size, length, hidden_size]\n        \"\"\"", "\n", "# input_shape = tf.shape(x)", "\n", "# batch_size, length = input_shape[0], input_shape[1]", "\n", "\n", "output", "=", "self", ".", "filter_dense_layer", "(", "x", ")", "\n", "if", "training", ":", "\n", "            ", "output", "=", "tf", ".", "nn", ".", "dropout", "(", "output", ",", "rate", "=", "self", ".", "relu_dropout", ")", "\n", "", "output", "=", "self", ".", "output_dense_layer", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.attention.Attention.__init__": [[17, 37], ["tensorflow.python.keras.layers.Layer.__init__", "tensorflow.python.keras.layers.Dense", "tensorflow.python.keras.layers.Dense", "tensorflow.python.keras.layers.Dense", "tensorflow.python.keras.layers.Dense", "ValueError"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "output_size", ",", "num_heads", ",", "attention_dropout", ")", ":", "\n", "        ", "if", "hidden_size", "%", "num_heads", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Hidden size ({hidden_size}) must be divisible \"", "\n", "f\"by the number of heads ({num_heads}).\"", ")", "\n", "\n", "", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "\n", "self", ".", "q_dense_layer", "=", "keras_layers", ".", "Dense", "(", "\n", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"q\"", ")", "\n", "self", ".", "k_dense_layer", "=", "keras_layers", ".", "Dense", "(", "\n", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"k\"", ")", "\n", "self", ".", "v_dense_layer", "=", "keras_layers", ".", "Dense", "(", "\n", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"v\"", ")", "\n", "self", ".", "output_dense_layer", "=", "keras_layers", ".", "Dense", "(", "\n", "output_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"output_transform\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.attention.Attention.split_heads": [[38, 45], ["tensorflow.name_scope", "tensorflow.shape", "tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"split_heads\"", ")", ":", "\n", "            ", "input_shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "batch_size", ",", "length", ",", "length_tmp", "=", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", "\n", "depth", "=", "(", "self", ".", "hidden_size", "//", "self", ".", "num_heads", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "batch_size", ",", "length", ",", "length_tmp", ",", "self", ".", "num_heads", ",", "depth", "]", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.attention.Attention.combine_heads": [[46, 52], ["tensorflow.name_scope", "tensorflow.shape", "tensorflow.transpose", "tensorflow.reshape"], "methods", ["None"], ["", "", "def", "combine_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"combine_heads\"", ")", ":", "\n", "            ", "input_shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "batch_size", ",", "length", ",", "legnth_tmp", "=", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "3", "]", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", "]", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "batch_size", ",", "length", ",", "legnth_tmp", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.attention.Attention.call": [[53, 73], ["attention.Attention.q_dense_layer", "attention.Attention.k_dense_layer", "attention.Attention.v_dense_layer", "attention.Attention.split_heads", "attention.Attention.split_heads", "attention.Attention.split_heads", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.matmul", "attention.Attention.combine_heads", "attention.Attention.output_dense_layer", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.attention.Attention.split_heads", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.attention.Attention.split_heads", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.attention.Attention.split_heads", "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.attention.Attention.combine_heads"], ["", "", "def", "call", "(", "self", ",", "x", ",", "y", ",", "training", ")", ":", "\n", "        ", "q", "=", "self", ".", "q_dense_layer", "(", "x", ")", "\n", "k", "=", "self", ".", "k_dense_layer", "(", "y", ")", "\n", "v", "=", "self", ".", "v_dense_layer", "(", "y", ")", "\n", "\n", "q", "=", "self", ".", "split_heads", "(", "q", ")", "\n", "k", "=", "self", ".", "split_heads", "(", "k", ")", "\n", "v", "=", "self", ".", "split_heads", "(", "v", ")", "\n", "\n", "depth", "=", "(", "self", ".", "hidden_size", "//", "self", ".", "num_heads", ")", "\n", "q", "*=", "depth", "**", "-", "0.5", "\n", "\n", "logits", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "if", "training", ":", "\n", "            ", "weights", "=", "tf", ".", "nn", ".", "dropout", "(", "weights", ",", "rate", "=", "self", ".", "attention_dropout", ")", "\n", "", "attention_output", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "attention_output", "=", "self", ".", "combine_heads", "(", "attention_output", ")", "\n", "attention_output", "=", "self", ".", "output_dense_layer", "(", "attention_output", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.attention.SelfAttention.call": [[76, 78], ["attention.Attention.call"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.call"], ["    ", "def", "call", "(", "self", ",", "x", ",", "training", ")", ":", "\n", "        ", "return", "Attention", ".", "call", "(", "self", ",", "x", ",", "x", ",", "training", "=", "training", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.Transformer.__init__": [[20, 25], ["tensorflow.python.keras.layers.Layer.__init__", "transformer.EncoderStack"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hparams", ",", "name", "=", "None", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n", "self", ".", "encoder_stack", "=", "EncoderStack", "(", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.Transformer.call": [[26, 32], ["tensorflow.name_scope", "transformer.Transformer.encoder_stack"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"Transformer\"", ")", ":", "\n", "# if training:", "\n", "#     inputs = tf.nn.dropout(", "\n", "#         inputs, rate=self.hparams[\"layer_postprocess_dropout\"])", "\n", "            ", "return", "self", ".", "encoder_stack", "(", "inputs", ",", "training", "=", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.LayerNormalization.__init__": [[36, 39], ["tensorflow.python.keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "LayerNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.LayerNormalization.build": [[40, 59], ["transformer.LayerNormalization.add_weight", "transformer.LayerNormalization.add_weight", "super().build", "tensorflow.ones_initializer", "tensorflow.zeros_initializer"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.LayerNormalization.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Builds the layer.\"\"\"", "\n", "# Passing experimental_autocast=False causes these variables to not be", "\n", "# automatically casted to fp16 when mixed precision is used. Since we use", "\n", "# float32 in call() for numeric stability, we do not want variables to be", "\n", "# casted to fp16.", "\n", "self", ".", "scale", "=", "self", ".", "add_weight", "(", "\n", "\"layer_norm_scale\"", ",", "\n", "shape", "=", "[", "self", ".", "hidden_size", "]", ",", "\n", "dtype", "=", "\"float32\"", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "experimental_autocast", "=", "False", ")", "\n", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "\"layer_norm_bias\"", ",", "\n", "shape", "=", "[", "self", ".", "hidden_size", "]", ",", "\n", "dtype", "=", "\"float32\"", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "experimental_autocast", "=", "False", ")", "\n", "super", "(", "LayerNormalization", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.LayerNormalization.get_config": [[60, 63], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"hidden_size\"", ":", "self", ".", "hidden_size", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.LayerNormalization.call": [[65, 73], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.cast", "tensorflow.square", "tensorflow.math.rsqrt"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "input_dtype", "=", "x", ".", "dtype", "\n", "if", "input_dtype", "==", "tf", ".", "float16", ":", "\n", "            ", "x", "=", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", "\n", "", "mean", "=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "[", "-", "1", "]", ",", "keepdims", "=", "True", ")", "\n", "variance", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "x", "-", "mean", ")", ",", "axis", "=", "[", "-", "1", "]", ",", "keepdims", "=", "True", ")", "\n", "norm_x", "=", "(", "x", "-", "mean", ")", "*", "tf", ".", "math", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "\n", "return", "tf", ".", "cast", "(", "norm_x", "*", "self", ".", "scale", "+", "self", ".", "bias", ",", "input_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.PrePostProcessingWrapper.__init__": [[76, 81], ["tensorflow.python.keras.layers.Wrapper.__init__", "transformer.LayerNormalization"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "PrePostProcessingWrapper", ",", "self", ")", ".", "__init__", "(", "layer", "=", "layer", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "postprocess_dropout", "=", "hparams", "[", "\"layer_postprocess_dropout\"", "]", "\n", "self", ".", "layer_norm", "=", "LayerNormalization", "(", "hparams", "[", "\"output_size\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.PrePostProcessingWrapper.call": [[83, 90], ["transformer.PrePostProcessingWrapper.layer_norm", "transformer.PrePostProcessingWrapper.layer", "tensorflow.nn.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", ")", ":", "\n", "# training = kwargs[\"training\"]", "\n", "        ", "normed_inputs", "=", "self", ".", "layer_norm", "(", "inputs", ")", "\n", "output", "=", "self", ".", "layer", "(", "normed_inputs", ",", "training", "=", "training", ")", "\n", "if", "training", ":", "\n", "            ", "output", "=", "tf", ".", "nn", ".", "dropout", "(", "output", ",", "rate", "=", "self", ".", "postprocess_dropout", ")", "\n", "", "return", "inputs", "+", "output", "\n", "# return output", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__": [[94, 120], ["tensorflow.python.keras.layers.Layer.__init__", "range", "transformer.LayerNormalization", "transformer.attention.SelfAttention", "transformer.ffn.FeedForwardNetwork", "transformer.EncoderStack.layers.append", "transformer.EncoderStack.layers.append", "transformer.PrePostProcessingWrapper", "transformer.PrePostProcessingWrapper", "transformer.PrePostProcessingWrapper"], "methods", ["home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "EncoderStack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "with_ffn", "=", "hparams", "[", "\"with_ffn\"", "]", "\n", "self", ".", "layers", "=", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "hparams", "[", "\"num_hidden_layers\"", "]", ")", ":", "\n", "            ", "attention_layer", "=", "SelfAttention", "(", "\n", "hparams", "[", "\"hidden_size\"", "]", ",", "hparams", "[", "\"output_size\"", "]", ",", "\n", "hparams", "[", "\"num_heads\"", "]", ",", "\n", "hparams", "[", "\"attention_dropout\"", "]", ")", "\n", "if", "self", ".", "with_ffn", ":", "\n", "                ", "ffn_layer", "=", "FeedForwardNetwork", "(", "\n", "hparams", "[", "\"output_size\"", "]", ",", "hparams", "[", "\"filter_size\"", "]", ",", "\n", "hparams", "[", "\"relu_dropout\"", "]", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "[", "\n", "PrePostProcessingWrapper", "(", "attention_layer", ",", "hparams", ")", ",", "\n", "PrePostProcessingWrapper", "(", "ffn_layer", ",", "hparams", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "[", "\n", "PrePostProcessingWrapper", "(", "attention_layer", ",", "hparams", ")", "\n", "]", ")", "\n", "\n", "", "", "self", ".", "output_normalization", "=", "LayerNormalization", "(", "hparams", "[", "\"output_size\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llan-ml_MetaTNE.transformer.transformer.EncoderStack.call": [[121, 136], ["enumerate", "transformer.EncoderStack.output_normalization", "tensorflow.name_scope", "tensorflow.name_scope", "attention_layer", "tensorflow.name_scope", "ffn_layer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "encoder_inputs", ",", "training", ")", ":", "\n", "        ", "output", "=", "encoder_inputs", "\n", "for", "n", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "attention_layer", "=", "layer", "[", "0", "]", "\n", "if", "self", ".", "with_ffn", ":", "\n", "                ", "ffn_layer", "=", "layer", "[", "1", "]", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "f\"layer_{n}\"", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"attention\"", ")", ":", "\n", "                    ", "output", "=", "attention_layer", "(", "\n", "output", ",", "training", "=", "training", ")", "\n", "", "if", "self", ".", "with_ffn", ":", "\n", "                    ", "with", "tf", ".", "name_scope", "(", "\"ffn\"", ")", ":", "\n", "                        ", "output", "=", "ffn_layer", "(", "output", ",", "training", "=", "training", ")", "\n", "", "", "", "", "return", "self", ".", "output_normalization", "(", "output", ")", "\n", "", "", ""]]}