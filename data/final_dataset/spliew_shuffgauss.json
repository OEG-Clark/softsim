{"home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ShuffGaussRDPtoDP.__init__": [[128, 139], ["numpy.linspace().astype", "numpy.zeros_like", "numpy.linspace"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "sigma0", ":", "float", ",", "shuffn", ":", "int", ",", "m", ":", "int", ",", "verbose", ":", "bool", "=", "True", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "shuffn", "=", "shuffn", "\n", "self", ".", "m", "=", "m", "# max lmbda", "\n", "self", ".", "sigma0", "=", "sigma0", "\n", "self", ".", "maxlmbdas", "=", "np", ".", "linspace", "(", "1", ",", "self", ".", "m", ",", "self", ".", "m", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "RDPs_int", "=", "np", ".", "zeros_like", "(", "\n", "self", ".", "maxlmbdas", ",", "float", "\n", ")", "# store shuffle rdp from **lmbda=1** without composition", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ShuffGaussRDPtoDP.get_rdps": [[140, 159], ["tqdm.tqdm.tqdm", "rdp_func", "rdp_func"], "methods", ["None"], ["", "def", "get_rdps", "(", "self", ",", "rdps_int", ":", "np", ".", "ndarray", ",", "rdp_func", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"get rdp as an array\n\n        Args:\n            rdps_int (int): initial array of rdp\n            rdp_func (_type_): function that calculates rdp\n\n        Returns:\n            np.ndarray: _description_\n        \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "for", "i", "in", "tqdm", "(", "self", ".", "maxlmbdas", ")", ":", "\n", "                ", "if", "i", ">", "1", ":", "\n", "                    ", "rdps_int", "[", "i", "-", "1", "]", "=", "rdp_func", "(", "i", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "self", ".", "maxlmbdas", ":", "\n", "                ", "if", "i", ">", "1", ":", "\n", "                    ", "rdps_int", "[", "i", "-", "1", "]", "=", "rdp_func", "(", "i", ")", "\n", "", "", "", "return", "rdps_int", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ShuffGaussRDPtoDP.shuff": [[160, 165], ["functools.partial", "bounds.ShuffGaussRDPtoDP.any", "bounds.ShuffGaussRDPtoDP.get_rdps"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ShuffGaussRDPtoDP.get_rdps"], ["", "def", "shuff", "(", "self", ",", "shuffn", ",", "rdps_int", ")", ":", "\n", "        ", "self", ".", "shuffrdpfunc", "=", "partial", "(", "shuffle_gauss_rdp", ",", "sigma0", "=", "self", ".", "sigma0", ",", "n", "=", "shuffn", ")", "\n", "if", "rdps_int", ".", "any", "(", ")", "==", "False", ":", "\n", "            ", "rdps_int", "=", "self", ".", "get_rdps", "(", "rdps_int", ",", "self", ".", "shuffrdpfunc", ")", "\n", "", "return", "rdps_int", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ShuffGaussRDPtoDP.get_shuff": [[166, 169], ["bounds.ShuffGaussRDPtoDP.shuff"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.SubGaussRDPtoDP.shuff"], ["", "def", "get_shuff", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run this before get eps\"\"\"", "\n", "self", ".", "RDPs_int", "=", "self", ".", "shuff", "(", "self", ".", "shuffn", ",", "self", ".", "RDPs_int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ShuffGaussRDPtoDP.get_eps": [[170, 194], ["bounds._check_delta", "numpy.argmin", "bounds.ShuffGaussRDPtoDP.RDPs_int.any", "ValueError", "utils.fun_int", "warnings.warn", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds._check_delta", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.fun_int"], ["", "def", "get_eps", "(", "self", ",", "delta", ":", "float", ",", "coeff", ":", "int", ")", "->", "tuple", ":", "# minimize over \\lambda", "\n", "        ", "\"\"\"Get epsilon given delta and coeff (no of iter)\n        it first calculate subshuff rdp for all moments\n        \"\"\"", "\n", "_check_delta", "(", "delta", ")", "\n", "\n", "if", "self", ".", "RDPs_int", ".", "any", "(", ")", "==", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"The RDPs are not initialized! Run get_shuff first!\"", ")", "\n", "\n", "", "rdp2dp", "=", "[", "fun_int", "(", "i", ",", "delta", ",", "coeff", ",", "self", ".", "RDPs_int", ")", "for", "i", "in", "self", ".", "maxlmbdas", "]", "\n", "bestint", "=", "np", ".", "argmin", "(", "rdp2dp", ")", "\n", "\n", "if", "bestint", "==", "0", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Warning: Smallest lambda = 1.\"", ")", "\n", "\n", "", "", "if", "bestint", "==", "self", ".", "m", "-", "1", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Warning: Reach quadratic upper bound: m_max.\"", ")", "\n", "# In this case, we should increase m, but for now we leave it for future improvement", "\n", "\n", "", "", "bestlmbda", "=", "self", ".", "maxlmbdas", "[", "bestint", "]", "\n", "\n", "return", "rdp2dp", "[", "bestint", "]", ",", "bestlmbda", "# return eps, best lambda", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.SubShuffGaussRDPtoDP.__init__": [[199, 205], ["bounds.ShuffGaussRDPtoDP.__init__"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.FASCIGaussRDPtoDP.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sigma0", ":", "float", ",", "n", ":", "int", ",", "shuffn", ":", "int", ",", "m", ":", "int", ",", "verbose", ":", "bool", "=", "True", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "sigma0", ",", "shuffn", ",", "m", ",", "verbose", ")", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "gamma", "=", "self", ".", "shuffn", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.SubShuffGaussRDPtoDP.subshuff": [[206, 217], ["functools.partial", "bounds.SubShuffGaussRDPtoDP.any", "bounds.SubShuffGaussRDPtoDP.get_rdps"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ShuffGaussRDPtoDP.get_rdps"], ["", "def", "subshuff", "(", "self", ",", "shuffn", ":", "int", ",", "rdps_int", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"subsample shuffle rdp.\n        Calculate shuffle rdp up to max order if not calculated\n\n        \"\"\"", "\n", "self", ".", "subshufffunc", "=", "partial", "(", "\n", "get_subshuff_gauss_rdp", ",", "sigma0", "=", "self", ".", "sigma0", ",", "gamma", "=", "self", ".", "gamma", ",", "subno", "=", "shuffn", "\n", ")", "\n", "if", "rdps_int", ".", "any", "(", ")", "==", "False", ":", "\n", "            ", "rdps_int", "=", "self", ".", "get_rdps", "(", "rdps_int", ",", "self", ".", "subshufffunc", ")", "\n", "", "return", "rdps_int", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.SubShuffGaussRDPtoDP.get_subshuff": [[218, 220], ["bounds.SubShuffGaussRDPtoDP.subshuff"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.SubShuffGaussRDPtoDP.subshuff"], ["", "def", "get_subshuff", "(", "self", ")", ":", "\n", "        ", "self", ".", "RDPs_int", "=", "self", ".", "subshuff", "(", "self", ".", "shuffn", ",", "self", ".", "RDPs_int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.SubGaussRDPtoDP.__init__": [[232, 236], ["bounds.SubShuffGaussRDPtoDP.__init__"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.FASCIGaussRDPtoDP.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sigma0", ":", "float", ",", "n", ":", "int", ",", "shuffn", ":", "int", ",", "m", ":", "int", ",", "verbose", ":", "bool", "=", "True", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "sigma0", ",", "n", ",", "shuffn", ",", "m", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.SubGaussRDPtoDP.shuff": [[237, 242], ["bounds.SubGaussRDPtoDP.any", "bounds.SubGaussRDPtoDP.get_rdps"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ShuffGaussRDPtoDP.get_rdps"], ["", "def", "shuff", "(", "self", ",", "shuffn", ",", "rdps_int", ")", ":", "\n", "        ", "self", ".", "shuffrdpfunc", "=", "lambda", "x", ":", "x", "/", "(", "2", "*", "self", ".", "sigma0", "**", "2", ")", "\n", "if", "rdps_int", ".", "any", "(", ")", "==", "False", ":", "\n", "            ", "rdps_int", "=", "self", ".", "get_rdps", "(", "rdps_int", ",", "self", ".", "shuffrdpfunc", ")", "\n", "", "return", "rdps_int", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ApproxSCIGaussRDPtoDP.__init__": [[247, 268], ["bounds.SubShuffGaussRDPtoDP.__init__", "numpy.zeros_like", "numpy.zeros_like", "int"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.FASCIGaussRDPtoDP.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sigma0", ",", "\n", "n", ":", "int", ",", "\n", "shuffn", ":", "int", ",", "\n", "m", ":", "int", ",", "\n", "error", ":", "float", "=", "0.5", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "sigma0", ",", "n", ",", "shuffn", ",", "m", ",", "verbose", ")", "\n", "# self.error = error", "\n", "self", ".", "displaced_n", "=", "int", "(", "(", "1", "-", "error", ")", "*", "shuffn", ")", "+", "1", "\n", "# self.rdp = partial(shuffle_gauss_rdp, sigma0=self.sigma0, n=displaced_n)", "\n", "# self.single_rdp = partial(shuffle_gauss_rdp, sigma0=self.sigma0, n=1)", "\n", "self", ".", "single_subshuffRDPs_int", "=", "np", ".", "zeros_like", "(", "\n", "self", ".", "maxlmbdas", ",", "float", "\n", ")", "# store rdp from lmbda=1", "\n", "self", ".", "subshuffRDPs_int", "=", "np", ".", "zeros_like", "(", "\n", "self", ".", "maxlmbdas", ",", "float", "\n", ")", "# store rdp from lmbda=1", "\n", "self", ".", "chernoff_factor", "=", "-", "1", "*", "self", ".", "shuffn", "*", "error", "**", "2", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.ApproxSCIGaussRDPtoDP.get_subshuff": [[269, 285], ["bounds.ApproxSCIGaussRDPtoDP.subshuffRDPs_int.any", "bounds.ApproxSCIGaussRDPtoDP.subshuff", "bounds.ApproxSCIGaussRDPtoDP.single_subshuffRDPs_int.any", "bounds.ApproxSCIGaussRDPtoDP.subshuff", "bounds.ApproxSCIGaussRDPtoDP.RDPs_int.any", "utils.stable_logsumexp"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.SubShuffGaussRDPtoDP.subshuff", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.SubShuffGaussRDPtoDP.subshuff", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.stable_logsumexp"], ["", "def", "get_subshuff", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "subshuffRDPs_int", ".", "any", "(", ")", "==", "False", ":", "\n", "            ", "self", ".", "subshuffRDPs_int", "=", "self", ".", "subshuff", "(", "self", ".", "displaced_n", ",", "self", ".", "RDPs_int", ")", "\n", "", "if", "self", ".", "single_subshuffRDPs_int", ".", "any", "(", ")", "==", "False", ":", "\n", "            ", "self", ".", "single_subshuffRDPs_int", "=", "self", ".", "subshuff", "(", "\n", "1", ",", "self", ".", "single_subshuffRDPs_int", "\n", ")", "\n", "", "if", "self", ".", "RDPs_int", ".", "any", "(", ")", "==", "False", ":", "\n", "            ", "for", "i", "in", "self", ".", "maxlmbdas", ":", "\n", "                ", "if", "i", ">", "1", ":", "\n", "                    ", "factor1", "=", "[", "\n", "(", "i", "-", "1", ")", "*", "self", ".", "single_subshuffRDPs_int", "[", "i", "-", "1", "]", "\n", "+", "self", ".", "chernoff_factor", "\n", "]", "\n", "factor2", "=", "[", "(", "i", "-", "1", ")", "*", "self", ".", "subshuffRDPs_int", "[", "i", "-", "1", "]", "]", "\n", "self", ".", "RDPs_int", "[", "i", "-", "1", "]", "=", "stable_logsumexp", "(", "factor1", "+", "factor2", ")", "/", "(", "i", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.FastShuffGaussRDPtoDP.__init__": [[288, 301], ["numpy.linspace().astype", "numpy.zeros_like", "functools.partial", "numpy.linspace"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "sigma0", ":", "float", ",", "shuffn", ":", "int", ",", "m", ":", "int", ",", "m_max", "=", "100", ",", "verbose", ":", "bool", "=", "True", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "shuffn", "=", "shuffn", "\n", "self", ".", "m", "=", "m", "# initial maxlmbda to evaluate", "\n", "self", ".", "m_max", "=", "m_max", "\n", "self", ".", "sigma0", "=", "sigma0", "\n", "self", ".", "lmbdas", "=", "np", ".", "linspace", "(", "1", ",", "self", ".", "m", ",", "self", ".", "m", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "RDPs_int", "=", "np", ".", "zeros_like", "(", "\n", "self", ".", "lmbdas", ",", "float", "\n", ")", "# store shuffle rdp from **lmbda=1** without composition", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "rdp", "=", "partial", "(", "shuffle_gauss_rdp", ",", "sigma0", "=", "self", ".", "sigma0", ",", "n", "=", "self", ".", "shuffn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.FastShuffGaussRDPtoDP.get_eps_fast": [[302, 358], ["bounds._check_delta", "numpy.zeros_like", "bounds.FastShuffGaussRDPtoDP.get_eps_fast.bisection"], "methods", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds._check_delta"], ["", "def", "get_eps_fast", "(", "self", ",", "delta", ",", "coeff", ")", ":", "\n", "\n", "        ", "_check_delta", "(", "delta", ")", "\n", "\n", "self", ".", "RDPs_int", "=", "np", ".", "zeros_like", "(", "self", ".", "lmbdas", ",", "float", ")", "\n", "self", ".", "RDPs_int", "[", "self", ".", "m", "-", "1", "]", "=", "self", ".", "rdp", "(", "self", ".", "m", ")", "*", "coeff", "\n", "self", ".", "RDPs_int", "[", "self", ".", "m", "-", "2", "]", "=", "self", ".", "rdp", "(", "self", ".", "m", "-", "1", ")", "*", "coeff", "\n", "\n", "while", "self", ".", "m", "<=", "self", ".", "m_max", "and", "(", "\n", "fun_int", "(", "self", ".", "m", ",", "delta", ",", "coeff", ",", "self", ".", "RDPs_int", ")", "\n", "-", "fun_int", "(", "self", ".", "m", "-", "1", ",", "delta", ",", "coeff", ",", "self", ".", "RDPs_int", ")", "\n", "<", "0", "\n", ")", ":", "\n", "# double m", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "f\"doubling m to {self.m*2}\"", ")", "\n", "", "new_alphas", "=", "range", "(", "self", ".", "m", "+", "1", ",", "self", ".", "m", "*", "2", "+", "1", ",", "1", ")", "\n", "self", ".", "lmbdas", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "lmbdas", ",", "np", ".", "array", "(", "new_alphas", ")", ")", "\n", ")", "# array of integers", "\n", "self", ".", "m", "=", "self", ".", "m", "*", "2", "\n", "self", ".", "RDPs_int", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "RDPs_int", ",", "np", ".", "zeros_like", "(", "new_alphas", ",", "float", ")", ")", "\n", ")", "\n", "self", ".", "RDPs_int", "[", "self", ".", "m", "-", "1", "]", "=", "self", ".", "rdp", "(", "self", ".", "m", ")", "*", "coeff", "\n", "self", ".", "RDPs_int", "[", "self", ".", "m", "-", "2", "]", "=", "self", ".", "rdp", "(", "self", ".", "m", "-", "1", ")", "*", "coeff", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "f\"m is {self.m}.\"", ")", "\n", "if", "self", ".", "m", ">", "self", ".", "m_max", ":", "\n", "                ", "warnings", ".", "warn", "(", "f\"m_max exceedeed.\"", ")", "\n", "\n", "", "", "def", "bisection", "(", "imin", ":", "int", ",", "imax", ":", "int", ")", ":", "\n", "# bisection to find minimum", "\n", "\n", "            ", "imid", "=", "imin", "+", "(", "imax", "-", "imin", ")", "//", "2", "\n", "\n", "if", "imid", "==", "imin", "or", "imid", "==", "imax", ":", "\n", "                ", "return", "imid", "\n", "", "self", ".", "RDPs_int", "[", "imid", "-", "2", "]", "=", "self", ".", "rdp", "(", "imid", "-", "1", ")", "*", "coeff", "\n", "self", ".", "RDPs_int", "[", "imid", "-", "1", "]", "=", "self", ".", "rdp", "(", "imid", ")", "*", "coeff", "\n", "\n", "if", "fun_int", "(", "imid", "-", "1", ",", "delta", ",", "coeff", ",", "self", ".", "RDPs_int", ")", ">", "fun_int", "(", "\n", "imid", ",", "delta", ",", "coeff", ",", "self", ".", "RDPs_int", "\n", ")", ":", "\n", "                ", "return", "bisection", "(", "imid", ",", "imax", ")", "\n", "", "else", ":", "\n", "                ", "return", "bisection", "(", "imin", ",", "imid", ")", "\n", "\n", "", "", "bestlmbda", "=", "bisection", "(", "2", ",", "self", ".", "m", ")", "\n", "\n", "if", "bestlmbda", "==", "self", ".", "m", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Warning: Reach quadratic upper bound: m_max.\"", ")", "\n", "\n", "", "", "return", "fun_int", "(", "bestlmbda", ",", "delta", ",", "coeff", ",", "self", ".", "RDPs_int", ")", ",", "bestlmbda", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.FastSubShuffGaussRDPtoDP.__init__": [[361, 386], ["numpy.linspace().astype", "numpy.zeros_like", "functools.partial", "numpy.linspace"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sigma0", ":", "float", ",", "\n", "n", ":", "int", ",", "\n", "shuffn", ":", "int", ",", "\n", "m", ":", "int", "=", "10", ",", "\n", "m_max", ":", "int", "=", "100", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "shuffn", "=", "shuffn", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "m_max", "=", "m_max", "\n", "self", ".", "sigma0", "=", "sigma0", "\n", "self", ".", "poissrate", "=", "shuffn", "/", "n", "\n", "self", ".", "lmbdas", "=", "np", ".", "linspace", "(", "1", ",", "self", ".", "m", ",", "self", ".", "m", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "RDPs_int", "=", "np", ".", "zeros_like", "(", "\n", "self", ".", "lmbdas", ",", "float", "\n", ")", "# store shuffle rdp from **lmbda=1** without composition", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "rdp", "=", "partial", "(", "\n", "get_subshuff_gauss_rdp", ",", "\n", "sigma0", "=", "self", ".", "sigma0", ",", "\n", "gamma", "=", "self", ".", "poissrate", ",", "\n", "subno", "=", "self", ".", "shuffn", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.FASCIGaussRDPtoDP.__init__": [[390, 418], ["numpy.linspace().astype", "numpy.zeros_like", "functools.partial", "numpy.linspace"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sigma0", ":", "float", ",", "\n", "n", ":", "int", ",", "\n", "shuffn", ",", "\n", "m", ":", "int", "=", "10", ",", "\n", "m_max", "=", "100", ",", "\n", "error", "=", "0.5", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "shuffn", "=", "shuffn", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "m_max", "=", "m_max", "\n", "self", ".", "sigma0", "=", "sigma0", "\n", "self", ".", "poissrate", "=", "shuffn", "/", "n", "\n", "self", ".", "error", "=", "error", "\n", "self", ".", "lmbdas", "=", "np", ".", "linspace", "(", "1", ",", "self", ".", "m", ",", "self", ".", "m", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "RDPs_int", "=", "np", ".", "zeros_like", "(", "\n", "self", ".", "lmbdas", ",", "float", "\n", ")", "# store shuffle rdp from **lmbda=1** without composition", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "rdp", "=", "partial", "(", "\n", "get_approxsci_gauss_rdp", ",", "\n", "sigma0", "=", "self", ".", "sigma0", ",", "\n", "gamma", "=", "self", ".", "poissrate", ",", "\n", "subno", "=", "self", ".", "shuffn", ",", "\n", "error", "=", "self", ".", "error", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds._check_delta": [[26, 31], ["type", "TypeError", "ValueError", "type"], "function", ["None"], ["def", "_check_delta", "(", "delta", ")", ":", "\n", "    ", "if", "type", "(", "delta", ")", "!=", "float", ":", "\n", "        ", "raise", "TypeError", "(", "f\"delta must be float, found delta {type(delta)}\"", ")", "\n", "", "if", "delta", "<", "0", "or", "delta", ">", "1", ":", "\n", "        ", "raise", "ValueError", "(", "f\"delta must be between 0 and 1, found delta = {delta}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds._check_lmbda": [[33, 38], ["type", "TypeError", "ValueError", "type"], "function", ["None"], ["", "", "def", "_check_lmbda", "(", "lmbda", ")", ":", "\n", "    ", "if", "type", "(", "lmbda", ")", "!=", "int", ":", "\n", "        ", "raise", "TypeError", "(", "f\"lmbda must be integer, found lmbda {type(lmbda)}\"", ")", "\n", "", "if", "lmbda", "<=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "f\"lmbda must be larger than 1, found delta = {lmbda}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.shuffle_gauss_rdp": [[40, 57], ["utils.accel_asc", "warnings.warn", "utils.eff_log_multinomial_coeff", "sum", "multinom.append", "utils.stable_logsumexp", "numpy.log"], "function", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.accel_asc", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.eff_log_multinomial_coeff", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.stable_logsumexp"], ["", "", "def", "shuffle_gauss_rdp", "(", "lmbda", ":", "int", ",", "sigma0", ":", "float", "=", "1", ",", "n", ":", "int", "=", "100", ")", ":", "\n", "    ", "\"\"\"Returns the shuffle gaussian RDP\"\"\"", "\n", "if", "lmbda", ">", "100", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"This will probably take a long time.\"", ")", "\n", "# partitions = []", "\n", "# findCombinations(lmbda, partitions)", "\n", "", "partitions", "=", "accel_asc", "(", "lmbda", ")", "\n", "multinom", "=", "[", "]", "\n", "for", "parts", "in", "partitions", ":", "\n", "        ", "multicoeff", "=", "eff_log_multinomial_coeff", "(", "parts", ",", "n", ")", "\n", "square_of_part", "=", "sum", "(", "[", "i", "**", "2", "for", "i", "in", "parts", "]", ")", "\n", "multinom", ".", "append", "(", "\n", "multicoeff", "\n", "+", "(", "square_of_part", "-", "lmbda", ")", "/", "(", "2", "*", "sigma0", "**", "2", ")", "\n", "-", "lmbda", "*", "np", ".", "log", "(", "n", ")", "\n", ")", "\n", "", "return", "stable_logsumexp", "(", "multinom", ")", "/", "(", "lmbda", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds._subshuff_gauss_rdp": [[59, 78], ["utils.get_binom_coeffs", "numpy.linspace().astype", "numpy.exp", "numpy.min", "numpy.log", "utils.stable_logsumexp", "numpy.linspace", "numpy.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.get_binom_coeffs", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.stable_logsumexp"], ["", "def", "_subshuff_gauss_rdp", "(", "lmbda", ":", "int", ",", "gamma", ":", "float", ",", "shuffRDPs", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "\"\"\"helper function for subssampled shuff gauss using theorem 9 of [wbk19]\"\"\"", "\n", "logBinomC", "=", "get_binom_coeffs", "(", "lmbda", ")", "\n", "\n", "lmbdas", "=", "np", ".", "linspace", "(", "1", ",", "lmbda", ",", "lmbda", ")", ".", "astype", "(", "int", ")", "\n", "\n", "exp_eps2", "=", "np", ".", "exp", "(", "shuffRDPs", "[", "1", "]", ")", "\n", "min_term2", "=", "np", ".", "min", "(", "[", "4", "*", "exp_eps2", "-", "4", ",", "2", "*", "exp_eps2", "]", ")", "\n", "\n", "term2", "=", "2", "*", "np", ".", "log", "(", "gamma", ")", "+", "logBinomC", "[", "lmbda", ",", "2", "]", "+", "np", ".", "log", "(", "min_term2", ")", "\n", "\n", "termj", "=", "[", "\n", "j", "*", "np", ".", "log", "(", "gamma", ")", "+", "logBinomC", "[", "lmbda", ",", "j", "]", "+", "(", "j", "-", "1", ")", "*", "shuffRDPs", "[", "j", "-", "1", "]", "\n", "for", "j", "in", "lmbdas", "[", "2", ":", "]", "\n", "]", "\n", "\n", "moments", "=", "[", "0", "]", "+", "[", "term2", "]", "+", "termj", "\n", "\n", "return", "stable_logsumexp", "(", "moments", ")", "/", "(", "lmbda", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.get_subshuff_gauss_rdp": [[96, 111], ["numpy.linspace().astype", "numpy.zeros_like", "bounds._subshuff_gauss_rdp", "numpy.linspace", "bounds.shuffle_gauss_rdp"], "function", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds._subshuff_gauss_rdp", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.shuffle_gauss_rdp"], ["", "def", "get_subshuff_gauss_rdp", "(", "\n", "lmbda", ":", "int", ",", "sigma0", ":", "float", "=", "1", ",", "gamma", ":", "float", "=", "0.1", ",", "subno", ":", "int", "=", "10", "\n", ")", ":", "\n", "    ", "\"\"\"subssampled shuff gauss using theorem 9 of [wbk19]\n    use gamma and subsampled n as variables\n    \"\"\"", "\n", "\n", "lmbdas", "=", "np", ".", "linspace", "(", "1", ",", "lmbda", ",", "lmbda", ")", ".", "astype", "(", "int", ")", "\n", "shuffRDPs", "=", "np", ".", "zeros_like", "(", "lmbdas", ",", "float", ")", "\n", "\n", "for", "i", "in", "lmbdas", ":", "\n", "        ", "if", "i", ">", "1", ":", "\n", "            ", "shuffRDPs", "[", "i", "-", "1", "]", "=", "shuffle_gauss_rdp", "(", "i", ",", "sigma0", ",", "subno", ")", "\n", "\n", "", "", "return", "_subshuff_gauss_rdp", "(", "lmbda", ",", "gamma", ",", "shuffRDPs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.get_approxsci_gauss_rdp": [[113, 125], ["int", "bounds.get_subshuff_gauss_rdp", "utils.stable_logsumexp", "bounds.get_subshuff_gauss_rdp"], "function", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.get_subshuff_gauss_rdp", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.stable_logsumexp", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.bounds.get_subshuff_gauss_rdp"], ["", "def", "get_approxsci_gauss_rdp", "(", "\n", "lmbda", ":", "int", ",", "sigma0", ":", "float", "=", "1", ",", "gamma", ":", "float", "=", "0.1", ",", "subno", ":", "int", "=", "10", ",", "error", "=", "0.5", "\n", ")", ":", "\n", "    ", "chernoff_factor", "=", "-", "1", "*", "subno", "*", "error", "**", "2", "/", "2", "\n", "displaced_n", "=", "int", "(", "(", "1", "-", "error", ")", "*", "subno", ")", "+", "1", "\n", "\n", "factor1", "=", "(", "\n", "get_subshuff_gauss_rdp", "(", "lmbda", ",", "sigma0", ",", "gamma", ",", "1", ")", "*", "(", "lmbda", "-", "1", ")", "+", "chernoff_factor", "\n", ")", "\n", "factor2", "=", "get_subshuff_gauss_rdp", "(", "lmbda", ",", "sigma0", ",", "gamma", ",", "displaced_n", ")", "*", "(", "lmbda", "-", "1", ")", "\n", "\n", "return", "stable_logsumexp", "(", "[", "factor1", "]", "+", "[", "factor2", "]", ")", "/", "(", "lmbda", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.logstirling": [[10, 21], ["numpy.sqrt", "scipy.special.gammaln", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "function", ["None"], ["def", "logstirling", "(", "l", ":", "int", ",", "k", ":", "int", ")", ":", "\n", "    ", "\"\"\"Calculate large binomial coefficients with stirling approx.\n    for large k, see\n    https://math.stackexchange.com/questions/64716/approximating-the-logarithm-of-the-binomial-coefficient\n    for small k (sqrt(n)), see\n    https://math.stackexchange.com/questions/1447296/stirlings-approximation-for-binomial-coefficient\n    \"\"\"", "\n", "if", "k", "<", "np", ".", "sqrt", "(", "l", ")", ":", "\n", "        ", "return", "k", "*", "np", ".", "log", "(", "l", ")", "-", "gammaln", "(", "k", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "l", "*", "np", ".", "log", "(", "l", ")", "-", "k", "*", "np", ".", "log", "(", "k", ")", "-", "(", "l", "-", "k", ")", "*", "np", ".", "log", "(", "l", "-", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.fun_int": [[23, 39], ["numpy.log", "numpy.log", "numpy.log"], "function", ["None"], ["", "", "def", "fun_int", "(", "i", ":", "int", ",", "delta", ":", "float", ",", "coeff", ":", "int", ",", "RDPs_int", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "\"\"\"Relates RDP to approximate DP.\n\n    Parameters\n    -----------\n    RDPs_int: array-like, shape (max lambda)\n        RDP starting with \\lambda =1\n\n    i is lmbda\n    \"\"\"", "\n", "if", "i", "<=", "1", "or", "i", ">", "RDPs_int", ".", "shape", "[", "0", "]", ":", "\n", "        ", "return", "np", ".", "inf", "\n", "", "else", ":", "\n", "        ", "return", "(", "np", ".", "log", "(", "1", "/", "delta", ")", "+", "(", "i", "-", "1", ")", "*", "np", ".", "log", "(", "1", "-", "1", "/", "i", ")", "-", "np", ".", "log", "(", "i", ")", ")", "/", "(", "\n", "i", "-", "1", "\n", ")", "+", "RDPs_int", "[", "i", "-", "1", "]", "*", "coeff", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.inv_permute": [[41, 53], ["numpy.array", "numpy.unique", "len", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln().sum", "scipy.special.gammaln", "scipy.special.gammaln().sum", "scipy.special.gammaln", "scipy.special.gammaln"], "function", ["None"], ["", "", "def", "inv_permute", "(", "k", ":", "list", ",", "n", ":", "int", ")", ":", "\n", "    ", "\"\"\"Calculate the permutation invariant part of multinomial expansion.\n    given eg, x_1^2x_2^2x_3^1, return the no. of permutation w.p. to\n    the underscore index\n    \"\"\"", "\n", "zeros", "=", "n", "-", "len", "(", "k", ")", "\n", "k", "=", "np", ".", "array", "(", "k", ")", "\n", "_", ",", "counts", "=", "np", ".", "unique", "(", "k", ",", "return_counts", "=", "True", ")", "\n", "if", "zeros", ">=", "0", ":", "\n", "        ", "return", "gammaln", "(", "n", "+", "1", ")", "-", "(", "gammaln", "(", "zeros", "+", "1", ")", "+", "gammaln", "(", "counts", "+", "1", ")", ".", "sum", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "gammaln", "(", "n", "+", "1", ")", "-", "(", "gammaln", "(", "counts", "+", "1", ")", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.eff_log_multinomial_coeff": [[56, 62], ["utils.log_multinomial_coeff", "utils.inv_permute"], "function", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.log_multinomial_coeff", "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.inv_permute"], ["", "", "def", "eff_log_multinomial_coeff", "(", "k", ",", "n", ")", ":", "\n", "    ", "\"\"\"Given a partition k of n,\n    return the multinomial coefficient times the\n    no of invariant permutation\n    \"\"\"", "\n", "return", "log_multinomial_coeff", "(", "k", ")", "+", "inv_permute", "(", "k", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.log_multinomial_coeff": [[64, 71], ["numpy.array", "scipy.special.gammaln", "scipy.special.gammaln().sum", "np.array.sum", "scipy.special.gammaln"], "function", ["None"], ["", "def", "log_multinomial_coeff", "(", "c", ")", ":", "\n", "    ", "\"\"\"Calculate the log of multinomial coefficients\n    :param list of number:\n    :return: multinomial coeff\n    \"\"\"", "\n", "c", "=", "np", ".", "array", "(", "c", ")", "\n", "return", "gammaln", "(", "c", ".", "sum", "(", ")", "+", "1", ")", "-", "gammaln", "(", "c", "+", "1", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.accel_asc": [[76, 97], ["range"], "function", ["None"], ["", "def", "accel_asc", "(", "n", ")", ":", "\n", "    ", "a", "=", "[", "0", "for", "i", "in", "range", "(", "n", "+", "1", ")", "]", "\n", "k", "=", "1", "\n", "y", "=", "n", "-", "1", "\n", "while", "k", "!=", "0", ":", "\n", "        ", "x", "=", "a", "[", "k", "-", "1", "]", "+", "1", "\n", "k", "-=", "1", "\n", "while", "2", "*", "x", "<=", "y", ":", "\n", "            ", "a", "[", "k", "]", "=", "x", "\n", "y", "-=", "x", "\n", "k", "+=", "1", "\n", "", "l", "=", "k", "+", "1", "\n", "while", "x", "<=", "y", ":", "\n", "            ", "a", "[", "k", "]", "=", "x", "\n", "a", "[", "l", "]", "=", "y", "\n", "yield", "a", "[", ":", "k", "+", "2", "]", "\n", "x", "+=", "1", "\n", "y", "-=", "1", "\n", "", "a", "[", "k", "]", "=", "x", "+", "y", "\n", "y", "=", "x", "+", "y", "-", "1", "\n", "yield", "a", "[", ":", "k", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.stable_logsumexp": [[99, 102], ["numpy.max", "numpy.log", "numpy.sum", "numpy.exp"], "function", ["None"], ["", "", "def", "stable_logsumexp", "(", "x", ")", ":", "\n", "    ", "a", "=", "np", ".", "max", "(", "x", ")", "\n", "return", "a", "+", "np", ".", "log", "(", "np", ".", "sum", "(", "np", ".", "exp", "(", "x", "-", "a", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.stable_logsumexp_two": [[104, 110], ["numpy.maximum", "numpy.isneginf", "numpy.log", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "def", "stable_logsumexp_two", "(", "x", ",", "y", ")", ":", "\n", "    ", "a", "=", "np", ".", "maximum", "(", "x", ",", "y", ")", "\n", "if", "np", ".", "isneginf", "(", "a", ")", ":", "\n", "        ", "return", "a", "\n", "", "else", ":", "\n", "        ", "return", "a", "+", "np", ".", "log", "(", "np", ".", "exp", "(", "x", "-", "a", ")", "+", "np", ".", "exp", "(", "y", "-", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.logcomb": [[112, 115], ["scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln"], "function", ["None"], ["", "", "def", "logcomb", "(", "n", ",", "k", ")", ":", "\n", "\n", "    ", "return", "gammaln", "(", "n", "+", "1", ")", "-", "gammaln", "(", "n", "-", "k", "+", "1", ")", "-", "gammaln", "(", "k", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.get_binom_coeffs": [[117, 131], ["numpy.zeros", "range", "range", "range", "range", "utils.stable_logsumexp_two"], "function", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.stable_logsumexp_two"], ["", "def", "get_binom_coeffs", "(", "sz", ")", ":", "\n", "    ", "C", "=", "np", ".", "zeros", "(", "shape", "=", "(", "sz", "+", "1", ",", "sz", "+", "1", ")", ")", "\n", "# for k in range(1,sz + 1,1):", "\n", "#    C[0, k] = -np.inf", "\n", "for", "n", "in", "range", "(", "sz", "+", "1", ")", ":", "\n", "        ", "C", "[", "n", ",", "0", "]", "=", "0", "# 1", "\n", "", "for", "n", "in", "range", "(", "1", ",", "sz", "+", "1", ",", "1", ")", ":", "\n", "        ", "C", "[", "n", ",", "n", "]", "=", "0", "\n", "", "for", "n", "in", "range", "(", "1", ",", "sz", "+", "1", ",", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "1", ",", "n", ",", "1", ")", ":", "\n", "# numerical stable way of implementing the recursion rule", "\n", "            ", "C", "[", "n", ",", "k", "]", "=", "stable_logsumexp_two", "(", "C", "[", "n", "-", "1", ",", "k", "-", "1", "]", ",", "C", "[", "n", "-", "1", ",", "k", "]", ")", "\n", "# only the lower triangular part of the matrix matters", "\n", "", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.get_binom_coeffs_dict": [[133, 147], ["range", "range", "range", "range", "utils.stable_logsumexp_two"], "function", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.stable_logsumexp_two"], ["", "def", "get_binom_coeffs_dict", "(", "sz", ")", ":", "\n", "    ", "C", "=", "{", "}", "# np.zeros(shape = (sz + 1, sz + 1));", "\n", "# for k in range(1,sz + 1,1):", "\n", "#    C[0, k] = -np.inf", "\n", "for", "n", "in", "range", "(", "sz", "+", "1", ")", ":", "\n", "        ", "C", "[", "(", "n", ",", "0", ")", "]", "=", "0", "# 1", "\n", "", "for", "n", "in", "range", "(", "1", ",", "sz", "+", "1", ",", "1", ")", ":", "\n", "        ", "C", "[", "(", "n", ",", "n", ")", "]", "=", "0", "\n", "", "for", "n", "in", "range", "(", "1", ",", "sz", "+", "1", ",", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "1", ",", "n", ",", "1", ")", ":", "\n", "# numerical stable way of implementing the recursion rule", "\n", "            ", "C", "[", "(", "n", ",", "k", ")", "]", "=", "stable_logsumexp_two", "(", "C", "[", "(", "n", "-", "1", ",", "k", "-", "1", ")", "]", ",", "C", "[", "(", "n", "-", "1", ",", "k", ")", "]", ")", "\n", "# only the lower triangular part of the matrix matters", "\n", "", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.expand_binom_coeffs_dict": [[149, 158], ["range", "range", "range", "range", "utils.stable_logsumexp_two"], "function", ["home.repos.pwc.inspect_result.spliew_shuffgauss.shuffgauss.utils.stable_logsumexp_two"], ["", "def", "expand_binom_coeffs_dict", "(", "C", ",", "sz", ",", "sznew", ")", ":", "\n", "    ", "for", "n", "in", "range", "(", "sz", ",", "sznew", "+", "1", ",", "1", ")", ":", "\n", "        ", "C", "[", "(", "n", ",", "0", ")", "]", "=", "0", "\n", "", "for", "n", "in", "range", "(", "sz", ",", "sznew", "+", "1", ",", "1", ")", ":", "\n", "        ", "C", "[", "(", "n", ",", "n", ")", "]", "=", "0", "\n", "", "for", "n", "in", "range", "(", "sz", ",", "sznew", "+", "1", ",", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "1", ",", "n", ",", "1", ")", ":", "\n", "            ", "C", "[", "(", "n", ",", "k", ")", "]", "=", "stable_logsumexp_two", "(", "C", "[", "(", "n", "-", "1", ",", "k", "-", "1", ")", "]", ",", "C", "[", "(", "n", "-", "1", ",", "k", ")", "]", ")", "\n", "", "", "return", "C", "# also need to update the size of C to sznew whenever this function is called just to keep track.", "\n", "", ""]]}