{"home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.Toy.__init__": [[24, 29], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Toy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "centers", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "-", "3.0", ",", "0", "]", ",", "\n", "[", "3.0", ",", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.Toy.forward": [[30, 55], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "[].item", "[].item", "[].item", "[].item", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "compute_grad", "=", "False", ")", ":", "\n", "        ", "x1", "=", "x", "[", "0", "]", "\n", "x2", "=", "x", "[", "1", "]", "\n", "\n", "f1", "=", "torch", ".", "clamp", "(", "(", "0.5", "*", "(", "-", "x1", "-", "7", ")", "-", "torch", ".", "tanh", "(", "-", "x2", ")", ")", ".", "abs", "(", ")", ",", "LOWER", ")", ".", "log", "(", ")", "+", "6", "\n", "f2", "=", "torch", ".", "clamp", "(", "(", "0.5", "*", "(", "-", "x1", "+", "3", ")", "+", "torch", ".", "tanh", "(", "-", "x2", ")", "+", "2", ")", ".", "abs", "(", ")", ",", "LOWER", ")", ".", "log", "(", ")", "+", "6", "\n", "c1", "=", "torch", ".", "clamp", "(", "torch", ".", "tanh", "(", "x2", "*", "0.5", ")", ",", "0", ")", "\n", "\n", "f1_sq", "=", "(", "(", "-", "x1", "+", "7", ")", ".", "pow", "(", "2", ")", "+", "0.1", "*", "(", "-", "x2", "-", "8", ")", ".", "pow", "(", "2", ")", ")", "/", "10", "-", "20", "\n", "f2_sq", "=", "(", "(", "-", "x1", "-", "7", ")", ".", "pow", "(", "2", ")", "+", "0.1", "*", "(", "-", "x2", "-", "8", ")", ".", "pow", "(", "2", ")", ")", "/", "10", "-", "20", "\n", "c2", "=", "torch", ".", "clamp", "(", "torch", ".", "tanh", "(", "-", "x2", "*", "0.5", ")", ",", "0", ")", "\n", "\n", "f1", "=", "f1", "*", "c1", "+", "f1_sq", "*", "c2", "\n", "f2", "=", "f2", "*", "c1", "+", "f2_sq", "*", "c2", "\n", "\n", "f", "=", "torch", ".", "tensor", "(", "[", "f1", ",", "f2", "]", ")", "\n", "if", "compute_grad", ":", "\n", "            ", "g11", "=", "torch", ".", "autograd", ".", "grad", "(", "f1", ",", "x1", ",", "retain_graph", "=", "True", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "g12", "=", "torch", ".", "autograd", ".", "grad", "(", "f1", ",", "x2", ",", "retain_graph", "=", "True", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "g21", "=", "torch", ".", "autograd", ".", "grad", "(", "f2", ",", "x1", ",", "retain_graph", "=", "True", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "g22", "=", "torch", ".", "autograd", ".", "grad", "(", "f2", ",", "x2", ",", "retain_graph", "=", "True", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "g", "=", "torch", ".", "Tensor", "(", "[", "[", "g11", ",", "g21", "]", ",", "[", "g12", ",", "g22", "]", "]", ")", "\n", "return", "f", ",", "g", "\n", "", "else", ":", "\n", "            ", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.Toy.batch_forward": [[56, 73], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "f1.view", "f2.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "batch_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "x", "[", ":", ",", "0", "]", "\n", "x2", "=", "x", "[", ":", ",", "1", "]", "\n", "\n", "f1", "=", "torch", ".", "clamp", "(", "(", "0.5", "*", "(", "-", "x1", "-", "7", ")", "-", "torch", ".", "tanh", "(", "-", "x2", ")", ")", ".", "abs", "(", ")", ",", "LOWER", ")", ".", "log", "(", ")", "+", "6", "\n", "f2", "=", "torch", ".", "clamp", "(", "(", "0.5", "*", "(", "-", "x1", "+", "3", ")", "+", "torch", ".", "tanh", "(", "-", "x2", ")", "+", "2", ")", ".", "abs", "(", ")", ",", "LOWER", ")", ".", "log", "(", ")", "+", "6", "\n", "c1", "=", "torch", ".", "clamp", "(", "torch", ".", "tanh", "(", "x2", "*", "0.5", ")", ",", "0", ")", "\n", "\n", "f1_sq", "=", "(", "(", "-", "x1", "+", "7", ")", ".", "pow", "(", "2", ")", "+", "0.1", "*", "(", "-", "x2", "-", "8", ")", ".", "pow", "(", "2", ")", ")", "/", "10", "-", "20", "\n", "f2_sq", "=", "(", "(", "-", "x1", "-", "7", ")", ".", "pow", "(", "2", ")", "+", "0.1", "*", "(", "-", "x2", "-", "8", ")", ".", "pow", "(", "2", ")", ")", "/", "10", "-", "20", "\n", "c2", "=", "torch", ".", "clamp", "(", "torch", ".", "tanh", "(", "-", "x2", "*", "0.5", ")", ",", "0", ")", "\n", "\n", "f1", "=", "f1", "*", "c1", "+", "f1_sq", "*", "c2", "\n", "f2", "=", "f2", "*", "c1", "+", "f2_sq", "*", "c2", "\n", "\n", "f", "=", "torch", ".", "cat", "(", "[", "f1", ".", "view", "(", "-", "1", ",", "1", ")", ",", "f2", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "-", "1", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.plotme": [[80, 121], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "torch.Tensor().double", "torch.Tensor().double", "F.batch_forward", "matplotlib.figure", "matplotlib.subplot", "matplotlib.contour", "matplotlib.title", "matplotlib.subplot", "matplotlib.contour", "matplotlib.title", "matplotlib.subplot", "matplotlib.contour", "matplotlib.legend", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "Ys[].view", "enumerate", "Ys[].view", "enumerate", "F.batch_forward.mean().view", "enumerate", "torch.Tensor", "torch.Tensor", "all_traj.items", "matplotlib.plot", "all_traj.items", "matplotlib.plot", "all_traj.items", "matplotlib.plot", "numpy.transpose", "F.batch_forward.mean", "numpy.array", "list", "list"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.Toy.batch_forward"], ["", "", "def", "plotme", "(", "F", ",", "all_traj", "=", "None", ",", "xl", "=", "11", ")", ":", "\n", "    ", "n", "=", "500", "\n", "x", "=", "np", ".", "linspace", "(", "-", "xl", ",", "xl", ",", "n", ")", "\n", "y", "=", "np", ".", "linspace", "(", "-", "xl", ",", "xl", ",", "n", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "\n", "Xs", "=", "torch", ".", "Tensor", "(", "np", ".", "transpose", "(", "np", ".", "array", "(", "[", "list", "(", "X", ".", "flat", ")", ",", "list", "(", "Y", ".", "flat", ")", "]", ")", ")", ")", ".", "double", "(", ")", "\n", "Ys", "=", "F", ".", "batch_forward", "(", "Xs", ")", "\n", "\n", "colormaps", "=", "{", "\n", "\"sgd\"", ":", "\"tab:blue\"", ",", "\n", "\"pcgrad\"", ":", "\"tab:orange\"", ",", "\n", "\"mgd\"", ":", "\"tab:cyan\"", ",", "\n", "\"cagrad\"", ":", "\"tab:red\"", ",", "\n", "}", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "5", ")", ")", "\n", "plt", ".", "subplot", "(", "131", ")", "\n", "c", "=", "plt", ".", "contour", "(", "X", ",", "Y", ",", "Ys", "[", ":", ",", "0", "]", ".", "view", "(", "n", ",", "n", ")", ")", "\n", "if", "all_traj", "is", "not", "None", ":", "\n", "        ", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "all_traj", ".", "items", "(", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "all_traj", "[", "k", "]", "[", ":", ",", "0", "]", ",", "all_traj", "[", "k", "]", "[", ":", ",", "1", "]", ",", "'--'", ",", "c", "=", "colormaps", "[", "k", "]", ",", "label", "=", "k", ")", "\n", "", "", "plt", ".", "title", "(", "\"L1(x)\"", ")", "\n", "\n", "plt", ".", "subplot", "(", "132", ")", "\n", "c", "=", "plt", ".", "contour", "(", "X", ",", "Y", ",", "Ys", "[", ":", ",", "1", "]", ".", "view", "(", "n", ",", "n", ")", ")", "\n", "if", "all_traj", "is", "not", "None", ":", "\n", "        ", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "all_traj", ".", "items", "(", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "all_traj", "[", "k", "]", "[", ":", ",", "0", "]", ",", "all_traj", "[", "k", "]", "[", ":", ",", "1", "]", ",", "'--'", ",", "c", "=", "colormaps", "[", "k", "]", ",", "label", "=", "k", ")", "\n", "", "", "plt", ".", "title", "(", "\"L2(x)\"", ")", "\n", "\n", "plt", ".", "subplot", "(", "133", ")", "\n", "c", "=", "plt", ".", "contour", "(", "X", ",", "Y", ",", "Ys", ".", "mean", "(", "1", ")", ".", "view", "(", "n", ",", "n", ")", ")", "\n", "if", "all_traj", "is", "not", "None", ":", "\n", "        ", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "all_traj", ".", "items", "(", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "all_traj", "[", "k", "]", "[", ":", ",", "0", "]", ",", "all_traj", "[", "k", "]", "[", ":", ",", "1", "]", ",", "'--'", ",", "c", "=", "colormaps", "[", "k", "]", ",", "label", "=", "k", ")", "\n", "", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "\"0.5*(L1(x)+L2(x))\"", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"toy_ct.png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.plot3d": [[122, 156], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "torch.Tensor().double", "torch.Tensor().double", "F.batch_forward", "matplotlib.subplots", "ax.xaxis.set_pane_color", "ax.yaxis.set_pane_color", "ax.zaxis.set_pane_color", "ax.grid", "F.batch_forward.mean().view", "ax.plot_surface", "print", "ax.set_zticks", "ax.set_zlim", "ax.set_xticks", "ax.set_yticks", "ax.xaxis.get_major_ticks", "ax.yaxis.get_major_ticks", "ax.zaxis.get_major_ticks", "ax.view_init", "matplotlib.tight_layout", "matplotlib.savefig", "Ys.mean().view.numpy", "F.batch_forward.mean().min", "F.batch_forward.mean().max", "tick.label.set_fontsize", "tick.label.set_fontsize", "tick.label.set_fontsize", "torch.Tensor", "torch.Tensor", "F.batch_forward.mean", "numpy.transpose", "F.batch_forward.mean", "F.batch_forward.mean", "numpy.array", "list", "list"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.Toy.batch_forward"], ["", "def", "plot3d", "(", "F", ",", "xl", "=", "11", ")", ":", "\n", "    ", "n", "=", "500", "\n", "x", "=", "np", ".", "linspace", "(", "-", "xl", ",", "xl", ",", "n", ")", "\n", "y", "=", "np", ".", "linspace", "(", "-", "xl", ",", "xl", ",", "n", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "\n", "Xs", "=", "torch", ".", "Tensor", "(", "np", ".", "transpose", "(", "np", ".", "array", "(", "[", "list", "(", "X", ".", "flat", ")", ",", "list", "(", "Y", ".", "flat", ")", "]", ")", ")", ")", ".", "double", "(", ")", "\n", "Ys", "=", "F", ".", "batch_forward", "(", "Xs", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "subplot_kw", "=", "{", "\"projection\"", ":", "\"3d\"", "}", ")", "\n", "\n", "\n", "ax", ".", "xaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "zaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "Yv", "=", "Ys", ".", "mean", "(", "1", ")", ".", "view", "(", "n", ",", "n", ")", "\n", "surf", "=", "ax", ".", "plot_surface", "(", "X", ",", "Y", ",", "Yv", ".", "numpy", "(", ")", ",", "cmap", "=", "cm", ".", "viridis", ")", "\n", "print", "(", "Ys", ".", "mean", "(", "1", ")", ".", "min", "(", ")", ",", "Ys", ".", "mean", "(", "1", ")", ".", "max", "(", ")", ")", "\n", "\n", "ax", ".", "set_zticks", "(", "[", "-", "16", ",", "-", "8", ",", "0", ",", "8", "]", ")", "\n", "ax", ".", "set_zlim", "(", "-", "20", ",", "10", ")", "\n", "\n", "ax", ".", "set_xticks", "(", "[", "-", "10", ",", "0", ",", "10", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "-", "10", ",", "0", ",", "10", "]", ")", "\n", "for", "tick", "in", "ax", ".", "xaxis", ".", "get_major_ticks", "(", ")", ":", "\n", "        ", "tick", ".", "label", ".", "set_fontsize", "(", "15", ")", "\n", "", "for", "tick", "in", "ax", ".", "yaxis", ".", "get_major_ticks", "(", ")", ":", "\n", "        ", "tick", ".", "label", ".", "set_fontsize", "(", "15", ")", "\n", "", "for", "tick", "in", "ax", ".", "zaxis", ".", "get_major_ticks", "(", ")", ":", "\n", "        ", "tick", ".", "label", ".", "set_fontsize", "(", "15", ")", "\n", "\n", "", "ax", ".", "view_init", "(", "25", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"3d-obj.png\"", ",", "dpi", "=", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.plot_contour": [[157, 207], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "matplotlib.figure", "plt.figure.add_subplot", "torch.Tensor().double", "torch.Tensor().double", "F.batch_forward", "matplotlib.cm.get_cmap", "matplotlib.contour", "fig.add_subplot.set_aspect", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "F.batch_forward.mean", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "Ys.mean.view", "plt.figure.colorbar", "fig.colorbar.ax.tick_params", "torch.Tensor", "torch.Tensor", "matplotlib.plot", "matplotlib.plot", "numpy.zeros", "numpy.linspace", "fig.add_subplot.scatter", "fig.add_subplot.get_data_ratio", "numpy.transpose", "numpy.array", "list", "list"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.Toy.batch_forward"], ["", "def", "plot_contour", "(", "F", ",", "task", "=", "1", ",", "traj", "=", "None", ",", "xl", "=", "11", ",", "plotbar", "=", "False", ",", "name", "=", "\"tmp\"", ")", ":", "\n", "    ", "n", "=", "500", "\n", "x", "=", "np", ".", "linspace", "(", "-", "xl", ",", "xl", ",", "n", ")", "\n", "y", "=", "np", ".", "linspace", "(", "-", "xl", ",", "xl", ",", "n", ")", "\n", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "Xs", "=", "torch", ".", "Tensor", "(", "np", ".", "transpose", "(", "np", ".", "array", "(", "[", "list", "(", "X", ".", "flat", ")", ",", "list", "(", "Y", ".", "flat", ")", "]", ")", ")", ")", ".", "double", "(", ")", "\n", "Ys", "=", "F", ".", "batch_forward", "(", "Xs", ")", "\n", "\n", "cmap", "=", "cm", ".", "get_cmap", "(", "'viridis'", ")", "\n", "\n", "yy", "=", "-", "8.3552", "\n", "if", "task", "==", "0", ":", "\n", "        ", "Yv", "=", "Ys", ".", "mean", "(", "1", ")", "\n", "plt", ".", "plot", "(", "-", "8.5", ",", "7.5", ",", "marker", "=", "'o'", ",", "markersize", "=", "10", ",", "zorder", "=", "5", ",", "color", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "-", "8.5", ",", "-", "5", ",", "marker", "=", "'o'", ",", "markersize", "=", "10", ",", "zorder", "=", "5", ",", "color", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "9", ",", "9", ",", "marker", "=", "'o'", ",", "markersize", "=", "10", ",", "zorder", "=", "5", ",", "color", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "[", "-", "7", ",", "7", "]", ",", "[", "yy", ",", "yy", "]", ",", "linewidth", "=", "8.0", ",", "zorder", "=", "0", ",", "color", "=", "'gray'", ")", "\n", "plt", ".", "plot", "(", "0", ",", "yy", ",", "marker", "=", "'*'", ",", "markersize", "=", "15", ",", "zorder", "=", "5", ",", "color", "=", "'k'", ")", "\n", "", "elif", "task", "==", "1", ":", "\n", "        ", "Yv", "=", "Ys", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "7", ",", "yy", ",", "marker", "=", "'*'", ",", "markersize", "=", "15", ",", "zorder", "=", "5", ",", "color", "=", "'k'", ")", "\n", "", "else", ":", "\n", "        ", "Yv", "=", "Ys", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "-", "7", ",", "yy", ",", "marker", "=", "'*'", ",", "markersize", "=", "15", ",", "zorder", "=", "5", ",", "color", "=", "'k'", ")", "\n", "\n", "", "c", "=", "plt", ".", "contour", "(", "X", ",", "Y", ",", "Yv", ".", "view", "(", "n", ",", "n", ")", ",", "cmap", "=", "cm", ".", "viridis", ",", "linewidths", "=", "4.0", ")", "\n", "\n", "if", "traj", "is", "not", "None", ":", "\n", "        ", "for", "tt", "in", "traj", ":", "\n", "            ", "l", "=", "tt", ".", "shape", "[", "0", "]", "\n", "color_list", "=", "np", ".", "zeros", "(", "(", "l", ",", "3", ")", ")", "\n", "color_list", "[", ":", ",", "0", "]", "=", "1.", "\n", "color_list", "[", ":", ",", "1", "]", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "l", ")", "\n", "#color_list[:,2] = 1-np.linspace(0, 1, l)", "\n", "ax", ".", "scatter", "(", "tt", "[", ":", ",", "0", "]", ",", "tt", "[", ":", ",", "1", "]", ",", "color", "=", "color_list", ",", "s", "=", "6", ",", "zorder", "=", "10", ")", "\n", "\n", "", "", "if", "plotbar", ":", "\n", "        ", "cbar", "=", "fig", ".", "colorbar", "(", "c", ",", "ticks", "=", "[", "-", "15", ",", "-", "10", ",", "-", "5", ",", "0", ",", "5", "]", ")", "\n", "cbar", ".", "ax", ".", "tick_params", "(", "labelsize", "=", "15", ")", "\n", "\n", "", "ax", ".", "set_aspect", "(", "1.0", "/", "ax", ".", "get_data_ratio", "(", ")", ",", "adjustable", "=", "'box'", ")", "\n", "plt", ".", "xticks", "(", "[", "-", "10", ",", "-", "5", ",", "0", ",", "5", ",", "10", "]", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "yticks", "(", "[", "-", "10", ",", "-", "5", ",", "0", ",", "5", ",", "10", "]", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"{name}.png\"", ",", "dpi", "=", "100", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.smooth": [[208, 220], ["len", "range", "max", "min", "numpy.array().astype", "y.append", "y.append", "numpy.array", "np.array().astype.mean"], "function", ["None"], ["", "def", "smooth", "(", "x", ",", "n", "=", "20", ")", ":", "\n", "    ", "l", "=", "len", "(", "x", ")", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "        ", "ii", "=", "max", "(", "0", ",", "i", "-", "n", ")", "\n", "jj", "=", "min", "(", "i", "+", "n", ",", "l", "-", "1", ")", "\n", "v", "=", "np", ".", "array", "(", "x", "[", "ii", ":", "jj", "]", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "i", "<", "3", ":", "\n", "            ", "y", ".", "append", "(", "x", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "y", ".", "append", "(", "v", ".", "mean", "(", ")", ")", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.plot_loss": [[221, 260], ["matplotlib.figure", "plt.figure.add_subplot", "matplotlib.xticks", "matplotlib.yticks", "fig.add_subplot.grid", "matplotlib.legend", "fig.add_subplot.set_aspect", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "F.batch_forward", "numpy.arange", "F.batch_forward.mean", "fig.add_subplot.plot", "toy.smooth", "fig.add_subplot.get_data_ratio", "list"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.Toy.batch_forward", "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.smooth"], ["", "def", "plot_loss", "(", "trajs", ",", "name", "=", "\"tmp\"", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "colormaps", "=", "{", "\n", "\"sgd\"", ":", "\"tab:blue\"", ",", "\n", "\"pcgrad\"", ":", "\"tab:orange\"", ",", "\n", "\"mgd\"", ":", "\"tab:purple\"", ",", "\n", "\"cagrad\"", ":", "\"tab:red\"", ",", "\n", "}", "\n", "maps", "=", "{", "\n", "\"sgd\"", ":", "\"Adam\"", ",", "\n", "\"pcgrad\"", ":", "\"PCGrad\"", ",", "\n", "\"mgd\"", ":", "\"MGDA\"", ",", "\n", "\"cagrad\"", ":", "\"RGD (ours)\"", ",", "\n", "}", "\n", "for", "method", "in", "[", "\"sgd\"", ",", "\"mgd\"", ",", "\"pcgrad\"", ",", "\"cagrad\"", "]", ":", "\n", "        ", "traj", "=", "trajs", "[", "method", "]", "[", ":", ":", "100", "]", "\n", "Ys", "=", "F", ".", "batch_forward", "(", "traj", ")", "\n", "x", "=", "np", ".", "arange", "(", "traj", ".", "shape", "[", "0", "]", ")", "\n", "#y = torch.cummin(Ys.mean(1), 0)[0]", "\n", "y", "=", "Ys", ".", "mean", "(", "1", ")", "\n", "\n", "ax", ".", "plot", "(", "x", ",", "smooth", "(", "list", "(", "y", ")", ")", ",", "\n", "color", "=", "colormaps", "[", "method", "]", ",", "\n", "linestyle", "=", "'-'", ",", "\n", "label", "=", "maps", "[", "method", "]", ",", "linewidth", "=", "4.", ")", "\n", "\n", "", "plt", ".", "xticks", "(", "[", "0", ",", "200", ",", "400", ",", "600", ",", "800", ",", "1000", "]", ",", "\n", "[", "\"0\"", ",", "\"20K\"", ",", "\"40K\"", ",", "\"60K\"", ",", "\"80K\"", ",", "\"100K\"", "]", ",", "\n", "fontsize", "=", "15", ")", "\n", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "15", ")", "\n", "ax", ".", "grid", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "15", ")", "\n", "\n", "ax", ".", "set_aspect", "(", "1.0", "/", "ax", ".", "get_data_ratio", "(", ")", ",", "adjustable", "=", "'box'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"{name}.png\"", ",", "dpi", "=", "100", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.mean_grad": [[267, 269], ["grads.mean"], "function", ["None"], ["", "def", "mean_grad", "(", "grads", ")", ":", "\n", "    ", "return", "grads", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.pcgrad": [[270, 280], ["g1.dot().item", "g1.dot().item", "g2.dot().item", "g1.dot", "g1.dot", "g2.dot"], "function", ["None"], ["", "def", "pcgrad", "(", "grads", ")", ":", "\n", "    ", "g1", "=", "grads", "[", ":", ",", "0", "]", "\n", "g2", "=", "grads", "[", ":", ",", "1", "]", "\n", "g11", "=", "g1", ".", "dot", "(", "g1", ")", ".", "item", "(", ")", "\n", "g12", "=", "g1", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "g22", "=", "g2", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "if", "g12", "<", "0", ":", "\n", "        ", "return", "(", "(", "1", "-", "g12", "/", "g11", ")", "*", "g1", "+", "(", "1", "-", "g12", "/", "g22", ")", "*", "g2", ")", "/", "2", "\n", "", "else", ":", "\n", "        ", "return", "(", "g1", "+", "g2", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.mgd": [[281, 298], ["g1.dot().item", "g1.dot().item", "g2.dot().item", "min", "g1.dot", "g1.dot", "g2.dot"], "function", ["None"], ["", "", "def", "mgd", "(", "grads", ")", ":", "\n", "    ", "g1", "=", "grads", "[", ":", ",", "0", "]", "\n", "g2", "=", "grads", "[", ":", ",", "1", "]", "\n", "\n", "g11", "=", "g1", ".", "dot", "(", "g1", ")", ".", "item", "(", ")", "\n", "g12", "=", "g1", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "g22", "=", "g2", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "\n", "if", "g12", "<", "min", "(", "g11", ",", "g22", ")", ":", "\n", "        ", "x", "=", "(", "g22", "-", "g12", ")", "/", "(", "g11", "+", "g22", "-", "2", "*", "g12", "+", "1e-8", ")", "\n", "", "elif", "g11", "<", "g22", ":", "\n", "        ", "x", "=", "1", "\n", "", "else", ":", "\n", "        ", "x", "=", "0", "\n", "\n", "", "g_mgd", "=", "x", "*", "g1", "+", "(", "1", "-", "x", ")", "*", "g2", "# mgd gradient g_mgd", "\n", "return", "g_mgd", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.cagrad": [[299, 328], ["g1.dot().item", "g1.dot().item", "g2.dot().item", "scipy.optimize.minimize_scalar", "numpy.sqrt", "numpy.sqrt", "g1.dot", "g1.dot", "g2.dot", "numpy.sqrt"], "function", ["None"], ["", "def", "cagrad", "(", "grads", ",", "c", "=", "0.5", ")", ":", "\n", "    ", "g1", "=", "grads", "[", ":", ",", "0", "]", "\n", "g2", "=", "grads", "[", ":", ",", "1", "]", "\n", "g0", "=", "(", "g1", "+", "g2", ")", "/", "2", "\n", "\n", "g11", "=", "g1", ".", "dot", "(", "g1", ")", ".", "item", "(", ")", "\n", "g12", "=", "g1", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "g22", "=", "g2", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "\n", "g0_norm", "=", "0.5", "*", "np", ".", "sqrt", "(", "g11", "+", "g22", "+", "2", "*", "g12", "+", "1e-4", ")", "\n", "\n", "# want to minimize g_w^Tg_0 + c*||g_0||*||g_w||", "\n", "coef", "=", "c", "*", "g0_norm", "\n", "\n", "def", "obj", "(", "x", ")", ":", "\n", "# g_w^T g_0: x*0.5*(g11+g22-2g12)+(0.5+x)*(g12-g22)+g22", "\n", "# g_w^T g_w: x^2*(g11+g22-2g12)+2*x*(g12-g22)+g22", "\n", "        ", "return", "coef", "*", "np", ".", "sqrt", "(", "x", "**", "2", "*", "(", "g11", "+", "g22", "-", "2", "*", "g12", ")", "+", "2", "*", "x", "*", "(", "g12", "-", "g22", ")", "+", "g22", "+", "1e-4", ")", "+", "0.5", "*", "x", "*", "(", "g11", "+", "g22", "-", "2", "*", "g12", ")", "+", "(", "0.5", "+", "x", ")", "*", "(", "g12", "-", "g22", ")", "+", "g22", "\n", "\n", "", "res", "=", "minimize_scalar", "(", "obj", ",", "bounds", "=", "(", "0", ",", "1", ")", ",", "method", "=", "'bounded'", ")", "\n", "x", "=", "res", ".", "x", "\n", "\n", "gw", "=", "x", "*", "g1", "+", "(", "1", "-", "x", ")", "*", "g2", "\n", "gw_norm", "=", "np", ".", "sqrt", "(", "x", "**", "2", "*", "g11", "+", "(", "1", "-", "x", ")", "**", "2", "*", "g22", "+", "2", "*", "x", "*", "(", "1", "-", "x", ")", "*", "g12", "+", "1e-4", ")", "\n", "\n", "lmbda", "=", "coef", "/", "(", "gw_norm", "+", "1e-4", ")", "\n", "g", "=", "g0", "+", "lmbda", "*", "gw", "\n", "return", "g", "/", "(", "1", "+", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.run_all": [[342, 377], ["enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "tqdm.tqdm", "torch.save", "torch.save", "init.clone", "torch.optim.Adam", "torch.optim.Adam", "range", "torch.tensor", "torch.tensor", "traj.append", "F", "torch.optim.Adam.zero_grad", "torch.optim.Adam.step", "init.clone.detach().numpy().copy", "solver", "solver", "init.clone.detach().numpy", "init.clone.detach"], "function", ["None"], ["def", "run_all", "(", ")", ":", "\n", "    ", "all_traj", "=", "{", "}", "\n", "\n", "# the initial positions", "\n", "inits", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "-", "8.5", ",", "7.5", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "-", "8.5", ",", "-", "5.", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "9.", ",", "9.", "]", ")", ",", "\n", "]", "\n", "\n", "for", "i", ",", "init", "in", "enumerate", "(", "inits", ")", ":", "\n", "        ", "for", "m", "in", "tqdm", "(", "[", "\"sgd\"", ",", "\"mgd\"", ",", "\"pcgrad\"", ",", "\"cagrad\"", "]", ")", ":", "\n", "            ", "all_traj", "[", "m", "]", "=", "None", "\n", "traj", "=", "[", "]", "\n", "solver", "=", "maps", "[", "m", "]", "\n", "x", "=", "init", ".", "clone", "(", ")", "\n", "x", ".", "requires_grad", "=", "True", "\n", "\n", "n_iter", "=", "100000", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "x", "]", ",", "lr", "=", "0.001", ")", "\n", "\n", "for", "it", "in", "range", "(", "n_iter", ")", ":", "\n", "                ", "traj", ".", "append", "(", "x", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ")", "\n", "\n", "f", ",", "grads", "=", "F", "(", "x", ",", "True", ")", "\n", "if", "m", "==", "\"cagrad\"", ":", "\n", "                    ", "g", "=", "solver", "(", "grads", ",", "c", "=", "0.5", ")", "\n", "", "else", ":", "\n", "                    ", "g", "=", "solver", "(", "grads", ")", "\n", "", "opt", ".", "zero_grad", "(", ")", "\n", "x", ".", "grad", "=", "g", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "", "all_traj", "[", "m", "]", "=", "torch", ".", "tensor", "(", "traj", ")", "\n", "", "torch", ".", "save", "(", "all_traj", ",", "f\"toy{i}.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.plot_results": [[379, 398], ["toy.plot3d", "toy.plot_contour", "toy.plot_contour", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "list", "list.append", "tqdm.tqdm", "range", "toy.plot_contour"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.plot3d", "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.plot_contour", "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.plot_contour", "home.repos.pwc.inspect_result.cranial-xix_cagrad.None.toy.plot_contour"], ["", "", "def", "plot_results", "(", ")", ":", "\n", "    ", "plot3d", "(", "F", ")", "\n", "plot_contour", "(", "F", ",", "1", ",", "name", "=", "\"toy_task_1\"", ")", "\n", "plot_contour", "(", "F", ",", "2", ",", "name", "=", "\"toy_task_2\"", ")", "\n", "t1", "=", "torch", ".", "load", "(", "f\"toy0.pt\"", ")", "\n", "t2", "=", "torch", ".", "load", "(", "f\"toy1.pt\"", ")", "\n", "t3", "=", "torch", ".", "load", "(", "f\"toy2.pt\"", ")", "\n", "\n", "length", "=", "t1", "[", "\"sgd\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "for", "method", "in", "[", "\"sgd\"", ",", "\"mgd\"", ",", "\"pcgrad\"", ",", "\"cagrad\"", "]", ":", "\n", "        ", "ranges", "=", "list", "(", "range", "(", "10", ",", "length", ",", "1000", ")", ")", "\n", "ranges", ".", "append", "(", "length", "-", "1", ")", "\n", "for", "t", "in", "tqdm", "(", "ranges", ")", ":", "\n", "            ", "plot_contour", "(", "F", ",", "\n", "task", "=", "0", ",", "# task == 0 meeas plot for both tasks", "\n", "traj", "=", "[", "t1", "[", "method", "]", "[", ":", "t", "]", ",", "t2", "[", "method", "]", "[", ":", "t", "]", ",", "t3", "[", "method", "]", "[", ":", "t", "]", "]", ",", "\n", "plotbar", "=", "(", "method", "==", "\"cagrad\"", ")", ",", "\n", "name", "=", "f\"./imgs/toy_{method}_{t}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.min_norm_solvers.MinNormSolver._min_norm_element_from2": [[14, 36], ["None"], "methods", ["None"], ["def", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", ":", "\n", "        ", "\"\"\"\n        Analytical solution for min_{c} |cx_1 + (1-c)x_2|_2^2\n        d is the distance (objective) optimzed\n        v1v1 = <x1,x1>\n        v1v2 = <x1,x2>\n        v2v2 = <x2,x2>\n        \"\"\"", "\n", "if", "v1v2", ">=", "v1v1", ":", "\n", "# Case: Fig 1, third column", "\n", "            ", "gamma", "=", "0.999", "\n", "cost", "=", "v1v1", "\n", "return", "gamma", ",", "cost", "\n", "", "if", "v1v2", ">=", "v2v2", ":", "\n", "# Case: Fig 1, first column", "\n", "            ", "gamma", "=", "0.001", "\n", "cost", "=", "v2v2", "\n", "return", "gamma", ",", "cost", "\n", "# Case: Fig 1, second column", "\n", "", "gamma", "=", "-", "1.0", "*", "(", "(", "v1v2", "-", "v2v2", ")", "/", "(", "v1v1", "+", "v2v2", "-", "2", "*", "v1v2", ")", ")", "\n", "cost", "=", "v2v2", "+", "gamma", "*", "(", "v1v2", "-", "v2v2", ")", "\n", "return", "gamma", ",", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.min_norm_solvers.MinNormSolver._min_norm_2d": [[37, 58], ["range", "len", "range", "len", "min_norm_solvers.MinNormSolver._min_norm_element_from2"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "def", "_min_norm_2d", "(", "vecs", ",", "dps", ")", ":", "\n", "        ", "\"\"\"\n        Find the minimum norm solution as combination of two points\n        This is correct only in 2D\n        ie. min_c |\\sum c_i x_i|_2^2 st. \\sum c_i = 1 , 1 >= c_1 >= 0 for all i, c_i + c_j = 1.0 for some i, j\n        \"\"\"", "\n", "dmin", "=", "np", ".", "inf", "\n", "for", "i", "in", "range", "(", "len", "(", "vecs", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "vecs", ")", ")", ":", "\n", "                ", "if", "(", "i", ",", "j", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "i", ",", "j", ")", "]", "=", "(", "vecs", "[", "i", "]", "*", "vecs", "[", "j", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "dps", "[", "(", "j", ",", "i", ")", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "", "if", "(", "i", ",", "i", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "i", ",", "i", ")", "]", "=", "(", "vecs", "[", "i", "]", "*", "vecs", "[", "i", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "if", "(", "j", ",", "j", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "j", ",", "j", ")", "]", "=", "(", "vecs", "[", "j", "]", "*", "vecs", "[", "j", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "c", ",", "d", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "dps", "[", "(", "i", ",", "i", ")", "]", ",", "dps", "[", "(", "i", ",", "j", ")", "]", ",", "dps", "[", "(", "j", ",", "j", ")", "]", ")", "\n", "if", "d", "<", "dmin", ":", "\n", "                    ", "dmin", "=", "d", "\n", "sol", "=", "[", "(", "i", ",", "j", ")", ",", "c", ",", "d", "]", "\n", "", "", "", "return", "sol", ",", "dps", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.min_norm_solvers.MinNormSolver._projection2simplex": [[59, 74], ["len", "numpy.flip", "range", "numpy.maximum", "numpy.sort", "numpy.zeros", "numpy.sum"], "methods", ["None"], ["", "def", "_projection2simplex", "(", "y", ")", ":", "\n", "        ", "\"\"\"\n        Given y, it solves argmin_z |y-z|_2 st \\sum z = 1 , 1 >= z_i >= 0 for all i\n        \"\"\"", "\n", "m", "=", "len", "(", "y", ")", "\n", "sorted_y", "=", "np", ".", "flip", "(", "np", ".", "sort", "(", "y", ")", ",", "axis", "=", "0", ")", "\n", "tmpsum", "=", "0.0", "\n", "tmax_f", "=", "(", "np", ".", "sum", "(", "y", ")", "-", "1.0", ")", "/", "m", "\n", "for", "i", "in", "range", "(", "m", "-", "1", ")", ":", "\n", "            ", "tmpsum", "+=", "sorted_y", "[", "i", "]", "\n", "tmax", "=", "(", "tmpsum", "-", "1", ")", "/", "(", "i", "+", "1.0", ")", "\n", "if", "tmax", ">", "sorted_y", "[", "i", "+", "1", "]", ":", "\n", "                ", "tmax_f", "=", "tmax", "\n", "break", "\n", "", "", "return", "np", ".", "maximum", "(", "y", "-", "tmax_f", ",", "np", ".", "zeros", "(", "y", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.min_norm_solvers.MinNormSolver._next_point": [[75, 90], ["min_norm_solvers.MinNormSolver._projection2simplex", "numpy.sum", "numpy.sum", "len", "numpy.min", "len", "min", "numpy.sum", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._projection2simplex"], ["", "def", "_next_point", "(", "cur_val", ",", "grad", ",", "n", ")", ":", "\n", "        ", "proj_grad", "=", "grad", "-", "(", "np", ".", "sum", "(", "grad", ")", "/", "n", ")", "\n", "tm1", "=", "-", "1.0", "*", "cur_val", "[", "proj_grad", "<", "0", "]", "/", "proj_grad", "[", "proj_grad", "<", "0", "]", "\n", "tm2", "=", "(", "1.0", "-", "cur_val", "[", "proj_grad", ">", "0", "]", ")", "/", "(", "proj_grad", "[", "proj_grad", ">", "0", "]", ")", "\n", "\n", "skippers", "=", "np", ".", "sum", "(", "tm1", "<", "1e-7", ")", "+", "np", ".", "sum", "(", "tm2", "<", "1e-7", ")", "\n", "t", "=", "1", "\n", "if", "len", "(", "tm1", "[", "tm1", ">", "1e-7", "]", ")", ">", "0", ":", "\n", "            ", "t", "=", "np", ".", "min", "(", "tm1", "[", "tm1", ">", "1e-7", "]", ")", "\n", "", "if", "len", "(", "tm2", "[", "tm2", ">", "1e-7", "]", ")", ">", "0", ":", "\n", "            ", "t", "=", "min", "(", "t", ",", "np", ".", "min", "(", "tm2", "[", "tm2", ">", "1e-7", "]", ")", ")", "\n", "\n", "", "next_point", "=", "proj_grad", "*", "t", "+", "cur_val", "\n", "next_point", "=", "MinNormSolver", ".", "_projection2simplex", "(", "next_point", ")", "\n", "return", "next_point", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.min_norm_solvers.MinNormSolver.find_min_norm_element": [[91, 137], ["min_norm_solvers.MinNormSolver._min_norm_2d", "len", "numpy.zeros", "numpy.zeros", "range", "range", "min_norm_solvers.MinNormSolver._next_point", "range", "min_norm_solvers.MinNormSolver._min_norm_element_from2", "numpy.dot", "range", "numpy.sum", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_2d", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._next_point", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "def", "find_min_norm_element", "(", "vecs", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of vectors (vecs), this method finds the minimum norm element in the convex hull\n        as min |u|_2 st. u = \\sum c_i vecs[i] and \\sum c_i = 1.\n        It is quite geometric, and the main idea is the fact that if d_{ij} = min |u|_2 st u = c x_i + (1-c) x_j; the solution lies in (0, d_{i,j})\n        Hence, we find the best 2-task solution, and then run the projected gradient descent until convergence\n        \"\"\"", "\n", "# Solution lying at the combination of two points", "\n", "dps", "=", "{", "}", "\n", "init_sol", ",", "dps", "=", "MinNormSolver", ".", "_min_norm_2d", "(", "vecs", ",", "dps", ")", "\n", "\n", "n", "=", "len", "(", "vecs", ")", "\n", "sol_vec", "=", "np", ".", "zeros", "(", "n", ")", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "0", "]", "]", "=", "init_sol", "[", "1", "]", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "1", "]", "]", "=", "1", "-", "init_sol", "[", "1", "]", "\n", "\n", "if", "n", "<", "3", ":", "\n", "# This is optimal for n=2, so return the solution", "\n", "            ", "return", "sol_vec", ",", "init_sol", "[", "2", "]", "\n", "\n", "", "iter_count", "=", "0", "\n", "\n", "grad_mat", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "grad_mat", "[", "i", ",", "j", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "\n", "\n", "", "", "while", "iter_count", "<", "MinNormSolver", ".", "MAX_ITER", ":", "\n", "            ", "grad_dir", "=", "-", "1.0", "*", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", "\n", "new_point", "=", "MinNormSolver", ".", "_next_point", "(", "sol_vec", ",", "grad_dir", ",", "n", ")", "\n", "# Re-compute the inner products for line search", "\n", "v1v1", "=", "0.0", "\n", "v1v2", "=", "0.0", "\n", "v2v2", "=", "0.0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                    ", "v1v1", "+=", "sol_vec", "[", "i", "]", "*", "sol_vec", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "v1v2", "+=", "sol_vec", "[", "i", "]", "*", "new_point", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "v2v2", "+=", "new_point", "[", "i", "]", "*", "new_point", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "", "", "nc", ",", "nd", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", "\n", "new_sol_vec", "=", "nc", "*", "sol_vec", "+", "(", "1", "-", "nc", ")", "*", "new_point", "\n", "change", "=", "new_sol_vec", "-", "sol_vec", "\n", "if", "np", ".", "sum", "(", "np", ".", "abs", "(", "change", ")", ")", "<", "MinNormSolver", ".", "STOP_CRIT", ":", "\n", "                ", "return", "sol_vec", ",", "nd", "\n", "", "sol_vec", "=", "new_sol_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.min_norm_solvers.MinNormSolver.find_min_norm_element_FW": [[138, 180], ["min_norm_solvers.MinNormSolver._min_norm_2d", "len", "numpy.zeros", "numpy.zeros", "range", "range", "numpy.argmin", "numpy.dot", "numpy.dot", "min_norm_solvers.MinNormSolver._min_norm_element_from2", "numpy.dot", "numpy.dot", "numpy.sum", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_2d", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "", "def", "find_min_norm_element_FW", "(", "vecs", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of vectors (vecs), this method finds the minimum norm element in the convex hull\n        as min |u|_2 st. u = \\sum c_i vecs[i] and \\sum c_i = 1.\n        It is quite geometric, and the main idea is the fact that if d_{ij} = min |u|_2 st u = c x_i + (1-c) x_j; the solution lies in (0, d_{i,j})\n        Hence, we find the best 2-task solution, and then run the Frank Wolfe until convergence\n        \"\"\"", "\n", "# Solution lying at the combination of two points", "\n", "dps", "=", "{", "}", "\n", "init_sol", ",", "dps", "=", "MinNormSolver", ".", "_min_norm_2d", "(", "vecs", ",", "dps", ")", "\n", "\n", "n", "=", "len", "(", "vecs", ")", "\n", "sol_vec", "=", "np", ".", "zeros", "(", "n", ")", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "0", "]", "]", "=", "init_sol", "[", "1", "]", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "1", "]", "]", "=", "1", "-", "init_sol", "[", "1", "]", "\n", "\n", "if", "n", "<", "3", ":", "\n", "# This is optimal for n=2, so return the solution", "\n", "            ", "return", "sol_vec", ",", "init_sol", "[", "2", "]", "\n", "\n", "", "iter_count", "=", "0", "\n", "\n", "grad_mat", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "grad_mat", "[", "i", ",", "j", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "\n", "", "", "while", "iter_count", "<", "MinNormSolver", ".", "MAX_ITER", ":", "\n", "            ", "t_iter", "=", "np", ".", "argmin", "(", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", ")", "\n", "\n", "v1v1", "=", "np", ".", "dot", "(", "sol_vec", ",", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", ")", "\n", "v1v2", "=", "np", ".", "dot", "(", "sol_vec", ",", "grad_mat", "[", ":", ",", "t_iter", "]", ")", "\n", "v2v2", "=", "grad_mat", "[", "t_iter", ",", "t_iter", "]", "\n", "\n", "nc", ",", "nd", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", "\n", "new_sol_vec", "=", "nc", "*", "sol_vec", "\n", "new_sol_vec", "[", "t_iter", "]", "+=", "1", "-", "nc", "\n", "\n", "change", "=", "new_sol_vec", "-", "sol_vec", "\n", "if", "np", ".", "sum", "(", "np", ".", "abs", "(", "change", ")", ")", "<", "MinNormSolver", ".", "STOP_CRIT", ":", "\n", "                ", "return", "sol_vec", ",", "nd", "\n", "", "sol_vec", "=", "new_sol_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.min_norm_solvers.gradient_normalizers": [[181, 198], ["numpy.sqrt", "numpy.sum", "print", "numpy.sqrt", "numpy.sum", "gr.pow().sum", "gr.pow", "gr.pow().sum", "gr.pow"], "function", ["None"], ["", "", "", "def", "gradient_normalizers", "(", "grads", ",", "losses", ",", "normalization_type", ")", ":", "\n", "    ", "gn", "=", "{", "}", "\n", "if", "normalization_type", "==", "'l2'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "[", "gr", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "data", "[", "0", "]", "for", "gr", "in", "grads", "[", "t", "]", "]", ")", ")", "\n", "", "", "elif", "normalization_type", "==", "'loss'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "losses", "[", "t", "]", "\n", "", "", "elif", "normalization_type", "==", "'loss+'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "losses", "[", "t", "]", "*", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "[", "gr", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "data", "[", "0", "]", "for", "gr", "in", "grads", "[", "t", "]", "]", ")", ")", "\n", "", "", "elif", "normalization_type", "==", "'none'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'ERROR: Invalid Normalization Type'", ")", "\n", "", "return", "gn", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_split.SegNet.__init__": [[20, 74], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_split.SegNet.modules", "model_segnet_split.SegNet.encoder_block.append", "model_segnet_split.SegNet.decoder_block.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_block_enc.append", "model_segnet_split.SegNet.conv_block_dec.append", "model_segnet_split.SegNet.conv_block_enc.append", "model_segnet_split.SegNet.conv_block_dec.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "if", "opt", ".", "type", "==", "'wide'", ":", "\n", "            ", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "", "else", ":", "\n", "            ", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "\n", "", "self", ".", "class_nb", "=", "13", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "# define task specific layers", "\n", "", "", "self", ".", "pred_task1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "filter", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "self", ".", "class_nb", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "pred_task2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "filter", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "pred_task3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "filter", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n", "# define pooling and unpooling functions", "\n", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.5", ",", "-", "0.5", ",", "-", "0.5", "]", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_split.SegNet.conv_layer": [[76, 93], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "", "def", "conv_layer", "(", "self", ",", "channel", ")", ":", "\n", "        ", "if", "opt", ".", "type", "==", "'deep'", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_split.SegNet.forward": [[94, 127], ["range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_split.SegNet.pred_task2", "model_segnet_split.SegNet.pred_task3", "model_segnet_split.SegNet.pred_task1", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "range", "model_segnet_split.SegNet.down_sampling", "model_segnet_split.SegNet.down_sampling", "model_segnet_split.SegNet.up_sampling", "model_segnet_split.SegNet.up_sampling", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# global shared encoder-decoder network", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task prediction layers", "\n", "", "", "t1_pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task1", "(", "g_decoder", "[", "i", "]", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "t2_pred", "=", "self", ".", "pred_task2", "(", "g_decoder", "[", "i", "]", "[", "1", "]", ")", "\n", "t3_pred", "=", "self", ".", "pred_task3", "(", "g_decoder", "[", "i", "]", "[", "1", "]", ")", "\n", "t3_pred", "=", "t3_pred", "/", "torch", ".", "norm", "(", "t3_pred", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "[", "t1_pred", ",", "t2_pred", ",", "t3_pred", "]", ",", "self", ".", "logsigma", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_cross.SegNet.__init__": [[20, 69], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_cross.SegNet.modules", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_cross.SegNet.encoder_block_t.append", "model_segnet_cross.SegNet.decoder_block_t.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_cross.SegNet.encoder_block_t[].append", "model_segnet_cross.SegNet.decoder_block_t[].append", "model_segnet_cross.SegNet.encoder_block_t[].append", "model_segnet_cross.SegNet.decoder_block_t[].append", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "torch.init.constant", "torch.init.constant", "torch.init.constant", "torch.init.constant"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "7", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block_t", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ",", "bottle_neck", "=", "True", ")", "]", ")", "]", ")", "\n", "self", ".", "decoder_block_t", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ",", "bottle_neck", "=", "True", ")", "]", ")", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "j", "<", "1", ":", "\n", "                ", "self", ".", "encoder_block_t", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ",", "bottle_neck", "=", "True", ")", "]", ")", ")", "\n", "self", ".", "decoder_block_t", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ",", "bottle_neck", "=", "True", ")", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "encoder_block_t", "[", "j", "]", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ",", "bottle_neck", "=", "True", ")", ")", "\n", "self", ".", "decoder_block_t", "[", "j", "]", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ",", "bottle_neck", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "encoder_block_t", "[", "j", "]", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ",", "bottle_neck", "=", "False", ")", ")", "\n", "self", ".", "decoder_block_t", "[", "j", "]", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ",", "bottle_neck", "=", "False", ")", ")", "\n", "\n", "# define cross-stitch units", "\n", "", "", "", "self", ".", "cs_unit_encoder", "=", "nn", ".", "Parameter", "(", "data", "=", "torch", ".", "ones", "(", "4", ",", "2", ")", ")", "\n", "self", ".", "cs_unit_decoder", "=", "nn", ".", "Parameter", "(", "data", "=", "torch", ".", "ones", "(", "5", ",", "2", ")", ")", "\n", "\n", "# define task specific layers", "\n", "self", ".", "pred_task1", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "bottle_neck", "=", "True", ",", "pred_layer", "=", "True", ")", "\n", "self", ".", "pred_task2", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "bottle_neck", "=", "True", ",", "pred_layer", "=", "True", ")", "\n", "#self.pred_task3 = self.conv_layer([filter[0], 3], bottle_neck=True, pred_layer=True)", "\n", "\n", "# define pooling and unpooling functions", "\n", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.5", ",", "-", "0.5", "]", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Parameter", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_cross.SegNet.conv_layer": [[70, 100], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "bottle_neck", ",", "pred_layer", "=", "False", ")", ":", "\n", "        ", "if", "bottle_neck", ":", "\n", "            ", "if", "not", "pred_layer", ":", "\n", "                ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_cross.SegNet.forward": [[101, 141], ["range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_cross.SegNet.pred_task2", "range", "range", "model_segnet_cross.SegNet.pred_task1", "range", "range", "model_segnet_cross.SegNet.down_sampling", "model_segnet_cross.SegNet.down_sampling", "model_segnet_cross.SegNet.up_sampling", "model_segnet_cross.SegNet.up_sampling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoder_conv_t", ",", "decoder_conv_t", ",", "encoder_samp_t", ",", "decoder_samp_t", ",", "indices_t", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "encoder_conv_t", "[", "i", "]", ",", "decoder_conv_t", "[", "i", "]", ",", "encoder_samp_t", "[", "i", "]", ",", "decoder_samp_t", "[", "i", "]", ",", "indices_t", "[", "i", "]", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "\n", "# task branch 1", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "encoder_conv_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "encoder_block_t", "[", "j", "]", "[", "i", "]", "(", "x", ")", "\n", "encoder_samp_t", "[", "j", "]", "[", "i", "]", ",", "indices_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "encoder_conv_t", "[", "j", "]", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "encoder_cross_stitch", "=", "self", ".", "cs_unit_encoder", "[", "i", "-", "1", "]", "[", "0", "]", "*", "encoder_samp_t", "[", "0", "]", "[", "i", "-", "1", "]", "+", "self", ".", "cs_unit_encoder", "[", "i", "-", "1", "]", "[", "1", "]", "*", "encoder_samp_t", "[", "1", "]", "[", "i", "-", "1", "]", "\n", "#self.cs_unit_encoder[i - 1][2] * encoder_samp_t[2][i - 1]", "\n", "encoder_conv_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "encoder_block_t", "[", "j", "]", "[", "i", "]", "(", "encoder_cross_stitch", ")", "\n", "encoder_samp_t", "[", "j", "]", "[", "i", "]", ",", "indices_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "encoder_conv_t", "[", "j", "]", "[", "i", "]", ")", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "decoder_cross_stitch", "=", "self", ".", "cs_unit_decoder", "[", "i", "]", "[", "0", "]", "*", "encoder_samp_t", "[", "0", "]", "[", "-", "1", "]", "+", "self", ".", "cs_unit_decoder", "[", "i", "]", "[", "1", "]", "*", "encoder_samp_t", "[", "1", "]", "[", "-", "1", "]", "\n", "#self.cs_unit_decoder[i][2] * encoder_samp_t[2][-1]", "\n", "decoder_samp_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "decoder_cross_stitch", ",", "indices_t", "[", "j", "]", "[", "-", "i", "-", "1", "]", ")", "\n", "decoder_conv_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "decoder_block_t", "[", "j", "]", "[", "-", "i", "-", "1", "]", "(", "decoder_samp_t", "[", "j", "]", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "decoder_cross_stitch", "=", "self", ".", "cs_unit_decoder", "[", "i", "]", "[", "0", "]", "*", "decoder_conv_t", "[", "0", "]", "[", "i", "-", "1", "]", "+", "self", ".", "cs_unit_decoder", "[", "i", "]", "[", "1", "]", "*", "decoder_conv_t", "[", "1", "]", "[", "i", "-", "1", "]", "\n", "#self.cs_unit_decoder[i][2] * decoder_conv_t[2][i - 1]", "\n", "decoder_samp_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "decoder_cross_stitch", ",", "indices_t", "[", "j", "]", "[", "-", "i", "-", "1", "]", ")", "\n", "decoder_conv_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "decoder_block_t", "[", "j", "]", "[", "-", "i", "-", "1", "]", "(", "decoder_samp_t", "[", "j", "]", "[", "i", "]", ")", "\n", "\n", "# define task prediction layers", "\n", "", "", "", "t1_pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task1", "(", "decoder_conv_t", "[", "0", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "t2_pred", "=", "self", ".", "pred_task2", "(", "decoder_conv_t", "[", "1", "]", "[", "-", "1", "]", ")", "\n", "#t3_pred = self.pred_task3(decoder_conv_t[2][-1])", "\n", "#t3_pred = t3_pred / torch.norm(t3_pred, p=2, dim=1, keepdim=True)", "\n", "\n", "return", "[", "t1_pred", ",", "t2_pred", "]", ",", "self", ".", "logsigma", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_single.SegNet.__init__": [[17, 62], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "model_segnet_single.SegNet.modules", "model_segnet_single.SegNet.encoder_block.append", "model_segnet_single.SegNet.decoder_block.append", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "isinstance", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_block_enc.append", "model_segnet_single.SegNet.conv_block_dec.append", "model_segnet_single.SegNet.conv_block_enc.append", "model_segnet_single.SegNet.conv_block_dec.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "7", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "pred", "=", "True", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "pred", "=", "True", ")", "\n", "\n", "# define pooling and unpooling functions", "\n", "", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_single.SegNet.conv_layer": [[63, 76], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "pred", "=", "False", ")", ":", "\n", "        ", "if", "not", "pred", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_single.SegNet.forward": [[77, 109], ["range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_single.SegNet.pred_task", "range", "model_segnet_single.SegNet.down_sampling", "model_segnet_single.SegNet.down_sampling", "model_segnet_single.SegNet.up_sampling", "model_segnet_single.SegNet.up_sampling", "model_segnet_single.SegNet.pred_task", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define global shared network", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task prediction layers", "\n", "", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task", "(", "g_decoder", "[", "-", "1", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "pred", "=", "self", ".", "pred_task", "(", "g_decoder", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_stan.SegNet.__init__": [[17, 82], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "model_segnet_stan.SegNet.modules", "model_segnet_stan.SegNet.encoder_block.append", "model_segnet_stan.SegNet.decoder_block.append", "range", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "isinstance", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_block_enc.append", "model_segnet_stan.SegNet.conv_block_dec.append", "model_segnet_stan.SegNet.conv_block_enc.append", "model_segnet_stan.SegNet.conv_block_dec.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.encoder_att[].append", "model_segnet_stan.SegNet.decoder_att[].append", "model_segnet_stan.SegNet.encoder_block_att.append", "model_segnet_stan.SegNet.decoder_block_att.append", "model_segnet_stan.SegNet.encoder_block_att.append", "model_segnet_stan.SegNet.decoder_block_att.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_segnet_stan.SegNet.att_layer", "model_segnet_stan.SegNet.att_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.att_layer", "model_segnet_stan.SegNet.att_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "13", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "", "", "self", ".", "encoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "decoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "encoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "1", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "self", ".", "encoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "filter", "[", "i", "+", "1", "]", "+", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "<", "3", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "2", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "\n", "", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "pred", "=", "True", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "pred", "=", "True", ")", "\n", "", "if", "opt", ".", "task", "==", "'normal'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "3", "]", ",", "pred", "=", "True", ")", "\n", "\n", "# define pooling and unpooling functions", "\n", "", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_stan.SegNet.conv_layer": [[83, 96], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "pred", "=", "False", ")", ":", "\n", "        ", "if", "not", "pred", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_stan.SegNet.att_layer": [[97, 107], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "def", "att_layer", "(", "self", ",", "channel", ")", ":", "\n", "        ", "att_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "return", "att_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_stan.SegNet.forward": [[108, 177], ["range", "range", "range", "range", "range", "range", "range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_stan.SegNet.pred_task", "model_segnet_stan.SegNet.pred_task", "range", "range", "model_segnet_stan.SegNet.down_sampling", "model_segnet_stan.SegNet.down_sampling", "model_segnet_stan.SegNet.up_sampling", "model_segnet_stan.SegNet.up_sampling", "model_segnet_stan.SegNet.pred_task", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "range", "range", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define attention list for two tasks", "\n", "", "atten_encoder", ",", "atten_decoder", "=", "(", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "atten_encoder", "[", "i", "]", ",", "atten_decoder", "[", "i", "]", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "atten_encoder", "[", "i", "]", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "=", "(", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define global shared network", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task dependent attention module", "\n", "", "", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "torch", ".", "cat", "(", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ",", "atten_encoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_encoder", "[", "i", "]", "[", "-", "1", "]", "[", "-", "1", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_decoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "\n", "# define task prediction layers", "\n", "", "", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "pred", "=", "self", ".", "pred_task", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "", "if", "opt", ".", "task", "==", "'normal'", ":", "\n", "            ", "pred", "=", "self", ".", "pred_task", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "pred", "=", "pred", "/", "torch", ".", "norm", "(", "pred", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.RandomScaleCrop.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "[", "1.0", ",", "1.2", ",", "1.5", "]", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.RandomScaleCrop.__call__": [[18, 29], ["random.randint", "random.randint", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze().squeeze", "torch.interpolate().squeeze().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "int", "int", "random.randint", "torch.interpolate", "torch.interpolate", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "len", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ",", "depth", ",", "normal", ")", ":", "\n", "        ", "height", ",", "width", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "sc", "=", "self", ".", "scale", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scale", ")", "-", "1", ")", "]", "\n", "h", ",", "w", "=", "int", "(", "height", "/", "sc", ")", ",", "int", "(", "width", "/", "sc", ")", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "height", "-", "h", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "width", "-", "w", ")", "\n", "img_", "=", "F", ".", "interpolate", "(", "img", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "0", ")", "\n", "label_", "=", "F", ".", "interpolate", "(", "label", "[", "None", ",", "None", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "depth_", "=", "F", ".", "interpolate", "(", "depth", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", "\n", "normal_", "=", "F", ".", "interpolate", "(", "normal", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "0", ")", "\n", "return", "img_", ",", "label_", ",", "depth_", "/", "sc", ",", "normal_", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.RandomScaleCropCityScapes.__init__": [[34, 36], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "[", "1.0", ",", "1.2", ",", "1.5", "]", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.RandomScaleCropCityScapes.__call__": [[37, 47], ["random.randint", "random.randint", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze().squeeze", "torch.interpolate().squeeze().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "int", "int", "random.randint", "torch.interpolate", "torch.interpolate", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate", "torch.interpolate", "len", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ",", "depth", ")", ":", "\n", "        ", "height", ",", "width", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "sc", "=", "self", ".", "scale", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scale", ")", "-", "1", ")", "]", "\n", "h", ",", "w", "=", "int", "(", "height", "/", "sc", ")", ",", "int", "(", "width", "/", "sc", ")", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "height", "-", "h", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "width", "-", "w", ")", "\n", "img_", "=", "F", ".", "interpolate", "(", "img", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "0", ")", "\n", "label_", "=", "F", ".", "interpolate", "(", "label", "[", "None", ",", "None", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "depth_", "=", "F", ".", "interpolate", "(", "depth", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", "\n", "return", "img_", ",", "label_", ",", "depth_", "/", "sc", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.NYUv2.__init__": [[61, 74], ["os.path.expanduser", "len", "fnmatch.filter", "os.listdir"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "augmentation", "=", "False", ")", ":", "\n", "        ", "self", ".", "train", "=", "train", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "\n", "# read the data file", "\n", "if", "train", ":", "\n", "            ", "self", ".", "data_path", "=", "root", "+", "'/train'", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_path", "=", "root", "+", "'/val'", "\n", "\n", "# calculate data length", "\n", "", "self", ".", "data_len", "=", "len", "(", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "self", ".", "data_path", "+", "'/image'", ")", ",", "'*.npy'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.NYUv2.__getitem__": [[75, 93], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.moveaxis", "numpy.load", "numpy.moveaxis", "numpy.moveaxis", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "numpy.load", "numpy.load", "numpy.load", "create_dataset.RandomScaleCrop", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load data from the pre-processed npy files", "\n", "        ", "image", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "np", ".", "load", "(", "self", ".", "data_path", "+", "'/image/{:d}.npy'", ".", "format", "(", "index", ")", ")", ",", "-", "1", ",", "0", ")", ")", "\n", "semantic", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "self", ".", "data_path", "+", "'/label/{:d}.npy'", ".", "format", "(", "index", ")", ")", ")", "\n", "depth", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "np", ".", "load", "(", "self", ".", "data_path", "+", "'/depth/{:d}.npy'", ".", "format", "(", "index", ")", ")", ",", "-", "1", ",", "0", ")", ")", "\n", "normal", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "np", ".", "load", "(", "self", ".", "data_path", "+", "'/normal/{:d}.npy'", ".", "format", "(", "index", ")", ")", ",", "-", "1", ",", "0", ")", ")", "\n", "\n", "# apply data augmentation if required", "\n", "if", "self", ".", "augmentation", ":", "\n", "            ", "image", ",", "semantic", ",", "depth", ",", "normal", "=", "RandomScaleCrop", "(", ")", "(", "image", ",", "semantic", ",", "depth", ",", "normal", ")", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "0.5", ":", "\n", "                ", "image", "=", "torch", ".", "flip", "(", "image", ",", "dims", "=", "[", "2", "]", ")", "\n", "semantic", "=", "torch", ".", "flip", "(", "semantic", ",", "dims", "=", "[", "1", "]", ")", "\n", "depth", "=", "torch", ".", "flip", "(", "depth", ",", "dims", "=", "[", "2", "]", ")", "\n", "normal", "=", "torch", ".", "flip", "(", "normal", ",", "dims", "=", "[", "2", "]", ")", "\n", "normal", "[", "0", ",", ":", ",", ":", "]", "=", "-", "normal", "[", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "", "return", "image", ".", "float", "(", ")", ",", "semantic", ".", "float", "(", ")", ",", "depth", ".", "float", "(", ")", ",", "normal", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.NYUv2.__len__": [[94, 96], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_len", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.CityScapes.__init__": [[109, 122], ["os.path.expanduser", "len", "fnmatch.filter", "os.listdir"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "augmentation", "=", "False", ")", ":", "\n", "        ", "self", ".", "train", "=", "train", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "\n", "# read the data file", "\n", "if", "train", ":", "\n", "            ", "self", ".", "data_path", "=", "root", "+", "'/train'", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_path", "=", "root", "+", "'/val'", "\n", "\n", "# calculate data length", "\n", "", "self", ".", "data_len", "=", "len", "(", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "self", ".", "data_path", "+", "'/image'", ")", ",", "'*.npy'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.CityScapes.__getitem__": [[123, 138], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.moveaxis", "numpy.load", "numpy.moveaxis", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "numpy.load", "numpy.load", "create_dataset.RandomScaleCropCityScapes", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load data from the pre-processed npy files", "\n", "        ", "image", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "np", ".", "load", "(", "self", ".", "data_path", "+", "'/image/{:d}.npy'", ".", "format", "(", "index", ")", ")", ",", "-", "1", ",", "0", ")", ")", "\n", "semantic", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "self", ".", "data_path", "+", "'/label_7/{:d}.npy'", ".", "format", "(", "index", ")", ")", ")", "\n", "depth", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "np", ".", "load", "(", "self", ".", "data_path", "+", "'/depth/{:d}.npy'", ".", "format", "(", "index", ")", ")", ",", "-", "1", ",", "0", ")", ")", "\n", "\n", "# apply data augmentation if required", "\n", "if", "self", ".", "augmentation", ":", "\n", "            ", "image", ",", "semantic", ",", "depth", "=", "RandomScaleCropCityScapes", "(", ")", "(", "image", ",", "semantic", ",", "depth", ")", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "0.5", ":", "\n", "                ", "image", "=", "torch", ".", "flip", "(", "image", ",", "dims", "=", "[", "2", "]", ")", "\n", "semantic", "=", "torch", ".", "flip", "(", "semantic", ",", "dims", "=", "[", "1", "]", ")", "\n", "depth", "=", "torch", ".", "flip", "(", "depth", ",", "dims", "=", "[", "2", "]", ")", "\n", "\n", "", "", "return", "image", ".", "float", "(", ")", ",", "semantic", ".", "float", "(", ")", ",", "depth", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.create_dataset.CityScapes.__len__": [[139, 141], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.plot.delta_fn": [[101, 103], ["None"], "function", ["None"], ["def", "delta_fn", "(", "a", ")", ":", "\n", "    ", "return", "(", "kk", "**", "sign", "*", "(", "a", "-", "base", ")", "/", "base", ")", ".", "mean", "(", ")", "*", "100.", "# *100 for percentage", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.plot.barplot": [[136, 171], ["seaborn.set", "matplotlib.figure", "ys.mean", "ys.mean.min", "ys.mean.max", "zip", "matplotlib.box", "matplotlib.title", "matplotlib.ylim", "matplotlib.yticks", "matplotlib.xticks", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "matplotlib.bar", "numpy.arange", "b.mean", "b.std", "numpy.sqrt"], "function", ["None"], ["", "def", "barplot", "(", "ys", ",", "methods", ",", "name", ",", "loss", ",", "title", ")", ":", "\n", "# ys [#methods, 3], 3 means 3 seeds", "\n", "\n", "    ", "sns", ".", "set", "(", "style", "=", "\"whitegrid\"", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "2", ",", "4", ")", ")", "\n", "\n", "n", "=", "ys", ".", "shape", "[", "0", "]", "\n", "bw", "=", "0.1", "\n", "x", "=", "np", ".", "arange", "(", "n", ")", "*", "(", "bw", ")", "+", "1", "# x_pos", "\n", "\n", "yy", "=", "ys", ".", "mean", "(", "1", ")", "\n", "y_min", "=", "yy", ".", "min", "(", ")", "\n", "y_max", "=", "yy", ".", "max", "(", ")", "\n", "\n", "if", "\"time\"", "in", "loss", ":", "\n", "        ", "y_lim_min", "=", "0", "\n", "y_lim_max", "=", "y_max", "*", "1.2", "\n", "", "else", ":", "\n", "        ", "y_lim_min", "=", "y_min", "-", "(", "y_max", "-", "y_min", ")", "\n", "y_lim_max", "=", "y_max", "+", "(", "y_max", "-", "y_min", ")", "\n", "\n", "# Create barplot", "\n", "", "for", "a", ",", "b", ",", "c", ",", "cl", "in", "zip", "(", "x", ",", "ys", ",", "methods", ",", "colors", "[", ":", "n", "]", ")", ":", "\n", "        ", "plt", ".", "bar", "(", "a", ",", "b", ".", "mean", "(", ")", ",", "yerr", "=", "b", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "n", ")", ",", "\n", "width", "=", "bw", ",", "color", "=", "cl", ",", "edgecolor", "=", "'black'", ",", "\n", "capsize", "=", "5", ",", "alpha", "=", "1.", ",", "linewidth", "=", "1.", ",", "\n", "error_kw", "=", "{", "\"elinewidth\"", ":", "1", ",", "\"capsize\"", ":", "3", "}", ")", "\n", "", "plt", ".", "box", "(", "False", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "ylim", "(", "y_lim_min", ",", "y_lim_max", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "10", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"{name}.png\"", ",", "dpi", "=", "400", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mtan.SegNet.__init__": [[20, 88], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_mtan.SegNet.modules", "model_segnet_mtan.SegNet.encoder_block.append", "model_segnet_mtan.SegNet.decoder_block.append", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_block_enc.append", "model_segnet_mtan.SegNet.conv_block_dec.append", "model_segnet_mtan.SegNet.conv_block_enc.append", "model_segnet_mtan.SegNet.conv_block_dec.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.encoder_att.append", "model_segnet_mtan.SegNet.decoder_att.append", "model_segnet_mtan.SegNet.encoder_att[].append", "model_segnet_mtan.SegNet.decoder_att[].append", "model_segnet_mtan.SegNet.encoder_block_att.append", "model_segnet_mtan.SegNet.decoder_block_att.append", "model_segnet_mtan.SegNet.encoder_block_att.append", "model_segnet_mtan.SegNet.decoder_block_att.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_mtan.SegNet.att_layer", "model_segnet_mtan.SegNet.att_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.att_layer", "model_segnet_mtan.SegNet.att_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "model_segnet_mtan.SegNet.att_layer", "model_segnet_mtan.SegNet.att_layer"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "7", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "# define task attention layers", "\n", "", "", "self", ".", "encoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "decoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "encoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "1", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "j", "<", "1", ":", "\n", "                ", "self", ".", "encoder_att", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", ")", "\n", "self", ".", "decoder_att", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "self", ".", "encoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "filter", "[", "i", "+", "1", "]", "+", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "<", "3", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "2", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "\n", "", "", "self", ".", "pred_task1", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "pred", "=", "True", ")", "\n", "self", ".", "pred_task2", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "pred", "=", "True", ")", "\n", "#self.pred_task3 = self.conv_layer([filter[0], 3], pred=True)", "\n", "\n", "# define pooling and unpooling functions", "\n", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.5", ",", "-", "0.5", ",", "-", "0.5", "]", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mtan.SegNet.conv_layer": [[89, 102], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "pred", "=", "False", ")", ":", "\n", "        ", "if", "not", "pred", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mtan.SegNet.att_layer": [[103, 113], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "def", "att_layer", "(", "self", ",", "channel", ")", ":", "\n", "        ", "att_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "return", "att_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mtan.SegNet.forward": [[114, 181], ["range", "range", "range", "range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_mtan.SegNet.pred_task2", "range", "range", "range", "model_segnet_mtan.SegNet.pred_task1", "range", "range", "model_segnet_mtan.SegNet.down_sampling", "model_segnet_mtan.SegNet.down_sampling", "model_segnet_mtan.SegNet.up_sampling", "model_segnet_mtan.SegNet.up_sampling", "range", "range", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define attention list for tasks", "\n", "", "atten_encoder", ",", "atten_decoder", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "atten_encoder", "[", "i", "]", ",", "atten_decoder", "[", "i", "]", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "atten_encoder", "[", "i", "]", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "=", "(", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define global shared network", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task dependent attention module", "\n", "", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "torch", ".", "cat", "(", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ",", "atten_encoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_encoder", "[", "i", "]", "[", "-", "1", "]", "[", "-", "1", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_decoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "\n", "# define task prediction layers", "\n", "", "", "", "t1_pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task1", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "t2_pred", "=", "self", ".", "pred_task2", "(", "atten_decoder", "[", "1", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "#t3_pred = self.pred_task3(atten_decoder[2][-1][-1])", "\n", "#t3_pred = t3_pred / torch.norm(t3_pred, p=2, dim=1, keepdim=True)", "\n", "\n", "return", "[", "t1_pred", ",", "t2_pred", "]", ",", "self", ".", "logsigma", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.ConfMatrix.__init__": [[97, 100], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mat", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.ConfMatrix.update": [[101, 109], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.bincount().reshape", "torch.bincount().reshape", "torch.bincount().reshape", "torch.bincount().reshape", "target[].to", "torch.bincount", "torch.bincount", "torch.bincount", "torch.bincount"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "n", "=", "self", ".", "num_classes", "\n", "if", "self", ".", "mat", "is", "None", ":", "\n", "            ", "self", ".", "mat", "=", "torch", ".", "zeros", "(", "(", "n", ",", "n", ")", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "pred", ".", "device", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "k", "=", "(", "target", ">=", "0", ")", "&", "(", "target", "<", "n", ")", "\n", "inds", "=", "n", "*", "target", "[", "k", "]", ".", "to", "(", "torch", ".", "int64", ")", "+", "pred", "[", "k", "]", "\n", "self", ".", "mat", "+=", "torch", ".", "bincount", "(", "inds", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.ConfMatrix.get_metrics": [[110, 115], ["utils.ConfMatrix.mat.float", "torch.diag().sum", "torch.diag().sum", "torch.diag().sum", "torch.diag().sum", "utils.ConfMatrix.sum", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "utils.ConfMatrix.sum", "utils.ConfMatrix.sum"], "methods", ["None"], ["", "", "def", "get_metrics", "(", "self", ")", ":", "\n", "        ", "h", "=", "self", ".", "mat", ".", "float", "(", ")", "\n", "acc", "=", "torch", ".", "diag", "(", "h", ")", ".", "sum", "(", ")", "/", "h", ".", "sum", "(", ")", "\n", "iu", "=", "torch", ".", "diag", "(", "h", ")", "/", "(", "h", ".", "sum", "(", "1", ")", "+", "h", ".", "sum", "(", "0", ")", "-", "torch", ".", "diag", "(", "h", ")", ")", "\n", "return", "torch", ".", "mean", "(", "iu", ")", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.control_seed": [[15, 21], ["torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "control_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.count_parameters": [[22, 24], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.model_fit": [[26, 45], ["torch.nll_loss", "torch.sum", "torch.sum", "torch.nonzero().size", "torch.nonzero().size", "torch.sum", "torch.sum", "torch.nonzero().size", "torch.nonzero().size", "torch.abs", "torch.abs", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "model_fit", "(", "x_pred", ",", "x_output", ",", "task_type", ")", ":", "\n", "    ", "device", "=", "x_pred", ".", "device", "\n", "\n", "# binary mark to mask out undefined pixel space", "\n", "binary_mask", "=", "(", "torch", ".", "sum", "(", "x_output", ",", "dim", "=", "1", ")", "!=", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "task_type", "==", "'semantic'", ":", "\n", "# semantic loss: depth-wise cross entropy", "\n", "        ", "loss", "=", "F", ".", "nll_loss", "(", "x_pred", ",", "x_output", ",", "ignore_index", "=", "-", "1", ")", "\n", "\n", "", "if", "task_type", "==", "'depth'", ":", "\n", "# depth loss: l1 norm", "\n", "        ", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x_pred", "-", "x_output", ")", "*", "binary_mask", ")", "/", "torch", ".", "nonzero", "(", "binary_mask", ",", "as_tuple", "=", "False", ")", ".", "size", "(", "0", ")", "\n", "\n", "", "if", "task_type", "==", "'normal'", ":", "\n", "# normal loss: dot product", "\n", "        ", "loss", "=", "1", "-", "torch", ".", "sum", "(", "(", "x_pred", "*", "x_output", ")", "*", "binary_mask", ")", "/", "torch", ".", "nonzero", "(", "binary_mask", ",", "as_tuple", "=", "False", ")", ".", "size", "(", "0", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.depth_error": [[117, 126], ["x_pred.masked_select", "x_output.masked_select", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.nonzero().size", "torch.nonzero().size", "torch.sum", "torch.sum", "torch.nonzero().size", "torch.nonzero().size", "torch.sum", "torch.sum", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "function", ["None"], ["", "", "def", "depth_error", "(", "x_pred", ",", "x_output", ")", ":", "\n", "    ", "device", "=", "x_pred", ".", "device", "\n", "binary_mask", "=", "(", "torch", ".", "sum", "(", "x_output", ",", "dim", "=", "1", ")", "!=", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "x_pred_true", "=", "x_pred", ".", "masked_select", "(", "binary_mask", ")", "\n", "x_output_true", "=", "x_output", ".", "masked_select", "(", "binary_mask", ")", "\n", "abs_err", "=", "torch", ".", "abs", "(", "x_pred_true", "-", "x_output_true", ")", "\n", "rel_err", "=", "torch", ".", "abs", "(", "x_pred_true", "-", "x_output_true", ")", "/", "x_output_true", "\n", "return", "(", "torch", ".", "sum", "(", "abs_err", ")", "/", "torch", ".", "nonzero", "(", "binary_mask", ",", "as_tuple", "=", "False", ")", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", ",", "(", "torch", ".", "sum", "(", "rel_err", ")", "/", "torch", ".", "nonzero", "(", "binary_mask", ",", "as_tuple", "=", "False", ")", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.normal_error": [[128, 133], ["torch.acos().detach().cpu().numpy", "torch.acos().detach().cpu().numpy", "numpy.degrees", "torch.sum", "torch.sum", "numpy.mean", "numpy.median", "numpy.mean", "numpy.mean", "numpy.mean", "torch.acos().detach().cpu", "torch.acos().detach().cpu", "torch.acos().detach", "torch.acos().detach", "torch.acos", "torch.acos", "torch.clamp", "torch.clamp", "torch.sum().masked_select", "torch.sum().masked_select", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "normal_error", "(", "x_pred", ",", "x_output", ")", ":", "\n", "    ", "binary_mask", "=", "(", "torch", ".", "sum", "(", "x_output", ",", "dim", "=", "1", ")", "!=", "0", ")", "\n", "error", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "x_pred", "*", "x_output", ",", "1", ")", ".", "masked_select", "(", "binary_mask", ")", ",", "-", "1", ",", "1", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "error", "=", "np", ".", "degrees", "(", "error", ")", "\n", "return", "np", ".", "mean", "(", "error", ")", ",", "np", ".", "median", "(", "error", ")", ",", "np", ".", "mean", "(", "error", "<", "11.25", ")", ",", "np", ".", "mean", "(", "error", "<", "22.5", ")", ",", "np", ".", "mean", "(", "error", "<", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.multi_task_trainer": [[140, 224], ["len", "len", "numpy.zeros", "numpy.ones", "range", "time.time", "numpy.zeros", "multi_task_model.train", "iter", "utils.ConfMatrix", "range", "utils.ConfMatrix.get_metrics", "multi_task_model.eval", "utils.ConfMatrix", "scheduler.step", "time.time", "print", "iter.next", "train_depth.to.to", "multi_task_model", "optimizer.zero_grad", "sum.backward", "optimizer.step", "utils.ConfMatrix.update", "train_loss[].item", "train_loss[].item", "utils.depth_error", "torch.no_grad", "torch.no_grad", "iter", "range", "utils.ConfMatrix.get_metrics", "train_data.to", "train_label.long().to", "utils.model_fit", "utils.model_fit", "sum", "sum", "train_pred[].argmax().flatten", "train_label.flatten", "iter.next", "test_depth.to.to", "multi_task_model", "utils.ConfMatrix.update", "test_loss[].item", "test_loss[].item", "utils.depth_error", "test_data.to", "test_label.long().to", "utils.model_fit", "utils.model_fit", "test_pred[].argmax().flatten", "test_label.flatten", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "train_label.long", "train_pred[].argmax", "range", "range", "test_label.long", "test_pred[].argmax", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit"], ["def", "multi_task_trainer", "(", "train_loader", ",", "test_loader", ",", "multi_task_model", ",", "device", ",", "optimizer", ",", "scheduler", ",", "opt", ",", "total_epoch", "=", "200", ")", ":", "\n", "    ", "train_batch", "=", "len", "(", "train_loader", ")", "\n", "test_batch", "=", "len", "(", "test_loader", ")", "\n", "T", "=", "opt", ".", "temp", "\n", "avg_cost", "=", "np", ".", "zeros", "(", "[", "total_epoch", ",", "12", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lambda_weight", "=", "np", ".", "ones", "(", "[", "2", ",", "total_epoch", "]", ")", "\n", "for", "index", "in", "range", "(", "total_epoch", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "cost", "=", "np", ".", "zeros", "(", "12", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# apply Dynamic Weight Average", "\n", "if", "opt", ".", "weight", "==", "'dwa'", ":", "\n", "            ", "if", "index", "==", "0", "or", "index", "==", "1", ":", "\n", "                ", "lambda_weight", "[", ":", ",", "index", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "w_1", "=", "avg_cost", "[", "index", "-", "1", ",", "0", "]", "/", "avg_cost", "[", "index", "-", "2", ",", "0", "]", "\n", "w_2", "=", "avg_cost", "[", "index", "-", "1", ",", "3", "]", "/", "avg_cost", "[", "index", "-", "2", ",", "3", "]", "\n", "lambda_weight", "[", "0", ",", "index", "]", "=", "2", "*", "np", ".", "exp", "(", "w_1", "/", "T", ")", "/", "(", "np", ".", "exp", "(", "w_1", "/", "T", ")", "+", "np", ".", "exp", "(", "w_2", "/", "T", ")", ")", "\n", "lambda_weight", "[", "1", ",", "index", "]", "=", "2", "*", "np", ".", "exp", "(", "w_2", "/", "T", ")", "/", "(", "np", ".", "exp", "(", "w_1", "/", "T", ")", "+", "np", ".", "exp", "(", "w_2", "/", "T", ")", ")", "\n", "\n", "# iteration for all batches", "\n", "", "", "multi_task_model", ".", "train", "(", ")", "\n", "train_dataset", "=", "iter", "(", "train_loader", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "multi_task_model", ".", "class_nb", ")", "\n", "for", "k", "in", "range", "(", "train_batch", ")", ":", "\n", "            ", "train_data", ",", "train_label", ",", "train_depth", "=", "train_dataset", ".", "next", "(", ")", "\n", "train_data", ",", "train_label", "=", "train_data", ".", "to", "(", "device", ")", ",", "train_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "train_depth", "=", "train_depth", ".", "to", "(", "device", ")", "\n", "\n", "train_pred", ",", "logsigma", "=", "multi_task_model", "(", "train_data", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "train_loss", "=", "[", "model_fit", "(", "train_pred", "[", "0", "]", ",", "train_label", ",", "'semantic'", ")", ",", "\n", "model_fit", "(", "train_pred", "[", "1", "]", ",", "train_depth", ",", "'depth'", ")", "]", "\n", "\n", "if", "opt", ".", "weight", "==", "'equal'", "or", "opt", ".", "weight", "==", "'dwa'", ":", "\n", "                ", "loss", "=", "sum", "(", "[", "lambda_weight", "[", "i", ",", "index", "]", "*", "train_loss", "[", "i", "]", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "sum", "(", "1", "/", "(", "2", "*", "torch", ".", "exp", "(", "logsigma", "[", "i", "]", ")", ")", "*", "train_loss", "[", "i", "]", "+", "logsigma", "[", "i", "]", "/", "2", "for", "i", "in", "range", "(", "2", ")", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# accumulate label prediction for every pixel in training images", "\n", "conf_mat", ".", "update", "(", "train_pred", "[", "0", "]", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "train_label", ".", "flatten", "(", ")", ")", "\n", "\n", "cost", "[", "0", "]", "=", "train_loss", "[", "0", "]", ".", "item", "(", ")", "\n", "cost", "[", "3", "]", "=", "train_loss", "[", "1", "]", ".", "item", "(", ")", "\n", "cost", "[", "4", "]", ",", "cost", "[", "5", "]", "=", "depth_error", "(", "train_pred", "[", "1", "]", ",", "train_depth", ")", "\n", "avg_cost", "[", "index", ",", ":", "6", "]", "+=", "cost", "[", ":", "6", "]", "/", "train_batch", "\n", "\n", "# compute mIoU and acc", "\n", "", "avg_cost", "[", "index", ",", "1", ":", "3", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "# evaluating test data", "\n", "multi_task_model", ".", "eval", "(", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "multi_task_model", ".", "class_nb", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# operations inside don't track history", "\n", "            ", "test_dataset", "=", "iter", "(", "test_loader", ")", "\n", "for", "k", "in", "range", "(", "test_batch", ")", ":", "\n", "                ", "test_data", ",", "test_label", ",", "test_depth", "=", "test_dataset", ".", "next", "(", ")", "\n", "test_data", ",", "test_label", "=", "test_data", ".", "to", "(", "device", ")", ",", "test_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "test_depth", "=", "test_depth", ".", "to", "(", "device", ")", "\n", "\n", "test_pred", ",", "_", "=", "multi_task_model", "(", "test_data", ")", "\n", "test_loss", "=", "[", "model_fit", "(", "test_pred", "[", "0", "]", ",", "test_label", ",", "'semantic'", ")", ",", "\n", "model_fit", "(", "test_pred", "[", "1", "]", ",", "test_depth", ",", "'depth'", ")", "]", "\n", "\n", "conf_mat", ".", "update", "(", "test_pred", "[", "0", "]", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "test_label", ".", "flatten", "(", ")", ")", "\n", "\n", "cost", "[", "6", "]", "=", "test_loss", "[", "0", "]", ".", "item", "(", ")", "\n", "cost", "[", "9", "]", "=", "test_loss", "[", "1", "]", ".", "item", "(", ")", "\n", "cost", "[", "10", "]", ",", "cost", "[", "11", "]", "=", "depth_error", "(", "test_pred", "[", "1", "]", ",", "test_depth", ")", "\n", "avg_cost", "[", "index", ",", "6", ":", "]", "+=", "cost", "[", "6", ":", "]", "/", "test_batch", "\n", "\n", "# compute mIoU and acc", "\n", "", "avg_cost", "[", "index", ",", "7", ":", "9", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Epoch: {:04d} | TRAIN: {:.4f} {:.4f} {:.4f} | {:.4f} {:.4f} {:.4f} || TEST: {:.4f} {:.4f} {:.4f} | {:.4f} {:.4f} {:.4f} | TIME: {:.4f}'", "\n", ".", "format", "(", "index", ",", "avg_cost", "[", "index", ",", "0", "]", ",", "avg_cost", "[", "index", ",", "1", "]", ",", "avg_cost", "[", "index", ",", "2", "]", ",", "avg_cost", "[", "index", ",", "3", "]", ",", "\n", "avg_cost", "[", "index", ",", "4", "]", ",", "avg_cost", "[", "index", ",", "5", "]", ",", "avg_cost", "[", "index", ",", "6", "]", ",", "avg_cost", "[", "index", ",", "7", "]", ",", "avg_cost", "[", "index", ",", "8", "]", ",", "\n", "avg_cost", "[", "index", ",", "9", "]", ",", "avg_cost", "[", "index", ",", "10", "]", ",", "avg_cost", "[", "index", ",", "11", "]", ",", "t1", "-", "t0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.single_task_trainer": [[231, 305], ["len", "len", "numpy.zeros", "range", "numpy.zeros", "single_task_model.train", "iter", "utils.ConfMatrix", "range", "single_task_model.eval", "utils.ConfMatrix", "scheduler.step", "torch.save", "torch.save", "iter.next", "train_depth.to.to", "single_task_model", "optimizer.zero_grad", "utils.ConfMatrix.get_metrics", "torch.no_grad", "torch.no_grad", "iter", "range", "print", "print", "single_task_model.state_dict", "train_data.to", "train_label.long().to", "utils.model_fit", "model_fit.backward", "optimizer.step", "utils.ConfMatrix.update", "model_fit.item", "utils.model_fit", "model_fit.backward", "optimizer.step", "model_fit.item", "utils.depth_error", "iter.next", "test_depth.to.to", "single_task_model", "utils.ConfMatrix.get_metrics", "single_task_model.argmax().flatten", "train_label.flatten", "test_data.to", "test_label.long().to", "utils.model_fit", "utils.ConfMatrix.update", "model_fit.item", "utils.model_fit", "model_fit.item", "utils.depth_error", "train_label.long", "single_task_model.argmax().flatten", "test_label.flatten", "single_task_model.argmax", "test_label.long", "single_task_model.argmax"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error"], ["def", "single_task_trainer", "(", "train_loader", ",", "test_loader", ",", "single_task_model", ",", "device", ",", "optimizer", ",", "scheduler", ",", "opt", ",", "total_epoch", "=", "200", ")", ":", "\n", "    ", "train_batch", "=", "len", "(", "train_loader", ")", "\n", "test_batch", "=", "len", "(", "test_loader", ")", "\n", "avg_cost", "=", "np", ".", "zeros", "(", "[", "total_epoch", ",", "12", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "index", "in", "range", "(", "total_epoch", ")", ":", "\n", "        ", "cost", "=", "np", ".", "zeros", "(", "12", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# iteration for all batches", "\n", "single_task_model", ".", "train", "(", ")", "\n", "train_dataset", "=", "iter", "(", "train_loader", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "single_task_model", ".", "class_nb", ")", "\n", "for", "k", "in", "range", "(", "train_batch", ")", ":", "\n", "            ", "train_data", ",", "train_label", ",", "train_depth", "=", "train_dataset", ".", "next", "(", ")", "\n", "train_data", ",", "train_label", "=", "train_data", ".", "to", "(", "device", ")", ",", "train_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "train_depth", "=", "train_depth", ".", "to", "(", "device", ")", "\n", "\n", "train_pred", "=", "single_task_model", "(", "train_data", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "                ", "train_loss", "=", "model_fit", "(", "train_pred", ",", "train_label", ",", "opt", ".", "task", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "conf_mat", ".", "update", "(", "train_pred", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "train_label", ".", "flatten", "(", ")", ")", "\n", "cost", "[", "0", "]", "=", "train_loss", ".", "item", "(", ")", "\n", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "                ", "train_loss", "=", "model_fit", "(", "train_pred", ",", "train_depth", ",", "opt", ".", "task", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "cost", "[", "3", "]", "=", "train_loss", ".", "item", "(", ")", "\n", "cost", "[", "4", "]", ",", "cost", "[", "5", "]", "=", "depth_error", "(", "train_pred", ",", "train_depth", ")", "\n", "\n", "", "avg_cost", "[", "index", ",", ":", "6", "]", "+=", "cost", "[", ":", "6", "]", "/", "train_batch", "\n", "\n", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "avg_cost", "[", "index", ",", "1", ":", "3", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "# evaluating test data", "\n", "", "single_task_model", ".", "eval", "(", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "single_task_model", ".", "class_nb", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# operations inside don't track history", "\n", "            ", "test_dataset", "=", "iter", "(", "test_loader", ")", "\n", "for", "k", "in", "range", "(", "test_batch", ")", ":", "\n", "                ", "test_data", ",", "test_label", ",", "test_depth", "=", "test_dataset", ".", "next", "(", ")", "\n", "test_data", ",", "test_label", "=", "test_data", ".", "to", "(", "device", ")", ",", "test_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "test_depth", "=", "test_depth", ".", "to", "(", "device", ")", "\n", "\n", "test_pred", "=", "single_task_model", "(", "test_data", ")", "\n", "\n", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "                    ", "test_loss", "=", "model_fit", "(", "test_pred", ",", "test_label", ",", "opt", ".", "task", ")", "\n", "\n", "conf_mat", ".", "update", "(", "test_pred", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "test_label", ".", "flatten", "(", ")", ")", "\n", "cost", "[", "6", "]", "=", "test_loss", ".", "item", "(", ")", "\n", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "                    ", "test_loss", "=", "model_fit", "(", "test_pred", ",", "test_depth", ",", "opt", ".", "task", ")", "\n", "cost", "[", "9", "]", "=", "test_loss", ".", "item", "(", ")", "\n", "cost", "[", "10", "]", ",", "cost", "[", "11", "]", "=", "depth_error", "(", "test_pred", ",", "test_depth", ")", "\n", "\n", "", "avg_cost", "[", "index", ",", "6", ":", "]", "+=", "cost", "[", "6", ":", "]", "/", "test_batch", "\n", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "                ", "avg_cost", "[", "index", ",", "7", ":", "9", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "print", "(", "'Epoch: {:04d} | TRAIN: {:.4f} {:.4f} {:.4f} TEST: {:.4f} {:.4f} {:.4f}'", "\n", ".", "format", "(", "index", ",", "avg_cost", "[", "index", ",", "0", "]", ",", "avg_cost", "[", "index", ",", "1", "]", ",", "avg_cost", "[", "index", ",", "2", "]", ",", "avg_cost", "[", "index", ",", "6", "]", ",", "avg_cost", "[", "index", ",", "7", "]", ",", "avg_cost", "[", "index", ",", "8", "]", ")", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "print", "(", "'Epoch: {:04d} | TRAIN: {:.4f} {:.4f} {:.4f} TEST: {:.4f} {:.4f} {:.4f}'", "\n", ".", "format", "(", "index", ",", "avg_cost", "[", "index", ",", "3", "]", ",", "avg_cost", "[", "index", ",", "4", "]", ",", "avg_cost", "[", "index", ",", "5", "]", ",", "avg_cost", "[", "index", ",", "9", "]", ",", "avg_cost", "[", "index", ",", "10", "]", ",", "avg_cost", "[", "index", ",", "11", "]", ")", ")", "\n", "", "torch", ".", "save", "(", "single_task_model", ".", "state_dict", "(", ")", ",", "f\"models/single-{opt.task}-{opt.seed}.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.utils.multi_task_rg_trainer": [[312, 549], ["numpy.random.default_rng", "multi_task_model.shared_modules", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "numpy.zeros", "numpy.ones", "range", "torch.rand_like", "torch.rand_like", "torch.Tensor().cuda.t().cpu", "min_norm_solvers.MinNormSolver.find_min_norm_element", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.Tensor().cuda.mm().view", "torch.Tensor().cuda.t", "numpy.zeros", "range", "copy.deepcopy", "copy.deepcopy.mean", "g1.dot().item", "g1.dot().item", "g2.dot().item", "scipy.optimize.minimize_scalar", "numpy.sqrt", "grads[].fill_", "m.shared_modules", "m.shared_modules", "mm.parameters", "time.time", "numpy.zeros", "multi_task_model.train", "iter", "utils.ConfMatrix", "range", "utils.ConfMatrix.get_metrics", "multi_task_model.eval", "utils.ConfMatrix", "scheduler.step", "time.time", "print", "torch.save", "torch.save", "numpy.arange", "np.random.default_rng.shuffle", "numpy.sqrt", "mm.parameters", "mm.parameters", "grad_dims.append", "torch.Tensor", "torch.Tensor", "iter.next", "train_depth.to.to", "multi_task_model", "optimizer.zero_grad", "utils.ConfMatrix.update", "train_loss[].item", "train_loss[].item", "utils.depth_error", "torch.no_grad", "torch.no_grad", "iter", "range", "utils.ConfMatrix.get_metrics", "multi_task_model.state_dict", "P.gt().view", "torch.Tensor().cuda.gt", "P.lt().view", "torch.Tensor().cuda.lt", "torch.Tensor().cuda.t", "torch.FloatTensor", "torch.FloatTensor", "torch.Tensor().cuda.mm", "grads.t.norm", "torch.clamp_max", "torch.clamp_max", "g1.dot", "g1.dot", "g2.dot", "sum", "newgrad[].contiguous().view", "newgrad[].contiguous().view.data.clone", "param.data.numel", "sum", "train_data.to", "train_label.long().to", "utils.model_fit", "utils.model_fit", "range", "range", "range", "utils.multi_task_rg_trainer.graddrop"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.shared_modules", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver.find_min_norm_element", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.shared_modules", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.shared_modules", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit"], ["def", "multi_task_rg_trainer", "(", "train_loader", ",", "test_loader", ",", "multi_task_model", ",", "device", ",", "optimizer", ",", "scheduler", ",", "opt", ",", "total_epoch", "=", "200", ")", ":", "\n", "    ", "method", "=", "opt", ".", "method", "\n", "alpha", "=", "opt", ".", "alpha", "\n", "\n", "def", "graddrop", "(", "grads", ")", ":", "\n", "        ", "P", "=", "0.5", "*", "(", "1.", "+", "grads", ".", "sum", "(", "1", ")", "/", "(", "grads", ".", "abs", "(", ")", ".", "sum", "(", "1", ")", "+", "1e-8", ")", ")", "\n", "U", "=", "torch", ".", "rand_like", "(", "grads", "[", ":", ",", "0", "]", ")", "\n", "M", "=", "P", ".", "gt", "(", "U", ")", ".", "view", "(", "-", "1", ",", "1", ")", "*", "grads", ".", "gt", "(", "0", ")", "+", "P", ".", "lt", "(", "U", ")", ".", "view", "(", "-", "1", ",", "1", ")", "*", "grads", ".", "lt", "(", "0", ")", "\n", "g", "=", "(", "grads", "*", "M", ".", "float", "(", ")", ")", ".", "mean", "(", "1", ")", "\n", "return", "g", "\n", "\n", "", "def", "mgd", "(", "grads", ")", ":", "\n", "        ", "grads_cpu", "=", "grads", ".", "t", "(", ")", ".", "cpu", "(", ")", "\n", "sol", ",", "min_norm", "=", "MinNormSolver", ".", "find_min_norm_element", "(", "[", "\n", "grads_cpu", "[", "t", "]", "for", "t", "in", "range", "(", "grads", ".", "shape", "[", "-", "1", "]", ")", "]", ")", "\n", "w", "=", "torch", ".", "FloatTensor", "(", "sol", ")", ".", "to", "(", "grads", ".", "device", ")", "\n", "g", "=", "grads", ".", "mm", "(", "w", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "g", "\n", "\n", "", "def", "pcgrad", "(", "grads", ",", "rng", ")", ":", "\n", "        ", "grad_vec", "=", "grads", ".", "t", "(", ")", "\n", "num_tasks", "=", "2", "\n", "\n", "shuffled_task_indices", "=", "np", ".", "zeros", "(", "(", "num_tasks", ",", "num_tasks", "-", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "num_tasks", ")", ":", "\n", "            ", "task_indices", "=", "np", ".", "arange", "(", "num_tasks", ")", "\n", "task_indices", "[", "i", "]", "=", "task_indices", "[", "-", "1", "]", "\n", "shuffled_task_indices", "[", "i", "]", "=", "task_indices", "[", ":", "-", "1", "]", "\n", "rng", ".", "shuffle", "(", "shuffled_task_indices", "[", "i", "]", ")", "\n", "", "shuffled_task_indices", "=", "shuffled_task_indices", ".", "T", "\n", "\n", "normalized_grad_vec", "=", "grad_vec", "/", "(", "\n", "grad_vec", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", "\n", ")", "# num_tasks x dim", "\n", "modified_grad_vec", "=", "deepcopy", "(", "grad_vec", ")", "\n", "for", "task_indices", "in", "shuffled_task_indices", ":", "\n", "            ", "normalized_shuffled_grad", "=", "normalized_grad_vec", "[", "\n", "task_indices", "\n", "]", "# num_tasks x dim", "\n", "dot", "=", "(", "modified_grad_vec", "*", "normalized_shuffled_grad", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", "\n", ")", "# num_tasks x dim", "\n", "modified_grad_vec", "-=", "torch", ".", "clamp_max", "(", "dot", ",", "0", ")", "*", "normalized_shuffled_grad", "\n", "", "g", "=", "modified_grad_vec", ".", "mean", "(", "dim", "=", "0", ")", "\n", "return", "g", "\n", "\n", "", "def", "cagrad", "(", "grads", ",", "alpha", "=", "0.5", ",", "rescale", "=", "0", ")", ":", "\n", "        ", "g1", "=", "grads", "[", ":", ",", "0", "]", "\n", "g2", "=", "grads", "[", ":", ",", "1", "]", "\n", "\n", "g11", "=", "g1", ".", "dot", "(", "g1", ")", ".", "item", "(", ")", "\n", "g12", "=", "g1", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "g22", "=", "g2", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "\n", "g0_norm", "=", "0.5", "*", "np", ".", "sqrt", "(", "g11", "+", "g22", "+", "2", "*", "g12", ")", "\n", "\n", "# want to minimize g_w^Tg_0 + c*||g_0||*||g_w||", "\n", "coef", "=", "alpha", "*", "g0_norm", "\n", "def", "obj", "(", "x", ")", ":", "\n", "# g_w^T g_0: x*0.5*(g11+g22-2g12)+(0.5+x)*(g12-g22)+g22", "\n", "# g_w^T g_w: x^2*(g11+g22-2g12)+2*x*(g12-g22)+g22", "\n", "            ", "return", "coef", "*", "np", ".", "sqrt", "(", "x", "**", "2", "*", "(", "g11", "+", "g22", "-", "2", "*", "g12", ")", "+", "2", "*", "x", "*", "(", "g12", "-", "g22", ")", "+", "g22", "+", "1e-8", ")", "+", "0.5", "*", "x", "*", "(", "g11", "+", "g22", "-", "2", "*", "g12", ")", "+", "(", "0.5", "+", "x", ")", "*", "(", "g12", "-", "g22", ")", "+", "g22", "\n", "\n", "", "res", "=", "minimize_scalar", "(", "obj", ",", "bounds", "=", "(", "0", ",", "1", ")", ",", "method", "=", "'bounded'", ")", "\n", "x", "=", "res", ".", "x", "\n", "\n", "gw_norm", "=", "np", ".", "sqrt", "(", "x", "**", "2", "*", "g11", "+", "(", "1", "-", "x", ")", "**", "2", "*", "g22", "+", "2", "*", "x", "*", "(", "1", "-", "x", ")", "*", "g12", "+", "1e-8", ")", "\n", "lmbda", "=", "coef", "/", "(", "gw_norm", "+", "1e-8", ")", "\n", "g", "=", "(", "0.5", "+", "lmbda", "*", "x", ")", "*", "g1", "+", "(", "0.5", "+", "lmbda", "*", "(", "1", "-", "x", ")", ")", "*", "g2", "# g0 + lmbda*gw", "\n", "if", "rescale", "==", "0", ":", "\n", "            ", "return", "g", "\n", "", "elif", "rescale", "==", "1", ":", "\n", "            ", "return", "g", "/", "(", "1", "+", "alpha", "**", "2", ")", "\n", "", "else", ":", "\n", "            ", "return", "g", "/", "(", "1", "+", "alpha", ")", "\n", "\n", "", "", "def", "grad2vec", "(", "m", ",", "grads", ",", "grad_dims", ",", "task", ")", ":", "\n", "# store the gradients", "\n", "        ", "grads", "[", ":", ",", "task", "]", ".", "fill_", "(", "0.0", ")", "\n", "cnt", "=", "0", "\n", "for", "mm", "in", "m", ".", "shared_modules", "(", ")", ":", "\n", "            ", "for", "p", "in", "mm", ".", "parameters", "(", ")", ":", "\n", "                ", "grad", "=", "p", ".", "grad", "\n", "if", "grad", "is", "not", "None", ":", "\n", "                    ", "grad_cur", "=", "grad", ".", "data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "beg", "=", "0", "if", "cnt", "==", "0", "else", "sum", "(", "grad_dims", "[", ":", "cnt", "]", ")", "\n", "en", "=", "sum", "(", "grad_dims", "[", ":", "cnt", "+", "1", "]", ")", "\n", "grads", "[", "beg", ":", "en", ",", "task", "]", ".", "copy_", "(", "grad_cur", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "", "", "def", "overwrite_grad", "(", "m", ",", "newgrad", ",", "grad_dims", ")", ":", "\n", "        ", "newgrad", "=", "newgrad", "*", "2", "# to match the sum loss", "\n", "cnt", "=", "0", "\n", "for", "mm", "in", "m", ".", "shared_modules", "(", ")", ":", "\n", "            ", "for", "param", "in", "mm", ".", "parameters", "(", ")", ":", "\n", "                ", "beg", "=", "0", "if", "cnt", "==", "0", "else", "sum", "(", "grad_dims", "[", ":", "cnt", "]", ")", "\n", "en", "=", "sum", "(", "grad_dims", "[", ":", "cnt", "+", "1", "]", ")", "\n", "this_grad", "=", "newgrad", "[", "beg", ":", "en", "]", ".", "contiguous", "(", ")", ".", "view", "(", "param", ".", "data", ".", "size", "(", ")", ")", "\n", "param", ".", "grad", "=", "this_grad", ".", "data", ".", "clone", "(", ")", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "", "rng", "=", "np", ".", "random", ".", "default_rng", "(", ")", "\n", "grad_dims", "=", "[", "]", "\n", "for", "mm", "in", "multi_task_model", ".", "shared_modules", "(", ")", ":", "\n", "        ", "for", "param", "in", "mm", ".", "parameters", "(", ")", ":", "\n", "            ", "grad_dims", ".", "append", "(", "param", ".", "data", ".", "numel", "(", ")", ")", "\n", "", "", "grads", "=", "torch", ".", "Tensor", "(", "sum", "(", "grad_dims", ")", ",", "2", ")", ".", "cuda", "(", ")", "\n", "\n", "train_batch", "=", "len", "(", "train_loader", ")", "\n", "test_batch", "=", "len", "(", "test_loader", ")", "\n", "T", "=", "opt", ".", "temp", "\n", "avg_cost", "=", "np", ".", "zeros", "(", "[", "total_epoch", ",", "12", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lambda_weight", "=", "np", ".", "ones", "(", "[", "2", ",", "total_epoch", "]", ")", "\n", "for", "index", "in", "range", "(", "total_epoch", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "cost", "=", "np", ".", "zeros", "(", "12", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# apply Dynamic Weight Average", "\n", "if", "opt", ".", "weight", "==", "'dwa'", ":", "\n", "            ", "if", "index", "==", "0", "or", "index", "==", "1", ":", "\n", "                ", "lambda_weight", "[", ":", ",", "index", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "w_1", "=", "avg_cost", "[", "index", "-", "1", ",", "0", "]", "/", "avg_cost", "[", "index", "-", "2", ",", "0", "]", "\n", "w_2", "=", "avg_cost", "[", "index", "-", "1", ",", "3", "]", "/", "avg_cost", "[", "index", "-", "2", ",", "3", "]", "\n", "lambda_weight", "[", "0", ",", "index", "]", "=", "2", "*", "np", ".", "exp", "(", "w_1", "/", "T", ")", "/", "(", "np", ".", "exp", "(", "w_1", "/", "T", ")", "+", "np", ".", "exp", "(", "w_2", "/", "T", ")", ")", "\n", "lambda_weight", "[", "1", ",", "index", "]", "=", "2", "*", "np", ".", "exp", "(", "w_2", "/", "T", ")", "/", "(", "np", ".", "exp", "(", "w_1", "/", "T", ")", "+", "np", ".", "exp", "(", "w_2", "/", "T", ")", ")", "\n", "\n", "# iteration for all batches", "\n", "", "", "multi_task_model", ".", "train", "(", ")", "\n", "train_dataset", "=", "iter", "(", "train_loader", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "multi_task_model", ".", "class_nb", ")", "\n", "for", "k", "in", "range", "(", "train_batch", ")", ":", "\n", "            ", "train_data", ",", "train_label", ",", "train_depth", "=", "train_dataset", ".", "next", "(", ")", "\n", "train_data", ",", "train_label", "=", "train_data", ".", "to", "(", "device", ")", ",", "train_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "train_depth", "=", "train_depth", ".", "to", "(", "device", ")", "\n", "\n", "train_pred", ",", "logsigma", "=", "multi_task_model", "(", "train_data", ")", "\n", "\n", "train_loss", "=", "[", "model_fit", "(", "train_pred", "[", "0", "]", ",", "train_label", ",", "'semantic'", ")", ",", "\n", "model_fit", "(", "train_pred", "[", "1", "]", ",", "train_depth", ",", "'depth'", ")", "]", "\n", "\n", "train_loss_tmp", "=", "[", "0", ",", "0", "]", "\n", "if", "opt", ".", "weight", "==", "'equal'", "or", "opt", ".", "weight", "==", "'dwa'", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "train_loss_tmp", "[", "i", "]", "=", "train_loss", "[", "i", "]", "*", "lambda_weight", "[", "i", ",", "index", "]", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "train_loss_tmp", "[", "i", "]", "=", "1", "/", "(", "2", "*", "torch", ".", "exp", "(", "logsigma", "[", "i", "]", ")", ")", "*", "train_loss", "[", "i", "]", "+", "logsigma", "[", "i", "]", "/", "2", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "method", "==", "\"graddrop\"", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", ")", "\n", "", "grad2vec", "(", "multi_task_model", ",", "grads", ",", "grad_dims", ",", "i", ")", "\n", "multi_task_model", ".", "zero_grad_shared_modules", "(", ")", "\n", "", "g", "=", "graddrop", "(", "grads", ")", "\n", "overwrite_grad", "(", "multi_task_model", ",", "g", ",", "grad_dims", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "method", "==", "\"pcgrad\"", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", ")", "\n", "", "grad2vec", "(", "multi_task_model", ",", "grads", ",", "grad_dims", ",", "i", ")", "\n", "multi_task_model", ".", "zero_grad_shared_modules", "(", ")", "\n", "", "g", "=", "pcgrad", "(", "grads", ",", "rng", ")", "\n", "overwrite_grad", "(", "multi_task_model", ",", "g", ",", "grad_dims", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "method", "==", "\"mgd\"", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", ")", "\n", "", "grad2vec", "(", "multi_task_model", ",", "grads", ",", "grad_dims", ",", "i", ")", "\n", "multi_task_model", ".", "zero_grad_shared_modules", "(", ")", "\n", "", "g", "=", "mgd", "(", "grads", ")", "\n", "overwrite_grad", "(", "multi_task_model", ",", "g", ",", "grad_dims", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "method", "==", "\"cagrad\"", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", ")", "\n", "", "grad2vec", "(", "multi_task_model", ",", "grads", ",", "grad_dims", ",", "i", ")", "\n", "multi_task_model", ".", "zero_grad_shared_modules", "(", ")", "\n", "", "g", "=", "cagrad", "(", "grads", ",", "alpha", ",", "rescale", "=", "1", ")", "\n", "overwrite_grad", "(", "multi_task_model", ",", "g", ",", "grad_dims", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# accumulate label prediction for every pixel in training images", "\n", "", "conf_mat", ".", "update", "(", "train_pred", "[", "0", "]", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "train_label", ".", "flatten", "(", ")", ")", "\n", "\n", "cost", "[", "0", "]", "=", "train_loss", "[", "0", "]", ".", "item", "(", ")", "\n", "cost", "[", "3", "]", "=", "train_loss", "[", "1", "]", ".", "item", "(", ")", "\n", "cost", "[", "4", "]", ",", "cost", "[", "5", "]", "=", "depth_error", "(", "train_pred", "[", "1", "]", ",", "train_depth", ")", "\n", "avg_cost", "[", "index", ",", ":", "6", "]", "+=", "cost", "[", ":", "6", "]", "/", "train_batch", "\n", "\n", "# compute mIoU and acc", "\n", "", "avg_cost", "[", "index", ",", "1", ":", "3", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "# evaluating test data", "\n", "multi_task_model", ".", "eval", "(", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "multi_task_model", ".", "class_nb", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# operations inside don't track history", "\n", "            ", "test_dataset", "=", "iter", "(", "test_loader", ")", "\n", "for", "k", "in", "range", "(", "test_batch", ")", ":", "\n", "                ", "test_data", ",", "test_label", ",", "test_depth", "=", "test_dataset", ".", "next", "(", ")", "\n", "test_data", ",", "test_label", "=", "test_data", ".", "to", "(", "device", ")", ",", "test_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "test_depth", "=", "test_depth", ".", "to", "(", "device", ")", "\n", "\n", "test_pred", ",", "_", "=", "multi_task_model", "(", "test_data", ")", "\n", "test_loss", "=", "[", "model_fit", "(", "test_pred", "[", "0", "]", ",", "test_label", ",", "'semantic'", ")", ",", "\n", "model_fit", "(", "test_pred", "[", "1", "]", ",", "test_depth", ",", "'depth'", ")", "]", "\n", "\n", "conf_mat", ".", "update", "(", "test_pred", "[", "0", "]", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "test_label", ".", "flatten", "(", ")", ")", "\n", "\n", "cost", "[", "6", "]", "=", "test_loss", "[", "0", "]", ".", "item", "(", ")", "\n", "cost", "[", "9", "]", "=", "test_loss", "[", "1", "]", ".", "item", "(", ")", "\n", "cost", "[", "10", "]", ",", "cost", "[", "11", "]", "=", "depth_error", "(", "test_pred", "[", "1", "]", ",", "test_depth", ")", "\n", "avg_cost", "[", "index", ",", "6", ":", "]", "+=", "cost", "[", "6", ":", "]", "/", "test_batch", "\n", "\n", "# compute mIoU and acc", "\n", "", "avg_cost", "[", "index", ",", "7", ":", "9", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Epoch: {:04d} | TRAIN: {:.4f} {:.4f} {:.4f} | {:.4f} {:.4f} {:.4f} || TEST: {:.4f} {:.4f} {:.4f} | {:.4f} {:.4f} {:.4f} | TIME: {:.4f}'", "\n", ".", "format", "(", "index", ",", "avg_cost", "[", "index", ",", "0", "]", ",", "avg_cost", "[", "index", ",", "1", "]", ",", "avg_cost", "[", "index", ",", "2", "]", ",", "avg_cost", "[", "index", ",", "3", "]", ",", "\n", "avg_cost", "[", "index", ",", "4", "]", ",", "avg_cost", "[", "index", ",", "5", "]", ",", "avg_cost", "[", "index", ",", "6", "]", ",", "avg_cost", "[", "index", ",", "7", "]", ",", "avg_cost", "[", "index", ",", "8", "]", ",", "\n", "avg_cost", "[", "index", ",", "9", "]", ",", "avg_cost", "[", "index", ",", "10", "]", ",", "avg_cost", "[", "index", ",", "11", "]", ",", "t1", "-", "t0", ")", ")", "\n", "torch", ".", "save", "(", "multi_task_model", ".", "state_dict", "(", ")", ",", "f\"models/{method}-{opt.weight}-{alpha}-{opt.seed}.pt\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mt.SegNet.__init__": [[23, 91], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_mt.SegNet.modules", "model_segnet_mt.SegNet.encoder_block.append", "model_segnet_mt.SegNet.decoder_block.append", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_block_enc.append", "model_segnet_mt.SegNet.conv_block_dec.append", "model_segnet_mt.SegNet.conv_block_enc.append", "model_segnet_mt.SegNet.conv_block_dec.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.encoder_att.append", "model_segnet_mt.SegNet.decoder_att.append", "model_segnet_mt.SegNet.encoder_att[].append", "model_segnet_mt.SegNet.decoder_att[].append", "model_segnet_mt.SegNet.encoder_block_att.append", "model_segnet_mt.SegNet.decoder_block_att.append", "model_segnet_mt.SegNet.encoder_block_att.append", "model_segnet_mt.SegNet.decoder_block_att.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_mt.SegNet.att_layer", "model_segnet_mt.SegNet.att_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.att_layer", "model_segnet_mt.SegNet.att_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "model_segnet_mt.SegNet.att_layer", "model_segnet_mt.SegNet.att_layer"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "7", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "# define task attention layers", "\n", "", "", "self", ".", "encoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "decoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "encoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "1", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "j", "<", "1", ":", "\n", "                ", "self", ".", "encoder_att", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", ")", "\n", "self", ".", "decoder_att", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "self", ".", "encoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "filter", "[", "i", "+", "1", "]", "+", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "<", "3", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "2", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "\n", "", "", "self", ".", "pred_task1", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "pred", "=", "True", ")", "\n", "self", ".", "pred_task2", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "pred", "=", "True", ")", "\n", "#self.pred_task3 = self.conv_layer([filter[0], 3], pred=True)", "\n", "\n", "# define pooling and unpooling functions", "\n", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.5", ",", "-", "0.5", ",", "-", "0.5", "]", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mt.SegNet.shared_modules": [[92, 97], ["None"], "methods", ["None"], ["", "", "", "def", "shared_modules", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "encoder_block", ",", "self", ".", "decoder_block", ",", "\n", "self", ".", "conv_block_enc", ",", "self", ".", "conv_block_dec", ",", "\n", "self", ".", "encoder_block_att", ",", "self", ".", "decoder_block_att", ",", "\n", "self", ".", "down_sampling", ",", "self", ".", "up_sampling", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mt.SegNet.zero_grad_shared_modules": [[98, 101], ["model_segnet_mt.SegNet.shared_modules", "mm.zero_grad"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.shared_modules"], ["", "def", "zero_grad_shared_modules", "(", "self", ")", ":", "\n", "        ", "for", "mm", "in", "self", ".", "shared_modules", "(", ")", ":", "\n", "            ", "mm", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mt.SegNet.conv_layer": [[102, 115], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "pred", "=", "False", ")", ":", "\n", "        ", "if", "not", "pred", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mt.SegNet.att_layer": [[116, 126], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "def", "att_layer", "(", "self", ",", "channel", ")", ":", "\n", "        ", "att_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "return", "att_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.cityscapes.model_segnet_mt.SegNet.forward": [[127, 194], ["range", "range", "range", "range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_mt.SegNet.pred_task2", "range", "range", "range", "model_segnet_mt.SegNet.pred_task1", "range", "range", "model_segnet_mt.SegNet.down_sampling", "model_segnet_mt.SegNet.down_sampling", "model_segnet_mt.SegNet.up_sampling", "model_segnet_mt.SegNet.up_sampling", "range", "range", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define attention list for tasks", "\n", "", "atten_encoder", ",", "atten_decoder", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "atten_encoder", "[", "i", "]", ",", "atten_decoder", "[", "i", "]", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "atten_encoder", "[", "i", "]", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "=", "(", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define global shared network", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task dependent attention module", "\n", "", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "torch", ".", "cat", "(", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ",", "atten_encoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_encoder", "[", "i", "]", "[", "-", "1", "]", "[", "-", "1", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_decoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "\n", "# define task prediction layers", "\n", "", "", "", "t1_pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task1", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "t2_pred", "=", "self", ".", "pred_task2", "(", "atten_decoder", "[", "1", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "#t3_pred = self.pred_task3(atten_decoder[2][-1][-1])", "\n", "#t3_pred = t3_pred / torch.norm(t3_pred, p=2, dim=1, keepdim=True)", "\n", "\n", "return", "[", "t1_pred", ",", "t2_pred", "]", ",", "self", ".", "logsigma", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_element_from2": [[14, 36], ["None"], "methods", ["None"], ["def", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", ":", "\n", "        ", "\"\"\"\n        Analytical solution for min_{c} |cx_1 + (1-c)x_2|_2^2\n        d is the distance (objective) optimzed\n        v1v1 = <x1,x1>\n        v1v2 = <x1,x2>\n        v2v2 = <x2,x2>\n        \"\"\"", "\n", "if", "v1v2", ">=", "v1v1", ":", "\n", "# Case: Fig 1, third column", "\n", "            ", "gamma", "=", "0.999", "\n", "cost", "=", "v1v1", "\n", "return", "gamma", ",", "cost", "\n", "", "if", "v1v2", ">=", "v2v2", ":", "\n", "# Case: Fig 1, first column", "\n", "            ", "gamma", "=", "0.001", "\n", "cost", "=", "v2v2", "\n", "return", "gamma", ",", "cost", "\n", "# Case: Fig 1, second column", "\n", "", "gamma", "=", "-", "1.0", "*", "(", "(", "v1v2", "-", "v2v2", ")", "/", "(", "v1v1", "+", "v2v2", "-", "2", "*", "v1v2", ")", ")", "\n", "cost", "=", "v2v2", "+", "gamma", "*", "(", "v1v2", "-", "v2v2", ")", "\n", "return", "gamma", ",", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_2d": [[37, 58], ["range", "len", "range", "len", "min_norm_solvers.MinNormSolver._min_norm_element_from2"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "def", "_min_norm_2d", "(", "vecs", ",", "dps", ")", ":", "\n", "        ", "\"\"\"\n        Find the minimum norm solution as combination of two points\n        This is correct only in 2D\n        ie. min_c |\\sum c_i x_i|_2^2 st. \\sum c_i = 1 , 1 >= c_1 >= 0 for all i, c_i + c_j = 1.0 for some i, j\n        \"\"\"", "\n", "dmin", "=", "np", ".", "inf", "\n", "for", "i", "in", "range", "(", "len", "(", "vecs", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "vecs", ")", ")", ":", "\n", "                ", "if", "(", "i", ",", "j", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "i", ",", "j", ")", "]", "=", "(", "vecs", "[", "i", "]", "*", "vecs", "[", "j", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "dps", "[", "(", "j", ",", "i", ")", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "", "if", "(", "i", ",", "i", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "i", ",", "i", ")", "]", "=", "(", "vecs", "[", "i", "]", "*", "vecs", "[", "i", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "if", "(", "j", ",", "j", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "j", ",", "j", ")", "]", "=", "(", "vecs", "[", "j", "]", "*", "vecs", "[", "j", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "c", ",", "d", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "dps", "[", "(", "i", ",", "i", ")", "]", ",", "dps", "[", "(", "i", ",", "j", ")", "]", ",", "dps", "[", "(", "j", ",", "j", ")", "]", ")", "\n", "if", "d", "<", "dmin", ":", "\n", "                    ", "dmin", "=", "d", "\n", "sol", "=", "[", "(", "i", ",", "j", ")", ",", "c", ",", "d", "]", "\n", "", "", "", "return", "sol", ",", "dps", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._projection2simplex": [[59, 74], ["len", "numpy.flip", "range", "numpy.maximum", "numpy.sort", "numpy.zeros", "numpy.sum"], "methods", ["None"], ["", "def", "_projection2simplex", "(", "y", ")", ":", "\n", "        ", "\"\"\"\n        Given y, it solves argmin_z |y-z|_2 st \\sum z = 1 , 1 >= z_i >= 0 for all i\n        \"\"\"", "\n", "m", "=", "len", "(", "y", ")", "\n", "sorted_y", "=", "np", ".", "flip", "(", "np", ".", "sort", "(", "y", ")", ",", "axis", "=", "0", ")", "\n", "tmpsum", "=", "0.0", "\n", "tmax_f", "=", "(", "np", ".", "sum", "(", "y", ")", "-", "1.0", ")", "/", "m", "\n", "for", "i", "in", "range", "(", "m", "-", "1", ")", ":", "\n", "            ", "tmpsum", "+=", "sorted_y", "[", "i", "]", "\n", "tmax", "=", "(", "tmpsum", "-", "1", ")", "/", "(", "i", "+", "1.0", ")", "\n", "if", "tmax", ">", "sorted_y", "[", "i", "+", "1", "]", ":", "\n", "                ", "tmax_f", "=", "tmax", "\n", "break", "\n", "", "", "return", "np", ".", "maximum", "(", "y", "-", "tmax_f", ",", "np", ".", "zeros", "(", "y", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._next_point": [[75, 90], ["min_norm_solvers.MinNormSolver._projection2simplex", "numpy.sum", "numpy.sum", "len", "numpy.min", "len", "min", "numpy.sum", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._projection2simplex"], ["", "def", "_next_point", "(", "cur_val", ",", "grad", ",", "n", ")", ":", "\n", "        ", "proj_grad", "=", "grad", "-", "(", "np", ".", "sum", "(", "grad", ")", "/", "n", ")", "\n", "tm1", "=", "-", "1.0", "*", "cur_val", "[", "proj_grad", "<", "0", "]", "/", "proj_grad", "[", "proj_grad", "<", "0", "]", "\n", "tm2", "=", "(", "1.0", "-", "cur_val", "[", "proj_grad", ">", "0", "]", ")", "/", "(", "proj_grad", "[", "proj_grad", ">", "0", "]", ")", "\n", "\n", "skippers", "=", "np", ".", "sum", "(", "tm1", "<", "1e-7", ")", "+", "np", ".", "sum", "(", "tm2", "<", "1e-7", ")", "\n", "t", "=", "1", "\n", "if", "len", "(", "tm1", "[", "tm1", ">", "1e-7", "]", ")", ">", "0", ":", "\n", "            ", "t", "=", "np", ".", "min", "(", "tm1", "[", "tm1", ">", "1e-7", "]", ")", "\n", "", "if", "len", "(", "tm2", "[", "tm2", ">", "1e-7", "]", ")", ">", "0", ":", "\n", "            ", "t", "=", "min", "(", "t", ",", "np", ".", "min", "(", "tm2", "[", "tm2", ">", "1e-7", "]", ")", ")", "\n", "\n", "", "next_point", "=", "proj_grad", "*", "t", "+", "cur_val", "\n", "next_point", "=", "MinNormSolver", ".", "_projection2simplex", "(", "next_point", ")", "\n", "return", "next_point", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver.find_min_norm_element": [[91, 137], ["min_norm_solvers.MinNormSolver._min_norm_2d", "len", "numpy.zeros", "numpy.zeros", "range", "range", "min_norm_solvers.MinNormSolver._next_point", "range", "min_norm_solvers.MinNormSolver._min_norm_element_from2", "numpy.dot", "range", "numpy.sum", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_2d", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._next_point", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "def", "find_min_norm_element", "(", "vecs", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of vectors (vecs), this method finds the minimum norm element in the convex hull\n        as min |u|_2 st. u = \\sum c_i vecs[i] and \\sum c_i = 1.\n        It is quite geometric, and the main idea is the fact that if d_{ij} = min |u|_2 st u = c x_i + (1-c) x_j; the solution lies in (0, d_{i,j})\n        Hence, we find the best 2-task solution, and then run the projected gradient descent until convergence\n        \"\"\"", "\n", "# Solution lying at the combination of two points", "\n", "dps", "=", "{", "}", "\n", "init_sol", ",", "dps", "=", "MinNormSolver", ".", "_min_norm_2d", "(", "vecs", ",", "dps", ")", "\n", "\n", "n", "=", "len", "(", "vecs", ")", "\n", "sol_vec", "=", "np", ".", "zeros", "(", "n", ")", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "0", "]", "]", "=", "init_sol", "[", "1", "]", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "1", "]", "]", "=", "1", "-", "init_sol", "[", "1", "]", "\n", "\n", "if", "n", "<", "3", ":", "\n", "# This is optimal for n=2, so return the solution", "\n", "            ", "return", "sol_vec", ",", "init_sol", "[", "2", "]", "\n", "\n", "", "iter_count", "=", "0", "\n", "\n", "grad_mat", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "grad_mat", "[", "i", ",", "j", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "\n", "\n", "", "", "while", "iter_count", "<", "MinNormSolver", ".", "MAX_ITER", ":", "\n", "            ", "grad_dir", "=", "-", "1.0", "*", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", "\n", "new_point", "=", "MinNormSolver", ".", "_next_point", "(", "sol_vec", ",", "grad_dir", ",", "n", ")", "\n", "# Re-compute the inner products for line search", "\n", "v1v1", "=", "0.0", "\n", "v1v2", "=", "0.0", "\n", "v2v2", "=", "0.0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                    ", "v1v1", "+=", "sol_vec", "[", "i", "]", "*", "sol_vec", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "v1v2", "+=", "sol_vec", "[", "i", "]", "*", "new_point", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "v2v2", "+=", "new_point", "[", "i", "]", "*", "new_point", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "", "", "nc", ",", "nd", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", "\n", "new_sol_vec", "=", "nc", "*", "sol_vec", "+", "(", "1", "-", "nc", ")", "*", "new_point", "\n", "change", "=", "new_sol_vec", "-", "sol_vec", "\n", "if", "np", ".", "sum", "(", "np", ".", "abs", "(", "change", ")", ")", "<", "MinNormSolver", ".", "STOP_CRIT", ":", "\n", "                ", "return", "sol_vec", ",", "nd", "\n", "", "sol_vec", "=", "new_sol_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver.find_min_norm_element_FW": [[138, 180], ["min_norm_solvers.MinNormSolver._min_norm_2d", "len", "numpy.zeros", "numpy.zeros", "range", "range", "numpy.argmin", "numpy.dot", "numpy.dot", "min_norm_solvers.MinNormSolver._min_norm_element_from2", "numpy.dot", "numpy.dot", "numpy.sum", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_2d", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "", "def", "find_min_norm_element_FW", "(", "vecs", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of vectors (vecs), this method finds the minimum norm element in the convex hull\n        as min |u|_2 st. u = \\sum c_i vecs[i] and \\sum c_i = 1.\n        It is quite geometric, and the main idea is the fact that if d_{ij} = min |u|_2 st u = c x_i + (1-c) x_j; the solution lies in (0, d_{i,j})\n        Hence, we find the best 2-task solution, and then run the Frank Wolfe until convergence\n        \"\"\"", "\n", "# Solution lying at the combination of two points", "\n", "dps", "=", "{", "}", "\n", "init_sol", ",", "dps", "=", "MinNormSolver", ".", "_min_norm_2d", "(", "vecs", ",", "dps", ")", "\n", "\n", "n", "=", "len", "(", "vecs", ")", "\n", "sol_vec", "=", "np", ".", "zeros", "(", "n", ")", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "0", "]", "]", "=", "init_sol", "[", "1", "]", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "1", "]", "]", "=", "1", "-", "init_sol", "[", "1", "]", "\n", "\n", "if", "n", "<", "3", ":", "\n", "# This is optimal for n=2, so return the solution", "\n", "            ", "return", "sol_vec", ",", "init_sol", "[", "2", "]", "\n", "\n", "", "iter_count", "=", "0", "\n", "\n", "grad_mat", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "grad_mat", "[", "i", ",", "j", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "\n", "", "", "while", "iter_count", "<", "MinNormSolver", ".", "MAX_ITER", ":", "\n", "            ", "t_iter", "=", "np", ".", "argmin", "(", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", ")", "\n", "\n", "v1v1", "=", "np", ".", "dot", "(", "sol_vec", ",", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", ")", "\n", "v1v2", "=", "np", ".", "dot", "(", "sol_vec", ",", "grad_mat", "[", ":", ",", "t_iter", "]", ")", "\n", "v2v2", "=", "grad_mat", "[", "t_iter", ",", "t_iter", "]", "\n", "\n", "nc", ",", "nd", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", "\n", "new_sol_vec", "=", "nc", "*", "sol_vec", "\n", "new_sol_vec", "[", "t_iter", "]", "+=", "1", "-", "nc", "\n", "\n", "change", "=", "new_sol_vec", "-", "sol_vec", "\n", "if", "np", ".", "sum", "(", "np", ".", "abs", "(", "change", ")", ")", "<", "MinNormSolver", ".", "STOP_CRIT", ":", "\n", "                ", "return", "sol_vec", ",", "nd", "\n", "", "sol_vec", "=", "new_sol_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.gradient_normalizers": [[181, 198], ["numpy.sqrt", "numpy.sum", "print", "numpy.sqrt", "numpy.sum", "gr.pow().sum", "gr.pow", "gr.pow().sum", "gr.pow"], "function", ["None"], ["", "", "", "def", "gradient_normalizers", "(", "grads", ",", "losses", ",", "normalization_type", ")", ":", "\n", "    ", "gn", "=", "{", "}", "\n", "if", "normalization_type", "==", "'l2'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "[", "gr", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "data", "[", "0", "]", "for", "gr", "in", "grads", "[", "t", "]", "]", ")", ")", "\n", "", "", "elif", "normalization_type", "==", "'loss'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "losses", "[", "t", "]", "\n", "", "", "elif", "normalization_type", "==", "'loss+'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "losses", "[", "t", "]", "*", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "[", "gr", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "data", "[", "0", "]", "for", "gr", "in", "grads", "[", "t", "]", "]", ")", ")", "\n", "", "", "elif", "normalization_type", "==", "'none'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'ERROR: Invalid Normalization Type'", ")", "\n", "", "return", "gn", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_split.SegNet.__init__": [[21, 75], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_split.SegNet.modules", "model_segnet_split.SegNet.encoder_block.append", "model_segnet_split.SegNet.decoder_block.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_block_enc.append", "model_segnet_split.SegNet.conv_block_dec.append", "model_segnet_split.SegNet.conv_block_enc.append", "model_segnet_split.SegNet.conv_block_dec.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "model_segnet_split.SegNet.conv_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer"], ["        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "if", "opt", ".", "type", "==", "'wide'", ":", "\n", "            ", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "", "else", ":", "\n", "            ", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "\n", "", "self", ".", "class_nb", "=", "13", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "# define task specific layers", "\n", "", "", "self", ".", "pred_task1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "filter", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "self", ".", "class_nb", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "pred_task2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "filter", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "pred_task3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "filter", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "filter", "[", "0", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n", "# define pooling and unpooling functions", "\n", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.5", ",", "-", "0.5", ",", "-", "0.5", "]", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# define convolutional block", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_split.SegNet.conv_layer": [[77, 94], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["        ", "if", "opt", ".", "type", "==", "'deep'", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_split.SegNet.forward": [[95, 129], ["pdb.set_trace", "range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_split.SegNet.pred_task2", "model_segnet_split.SegNet.pred_task3", "model_segnet_split.SegNet.pred_task1", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "range", "model_segnet_split.SegNet.down_sampling", "model_segnet_split.SegNet.down_sampling", "model_segnet_split.SegNet.up_sampling", "model_segnet_split.SegNet.up_sampling", "range"], "methods", ["None"], ["        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# global shared encoder-decoder network", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task prediction layers", "\n", "", "", "t1_pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task1", "(", "g_decoder", "[", "i", "]", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "t2_pred", "=", "self", ".", "pred_task2", "(", "g_decoder", "[", "i", "]", "[", "1", "]", ")", "\n", "t3_pred", "=", "self", ".", "pred_task3", "(", "g_decoder", "[", "i", "]", "[", "1", "]", ")", "\n", "t3_pred", "=", "t3_pred", "/", "torch", ".", "norm", "(", "t3_pred", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "[", "t1_pred", ",", "t2_pred", ",", "t3_pred", "]", ",", "self", ".", "logsigma", "\n", "\n", "\n", "# define model, optimiser and scheduler", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_cross.SegNet.__init__": [[22, 71], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_cross.SegNet.modules", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_cross.SegNet.encoder_block_t.append", "model_segnet_cross.SegNet.decoder_block_t.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_cross.SegNet.encoder_block_t[].append", "model_segnet_cross.SegNet.decoder_block_t[].append", "model_segnet_cross.SegNet.encoder_block_t[].append", "model_segnet_cross.SegNet.decoder_block_t[].append", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_cross.SegNet.conv_layer", "model_segnet_cross.SegNet.conv_layer", "torch.init.constant", "torch.init.constant", "torch.init.constant", "torch.init.constant"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer"], ["# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "7", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block_t", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ",", "bottle_neck", "=", "True", ")", "]", ")", "]", ")", "\n", "self", ".", "decoder_block_t", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ",", "bottle_neck", "=", "True", ")", "]", ")", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "j", "<", "1", ":", "\n", "                ", "self", ".", "encoder_block_t", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ",", "bottle_neck", "=", "True", ")", "]", ")", ")", "\n", "self", ".", "decoder_block_t", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ",", "bottle_neck", "=", "True", ")", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "encoder_block_t", "[", "j", "]", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ",", "bottle_neck", "=", "True", ")", ")", "\n", "self", ".", "decoder_block_t", "[", "j", "]", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ",", "bottle_neck", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "encoder_block_t", "[", "j", "]", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ",", "bottle_neck", "=", "False", ")", ")", "\n", "self", ".", "decoder_block_t", "[", "j", "]", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ",", "bottle_neck", "=", "False", ")", ")", "\n", "\n", "# define cross-stitch units", "\n", "", "", "", "self", ".", "cs_unit_encoder", "=", "nn", ".", "Parameter", "(", "data", "=", "torch", ".", "ones", "(", "4", ",", "2", ")", ")", "\n", "self", ".", "cs_unit_decoder", "=", "nn", ".", "Parameter", "(", "data", "=", "torch", ".", "ones", "(", "5", ",", "2", ")", ")", "\n", "\n", "# define task specific layers", "\n", "self", ".", "pred_task1", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "bottle_neck", "=", "True", ",", "pred_layer", "=", "True", ")", "\n", "self", ".", "pred_task2", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "bottle_neck", "=", "True", ",", "pred_layer", "=", "True", ")", "\n", "#self.pred_task3 = self.conv_layer([filter[0], 3], bottle_neck=True, pred_layer=True)", "\n", "\n", "# define pooling and unpooling functions", "\n", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.5", ",", "-", "0.5", "]", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Parameter", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "\n", "", "", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "bottle_neck", ",", "pred_layer", "=", "False", ")", ":", "\n", "        ", "if", "bottle_neck", ":", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_cross.SegNet.conv_layer": [[72, 102], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["            ", "if", "not", "pred_layer", ":", "\n", "                ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoder_conv_t", ",", "decoder_conv_t", ",", "encoder_samp_t", ",", "decoder_samp_t", ",", "indices_t", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "5", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_cross.SegNet.forward": [[103, 143], ["range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_cross.SegNet.pred_task2", "model_segnet_cross.SegNet.pred_task3", "range", "range", "model_segnet_cross.SegNet.pred_task1", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "range", "range", "model_segnet_cross.SegNet.down_sampling", "model_segnet_cross.SegNet.down_sampling", "model_segnet_cross.SegNet.up_sampling", "model_segnet_cross.SegNet.up_sampling"], "methods", ["None"], ["for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "encoder_conv_t", "[", "i", "]", ",", "decoder_conv_t", "[", "i", "]", ",", "encoder_samp_t", "[", "i", "]", ",", "decoder_samp_t", "[", "i", "]", ",", "indices_t", "[", "i", "]", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "\n", "# task branch 1", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "encoder_conv_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "encoder_block_t", "[", "j", "]", "[", "i", "]", "(", "x", ")", "\n", "encoder_samp_t", "[", "j", "]", "[", "i", "]", ",", "indices_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "encoder_conv_t", "[", "j", "]", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "encoder_cross_stitch", "=", "self", ".", "cs_unit_encoder", "[", "i", "-", "1", "]", "[", "0", "]", "*", "encoder_samp_t", "[", "0", "]", "[", "i", "-", "1", "]", "+", "self", ".", "cs_unit_encoder", "[", "i", "-", "1", "]", "[", "1", "]", "*", "encoder_samp_t", "[", "1", "]", "[", "i", "-", "1", "]", "\n", "#self.cs_unit_encoder[i - 1][2] * encoder_samp_t[2][i - 1]", "\n", "encoder_conv_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "encoder_block_t", "[", "j", "]", "[", "i", "]", "(", "encoder_cross_stitch", ")", "\n", "encoder_samp_t", "[", "j", "]", "[", "i", "]", ",", "indices_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "encoder_conv_t", "[", "j", "]", "[", "i", "]", ")", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "decoder_cross_stitch", "=", "self", ".", "cs_unit_decoder", "[", "i", "]", "[", "0", "]", "*", "encoder_samp_t", "[", "0", "]", "[", "-", "1", "]", "+", "self", ".", "cs_unit_decoder", "[", "i", "]", "[", "1", "]", "*", "encoder_samp_t", "[", "1", "]", "[", "-", "1", "]", "\n", "#self.cs_unit_decoder[i][2] * encoder_samp_t[2][-1]", "\n", "decoder_samp_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "decoder_cross_stitch", ",", "indices_t", "[", "j", "]", "[", "-", "i", "-", "1", "]", ")", "\n", "decoder_conv_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "decoder_block_t", "[", "j", "]", "[", "-", "i", "-", "1", "]", "(", "decoder_samp_t", "[", "j", "]", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "decoder_cross_stitch", "=", "self", ".", "cs_unit_decoder", "[", "i", "]", "[", "0", "]", "*", "decoder_conv_t", "[", "0", "]", "[", "i", "-", "1", "]", "+", "self", ".", "cs_unit_decoder", "[", "i", "]", "[", "1", "]", "*", "decoder_conv_t", "[", "1", "]", "[", "i", "-", "1", "]", "\n", "#self.cs_unit_decoder[i][2] * decoder_conv_t[2][i - 1]", "\n", "decoder_samp_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "decoder_cross_stitch", ",", "indices_t", "[", "j", "]", "[", "-", "i", "-", "1", "]", ")", "\n", "decoder_conv_t", "[", "j", "]", "[", "i", "]", "=", "self", ".", "decoder_block_t", "[", "j", "]", "[", "-", "i", "-", "1", "]", "(", "decoder_samp_t", "[", "j", "]", "[", "i", "]", ")", "\n", "\n", "# define task prediction layers", "\n", "", "", "", "t1_pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task1", "(", "decoder_conv_t", "[", "0", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "t2_pred", "=", "self", ".", "pred_task2", "(", "decoder_conv_t", "[", "1", "]", "[", "-", "1", "]", ")", "\n", "#t3_pred = self.pred_task3(decoder_conv_t[2][-1])", "\n", "#t3_pred = t3_pred / torch.norm(t3_pred, p=2, dim=1, keepdim=True)", "\n", "\n", "return", "[", "t1_pred", ",", "t2_pred", "]", ",", "self", ".", "logsigma", "\n", "\n", "", "", "control_seed", "(", "opt", ".", "seed", ")", "\n", "# define model, optimiser and scheduler", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_single.SegNet.__init__": [[17, 64], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "model_segnet_single.SegNet.modules", "model_segnet_single.SegNet.encoder_block.append", "model_segnet_single.SegNet.decoder_block.append", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "isinstance", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_block_enc.append", "model_segnet_single.SegNet.conv_block_dec.append", "model_segnet_single.SegNet.conv_block_enc.append", "model_segnet_single.SegNet.conv_block_dec.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "model_segnet_single.SegNet.conv_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "7", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "pred", "=", "True", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "pred", "=", "True", ")", "\n", "\n", "# define pooling and unpooling functions", "\n", "", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "pred", "=", "False", ")", ":", "\n", "        ", "if", "not", "pred", ":", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_single.SegNet.conv_layer": [[65, 78], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_single.SegNet.forward": [[79, 114], ["range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_single.SegNet.pred_task", "model_segnet_single.SegNet.pred_task", "range", "model_segnet_single.SegNet.down_sampling", "model_segnet_single.SegNet.down_sampling", "model_segnet_single.SegNet.up_sampling", "model_segnet_single.SegNet.up_sampling", "model_segnet_single.SegNet.pred_task", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "range"], "methods", ["None"], ["for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define global shared network", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task prediction layers", "\n", "", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task", "(", "g_decoder", "[", "-", "1", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "pred", "=", "self", ".", "pred_task", "(", "g_decoder", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "", "return", "pred", "\n", "\n", "\n", "", "", "control_seed", "(", "opt", ".", "seed", ")", "\n", "# define model, optimiser and scheduler", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "SegNet", "=", "SegNet", "(", ")", ".", "to", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_stan.SegNet.__init__": [[17, 82], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "model_segnet_stan.SegNet.modules", "model_segnet_stan.SegNet.encoder_block.append", "model_segnet_stan.SegNet.decoder_block.append", "range", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "isinstance", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_block_enc.append", "model_segnet_stan.SegNet.conv_block_dec.append", "model_segnet_stan.SegNet.conv_block_enc.append", "model_segnet_stan.SegNet.conv_block_dec.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.encoder_att[].append", "model_segnet_stan.SegNet.decoder_att[].append", "model_segnet_stan.SegNet.encoder_block_att.append", "model_segnet_stan.SegNet.decoder_block_att.append", "model_segnet_stan.SegNet.encoder_block_att.append", "model_segnet_stan.SegNet.decoder_block_att.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_segnet_stan.SegNet.att_layer", "model_segnet_stan.SegNet.att_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.conv_layer", "model_segnet_stan.SegNet.att_layer", "model_segnet_stan.SegNet.att_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "13", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "", "", "self", ".", "encoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "decoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "encoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "1", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "self", ".", "encoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "filter", "[", "i", "+", "1", "]", "+", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "<", "3", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "2", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "\n", "", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "pred", "=", "True", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "pred", "=", "True", ")", "\n", "", "if", "opt", ".", "task", "==", "'normal'", ":", "\n", "            ", "self", ".", "pred_task", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "3", "]", ",", "pred", "=", "True", ")", "\n", "\n", "# define pooling and unpooling functions", "\n", "", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_stan.SegNet.conv_layer": [[83, 96], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "pred", "=", "False", ")", ":", "\n", "        ", "if", "not", "pred", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_stan.SegNet.att_layer": [[97, 107], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "def", "att_layer", "(", "self", ",", "channel", ")", ":", "\n", "        ", "att_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "return", "att_block", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_stan.SegNet.forward": [[108, 177], ["range", "range", "range", "range", "range", "range", "range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_stan.SegNet.pred_task", "model_segnet_stan.SegNet.pred_task", "range", "range", "model_segnet_stan.SegNet.down_sampling", "model_segnet_stan.SegNet.down_sampling", "model_segnet_stan.SegNet.up_sampling", "model_segnet_stan.SegNet.up_sampling", "model_segnet_stan.SegNet.pred_task", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "range", "range", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define attention list for two tasks", "\n", "", "atten_encoder", ",", "atten_decoder", "=", "(", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "atten_encoder", "[", "i", "]", ",", "atten_decoder", "[", "i", "]", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "atten_encoder", "[", "i", "]", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "=", "(", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define global shared network", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task dependent attention module", "\n", "", "", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "torch", ".", "cat", "(", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ",", "atten_encoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_encoder", "[", "i", "]", "[", "-", "1", "]", "[", "-", "1", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_decoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "\n", "# define task prediction layers", "\n", "", "", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "pred", "=", "self", ".", "pred_task", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "", "if", "opt", ".", "task", "==", "'normal'", ":", "\n", "            ", "pred", "=", "self", ".", "pred_task", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "pred", "=", "pred", "/", "torch", ".", "norm", "(", "pred", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.create_dataset.RandomScaleCrop.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "[", "1.0", ",", "1.2", ",", "1.5", "]", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.create_dataset.RandomScaleCrop.__call__": [[18, 29], ["random.randint", "random.randint", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze().squeeze", "torch.interpolate().squeeze().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "int", "int", "random.randint", "torch.interpolate", "torch.interpolate", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "len", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ",", "depth", ",", "normal", ")", ":", "\n", "        ", "height", ",", "width", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "sc", "=", "self", ".", "scale", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scale", ")", "-", "1", ")", "]", "\n", "h", ",", "w", "=", "int", "(", "height", "/", "sc", ")", ",", "int", "(", "width", "/", "sc", ")", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "height", "-", "h", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "width", "-", "w", ")", "\n", "img_", "=", "F", ".", "interpolate", "(", "img", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "0", ")", "\n", "label_", "=", "F", ".", "interpolate", "(", "label", "[", "None", ",", "None", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "depth_", "=", "F", ".", "interpolate", "(", "depth", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", "\n", "normal_", "=", "F", ".", "interpolate", "(", "normal", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "0", ")", "\n", "return", "img_", ",", "label_", ",", "depth_", "/", "sc", ",", "normal_", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.create_dataset.NYUv2.__init__": [[43, 56], ["os.path.expanduser", "len", "fnmatch.filter", "os.listdir"], "methods", ["None"], ["img_", "=", "F", ".", "interpolate", "(", "img", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "0", ")", "\n", "label_", "=", "F", ".", "interpolate", "(", "label", "[", "None", ",", "None", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "depth_", "=", "F", ".", "interpolate", "(", "depth", "[", "None", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", "\n", "return", "img_", ",", "label_", ",", "depth_", "/", "sc", "\n", "\n", "\n", "", "", "class", "NYUv2", "(", "Dataset", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.create_dataset.NYUv2.__getitem__": [[57, 75], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.moveaxis", "numpy.load", "numpy.moveaxis", "numpy.moveaxis", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "torch.flip.float", "numpy.load", "numpy.load", "numpy.load", "create_dataset.RandomScaleCrop", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "augmentation", "=", "False", ")", ":", "\n", "        ", "self", ".", "train", "=", "train", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "\n", "# read the data file", "\n", "if", "train", ":", "\n", "            ", "self", ".", "data_path", "=", "root", "+", "'/train'", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_path", "=", "root", "+", "'/val'", "\n", "\n", "# calculate data length", "\n", "", "self", ".", "data_len", "=", "len", "(", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "self", ".", "data_path", "+", "'/image'", ")", ",", "'*.npy'", ")", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.create_dataset.NYUv2.__len__": [[76, 78], ["None"], "methods", ["None"], ["# load data from the pre-processed npy files", "\n", "        ", "image", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "np", ".", "load", "(", "self", ".", "data_path", "+", "'/image/{:d}.npy'", ".", "format", "(", "index", ")", ")", ",", "-", "1", ",", "0", ")", ")", "\n", "semantic", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "self", ".", "data_path", "+", "'/label/{:d}.npy'", ".", "format", "(", "index", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.plot.delta_fn": [[101, 103], ["None"], "function", ["None"], ["def", "delta_fn", "(", "a", ")", ":", "\n", "    ", "return", "(", "kk", "**", "sign", "*", "(", "a", "-", "base", ")", "/", "base", ")", ".", "mean", "(", ")", "*", "100.", "# *100 for percentage", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.plot.barplot": [[136, 174], ["seaborn.set", "matplotlib.figure", "ys.mean", "ys.mean.min", "ys.mean.max", "zip", "matplotlib.box", "matplotlib.title", "matplotlib.ylim", "matplotlib.yticks", "matplotlib.xticks", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "matplotlib.bar", "numpy.arange", "b.mean", "b.std", "numpy.sqrt"], "function", ["None"], ["", "def", "barplot", "(", "ys", ",", "methods", ",", "name", ",", "loss", ",", "title", ")", ":", "\n", "# ys [#methods, 3], 3 means 3 seeds", "\n", "\n", "    ", "sns", ".", "set", "(", "style", "=", "\"whitegrid\"", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "2", ",", "4", ")", ")", "\n", "\n", "n", "=", "ys", ".", "shape", "[", "0", "]", "\n", "bw", "=", "0.1", "\n", "x", "=", "np", ".", "arange", "(", "n", ")", "*", "(", "bw", ")", "+", "1", "# x_pos", "\n", "\n", "yy", "=", "ys", ".", "mean", "(", "1", ")", "\n", "y_min", "=", "yy", ".", "min", "(", ")", "\n", "y_max", "=", "yy", ".", "max", "(", ")", "\n", "\n", "if", "\"time\"", "in", "loss", ":", "\n", "        ", "y_lim_min", "=", "0", "\n", "y_lim_max", "=", "y_max", "*", "1.2", "\n", "", "else", ":", "\n", "        ", "y_lim_min", "=", "y_min", "-", "(", "y_max", "-", "y_min", ")", "\n", "y_lim_max", "=", "y_max", "+", "(", "y_max", "-", "y_min", ")", "\n", "\n", "# Create barplot", "\n", "", "for", "a", ",", "b", ",", "c", ",", "cl", "in", "zip", "(", "x", ",", "ys", ",", "methods", ",", "colors", "[", ":", "n", "]", ")", ":", "\n", "        ", "plt", ".", "bar", "(", "a", ",", "b", ".", "mean", "(", ")", ",", "yerr", "=", "b", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "n", ")", ",", "\n", "width", "=", "bw", ",", "color", "=", "cl", ",", "edgecolor", "=", "'black'", ",", "\n", "capsize", "=", "5", ",", "alpha", "=", "1.", ",", "linewidth", "=", "1.", ",", "\n", "error_kw", "=", "{", "\"elinewidth\"", ":", "1", ",", "\"capsize\"", ":", "3", "}", ")", "\n", "", "plt", ".", "box", "(", "False", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "ylim", "(", "y_lim_min", ",", "y_lim_max", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "10", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"{name}.png\"", ",", "dpi", "=", "400", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "plot_items", "=", "[", "\"semantic loss\"", ",", "\"depth loss\"", ",", "\"time\"", "]", "\n", "names", "=", "[", "\"Semantic\"", ",", "\"Depth\"", ",", "\"Time\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.plot.export_legend": [[209, 214], ["fig.canvas.draw", "legend.get_window_extent().transformed", "fig.savefig", "fig.dpi_scale_trans.inverted", "legend.get_window_extent"], "function", ["None"], []], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mtan.SegNet.__init__": [[22, 90], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_mtan.SegNet.modules", "model_segnet_mtan.SegNet.encoder_block.append", "model_segnet_mtan.SegNet.decoder_block.append", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_block_enc.append", "model_segnet_mtan.SegNet.conv_block_dec.append", "model_segnet_mtan.SegNet.conv_block_enc.append", "model_segnet_mtan.SegNet.conv_block_dec.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.encoder_att.append", "model_segnet_mtan.SegNet.decoder_att.append", "model_segnet_mtan.SegNet.encoder_att[].append", "model_segnet_mtan.SegNet.decoder_att[].append", "model_segnet_mtan.SegNet.encoder_block_att.append", "model_segnet_mtan.SegNet.decoder_block_att.append", "model_segnet_mtan.SegNet.encoder_block_att.append", "model_segnet_mtan.SegNet.decoder_block_att.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_mtan.SegNet.att_layer", "model_segnet_mtan.SegNet.att_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.conv_layer", "model_segnet_mtan.SegNet.att_layer", "model_segnet_mtan.SegNet.att_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "model_segnet_mtan.SegNet.att_layer", "model_segnet_mtan.SegNet.att_layer"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer"], ["# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "7", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "# define task attention layers", "\n", "", "", "self", ".", "encoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "decoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "encoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "1", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "j", "<", "1", ":", "\n", "                ", "self", ".", "encoder_att", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", ")", "\n", "self", ".", "decoder_att", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "self", ".", "encoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "filter", "[", "i", "+", "1", "]", "+", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "<", "3", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "2", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "\n", "", "", "self", ".", "pred_task1", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "pred", "=", "True", ")", "\n", "self", ".", "pred_task2", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "pred", "=", "True", ")", "\n", "#self.pred_task3 = self.conv_layer([filter[0], 3], pred=True)", "\n", "\n", "# define pooling and unpooling functions", "\n", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.5", ",", "-", "0.5", ",", "-", "0.5", "]", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "pred", "=", "False", ")", ":", "\n", "        ", "if", "not", "pred", ":", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mtan.SegNet.conv_layer": [[91, 104], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n", "", "def", "att_layer", "(", "self", ",", "channel", ")", ":", "\n", "        ", "att_block", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mtan.SegNet.att_layer": [[105, 115], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "return", "att_block", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mtan.SegNet.forward": [[116, 183], ["range", "range", "range", "range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_mtan.SegNet.pred_task2", "model_segnet_mtan.SegNet.pred_task3", "range", "range", "range", "model_segnet_mtan.SegNet.pred_task1", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "range", "range", "model_segnet_mtan.SegNet.down_sampling", "model_segnet_mtan.SegNet.down_sampling", "model_segnet_mtan.SegNet.up_sampling", "model_segnet_mtan.SegNet.up_sampling", "range", "range", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define attention list for tasks", "\n", "", "atten_encoder", ",", "atten_decoder", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "atten_encoder", "[", "i", "]", ",", "atten_decoder", "[", "i", "]", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "atten_encoder", "[", "i", "]", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "=", "(", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define global shared network", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task dependent attention module", "\n", "", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "torch", ".", "cat", "(", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ",", "atten_encoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_encoder", "[", "i", "]", "[", "-", "1", "]", "[", "-", "1", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_decoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "\n", "# define task prediction layers", "\n", "", "", "", "t1_pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task1", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "t2_pred", "=", "self", ".", "pred_task2", "(", "atten_decoder", "[", "1", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "#t3_pred = self.pred_task3(atten_decoder[2][-1][-1])", "\n", "#t3_pred = t3_pred / torch.norm(t3_pred, p=2, dim=1, keepdim=True)", "\n", "\n", "return", "[", "t1_pred", ",", "t2_pred", "]", ",", "self", ".", "logsigma", "\n", "\n", "\n", "", "", "control_seed", "(", "opt", ".", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.__init__": [[89, 92], ["None"], "methods", ["None"], ["#             pixel_acc = pixel_acc + torch.div(", "\n", "#                 torch.sum(torch.eq(x_pred_label[i], x_output_label[i]).float()),", "\n", "#                 torch.sum((x_output_label[i] >= 0).float()))", "\n", "#     return pixel_acc / batch_size", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update": [[93, 101], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.bincount().reshape", "torch.bincount().reshape", "torch.bincount().reshape", "torch.bincount().reshape", "target[].to", "torch.bincount", "torch.bincount", "torch.bincount", "torch.bincount"], "methods", ["None"], ["\n", "\n", "# New mIoU and Acc. formula: accumulate every pixel and average across all pixels in all images", "\n", "", "class", "ConfMatrix", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mat", "=", "None", "\n", "\n", "", "def", "update", "(", "self", ",", "pred", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics": [[102, 107], ["utils.ConfMatrix.mat.float", "torch.diag().sum", "torch.diag().sum", "torch.diag().sum", "torch.diag().sum", "utils.ConfMatrix.sum", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "utils.ConfMatrix.sum", "utils.ConfMatrix.sum"], "methods", ["None"], ["        ", "n", "=", "self", ".", "num_classes", "\n", "if", "self", ".", "mat", "is", "None", ":", "\n", "            ", "self", ".", "mat", "=", "torch", ".", "zeros", "(", "(", "n", ",", "n", ")", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "pred", ".", "device", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "k", "=", "(", "target", ">=", "0", ")", "&", "(", "target", "<", "n", ")", "\n", "inds", "=", "n", "*", "target", "[", "k", "]", ".", "to", "(", "torch", ".", "int64", ")", "+", "pred", "[", "k", "]", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.count_parameters": [[14, 16], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["\n", "def", "control_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit": [[18, 37], ["torch.nll_loss", "torch.sum", "torch.sum", "torch.nonzero().size", "torch.nonzero().size", "torch.sum", "torch.sum", "torch.nonzero().size", "torch.nonzero().size", "torch.abs", "torch.abs", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.sum", "torch.sum"], "function", ["None"], ["np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n", "\n", "", "def", "model_fit", "(", "x_pred", ",", "x_output", ",", "task_type", ")", ":", "\n", "    ", "device", "=", "x_pred", ".", "device", "\n", "\n", "# binary mark to mask out undefined pixel space", "\n", "binary_mask", "=", "(", "torch", ".", "sum", "(", "x_output", ",", "dim", "=", "1", ")", "!=", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "task_type", "==", "'semantic'", ":", "\n", "# semantic loss: depth-wise cross entropy", "\n", "        ", "loss", "=", "F", ".", "nll_loss", "(", "x_pred", ",", "x_output", ",", "ignore_index", "=", "-", "1", ")", "\n", "\n", "", "if", "task_type", "==", "'depth'", ":", "\n", "# depth loss: l1 norm", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error": [[109, 118], ["x_pred.masked_select", "x_output.masked_select", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.nonzero().size", "torch.nonzero().size", "torch.sum", "torch.sum", "torch.nonzero().size", "torch.nonzero().size", "torch.sum", "torch.sum", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "function", ["None"], ["\n", "", "", "def", "get_metrics", "(", "self", ")", ":", "\n", "        ", "h", "=", "self", ".", "mat", ".", "float", "(", ")", "\n", "acc", "=", "torch", ".", "diag", "(", "h", ")", ".", "sum", "(", ")", "/", "h", ".", "sum", "(", ")", "\n", "iu", "=", "torch", ".", "diag", "(", "h", ")", "/", "(", "h", ".", "sum", "(", "1", ")", "+", "h", ".", "sum", "(", "0", ")", "-", "torch", ".", "diag", "(", "h", ")", ")", "\n", "return", "torch", ".", "mean", "(", "iu", ")", ",", "acc", "\n", "\n", "\n", "", "", "def", "depth_error", "(", "x_pred", ",", "x_output", ")", ":", "\n", "    ", "device", "=", "x_pred", ".", "device", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.normal_error": [[120, 125], ["torch.acos().detach().cpu().numpy", "torch.acos().detach().cpu().numpy", "numpy.degrees", "torch.sum", "torch.sum", "numpy.mean", "numpy.median", "numpy.mean", "numpy.mean", "numpy.mean", "torch.acos().detach().cpu", "torch.acos().detach().cpu", "torch.acos().detach", "torch.acos().detach", "torch.acos", "torch.acos", "torch.clamp", "torch.clamp", "torch.sum().masked_select", "torch.sum().masked_select", "torch.sum", "torch.sum"], "function", ["None"], ["x_pred_true", "=", "x_pred", ".", "masked_select", "(", "binary_mask", ")", "\n", "x_output_true", "=", "x_output", ".", "masked_select", "(", "binary_mask", ")", "\n", "abs_err", "=", "torch", ".", "abs", "(", "x_pred_true", "-", "x_output_true", ")", "\n", "rel_err", "=", "torch", ".", "abs", "(", "x_pred_true", "-", "x_output_true", ")", "/", "x_output_true", "\n", "return", "(", "torch", ".", "sum", "(", "abs_err", ")", "/", "torch", ".", "nonzero", "(", "binary_mask", ",", "as_tuple", "=", "False", ")", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", ",", "(", "torch", ".", "sum", "(", "rel_err", ")", "/", "torch", ".", "nonzero", "(", "binary_mask", ",", "as_tuple", "=", "False", ")", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.multi_task_trainer": [[132, 231], ["time.time", "len", "len", "numpy.zeros", "numpy.ones", "range", "time.time", "print", "time.time", "numpy.zeros", "multi_task_model.train", "iter", "utils.ConfMatrix", "range", "utils.ConfMatrix.get_metrics", "multi_task_model.eval", "utils.ConfMatrix", "scheduler.step", "time.time", "print", "iter.next", "multi_task_model", "optimizer.zero_grad", "sum.backward", "optimizer.step", "utils.ConfMatrix.update", "train_loss[].item", "train_loss[].item", "utils.depth_error", "train_loss[].item", "utils.normal_error", "torch.no_grad", "torch.no_grad", "iter", "range", "utils.ConfMatrix.get_metrics", "train_data.to", "train_label.long().to", "train_depth.to", "train_normal.to", "utils.model_fit", "utils.model_fit", "utils.model_fit", "sum", "sum", "train_pred[].argmax().flatten", "train_label.flatten", "iter.next", "multi_task_model", "utils.ConfMatrix.update", "test_loss[].item", "test_loss[].item", "utils.depth_error", "test_loss[].item", "utils.normal_error", "test_data.to", "test_label.long().to", "test_depth.to", "test_normal.to", "utils.model_fit", "utils.model_fit", "utils.model_fit", "test_pred[].argmax().flatten", "test_label.flatten", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "train_label.long", "train_pred[].argmax", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "range", "range", "test_label.long", "test_pred[].argmax", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.normal_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.normal_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit"], ["return", "np", ".", "mean", "(", "error", ")", ",", "np", ".", "median", "(", "error", ")", ",", "np", ".", "mean", "(", "error", "<", "11.25", ")", ",", "np", ".", "mean", "(", "error", "<", "22.5", ")", ",", "np", ".", "mean", "(", "error", "<", "30", ")", "\n", "\n", "\n", "", "\"\"\"\n=========== Universal Multi-task Trainer ===========\n\"\"\"", "\n", "\n", "\n", "def", "multi_task_trainer", "(", "train_loader", ",", "test_loader", ",", "multi_task_model", ",", "device", ",", "optimizer", ",", "scheduler", ",", "opt", ",", "total_epoch", "=", "200", ")", ":", "\n", "    ", "train_batch", "=", "len", "(", "train_loader", ")", "\n", "test_batch", "=", "len", "(", "test_loader", ")", "\n", "T", "=", "opt", ".", "temp", "\n", "avg_cost", "=", "np", ".", "zeros", "(", "[", "total_epoch", ",", "12", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lambda_weight", "=", "np", ".", "ones", "(", "[", "2", ",", "total_epoch", "]", ")", "\n", "for", "index", "in", "range", "(", "total_epoch", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "cost", "=", "np", ".", "zeros", "(", "12", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# apply Dynamic Weight Average", "\n", "if", "opt", ".", "weight", "==", "'dwa'", ":", "\n", "            ", "if", "index", "==", "0", "or", "index", "==", "1", ":", "\n", "                ", "lambda_weight", "[", ":", ",", "index", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "w_1", "=", "avg_cost", "[", "index", "-", "1", ",", "0", "]", "/", "avg_cost", "[", "index", "-", "2", ",", "0", "]", "\n", "w_2", "=", "avg_cost", "[", "index", "-", "1", ",", "3", "]", "/", "avg_cost", "[", "index", "-", "2", ",", "3", "]", "\n", "lambda_weight", "[", "0", ",", "index", "]", "=", "2", "*", "np", ".", "exp", "(", "w_1", "/", "T", ")", "/", "(", "np", ".", "exp", "(", "w_1", "/", "T", ")", "+", "np", ".", "exp", "(", "w_2", "/", "T", ")", ")", "\n", "lambda_weight", "[", "1", ",", "index", "]", "=", "2", "*", "np", ".", "exp", "(", "w_2", "/", "T", ")", "/", "(", "np", ".", "exp", "(", "w_1", "/", "T", ")", "+", "np", ".", "exp", "(", "w_2", "/", "T", ")", ")", "\n", "\n", "# iteration for all batches", "\n", "", "", "multi_task_model", ".", "train", "(", ")", "\n", "train_dataset", "=", "iter", "(", "train_loader", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "multi_task_model", ".", "class_nb", ")", "\n", "for", "k", "in", "range", "(", "train_batch", ")", ":", "\n", "            ", "train_data", ",", "train_label", ",", "train_depth", "=", "train_dataset", ".", "next", "(", ")", "\n", "train_data", ",", "train_label", "=", "train_data", ".", "to", "(", "device", ")", ",", "train_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "train_depth", "=", "train_depth", ".", "to", "(", "device", ")", "\n", "\n", "train_pred", ",", "logsigma", "=", "multi_task_model", "(", "train_data", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "train_loss", "=", "[", "model_fit", "(", "train_pred", "[", "0", "]", ",", "train_label", ",", "'semantic'", ")", ",", "\n", "model_fit", "(", "train_pred", "[", "1", "]", ",", "train_depth", ",", "'depth'", ")", "]", "\n", "\n", "if", "opt", ".", "weight", "==", "'equal'", "or", "opt", ".", "weight", "==", "'dwa'", ":", "\n", "                ", "loss", "=", "sum", "(", "[", "lambda_weight", "[", "i", ",", "index", "]", "*", "train_loss", "[", "i", "]", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "sum", "(", "1", "/", "(", "2", "*", "torch", ".", "exp", "(", "logsigma", "[", "i", "]", ")", ")", "*", "train_loss", "[", "i", "]", "+", "logsigma", "[", "i", "]", "/", "2", "for", "i", "in", "range", "(", "2", ")", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# accumulate label prediction for every pixel in training images", "\n", "conf_mat", ".", "update", "(", "train_pred", "[", "0", "]", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "train_label", ".", "flatten", "(", ")", ")", "\n", "\n", "cost", "[", "0", "]", "=", "train_loss", "[", "0", "]", ".", "item", "(", ")", "\n", "cost", "[", "3", "]", "=", "train_loss", "[", "1", "]", ".", "item", "(", ")", "\n", "cost", "[", "4", "]", ",", "cost", "[", "5", "]", "=", "depth_error", "(", "train_pred", "[", "1", "]", ",", "train_depth", ")", "\n", "avg_cost", "[", "index", ",", ":", "6", "]", "+=", "cost", "[", ":", "6", "]", "/", "train_batch", "\n", "\n", "# compute mIoU and acc", "\n", "", "avg_cost", "[", "index", ",", "1", ":", "3", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "# evaluating test data", "\n", "multi_task_model", ".", "eval", "(", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "multi_task_model", ".", "class_nb", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# operations inside don't track history", "\n", "            ", "test_dataset", "=", "iter", "(", "test_loader", ")", "\n", "for", "k", "in", "range", "(", "test_batch", ")", ":", "\n", "                ", "test_data", ",", "test_label", ",", "test_depth", "=", "test_dataset", ".", "next", "(", ")", "\n", "test_data", ",", "test_label", "=", "test_data", ".", "to", "(", "device", ")", ",", "test_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "test_depth", "=", "test_depth", ".", "to", "(", "device", ")", "\n", "\n", "test_pred", ",", "_", "=", "multi_task_model", "(", "test_data", ")", "\n", "test_loss", "=", "[", "model_fit", "(", "test_pred", "[", "0", "]", ",", "test_label", ",", "'semantic'", ")", ",", "\n", "model_fit", "(", "test_pred", "[", "1", "]", ",", "test_depth", ",", "'depth'", ")", "]", "\n", "\n", "conf_mat", ".", "update", "(", "test_pred", "[", "0", "]", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "test_label", ".", "flatten", "(", ")", ")", "\n", "\n", "cost", "[", "6", "]", "=", "test_loss", "[", "0", "]", ".", "item", "(", ")", "\n", "cost", "[", "9", "]", "=", "test_loss", "[", "1", "]", ".", "item", "(", ")", "\n", "cost", "[", "10", "]", ",", "cost", "[", "11", "]", "=", "depth_error", "(", "test_pred", "[", "1", "]", ",", "test_depth", ")", "\n", "avg_cost", "[", "index", ",", "6", ":", "]", "+=", "cost", "[", "6", ":", "]", "/", "test_batch", "\n", "\n", "# compute mIoU and acc", "\n", "", "avg_cost", "[", "index", ",", "7", ":", "9", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Epoch: {:04d} | TRAIN: {:.4f} {:.4f} {:.4f} | {:.4f} {:.4f} {:.4f} || TEST: {:.4f} {:.4f} {:.4f} | {:.4f} {:.4f} {:.4f} | TIME: {:.4f}'", "\n", ".", "format", "(", "index", ",", "avg_cost", "[", "index", ",", "0", "]", ",", "avg_cost", "[", "index", ",", "1", "]", ",", "avg_cost", "[", "index", ",", "2", "]", ",", "avg_cost", "[", "index", ",", "3", "]", ",", "\n", "avg_cost", "[", "index", ",", "4", "]", ",", "avg_cost", "[", "index", ",", "5", "]", ",", "avg_cost", "[", "index", ",", "6", "]", ",", "avg_cost", "[", "index", ",", "7", "]", ",", "avg_cost", "[", "index", ",", "8", "]", ",", "\n", "avg_cost", "[", "index", ",", "9", "]", ",", "avg_cost", "[", "index", ",", "10", "]", ",", "avg_cost", "[", "index", ",", "11", "]", ",", "t1", "-", "t0", ")", ")", "\n", "\n", "\n", "", "", "\"\"\"\n=========== Universal Single-task Trainer ===========\n\"\"\"", "\n", "\n", "\n", "def", "single_task_trainer", "(", "train_loader", ",", "test_loader", ",", "single_task_model", ",", "device", ",", "optimizer", ",", "scheduler", ",", "opt", ",", "total_epoch", "=", "200", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.single_task_trainer": [[238, 327], ["len", "len", "numpy.zeros", "range", "numpy.zeros", "single_task_model.train", "iter", "utils.ConfMatrix", "range", "single_task_model.eval", "utils.ConfMatrix", "scheduler.step", "iter.next", "single_task_model", "optimizer.zero_grad", "utils.ConfMatrix.get_metrics", "torch.no_grad", "torch.no_grad", "iter", "range", "print", "print", "print", "train_data.to", "train_label.long().to", "train_depth.to", "train_normal.to", "utils.model_fit", "model_fit.backward", "optimizer.step", "utils.ConfMatrix.update", "model_fit.item", "utils.model_fit", "model_fit.backward", "optimizer.step", "model_fit.item", "utils.depth_error", "utils.model_fit", "model_fit.backward", "optimizer.step", "model_fit.item", "utils.normal_error", "iter.next", "single_task_model", "utils.ConfMatrix.get_metrics", "single_task_model.argmax().flatten", "train_label.flatten", "test_data.to", "test_label.long().to", "test_depth.to", "test_normal.to", "utils.model_fit", "utils.ConfMatrix.update", "model_fit.item", "utils.model_fit", "model_fit.item", "utils.depth_error", "utils.model_fit", "model_fit.item", "utils.normal_error", "train_label.long", "single_task_model.argmax().flatten", "test_label.flatten", "single_task_model.argmax", "test_label.long", "single_task_model.argmax"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.normal_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.normal_error"], ["# iteration for all batches", "\n", "single_task_model", ".", "train", "(", ")", "\n", "train_dataset", "=", "iter", "(", "train_loader", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "single_task_model", ".", "class_nb", ")", "\n", "for", "k", "in", "range", "(", "train_batch", ")", ":", "\n", "            ", "train_data", ",", "train_label", ",", "train_depth", "=", "train_dataset", ".", "next", "(", ")", "\n", "train_data", ",", "train_label", "=", "train_data", ".", "to", "(", "device", ")", ",", "train_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "train_depth", "=", "train_depth", ".", "to", "(", "device", ")", "\n", "\n", "train_pred", "=", "single_task_model", "(", "train_data", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "                ", "train_loss", "=", "model_fit", "(", "train_pred", ",", "train_label", ",", "opt", ".", "task", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "conf_mat", ".", "update", "(", "train_pred", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "train_label", ".", "flatten", "(", ")", ")", "\n", "cost", "[", "0", "]", "=", "train_loss", ".", "item", "(", ")", "\n", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "                ", "train_loss", "=", "model_fit", "(", "train_pred", ",", "train_depth", ",", "opt", ".", "task", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "cost", "[", "3", "]", "=", "train_loss", ".", "item", "(", ")", "\n", "cost", "[", "4", "]", ",", "cost", "[", "5", "]", "=", "depth_error", "(", "train_pred", ",", "train_depth", ")", "\n", "\n", "", "avg_cost", "[", "index", ",", ":", "6", "]", "+=", "cost", "[", ":", "6", "]", "/", "train_batch", "\n", "\n", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "avg_cost", "[", "index", ",", "1", ":", "3", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "# evaluating test data", "\n", "", "single_task_model", ".", "eval", "(", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "single_task_model", ".", "class_nb", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# operations inside don't track history", "\n", "            ", "test_dataset", "=", "iter", "(", "test_loader", ")", "\n", "for", "k", "in", "range", "(", "test_batch", ")", ":", "\n", "                ", "test_data", ",", "test_label", ",", "test_depth", "=", "test_dataset", ".", "next", "(", ")", "\n", "test_data", ",", "test_label", "=", "test_data", ".", "to", "(", "device", ")", ",", "test_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "test_depth", "=", "test_depth", ".", "to", "(", "device", ")", "\n", "\n", "test_pred", "=", "single_task_model", "(", "test_data", ")", "\n", "\n", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "                    ", "test_loss", "=", "model_fit", "(", "test_pred", ",", "test_label", ",", "opt", ".", "task", ")", "\n", "\n", "conf_mat", ".", "update", "(", "test_pred", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "test_label", ".", "flatten", "(", ")", ")", "\n", "cost", "[", "6", "]", "=", "test_loss", ".", "item", "(", ")", "\n", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "                    ", "test_loss", "=", "model_fit", "(", "test_pred", ",", "test_depth", ",", "opt", ".", "task", ")", "\n", "cost", "[", "9", "]", "=", "test_loss", ".", "item", "(", ")", "\n", "cost", "[", "10", "]", ",", "cost", "[", "11", "]", "=", "depth_error", "(", "test_pred", ",", "test_depth", ")", "\n", "\n", "", "avg_cost", "[", "index", ",", "6", ":", "]", "+=", "cost", "[", "6", ":", "]", "/", "test_batch", "\n", "", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "                ", "avg_cost", "[", "index", ",", "7", ":", "9", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "if", "opt", ".", "task", "==", "'semantic'", ":", "\n", "            ", "print", "(", "'Epoch: {:04d} | TRAIN: {:.4f} {:.4f} {:.4f} TEST: {:.4f} {:.4f} {:.4f}'", "\n", ".", "format", "(", "index", ",", "avg_cost", "[", "index", ",", "0", "]", ",", "avg_cost", "[", "index", ",", "1", "]", ",", "avg_cost", "[", "index", ",", "2", "]", ",", "avg_cost", "[", "index", ",", "6", "]", ",", "avg_cost", "[", "index", ",", "7", "]", ",", "avg_cost", "[", "index", ",", "8", "]", ")", ")", "\n", "", "if", "opt", ".", "task", "==", "'depth'", ":", "\n", "            ", "print", "(", "'Epoch: {:04d} | TRAIN: {:.4f} {:.4f} {:.4f} TEST: {:.4f} {:.4f} {:.4f}'", "\n", ".", "format", "(", "index", ",", "avg_cost", "[", "index", ",", "3", "]", ",", "avg_cost", "[", "index", ",", "4", "]", ",", "avg_cost", "[", "index", ",", "5", "]", ",", "avg_cost", "[", "index", ",", "9", "]", ",", "avg_cost", "[", "index", ",", "10", "]", ",", "avg_cost", "[", "index", ",", "11", "]", ")", ")", "\n", "", "torch", ".", "save", "(", "single_task_model", ".", "state_dict", "(", ")", ",", "f\"models/single-{opt.task}-{opt.seed}.pt\"", ")", "\n", "\n", "\n", "", "", "\"\"\"\n=========== Universal Gradient Manipulation Multi-task Trainer ===========\n\"\"\"", "\n", "\n", "\n", "def", "multi_task_rg_trainer", "(", "train_loader", ",", "test_loader", ",", "multi_task_model", ",", "device", ",", "optimizer", ",", "scheduler", ",", "opt", ",", "total_epoch", "=", "200", ")", ":", "\n", "    ", "method", "=", "opt", ".", "method", "\n", "alpha", "=", "opt", ".", "alpha", "\n", "\n", "def", "graddrop", "(", "grads", ")", ":", "\n", "        ", "P", "=", "0.5", "*", "(", "1.", "+", "grads", ".", "sum", "(", "1", ")", "/", "(", "grads", ".", "abs", "(", ")", ".", "sum", "(", "1", ")", "+", "1e-8", ")", ")", "\n", "U", "=", "torch", ".", "rand_like", "(", "grads", "[", ":", ",", "0", "]", ")", "\n", "M", "=", "P", ".", "gt", "(", "U", ")", ".", "view", "(", "-", "1", ",", "1", ")", "*", "grads", ".", "gt", "(", "0", ")", "+", "P", ".", "lt", "(", "U", ")", ".", "view", "(", "-", "1", ",", "1", ")", "*", "grads", ".", "lt", "(", "0", ")", "\n", "g", "=", "(", "grads", "*", "M", ".", "float", "(", ")", ")", ".", "mean", "(", "1", ")", "\n", "return", "g", "\n", "\n", "", "def", "mgd", "(", "grads", ")", ":", "\n", "        ", "grads_cpu", "=", "grads", ".", "t", "(", ")", ".", "cpu", "(", ")", "\n", "sol", ",", "min_norm", "=", "MinNormSolver", ".", "find_min_norm_element", "(", "[", "\n", "grads_cpu", "[", "t", "]", "for", "t", "in", "range", "(", "grads", ".", "shape", "[", "-", "1", "]", ")", "]", ")", "\n", "w", "=", "torch", ".", "FloatTensor", "(", "sol", ")", ".", "to", "(", "grads", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.multi_task_mgd_trainer": [[330, 590], ["time.time", "numpy.random.default_rng", "multi_task_model.shared_modules", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "numpy.zeros", "numpy.ones", "range", "time.time", "print", "torch.rand_like", "torch.rand_like", "torch.Tensor().cuda.t().cpu", "min_norm_solvers.MinNormSolver.find_min_norm_element", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.Tensor().cuda.mm().view", "torch.Tensor().cuda.t", "numpy.zeros", "range", "copy.deepcopy", "copy.deepcopy.mean", "torch.Tensor().cuda.t().mm().cpu", "tuple", "grads.t().mm().cpu.numpy", "x_start.copy", "scipy.optimize.minimize", "torch.Tensor().to", "torch.Tensor().to", "gw.norm", "grads[].fill_", "m.shared_modules", "m.shared_modules", "mm.parameters", "time.time", "numpy.zeros", "multi_task_model.train", "iter", "utils.ConfMatrix", "range", "utils.ConfMatrix.get_metrics", "multi_task_model.eval", "utils.ConfMatrix", "scheduler.step", "time.time", "print", "numpy.arange", "np.random.default_rng.shuffle", "numpy.ones", "torch.Tensor().cuda.mean", "mm.parameters", "mm.parameters", "grad_dims.append", "torch.Tensor", "torch.Tensor", "iter.next", "multi_task_model", "optimizer.zero_grad", "utils.ConfMatrix.update", "train_loss[].item", "train_loss[].item", "utils.depth_error", "train_loss[].item", "utils.normal_error", "torch.no_grad", "torch.no_grad", "iter", "range", "utils.ConfMatrix.get_metrics", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "P.gt().view", "torch.Tensor().cuda.gt", "P.lt().view", "torch.Tensor().cuda.lt", "torch.Tensor().cuda.t", "torch.FloatTensor", "torch.FloatTensor", "torch.Tensor().cuda.mm", "grads.t.norm", "torch.clamp_max", "torch.clamp_max", "torch.Tensor().cuda.t().mm", "torch.Tensor", "torch.Tensor", "sum", "newgrad[].contiguous().view", "newgrad[].contiguous().view.data.clone", "param.data.numel", "sum", "train_data.to", "train_label.long().to", "train_depth.to", "train_normal.to", "utils.model_fit", "utils.model_fit", "utils.model_fit", "range", "range", "range", "utils.multi_task_mgd_trainer.graddrop"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.shared_modules", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.min_norm_solvers.MinNormSolver.find_min_norm_element", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.shared_modules", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.shared_modules", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.update", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.depth_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.normal_error", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.ConfMatrix.get_metrics", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.utils.model_fit"], ["\n", "", "def", "pcgrad", "(", "grads", ",", "rng", ")", ":", "\n", "        ", "grad_vec", "=", "grads", ".", "t", "(", ")", "\n", "num_tasks", "=", "2", "\n", "\n", "shuffled_task_indices", "=", "np", ".", "zeros", "(", "(", "num_tasks", ",", "num_tasks", "-", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "num_tasks", ")", ":", "\n", "            ", "task_indices", "=", "np", ".", "arange", "(", "num_tasks", ")", "\n", "task_indices", "[", "i", "]", "=", "task_indices", "[", "-", "1", "]", "\n", "shuffled_task_indices", "[", "i", "]", "=", "task_indices", "[", ":", "-", "1", "]", "\n", "rng", ".", "shuffle", "(", "shuffled_task_indices", "[", "i", "]", ")", "\n", "", "shuffled_task_indices", "=", "shuffled_task_indices", ".", "T", "\n", "\n", "normalized_grad_vec", "=", "grad_vec", "/", "(", "\n", "grad_vec", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", "\n", ")", "# num_tasks x dim", "\n", "modified_grad_vec", "=", "deepcopy", "(", "grad_vec", ")", "\n", "for", "task_indices", "in", "shuffled_task_indices", ":", "\n", "            ", "normalized_shuffled_grad", "=", "normalized_grad_vec", "[", "\n", "task_indices", "\n", "]", "# num_tasks x dim", "\n", "dot", "=", "(", "modified_grad_vec", "*", "normalized_shuffled_grad", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", "\n", ")", "# num_tasks x dim", "\n", "modified_grad_vec", "-=", "torch", ".", "clamp_max", "(", "dot", ",", "0", ")", "*", "normalized_shuffled_grad", "\n", "", "g", "=", "modified_grad_vec", ".", "mean", "(", "dim", "=", "0", ")", "\n", "return", "g", "\n", "\n", "", "def", "cagrad", "(", "grads", ",", "alpha", "=", "0.5", ",", "rescale", "=", "0", ")", ":", "\n", "        ", "g1", "=", "grads", "[", ":", ",", "0", "]", "\n", "g2", "=", "grads", "[", ":", ",", "1", "]", "\n", "\n", "g11", "=", "g1", ".", "dot", "(", "g1", ")", ".", "item", "(", ")", "\n", "g12", "=", "g1", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "g22", "=", "g2", ".", "dot", "(", "g2", ")", ".", "item", "(", ")", "\n", "\n", "g0_norm", "=", "0.5", "*", "np", ".", "sqrt", "(", "g11", "+", "g22", "+", "2", "*", "g12", ")", "\n", "\n", "# want to minimize g_w^Tg_0 + c*||g_0||*||g_w||", "\n", "coef", "=", "alpha", "*", "g0_norm", "\n", "def", "obj", "(", "x", ")", ":", "\n", "# g_w^T g_0: x*0.5*(g11+g22-2g12)+(0.5+x)*(g12-g22)+g22", "\n", "# g_w^T g_w: x^2*(g11+g22-2g12)+2*x*(g12-g22)+g22", "\n", "            ", "return", "coef", "*", "np", ".", "sqrt", "(", "x", "**", "2", "*", "(", "g11", "+", "g22", "-", "2", "*", "g12", ")", "+", "2", "*", "x", "*", "(", "g12", "-", "g22", ")", "+", "g22", "+", "1e-8", ")", "+", "0.5", "*", "x", "*", "(", "g11", "+", "g22", "-", "2", "*", "g12", ")", "+", "(", "0.5", "+", "x", ")", "*", "(", "g12", "-", "g22", ")", "+", "g22", "\n", "\n", "", "res", "=", "minimize_scalar", "(", "obj", ",", "bounds", "=", "(", "0", ",", "1", ")", ",", "method", "=", "'bounded'", ")", "\n", "x", "=", "res", ".", "x", "\n", "\n", "gw_norm", "=", "np", ".", "sqrt", "(", "x", "**", "2", "*", "g11", "+", "(", "1", "-", "x", ")", "**", "2", "*", "g22", "+", "2", "*", "x", "*", "(", "1", "-", "x", ")", "*", "g12", "+", "1e-8", ")", "\n", "lmbda", "=", "coef", "/", "(", "gw_norm", "+", "1e-8", ")", "\n", "g", "=", "(", "0.5", "+", "lmbda", "*", "x", ")", "*", "g1", "+", "(", "0.5", "+", "lmbda", "*", "(", "1", "-", "x", ")", ")", "*", "g2", "# g0 + lmbda*gw", "\n", "if", "rescale", "==", "0", ":", "\n", "            ", "return", "g", "\n", "", "elif", "rescale", "==", "1", ":", "\n", "            ", "return", "g", "/", "(", "1", "+", "alpha", "**", "2", ")", "\n", "", "else", ":", "\n", "            ", "return", "g", "/", "(", "1", "+", "alpha", ")", "\n", "\n", "", "", "def", "grad2vec", "(", "m", ",", "grads", ",", "grad_dims", ",", "task", ")", ":", "\n", "# store the gradients", "\n", "        ", "grads", "[", ":", ",", "task", "]", ".", "fill_", "(", "0.0", ")", "\n", "cnt", "=", "0", "\n", "for", "mm", "in", "m", ".", "shared_modules", "(", ")", ":", "\n", "            ", "for", "p", "in", "mm", ".", "parameters", "(", ")", ":", "\n", "                ", "grad", "=", "p", ".", "grad", "\n", "if", "grad", "is", "not", "None", ":", "\n", "                    ", "grad_cur", "=", "grad", ".", "data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "beg", "=", "0", "if", "cnt", "==", "0", "else", "sum", "(", "grad_dims", "[", ":", "cnt", "]", ")", "\n", "en", "=", "sum", "(", "grad_dims", "[", ":", "cnt", "+", "1", "]", ")", "\n", "grads", "[", "beg", ":", "en", ",", "task", "]", ".", "copy_", "(", "grad_cur", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "", "", "def", "overwrite_grad", "(", "m", ",", "newgrad", ",", "grad_dims", ")", ":", "\n", "        ", "newgrad", "=", "newgrad", "*", "2", "# to match the sum loss", "\n", "cnt", "=", "0", "\n", "for", "mm", "in", "m", ".", "shared_modules", "(", ")", ":", "\n", "            ", "for", "param", "in", "mm", ".", "parameters", "(", ")", ":", "\n", "                ", "beg", "=", "0", "if", "cnt", "==", "0", "else", "sum", "(", "grad_dims", "[", ":", "cnt", "]", ")", "\n", "en", "=", "sum", "(", "grad_dims", "[", ":", "cnt", "+", "1", "]", ")", "\n", "this_grad", "=", "newgrad", "[", "beg", ":", "en", "]", ".", "contiguous", "(", ")", ".", "view", "(", "param", ".", "data", ".", "size", "(", ")", ")", "\n", "param", ".", "grad", "=", "this_grad", ".", "data", ".", "clone", "(", ")", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "", "rng", "=", "np", ".", "random", ".", "default_rng", "(", ")", "\n", "grad_dims", "=", "[", "]", "\n", "for", "mm", "in", "multi_task_model", ".", "shared_modules", "(", ")", ":", "\n", "        ", "for", "param", "in", "mm", ".", "parameters", "(", ")", ":", "\n", "            ", "grad_dims", ".", "append", "(", "param", ".", "data", ".", "numel", "(", ")", ")", "\n", "", "", "grads", "=", "torch", ".", "Tensor", "(", "sum", "(", "grad_dims", ")", ",", "2", ")", ".", "cuda", "(", ")", "\n", "\n", "train_batch", "=", "len", "(", "train_loader", ")", "\n", "test_batch", "=", "len", "(", "test_loader", ")", "\n", "T", "=", "opt", ".", "temp", "\n", "avg_cost", "=", "np", ".", "zeros", "(", "[", "total_epoch", ",", "12", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lambda_weight", "=", "np", ".", "ones", "(", "[", "2", ",", "total_epoch", "]", ")", "\n", "for", "index", "in", "range", "(", "total_epoch", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "cost", "=", "np", ".", "zeros", "(", "12", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# apply Dynamic Weight Average", "\n", "if", "opt", ".", "weight", "==", "'dwa'", ":", "\n", "            ", "if", "index", "==", "0", "or", "index", "==", "1", ":", "\n", "                ", "lambda_weight", "[", ":", ",", "index", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "w_1", "=", "avg_cost", "[", "index", "-", "1", ",", "0", "]", "/", "avg_cost", "[", "index", "-", "2", ",", "0", "]", "\n", "w_2", "=", "avg_cost", "[", "index", "-", "1", ",", "3", "]", "/", "avg_cost", "[", "index", "-", "2", ",", "3", "]", "\n", "lambda_weight", "[", "0", ",", "index", "]", "=", "2", "*", "np", ".", "exp", "(", "w_1", "/", "T", ")", "/", "(", "np", ".", "exp", "(", "w_1", "/", "T", ")", "+", "np", ".", "exp", "(", "w_2", "/", "T", ")", ")", "\n", "lambda_weight", "[", "1", ",", "index", "]", "=", "2", "*", "np", ".", "exp", "(", "w_2", "/", "T", ")", "/", "(", "np", ".", "exp", "(", "w_1", "/", "T", ")", "+", "np", ".", "exp", "(", "w_2", "/", "T", ")", ")", "\n", "\n", "# iteration for all batches", "\n", "", "", "multi_task_model", ".", "train", "(", ")", "\n", "train_dataset", "=", "iter", "(", "train_loader", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "multi_task_model", ".", "class_nb", ")", "\n", "for", "k", "in", "range", "(", "train_batch", ")", ":", "\n", "            ", "train_data", ",", "train_label", ",", "train_depth", "=", "train_dataset", ".", "next", "(", ")", "\n", "train_data", ",", "train_label", "=", "train_data", ".", "to", "(", "device", ")", ",", "train_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "train_depth", "=", "train_depth", ".", "to", "(", "device", ")", "\n", "\n", "train_pred", ",", "logsigma", "=", "multi_task_model", "(", "train_data", ")", "\n", "\n", "train_loss", "=", "[", "model_fit", "(", "train_pred", "[", "0", "]", ",", "train_label", ",", "'semantic'", ")", ",", "\n", "model_fit", "(", "train_pred", "[", "1", "]", ",", "train_depth", ",", "'depth'", ")", "]", "\n", "\n", "train_loss_tmp", "=", "[", "0", ",", "0", "]", "\n", "if", "opt", ".", "weight", "==", "'equal'", "or", "opt", ".", "weight", "==", "'dwa'", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "train_loss_tmp", "[", "i", "]", "=", "train_loss", "[", "i", "]", "*", "lambda_weight", "[", "i", ",", "index", "]", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "train_loss_tmp", "[", "i", "]", "=", "1", "/", "(", "2", "*", "torch", ".", "exp", "(", "logsigma", "[", "i", "]", ")", ")", "*", "train_loss", "[", "i", "]", "+", "logsigma", "[", "i", "]", "/", "2", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "method", "==", "\"graddrop\"", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", ")", "\n", "", "grad2vec", "(", "multi_task_model", ",", "grads", ",", "grad_dims", ",", "i", ")", "\n", "multi_task_model", ".", "zero_grad_shared_modules", "(", ")", "\n", "", "g", "=", "graddrop", "(", "grads", ")", "\n", "overwrite_grad", "(", "multi_task_model", ",", "g", ",", "grad_dims", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "method", "==", "\"pcgrad\"", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", ")", "\n", "", "grad2vec", "(", "multi_task_model", ",", "grads", ",", "grad_dims", ",", "i", ")", "\n", "multi_task_model", ".", "zero_grad_shared_modules", "(", ")", "\n", "", "g", "=", "pcgrad", "(", "grads", ",", "rng", ")", "\n", "overwrite_grad", "(", "multi_task_model", ",", "g", ",", "grad_dims", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "method", "==", "\"mgd\"", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", ")", "\n", "", "grad2vec", "(", "multi_task_model", ",", "grads", ",", "grad_dims", ",", "i", ")", "\n", "multi_task_model", ".", "zero_grad_shared_modules", "(", ")", "\n", "", "g", "=", "mgd", "(", "grads", ")", "\n", "overwrite_grad", "(", "multi_task_model", ",", "g", ",", "grad_dims", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "method", "==", "\"cagrad\"", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "train_loss_tmp", "[", "i", "]", ".", "backward", "(", ")", "\n", "", "grad2vec", "(", "multi_task_model", ",", "grads", ",", "grad_dims", ",", "i", ")", "\n", "multi_task_model", ".", "zero_grad_shared_modules", "(", ")", "\n", "", "g", "=", "cagrad", "(", "grads", ",", "alpha", ",", "rescale", "=", "1", ")", "\n", "overwrite_grad", "(", "multi_task_model", ",", "g", ",", "grad_dims", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# accumulate label prediction for every pixel in training images", "\n", "", "conf_mat", ".", "update", "(", "train_pred", "[", "0", "]", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "train_label", ".", "flatten", "(", ")", ")", "\n", "\n", "cost", "[", "0", "]", "=", "train_loss", "[", "0", "]", ".", "item", "(", ")", "\n", "cost", "[", "3", "]", "=", "train_loss", "[", "1", "]", ".", "item", "(", ")", "\n", "cost", "[", "4", "]", ",", "cost", "[", "5", "]", "=", "depth_error", "(", "train_pred", "[", "1", "]", ",", "train_depth", ")", "\n", "avg_cost", "[", "index", ",", ":", "6", "]", "+=", "cost", "[", ":", "6", "]", "/", "train_batch", "\n", "\n", "# compute mIoU and acc", "\n", "", "avg_cost", "[", "index", ",", "1", ":", "3", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "# evaluating test data", "\n", "multi_task_model", ".", "eval", "(", ")", "\n", "conf_mat", "=", "ConfMatrix", "(", "multi_task_model", ".", "class_nb", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# operations inside don't track history", "\n", "            ", "test_dataset", "=", "iter", "(", "test_loader", ")", "\n", "for", "k", "in", "range", "(", "test_batch", ")", ":", "\n", "                ", "test_data", ",", "test_label", ",", "test_depth", "=", "test_dataset", ".", "next", "(", ")", "\n", "test_data", ",", "test_label", "=", "test_data", ".", "to", "(", "device", ")", ",", "test_label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "test_depth", "=", "test_depth", ".", "to", "(", "device", ")", "\n", "\n", "test_pred", ",", "_", "=", "multi_task_model", "(", "test_data", ")", "\n", "test_loss", "=", "[", "model_fit", "(", "test_pred", "[", "0", "]", ",", "test_label", ",", "'semantic'", ")", ",", "\n", "model_fit", "(", "test_pred", "[", "1", "]", ",", "test_depth", ",", "'depth'", ")", "]", "\n", "\n", "conf_mat", ".", "update", "(", "test_pred", "[", "0", "]", ".", "argmax", "(", "1", ")", ".", "flatten", "(", ")", ",", "test_label", ".", "flatten", "(", ")", ")", "\n", "\n", "cost", "[", "6", "]", "=", "test_loss", "[", "0", "]", ".", "item", "(", ")", "\n", "cost", "[", "9", "]", "=", "test_loss", "[", "1", "]", ".", "item", "(", ")", "\n", "cost", "[", "10", "]", ",", "cost", "[", "11", "]", "=", "depth_error", "(", "test_pred", "[", "1", "]", ",", "test_depth", ")", "\n", "avg_cost", "[", "index", ",", "6", ":", "]", "+=", "cost", "[", "6", ":", "]", "/", "test_batch", "\n", "\n", "# compute mIoU and acc", "\n", "", "avg_cost", "[", "index", ",", "7", ":", "9", "]", "=", "conf_mat", ".", "get_metrics", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Epoch: {:04d} | TRAIN: {:.4f} {:.4f} {:.4f} | {:.4f} {:.4f} {:.4f} || TEST: {:.4f} {:.4f} {:.4f} | {:.4f} {:.4f} {:.4f} | TIME: {:.4f}'", "\n", ".", "format", "(", "index", ",", "avg_cost", "[", "index", ",", "0", "]", ",", "avg_cost", "[", "index", ",", "1", "]", ",", "avg_cost", "[", "index", ",", "2", "]", ",", "avg_cost", "[", "index", ",", "3", "]", ",", "\n", "avg_cost", "[", "index", ",", "4", "]", ",", "avg_cost", "[", "index", ",", "5", "]", ",", "avg_cost", "[", "index", ",", "6", "]", ",", "avg_cost", "[", "index", ",", "7", "]", ",", "avg_cost", "[", "index", ",", "8", "]", ",", "\n", "avg_cost", "[", "index", ",", "9", "]", ",", "avg_cost", "[", "index", ",", "10", "]", ",", "avg_cost", "[", "index", ",", "11", "]", ",", "t1", "-", "t0", ")", ")", "\n", "torch", ".", "save", "(", "multi_task_model", ".", "state_dict", "(", ")", ",", "f\"models/{method}-{opt.weight}-{alpha}-{opt.seed}.pt\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.__init__": [[25, 93], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_mt.SegNet.modules", "model_segnet_mt.SegNet.encoder_block.append", "model_segnet_mt.SegNet.decoder_block.append", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_block_enc.append", "model_segnet_mt.SegNet.conv_block_dec.append", "model_segnet_mt.SegNet.conv_block_enc.append", "model_segnet_mt.SegNet.conv_block_dec.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.encoder_att.append", "model_segnet_mt.SegNet.decoder_att.append", "model_segnet_mt.SegNet.encoder_att[].append", "model_segnet_mt.SegNet.decoder_att[].append", "model_segnet_mt.SegNet.encoder_block_att.append", "model_segnet_mt.SegNet.decoder_block_att.append", "model_segnet_mt.SegNet.encoder_block_att.append", "model_segnet_mt.SegNet.decoder_block_att.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_segnet_mt.SegNet.att_layer", "model_segnet_mt.SegNet.att_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.conv_layer", "model_segnet_mt.SegNet.att_layer", "model_segnet_mt.SegNet.att_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "model_segnet_mt.SegNet.att_layer", "model_segnet_mt.SegNet.att_layer"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer"], ["# initialise network parameters", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "class_nb", "=", "7", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "# define task attention layers", "\n", "", "", "self", ".", "encoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "decoder_att", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "]", ")", "\n", "self", ".", "encoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "1", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block_att", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "j", "<", "1", ":", "\n", "                ", "self", ".", "encoder_att", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", ")", "\n", "self", ".", "decoder_att", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "self", ".", "encoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "2", "*", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_att", "[", "j", "]", ".", "append", "(", "self", ".", "att_layer", "(", "[", "filter", "[", "i", "+", "1", "]", "+", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "<", "3", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "2", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "encoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block_att", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "\n", "", "", "self", ".", "pred_task1", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "self", ".", "class_nb", "]", ",", "pred", "=", "True", ")", "\n", "self", ".", "pred_task2", "=", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "1", "]", ",", "pred", "=", "True", ")", "\n", "#self.pred_task3 = self.conv_layer([filter[0], 3], pred=True)", "\n", "\n", "# define pooling and unpooling functions", "\n", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.5", ",", "-", "0.5", ",", "-", "0.5", "]", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "shared_modules", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "encoder_block", ",", "self", ".", "decoder_block", ",", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.shared_modules": [[94, 100], ["None"], "methods", ["None"], ["self", ".", "conv_block_enc", ",", "self", ".", "conv_block_dec", ",", "\n", "self", ".", "encoder_block_att", ",", "self", ".", "decoder_block_att", ",", "\n", "self", ".", "down_sampling", ",", "self", ".", "up_sampling", "]", "\n", "\n", "", "def", "zero_grad_shared_modules", "(", "self", ")", ":", "\n", "        ", "for", "mm", "in", "self", ".", "shared_modules", "(", ")", ":", "\n", "            ", "mm", ".", "zero_grad", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.zero_grad_shared_modules": [[101, 104], ["model_segnet_mt.SegNet.shared_modules", "mm.zero_grad"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.shared_modules"], ["\n", "", "", "def", "conv_layer", "(", "self", ",", "channel", ",", "pred", "=", "False", ")", ":", "\n", "        ", "if", "not", "pred", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.conv_layer": [[105, 118], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "", "return", "conv_block", "\n", "\n", "", "def", "att_layer", "(", "self", ",", "channel", ")", ":", "\n", "        ", "att_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.att_layer": [[119, 129], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "1", "]", ",", "out_channels", "=", "channel", "[", "2", "]", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", "[", "2", "]", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "return", "att_block", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNet.forward": [[130, 197], ["range", "range", "range", "range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_mt.SegNet.pred_task2", "model_segnet_mt.SegNet.pred_task3", "range", "range", "range", "model_segnet_mt.SegNet.pred_task1", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "range", "range", "model_segnet_mt.SegNet.down_sampling", "model_segnet_mt.SegNet.down_sampling", "model_segnet_mt.SegNet.up_sampling", "model_segnet_mt.SegNet.up_sampling", "range", "range", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define attention list for tasks", "\n", "", "atten_encoder", ",", "atten_decoder", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "atten_encoder", "[", "i", "]", ",", "atten_decoder", "[", "i", "]", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "atten_encoder", "[", "i", "]", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "=", "(", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# define global shared network", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task dependent attention module", "\n", "", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "                    ", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "encoder_att", "[", "i", "]", "[", "j", "]", "(", "torch", ".", "cat", "(", "(", "g_encoder", "[", "j", "]", "[", "0", "]", ",", "atten_encoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "*", "g_encoder", "[", "j", "]", "[", "1", "]", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "self", ".", "encoder_block_att", "[", "j", "]", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "\n", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "F", ".", "max_pool2d", "(", "atten_encoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_encoder", "[", "i", "]", "[", "-", "1", "]", "[", "-", "1", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "F", ".", "interpolate", "(", "atten_decoder", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "self", ".", "decoder_block_att", "[", "-", "j", "-", "1", "]", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "self", ".", "decoder_att", "[", "i", "]", "[", "-", "j", "-", "1", "]", "(", "torch", ".", "cat", "(", "(", "g_upsampl", "[", "j", "]", ",", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "(", "atten_decoder", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", "*", "g_decoder", "[", "j", "]", "[", "-", "1", "]", "\n", "\n", "# define task prediction layers", "\n", "", "", "", "t1_pred", "=", "F", ".", "log_softmax", "(", "self", ".", "pred_task1", "(", "atten_decoder", "[", "0", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "t2_pred", "=", "self", ".", "pred_task2", "(", "atten_decoder", "[", "1", "]", "[", "-", "1", "]", "[", "-", "1", "]", ")", "\n", "#t3_pred = self.pred_task3(atten_decoder[2][-1][-1])", "\n", "#t3_pred = t3_pred / torch.norm(t3_pred, p=2, dim=1, keepdim=True)", "\n", "\n", "return", "[", "t1_pred", ",", "t2_pred", "]", ",", "self", ".", "logsigma", "\n", "\n", "", "", "control_seed", "(", "opt", ".", "seed", ")", "\n", "# define model, optimiser and scheduler", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.__init__": [[199, 253], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_segnet_mt.SegNetSplit.modules", "model_segnet_mt.SegNetSplit.encoder_block.append", "model_segnet_mt.SegNetSplit.decoder_block.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_block_enc.append", "model_segnet_mt.SegNetSplit.conv_block_dec.append", "model_segnet_mt.SegNetSplit.conv_block_enc.append", "model_segnet_mt.SegNetSplit.conv_block_dec.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_layer", "model_segnet_mt.SegNetSplit.conv_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer", "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer"], ["optimizer", "=", "optim", ".", "Adam", "(", "SegNet_MTAN", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "100", ",", "gamma", "=", "0.5", ")", "\n", "\n", "print", "(", "'Parameter Space: ABS: {:.1f}, REL: {:.4f}'", ".", "format", "(", "count_parameters", "(", "SegNet_MTAN", ")", ",", "\n", "count_parameters", "(", "SegNet_MTAN", ")", "/", "24981069", ")", ")", "\n", "print", "(", "'LOSS FORMAT: SEMANTIC_LOSS MEAN_IOU PIX_ACC | DEPTH_LOSS ABS_ERR REL_ERR | NORMAL_LOSS MEAN MED <11.25 <22.5 <30'", ")", "\n", "\n", "# define dataset", "\n", "dataset_path", "=", "opt", ".", "dataroot", "\n", "if", "opt", ".", "apply_augmentation", ":", "\n", "    ", "train_set", "=", "CityScapes", "(", "root", "=", "dataset_path", ",", "train", "=", "True", ",", "augmentation", "=", "True", ")", "\n", "print", "(", "'Applying data augmentation.'", ")", "\n", "", "else", ":", "\n", "    ", "train_set", "=", "CityScapes", "(", "root", "=", "dataset_path", ",", "train", "=", "True", ")", "\n", "print", "(", "'Standard training strategy without data augmentation.'", ")", "\n", "\n", "", "test_set", "=", "CityScapes", "(", "root", "=", "dataset_path", ",", "train", "=", "False", ")", "\n", "\n", "batch_size", "=", "8", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "test_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# Train and evaluate multi-task network", "\n", "multi_task_rg_trainer", "(", "train_loader", ",", "\n", "test_loader", ",", "\n", "SegNet_MTAN", ",", "\n", "device", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "opt", ",", "\n", "200", ")", "\n", ""]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.conv_layer": [[255, 272], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cranial-xix_cagrad.nyuv2.model_segnet_mt.SegNetSplit.forward": [[273, 306], ["range", "range", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_segnet_mt.SegNetSplit.pred_task2", "model_segnet_mt.SegNetSplit.pred_task3", "model_segnet_mt.SegNetSplit.pred_task1", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "range", "model_segnet_mt.SegNetSplit.down_sampling", "model_segnet_mt.SegNetSplit.down_sampling", "model_segnet_mt.SegNetSplit.up_sampling", "model_segnet_mt.SegNetSplit.up_sampling", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.dict_to_config": [[16, 26], ["omegaconf.OmegaConf.create"], "function", ["None"], ["def", "dict_to_config", "(", "dictionary", ":", "Dict", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Convert the dictionary to a config.\n\n    Args:\n        dictionary (Dict): dictionary to convert.\n\n    Returns:\n        ConfigType: config made from the dictionary.\n    \"\"\"", "\n", "return", "OmegaConf", ".", "create", "(", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.make_config_mutable": [[28, 39], ["omegaconf.OmegaConf.set_readonly"], "function", ["None"], ["", "def", "make_config_mutable", "(", "config", ":", "ConfigType", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Set the config to be mutable.\n\n    Args:\n        config (ConfigType):\n\n    Returns:\n        ConfigType:\n    \"\"\"", "\n", "OmegaConf", ".", "set_readonly", "(", "config", ",", "False", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.make_config_immutable": [[41, 52], ["omegaconf.OmegaConf.set_readonly"], "function", ["None"], ["", "def", "make_config_immutable", "(", "config", ":", "ConfigType", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Set the config to be immutable.\n\n    Args:\n        config (ConfigType):\n\n    Returns:\n        ConfigType:\n    \"\"\"", "\n", "OmegaConf", ".", "set_readonly", "(", "config", ",", "True", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.set_struct": [[54, 65], ["omegaconf.OmegaConf.set_struct"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.set_struct"], ["", "def", "set_struct", "(", "config", ":", "ConfigType", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Set the struct flag in the config.\n\n    Args:\n        config (ConfigType):\n\n    Returns:\n        ConfigType:\n    \"\"\"", "\n", "OmegaConf", ".", "set_struct", "(", "config", ",", "True", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.unset_struct": [[67, 78], ["omegaconf.OmegaConf.set_struct"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.set_struct"], ["", "def", "unset_struct", "(", "config", ":", "ConfigType", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Unset the struct flag in the config.\n\n    Args:\n        config (ConfigType):\n\n    Returns:\n        ConfigType:\n    \"\"\"", "\n", "OmegaConf", ".", "set_struct", "(", "config", ",", "False", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.to_dict": [[80, 93], ["typing.cast", "omegaconf.OmegaConf.to_container", "copy.deepcopy"], "function", ["None"], ["", "def", "to_dict", "(", "config", ":", "ConfigType", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Convert config to a dictionary.\n\n    Args:\n        config (ConfigType):\n\n    Returns:\n        Dict:\n    \"\"\"", "\n", "dict_config", "=", "cast", "(", "\n", "Dict", "[", "str", ",", "Any", "]", ",", "OmegaConf", ".", "to_container", "(", "deepcopy", "(", "config", ")", ",", "resolve", "=", "False", ")", "\n", ")", "\n", "return", "dict_config", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.process_config": [[95, 108], ["config._process_setup_config", "config._process_experiment_config", "config.set_struct", "config.make_config_immutable"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config._process_setup_config", "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config._process_experiment_config", "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.set_struct", "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.make_config_immutable"], ["", "def", "process_config", "(", "config", ":", "ConfigType", ",", "should_make_dir", ":", "bool", "=", "True", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Process the config.\n\n    Args:\n        config (ConfigType): config object to process.\n        should_make_dir (bool, optional): should make dir for saving logs, models etc? Defaults to True.\n\n    Returns:\n        ConfigType: processed config.\n    \"\"\"", "\n", "config", "=", "_process_setup_config", "(", "config", "=", "config", ")", "\n", "config", "=", "_process_experiment_config", "(", "config", "=", "config", ",", "should_make_dir", "=", "should_make_dir", ")", "\n", "return", "set_struct", "(", "make_config_immutable", "(", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.read_config_from_file": [[110, 122], ["omegaconf.OmegaConf.load", "isinstance", "config.set_struct", "config.make_config_immutable"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.set_struct", "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.make_config_immutable"], ["", "def", "read_config_from_file", "(", "config_path", ":", "str", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Read the config from filesystem.\n\n    Args:\n        config_path (str): path to read config from.\n\n    Returns:\n        ConfigType:\n    \"\"\"", "\n", "config", "=", "OmegaConf", ".", "load", "(", "config_path", ")", "\n", "assert", "isinstance", "(", "config", ",", "ConfigType", ")", "\n", "return", "set_struct", "(", "make_config_immutable", "(", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config._process_setup_config": [[124, 176], ["mtrl.utils.utils.get_current_commit_id", "hydra.utils.get_original_cwd", "mtrl.utils.utils.has_uncommitted_changes", "datetime.datetime.now().strftime", "RuntimeError", "slurm_id.append", "datetime.datetime.now", "str"], "function", ["None"], ["", "def", "_process_setup_config", "(", "config", ":", "ConfigType", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Process the `setup` node of the config.\n\n    Args:\n        config (ConfigType): config object.\n\n    Returns:\n        [ConfigType]: processed config.\n    \"\"\"", "\n", "\n", "setup_config", "=", "config", ".", "setup", "\n", "\n", "if", "setup_config", ".", "base_path", "is", "None", ":", "\n", "        ", "setup_config", ".", "base_path", "=", "hydra", ".", "utils", ".", "get_original_cwd", "(", ")", "\n", "", "if", "not", "setup_config", ".", "debug", ".", "should_enable", ":", "\n", "#setup_config.id = f\"{hashlib.sha224(setup_config.description.encode()).hexdigest()}_issue_{setup_config.git.issue_id}_seed_{setup_config.seed}\"", "\n", "        ", "if", "\"cagrad\"", "in", "config", ".", "agent", ".", "name", ":", "\n", "            ", "setup_config", ".", "id", "=", "f\"{config.env.name}_{config.agent.name}_\"", "+", "f\"{config.agent.builder.agent_cfg.cagrad_method}_\"", "+", "f\"c{config.agent.builder.agent_cfg.cagrad_c}_seed_{setup_config.seed}\"", "\n", "", "else", ":", "\n", "            ", "setup_config", ".", "id", "=", "f\"{config.env.name}_{config.agent.name}_seed_{setup_config.seed}\"", "\n", "\n", "", "", "current_commit_id", "=", "utils", ".", "get_current_commit_id", "(", ")", "\n", "if", "not", "setup_config", ".", "git", ".", "commit_id", ":", "\n", "        ", "setup_config", ".", "git", ".", "commit_id", "=", "current_commit_id", "\n", "", "else", ":", "\n", "# if the commit id is already set, assert that the commit id (in the", "\n", "# config) is the same as the current commit id.", "\n", "        ", "if", "setup_config", ".", "git", ".", "commit_id", "!=", "current_commit_id", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f\"\"\"The current commit id ({current_commit_id}) does\n                 not match the commit id from the config\n                 ({setup_config.git.commit_id})\"\"\"", "\n", ")", "\n", "", "", "if", "setup_config", ".", "git", ".", "has_uncommitted_changes", "==", "\"\"", ":", "\n", "        ", "setup_config", ".", "git", ".", "has_uncommitted_changes", "=", "utils", ".", "has_uncommitted_changes", "(", ")", "\n", "\n", "", "if", "not", "setup_config", ".", "date", ":", "\n", "        ", "setup_config", ".", "date", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "\n", "", "slurm_id", "=", "[", "]", "\n", "env_var_names", "=", "[", "\"SLURM_JOB_ID\"", ",", "\"SLURM_STEP_ID\"", "]", "\n", "for", "var_name", "in", "env_var_names", ":", "\n", "        ", "if", "var_name", "in", "os", ".", "environ", ":", "\n", "            ", "slurm_id", ".", "append", "(", "str", "(", "os", ".", "environ", "[", "var_name", "]", ")", ")", "\n", "", "", "if", "slurm_id", ":", "\n", "        ", "setup_config", ".", "slurm_id", "=", "\"-\"", ".", "join", "(", "slurm_id", ")", "\n", "", "else", ":", "\n", "        ", "setup_config", ".", "slurm_id", "=", "\"-1\"", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config._process_experiment_config": [[178, 191], ["mtrl.utils.utils.make_dir"], "function", ["None"], ["", "def", "_process_experiment_config", "(", "config", ":", "ConfigType", ",", "should_make_dir", ":", "bool", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Process the `experiment` section of the config.\n\n    Args:\n        config (ConfigType): config object.\n        should_make_dir (bool): should make dir.\n\n    Returns:\n        ConfigType: Processed config\n    \"\"\"", "\n", "if", "should_make_dir", ":", "\n", "        ", "utils", ".", "make_dir", "(", "path", "=", "config", ".", "experiment", ".", "save_dir", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.pretty_print": [[193, 201], ["print", "omegaconf.OmegaConf.to_yaml"], "function", ["None"], ["", "def", "pretty_print", "(", "config", ",", "resolve", ":", "bool", "=", "True", ")", ":", "\n", "    ", "\"\"\"Prettyprint the config.\n\n    Args:\n        config ([type]):\n        resolve (bool, optional): should resolve the config before printing. Defaults to True.\n    \"\"\"", "\n", "print", "(", "OmegaConf", ".", "to_yaml", "(", "config", ",", "resolve", "=", "resolve", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.get_env_params_from_config": [[203, 217], ["copy.deepcopy", "config.make_config_mutable", "config.unset_struct", "unset_struct.pop"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.make_config_mutable", "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.unset_struct"], ["", "def", "get_env_params_from_config", "(", "config", ":", "ConfigType", ")", "->", "ConfigType", ":", "\n", "    ", "\"\"\"Get the params needed for building the environment from a config.\n\n    Args:\n        config (ConfigType):\n\n    Returns:\n        ConfigType: params for building the environment, encoded as a config.\n    \"\"\"", "\n", "env_params", "=", "deepcopy", "(", "config", ".", "env", ".", "builder", ")", "\n", "env_params", "=", "make_config_mutable", "(", "env_params", ")", "\n", "env_params", "=", "unset_struct", "(", "env_params", ")", "\n", "env_params", ".", "pop", "(", "\"_target_\"", ")", "\n", "return", "env_params", "\n", "", ""]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__": [[89, 151], ["copy.deepcopy", "omegaconf.OmegaConf.set_struct", "omegaconf.OmegaConf.set_struct", "mtrl.agent.grad_manipulation.Agent.__init__", "numpy.random.default_rng", "range", "fn_maps.keys", "int", "torch.zeros().cuda", "cagrad.Agent.fast_w.cpu().numpy", "cagrad.Agent.complete_init", "torch.zeros", "cagrad.Agent.fast_w.cpu", "cagrad.Agent.cagrad_method.find"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.set_struct", "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.config.set_struct", "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env_obs_shape", ":", "List", "[", "int", "]", ",", "\n", "action_shape", ":", "List", "[", "int", "]", ",", "\n", "action_range", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", "agent_cfg", ":", "ConfigType", ",", "\n", "multitask_cfg", ":", "ConfigType", ",", "\n", "cfg_to_load_model", ":", "Optional", "[", "ConfigType", "]", "=", "None", ",", "\n", "should_complete_init", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Regularized gradient algorithm.\"\"\"", "\n", "agent_cfg_copy", "=", "deepcopy", "(", "agent_cfg", ")", "\n", "del", "agent_cfg_copy", "[", "'cagrad_c'", "]", "\n", "del", "agent_cfg_copy", "[", "'cagrad_method'", "]", "\n", "\n", "OmegaConf", ".", "set_struct", "(", "agent_cfg_copy", ",", "False", ")", "\n", "agent_cfg_copy", ".", "cfg_to_load_model", "=", "None", "\n", "agent_cfg_copy", ".", "should_complete_init", "=", "False", "\n", "agent_cfg_copy", ".", "loss_reduction", "=", "\"none\"", "\n", "OmegaConf", ".", "set_struct", "(", "agent_cfg_copy", ",", "True", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "env_obs_shape", "=", "env_obs_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "action_range", "=", "action_range", ",", "\n", "multitask_cfg", "=", "multitask_cfg", ",", "\n", "agent_cfg", "=", "agent_cfg_copy", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "self", ".", "agent", ".", "_compute_gradient", "=", "self", ".", "_compute_gradient", "\n", "self", ".", "_rng", "=", "np", ".", "random", ".", "default_rng", "(", ")", "\n", "\n", "self", ".", "cagrad_c", "=", "agent_cfg", "[", "'cagrad_c'", "]", "\n", "self", ".", "cagrad_method", "=", "agent_cfg", "[", "'cagrad_method'", "]", "\n", "\n", "fn_maps", "=", "{", "\n", "\"cagrad\"", ":", "self", ".", "cagrad", ",", "\n", "\"cagrad_exact\"", ":", "self", ".", "cagrad_exact", ",", "\n", "}", "\n", "for", "k", "in", "range", "(", "2", ",", "50", ")", ":", "\n", "            ", "fn_maps", "[", "f\"cagrad_fast{k}\"", "]", "=", "self", ".", "cagrad_fast", "\n", "\n", "", "fn_names", "=", "\", \"", ".", "join", "(", "fn_maps", ".", "keys", "(", ")", ")", "\n", "assert", "self", ".", "cagrad_method", "in", "fn_maps", ",", "f\"[error] unrealized fn {self.cagrad_method}, currently we have {fn_names}\"", "\n", "self", ".", "cagrad_fn", "=", "fn_maps", "[", "self", ".", "cagrad_method", "]", "\n", "self", ".", "wi_map", "=", "{", "}", "\n", "self", ".", "num_param_block", "=", "-", "1", "\n", "self", ".", "conflicts", "=", "[", "]", "\n", "self", ".", "last_w", "=", "None", "\n", "self", ".", "save_target", "=", "500000", "\n", "if", "\"fast\"", "in", "self", ".", "cagrad_method", ":", "\n", "            ", "num_tasks", "=", "multitask_cfg", "[", "'num_envs'", "]", "\n", "self", ".", "fast_n", "=", "int", "(", "self", ".", "cagrad_method", "[", "self", ".", "cagrad_method", ".", "find", "(", "\"fast\"", ")", "+", "4", ":", "]", ")", "\n", "self", ".", "fast_w", "=", "torch", ".", "zeros", "(", "(", "self", ".", "fast_n", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "fast_w", "[", ":", "-", "1", "]", "=", "1", "/", "num_tasks", "\n", "self", ".", "fast_w", "[", "-", "1", "]", "=", "1", "-", "(", "self", ".", "fast_n", "-", "1", ")", "/", "num_tasks", "\n", "self", ".", "fast_w_numpy", "=", "self", ".", "fast_w", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "should_complete_init", ":", "\n", "            ", "self", ".", "complete_init", "(", "cfg_to_load_model", "=", "cfg_to_load_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent._compute_gradient": [[152, 216], ["cagrad.Agent._convert_loss_into_task_loss", "torch.cat", "cagrad.Agent.cagrad_fn", "cagrad.apply_vector_grad_to_parameters", "numpy.random.permutation", "range", "range", "range", "list", "grad.append", "grad.append", "map", "tuple", "tuple", "torch.nn.utils.parameters_to_vector().unsqueeze", "_grad.contiguous", "_grad.contiguous", "torch.autograd.grad", "torch.autograd.grad", "torch.nn.utils.parameters_to_vector"], "methods", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.apply_vector_grad_to_parameters"], ["", "", "def", "_compute_gradient", "(", "\n", "self", ",", "\n", "loss", ":", "TensorType", ",", "# batch x 1", "\n", "parameters", ":", "List", "[", "TensorType", "]", ",", "\n", "step", ":", "int", ",", "\n", "component_names", ":", "List", "[", "str", "]", ",", "\n", "env_metadata", ":", "grad_manipulation_agent", ".", "EnvMetadata", ",", "\n", "retain_graph", ":", "bool", "=", "False", ",", "\n", "allow_unused", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "\n", "#t0 = time.time()", "\n", "        ", "task_loss", "=", "self", ".", "_convert_loss_into_task_loss", "(", "\n", "loss", "=", "loss", ",", "env_metadata", "=", "env_metadata", "\n", ")", "\n", "num_tasks", "=", "task_loss", ".", "shape", "[", "0", "]", "\n", "grad", "=", "[", "]", "\n", "\n", "if", "\"fast\"", "in", "self", ".", "cagrad_method", ":", "\n", "# 2 losses approximation", "\n", "            ", "n", "=", "self", ".", "fast_n", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "num_tasks", ")", "\n", "\n", "losses", "=", "[", "0", "]", "*", "n", "\n", "for", "j", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "                ", "losses", "[", "j", "]", "=", "task_loss", "[", "idx", "[", "j", "]", "]", "\n", "", "for", "j", "in", "range", "(", "n", ",", "num_tasks", ")", ":", "\n", "                ", "losses", "[", "-", "1", "]", "+=", "task_loss", "[", "idx", "[", "j", "]", "]", "\n", "", "losses", "[", "-", "1", "]", "/=", "(", "num_tasks", "-", "n", "+", "1", ")", "\n", "for", "loss", "in", "losses", ":", "\n", "                ", "grad", ".", "append", "(", "\n", "tuple", "(", "\n", "_grad", ".", "contiguous", "(", ")", "\n", "for", "_grad", "in", "torch", ".", "autograd", ".", "grad", "(", "\n", "loss", ",", "\n", "parameters", ",", "\n", "retain_graph", "=", "True", ",", "\n", "allow_unused", "=", "allow_unused", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "index", "in", "range", "(", "num_tasks", ")", ":", "\n", "                ", "grad", ".", "append", "(", "\n", "tuple", "(", "\n", "_grad", ".", "contiguous", "(", ")", "\n", "for", "_grad", "in", "torch", ".", "autograd", ".", "grad", "(", "\n", "task_loss", "[", "index", "]", ",", "\n", "parameters", ",", "\n", "retain_graph", "=", "(", "retain_graph", "or", "index", "!=", "num_tasks", "-", "1", ")", ",", "\n", "allow_unused", "=", "allow_unused", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "\n", "", "", "grad_vec", "=", "torch", ".", "cat", "(", "\n", "list", "(", "\n", "map", "(", "lambda", "x", ":", "torch", ".", "nn", ".", "utils", ".", "parameters_to_vector", "(", "x", ")", ".", "unsqueeze", "(", "0", ")", ",", "grad", ")", "\n", ")", ",", "\n", "dim", "=", "0", ",", "\n", ")", "# num_tasks x dim", "\n", "\n", "regularized_grad", "=", "self", ".", "cagrad_fn", "(", "grad_vec", ",", "num_tasks", ")", "\n", "apply_vector_grad_to_parameters", "(", "regularized_grad", ",", "parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.cagrad": [[217, 257], ["grads.mm().cpu", "grads.mm().cpu.mean", "grads.mm().cpu.mean.mean", "torch.zeros", "range", "torch.softmax", "scale.pow", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD.zero_grad", "torch.softmax", "c.view", "grads.mm", "torch.softmax.t().mm", "obj.item", "obj.item", "torch.zeros.clone", "obj.backward", "torch.optim.SGD.step", "grads.t", "torch.softmax.t().mm().mm", "torch.softmax.t", "torch.diag", "torch.softmax.t().mm", "torch.softmax.t().mm().mm", "torch.softmax.t", "torch.softmax.t().mm", "torch.softmax.t"], "methods", ["None"], ["", "def", "cagrad", "(", "self", ",", "grad_vec", ",", "num_tasks", ")", ":", "\n", "        ", "\"\"\"\n        grad_vec: [num_tasks, dim]\n        \"\"\"", "\n", "grads", "=", "grad_vec", "\n", "\n", "GG", "=", "grads", ".", "mm", "(", "grads", ".", "t", "(", ")", ")", ".", "cpu", "(", ")", "\n", "scale", "=", "(", "torch", ".", "diag", "(", "GG", ")", "+", "1e-4", ")", ".", "sqrt", "(", ")", ".", "mean", "(", ")", "\n", "GG", "=", "GG", "/", "scale", ".", "pow", "(", "2", ")", "\n", "Gg", "=", "GG", ".", "mean", "(", "1", ",", "keepdims", "=", "True", ")", "\n", "gg", "=", "Gg", ".", "mean", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "w", "=", "torch", ".", "zeros", "(", "num_tasks", ",", "1", ",", "requires_grad", "=", "True", ")", "\n", "if", "num_tasks", "==", "50", ":", "\n", "            ", "w_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "w", "]", ",", "lr", "=", "50", ",", "momentum", "=", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "w_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "w", "]", ",", "lr", "=", "25", ",", "momentum", "=", "0.5", ")", "\n", "\n", "", "c", "=", "(", "gg", "+", "1e-4", ")", ".", "sqrt", "(", ")", "*", "self", ".", "cagrad_c", "\n", "\n", "w_best", "=", "None", "\n", "obj_best", "=", "np", ".", "inf", "\n", "for", "i", "in", "range", "(", "21", ")", ":", "\n", "            ", "w_opt", ".", "zero_grad", "(", ")", "\n", "ww", "=", "torch", ".", "softmax", "(", "w", ",", "0", ")", "\n", "obj", "=", "ww", ".", "t", "(", ")", ".", "mm", "(", "Gg", ")", "+", "c", "*", "(", "ww", ".", "t", "(", ")", ".", "mm", "(", "GG", ")", ".", "mm", "(", "ww", ")", "+", "1e-4", ")", ".", "sqrt", "(", ")", "\n", "if", "obj", ".", "item", "(", ")", "<", "obj_best", ":", "\n", "                ", "obj_best", "=", "obj", ".", "item", "(", ")", "\n", "w_best", "=", "w", ".", "clone", "(", ")", "\n", "", "if", "i", "<", "20", ":", "\n", "                ", "obj", ".", "backward", "(", ")", "\n", "w_opt", ".", "step", "(", ")", "\n", "\n", "", "", "ww", "=", "torch", ".", "softmax", "(", "w_best", ",", "0", ")", "\n", "gw_norm", "=", "(", "ww", ".", "t", "(", ")", ".", "mm", "(", "GG", ")", ".", "mm", "(", "ww", ")", "+", "1e-4", ")", ".", "sqrt", "(", ")", "\n", "\n", "lmbda", "=", "c", ".", "view", "(", "-", "1", ")", "/", "(", "gw_norm", "+", "1e-4", ")", "\n", "g", "=", "(", "(", "1", "/", "num_tasks", "+", "ww", "*", "lmbda", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ".", "to", "(", "grads", ".", "device", ")", "*", "grads", ")", ".", "sum", "(", "0", ")", "/", "(", "1", "+", "self", ".", "cagrad_c", "**", "2", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.cagrad_exact": [[258, 279], ["grads.mean", "grads.mm", "tuple", "grads.mm.cpu().numpy", "x_start.copy", "scipy.optimize.minimize", "torch.Tensor().to", "gw.norm", "grads.t", "numpy.ones", "grads.mm.cpu", "torch.Tensor", "sum", "torch.Tensor().to.view", "x.reshape().dot().dot", "grads.mean.norm", "x_start.copy.reshape", "numpy.sqrt", "x.reshape().dot", "x.reshape().dot().dot", "x.reshape", "x.reshape", "x.reshape().dot", "x.reshape"], "methods", ["None"], ["", "def", "cagrad_exact", "(", "self", ",", "grad_vec", ",", "num_tasks", ")", ":", "\n", "        ", "grads", "=", "grad_vec", "/", "100.", "\n", "g0", "=", "grads", ".", "mean", "(", "0", ")", "\n", "GG", "=", "grads", ".", "mm", "(", "grads", ".", "t", "(", ")", ")", "\n", "x_start", "=", "np", ".", "ones", "(", "num_tasks", ")", "/", "num_tasks", "\n", "bnds", "=", "tuple", "(", "(", "0", ",", "1", ")", "for", "x", "in", "x_start", ")", "\n", "cons", "=", "(", "{", "'type'", ":", "'eq'", ",", "'fun'", ":", "lambda", "x", ":", "1", "-", "sum", "(", "x", ")", "}", ")", "\n", "A", "=", "GG", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "b", "=", "x_start", ".", "copy", "(", ")", "\n", "c", "=", "(", "self", ".", "cagrad_c", "*", "g0", ".", "norm", "(", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "def", "objfn", "(", "x", ")", ":", "\n", "            ", "return", "(", "x", ".", "reshape", "(", "1", ",", "num_tasks", ")", ".", "dot", "(", "A", ")", ".", "dot", "(", "b", ".", "reshape", "(", "num_tasks", ",", "1", ")", ")", "+", "c", "*", "np", ".", "sqrt", "(", "x", ".", "reshape", "(", "1", ",", "num_tasks", ")", ".", "dot", "(", "A", ")", ".", "dot", "(", "x", ".", "reshape", "(", "num_tasks", ",", "1", ")", ")", "+", "1e-8", ")", ")", ".", "sum", "(", ")", "\n", "", "res", "=", "minimize", "(", "objfn", ",", "x_start", ",", "bounds", "=", "bnds", ",", "constraints", "=", "cons", ")", "\n", "w_cpu", "=", "res", ".", "x", "\n", "ww", "=", "torch", ".", "Tensor", "(", "w_cpu", ")", ".", "to", "(", "grad_vec", ".", "device", ")", "\n", "gw", "=", "(", "grads", "*", "ww", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "sum", "(", "0", ")", "\n", "gw_norm", "=", "gw", ".", "norm", "(", ")", "\n", "lmbda", "=", "c", "/", "(", "gw_norm", "+", "1e-4", ")", "\n", "g", "=", "(", "g0", "+", "lmbda", "*", "gw", ")", "/", "(", "1", "+", "lmbda", ")", "\n", "return", "g", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.Agent.cagrad_fast": [[280, 304], ["grads.mm", "tuple", "grads.mm.cpu().numpy", "scipy.optimize.minimize", "torch.Tensor().to", "numpy.sqrt().item", "grads.t", "numpy.ones", "grads.mm.cpu", "torch.Tensor", "numpy.sqrt", "sum", "torch.Tensor().to.view", "x.reshape().dot().dot", "w_cpu.reshape().dot().dot", "cagrad.Agent.fast_w.view", "cagrad.Agent.fast_w.view().mm().mm", "cagrad.Agent.fast_w_numpy.reshape", "numpy.sqrt", "w_cpu.reshape", "torch.Tensor().to.view", "cagrad.Agent.fast_w.view", "x.reshape().dot", "w_cpu.reshape().dot", "cagrad.Agent.fast_w.view().mm", "x.reshape().dot().dot", "x.reshape", "x.reshape", "w_cpu.reshape", "cagrad.Agent.fast_w.view", "x.reshape().dot", "x.reshape"], "methods", ["None"], ["", "def", "cagrad_fast", "(", "self", ",", "grad_vec", ",", "num_tasks", ")", ":", "\n", "        ", "n", "=", "self", ".", "fast_n", "\n", "scale", "=", "100.", "\n", "grads", "=", "grad_vec", "/", "scale", "\n", "GG", "=", "grads", ".", "mm", "(", "grads", ".", "t", "(", ")", ")", "\n", "g0_norm", "=", "(", "self", ".", "fast_w", ".", "view", "(", "1", ",", "-", "1", ")", ".", "mm", "(", "GG", ")", ".", "mm", "(", "self", ".", "fast_w", ".", "view", "(", "-", "1", ",", "1", ")", ")", "+", "1e-8", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "\n", "x_start", "=", "np", ".", "ones", "(", "n", ")", "/", "n", "\n", "bnds", "=", "tuple", "(", "(", "0", ",", "1", ")", "for", "x", "in", "x_start", ")", "\n", "cons", "=", "(", "{", "'type'", ":", "'eq'", ",", "'fun'", ":", "lambda", "x", ":", "1", "-", "sum", "(", "x", ")", "}", ")", "\n", "A", "=", "GG", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "c", "=", "self", ".", "cagrad_c", "*", "g0_norm", "\n", "def", "objfn", "(", "x", ")", ":", "\n", "            ", "return", "(", "x", ".", "reshape", "(", "1", ",", "n", ")", ".", "dot", "(", "A", ")", ".", "dot", "(", "self", ".", "fast_w_numpy", ".", "reshape", "(", "n", ",", "1", ")", ")", "+", "c", "*", "np", ".", "sqrt", "(", "x", ".", "reshape", "(", "1", ",", "n", ")", ".", "dot", "(", "A", ")", ".", "dot", "(", "x", ".", "reshape", "(", "n", ",", "1", ")", ")", "+", "1e-8", ")", ")", ".", "sum", "(", ")", "\n", "", "res", "=", "minimize", "(", "objfn", ",", "x_start", ",", "bounds", "=", "bnds", ",", "constraints", "=", "cons", ")", "\n", "w_cpu", "=", "res", ".", "x", "\n", "ww", "=", "torch", ".", "Tensor", "(", "w_cpu", ")", ".", "to", "(", "grad_vec", ".", "device", ")", "\n", "gw", "=", "(", "grads", "*", "ww", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "sum", "(", "0", ")", "\n", "gw_norm", "=", "np", ".", "sqrt", "(", "w_cpu", ".", "reshape", "(", "1", ",", "n", ")", ".", "dot", "(", "A", ")", ".", "dot", "(", "w_cpu", ".", "reshape", "(", "n", ",", "1", ")", ")", "+", "1e-8", ")", ".", "item", "(", ")", "\n", "lmbda", "=", "c", "/", "(", "gw_norm", "+", "1e-4", ")", "\n", "g", "=", "(", "(", "self", ".", "fast_w", ".", "view", "(", "-", "1", ",", "1", ")", "+", "ww", ".", "view", "(", "-", "1", ",", "1", ")", "*", "lmbda", ")", "*", "grads", ")", ".", "sum", "(", "0", ")", "\n", "g", "=", "g", "/", "(", "1", "+", "self", ".", "cagrad_c", ")", "*", "scale", "\n", "return", "g", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad._check_param_device": [[16, 48], ["param.get_device", "TypeError", "param.get_device"], "function", ["None"], ["def", "_check_param_device", "(", "param", ":", "TensorType", ",", "old_param_device", ":", "Optional", "[", "int", "]", ")", "->", "int", ":", "\n", "    ", "\"\"\"This helper function is to check if the parameters are located\n        in the same device. Currently, the conversion between model parameters\n        and single vector form is not supported for multiple allocations,\n        e.g. parameters in different GPUs, or mixture of CPU/GPU.\n\n        The implementation is taken from: https://github.com/pytorch/pytorch/blob/22a34bcf4e5eaa348f0117c414c3dd760ec64b13/torch/nn/utils/convert_parameters.py#L57\n\n    Args:\n        param ([TensorType]): a Tensor of a parameter of a model.\n        old_param_device ([int]): the device where the first parameter\n            of a model is allocated.\n\n    Returns:\n        old_param_device (int): report device for the first time\n\n    \"\"\"", "\n", "# Meet the first parameter", "\n", "if", "old_param_device", "is", "None", ":", "\n", "        ", "old_param_device", "=", "param", ".", "get_device", "(", ")", "if", "param", ".", "is_cuda", "else", "-", "1", "\n", "", "else", ":", "\n", "        ", "warn", "=", "False", "\n", "if", "param", ".", "is_cuda", ":", "# Check if in same GPU", "\n", "            ", "warn", "=", "param", ".", "get_device", "(", ")", "!=", "old_param_device", "\n", "", "else", ":", "# Check if in CPU", "\n", "            ", "warn", "=", "old_param_device", "!=", "-", "1", "\n", "", "if", "warn", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Found two parameters on different devices, \"", "\n", "\"this is currently not supported.\"", "\n", ")", "\n", "", "", "return", "old_param_device", "\n", "\n"]], "home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad.apply_vector_grad_to_parameters": [[50, 86], ["isinstance", "TypeError", "cagrad._check_param_device", "param.numel", "torch.typename", "vec[].view_as", "vec[].view_as"], "function", ["home.repos.pwc.inspect_result.cranial-xix_cagrad.mtrl_files.cagrad._check_param_device"], ["", "def", "apply_vector_grad_to_parameters", "(", "\n", "vec", ":", "TensorType", ",", "parameters", ":", "Iterable", "[", "TensorType", "]", ",", "accumulate", ":", "bool", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Apply vector gradients to the parameters\n\n    Args:\n        vec (TensorType): a single vector represents the gradients of a model.\n        parameters (Iterable[TensorType]): an iterator of Tensors that are the\n            parameters of a model.\n    \"\"\"", "\n", "# Ensure vec of type Tensor", "\n", "if", "not", "isinstance", "(", "vec", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "\"expected torch.Tensor, but got: {}\"", ".", "format", "(", "torch", ".", "typename", "(", "vec", ")", ")", "\n", ")", "\n", "# Flag for the device where the parameter is located", "\n", "", "param_device", "=", "None", "\n", "\n", "# Pointer for slicing the vector for each parameter", "\n", "pointer", "=", "0", "\n", "for", "param", "in", "parameters", ":", "\n", "# Ensure the parameters are located in the same device", "\n", "        ", "param_device", "=", "_check_param_device", "(", "param", ",", "param_device", ")", "\n", "\n", "# The length of the parameter", "\n", "num_param", "=", "param", ".", "numel", "(", ")", "\n", "# Slice the vector, reshape it, and replace the old grad of the parameter", "\n", "if", "accumulate", ":", "\n", "            ", "param", ".", "grad", "=", "(", "\n", "param", ".", "grad", "+", "vec", "[", "pointer", ":", "pointer", "+", "num_param", "]", ".", "view_as", "(", "param", ")", ".", "data", "\n", ")", "\n", "", "else", ":", "\n", "            ", "param", ".", "grad", "=", "vec", "[", "pointer", ":", "pointer", "+", "num_param", "]", ".", "view_as", "(", "param", ")", ".", "data", "\n", "\n", "# Increment the pointer", "\n", "", "pointer", "+=", "num_param", "\n", "\n"]]}