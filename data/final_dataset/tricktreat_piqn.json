{"home.repos.pwc.inspect_result.tricktreat_piqn.None.piqn.__train": [[12, 16], ["piqn.piqn_trainer.PIQNTrainer", "piqn.piqn_trainer.PIQNTrainer.train"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.train"], ["def", "__train", "(", "run_args", ")", ":", "\n", "    ", "trainer", "=", "PIQNTrainer", "(", "run_args", ")", "\n", "trainer", ".", "train", "(", "train_path", "=", "run_args", ".", "train_path", ",", "valid_path", "=", "run_args", ".", "valid_path", ",", "\n", "types_path", "=", "run_args", ".", "types_path", ",", "input_reader_cls", "=", "input_reader", ".", "JsonInputReader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.piqn._train": [[18, 21], ["args.train_argparser", "config_reader.process_configs"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.None.args.train_argparser", "home.repos.pwc.inspect_result.tricktreat_piqn.None.config_reader.process_configs"], ["", "def", "_train", "(", ")", ":", "\n", "    ", "arg_parser", "=", "train_argparser", "(", ")", "\n", "process_configs", "(", "target", "=", "__train", ",", "arg_parser", "=", "arg_parser", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.piqn.__eval": [[23, 27], ["piqn.piqn_trainer.PIQNTrainer", "piqn.piqn_trainer.PIQNTrainer.eval"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.eval"], ["", "def", "__eval", "(", "run_args", ")", ":", "\n", "    ", "trainer", "=", "PIQNTrainer", "(", "run_args", ")", "\n", "trainer", ".", "eval", "(", "dataset_path", "=", "run_args", ".", "dataset_path", ",", "types_path", "=", "run_args", ".", "types_path", ",", "\n", "input_reader_cls", "=", "input_reader", ".", "JsonInputReader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.piqn._eval": [[29, 32], ["args.eval_argparser", "config_reader.process_configs"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.None.args.eval_argparser", "home.repos.pwc.inspect_result.tricktreat_piqn.None.config_reader.process_configs"], ["", "def", "_eval", "(", ")", ":", "\n", "    ", "arg_parser", "=", "eval_argparser", "(", ")", "\n", "process_configs", "(", "target", "=", "__eval", ",", "arg_parser", "=", "arg_parser", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.config_reader.process_configs": [[13, 121], ["arg_parser.parse_known_args", "multiprocessing.get_context", "config_reader._yield_configs", "list", "list", "map", "map", "random.randint", "target", "list", "print", "print", "print", "mp.get_context.Process", "subprocess.append", "ctx.Process.start", "time.sleep", "os.environ[].split", "len", "print", "time.sleep", "print", "print", "str", "range", "time.sleep", "print", "gpu_just_used.append", "gpu_queue.remove", "print", "print", "mp.get_context.Process", "subprocess.append", "ctx.Process.start", "time.sleep", "x.join", "len", "len", "set", "set", "pynvml.nvmlDeviceGetHandleByIndex", "pynvml.nvmlDeviceGetMemoryInfo", "len", "print", "time.sleep", "print", "map", "random.randint", "gpu_just_used.append", "print", "mp.get_context.Process", "subprocess.append", "ctx.Process.start", "random.sample", "gpu_queue.append", "len", "gpu_queue.extend", "gpu_queue.extend"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.None.config_reader._yield_configs"], ["def", "process_configs", "(", "target", ",", "arg_parser", ")", ":", "\n", "    ", "args", ",", "_", "=", "arg_parser", ".", "parse_known_args", "(", ")", "\n", "ctx", "=", "mp", ".", "get_context", "(", "'fork'", ")", "\n", "\n", "subprocess", "=", "[", "]", "\n", "if", "\"ALL_GPU\"", "in", "os", ".", "environ", ":", "\n", "        ", "all_gpu_queue", "=", "list", "(", "map", "(", "int", ",", "os", ".", "environ", "[", "\"ALL_GPU\"", "]", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "all_gpu_queue", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", "\n", "", "gpu_queue", "=", "[", "]", "\n", "waittime", "=", "240", "\n", "gpu_just_used", "=", "[", "]", "\n", "for", "run_args", ",", "_run_config", ",", "_run_repeat", "in", "_yield_configs", "(", "arg_parser", ",", "args", ")", ":", "\n", "        ", "if", "\"eval\"", "in", "run_args", ".", "label", ":", "\n", "            ", "waittime", "=", "90", "\n", "if", "\"genia\"", "in", "run_args", ".", "dataset_path", ":", "\n", "                ", "waittime", "=", "180", "\n", "", "if", "\"fewnerd\"", "in", "run_args", ".", "dataset_path", ":", "\n", "                ", "waittime", "=", "240", "\n", "", "if", "\"ontonotes\"", "in", "run_args", ".", "dataset_path", ":", "\n", "                ", "waittime", "=", "360", "\n", "", "if", "\"msra\"", "in", "run_args", ".", "dataset_path", ":", "\n", "                ", "waittime", "=", "300", "\n", "\n", "", "", "if", "run_args", ".", "seed", "==", "-", "1", ":", "\n", "            ", "run_args", ".", "seed", "=", "random", ".", "randint", "(", "0", ",", "1000", ")", "\n", "# debug", "\n", "", "if", "run_args", ".", "debug", ":", "\n", "            ", "target", "(", "run_args", ")", "\n", "", "while", "not", "run_args", ".", "cpu", "and", "(", "len", "(", "gpu_queue", ")", "==", "0", "or", "len", "(", "gpu_queue", ")", "<", "run_args", ".", "world_size", ")", ":", "\n", "            ", "gpu_queue", "=", "[", "]", "\n", "candidate_gpu", "=", "list", "(", "set", "(", "all_gpu_queue", ")", "-", "set", "(", "gpu_just_used", ")", ")", "\n", "# print(candidate_gpu)", "\n", "for", "index", "in", "candidate_gpu", ":", "\n", "                ", "try", ":", "\n", "                    ", "handle", "=", "pynvml", ".", "nvmlDeviceGetHandleByIndex", "(", "index", ")", "\n", "meminfo", "=", "pynvml", ".", "nvmlDeviceGetMemoryInfo", "(", "handle", ")", "\n", "if", "run_args", ".", "entity_aware_attention", ":", "\n", "                        ", "if", "meminfo", ".", "free", "/", "1024", "/", "1024", ">", "36000", ":", "\n", "                            ", "gpu_queue", ".", "append", "(", "index", ")", "\n", "# if meminfo.total/1024/1024<1500:", "\n", "#     gpu_queue.append(index)", "\n", "", "", "elif", "\"eval\"", "in", "run_args", ".", "label", "or", "(", "\"base\"", "in", "run_args", ".", "model_path", ")", ":", "\n", "                        ", "if", "meminfo", ".", "free", "/", "1024", "/", "1024", ">", "12000", ":", "\n", "                            ", "gpu_queue", ".", "extend", "(", "[", "index", "]", "*", "(", "meminfo", ".", "free", "//", "1024", "//", "1024", "//", "12000", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "if", "meminfo", ".", "free", "/", "1024", "/", "1024", ">", "24500", ":", "\n", "                            ", "gpu_queue", ".", "extend", "(", "[", "index", "]", "*", "(", "meminfo", ".", "free", "//", "1024", "//", "1024", "//", "24000", ")", ")", "\n", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "pass", "\n", "", "", "print", "(", "gpu_queue", ")", "\n", "if", "len", "(", "gpu_queue", ")", "<", "run_args", ".", "world_size", ":", "\n", "                ", "print", "(", "f\"Need {run_args.world_size} GPUs for DDP Training, but only {len(gpu_queue)} free devices: {gpu_queue}. Waiting for Free GPU ......\"", ")", "\n", "time", ".", "sleep", "(", "waittime", ")", "\n", "gpu_just_used", "=", "[", "]", "\n", "", "elif", "len", "(", "gpu_queue", ")", "==", "0", ":", "\n", "                ", "print", "(", "\"Need 1 GPU for Normal Training, All are busy. Waiting for Free GPU ......\"", ")", "\n", "time", ".", "sleep", "(", "waittime", ")", "\n", "gpu_just_used", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Avaliable devices: \"", ",", "gpu_queue", ")", "\n", "# gpu_just_used = []", "\n", "# CPU Training:", "\n", "", "", "if", "run_args", ".", "cpu", ":", "\n", "                ", "print", "(", "\"########### Using CPU Training ###########\"", ")", "\n", "print", "(", "\"Using Random Seed\"", ",", "run_args", ".", "seed", ")", "\n", "p", "=", "ctx", ".", "Process", "(", "target", "=", "target", ",", "args", "=", "(", "run_args", ",", ")", ")", "\n", "subprocess", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "# GPU Training", "\n", "", "else", ":", "\n", "# GPU DDP Training", "\n", "            ", "if", "run_args", ".", "world_size", "!=", "-", "1", ":", "\n", "                ", "print", "(", "\"########### Using GPU DDP Training ###########\"", ")", "\n", "print", "(", "\"Using devices: \"", ",", "gpu_queue", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "\",\"", ".", "join", "(", "map", "(", "str", ",", "gpu_queue", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "random", ".", "randint", "(", "10000", ",", "20000", ")", ")", "\n", "\n", "for", "local_rank", "in", "range", "(", "run_args", ".", "world_size", ")", ":", "\n", "                    ", "gpu_just_used", ".", "append", "(", "gpu_queue", "[", "0", "]", ")", "\n", "gpu_queue", "=", "gpu_queue", "[", "1", ":", "]", "\n", "run_args", ".", "local_rank", "=", "local_rank", "\n", "print", "(", "\"Using Random Seed\"", ",", "run_args", ".", "seed", ")", "\n", "p", "=", "ctx", ".", "Process", "(", "target", "=", "target", ",", "args", "=", "(", "run_args", ",", ")", ")", "\n", "subprocess", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "", "time", ".", "sleep", "(", "1", ")", "\n", "# GPU Normal Training", "\n", "", "if", "run_args", ".", "world_size", "==", "-", "1", ":", "\n", "                ", "print", "(", "\"########### Using GPU Normal Training ###########\"", ")", "\n", "device_id", "=", "random", ".", "sample", "(", "gpu_queue", ",", "k", "=", "1", ")", "[", "0", "]", "\n", "# gpu_just_used.append(device_id)", "\n", "# gpu_queue.remove(device_id)", "\n", "# if run_args.device_id == -1:", "\n", "run_args", ".", "device_id", "=", "device_id", "\n", "gpu_just_used", ".", "append", "(", "run_args", ".", "device_id", ")", "\n", "gpu_queue", ".", "remove", "(", "run_args", ".", "device_id", ")", "\n", "print", "(", "\"Using devices: \"", ",", "run_args", ".", "device_id", ")", "\n", "print", "(", "\"Using Random Seed\"", ",", "run_args", ".", "seed", ")", "\n", "p", "=", "ctx", ".", "Process", "(", "target", "=", "target", ",", "args", "=", "(", "run_args", ",", ")", ")", "\n", "subprocess", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "", "", "", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "join", "(", ")", ",", "subprocess", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.config_reader._read_config": [[122, 153], ["open().readlines", "dict", "line.strip", "line.strip.startswith", "runs.append", "open", "line.strip.startswith", "line.strip.endswith", "int", "line.strip.split", "runs.append", "dict", "key.strip", "value.strip"], "function", ["None"], ["", "def", "_read_config", "(", "path", ")", ":", "\n", "    ", "lines", "=", "open", "(", "path", ")", ".", "readlines", "(", ")", "\n", "\n", "runs", "=", "[", "]", "\n", "run", "=", "[", "1", ",", "dict", "(", ")", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "stripped_line", "=", "line", ".", "strip", "(", ")", "\n", "\n", "# continue in case of comment", "\n", "if", "stripped_line", ".", "startswith", "(", "'#'", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "not", "stripped_line", ":", "\n", "            ", "if", "run", "[", "1", "]", ":", "\n", "                ", "runs", ".", "append", "(", "run", ")", "\n", "\n", "", "run", "=", "[", "1", ",", "dict", "(", ")", "]", "\n", "continue", "\n", "\n", "", "if", "stripped_line", ".", "startswith", "(", "'['", ")", "and", "stripped_line", ".", "endswith", "(", "']'", ")", ":", "\n", "            ", "repeat", "=", "int", "(", "stripped_line", "[", "1", ":", "-", "1", "]", ")", "\n", "run", "[", "0", "]", "=", "repeat", "\n", "", "else", ":", "\n", "            ", "key", ",", "value", "=", "stripped_line", ".", "split", "(", "'='", ")", "\n", "key", ",", "value", "=", "(", "key", ".", "strip", "(", ")", ",", "value", ".", "strip", "(", ")", ")", "\n", "run", "[", "1", "]", "[", "key", "]", "=", "value", "\n", "\n", "", "", "if", "run", "[", "1", "]", ":", "\n", "        ", "runs", ".", "append", "(", "run", ")", "\n", "\n", "", "return", "runs", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.config_reader._convert_config": [[155, 169], ["config.items", "v[].replace.startswith", "v[].replace", "v[].replace.lower", "config_list.append", "v[].replace.lower", "config_list.extend", "v[].replace.split"], "function", ["None"], ["", "def", "_convert_config", "(", "config", ")", ":", "\n", "    ", "config_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "==", "\"config\"", ":", "\n", "            ", "continue", "\n", "", "if", "v", "==", "\"None\"", ":", "\n", "            ", "continue", "\n", "", "if", "v", ".", "startswith", "(", "\"[\"", ")", ":", "\n", "            ", "v", "=", "v", "[", "1", ":", "-", "1", "]", ".", "replace", "(", "\",\"", ",", "\"\"", ")", "\n", "", "if", "v", ".", "lower", "(", ")", "==", "'true'", ":", "\n", "            ", "config_list", ".", "append", "(", "'--'", "+", "k", ")", "\n", "", "elif", "v", ".", "lower", "(", ")", "!=", "'false'", ":", "\n", "            ", "config_list", ".", "extend", "(", "[", "'--'", "+", "k", "]", "+", "v", ".", "split", "(", "' '", ")", ")", "\n", "", "", "return", "config_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.config_reader._yield_configs": [[171, 464], ["config_reader._read_config", "print", "print", "print", "copy.deepcopy", "copy.deepcopy", "config_reader._convert_config", "arg_parser.parse_args", "label.startswith", "sorted", "run_args_list.append", "print", "print", "print", "range", "os.walk", "_print", "_print", "print", "re.match().group", "json.load", "copy.deepcopy", "json.load", "args_dict[].replace().replace", "open", "args_dict[].replace", "args_dict[].replace", "numpy.arange", "numpy.arange", "numpy.arange", "run_args_list.append", "open", "args_dict[].split", "numpy.arange", "numpy.arange", "numpy.arange", "run_args_list.append", "re.match", "dirpath.split", "copy.deepcopy", "run_args_list.append", "copy.deepcopy", "run_args_list.append", "numpy.arange", "copy.deepcopy", "args_dict[].replace", "dirpath.split", "copy.deepcopy", "run_args_list.append", "copy.deepcopy", "run_args_list.append", "numpy.arange", "copy.deepcopy", "dirpath.split", "copy.deepcopy", "run_args_list.append", "dirpath.split", "copy.deepcopy", "run_args_list.append"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.None.config_reader._read_config", "home.repos.pwc.inspect_result.tricktreat_piqn.None.config_reader._convert_config"], ["", "def", "_yield_configs", "(", "arg_parser", ",", "args", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "_print", "=", "(", "lambda", "x", ":", "print", "(", "x", ")", ")", "if", "verbose", "else", "lambda", "x", ":", "x", "\n", "\n", "if", "args", ".", "config", ":", "\n", "        ", "config", "=", "_read_config", "(", "args", ".", "config", ")", "\n", "\n", "for", "run_repeat", ",", "run_config", "in", "config", ":", "\n", "            ", "print", "(", "\"-\"", "*", "50", ")", "\n", "print", "(", "\"Config:\"", ")", "\n", "# print(run_config)", "\n", "\n", "args_copy", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "run_config", "=", "copy", ".", "deepcopy", "(", "run_config", ")", "\n", "config_list", "=", "_convert_config", "(", "run_config", ")", "\n", "run_args", "=", "arg_parser", ".", "parse_args", "(", "config_list", ",", "namespace", "=", "args_copy", ")", "\n", "\n", "\n", "run_args_list", "=", "[", "]", "\n", "# batch eval", "\n", "label", "=", "run_args", ".", "label", "\n", "if", "label", ".", "startswith", "(", "\"batch_eval_flag\"", ")", ":", "\n", "                ", "save_path", "=", "run_args", ".", "model_path", "\n", "# save_model_type = run_args.save_model_type", "\n", "for", "dirpath", ",", "dirnames", ",", "filenames", "in", "sorted", "(", "os", ".", "walk", "(", "save_path", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ":", "\n", "                    ", "if", "\"_model\"", "in", "dirpath", "and", "\"xlmr\"", "not", "in", "dirpath", "and", "\"/bn/\"", "not", "in", "dirpath", ":", "\n", "                        ", "print", "(", "dirpath", ")", "\n", "if", "label", "==", "\"batch_eval_flag_multilingual\"", ":", "\n", "                            ", "dataset_name", "=", "\"semeval\"", "\n", "lans", "=", "[", "\"bn\"", ",", "\"de\"", ",", "\"en\"", ",", "\"es\"", ",", "\"fa\"", ",", "\"hi\"", ",", "\"ko\"", ",", "\"nl\"", ",", "\"ru\"", ",", "\"tr\"", ",", "\"zh\"", ",", "\"mix\"", "]", "\n", "\n", "for", "lan", "in", "lans", ":", "\n", "                                    ", "args_path", "=", "\"/\"", ".", "join", "(", "dirpath", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "1", "]", ")", "+", "\"/args.json\"", "\n", "args_dict", "=", "json", ".", "load", "(", "open", "(", "args_path", ")", ")", "\n", "orig_name", "=", "args_dict", "[", "\"train_path\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "run_args", ".", "label", "=", "dataset_name", "+", "f\"_{lan}_eval\"", "\n", "run_args", ".", "dataset_path", "=", "args_dict", "[", "\"train_path\"", "]", ".", "replace", "(", "\"train\"", ",", "\"dev\"", ")", ".", "replace", "(", "\"/\"", "+", "orig_name", ",", "\"/\"", "+", "lan", ")", "\n", "run_args", ".", "model_path", "=", "dirpath", "\n", "run_args", ".", "tokenizer_path", "=", "dirpath", "\n", "run_args", ".", "types_path", "=", "args_dict", "[", "\"types_path\"", "]", "\n", "# run_args.log_path = args_dict[\"log_path\"]", "\n", "run_args", ".", "log_path", "=", "\"/\"", ".", "join", "(", "dirpath", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "3", "]", ")", "\n", "\n", "run_args", ".", "seed", "=", "args_dict", "[", "\"seed\"", "]", "\n", "run_args", ".", "model_type", "=", "args_dict", "[", "\"model_type\"", "]", "\n", "run_args", ".", "weight_decay", "=", "args_dict", "[", "\"weight_decay\"", "]", "\n", "# run_args.no_overlapping =args_dict[\"no_overlapping\"]", "\n", "# run_args.no_partial_overlapping =args_dict[\"no_partial_overlapping\"]", "\n", "# run_args.no_duplicate =args_dict[\"no_duplicate\"]", "\n", "\n", "if", "run_args", ".", "eval_batch_size", "==", "-", "1", ":", "\n", "                                        ", "run_args", ".", "eval_batch_size", "=", "args_dict", "[", "\"eval_batch_size\"", "]", "\n", "\n", "", "run_args", ".", "prop_drop", "=", "args_dict", "[", "\"prop_drop\"", "]", "\n", "\n", "run_args", ".", "pos_size", "=", "args_dict", "[", "\"pos_size\"", "]", "\n", "run_args", ".", "char_lstm_layers", "=", "args_dict", "[", "\"char_lstm_layers\"", "]", "\n", "run_args", ".", "char_lstm_drop", "=", "args_dict", "[", "\"char_lstm_drop\"", "]", "\n", "run_args", ".", "char_size", "=", "args_dict", "[", "\"char_size\"", "]", "\n", "run_args", ".", "use_pos", "=", "args_dict", "[", "\"use_pos\"", "]", "\n", "run_args", ".", "use_glove", "=", "args_dict", "[", "\"use_glove\"", "]", "\n", "run_args", ".", "use_char_lstm", "=", "args_dict", "[", "\"use_char_lstm\"", "]", "\n", "run_args", ".", "pool_type", "=", "args_dict", "[", "\"pool_type\"", "]", "\n", "run_args", ".", "wordvec_path", "=", "args_dict", "[", "\"wordvec_path\"", "]", "\n", "run_args", ".", "use_masked_lm", "=", "args_dict", "[", "\"use_masked_lm\"", "]", "\n", "run_args", ".", "repeat_gt_entities", "=", "args_dict", "[", "\"repeat_gt_entities\"", "]", "\n", "\n", "if", "\"use_aux_loss\"", "in", "args_dict", ":", "\n", "                                        ", "run_args", ".", "use_aux_loss", "=", "args_dict", "[", "\"use_aux_loss\"", "]", "\n", "", "else", ":", "\n", "                                        ", "run_args", ".", "use_aux_loss", "=", "True", "\n", "\n", "", "if", "\"use_lstm\"", "in", "args_dict", ":", "\n", "                                        ", "run_args", ".", "use_lstm", "=", "args_dict", "[", "\"use_lstm\"", "]", "\n", "", "else", ":", "\n", "                                        ", "run_args", ".", "use_lstm", "=", "True", "\n", "\n", "\n", "", "run_args", ".", "nil_weight", "=", "args_dict", "[", "\"nil_weight\"", "]", "\n", "# run_args.cls_threshold=args_dict[\"cls_threshold\"]", "\n", "# run_args.boundary_threshold=args_dict[\"boundary_threshold\"]", "\n", "\n", "\n", "run_args", ".", "match_boundary_weight", "=", "args_dict", "[", "\"match_boundary_weight\"", "]", "\n", "run_args", ".", "match_class_weight", "=", "args_dict", "[", "\"match_class_weight\"", "]", "\n", "run_args", ".", "loss_boundary_weight", "=", "args_dict", "[", "\"loss_boundary_weight\"", "]", "\n", "run_args", ".", "loss_class_weight", "=", "args_dict", "[", "\"loss_class_weight\"", "]", "\n", "run_args", ".", "match_solver", "=", "args_dict", "[", "\"match_solver\"", "]", "\n", "run_args", ".", "share_query_pos", "=", "args_dict", "[", "\"share_query_pos\"", "]", "\n", "run_args", ".", "use_token_level_encoder", "=", "args_dict", "[", "\"use_token_level_encoder\"", "]", "\n", "run_args", ".", "num_token_entity_encoderlayer", "=", "args_dict", "[", "\"num_token_entity_encoderlayer\"", "]", "\n", "run_args", ".", "use_entity_attention", "=", "args_dict", "[", "\"use_entity_attention\"", "]", "\n", "\n", "\n", "\n", "\n", "run_args", ".", "entity_queries_num", "=", "args_dict", "[", "\"entity_queries_num\"", "]", "\n", "run_args", ".", "entity_emb_size", "=", "args_dict", "[", "\"entity_emb_size\"", "]", "\n", "run_args", ".", "mask_ent2ent", "=", "args_dict", "[", "\"mask_ent2ent\"", "]", "\n", "run_args", ".", "mask_ent2tok", "=", "args_dict", "[", "\"mask_ent2tok\"", "]", "\n", "run_args", ".", "mask_tok2ent", "=", "args_dict", "[", "\"mask_tok2ent\"", "]", "\n", "run_args", ".", "mask_entself", "=", "args_dict", "[", "\"mask_entself\"", "]", "\n", "\n", "if", "\"word_mask_ent2ent\"", "in", "args_dict", ":", "\n", "                                        ", "run_args", ".", "word_mask_ent2ent", "=", "args_dict", "[", "\"word_mask_ent2ent\"", "]", "\n", "run_args", ".", "word_mask_ent2tok", "=", "args_dict", "[", "\"word_mask_ent2tok\"", "]", "\n", "run_args", ".", "word_mask_tok2ent", "=", "args_dict", "[", "\"word_mask_tok2ent\"", "]", "\n", "run_args", ".", "word_mask_entself", "=", "args_dict", "[", "\"word_mask_entself\"", "]", "\n", "", "else", ":", "\n", "                                        ", "run_args", ".", "word_mask_entself", "=", "True", "\n", "\n", "", "if", "\"lstm_layers\"", "in", "args_dict", ":", "\n", "                                        ", "run_args", ".", "lstm_layers", "=", "args_dict", "[", "\"lstm_layers\"", "]", "\n", "\n", "\n", "", "run_args", ".", "entity_aware_attention", "=", "args_dict", "[", "\"entity_aware_attention\"", "]", "\n", "run_args", ".", "entity_aware_selfout", "=", "args_dict", "[", "\"entity_aware_selfout\"", "]", "\n", "run_args", ".", "entity_aware_intermediate", "=", "args_dict", "[", "\"entity_aware_intermediate\"", "]", "\n", "run_args", ".", "entity_aware_output", "=", "args_dict", "[", "\"entity_aware_output\"", "]", "\n", "run_args", ".", "use_entity_pos", "=", "args_dict", "[", "\"use_entity_pos\"", "]", "\n", "if", "\"use_entity_common_embedding\"", "in", "args_dict", ":", "\n", "                                        ", "run_args", ".", "use_entity_common_embedding", "=", "args_dict", "[", "\"use_entity_common_embedding\"", "]", "\n", "\n", "", "run_args", ".", "split_epoch", "=", "args_dict", "[", "\"split_epoch\"", "]", "\n", "run_args", ".", "epochs", "=", "args_dict", "[", "\"epochs\"", "]", "\n", "\n", "if", "run_args", ".", "cls_threshold", "==", "-", "1", "and", "run_args", ".", "boundary_threshold", "!=", "-", "1", ":", "\n", "                                        ", "for", "cls_threshold", "in", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ":", "\n", "                                            ", "run_args_instance", "=", "copy", ".", "deepcopy", "(", "run_args", ")", "\n", "run_args_instance", ".", "cls_threshold", "=", "cls_threshold", "\n", "run_args_list", ".", "append", "(", "run_args_instance", ")", "\n", "\n", "\n", "", "", "if", "run_args", ".", "boundary_threshold", "==", "-", "1", "and", "run_args", ".", "cls_threshold", "!=", "-", "1", ":", "\n", "                                        ", "for", "boundary_threshold", "in", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ":", "\n", "                                            ", "run_args_instance", "=", "copy", ".", "deepcopy", "(", "run_args", ")", "\n", "run_args_instance", ".", "boundary_threshold", "=", "boundary_threshold", "\n", "run_args_list", ".", "append", "(", "run_args_instance", ")", "\n", "\n", "", "", "if", "run_args", ".", "cls_threshold", "==", "-", "1", "and", "run_args", ".", "boundary_threshold", "==", "-", "1", ":", "\n", "                                        ", "for", "cls_threshold", "in", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ":", "\n", "                                            ", "for", "boundary_threshold", "in", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ":", "\n", "                                                ", "run_args_instance", "=", "copy", ".", "deepcopy", "(", "run_args", ")", "\n", "run_args_instance", ".", "cls_threshold", "=", "cls_threshold", "\n", "run_args_instance", ".", "boundary_threshold", "=", "boundary_threshold", "\n", "run_args_list", ".", "append", "(", "run_args_instance", ")", "\n", "\n", "\n", "", "", "", "if", "run_args", ".", "cls_threshold", "!=", "-", "1", "and", "run_args", ".", "boundary_threshold", "!=", "-", "1", ":", "\n", "                                        ", "run_args_list", ".", "append", "(", "copy", ".", "deepcopy", "(", "run_args", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "                            ", "dataset_name", "=", "re", ".", "match", "(", "\".*/(.*?)_train\"", ",", "dirpath", ")", ".", "group", "(", "1", ")", "\n", "# print(dirpath)", "\n", "# exp_label=dirpath.split(\"/\")[-3]", "\n", "# exp_time=dirpath.split(\"/\")[-2]", "\n", "args_path", "=", "\"/\"", ".", "join", "(", "dirpath", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "1", "]", ")", "+", "\"/args.json\"", "\n", "args_dict", "=", "json", ".", "load", "(", "open", "(", "args_path", ")", ")", "\n", "\n", "run_args", ".", "label", "=", "dataset_name", "+", "\"_eval\"", "\n", "if", "\"train_dev\"", "in", "args_dict", "[", "\"train_path\"", "]", ":", "\n", "                                ", "run_args", ".", "dataset_path", "=", "args_dict", "[", "\"train_path\"", "]", ".", "replace", "(", "\"train_dev\"", ",", "\"test\"", ")", "\n", "", "else", ":", "\n", "                                ", "run_args", ".", "dataset_path", "=", "args_dict", "[", "\"train_path\"", "]", ".", "replace", "(", "\"train\"", ",", "\"test\"", ")", "\n", "", "run_args", ".", "model_path", "=", "dirpath", "\n", "run_args", ".", "tokenizer_path", "=", "dirpath", "\n", "run_args", ".", "types_path", "=", "args_dict", "[", "\"types_path\"", "]", "\n", "# run_args.log_path = args_dict[\"log_path\"]", "\n", "run_args", ".", "log_path", "=", "\"/\"", ".", "join", "(", "dirpath", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "3", "]", ")", "\n", "\n", "run_args", ".", "seed", "=", "args_dict", "[", "\"seed\"", "]", "\n", "run_args", ".", "model_type", "=", "args_dict", "[", "\"model_type\"", "]", "\n", "run_args", ".", "weight_decay", "=", "args_dict", "[", "\"weight_decay\"", "]", "\n", "# run_args.no_overlapping =args_dict[\"no_overlapping\"]", "\n", "# run_args.no_partial_overlapping =args_dict[\"no_partial_overlapping\"]", "\n", "# run_args.no_duplicate =args_dict[\"no_duplicate\"]", "\n", "\n", "if", "run_args", ".", "eval_batch_size", "==", "-", "1", ":", "\n", "                                ", "run_args", ".", "eval_batch_size", "=", "args_dict", "[", "\"eval_batch_size\"", "]", "\n", "\n", "", "run_args", ".", "prop_drop", "=", "args_dict", "[", "\"prop_drop\"", "]", "\n", "\n", "run_args", ".", "pos_size", "=", "args_dict", "[", "\"pos_size\"", "]", "\n", "run_args", ".", "char_lstm_layers", "=", "args_dict", "[", "\"char_lstm_layers\"", "]", "\n", "run_args", ".", "char_lstm_drop", "=", "args_dict", "[", "\"char_lstm_drop\"", "]", "\n", "run_args", ".", "char_size", "=", "args_dict", "[", "\"char_size\"", "]", "\n", "run_args", ".", "use_pos", "=", "args_dict", "[", "\"use_pos\"", "]", "\n", "run_args", ".", "use_glove", "=", "args_dict", "[", "\"use_glove\"", "]", "\n", "run_args", ".", "use_char_lstm", "=", "args_dict", "[", "\"use_char_lstm\"", "]", "\n", "run_args", ".", "pool_type", "=", "args_dict", "[", "\"pool_type\"", "]", "\n", "run_args", ".", "wordvec_path", "=", "args_dict", "[", "\"wordvec_path\"", "]", "\n", "run_args", ".", "use_masked_lm", "=", "args_dict", "[", "\"use_masked_lm\"", "]", "\n", "run_args", ".", "repeat_gt_entities", "=", "args_dict", "[", "\"repeat_gt_entities\"", "]", "\n", "\n", "if", "\"use_aux_loss\"", "in", "args_dict", ":", "\n", "                                ", "run_args", ".", "use_aux_loss", "=", "args_dict", "[", "\"use_aux_loss\"", "]", "\n", "", "else", ":", "\n", "                                ", "run_args", ".", "use_aux_loss", "=", "True", "\n", "\n", "", "if", "\"use_lstm\"", "in", "args_dict", ":", "\n", "                                ", "run_args", ".", "use_lstm", "=", "args_dict", "[", "\"use_lstm\"", "]", "\n", "", "else", ":", "\n", "                                ", "run_args", ".", "use_lstm", "=", "True", "\n", "\n", "\n", "", "run_args", ".", "nil_weight", "=", "args_dict", "[", "\"nil_weight\"", "]", "\n", "# run_args.cls_threshold=args_dict[\"cls_threshold\"]", "\n", "# run_args.boundary_threshold=args_dict[\"boundary_threshold\"]", "\n", "\n", "\n", "run_args", ".", "match_boundary_weight", "=", "args_dict", "[", "\"match_boundary_weight\"", "]", "\n", "run_args", ".", "match_class_weight", "=", "args_dict", "[", "\"match_class_weight\"", "]", "\n", "run_args", ".", "loss_boundary_weight", "=", "args_dict", "[", "\"loss_boundary_weight\"", "]", "\n", "run_args", ".", "loss_class_weight", "=", "args_dict", "[", "\"loss_class_weight\"", "]", "\n", "run_args", ".", "match_solver", "=", "args_dict", "[", "\"match_solver\"", "]", "\n", "run_args", ".", "share_query_pos", "=", "args_dict", "[", "\"share_query_pos\"", "]", "\n", "run_args", ".", "use_token_level_encoder", "=", "args_dict", "[", "\"use_token_level_encoder\"", "]", "\n", "run_args", ".", "num_token_entity_encoderlayer", "=", "args_dict", "[", "\"num_token_entity_encoderlayer\"", "]", "\n", "run_args", ".", "use_entity_attention", "=", "args_dict", "[", "\"use_entity_attention\"", "]", "\n", "\n", "\n", "\n", "\n", "run_args", ".", "entity_queries_num", "=", "args_dict", "[", "\"entity_queries_num\"", "]", "\n", "run_args", ".", "entity_emb_size", "=", "args_dict", "[", "\"entity_emb_size\"", "]", "\n", "run_args", ".", "mask_ent2ent", "=", "args_dict", "[", "\"mask_ent2ent\"", "]", "\n", "run_args", ".", "mask_ent2tok", "=", "args_dict", "[", "\"mask_ent2tok\"", "]", "\n", "run_args", ".", "mask_tok2ent", "=", "args_dict", "[", "\"mask_tok2ent\"", "]", "\n", "run_args", ".", "mask_entself", "=", "args_dict", "[", "\"mask_entself\"", "]", "\n", "\n", "if", "\"word_mask_ent2ent\"", "in", "args_dict", ":", "\n", "                                ", "run_args", ".", "word_mask_ent2ent", "=", "args_dict", "[", "\"word_mask_ent2ent\"", "]", "\n", "run_args", ".", "word_mask_ent2tok", "=", "args_dict", "[", "\"word_mask_ent2tok\"", "]", "\n", "run_args", ".", "word_mask_tok2ent", "=", "args_dict", "[", "\"word_mask_tok2ent\"", "]", "\n", "run_args", ".", "word_mask_entself", "=", "args_dict", "[", "\"word_mask_entself\"", "]", "\n", "", "else", ":", "\n", "                                ", "run_args", ".", "word_mask_entself", "=", "True", "\n", "\n", "", "if", "\"lstm_layers\"", "in", "args_dict", ":", "\n", "                                ", "run_args", ".", "lstm_layers", "=", "args_dict", "[", "\"lstm_layers\"", "]", "\n", "\n", "\n", "", "run_args", ".", "entity_aware_attention", "=", "args_dict", "[", "\"entity_aware_attention\"", "]", "\n", "run_args", ".", "entity_aware_selfout", "=", "args_dict", "[", "\"entity_aware_selfout\"", "]", "\n", "run_args", ".", "entity_aware_intermediate", "=", "args_dict", "[", "\"entity_aware_intermediate\"", "]", "\n", "run_args", ".", "entity_aware_output", "=", "args_dict", "[", "\"entity_aware_output\"", "]", "\n", "run_args", ".", "use_entity_pos", "=", "args_dict", "[", "\"use_entity_pos\"", "]", "\n", "if", "\"use_entity_common_embedding\"", "in", "args_dict", ":", "\n", "                                ", "run_args", ".", "use_entity_common_embedding", "=", "args_dict", "[", "\"use_entity_common_embedding\"", "]", "\n", "\n", "", "run_args", ".", "split_epoch", "=", "args_dict", "[", "\"split_epoch\"", "]", "\n", "run_args", ".", "epochs", "=", "args_dict", "[", "\"epochs\"", "]", "\n", "\n", "if", "run_args", ".", "cls_threshold", "==", "-", "1", "and", "run_args", ".", "boundary_threshold", "!=", "-", "1", ":", "\n", "                                ", "for", "cls_threshold", "in", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ":", "\n", "                                    ", "run_args_instance", "=", "copy", ".", "deepcopy", "(", "run_args", ")", "\n", "run_args_instance", ".", "cls_threshold", "=", "cls_threshold", "\n", "run_args_list", ".", "append", "(", "run_args_instance", ")", "\n", "\n", "\n", "", "", "if", "run_args", ".", "boundary_threshold", "==", "-", "1", "and", "run_args", ".", "cls_threshold", "!=", "-", "1", ":", "\n", "                                ", "for", "boundary_threshold", "in", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ":", "\n", "                                    ", "run_args_instance", "=", "copy", ".", "deepcopy", "(", "run_args", ")", "\n", "run_args_instance", ".", "boundary_threshold", "=", "boundary_threshold", "\n", "run_args_list", ".", "append", "(", "run_args_instance", ")", "\n", "\n", "", "", "if", "run_args", ".", "cls_threshold", "==", "-", "1", "and", "run_args", ".", "boundary_threshold", "==", "-", "1", ":", "\n", "                                ", "for", "cls_threshold", "in", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ":", "\n", "                                    ", "for", "boundary_threshold", "in", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ":", "\n", "                                        ", "run_args_instance", "=", "copy", ".", "deepcopy", "(", "run_args", ")", "\n", "run_args_instance", ".", "cls_threshold", "=", "cls_threshold", "\n", "run_args_instance", ".", "boundary_threshold", "=", "boundary_threshold", "\n", "run_args_list", ".", "append", "(", "run_args_instance", ")", "\n", "\n", "\n", "", "", "", "if", "run_args", ".", "cls_threshold", "!=", "-", "1", "and", "run_args", ".", "boundary_threshold", "!=", "-", "1", ":", "\n", "                                ", "run_args_list", ".", "append", "(", "copy", ".", "deepcopy", "(", "run_args", ")", ")", "\n", "", "", "", "", "", "else", ":", "\n", "                ", "run_args_list", ".", "append", "(", "run_args", ")", "\n", "\n", "", "for", "run_args", "in", "run_args_list", ":", "\n", "                ", "print", "(", "run_args", ")", "\n", "print", "(", "\"Repeat %s times\"", "%", "run_repeat", ")", "\n", "print", "(", "\"-\"", "*", "50", ")", "\n", "for", "iteration", "in", "range", "(", "run_repeat", ")", ":", "\n", "                    ", "_print", "(", "\"Iteration %s\"", "%", "iteration", ")", "\n", "_print", "(", "\"-\"", "*", "50", ")", "\n", "\n", "yield", "copy", ".", "deepcopy", "(", "run_args", ")", ",", "run_config", ",", "run_repeat", "\n", "\n", "# time.sleep(3)", "\n", "\n", "", "", "", "", "else", ":", "\n", "        ", "yield", "args", ",", "None", ",", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.args._add_common_args": [[4, 102], ["arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument"], "function", ["None"], ["def", "_add_common_args", "(", "arg_parser", ")", ":", "\n", "    ", "arg_parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ")", "\n", "\n", "arg_parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "\"--world_size\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"\"", ")", "\n", "\n", "# Input", "\n", "arg_parser", ".", "add_argument", "(", "'--types_path'", ",", "type", "=", "str", ",", "help", "=", "\"Path to type specifications\"", ")", "\n", "\n", "# Preprocessing", "\n", "arg_parser", ".", "add_argument", "(", "'--tokenizer_path'", ",", "type", "=", "str", ",", "help", "=", "\"Path to tokenizer\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--lowercase'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"If true, input is lowercased during preprocessing\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--sampling_processes'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "\"Number of sampling processes. 0 = no multiprocessing for sampling\"", ")", "\n", "\n", "# Logging", "\n", "arg_parser", ".", "add_argument", "(", "'--label'", ",", "type", "=", "str", ",", "help", "=", "\"Label of run. Used as the directory name of logs/models\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--log_path'", ",", "type", "=", "str", ",", "help", "=", "\"Path do directory where training/evaluation logs are stored\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--store_predictions'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"If true, store predictions on disc (in log directory)\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--store_examples'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"If true, store evaluation examples on disc (in log directory)\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--example_count'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Count of evaluation example to store (if store_examples == True)\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "\"Debugging mode on/off\"", ")", "\n", "\n", "# Model / Training / Evaluation", "\n", "arg_parser", ".", "add_argument", "(", "'--device_id'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"gpu device id\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "help", "=", "\"Path to directory that contains model checkpoints\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--model_type'", ",", "type", "=", "str", ",", "default", "=", "\"piqn\"", ",", "help", "=", "\"Type of model\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--cpu'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"If true, train/evaluate on CPU even if a CUDA device is available\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--eval_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Evaluation batch size\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--prop_drop'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"Probability of dropout used in piqn\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--freeze_transformer'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "\"Freeze BERT weights\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--no_overlapping'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"If true, do not evaluate on overlapping entities \"", "\n", "\"and relations with overlapping entities\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--no_partial_overlapping'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"If true, do not evaluate on overlapping entities \"", "\n", "\"and relations with overlapping entities\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--no_duplicate'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"If true, do not evaluate on overlapping entities \"", "\n", "\"and relations with overlapping entities\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--cls_threshold'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--boundary_threshold'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--pos_size'", ",", "type", "=", "int", ",", "default", "=", "25", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--char_lstm_layers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--lstm_layers'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--char_size'", ",", "type", "=", "int", ",", "default", "=", "25", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--char_lstm_drop'", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_glove'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_pos'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_char_lstm'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_lstm'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--pool_type'", ",", "type", "=", "str", ",", "default", "=", "\"max\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--wordvec_path'", ",", "type", "=", "str", ",", "default", "=", "\"../glove/glove.6B.300d.txt\"", ")", "\n", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--share_query_pos'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_token_level_encoder'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--num_token_entity_encoderlayer'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_entity_attention'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "# EntityAwareConfig", "\n", "arg_parser", ".", "add_argument", "(", "'--entity_queries_num'", ",", "type", "=", "int", ",", "default", "=", "60", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--entity_emb_size'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--mask_ent2tok'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--mask_tok2ent'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--mask_ent2ent'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--mask_entself'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--word_mask_ent2tok'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--word_mask_tok2ent'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--word_mask_ent2ent'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--word_mask_entself'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--entity_aware_attention'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--entity_aware_selfout'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--entity_aware_intermediate'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--entity_aware_output'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_entity_pos'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_entity_common_embedding'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--inlcude_subword_aux_loss'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--last_layer_for_loss'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "\n", "\n", "\n", "\n", "# Misc", "\n", "arg_parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"Seed\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--cache_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Path to cache transformer models (for HuggingFace transformers library)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.args.train_argparser": [[104, 159], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "args._add_common_args"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.None.args._add_common_args"], ["", "def", "train_argparser", "(", ")", ":", "\n", "    ", "arg_parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Input", "\n", "arg_parser", ".", "add_argument", "(", "'--train_path'", ",", "type", "=", "str", ",", "help", "=", "\"Path to train dataset\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--valid_path'", ",", "type", "=", "str", ",", "help", "=", "\"Path to validation dataset\"", ")", "\n", "\n", "# Logging", "\n", "arg_parser", ".", "add_argument", "(", "'--save_path'", ",", "type", "=", "str", ",", "help", "=", "\"Path to directory where model checkpoints are stored\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--save_path_include_iteration'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--init_eval'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"If true, evaluate validation set before training\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--save_optimizer'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Save optimizer alongside model\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--train_log_iter'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Log training process every x iterations\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--final_eval'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Evaluate the model only after training, not at every epoch\"", ")", "\n", "\n", "# Model / Training", "\n", "arg_parser", ".", "add_argument", "(", "'--train_batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Training batch size\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"Number of epochs\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ",", "help", "=", "\"Learning rate\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--lr_warmup'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "\"Proportion of total train iterations to warmup in linear increase/decrease schedule\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "\"Weight decay to apply\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--max_grad_norm'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"Maximum gradient norm\"", ")", "\n", "\n", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--match_solver'", ",", "type", "=", "str", ",", "help", "=", "\"\"", ",", "default", "=", "\"hungarian\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--type_loss'", ",", "type", "=", "str", ",", "help", "=", "\"\"", ",", "default", "=", "\"celoss\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--match_warmup_epoch'", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "0", ")", "\n", "\n", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--nil_weight'", ",", "type", "=", "float", ",", "default", "=", "-", "1", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--match_boundary_weight'", ",", "type", "=", "float", ",", "default", "=", "10.0", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--match_class_weight'", ",", "type", "=", "float", ",", "default", "=", "2.0", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--loss_boundary_weight'", ",", "type", "=", "float", ",", "default", "=", "2.0", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--loss_class_weight'", ",", "type", "=", "float", ",", "default", "=", "2.0", ")", "\n", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--use_aux_loss'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--deeply_weight'", ",", "type", "=", "str", ",", "help", "=", "\"\"", ",", "default", "=", "\"same\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_masked_lm'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--repeat_gt_entities'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"\"", ")", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--split_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--copy_weight'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "_add_common_args", "(", "arg_parser", ")", "\n", "\n", "return", "arg_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.None.args.eval_argparser": [[161, 170], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "args._add_common_args"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.None.args._add_common_args"], ["", "def", "eval_argparser", "(", ")", ":", "\n", "    ", "arg_parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Input", "\n", "arg_parser", ".", "add_argument", "(", "'--dataset_path'", ",", "type", "=", "str", ",", "help", "=", "\"Path to dataset\"", ")", "\n", "\n", "_add_common_args", "(", "arg_parser", ")", "\n", "\n", "return", "arg_parser", "\n", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertConfig.__init__": [[22, 43], ["transformers.BertConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "entity_queries_num", "=", "None", ",", "entity_emb_size", "=", "None", ",", "mask_ent2tok", "=", "True", ",", "mask_tok2ent", "=", "False", ",", "mask_ent2ent", "=", "False", ",", "mask_entself", "=", "False", ",", "entity_aware_attention", "=", "False", ",", "entity_aware_intermediate", "=", "False", ",", "entity_aware_selfout", "=", "False", ",", "entity_aware_output", "=", "True", ",", "use_entity_pos", "=", "True", ",", "use_entity_common_embedding", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EntityAwareBertConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "entity_queries_num", "=", "entity_queries_num", "\n", "self", ".", "mask_ent2tok", "=", "mask_ent2tok", "\n", "self", ".", "mask_tok2ent", "=", "mask_tok2ent", "\n", "self", ".", "mask_ent2ent", "=", "mask_ent2ent", "\n", "self", ".", "mask_entself", "=", "mask_entself", "\n", "self", ".", "entity_aware_attention", "=", "entity_aware_attention", "\n", "self", ".", "entity_aware_selfout", "=", "entity_aware_selfout", "\n", "self", ".", "entity_aware_intermediate", "=", "entity_aware_intermediate", "\n", "self", ".", "entity_aware_output", "=", "entity_aware_output", "\n", "self", ".", "type_vocab_size", "=", "2", "\n", "\n", "self", ".", "use_entity_pos", "=", "use_entity_pos", "\n", "self", ".", "use_entity_common_embedding", "=", "use_entity_common_embedding", "\n", "\n", "if", "entity_emb_size", "is", "None", ":", "\n", "            ", "self", ".", "entity_emb_size", "=", "self", ".", "hidden_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "entity_emb_size", "=", "entity_emb_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityEmbeddings.__init__": [[45, 54], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "is_pos_embedding", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "entity_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "entity_queries_num", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "use_common_embedding", "=", "config", ".", "use_entity_common_embedding", "and", "not", "is_pos_embedding", "\n", "if", "self", ".", "use_common_embedding", ":", "\n", "            ", "self", ".", "entity_common_embedding", "=", "nn", ".", "Embedding", "(", "1", ",", "config", ".", "hidden_size", ")", "\n", "# self.entity_common_embedding = nn.Parameter(torch.rand(config.hidden_size))", "\n", "", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityEmbeddings.forward": [[55, 62], ["models.EntityEmbeddings.entity_embeddings", "models.EntityEmbeddings.LayerNorm", "models.EntityEmbeddings.dropout", "models.EntityEmbeddings.entity_common_embedding", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "entity_embeddings", "(", "input_ids", ")", "\n", "if", "self", ".", "use_common_embedding", ":", "\n", "            ", "embeddings", "=", "embeddings", "+", "self", ".", "entity_common_embedding", "(", "torch", ".", "tensor", "(", "0", ",", "device", "=", "embeddings", ".", "device", ")", ")", "\n", "", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.__init__": [[65, 112], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.num_attention_heads = config.num_attention_heads", "\n", "# self.attention_head_size = int(config.hidden_size / config.num_attention_heads)", "\n", "# self.all_head_size = self.num_attention_heads * self.attention_head_size", "\n", "# self.config = config", "\n", "\n", "\n", "# self.query = nn.Linear(config.hidden_size, self.all_head_size)", "\n", "# self.key = nn.Linear(config.hidden_size, self.all_head_size)", "\n", "# self.value = nn.Linear(config.hidden_size, self.all_head_size)", "\n", "\n", "# if config.entity_aware_attention:", "\n", "#     self.entity_w2e_query = nn.Linear(config.hidden_size, self.all_head_size)", "\n", "#     self.entity_e2w_query = nn.Linear(config.hidden_size, self.all_head_size)", "\n", "#     self.entity_e2e_query = nn.Linear(config.hidden_size, self.all_head_size)", "\n", "# else:", "\n", "#     self.entity_w2e_query = self.query", "\n", "#     self.entity_e2w_query = self.query", "\n", "#     self.entity_e2e_query = self.query", "\n", "\n", "# self.dropout = nn.Dropout(config.attention_probs_dropout_prob)", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "self", ".", "config", "=", "config", "\n", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "if", "config", ".", "entity_aware_attention", ":", "\n", "# self.entity_w2e_query = nn.Linear(config.hidden_size, self.all_head_size)", "\n", "            ", "self", ".", "entity_e2w_query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "entity_e2w_key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "entity_e2w_value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "# else:", "\n", "#     self.entity_e2w_query = self.query", "\n", "#     self.entity_e2w_key = self.key", "\n", "#     self.entity_e2w_value = self.value", "\n", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores": [[113, 117], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.forward": [[118, 181], ["token_hidden_states.size", "models.EntityAwareBertSelfAttention.transpose_for_scores", "models.EntityAwareBertSelfAttention.transpose_for_scores", "models.EntityAwareBertSelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.softmax", "models.EntityAwareBertSelfAttention.dropout", "torch.cat", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "models.EntityAwareBertSelfAttention.query", "models.EntityAwareBertSelfAttention.transpose_for_scores", "models.EntityAwareBertSelfAttention.transpose_for_scores", "models.EntityAwareBertSelfAttention.key", "models.EntityAwareBertSelfAttention.transpose_for_scores", "models.EntityAwareBertSelfAttention.transpose_for_scores", "models.EntityAwareBertSelfAttention.value", "models.EntityAwareBertSelfAttention.transpose_for_scores", "models.EntityAwareBertSelfAttention.transpose_for_scores", "models.EntityAwareBertSelfAttention.transpose", "models.EntityAwareBertSelfAttention.transpose", "models.EntityAwareBertSelfAttention.transpose", "models.EntityAwareBertSelfAttention.transpose", "models.EntityAwareBertSelfAttention.entity_e2w_query", "models.EntityAwareBertSelfAttention.query", "models.EntityAwareBertSelfAttention.entity_e2w_key", "models.EntityAwareBertSelfAttention.key", "models.EntityAwareBertSelfAttention.entity_e2w_value", "models.EntityAwareBertSelfAttention.value", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "token_hidden_states", ",", "entity_hidden_states", ",", "attention_mask", ",", "query_pos", "=", "None", ")", ":", "\n", "        ", "context_size", "=", "token_hidden_states", ".", "size", "(", "1", ")", "\n", "\n", "pos_aware_entity_hidden_states", "=", "entity_hidden_states", "\n", "if", "query_pos", "is", "not", "None", ":", "\n", "            ", "pos_aware_entity_hidden_states", "=", "(", "entity_hidden_states", "+", "query_pos", ")", "/", "2", "\n", "# pos_aware_entity_hidden_states = entity_hidden_states + query_pos", "\n", "# query specific", "\n", "", "w2w_query_layer", "=", "self", ".", "transpose_for_scores", "(", "self", ".", "query", "(", "token_hidden_states", ")", ")", "\n", "\n", "if", "self", ".", "config", ".", "entity_aware_attention", ":", "\n", "            ", "e2w_query_layer", "=", "self", ".", "transpose_for_scores", "(", "self", ".", "entity_e2w_query", "(", "pos_aware_entity_hidden_states", ")", ")", "\n", "", "else", ":", "\n", "            ", "e2w_query_layer", "=", "self", ".", "transpose_for_scores", "(", "self", ".", "query", "(", "pos_aware_entity_hidden_states", ")", ")", "\n", "\n", "\n", "# key unified transformered", "\n", "", "w2w_key_layer", "=", "self", ".", "transpose_for_scores", "(", "self", ".", "key", "(", "token_hidden_states", ")", ")", "\n", "\n", "if", "self", ".", "config", ".", "entity_aware_attention", ":", "\n", "            ", "e2w_key_layer", "=", "self", ".", "transpose_for_scores", "(", "self", ".", "entity_e2w_key", "(", "pos_aware_entity_hidden_states", ")", ")", "\n", "", "else", ":", "\n", "            ", "e2w_key_layer", "=", "self", ".", "transpose_for_scores", "(", "self", ".", "key", "(", "pos_aware_entity_hidden_states", ")", ")", "\n", "\n", "\n", "", "w2w_value_layer", "=", "self", ".", "transpose_for_scores", "(", "self", ".", "value", "(", "token_hidden_states", ")", ")", "\n", "\n", "if", "self", ".", "config", ".", "entity_aware_attention", ":", "\n", "            ", "e2w_value_layer", "=", "self", ".", "transpose_for_scores", "(", "self", ".", "entity_e2w_value", "(", "entity_hidden_states", ")", ")", "\n", "", "else", ":", "\n", "            ", "e2w_value_layer", "=", "self", ".", "transpose_for_scores", "(", "self", ".", "value", "(", "entity_hidden_states", ")", ")", "\n", "\n", "\n", "# w2w_key_layer = key_layer[:, :, :context_size, :]", "\n", "# e2w_key_layer = key_layer[:, :, :context_size, :]", "\n", "# w2e_key_layer = key_layer[:, :, context_size:, :]", "\n", "# e2e_key_layer = key_layer[:, :, context_size:, :]", "\n", "\n", "", "w2w_attention_scores", "=", "torch", ".", "matmul", "(", "w2w_query_layer", ",", "w2w_key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "w2e_attention_scores", "=", "torch", ".", "matmul", "(", "w2w_query_layer", ",", "e2w_key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "e2w_attention_scores", "=", "torch", ".", "matmul", "(", "e2w_query_layer", ",", "w2w_key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "# w2e_attention_scores = torch.zeros(e2w_attention_scores.size()).transpose(-1, -2).to(e2w_attention_scores.device) - 1e30", "\n", "e2e_attention_scores", "=", "torch", ".", "matmul", "(", "e2w_query_layer", ",", "e2w_key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "\n", "word_attention_scores", "=", "torch", ".", "cat", "(", "[", "w2w_attention_scores", ",", "w2e_attention_scores", "]", ",", "dim", "=", "3", ")", "\n", "entity_attention_scores", "=", "torch", ".", "cat", "(", "[", "e2w_attention_scores", ",", "e2e_attention_scores", "]", ",", "dim", "=", "3", ")", "\n", "attention_scores", "=", "torch", ".", "cat", "(", "[", "word_attention_scores", ",", "entity_attention_scores", "]", ",", "dim", "=", "2", ")", "\n", "\n", "attention_scores", "=", "attention_scores", "/", "(", "self", ".", "attention_head_size", "**", "0.5", ")", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "attention_probs", "=", "F", ".", "softmax", "(", "attention_scores", ",", "dim", "=", "-", "1", ")", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "# value unified transformered", "\n", "value_layer", "=", "torch", ".", "cat", "(", "[", "w2w_value_layer", ",", "e2w_value_layer", "]", ",", "dim", "=", "-", "2", ")", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "return", "context_layer", "[", ":", ",", ":", "context_size", ",", ":", "]", ",", "context_layer", "[", ":", ",", "context_size", ":", ",", ":", "]", "\n", "# def forward(self, token_hidden_states, entity_hidden_states, attention_mask, query_pos = None):", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfOutput.__init__": [[229, 242], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "if", "config", ".", "entity_aware_selfout", ":", "\n", "            ", "self", ".", "entity_dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "entity_LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "# else:", "\n", "#     self.entity_dense = self.dense", "\n", "#     self.entity_LayerNorm = self.LayerNorm", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertSelfOutput.forward": [[243, 274], ["models.EntityAwareBertSelfOutput.dense", "models.EntityAwareBertSelfOutput.dropout", "models.EntityAwareBertSelfOutput.LayerNorm", "torch.cat", "models.EntityAwareBertSelfOutput.entity_dense", "models.EntityAwareBertSelfOutput.dropout", "models.EntityAwareBertSelfOutput.entity_LayerNorm", "models.EntityAwareBertSelfOutput.dense", "models.EntityAwareBertSelfOutput.dropout", "models.EntityAwareBertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "token_self_output", ",", "entity_self_output", ",", "token_hidden_states", ",", "entity_hidden_states", ")", ":", "\n", "# if self.config.entity_aware_selfout:", "\n", "#     token_self_output = self.dense(token_self_output)", "\n", "#     token_self_output = self.dropout(token_self_output)", "\n", "#     token_self_output = self.LayerNorm(token_self_output + token_hidden_states)", "\n", "#     entity_self_output = self.entity_dense(entity_self_output)", "\n", "#     entity_self_output = self.dropout(entity_self_output)", "\n", "#     entity_self_output = self.entity_LayerNorm(entity_self_output + entity_hidden_states)", "\n", "#     hidden_states = torch.cat([token_self_output, entity_self_output], dim=1)", "\n", "# else:", "\n", "#     hidden_states = torch.cat([token_hidden_states, entity_hidden_states], dim=1)", "\n", "#     all_self_output = torch.cat([token_self_output, entity_self_output], dim=1)", "\n", "#     all_self_output = self.dense(all_self_output)", "\n", "#     all_self_output = self.dropout(all_self_output)", "\n", "#     hidden_states = self.LayerNorm(all_self_output + hidden_states)", "\n", "\n", "# why? solved, code above also works", "\n", "        ", "token_self_output", "=", "self", ".", "dense", "(", "token_self_output", ")", "\n", "token_self_output", "=", "self", ".", "dropout", "(", "token_self_output", ")", "\n", "token_self_output", "=", "self", ".", "LayerNorm", "(", "token_self_output", "+", "token_hidden_states", ")", "\n", "\n", "if", "self", ".", "config", ".", "entity_aware_selfout", ":", "\n", "            ", "entity_self_output", "=", "self", ".", "entity_dense", "(", "entity_self_output", ")", "\n", "entity_self_output", "=", "self", ".", "dropout", "(", "entity_self_output", ")", "\n", "entity_self_output", "=", "self", ".", "entity_LayerNorm", "(", "entity_self_output", "+", "entity_hidden_states", ")", "\n", "", "else", ":", "\n", "            ", "entity_self_output", "=", "self", ".", "dense", "(", "entity_self_output", ")", "\n", "entity_self_output", "=", "self", ".", "dropout", "(", "entity_self_output", ")", "\n", "entity_self_output", "=", "self", ".", "LayerNorm", "(", "entity_self_output", "+", "entity_hidden_states", ")", "\n", "", "hidden_states", "=", "torch", ".", "cat", "(", "[", "token_self_output", ",", "entity_self_output", "]", ",", "dim", "=", "1", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertAttention.__init__": [[277, 281], ["torch.nn.Module.__init__", "models.EntityAwareBertSelfAttention", "models.EntityAwareBertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "EntityAwareBertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "EntityAwareBertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertAttention.forward": [[282, 288], ["models.EntityAwareBertAttention.self", "models.EntityAwareBertAttention.output", "word_hidden_states.size", "word_hidden_states.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "word_hidden_states", ",", "entity_hidden_states", ",", "attention_mask", ",", "query_pos", "=", "None", ")", ":", "\n", "        ", "word_self_output", ",", "entity_self_output", "=", "self", ".", "self", "(", "word_hidden_states", ",", "entity_hidden_states", ",", "attention_mask", ",", "query_pos", "=", "query_pos", ")", "\n", "# hidden_states = torch.cat([word_hidden_states, entity_hidden_states], dim=1)", "\n", "# self_output = torch.cat([word_self_output, entity_self_output], dim=1)", "\n", "output", "=", "self", ".", "output", "(", "word_self_output", ",", "entity_self_output", ",", "word_hidden_states", ",", "entity_hidden_states", ")", "\n", "return", "output", "[", ":", ",", ":", "word_hidden_states", ".", "size", "(", "1", ")", ",", ":", "]", ",", "output", "[", ":", ",", "word_hidden_states", ".", "size", "(", "1", ")", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertIntermediate.__init__": [[290, 302], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "if", "config", ".", "entity_aware_intermediate", ":", "\n", "            ", "self", ".", "entity_dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "# else:", "\n", "#     self.entity_dense = self.dense", "\n", "", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertIntermediate.forward": [[303, 315], ["models.EntityAwareBertIntermediate.dense", "models.EntityAwareBertIntermediate.intermediate_act_fn", "models.EntityAwareBertIntermediate.intermediate_act_fn", "models.EntityAwareBertIntermediate.entity_dense", "models.EntityAwareBertIntermediate.dense"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "token_hidden_states", ",", "entity_hidden_states", ")", ":", "\n", "        ", "token_hidden_states", "=", "self", ".", "dense", "(", "token_hidden_states", ")", "\n", "if", "self", ".", "config", ".", "entity_aware_intermediate", ":", "\n", "            ", "entity_hidden_states", "=", "self", ".", "entity_dense", "(", "entity_hidden_states", ")", "\n", "", "else", ":", "\n", "            ", "entity_hidden_states", "=", "self", ".", "dense", "(", "entity_hidden_states", ")", "\n", "# hidden_states = torch.cat([token_hidden_states, entity_hidden_states], dim=1) ", "\n", "# hidden_states = self.intermediate_act_fn(hidden_states)", "\n", "", "token_hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "token_hidden_states", ")", "\n", "entity_hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "entity_hidden_states", ")", "\n", "\n", "return", "token_hidden_states", ",", "entity_hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertOutput.__init__": [[317, 329], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "if", "self", ".", "config", ".", "entity_aware_output", ":", "\n", "            ", "self", ".", "entity_dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "entity_LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "# else:", "\n", "#     self.entity_dense = self.dense", "\n", "#     self.entity_LayerNorm = self.LayerNorm", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertOutput.forward": [[330, 345], ["models.EntityAwareBertOutput.dense", "models.EntityAwareBertOutput.dropout", "models.EntityAwareBertOutput.LayerNorm", "models.EntityAwareBertOutput.entity_dense", "models.EntityAwareBertOutput.dropout", "models.EntityAwareBertOutput.entity_LayerNorm", "models.EntityAwareBertOutput.dense", "models.EntityAwareBertOutput.dropout", "models.EntityAwareBertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "token_intermediate_output", ",", "entity_intermediate_output", ",", "word_attention_output", ",", "entity_attention_output", ")", ":", "\n", "        ", "token_intermediate_output", "=", "self", ".", "dense", "(", "token_intermediate_output", ")", "\n", "token_intermediate_output", "=", "self", ".", "dropout", "(", "token_intermediate_output", ")", "\n", "token_intermediate_output", "=", "self", ".", "LayerNorm", "(", "token_intermediate_output", "+", "word_attention_output", ")", "\n", "\n", "if", "self", ".", "config", ".", "entity_aware_output", ":", "\n", "            ", "entity_intermediate_output", "=", "self", ".", "entity_dense", "(", "entity_intermediate_output", ")", "\n", "entity_intermediate_output", "=", "self", ".", "dropout", "(", "entity_intermediate_output", ")", "\n", "entity_intermediate_output", "=", "self", ".", "entity_LayerNorm", "(", "entity_intermediate_output", "+", "entity_attention_output", ")", "\n", "", "else", ":", "\n", "            ", "entity_intermediate_output", "=", "self", ".", "dense", "(", "entity_intermediate_output", ")", "\n", "entity_intermediate_output", "=", "self", ".", "dropout", "(", "entity_intermediate_output", ")", "\n", "entity_intermediate_output", "=", "self", ".", "LayerNorm", "(", "entity_intermediate_output", "+", "entity_attention_output", ")", "\n", "\n", "", "return", "token_intermediate_output", ",", "entity_intermediate_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertLayer.__init__": [[348, 354], ["torch.nn.Module.__init__", "models.EntityAwareBertAttention", "models.EntityAwareBertIntermediate", "models.EntityAwareBertOutput"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "attention", "=", "EntityAwareBertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "EntityAwareBertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "EntityAwareBertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertLayer.forward": [[355, 365], ["models.EntityAwareBertLayer.attention", "models.EntityAwareBertLayer.intermediate", "models.EntityAwareBertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "word_hidden_states", ",", "entity_hidden_states", ",", "attention_mask", ",", "query_pos", "=", "None", ")", ":", "\n", "        ", "word_attention_output", ",", "entity_attention_output", "=", "self", ".", "attention", "(", "\n", "word_hidden_states", ",", "entity_hidden_states", ",", "attention_mask", ",", "query_pos", "=", "query_pos", "\n", ")", "\n", "# intermediate_output = self.intermediate(word_attention_output, entity_attention_output)", "\n", "# attention_output = torch.cat([word_attention_output, entity_attention_output], dim=1)", "\n", "token_intermediate_output", ",", "entity_intermediate_output", "=", "self", ".", "intermediate", "(", "word_attention_output", ",", "entity_attention_output", ")", "\n", "token_output", ",", "entity_output", "=", "self", ".", "output", "(", "token_intermediate_output", ",", "entity_intermediate_output", ",", "word_attention_output", ",", "entity_attention_output", ")", "\n", "\n", "return", "token_output", ",", "entity_output", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertEncoder.__init__": [[367, 370], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "models.EntityAwareBertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "EntityAwareBertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertEncoder.forward": [[371, 381], ["layer_module", "intermediate.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "word_hidden_states", ",", "entity_hidden_states", ",", "attention_mask", ",", "query_pos", "=", "None", ")", ":", "\n", "        ", "intermediate", "=", "[", "{", "\"h_token\"", ":", "word_hidden_states", ",", "\"h_entity\"", ":", "entity_hidden_states", "}", "]", "\n", "ori_entity_hidden_states", "=", "entity_hidden_states", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "word_hidden_states", ",", "entity_hidden_states", "=", "layer_module", "(", "\n", "word_hidden_states", ",", "entity_hidden_states", ",", "attention_mask", ",", "query_pos", "\n", ")", "\n", "intermediate", ".", "append", "(", "{", "\"h_token\"", ":", "word_hidden_states", ",", "\"h_entity\"", ":", "entity_hidden_states", "}", ")", "\n", "# entity_hidden_states += ori_entity_hidden_states", "\n", "", "return", "word_hidden_states", ",", "entity_hidden_states", ",", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntitySelfAttention.__init__": [[407, 412], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.Dropout", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "entity_attention", "=", "nn", ".", "MultiheadAttention", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ",", "dropout", "=", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "entity_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "entity_norm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntitySelfAttention.forward": [[413, 421], ["[].transpose", "models.EntitySelfAttention.entity_norm", "models.EntitySelfAttention.entity_dropout", "models.EntitySelfAttention.entity_attention", "q.transpose", "k.transpose", "v.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_entity", ",", "query_pos", ")", ":", "\n", "        ", "q", "=", "k", "=", "v", "=", "h_entity", "\n", "if", "query_pos", "is", "not", "None", ":", "\n", "            ", "q", "=", "k", "=", "h_entity", "+", "query_pos", "\n", "", "tgt", "=", "self", ".", "entity_attention", "(", "q", ".", "transpose", "(", "0", ",", "1", ")", ",", "k", ".", "transpose", "(", "0", ",", "1", ")", ",", "v", ".", "transpose", "(", "0", ",", "1", ")", ")", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "tgt", "=", "h_entity", "+", "self", ".", "entity_dropout", "(", "tgt", ")", "\n", "h_entity", "=", "self", ".", "entity_norm", "(", "tgt", ")", "\n", "return", "h_entity", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.SelfCrossAttention.__init__": [[423, 437], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "models.EntitySelfAttention", "models.EntityAwareBertLayer", "range", "range"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "use_token_level_encoder", ",", "use_entity_attention", ",", "num_selfcrosslayer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_token_level_encoder", "=", "use_token_level_encoder", "\n", "self", ".", "use_entity_attention", "=", "use_entity_attention", "\n", "self", ".", "num_selfcrosslayer", "=", "num_selfcrosslayer", "\n", "\n", "self", ".", "selflaters", "=", "None", "\n", "if", "self", ".", "use_entity_attention", ":", "\n", "# self.selflaters = EntitySelfAttention(config)", "\n", "            ", "self", ".", "selflaters", "=", "nn", ".", "ModuleList", "(", "[", "EntitySelfAttention", "(", "config", ")", "for", "_", "in", "range", "(", "num_selfcrosslayer", ")", "]", ")", "\n", "\n", "", "self", ".", "crosslayers", "=", "None", "\n", "if", "self", ".", "use_token_level_encoder", ":", "\n", "            ", "self", ".", "crosslayers", "=", "nn", ".", "ModuleList", "(", "[", "EntityAwareBertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "num_selfcrosslayer", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.SelfCrossAttention.forward": [[438, 452], ["range", "intermediate.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "h_token", ",", "h_entity", ",", "token_entity_attention_mask", ",", "query_pos", "=", "None", ")", ":", "\n", "# intermediate = [{\"h_token\":h_token, \"h_entity\":h_entity}]", "\n", "        ", "intermediate", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_selfcrosslayer", ")", ":", "\n", "\n", "            ", "if", "self", ".", "use_token_level_encoder", ":", "\n", "                ", "h_token", ",", "h_entity", "=", "self", ".", "crosslayers", "[", "i", "]", "(", "h_token", ",", "h_entity", ",", "token_entity_attention_mask", ",", "query_pos", "=", "query_pos", ")", "\n", "\n", "", "if", "self", ".", "use_entity_attention", ":", "\n", "                ", "h_entity", "=", "self", ".", "selflaters", "[", "i", "]", "(", "h_entity", ",", "query_pos", ")", "\n", "\n", "", "intermediate", ".", "append", "(", "{", "\"h_token\"", ":", "h_token", ",", "\"h_entity\"", ":", "h_entity", "}", ")", "\n", "\n", "", "return", "h_token", ",", "h_entity", ",", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityBoundaryPredictor.__init__": [[455, 465], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "self", ".", "token_embedding_linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", "\n", ")", "\n", "self", ".", "entity_embedding_linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", "\n", ")", "\n", "self", ".", "boundary_predictor", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityBoundaryPredictor.forward": [[466, 476], ["models.EntityBoundaryPredictor.boundary_predictor().squeeze", "token_mask.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.nn.functional.sigmoid", "models.EntityBoundaryPredictor.token_embedding_linear().unsqueeze", "models.EntityBoundaryPredictor.entity_embedding_linear().unsqueeze", "models.EntityBoundaryPredictor.size", "models.EntityBoundaryPredictor.boundary_predictor", "token_mask.unsqueeze().expand.unsqueeze().expand.unsqueeze", "models.EntityBoundaryPredictor.token_embedding_linear", "models.EntityBoundaryPredictor.entity_embedding_linear", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "token_embedding", ",", "entity_embedding", ",", "token_mask", ")", ":", "\n", "# B x #ent x #token x hidden_size", "\n", "        ", "entity_token_matrix", "=", "self", ".", "token_embedding_linear", "(", "token_embedding", ")", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "entity_embedding_linear", "(", "entity_embedding", ")", ".", "unsqueeze", "(", "2", ")", "\n", "entity_token_cls", "=", "self", ".", "boundary_predictor", "(", "torch", ".", "relu", "(", "entity_token_matrix", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "token_mask", "=", "token_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "entity_token_cls", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "entity_token_cls", "[", "~", "token_mask", "]", "=", "-", "10000", "\n", "# entity_token_p = entity_token_cls.softmax(dim=-1)", "\n", "entity_token_p", "=", "F", ".", "sigmoid", "(", "entity_token_cls", ")", "\n", "\n", "return", "entity_token_p", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityTypePredictor.__init__": [[478, 492], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.MultiheadAttention", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "cls_size", ",", "entity_type_count", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "linnear", "=", "nn", ".", "Linear", "(", "cls_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "self", ".", "multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "config", ".", "hidden_size", ",", "dropout", "=", "config", ".", "hidden_dropout_prob", ",", "num_heads", "=", "config", ".", "num_attention_heads", ")", "\n", "# self.multihead_attn = nn.MultiheadAttention(config.hidden_size, config.num_attention_heads, dropout=config.hidden_dropout_prob)", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Linear(cls_size, config.hidden_size),", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "3", ",", "entity_type_count", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityTypePredictor.forward": [[494, 516], ["models.EntityTypePredictor.linnear", "models.EntityTypePredictor.multihead_attn", "attn_output.transpose.transpose.transpose", "torch.matmul", "torch.matmul", "torch.cat", "models.EntityTypePredictor.classifier", "torch.relu", "torch.cat.transpose().clone", "h_token.transpose", "h_token.transpose", "torch.cat.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_entity", ",", "h_token", ",", "p_left", ",", "p_right", ",", "token_mask", ")", ":", "\n", "        ", "h_entity", "=", "self", ".", "linnear", "(", "torch", ".", "relu", "(", "h_entity", ")", ")", "\n", "# p_left = p_left/token_mask.sum(dim = -1).unsqueeze(-1).unsqueeze(-1)", "\n", "# p_right = p_right/token_mask.sum(dim = -1).unsqueeze(-1).unsqueeze(-1)", "\n", "\n", "attn_output", ",", "_", "=", "self", ".", "multihead_attn", "(", "h_entity", ".", "transpose", "(", "0", ",", "1", ")", ".", "clone", "(", ")", ",", "h_token", ".", "transpose", "(", "0", ",", "1", ")", ",", "h_token", ".", "transpose", "(", "0", ",", "1", ")", ",", "key_padding_mask", "=", "~", "token_mask", ")", "\n", "attn_output", "=", "attn_output", ".", "transpose", "(", "0", ",", "1", ")", "\n", "h_entity", "+=", "attn_output", "\n", "\n", "# # B N T      B T H   ->   B N H \u3002", "\n", "# p_left = p_left.detach()", "\n", "# p_right = p_right.detach()", "\n", "\n", "left_token", "=", "torch", ".", "matmul", "(", "p_left", ",", "h_token", ")", "\n", "right_token", "=", "torch", ".", "matmul", "(", "p_right", ",", "h_token", ")", "\n", "\n", "h_entity", "=", "torch", ".", "cat", "(", "[", "h_entity", ",", "left_token", ",", "right_token", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n", "entity_logits", "=", "self", ".", "classifier", "(", "h_entity", ")", "\n", "\n", "return", "entity_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertModel.__init__": [[520, 531], ["transformers.BertPreTrainedModel.__init__", "transformers.models.bert.modeling_bert.BertEmbeddings", "models.EntityAwareBertEncoder", "models.EntityEmbeddings", "models.EntityEmbeddings"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "EntityAwareBertEncoder", "(", "config", ")", "\n", "\n", "self", ".", "entity_embeddings", "=", "EntityEmbeddings", "(", "config", ")", "\n", "\n", "if", "config", ".", "use_entity_pos", ":", "\n", "            ", "self", ".", "pos_entity_embeddings", "=", "EntityEmbeddings", "(", "config", ",", "is_pos_embedding", "=", "True", ")", "\n", "# self.pos_entity_embeddings.entity_embeddings = self.entity_embeddings.entity_embeddings", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertModel.get_input_embeddings": [[537, 539], ["None"], "methods", ["None"], ["", "", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertModel.set_input_embeddings": [[540, 542], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertModel._compute_extended_attention_mask": [[543, 581], ["torch.cat.unsqueeze().unsqueeze", "word_attention_mask.size", "entity_attention_mask.size", "torch.cat.unsqueeze().unsqueeze().expand().clone", "extended_attention_mask.to.to.to", "torch.cat", "seg_mask.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as", "torch.eye().expand_as", "torch.eye().expand_as", "torch.cat.unsqueeze", "torch.cat.unsqueeze().unsqueeze().expand", "seg_mask.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze", "torch.eye", "torch.eye", "next", "torch.cat.unsqueeze().unsqueeze", "models.EntityAwareBertModel.parameters", "seg_mask.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze", "torch.cat.unsqueeze", "seg_mask.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as.bool"], "methods", ["None"], ["", "def", "_compute_extended_attention_mask", "(", "self", ",", "word_attention_mask", ":", "torch", ".", "LongTensor", ",", "entity_attention_mask", ":", "torch", ".", "LongTensor", ",", "mask_ent2tok", "=", "None", ",", "mask_tok2ent", "=", "None", ",", "mask_ent2ent", "=", "None", ",", "mask_entself", "=", "None", ",", "seg_mask", "=", "None", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "attention_mask", "=", "word_attention_mask", "\n", "if", "entity_attention_mask", "is", "not", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "cat", "(", "[", "attention_mask", ",", "entity_attention_mask", "]", ",", "dim", "=", "1", ")", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "word_num", "=", "word_attention_mask", ".", "size", "(", "1", ")", "\n", "entity_num", "=", "entity_attention_mask", ".", "size", "(", "1", ")", "\n", "# #batch x #head x seq_len x seq_len", "\n", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "word_num", "+", "entity_num", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "\n", "# mask entity2token attention ", "\n", "if", "(", "mask_ent2tok", "==", "None", "and", "self", ".", "config", ".", "mask_ent2tok", ")", "or", "mask_ent2tok", "==", "True", ":", "\n", "            ", "extended_attention_mask", "[", ":", ",", ":", ",", ":", "word_num", ",", "word_num", ":", "]", "=", "0", "\n", "\n", "", "if", "(", "mask_tok2ent", "==", "None", "and", "self", ".", "config", ".", "mask_tok2ent", ")", "or", "mask_tok2ent", "==", "True", ":", "\n", "            ", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", ":", "word_num", "]", "=", "0", "\n", "\n", "", "if", "seg_mask", "!=", "None", ":", "\n", "            ", "tok2ent_mask", "=", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", ":", "word_num", "]", "\n", "seg_mask", "=", "seg_mask", ".", "bool", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "tok2ent_mask", ")", "\n", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", ":", "word_num", "]", "=", "seg_mask", "\n", "\n", "", "if", "(", "mask_ent2ent", "==", "None", "and", "self", ".", "config", ".", "mask_ent2ent", ")", "or", "mask_ent2ent", "==", "True", ":", "\n", "            ", "entity_attention", "=", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", "word_num", ":", "]", "\n", "mask", "=", "torch", ".", "eye", "(", "entity_num", ",", "entity_num", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "expand_as", "(", "entity_attention", ")", "\n", "entity_attention", "[", "~", "mask", "]", "=", "0", "\n", "\n", "", "if", "(", "mask_entself", "==", "None", "and", "self", ".", "config", ".", "mask_entself", ")", "or", "mask_entself", "==", "True", ":", "\n", "            ", "entity_attention", "=", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", "word_num", ":", "]", "\n", "mask", "=", "torch", ".", "eye", "(", "entity_num", ",", "entity_num", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "expand_as", "(", "entity_attention", ")", "\n", "entity_attention", "[", "mask", "]", "=", "0", "\n", "\n", "", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "return", "extended_attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.EntityAwareBertModel.forward": [[582, 597], ["models.EntityAwareBertModel.embeddings", "models.EntityAwareBertModel.entity_embeddings", "models.EntityAwareBertModel._compute_extended_attention_mask", "models.EntityAwareBertModel.encoder", "torch.arange().expand", "torch.ones", "models.EntityAwareBertModel.pos_entity_embeddings", "torch.arange().expand.size", "torch.arange", "token_input_ids.size"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.RobertaEntityAwareBertModel._compute_extended_attention_mask"], ["", "def", "forward", "(", "self", ",", "token_input_ids", ",", "token_attention_mask", ",", "entity_ids", "=", "None", ",", "entity_attention_mask", "=", "None", ",", "seg_encoding", "=", "None", ")", ":", "\n", "        ", "word_embeddings", "=", "self", ".", "embeddings", "(", "token_input_ids", ",", "token_type_ids", "=", "seg_encoding", ")", "\n", "\n", "if", "entity_ids", "is", "None", ":", "\n", "            ", "entity_ids", "=", "torch", ".", "arange", "(", "self", ".", "config", ".", "entity_queries_num", ",", "device", "=", "token_input_ids", ".", "device", ")", ".", "expand", "(", "(", "token_input_ids", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "entity_attention_mask", "=", "torch", ".", "ones", "(", "entity_ids", ".", "size", "(", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "token_input_ids", ".", "device", ")", "\n", "\n", "", "entity_embeddings", "=", "self", ".", "entity_embeddings", "(", "entity_ids", ")", "\n", "attention_mask", "=", "self", ".", "_compute_extended_attention_mask", "(", "token_attention_mask", ",", "entity_attention_mask", ",", "seg_mask", "=", "None", ")", "\n", "\n", "query_pos", "=", "None", "\n", "if", "self", ".", "config", ".", "use_entity_pos", ":", "\n", "            ", "query_pos", "=", "self", ".", "pos_entity_embeddings", "(", "entity_ids", ")", "\n", "# entity_embeddings = query_pos", "\n", "", "return", "self", ".", "encoder", "(", "word_embeddings", ",", "entity_embeddings", ",", "attention_mask", ",", "query_pos", "=", "query_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.RobertaEntityAwareBertModel.__init__": [[603, 613], ["transformers.models.roberta.modeling_roberta.RobertaPreTrainedModel.__init__", "transformers.models.roberta.modeling_roberta.RobertaEmbeddings", "models.EntityAwareBertEncoder", "models.EntityEmbeddings", "models.EntityEmbeddings"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "config", ".", "type_vocab_size", "=", "1", "\n", "self", ".", "embeddings", "=", "RobertaEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "EntityAwareBertEncoder", "(", "config", ")", "\n", "\n", "self", ".", "entity_embeddings", "=", "EntityEmbeddings", "(", "config", ")", "\n", "if", "config", ".", "use_entity_pos", ":", "\n", "            ", "self", ".", "pos_entity_embeddings", "=", "EntityEmbeddings", "(", "config", ",", "is_pos_embedding", "=", "True", ")", "\n", "# self.pos_entity_embeddings.entity_embeddings = self.entity_embeddings.entity_embeddings", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.RobertaEntityAwareBertModel.get_input_embeddings": [[620, 622], ["None"], "methods", ["None"], ["", "", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.RobertaEntityAwareBertModel.set_input_embeddings": [[623, 625], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.RobertaEntityAwareBertModel._compute_extended_attention_mask": [[626, 664], ["torch.cat.unsqueeze().unsqueeze", "word_attention_mask.size", "entity_attention_mask.size", "torch.cat.unsqueeze().unsqueeze().expand().clone", "extended_attention_mask.to.to.to", "torch.cat", "seg_mask.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as", "torch.eye().expand_as", "torch.eye().expand_as", "torch.cat.unsqueeze", "torch.cat.unsqueeze().unsqueeze().expand", "seg_mask.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze", "torch.eye", "torch.eye", "next", "torch.cat.unsqueeze().unsqueeze", "models.RobertaEntityAwareBertModel.parameters", "seg_mask.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze", "torch.cat.unsqueeze", "seg_mask.bool().unsqueeze().unsqueeze().expand_as.bool().unsqueeze().unsqueeze().expand_as.bool"], "methods", ["None"], ["", "def", "_compute_extended_attention_mask", "(", "self", ",", "word_attention_mask", ":", "torch", ".", "LongTensor", ",", "entity_attention_mask", ":", "torch", ".", "LongTensor", ",", "mask_ent2tok", "=", "None", ",", "mask_tok2ent", "=", "None", ",", "mask_ent2ent", "=", "None", ",", "mask_entself", "=", "None", ",", "seg_mask", "=", "None", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "attention_mask", "=", "word_attention_mask", "\n", "if", "entity_attention_mask", "is", "not", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "cat", "(", "[", "attention_mask", ",", "entity_attention_mask", "]", ",", "dim", "=", "1", ")", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "word_num", "=", "word_attention_mask", ".", "size", "(", "1", ")", "\n", "entity_num", "=", "entity_attention_mask", ".", "size", "(", "1", ")", "\n", "# #batch x #head x seq_len x seq_len", "\n", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "word_num", "+", "entity_num", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "\n", "# mask entity2token attention ", "\n", "if", "(", "mask_ent2tok", "==", "None", "and", "self", ".", "config", ".", "mask_ent2tok", ")", "or", "mask_ent2tok", "==", "True", ":", "\n", "            ", "extended_attention_mask", "[", ":", ",", ":", ",", ":", "word_num", ",", "word_num", ":", "]", "=", "0", "\n", "\n", "", "if", "(", "mask_tok2ent", "==", "None", "and", "self", ".", "config", ".", "mask_tok2ent", ")", "or", "mask_tok2ent", "==", "True", ":", "\n", "            ", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", ":", "word_num", "]", "=", "0", "\n", "\n", "", "if", "seg_mask", "!=", "None", ":", "\n", "            ", "tok2ent_mask", "=", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", ":", "word_num", "]", "\n", "seg_mask", "=", "seg_mask", ".", "bool", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "tok2ent_mask", ")", "\n", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", ":", "word_num", "]", "=", "seg_mask", "\n", "\n", "", "if", "(", "mask_ent2ent", "==", "None", "and", "self", ".", "config", ".", "mask_ent2ent", ")", "or", "mask_ent2ent", "==", "True", ":", "\n", "            ", "entity_attention", "=", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", "word_num", ":", "]", "\n", "mask", "=", "torch", ".", "eye", "(", "entity_num", ",", "entity_num", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "expand_as", "(", "entity_attention", ")", "\n", "entity_attention", "[", "~", "mask", "]", "=", "0", "\n", "\n", "", "if", "(", "mask_entself", "==", "None", "and", "self", ".", "config", ".", "mask_entself", ")", "or", "mask_entself", "==", "True", ":", "\n", "            ", "entity_attention", "=", "extended_attention_mask", "[", ":", ",", ":", ",", "word_num", ":", ",", "word_num", ":", "]", "\n", "mask", "=", "torch", ".", "eye", "(", "entity_num", ",", "entity_num", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "expand_as", "(", "entity_attention", ")", "\n", "entity_attention", "[", "mask", "]", "=", "0", "\n", "\n", "", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "return", "extended_attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.RobertaEntityAwareBertModel.forward": [[665, 682], ["models.RobertaEntityAwareBertModel.embeddings", "models.RobertaEntityAwareBertModel.entity_embeddings", "models.RobertaEntityAwareBertModel._compute_extended_attention_mask", "models.RobertaEntityAwareBertModel.encoder", "torch.arange().expand", "torch.ones", "models.RobertaEntityAwareBertModel.pos_entity_embeddings", "torch.arange().expand.size", "torch.arange", "token_input_ids.size"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.RobertaEntityAwareBertModel._compute_extended_attention_mask"], ["", "def", "forward", "(", "self", ",", "token_input_ids", ",", "token_attention_mask", ",", "entity_ids", "=", "None", ",", "entity_attention_mask", "=", "None", ",", "seg_encoding", "=", "None", ")", ":", "\n", "# word_embeddings = self.embeddings(token_input_ids, token_type_ids = seg_encoding)", "\n", "        ", "word_embeddings", "=", "self", ".", "embeddings", "(", "token_input_ids", ",", "token_type_ids", "=", "None", ")", "\n", "\n", "\n", "if", "entity_ids", "is", "None", ":", "\n", "            ", "entity_ids", "=", "torch", ".", "arange", "(", "self", ".", "config", ".", "entity_queries_num", ",", "device", "=", "token_input_ids", ".", "device", ")", ".", "expand", "(", "(", "token_input_ids", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "entity_attention_mask", "=", "torch", ".", "ones", "(", "entity_ids", ".", "size", "(", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "token_input_ids", ".", "device", ")", "\n", "\n", "", "entity_embeddings", "=", "self", ".", "entity_embeddings", "(", "entity_ids", ")", "\n", "attention_mask", "=", "self", ".", "_compute_extended_attention_mask", "(", "token_attention_mask", ",", "entity_attention_mask", ",", "seg_mask", "=", "None", ")", "\n", "\n", "query_pos", "=", "None", "\n", "if", "self", ".", "config", ".", "use_entity_pos", ":", "\n", "            ", "query_pos", "=", "self", ".", "pos_entity_embeddings", "(", "entity_ids", ")", "\n", "# entity_embeddings = query_pos", "\n", "", "return", "self", ".", "encoder", "(", "word_embeddings", ",", "entity_embeddings", ",", "attention_mask", ",", "query_pos", "=", "query_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN._init_weights": [[685, 696], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["    ", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN.__init__": [[715, 835], ["transformers.modeling_utils.PreTrainedModel.__init__", "torch.nn.Dropout", "models.EntityTypePredictor", "models.EntityBoundaryPredictor", "models.EntityBoundaryPredictor", "models.PIQN.init_weights", "models.PIQN.register_buffer", "models.PIQN.register_buffer", "models.RobertaEntityAwareBertModel", "embed.size", "torch.nn.Embedding", "torch.nn.LSTM", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.LSTM", "torch.nn.LSTM", "models.EntityEmbeddings", "models.SelfCrossAttention", "torch.nn.Embedding.from_pretrained", "print", "models.PIQN.model.named_parameters", "torch.arange", "torch.ones", "transformers.models.roberta.modeling_roberta.RobertaLMHead", "models.EntityAwareBertModel", "models.PIQN.model.named_parameters", "models.PIQN.model.named_parameters", "models.PIQN.model.named_parameters", "models.PIQN.lm_head", "transformers.models.bert.modeling_bert.BertOnlyMLMHead", "models.PIQN.cls"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["", "", "def", "__init__", "(", "self", ",", "model_type", ",", "config", ":", "EntityAwareBertConfig", ",", "embed", ":", "torch", ".", "tensor", ",", "entity_type_count", ":", "int", ",", "prop_drop", ":", "float", ",", "freeze_transformer", ":", "bool", ",", "pos_size", ":", "int", "=", "25", ",", "char_lstm_layers", ":", "int", "=", "1", ",", "char_lstm_drop", ":", "int", "=", "0.2", ",", "char_size", ":", "int", "=", "25", ",", "use_glove", ":", "bool", "=", "True", ",", "use_pos", ":", "bool", "=", "True", ",", "use_char_lstm", ":", "bool", "=", "True", ",", "lstm_layers", "=", "3", ",", "pool_type", ":", "str", "=", "\"max\"", ",", "word_mask_tok2ent", "=", "None", ",", "word_mask_ent2tok", "=", "None", ",", "word_mask_ent2ent", "=", "None", ",", "word_mask_entself", "=", "None", ",", "share_query_pos", "=", "False", ",", "use_token_level_encoder", "=", "True", ",", "num_token_entity_encoderlayer", "=", "1", ",", "use_entity_attention", "=", "False", ",", "use_masked_lm", "=", "False", ",", "use_aux_loss", "=", "False", ",", "use_lstm", "=", "False", ",", "inlcude_subword_aux_loss", "=", "False", ",", "last_layer_for_loss", "=", "3", ",", "split_epoch", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model_type", "=", "model_type", "\n", "if", "model_type", "==", "\"roberta\"", ":", "\n", "            ", "self", ".", "roberta", "=", "RobertaEntityAwareBertModel", "(", "config", ")", "\n", "self", ".", "model", "=", "self", ".", "roberta", "\n", "if", "use_masked_lm", ":", "\n", "                ", "self", ".", "lm_head", "=", "RobertaLMHead", "(", "config", ")", "\n", "self", ".", "mlm_head", "=", "lambda", "*", "args", ",", "**", "kwagrs", ":", "self", ".", "lm_head", "(", "*", "args", ",", "**", "kwagrs", ")", "\n", "# self.model = lambda *args, **kwagrs: self.roberta(*args, **kwagrs)", "\n", "\n", "", "", "elif", "model_type", "==", "\"bert\"", ":", "\n", "            ", "self", ".", "bert", "=", "EntityAwareBertModel", "(", "config", ")", "\n", "self", ".", "model", "=", "self", ".", "bert", "\n", "if", "use_masked_lm", ":", "\n", "                ", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "config", ")", "\n", "self", ".", "mlm_head", "=", "lambda", "*", "args", ",", "**", "kwagrs", ":", "self", ".", "cls", "(", "*", "args", ",", "**", "kwagrs", ")", "\n", "# self.model = lambda *args, **kwagrs: self.bert(*args, **kwagrs)", "\n", "", "", "self", ".", "_keys_to_ignore_on_save", "=", "[", "\"model.\"", "+", "k", "for", "k", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "]", "\n", "self", ".", "_keys_to_ignore_on_load_unexpected", "=", "[", "\"model.\"", "+", "k", "for", "k", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "]", "\n", "self", ".", "_keys_to_ignore_on_load_missing", "=", "[", "\"model.\"", "+", "k", "for", "k", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "]", "\n", "self", ".", "use_masked_lm", "=", "use_masked_lm", "\n", "self", ".", "_entity_type_count", "=", "entity_type_count", "\n", "self", ".", "prop_drop", "=", "prop_drop", "\n", "if", "embed", "is", "not", "None", ":", "\n", "            ", "self", ".", "wordvec_size", "=", "embed", ".", "size", "(", "-", "1", ")", "\n", "", "self", ".", "pos_size", "=", "pos_size", "\n", "self", ".", "use_glove", "=", "use_glove", "\n", "self", ".", "use_pos", "=", "use_pos", "\n", "self", ".", "char_lstm_layers", "=", "char_lstm_layers", "\n", "self", ".", "char_lstm_drop", "=", "char_lstm_drop", "\n", "self", ".", "char_size", "=", "char_size", "\n", "self", ".", "use_char_lstm", "=", "use_char_lstm", "\n", "self", ".", "_share_query_pos", "=", "share_query_pos", "\n", "self", ".", "use_token_level_encoder", "=", "use_token_level_encoder", "\n", "self", ".", "num_token_entity_encoderlayer", "=", "num_token_entity_encoderlayer", "\n", "self", ".", "split_epoch", "=", "split_epoch", "\n", "self", ".", "use_entity_attention", "=", "use_entity_attention", "\n", "self", ".", "use_aux_loss", "=", "use_aux_loss", "\n", "self", ".", "use_lstm", "=", "use_lstm", "\n", "\n", "self", ".", "word_mask_tok2ent", "=", "word_mask_tok2ent", "\n", "self", ".", "word_mask_ent2tok", "=", "word_mask_ent2tok", "\n", "self", ".", "word_mask_ent2ent", "=", "word_mask_ent2ent", "\n", "self", ".", "word_mask_entself", "=", "word_mask_entself", "\n", "\n", "\n", "# lstm_input_size = 0", "\n", "lstm_input_size", "=", "config", ".", "hidden_size", "\n", "# assert use_glove or use_pos or use_char_lstm, \"At least one be True\"", "\n", "\n", "\n", "if", "use_glove", ":", "\n", "            ", "lstm_input_size", "+=", "self", ".", "wordvec_size", "\n", "", "if", "use_pos", ":", "\n", "            ", "lstm_input_size", "+=", "self", ".", "pos_size", "\n", "self", ".", "pos_embedding", "=", "nn", ".", "Embedding", "(", "100", ",", "pos_size", ")", "\n", "", "if", "use_char_lstm", ":", "\n", "            ", "lstm_input_size", "+=", "self", ".", "char_size", "*", "2", "\n", "self", ".", "char_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "char_size", ",", "hidden_size", "=", "char_size", ",", "num_layers", "=", "char_lstm_layers", ",", "bidirectional", "=", "True", ",", "dropout", "=", "char_lstm_drop", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "char_embedding", "=", "nn", ".", "Embedding", "(", "103", ",", "char_size", ")", "\n", "\n", "", "if", "not", "self", ".", "use_lstm", "and", "(", "use_glove", "or", "use_pos", "or", "use_char_lstm", ")", ":", "\n", "            ", "self", ".", "reduce_dimension", "=", "nn", ".", "Linear", "(", "lstm_input_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "", "if", "self", ".", "use_lstm", ":", "\n", "            ", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "lstm_input_size", ",", "hidden_size", "=", "config", ".", "hidden_size", "//", "2", ",", "num_layers", "=", "lstm_layers", ",", "bidirectional", "=", "True", ",", "dropout", "=", "0.5", ",", "batch_first", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "use_lstm", "and", "inlcude_subword_aux_loss", ":", "\n", "            ", "self", ".", "subword_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "lstm_input_size", ",", "hidden_size", "=", "config", ".", "hidden_size", "//", "2", ",", "num_layers", "=", "lstm_layers", ",", "bidirectional", "=", "True", ",", "dropout", "=", "0.5", ",", "batch_first", "=", "True", ")", "\n", "\n", "", "cls_size", "=", "config", ".", "hidden_size", "\n", "\n", "self", ".", "pool_type", "=", "pool_type", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "prop_drop", ")", "\n", "\n", "# self.entity_classifier = nn.Sequential(", "\n", "#     # nn.Linear(cls_size, config.hidden_size),", "\n", "#     nn.GELU(),", "\n", "#     nn.Linear(cls_size, entity_type_count)", "\n", "# )", "\n", "\n", "self", ".", "entity_classifier", "=", "EntityTypePredictor", "(", "config", ",", "cls_size", ",", "entity_type_count", ")", "\n", "\n", "self", ".", "left_boundary_classfier", "=", "EntityBoundaryPredictor", "(", "config", ")", "\n", "self", ".", "right_boundary_classfier", "=", "EntityBoundaryPredictor", "(", "config", ")", "\n", "\n", "if", "not", "self", ".", "_share_query_pos", "and", "self", ".", "use_token_level_encoder", ":", "\n", "            ", "self", ".", "pos_entity_embeddings", "=", "EntityEmbeddings", "(", "config", ",", "is_pos_embedding", "=", "True", ")", "\n", "# self.pos_entity_embeddings.entity_embeddings = self.model.pos_entity_embeddings.entity_embeddings", "\n", "\n", "\n", "", "if", "self", ".", "use_token_level_encoder", ":", "\n", "            ", "self", ".", "selfcrossattention", "=", "SelfCrossAttention", "(", "config", ",", "use_token_level_encoder", ",", "use_entity_attention", ",", "self", ".", "num_token_entity_encoderlayer", ")", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n", "if", "use_glove", ":", "\n", "            ", "self", ".", "wordvec_embedding", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "embed", ",", "freeze", "=", "False", ")", "\n", "\n", "", "self", ".", "freeze_transformer", "=", "freeze_transformer", "\n", "self", ".", "split_epoch", "=", "split_epoch", "\n", "self", ".", "has_changed", "=", "False", "\n", "self", ".", "inlcude_subword_aux_loss", "=", "inlcude_subword_aux_loss", "\n", "self", ".", "last_layer_for_loss", "=", "last_layer_for_loss", "\n", "\n", "if", "freeze_transformer", "or", "self", ".", "split_epoch", ">", "0", ":", "\n", "            ", "print", "(", "\"Freeze transformer weights\"", ")", "\n", "# if self.model_type == \"bert\":", "\n", "#     model = self.bert", "\n", "# if self.model_type == \"roberta\":", "\n", "#     model = self.roberta", "\n", "for", "name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"entity\"", "not", "in", "name", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "self", ".", "register_buffer", "(", "\"entity_ids\"", ",", "torch", ".", "arange", "(", "self", ".", "config", ".", "entity_queries_num", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"entity_attention_mask\"", ",", "torch", ".", "ones", "(", "self", ".", "config", ".", "entity_queries_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN.combine": [[836, 869], ["len", "len", "sup.sum.sum.sum", "sup.sum.sum.sum", "sub.unsqueeze().repeat", "sup.sum.sum.sum", "sub.unsqueeze().repeat", "sub.unsqueeze().repeat", "sup.sum.sum.max", "sup.sum.sum.sum", "sup.sum.sum.max", "sup_mask.unsqueeze", "sub.unsqueeze", "sup_mask.unsqueeze", "sub.unsqueeze", "sub.unsqueeze", "sup_mask.unsqueeze", "sup_mask.unsqueeze", "sup_mask.unsqueeze", "sup_mask.unsqueeze"], "methods", ["None"], ["", "def", "combine", "(", "self", ",", "sub", ",", "sup_mask", ",", "pool_type", "=", "\"max\"", ")", ":", "\n", "        ", "sup", "=", "None", "\n", "if", "len", "(", "sub", ".", "shape", ")", "==", "len", "(", "sup_mask", ".", "shape", ")", ":", "\n", "            ", "if", "pool_type", "==", "\"mean\"", ":", "\n", "                ", "size", "=", "(", "sup_mask", "==", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "+", "1e-30", "\n", "m", "=", "(", "sup_mask", ".", "unsqueeze", "(", "-", "1", ")", "==", "1", ")", ".", "float", "(", ")", "\n", "sup", "=", "m", "*", "sub", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "sup_mask", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "sup", "=", "sup", ".", "sum", "(", "dim", "=", "2", ")", "/", "size", "\n", "", "if", "pool_type", "==", "\"sum\"", ":", "\n", "                ", "m", "=", "(", "sup_mask", ".", "unsqueeze", "(", "-", "1", ")", "==", "1", ")", ".", "float", "(", ")", "\n", "sup", "=", "m", "*", "sub", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "sup_mask", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "sup", "=", "sup", ".", "sum", "(", "dim", "=", "2", ")", "\n", "", "if", "pool_type", "==", "\"max\"", ":", "\n", "                ", "m", "=", "(", "sup_mask", ".", "unsqueeze", "(", "-", "1", ")", "==", "0", ")", ".", "float", "(", ")", "*", "(", "-", "1e30", ")", "\n", "sup", "=", "m", "+", "sub", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "sup_mask", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "sup", "=", "sup", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", "\n", "sup", "[", "sup", "==", "-", "1e30", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "if", "pool_type", "==", "\"mean\"", ":", "\n", "                ", "size", "=", "(", "sup_mask", "==", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "+", "1e-30", "\n", "m", "=", "(", "sup_mask", ".", "unsqueeze", "(", "-", "1", ")", "==", "1", ")", ".", "float", "(", ")", "\n", "sup", "=", "m", "*", "sub", "\n", "sup", "=", "sup", ".", "sum", "(", "dim", "=", "2", ")", "/", "size", "\n", "", "if", "pool_type", "==", "\"sum\"", ":", "\n", "                ", "m", "=", "(", "sup_mask", ".", "unsqueeze", "(", "-", "1", ")", "==", "1", ")", ".", "float", "(", ")", "\n", "sup", "=", "m", "*", "sub", "\n", "sup", "=", "sup", ".", "sum", "(", "dim", "=", "2", ")", "\n", "", "if", "pool_type", "==", "\"max\"", ":", "\n", "                ", "m", "=", "(", "sup_mask", ".", "unsqueeze", "(", "-", "1", ")", "==", "0", ")", ".", "float", "(", ")", "*", "(", "-", "1e30", ")", "\n", "sup", "=", "m", "+", "sub", "\n", "sup", "=", "sup", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", "\n", "sup", "[", "sup", "==", "-", "1e30", "]", "=", "0", "\n", "", "", "return", "sup", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN._common_forward": [[870, 981], ["context_masks.float.float.float", "models.PIQN.entity_ids.expand", "models.PIQN.entity_attention_mask.expand", "models.PIQN.model", "token_masks.long().sum", "models.PIQN.combine", "models.PIQN._common_forward.add_other_embedding"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN.combine"], ["", "def", "_common_forward", "(", "self", ",", "encodings", ":", "torch", ".", "tensor", ",", "context_masks", ":", "torch", ".", "tensor", ",", "seg_encoding", ":", "torch", ".", "tensor", ",", "context2token_masks", ":", "torch", ".", "tensor", ",", "token_masks", ":", "torch", ".", "tensor", ",", "pos_encoding", ":", "torch", ".", "tensor", "=", "None", ",", "wordvec_encoding", ":", "torch", ".", "tensor", "=", "None", ",", "char_encoding", ":", "torch", ".", "tensor", "=", "None", ",", "token_masks_char", "=", "None", ",", "char_count", ":", "torch", ".", "tensor", "=", "None", ")", ":", "\n", "        ", "context_masks", "=", "context_masks", ".", "float", "(", ")", "\n", "# set_trace", "\n", "\n", "entity_ids", "=", "self", ".", "entity_ids", ".", "expand", "(", "encodings", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "entity_attention_mask", "=", "self", ".", "entity_attention_mask", ".", "expand", "(", "encodings", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "h", ",", "h_entity", ",", "intermediate_subword_entity", "=", "self", ".", "model", "(", "token_input_ids", "=", "encodings", ",", "token_attention_mask", "=", "context_masks", ",", "entity_ids", "=", "entity_ids", ",", "entity_attention_mask", "=", "entity_attention_mask", ",", "seg_encoding", "=", "seg_encoding", ")", "\n", "# h_entity = h_entity + self.bert.entity_embeddings.entity_embeddings.weight", "\n", "\n", "masked_seq_logits", "=", "None", "\n", "if", "self", ".", "use_masked_lm", "and", "self", ".", "training", ":", "\n", "            ", "masked_seq_logits", "=", "self", ".", "mlm_head", "(", "h", ")", "\n", "\n", "", "batch_size", "=", "encodings", ".", "shape", "[", "0", "]", "\n", "token_count", "=", "token_masks", ".", "long", "(", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "h_token", "=", "self", ".", "combine", "(", "h", ",", "context2token_masks", ",", "self", ".", "pool_type", ")", "\n", "\n", "intermediate_word_entity", "=", "[", "]", "\n", "for", "subword_entity_dic", "in", "intermediate_subword_entity", ":", "\n", "            ", "entity", "=", "subword_entity_dic", "[", "\"h_entity\"", "]", "\n", "token", "=", "self", ".", "combine", "(", "subword_entity_dic", "[", "\"h_token\"", "]", ",", "context2token_masks", ",", "self", ".", "pool_type", ")", "\n", "intermediate_word_entity", ".", "append", "(", "{", "\"h_token\"", ":", "token", ",", "\"h_entity\"", ":", "entity", "}", ")", "\n", "\n", "", "def", "add_other_embedding", "(", "h_token", ",", "char_count", ",", "token_masks_char", ",", "char_encoding", ")", ":", "\n", "            ", "embeds", "=", "[", "h_token", "]", "\n", "\n", "if", "self", ".", "use_pos", ":", "\n", "                ", "pos_embed", "=", "self", ".", "pos_embedding", "(", "pos_encoding", ")", "\n", "pos_embed", "=", "self", ".", "dropout", "(", "pos_embed", ")", "\n", "embeds", ".", "append", "(", "pos_embed", ")", "\n", "", "if", "self", ".", "use_glove", ":", "\n", "                ", "word_embed", "=", "self", ".", "wordvec_embedding", "(", "wordvec_encoding", ")", "\n", "word_embed", "=", "self", ".", "dropout", "(", "word_embed", ")", "\n", "embeds", ".", "append", "(", "word_embed", ")", "\n", "", "if", "self", ".", "use_char_lstm", ":", "\n", "                ", "char_count", "=", "char_count", ".", "view", "(", "-", "1", ")", "\n", "token_masks_char", "=", "token_masks_char", "\n", "max_token_count", "=", "char_encoding", ".", "size", "(", "1", ")", "\n", "max_char_count", "=", "char_encoding", ".", "size", "(", "2", ")", "\n", "\n", "char_encoding", "=", "char_encoding", ".", "view", "(", "max_token_count", "*", "batch_size", ",", "max_char_count", ")", "\n", "\n", "char_encoding", "[", "char_count", "==", "0", "]", "[", ":", ",", "0", "]", "=", "101", "\n", "char_count", "[", "char_count", "==", "0", "]", "=", "1", "\n", "char_embed", "=", "self", ".", "char_embedding", "(", "char_encoding", ")", "\n", "char_embed", "=", "self", ".", "dropout", "(", "char_embed", ")", "\n", "char_embed_packed", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "input", "=", "char_embed", ",", "lengths", "=", "char_count", ".", "tolist", "(", ")", ",", "enforce_sorted", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "char_embed_packed_o", ",", "(", "_", ",", "_", ")", "=", "self", ".", "char_lstm", "(", "char_embed_packed", ")", "\n", "char_embed", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "char_embed_packed_o", ",", "batch_first", "=", "True", ")", "\n", "char_embed", "=", "char_embed", ".", "view", "(", "batch_size", ",", "max_token_count", ",", "max_char_count", ",", "self", ".", "char_size", "*", "2", ")", "\n", "h_token_char", "=", "self", ".", "combine", "(", "char_embed", ",", "token_masks_char", ",", "\"mean\"", ")", "\n", "embeds", ".", "append", "(", "h_token_char", ")", "\n", "\n", "", "h_token", "=", "torch", ".", "cat", "(", "embeds", ",", "dim", "=", "-", "1", ")", "\n", "if", "len", "(", "embeds", ")", ">", "1", "and", "not", "self", ".", "use_lstm", ":", "\n", "                ", "h_token", "=", "self", ".", "reduce_dimension", "(", "h_token", ")", "\n", "", "return", "h_token", "\n", "\n", "", "h_token", "=", "add_other_embedding", "(", "h_token", ",", "char_count", ",", "token_masks_char", ",", "char_encoding", ")", "\n", "\n", "if", "self", ".", "use_lstm", ":", "\n", "            ", "h_token", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "input", "=", "h_token", ",", "lengths", "=", "token_count", ".", "squeeze", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ",", "enforce_sorted", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "h_token", ",", "(", "_", ",", "_", ")", "=", "self", ".", "lstm", "(", "h_token", ")", "\n", "h_token", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "h_token", ",", "batch_first", "=", "True", ")", "\n", "\n", "", "entity_attention_mask", "=", "torch", ".", "ones", "(", "h_entity", ".", "size", "(", ")", "[", ":", "-", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "h_entity", ".", "device", ")", "\n", "# token_entity_attention_mask = self.model._compute_extended_attention_mask(token_masks, entity_attention_mask, mask_ent2tok = None, mask_tok2ent = None, mask_ent2ent = None, mask_entself = True)", "\n", "token_entity_attention_mask", "=", "self", ".", "model", ".", "_compute_extended_attention_mask", "(", "token_masks", ",", "entity_attention_mask", ",", "mask_ent2tok", "=", "self", ".", "word_mask_ent2tok", ",", "mask_tok2ent", "=", "self", ".", "word_mask_tok2ent", ",", "mask_ent2ent", "=", "self", ".", "word_mask_ent2ent", ",", "mask_entself", "=", "self", ".", "word_mask_entself", ")", "\n", "\n", "query_pos", "=", "None", "\n", "if", "self", ".", "config", ".", "use_entity_pos", "and", "self", ".", "_share_query_pos", "and", "self", ".", "use_token_level_encoder", ":", "\n", "            ", "query_pos", "=", "self", ".", "model", ".", "pos_entity_embeddings", "(", "entity_ids", ")", "\n", "\n", "", "if", "not", "self", ".", "_share_query_pos", "and", "self", ".", "use_token_level_encoder", ":", "\n", "            ", "query_pos", "=", "self", ".", "pos_entity_embeddings", "(", "entity_ids", ")", "\n", "\n", "", "intermediate", "=", "[", "]", "\n", "if", "self", ".", "use_token_level_encoder", ":", "\n", "            ", "h_token", ",", "h_entity", ",", "intermediate", "=", "self", ".", "selfcrossattention", "(", "h_token", ",", "h_entity", ",", "token_entity_attention_mask", ",", "query_pos", "=", "query_pos", ")", "\n", "\n", "", "intermediate_word_entity", "=", "intermediate_word_entity", "[", "-", "self", ".", "last_layer_for_loss", ":", "]", "\n", "if", "self", ".", "inlcude_subword_aux_loss", ":", "\n", "            ", "for", "i", ",", "v", "in", "enumerate", "(", "intermediate_word_entity", ")", ":", "\n", "                ", "h_token", ",", "h_entity", "=", "v", "[", "\"h_token\"", "]", ",", "v", "[", "\"h_entity\"", "]", "\n", "h_token", "=", "add_other_embedding", "(", "h_token", ",", "char_count", ",", "token_masks_char", ",", "char_encoding", ")", "\n", "if", "self", ".", "use_lstm", ":", "\n", "                    ", "h_token", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "input", "=", "h_token", ",", "lengths", "=", "token_count", ".", "squeeze", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ",", "enforce_sorted", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "h_token", ",", "(", "_", ",", "_", ")", "=", "self", ".", "subword_lstm", "(", "h_token", ")", "\n", "h_token", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "h_token", ",", "batch_first", "=", "True", ")", "\n", "v", "=", "{", "\"h_token\"", ":", "h_token", ",", "\"h_entity\"", ":", "h_entity", "}", "\n", "", "intermediate", ".", "insert", "(", "i", ",", "v", ")", "\n", "", "", "output", "=", "[", "]", "\n", "\n", "if", "self", ".", "use_aux_loss", "and", "len", "(", "intermediate", ")", "!=", "0", ":", "\n", "            ", "for", "h_dict", "in", "intermediate", ":", "\n", "                ", "h_token", ",", "h_entity", "=", "h_dict", "[", "\"h_token\"", "]", ",", "h_dict", "[", "\"h_entity\"", "]", "\n", "p_left", "=", "self", ".", "left_boundary_classfier", "(", "h_token", ",", "h_entity", ",", "token_masks", ")", "\n", "p_right", "=", "self", ".", "right_boundary_classfier", "(", "h_token", ",", "h_entity", ",", "token_masks", ")", "\n", "entity_logits", "=", "self", ".", "entity_classifier", "(", "h_entity", ",", "h_token", ",", "p_left", ",", "p_right", ",", "token_masks", ")", "\n", "output", ".", "append", "(", "{", "\"p_left\"", ":", "p_left", ",", "\"p_right\"", ":", "p_right", ",", "\"entity_logits\"", ":", "entity_logits", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "p_left", "=", "self", ".", "left_boundary_classfier", "(", "h_token", ",", "h_entity", ",", "token_masks", ")", "\n", "p_right", "=", "self", ".", "right_boundary_classfier", "(", "h_token", ",", "h_entity", ",", "token_masks", ")", "\n", "entity_logits", "=", "self", ".", "entity_classifier", "(", "h_entity", ",", "h_token", ",", "p_left", ",", "p_right", ",", "token_masks", ")", "\n", "output", "=", "[", "{", "\"p_left\"", ":", "p_left", ",", "\"p_right\"", ":", "p_right", ",", "\"entity_logits\"", ":", "entity_logits", "}", "]", "\n", "# entity_logits = self.entity_classifier(h_entity)", "\n", "\n", "\n", "", "return", "entity_logits", ",", "p_left", ",", "p_right", ",", "masked_seq_logits", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN._forward_train": [[982, 991], ["models.PIQN._common_forward", "print", "models.PIQN.model.named_parameters"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN._common_forward"], ["", "def", "_forward_train", "(", "self", ",", "encodings", ":", "torch", ".", "tensor", ",", "context_masks", ":", "torch", ".", "tensor", ",", "seg_encoding", ":", "torch", ".", "tensor", ",", "context2token_masks", ":", "torch", ".", "tensor", ",", "token_masks", ":", "torch", ".", "tensor", ",", "epoch", ",", "pos_encoding", ":", "torch", ".", "tensor", "=", "None", ",", "wordvec_encoding", ":", "torch", ".", "tensor", "=", "None", ",", "char_encoding", ":", "torch", ".", "tensor", "=", "None", ",", "token_masks_char", "=", "None", ",", "char_count", ":", "torch", ".", "tensor", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "has_changed", "and", "epoch", ">=", "self", ".", "split_epoch", "and", "not", "self", ".", "freeze_transformer", ":", "\n", "            ", "print", "(", "\"Now, update bert weights\"", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "", "self", ".", "has_changed", "=", "True", "\n", "\n", "", "return", "self", ".", "_common_forward", "(", "encodings", ",", "context_masks", ",", "seg_encoding", ",", "context2token_masks", ",", "token_masks", ",", "pos_encoding", ",", "\n", "wordvec_encoding", ",", "char_encoding", ",", "token_masks_char", ",", "char_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN._forward_eval": [[992, 995], ["models.PIQN._common_forward"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN._common_forward"], ["", "def", "_forward_eval", "(", "self", ",", "encodings", ":", "torch", ".", "tensor", ",", "context_masks", ":", "torch", ".", "tensor", ",", "seg_encoding", ":", "torch", ".", "tensor", ",", "context2token_masks", ":", "torch", ".", "tensor", ",", "token_masks", ":", "torch", ".", "tensor", ",", "pos_encoding", ":", "torch", ".", "tensor", "=", "None", ",", "wordvec_encoding", ":", "torch", ".", "tensor", "=", "None", ",", "char_encoding", ":", "torch", ".", "tensor", "=", "None", ",", "token_masks_char", "=", "None", ",", "char_count", ":", "torch", ".", "tensor", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "_common_forward", "(", "encodings", ",", "context_masks", ",", "seg_encoding", ",", "context2token_masks", ",", "token_masks", ",", "pos_encoding", ",", "\n", "wordvec_encoding", ",", "char_encoding", ",", "token_masks_char", ",", "char_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN.forward": [[996, 1001], ["models.PIQN._forward_train", "models.PIQN._forward_eval"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN._forward_train", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.PIQN._forward_eval"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "evaluate", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "evaluate", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_eval", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.BertPIQN.__init__": [[1009, 1011], ["models.PIQN.__init__"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwagrs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"bert\"", ",", "*", "args", ",", "**", "kwagrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.RobertaPIQN.__init__": [[1019, 1021], ["models.PIQN.__init__"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwagrs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"roberta\"", ",", "*", "args", ",", "**", "kwagrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.get_model": [[1027, 1029], ["None"], "function", ["None"], ["def", "get_model", "(", "name", ")", ":", "\n", "    ", "return", "_MODELS", "[", "name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.matcher.HungarianMatcher.__init__": [[14, 25], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["def", "__init__", "(", "self", ",", "cost_class", ":", "float", "=", "1", ",", "cost_span", ":", "float", "=", "1", ",", "solver", "=", "\"hungarian\"", ")", ":", "\n", "        ", "\"\"\"Creates the matcher\n        Params:\n            cost_class: This is the relative weight of the classification error in the matching cost\n            cost_bbox: This is the relative weight of the L1 error of the bounding box coordinates in the matching cost\n            cost_giou: This is the relative weight of the giou loss of the bounding box in the matching cost\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cost_class", "=", "cost_class", "\n", "self", ".", "cost_span", "=", "cost_span", "\n", "self", ".", "solver", "=", "solver", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.matcher.HungarianMatcher.forward": [[26, 81], ["torch.no_grad", "outputs[].flatten().softmax", "outputs[].flatten", "outputs[].flatten", "C.cpu.cpu.view", "C.cpu.cpu.cpu", "torch.as_tensor", "torch.as_tensor", "list", "list", "outputs[].flatten", "scipy.optimize.linear_sum_assignment", "range", "range", "enumerate", "lap.auction_lap", "enumerate", "C.cpu.cpu.split", "C.cpu.cpu.split"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.flatten", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.flatten", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.flatten", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.lap.auction_lap"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\" Performs the matching\n        Params:\n            outputs: This is a dict that contains at least these entries:\n                 \"pred_logits\": Tensor of dim [batch_size, num_queries, num_classes] with the classification logits\n                 \"pred_boxes\": Tensor of dim [batch_size, num_queries, 4] with the predicted box coordinates\n            targets: This is a list of targets (len(targets) = batch_size), where each target is a dict containing:\n                 \"labels\": Tensor of dim [num_target_boxes] (where num_target_boxes is the number of ground-truth\n                           objects in the target) containing the class labels\n                 \"boxes\": Tensor of dim [num_target_boxes, 4] containing the target box coordinates\n        Returns:\n            A list of size batch_size, containing tuples of (index_i, index_j) where:\n                - index_i is the indices of the selected predictions (in order)\n                - index_j is the indices of the corresponding selected targets (in order)\n            For each batch element, it holds:\n                len(index_i) = len(index_j) = min(num_queries, num_target_boxes)\n        \"\"\"", "\n", "\n", "if", "self", ".", "solver", "==", "\"order\"", ":", "\n", "            ", "sizes", "=", "targets", "[", "\"sizes\"", "]", "\n", "indices", "=", "[", "(", "list", "(", "range", "(", "size", ")", ")", ",", "list", "(", "range", "(", "size", ")", ")", ")", "for", "size", "in", "sizes", "]", "\n", "", "else", ":", "\n", "            ", "bs", ",", "num_queries", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# We flatten to compute the cost matrices in a batch", "\n", "out_prob", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ".", "softmax", "(", "dim", "=", "-", "1", ")", "# [batch_size * num_queries, 8]", "\n", "\n", "entity_left", "=", "outputs", "[", "\"pred_left\"", "]", ".", "flatten", "(", "0", ",", "1", ")", "\n", "entity_right", "=", "outputs", "[", "\"pred_right\"", "]", ".", "flatten", "(", "0", ",", "1", ")", "# [batch_size * num_queries]", "\n", "\n", "\n", "gt_ids", "=", "targets", "[", "\"labels\"", "]", "\n", "gt_left", "=", "targets", "[", "\"gt_left\"", "]", "\n", "gt_right", "=", "targets", "[", "\"gt_right\"", "]", "\n", "\n", "# import pdb;pdb.set_trace()", "\n", "cost_class", "=", "-", "out_prob", "[", ":", ",", "gt_ids", "]", "\n", "cost_span", "=", "-", "(", "entity_left", "[", ":", ",", "gt_left", "]", "+", "entity_right", "[", ":", ",", "gt_right", "]", ")", "\n", "\n", "# Final cost matrix", "\n", "C", "=", "self", ".", "cost_span", "*", "cost_span", "+", "self", ".", "cost_class", "*", "cost_class", "\n", "\n", "C", "=", "C", ".", "view", "(", "bs", ",", "num_queries", ",", "-", "1", ")", "\n", "\n", "sizes", "=", "targets", "[", "\"sizes\"", "]", "\n", "indices", "=", "None", "\n", "\n", "if", "self", ".", "solver", "==", "\"hungarian\"", ":", "\n", "                ", "C", "=", "C", ".", "cpu", "(", ")", "\n", "indices", "=", "[", "linear_sum_assignment", "(", "c", "[", "i", "]", ")", "for", "i", ",", "c", "in", "enumerate", "(", "C", ".", "split", "(", "sizes", ",", "-", "1", ")", ")", "]", "\n", "", "if", "self", ".", "solver", "==", "\"auction\"", ":", "\n", "                ", "indices", "=", "[", "auction_lap", "(", "c", "[", "i", "]", ")", "[", ":", "2", "]", "for", "i", ",", "c", "in", "enumerate", "(", "C", ".", "split", "(", "sizes", ",", "-", "1", ")", ")", "]", "\n", "\n", "", "", "return", "[", "(", "torch", ".", "as_tensor", "(", "i", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "torch", ".", "as_tensor", "(", "j", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "for", "i", ",", "j", "in", "indices", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer.__init__": [[24, 92], ["str().replace", "os.path.join", "dict", "logging.Formatter", "logging.getLogger", "piqn.util.reset_logger", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "dict", "piqn.util.create_directories_dir", "hasattr", "os.path.join", "piqn.util.create_directories_dir", "logging.FileHandler", "logging.FileHandler.setFormatter", "trainer.BaseTrainer._logger.addHandler", "trainer.BaseTrainer._logger.addHandler", "trainer.BaseTrainer._logger.setLevel", "trainer.BaseTrainer._logger.setLevel", "torch.SummaryWriter", "torch.SummaryWriter", "trainer.BaseTrainer._log_arguments", "piqn.util.set_seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "str", "os.path.join", "str", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.reset_logger", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.create_directories_dir", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.create_directories_dir", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_arguments", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.set_seed"], ["def", "__init__", "(", "self", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "_debug", "=", "self", ".", "args", ".", "debug", "\n", "\n", "self", ".", "local_rank", "=", "args", ".", "local_rank", "\n", "self", ".", "record", "=", "False", "\n", "if", "self", ".", "local_rank", "<", "1", ":", "\n", "            ", "self", ".", "record", "=", "True", "\n", "\n", "# logging", "\n", "", "name", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "self", ".", "_log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_path", ",", "self", ".", "args", ".", "label", ",", "name", ")", "\n", "if", "self", ".", "record", ":", "\n", "            ", "util", ".", "create_directories_dir", "(", "self", ".", "_log_path", ")", "\n", "\n", "", "if", "hasattr", "(", "args", ",", "'save_path'", ")", "and", "self", ".", "record", ":", "\n", "            ", "self", ".", "_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save_path", ",", "self", ".", "args", ".", "label", ",", "name", ")", "\n", "util", ".", "create_directories_dir", "(", "self", ".", "_save_path", ")", "\n", "\n", "", "self", ".", "_log_paths", "=", "dict", "(", ")", "\n", "\n", "# file + console logging", "\n", "log_formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s\"", ")", "\n", "self", ".", "_logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "util", ".", "reset_logger", "(", "self", ".", "_logger", ")", "\n", "\n", "if", "self", ".", "record", ":", "\n", "            ", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_log_path", ",", "'all.log'", ")", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "self", ".", "_logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "if", "\"pretrain\"", "not", "in", "self", ".", "args", ".", "label", ":", "\n", "            ", "self", ".", "_logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "", "if", "self", ".", "_debug", ":", "\n", "            ", "self", ".", "_logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "# tensorboard summary", "\n", "", "if", "self", ".", "record", ":", "\n", "            ", "self", ".", "_summary_writer", "=", "tensorboard", ".", "SummaryWriter", "(", "self", ".", "_log_path", ")", "\n", "\n", "", "self", ".", "_best_results", "=", "dict", "(", ")", "\n", "if", "self", ".", "record", ":", "\n", "            ", "self", ".", "_log_arguments", "(", ")", "\n", "\n", "# CUDA devices", "\n", "# self._device = torch.device(\"cuda\" if torch.cuda.is_available() and not args.cpu else \"cpu\")", "\n", "", "if", "args", ".", "cpu", ":", "\n", "            ", "device", "=", "\"cpu\"", "\n", "", "else", ":", "\n", "            ", "device", "=", "\"cuda:\"", "+", "str", "(", "args", ".", "device_id", ")", "\n", "\n", "\n", "# set seed", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "            ", "util", ".", "set_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "!=", "-", "1", "and", "\"eval\"", "not", "in", "args", ".", "label", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ",", "rank", "=", "args", ".", "local_rank", ",", "world_size", "=", "args", ".", "world_size", ")", "\n", "self", ".", "_device", "=", "torch", ".", "device", "(", "'cuda'", ",", "args", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_device", "=", "torch", ".", "device", "(", "device", ")", "\n", "self", ".", "_gpu_count", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._add_dataset_logging": [[93, 104], ["dict", "data.items", "os.path.join", "piqn.util.create_csv"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.create_csv"], ["", "", "def", "_add_dataset_logging", "(", "self", ",", "*", "labels", ",", "data", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", ")", ":", "\n", "        ", "for", "label", "in", "labels", ":", "\n", "            ", "dic", "=", "dict", "(", ")", "\n", "\n", "for", "key", ",", "columns", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_log_path", ",", "'%s_%s.csv'", "%", "(", "key", ",", "label", ")", ")", "\n", "util", ".", "create_csv", "(", "path", ",", "*", "columns", ")", "\n", "dic", "[", "key", "]", "=", "path", "\n", "\n", "", "self", ".", "_log_paths", "[", "label", "]", "=", "dic", "\n", "self", ".", "_best_results", "[", "label", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_arguments": [[105, 109], ["piqn.util.save_dict", "piqn.util.summarize_dict"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.save_dict", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.summarize_dict"], ["", "", "def", "_log_arguments", "(", "self", ")", ":", "\n", "        ", "util", ".", "save_dict", "(", "self", ".", "_log_path", ",", "self", ".", "args", ",", "'args'", ")", "\n", "if", "self", ".", "_summary_writer", "is", "not", "None", ":", "\n", "            ", "util", ".", "summarize_dict", "(", "self", ".", "_summary_writer", ",", "self", ".", "args", ",", "'args'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard": [[110, 113], ["trainer.BaseTrainer._summary_writer.add_scalar"], "methods", ["None"], ["", "", "def", "_log_tensorboard", "(", "self", ",", "dataset_label", ":", "str", ",", "data_label", ":", "str", ",", "data", ":", "object", ",", "iteration", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "_summary_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "_summary_writer", ".", "add_scalar", "(", "'data/%s/%s'", "%", "(", "dataset_label", ",", "data_label", ")", ",", "data", ",", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_csv": [[114, 117], ["piqn.util.append_csv"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.append_csv"], ["", "", "def", "_log_csv", "(", "self", ",", "dataset_label", ":", "str", ",", "data_label", ":", "str", ",", "*", "data", ":", "Tuple", "[", "object", "]", ")", ":", "\n", "        ", "logs", "=", "self", ".", "_log_paths", "[", "dataset_label", "]", "\n", "util", ".", "append_csv", "(", "logs", "[", "data_label", "]", ",", "*", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._save_model": [[127, 158], ["dict", "piqn.util.create_directories_dir", "isinstance", "tokenizer.save_pretrained", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "optimizer.state_dict", "dict.update", "os.path.join", "os.path.join", "model.module.save_pretrained", "model.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.create_directories_dir"], ["", "def", "_save_model", "(", "self", ",", "save_path", ":", "str", ",", "model", ":", "PreTrainedModel", ",", "tokenizer", ":", "PreTrainedTokenizer", ",", "\n", "iteration", ":", "int", ",", "optimizer", ":", "Optimizer", "=", "None", ",", "save_as_best", ":", "bool", "=", "False", ",", "\n", "extra", ":", "dict", "=", "None", ",", "include_iteration", ":", "int", "=", "True", ",", "name", ":", "str", "=", "'model'", ")", ":", "\n", "        ", "extra_state", "=", "dict", "(", "iteration", "=", "iteration", ")", "\n", "\n", "if", "optimizer", ":", "\n", "            ", "extra_state", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "\n", "", "if", "extra", ":", "\n", "            ", "extra_state", ".", "update", "(", "extra", ")", "\n", "\n", "", "if", "save_as_best", ":", "\n", "            ", "dir_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best_%s'", "%", "name", ")", "\n", "", "else", ":", "\n", "            ", "dir_name", "=", "'%s_%s'", "%", "(", "name", ",", "iteration", ")", "if", "include_iteration", "else", "name", "\n", "dir_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "dir_name", ")", "\n", "\n", "", "util", ".", "create_directories_dir", "(", "dir_path", ")", "\n", "\n", "# save model", "\n", "if", "isinstance", "(", "model", ",", "(", "DataParallel", ",", "DistributedDataParallel", ")", ")", ":", "\n", "            ", "model", ".", "module", ".", "save_pretrained", "(", "dir_path", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "save_pretrained", "(", "dir_path", ")", "\n", "\n", "# save vocabulary", "\n", "", "tokenizer", ".", "save_pretrained", "(", "dir_path", ")", "\n", "\n", "# save extra", "\n", "state_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'extra.state'", ")", "\n", "torch", ".", "save", "(", "extra_state", ",", "state_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._get_lr": [[159, 165], ["lrs.append"], "methods", ["None"], ["", "def", "_get_lr", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "lrs", "=", "[", "]", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "lrs", ".", "append", "(", "lr_scheduled", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._close_summary_writer": [[166, 169], ["trainer.BaseTrainer._summary_writer.close"], "methods", ["None"], ["", "def", "_close_summary_writer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_summary_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "_summary_writer", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.focalloss.FocalLoss.__init__": [[62, 75], ["torch.nn.Module.__init__", "isinstance", "torch.Tensor", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_num", "=", "3", ",", "alpha", "=", "0.25", ",", "gamma", "=", "2", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "if", "isinstance", "(", "alpha", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "len", "(", "alpha", ")", "==", "class_num", "# \u03b1\u53ef\u4ee5\u4ee5list\u65b9\u5f0f\u8f93\u5165,size:[num_classes] \u7528\u4e8e\u5bf9\u4e0d\u540c\u7c7b\u522b\u7cbe\u7ec6\u5730\u8d4b\u4e88\u6743\u91cd", "\n", "self", ".", "_alpha", "=", "torch", ".", "Tensor", "(", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "assert", "alpha", "<", "1", "#\u5982\u679c\u03b1\u4e3a\u4e00\u4e2a\u5e38\u6570,\u5219\u964d\u4f4e\u7b2c\u4e00\u7c7b\u7684\u5f71\u54cd,\u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\u4e3a\u7b2c\u4e00\u7c7b", "\n", "self", ".", "_alpha", "=", "torch", ".", "zeros", "(", "class_num", ")", "\n", "self", ".", "_alpha", "[", "0", "]", "+=", "alpha", "\n", "self", ".", "_alpha", "[", "1", ":", "]", "+=", "(", "1", "-", "alpha", ")", "# \u03b1 \u6700\u7ec8\u4e3a [ \u03b1, 1-\u03b1, 1-\u03b1, 1-\u03b1, 1-\u03b1, ...] size:[num_classes]", "\n", "\n", "", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.focalloss.FocalLoss.alpha": [[80, 83], ["None"], "methods", ["None"], ["", "@", "alpha", ".", "setter", "\n", "def", "alpha", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "self", ".", "_alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.focalloss.FocalLoss.forward": [[84, 108], ["preds.view.view.view", "focalloss.FocalLoss._alpha.to", "torch.nn.functional.log_softmax", "torch.exp", "preds_softmax.gather.gather.gather", "preds_logsoft.gather.gather.gather", "focalloss.FocalLoss._alpha.gather", "torch.mul", "preds.view.view.size", "labels.view", "labels.view", "labels.view", "torch.mul", "loss.sum.sum.t", "loss.sum.sum.mean", "torch.pow", "loss.sum.sum.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        focal_loss\u635f\u5931\u8ba1\u7b97\n        :param preds:   \u9884\u6d4b\u7c7b\u522b. size:[B,N,C] or [B,C]    \u5206\u522b\u5bf9\u5e94\u4e0e\u68c0\u6d4b\u4e0e\u5206\u7c7b\u4efb\u52a1, B \u6279\u6b21, N\u68c0\u6d4b\u6846\u6570, C\u7c7b\u522b\u6570\n        :param labels:  \u5b9e\u9645\u7c7b\u522b. size:[B,N] or [B]\n        :return:\n        \"\"\"", "\n", "# assert preds.dim()==2 and labels.dim()==1", "\n", "preds", "=", "preds", ".", "view", "(", "-", "1", ",", "preds", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "_alpha", "=", "self", ".", "_alpha", ".", "to", "(", "preds", ".", "device", ")", "\n", "preds_logsoft", "=", "F", ".", "log_softmax", "(", "preds", ",", "dim", "=", "1", ")", "# log_softmax", "\n", "preds_softmax", "=", "torch", ".", "exp", "(", "preds_logsoft", ")", "# softmax", "\n", "\n", "preds_softmax", "=", "preds_softmax", ".", "gather", "(", "1", ",", "labels", ".", "view", "(", "-", "1", ",", "1", ")", ")", "# \u8fd9\u90e8\u5206\u5b9e\u73b0nll_loss ( crossempty = log_softmax + nll )", "\n", "preds_logsoft", "=", "preds_logsoft", ".", "gather", "(", "1", ",", "labels", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "_alpha", "=", "self", ".", "_alpha", ".", "gather", "(", "0", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mul", "(", "torch", ".", "pow", "(", "(", "1", "-", "preds_softmax", ")", ",", "self", ".", "gamma", ")", ",", "preds_logsoft", ")", "# torch.pow((1-preds_softmax), self.gamma) \u4e3afocal loss\u4e2d (1-pt)**\u03b3", "\n", "\n", "loss", "=", "torch", ".", "mul", "(", "self", ".", "_alpha", ",", "loss", ".", "t", "(", ")", ")", "\n", "if", "self", ".", "reduction", "==", "\"mean\"", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "\"sum\"", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.focalloss.sigmoid_focal_loss": [[109, 135], ["inputs.sigmoid", "torch.nn.functional.binary_cross_entropy_with_logits"], "function", ["None"], ["", "", "def", "sigmoid_focal_loss", "(", "inputs", ",", "targets", ",", "alpha", ":", "float", "=", "0.25", ",", "gamma", ":", "float", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Loss used in RetinaNet for dense detection: https://arxiv.org/abs/1708.02002.\n    Args:\n        inputs: A float tensor of arbitrary shape.\n                The predictions for each example.\n        targets: A float tensor with the same shape as inputs. Stores the binary\n                 classification label for each element in inputs\n                (0 for the negative class and 1 for the positive class).\n        alpha: (optional) Weighting factor in range (0,1) to balance\n                positive vs negative examples. Default = -1 (no weighting).\n        gamma: Exponent of the modulating factor (1 - p_t) to\n               balance easy vs hard examples.\n    Returns:\n        Loss tensor\n    \"\"\"", "\n", "prob", "=", "inputs", ".", "sigmoid", "(", ")", "\n", "ce_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "inputs", ",", "targets", ",", "reduction", "=", "\"none\"", ")", "\n", "p_t", "=", "prob", "*", "targets", "+", "(", "1", "-", "prob", ")", "*", "(", "1", "-", "targets", ")", "\n", "loss", "=", "ce_loss", "*", "(", "(", "1", "-", "p_t", ")", "**", "gamma", ")", "\n", "\n", "if", "alpha", ">=", "0", ":", "\n", "        ", "alpha_t", "=", "alpha", "*", "targets", "+", "(", "1", "-", "alpha", ")", "*", "(", "1", "-", "targets", ")", "\n", "loss", "=", "alpha_t", "*", "loss", "\n", "\n", "", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.__init__": [[53, 81], ["piqn.trainer.BaseTrainer.__init__", "transformers.AutoTokenizer.from_pretrained", "os.path.join", "os.path.join", "piqn_trainer.PIQNTrainer._logger.info", "json.dumps", "vars"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["def", "__init__", "(", "self", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "\n", "# byte-pair encoding", "\n", "\n", "# if self.args.model_type == \"roberta_piqn\":", "\n", "#     self._tokenizer = AutoTokenizer.from_pretrained(args.tokenizer_path,", "\n", "#                                                 local_files_only = True,", "\n", "#                                                 use_fast = False,", "\n", "#                                                 do_lower_case=args.lowercase,", "\n", "#                                                 cache_dir=args.cache_path)", "\n", "# elif self.args.model_type == \"piqn\":", "\n", "#     self._tokenizer = BertTokenizer.from_pretrained(args.tokenizer_path,", "\n", "#                                                 local_files_only = True,", "\n", "#                                                 do_lower_case=args.lowercase,", "\n", "#                                                 cache_dir=args.cache_path)", "\n", "self", ".", "_tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "tokenizer_path", ",", "\n", "local_files_only", "=", "True", ",", "\n", "use_fast", "=", "False", ",", "\n", "do_lower_case", "=", "args", ".", "lowercase", ",", "\n", "cache_dir", "=", "args", ".", "cache_path", ")", "\n", "# path to export predictions to", "\n", "self", ".", "_predictions_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_log_path", ",", "'predictions_%s_epoch_%s.json'", ")", "\n", "\n", "# path to export relation extraction examples to", "\n", "self", ".", "_examples_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_log_path", ",", "'examples_%s_%s_epoch_%s.html'", ")", "\n", "\n", "self", ".", "_logger", ".", "info", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.load_model": [[82, 147], ["piqn.models.get_model", "piqn.models.EntityAwareBertConfig.from_pretrained", "piqn.models.get_model.from_pretrained", "builtins.sum", "piqn_trainer.PIQNTrainer._logger.info", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "param.numel", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.get_model.from_pretrained.model.state_dict().copy", "model_class.from_pretrained.model.state_dict().copy.items", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "models.get_model.from_pretrained.parameters", "name.replace().replace", "print", "param.copy_", "models.get_model.from_pretrained.model.state_dict", "name.replace"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.models.get_model"], ["", "def", "load_model", "(", "self", ",", "input_reader", ",", "is_eval", "=", "False", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "# create model", "\n", "model_class", "=", "models", ".", "get_model", "(", "args", ".", "model_type", ")", "\n", "\n", "# load model", "\n", "# config = BertConfig.from_pretrained(args.model_path, cache_dir=args.cache_path)", "\n", "config", "=", "models", ".", "EntityAwareBertConfig", ".", "from_pretrained", "(", "args", ".", "model_path", ",", "cache_dir", "=", "args", ".", "cache_path", ",", "entity_queries_num", "=", "args", ".", "entity_queries_num", ",", "entity_emb_size", "=", "args", ".", "entity_emb_size", ",", "mask_ent2tok", "=", "args", ".", "mask_ent2tok", ",", "mask_tok2ent", "=", "args", ".", "mask_tok2ent", ",", "mask_ent2ent", "=", "args", ".", "mask_ent2ent", ",", "mask_entself", "=", "args", ".", "mask_entself", ",", "entity_aware_attention", "=", "args", ".", "entity_aware_attention", ",", "entity_aware_selfout", "=", "args", ".", "entity_aware_selfout", ",", "entity_aware_intermediate", "=", "args", ".", "entity_aware_intermediate", ",", "entity_aware_output", "=", "args", ".", "entity_aware_output", ",", "use_entity_pos", "=", "args", ".", "use_entity_pos", ",", "use_entity_common_embedding", "=", "args", ".", "use_entity_common_embedding", ")", "\n", "\n", "embed", "=", "None", "\n", "if", "args", ".", "use_glove", ":", "\n", "            ", "embed", "=", "torch", ".", "from_numpy", "(", "input_reader", ".", "embedding_weight", ")", ".", "float", "(", ")", "\n", "", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_path", ",", "\n", "# proxies = {'http': '10.15.82.42:7890'},", "\n", "# local_files_only = True,", "\n", "config", "=", "config", ",", "\n", "embed", "=", "embed", ",", "\n", "# piqn model parameters", "\n", "entity_type_count", "=", "input_reader", ".", "entity_type_count", ",", "\n", "prop_drop", "=", "args", ".", "prop_drop", ",", "\n", "freeze_transformer", "=", "args", ".", "freeze_transformer", ",", "\n", "pos_size", "=", "args", ".", "pos_size", ",", "\n", "char_lstm_layers", "=", "args", ".", "char_lstm_layers", ",", "\n", "char_lstm_drop", "=", "args", ".", "char_lstm_drop", ",", "\n", "char_size", "=", "args", ".", "char_size", ",", "\n", "use_glove", "=", "args", ".", "use_glove", ",", "\n", "use_pos", "=", "args", ".", "use_pos", ",", "\n", "use_char_lstm", "=", "args", ".", "use_char_lstm", ",", "\n", "lstm_layers", "=", "args", ".", "lstm_layers", ",", "\n", "pool_type", "=", "args", ".", "pool_type", ",", "\n", "word_mask_tok2ent", "=", "args", ".", "word_mask_tok2ent", ",", "\n", "word_mask_ent2tok", "=", "args", ".", "word_mask_ent2tok", ",", "\n", "word_mask_ent2ent", "=", "args", ".", "word_mask_ent2ent", ",", "\n", "word_mask_entself", "=", "args", ".", "word_mask_entself", ",", "\n", "share_query_pos", "=", "args", ".", "share_query_pos", ",", "\n", "use_token_level_encoder", "=", "args", ".", "use_token_level_encoder", ",", "\n", "num_token_entity_encoderlayer", "=", "args", ".", "num_token_entity_encoderlayer", ",", "\n", "use_entity_attention", "=", "args", ".", "use_entity_attention", ",", "\n", "use_masked_lm", "=", "args", ".", "use_masked_lm", ",", "\n", "use_aux_loss", "=", "args", ".", "use_aux_loss", ",", "\n", "use_lstm", "=", "args", ".", "use_lstm", ",", "\n", "inlcude_subword_aux_loss", "=", "args", ".", "inlcude_subword_aux_loss", ",", "\n", "last_layer_for_loss", "=", "args", ".", "last_layer_for_loss", ",", "\n", "split_epoch", "=", "args", ".", "split_epoch", ")", "\n", "num_params", "=", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "_logger", ".", "info", "(", "f\"Model Parameters Number: {num_params}\"", ")", "\n", "\n", "if", "not", "is_eval", "and", "args", ".", "copy_weight", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "state_dict", "=", "None", "\n", "# if args.model_type == \"roberta_piqn\":", "\n", "#     state_dict = model.roberta.state_dict().copy()", "\n", "# elif args.model_type == \"piqn\":", "\n", "#     state_dict = model.bert.state_dict().copy()", "\n", "\n", "state_dict", "=", "model", ".", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                    ", "countpart", "=", "name", ".", "replace", "(", "\"entity_\"", ",", "\"\"", ")", ".", "replace", "(", "\"e2w_\"", ",", "\"\"", ")", "\n", "if", "countpart", "not", "in", "state_dict", "or", "countpart", "==", "name", "or", "\"embedding\"", "in", "name", "or", "\"LayerNorm\"", "in", "name", ":", "\n", "# print(countpart)", "\n", "                        ", "continue", "\n", "", "print", "(", "f\"copy {countpart} to {name}\"", ")", "\n", "param", ".", "copy_", "(", "state_dict", "[", "countpart", "]", ")", "\n", "\n", "", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.train": [[148, 255], ["input_reader_cls", "input_reader_cls.read", "input_reader_cls.get_dataset", "input_reader_cls.get_dataset", "piqn_trainer.PIQNTrainer.load_model", "torch.nn.parallel.DistributedDataParallel.to", "torch.nn.parallel.DistributedDataParallel.to", "piqn_trainer.PIQNTrainer._get_optimizer_params", "transformers.AdamW", "piqn_trainer.get_linear_schedule_with_warmup_two_stage", "piqn.loss.PIQNLoss", "range", "dict", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._init_train_logging", "piqn_trainer.PIQNTrainer._init_eval_logging", "piqn_trainer.PIQNTrainer._log_datasets", "torch.get_world_size", "torch.get_world_size", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "piqn_trainer.PIQNTrainer._eval", "piqn_trainer.PIQNTrainer._train_epoch", "piqn_trainer.PIQNTrainer._save_model", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._close_summary_writer", "transformers.AdamW.__setstate__", "piqn_trainer.PIQNTrainer._eval", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "dict", "piqn_trainer.PIQNTrainer._save_model", "piqn_trainer.PIQNTrainer._save_model", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader.read", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.get_dataset", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.get_dataset", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.load_model", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._get_optimizer_params", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.get_linear_schedule_with_warmup_two_stage", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._init_train_logging", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._init_eval_logging", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._log_datasets", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._eval", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._train_epoch", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._save_model", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._close_summary_writer", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._eval", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._save_model", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._save_model"], ["", "def", "train", "(", "self", ",", "train_path", ":", "str", ",", "valid_path", ":", "str", ",", "types_path", ":", "str", ",", "input_reader_cls", ":", "BaseInputReader", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "train_label", ",", "valid_label", "=", "'train'", ",", "'valid'", "\n", "\n", "if", "self", ".", "record", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "\"Datasets: %s, %s\"", "%", "(", "train_path", ",", "valid_path", ")", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Model type: %s\"", "%", "args", ".", "model_type", ")", "\n", "\n", "# create log csv files", "\n", "self", ".", "_init_train_logging", "(", "train_label", ")", "\n", "self", ".", "_init_eval_logging", "(", "valid_label", ")", "\n", "\n", "# read datasets", "\n", "", "input_reader", "=", "input_reader_cls", "(", "types_path", ",", "self", ".", "_tokenizer", ",", "self", ".", "_logger", ",", "wordvec_filename", "=", "args", ".", "wordvec_path", ",", "random_mask_word", "=", "args", ".", "use_masked_lm", ",", "use_glove", "=", "args", ".", "use_glove", ",", "use_pos", "=", "args", ".", "use_pos", ",", "repeat_gt_entities", "=", "args", ".", "repeat_gt_entities", ")", "\n", "input_reader", ".", "read", "(", "{", "train_label", ":", "train_path", ",", "valid_label", ":", "valid_path", "}", ")", "\n", "\n", "if", "self", ".", "local_rank", "<", "1", ":", "\n", "            ", "self", ".", "_log_datasets", "(", "input_reader", ")", "\n", "\n", "", "world_size", "=", "1", "\n", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "            ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "", "train_dataset", "=", "input_reader", ".", "get_dataset", "(", "train_label", ")", "\n", "train_sample_count", "=", "train_dataset", ".", "document_count", "\n", "updates_epoch", "=", "train_sample_count", "//", "(", "args", ".", "train_batch_size", "*", "world_size", ")", "\n", "updates_total_stage_one", "=", "updates_epoch", "*", "args", ".", "split_epoch", "\n", "updates_total_stage_two", "=", "updates_epoch", "*", "(", "args", ".", "epochs", "-", "args", ".", "split_epoch", ")", "\n", "\n", "validation_dataset", "=", "input_reader", ".", "get_dataset", "(", "valid_label", ")", "\n", "\n", "if", "self", ".", "record", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "\"Updates per epoch: %s\"", "%", "updates_epoch", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Updates total: %s\"", "%", "(", "updates_total_stage_one", "+", "updates_total_stage_two", ")", ")", "\n", "\n", "", "model", "=", "self", ".", "load_model", "(", "input_reader", ",", "is_eval", "=", "False", ")", "\n", "\n", "model", ".", "to", "(", "self", ".", "_device", ")", "\n", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "            ", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "find_unused_parameters", "=", "False", ")", "\n", "\n", "# create optimizer", "\n", "", "optimizer_params", "=", "self", ".", "_get_optimizer_params", "(", "model", ")", "\n", "optimizer", "=", "AdamW", "(", "optimizer_params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "correct_bias", "=", "False", ")", "\n", "# create scheduler", "\n", "# scheduler = transformers.get_constant_schedule_with_warmup(optimizer,", "\n", "#                                                     num_warmup_steps=args.lr_warmup * updates_total)", "\n", "\n", "# scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1,patience=3,threshold=0.0001, threshold_mode='rel', verbose=True)", "\n", "# scheduler = transformers.get_linear_schedule_with_warmup(optimizer,", "\n", "#                                                          num_warmup_steps=args.lr_warmup * updates_total_stage_one,", "\n", "#                                                          num_training_steps=updates_total_stage_one)", "\n", "scheduler", "=", "get_linear_schedule_with_warmup_two_stage", "(", "optimizer", ",", "\n", "num_warmup_steps_stage_one", "=", "args", ".", "lr_warmup", "*", "updates_total_stage_one", ",", "\n", "num_training_steps_stage_one", "=", "updates_total_stage_one", ",", "\n", "num_warmup_steps_stage_two", "=", "args", ".", "lr_warmup", "*", "updates_total_stage_two", ",", "\n", "num_training_steps_stage_two", "=", "updates_total_stage_two", ")", "\n", "# self.scheduler = scheduler", "\n", "# create loss function", "\n", "# entity_criterion = torch.nn.CrossEntropyLoss(reduction='none')", "\n", "\n", "\n", "compute_loss", "=", "PIQNLoss", "(", "input_reader", ".", "entity_type_count", ",", "self", ".", "_device", ",", "model", ",", "optimizer", ",", "scheduler", ",", "args", ".", "max_grad_norm", ",", "args", ".", "nil_weight", ",", "args", ".", "match_class_weight", ",", "args", ".", "match_boundary_weight", ",", "args", ".", "loss_class_weight", ",", "args", ".", "loss_boundary_weight", ",", "args", ".", "type_loss", ",", "solver", "=", "args", ".", "match_solver", ",", "match_warmup_epoch", "=", "args", ".", "match_warmup_epoch", ")", "\n", "\n", "# eval validation set", "\n", "if", "args", ".", "init_eval", "and", "self", ".", "record", ":", "\n", "            ", "self", ".", "_eval", "(", "model", ",", "validation_dataset", ",", "input_reader", ",", "0", ",", "updates_epoch", ")", "\n", "\n", "# train", "\n", "", "best_f1", "=", "0", "\n", "best_epoch", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "            ", "if", "epoch", "==", "args", ".", "split_epoch", ":", "\n", "                ", "optimizer", ".", "__setstate__", "(", "{", "'state'", ":", "defaultdict", "(", "dict", ")", "}", ")", "\n", "# train epoch", "\n", "", "self", ".", "_train_epoch", "(", "model", ",", "compute_loss", ",", "optimizer", ",", "train_dataset", ",", "updates_epoch", ",", "epoch", ")", "\n", "\n", "# eval validation sets", "\n", "if", "(", "not", "args", ".", "final_eval", "or", "(", "epoch", "==", "args", ".", "epochs", "-", "1", ")", ")", "and", "self", ".", "record", ":", "\n", "                ", "f1", "=", "self", ".", "_eval", "(", "model", ",", "validation_dataset", ",", "input_reader", ",", "epoch", "+", "1", ",", "updates_epoch", ")", "\n", "# self._save_best(model, self._tokenizer,optimizer if args.save_optimizer else None,f1[2],epoch * updates_epoch, \"best\")", "\n", "if", "best_f1", "<", "f1", "[", "2", "]", ":", "\n", "                    ", "self", ".", "_logger", ".", "info", "(", "f\"Best F1 score update, from {best_f1} to {f1[2]}\"", ")", "\n", "best_f1", "=", "f1", "[", "2", "]", "\n", "best_epoch", "=", "epoch", "+", "1", "\n", "extra", "=", "dict", "(", "epoch", "=", "epoch", ",", "updates_epoch", "=", "updates_epoch", ",", "epoch_iteration", "=", "0", ")", "\n", "# if \"pretrain\" in args.label:", "\n", "self", ".", "_save_model", "(", "self", ".", "_save_path", ",", "model", ",", "self", ".", "_tokenizer", ",", "epoch", "*", "updates_epoch", ",", "\n", "optimizer", "=", "optimizer", "if", "args", ".", "save_optimizer", "else", "None", ",", "extra", "=", "extra", ",", "\n", "include_iteration", "=", "False", ",", "name", "=", "'best_model'", ")", "\n", "", "", "if", "self", ".", "record", ":", "\n", "                ", "if", "args", ".", "save_path_include_iteration", ":", "\n", "                    ", "self", ".", "_save_model", "(", "self", ".", "_save_path", ",", "model", ",", "self", ".", "_tokenizer", ",", "epoch", ",", "\n", "optimizer", "=", "optimizer", "if", "args", ".", "save_optimizer", "else", "None", ",", "extra", "=", "extra", ",", "\n", "include_iteration", "=", "args", ".", "save_path_include_iteration", ",", "name", "=", "'model'", ")", "\n", "", "self", ".", "_logger", ".", "info", "(", "f\"Best F1 score: {best_f1}, achieved at Epoch: {best_epoch}\"", ")", "\n", "\n", "# save final model", "\n", "", "", "extra", "=", "dict", "(", "epoch", "=", "args", ".", "epochs", ",", "updates_epoch", "=", "updates_epoch", ",", "epoch_iteration", "=", "0", ")", "\n", "global_iteration", "=", "args", ".", "epochs", "*", "updates_epoch", "\n", "if", "self", ".", "record", ":", "\n", "            ", "self", ".", "_save_model", "(", "self", ".", "_save_path", ",", "model", ",", "self", ".", "_tokenizer", ",", "global_iteration", ",", "\n", "optimizer", "=", "optimizer", "if", "args", ".", "save_optimizer", "else", "None", ",", "extra", "=", "extra", ",", "\n", "include_iteration", "=", "False", ",", "name", "=", "'final_model'", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Logged in: %s\"", "%", "self", ".", "_log_path", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Saved in: %s\"", "%", "self", ".", "_save_path", ")", "\n", "self", ".", "_close_summary_writer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.eval": [[256, 283], ["piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._init_eval_logging", "input_reader_cls", "input_reader_cls.read", "piqn_trainer.PIQNTrainer._log_datasets", "piqn_trainer.PIQNTrainer.load_model", "piqn_trainer.PIQNTrainer.to", "piqn_trainer.PIQNTrainer._eval", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._close_summary_writer", "input_reader_cls.get_dataset"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._init_eval_logging", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader.read", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._log_datasets", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.load_model", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._eval", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._close_summary_writer", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.get_dataset"], ["", "", "def", "eval", "(", "self", ",", "dataset_path", ":", "str", ",", "types_path", ":", "str", ",", "input_reader_cls", ":", "BaseInputReader", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "dataset_label", "=", "'test'", "\n", "\n", "self", ".", "_logger", ".", "info", "(", "\"Dataset: %s\"", "%", "dataset_path", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Model: %s\"", "%", "args", ".", "model_type", ")", "\n", "\n", "# create log csv files", "\n", "self", ".", "_init_eval_logging", "(", "dataset_label", ")", "\n", "\n", "# read datasets", "\n", "input_reader", "=", "input_reader_cls", "(", "types_path", ",", "self", ".", "_tokenizer", ",", "self", ".", "_logger", ",", "wordvec_filename", "=", "args", ".", "wordvec_path", ",", "random_mask_word", "=", "args", ".", "use_masked_lm", ",", "use_glove", "=", "args", ".", "use_glove", ",", "use_pos", "=", "args", ".", "use_pos", ",", "repeat_gt_entities", "=", "args", ".", "repeat_gt_entities", ")", "\n", "input_reader", ".", "read", "(", "{", "dataset_label", ":", "dataset_path", "}", ")", "\n", "self", ".", "_log_datasets", "(", "input_reader", ")", "\n", "\n", "model", "=", "self", ".", "load_model", "(", "input_reader", ",", "is_eval", "=", "True", ")", "\n", "\n", "model", ".", "to", "(", "self", ".", "_device", ")", "\n", "# if args.local_rank != -1:", "\n", "#     model = DDP(model, device_ids=[args.local_rank])", "\n", "\n", "\n", "# evaluate", "\n", "self", ".", "_eval", "(", "model", ",", "input_reader", ".", "get_dataset", "(", "dataset_label", ")", ",", "input_reader", ")", "\n", "\n", "self", ".", "_logger", ".", "info", "(", "\"Logged in: %s\"", "%", "self", ".", "_log_path", ")", "\n", "self", ".", "_close_summary_writer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._train_epoch": [[284, 331], ["piqn_trainer.PIQNTrainer._logger.info", "dataset.switch_mode", "isinstance", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.zero_grad", "math.ceil", "tqdm.tqdm.tqdm", "torch.get_world_size", "torch.get_world_size", "model.train", "piqn.util.to_device", "model", "compute_loss.compute", "len", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "piqn_trainer.PIQNTrainer._log_train"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.switch_mode", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.train", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.to_device", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.PIQNLoss.compute", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._log_train"], ["", "def", "_train_epoch", "(", "self", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "compute_loss", ":", "Loss", ",", "optimizer", ":", "Optimizer", ",", "dataset", ",", "\n", "updates_epoch", ":", "int", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "self", ".", "_logger", ".", "info", "(", "\"Train epoch: %s\"", "%", "epoch", ")", "\n", "\n", "# create data loader", "\n", "dataset", ".", "switch_mode", "(", "Dataset", ".", "TRAIN_MODE", ")", "\n", "\n", "word_size", "=", "1", "\n", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "            ", "word_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "", "train_sampler", "=", "None", "\n", "shuffle", "=", "False", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "if", "len", "(", "dataset", ")", "<", "100000", ":", "\n", "                ", "shuffle", "=", "True", "\n", "", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "                ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "num_replicas", "=", "word_size", ",", "rank", "=", "args", ".", "local_rank", ",", "shuffle", "=", "shuffle", ")", "\n", "shuffle", "=", "False", "\n", "\n", "", "", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "shuffle", "=", "shuffle", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "sampling_processes", ",", "collate_fn", "=", "sampling", ".", "collate_fn_padding", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "\n", "iteration", "=", "0", "\n", "total", "=", "math", ".", "ceil", "(", "(", "dataset", ".", "document_count", "//", "args", ".", "train_batch_size", ")", "/", "word_size", ")", "\n", "for", "batch", "in", "tqdm", "(", "data_loader", ",", "total", "=", "total", ",", "desc", "=", "'Train epoch %s'", "%", "epoch", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "batch", "=", "util", ".", "to_device", "(", "batch", ",", "self", ".", "_device", ")", "\n", "\n", "# forward step", "\n", "entity_logits", ",", "p_left", ",", "p_right", ",", "masked_seq_logits", ",", "output", "=", "model", "(", "encodings", "=", "batch", "[", "'encodings'", "]", ",", "context_masks", "=", "batch", "[", "'context_masks'", "]", ",", "seg_encoding", "=", "batch", "[", "'seg_encoding'", "]", ",", "context2token_masks", "=", "batch", "[", "'context2token_masks'", "]", ",", "token_masks", "=", "batch", "[", "'token_masks'", "]", ",", "epoch", "=", "epoch", ",", "pos_encoding", "=", "batch", "[", "'pos_encoding'", "]", ",", "wordvec_encoding", "=", "batch", "[", "'wordvec_encoding'", "]", ",", "char_encoding", "=", "batch", "[", "'char_encoding'", "]", ",", "token_masks_char", "=", "batch", "[", "'token_masks_char'", "]", ",", "char_count", "=", "batch", "[", "'char_count'", "]", ")", "\n", "\n", "# compute loss and optimize parameters", "\n", "batch_loss", "=", "compute_loss", ".", "compute", "(", "entity_logits", ",", "p_left", ",", "p_right", ",", "output", ",", "gt_types", "=", "batch", "[", "'gt_types'", "]", ",", "gt_spans", "=", "batch", "[", "'gt_spans'", "]", ",", "entity_masks", "=", "batch", "[", "'entity_masks'", "]", ",", "epoch", "=", "epoch", ",", "deeply_weight", "=", "args", ".", "deeply_weight", ",", "seq_logits", "=", "masked_seq_logits", ",", "gt_seq_labels", "=", "batch", "[", "'gt_seq_labels'", "]", ",", "batch", "=", "batch", ")", "\n", "\n", "# logging", "\n", "iteration", "+=", "1", "\n", "global_iteration", "=", "epoch", "*", "updates_epoch", "+", "iteration", "\n", "\n", "if", "global_iteration", "%", "args", ".", "train_log_iter", "==", "0", "and", "self", ".", "local_rank", "<", "1", ":", "\n", "                ", "self", ".", "_log_train", "(", "optimizer", ",", "batch_loss", ",", "epoch", ",", "iteration", ",", "global_iteration", ",", "dataset", ".", "label", ")", "\n", "\n", "", "", "return", "iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._eval": [[332, 390], ["piqn_trainer.PIQNTrainer._logger.info", "piqn.evaluator.Evaluator", "dataset.switch_mode", "isinstance", "piqn.evaluator.Evaluator.compute_scores", "piqn_trainer.PIQNTrainer._log_eval", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "math.ceil", "tqdm.tqdm.tqdm", "piqn.evaluator.Evaluator.store_predictions", "piqn.evaluator.Evaluator.store_examples", "piqn.util.to_device", "model", "piqn.evaluator.Evaluator.eval_batch"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.switch_mode", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator.compute_scores", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._log_eval", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer.eval", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator.store_predictions", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator.store_examples", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.to_device", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator.eval_batch"], ["", "def", "_eval", "(", "self", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "dataset", ",", "input_reader", ":", "JsonInputReader", ",", "\n", "epoch", ":", "int", "=", "0", ",", "updates_epoch", ":", "int", "=", "0", ",", "iteration", ":", "int", "=", "0", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "self", ".", "_logger", ".", "info", "(", "\"Evaluate: %s\"", "%", "dataset", ".", "label", ")", "\n", "\n", "# if isinstance(model, DataParallel):", "\n", "#     # currently no multi GPU support during evaluation", "\n", "#     model = model.module", "\n", "\n", "# create evaluator", "\n", "evaluator", "=", "Evaluator", "(", "dataset", ",", "input_reader", ",", "self", ".", "_tokenizer", ",", "self", ".", "_logger", ",", "args", ".", "no_overlapping", ",", "args", ".", "no_partial_overlapping", ",", "args", ".", "no_duplicate", ",", "self", ".", "_predictions_path", ",", "\n", "self", ".", "_examples_path", ",", "args", ".", "example_count", ",", "epoch", ",", "dataset", ".", "label", ",", "cls_threshold", "=", "args", ".", "cls_threshold", ",", "boundary_threshold", "=", "args", ".", "boundary_threshold", ",", "save_prediction", "=", "args", ".", "store_predictions", ")", "\n", "\n", "# create data loader", "\n", "dataset", ".", "switch_mode", "(", "Dataset", ".", "EVAL_MODE", ")", "\n", "\n", "word_size", "=", "1", "\n", "eval_sampler", "=", "None", "\n", "# assert len(gt) == len(pred)", "\n", "# if args.local_rank != -1:", "\n", "#     word_size = dist.get_world_size()", "\n", "#     eval_sampler = torch.utils.data.distributed.DistributedSampler(dataset, num_replicas = word_size,rank = args.local_rank)", "\n", "\n", "\n", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "eval_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "sampling_processes", ",", "collate_fn", "=", "sampling", ".", "collate_fn_padding", ",", "sampler", "=", "eval_sampler", ")", "\n", "", "else", ":", "\n", "            ", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "eval_batch_size", ",", "drop_last", "=", "False", ",", "collate_fn", "=", "sampling", ".", "collate_fn_padding", ",", "sampler", "=", "eval_sampler", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "# iterate batches", "\n", "total", "=", "math", ".", "ceil", "(", "dataset", ".", "document_count", "/", "(", "args", ".", "eval_batch_size", "*", "word_size", ")", ")", "\n", "for", "batch", "in", "tqdm", "(", "data_loader", ",", "total", "=", "total", ",", "desc", "=", "'Evaluate epoch %s'", "%", "epoch", ")", ":", "\n", "# move batch to selected device", "\n", "                ", "batch", "=", "util", ".", "to_device", "(", "batch", ",", "self", ".", "_device", ")", "\n", "\n", "# run model (forward pass)", "\n", "entity_logits", ",", "p_left", ",", "p_right", ",", "_", ",", "outputs", "=", "model", "(", "encodings", "=", "batch", "[", "'encodings'", "]", ",", "context_masks", "=", "batch", "[", "'context_masks'", "]", ",", "seg_encoding", "=", "batch", "[", "'seg_encoding'", "]", ",", "context2token_masks", "=", "batch", "[", "'context2token_masks'", "]", ",", "token_masks", "=", "batch", "[", "'token_masks'", "]", ",", "pos_encoding", "=", "batch", "[", "'pos_encoding'", "]", ",", "wordvec_encoding", "=", "batch", "[", "'wordvec_encoding'", "]", ",", "char_encoding", "=", "batch", "[", "'char_encoding'", "]", ",", "token_masks_char", "=", "batch", "[", "'token_masks_char'", "]", ",", "char_count", "=", "batch", "[", "'char_count'", "]", ",", "evaluate", "=", "True", ")", "\n", "\n", "# evaluate batch", "\n", "evaluator", ".", "eval_batch", "(", "entity_logits", ",", "p_left", ",", "p_right", ",", "outputs", ",", "batch", ")", "\n", "", "", "global_iteration", "=", "epoch", "*", "updates_epoch", "+", "iteration", "\n", "ner_eval", ",", "ner_loc_eval", ",", "ner_cls_eval", "=", "evaluator", ".", "compute_scores", "(", ")", "\n", "self", ".", "_log_eval", "(", "*", "ner_eval", ",", "*", "ner_loc_eval", ",", "*", "ner_cls_eval", ",", "epoch", ",", "iteration", ",", "global_iteration", ",", "dataset", ".", "label", ")", "\n", "\n", "# self.scheduler.step(ner_eval[2])", "\n", "\n", "if", "args", ".", "store_predictions", ":", "\n", "            ", "evaluator", ".", "store_predictions", "(", ")", "\n", "\n", "", "if", "args", ".", "store_examples", ":", "\n", "            ", "evaluator", ".", "store_examples", "(", ")", "\n", "\n", "", "return", "ner_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._get_optimizer_params": [[391, 401], ["list", "model.named_parameters", "any", "any"], "methods", ["None"], ["", "def", "_get_optimizer_params", "(", "self", ",", "model", ")", ":", "\n", "        ", "param_optimizer", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "# regressier", "\n", "optimizer_params", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "]", "\n", "\n", "return", "optimizer_params", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._log_train": [[402, 418], ["piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_csv", "piqn_trainer.PIQNTrainer._log_csv", "piqn_trainer.PIQNTrainer._log_csv", "piqn_trainer.PIQNTrainer._get_lr"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_csv", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_csv", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_csv", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._get_lr"], ["", "def", "_log_train", "(", "self", ",", "optimizer", ":", "Optimizer", ",", "loss", ":", "float", ",", "epoch", ":", "int", ",", "\n", "iteration", ":", "int", ",", "global_iteration", ":", "int", ",", "label", ":", "str", ")", ":", "\n", "# average loss", "\n", "        ", "avg_loss", "=", "loss", "/", "self", ".", "args", ".", "train_batch_size", "\n", "# get current learning rate", "\n", "lr", "=", "self", ".", "_get_lr", "(", "optimizer", ")", "[", "0", "]", "\n", "\n", "# log to tensorboard", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'loss'", ",", "loss", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'loss_avg'", ",", "avg_loss", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'lr'", ",", "lr", ",", "global_iteration", ")", "\n", "\n", "# log to csv", "\n", "self", ".", "_log_csv", "(", "label", ",", "'loss'", ",", "loss", ",", "epoch", ",", "iteration", ",", "global_iteration", ")", "\n", "self", ".", "_log_csv", "(", "label", ",", "'loss_avg'", ",", "avg_loss", ",", "epoch", ",", "iteration", ",", "global_iteration", ")", "\n", "self", ".", "_log_csv", "(", "label", ",", "'lr'", ",", "lr", ",", "epoch", ",", "iteration", ",", "global_iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._log_eval": [[419, 459], ["piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_tensorboard", "piqn_trainer.PIQNTrainer._log_csv"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_tensorboard", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._log_csv"], ["", "def", "_log_eval", "(", "self", ",", "ner_prec_micro", ":", "float", ",", "ner_rec_micro", ":", "float", ",", "ner_f1_micro", ":", "float", ",", "\n", "ner_prec_macro", ":", "float", ",", "ner_rec_macro", ":", "float", ",", "ner_f1_macro", ":", "float", ",", "\n", "loc_prec_micro", ":", "float", ",", "loc_rec_micro", ":", "float", ",", "loc_f1_micro", ":", "float", ",", "\n", "loc_prec_macro", ":", "float", ",", "loc_rec_macro", ":", "float", ",", "loc_f1_macro", ":", "float", ",", "\n", "cls_prec_micro", ":", "float", ",", "cls_rec_micro", ":", "float", ",", "cls_f1_micro", ":", "float", ",", "\n", "cls_prec_macro", ":", "float", ",", "cls_rec_macro", ":", "float", ",", "cls_f1_macro", ":", "float", ",", "\n", "epoch", ":", "int", ",", "iteration", ":", "int", ",", "global_iteration", ":", "int", ",", "label", ":", "str", ")", ":", "\n", "\n", "# log to tensorboard", "\n", "        ", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/ner_prec_micro'", ",", "ner_prec_micro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/ner_recall_micro'", ",", "ner_rec_micro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/ner_f1_micro'", ",", "ner_f1_micro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/ner_prec_macro'", ",", "ner_prec_macro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/ner_recall_macro'", ",", "ner_rec_macro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/ner_f1_macro'", ",", "ner_f1_macro", ",", "global_iteration", ")", "\n", "\n", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/loc_prec_micro'", ",", "loc_prec_micro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/loc_recall_micro'", ",", "loc_rec_micro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/loc_f1_micro'", ",", "loc_f1_micro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/loc_prec_macro'", ",", "loc_prec_macro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/loc_recall_macro'", ",", "loc_rec_macro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/loc_f1_macro'", ",", "loc_f1_macro", ",", "global_iteration", ")", "\n", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/cls_prec_micro'", ",", "cls_prec_micro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/cls_recall_micro'", ",", "cls_rec_micro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/cls_f1_micro'", ",", "cls_f1_micro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/cls_prec_macro'", ",", "cls_prec_macro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/cls_recall_macro'", ",", "cls_rec_macro", ",", "global_iteration", ")", "\n", "self", ".", "_log_tensorboard", "(", "label", ",", "'eval/cls_f1_macro'", ",", "cls_f1_macro", ",", "global_iteration", ")", "\n", "\n", "\n", "# log to csv", "\n", "self", ".", "_log_csv", "(", "label", ",", "'eval'", ",", "ner_prec_micro", ",", "ner_rec_micro", ",", "ner_f1_micro", ",", "\n", "ner_prec_macro", ",", "ner_rec_macro", ",", "ner_f1_macro", ",", "\n", "loc_prec_micro", ",", "loc_rec_micro", ",", "loc_f1_micro", ",", "\n", "loc_prec_macro", ",", "loc_rec_macro", ",", "loc_f1_macro", ",", "\n", "cls_prec_micro", ",", "cls_rec_micro", ",", "cls_f1_micro", ",", "\n", "cls_prec_macro", ",", "cls_rec_macro", ",", "cls_f1_macro", ",", "\n", "epoch", ",", "iteration", ",", "global_iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._log_datasets": [[460, 479], ["piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "input_reader.entity_types.values", "input_reader.datasets.items", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "piqn_trainer.PIQNTrainer._logger.info", "str"], "methods", ["None"], ["", "def", "_log_datasets", "(", "self", ",", "input_reader", ")", ":", "\n", "# self._logger.info(\"Relation type count: %s\" % input_reader.relation_type_count)", "\n", "        ", "self", ".", "_logger", ".", "info", "(", "\"Entity type count: %s\"", "%", "input_reader", ".", "entity_type_count", ")", "\n", "\n", "self", ".", "_logger", ".", "info", "(", "\"Entities:\"", ")", "\n", "for", "e", "in", "input_reader", ".", "entity_types", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "e", ".", "verbose_name", "+", "'='", "+", "str", "(", "e", ".", "index", ")", ")", "\n", "\n", "# self._logger.info(\"Relations:\")", "\n", "# for r in input_reader.relation_types.values():", "\n", "#     self._logger.info(r.verbose_name + '=' + str(r.index))", "\n", "\n", "", "for", "k", ",", "d", "in", "input_reader", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "'Dataset: %s'", "%", "k", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Document count: %s\"", "%", "d", ".", "document_count", ")", "\n", "# self._logger.info(\"Relation count: %s\" % d.relation_count)", "\n", "self", ".", "_logger", ".", "info", "(", "\"Entity count: %s\"", "%", "d", ".", "entity_count", ")", "\n", "\n", "", "self", ".", "_logger", ".", "info", "(", "\"Context size: %s\"", "%", "input_reader", ".", "context_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._init_train_logging": [[480, 485], ["piqn_trainer.PIQNTrainer._add_dataset_logging"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._add_dataset_logging"], ["", "def", "_init_train_logging", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "_add_dataset_logging", "(", "label", ",", "\n", "data", "=", "{", "'lr'", ":", "[", "'lr'", ",", "'epoch'", ",", "'iteration'", ",", "'global_iteration'", "]", ",", "\n", "'loss'", ":", "[", "'loss'", ",", "'epoch'", ",", "'iteration'", ",", "'global_iteration'", "]", ",", "\n", "'loss_avg'", ":", "[", "'loss_avg'", ",", "'epoch'", ",", "'iteration'", ",", "'global_iteration'", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.PIQNTrainer._init_eval_logging": [[486, 495], ["piqn_trainer.PIQNTrainer._add_dataset_logging"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.trainer.BaseTrainer._add_dataset_logging"], ["", "def", "_init_eval_logging", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "_add_dataset_logging", "(", "label", ",", "\n", "data", "=", "{", "'eval'", ":", "[", "'ner_prec_micro'", ",", "'ner_rec_micro'", ",", "'ner_f1_micro'", ",", "\n", "'ner_prec_macro'", ",", "'ner_rec_macro'", ",", "'ner_f1_macro'", ",", "\n", "'loc_prec_micro'", ",", "'loc_rec_micro'", ",", "'loc_f1_micro'", ",", "\n", "'loc_prec_macro'", ",", "'loc_rec_macro'", ",", "'loc_f1_macro'", ",", "\n", "'cls_prec_micro'", ",", "'cls_rec_micro'", ",", "'cls_f1_micro'", ",", "\n", "'cls_prec_macro'", ",", "'cls_rec_macro'", ",", "'cls_f1_macro'", ",", "\n", "'epoch'", ",", "'iteration'", ",", "'global_iteration'", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.piqn_trainer.get_linear_schedule_with_warmup_two_stage": [[33, 49], ["torch.optim.lr_scheduler.LambdaLR", "max", "max", "float", "float", "float", "float", "float", "float", "float", "float", "max", "max", "max", "max"], "function", ["None"], ["def", "get_linear_schedule_with_warmup_two_stage", "(", "optimizer", ",", "num_warmup_steps_stage_one", ",", "num_training_steps_stage_one", ",", "num_warmup_steps_stage_two", ",", "num_training_steps_stage_two", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "def", "lr_lambda", "(", "current_step", ":", "int", ")", ":", "\n", "        ", "if", "current_step", "<", "num_training_steps_stage_one", ":", "\n", "            ", "if", "current_step", "<", "num_warmup_steps_stage_one", ":", "\n", "                ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps_stage_one", ")", ")", "\n", "", "return", "max", "(", "\n", "0.0", ",", "float", "(", "num_training_steps_stage_one", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps_stage_one", "-", "num_warmup_steps_stage_one", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "current_step", "=", "current_step", "-", "num_training_steps_stage_one", "\n", "if", "current_step", "<", "num_warmup_steps_stage_two", ":", "\n", "                ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps_stage_two", ")", ")", "\n", "", "return", "max", "(", "\n", "0.0", ",", "float", "(", "num_training_steps_stage_two", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps_stage_two", "-", "num_warmup_steps_stage_two", ")", ")", "\n", ")", "\n", "", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Loss.compute": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "compute", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.PIQNLoss.__init__": [[18, 29], ["loss.Criterion", "loss.PIQNLoss.criterion.to"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "entity_type_count", ",", "device", ",", "model", ",", "optimizer", ",", "scheduler", ",", "max_grad_norm", ",", "nil_weight", ",", "match_class_weight", ",", "match_boundary_weight", ",", "loss_class_weight", ",", "loss_boundary_weight", ",", "type_loss", ",", "solver", ",", "match_warmup_epoch", "=", "0", ")", ":", "\n", "        ", "self", ".", "_model", "=", "model", "\n", "self", ".", "_optimizer", "=", "optimizer", "\n", "self", ".", "_scheduler", "=", "scheduler", "\n", "\n", "# losses = ['labels', 'boundary', 'cardinality']", "\n", "losses", "=", "[", "'labels'", ",", "'boundary'", "]", "\n", "self", ".", "weight_dict", "=", "{", "'loss_ce'", ":", "loss_class_weight", ",", "'loss_boundary'", ":", "loss_boundary_weight", "}", "\n", "self", ".", "criterion", "=", "Criterion", "(", "entity_type_count", ",", "self", ".", "weight_dict", ",", "nil_weight", ",", "losses", ",", "type_loss", "=", "type_loss", ",", "match_class_weight", "=", "match_class_weight", ",", "match_boundary_weight", "=", "match_boundary_weight", ",", "solver", "=", "solver", ",", "match_warmup_epoch", "=", "match_warmup_epoch", ")", "\n", "self", ".", "criterion", ".", "to", "(", "device", ")", "\n", "self", ".", "_max_grad_norm", "=", "max_grad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.PIQNLoss.del_attrs": [[30, 33], ["None"], "methods", ["None"], ["", "def", "del_attrs", "(", "self", ")", ":", "\n", "        ", "del", "self", ".", "_optimizer", "\n", "del", "self", ".", "_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.PIQNLoss.compute": [[34, 80], ["gt_types.masked_select", "entity_masks.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "gt_spans.masked_select().view", "sum", "sum.backward", "torch.nn.utils.clip_grad_norm_", "loss.PIQNLoss._optimizer.step", "loss.PIQNLoss._scheduler.step", "loss.PIQNLoss._model.zero_grad", "sum.item", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "i.sum", "loss.PIQNLoss.criterion", "sum.append", "loss.PIQNLoss._model.parameters", "seq_logits.view", "gt_seq_labels.view", "entity_masks.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "gt_spans.masked_select", "sum", "len", "list", "seq_logits.size", "range", "range", "len", "loss.PIQNLoss.keys", "len"], "methods", ["None"], ["", "def", "compute", "(", "self", ",", "entity_logits", ",", "pred_left", ",", "pred_right", ",", "output", ",", "gt_types", ",", "gt_spans", ",", "entity_masks", ",", "epoch", ",", "deeply_weight", "=", "\"same\"", ",", "seq_logits", "=", "None", ",", "gt_seq_labels", "=", "None", ",", "batch", "=", "None", ")", ":", "\n", "# set_trace()", "\n", "\n", "        ", "maskedlm_loss", "=", "None", "\n", "if", "seq_logits", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "0", ")", "\n", "maskedlm_loss", "=", "loss_fct", "(", "seq_logits", ".", "view", "(", "-", "1", ",", "seq_logits", ".", "size", "(", "-", "1", ")", ")", ",", "gt_seq_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "\n", "\n", "", "gt_types_wo_nil", "=", "gt_types", ".", "masked_select", "(", "entity_masks", ")", "\n", "\n", "# if len(gt_types_wo_nil) == 0:", "\n", "#     return 0.1", "\n", "\n", "sizes", "=", "[", "i", ".", "sum", "(", ")", "for", "i", "in", "entity_masks", "]", "\n", "entity_masks", "=", "entity_masks", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", "\n", "spans_wo_nil", "=", "gt_spans", ".", "masked_select", "(", "entity_masks", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "\n", "targets", "=", "{", "\"labels\"", ":", "gt_types_wo_nil", ",", "\"gt_left\"", ":", "spans_wo_nil", "[", ":", ",", "0", "]", ",", "\"gt_right\"", ":", "spans_wo_nil", "[", ":", ",", "1", "]", ",", "\"sizes\"", ":", "sizes", "}", "\n", "\n", "train_loss", "=", "[", "]", "\n", "for", "out_dict", "in", "output", ":", "\n", "            ", "entity_logits", ",", "pred_left", ",", "pred_right", "=", "out_dict", "[", "\"entity_logits\"", "]", ",", "out_dict", "[", "\"p_left\"", "]", ",", "out_dict", "[", "\"p_right\"", "]", "\n", "outputs", "=", "{", "\"pred_logits\"", ":", "entity_logits", ",", "\"pred_left\"", ":", "pred_left", ",", "\"pred_right\"", ":", "pred_right", ",", "\"token_mask\"", ":", "batch", "[", "\"token_masks\"", "]", "}", "\n", "loss_dict", "=", "self", ".", "criterion", "(", "outputs", ",", "targets", ",", "epoch", ")", "\n", "\n", "train_loss", ".", "append", "(", "sum", "(", "loss_dict", "[", "k", "]", "*", "self", ".", "weight_dict", "[", "k", "]", "for", "k", "in", "loss_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "if", "deeply_weight", "==", "\"same\"", ":", "\n", "            ", "deeply_weight", "=", "[", "1", "]", "*", "len", "(", "output", ")", "\n", "", "elif", "deeply_weight", "==", "\"linear\"", ":", "\n", "            ", "deeply_weight", "=", "list", "(", "range", "(", "1", ",", "len", "(", "output", ")", "+", "1", ")", ")", "\n", "", "train_loss", "=", "sum", "(", "train_loss", "[", "i", "]", "*", "deeply_weight", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "output", ")", ")", ")", "\n", "\n", "if", "maskedlm_loss", "is", "not", "None", ":", "\n", "            ", "train_loss", "+=", "maskedlm_loss", "\n", "", "train_loss", ".", "backward", "(", ")", "\n", "# find unused parameters", "\n", "# for name, param in (self._model.named_parameters()):", "\n", "#     if param.grad is None:", "\n", "#         print(name)", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "_model", ".", "parameters", "(", ")", ",", "self", ".", "_max_grad_norm", ")", "\n", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "self", ".", "_scheduler", ".", "step", "(", ")", "\n", "self", ".", "_model", ".", "zero_grad", "(", ")", "\n", "return", "train_loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion.__init__": [[88, 112], ["torch.nn.Module.__init__", "matcher.HungarianMatcher", "torch.ones", "loss.Criterion.register_buffer", "matcher.HungarianMatcher", "focalloss.FocalLoss"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["def", "__init__", "(", "self", ",", "entity_type_count", ",", "weight_dict", ",", "nil_weight", ",", "losses", ",", "type_loss", ",", "match_class_weight", ",", "match_boundary_weight", ",", "solver", ",", "match_warmup_epoch", ")", ":", "\n", "        ", "\"\"\" Create the criterion.\n        Parameters:\n            entity_type_count: number of object categories, omitting the special no-object category\n            matcher: module able to compute a matching between targets and proposals\n            weight_dict: dict containing as key the names of the losses and as values their relative weight.\n            nil_weight: relative classification weight applied to the no-object category\n            losses: list of all the losses to be applied. See get_loss for list of available losses.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "entity_type_count", "=", "entity_type_count", "\n", "self", ".", "matcher", "=", "HungarianMatcher", "(", "cost_class", "=", "match_class_weight", ",", "cost_span", "=", "match_boundary_weight", ",", "solver", "=", "solver", ")", "\n", "self", ".", "match_warmup_epoch", "=", "match_warmup_epoch", "\n", "if", "match_warmup_epoch", ">", "0", ":", "\n", "            ", "self", ".", "order_matcher", "=", "HungarianMatcher", "(", "solver", "=", "\"order\"", ")", "\n", "", "self", ".", "weight_dict", "=", "weight_dict", "\n", "self", ".", "nil_weight", "=", "nil_weight", "\n", "self", ".", "losses", "=", "losses", "\n", "empty_weight", "=", "torch", ".", "ones", "(", "self", ".", "entity_type_count", ")", "\n", "empty_weight", "[", "0", "]", "=", "self", ".", "nil_weight", "\n", "self", ".", "register_buffer", "(", "'empty_weight'", ",", "empty_weight", ")", "\n", "self", ".", "type_loss", "=", "type_loss", "\n", "if", "type_loss", "==", "\"focalloss\"", ":", "\n", "            ", "self", ".", "focalloss", "=", "FocalLoss", "(", "entity_type_count", ",", "alpha", "=", "empty_weight", ",", "gamma", "=", "2", ",", "reduction", "=", "\"mean\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion.loss_labels": [[113, 169], ["loss.Criterion._get_src_permutation_idx", "targets[].split", "torch.cat", "torch.full", "loss.Criterion.empty_weight.clone", "src_logits.view.view.view", "target_classes.view.view.view", "torch.nn.functional.cross_entropy", "src_logits.view.view.view", "target_classes.view.view.view", "torch.zeros().to", "torch.zeros().to.scatter_", "torch.nn.functional.sigmoid", "torch.nn.functional.binary_cross_entropy", "loss.Criterion.focalloss", "src_logits.view.view.size", "src_logits.view.view.size", "target_classes.view.view.unsqueeze", "src_logits.view.view.view", "target_classes.view.view.view", "zip", "torch.zeros", "src_logits.view.view.size", "src_logits.view.view.size", "src_logits.view.view.size", "target_classes.view.view.size", "src_logits.view.view.size"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion._get_src_permutation_idx"], ["", "", "def", "loss_labels", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_spans", ")", ":", "\n", "        ", "\"\"\"Classification loss (NLL)\n        targets dicts must contain the key \"labels\" containing a tensor of dim [nb_target_boxes]\n        \"\"\"", "\n", "assert", "'pred_logits'", "in", "outputs", "\n", "# src_logits = outputs['pred_logits']", "\n", "\n", "# idx = self._get_src_permutation_idx(indices)", "\n", "# target_classes_o = torch.cat([t[\"labels\"][J] for t, (_, J) in zip(targets, indices)])", "\n", "# target_classes = torch.full(src_logits.shape[:2], self.entity_type_count,", "\n", "#                             dtype=torch.int64, device=src_logits.device)", "\n", "# target_classes[idx] = target_classes_o", "\n", "\n", "\n", "src_logits", "=", "outputs", "[", "'pred_logits'", "]", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "\n", "# indices [(tensor([44]), tensor([0])), (tensor([20, 42, 46, 56, 58]), tensor([2, 0, 3, 4, 1])), (tensor([ 7,  8, 11, 27]), tensor([0, 1, 3, 2])), (tensor([ 2, 14, 31, 39, 41, 43, 50]), tensor([6, 5, 4, 3, 0, 2, 1])), (tensor([45]), tensor([0])), (tensor([14, 18]), tensor([1, 0])), (tensor([3]), tensor([0])), (tensor([44, 47, 55]), tensor([2, 0, 1]))]", "\n", "\n", "# self._get_src_permutation_idx(indices) (tensor([0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7]), tensor([44, 20, 42, 46, 56, 58,  7,  8, 11, 27,  2, 14, 31, 39, 41, 43, 50, 45, 14, 18,  3, 44, 47, 55]))", "\n", "# self._get_tgt_permutation_idx(indices) (tensor([0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7]), tensor([0, 2, 0, 3, 4, 1, 0, 1, 3, 2, 6, 5, 4, 3, 0, 2, 1, 0, 1, 0, 0, 2, 0, 1]))", "\n", "\n", "# targets[\"labels\"] (tensor([5], device='cuda:2'), tensor([2, 2, 2, 2, 2], device='cuda:2'), tensor([2, 5, 5, 5], device='cuda:2'), tensor([2, 5, 2, 2, 3, 6, 3], device='cuda:2'), tensor([2], device='cuda:2'), tensor([4, 6], device='cuda:2'), tensor([2], device='cuda:2'), tensor([5, 2, 2], device='cuda:2'))", "\n", "\n", "# target_classes_o tensor([5, 2, 2, 2, 2, 2, 2, 5, 5, 5, 3, 6, 3, 2, 2, 2, 5, 2, 6, 4, 2, 2, 5, 2], device='cuda:2')", "\n", "\n", "labels", "=", "targets", "[", "\"labels\"", "]", ".", "split", "(", "targets", "[", "\"sizes\"", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "target_classes_o", "=", "torch", ".", "cat", "(", "[", "t", "[", "J", "]", "for", "t", ",", "(", "_", ",", "J", ")", "in", "zip", "(", "labels", ",", "indices", ")", "]", ")", "\n", "target_classes", "=", "torch", ".", "full", "(", "src_logits", ".", "shape", "[", ":", "2", "]", ",", "0", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "src_logits", ".", "device", ")", "\n", "target_classes", "[", "idx", "]", "=", "target_classes_o", "\n", "empty_weight", "=", "self", ".", "empty_weight", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "nil_weight", "==", "-", "1", ":", "\n", "            ", "empty_weight", "[", "0", "]", "=", "num_spans", "/", "(", "src_logits", ".", "size", "(", "0", ")", "*", "src_logits", ".", "size", "(", "1", ")", "-", "num_spans", ")", "\n", "# empty_weight[0] = num_spans / (src_logits.size(0) * src_logits.size(1))", "\n", "# empty_weight[1:] = (src_logits.size(0) * src_logits.size(1) - num_spans) / (src_logits.size(0) * src_logits.size(1))", "\n", "", "if", "self", ".", "type_loss", "==", "\"celoss\"", ":", "\n", "            ", "src_logits", "=", "src_logits", ".", "view", "(", "-", "1", ",", "src_logits", ".", "size", "(", "2", ")", ")", "\n", "target_classes", "=", "target_classes", ".", "view", "(", "-", "1", ")", "\n", "loss_ce", "=", "F", ".", "cross_entropy", "(", "src_logits", ",", "target_classes", ",", "empty_weight", ")", "\n", "# loss_ce = F.cross_entropy(src_logits.transpose(1, 2), target_classes, empty_weight)", "\n", "", "if", "self", ".", "type_loss", "==", "\"bceloss\"", ":", "\n", "            ", "src_logits", "=", "src_logits", ".", "view", "(", "-", "1", ",", "src_logits", ".", "size", "(", "2", ")", ")", "\n", "target_classes", "=", "target_classes", ".", "view", "(", "-", "1", ")", "\n", "target_classes_onehot", "=", "torch", ".", "zeros", "(", "[", "target_classes", ".", "size", "(", "0", ")", ",", "src_logits", ".", "size", "(", "1", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", "=", "target_classes", ".", "device", ")", "\n", "target_classes_onehot", ".", "scatter_", "(", "1", ",", "target_classes", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "src_logits_p", "=", "F", ".", "sigmoid", "(", "src_logits", ")", "\n", "loss_ce", "=", "F", ".", "binary_cross_entropy", "(", "src_logits_p", ",", "target_classes_onehot", ")", "\n", "", "if", "self", ".", "type_loss", "==", "\"focalloss\"", ":", "\n", "            ", "self", ".", "focalloss", ".", "alpha", "=", "empty_weight", "\n", "loss_ce", "=", "self", ".", "focalloss", "(", "src_logits", ".", "view", "(", "-", "1", ",", "src_logits", ".", "size", "(", "-", "1", ")", ")", ",", "target_classes", ".", "view", "(", "-", "1", ")", ")", "\n", "", "losses", "=", "{", "'loss_ce'", ":", "loss_ce", "}", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion.loss_cardinality": [[170, 184], ["torch.no_grad", "torch.as_tensor", "torch.nn.functional.l1_loss", "card_pred.float", "torch.as_tensor.float", "pred_logits.argmax"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "loss_cardinality", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_spans", ")", ":", "\n", "        ", "\"\"\" Compute the cardinality error, ie the absolute error in the number of predicted non-empty boxes\n        This is not really a loss, it is intended for logging purposes only. It doesn't propagate gradients\n        \"\"\"", "\n", "pred_logits", "=", "outputs", "[", "'pred_logits'", "]", "\n", "device", "=", "pred_logits", ".", "device", "\n", "# tgt_lengths = torch.as_tensor([len(v[\"labels\"]) for v in targets], device=device)", "\n", "tgt_lengths", "=", "torch", ".", "as_tensor", "(", "targets", "[", "\"sizes\"", "]", ",", "device", "=", "device", ")", "\n", "# Count the number of predictions that are NOT \"no-object\" (which is the last class)", "\n", "card_pred", "=", "(", "pred_logits", ".", "argmax", "(", "-", "1", ")", "!=", "pred_logits", ".", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "card_err", "=", "F", ".", "l1_loss", "(", "card_pred", ".", "float", "(", ")", ",", "tgt_lengths", ".", "float", "(", ")", ")", "\n", "losses", "=", "{", "'cardinality_error'", ":", "card_err", "}", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion.loss_boundary": [[185, 232], ["loss.Criterion._get_src_permutation_idx", "outputs[].unsqueeze().expand", "targets[].split", "torch.cat", "targets[].split", "torch.cat", "torch.zeros().to", "torch.zeros().to.scatter_", "torch.zeros().to", "torch.zeros().to.scatter_", "torch.nn.functional.binary_cross_entropy", "torch.nn.functional.binary_cross_entropy", "outputs[].size", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "loss_boundary.sum", "outputs[].unsqueeze", "torch.zeros", "torch.zeros", "zip", "zip", "torch.cat.size", "src_spans_left.size", "torch.cat.size", "src_spans_right.size"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion._get_src_permutation_idx"], ["", "def", "loss_boundary", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_spans", ")", ":", "\n", "        ", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "src_spans_left", "=", "outputs", "[", "'pred_left'", "]", "[", "idx", "]", "\n", "src_spans_right", "=", "outputs", "[", "'pred_right'", "]", "[", "idx", "]", "\n", "token_masks", "=", "outputs", "[", "'token_mask'", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "outputs", "[", "'pred_right'", "]", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "token_masks", "=", "token_masks", "[", "idx", "]", "\n", "\n", "# target_spans_left = torch.cat([t['gt_left'][i] for t, (_, i) in zip(targets, indices)], dim=0)", "\n", "# target_spans_right = torch.cat([t['gt_right'][i] for t, (_, i) in zip(targets, indices)], dim=0)", "\n", "\n", "gt_left", "=", "targets", "[", "\"gt_left\"", "]", ".", "split", "(", "targets", "[", "\"sizes\"", "]", ",", "dim", "=", "0", ")", "\n", "target_spans_left", "=", "torch", ".", "cat", "(", "[", "t", "[", "i", "]", "for", "t", ",", "(", "_", ",", "i", ")", "in", "zip", "(", "gt_left", ",", "indices", ")", "]", ",", "dim", "=", "0", ")", "\n", "gt_right", "=", "targets", "[", "\"gt_right\"", "]", ".", "split", "(", "targets", "[", "\"sizes\"", "]", ",", "dim", "=", "0", ")", "\n", "target_spans_right", "=", "torch", ".", "cat", "(", "[", "t", "[", "i", "]", "for", "t", ",", "(", "_", ",", "i", ")", "in", "zip", "(", "gt_right", ",", "indices", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "# src_left_boundary_logp = torch.log(1e-25 + src_spans_left)", "\n", "# src_right_boundary_logp = torch.log(1e-25 + src_spans_right)", "\n", "\n", "\n", "# left_nll_loss = F.nll_loss(src_left_boundary_logp, target_spans_left, reduction='none')", "\n", "# right_nll_loss = F.nll_loss(src_right_boundary_logp, target_spans_right, reduction='none')", "\n", "\n", "# loss_boundary = left_nll_loss + right_nll_loss", "\n", "\n", "left_onehot", "=", "torch", ".", "zeros", "(", "[", "target_spans_left", ".", "size", "(", "0", ")", ",", "src_spans_left", ".", "size", "(", "1", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", "=", "target_spans_left", ".", "device", ")", "\n", "left_onehot", ".", "scatter_", "(", "1", ",", "target_spans_left", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "\n", "right_onehot", "=", "torch", ".", "zeros", "(", "[", "target_spans_right", ".", "size", "(", "0", ")", ",", "src_spans_right", ".", "size", "(", "1", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", "=", "target_spans_right", ".", "device", ")", "\n", "right_onehot", ".", "scatter_", "(", "1", ",", "target_spans_right", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "\n", "left_nll_loss", "=", "F", ".", "binary_cross_entropy", "(", "src_spans_left", ",", "left_onehot", ",", "reduction", "=", "'none'", ")", "\n", "right_nll_loss", "=", "F", ".", "binary_cross_entropy", "(", "src_spans_right", ",", "right_onehot", ",", "reduction", "=", "'none'", ")", "\n", "\n", "# left_nll_loss = sigmoid_focal_loss(src_spans_left, left_onehot)", "\n", "# right_nll_loss = sigmoid_focal_loss(src_spans_right, right_onehot)", "\n", "\n", "\n", "# NIL object boundary", "\n", "loss_boundary", "=", "(", "left_nll_loss", "+", "right_nll_loss", ")", "*", "token_masks", "\n", "\n", "losses", "=", "{", "}", "\n", "losses", "[", "'loss_boundary'", "]", "=", "loss_boundary", ".", "sum", "(", ")", "/", "num_spans", "\n", "# losses['loss_boundary'] = loss_boundary.mean(1).sum() / num_spans", "\n", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion._get_src_permutation_idx": [[233, 238], ["torch.cat", "torch.cat", "torch.full_like", "enumerate"], "methods", ["None"], ["", "def", "_get_src_permutation_idx", "(", "self", ",", "indices", ")", ":", "\n", "# permute predictions following indices", "\n", "        ", "batch_idx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "full_like", "(", "src", ",", "i", ")", "for", "i", ",", "(", "src", ",", "_", ")", "in", "enumerate", "(", "indices", ")", "]", ")", "\n", "src_idx", "=", "torch", ".", "cat", "(", "[", "src", "for", "(", "src", ",", "_", ")", "in", "indices", "]", ")", "\n", "return", "batch_idx", ",", "src_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion._get_tgt_permutation_idx": [[239, 244], ["torch.cat", "torch.cat", "torch.full_like", "enumerate"], "methods", ["None"], ["", "def", "_get_tgt_permutation_idx", "(", "self", ",", "indices", ")", ":", "\n", "# permute targets following indices", "\n", "        ", "batch_idx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "full_like", "(", "tgt", ",", "i", ")", "for", "i", ",", "(", "_", ",", "tgt", ")", "in", "enumerate", "(", "indices", ")", "]", ")", "\n", "tgt_idx", "=", "torch", ".", "cat", "(", "[", "tgt", "for", "(", "_", ",", "tgt", ")", "in", "indices", "]", ")", "\n", "return", "batch_idx", ",", "tgt_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion.get_loss": [[245, 253], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "loss", ",", "outputs", ",", "targets", ",", "indices", ",", "num_spans", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss_map", "=", "{", "\n", "'labels'", ":", "self", ".", "loss_labels", ",", "\n", "'cardinality'", ":", "self", ".", "loss_cardinality", ",", "\n", "'boundary'", ":", "self", ".", "loss_boundary", ",", "\n", "}", "\n", "assert", "loss", "in", "loss_map", ",", "f'do you really want to compute {loss} loss?'", "\n", "return", "loss_map", "[", "loss", "]", "(", "outputs", ",", "targets", ",", "indices", ",", "num_spans", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion.forward": [[255, 272], ["sum", "torch.as_tensor", "loss.Criterion.order_matcher", "loss.Criterion.matcher", "losses.update", "loss.Criterion.get_loss", "next", "iter", "outputs.values"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.loss.Criterion.get_loss"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ",", "epoch", ")", ":", "\n", "# Retrieve the matching between the outputs of the last layer and the targets", "\n", "\n", "        ", "if", "epoch", "<", "self", ".", "match_warmup_epoch", ":", "\n", "            ", "indices", "=", "self", ".", "order_matcher", "(", "outputs", ",", "targets", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "self", ".", "matcher", "(", "outputs", ",", "targets", ")", "\n", "\n", "# Compute the average number of target boxes accross all nodes, for normalization purposes", "\n", "", "num_spans", "=", "sum", "(", "targets", "[", "\"sizes\"", "]", ")", "\n", "num_spans", "=", "torch", ".", "as_tensor", "(", "[", "num_spans", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "next", "(", "iter", "(", "outputs", ".", "values", "(", ")", ")", ")", ".", "device", ")", "\n", "\n", "# Compute all the requested losses", "\n", "losses", "=", "{", "}", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "losses", ".", "update", "(", "self", ".", "get_loss", "(", "loss", ",", "outputs", ",", "targets", ",", "indices", ",", "num_spans", ")", ")", "\n", "", "return", "losses", "", "", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.__init__": [[24, 65], ["json.load", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "piqn.entities.EntityType", "enumerate", "piqn.entities.RelationType", "enumerate", "dict", "open", "types[].items", "piqn.entities.EntityType", "types[].items", "piqn.entities.RelationType"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "types_path", ":", "str", ",", "tokenizer", ":", "BertTokenizer", ",", "logger", ":", "Logger", "=", "None", ",", "random_mask_word", "=", "None", ",", "repeat_gt_entities", "=", "None", ")", ":", "\n", "        ", "types", "=", "json", ".", "load", "(", "open", "(", "types_path", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "# entity + relation types", "\n", "\n", "self", ".", "_entity_types", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_idx2entity_type", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_relation_types", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_idx2relation_type", "=", "OrderedDict", "(", ")", "\n", "\n", "# entities", "\n", "# add 'None' entity type", "\n", "none_entity_type", "=", "EntityType", "(", "'None'", ",", "0", ",", "'None'", ",", "'No Entity'", ")", "\n", "self", ".", "_entity_types", "[", "'None'", "]", "=", "none_entity_type", "\n", "self", ".", "_idx2entity_type", "[", "0", "]", "=", "none_entity_type", "\n", "\n", "# specified entity types", "\n", "for", "i", ",", "(", "key", ",", "v", ")", "in", "enumerate", "(", "types", "[", "'entities'", "]", ".", "items", "(", ")", ")", ":", "\n", "            ", "entity_type", "=", "EntityType", "(", "key", ",", "i", "+", "1", ",", "v", "[", "'short'", "]", ",", "v", "[", "'verbose'", "]", ")", "\n", "self", ".", "_entity_types", "[", "key", "]", "=", "entity_type", "\n", "self", ".", "_idx2entity_type", "[", "i", "+", "1", "]", "=", "entity_type", "\n", "\n", "# relations", "\n", "# add 'None' relation type", "\n", "", "none_relation_type", "=", "RelationType", "(", "'None'", ",", "0", ",", "'None'", ",", "'No Relation'", ")", "\n", "self", ".", "_relation_types", "[", "'None'", "]", "=", "none_relation_type", "\n", "self", ".", "_idx2relation_type", "[", "0", "]", "=", "none_relation_type", "\n", "\n", "# specified relation types", "\n", "for", "i", ",", "(", "key", ",", "v", ")", "in", "enumerate", "(", "types", "[", "'relations'", "]", ".", "items", "(", ")", ")", ":", "\n", "            ", "relation_type", "=", "RelationType", "(", "key", ",", "i", "+", "1", ",", "v", "[", "'short'", "]", ",", "v", "[", "'verbose'", "]", ",", "v", "[", "'symmetric'", "]", ")", "\n", "self", ".", "_relation_types", "[", "key", "]", "=", "relation_type", "\n", "self", ".", "_idx2relation_type", "[", "i", "+", "1", "]", "=", "relation_type", "\n", "\n", "", "self", ".", "_datasets", "=", "dict", "(", ")", "\n", "\n", "self", ".", "_tokenizer", "=", "tokenizer", "\n", "self", ".", "_logger", "=", "logger", "\n", "self", ".", "_random_mask_word", "=", "random_mask_word", "\n", "self", ".", "_repeat_gt_entities", "=", "repeat_gt_entities", "\n", "\n", "self", ".", "_vocabulary_size", "=", "tokenizer", ".", "vocab_size", "\n", "self", ".", "_context_size", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.read": [[66, 69], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "read", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.get_dataset": [[70, 72], ["None"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "_datasets", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.get_entity_type": [[73, 76], ["None"], "methods", ["None"], ["", "def", "get_entity_type", "(", "self", ",", "idx", ")", "->", "EntityType", ":", "\n", "        ", "entity", "=", "self", ".", "_idx2entity_type", "[", "idx", "]", "\n", "return", "entity", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.get_relation_type": [[77, 80], ["None"], "methods", ["None"], ["", "def", "get_relation_type", "(", "self", ",", "idx", ")", "->", "RelationType", ":", "\n", "        ", "relation", "=", "self", ".", "_idx2relation_type", "[", "idx", "]", "\n", "return", "relation", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader._calc_context_size": [[81, 91], ["max", "isinstance", "sizes.append", "len"], "methods", ["None"], ["", "def", "_calc_context_size", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "sizes", "=", "[", "-", "1", "]", "\n", "\n", "for", "dataset", "in", "datasets", ":", "\n", "            ", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "                ", "for", "doc", "in", "dataset", ".", "documents", ":", "\n", "                    ", "sizes", ".", "append", "(", "len", "(", "doc", ".", "encoding", ")", ")", "\n", "\n", "", "", "", "context_size", "=", "max", "(", "sizes", ")", "\n", "return", "context_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader._log": [[92, 95], ["input_reader.BaseInputReader._logger.info"], "methods", ["None"], ["", "def", "_log", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.datasets": [[96, 99], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "datasets", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.entity_types": [[100, 103], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "entity_types", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_entity_types", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.relation_types": [[104, 107], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "relation_types", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_relation_types", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.relation_type_count": [[108, 111], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "relation_type_count", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_relation_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.entity_type_count": [[112, 115], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "entity_type_count", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_entity_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.vocabulary_size": [[116, 119], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocabulary_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_vocabulary_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.context_size": [[120, 123], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "context_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_context_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.__str__": [[124, 131], ["input_reader.BaseInputReader._datasets.values", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "string", "=", "\"\"", "\n", "for", "dataset", "in", "self", ".", "_datasets", ".", "values", "(", ")", ":", "\n", "            ", "string", "+=", "\"Dataset: %s\\n\"", "%", "dataset", "\n", "string", "+=", "str", "(", "dataset", ")", "\n", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.__repr__": [[132, 134], ["input_reader.BaseInputReader.__str__"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader.__init__": [[137, 166], ["input_reader.BaseInputReader.__init__", "json.load().items", "os.path.exists", "os.path.exists", "input_reader.JsonInputReader._log", "json.load", "numpy.load", "input_reader.JsonInputReader._log", "wordvec_filename.split", "open", "json.load", "input_reader.JsonInputReader.POS_MAP.append", "os.path.dirname", "os.path.dirname", "os.path.dirname", "open", "os.path.dirname", "os.path.dirname", "types_path.replace"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log"], ["    ", "def", "__init__", "(", "self", ",", "types_path", ":", "str", ",", "tokenizer", ":", "BertTokenizer", ",", "logger", ":", "Logger", "=", "None", ",", "wordvec_filename", "=", "None", ",", "random_mask_word", "=", "False", ",", "use_glove", "=", "False", ",", "use_pos", "=", "False", ",", "repeat_gt_entities", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "types_path", ",", "tokenizer", ",", "logger", ",", "random_mask_word", ",", "repeat_gt_entities", ")", "\n", "if", "use_glove", ":", "\n", "            ", "if", "\"glove\"", "in", "wordvec_filename", ":", "\n", "                ", "vec_size", "=", "wordvec_filename", ".", "split", "(", "\".\"", ")", "[", "-", "2", "]", "# str: 300d", "\n", "", "else", ":", "\n", "                ", "vec_size", "=", "\"bio\"", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "types_path", ")", "+", "f\"/vocab_{vec_size}.json\"", ")", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "types_path", ")", "+", "f\"/vocab_embed_{vec_size}.npy\"", ")", ":", "\n", "                ", "self", ".", "_log", "(", "f\"Reused vocab and word embedding from {os.path.dirname(types_path)}\"", ")", "\n", "self", ".", "build_vocab", "=", "False", "\n", "self", ".", "word2inx", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "dirname", "(", "types_path", ")", "+", "f\"/vocab_{vec_size}.json\"", ",", "\"r\"", ")", ")", "\n", "self", ".", "embedding_weight", "=", "np", ".", "load", "(", "os", ".", "path", ".", "dirname", "(", "types_path", ")", "+", "f\"/vocab_embed_{vec_size}.npy\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_log", "(", "\"Need some time to construct vocab...\"", ")", "\n", "self", ".", "word2inx", "=", "{", "\"<unk>\"", ":", "0", "}", "\n", "self", ".", "embedding_weight", "=", "None", "\n", "self", ".", "build_vocab", "=", "True", "\n", "", "self", ".", "vec_size", "=", "vec_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "word2inx", "=", "{", "\"<unk>\"", ":", "0", "}", "\n", "self", ".", "embedding_weight", "=", "None", "\n", "self", ".", "build_vocab", "=", "False", "\n", "\n", "", "self", ".", "wordvec_filename", "=", "wordvec_filename", "\n", "self", ".", "POS_MAP", "=", "[", "\"<UNK>\"", "]", "\n", "if", "use_pos", ":", "\n", "            ", "for", "k", ",", "v", "in", "json", ".", "load", "(", "open", "(", "types_path", ".", "replace", "(", "\"types\"", ",", "\"pos\"", ")", ")", ")", ".", "items", "(", ")", ":", "\n", "                ", "if", "v", ">", "15", ":", "\n", "                    ", "self", ".", "POS_MAP", ".", "append", "(", "k", ")", "\n", "# self.POS_MAP = list({ for k, v in json.load(open(types_path.replace(\"types\", \"pos\"))).items()}.keys())", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader.load_wordvec": [[169, 181], ["numpy.random.rand", "input_reader.JsonInputReader.word2inx.items", "len", "len", "next", "iter", "input_reader.JsonInputReader.word2vec.values"], "methods", ["None"], ["", "", "", "", "def", "load_wordvec", "(", "self", ",", "filename", ")", ":", "\n", "# word2vec = {}", "\n", "# with open(filename, \"r\") as f:", "\n", "#     if \"glove\" not in filename:", "\n", "#         f.readline()", "\n", "#     for line in f:", "\n", "#         fields = line.strip().split(' ')", "\n", "#         word2vec[fields[0]] = list(float(x) for x in fields[1:])", "\n", "        ", "self", ".", "embedding_weight", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "self", ".", "word2inx", ")", ",", "len", "(", "next", "(", "iter", "(", "self", ".", "word2vec", ".", "values", "(", ")", ")", ")", ")", ")", "\n", "for", "word", ",", "inx", "in", "self", ".", "word2inx", ".", "items", "(", ")", ":", "\n", "            ", "if", "word", "in", "self", ".", "word2vec", ":", "\n", "                ", "self", ".", "embedding_weight", "[", "inx", ",", ":", "]", "=", "self", ".", "word2vec", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader.read": [[182, 201], ["dataset_paths.items", "input_reader.JsonInputReader._calc_context_size", "dataset_path.endswith", "os.path.dirname", "json.dump", "input_reader.JsonInputReader.load_wordvec", "numpy.save", "input_reader.JsonInputReader._log", "input_reader.JsonInputReader._datasets.values", "piqn.entities.DistributedIterableDataset", "piqn.entities.Dataset", "input_reader.JsonInputReader._parse_dataset", "next", "open", "iter", "dataset_paths.values"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader._calc_context_size", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader.load_wordvec", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_dataset"], ["", "", "", "def", "read", "(", "self", ",", "dataset_paths", ")", ":", "\n", "        ", "for", "dataset_label", ",", "dataset_path", "in", "dataset_paths", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset_path", ".", "endswith", "(", "\".jsonl\"", ")", ":", "\n", "                ", "assert", "not", "self", ".", "build_vocab", ",", "\"forbidden build vocab for large dataset!\"", "\n", "dataset", "=", "DistributedIterableDataset", "(", "dataset_label", ",", "dataset_path", ",", "self", ".", "_relation_types", ",", "self", ".", "_entity_types", ",", "self", ",", "random_mask_word", "=", "self", ".", "_random_mask_word", ",", "tokenizer", "=", "self", ".", "_tokenizer", ",", "repeat_gt_entities", "=", "self", ".", "_repeat_gt_entities", ")", "\n", "self", ".", "_datasets", "[", "dataset_label", "]", "=", "dataset", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "Dataset", "(", "dataset_label", ",", "self", ".", "_relation_types", ",", "self", ".", "_entity_types", ",", "random_mask_word", "=", "self", ".", "_random_mask_word", ",", "tokenizer", "=", "self", ".", "_tokenizer", ",", "repeat_gt_entities", "=", "self", ".", "_repeat_gt_entities", ")", "\n", "self", ".", "_parse_dataset", "(", "dataset_path", ",", "dataset", ",", "dataset_label", ")", "\n", "self", ".", "_datasets", "[", "dataset_label", "]", "=", "dataset", "\n", "\n", "", "", "if", "self", ".", "build_vocab", ":", "\n", "            ", "dataset_dir", "=", "os", ".", "path", ".", "dirname", "(", "next", "(", "iter", "(", "dataset_paths", ".", "values", "(", ")", ")", ")", ")", "\n", "json", ".", "dump", "(", "self", ".", "word2inx", ",", "open", "(", "dataset_dir", "+", "f\"/vocab_{self.vec_size}.json\"", ",", "\"w\"", ")", ")", "\n", "self", ".", "load_wordvec", "(", "self", ".", "wordvec_filename", ")", "\n", "np", ".", "save", "(", "dataset_dir", "+", "f\"/vocab_embed_{self.vec_size}.npy\"", ",", "self", ".", "embedding_weight", ")", "\n", "self", ".", "_log", "(", "f\"Vocab and word embeddings cached in {dataset_dir}\"", ")", "\n", "\n", "", "self", ".", "_context_size", "=", "self", ".", "_calc_context_size", "(", "self", ".", "_datasets", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_dataset": [[202, 208], ["json.load", "tqdm.tqdm.tqdm", "open", "input_reader.JsonInputReader._build_vocab", "input_reader.JsonInputReader._parse_document"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._build_vocab", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_document"], ["", "def", "_parse_dataset", "(", "self", ",", "dataset_path", ",", "dataset", ",", "dataset_label", ")", ":", "\n", "        ", "documents", "=", "json", ".", "load", "(", "open", "(", "dataset_path", ")", ")", "\n", "if", "dataset_label", "==", "\"train\"", "and", "self", ".", "build_vocab", ":", "\n", "            ", "self", ".", "_build_vocab", "(", "documents", ")", "\n", "", "for", "document", "in", "tqdm", "(", "documents", ",", "desc", "=", "\"Parse dataset '%s'\"", "%", "dataset", ".", "label", ")", ":", "\n", "            ", "self", ".", "_parse_document", "(", "document", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._build_vocab": [[209, 223], ["collections.Counter", "collections.Counter.items", "open", "collections.Counter.update", "f.readline", "line.strip().split", "list", "list", "len", "map", "line.strip", "float", "x.lower"], "methods", ["None"], ["", "", "def", "_build_vocab", "(", "self", ",", "documents", ",", "min_freq", "=", "1", ")", ":", "\n", "        ", "self", ".", "word2vec", "=", "{", "}", "\n", "with", "open", "(", "self", ".", "wordvec_filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "if", "\"glove\"", "not", "in", "self", ".", "wordvec_filename", ":", "\n", "                ", "f", ".", "readline", "(", ")", "\n", "", "for", "line", "in", "f", ":", "\n", "                ", "fields", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "word2vec", "[", "fields", "[", "0", "]", "]", "=", "list", "(", "float", "(", "x", ")", "for", "x", "in", "fields", "[", "1", ":", "]", ")", "\n", "", "", "counter", "=", "Counter", "(", ")", "\n", "for", "doc", "in", "documents", ":", "\n", "            ", "counter", ".", "update", "(", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "lower", "(", ")", ",", "doc", "[", "'tokens'", "]", ")", ")", ")", "\n", "", "for", "k", ",", "v", "in", "counter", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", ">=", "min_freq", "and", "k", "in", "self", ".", "word2vec", ":", "\n", "                ", "self", ".", "word2inx", "[", "k", "]", "=", "len", "(", "self", ".", "word2inx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_document": [[224, 254], ["input_reader.JsonInputReader._parse_tokens", "input_reader.JsonInputReader._parse_entities", "input_reader.JsonInputReader._parse_relations", "dataset.create_document", "len", "input_reader.JsonInputReader._log", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_tokens", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_entities", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_relations", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.create_document", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log"], ["", "", "", "def", "_parse_document", "(", "self", ",", "doc", ",", "dataset", ")", "->", "Document", ":", "\n", "        ", "jtokens", "=", "doc", "[", "'tokens'", "]", "\n", "jrelations", "=", "doc", "[", "'relations'", "]", "\n", "jentities", "=", "doc", "[", "'entities'", "]", "\n", "jpos", "=", "None", "\n", "if", "'pos'", "in", "doc", ":", "\n", "            ", "jpos", "=", "doc", "[", "'pos'", "]", "\n", "", "ltokens", "=", "doc", "[", "\"ltokens\"", "]", "\n", "rtokens", "=", "doc", "[", "\"rtokens\"", "]", "\n", "\n", "if", "not", "jpos", ":", "\n", "            ", "jpos", "=", "[", "\"<UNK>\"", "]", "*", "len", "(", "doc", "[", "'tokens'", "]", ")", "\n", "\n", "# parse tokens", "\n", "", "doc_tokens", ",", "doc_encoding", ",", "char_encoding", ",", "seg_encoding", "=", "self", ".", "_parse_tokens", "(", "jtokens", ",", "ltokens", ",", "rtokens", ",", "jpos", ",", "dataset", ")", "\n", "\n", "if", "len", "(", "doc_encoding", ")", ">", "512", ":", "\n", "            ", "self", ".", "_log", "(", "f\"Document {doc['org_id']} len(doc_encoding) = {len(doc_encoding) } > 512, Ignored!\"", ")", "\n", "return", "None", "\n", "\n", "# parse entity mentions", "\n", "", "entities", "=", "self", ".", "_parse_entities", "(", "jentities", ",", "doc_tokens", ",", "dataset", ")", "\n", "\n", "# parse relations", "\n", "relations", "=", "self", ".", "_parse_relations", "(", "jrelations", ",", "entities", ",", "dataset", ")", "\n", "\n", "# create document", "\n", "document", "=", "dataset", ".", "create_document", "(", "doc_tokens", ",", "entities", ",", "relations", ",", "doc_encoding", ",", "char_encoding", ",", "seg_encoding", ")", "\n", "\n", "return", "document", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_tokens": [[255, 320], ["enumerate", "input_reader.JsonInputReader._tokenizer.convert_tokens_to_ids", "input_reader.JsonInputReader._tokenizer.encode", "input_reader.JsonInputReader._tokenizer.encode", "dataset.create_token", "doc_tokens.append", "char_encoding.append", "input_reader.JsonInputReader._tokenizer.encode", "input_reader.JsonInputReader._tokenizer.convert_tokens_to_ids", "list", "input_reader.JsonInputReader.POS_MAP.index", "input_reader.JsonInputReader.POS_MAP.index", "len", "len", "len", "token_phrase.lower", "len", "char_vocab.index", "len", "token_encoding_char.append", "token_encoding_char.append", "len", "len", "len", "len", "char_vocab.index", "char_vocab.index", "token_phrase.lower"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.create_token", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.index", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.index", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.index", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.index", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.index"], ["", "def", "_parse_tokens", "(", "self", ",", "jtokens", ",", "ltokens", ",", "rtokens", ",", "jpos", ",", "dataset", ")", ":", "\n", "        ", "doc_tokens", "=", "[", "]", "\n", "char_vocab", "=", "[", "'<PAD>'", "]", "+", "list", "(", "string", ".", "printable", ")", "+", "[", "'<EOT>'", ",", "'<UNK>'", "]", "\n", "# full document encoding including special tokens ([CLS] and [SEP]) and byte-pair encodings of original tokens", "\n", "\n", "special_tokens_map", "=", "self", ".", "_tokenizer", ".", "special_tokens_map", "\n", "doc_encoding", "=", "[", "self", ".", "_tokenizer", ".", "convert_tokens_to_ids", "(", "special_tokens_map", "[", "'cls_token'", "]", ")", "]", "\n", "seg_encoding", "=", "[", "0", "]", "\n", "char_encoding", "=", "[", "]", "\n", "# jtokens = list(filter(lambda x:x!='', jtokens))", "\n", "# doc = nlp(\" \".join(jtokens))", "\n", "# poss = [token.pos_ for token in doc]", "\n", "# poss = [\"PUNCT\" for token in jtokens]", "\n", "\n", "poss", "=", "[", "self", ".", "POS_MAP", ".", "index", "(", "pos", ")", "if", "pos", "in", "self", ".", "POS_MAP", "else", "self", ".", "POS_MAP", ".", "index", "(", "\"<UNK>\"", ")", "for", "pos", "in", "jpos", "]", "\n", "\n", "# for token in doc:", "\n", "#     print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,", "\n", "#             token.shape_, token.is_alpha, token.is_stop)", "\n", "\n", "# parse tokens", "\n", "for", "token_phrase", "in", "ltokens", ":", "\n", "            ", "token_encoding", "=", "self", ".", "_tokenizer", ".", "encode", "(", "token_phrase", ",", "add_special_tokens", "=", "False", ")", "\n", "doc_encoding", "+=", "token_encoding", "\n", "seg_encoding", "+=", "[", "0", "]", "*", "len", "(", "token_encoding", ")", "\n", "\n", "", "for", "i", ",", "token_phrase", "in", "enumerate", "(", "jtokens", ")", ":", "\n", "\n", "# if random.random() < 0.12:", "\n", "#     token_phrase = \"[MASK]\"", "\n", "# if self.build_vocab and token_phrase.lower() not in self.word2inx:", "\n", "#     self.word2inx[token_phrase.lower()] = len(self.word2inx)", "\n", "            ", "token_encoding", "=", "self", ".", "_tokenizer", ".", "encode", "(", "token_phrase", ",", "add_special_tokens", "=", "False", ")", "\n", "# token_encoding_char = list(char_vocab.index(c) for c in token_phrase)", "\n", "token_encoding_char", "=", "[", "]", "\n", "for", "c", "in", "token_phrase", ":", "\n", "                ", "if", "c", "in", "char_vocab", ":", "\n", "                    ", "token_encoding_char", ".", "append", "(", "char_vocab", ".", "index", "(", "c", ")", ")", "\n", "", "else", ":", "\n", "                    ", "token_encoding_char", ".", "append", "(", "char_vocab", ".", "index", "(", "\"<UNK>\"", ")", ")", "\n", "", "", "span_start", ",", "span_end", "=", "(", "len", "(", "doc_encoding", ")", ",", "len", "(", "doc_encoding", ")", "+", "len", "(", "token_encoding", ")", ")", "\n", "char_start", ",", "char_end", "=", "(", "len", "(", "char_encoding", ")", ",", "len", "(", "char_encoding", ")", "+", "len", "(", "token_encoding_char", ")", ")", "\n", "# try:", "\n", "if", "token_phrase", ".", "lower", "(", ")", "in", "self", ".", "word2inx", ":", "\n", "                ", "inx", "=", "self", ".", "word2inx", "[", "token_phrase", ".", "lower", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "inx", "=", "self", ".", "word2inx", "[", "\"<unk>\"", "]", "\n", "", "token", "=", "dataset", ".", "create_token", "(", "i", ",", "span_start", ",", "span_end", ",", "token_phrase", ",", "poss", "[", "i", "]", ",", "inx", ",", "char_start", ",", "char_end", ")", "\n", "doc_tokens", ".", "append", "(", "token", ")", "\n", "doc_encoding", "+=", "token_encoding", "\n", "seg_encoding", "+=", "[", "1", "]", "*", "len", "(", "token_encoding", ")", "\n", "token_encoding_char", "+=", "[", "char_vocab", ".", "index", "(", "'<EOT>'", ")", "]", "\n", "char_encoding", ".", "append", "(", "token_encoding_char", ")", "\n", "# except:", "\n", "#     print(jtokens)", "\n", "\n", "", "for", "token_phrase", "in", "rtokens", ":", "\n", "            ", "token_encoding", "=", "self", ".", "_tokenizer", ".", "encode", "(", "token_phrase", ",", "add_special_tokens", "=", "False", ")", "\n", "doc_encoding", "+=", "token_encoding", "\n", "seg_encoding", "+=", "[", "0", "]", "*", "len", "(", "token_encoding", ")", "\n", "\n", "", "doc_encoding", "+=", "[", "self", ".", "_tokenizer", ".", "convert_tokens_to_ids", "(", "special_tokens_map", "[", "'sep_token'", "]", ")", "]", "\n", "seg_encoding", "+=", "[", "0", "]", "\n", "\n", "return", "doc_tokens", ",", "doc_encoding", ",", "char_encoding", ",", "seg_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_entities": [[321, 335], ["enumerate", "dataset.create_entity", "entities.append"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.create_entity"], ["", "def", "_parse_entities", "(", "self", ",", "jentities", ",", "doc_tokens", ",", "dataset", ")", "->", "List", "[", "Entity", "]", ":", "\n", "        ", "entities", "=", "[", "]", "\n", "\n", "for", "entity_idx", ",", "jentity", "in", "enumerate", "(", "jentities", ")", ":", "\n", "            ", "entity_type", "=", "self", ".", "_entity_types", "[", "jentity", "[", "'type'", "]", "]", "\n", "start", ",", "end", "=", "jentity", "[", "'start'", "]", ",", "jentity", "[", "'end'", "]", "\n", "\n", "# create entity mention", "\n", "tokens", "=", "doc_tokens", "[", "start", ":", "end", "]", "\n", "phrase", "=", "\" \"", ".", "join", "(", "[", "t", ".", "phrase", "for", "t", "in", "tokens", "]", ")", "\n", "entity", "=", "dataset", ".", "create_entity", "(", "entity_type", ",", "tokens", ",", "phrase", ")", "\n", "entities", ".", "append", "(", "entity", ")", "\n", "\n", "", "return", "entities", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_relations": [[336, 359], ["dataset.create_relation", "relations.append", "int", "int", "piqn.util.swap"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.create_relation", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.swap"], ["", "def", "_parse_relations", "(", "self", ",", "jrelations", ",", "entities", ",", "dataset", ")", "->", "List", "[", "Relation", "]", ":", "\n", "        ", "relations", "=", "[", "]", "\n", "\n", "for", "jrelation", "in", "jrelations", ":", "\n", "            ", "relation_type", "=", "self", ".", "_relation_types", "[", "jrelation", "[", "'type'", "]", "]", "\n", "\n", "head_idx", "=", "jrelation", "[", "'head'", "]", "\n", "tail_idx", "=", "jrelation", "[", "'tail'", "]", "\n", "\n", "# create relation", "\n", "head", "=", "entities", "[", "head_idx", "]", "\n", "tail", "=", "entities", "[", "tail_idx", "]", "\n", "\n", "reverse", "=", "int", "(", "tail", ".", "tokens", "[", "0", "]", ".", "index", ")", "<", "int", "(", "head", ".", "tokens", "[", "0", "]", ".", "index", ")", "\n", "\n", "# for symmetric relations: head occurs before tail in sentence", "\n", "if", "relation_type", ".", "symmetric", "and", "reverse", ":", "\n", "                ", "head", ",", "tail", "=", "util", ".", "swap", "(", "head", ",", "tail", ")", "\n", "\n", "", "relation", "=", "dataset", ".", "create_relation", "(", "relation_type", ",", "head_entity", "=", "head", ",", "tail_entity", "=", "tail", ",", "reverse", "=", "reverse", ")", "\n", "relations", ".", "append", "(", "relation", ")", "\n", "\n", "", "return", "relations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.lap.SinkhornDistance.__init__": [[91, 96], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__"], ["def", "__init__", "(", "self", ",", "eps", "=", "1e-3", ",", "max_iter", "=", "100", ",", "reduction", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "SinkhornDistance", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.lap.SinkhornDistance.forward": [[97, 118], ["torch.ones_like", "torch.ones_like", "range", "torch.exp().detach", "torch.sum", "torch.exp", "lap.SinkhornDistance.M", "torch.log", "torch.logsumexp", "torch.log", "torch.logsumexp", "lap.SinkhornDistance.M().transpose", "lap.SinkhornDistance.M", "lap.SinkhornDistance.M"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.lap.SinkhornDistance.M", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.lap.SinkhornDistance.M", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.lap.SinkhornDistance.M"], ["", "def", "forward", "(", "self", ",", "mu", ",", "nu", ",", "C", ")", ":", "\n", "        ", "u", "=", "torch", ".", "ones_like", "(", "mu", ")", "\n", "v", "=", "torch", ".", "ones_like", "(", "nu", ")", "\n", "\n", "# Sinkhorn iterations", "\n", "for", "i", "in", "range", "(", "self", ".", "max_iter", ")", ":", "\n", "            ", "v", "=", "self", ".", "eps", "*", "(", "torch", ".", "log", "(", "\n", "nu", "+", "1e-8", ")", "-", "torch", ".", "logsumexp", "(", "self", ".", "M", "(", "C", ",", "u", ",", "v", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", ")", "+", "v", "\n", "u", "=", "self", ".", "eps", "*", "(", "torch", ".", "log", "(", "\n", "mu", "+", "1e-8", ")", "-", "torch", ".", "logsumexp", "(", "self", ".", "M", "(", "C", ",", "u", ",", "v", ")", ",", "dim", "=", "-", "1", ")", ")", "+", "u", "\n", "\n", "", "U", ",", "V", "=", "u", ",", "v", "\n", "# Transport plan pi = diag(a)*K*diag(b)", "\n", "pi", "=", "torch", ".", "exp", "(", "\n", "self", ".", "M", "(", "C", ",", "U", ",", "V", ")", ")", ".", "detach", "(", ")", "\n", "# Sinkhorn distance", "\n", "cost", "=", "torch", ".", "sum", "(", "\n", "pi", "*", "C", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "return", "cost", ",", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.lap.SinkhornDistance.M": [[119, 125], ["v.unsqueeze", "u.unsqueeze"], "methods", ["None"], ["", "def", "M", "(", "self", ",", "C", ",", "u", ",", "v", ")", ":", "\n", "        ", "'''\n        \"Modified cost for logarithmic updates\"\n        \"$M_{ij} = (-c_{ij} + u_i + v_j) / epsilon$\"\n        '''", "\n", "return", "(", "-", "C", "+", "u", ".", "unsqueeze", "(", "-", "1", ")", "+", "v", ".", "unsqueeze", "(", "-", "2", ")", ")", "/", "self", ".", "eps", "", "", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.lap.auction_lap": [[4, 62], ["torch.zeros", "torch.zeros", "X.transpose.size", "X.transpose.size", "X.transpose.transpose", "torch.zeros().long", "value.topk", "bids_.zero_", "bids_.scatter_", "bids_[].max", "have_bidder.squeeze", "int", "torch.arange", "X.transpose.size", "X.transpose.size", "torch.tensor", "torch.tensor", "X.transpose.gather().sum", "torch.arange", "X.transpose.size", "torch.zeros", "first_idx.contiguous().view", "bid_increments.view", "high_bidders.squeeze", "X.transpose.size", "X.transpose.gather", "first_idx.contiguous", "curr_ass.view", "have_bidder.view", "curr_ass.view"], "function", ["None"], ["def", "auction_lap", "(", "X", ",", "eps", "=", "None", ",", "compute_score", "=", "True", ")", ":", "\n", "    ", "device", "=", "X", ".", "device", "\n", "if", "X", ".", "size", "(", "0", ")", "==", "0", "or", "X", ".", "size", "(", "1", ")", "==", "0", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "[", "]", ",", "device", "=", "device", ")", ",", "torch", ".", "tensor", "(", "[", "]", ",", "device", "=", "device", ")", ",", "0", "\n", "\n", "", "X", "=", "-", "X", "\n", "flag", "=", "0", "\n", "if", "X", ".", "size", "(", "0", ")", ">", "X", ".", "size", "(", "1", ")", ":", "\n", "        ", "flag", "=", "1", "\n", "X", "=", "X", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "eps", "=", "1", "/", "X", ".", "shape", "[", "0", "]", "if", "eps", "is", "None", "else", "eps", "\n", "\n", "cost", "=", "torch", ".", "zeros", "(", "(", "1", ",", "X", ".", "shape", "[", "1", "]", ")", ",", "device", "=", "device", ")", "\n", "curr_ass", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", ".", "long", "(", ")", "-", "1", "\n", "bids", "=", "torch", ".", "zeros", "(", "X", ".", "shape", ",", "device", "=", "device", ")", "\n", "\n", "counter", "=", "0", "\n", "while", "(", "curr_ass", "==", "-", "1", ")", ".", "any", "(", ")", ":", "\n", "        ", "counter", "+=", "1", "\n", "\n", "# bidding", "\n", "\n", "unassigned", "=", "(", "curr_ass", "==", "-", "1", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "value", "=", "X", "[", "unassigned", "]", "-", "cost", "\n", "top_value", ",", "top_idx", "=", "value", ".", "topk", "(", "2", ",", "dim", "=", "1", ")", "\n", "\n", "first_idx", "=", "top_idx", "[", ":", ",", "0", "]", "\n", "first_value", ",", "second_value", "=", "top_value", "[", ":", ",", "0", "]", ",", "top_value", "[", ":", ",", "1", "]", "\n", "\n", "bid_increments", "=", "first_value", "-", "second_value", "+", "eps", "\n", "\n", "bids_", "=", "bids", "[", "unassigned", "]", "\n", "bids_", ".", "zero_", "(", ")", "\n", "bids_", ".", "scatter_", "(", "\n", "dim", "=", "1", ",", "\n", "index", "=", "first_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "src", "=", "bid_increments", ".", "view", "(", "-", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# assignment", "\n", "\n", "have_bidder", "=", "(", "bids_", ">", "0", ")", ".", "int", "(", ")", ".", "sum", "(", "dim", "=", "0", ")", ".", "nonzero", "(", ")", "\n", "\n", "high_bids", ",", "high_bidders", "=", "bids_", "[", ":", ",", "have_bidder", "]", ".", "max", "(", "dim", "=", "0", ")", "\n", "high_bidders", "=", "unassigned", "[", "high_bidders", ".", "squeeze", "(", ")", "]", "\n", "\n", "cost", "[", ":", ",", "have_bidder", "]", "+=", "high_bids", "\n", "\n", "curr_ass", "[", "(", "curr_ass", ".", "view", "(", "-", "1", ",", "1", ")", "==", "have_bidder", ".", "view", "(", "1", ",", "-", "1", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "]", "=", "-", "1", "\n", "curr_ass", "[", "high_bidders", "]", "=", "have_bidder", ".", "squeeze", "(", ")", "\n", "\n", "", "score", "=", "None", "\n", "if", "compute_score", ":", "\n", "        ", "score", "=", "int", "(", "X", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "curr_ass", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "if", "flag", "==", "1", ":", "\n", "        ", "return", "curr_ass", ",", "torch", ".", "arange", "(", "X", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", ",", "-", "score", "\n", "", "return", "torch", ".", "arange", "(", "X", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", ",", "curr_ass", ",", "-", "score", "\n", "# return curr_ass, score, counter", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.create_directories_file": [[15, 22], ["os.path.dirname", "os.makedirs", "os.path.exists"], "function", ["None"], ["def", "create_directories_file", "(", "f", ")", ":", "\n", "    ", "d", "=", "os", ".", "path", ".", "dirname", "(", "f", ")", "\n", "\n", "if", "d", "and", "not", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.create_directories_dir": [[24, 29], ["os.makedirs", "os.path.exists"], "function", ["None"], ["", "def", "create_directories_dir", "(", "d", ")", ":", "\n", "    ", "if", "d", "and", "not", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.create_csv": [[31, 38], ["os.path.exists", "open", "csv.writer", "csv.writer.writerow"], "function", ["None"], ["", "def", "create_csv", "(", "file_path", ",", "*", "column_names", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csv_file", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "CSV_DELIMETER", ",", "quotechar", "=", "'|'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "\n", "if", "column_names", ":", "\n", "                ", "writer", ".", "writerow", "(", "column_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.append_csv": [[40, 47], ["os.path.exists", "Exception", "open", "csv.writer", "csv.writer.writerow"], "function", ["None"], ["", "", "", "", "def", "append_csv", "(", "file_path", ",", "*", "row", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"The given file doesn't exist\"", ")", "\n", "\n", "", "with", "open", "(", "file_path", ",", "'a'", ",", "newline", "=", "''", ")", "as", "csv_file", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "CSV_DELIMETER", ",", "quotechar", "=", "'|'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "writer", ".", "writerow", "(", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.append_csv_multiple": [[49, 57], ["os.path.exists", "Exception", "open", "csv.writer", "csv.writer.writerow"], "function", ["None"], ["", "", "def", "append_csv_multiple", "(", "file_path", ",", "*", "rows", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"The given file doesn't exist\"", ")", "\n", "\n", "", "with", "open", "(", "file_path", ",", "'a'", ",", "newline", "=", "''", ")", "as", "csv_file", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "CSV_DELIMETER", ",", "quotechar", "=", "'|'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.read_csv": [[59, 67], ["open", "csv.reader", "lines.append"], "function", ["None"], ["", "", "", "def", "read_csv", "(", "file_path", ")", ":", "\n", "    ", "lines", "=", "[", "]", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "csv_file", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "CSV_DELIMETER", ",", "quotechar", "=", "'|'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "lines", ".", "append", "(", "row", ")", "\n", "\n", "", "", "return", "lines", "[", "0", "]", ",", "lines", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.copy_python_directory": [[69, 84], ["os.walk", "source.endswith", "os.path.join", "util.create_directories_dir", "file_name.endswith", "dir_path.split", "os.path.join", "shutil.copy2"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.create_directories_dir"], ["", "def", "copy_python_directory", "(", "source", ",", "dest", ",", "ignore_dirs", "=", "None", ")", ":", "\n", "    ", "source", "=", "source", "if", "source", ".", "endswith", "(", "'/'", ")", "else", "source", "+", "'/'", "\n", "for", "(", "dir_path", ",", "dir_names", ",", "file_names", ")", "in", "os", ".", "walk", "(", "source", ")", ":", "\n", "        ", "tail", "=", "'/'", ".", "join", "(", "dir_path", ".", "split", "(", "source", ")", "[", "1", ":", "]", ")", "\n", "new_dir", "=", "os", ".", "path", ".", "join", "(", "dest", ",", "tail", ")", "\n", "\n", "if", "ignore_dirs", "and", "True", "in", "[", "(", "ignore_dir", "in", "tail", ")", "for", "ignore_dir", "in", "ignore_dirs", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "create_directories_dir", "(", "new_dir", ")", "\n", "\n", "for", "file_name", "in", "file_names", ":", "\n", "            ", "if", "file_name", ".", "endswith", "(", "'.py'", ")", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_name", ")", "\n", "shutil", ".", "copy2", "(", "file_path", ",", "new_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.save_dict": [[86, 102], ["os.path.join", "open", "json.dump", "open.close", "os.path.join", "open", "open.write", "open.close", "vars", "vars().items", "vars"], "function", ["None"], ["", "", "", "", "def", "save_dict", "(", "log_path", ",", "dic", ",", "name", ")", ":", "\n", "# save arguments", "\n", "# 1. as json", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "'%s.json'", "%", "name", ")", "\n", "f", "=", "open", "(", "path", ",", "'w'", ")", "\n", "json", ".", "dump", "(", "vars", "(", "dic", ")", ",", "f", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# 2. as string", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "'%s.txt'", "%", "name", ")", "\n", "f", "=", "open", "(", "path", ",", "'w'", ")", "\n", "# args_str = [\"%s = %s\" % (key, value) for key, value in sorted(vars(dic).items())]", "\n", "args_str", "=", "[", "\"%s = %s\"", "%", "(", "key", ",", "value", ")", "for", "key", ",", "value", "in", "vars", "(", "dic", ")", ".", "items", "(", ")", "]", "\n", "\n", "f", ".", "write", "(", "'\\n'", ".", "join", "(", "args_str", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.summarize_dict": [[104, 111], ["vars().items", "summary_writer.add_text", "vars"], "function", ["None"], ["", "def", "summarize_dict", "(", "summary_writer", ",", "dic", ",", "name", ")", ":", "\n", "    ", "table", "=", "'Argument|Value\\n-|-'", "\n", "\n", "for", "k", ",", "v", "in", "vars", "(", "dic", ")", ".", "items", "(", ")", ":", "\n", "        ", "row", "=", "'\\n%s|%s'", "%", "(", "k", ",", "v", ")", "\n", "table", "+=", "row", "\n", "", "summary_writer", ".", "add_text", "(", "name", ",", "table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.set_seed": [[113, 118], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.reset_logger": [[120, 126], ["logger.removeHandler", "logger.removeFilters"], "function", ["None"], ["", "def", "reset_logger", "(", "logger", ")", ":", "\n", "    ", "for", "handler", "in", "logger", ".", "handlers", "[", ":", "]", ":", "\n", "        ", "logger", ".", "removeHandler", "(", "handler", ")", "\n", "\n", "", "for", "f", "in", "logger", ".", "filters", "[", ":", "]", ":", "\n", "        ", "logger", ".", "removeFilters", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.flatten": [[128, 130], ["None"], "function", ["None"], ["", "", "def", "flatten", "(", "l", ")", ":", "\n", "    ", "return", "[", "i", "for", "p", "in", "l", "for", "i", "in", "p", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.get_as_list": [[132, 137], ["None"], "function", ["None"], ["", "def", "get_as_list", "(", "dic", ",", "key", ")", ":", "\n", "    ", "if", "key", "in", "dic", ":", "\n", "        ", "return", "[", "dic", "[", "key", "]", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.extend_tensor": [[139, 155], ["torch.zeros().to", "extended_tensor.fill_.fill_", "len", "torch.zeros", "len", "len", "len"], "function", ["None"], ["", "", "def", "extend_tensor", "(", "tensor", ",", "extended_shape", ",", "fill", "=", "0", ")", ":", "\n", "    ", "tensor_shape", "=", "tensor", ".", "shape", "\n", "\n", "extended_tensor", "=", "torch", ".", "zeros", "(", "extended_shape", ",", "dtype", "=", "tensor", ".", "dtype", ")", ".", "to", "(", "tensor", ".", "device", ")", "\n", "extended_tensor", "=", "extended_tensor", ".", "fill_", "(", "fill", ")", "\n", "\n", "if", "len", "(", "tensor_shape", ")", "==", "1", ":", "\n", "        ", "extended_tensor", "[", ":", "tensor_shape", "[", "0", "]", "]", "=", "tensor", "\n", "", "elif", "len", "(", "tensor_shape", ")", "==", "2", ":", "\n", "        ", "extended_tensor", "[", ":", "tensor_shape", "[", "0", "]", ",", ":", "tensor_shape", "[", "1", "]", "]", "=", "tensor", "\n", "", "elif", "len", "(", "tensor_shape", ")", "==", "3", ":", "\n", "        ", "extended_tensor", "[", ":", "tensor_shape", "[", "0", "]", ",", ":", "tensor_shape", "[", "1", "]", ",", ":", "tensor_shape", "[", "2", "]", "]", "=", "tensor", "\n", "", "elif", "len", "(", "tensor_shape", ")", "==", "4", ":", "\n", "        ", "extended_tensor", "[", ":", "tensor_shape", "[", "0", "]", ",", ":", "tensor_shape", "[", "1", "]", ",", ":", "tensor_shape", "[", "2", "]", ",", ":", "tensor_shape", "[", "3", "]", "]", "=", "tensor", "\n", "\n", "", "return", "extended_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.padded_stack": [[157, 169], ["len", "torch.stack", "max", "util.extend_tensor", "padded_tensors.append", "range"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.extend_tensor"], ["", "def", "padded_stack", "(", "tensors", ",", "padding", "=", "0", ")", ":", "\n", "    ", "dim_count", "=", "len", "(", "tensors", "[", "0", "]", ".", "shape", ")", "\n", "\n", "max_shape", "=", "[", "max", "(", "[", "t", ".", "shape", "[", "d", "]", "for", "t", "in", "tensors", "]", ")", "for", "d", "in", "range", "(", "dim_count", ")", "]", "\n", "padded_tensors", "=", "[", "]", "\n", "\n", "for", "t", "in", "tensors", ":", "\n", "        ", "e", "=", "extend_tensor", "(", "t", ",", "max_shape", ",", "fill", "=", "padding", ")", "\n", "padded_tensors", ".", "append", "(", "e", ")", "\n", "\n", "", "stacked", "=", "torch", ".", "stack", "(", "padded_tensors", ")", "\n", "return", "stacked", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.batch_index": [[171, 179], ["Exception", "torch.stack", "util.padded_stack", "range", "range"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.padded_stack"], ["", "def", "batch_index", "(", "tensor", ",", "index", ",", "pad", "=", "False", ")", ":", "\n", "    ", "if", "tensor", ".", "shape", "[", "0", "]", "!=", "index", ".", "shape", "[", "0", "]", ":", "\n", "        ", "raise", "Exception", "(", ")", "\n", "\n", "", "if", "not", "pad", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "tensor", "[", "i", "]", "[", "index", "[", "i", "]", "]", "for", "i", "in", "range", "(", "index", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "padded_stack", "(", "[", "tensor", "[", "i", "]", "[", "index", "[", "i", "]", "]", "for", "i", "in", "range", "(", "index", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.padded_nonzero": [[181, 184], ["util.padded_stack", "tensor[].nonzero().view", "range", "tensor[].nonzero"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.padded_stack"], ["", "", "def", "padded_nonzero", "(", "tensor", ",", "padding", "=", "0", ")", ":", "\n", "    ", "indices", "=", "padded_stack", "(", "[", "tensor", "[", "i", "]", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "for", "i", "in", "range", "(", "tensor", ".", "shape", "[", "0", "]", ")", "]", ",", "padding", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.swap": [[186, 188], ["None"], "function", ["None"], ["", "def", "swap", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "return", "v2", ",", "v1", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.get_span_tokens": [[190, 206], ["span_tokens.append", "piqn.entities.TokenSpan"], "function", ["None"], ["", "def", "get_span_tokens", "(", "tokens", ",", "span", ")", ":", "\n", "    ", "inside", "=", "False", "\n", "span_tokens", "=", "[", "]", "\n", "\n", "for", "t", "in", "tokens", ":", "\n", "# print(t.index)", "\n", "        ", "if", "t", ".", "index", "==", "span", "[", "0", "]", ":", "\n", "            ", "inside", "=", "True", "\n", "\n", "", "if", "inside", ":", "\n", "            ", "span_tokens", ".", "append", "(", "t", ")", "\n", "\n", "", "if", "inside", "and", "t", ".", "index", "==", "span", "[", "1", "]", ":", "\n", "            ", "return", "TokenSpan", "(", "span_tokens", ")", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.to_device": [[208, 217], ["dict", "batch.keys", "key.startswith", "batch[].to"], "function", ["None"], ["", "def", "to_device", "(", "batch", ",", "device", ")", ":", "\n", "    ", "converted_batch", "=", "dict", "(", ")", "\n", "for", "key", "in", "batch", ".", "keys", "(", ")", ":", "\n", "        ", "if", "not", "key", ".", "startswith", "(", "\"meta\"", ")", ":", "\n", "            ", "converted_batch", "[", "key", "]", "=", "batch", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "converted_batch", "[", "key", "]", "=", "batch", "[", "key", "]", "\n", "\n", "", "", "return", "converted_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.round": [[219, 221], ["torch.round"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.round"], ["", "def", "round", "(", "arr", ",", "n_digits", ")", ":", "\n", "    ", "return", "torch", ".", "round", "(", "arr", "*", "10", "**", "n_digits", ")", "/", "(", "10", "**", "n_digits", ")", "", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator.__init__": [[22, 51], ["piqn.entities.EntityType", "evaluator.Evaluator._convert_gt"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_gt"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ":", "Dataset", ",", "input_reader", ":", "JsonInputReader", ",", "text_encoder", ":", "BertTokenizer", ",", "logger", ",", "no_overlapping", ":", "bool", ",", "no_partial_overlapping", ":", "bool", ",", "no_duplicate", ":", "bool", ",", "predictions_path", ":", "str", ",", "examples_path", ":", "str", ",", "example_count", ":", "int", ",", "epoch", ":", "int", ",", "dataset_label", ":", "str", ",", "cls_threshold", ":", "float", ",", "boundary_threshold", ":", "float", ",", "save_prediction", "=", "False", ")", ":", "\n", "        ", "self", ".", "_text_encoder", "=", "text_encoder", "\n", "self", ".", "_input_reader", "=", "input_reader", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "self", ".", "_logger", "=", "logger", "\n", "self", ".", "_no_overlapping", "=", "no_overlapping", "\n", "self", ".", "_no_partial_overlapping", "=", "no_partial_overlapping", "\n", "self", ".", "_no_duplicate", "=", "no_duplicate", "\n", "self", ".", "_save_prediction", "=", "save_prediction", "\n", "\n", "\n", "self", ".", "_epoch", "=", "epoch", "\n", "self", ".", "_dataset_label", "=", "dataset_label", "\n", "\n", "self", ".", "_predictions_path", "=", "predictions_path", "\n", "\n", "self", ".", "_examples_path", "=", "examples_path", "\n", "self", ".", "_example_count", "=", "example_count", "\n", "\n", "# entities", "\n", "self", ".", "_gt_entities", "=", "[", "]", "# ground truth", "\n", "self", ".", "_pred_entities", "=", "[", "]", "# prediction", "\n", "self", ".", "_raw_preds", "=", "[", "]", "\n", "self", ".", "_raw_raw_preds", "=", "[", "]", "\n", "\n", "self", ".", "_pseudo_entity_type", "=", "EntityType", "(", "'Entity'", ",", "1", ",", "'Entity'", ",", "'Entity'", ")", "# for span only evaluation", "\n", "self", ".", "_cls_threshold", "=", "cls_threshold", "\n", "self", ".", "_boundary_threshold", "=", "boundary_threshold", "\n", "self", ".", "_convert_gt", "(", "self", ".", "_dataset", ".", "documents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator.eval_batch": [[52, 145], ["entity_logits.softmax.argmax", "torch.mean.argmax", "torch.mean.argmax", "torch.stack", "range", "torch.mean", "torch.mean", "torch.mean", "entity_logits.softmax", "entity_logits.softmax.max", "torch.mean.max", "torch.mean.max", "list", "evaluator.Evaluator._convert_pred_entities", "sorted", "evaluator.Evaluator._pred_entities.append", "entity_logits.softmax", "entity_probs.append", "p_lefts.append", "p_rights.append", "torch.stack", "torch.stack", "torch.stack", "map", "dict", "sorted", "range", "evaluator.Evaluator._raw_raw_preds.append", "evaluator.Evaluator._remove_overlapping", "evaluator.Evaluator._remove_duplicate", "entity.as_tuple_token.as_tuple_token.as_tuple_token", "piqn.util.get_span_tokens", "str", "dict", "gt_converted_entities.append", "torch.mean.argmax.size", "str", "decode_entity[].append", "evaluator.Evaluator._remove_partial_overlapping", "round", "piqn.util.get_span_tokens", "dict", "[].item", "[].item", "evaluator.Evaluator.eval_batch.roundlist"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_pred_entities", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._remove_overlapping", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._remove_duplicate", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.as_tuple_token", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.get_span_tokens", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._remove_partial_overlapping", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.round", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.get_span_tokens"], ["", "def", "eval_batch", "(", "self", ",", "entity_logits", ":", "torch", ".", "tensor", ",", "p_left", ":", "torch", ".", "tensor", ",", "p_right", ":", "torch", ".", "tensor", ",", "outputs", ",", "batch", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "entity_logits", ".", "shape", "[", "0", "]", "\n", "\n", "multihead", "=", "False", "\n", "if", "multihead", ":", "\n", "            ", "entity_probs", ",", "p_lefts", ",", "p_rights", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "out_dict", "in", "outputs", ":", "\n", "                ", "entity_logits", ",", "p_left", ",", "p_right", "=", "out_dict", "[", "\"entity_logits\"", "]", ",", "out_dict", "[", "\"p_left\"", "]", ",", "out_dict", "[", "\"p_right\"", "]", "\n", "entity_prob", "=", "entity_logits", ".", "softmax", "(", "-", "1", ")", "\n", "entity_probs", ".", "append", "(", "entity_prob", ")", "\n", "p_lefts", ".", "append", "(", "p_left", ")", "\n", "p_rights", ".", "append", "(", "p_right", ")", "\n", "", "entity_prob", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "entity_probs", ")", ",", "dim", "=", "0", ")", "\n", "p_left", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "p_lefts", ")", ",", "dim", "=", "0", ")", "\n", "p_right", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "p_rights", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "entity_prob", "=", "entity_logits", ".", "softmax", "(", "-", "1", ")", "\n", "# p_left = torch.sigmoid(p_left)", "\n", "# p_right = torch.sigmoid(p_right)", "\n", "\n", "# entity_prob = torch.sigmoid(entity_logits)", "\n", "\n", "\n", "", "batch_entity_types", "=", "entity_prob", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "batch_entity_scores", "=", "entity_prob", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "batch_entity_mask", "=", "(", "batch_entity_scores", ">", "self", ".", "_cls_threshold", ")", "*", "(", "batch_entity_types", "!=", "0", ")", "\n", "\n", "entity_left", "=", "p_left", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "entity_right", "=", "p_right", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "batch_entity_left_scores", "=", "p_left", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "batch_entity_right_scores", "=", "p_right", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "batch_entity_spans", "=", "torch", ".", "stack", "(", "[", "entity_left", ",", "entity_right", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "batch_entity_mask", "=", "batch_entity_mask", "*", "(", "batch_entity_spans", "[", ":", ",", ":", ",", "0", "]", "<=", "batch_entity_spans", "[", ":", ",", ":", ",", "1", "]", ")", "*", "(", "batch_entity_left_scores", ">", "self", ".", "_boundary_threshold", ")", "*", "(", "batch_entity_right_scores", ">", "self", ".", "_boundary_threshold", ")", "\n", "\n", "def", "roundlist", "(", "x", ")", ":", "\n", "            ", "return", "list", "(", "map", "(", "lambda", "x", ":", "round", "(", "x", ",", "2", ")", ",", "x", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "doc", "=", "batch", "[", "\"meta_doc\"", "]", "[", "i", "]", "\n", "if", "self", ".", "_input_reader", ".", "entity_type_count", "<", "1000", "and", "self", ".", "_save_prediction", ":", "\n", "                ", "decode_entity", "=", "dict", "(", "tokens", "=", "[", "t", ".", "phrase", "for", "t", "in", "doc", ".", "tokens", "]", ",", "pre_entities", "=", "[", "]", ",", "gt_entities", "=", "[", "]", ",", "org_id", "=", "doc", ".", "doc_id", ")", "\n", "\n", "gt_converted_entities", "=", "[", "]", "\n", "for", "entity", "in", "doc", ".", "entities", ":", "\n", "                    ", "entity", "=", "entity", ".", "as_tuple_token", "(", ")", "\n", "entity_span", "=", "entity", "[", ":", "2", "]", "\n", "span_tokens", "=", "util", ".", "get_span_tokens", "(", "doc", ".", "tokens", ",", "entity_span", ")", "\n", "entity_type", "=", "entity", "[", "2", "]", ".", "identifier", "\n", "entity_phrase", "=", "str", "(", "span_tokens", ")", "\n", "converted_entity", "=", "dict", "(", "type", "=", "entity_type", ",", "start", "=", "span_tokens", "[", "0", "]", ".", "index", ",", "end", "=", "span_tokens", "[", "-", "1", "]", ".", "index", ",", "phrase", "=", "entity_phrase", ")", "\n", "gt_converted_entities", ".", "append", "(", "converted_entity", ")", "\n", "", "decode_entity", "[", "\"gt_entities\"", "]", "=", "sorted", "(", "gt_converted_entities", ",", "key", "=", "lambda", "e", ":", "e", "[", "'start'", "]", ")", "\n", "\n", "\n", "for", "j", "in", "range", "(", "entity_left", ".", "size", "(", "1", ")", ")", ":", "\n", "                    ", "span_tokens", "=", "str", "(", "util", ".", "get_span_tokens", "(", "doc", ".", "tokens", ",", "batch_entity_spans", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "decode_entity", "[", "\"pre_entities\"", "]", ".", "append", "(", "dict", "(", "entity_left", "=", "entity_left", "[", "i", "]", "[", "j", "]", ".", "item", "(", ")", ",", "entity_right", "=", "entity_right", "[", "i", "]", "[", "j", "]", ".", "item", "(", ")", ",", "p_left", "=", "roundlist", "(", "p_left", "[", "i", "]", "[", "j", "]", ".", "tolist", "(", ")", ")", ",", "p_right", "=", "roundlist", "(", "p_right", "[", "i", "]", "[", "j", "]", ".", "tolist", "(", ")", ")", ",", "phrase", "=", "span_tokens", ",", "entity_type", "=", "self", ".", "_input_reader", ".", "get_entity_type", "(", "batch_entity_types", "[", "i", "]", "[", "j", "]", ".", "item", "(", ")", ")", ".", "identifier", ",", "entity_prob", "=", "roundlist", "(", "entity_prob", "[", "i", "]", "[", "j", "]", ".", "tolist", "(", ")", ")", ")", ")", "\n", "", "self", ".", "_raw_raw_preds", ".", "append", "(", "decode_entity", ")", "\n", "\n", "# #query", "\n", "", "entity_mask", "=", "batch_entity_mask", "[", "i", "]", "\n", "\n", "# #query", "\n", "entity_types", "=", "batch_entity_types", "[", "i", "]", "\n", "entity_spans", "=", "batch_entity_spans", "[", "i", "]", "\n", "entity_scores", "=", "batch_entity_scores", "[", "i", "]", "\n", "\n", "# #ent", "\n", "valid_entity_types", "=", "entity_types", "[", "entity_mask", "]", "\n", "valid_entity_spans", "=", "entity_spans", "[", "entity_mask", "]", "\n", "valid_entity_scores", "=", "entity_scores", "[", "entity_mask", "]", "\n", "\n", "valid_left_scores", "=", "batch_entity_left_scores", "[", "i", "]", "[", "entity_mask", "]", "\n", "valid_right_scores", "=", "batch_entity_right_scores", "[", "i", "]", "[", "entity_mask", "]", "\n", "\n", "# valid_entity_scores = valid_entity_scores + valid_left_scores + valid_right_scores", "\n", "\n", "\n", "sample_pred_entities", "=", "self", ".", "_convert_pred_entities", "(", "valid_entity_types", ",", "valid_entity_spans", ",", "valid_entity_scores", ",", "valid_left_scores", ",", "valid_right_scores", ",", "doc", ")", "\n", "sample_pred_entities", "=", "sorted", "(", "sample_pred_entities", ",", "key", "=", "lambda", "x", ":", "x", "[", "3", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "if", "self", ".", "_no_overlapping", ":", "\n", "                ", "sample_pred_entities", "=", "self", ".", "_remove_overlapping", "(", "sample_pred_entities", ")", "\n", "", "elif", "self", ".", "_no_partial_overlapping", ":", "\n", "                ", "sample_pred_entities", "=", "self", ".", "_remove_partial_overlapping", "(", "sample_pred_entities", ")", "\n", "\n", "", "if", "self", ".", "_no_duplicate", ":", "\n", "                ", "sample_pred_entities", "=", "self", ".", "_remove_duplicate", "(", "sample_pred_entities", ")", "\n", "\n", "", "self", ".", "_pred_entities", ".", "append", "(", "sample_pred_entities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log": [[146, 149], ["evaluator.Evaluator._logger.info"], "methods", ["None"], ["", "", "def", "_log", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator.compute_scores": [[150, 175], ["evaluator.Evaluator._log", "evaluator.Evaluator._log", "evaluator.Evaluator._log", "evaluator.Evaluator._log", "evaluator.Evaluator._convert_by_setting", "evaluator.Evaluator._score", "evaluator.Evaluator._log", "evaluator.Evaluator._log", "evaluator.Evaluator._log", "evaluator.Evaluator._convert_by_setting", "evaluator.Evaluator._score", "evaluator.Evaluator._log", "evaluator.Evaluator._log", "evaluator.Evaluator._log", "evaluator.Evaluator._score"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_by_setting", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._score", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_by_setting", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._score", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._score"], ["", "", "def", "compute_scores", "(", "self", ")", ":", "\n", "        ", "self", ".", "_log", "(", "\"Evaluation\"", ")", "\n", "\n", "self", ".", "_log", "(", "\"\"", ")", "\n", "self", ".", "_log", "(", "\"--- NER ---\"", ")", "\n", "# self._log(\"An entity is considered correct if the entity type and span is predicted correctly\")", "\n", "self", ".", "_log", "(", "\"\"", ")", "\n", "gt", ",", "pred", "=", "self", ".", "_convert_by_setting", "(", "self", ".", "_gt_entities", ",", "self", ".", "_pred_entities", ",", "include_entity_types", "=", "True", ")", "\n", "ner_eval", "=", "self", ".", "_score", "(", "gt", ",", "pred", ",", "print_results", "=", "True", ")", "\n", "\n", "self", ".", "_log", "(", "\"\"", ")", "\n", "self", ".", "_log", "(", "\"--- NER on Localization ---\"", ")", "\n", "self", ".", "_log", "(", "\"\"", ")", "\n", "gt_wo_type", ",", "pred_wo_type", "=", "self", ".", "_convert_by_setting", "(", "self", ".", "_gt_entities", ",", "self", ".", "_pred_entities", ",", "include_entity_types", "=", "False", ")", "\n", "ner_loc_eval", "=", "self", ".", "_score", "(", "gt_wo_type", ",", "pred_wo_type", ",", "print_results", "=", "True", ")", "\n", "\n", "\n", "self", ".", "_log", "(", "\"\"", ")", "\n", "self", ".", "_log", "(", "\"--- NER on Classification ---\"", ")", "\n", "# self._log(\"An entity is considered correct if the entity type and span is predicted correctly\")", "\n", "self", ".", "_log", "(", "\"\"", ")", "\n", "# gt, pred = self._convert_by_setting(self._gt_entities, self._pred_entities, include_entity_types=True)", "\n", "ner_cls_eval", "=", "self", ".", "_score", "(", "gt", ",", "pred", ",", "print_results", "=", "True", ",", "cls_metric", "=", "True", ")", "\n", "\n", "return", "ner_eval", ",", "ner_loc_eval", ",", "ner_cls_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator.store_predictions": [[176, 267], ["enumerate", "enumerate", "sorted", "sorted", "dict", "predictions.append", "open", "json.dump", "open", "json.dump", "len", "zip", "dict", "dict", "raw_preds_not_match_gt.append", "raw_preds_match_gt.append", "open", "json.dump", "open", "json.dump", "piqn.util.get_span_tokens", "str", "dict", "sorted.append", "piqn.util.get_span_tokens", "str", "dict", "sorted.append", "open", "json.dump", "str", "evaluator.Evaluator.store_predictions.is_match"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.get_span_tokens", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.get_span_tokens"], ["", "def", "store_predictions", "(", "self", ")", ":", "\n", "        ", "predictions", "=", "[", "]", "\n", "\n", "for", "i", ",", "doc", "in", "enumerate", "(", "self", ".", "_dataset", ".", "documents", ")", ":", "\n", "            ", "tokens", "=", "doc", ".", "tokens", "\n", "gt_entities", "=", "self", ".", "_gt_entities", "[", "i", "]", "\n", "pred_entities", "=", "self", ".", "_pred_entities", "[", "i", "]", "\n", "\n", "gt_converted_entities", "=", "[", "]", "\n", "for", "entity", "in", "gt_entities", ":", "\n", "                ", "entity_span", "=", "entity", "[", ":", "2", "]", "\n", "span_tokens", "=", "util", ".", "get_span_tokens", "(", "tokens", ",", "entity_span", ")", "\n", "entity_type", "=", "entity", "[", "2", "]", ".", "identifier", "\n", "entity_phrase", "=", "str", "(", "util", ".", "get_span_tokens", "(", "doc", ".", "tokens", ",", "entity_span", ")", ")", "\n", "converted_entity", "=", "dict", "(", "type", "=", "entity_type", ",", "start", "=", "span_tokens", "[", "0", "]", ".", "index", ",", "end", "=", "span_tokens", "[", "-", "1", "]", ".", "index", ",", "phrase", "=", "entity_phrase", ")", "\n", "gt_converted_entities", ".", "append", "(", "converted_entity", ")", "\n", "", "gt_converted_entities", "=", "sorted", "(", "gt_converted_entities", ",", "key", "=", "lambda", "e", ":", "e", "[", "'start'", "]", ")", "\n", "\n", "# convert entities", "\n", "pre_converted_entities", "=", "[", "]", "\n", "for", "entity", "in", "pred_entities", ":", "\n", "                ", "entity_span", "=", "entity", "[", ":", "2", "]", "\n", "# print(entity_span, tokens)", "\n", "# import pdb; pdb.set_trace()", "\n", "span_tokens", "=", "util", ".", "get_span_tokens", "(", "tokens", ",", "entity_span", ")", "\n", "entity_type", "=", "entity", "[", "2", "]", ".", "identifier", "\n", "entity_phrase", "=", "str", "(", "util", ".", "get_span_tokens", "(", "doc", ".", "tokens", ",", "entity_span", ")", ")", "\n", "converted_entity", "=", "dict", "(", "type", "=", "entity_type", ",", "start", "=", "span_tokens", "[", "0", "]", ".", "index", ",", "end", "=", "span_tokens", "[", "-", "1", "]", ".", "index", ",", "phrase", "=", "entity_phrase", ")", "\n", "pre_converted_entities", ".", "append", "(", "converted_entity", ")", "\n", "", "pre_converted_entities", "=", "sorted", "(", "pre_converted_entities", ",", "key", "=", "lambda", "e", ":", "e", "[", "'start'", "]", ")", "\n", "\n", "doc_predictions", "=", "dict", "(", "tokens", "=", "[", "t", ".", "phrase", "for", "t", "in", "tokens", "]", ",", "pre_entities", "=", "pre_converted_entities", ",", "gt_entities", "=", "gt_converted_entities", ")", "\n", "predictions", ".", "append", "(", "doc_predictions", ")", "\n", "\n", "# store as json", "\n", "", "label", ",", "epoch", "=", "self", ".", "_dataset_label", ",", "self", ".", "_epoch", "\n", "with", "open", "(", "self", ".", "_predictions_path", "%", "(", "label", ",", "epoch", ")", ",", "'w'", ")", "as", "predictions_file", ":", "\n", "            ", "json", ".", "dump", "(", "predictions", ",", "predictions_file", ")", "\n", "", "with", "open", "(", "self", ".", "_predictions_path", "%", "(", "\"raw_all\"", ",", "epoch", ")", ",", "'w'", ")", "as", "predictions_file", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "_raw_preds", ",", "predictions_file", ")", "\n", "", "if", "len", "(", "self", ".", "_raw_raw_preds", ")", "!=", "0", ":", "\n", "            ", "with", "open", "(", "self", ".", "_predictions_path", "%", "(", "\"raw_raw_all\"", ",", "epoch", ")", ",", "'w'", ")", "as", "predictions_file", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "_raw_raw_preds", ",", "predictions_file", ")", "\n", "# ", "\n", "", "", "raw_preds_match_gt", "=", "[", "]", "\n", "raw_preds_not_match_gt", "=", "[", "]", "\n", "for", "i", ",", "(", "pre", ",", "gt", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "_raw_preds", ",", "self", ".", "_gt_entities", ")", ")", ":", "\n", "            ", "doc", "=", "self", ".", "_dataset", ".", "documents", "[", "i", "]", "\n", "\n", "def", "is_match", "(", "ent", ")", ":", "\n", "                ", "for", "gt_ent", "in", "gt", ":", "\n", "                    ", "if", "ent", "[", "\"start\"", "]", "==", "gt_ent", "[", "0", "]", "and", "ent", "[", "\"end\"", "]", "==", "gt_ent", "[", "1", "]", "and", "ent", "[", "\"entity_type\"", "]", "==", "gt_ent", "[", "2", "]", ".", "identifier", ":", "\n", "                        ", "return", "True", "\n", "", "", "else", ":", "\n", "                    ", "return", "False", "\n", "# pre_match_gt = list(filter(is_match, pre))", "\n", "# pre_not_match_gt = list(filter(lambda a: not is_match(a), pre))", "\n", "# pre_not_match_gt = []", "\n", "", "", "pre_not_match_gt", "=", "dict", "(", "tokens", "=", "[", "t", ".", "phrase", "for", "t", "in", "doc", ".", "tokens", "]", ",", "entities", "=", "[", "]", ",", "org_id", "=", "doc", ".", "doc_id", ")", "\n", "no_dup_pre_match_gt", "=", "dict", "(", "tokens", "=", "[", "t", ".", "phrase", "for", "t", "in", "doc", ".", "tokens", "]", ",", "entities", "=", "[", "]", ",", "org_id", "=", "doc", ".", "doc_id", ")", "\n", "pre_match_gt_set", "=", "[", "]", "\n", "# match gt need dedep; not match gt keep all", "\n", "\n", "for", "ent", "in", "pre", "[", "\"entities\"", "]", ":", "\n", "                ", "entity_span", "=", "(", "ent", "[", "\"start\"", "]", ",", "ent", "[", "\"end\"", "]", ")", "\n", "ent", "[", "\"phrase\"", "]", "=", "str", "(", "util", ".", "get_span_tokens", "(", "doc", ".", "tokens", ",", "entity_span", ")", ")", "\n", "if", "is_match", "(", "ent", ")", ":", "\n", "                    ", "if", "(", "ent", "[", "\"start\"", "]", ",", "ent", "[", "\"end\"", "]", ",", "ent", "[", "\"entity_type\"", "]", ")", "not", "in", "pre_match_gt_set", ":", "\n", "                        ", "pre_match_gt_set", ".", "append", "(", "(", "ent", "[", "\"start\"", "]", ",", "ent", "[", "\"end\"", "]", ",", "ent", "[", "\"entity_type\"", "]", ")", ")", "\n", "no_dup_pre_match_gt", "[", "\"entities\"", "]", ".", "append", "(", "ent", ")", "\n", "", "", "else", ":", "\n", "                    ", "pre_not_match_gt", "[", "\"entities\"", "]", ".", "append", "(", "ent", ")", "\n", "\n", "# if len(pre_not_match_gt) > 0:", "\n", "#     pre_not_match_gt.insert(0, [t.phrase for t in doc.tokens])", "\n", "# if len(no_dup_pre_match_gt) > 0:", "\n", "#     no_dup_pre_match_gt.insert(0, [t.phrase for t in doc.tokens])", "\n", "\n", "", "", "raw_preds_not_match_gt", ".", "append", "(", "pre_not_match_gt", ")", "\n", "# no_dup_pre_match_gt = []", "\n", "# pre_match_gt_set = []", "\n", "# for ent in pre_match_gt:", "\n", "#     if (ent[\"start\"], ent[\"end\"], ent[\"entity_type\"]) not in pre_match_gt_set:", "\n", "#         pre_match_gt_set.append((ent[\"start\"], ent[\"end\"], ent[\"entity_type\"]))", "\n", "#         no_dup_pre_match_gt.append(ent)", "\n", "\n", "raw_preds_match_gt", ".", "append", "(", "no_dup_pre_match_gt", ")", "\n", "", "with", "open", "(", "self", ".", "_predictions_path", "%", "(", "\"match_gt\"", ",", "epoch", ")", ",", "'w'", ")", "as", "predictions_file", ":", "\n", "            ", "json", ".", "dump", "(", "raw_preds_match_gt", ",", "predictions_file", ")", "\n", "", "with", "open", "(", "self", ".", "_predictions_path", "%", "(", "\"not_match_gt\"", ",", "epoch", ")", ",", "'w'", ")", "as", "predictions_file", ":", "\n", "            ", "json", ".", "dump", "(", "raw_preds_not_match_gt", ",", "predictions_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator.store_examples": [[268, 290], ["enumerate", "evaluator.Evaluator._store_examples", "evaluator.Evaluator._store_examples", "evaluator.Evaluator._convert_example", "entity_examples.append", "sorted"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._store_examples", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._store_examples", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_example"], ["", "", "def", "store_examples", "(", "self", ")", ":", "\n", "        ", "entity_examples", "=", "[", "]", "\n", "\n", "for", "i", ",", "doc", "in", "enumerate", "(", "self", ".", "_dataset", ".", "documents", ")", ":", "\n", "# entities", "\n", "# if len(doc.encoding) > 512:", "\n", "#     continue", "\n", "            ", "entity_example", "=", "self", ".", "_convert_example", "(", "doc", ",", "self", ".", "_gt_entities", "[", "i", "]", ",", "self", ".", "_pred_entities", "[", "i", "]", ",", "\n", "include_entity_types", "=", "True", ",", "to_html", "=", "self", ".", "_entity_to_html", ")", "\n", "entity_examples", ".", "append", "(", "entity_example", ")", "\n", "\n", "", "label", ",", "epoch", "=", "self", ".", "_dataset_label", ",", "self", ".", "_epoch", "\n", "\n", "# entities", "\n", "self", ".", "_store_examples", "(", "entity_examples", "[", ":", "self", ".", "_example_count", "]", ",", "\n", "file_path", "=", "self", ".", "_examples_path", "%", "(", "'entities'", ",", "label", ",", "epoch", ")", ",", "\n", "template", "=", "'entity_examples.html'", ")", "\n", "\n", "self", ".", "_store_examples", "(", "sorted", "(", "entity_examples", "[", ":", "self", ".", "_example_count", "]", ",", "\n", "key", "=", "lambda", "k", ":", "k", "[", "'length'", "]", ")", ",", "\n", "file_path", "=", "self", ".", "_examples_path", "%", "(", "'entities_sorted'", ",", "label", ",", "epoch", ")", ",", "\n", "template", "=", "'entity_examples.html'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_gt": [[291, 303], ["evaluator.Evaluator._gt_entities.append", "entity.as_tuple_token"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.as_tuple_token"], ["", "def", "_convert_gt", "(", "self", ",", "docs", ":", "List", "[", "Document", "]", ")", ":", "\n", "        ", "for", "doc", "in", "docs", ":", "\n", "            ", "gt_entities", "=", "doc", ".", "entities", "\n", "# if len(doc.encoding) > 512:", "\n", "#     continue", "\n", "# convert ground truth relations and entities for precision/recall/f1 evaluation", "\n", "sample_gt_entities", "=", "[", "entity", ".", "as_tuple_token", "(", ")", "for", "entity", "in", "gt_entities", "]", "\n", "\n", "# if self._no_overlapping:", "\n", "#     sample_gt_entities = self._remove_overlapping(sample_gt_entities)", "\n", "\n", "self", ".", "_gt_entities", ".", "append", "(", "sample_gt_entities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_pred_entities": [[304, 322], ["dict", "range", "evaluator.Evaluator._raw_preds.append", "pred_types[].item", "evaluator.Evaluator._input_reader.get_entity_type", "pred_spans[].tolist", "pred_scores[].item", "left_scores[].item", "right_scores[].item", "converted_preds.append", "decode_entity[].append", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.BaseInputReader.get_entity_type", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.round", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.round", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.round"], ["", "", "def", "_convert_pred_entities", "(", "self", ",", "pred_types", ":", "torch", ".", "tensor", ",", "pred_spans", ":", "torch", ".", "tensor", ",", "pred_scores", ":", "torch", ".", "tensor", ",", "left_scores", ",", "right_scores", ",", "doc", ")", ":", "\n", "        ", "converted_preds", "=", "[", "]", "\n", "\n", "decode_entity", "=", "dict", "(", "tokens", "=", "[", "t", ".", "phrase", "for", "t", "in", "doc", ".", "tokens", "]", ",", "entities", "=", "[", "]", ",", "org_id", "=", "doc", ".", "doc_id", ")", "\n", "for", "i", "in", "range", "(", "pred_types", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "label_idx", "=", "pred_types", "[", "i", "]", ".", "item", "(", ")", "\n", "entity_type", "=", "self", ".", "_input_reader", ".", "get_entity_type", "(", "label_idx", ")", "\n", "\n", "start", ",", "end", "=", "pred_spans", "[", "i", "]", ".", "tolist", "(", ")", "\n", "cls_score", "=", "pred_scores", "[", "i", "]", ".", "item", "(", ")", "\n", "left_score", "=", "left_scores", "[", "i", "]", ".", "item", "(", ")", "\n", "right_score", "=", "right_scores", "[", "i", "]", ".", "item", "(", ")", "\n", "\n", "converted_pred", "=", "(", "start", ",", "end", ",", "entity_type", ",", "cls_score", ")", "\n", "converted_preds", ".", "append", "(", "converted_pred", ")", "\n", "decode_entity", "[", "\"entities\"", "]", ".", "append", "(", "{", "\"start\"", ":", "start", ",", "\"end\"", ":", "end", ",", "\"entity_type\"", ":", "entity_type", ".", "identifier", ",", "\"cls_score\"", ":", "round", "(", "cls_score", ",", "2", ")", ",", "\"left_score\"", ":", "round", "(", "left_score", ",", "2", ")", ",", "\"right_score\"", ":", "round", "(", "right_score", ",", "2", ")", "}", ")", "\n", "", "self", ".", "_raw_preds", ".", "append", "(", "decode_entity", ")", "\n", "return", "converted_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._remove_duplicate": [[323, 333], ["enumerate", "enumerate", "non_duplicate_entities.append"], "methods", ["None"], ["", "def", "_remove_duplicate", "(", "self", ",", "entities", ")", ":", "\n", "        ", "non_duplicate_entities", "=", "[", "]", "\n", "for", "i", ",", "can_entity", "in", "enumerate", "(", "entities", ")", ":", "\n", "            ", "find", "=", "False", "\n", "for", "j", ",", "entity", "in", "enumerate", "(", "non_duplicate_entities", ")", ":", "\n", "                ", "if", "can_entity", "[", "0", "]", "==", "entity", "[", "0", "]", "and", "can_entity", "[", "1", "]", "==", "entity", "[", "1", "]", ":", "\n", "                    ", "find", "=", "True", "\n", "", "", "if", "not", "find", ":", "\n", "                ", "non_duplicate_entities", ".", "append", "(", "can_entity", ")", "\n", "", "", "return", "non_duplicate_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._remove_overlapping": [[334, 341], ["enumerate", "evaluator.Evaluator._is_overlapping", "non_overlapping_entities.append"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._is_overlapping"], ["", "def", "_remove_overlapping", "(", "self", ",", "entities", ")", ":", "\n", "        ", "non_overlapping_entities", "=", "[", "]", "\n", "for", "i", ",", "entity", "in", "enumerate", "(", "entities", ")", ":", "\n", "            ", "if", "not", "self", ".", "_is_overlapping", "(", "entity", ",", "non_overlapping_entities", ")", ":", "\n", "                ", "non_overlapping_entities", ".", "append", "(", "entity", ")", "\n", "\n", "", "", "return", "non_overlapping_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._remove_partial_overlapping": [[342, 349], ["enumerate", "evaluator.Evaluator._is_partial_overlapping", "non_overlapping_entities.append"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._is_partial_overlapping"], ["", "def", "_remove_partial_overlapping", "(", "self", ",", "entities", ")", ":", "\n", "        ", "non_overlapping_entities", "=", "[", "]", "\n", "for", "i", ",", "entity", "in", "enumerate", "(", "entities", ")", ":", "\n", "            ", "if", "not", "self", ".", "_is_partial_overlapping", "(", "entity", ",", "non_overlapping_entities", ")", ":", "\n", "                ", "non_overlapping_entities", ".", "append", "(", "entity", ")", "\n", "\n", "", "", "return", "non_overlapping_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._is_partial_overlapping": [[350, 356], ["evaluator.Evaluator._check_partial_overlap"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._check_partial_overlap"], ["", "def", "_is_partial_overlapping", "(", "self", ",", "e1", ",", "entities", ")", ":", "\n", "        ", "for", "e2", "in", "entities", ":", "\n", "            ", "if", "self", ".", "_check_partial_overlap", "(", "e1", ",", "e2", ")", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._is_overlapping": [[357, 363], ["evaluator.Evaluator._check_overlap"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._check_overlap"], ["", "def", "_is_overlapping", "(", "self", ",", "e1", ",", "entities", ")", ":", "\n", "        ", "for", "e2", "in", "entities", ":", "\n", "            ", "if", "self", ".", "_check_overlap", "(", "e1", ",", "e2", ")", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._check_overlap": [[364, 369], ["None"], "methods", ["None"], ["", "def", "_check_overlap", "(", "self", ",", "e1", ",", "e2", ")", ":", "\n", "        ", "if", "e1", "[", "1", "]", "<", "e2", "[", "0", "]", "or", "e2", "[", "1", "]", "<", "e1", "[", "0", "]", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._check_partial_overlap": [[370, 375], ["None"], "methods", ["None"], ["", "", "def", "_check_partial_overlap", "(", "self", ",", "e1", ",", "e2", ")", ":", "\n", "        ", "if", "(", "e1", "[", "0", "]", "<", "e2", "[", "0", "]", "and", "e2", "[", "0", "]", "<=", "e1", "[", "1", "]", "and", "e1", "[", "1", "]", "<", "e2", "[", "1", "]", ")", "or", "(", "e2", "[", "0", "]", "<", "e1", "[", "0", "]", "and", "e1", "[", "0", "]", "<=", "e2", "[", "1", "]", "and", "e2", "[", "1", "]", "<", "e1", "[", "1", "]", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_by_setting": [[376, 401], ["zip", "len", "len", "tuple", "converted_gt.append", "converted_pred.append", "list", "list.append", "len", "evaluator.Evaluator._convert_by_setting.convert"], "methods", ["None"], ["", "", "def", "_convert_by_setting", "(", "self", ",", "gt", ":", "List", "[", "List", "[", "Tuple", "]", "]", ",", "pred", ":", "List", "[", "List", "[", "Tuple", "]", "]", ",", "\n", "include_entity_types", ":", "bool", "=", "True", ",", "include_score", ":", "bool", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", "\n", "\n", "# either include or remove entity types based on setting", "\n", "def", "convert", "(", "t", ")", ":", "\n", "            ", "if", "not", "include_entity_types", ":", "\n", "# remove entity type and score for evaluation", "\n", "                ", "c", "=", "[", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "self", ".", "_pseudo_entity_type", "]", "\n", "", "else", ":", "\n", "                ", "c", "=", "list", "(", "t", "[", ":", "3", "]", ")", "\n", "\n", "", "if", "include_score", "and", "len", "(", "t", ")", ">", "3", ":", "\n", "# include prediction scores", "\n", "                ", "c", ".", "append", "(", "t", "[", "3", "]", ")", "\n", "\n", "", "return", "tuple", "(", "c", ")", "\n", "\n", "", "converted_gt", ",", "converted_pred", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "sample_gt", ",", "sample_pred", "in", "zip", "(", "gt", ",", "pred", ")", ":", "\n", "            ", "converted_gt", ".", "append", "(", "[", "convert", "(", "t", ")", "for", "t", "in", "sample_gt", "]", ")", "\n", "converted_pred", ".", "append", "(", "[", "convert", "(", "t", ")", "for", "t", "in", "sample_pred", "]", ")", "\n", "\n", "", "return", "converted_gt", ",", "converted_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._score": [[402, 437], ["set", "zip", "evaluator.Evaluator._compute_metrics", "len", "len", "set", "set.update", "list", "list", "set.update", "set.update", "set.update", "map", "filter", "gt_flat.append", "set.add", "gt_flat.append", "pred_flat.append", "set.add", "pred_flat.append"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._compute_metrics"], ["", "def", "_score", "(", "self", ",", "gt", ":", "List", "[", "List", "[", "Tuple", "]", "]", ",", "pred", ":", "List", "[", "List", "[", "Tuple", "]", "]", ",", "print_results", ":", "bool", "=", "False", ",", "cls_metric", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "\n", "gt_flat", "=", "[", "]", "\n", "pred_flat", "=", "[", "]", "\n", "types", "=", "set", "(", ")", "\n", "\n", "for", "(", "sample_gt", ",", "sample_pred", ")", "in", "zip", "(", "gt", ",", "pred", ")", ":", "\n", "            ", "union", "=", "set", "(", ")", "\n", "if", "cls_metric", ":", "\n", "                ", "union", ".", "update", "(", "sample_gt", ")", "\n", "loc_gt", "=", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ",", "sample_gt", ")", ")", "\n", "sample_loc_true_pred", "=", "list", "(", "filter", "(", "lambda", "x", ":", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "in", "loc_gt", ",", "sample_pred", ")", ")", "\n", "union", ".", "update", "(", "sample_loc_true_pred", ")", "\n", "", "else", ":", "\n", "                ", "union", ".", "update", "(", "sample_gt", ")", "\n", "union", ".", "update", "(", "sample_pred", ")", "\n", "\n", "", "for", "s", "in", "union", ":", "\n", "                ", "if", "s", "in", "sample_gt", ":", "\n", "                    ", "t", "=", "s", "[", "2", "]", "\n", "gt_flat", ".", "append", "(", "t", ".", "index", ")", "\n", "types", ".", "add", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "gt_flat", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "s", "in", "sample_pred", ":", "\n", "                    ", "t", "=", "s", "[", "2", "]", "\n", "pred_flat", ".", "append", "(", "t", ".", "index", ")", "\n", "types", ".", "add", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "pred_flat", ".", "append", "(", "0", ")", "\n", "", "", "", "metrics", "=", "self", ".", "_compute_metrics", "(", "gt_flat", ",", "pred_flat", ",", "types", ",", "print_results", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._compute_metrics": [[438, 449], ["sklearn.metrics.precision_recall_fscore_support", "sum", "sklearn.metrics.precision_recall_fscore_support", "sklearn.metrics.precision_recall_fscore_support", "evaluator.Evaluator._print_results", "list", "list"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._print_results"], ["", "def", "_compute_metrics", "(", "self", ",", "gt_all", ",", "pred_all", ",", "types", ",", "print_results", ":", "bool", "=", "False", ")", ":", "\n", "        ", "labels", "=", "[", "t", ".", "index", "for", "t", "in", "types", "]", "\n", "per_type", "=", "prfs", "(", "gt_all", ",", "pred_all", ",", "labels", "=", "labels", ",", "average", "=", "None", ")", "\n", "micro", "=", "prfs", "(", "gt_all", ",", "pred_all", ",", "labels", "=", "labels", ",", "average", "=", "'micro'", ")", "[", ":", "-", "1", "]", "\n", "macro", "=", "prfs", "(", "gt_all", ",", "pred_all", ",", "labels", "=", "labels", ",", "average", "=", "'macro'", ")", "[", ":", "-", "1", "]", "\n", "total_support", "=", "sum", "(", "per_type", "[", "-", "1", "]", ")", "\n", "\n", "if", "print_results", ":", "\n", "            ", "self", ".", "_print_results", "(", "per_type", ",", "list", "(", "micro", ")", "+", "[", "total_support", "]", ",", "list", "(", "macro", ")", "+", "[", "total_support", "]", ",", "types", ")", "\n", "\n", "", "return", "[", "m", "*", "100", "for", "m", "in", "micro", "+", "macro", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._print_results": [[450, 473], ["evaluator.Evaluator._log", "enumerate", "zip", "evaluator.Evaluator._log", "evaluator.Evaluator._log", "evaluator.Evaluator._log", "range", "metrics_per_type.append", "evaluator.Evaluator._log", "len", "metrics.append", "evaluator.Evaluator._get_row", "evaluator.Evaluator._get_row", "len", "evaluator.Evaluator._get_row"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._log", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._get_row", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._get_row", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._get_row"], ["", "def", "_print_results", "(", "self", ",", "per_type", ":", "List", ",", "micro", ":", "List", ",", "macro", ":", "List", ",", "types", ":", "List", ")", ":", "\n", "        ", "columns", "=", "(", "'type'", ",", "'precision'", ",", "'recall'", ",", "'f1-score'", ",", "'support'", ")", "\n", "\n", "row_fmt", "=", "\"%20s\"", "+", "(", "\" %12s\"", "*", "(", "len", "(", "columns", ")", "-", "1", ")", ")", "\n", "self", ".", "_log", "(", "row_fmt", "%", "columns", ")", "\n", "\n", "metrics_per_type", "=", "[", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "types", ")", ":", "\n", "            ", "metrics", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "per_type", ")", ")", ":", "\n", "                ", "metrics", ".", "append", "(", "per_type", "[", "j", "]", "[", "i", "]", ")", "\n", "", "metrics_per_type", ".", "append", "(", "metrics", ")", "\n", "\n", "", "for", "m", ",", "t", "in", "zip", "(", "metrics_per_type", ",", "types", ")", ":", "\n", "            ", "self", ".", "_log", "(", "row_fmt", "%", "self", ".", "_get_row", "(", "m", ",", "t", ".", "short_name", ")", ")", "\n", "\n", "", "self", ".", "_log", "(", "''", ")", "\n", "\n", "# micro", "\n", "self", ".", "_log", "(", "row_fmt", "%", "self", ".", "_get_row", "(", "micro", ",", "'micro'", ")", ")", "\n", "\n", "# macro", "\n", "self", ".", "_log", "(", "row_fmt", "%", "self", ".", "_get_row", "(", "macro", ",", "'macro'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._get_row": [[474, 480], ["range", "row.append", "tuple", "row.append", "len"], "methods", ["None"], ["", "def", "_get_row", "(", "self", ",", "data", ",", "label", ")", ":", "\n", "        ", "row", "=", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", "-", "1", ")", ":", "\n", "            ", "row", ".", "append", "(", "\"%.2f\"", "%", "(", "data", "[", "i", "]", "*", "100", ")", ")", "\n", "", "row", ".", "append", "(", "data", "[", "3", "]", ")", "\n", "return", "tuple", "(", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_example": [[481, 533], ["evaluator.Evaluator._convert_by_setting", "set", "sorted", "sorted", "evaluator.Evaluator._prettify", "dict", "phrases.append", "evaluator.Evaluator._score", "sorted.append", "len", "sorted.append", "fn.append", "pred.index", "to_html", "pred.index", "to_html", "to_html"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._convert_by_setting", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._prettify", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._score", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.index", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.index"], ["", "def", "_convert_example", "(", "self", ",", "doc", ":", "Document", ",", "gt", ":", "List", "[", "Tuple", "]", ",", "pred", ":", "List", "[", "Tuple", "]", ",", "\n", "include_entity_types", ":", "bool", ",", "to_html", ")", ":", "\n", "# encoding = doc.encoding", "\n", "        ", "tokens", "=", "doc", ".", "tokens", "\n", "\n", "gt", ",", "pred", "=", "self", ".", "_convert_by_setting", "(", "[", "gt", "]", ",", "[", "pred", "]", ",", "include_entity_types", "=", "include_entity_types", ",", "include_score", "=", "True", ")", "\n", "gt", ",", "pred", "=", "gt", "[", "0", "]", ",", "pred", "[", "0", "]", "\n", "\n", "# get micro precision/recall/f1 scores", "\n", "if", "gt", "or", "pred", ":", "\n", "            ", "pred_s", "=", "[", "p", "[", ":", "3", "]", "for", "p", "in", "pred", "]", "# remove score", "\n", "precision", ",", "recall", ",", "f1", "=", "self", ".", "_score", "(", "[", "gt", "]", ",", "[", "pred_s", "]", ")", "[", ":", "3", "]", "\n", "", "else", ":", "\n", "# corner case: no ground truth and no predictions", "\n", "            ", "precision", ",", "recall", ",", "f1", "=", "[", "100", "]", "*", "3", "\n", "\n", "", "cls_scores", "=", "[", "p", "[", "3", "]", "for", "p", "in", "pred", "]", "\n", "pred", "=", "[", "p", "[", ":", "3", "]", "for", "p", "in", "pred", "]", "\n", "union", "=", "set", "(", "gt", "+", "pred", ")", "\n", "\n", "# true positives", "\n", "tp", "=", "[", "]", "\n", "# false negatives", "\n", "fn", "=", "[", "]", "\n", "# false positives", "\n", "fp", "=", "[", "]", "\n", "\n", "for", "s", "in", "union", ":", "\n", "            ", "type_verbose", "=", "s", "[", "2", "]", ".", "verbose_name", "\n", "\n", "if", "s", "in", "gt", ":", "\n", "                ", "if", "s", "in", "pred", ":", "\n", "                    ", "cls_score", "=", "cls_scores", "[", "pred", ".", "index", "(", "s", ")", "]", "\n", "tp", ".", "append", "(", "(", "to_html", "(", "s", ",", "tokens", ")", ",", "type_verbose", ",", "cls_score", ")", ")", "\n", "", "else", ":", "\n", "                    ", "fn", ".", "append", "(", "(", "to_html", "(", "s", ",", "tokens", ")", ",", "type_verbose", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "cls_score", "=", "cls_scores", "[", "pred", ".", "index", "(", "s", ")", "]", "\n", "fp", ".", "append", "(", "(", "to_html", "(", "s", ",", "tokens", ")", ",", "type_verbose", ",", "cls_score", ")", ")", "\n", "\n", "", "", "tp", "=", "sorted", "(", "tp", ",", "key", "=", "lambda", "p", ":", "p", "[", "2", "]", ",", "reverse", "=", "True", ")", "\n", "fp", "=", "sorted", "(", "fp", ",", "key", "=", "lambda", "p", ":", "p", "[", "2", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "phrases", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "phrases", ".", "append", "(", "token", ".", "phrase", ")", "\n", "", "text", "=", "\" \"", ".", "join", "(", "phrases", ")", "\n", "\n", "\n", "# text = self._prettify(self._text_encoder.decode(encoding))", "\n", "text", "=", "self", ".", "_prettify", "(", "text", ")", "\n", "return", "dict", "(", "text", "=", "text", ",", "tp", "=", "tp", ",", "fn", "=", "fn", ",", "fp", "=", "fp", ",", "precision", "=", "precision", ",", "recall", "=", "recall", ",", "f1", "=", "f1", ",", "length", "=", "len", "(", "doc", ".", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._entity_to_html": [[534, 565], ["range", "range", "range", "evaluator.Evaluator._prettify", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._prettify"], ["", "def", "_entity_to_html", "(", "self", ",", "entity", ":", "Tuple", ",", "tokens", ":", "List", "[", "Token", "]", ")", ":", "\n", "        ", "start", ",", "end", "=", "entity", "[", ":", "2", "]", "\n", "entity_type", "=", "entity", "[", "2", "]", ".", "verbose_name", "\n", "\n", "tag_start", "=", "' <span class=\"entity\">'", "\n", "tag_start", "+=", "'<span class=\"type\">%s</span>'", "%", "entity_type", "\n", "\n", "# ctx_before = self._text_encoder.decode(encoding[:start])", "\n", "# e1 = self._text_encoder.decode(encoding[start:end])", "\n", "# ctx_after = self._text_encoder.decode(encoding[end:])", "\n", "\n", "ctx_before", "=", "\"\"", "\n", "ctx_after", "=", "\"\"", "\n", "e1", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "start", ")", ":", "\n", "            ", "ctx_before", "+=", "tokens", "[", "i", "]", ".", "phrase", "\n", "if", "i", "!=", "start", "-", "1", ":", "\n", "                ", "ctx_before", "+=", "\" \"", "\n", "", "", "for", "i", "in", "range", "(", "end", "+", "1", ",", "len", "(", "tokens", ")", ")", ":", "\n", "            ", "ctx_after", "+=", "tokens", "[", "i", "]", ".", "phrase", "\n", "if", "i", "!=", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "                ", "ctx_after", "+=", "\" \"", "\n", "", "", "for", "i", "in", "range", "(", "start", ",", "end", "+", "1", ")", ":", "\n", "            ", "e1", "+=", "tokens", "[", "i", "]", ".", "phrase", "\n", "if", "i", "!=", "end", ":", "\n", "                ", "e1", "+=", "\" \"", "\n", "\n", "", "", "html", "=", "ctx_before", "+", "tag_start", "+", "e1", "+", "'</span> '", "+", "ctx_after", "\n", "html", "=", "self", ".", "_prettify", "(", "html", ")", "\n", "\n", "return", "html", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._prettify": [[566, 570], ["text.replace().replace().replace.replace().replace().replace.replace().replace().replace().replace", "text.replace().replace().replace.replace().replace().replace.replace().replace().replace", "text.replace().replace().replace.replace().replace().replace.replace().replace().replace", "text.replace().replace().replace.replace().replace().replace.replace().replace", "text.replace().replace().replace.replace().replace().replace.replace().replace", "text.replace().replace().replace.replace().replace().replace.replace", "text.replace().replace().replace.replace().replace().replace.replace"], "methods", ["None"], ["", "def", "_prettify", "(", "self", ",", "text", ":", "str", ")", ":", "\n", "        ", "text", "=", "text", ".", "replace", "(", "'_start_'", ",", "''", ")", ".", "replace", "(", "'_classify_'", ",", "''", ")", ".", "replace", "(", "'<unk>'", ",", "''", ")", ".", "replace", "(", "'\u2047'", ",", "''", ")", "\n", "text", "=", "text", ".", "replace", "(", "'[CLS]'", ",", "''", ")", ".", "replace", "(", "'[SEP]'", ",", "''", ")", ".", "replace", "(", "'[PAD]'", ",", "''", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.evaluator.Evaluator._store_examples": [[571, 580], ["os.path.join", "jinja2.Template.stream().dump", "open", "jinja2.Template", "os.path.join", "f.read", "jinja2.Template.stream"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader.read"], ["", "def", "_store_examples", "(", "self", ",", "examples", ":", "List", "[", "Dict", "]", ",", "file_path", ":", "str", ",", "template", ":", "str", ")", ":", "\n", "        ", "template_path", "=", "os", ".", "path", ".", "join", "(", "SCRIPT_PATH", ",", "'templates'", ",", "template", ")", "\n", "\n", "# read template", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "SCRIPT_PATH", ",", "template_path", ")", ")", "as", "f", ":", "\n", "            ", "template", "=", "jinja2", ".", "Template", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "# write to disc", "\n", "", "template", ".", "stream", "(", "examples", "=", "examples", ")", ".", "dump", "(", "file_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.RelationType.__init__": [[12, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "identifier", ",", "index", ",", "short_name", ",", "verbose_name", ",", "symmetric", "=", "False", ")", ":", "\n", "        ", "self", ".", "_identifier", "=", "identifier", "\n", "self", ".", "_index", "=", "index", "\n", "self", ".", "_short_name", "=", "short_name", "\n", "self", ".", "_verbose_name", "=", "verbose_name", "\n", "self", ".", "_symmetric", "=", "symmetric", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.RelationType.identifier": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "identifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_identifier", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.RelationType.index": [[23, 26], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_index", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.RelationType.short_name": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "short_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_short_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.RelationType.verbose_name": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "verbose_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_verbose_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.RelationType.symmetric": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "symmetric", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_symmetric", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.RelationType.__int__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__int__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_index", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.RelationType.__eq__": [[42, 46], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "RelationType", ")", ":", "\n", "            ", "return", "self", ".", "_identifier", "==", "other", ".", "_identifier", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.RelationType.__hash__": [[47, 49], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "_identifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.EntityType.__init__": [[52, 57], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "identifier", ",", "index", ",", "short_name", ",", "verbose_name", ")", ":", "\n", "        ", "self", ".", "_identifier", "=", "identifier", "\n", "self", ".", "_index", "=", "index", "\n", "self", ".", "_short_name", "=", "short_name", "\n", "self", ".", "_verbose_name", "=", "verbose_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.EntityType.identifier": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "identifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_identifier", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.EntityType.index": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_index", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.EntityType.short_name": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "short_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_short_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.EntityType.verbose_name": [[70, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "verbose_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_verbose_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.EntityType.__int__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__int__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_index", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.EntityType.__eq__": [[77, 81], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "EntityType", ")", ":", "\n", "            ", "return", "self", ".", "_identifier", "==", "other", ".", "_identifier", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.EntityType.__hash__": [[82, 84], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "_identifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.EntityType.__str__": [[85, 87], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_identifier", "+", "\"=\"", "+", "self", ".", "_verbose_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.__init__": [[91, 102], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tid", ":", "int", ",", "index", ":", "int", ",", "span_start", ":", "int", ",", "span_end", ":", "int", ",", "phrase", ":", "str", ",", "pos", ":", "int", ",", "vocab_id", ":", "int", ",", "char_start", ":", "int", ",", "char_end", ":", "int", ")", ":", "\n", "        ", "self", ".", "_tid", "=", "tid", "# ID within the corresponding dataset", "\n", "self", ".", "_index", "=", "index", "# original token index in document", "\n", "\n", "self", ".", "_span_start", "=", "span_start", "# start of token span in document (inclusive)", "\n", "self", ".", "_span_end", "=", "span_end", "# end of token span in document (exclusive)", "\n", "self", ".", "_char_start", "=", "char_start", "\n", "self", ".", "_char_end", "=", "char_end", "\n", "self", ".", "_phrase", "=", "phrase", "\n", "self", ".", "_pos", "=", "pos", "\n", "self", ".", "_vocab_id", "=", "vocab_id", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.index": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_index", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.wordinx": [[107, 110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "wordinx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_vocab_id", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.span_start": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span_start", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_span_start", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.span_end": [[115, 118], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span_end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_span_end", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.span": [[119, 122], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_span_start", ",", "self", ".", "_span_end", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.char_start": [[123, 126], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "char_start", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_char_start", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.char_end": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "char_end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_char_end", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.char_span": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "char_span", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_char_start", ",", "self", ".", "_char_end", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.phrase": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "phrase", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.pos": [[139, 142], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.pos_id": [[143, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pos_id", "(", "self", ")", ":", "\n", "# return self.POS_MAP.index(self._pos)", "\n", "        ", "return", "self", ".", "_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.__eq__": [[148, 152], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "Token", ")", ":", "\n", "            ", "return", "self", ".", "_tid", "==", "other", ".", "_tid", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.__hash__": [[153, 155], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "_tid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.__str__": [[156, 158], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Token.__repr__": [[159, 161], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.TokenSpan.__init__": [[164, 166], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "self", ".", "_tokens", "=", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.TokenSpan.span_start": [[167, 170], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span_start", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tokens", "[", "0", "]", ".", "span_start", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.TokenSpan.span_end": [[171, 174], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span_end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tokens", "[", "-", "1", "]", ".", "span_end", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.TokenSpan.span": [[175, 178], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "span_start", ",", "self", ".", "span_end", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.TokenSpan.__getitem__": [[183, 188], ["isinstance", "entities.TokenSpan"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "s", ")", ":", "\n", "        ", "if", "isinstance", "(", "s", ",", "slice", ")", ":", "\n", "            ", "return", "TokenSpan", "(", "self", ".", "_tokens", "[", "s", ".", "start", ":", "s", ".", "stop", ":", "s", ".", "step", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_tokens", "[", "s", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.TokenSpan.__iter__": [[189, 191], ["iter"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.TokenSpan.__len__": [[192, 194], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.TokenSpan.__str__": [[195, 197], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "[", "str", "(", "t", ")", "for", "t", "in", "self", ".", "_tokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.__init__": [[200, 207], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "eid", ":", "int", ",", "entity_type", ":", "EntityType", ",", "tokens", ":", "List", "[", "Token", "]", ",", "phrase", ":", "str", ")", ":", "\n", "        ", "self", ".", "_eid", "=", "eid", "# ID within the corresponding dataset", "\n", "\n", "self", ".", "_entity_type", "=", "entity_type", "\n", "\n", "self", ".", "_tokens", "=", "tokens", "\n", "self", ".", "_phrase", "=", "phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.as_tuple": [[208, 210], ["None"], "methods", ["None"], ["", "def", "as_tuple", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "span_start", ",", "self", ".", "span_end", ",", "self", ".", "_entity_type", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.as_tuple_token": [[211, 213], ["None"], "methods", ["None"], ["", "def", "as_tuple_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tokens", "[", "0", "]", ".", "index", ",", "self", ".", "_tokens", "[", "-", "1", "]", ".", "index", ",", "self", ".", "_entity_type", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.entity_type": [[214, 217], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "entity_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_entity_type", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.tokens": [[218, 221], ["entities.TokenSpan"], "methods", ["None"], ["", "@", "property", "\n", "def", "tokens", "(", "self", ")", ":", "\n", "        ", "return", "TokenSpan", "(", "self", ".", "_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.span_start": [[222, 225], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span_start", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tokens", "[", "0", "]", ".", "span_start", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.span_end": [[226, 229], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span_end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tokens", "[", "-", "1", "]", ".", "span_end", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.span": [[230, 233], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "span_start", ",", "self", ".", "span_end", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.span_token": [[234, 237], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "span_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tokens", "[", "0", "]", ".", "index", ",", "self", ".", "_tokens", "[", "-", "1", "]", ".", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.phrase": [[238, 241], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "phrase", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.__eq__": [[242, 246], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "Entity", ")", ":", "\n", "            ", "return", "self", ".", "_eid", "==", "other", ".", "_eid", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.__hash__": [[247, 249], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "_eid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Entity.__str__": [[250, 252], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_phrase", "+", "f\" -> {self.span_token}-> {self.entity_type.identifier}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.__init__": [[255, 267], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rid", ":", "int", ",", "relation_type", ":", "RelationType", ",", "head_entity", ":", "Entity", ",", "\n", "tail_entity", ":", "Entity", ",", "reverse", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "_rid", "=", "rid", "# ID within the corresponding dataset", "\n", "self", ".", "_relation_type", "=", "relation_type", "\n", "\n", "self", ".", "_head_entity", "=", "head_entity", "\n", "self", ".", "_tail_entity", "=", "tail_entity", "\n", "\n", "self", ".", "_reverse", "=", "reverse", "\n", "\n", "self", ".", "_first_entity", "=", "head_entity", "if", "not", "reverse", "else", "tail_entity", "\n", "self", ".", "_second_entity", "=", "tail_entity", "if", "not", "reverse", "else", "head_entity", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.as_tuple": [[268, 277], ["None"], "methods", ["None"], ["", "def", "as_tuple", "(", "self", ")", ":", "\n", "        ", "head", "=", "self", ".", "_head_entity", "\n", "tail", "=", "self", ".", "_tail_entity", "\n", "head_start", ",", "head_end", "=", "(", "head", ".", "span_start", ",", "head", ".", "span_end", ")", "\n", "tail_start", ",", "tail_end", "=", "(", "tail", ".", "span_start", ",", "tail", ".", "span_end", ")", "\n", "\n", "t", "=", "(", "(", "head_start", ",", "head_end", ",", "head", ".", "entity_type", ")", ",", "\n", "(", "tail_start", ",", "tail_end", ",", "tail", ".", "entity_type", ")", ",", "self", ".", "_relation_type", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.relation_type": [[278, 281], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "relation_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_relation_type", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.head_entity": [[282, 285], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "head_entity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_head_entity", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.tail_entity": [[286, 289], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tail_entity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tail_entity", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.first_entity": [[290, 293], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "first_entity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_first_entity", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.second_entity": [[294, 297], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "second_entity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_second_entity", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.reverse": [[298, 301], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_reverse", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.__eq__": [[302, 306], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "Relation", ")", ":", "\n", "            ", "return", "self", ".", "_rid", "==", "other", ".", "_rid", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Relation.__hash__": [[307, 309], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "_rid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.__init__": [[312, 324], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "doc_id", ":", "int", ",", "tokens", ":", "List", "[", "Token", "]", ",", "entities", ":", "List", "[", "Entity", "]", ",", "relations", ":", "List", "[", "Relation", "]", ",", "\n", "encoding", ":", "List", "[", "int", "]", ",", "char_encoding", ":", "List", "[", "List", "[", "int", "]", "]", ",", "seg_encoding", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "self", ".", "_doc_id", "=", "doc_id", "# ID within the corresponding dataset", "\n", "\n", "self", ".", "_tokens", "=", "tokens", "\n", "self", ".", "_entities", "=", "entities", "\n", "self", ".", "_relations", "=", "relations", "\n", "\n", "# byte-pair document encoding including special tokens ([CLS] and [SEP])", "\n", "self", ".", "_encoding", "=", "encoding", "\n", "self", ".", "_char_encoding", "=", "char_encoding", "\n", "self", ".", "_seg_encoding", "=", "seg_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.doc_id": [[325, 328], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "doc_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_doc_id", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.entities": [[329, 332], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "entities", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.relations": [[333, 336], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "relations", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_relations", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.tokens": [[337, 340], ["entities.TokenSpan"], "methods", ["None"], ["", "@", "property", "\n", "def", "tokens", "(", "self", ")", ":", "\n", "        ", "return", "TokenSpan", "(", "self", ".", "_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.encoding": [[353, 356], ["None"], "methods", ["None"], ["", "@", "encoding", ".", "setter", "\n", "def", "encoding", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_encoding", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.char_encoding": [[357, 360], ["None"], "methods", ["None"], ["", "@", "char_encoding", ".", "setter", "\n", "def", "char_encoding", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_char_encoding", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.seg_encoding": [[361, 364], ["None"], "methods", ["None"], ["", "@", "seg_encoding", ".", "setter", "\n", "def", "seg_encoding", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_seg_encoding", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.__str__": [[366, 371], ["str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "raw_document", "=", "\" \"", ".", "join", "(", "str", "(", "t", ")", "for", "t", "in", "self", ".", "tokens", ")", "\n", "raw_entities", "=", "\" | \"", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "self", ".", "entities", ")", "\n", "\n", "return", "raw_document", "+", "\"\\n\"", "+", "raw_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.__eq__": [[373, 377], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "Document", ")", ":", "\n", "            ", "return", "self", ".", "_doc_id", "==", "other", ".", "_doc_id", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Document.__hash__": [[378, 380], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "_doc_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.BatchIterator.__init__": [[383, 394], ["len", "list", "range", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "entities", ",", "batch_size", ",", "order", "=", "None", ",", "truncate", "=", "False", ")", ":", "\n", "        ", "self", ".", "_entities", "=", "entities", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_truncate", "=", "truncate", "\n", "self", ".", "_length", "=", "len", "(", "self", ".", "_entities", ")", "\n", "self", ".", "_order", "=", "order", "\n", "\n", "if", "order", "is", "None", ":", "\n", "            ", "self", ".", "_order", "=", "list", "(", "range", "(", "len", "(", "self", ".", "_entities", ")", ")", ")", "\n", "\n", "", "self", ".", "_i", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.BatchIterator.__iter__": [[395, 397], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.BatchIterator.__next__": [[398, 407], ["None"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_truncate", "and", "self", ".", "_i", "+", "self", ".", "_batch_size", ">", "self", ".", "_length", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "elif", "not", "self", ".", "_truncate", "and", "self", ".", "_i", ">=", "self", ".", "_length", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "else", ":", "\n", "            ", "entities", "=", "[", "self", ".", "_entities", "[", "n", "]", "for", "n", "in", "self", ".", "_order", "[", "self", ".", "_i", ":", "self", ".", "_i", "+", "self", ".", "_batch_size", "]", "]", "\n", "self", ".", "_i", "+=", "self", ".", "_batch_size", "\n", "return", "entities", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.__init__": [[413, 431], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "label", ",", "rel_types", ",", "entity_types", ",", "random_mask_word", "=", "False", ",", "tokenizer", "=", "None", ",", "repeat_gt_entities", "=", "None", ")", ":", "\n", "        ", "self", ".", "_label", "=", "label", "\n", "self", ".", "_rel_types", "=", "rel_types", "\n", "self", ".", "_entity_types", "=", "entity_types", "\n", "self", ".", "_mode", "=", "Dataset", ".", "TRAIN_MODE", "\n", "self", ".", "random_mask_word", "=", "random_mask_word", "\n", "self", ".", "_tokenizer", "=", "tokenizer", "\n", "self", ".", "_repeat_gt_entities", "=", "repeat_gt_entities", "\n", "\n", "self", ".", "_documents", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_entities", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_relations", "=", "OrderedDict", "(", ")", "\n", "\n", "# current ids", "\n", "self", ".", "_doc_id", "=", "0", "\n", "self", ".", "_rid", "=", "0", "\n", "self", ".", "_eid", "=", "0", "\n", "self", ".", "_tid", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.iterate_documents": [[432, 434], ["entities.BatchIterator"], "methods", ["None"], ["", "def", "iterate_documents", "(", "self", ",", "batch_size", ",", "order", "=", "None", ",", "truncate", "=", "False", ")", ":", "\n", "        ", "return", "BatchIterator", "(", "self", ".", "documents", ",", "batch_size", ",", "order", "=", "order", ",", "truncate", "=", "truncate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.iterate_relations": [[435, 437], ["entities.BatchIterator"], "methods", ["None"], ["", "def", "iterate_relations", "(", "self", ",", "batch_size", ",", "order", "=", "None", ",", "truncate", "=", "False", ")", ":", "\n", "        ", "return", "BatchIterator", "(", "self", ".", "relations", ",", "batch_size", ",", "order", "=", "order", ",", "truncate", "=", "truncate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.create_token": [[438, 442], ["entities.Token"], "methods", ["None"], ["", "def", "create_token", "(", "self", ",", "idx", ",", "span_start", ",", "span_end", ",", "phrase", ",", "pos", ",", "inx", ",", "char_start", ",", "char_end", ")", "->", "Token", ":", "\n", "        ", "token", "=", "Token", "(", "self", ".", "_tid", ",", "idx", ",", "span_start", ",", "span_end", ",", "phrase", ",", "pos", ",", "inx", ",", "char_start", ",", "char_end", ")", "\n", "self", ".", "_tid", "+=", "1", "\n", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.create_document": [[443, 449], ["entities.Document"], "methods", ["None"], ["", "def", "create_document", "(", "self", ",", "tokens", ",", "entity_mentions", ",", "relations", ",", "doc_encoding", ",", "char_encoding", ",", "seg_encoding", ")", "->", "Document", ":", "\n", "        ", "document", "=", "Document", "(", "self", ".", "_doc_id", ",", "tokens", ",", "entity_mentions", ",", "relations", ",", "doc_encoding", ",", "char_encoding", ",", "seg_encoding", ")", "\n", "self", ".", "_documents", "[", "self", ".", "_doc_id", "]", "=", "document", "\n", "self", ".", "_doc_id", "+=", "1", "\n", "\n", "return", "document", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.create_entity": [[450, 455], ["entities.Entity"], "methods", ["None"], ["", "def", "create_entity", "(", "self", ",", "entity_type", ",", "tokens", ",", "phrase", ")", "->", "Entity", ":", "\n", "        ", "mention", "=", "Entity", "(", "self", ".", "_eid", ",", "entity_type", ",", "tokens", ",", "phrase", ")", "\n", "self", ".", "_entities", "[", "self", ".", "_eid", "]", "=", "mention", "\n", "self", ".", "_eid", "+=", "1", "\n", "return", "mention", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.create_relation": [[456, 461], ["entities.Relation"], "methods", ["None"], ["", "def", "create_relation", "(", "self", ",", "relation_type", ",", "head_entity", ",", "tail_entity", ",", "reverse", "=", "False", ")", "->", "Relation", ":", "\n", "        ", "relation", "=", "Relation", "(", "self", ".", "_rid", ",", "relation_type", ",", "head_entity", ",", "tail_entity", ",", "reverse", ")", "\n", "self", ".", "_relations", "[", "self", ".", "_rid", "]", "=", "relation", "\n", "self", ".", "_rid", "+=", "1", "\n", "return", "relation", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.__len__": [[462, 464], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_documents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.__getitem__": [[465, 472], ["piqn.sampling.create_train_sample", "piqn.sampling.create_eval_sample"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.create_train_sample", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.create_eval_sample"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "doc", "=", "self", ".", "_documents", "[", "index", "]", "\n", "\n", "if", "self", ".", "_mode", "==", "Dataset", ".", "TRAIN_MODE", ":", "\n", "            ", "return", "sampling", ".", "create_train_sample", "(", "doc", ",", "random_mask", "=", "self", ".", "random_mask_word", ",", "tokenizer", "=", "self", ".", "_tokenizer", ",", "repeat_gt_entities", "=", "self", ".", "_repeat_gt_entities", ")", "\n", "", "else", ":", "\n", "            ", "return", "sampling", ".", "create_eval_sample", "(", "doc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.switch_mode": [[473, 475], ["None"], "methods", ["None"], ["", "", "def", "switch_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "_mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.label": [[476, 479], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_label", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.input_reader": [[480, 483], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_reader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_input_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.documents": [[484, 487], ["list", "entities.Dataset._documents.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "documents", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_documents", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.entities": [[488, 491], ["list", "entities.Dataset._entities.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "entities", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_entities", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.relations": [[492, 495], ["list", "entities.Dataset._relations.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "relations", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_relations", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.document_count": [[496, 499], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "document_count", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_documents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.entity_count": [[500, 503], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "entity_count", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_entities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.Dataset.relation_count": [[504, 507], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "relation_count", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__init__": [[512, 533], ["torch.get_rank", "torch.get_world_size", "json.load", "open", "path.split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "label", ",", "path", ",", "rel_types", ",", "entity_types", ",", "input_reader", ",", "random_mask_word", "=", "False", ",", "tokenizer", "=", "None", ",", "repeat_gt_entities", "=", "None", ")", ":", "\n", "        ", "self", ".", "_label", "=", "label", "\n", "self", ".", "_path", "=", "path", "\n", "self", ".", "_rel_types", "=", "rel_types", "\n", "self", ".", "_entity_types", "=", "entity_types", "\n", "self", ".", "_mode", "=", "Dataset", ".", "TRAIN_MODE", "\n", "self", ".", "random_mask_word", "=", "random_mask_word", "\n", "self", ".", "_tokenizer", "=", "tokenizer", "\n", "self", ".", "_input_reader", "=", "input_reader", "\n", "self", ".", "_repeat_gt_entities", "=", "repeat_gt_entities", "\n", "self", ".", "_local_rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "self", ".", "_world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "# print(self._local_rank, self._world_size)", "\n", "\n", "self", ".", "statistic", "=", "json", ".", "load", "(", "open", "(", "path", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_statistic.json\"", ")", ")", "\n", "\n", "# current ids", "\n", "self", ".", "_doc_id", "=", "0", "\n", "self", ".", "_rid", "=", "0", "\n", "self", ".", "_eid", "=", "0", "\n", "self", ".", "_tid", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.create_token": [[534, 538], ["entities.Token"], "methods", ["None"], ["", "def", "create_token", "(", "self", ",", "idx", ",", "span_start", ",", "span_end", ",", "phrase", ",", "pos", ",", "inx", ",", "char_start", ",", "char_end", ")", "->", "Token", ":", "\n", "        ", "token", "=", "Token", "(", "self", ".", "_tid", ",", "idx", ",", "span_start", ",", "span_end", ",", "phrase", ",", "pos", ",", "inx", ",", "char_start", ",", "char_end", ")", "\n", "self", ".", "_tid", "+=", "1", "\n", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.create_document": [[539, 543], ["entities.Document"], "methods", ["None"], ["", "def", "create_document", "(", "self", ",", "tokens", ",", "entity_mentions", ",", "relations", ",", "doc_encoding", ",", "char_encoding", ",", "seg_encoding", ")", "->", "Document", ":", "\n", "        ", "document", "=", "Document", "(", "self", ".", "_doc_id", ",", "tokens", ",", "entity_mentions", ",", "relations", ",", "doc_encoding", ",", "char_encoding", ",", "seg_encoding", ")", "\n", "self", ".", "_doc_id", "+=", "1", "\n", "return", "document", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.create_entity": [[544, 548], ["entities.Entity"], "methods", ["None"], ["", "def", "create_entity", "(", "self", ",", "entity_type", ",", "tokens", ",", "phrase", ")", "->", "Entity", ":", "\n", "        ", "mention", "=", "Entity", "(", "self", ".", "_eid", ",", "entity_type", ",", "tokens", ",", "phrase", ")", "\n", "self", ".", "_eid", "+=", "1", "\n", "return", "mention", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.create_relation": [[549, 553], ["entities.Relation"], "methods", ["None"], ["", "def", "create_relation", "(", "self", ",", "relation_type", ",", "head_entity", ",", "tail_entity", ",", "reverse", "=", "False", ")", "->", "Relation", ":", "\n", "        ", "relation", "=", "Relation", "(", "self", ".", "_rid", ",", "relation_type", ",", "head_entity", ",", "tail_entity", ",", "reverse", ")", "\n", "self", ".", "_rid", "+=", "1", "\n", "return", "relation", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.parse_doc": [[554, 579], ["torch.utils.data.get_worker_info", "open", "json.loads", "entities.DistributedIterableDataset._input_reader._parse_document", "piqn.sampling.create_train_sample", "piqn.sampling.create_eval_sample"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.input_reader.JsonInputReader._parse_document", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.create_train_sample", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.create_eval_sample"], ["", "def", "parse_doc", "(", "self", ",", "path", ")", ":", "\n", "        ", "inx", "=", "0", "\n", "worker_info", "=", "data", ".", "get_worker_info", "(", ")", "\n", "num_workers", "=", "1", "\n", "worker_id", "=", "0", "\n", "if", "worker_info", "is", "not", "None", ":", "\n", "            ", "num_workers", "=", "worker_info", ".", "num_workers", "\n", "worker_id", "=", "worker_info", ".", "id", "\n", "\n", "", "offset", "=", "0", "\n", "mod", "=", "1", "\n", "if", "self", ".", "_local_rank", "!=", "-", "1", ":", "\n", "            ", "offset", "=", "self", ".", "_local_rank", "*", "num_workers", "+", "worker_id", "\n", "mod", "=", "self", ".", "_world_size", "*", "num_workers", "\n", "", "with", "open", "(", "self", ".", "_path", ",", "encoding", "=", "\"utf8\"", ")", "as", "rf", ":", "\n", "            ", "for", "line", "in", "rf", ":", "\n", "                ", "if", "inx", "%", "mod", "==", "offset", ":", "\n", "                    ", "doc", "=", "json", ".", "loads", "(", "line", ")", "\n", "doc", "=", "self", ".", "_input_reader", ".", "_parse_document", "(", "doc", ",", "self", ")", "\n", "if", "doc", "is", "not", "None", ":", "\n", "                        ", "if", "self", ".", "_mode", "==", "Dataset", ".", "TRAIN_MODE", ":", "\n", "                            ", "yield", "sampling", ".", "create_train_sample", "(", "doc", ",", "random_mask", "=", "self", ".", "random_mask_word", ",", "tokenizer", "=", "self", ".", "_tokenizer", ",", "repeat_gt_entities", "=", "self", ".", "_repeat_gt_entities", ")", "\n", "", "else", ":", "\n", "                            ", "yield", "sampling", ".", "create_eval_sample", "(", "doc", ")", "\n", "", "", "", "inx", "+=", "1", "# maybe imblance", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset._get_stream": [[581, 584], ["entities.DistributedIterableDataset.parse_doc"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.parse_doc"], ["", "", "", "def", "_get_stream", "(", "self", ",", "path", ")", ":", "\n", "# return itertools.cycle(self.parse_doc(path))", "\n", "        ", "return", "self", ".", "parse_doc", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.__iter__": [[586, 588], ["entities.DistributedIterableDataset._get_stream"], "methods", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset._get_stream"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_stream", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.switch_mode": [[590, 592], ["None"], "methods", ["None"], ["", "def", "switch_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "_mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.label": [[593, 596], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_label", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.input_reader": [[597, 600], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_reader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_input_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.document_count": [[601, 604], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "document_count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "statistic", "[", "\"document_count\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.entities.DistributedIterableDataset.entity_count": [[605, 608], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "entity_count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "statistic", "[", "\"entity_count\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.create_train_sample": [[9, 116], ["len", "len", "piqn.util.padded_stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones", "torch.ones", "torch.stack", "dict", "len", "torch.tensor.append", "util.padded_stack.append", "torch.stack.append", "gt_entities_spans_token.append", "torch.zeros.append", "torch.zeros.append", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "random.random", "range", "len", "torch.tensor", "sampling.create_entity_mask", "len", "random.random", "len", "len", "len", "len", "len", "len", "random.random", "tokenizer.convert_tokens_to_ids", "random.randint"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.padded_stack", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.create_entity_mask"], ["def", "create_train_sample", "(", "doc", ",", "random_mask", "=", "False", ",", "tokenizer", "=", "None", ",", "repeat_gt_entities", "=", "-", "1", ")", ":", "\n", "    ", "pos_encoding", "=", "[", "t", ".", "pos_id", "for", "t", "in", "doc", ".", "tokens", "]", "\n", "encodings", "=", "doc", ".", "encoding", "\n", "seg_encoding", "=", "doc", ".", "seg_encoding", "\n", "# if len(doc.encoding) > 512:", "\n", "#     return None", "\n", "token_count", "=", "len", "(", "doc", ".", "tokens", ")", "\n", "context_size", "=", "len", "(", "encodings", ")", "\n", "\n", "gt_seq_labels", "=", "[", "0", "]", "*", "len", "(", "encodings", ")", "\n", "special_tokens_map", "=", "tokenizer", ".", "special_tokens_map", "\n", "if", "random_mask", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "gt_seq_labels", ")", "-", "1", ")", ":", "\n", "                ", "replace_rnd", "=", "random", ".", "random", "(", ")", "\n", "if", "replace_rnd", "<", "0.15", "and", "i", "!=", "0", ":", "\n", "                    ", "gt_seq_labels", "[", "i", "]", "=", "encodings", "[", "i", "]", "\n", "strategy_rnd", "=", "random", ".", "random", "(", ")", "\n", "if", "strategy_rnd", "<", "0.8", ":", "\n", "                        ", "encodings", "[", "i", "]", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "special_tokens_map", "[", "'mask_token'", "]", ")", "\n", "", "elif", "strategy_rnd", "<", "0.9", ":", "\n", "                        ", "encodings", "[", "i", "]", "=", "random", ".", "randint", "(", "0", ",", "tokenizer", ".", "vocab_size", "-", "1", ")", "\n", "# else:", "\n", "#     gt_seq_labels[0] = encodings[0]", "\n", "\n", "", "", "", "", "", "char_encodings", "=", "doc", ".", "char_encoding", "\n", "char_encoding", "=", "[", "]", "\n", "char_count", "=", "[", "]", "\n", "for", "char_encoding_token", "in", "char_encodings", ":", "\n", "        ", "char_count", ".", "append", "(", "len", "(", "char_encoding_token", ")", ")", "\n", "char_encoding", ".", "append", "(", "torch", ".", "tensor", "(", "char_encoding_token", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "", "char_encoding", "=", "util", ".", "padded_stack", "(", "char_encoding", ")", "\n", "token_masks_char", "=", "(", "char_encoding", "!=", "0", ")", ".", "long", "(", ")", "\n", "char_count", "=", "torch", ".", "tensor", "(", "char_count", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "wordvec_encoding", "=", "[", "t", ".", "wordinx", "for", "t", "in", "doc", ".", "tokens", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# all tokens", "\n", "context2token_masks", "=", "[", "]", "\n", "for", "t", "in", "doc", ".", "tokens", ":", "\n", "        ", "context2token_masks", ".", "append", "(", "create_entity_mask", "(", "*", "t", ".", "span", ",", "context_size", ")", ")", "\n", "\n", "", "gt_entities_spans_token", "=", "[", "]", "\n", "gt_entity_types", "=", "[", "]", "\n", "gt_entity_masks", "=", "[", "]", "\n", "\n", "for", "e", "in", "doc", ".", "entities", ":", "\n", "        ", "gt_entities_spans_token", ".", "append", "(", "e", ".", "span_token", ")", "\n", "gt_entity_types", ".", "append", "(", "e", ".", "entity_type", ".", "index", ")", "\n", "gt_entity_masks", ".", "append", "(", "1", ")", "\n", "\n", "", "if", "repeat_gt_entities", "!=", "-", "1", ":", "\n", "        ", "if", "len", "(", "doc", ".", "entities", ")", "!=", "0", ":", "\n", "            ", "k", "=", "repeat_gt_entities", "//", "len", "(", "doc", ".", "entities", ")", "\n", "m", "=", "repeat_gt_entities", "%", "len", "(", "doc", ".", "entities", ")", "\n", "gt_entities_spans_token", "=", "gt_entities_spans_token", "*", "k", "+", "gt_entities_spans_token", "[", ":", "m", "]", "\n", "gt_entity_types", "=", "gt_entity_types", "*", "k", "+", "gt_entity_types", "[", ":", "m", "]", "\n", "gt_entity_masks", "=", "gt_entity_masks", "*", "k", "+", "gt_entity_masks", "[", ":", "m", "]", "\n", "assert", "len", "(", "gt_entities_spans_token", ")", "==", "len", "(", "gt_entity_types", ")", "==", "len", "(", "gt_entity_masks", ")", "==", "repeat_gt_entities", "\n", "\n", "# create tensors", "\n", "# token indices", "\n", "", "", "encodings", "=", "torch", ".", "tensor", "(", "encodings", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "seg_encoding", "=", "torch", ".", "tensor", "(", "seg_encoding", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "gt_seq_labels", "=", "torch", ".", "tensor", "(", "gt_seq_labels", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "pos_encoding", "=", "torch", ".", "tensor", "(", "pos_encoding", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "wordvec_encoding", "=", "torch", ".", "tensor", "(", "wordvec_encoding", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# masking of tokens", "\n", "context_masks", "=", "torch", ".", "ones", "(", "context_size", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "# context_masks = torch.tensor(seg_encoding, dtype=torch.bool)", "\n", "token_masks", "=", "torch", ".", "ones", "(", "token_count", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "# also create samples_masks:", "\n", "# tensors to mask entity/relation samples of batch", "\n", "# since samples are stacked into batches, \"padding\" entities/relations possibly must be created", "\n", "# these are later masked during loss computation", "\n", "context2token_masks", "=", "torch", ".", "stack", "(", "context2token_masks", ")", "\n", "\n", "if", "len", "(", "gt_entity_types", ")", ">", "0", ":", "\n", "        ", "gt_entity_types", "=", "torch", ".", "tensor", "(", "gt_entity_types", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "# gt_entity_spans_token = torch.tensor(gt_entities_spans_token, dtype=torch.float) / len(doc.tokens)", "\n", "gt_entity_spans_token", "=", "torch", ".", "tensor", "(", "gt_entities_spans_token", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "# gt_entity_spans_token[:, 1] = gt_entity_spans_token[:, 1] - 1", "\n", "gt_entity_masks", "=", "torch", ".", "tensor", "(", "gt_entity_masks", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "", "else", ":", "\n", "        ", "gt_entity_types", "=", "torch", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "gt_entity_spans_token", "=", "torch", ".", "zeros", "(", "[", "1", ",", "2", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "gt_entity_masks", "=", "torch", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "# entity_types_onehot = torch.zeros([gt_entity_types.shape[0], ent_type_count], dtype=torch.float32)", "\n", "# entity_types_onehot.scatter_(1, gt_entity_types.unsqueeze(1), 1)", "\n", "# # rel_type_count-1 no none relation", "\n", "# entity_types_onehot = entity_types_onehot[:, 1:]  # all zeros for 'none' relation", "\n", "\n", "\n", "# left_onehot = torch.zeros([gt_entities_spans_token.shape[0], token_count], dtype=torch.float32)", "\n", "# left_onehot.scatter_(1, gt_entities_spans_token[:, 0].unsqueeze(1), 1)", "\n", "\n", "\n", "# right_onehot = torch.zeros([gt_entities_spans_token.shape[0], token_count], dtype=torch.float32)", "\n", "# right_onehot.scatter_(1, gt_entities_spans_token[:, 1].unsqueeze(1), 1)", "\n", "\n", "", "return", "dict", "(", "encodings", "=", "encodings", ",", "context_masks", "=", "context_masks", ",", "seg_encoding", "=", "seg_encoding", ",", "context2token_masks", "=", "context2token_masks", ",", "token_masks", "=", "token_masks", ",", "\n", "pos_encoding", "=", "pos_encoding", ",", "wordvec_encoding", "=", "wordvec_encoding", ",", "char_encoding", "=", "char_encoding", ",", "token_masks_char", "=", "token_masks_char", ",", "char_count", "=", "char_count", ",", "\n", "gt_types", "=", "gt_entity_types", ",", "gt_spans", "=", "gt_entity_spans_token", ",", "entity_masks", "=", "gt_entity_masks", ",", "gt_seq_labels", "=", "gt_seq_labels", ",", "meta_doc", "=", "doc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.create_eval_sample": [[118, 165], ["len", "len", "piqn.util.padded_stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones", "torch.ones", "torch.stack", "dict", "torch.tensor.append", "util.padded_stack.append", "torch.stack.append", "len", "torch.tensor", "sampling.create_entity_mask"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.padded_stack", "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.create_entity_mask"], ["", "def", "create_eval_sample", "(", "doc", ")", ":", "\n", "# if len(doc.encoding) > 512:", "\n", "#     return None", "\n", "    ", "pos_encoding", "=", "[", "t", ".", "pos_id", "for", "t", "in", "doc", ".", "tokens", "]", "\n", "encodings", "=", "doc", ".", "encoding", "\n", "seg_encoding", "=", "doc", ".", "seg_encoding", "\n", "token_count", "=", "len", "(", "doc", ".", "tokens", ")", "\n", "context_size", "=", "len", "(", "encodings", ")", "\n", "\n", "char_encodings", "=", "doc", ".", "char_encoding", "\n", "char_encoding", "=", "[", "]", "\n", "char_count", "=", "[", "]", "\n", "for", "char_encoding_token", "in", "char_encodings", ":", "\n", "        ", "char_count", ".", "append", "(", "len", "(", "char_encoding_token", ")", ")", "\n", "char_encoding", ".", "append", "(", "torch", ".", "tensor", "(", "char_encoding_token", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "", "char_encoding", "=", "util", ".", "padded_stack", "(", "char_encoding", ")", "\n", "token_masks_char", "=", "(", "char_encoding", "!=", "0", ")", ".", "long", "(", ")", "\n", "char_count", "=", "torch", ".", "tensor", "(", "char_count", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "wordvec_encoding", "=", "[", "t", ".", "wordinx", "for", "t", "in", "doc", ".", "tokens", "]", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "# all tokens", "\n", "context2token_masks", "=", "[", "]", "\n", "for", "t", "in", "doc", ".", "tokens", ":", "\n", "        ", "context2token_masks", ".", "append", "(", "create_entity_mask", "(", "*", "t", ".", "span", ",", "context_size", ")", ")", "\n", "\n", "# create tensors", "\n", "# token indices", "\n", "", "encodings", "=", "torch", ".", "tensor", "(", "encodings", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "seg_encoding", "=", "torch", ".", "tensor", "(", "seg_encoding", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "pos_encoding", "=", "torch", ".", "tensor", "(", "pos_encoding", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "wordvec_encoding", "=", "torch", ".", "tensor", "(", "wordvec_encoding", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# masking of tokens", "\n", "context_masks", "=", "torch", ".", "ones", "(", "context_size", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "token_masks", "=", "torch", ".", "ones", "(", "token_count", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "# also create samples_masks:", "\n", "# tensors to mask entity/relation samples of batch", "\n", "# since samples are stacked into batches, \"padding\" entities/relations possibly must be created", "\n", "# these are later masked during loss computation", "\n", "context2token_masks", "=", "torch", ".", "stack", "(", "context2token_masks", ")", "\n", "\n", "return", "dict", "(", "encodings", "=", "encodings", ",", "context_masks", "=", "context_masks", ",", "seg_encoding", "=", "seg_encoding", ",", "context2token_masks", "=", "context2token_masks", ",", "token_masks", "=", "token_masks", ",", "\n", "pos_encoding", "=", "pos_encoding", ",", "wordvec_encoding", "=", "wordvec_encoding", ",", "char_encoding", "=", "char_encoding", ",", "token_masks_char", "=", "token_masks_char", ",", "char_count", "=", "char_count", ",", "meta_doc", "=", "doc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.create_entity_mask": [[166, 170], ["torch.zeros"], "function", ["None"], ["", "def", "create_entity_mask", "(", "start", ",", "end", ",", "context_size", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "context_size", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask", "[", "start", ":", "end", "]", "=", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tricktreat_piqn.piqn.sampling.collate_fn_padding": [[171, 188], ["list", "dict", "batch[].keys", "filter", "key.startswith", "torch.stack", "piqn.util.padded_stack"], "function", ["home.repos.pwc.inspect_result.tricktreat_piqn.piqn.util.padded_stack"], ["", "def", "collate_fn_padding", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "padded_batch", "=", "dict", "(", ")", "\n", "keys", "=", "batch", "[", "0", "]", ".", "keys", "(", ")", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "samples", "=", "[", "s", "[", "key", "]", "for", "s", "in", "batch", "]", "\n", "if", "key", ".", "startswith", "(", "\"meta\"", ")", ":", "\n", "            ", "padded_batch", "[", "key", "]", "=", "samples", "\n", "continue", "\n", "\n", "", "if", "not", "batch", "[", "0", "]", "[", "key", "]", ".", "shape", ":", "\n", "            ", "padded_batch", "[", "key", "]", "=", "torch", ".", "stack", "(", "samples", ")", "\n", "", "else", ":", "\n", "            ", "padded_batch", "[", "key", "]", "=", "util", ".", "padded_stack", "(", "[", "s", "[", "key", "]", "for", "s", "in", "batch", "]", ")", "\n", "\n", "", "", "return", "padded_batch", "\n", "", ""]]}