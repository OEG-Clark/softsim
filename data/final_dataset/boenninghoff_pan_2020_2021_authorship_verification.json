{"home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step4_make_vocabularies.Corpus.__init__": [[13, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dict_token_counts", ",", "dict_chr_counts", ")", ":", "\n", "\n", "# dictionary to count tokens/fandoms/characters", "\n", "        ", "self", ".", "dict_token_counts", "=", "dict_token_counts", "\n", "self", ".", "dict_chr_counts", "=", "dict_chr_counts", "\n", "\n", "# define token-based vocabulary", "\n", "self", ".", "V_w", "=", "{", "'<PAD>'", ":", "0", ",", "# zero-padding token", "\n", "'<UNK>'", ":", "1", ",", "# unknown-token", "\n", "}", "\n", "# define character-based vocabulary", "\n", "self", ".", "V_c", "=", "{", "'<PAD>'", ":", "0", ",", "# zero-padding character", "\n", "'<UNK>'", ":", "1", ",", "# unknown-character", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step4_make_vocabularies.Corpus.remove_rare_tok": [[31, 38], ["sorted", "step4_make_vocabularies.Corpus.dict_token_counts.items", "list", "list", "zip"], "methods", ["None"], ["", "def", "remove_rare_tok", "(", "self", ",", "vocab_size_token", ")", ":", "\n", "\n", "# remove rare token types", "\n", "        ", "q", "=", "sorted", "(", "self", ".", "dict_token_counts", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "list_tokens", "=", "list", "(", "list", "(", "zip", "(", "*", "q", ")", ")", "[", "0", "]", ")", "[", ":", "vocab_size_token", "]", "\n", "\n", "return", "list_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step4_make_vocabularies.Corpus.remove_rare_chr": [[42, 49], ["sorted", "step4_make_vocabularies.Corpus.dict_chr_counts.items", "list", "list", "zip"], "methods", ["None"], ["", "def", "remove_rare_chr", "(", "self", ",", "vocab_size_chr", ")", ":", "\n", "\n", "# remove rare character types", "\n", "        ", "q", "=", "sorted", "(", "self", ".", "dict_chr_counts", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "list_chr", "=", "list", "(", "list", "(", "zip", "(", "*", "q", ")", ")", "[", "0", "]", ")", "[", ":", "vocab_size_chr", "]", "\n", "\n", "return", "list_chr", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step4_make_vocabularies.Corpus.make_wrd_vocabulary": [[53, 69], ["step4_make_vocabularies.Corpus.V_w.copy", "numpy.zeros", "step4_make_vocabularies.Corpus.keys", "len", "len"], "methods", ["None"], ["", "def", "make_wrd_vocabulary", "(", "self", ",", "list_tokens", ",", "WE_dic", ",", "D_w", ")", ":", "\n", "\n", "# add tokens to vocabulary and assign an integer", "\n", "        ", "V_w", "=", "self", ".", "V_w", ".", "copy", "(", ")", "\n", "for", "token", "in", "list_tokens", ":", "\n", "            ", "V_w", "[", "token", "]", "=", "len", "(", "V_w", ")", "\n", "\n", "# initialize embedding matrix", "\n", "", "E_w", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "V_w", ")", ",", "D_w", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# fill embedding matrix", "\n", "for", "token", "in", "V_w", ".", "keys", "(", ")", ":", "\n", "            ", "idx", "=", "V_w", "[", "token", "]", "\n", "E_w", "[", "idx", ",", ":", "]", "=", "WE_dic", "[", "token", "]", "\n", "\n", "", "return", "V_w", ",", "E_w", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step4_make_vocabularies.Corpus.make_chr_vocabulary": [[73, 81], ["step4_make_vocabularies.Corpus.V_c.copy", "len"], "methods", ["None"], ["", "def", "make_chr_vocabulary", "(", "self", ",", "list_chr", ")", ":", "\n", "\n", "# character vocabulary", "\n", "        ", "V_c", "=", "self", ".", "V_c", ".", "copy", "(", ")", "\n", "for", "c", "in", "list_chr", ":", "\n", "            ", "V_c", "[", "c", "]", "=", "len", "(", "V_c", ")", "\n", "\n", "", "return", "V_c", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step3_count.Corpus.__init__": [[11, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dict_author_fandom_docs", ")", ":", "\n", "\n", "# dataset (tokenized)", "\n", "        ", "self", ".", "dict_author_fandom_docs", "=", "dict_author_fandom_docs", "\n", "\n", "# dictionary to count tokens/fandoms/characters", "\n", "self", ".", "dict_token_counts", "=", "{", "}", "\n", "self", ".", "dict_chr_counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step3_count.Corpus.count_docs": [[23, 29], ["doc.split", "step3_count.Corpus.count_tokens_and_characters"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step3_count.Corpus.count_tokens_and_characters"], ["", "def", "count_docs", "(", "self", ",", "doc", ")", ":", "\n", "\n", "        ", "tokens", "=", "doc", ".", "split", "(", ")", "\n", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "self", ".", "count_tokens_and_characters", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step3_count.Corpus.count_tokens_and_characters": [[33, 43], ["None"], "methods", ["None"], ["", "", "def", "count_tokens_and_characters", "(", "self", ",", "token", ")", ":", "\n", "\n", "        ", "for", "chr", "in", "token", ":", "\n", "            ", "if", "chr", "not", "in", "self", ".", "dict_chr_counts", ":", "\n", "                ", "self", ".", "dict_chr_counts", "[", "chr", "]", "=", "0", "\n", "", "self", ".", "dict_chr_counts", "[", "chr", "]", "+=", "1", "\n", "\n", "", "if", "token", "not", "in", "self", ".", "dict_token_counts", ":", "\n", "            ", "self", ".", "dict_token_counts", "[", "token", "]", "=", "0", "\n", "", "self", ".", "dict_token_counts", "[", "token", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step3_count.Corpus.parse_dictionary": [[47, 56], ["step3_count.Corpus.dict_author_fandom_docs.keys", "step3_count.Corpus.dict_author_fandom_docs[].keys", "step3_count.Corpus.count_docs"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step3_count.Corpus.count_docs"], ["", "def", "parse_dictionary", "(", "self", ")", ":", "\n", "\n", "# authors", "\n", "        ", "for", "a", "in", "self", ".", "dict_author_fandom_docs", ".", "keys", "(", ")", ":", "\n", "# fandom categories", "\n", "            ", "for", "f", "in", "self", ".", "dict_author_fandom_docs", "[", "a", "]", ".", "keys", "(", ")", ":", "\n", "# documents", "\n", "                ", "for", "doc", "in", "self", ".", "dict_author_fandom_docs", "[", "a", "]", "[", "f", "]", ":", "\n", "                    ", "self", ".", "count_docs", "(", "doc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step2_preprocess.Corpus.__init__": [[13, 21], ["spacy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dict_dataset", ")", ":", "\n", "\n", "# define tokenizer", "\n", "        ", "self", ".", "tokenizer", "=", "spacy", ".", "load", "(", "'en_core_web_lg'", ",", "disable", "=", "[", "'tagger'", ",", "'parser'", ",", "'ner'", "]", ")", "\n", "# raw dataset", "\n", "self", ".", "dict_dataset_raw", "=", "dict_dataset", "\n", "# tokenized", "\n", "self", ".", "dict_dataset_tokenized", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step2_preprocess.Corpus.preprocess_doc": [[25, 49], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "list", "doc_new.strip", "step2_preprocess.Corpus.tokenizer"], "methods", ["None"], ["", "def", "preprocess_doc", "(", "self", ",", "doc", ")", ":", "\n", "\n", "        ", "doc", "=", "re", ".", "sub", "(", "'\\\"'", ",", "'\\''", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "'\\'\\'+'", ",", "' \\' \\' '", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "'--+'", ",", "' -- '", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "'\\.\\.+'", ",", "' .. '", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "'!!+'", ",", "' !! '", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "',,+'", ",", "' ,, '", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "',\\''", ",", "', \\''", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "',~~+'", ",", "' ~~ '", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "'/\\\\/\\\\+'", ",", "' /\\\\/\\\\ '", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "\"((.)\\\\2{2})\\\\2+\"", ",", "r\"\\1\"", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "r\"([a-zA-Z])([!?\\-:,])([a-zA-Z])\"", ",", "r\"\\1 \\2 \\3\"", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "r\"([a-zA-Z])([!?.\\-:,\\(\\)])\"", ",", "r\"\\1 \\2\"", ",", "doc", ")", "\n", "doc", "=", "re", ".", "sub", "(", "r\"([!?.\\-:,\\(\\)])([a-zA-Z])\"", ",", "r\"\\1 \\2\"", ",", "doc", ")", "\n", "\n", "# tokenize doc", "\n", "tokens", "=", "list", "(", "self", ".", "tokenizer", "(", "doc", ")", ")", "\n", "\n", "doc_new", "=", "\"\"", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "doc_new", "+=", "token", ".", "text", "+", "\" \"", "\n", "\n", "", "return", "doc_new", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step2_preprocess.Corpus.parse_dictionary": [[53, 69], ["step2_preprocess.Corpus.dict_dataset_raw.keys", "step2_preprocess.Corpus.dict_dataset_raw[].keys", "enumerate", "step2_preprocess.Corpus.preprocess_doc", "len", "[].append", "step2_preprocess.Corpus.split"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step2_preprocess.Corpus.preprocess_doc"], ["", "def", "parse_dictionary", "(", "self", ")", ":", "\n", "\n", "# authors", "\n", "        ", "for", "a", "in", "self", ".", "dict_dataset_raw", ".", "keys", "(", ")", ":", "\n", "# fandom categories", "\n", "            ", "for", "f", "in", "self", ".", "dict_dataset_raw", "[", "a", "]", ".", "keys", "(", ")", ":", "\n", "# documents", "\n", "                ", "for", "i", ",", "doc", "in", "enumerate", "(", "self", ".", "dict_dataset_raw", "[", "a", "]", "[", "f", "]", ")", ":", "\n", "                    ", "doc_tokenized", "=", "self", ".", "preprocess_doc", "(", "doc", ")", "\n", "# remove short broken documents", "\n", "if", "len", "(", "doc_tokenized", ".", "split", "(", ")", ")", ">=", "100", ":", "\n", "                        ", "if", "a", "not", "in", "self", ".", "dict_dataset_tokenized", ":", "\n", "                            ", "self", ".", "dict_dataset_tokenized", "[", "a", "]", "=", "{", "}", "\n", "", "if", "f", "not", "in", "self", ".", "dict_dataset_tokenized", "[", "a", "]", ":", "\n", "                            ", "self", ".", "dict_dataset_tokenized", "[", "a", "]", "[", "f", "]", "=", "[", "]", "\n", "", "self", ".", "dict_dataset_tokenized", "[", "a", "]", "[", "f", "]", ".", "append", "(", "doc_tokenized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step1_parse_and_split.Corpus.__init__": [[23, 53], ["set", "set", "set", "set", "set", "set", "set", "set", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "# dictionary with all documents", "\n", "        ", "self", ".", "dict_author_fandom_doc", "=", "{", "}", "\n", "\n", "# sets with unique authors/fandoms/docs", "\n", "self", ".", "authors", "=", "set", "(", ")", "\n", "self", ".", "fandoms", "=", "set", "(", ")", "\n", "self", ".", "unique_docs", "=", "set", "(", ")", "\n", "\n", "# author/fandom sets for training set (train DML, BFS, UAL)", "\n", "self", ".", "authors_train", "=", "set", "(", ")", "\n", "self", ".", "fandoms_train", "=", "set", "(", ")", "\n", "# author/fandom sets for calibration set (train O2D2)", "\n", "self", ".", "authors_cal", "=", "set", "(", ")", "\n", "self", ".", "fandoms_cal", "=", "set", "(", ")", "\n", "# author/fandom sets for validation set (check results)", "\n", "self", ".", "authors_val", "=", "set", "(", ")", "\n", "self", ".", "fandoms_val", "=", "set", "(", ")", "\n", "\n", "# dictionaries for the splits", "\n", "self", ".", "dict_author_fandom_doc_train", "=", "{", "}", "\n", "self", ".", "dict_author_fandom_doc_cal", "=", "{", "}", "\n", "self", ".", "dict_author_fandom_doc_val", "=", "{", "}", "\n", "\n", "# counts", "\n", "self", ".", "n_train", "=", "0", "\n", "self", ".", "n_cal", "=", "0", "\n", "self", ".", "n_val", "=", "0", "\n", "self", ".", "n_dropped", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step1_parse_and_split.Corpus.parse_raw_data": [[57, 88], ["range", "open", "f.readlines", "open", "f.readlines", "len", "range", "json.loads", "json.loads", "lines_pairs[].strip", "lines_labels[].strip", "step1_parse_and_split.Corpus.unique_docs.add", "step1_parse_and_split.Corpus.authors.add", "step1_parse_and_split.Corpus.fandoms.add", "[].append", "step1_parse_and_split.Corpus.dict_author_fandom_doc.keys", "step1_parse_and_split.Corpus.dict_author_fandom_doc[].keys"], "methods", ["None"], ["", "def", "parse_raw_data", "(", "self", ",", "dir_pairs", ",", "dir_labels", ")", ":", "\n", "\n", "# open json files", "\n", "        ", "with", "open", "(", "dir_pairs", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines_pairs", "=", "f", ".", "readlines", "(", ")", "\n", "", "with", "open", "(", "dir_labels", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines_labels", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "for", "n", "in", "range", "(", "len", "(", "lines_pairs", ")", ")", ":", "\n", "\n", "            ", "pair", ",", "label", "=", "json", ".", "loads", "(", "lines_pairs", "[", "n", "]", ".", "strip", "(", ")", ")", ",", "json", ".", "loads", "(", "lines_labels", "[", "n", "]", ".", "strip", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "\n", "# get author-ID, fandom, fanfiction", "\n", "                ", "author", "=", "label", "[", "'authors'", "]", "[", "i", "]", "\n", "fandom", "=", "pair", "[", "'fandoms'", "]", "[", "i", "]", "\n", "doc", "=", "pair", "[", "'pair'", "]", "[", "i", "]", "\n", "\n", "# remove \"broken\" or very short documents", "\n", "if", "doc", "not", "in", "self", ".", "unique_docs", ":", "\n", "\n", "                    ", "self", ".", "unique_docs", ".", "add", "(", "doc", ")", "\n", "self", ".", "authors", ".", "add", "(", "author", ")", "\n", "self", ".", "fandoms", ".", "add", "(", "fandom", ")", "\n", "\n", "if", "author", "not", "in", "self", ".", "dict_author_fandom_doc", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "dict_author_fandom_doc", "[", "author", "]", "=", "{", "}", "\n", "", "if", "fandom", "not", "in", "self", ".", "dict_author_fandom_doc", "[", "author", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "dict_author_fandom_doc", "[", "author", "]", "[", "fandom", "]", "=", "[", "]", "\n", "", "self", ".", "dict_author_fandom_doc", "[", "author", "]", "[", "fandom", "]", ".", "append", "(", "doc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step1_parse_and_split.Corpus.split_data": [[92, 200], ["list", "sklearn.utils.shuffle", "int", "sklearn.utils.shuffle", "int", "set", "set", "set", "step1_parse_and_split.Corpus.dict_author_fandom_doc[].keys", "len", "len", "set.add", "set.add", "set.add", "random.uniform", "set.remove", "set.remove", "len", "step1_parse_and_split.Corpus.authors_cal.add", "step1_parse_and_split.Corpus.fandoms_cal.add", "random.uniform", "set.remove", "set.remove", "random.uniform", "set.remove", "set.remove", "step1_parse_and_split.Corpus.dict_author_fandom_doc_cal.keys", "len", "step1_parse_and_split.Corpus.authors_val.add", "step1_parse_and_split.Corpus.fandoms_val.add", "step1_parse_and_split.Corpus.dict_author_fandom_doc_val.keys", "len", "step1_parse_and_split.Corpus.authors_train.add", "step1_parse_and_split.Corpus.fandoms_train.add", "len", "step1_parse_and_split.Corpus.dict_author_fandom_doc_train.keys"], "methods", ["None"], ["", "", "", "", "def", "split_data", "(", "self", ")", ":", "\n", "\n", "#########################", "\n", "# step 0: shuffle fandoms", "\n", "#########################", "\n", "        ", "fandoms", "=", "list", "(", "self", ".", "fandoms", ")", "\n", "fandoms", "=", "shuffle", "(", "fandoms", ")", "\n", "\n", "##################################################", "\n", "# step 1: split fandoms into three disjoint groups", "\n", "##################################################", "\n", "# make fandom list for train set", "\n", "n", "=", "int", "(", "0.75", "*", "len", "(", "fandoms", ")", ")", "\n", "fandoms_train", "=", "fandoms", "[", ":", "n", "]", "\n", "fandoms", "=", "shuffle", "(", "fandoms", "[", "n", ":", "]", ")", "\n", "\n", "# make fandom list for calibration/validation sets", "\n", "n", "=", "int", "(", "0.5", "*", "len", "(", "fandoms", ")", ")", "\n", "fandoms_cal", "=", "fandoms", "[", ":", "n", "]", "\n", "fandoms_val", "=", "fandoms", "[", "n", ":", "]", "\n", "\n", "##########################################################", "\n", "# step 2: add authors to the groups (includes overlapping)", "\n", "##########################################################", "\n", "authors_train", "=", "set", "(", ")", "\n", "authors_cal", "=", "set", "(", ")", "\n", "authors_val", "=", "set", "(", ")", "\n", "\n", "for", "a", "in", "self", ".", "authors", ":", "\n", "            ", "for", "f", "in", "self", ".", "dict_author_fandom_doc", "[", "a", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "f", "in", "fandoms_train", ":", "\n", "                    ", "authors_train", ".", "add", "(", "a", ")", "\n", "", "if", "f", "in", "fandoms_cal", ":", "\n", "                    ", "authors_cal", ".", "add", "(", "a", ")", "\n", "", "if", "f", "in", "fandoms_val", ":", "\n", "                    ", "authors_val", ".", "add", "(", "a", ")", "\n", "\n", "################################################", "\n", "# step 3: make disjoint groups w.r.t. authorship", "\n", "################################################", "\n", "", "", "", "for", "a", "in", "self", ".", "authors", ":", "\n", "\n", "# make cal/val sets disjoint", "\n", "            ", "if", "a", "in", "authors_cal", "and", "a", "in", "authors_val", ":", "\n", "                ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "0.5", ":", "\n", "                    ", "authors_cal", ".", "remove", "(", "a", ")", "\n", "", "else", ":", "\n", "                    ", "authors_val", ".", "remove", "(", "a", ")", "\n", "\n", "# make train/cal and train/cal sets disjoint", "\n", "", "", "if", "a", "in", "authors_train", ":", "\n", "\n", "                ", "if", "a", "in", "authors_cal", ":", "\n", "                    ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "0.5", ":", "\n", "                        ", "authors_cal", ".", "remove", "(", "a", ")", "\n", "", "else", ":", "\n", "                        ", "authors_train", ".", "remove", "(", "a", ")", "\n", "\n", "", "", "if", "a", "in", "authors_val", ":", "\n", "                    ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "0.5", ":", "\n", "                        ", "authors_val", ".", "remove", "(", "a", ")", "\n", "", "else", ":", "\n", "                        ", "authors_train", ".", "remove", "(", "a", ")", "\n", "\n", "##############################", "\n", "# step 4: prepare dictionaries", "\n", "##############################", "\n", "", "", "", "", "for", "a", "in", "self", ".", "authors", ":", "\n", "            ", "for", "f", "in", "self", ".", "dict_author_fandom_doc", "[", "a", "]", ":", "\n", "\n", "#################", "\n", "# calibration set", "\n", "#################", "\n", "                ", "if", "a", "in", "authors_cal", "and", "f", "in", "fandoms_cal", ":", "\n", "                    ", "if", "a", "not", "in", "self", ".", "dict_author_fandom_doc_cal", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "dict_author_fandom_doc_cal", "[", "a", "]", "=", "{", "}", "\n", "", "self", ".", "dict_author_fandom_doc_cal", "[", "a", "]", "[", "f", "]", "=", "self", ".", "dict_author_fandom_doc", "[", "a", "]", "[", "f", "]", "\n", "self", ".", "n_cal", "+=", "len", "(", "self", ".", "dict_author_fandom_doc_cal", "[", "a", "]", "[", "f", "]", ")", "\n", "self", ".", "authors_cal", ".", "add", "(", "a", ")", "\n", "self", ".", "fandoms_cal", ".", "add", "(", "f", ")", "\n", "\n", "################", "\n", "# validation set", "\n", "################", "\n", "", "elif", "a", "in", "authors_val", "and", "f", "in", "fandoms_val", ":", "\n", "                    ", "if", "a", "not", "in", "self", ".", "dict_author_fandom_doc_val", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "dict_author_fandom_doc_val", "[", "a", "]", "=", "{", "}", "\n", "", "self", ".", "dict_author_fandom_doc_val", "[", "a", "]", "[", "f", "]", "=", "self", ".", "dict_author_fandom_doc", "[", "a", "]", "[", "f", "]", "\n", "self", ".", "n_val", "+=", "len", "(", "self", ".", "dict_author_fandom_doc_val", "[", "a", "]", "[", "f", "]", ")", "\n", "self", ".", "authors_val", ".", "add", "(", "a", ")", "\n", "self", ".", "fandoms_val", ".", "add", "(", "f", ")", "\n", "\n", "###########", "\n", "# train set", "\n", "###########", "\n", "", "elif", "a", "in", "authors_train", "and", "f", "in", "fandoms_train", ":", "\n", "                    ", "if", "a", "not", "in", "self", ".", "dict_author_fandom_doc_train", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "dict_author_fandom_doc_train", "[", "a", "]", "=", "{", "}", "\n", "", "self", ".", "dict_author_fandom_doc_train", "[", "a", "]", "[", "f", "]", "=", "self", ".", "dict_author_fandom_doc", "[", "a", "]", "[", "f", "]", "\n", "self", ".", "n_train", "+=", "len", "(", "self", ".", "dict_author_fandom_doc_train", "[", "a", "]", "[", "f", "]", ")", "\n", "self", ".", "authors_train", ".", "add", "(", "a", ")", "\n", "self", ".", "fandoms_train", ".", "add", "(", "f", ")", "\n", "\n", "###################", "\n", "# dropped documents", "\n", "###################", "\n", "", "else", ":", "\n", "                    ", "self", ".", "n_dropped", "+=", "len", "(", "self", ".", "dict_author_fandom_doc", "[", "a", "]", "[", "f", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.preprocessing.step1_parse_and_split.parse": [[12, 16], ["open", "json.loads", "l.strip"], "function", ["None"], ["def", "parse", "(", "path", ")", ":", "\n", "    ", "g", "=", "open", "(", "path", ",", "'r'", ")", "\n", "for", "l", "in", "g", ":", "\n", "        ", "yield", "json", ".", "loads", "(", "l", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.__init__": [[48, 144], ["tensorflow.reset_default_graph", "adhominem_o2d2.AdHominem_O2D2.initialize_placeholders", "adhominem_o2d2.AdHominem_O2D2.initialize_parameters", "adhominem_o2d2.AdHominem_O2D2.initialize_dropout", "adhominem_o2d2.AdHominem_O2D2.loss_o2d2", "adhominem_o2d2.AdHominem_O2D2.prepare_optimizer", "tensorflow.Session", "adhominem_o2d2.AdHominem_O2D2.sess.run", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "adhominem_o2d2.AdHominem_O2D2.feature_extraction", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.metric_layer", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.compute_kernel_distance", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.bfs_layer", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.ual_layer", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.o2d2", "adhominem_o2d2.AdHominem_O2D2.get_o2d2_labels", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_placeholders", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_parameters", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_dropout", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.loss_o2d2", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.prepare_optimizer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.feature_extraction", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.metric_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_kernel_distance", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bfs_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.ual_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.o2d2", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.get_o2d2_labels"], ["def", "__init__", "(", "self", ",", "hyper_parameters", ",", "theta_init", ",", "theta_E_init", ")", ":", "\n", "\n", "# reset graph", "\n", "        ", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "# hyper-parameters", "\n", "self", ".", "hyper_parameters", "=", "hyper_parameters", "\n", "\n", "# placeholders for input variables", "\n", "self", ".", "placeholders", ",", "self", ".", "thetas_E", "=", "self", ".", "initialize_placeholders", "(", "theta_E_init", ")", "\n", "\n", "# batch size", "\n", "self", ".", "B", "=", "tf", ".", "shape", "(", "self", ".", "placeholders", "[", "'e_w_L'", "]", ")", "[", "0", "]", "\n", "\n", "# trainable parameters", "\n", "self", ".", "theta", "=", "self", ".", "initialize_parameters", "(", "theta_init", ")", "\n", "# initialize dropout", "\n", "self", ".", "dropout", "=", "self", ".", "initialize_dropout", "(", ")", "\n", "\n", "##########################################", "\n", "# document embeddings (feature extraction)", "\n", "##########################################", "\n", "with", "tf", ".", "variable_scope", "(", "'feature_extraction_doc2vec'", ")", ":", "\n", "            ", "e_c", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'e_c_L'", "]", ",", "self", ".", "placeholders", "[", "'e_c_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "e_w", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'e_w_L'", "]", ",", "self", ".", "placeholders", "[", "'e_w_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "N_w", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'N_w_L'", "]", ",", "self", ".", "placeholders", "[", "'N_w_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "N_s", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'N_s_L'", "]", ",", "self", ".", "placeholders", "[", "'N_s_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "e_d", "=", "self", ".", "feature_extraction", "(", "e_c", ",", "e_w", ",", "N_w", ",", "N_s", ")", "\n", "\n", "############################", "\n", "# deep metric learning (DML)", "\n", "############################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'deep_metric_learning'", ")", ":", "\n", "            ", "self", ".", "lev_L", ",", "self", ".", "lev_R", "=", "self", ".", "metric_layer", "(", "e_d", "=", "e_d", ",", "\n", "theta", "=", "self", ".", "theta", "[", "'metric'", "]", ",", "\n", "dropout", "=", "self", ".", "dropout", "[", "'metric'", "]", ",", "\n", ")", "\n", "\n", "###################################################", "\n", "# kernel distance for probabilstic contrastive loss", "\n", "###################################################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Euclidean_distance_and_kernel_function'", ")", ":", "\n", "            ", "self", ".", "pred_dml", "=", "self", ".", "compute_kernel_distance", "(", "self", ".", "lev_L", ",", "self", ".", "lev_R", ",", "\n", "alpha", "=", "self", ".", "theta", "[", "\"loss_dml\"", "]", "[", "\"alpha\"", "]", ",", "\n", "beta", "=", "self", ".", "theta", "[", "\"loss_dml\"", "]", "[", "\"beta\"", "]", ",", "\n", ")", "\n", "\n", "##################################", "\n", "# Bayes factor scoring (BFS) layer", "\n", "##################################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Bayes_factor_scoring'", ")", ":", "\n", "            ", "self", ".", "pred_bfs", ",", "self", ".", "H_W", ",", "self", ".", "H_B", "=", "self", ".", "bfs_layer", "(", "lev_L", "=", "self", ".", "lev_L", ",", "\n", "lev_R", "=", "self", ".", "lev_R", ",", "\n", "theta_bfs_1", "=", "self", ".", "theta", "[", "'bfs_1'", "]", ",", "\n", "theta_bfs_2", "=", "self", ".", "theta", "[", "'bfs_2'", "]", ",", "\n", "dropout", "=", "self", ".", "dropout", "[", "'bfs'", "]", ",", "\n", ")", "\n", "\n", "####################################", "\n", "# uncertainty adaptation layer (UAL)", "\n", "####################################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'uncertainty_adaptation_layer'", ")", ":", "\n", "            ", "self", ".", "pred_ual", ",", "self", ".", "conf_matrix", "=", "self", ".", "ual_layer", "(", "theta", "=", "self", ".", "theta", "[", "'ual'", "]", ",", "\n", "dropout", "=", "self", ".", "dropout", "[", "'ual'", "]", ",", "\n", "pred_bfs", "=", "self", ".", "pred_bfs", ",", "\n", "lev_L", "=", "self", ".", "lev_L", ",", "\n", "lev_R", "=", "self", ".", "lev_R", ",", "\n", ")", "\n", "#####################################", "\n", "# out-of-distribution detector (O2D2)", "\n", "#####################################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'out_of_distribution_detector'", ")", ":", "\n", "            ", "self", ".", "logits", ",", "self", ".", "pred_o2d2", ",", "self", ".", "labels_hat_o2d2", "=", "self", ".", "o2d2", "(", "lev_L", "=", "self", ".", "lev_L", ",", "\n", "lev_R", "=", "self", ".", "lev_R", ",", "\n", "theta", "=", "self", ".", "theta", "[", "'o2d2'", "]", ",", "\n", "conf_matrix", "=", "self", ".", "conf_matrix", ",", "\n", ")", "\n", "self", ".", "labels_o2d2", "=", "self", ".", "get_o2d2_labels", "(", "pred_ual", "=", "self", ".", "pred_ual", "[", ":", ",", "1", "]", ",", "\n", "labels", "=", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "thr_0", "=", "self", ".", "hyper_parameters", "[", "'thr_0'", "]", ",", "\n", "thr_1", "=", "self", ".", "hyper_parameters", "[", "'thr_1'", "]", ",", "\n", ")", "\n", "##############################", "\n", "# loss functions and optimizer", "\n", "##############################", "\n", "# O2D2 loss", "\n", "", "self", ".", "loss", "=", "self", ".", "loss_o2d2", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "labels_o2d2", ")", "\n", "\n", "# optimizer", "\n", "self", ".", "optimizer", ",", "self", ".", "step", "=", "self", ".", "prepare_optimizer", "(", ")", "\n", "\n", "################", "\n", "# launch session", "\n", "################", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.prepare_optimizer": [[148, 161], ["tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.compute_gradients", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.clip_by_norm"], "methods", ["None"], ["", "def", "prepare_optimizer", "(", "self", ")", ":", "\n", "\n", "# global step counter", "\n", "        ", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ",", "trainable", "=", "False", ")", "\n", "# optimizer", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "placeholders", "[", "'lr'", "]", ")", "\n", "\n", "# local gradient normalization", "\n", "grads_and_vars", "=", "opt", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "clipped_grads_and_vars", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "5.0", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "]", "\n", "optimizer", "=", "opt", ".", "apply_gradients", "(", "clipped_grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "\n", "return", "optimizer", ",", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.loss_o2d2": [[165, 172], ["tensorflow.squeeze", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "loss_o2d2", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "\n", "        ", "logits", "=", "tf", ".", "squeeze", "(", "logits", ")", "\n", "loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.o2d2": [[173, 201], ["tensorflow.square", "tensorflow.square", "tensorflow.reshape", "tensorflow.concat", "tensorflow.layers.dropout", "tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh", "tensorflow.layers.dropout", "tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh", "tensorflow.layers.dropout", "tensorflow.nn.xw_plus_b", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.cast", "tensorflow.math.round", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "o2d2", "(", "self", ",", "lev_L", ",", "lev_R", ",", "conf_matrix", ",", "theta", ")", ":", "\n", "\n", "# input data", "\n", "        ", "y1", "=", "tf", ".", "square", "(", "lev_L", "-", "lev_R", ")", "\n", "y2", "=", "tf", ".", "square", "(", "lev_L", "+", "lev_R", ")", "\n", "y3", "=", "tf", ".", "reshape", "(", "conf_matrix", ",", "shape", "=", "[", "self", ".", "B", ",", "4", "]", ")", "\n", "y", "=", "tf", ".", "concat", "(", "[", "y1", ",", "y2", ",", "y3", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# layer 1", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "y", "=", "tf", ".", "layers", ".", "dropout", "(", "y", ",", "rate", "=", "self", ".", "hyper_parameters", "[", "'rate_o2d2'", "]", ",", "training", "=", "is_training", ")", "\n", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W1\"", "]", ",", "theta", "[", "\"b1\"", "]", ")", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "# layer 2", "\n", "y", "=", "tf", ".", "layers", ".", "dropout", "(", "y", ",", "rate", "=", "self", ".", "hyper_parameters", "[", "'rate_o2d2'", "]", ",", "training", "=", "is_training", ")", "\n", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W2\"", "]", ",", "theta", "[", "\"b2\"", "]", ")", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "# layer 3", "\n", "y", "=", "tf", ".", "layers", ".", "dropout", "(", "y", ",", "rate", "=", "self", ".", "hyper_parameters", "[", "'rate_o2d2'", "]", ",", "training", "=", "is_training", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W3\"", "]", ",", "theta", "[", "\"b3\"", "]", ")", "\n", "pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", "\n", "\n", "# shape = [B, 1]", "\n", "y_hat", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "round", "(", "tf", ".", "squeeze", "(", "pred", ")", ")", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "shape", "=", "[", "self", ".", "B", ",", "1", "]", ")", "\n", "\n", "return", "logits", ",", "pred", ",", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.get_o2d2_labels": [[202, 228], ["tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.abs", "tensorflow.where", "tensorflow.where", "tensorflow.multiply", "tensorflow.where", "tensorflow.math.round", "tensorflow.greater", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.less", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.cast", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "get_o2d2_labels", "(", "self", ",", "pred_ual", ",", "labels", ",", "thr_0", "=", "0.45", ",", "thr_1", "=", "0.55", ")", ":", "\n", "\n", "# estimated UAL labels", "\n", "        ", "labels_hat_ual", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "round", "(", "tf", ".", "squeeze", "(", "pred_ual", ")", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "thr_0", "=", "tf", ".", "constant", "(", "thr_0", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "thr_1", "=", "tf", ".", "constant", "(", "thr_1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# make O2D2 labels", "\n", "labels_o2d2", "=", "tf", ".", "abs", "(", "labels_hat_ual", "-", "labels", ")", "\n", "\n", "condition_0", "=", "tf", ".", "where", "(", "tf", ".", "greater", "(", "thr_0", ",", "pred_ual", ")", ",", "\n", "tf", ".", "zeros_like", "(", "pred_ual", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "ones_like", "(", "pred_ual", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", ")", "\n", "condition_1", "=", "tf", ".", "where", "(", "tf", ".", "less", "(", "thr_1", ",", "pred_ual", ")", ",", "\n", "tf", ".", "zeros_like", "(", "pred_ual", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "ones_like", "(", "pred_ual", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", ")", "\n", "condition", "=", "tf", ".", "multiply", "(", "condition_0", ",", "condition_1", ")", "\n", "\n", "labels_o2d2", "=", "tf", ".", "where", "(", "tf", ".", "cast", "(", "condition", ",", "dtype", "=", "tf", ".", "bool", ")", ",", "\n", "condition", ",", "\n", "labels_o2d2", ",", "\n", ")", "\n", "return", "labels_o2d2", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.ual_layer": [[232, 265], ["tensorflow.square", "tensorflow.cond", "tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh", "tensorflow.cond", "tensorflow.nn.xw_plus_b", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.equal", "tensorflow.equal", "tensorflow.matmul", "tensorflow.constant", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply", "tensorflow.subtract", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "ual_layer", "(", "self", ",", "theta", ",", "dropout", ",", "pred_bfs", ",", "lev_L", ",", "lev_R", ")", ":", "\n", "\n", "        ", "y", "=", "tf", ".", "square", "(", "lev_L", "-", "lev_R", ")", "\n", "\n", "# apply dropout", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "y", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout", "[", "'ual_1'", "]", ",", "y", ")", ",", "\n", "lambda", ":", "y", ",", "\n", ")", "\n", "\n", "# dense layer", "\n", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W1\"", "]", ",", "theta", "[", "\"b1\"", "]", ")", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "# apply dropout", "\n", "y", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout", "[", "'ual_2'", "]", ",", "y", ")", ",", "\n", "lambda", ":", "y", ",", "\n", ")", "\n", "\n", "# compute confusion matrix, shape = [B, 2 * 2]", "\n", "logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W2\"", "]", ",", "theta", "[", "\"b2\"", "]", ")", "\n", "# shape = [B, 2, 2]", "\n", "logits", "=", "tf", ".", "reshape", "(", "logits", ",", "shape", "=", "[", "-", "1", ",", "2", ",", "2", "]", ")", "\n", "\n", "conf_matrix", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "pred_bfs", "=", "tf", ".", "concat", "(", "[", "tf", ".", "subtract", "(", "1.0", ",", "pred_bfs", ")", ",", "pred_bfs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# uncertainty adaptation, shape = [B, 2, 2] --> [B, 2]", "\n", "pred_ual", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "conf_matrix", ",", "tf", ".", "expand_dims", "(", "pred_bfs", ",", "axis", "=", "2", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "pred_ual", ",", "conf_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.metric_layer": [[269, 288], ["tensorflow.concat", "tensorflow.cond", "tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh", "tensorflow.equal", "tensorflow.constant", "tensorflow.multiply"], "methods", ["None"], ["", "def", "metric_layer", "(", "self", ",", "e_d", ",", "dropout", ",", "theta", ")", ":", "\n", "\n", "        ", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "dropout_mask", "=", "tf", ".", "concat", "(", "[", "dropout", "[", "'metric_1'", "]", ",", "\n", "dropout", "[", "'metric_1'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "# apply dropout", "\n", "y", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_mask", ",", "e_d", ")", ",", "\n", "lambda", ":", "e_d", ",", "\n", ")", "\n", "\n", "# fully-connected layer", "\n", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "'W'", "]", ",", "theta", "[", "'b'", "]", ")", "\n", "# nonlinear output", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "return", "y", "[", ":", "self", ".", "B", ",", ":", "]", ",", "y", "[", "self", ".", "B", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.bfs_layer": [[292, 372], ["tensorflow.cond", "tensorflow.cond", "tensorflow.nn.xw_plus_b", "tensorflow.nn.xw_plus_b", "tensorflow.nn.relu", "tensorflow.nn.relu", "adhominem_o2d2.AdHominem_O2D2.bfs_layer.makeS"], "methods", ["None"], ["", "def", "bfs_layer", "(", "self", ",", "lev_L", ",", "lev_R", ",", "theta_bfs_1", ",", "theta_bfs_2", ",", "dropout", ")", ":", "\n", "\n", "        ", "def", "makeS", "(", "C", ",", "D", ")", ":", "\n", "            ", "diagC", "=", "tf", ".", "math", ".", "exp", "(", "tf", ".", "diag_part", "(", "C", ")", ")", "\n", "maskC", "=", "tf", ".", "ones_like", "(", "C", ")", "-", "tf", ".", "eye", "(", "D", ")", "\n", "maskC", "=", "tf", ".", "matrix_band_part", "(", "maskC", ",", "0", ",", "-", "1", ")", "\n", "C", "=", "tf", ".", "multiply", "(", "maskC", ",", "C", ")", "+", "tf", ".", "diag", "(", "diagC", ")", "\n", "S", "=", "tf", ".", "matmul", "(", "C", ",", "C", ",", "transpose_b", "=", "True", ")", "+", "1e-6", "*", "tf", ".", "eye", "(", "D", ")", "\n", "return", "S", "\n", "\n", "", "def", "bilinear_form", "(", "x1", ",", "X", ",", "x2", ")", ":", "\n", "# [None, D] x [D, D] = [None, D]", "\n", "            ", "x1X", "=", "tf", ".", "matmul", "(", "x1", ",", "X", ")", "\n", "# [None, 1, D] x [None, D, 1] = [None, 1, 1]", "\n", "x1X", "=", "tf", ".", "expand_dims", "(", "x1X", ",", "axis", "=", "2", ")", "\n", "x1Xx2", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "x2", ",", "axis", "=", "1", ")", ",", "x1X", ")", "\n", "# [None, 1]", "\n", "x1Xx2", "=", "tf", ".", "squeeze", "(", "x1Xx2", ",", "axis", "=", "2", ")", "\n", "return", "x1Xx2", "\n", "\n", "# apply dropout", "\n", "", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "x1", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout", "[", "'bfs_1'", "]", ",", "lev_L", ")", ",", "\n", "lambda", ":", "lev_L", ",", "\n", ")", "\n", "x2", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout", "[", "'bfs_1'", "]", ",", "lev_R", ")", ",", "\n", "lambda", ":", "lev_R", ",", "\n", ")", "\n", "\n", "# fully-connected layer", "\n", "x1", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "x1", ",", "\n", "theta_bfs_1", "[", "'W'", "]", ",", "\n", "theta_bfs_1", "[", "'b'", "]", ",", "\n", ")", "\n", "x2", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "x2", ",", "\n", "theta_bfs_1", "[", "'W'", "]", ",", "\n", "theta_bfs_1", "[", "'b'", "]", ",", "\n", ")", "\n", "x1", "=", "tf", ".", "nn", ".", "relu", "(", "x1", ")", "\n", "x2", "=", "tf", ".", "nn", ".", "relu", "(", "x2", ")", "\n", "\n", "# PLDA layer", "\n", "B", "=", "theta_bfs_2", "[", "'B'", "]", "\n", "B", "=", "makeS", "(", "B", ",", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", "\n", "W", "=", "theta_bfs_2", "[", "'W'", "]", "\n", "W", "=", "makeS", "(", "W", ",", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", "\n", "mu", "=", "theta_bfs_2", "[", "'mu'", "]", "\n", "\n", "A_tilde", "=", "tf", ".", "matrix_inverse", "(", "B", "+", "2", "*", "W", "+", "1e-6", "*", "tf", ".", "eye", "(", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", ")", "\n", "G_tilde", "=", "tf", ".", "matrix_inverse", "(", "B", "+", "W", "+", "1e-6", "*", "tf", ".", "eye", "(", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", ")", "\n", "\n", "B_mu", "=", "tf", ".", "matmul", "(", "B", ",", "mu", ")", "\n", "mu_B_mu", "=", "tf", ".", "matmul", "(", "mu", ",", "B_mu", ",", "transpose_a", "=", "True", ")", "\n", "W_AmG", "=", "tf", ".", "matmul", "(", "W", ",", "A_tilde", "-", "G_tilde", ",", "transpose_a", "=", "True", ")", "\n", "mu_B_Am2G", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "B_mu", ",", "A_tilde", "-", "2", "*", "G_tilde", ",", "transpose_a", "=", "True", ")", ",", "B_mu", ")", "\n", "\n", "A", "=", "0.5", "*", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "W", ",", "A_tilde", ",", "transpose_a", "=", "True", ")", ",", "W", ")", "\n", "G", "=", "0.5", "*", "tf", ".", "matmul", "(", "W_AmG", ",", "W", ")", "\n", "c", "=", "tf", ".", "matmul", "(", "W_AmG", ",", "B_mu", ")", "\n", "\n", "k_tilde", "=", "2", "*", "tf", ".", "linalg", ".", "logdet", "(", "G_tilde", ")", "-", "tf", ".", "linalg", ".", "logdet", "(", "B", ")", "-", "tf", ".", "linalg", ".", "logdet", "(", "A_tilde", ")", "+", "mu_B_mu", "\n", "k", "=", "k_tilde", "+", "0.5", "*", "mu_B_Am2G", "\n", "\n", "x1Ax2", "=", "bilinear_form", "(", "x1", ",", "A", ",", "x2", ")", "\n", "x2Ax1", "=", "bilinear_form", "(", "x2", ",", "A", ",", "x1", ")", "\n", "x1Gx1", "=", "bilinear_form", "(", "x1", ",", "G", ",", "x1", ")", "\n", "x2Gx2", "=", "bilinear_form", "(", "x2", ",", "G", ",", "x2", ")", "\n", "x1x2c", "=", "tf", ".", "matmul", "(", "tf", ".", "add", "(", "x1", ",", "x2", ")", ",", "c", ")", "\n", "\n", "score", "=", "x1Ax2", "+", "x2Ax1", "+", "x1Gx1", "+", "x2Gx2", "+", "x1x2c", "+", "k", "\n", "\n", "pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "score", ")", "\n", "\n", "# compute entropy", "\n", "H_W", "=", "tf", ".", "linalg", ".", "logdet", "(", "tf", ".", "matrix_inverse", "(", "W", ")", ")", "\n", "H_B", "=", "tf", ".", "linalg", ".", "logdet", "(", "tf", ".", "matrix_inverse", "(", "B", ")", ")", "\n", "\n", "return", "pred", ",", "H_W", ",", "H_B", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_placeholders": [[376, 486], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.variable_scope", "tensorflow.zeros", "tensorflow.Variable", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.zeros", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.concat"], "methods", ["None"], ["", "def", "initialize_placeholders", "(", "self", ",", "theta_E", ")", ":", "\n", "\n", "        ", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "D_c", "=", "self", ".", "hyper_parameters", "[", "'D_c'", "]", "\n", "D_w", "=", "self", ".", "hyper_parameters", "[", "'D_w'", "]", "\n", "\n", "# input character placeholder", "\n", "x_c_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", ",", "T_c", "]", ",", "\n", "name", "=", "'x_c_L'", ",", "\n", ")", "\n", "x_c_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", ",", "T_c", "]", ",", "\n", "name", "=", "'x_c_R'", ",", "\n", ")", "\n", "\n", "# initialize embedding matrix for characters", "\n", "with", "tf", ".", "variable_scope", "(", "'character_embedding_matrix'", ")", ":", "\n", "# <PAD> embedding", "\n", "            ", "E_c_0", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "D_c", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# trainable embeddings", "\n", "E_c_1", "=", "tf", ".", "Variable", "(", "theta_E", "[", "'E_c_1'", "]", ",", "\n", "name", "=", "'E_c_1'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "self", ".", "hyper_parameters", "[", "\"retrain_chr_emb\"", "]", ",", "\n", ")", "\n", "# concatenate zero-padding embedding + trained character embeddings", "\n", "E_c", "=", "tf", ".", "concat", "(", "[", "E_c_0", ",", "E_c_1", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# character embeddings, shape=[B, T_s, T_w, T_c, D_c]", "\n", "", "e_c_L", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_c", ",", "x_c_L", ")", "\n", "e_c_R", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_c", ",", "x_c_R", ")", "\n", "\n", "# word-based placeholder for two documents", "\n", "x_w_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", "]", ",", "name", "=", "'x_w_L'", ")", "\n", "x_w_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", "]", ",", "name", "=", "'x_w_R'", ")", "\n", "\n", "# true sentence / document lengths", "\n", "N_w_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", "]", ",", "name", "=", "'N_w_L'", ")", "\n", "N_w_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", "]", ",", "name", "=", "'N_w_R'", ")", "\n", "N_s_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'N_s_L'", ")", "\n", "N_s_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'N_s_R'", ")", "\n", "\n", "# matrix for word embeddings, shape=[len(V_w), D_w]", "\n", "with", "tf", ".", "variable_scope", "(", "'word_embedding_matrix'", ")", ":", "\n", "# <PAD> embedding", "\n", "            ", "E_w_0", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "D_w", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# <UNK> embedding", "\n", "E_w_1", "=", "tf", ".", "Variable", "(", "theta_E", "[", "'E_w_1'", "]", ",", "\n", "name", "=", "'E_w_1'", ",", "\n", "trainable", "=", "self", ".", "hyper_parameters", "[", "\"retrain_wrd_emb\"", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "# pre-trained word embedding", "\n", "E_w_2", "=", "tf", ".", "Variable", "(", "theta_E", "[", "'E_w_2'", "]", ",", "\n", "name", "=", "'E_w_2'", ",", "\n", "trainable", "=", "self", ".", "hyper_parameters", "[", "\"retrain_wrd_emb\"", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "# concatenate special-token embeddings + regular-token embeddings", "\n", "E_w", "=", "tf", ".", "concat", "(", "[", "E_w_0", ",", "E_w_1", ",", "E_w_2", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# word embeddings, shape=[B, T_s, T_w, D_w]", "\n", "", "e_w_L", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_w", ",", "x_w_L", ")", "\n", "e_w_R", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_w", ",", "x_w_R", ")", "\n", "\n", "####################", "\n", "# training variables", "\n", "####################", "\n", "# labels", "\n", "labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'labels'", ")", "\n", "# training mode (for dropout regularization)", "\n", "is_training", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ",", "name", "=", "'training_mode'", ")", "\n", "# learning rate", "\n", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "name", "=", "'lr'", ")", "\n", "\n", "#############", "\n", "# make tuples", "\n", "#############", "\n", "placeholders", "=", "{", "'x_c_L'", ":", "x_c_L", ",", "\n", "'x_c_R'", ":", "x_c_R", ",", "\n", "#", "\n", "'e_c_L'", ":", "e_c_L", ",", "\n", "'e_c_R'", ":", "e_c_R", ",", "\n", "#", "\n", "'x_w_L'", ":", "x_w_L", ",", "\n", "'x_w_R'", ":", "x_w_R", ",", "\n", "#", "\n", "'e_w_L'", ":", "e_w_L", ",", "\n", "'e_w_R'", ":", "e_w_R", ",", "\n", "#", "\n", "'N_w_L'", ":", "N_w_L", ",", "\n", "'N_w_R'", ":", "N_w_R", ",", "\n", "'N_s_L'", ":", "N_s_L", ",", "\n", "'N_s_R'", ":", "N_s_R", ",", "\n", "#", "\n", "'labels'", ":", "labels", ",", "\n", "#", "\n", "'is_training'", ":", "is_training", ",", "\n", "'lr'", ":", "lr", ",", "\n", "}", "\n", "\n", "thetas_E", "=", "{", "'E_c_1'", ":", "E_c_1", ",", "\n", "'E_w_1'", ":", "E_w_1", ",", "\n", "'E_w_2'", ":", "E_w_2", ",", "\n", "}", "\n", "\n", "return", "placeholders", ",", "thetas_E", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.feature_extraction": [[490, 503], ["tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.cnn_layer_cw", "tensorflow.variable_scope", "tensorflow.concat", "adhominem_o2d2.AdHominem_O2D2.bilstm_layer_ws", "adhominem_o2d2.AdHominem_O2D2.att_layer_ws", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.bilstm_layer_sd", "adhominem_o2d2.AdHominem_O2D2.att_layer_sd"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.cnn_layer_cw", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_layer_ws", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.att_layer_ws", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_layer_sd", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.att_layer_sd"], ["", "def", "feature_extraction", "(", "self", ",", "e_c", ",", "e_w", ",", "N_w", ",", "N_s", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'characters_to_word_encoding'", ")", ":", "\n", "            ", "r_c", "=", "self", ".", "cnn_layer_cw", "(", "e_c", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'words_to_sentence_encoding'", ")", ":", "\n", "            ", "e_cw", "=", "tf", ".", "concat", "(", "[", "e_w", ",", "r_c", "]", ",", "axis", "=", "3", ")", "\n", "h_w", "=", "self", ".", "bilstm_layer_ws", "(", "e_cw", ",", "N_w", ")", "\n", "e_s", "=", "self", ".", "att_layer_ws", "(", "h_w", ",", "N_w", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sentences_to_document_encoding'", ")", ":", "\n", "            ", "h_s", "=", "self", ".", "bilstm_layer_sd", "(", "e_s", ",", "N_s", ")", "\n", "e_d", "=", "self", ".", "att_layer_sd", "(", "h_s", ",", "N_s", ")", "\n", "\n", "", "return", "e_d", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.compute_kernel_distance": [[507, 519], ["tensorflow.subtract", "tensorflow.math.pow", "tensorflow.math.exp", "tensorflow.square", "tensorflow.reduce_sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_kernel_distance", "(", "lev_L", ",", "lev_R", ",", "alpha", ",", "beta", ")", ":", "\n", "# define euclidean distance, shape = (B, D_h)", "\n", "        ", "distance", "=", "tf", ".", "subtract", "(", "lev_L", ",", "lev_R", ")", "\n", "distance", "=", "tf", ".", "square", "(", "distance", ")", "+", "1e-8", "\n", "# shape = (B, 1)", "\n", "distance", "=", "tf", ".", "reduce_sum", "(", "distance", ",", "1", ",", "keepdims", "=", "True", ")", "+", "1e-8", "\n", "# kernel", "\n", "pred", "=", "tf", ".", "math", ".", "pow", "(", "x", "=", "distance", ",", "y", "=", "beta", ")", "\n", "pred", "=", "tf", ".", "math", ".", "exp", "(", "-", "alpha", "*", "pred", ")", "\n", "pred", "=", "pred", "+", "1e-8", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.cnn_layer_cw": [[523, 579], ["tensorflow.concat", "tensorflow.reshape", "tensorflow.cond", "tensorflow.pad", "tensorflow.nn.conv1d", "tensorflow.nn.bias_add", "tensorflow.nn.tanh", "tensorflow.expand_dims", "tensorflow.nn.max_pool", "tensorflow.squeeze", "tensorflow.reshape", "tensorflow.equal", "tensorflow.constant", "tensorflow.constant", "tensorflow.multiply"], "methods", ["None"], ["", "def", "cnn_layer_cw", "(", "self", ",", "e_c", ")", ":", "\n", "\n", "        ", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "h", "=", "self", ".", "hyper_parameters", "[", "'w'", "]", "\n", "D_c", "=", "self", ".", "hyper_parameters", "[", "'D_c'", "]", "\n", "D_r", "=", "self", ".", "hyper_parameters", "[", "'D_r'", "]", "\n", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "dropout_mask", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'cnn'", "]", ",", "\n", "self", ".", "dropout", "[", "'cnn'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "# dropout and zero-padding", "\n", "# reshape: [B, T_s, T_w, T_c, D_c] --> [B * T_s * T_w, T_c, D_c]", "\n", "e_c", "=", "tf", ".", "reshape", "(", "e_c", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "T_c", ",", "D_c", "]", ")", "\n", "# dropout", "\n", "e_c", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_mask", ",", "e_c", ")", ",", "\n", "lambda", ":", "e_c", ",", "\n", ")", "\n", "# zero-padding, shape = [B * T_s * T_w, T_c + 2 * (h-1), D_c]", "\n", "e_c", "=", "tf", ".", "pad", "(", "e_c", ",", "\n", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "h", "-", "1", ",", "h", "-", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", ",", "\n", "mode", "=", "'CONSTANT'", ",", "\n", ")", "\n", "\n", "# 1D convolution", "\n", "# shape = [B * T_s * T_w, T_c + 2 * (h-1) - h + 1, D_r] = [B * T_s * T_w, T_c + h - 1, D_r]", "\n", "r_c", "=", "tf", ".", "nn", ".", "conv1d", "(", "e_c", ",", "\n", "self", ".", "theta", "[", "'cnn'", "]", "[", "'W'", "]", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "'chraracter_1D_cnn'", ",", "\n", ")", "\n", "# apply bias term", "\n", "r_c", "=", "tf", ".", "nn", ".", "bias_add", "(", "r_c", ",", "self", ".", "theta", "[", "'cnn'", "]", "[", "'b'", "]", ")", "\n", "# apply nonlinear function", "\n", "r_c", "=", "tf", ".", "nn", ".", "tanh", "(", "r_c", ")", "\n", "\n", "# max-over-time pooling", "\n", "# shape = [B * T_s * T_w, T_c + h - 1, D_r, 1]", "\n", "r_c", "=", "tf", ".", "expand_dims", "(", "r_c", ",", "3", ")", "\n", "# max-over-time-pooling, shape = [B * T_s * T_w, 1, D_r, 1]", "\n", "r_c", "=", "tf", ".", "nn", ".", "max_pool", "(", "r_c", ",", "\n", "ksize", "=", "[", "1", ",", "T_c", "+", "h", "-", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", ")", "\n", "# shape = [B * T_s * T_w, D_r]", "\n", "r_c", "=", "tf", ".", "squeeze", "(", "r_c", ")", "\n", "#  shape = [B, T_s, T_w, D_r]", "\n", "r_c", "=", "tf", ".", "reshape", "(", "r_c", ",", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "T_w", ",", "D_r", "]", ")", "\n", "\n", "return", "r_c", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.bilstm_layer_ws": [[583, 628], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reverse_sequence", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.constant", "tensorflow.tile", "tensorflow.scan", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reverse_sequence", "tensorflow.concat", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "bilstm_layer_ws", "(", "self", ",", "e_w_f", ",", "N_w", ")", ":", "\n", "\n", "        ", "D_w", "=", "self", ".", "hyper_parameters", "[", "'D_w'", "]", "\n", "D_r", "=", "self", ".", "hyper_parameters", "[", "'D_r'", "]", "\n", "D_s", "=", "self", ".", "hyper_parameters", "[", "'D_s'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# reshape N_w, shape = [B * T_s]", "\n", "N_w", "=", "tf", ".", "reshape", "(", "N_w", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "]", ")", "\n", "# reshape input word embeddings, shape = [B * T_s, T_w, D_w + D_r]", "\n", "e_w_f", "=", "tf", ".", "reshape", "(", "e_w_f", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "T_w", ",", "D_w", "+", "D_r", "]", ")", "\n", "# reverse input sentences", "\n", "e_w_b", "=", "tf", ".", "reverse_sequence", "(", "e_w_f", ",", "seq_lengths", "=", "N_w", ",", "seq_axis", "=", "1", ")", "\n", "\n", "h_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "h_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "t_0", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "N_w_t", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "N_w", ",", "axis", "=", "1", ")", ",", "tf", ".", "constant", "(", "[", "1", ",", "T_w", "]", ",", "tf", ".", "int32", ")", ")", "\n", "\n", "states", "=", "tf", ".", "scan", "(", "self", ".", "bilstm_cell_ws", ",", "\n", "[", "tf", ".", "transpose", "(", "e_w_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "e_w_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "N_w_t", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "]", ",", "\n", "initializer", "=", "[", "h_0_f", ",", "h_0_b", ",", "c_0_f", ",", "c_0_b", ",", "t_0", "]", ",", "\n", "name", "=", "'lstm_ws_layer'", ",", "\n", ")", "\n", "\n", "h_f", "=", "states", "[", "0", "]", "\n", "h_b", "=", "states", "[", "1", "]", "\n", "h_f", "=", "tf", ".", "transpose", "(", "h_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "h_b", "=", "tf", ".", "transpose", "(", "h_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# reverse again backward state", "\n", "h_b", "=", "tf", ".", "reverse_sequence", "(", "h_b", ",", "seq_lengths", "=", "N_w", ",", "seq_axis", "=", "1", ")", "\n", "\n", "# concatenate hidden states, shape=[2 * B * T_s, T_w, 2 * D_s]", "\n", "h", "=", "tf", ".", "concat", "(", "[", "h_f", ",", "h_b", "]", ",", "axis", "=", "2", ")", "\n", "# reshape input word embeddings, shape = [2 * B, T_s, T_w, 2 * D_s]", "\n", "h", "=", "tf", ".", "reshape", "(", "h", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.bilstm_cell_ws": [[632, 666], ["adhominem_o2d2.AdHominem_O2D2.lstm_cell", "adhominem_o2d2.AdHominem_O2D2.lstm_cell", "tensorflow.less", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.add"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell"], ["", "def", "bilstm_cell_ws", "(", "self", ",", "prev", ",", "input", ")", ":", "\n", "\n", "# input parameters", "\n", "        ", "h_prev_f", "=", "prev", "[", "0", "]", "\n", "h_prev_b", "=", "prev", "[", "1", "]", "\n", "c_prev_f", "=", "prev", "[", "2", "]", "\n", "c_prev_b", "=", "prev", "[", "3", "]", "\n", "t", "=", "prev", "[", "4", "]", "\n", "\n", "e_w_f", "=", "input", "[", "0", "]", "\n", "e_w_b", "=", "input", "[", "1", "]", "\n", "N_w", "=", "input", "[", "2", "]", "\n", "\n", "# compute next forward states", "\n", "h_next_f", ",", "c_next_f", "=", "self", ".", "lstm_cell", "(", "e_w_f", ",", "h_prev_f", ",", "c_prev_f", ",", "\n", "self", ".", "theta", "[", "'lstm_ws_forward'", "]", ",", "\n", "self", ".", "dropout", "[", "'lstm_ws_forward'", "]", ",", "\n", ")", "\n", "# compute next backward states", "\n", "h_next_b", ",", "c_next_b", "=", "self", ".", "lstm_cell", "(", "e_w_b", ",", "h_prev_b", ",", "c_prev_b", ",", "\n", "self", ".", "theta", "[", "'lstm_ws_backward'", "]", ",", "\n", "self", ".", "dropout", "[", "'lstm_ws_backward'", "]", ",", "\n", ")", "\n", "\n", "# t < T", "\n", "condition", "=", "tf", ".", "less", "(", "t", ",", "N_w", ")", "\n", "\n", "# copy-through states if t > T", "\n", "h_next_f", "=", "tf", ".", "where", "(", "condition", ",", "h_next_f", ",", "h_prev_f", ")", "\n", "c_next_f", "=", "tf", ".", "where", "(", "condition", ",", "c_next_f", ",", "c_prev_f", ")", "\n", "h_next_b", "=", "tf", ".", "where", "(", "condition", ",", "h_next_b", ",", "h_prev_b", ")", "\n", "c_next_b", "=", "tf", ".", "where", "(", "condition", ",", "c_next_b", ",", "c_prev_b", ")", "\n", "\n", "return", "[", "h_next_f", ",", "h_next_b", ",", "c_next_f", ",", "c_next_b", ",", "tf", ".", "add", "(", "t", ",", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.bilstm_layer_sd": [[670, 706], ["tensorflow.reverse_sequence", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.constant", "tensorflow.tile", "tensorflow.scan", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reverse_sequence", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "bilstm_layer_sd", "(", "self", ",", "e_s_f", ",", "N_s", ")", ":", "\n", "\n", "        ", "D_d", "=", "self", ".", "hyper_parameters", "[", "'D_d'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# reverse input sentences", "\n", "e_s_b", "=", "tf", ".", "reverse_sequence", "(", "e_s_f", ",", "seq_lengths", "=", "N_s", ",", "seq_axis", "=", "1", ")", "\n", "\n", "h_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "h_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "t_0", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "N_s_t", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "N_s", ",", "axis", "=", "1", ")", ",", "tf", ".", "constant", "(", "[", "1", ",", "T_s", "]", ",", "tf", ".", "int32", ")", ")", "\n", "\n", "states", "=", "tf", ".", "scan", "(", "self", ".", "bilstm_cell_sd", ",", "\n", "[", "tf", ".", "transpose", "(", "e_s_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "e_s_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "N_s_t", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "]", ",", "\n", "initializer", "=", "[", "h_0_f", ",", "h_0_b", ",", "c_0_f", ",", "c_0_b", ",", "t_0", "]", ",", "\n", "name", "=", "'lstm_sd_layer'", ",", "\n", ")", "\n", "\n", "h_f", "=", "states", "[", "0", "]", "\n", "h_b", "=", "states", "[", "1", "]", "\n", "h_f", "=", "tf", ".", "transpose", "(", "h_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "h_b", "=", "tf", ".", "transpose", "(", "h_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# reverse again backward state", "\n", "h_b", "=", "tf", ".", "reverse_sequence", "(", "h_b", ",", "seq_lengths", "=", "N_s", ",", "seq_axis", "=", "1", ")", "\n", "\n", "# concatenate hidden states, shape=[2 * B, T_s, 2 * D_d]", "\n", "h", "=", "tf", ".", "concat", "(", "[", "h_f", ",", "h_b", "]", ",", "axis", "=", "2", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.bilstm_cell_sd": [[710, 744], ["adhominem_o2d2.AdHominem_O2D2.lstm_cell", "adhominem_o2d2.AdHominem_O2D2.lstm_cell", "tensorflow.less", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.add"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell"], ["", "def", "bilstm_cell_sd", "(", "self", ",", "prev", ",", "input", ")", ":", "\n", "\n", "# input parameters", "\n", "        ", "h_prev_f", "=", "prev", "[", "0", "]", "\n", "h_prev_b", "=", "prev", "[", "1", "]", "\n", "c_prev_f", "=", "prev", "[", "2", "]", "\n", "c_prev_b", "=", "prev", "[", "3", "]", "\n", "t", "=", "prev", "[", "4", "]", "\n", "\n", "e_s_f", "=", "input", "[", "0", "]", "\n", "e_s_b", "=", "input", "[", "1", "]", "\n", "N_s", "=", "input", "[", "2", "]", "\n", "\n", "# compute next forward states", "\n", "h_next_f", ",", "c_next_f", "=", "self", ".", "lstm_cell", "(", "e_s_f", ",", "h_prev_f", ",", "c_prev_f", ",", "\n", "self", ".", "theta", "[", "'lstm_sd_forward'", "]", ",", "\n", "self", ".", "dropout", "[", "'lstm_sd_forward'", "]", ",", "\n", ")", "\n", "# compute next backward states", "\n", "h_next_b", ",", "c_next_b", "=", "self", ".", "lstm_cell", "(", "e_s_b", ",", "h_prev_b", ",", "c_prev_b", ",", "\n", "self", ".", "theta", "[", "'lstm_sd_backward'", "]", ",", "\n", "self", ".", "dropout", "[", "'lstm_sd_backward'", "]", ",", "\n", ")", "\n", "\n", "# t < T", "\n", "condition", "=", "tf", ".", "less", "(", "t", ",", "N_s", ")", "\n", "\n", "# copy-through states if t > T", "\n", "h_next_f", "=", "tf", ".", "where", "(", "condition", ",", "h_next_f", ",", "h_prev_f", ")", "\n", "c_next_f", "=", "tf", ".", "where", "(", "condition", ",", "c_next_f", ",", "c_prev_f", ")", "\n", "h_next_b", "=", "tf", ".", "where", "(", "condition", ",", "h_next_b", ",", "h_prev_b", ")", "\n", "c_next_b", "=", "tf", ".", "where", "(", "condition", ",", "c_next_b", ",", "c_prev_b", ")", "\n", "\n", "return", "[", "h_next_f", ",", "h_next_b", ",", "c_next_f", ",", "c_next_b", ",", "tf", ".", "add", "(", "t", ",", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.lstm_cell": [[748, 794], ["tensorflow.concat", "tensorflow.concat", "tensorflow.cond", "tensorflow.cond", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.tanh", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.equal", "tensorflow.equal", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.tanh", "tensorflow.constant", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "lstm_cell", "(", "self", ",", "e_w", ",", "h_prev", ",", "c_prev", ",", "params", ",", "dropout", ")", ":", "\n", "\n", "        ", "dropout_x", "=", "tf", ".", "concat", "(", "[", "dropout", "[", "'x'", "]", ",", "\n", "dropout", "[", "'x'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "dropout_h", "=", "tf", ".", "concat", "(", "[", "dropout", "[", "'h'", "]", ",", "\n", "dropout", "[", "'h'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "W_i", "=", "params", "[", "'W_i'", "]", "\n", "U_i", "=", "params", "[", "'U_i'", "]", "\n", "b_i", "=", "params", "[", "'b_i'", "]", "\n", "W_f", "=", "params", "[", "'W_f'", "]", "\n", "U_f", "=", "params", "[", "'U_f'", "]", "\n", "b_f", "=", "params", "[", "'b_f'", "]", "\n", "W_o", "=", "params", "[", "'W_o'", "]", "\n", "U_o", "=", "params", "[", "'U_o'", "]", "\n", "b_o", "=", "params", "[", "'b_o'", "]", "\n", "W_c", "=", "params", "[", "'W_c'", "]", "\n", "U_c", "=", "params", "[", "'U_c'", "]", "\n", "b_c", "=", "params", "[", "'b_c'", "]", "\n", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "\n", "e_w", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_x", ",", "e_w", ")", ",", "\n", "lambda", ":", "e_w", ",", "\n", ")", "\n", "h_prev", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_h", ",", "h_prev", ")", ",", "\n", "lambda", ":", "h_prev", ",", "\n", ")", "\n", "# forget", "\n", "i_t", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_i", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_i", ")", "+", "b_i", ")", "\n", "# input", "\n", "f_t", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_f", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_f", ")", "+", "b_f", ")", "\n", "# new memory", "\n", "c_tilde", "=", "tf", ".", "tanh", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_c", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_c", ")", "+", "b_c", ")", "\n", "# final memory", "\n", "c_next", "=", "tf", ".", "multiply", "(", "i_t", ",", "c_tilde", ")", "+", "tf", ".", "multiply", "(", "f_t", ",", "c_prev", ")", "\n", "# output", "\n", "o_t", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_o", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_o", ")", "+", "b_o", ")", "\n", "# next hidden state", "\n", "h_next", "=", "tf", ".", "multiply", "(", "o_t", ",", "tf", ".", "tanh", "(", "c_next", ")", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.att_layer_ws": [[798, 854], ["tensorflow.concat", "tensorflow.concat", "tensorflow.cond", "tensorflow.reshape", "tensorflow.nn.tanh", "tensorflow.reshape", "tensorflow.cond", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.sequence_mask", "tensorflow.nn.softmax", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.equal", "tensorflow.nn.xw_plus_b", "tensorflow.equal", "tensorflow.stack", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply"], "methods", ["None"], ["", "def", "att_layer_ws", "(", "self", ",", "h_w", ",", "N_w", ")", ":", "\n", "\n", "        ", "D_s", "=", "self", ".", "hyper_parameters", "[", "'D_s'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# prepare \"siamese\" dropout", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "dropout_Wb", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'att_ws'", "]", "[", "'Wb'", "]", ",", "\n", "self", ".", "dropout", "[", "'att_ws'", "]", "[", "'Wb'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "dropout_v", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'att_ws'", "]", "[", "'v'", "]", ",", "\n", "self", ".", "dropout", "[", "'att_ws'", "]", "[", "'v'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "# apply dropout, shape=[2 * B, T_s, T_w, 2 * D_s]", "\n", "scores", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_Wb", ",", "h_w", ")", ",", "\n", "lambda", ":", "h_w", ",", "\n", ")", "\n", "# shape=[2 * B * T_s * T_w, 2 * D_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "scores", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "scores", ",", "\n", "self", ".", "theta", "[", "'att_ws'", "]", "[", "'W'", "]", ",", "\n", "self", ".", "theta", "[", "'att_ws'", "]", "[", "'b'", "]", ")", ")", "\n", "# shape=[2 * B * T_s, T_w, D_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "# apply dropout", "\n", "scores", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_v", ",", "scores", ")", ",", "\n", "lambda", ":", "scores", ",", "\n", ")", "\n", "# shape=[2 * B * T_s * T_w, 2 * D_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "\n", "# shape=[2 * B * T_s * T_w, 1]", "\n", "scores", "=", "tf", ".", "matmul", "(", "scores", ",", "self", ".", "theta", "[", "'att_ws'", "]", "[", "'v'", "]", ")", "\n", "# shape=[2 * B, T_s, T_w]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "T_w", "]", ")", "\n", "\n", "# binary mask, shape = [2 * B, T_s, T_w]", "\n", "mask", "=", "tf", ".", "sequence_mask", "(", "N_w", ",", "maxlen", "=", "T_w", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "(", "1.0", "-", "mask", ")", "*", "-", "5000.0", "\n", "\n", "# shape = [2 * B, T_s, T_w]", "\n", "scores", "=", "scores", "+", "mask", "\n", "scores", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "2", ")", "\n", "\n", "# expand to shape=[B, T_s, T_w, 1]", "\n", "alpha", "=", "tf", ".", "expand_dims", "(", "scores", ",", "axis", "=", "3", ")", "\n", "# fill up to shape=[B, T_s, T_w, D_s]", "\n", "alpha", "=", "tf", ".", "tile", "(", "alpha", ",", "tf", ".", "stack", "(", "[", "1", ",", "1", ",", "1", ",", "2", "*", "D_s", "]", ")", ")", "\n", "# combine to get sentence representations, shape=[B, T_s, 2 * D_s]", "\n", "e_s", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "alpha", ",", "h_w", ")", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "\n", "return", "e_s", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.att_layer_sd": [[858, 914], ["tensorflow.concat", "tensorflow.concat", "tensorflow.cond", "tensorflow.reshape", "tensorflow.nn.tanh", "tensorflow.reshape", "tensorflow.cond", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.sequence_mask", "tensorflow.nn.softmax", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.equal", "tensorflow.nn.xw_plus_b", "tensorflow.equal", "tensorflow.stack", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply"], "methods", ["None"], ["", "def", "att_layer_sd", "(", "self", ",", "h_s", ",", "N_s", ")", ":", "\n", "\n", "        ", "D_d", "=", "self", ".", "hyper_parameters", "[", "'D_d'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# prepare \"siamese\" dropout", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "dropout_Wb", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'att_sd'", "]", "[", "'Wb'", "]", ",", "\n", "self", ".", "dropout", "[", "'att_sd'", "]", "[", "'Wb'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "dropout_v", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'att_sd'", "]", "[", "'v'", "]", ",", "\n", "self", ".", "dropout", "[", "'att_sd'", "]", "[", "'v'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "# apply dropout, shape=[2 * B, T_s, 2 * D_d]", "\n", "scores", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_Wb", ",", "h_s", ")", ",", "\n", "lambda", ":", "h_s", ",", "\n", ")", "\n", "# shape=[2 * B * T_s, 2 * D_d]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "2", "*", "D_d", "]", ")", "\n", "scores", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "scores", ",", "\n", "self", ".", "theta", "[", "'att_sd'", "]", "[", "'W'", "]", ",", "\n", "self", ".", "theta", "[", "'att_sd'", "]", "[", "'b'", "]", ")", ")", "\n", "# shape=[2 * B, T_s, 2 * D_d]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "2", "*", "D_d", "]", ")", "\n", "\n", "# apply dropout", "\n", "scores", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_v", ",", "scores", ")", ",", "\n", "lambda", ":", "scores", ",", "\n", ")", "\n", "# shape=[2 * B * T_s, 2 * D_d]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "2", "*", "D_d", "]", ")", "\n", "\n", "# shape=[2 * B * T_s, 1]", "\n", "scores", "=", "tf", ".", "matmul", "(", "scores", ",", "self", ".", "theta", "[", "'att_sd'", "]", "[", "'v'", "]", ")", "\n", "# shape=[2 * B, T_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", "]", ")", "\n", "\n", "# binary mask, shape = [2 * B, T_s]", "\n", "mask", "=", "tf", ".", "sequence_mask", "(", "N_s", ",", "maxlen", "=", "T_s", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "(", "1.0", "-", "mask", ")", "*", "-", "5000.0", "\n", "\n", "# shape = [2 * B, T_s]", "\n", "scores", "=", "scores", "+", "mask", "\n", "scores", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "# expand to shape=[B, T_s, 1]", "\n", "alpha", "=", "tf", ".", "expand_dims", "(", "scores", ",", "axis", "=", "2", ")", "\n", "# fill up to shape=[B, T_s, 2 * D_d]", "\n", "alpha", "=", "tf", ".", "tile", "(", "alpha", ",", "tf", ".", "stack", "(", "[", "1", ",", "1", ",", "2", "*", "D_d", "]", ")", ")", "\n", "# combine to get doc representations, shape=[B, 2 * D_d]", "\n", "e_d", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "alpha", ",", "h_s", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "\n", "return", "e_d", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.make_dropout_mask": [[918, 924], ["tensorflow.convert_to_tensor", "tensorflow.floor", "tensorflow.divide", "tensorflow.random_uniform"], "methods", ["None"], ["", "def", "make_dropout_mask", "(", "self", ",", "shape", ",", "keep_prob", ")", ":", "\n", "        ", "keep_prob", "=", "tf", ".", "convert_to_tensor", "(", "keep_prob", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "random_tensor", "=", "keep_prob", "+", "tf", ".", "random_uniform", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "binary_tensor", "=", "tf", ".", "floor", "(", "random_tensor", ")", "\n", "dropout_mask", "=", "tf", ".", "divide", "(", "binary_tensor", ",", "keep_prob", ")", "\n", "return", "dropout_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_dropout": [[925, 1011], ["tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask", "adhominem_o2d2.AdHominem_O2D2.make_dropout_mask"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask"], ["", "def", "initialize_dropout", "(", "self", ")", ":", "\n", "\n", "        ", "D_c", "=", "self", ".", "hyper_parameters", "[", "'D_c'", "]", "\n", "D_r", "=", "self", ".", "hyper_parameters", "[", "'D_r'", "]", "\n", "D_w", "=", "self", ".", "hyper_parameters", "[", "'D_w'", "]", "\n", "D_s", "=", "self", ".", "hyper_parameters", "[", "'D_s'", "]", "\n", "D_d", "=", "self", ".", "hyper_parameters", "[", "'D_d'", "]", "\n", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "D_lev", "=", "self", ".", "hyper_parameters", "[", "'D_lev'", "]", "\n", "\n", "dropout", "=", "{", "}", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'dropout_cnn'", ")", ":", "\n", "            ", "dropout", "[", "'cnn'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "T_c", ",", "D_c", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_cnn'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_lstm_ws_forward'", ")", ":", "\n", "            ", "dropout", "[", "'lstm_ws_forward'", "]", "=", "{", "}", "\n", "dropout", "[", "'lstm_ws_forward'", "]", "[", "'x'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "D_w", "+", "D_r", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "dropout", "[", "'lstm_ws_forward'", "]", "[", "'h'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_lstm_ws_backward'", ")", ":", "\n", "            ", "dropout", "[", "'lstm_ws_backward'", "]", "=", "{", "}", "\n", "dropout", "[", "'lstm_ws_backward'", "]", "[", "'x'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "D_w", "+", "D_r", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "dropout", "[", "'lstm_ws_backward'", "]", "[", "'h'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_lstm_sd_forward'", ")", ":", "\n", "            ", "dropout", "[", "'lstm_sd_forward'", "]", "=", "{", "}", "\n", "dropout", "[", "'lstm_sd_forward'", "]", "[", "'x'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "2", "*", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "dropout", "[", "'lstm_sd_forward'", "]", "[", "'h'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_lstm_sd_backward'", ")", ":", "\n", "            ", "dropout", "[", "'lstm_sd_backward'", "]", "=", "{", "}", "\n", "dropout", "[", "'lstm_sd_backward'", "]", "[", "'x'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "2", "*", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "dropout", "[", "'lstm_sd_backward'", "]", "[", "'h'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_att_ws'", ")", ":", "\n", "            ", "dropout", "[", "'att_ws'", "]", "=", "{", "}", "\n", "dropout", "[", "'att_ws'", "]", "[", "'Wb'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "T_s", ",", "1", ",", "2", "*", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_att'", "]", ",", "\n", ")", "\n", "dropout", "[", "'att_ws'", "]", "[", "'v'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "1", ",", "2", "*", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_att'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_att_sd'", ")", ":", "\n", "            ", "dropout", "[", "'att_sd'", "]", "=", "{", "}", "\n", "dropout", "[", "'att_sd'", "]", "[", "'Wb'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "1", ",", "2", "*", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_att'", "]", ",", "\n", ")", "\n", "dropout", "[", "'att_sd'", "]", "[", "'v'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "1", ",", "2", "*", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_att'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_metric'", ")", ":", "\n", "            ", "dropout", "[", "'metric'", "]", "=", "{", "}", "\n", "dropout", "[", "'metric'", "]", "[", "'metric_1'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "2", "*", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_metric'", "]", ",", "\n", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_bfs'", ")", ":", "\n", "            ", "dropout", "[", "'bfs'", "]", "=", "{", "}", "\n", "dropout", "[", "'bfs'", "]", "[", "'bfs_1'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "D_lev", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_bfs'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_ual'", ")", ":", "\n", "            ", "dropout", "[", "'ual'", "]", "=", "{", "}", "\n", "dropout", "[", "'ual'", "]", "[", "'ual_1'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "D_lev", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_ual'", "]", ",", "\n", ")", "\n", "dropout", "[", "'ual'", "]", "[", "'ual_2'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "2", "*", "D_lev", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_ual'", "]", ",", "\n", ")", "\n", "", "return", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_parameters": [[1015, 1069], ["tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_cnn", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_lstm", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_lstm", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_lstm", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_lstm", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_att", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_att", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_mlp", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_mlp", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_bfs", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_ual", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_theta_loss", "tensorflow.variable_scope", "adhominem_o2d2.AdHominem_O2D2.initialize_o2d2"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_cnn", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_att", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_att", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_mlp", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_mlp", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_bfs", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_ual", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_theta_loss", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_o2d2"], ["", "def", "initialize_parameters", "(", "self", ",", "theta_init", ")", ":", "\n", "\n", "        ", "D_lev", "=", "self", ".", "hyper_parameters", "[", "'D_lev'", "]", "\n", "\n", "theta", "=", "{", "}", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'theta_cnn'", ")", ":", "\n", "            ", "theta", "[", "'cnn'", "]", "=", "self", ".", "initialize_cnn", "(", "theta_init", "[", "'cnn'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_cnn\"", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_ws_forward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_ws_forward'", "]", "=", "self", ".", "initialize_lstm", "(", "theta_init", "[", "'lstm_ws_forward'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_bilstm\"", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_ws_backward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_ws_backward'", "]", "=", "self", ".", "initialize_lstm", "(", "theta_init", "[", "'lstm_ws_backward'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_bilstm\"", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_sd_forward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_sd_forward'", "]", "=", "self", ".", "initialize_lstm", "(", "theta_init", "[", "'lstm_sd_forward'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_bilstm\"", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_sd_backward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_sd_backward'", "]", "=", "self", ".", "initialize_lstm", "(", "theta_init", "[", "'lstm_sd_backward'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_bilstm\"", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_att_ws'", ")", ":", "\n", "            ", "theta", "[", "'att_ws'", "]", "=", "self", ".", "initialize_att", "(", "theta_init", "[", "'att_ws'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_bilstm\"", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_att_sd'", ")", ":", "\n", "            ", "theta", "[", "'att_sd'", "]", "=", "self", ".", "initialize_att", "(", "theta_init", "[", "'att_sd'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_bilstm\"", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_metric'", ")", ":", "\n", "            ", "theta", "[", "'metric'", "]", "=", "self", ".", "initialize_mlp", "(", "theta_init", "[", "'metric_a'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_dml\"", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_bfs_1'", ")", ":", "\n", "            ", "theta", "[", "'bfs_1'", "]", "=", "self", ".", "initialize_mlp", "(", "theta_init", "[", "'bfs_a_1'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_bfs\"", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_bfs_2'", ")", ":", "\n", "            ", "theta", "[", "'bfs_2'", "]", "=", "self", ".", "initialize_bfs", "(", "theta_init", "[", "'bfs_a_2'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_bfs\"", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_ual'", ")", ":", "\n", "            ", "theta", "[", "'ual'", "]", "=", "self", ".", "initialize_ual", "(", "theta_init", "[", "'ual_a'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_ual\"", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_dml_loss'", ")", ":", "\n", "            ", "theta", "[", "'loss_dml'", "]", "=", "self", ".", "initialize_theta_loss", "(", "theta_init", "[", "'loss_dml_a'", "]", ",", "\n", "self", ".", "hyper_parameters", "[", "\"retrain_loss_dml\"", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_o2d2'", ")", ":", "\n", "            ", "theta", "[", "'o2d2'", "]", "=", "self", ".", "initialize_o2d2", "(", "D_lev", ")", "\n", "\n", "", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_o2d2": [[1070, 1108], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "initialize_o2d2", "(", "self", ",", "D_lev", ")", ":", "\n", "\n", "        ", "theta", "=", "{", "\"W1\"", ":", "tf", ".", "get_variable", "(", "name", "=", "\"W1\"", ",", "\n", "shape", "=", "[", "2", "*", "D_lev", "+", "4", ",", "60", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "\"b1\"", ":", "tf", ".", "get_variable", "(", "name", "=", "\"b1\"", ",", "\n", "shape", "=", "[", "60", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "\"W2\"", ":", "tf", ".", "get_variable", "(", "name", "=", "\"W2\"", ",", "\n", "shape", "=", "[", "60", ",", "30", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "\"b2\"", ":", "tf", ".", "get_variable", "(", "name", "=", "\"b2\"", ",", "\n", "shape", "=", "[", "30", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "\"W3\"", ":", "tf", ".", "get_variable", "(", "name", "=", "\"W3\"", ",", "\n", "shape", "=", "[", "30", ",", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "\"b3\"", ":", "tf", ".", "get_variable", "(", "name", "=", "\"b3\"", ",", "\n", "shape", "=", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_theta_loss": [[1109, 1123], ["tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_theta_loss", "(", "self", ",", "theta_init", ",", "retrain", ")", ":", "\n", "        ", "theta", "=", "{", "'alpha'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'alpha'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'loss_alpha'", ",", "\n", ")", ",", "\n", "'beta'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'beta'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'loss_beta'", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_ual": [[1124, 1148], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_ual", "(", "self", ",", "theta_init", ",", "retrain", ")", ":", "\n", "        ", "theta", "=", "{", "'W1'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W1'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W1'", ",", "\n", ")", ",", "\n", "'b1'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b1'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b1'", ",", "\n", ")", ",", "\n", "'W2'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W2'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W2'", ",", "\n", ")", ",", "\n", "'b2'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b2'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b2'", ",", "\n", ")", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_bfs": [[1149, 1167], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_bfs", "(", "self", ",", "theta_init", ",", "retrain", ")", ":", "\n", "        ", "theta", "=", "{", "'W'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W'", ",", "\n", ")", ",", "\n", "'B'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'B'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'B'", ",", "\n", ")", ",", "\n", "'mu'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'mu'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'mu'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_mlp": [[1168, 1181], ["tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_mlp", "(", "self", ",", "theta_init", ",", "retrain", ")", ":", "\n", "        ", "theta", "=", "{", "'W'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W'", ",", "\n", ")", ",", "\n", "'b'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_cnn": [[1182, 1195], ["tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_cnn", "(", "self", ",", "theta_init", ",", "retrain", ")", ":", "\n", "        ", "theta", "=", "{", "'W'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W'", ",", "\n", ")", ",", "\n", "'b'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_att": [[1196, 1214], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_att", "(", "self", ",", "theta_init", ",", "retrain", ")", ":", "\n", "        ", "theta", "=", "{", "'W'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W'", ",", "\n", ")", ",", "\n", "'v'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'v'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'v'", ",", "\n", ")", ",", "\n", "'b'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.initialize_lstm": [[1215, 1278], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_lstm", "(", "self", ",", "theta_init", ",", "retrain", ")", ":", "\n", "        ", "theta", "=", "{", "'W_i'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W_i'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W_i'", ",", "\n", ")", ",", "\n", "'U_i'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'U_i'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'U_i'", ",", "\n", ")", ",", "\n", "'b_i'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b_i'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b_i'", ",", "\n", ")", ",", "\n", "'W_f'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W_f'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W_f'", ",", "\n", ")", ",", "\n", "'U_f'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'U_f'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'U_f'", ",", "\n", ")", ",", "\n", "'b_f'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b_f'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b_f'", ",", "\n", ")", ",", "\n", "'W_c'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W_c'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W_c'", ",", "\n", ")", ",", "\n", "'U_c'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'U_c'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'U_c'", ",", "\n", ")", ",", "\n", "'b_c'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b_c'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b_c'", ",", "\n", ")", ",", "\n", "'W_o'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W_o'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W_o'", ",", "\n", ")", ",", "\n", "'U_o'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'U_o'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'U_o'", ",", "\n", ")", ",", "\n", "'b_o'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b_o'", "]", ",", "\n", "trainable", "=", "retrain", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b_o'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.compute_TP_FP_TN_FN": [[1282, 1298], ["range", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_TP_FP_TN_FN", "(", "labels", ",", "labels_hat", ")", ":", "\n", "\n", "        ", "TP", ",", "FP", ",", "TN", ",", "FN", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "labels_hat", ")", ")", ":", "\n", "            ", "if", "labels", "[", "i", "]", "==", "1", "and", "labels_hat", "[", "i", "]", "==", "1", ":", "\n", "                ", "TP", "+=", "1", "\n", "", "if", "labels", "[", "i", "]", "==", "0", "and", "labels_hat", "[", "i", "]", "==", "1", ":", "\n", "                ", "FP", "+=", "1", "\n", "", "if", "labels", "[", "i", "]", "==", "0", "and", "labels_hat", "[", "i", "]", "==", "0", ":", "\n", "                ", "TN", "+=", "1", "\n", "", "if", "labels", "[", "i", "]", "==", "1", "and", "labels_hat", "[", "i", "]", "==", "0", ":", "\n", "                ", "FN", "+=", "1", "\n", "\n", "", "", "return", "TP", ",", "FP", ",", "TN", ",", "FN", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.compute_labels": [[1299, 1305], ["numpy.ones"], "methods", ["None"], ["", "def", "compute_labels", "(", "self", ",", "pred", ",", "thr", "=", "0.5", ")", ":", "\n", "# numpy array for estimated labels", "\n", "        ", "labels_hat", "=", "np", ".", "ones", "(", "pred", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# dissimilar pairs --> 0, similar pairs --> 1", "\n", "labels_hat", "[", "pred", "<=", "thr", "]", "=", "0", "\n", "return", "labels_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.compute_confidence": [[1306, 1311], ["adhominem_o2d2.AdHominem_O2D2.compute_labels", "pred.copy"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels"], ["", "def", "compute_confidence", "(", "self", ",", "pred", ")", ":", "\n", "        ", "labels_hat", "=", "self", ".", "compute_labels", "(", "pred", ")", "\n", "confidences", "=", "pred", ".", "copy", "(", ")", "\n", "confidences", "[", "labels_hat", "==", "0", "]", "=", "1.0", "-", "confidences", "[", "labels_hat", "==", "0", "]", "\n", "return", "confidences", ",", "labels_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.next_batch": [[1315, 1321], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "next_batch", "(", "t_s", ",", "t_e", ",", "docs_L", ",", "docs_R", ",", "labels", ")", ":", "\n", "        ", "docs_L_i", "=", "docs_L", "[", "t_s", ":", "t_e", "]", "\n", "docs_R_i", "=", "docs_R", "[", "t_s", ":", "t_e", "]", "\n", "labels_i", "=", "labels", "[", "t_s", ":", "t_e", "]", "\n", "return", "docs_L_i", ",", "docs_R_i", ",", "labels_i", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.update_model": [[1325, 1353], ["adhominem_o2d2.AdHominem_O2D2.sess.run", "pred_ual[].copy", "numpy.where", "len", "numpy.sum"], "methods", ["None"], ["", "def", "update_model", "(", "self", ",", "x_w_L", ",", "x_w_R", ",", "x_c_L", ",", "x_c_R", ",", "labels", ",", "N_w_L", ",", "N_w_R", ",", "N_s_L", ",", "N_s_R", ",", "lr", ")", ":", "\n", "\n", "        ", "feed_dict", "=", "{", "self", ".", "placeholders", "[", "'x_w_L'", "]", ":", "x_w_L", ",", "\n", "self", ".", "placeholders", "[", "'x_w_R'", "]", ":", "x_w_R", ",", "\n", "self", ".", "placeholders", "[", "'x_c_L'", "]", ":", "x_c_L", ",", "\n", "self", ".", "placeholders", "[", "'x_c_R'", "]", ":", "x_c_R", ",", "\n", "self", ".", "placeholders", "[", "'labels'", "]", ":", "labels", ",", "\n", "self", ".", "placeholders", "[", "'N_w_L'", "]", ":", "N_w_L", ",", "\n", "self", ".", "placeholders", "[", "'N_w_R'", "]", ":", "N_w_R", ",", "\n", "self", ".", "placeholders", "[", "'N_s_L'", "]", ":", "N_s_L", ",", "\n", "self", ".", "placeholders", "[", "'N_s_R'", "]", ":", "N_s_R", ",", "\n", "self", ".", "placeholders", "[", "'is_training'", "]", ":", "True", ",", "\n", "self", ".", "placeholders", "[", "'lr'", "]", ":", "lr", ",", "\n", "}", "\n", "_", ",", "loss", ",", "pred_dml", ",", "pred_bfs", ",", "pred_ual", ",", "labels_hat_o2d2", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer", ",", "self", ".", "loss", ",", "\n", "self", ".", "pred_dml", ",", "self", ".", "pred_bfs", ",", "self", ".", "pred_ual", ",", "\n", "self", ".", "labels_hat_o2d2", ",", "\n", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "# define non-responses", "\n", "pred_o2d2", "=", "pred_ual", "[", ":", ",", "1", "]", ".", "copy", "(", ")", "\n", "idx", "=", "np", ".", "where", "(", "labels_hat_o2d2", "==", "1", ")", "[", "0", "]", "\n", "pred_o2d2", "[", "idx", "]", "=", "0.5", "\n", "# number of miss-classification in %", "\n", "n_miss", "=", "100", "*", "np", ".", "sum", "(", "labels_hat_o2d2", "==", "1", ")", "/", "len", "(", "labels", ")", "\n", "\n", "return", "loss", ",", "n_miss", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.evaluate_model": [[1357, 1439], ["math.ceil", "range", "numpy.array().reshape", "numpy.concatenate().reshape", "numpy.concatenate().reshape", "numpy.concatenate().reshape", "numpy.concatenate().reshape", "numpy.concatenate().reshape.copy", "adhominem_o2d2.AdHominem_O2D2.compute_confidence", "reliability_diagrams.compute_calibration", "adhominem_o2d2.AdHominem_O2D2.compute_confidence", "reliability_diagrams.compute_calibration", "adhominem_o2d2.AdHominem_O2D2.compute_confidence", "reliability_diagrams.compute_calibration", "adhominem_o2d2.AdHominem_O2D2.compute_confidence", "reliability_diagrams.compute_calibration", "evaluate.evaluate_all", "evaluate.evaluate_all", "evaluate.evaluate_all", "evaluate.evaluate_all", "adhominem_o2d2.AdHominem_O2D2.next_batch", "len", "numpy.where", "len", "len", "adhominem_o2d2.AdHominem_O2D2.doc2mat", "adhominem_o2d2.AdHominem_O2D2.doc2mat", "adhominem_o2d2.AdHominem_O2D2.compute_eval_measures", "numpy.concatenate().reshape.append", "numpy.concatenate().reshape.append", "numpy.concatenate().reshape.append", "numpy.concatenate().reshape.append", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_confidence", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_confidence", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_confidence", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_confidence", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.evaluate_all", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.evaluate_all", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.evaluate_all", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.evaluate_all", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.next_batch", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_eval_measures"], ["", "def", "evaluate_model", "(", "self", ",", "docs_L", ",", "docs_R", ",", "labels", ",", "batch_size", ")", ":", "\n", "\n", "        ", "num_batches", "=", "ceil", "(", "len", "(", "labels", ")", "/", "batch_size", ")", "\n", "\n", "pred_dml", ",", "pred_bfs", ",", "pred_ual", ",", "labels_hat_o2d2", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "\n", "# get next batch", "\n", "            ", "docs_L_i", ",", "docs_R_i", ",", "labels_i", "=", "self", ".", "next_batch", "(", "i", "*", "batch_size", ",", "\n", "(", "i", "+", "1", ")", "*", "batch_size", ",", "\n", "docs_L", ",", "\n", "docs_R", ",", "\n", "labels", ",", "\n", ")", "\n", "B", "=", "len", "(", "labels_i", ")", "\n", "\n", "if", "B", ">", "0", ":", "\n", "# word/character embeddings", "\n", "                ", "x_w_L", ",", "N_w_L", ",", "N_s_L", ",", "x_c_L", "=", "self", ".", "doc2mat", "(", "docs_L_i", ")", "\n", "x_w_R", ",", "N_w_R", ",", "N_s_R", ",", "x_c_R", "=", "self", ".", "doc2mat", "(", "docs_R_i", ")", "\n", "\n", "# accuracy for training set", "\n", "curr_pred_dml", ",", "curr_pred_bfs", ",", "curr_pred_ual", ",", "curr_labels_o2d2", "=", "self", ".", "compute_eval_measures", "(", "x_w_L", "=", "x_w_L", ",", "\n", "x_w_R", "=", "x_w_R", ",", "\n", "x_c_L", "=", "x_c_L", ",", "\n", "x_c_R", "=", "x_c_R", ",", "\n", "N_w_L", "=", "N_w_L", ",", "\n", "N_w_R", "=", "N_w_R", ",", "\n", "N_s_L", "=", "N_s_L", ",", "\n", "N_s_R", "=", "N_s_R", ",", "\n", ")", "\n", "pred_dml", ".", "append", "(", "curr_pred_dml", ")", "\n", "pred_bfs", ".", "append", "(", "curr_pred_bfs", ")", "\n", "pred_ual", ".", "append", "(", "curr_pred_ual", ")", "\n", "labels_hat_o2d2", ".", "append", "(", "curr_labels_o2d2", ")", "\n", "\n", "", "", "labels", "=", "np", ".", "array", "(", "labels", ")", ".", "reshape", "(", "-", "1", ")", "\n", "labels_hat_o2d2", "=", "np", ".", "concatenate", "(", "labels_hat_o2d2", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "pred_dml", "=", "np", ".", "concatenate", "(", "pred_dml", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pred_bfs", "=", "np", ".", "concatenate", "(", "pred_bfs", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pred_ual", "=", "np", ".", "concatenate", "(", "pred_ual", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# define non-responses", "\n", "pred_o2d2", "=", "pred_ual", ".", "copy", "(", ")", "\n", "idx", "=", "np", ".", "where", "(", "labels_hat_o2d2", "==", "1", ")", "[", "0", "]", "\n", "pred_o2d2", "[", "idx", "]", "=", "0.5", "\n", "\n", "# number of missclassification in %", "\n", "n_miss", "=", "100", "*", "np", ".", "sum", "(", "labels_hat_o2d2", "==", "1", ")", "/", "len", "(", "labels_hat_o2d2", ")", "\n", "\n", "# compute calibration metrics", "\n", "confidence_dml", ",", "labels_dml", "=", "self", ".", "compute_confidence", "(", "pred_dml", ")", "\n", "calibration_dml", "=", "compute_calibration", "(", "true_labels", "=", "labels", ",", "\n", "pred_labels", "=", "labels_dml", ",", "\n", "confidences", "=", "confidence_dml", ",", "\n", ")", "\n", "confidence_bfs", ",", "labels_bfs", "=", "self", ".", "compute_confidence", "(", "pred_bfs", ")", "\n", "calibration_bfs", "=", "compute_calibration", "(", "true_labels", "=", "labels", ",", "\n", "pred_labels", "=", "labels_bfs", ",", "\n", "confidences", "=", "confidence_bfs", ",", "\n", ")", "\n", "confidence_ual", ",", "labels_ual", "=", "self", ".", "compute_confidence", "(", "pred_ual", ")", "\n", "calibration_ual", "=", "compute_calibration", "(", "true_labels", "=", "labels", ",", "\n", "pred_labels", "=", "labels_ual", ",", "\n", "confidences", "=", "confidence_ual", ",", "\n", ")", "\n", "confidence_o2d2", ",", "labels_o2d2", "=", "self", ".", "compute_confidence", "(", "pred_o2d2", ")", "\n", "calibration_o2d2", "=", "compute_calibration", "(", "true_labels", "=", "labels", ",", "\n", "pred_labels", "=", "labels_o2d2", ",", "\n", "confidences", "=", "confidence_o2d2", ",", "\n", ")", "\n", "# compute PAN metrics", "\n", "pan_dml", "=", "evaluate_all", "(", "pred_y", "=", "pred_dml", ",", "true_y", "=", "labels", ")", "\n", "pan_bfs", "=", "evaluate_all", "(", "pred_y", "=", "pred_bfs", ",", "true_y", "=", "labels", ")", "\n", "pan_ual", "=", "evaluate_all", "(", "pred_y", "=", "pred_ual", ",", "true_y", "=", "labels", ")", "\n", "pan_o2d2", "=", "evaluate_all", "(", "pred_y", "=", "pred_o2d2", ",", "true_y", "=", "labels", ")", "\n", "\n", "return", "pan_dml", ",", "pan_bfs", ",", "pan_ual", ",", "pan_o2d2", ",", "calibration_dml", ",", "calibration_bfs", ",", "calibration_ual", ",", "calibration_o2d2", ",", "n_miss", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.compute_eval_measures": [[1443, 1460], ["adhominem_o2d2.AdHominem_O2D2.sess.run"], "methods", ["None"], ["", "def", "compute_eval_measures", "(", "self", ",", "x_w_L", ",", "x_w_R", ",", "x_c_L", ",", "x_c_R", ",", "N_w_L", ",", "N_w_R", ",", "N_s_L", ",", "N_s_R", ")", ":", "\n", "\n", "# compute distances", "\n", "        ", "pred_dml", ",", "pred_bfs", ",", "pred_ual", ",", "labels_hat_o2d2", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_dml", ",", "self", ".", "pred_bfs", ",", "self", ".", "pred_ual", ",", "\n", "self", ".", "labels_hat_o2d2", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "placeholders", "[", "'x_w_L'", "]", ":", "x_w_L", ",", "\n", "self", ".", "placeholders", "[", "'x_w_R'", "]", ":", "x_w_R", ",", "\n", "self", ".", "placeholders", "[", "'x_c_L'", "]", ":", "x_c_L", ",", "\n", "self", ".", "placeholders", "[", "'x_c_R'", "]", ":", "x_c_R", ",", "\n", "self", ".", "placeholders", "[", "'N_w_L'", "]", ":", "N_w_L", ",", "\n", "self", ".", "placeholders", "[", "'N_w_R'", "]", ":", "N_w_R", ",", "\n", "self", ".", "placeholders", "[", "'N_s_L'", "]", ":", "N_s_L", ",", "\n", "self", ".", "placeholders", "[", "'N_s_R'", "]", ":", "N_s_R", ",", "\n", "self", ".", "placeholders", "[", "'is_training'", "]", ":", "False", ",", "\n", "}", ")", "\n", "\n", "return", "pred_dml", ",", "pred_bfs", ",", "pred_ual", "[", ":", ",", "1", "]", ",", "labels_hat_o2d2", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.sliding_window": [[1464, 1483], ["doc.split", "len", "doc_new.append", "sent_new.strip"], "methods", ["None"], ["", "def", "sliding_window", "(", "self", ",", "doc", ")", ":", "\n", "\n", "        ", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "hop_length", "=", "self", ".", "hyper_parameters", "[", "'hop_length'", "]", "\n", "\n", "tokens", "=", "doc", ".", "split", "(", ")", "\n", "doc_new", "=", "[", "]", "\n", "n", "=", "0", "\n", "while", "len", "(", "tokens", "[", "n", ":", "n", "+", "T_w", "]", ")", ">", "0", ":", "\n", "# split sentence into tokens", "\n", "            ", "sent_new", "=", "''", "\n", "for", "token", "in", "tokens", "[", "n", ":", "n", "+", "T_w", "]", ":", "\n", "                ", "sent_new", "+=", "token", "+", "' '", "\n", "# add to new doc", "\n", "", "doc_new", ".", "append", "(", "sent_new", ".", "strip", "(", ")", ")", "\n", "# update stepsize", "\n", "n", "+=", "hop_length", "\n", "\n", "", "return", "doc_new", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.doc2mat": [[1487, 1530], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "adhominem_o2d2.AdHominem_O2D2.sliding_window", "len", "enumerate", "sentence.split", "len", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.plot_att_html.sliding_window"], ["", "def", "doc2mat", "(", "self", ",", "docs", ")", ":", "\n", "\n", "        ", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "V_c", "=", "self", ".", "hyper_parameters", "[", "'V_c'", "]", "\n", "V_w", "=", "self", ".", "hyper_parameters", "[", "'V_w'", "]", "\n", "\n", "# batch size", "\n", "B", "=", "len", "(", "docs", ")", "\n", "N_w", "=", "np", ".", "zeros", "(", "(", "B", ",", "T_s", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "N_s", "=", "np", ".", "zeros", "(", "(", "B", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# word-based tensor, shape = [B, T_s, T_w]", "\n", "x_w", "=", "np", ".", "zeros", "(", "(", "B", ",", "T_s", ",", "T_w", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# character-based tensor", "\n", "x_c", "=", "np", ".", "zeros", "(", "(", "B", ",", "T_s", ",", "T_w", ",", "T_c", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# current document", "\n", "for", "i", ",", "doc", "in", "enumerate", "(", "docs", ")", ":", "\n", "\n", "# apply sliding window to construct sentence like units", "\n", "            ", "doc", "=", "self", ".", "sliding_window", "(", "doc", ")", "\n", "\n", "N_s", "[", "i", "]", "=", "len", "(", "doc", "[", ":", "T_s", "]", ")", "\n", "# current sentence", "\n", "for", "j", ",", "sentence", "in", "enumerate", "(", "doc", "[", ":", "T_s", "]", ")", ":", "\n", "                ", "tokens", "=", "sentence", ".", "split", "(", ")", "\n", "N_w", "[", "i", ",", "j", "]", "=", "len", "(", "tokens", ")", "\n", "# current tokens", "\n", "for", "k", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                    ", "if", "token", "in", "V_w", ":", "\n", "                        ", "x_w", "[", "i", ",", "j", ",", "k", "]", "=", "V_w", "[", "token", "]", "\n", "", "else", ":", "\n", "                        ", "x_w", "[", "i", ",", "j", ",", "k", "]", "=", "V_w", "[", "'<UNK>'", "]", "\n", "# current character", "\n", "", "for", "l", ",", "chr", "in", "enumerate", "(", "token", "[", ":", "T_c", "]", ")", ":", "\n", "                        ", "if", "chr", "in", "V_c", ":", "\n", "                            ", "x_c", "[", "i", ",", "j", ",", "k", ",", "l", "]", "=", "V_c", "[", "chr", "]", "\n", "", "else", ":", "\n", "                            ", "x_c", "[", "i", ",", "j", ",", "k", ",", "l", "]", "=", "V_c", "[", "'<UNK>'", "]", "\n", "\n", "", "", "", "", "", "return", "x_w", ",", "N_w", ",", "N_s", ",", "x_c", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.store_parameters": [[1534, 1564], ["os.path.join", "adhominem_o2d2.AdHominem_O2D2.thetas_E.keys", "adhominem_o2d2.AdHominem_O2D2.theta.keys", "os.path.join", "os.path.exists", "os.makedirs", "adhominem_o2d2.AdHominem_O2D2.sess.run", "adhominem_o2d2.AdHominem_O2D2.theta[].keys", "open", "pickle.dump", "adhominem_o2d2.AdHominem_O2D2.sess.run", "str"], "methods", ["None"], ["", "def", "store_parameters", "(", "self", ",", "step", ",", "dire_results", ")", ":", "\n", "\n", "        ", "dir_weights", "=", "os", ".", "path", ".", "join", "(", "dire_results", ",", "\n", "'weights_o2d2'", ",", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_weights", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_weights", ")", "\n", "\n", "", "parameters", "=", "{", "'hyper_parameters'", ":", "{", "}", ",", "\n", "'theta'", ":", "{", "}", ",", "\n", "'theta_E'", ":", "{", "}", ",", "\n", "}", "\n", "\n", "# hyper-parameters", "\n", "for", "hp", "in", "self", ".", "hyper_parameters", ":", "\n", "            ", "parameters", "[", "'hyper_parameters'", "]", "[", "hp", "]", "=", "self", ".", "hyper_parameters", "[", "hp", "]", "\n", "\n", "# character and word embeddings", "\n", "", "for", "var", "in", "self", ".", "thetas_E", ".", "keys", "(", ")", ":", "\n", "            ", "parameters", "[", "'theta_E'", "]", "[", "var", "]", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "thetas_E", "[", "var", "]", ")", "\n", "\n", "# variables for feature extraction and plda", "\n", "", "for", "layer", "in", "self", ".", "theta", ".", "keys", "(", ")", ":", "\n", "            ", "parameters", "[", "'theta'", "]", "[", "layer", "]", "=", "{", "}", "\n", "for", "var", "in", "self", ".", "theta", "[", "layer", "]", ".", "keys", "(", ")", ":", "\n", "                ", "parameters", "[", "'theta'", "]", "[", "layer", "]", "[", "var", "]", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "theta", "[", "layer", "]", "[", "var", "]", ")", "\n", "\n", "", "", "file", "=", "os", ".", "path", ".", "join", "(", "dir_weights", ",", "'weights_'", "+", "str", "(", "step", ")", ")", "\n", "with", "open", "(", "file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "parameters", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.adhominem_o2d2.AdHominem_O2D2.train_model": [[1568, 1690], ["numpy.array", "numpy.maximum", "open().write", "range", "range", "open().write", "open().write", "resample_pairs_cal.resample_pairs_cal.resample_pairs_cal", "sklearn.utils.shuffle", "len", "math.ceil", "range", "open().write", "adhominem_o2d2.AdHominem_O2D2.evaluate_model", "open().write", "adhominem_o2d2.AdHominem_O2D2.store_parameters", "open", "str().split", "adhominem_o2d2.AdHominem_O2D2.next_batch", "len", "str().split", "str", "open", "open", "adhominem_o2d2.AdHominem_O2D2.doc2mat", "adhominem_o2d2.AdHominem_O2D2.doc2mat", "adhominem_o2d2.AdHominem_O2D2.update_model", "loss.append", "open().write", "open", "numpy.round", "open", "str", "str", "str", "datetime.datetime.now", "numpy.array", "numpy.round", "open", "datetime.datetime.now", "str", "str", "str", "round", "str", "str", "round", "str", "str", "float", "numpy.mean", "str", "str", "round", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.resample_pairs_cal.resample_pairs_cal", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.evaluate_model", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.store_parameters", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.next_batch", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.update_model"], ["", "", "def", "train_model", "(", "self", ",", "val_set", ",", "file_results", ",", "file_tmp", ",", "dir_results", ")", ":", "\n", "\n", "# total number of epochs", "\n", "        ", "epochs", "=", "self", ".", "hyper_parameters", "[", "'epochs'", "]", "\n", "\n", "# number of batches for dev/test set", "\n", "batch_size", "=", "self", ".", "hyper_parameters", "[", "'batch_size'", "]", "\n", "batch_size_val", "=", "self", ".", "hyper_parameters", "[", "'batch_size_val'", "]", "\n", "\n", "# dev set", "\n", "docs_L_val", ",", "docs_R_val", ",", "labels_val", "=", "val_set", "\n", "\n", "# define learning rate", "\n", "epoch_1", "=", "0", "\n", "epoch_2", "=", "self", ".", "hyper_parameters", "[", "'lr_epoch'", "]", "\n", "lr_1", "=", "self", ".", "hyper_parameters", "[", "'lr_start'", "]", "\n", "lr_2", "=", "self", ".", "hyper_parameters", "[", "'lr_end'", "]", "\n", "p", "=", "np", ".", "array", "(", "range", "(", "epochs", ")", ")", "\n", "m", "=", "(", "lr_2", "-", "lr_1", ")", "/", "(", "epoch_2", "-", "epoch_1", ")", "\n", "b", "=", "lr_1", "\n", "lr", "=", "np", ".", "maximum", "(", "m", "*", "p", "+", "b", ",", "lr_2", ")", "\n", "\n", "################", "\n", "# start training", "\n", "################", "\n", "open", "(", "file_tmp", ",", "'a'", ")", ".", "write", "(", "'Preprocessing steps done, start training...'", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "# store current time", "\n", "            ", "s", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "open", "(", "file_tmp", ",", "'a'", ")", ".", "write", "(", "'\\n\\n'", "+", "100", "*", "'-'", "+", "'\\n'", ")", "\n", "open", "(", "file_tmp", ",", "'a'", ")", ".", "write", "(", "'start epoch '", "+", "str", "(", "epoch", ")", "+", "': '", "+", "s", "+", "'\\n'", ")", "\n", "\n", "# load calibration (training) set", "\n", "docs_L_tr", ",", "docs_R_tr", ",", "labels_tr", "=", "resample_pairs_cal", "(", "file_results", ")", "\n", "# shuffle (again)", "\n", "docs_L_tr", ",", "docs_R_tr", ",", "labels_tr", "=", "shuffle", "(", "docs_L_tr", ",", "docs_R_tr", ",", "labels_tr", ")", "\n", "\n", "# number of training pairs", "\n", "N_tr", "=", "len", "(", "labels_tr", ")", "\n", "# number of batches for training", "\n", "num_batches_tr", "=", "ceil", "(", "N_tr", "/", "batch_size", ")", "\n", "\n", "# average loss and accuracy", "\n", "loss", "=", "[", "]", "\n", "\n", "# loop over all batches", "\n", "for", "i", "in", "range", "(", "num_batches_tr", ")", ":", "\n", "\n", "# get next batch", "\n", "                ", "docs_L_i", ",", "docs_R_i", ",", "labels_i", "=", "self", ".", "next_batch", "(", "i", "*", "batch_size", ",", "\n", "(", "i", "+", "1", ")", "*", "batch_size", ",", "\n", "docs_L_tr", ",", "\n", "docs_R_tr", ",", "\n", "labels_tr", ",", "\n", ")", "\n", "\n", "# current batch size", "\n", "B", "=", "len", "(", "labels_i", ")", "\n", "\n", "if", "B", ">", "0", ":", "\n", "# word / character embeddings", "\n", "                    ", "x_w_L", ",", "N_w_L", ",", "N_s_L", ",", "x_c_L", "=", "self", ".", "doc2mat", "(", "docs_L_i", ")", "\n", "x_w_R", ",", "N_w_R", ",", "N_s_R", ",", "x_c_R", "=", "self", ".", "doc2mat", "(", "docs_R_i", ")", "\n", "\n", "# update model parameters", "\n", "curr_loss", ",", "n_miss", "=", "self", ".", "update_model", "(", "x_w_L", "=", "x_w_L", ",", "\n", "x_w_R", "=", "x_w_R", ",", "\n", "x_c_L", "=", "x_c_L", ",", "\n", "x_c_R", "=", "x_c_R", ",", "\n", "labels", "=", "np", ".", "array", "(", "labels_i", ")", ",", "\n", "N_w_L", "=", "N_w_L", ",", "\n", "N_w_R", "=", "N_w_R", ",", "\n", "N_s_L", "=", "N_s_L", ",", "\n", "N_s_R", "=", "N_s_R", ",", "\n", "lr", "=", "lr", "[", "epoch", "]", ",", "\n", ")", "\n", "\n", "# add to lists", "\n", "loss", ".", "append", "(", "curr_loss", ")", "\n", "\n", "s", "=", "'Epoch:'", "+", "str", "(", "epoch", ")", "+", "', BatchSize: '", "+", "str", "(", "round", "(", "100", "*", "(", "i", "+", "1", ")", "/", "num_batches_tr", ",", "0", ")", ")", "+", "', #Pairs: '", "+", "str", "(", "N_tr", ")", "+", "', Loss: '", "+", "str", "(", "round", "(", "float", "(", "np", ".", "mean", "(", "loss", ")", ")", ",", "3", ")", ")", "+", "', LernRate: '", "+", "str", "(", "round", "(", "lr", "[", "epoch", "]", ",", "5", ")", ")", "+", "', #NonResponse: '", "+", "str", "(", "np", ".", "round", "(", "n_miss", ",", "3", ")", ")", "\n", "open", "(", "file_tmp", ",", "'a'", ")", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "\n", "####################", "\n", "# compute accuracies", "\n", "####################", "\n", "", "", "open", "(", "file_tmp", ",", "'a'", ")", ".", "write", "(", "'Epoch training done, start inference...'", ")", "\n", "pan_val_dml", ",", "pan_val_bfs", ",", "pan_val_ual", ",", "pan_val_o2d2", ",", "calibration_val_dml", ",", "calibration_val_bfs", ",", "calibration_val_ual", ",", "calibration_val_o2d2", ",", "n_miss", "=", "self", ".", "evaluate_model", "(", "docs_L_val", ",", "docs_R_val", ",", "labels_val", ",", "batch_size_val", ")", "\n", "\n", "#####################", "\n", "# update progress bar", "\n", "#####################", "\n", "time", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "s", "=", "'\\n Time: '", "+", "str", "(", "time", ")", "+", "'\\n Epoch: '", "+", "str", "(", "epoch", ")", "+", "'\\n ----------'", "+", "'\\n PAN scores (dml, val): '", "+", "str", "(", "pan_val_dml", ")", "+", "'\\n PAN scores (bfs, val): '", "+", "str", "(", "pan_val_bfs", ")", "+", "'\\n PAN scores (ual, val): '", "+", "str", "(", "pan_val_ual", ")", "+", "'\\n PAN scores (o2d2, val): '", "+", "str", "(", "pan_val_o2d2", ")", "+", "'\\n ----------'", "+", "'\\n Calibration scores (dml, val): '", "+", "str", "(", "calibration_val_dml", ")", "+", "'\\n Calibration scores (bfs, val): '", "+", "str", "(", "calibration_val_bfs", ")", "+", "'\\n Calibration scores (ual, val): '", "+", "str", "(", "calibration_val_ual", ")", "+", "'\\n Calibration scores (o2d2, val): '", "+", "str", "(", "calibration_val_o2d2", ")", "+", "'\\n ----------'", "+", "'\\n # Non-responses: '", "+", "str", "(", "np", ".", "round", "(", "n_miss", ",", "3", ")", ")", "\n", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "\n", "##########################", "\n", "# store weights/parameters", "\n", "##########################", "\n", "self", ".", "store_parameters", "(", "epoch", ",", "dir_results", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.train_o2d2.main": [[8, 100], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "os.path.join", "len", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "open().write", "sorted", "adhominem_o2d2.AdHominem_O2D2", "adhominem_o2d2.AdHominem_O2D2.train_model", "adhominem_o2d2.AdHominem_O2D2.sess.close", "argparse.ArgumentParser.parse_args", "os.path.exists", "os.makedirs", "open", "pickle.load", "open", "pickle.load", "os.remove", "os.remove", "parameters[].keys", "os.path.join", "os.path.join", "open", "open().write", "open().write", "str", "open", "open", "str", "str", "len"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.train_model"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'AdHominem for PAN 2020 and 2021'", ")", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-thr_0'", ",", "default", "=", "0.3", ",", "type", "=", "float", ")", "# lower threshold for O2D2", "\n", "parser", ".", "add_argument", "(", "'-thr_1'", ",", "default", "=", "0.7", ",", "type", "=", "float", ")", "# upper threshold for O2D2", "\n", "parser", ".", "add_argument", "(", "'-epoch_trained'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "# best epoch of trained AdHominem model", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-lr_start'", ",", "default", "=", "0.001", ",", "type", "=", "float", ")", "# initial learning rate", "\n", "parser", ".", "add_argument", "(", "'-lr_end'", ",", "default", "=", "0.0005", ",", "type", "=", "float", ")", "# lower bound for learning rate", "\n", "parser", ".", "add_argument", "(", "'-lr_epoch'", ",", "default", "=", "100", ",", "type", "=", "float", ")", "# epoch, when achieving the lower bound", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-epochs'", ",", "default", "=", "60", ",", "type", "=", "int", ")", "# total number of epochs", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "default", "=", "30", ",", "type", "=", "int", ")", "# batch size for training", "\n", "parser", ".", "add_argument", "(", "'-batch_size_val'", ",", "default", "=", "30", ",", "type", "=", "int", ")", "# batch size for evaluation", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-retrain_chr_emb'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "# retrain certain layers", "\n", "parser", ".", "add_argument", "(", "'-retrain_wrd_emb'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'-retrain_cnn'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'-retrain_bilstm'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'-retrain_dml'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'-retrain_loss_dml'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'-retrain_bfs'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'-retrain_ual'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_cnn'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "# apply dropout when computing LEVs", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_lstm'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_att'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_metric'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_bfs'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_ual'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-rate_o2d2'", ",", "default", "=", "0.25", ",", "type", "=", "float", ")", "# O2D2 dropout rate", "\n", "#", "\n", "hyper_parameters_new", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "\n", "# create folder for results", "\n", "dir_results", "=", "os", ".", "path", ".", "join", "(", "'..'", ",", "'results_o2d2'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_results", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_results", ")", "\n", "\n", "# load trained model and hyper-parameters", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "\"..\"", ",", "\n", "\"results_adhominem\"", ",", "\n", "'weights_adhominem'", ",", "\n", "\"weights_\"", "+", "str", "(", "hyper_parameters_new", "[", "\"epoch_trained\"", "]", ")", ",", "\n", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "parameters", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# overwrite old variables", "\n", "", "for", "hyper_parameter", "in", "hyper_parameters_new", ":", "\n", "        ", "parameters", "[", "\"hyper_parameters\"", "]", "[", "hyper_parameter", "]", "=", "hyper_parameters_new", "[", "hyper_parameter", "]", "\n", "\n", "# load validation set", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'data_preprocessed'", ",", "\"pairs_val\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "docs_L", ",", "docs_R", ",", "labels", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "val_set", "=", "(", "docs_L", ",", "docs_R", ",", "labels", ")", "\n", "parameters", "[", "\"hyper_parameters\"", "]", "[", "'N_val'", "]", "=", "len", "(", "labels", ")", "\n", "\n", "# file to store results epoch-wise", "\n", "file_results", "=", "os", ".", "path", ".", "join", "(", "dir_results", ",", "'results.txt'", ")", "\n", "# temporary file to store results batch-wise", "\n", "file_tmp", "=", "os", ".", "path", ".", "join", "(", "dir_results", ",", "'tmp.txt'", ")", "\n", "\n", "# delete already existing files", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_results", ")", ":", "\n", "        ", "os", ".", "remove", "(", "file_results", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "file_tmp", ")", ":", "\n", "        ", "os", ".", "remove", "(", "file_tmp", ")", "\n", "\n", "# write hyper-parameters setup into file (results.txt)", "\n", "", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "'\\n'", "\n", "+", "'--------------------------------------------------------------------------------'", "\n", "+", "'\\nPARAMETER SETUP:\\n'", "\n", "+", "'--------------------------------------------------------------------------------'", "\n", "+", "'\\n'", "\n", ")", "\n", "for", "hp", "in", "sorted", "(", "parameters", "[", "\"hyper_parameters\"", "]", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "hp", "in", "[", "'V_c'", ",", "'V_w'", "]", ":", "\n", "            ", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "'num '", "+", "hp", "+", "': '", "+", "str", "(", "len", "(", "parameters", "[", "\"hyper_parameters\"", "]", "[", "hp", "]", ")", ")", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "hp", "+", "': '", "+", "str", "(", "parameters", "[", "\"hyper_parameters\"", "]", "[", "hp", "]", ")", "+", "'\\n'", ")", "\n", "\n", "# load neural network model", "\n", "", "", "adhominem_o2d2", "=", "AdHominem_O2D2", "(", "hyper_parameters", "=", "parameters", "[", "'hyper_parameters'", "]", ",", "\n", "theta_init", "=", "parameters", "[", "'theta'", "]", ",", "\n", "theta_E_init", "=", "parameters", "[", "'theta_E'", "]", ",", "\n", ")", "\n", "# start training", "\n", "adhominem_o2d2", ".", "train_model", "(", "val_set", ",", "file_results", ",", "file_tmp", ",", "dir_results", ")", "\n", "# close session", "\n", "adhominem_o2d2", ".", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_o2d2.resample_pairs_cal.resample_pairs_cal": [[14, 67], ["resample_pairs.sample_pairs_single_epoch", "range", "open().write", "open().write", "open().write", "open", "pickle.load", "len", "str", "str", "os.path.join", "os.path.join", "open", "numpy.sum", "open", "open", "str", "str", "numpy.sum", "numpy.array", "str", "str", "numpy.sum", "numpy.array", "str", "str", "numpy.sum", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.sample_pairs_single_epoch"], ["def", "resample_pairs_cal", "(", "file_results", ")", ":", "\n", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "\"..\"", ",", "\"data_preprocessed\"", ",", "'dict_author_fandom_doc_cal_tokenized'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "dict_author_fandom_doc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "########################################", "\n", "# sample fixed pairs for development set", "\n", "########################################", "\n", "", "docs_L", ",", "docs_R", ",", "labels_a", ",", "labels_c", "=", "sample_pairs_single_epoch", "(", "dict_author_fandom_doc", ",", "\n", "delta_1", "=", "0.95", ",", "\n", "delta_2", "=", "0.95", ",", "\n", "delta_3", "=", "0.7", ",", "\n", "only_SADF_and_DASF", "=", "False", ",", "\n", "make_balanced", "=", "True", ",", "\n", "balance_factor", "=", "1.5", ",", "\n", ")", "\n", "\n", "#######", "\n", "# check", "\n", "#######", "\n", "# counts", "\n", "dict_counts", "=", "{", "\"SA_SC\"", ":", "0", ",", "\n", "\"SA_DC\"", ":", "0", ",", "\n", "\"DA_SC\"", ":", "0", ",", "\n", "\"DA_DC\"", ":", "0", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "docs_L", ")", ")", ":", "\n", "\n", "        ", "if", "labels_a", "[", "i", "]", "==", "1", "and", "labels_c", "[", "i", "]", "==", "1", ":", "\n", "            ", "dict_counts", "[", "\"SA_SC\"", "]", "+=", "1", "\n", "", "if", "labels_a", "[", "i", "]", "==", "1", "and", "labels_c", "[", "i", "]", "==", "0", ":", "\n", "            ", "dict_counts", "[", "\"SA_DC\"", "]", "+=", "1", "\n", "", "if", "labels_a", "[", "i", "]", "==", "0", "and", "labels_c", "[", "i", "]", "==", "1", ":", "\n", "            ", "dict_counts", "[", "\"DA_SC\"", "]", "+=", "1", "\n", "", "if", "labels_a", "[", "i", "]", "==", "0", "and", "labels_c", "[", "i", "]", "==", "0", ":", "\n", "            ", "dict_counts", "[", "\"DA_DC\"", "]", "+=", "1", "\n", "\n", "", "", "s", "=", "\"-----\"", "\n", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "'\\n'", "+", "s", "+", "'\\n'", ")", "\n", "\n", "s", "=", "'# sampled pairs (cal) || a=0: '", "+", "str", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "labels_a", ")", "==", "0", ")", ")", "+", "', a=1: '", "+", "str", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "labels_a", ")", "==", "1", ")", ")", "+", "', c=0: '", "+", "str", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "labels_c", ")", "==", "0", ")", ")", "+", "', c=1: '", "+", "str", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "labels_c", ")", "==", "1", ")", ")", "\n", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "\n", "s", "=", "'SA_SC: '", "+", "str", "(", "dict_counts", "[", "\"SA_SC\"", "]", ")", "+", "', SA_DC: '", "+", "str", "(", "dict_counts", "[", "\"SA_DC\"", "]", ")", "+", "', DA_SC: '", "+", "str", "(", "dict_counts", "[", "\"DA_SC\"", "]", ")", "+", "', DA_DC: '", "+", "str", "(", "dict_counts", "[", "\"DA_DC\"", "]", ")", "\n", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "s", "+", "'\\n\\n'", ")", "\n", "\n", "return", "docs_L", ",", "docs_R", ",", "labels_a", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.resample_pairs_train.resample_pairs_train": [[14, 67], ["resample_pairs.sample_pairs_single_epoch", "range", "open().write", "open().write", "open().write", "open", "pickle.load", "len", "str", "str", "os.path.join", "os.path.join", "open", "numpy.sum", "open", "open", "str", "str", "numpy.sum", "numpy.array", "str", "str", "numpy.sum", "numpy.array", "str", "str", "numpy.sum", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.sample_pairs_single_epoch"], ["def", "resample_pairs_train", "(", "file_results", ")", ":", "\n", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "\"..\"", ",", "\"data_preprocessed\"", ",", "'dict_author_fandom_doc_train_tokenized'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "dict_author_fandom_doc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "########################################", "\n", "# sample fixed pairs for development set", "\n", "########################################", "\n", "", "docs_L", ",", "docs_R", ",", "labels_a", ",", "labels_c", "=", "sample_pairs_single_epoch", "(", "dict_author_fandom_doc", ",", "\n", "delta_1", "=", "0.7", ",", "\n", "delta_2", "=", "0.6", ",", "\n", "delta_3", "=", "0.6", ",", "\n", "only_SADF_and_DASF", "=", "False", ",", "\n", "make_balanced", "=", "False", ",", "\n", "balance_factor", "=", "1.0", ",", "\n", ")", "\n", "\n", "#######", "\n", "# check", "\n", "#######", "\n", "# counts", "\n", "dict_counts", "=", "{", "\"SA_SC\"", ":", "0", ",", "\n", "\"SA_DC\"", ":", "0", ",", "\n", "\"DA_SC\"", ":", "0", ",", "\n", "\"DA_DC\"", ":", "0", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "docs_L", ")", ")", ":", "\n", "\n", "        ", "if", "labels_a", "[", "i", "]", "==", "1", "and", "labels_c", "[", "i", "]", "==", "1", ":", "\n", "            ", "dict_counts", "[", "\"SA_SC\"", "]", "+=", "1", "\n", "", "if", "labels_a", "[", "i", "]", "==", "1", "and", "labels_c", "[", "i", "]", "==", "0", ":", "\n", "            ", "dict_counts", "[", "\"SA_DC\"", "]", "+=", "1", "\n", "", "if", "labels_a", "[", "i", "]", "==", "0", "and", "labels_c", "[", "i", "]", "==", "1", ":", "\n", "            ", "dict_counts", "[", "\"DA_SC\"", "]", "+=", "1", "\n", "", "if", "labels_a", "[", "i", "]", "==", "0", "and", "labels_c", "[", "i", "]", "==", "0", ":", "\n", "            ", "dict_counts", "[", "\"DA_DC\"", "]", "+=", "1", "\n", "\n", "", "", "s", "=", "\"-----\"", "\n", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "'\\n'", "+", "s", "+", "'\\n'", ")", "\n", "\n", "s", "=", "'# sampled pairs (train) || a=0: '", "+", "str", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "labels_a", ")", "==", "0", ")", ")", "+", "', a=1: '", "+", "str", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "labels_a", ")", "==", "1", ")", ")", "+", "', c=0: '", "+", "str", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "labels_c", ")", "==", "0", ")", ")", "+", "', c=1: '", "+", "str", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "labels_c", ")", "==", "1", ")", ")", "\n", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "\n", "s", "=", "'SA_SC: '", "+", "str", "(", "dict_counts", "[", "\"SA_SC\"", "]", ")", "+", "', SA_DC: '", "+", "str", "(", "dict_counts", "[", "\"SA_DC\"", "]", ")", "+", "', DA_SC: '", "+", "str", "(", "dict_counts", "[", "\"DA_SC\"", "]", ")", "+", "', DA_DC: '", "+", "str", "(", "dict_counts", "[", "\"DA_DC\"", "]", ")", "\n", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "s", "+", "'\\n\\n'", ")", "\n", "\n", "return", "docs_L", ",", "docs_R", ",", "labels_a", ",", "labels_c", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.train_adhominem.main": [[8, 112], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "os.path.join", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "open().write", "sorted", "adhominem.AdHominem", "adhominem.AdHominem.train_model", "adhominem.AdHominem.sess.close", "argparse.ArgumentParser.parse_args", "os.path.exists", "os.makedirs", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "os.remove", "os.remove", "vars.keys", "os.path.join", "str", "str", "open", "open().write", "open().write", "str", "open", "open", "str", "str", "len"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.train_model"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'AdHominem for PAN 2020 and 2021'", ")", "\n", "parser", ".", "add_argument", "(", "'-D_c'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "# character embedding dimension", "\n", "parser", ".", "add_argument", "(", "'-D_r'", ",", "default", "=", "30", ",", "type", "=", "int", ")", "# character representation dimension", "\n", "parser", ".", "add_argument", "(", "'-D_w'", ",", "default", "=", "300", ",", "type", "=", "int", ")", "# dimension of word embeddings", "\n", "parser", ".", "add_argument", "(", "'-D_s'", ",", "default", "=", "50", ",", "type", "=", "int", ")", "# dimension of sentence embeddings", "\n", "parser", ".", "add_argument", "(", "'-D_d'", ",", "default", "=", "50", ",", "type", "=", "int", ")", "# dimension of document embedding", "\n", "parser", ".", "add_argument", "(", "'-D_lev'", ",", "default", "=", "60", ",", "type", "=", "int", ")", "# LEV dimension", "\n", "parser", ".", "add_argument", "(", "'-D_plda'", ",", "default", "=", "40", ",", "type", "=", "int", ")", "# dimension reduction for BFS", "\n", "parser", ".", "add_argument", "(", "'-w'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "# length of 1D-CNN sliding window", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-T_c'", ",", "default", "=", "15", ",", "type", "=", "int", ")", "# maximum number of characters per words", "\n", "parser", ".", "add_argument", "(", "'-T_w'", ",", "default", "=", "30", ",", "type", "=", "int", ")", "# maximum number of words per sentence", "\n", "parser", ".", "add_argument", "(", "'-T_s'", ",", "default", "=", "210", ",", "type", "=", "int", ")", "# maximum number of sentences per document", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-t_s'", ",", "default", "=", "0.91", ",", "type", "=", "float", ")", "# boundary for similar pairs", "\n", "parser", ".", "add_argument", "(", "'-t_d'", ",", "default", "=", "0.09", ",", "type", "=", "float", ")", "# boundary for dissimilar pairs", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-lr_start'", ",", "default", "=", "0.0006", ",", "type", "=", "float", ")", "# initial learning rate", "\n", "parser", ".", "add_argument", "(", "'-lr_end'", ",", "default", "=", "0.0002", ",", "type", "=", "float", ")", "# lower bound for learning rate", "\n", "parser", ".", "add_argument", "(", "'-lr_epoch'", ",", "default", "=", "30", ",", "type", "=", "float", ")", "# epoch, when approaching the lower bound", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-epochs'", ",", "default", "=", "35", ",", "type", "=", "int", ")", "# total number of epochs", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "default", "=", "40", ",", "type", "=", "int", ")", "# batch size for training", "\n", "parser", ".", "add_argument", "(", "'-batch_size_dev'", ",", "default", "=", "40", ",", "type", "=", "int", ")", "# batch size for evaluation", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_cnn'", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "# dropout for 1D-CNN", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_lstm'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "# variational dropout for BiLSTM layer", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_att'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "# dropout for attention layer", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_metric'", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "# dropout for final DML layer", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_bfs'", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "# dropout for BFS layer", "\n", "parser", ".", "add_argument", "(", "'-keep_prob_ual'", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "# dropout for UAL layer", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-train_kernel'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "# train kernel parameters for DML", "\n", "parser", ".", "add_argument", "(", "'-reg_ual'", ",", "default", "=", "0.105", ",", "type", "=", "float", ")", "# regularization hyper-parameter for UAL", "\n", "parser", ".", "add_argument", "(", "'-stop_gradient_bfs'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "# backprop of bfs loss", "\n", "parser", ".", "add_argument", "(", "'-stop_gradient_ual'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "# backprop of ual loss", "\n", "parser", ".", "add_argument", "(", "'-gsl_bfs'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "# gradient scaling (only if stop_gradient_bfs=False)", "\n", "parser", ".", "add_argument", "(", "'-gsl_ual'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "# gradient scaling (only if stop_gradient_ual=False)", "\n", "#", "\n", "parser", ".", "add_argument", "(", "'-hop_length'", ",", "default", "=", "26", ",", "type", "=", "int", ")", "# hop length for sliding windowing", "\n", "parser", ".", "add_argument", "(", "'-num_wrd_embeddings'", ",", "default", "=", "5000", ",", "type", "=", "int", ")", "# vocabulary size for tokens", "\n", "parser", ".", "add_argument", "(", "'-num_chr_embeddings'", ",", "default", "=", "300", ",", "type", "=", "int", ")", "# vocabulary size for characters", "\n", "#", "\n", "hyper_parameters", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "\n", "# create folder for results", "\n", "dir_results", "=", "os", ".", "path", ".", "join", "(", "'..'", ",", "'results_adhominem'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_results", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_results", ")", "\n", "\n", "# load dev set", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'data_preprocessed'", ",", "\"pairs_dev\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "docs_L", ",", "docs_R", ",", "labels", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "dev_set", "=", "(", "docs_L", ",", "docs_R", ",", "labels", ")", "\n", "hyper_parameters", "[", "'N_dev'", "]", "=", "len", "(", "labels", ")", "\n", "\n", "# load vocabularies and initialized word embeddings", "\n", "path_wrd", "=", "os", ".", "path", ".", "join", "(", "'..'", ",", "'data_preprocessed'", ",", "\n", "'vocab_wrd_'", "+", "str", "(", "hyper_parameters", "[", "'num_wrd_embeddings'", "]", ")", "\n", "+", "\"_\"", "+", "str", "(", "hyper_parameters", "[", "'D_w'", "]", ")", ")", "\n", "with", "open", "(", "path_wrd", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "V_w", ",", "E_w", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "path_chr", "=", "os", ".", "path", ".", "join", "(", "'..'", ",", "'data_preprocessed'", ",", "'vocab_chr_'", "+", "str", "(", "hyper_parameters", "[", "'num_chr_embeddings'", "]", ")", ")", "\n", "with", "open", "(", "path_chr", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "V_c", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# add vocabularies to dictionary", "\n", "", "hyper_parameters", "[", "'V_w'", "]", "=", "V_w", "\n", "hyper_parameters", "[", "'V_c'", "]", "=", "V_c", "\n", "\n", "# file to store results epoch-wise", "\n", "file_results", "=", "os", ".", "path", ".", "join", "(", "dir_results", ",", "'results.txt'", ")", "\n", "# temporary file to store results batch-wise", "\n", "file_tmp", "=", "os", ".", "path", ".", "join", "(", "dir_results", ",", "'tmp.txt'", ")", "\n", "\n", "# delete already existing files", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_results", ")", ":", "\n", "        ", "os", ".", "remove", "(", "file_results", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "file_tmp", ")", ":", "\n", "        ", "os", ".", "remove", "(", "file_tmp", ")", "\n", "\n", "# write hyper-parameters setup into file (results.txt)", "\n", "", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "'\\n'", "\n", "+", "'--------------------------------------------------------------------------------'", "\n", "+", "'\\nPARAMETER SETUP:\\n'", "\n", "+", "'--------------------------------------------------------------------------------'", "\n", "+", "'\\n'", "\n", ")", "\n", "for", "hp", "in", "sorted", "(", "hyper_parameters", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "hp", "in", "[", "'V_c'", ",", "'V_w'", "]", ":", "\n", "            ", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "'num '", "+", "hp", "+", "': '", "+", "str", "(", "len", "(", "hyper_parameters", "[", "hp", "]", ")", ")", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "hp", "+", "': '", "+", "str", "(", "hyper_parameters", "[", "hp", "]", ")", "+", "'\\n'", ")", "\n", "\n", "# load neural network model", "\n", "", "", "adhominem", "=", "AdHominem", "(", "hyper_parameters", "=", "hyper_parameters", ",", "\n", "E_w_init", "=", "E_w", ",", "\n", ")", "\n", "# start training", "\n", "adhominem", ".", "train_model", "(", "dev_set", ",", "file_results", ",", "file_tmp", ",", "dir_results", ")", "\n", "# close session", "\n", "adhominem", ".", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.__init__": [[48, 168], ["tensorflow.reset_default_graph", "adhominem.AdHominem.initialize_placeholders", "adhominem.AdHominem.initialize_parameters", "adhominem.AdHominem.initialize_dropout", "adhominem.AdHominem.ual_layer", "adhominem.AdHominem.loss_function_dml", "adhominem.AdHominem.loss_function_bfs", "adhominem.AdHominem.loss_function_dml", "adhominem.AdHominem.loss_function_bfs", "adhominem.AdHominem.prepare_optimizer", "tensorflow.Session", "adhominem.AdHominem.sess.run", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "adhominem.AdHominem.feature_extraction", "tensorflow.variable_scope", "adhominem.AdHominem.metric_layer", "tensorflow.variable_scope", "adhominem.AdHominem.metric_layer", "tensorflow.variable_scope", "adhominem.AdHominem.compute_kernel_distance", "tensorflow.variable_scope", "adhominem.AdHominem.compute_kernel_distance", "tensorflow.variable_scope", "adhominem.AdHominem.bfs_layer", "tensorflow.variable_scope", "adhominem.AdHominem.bfs_layer", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_placeholders", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_parameters", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_dropout", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.ual_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.loss_function_dml", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.loss_function_bfs", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.loss_function_dml", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.loss_function_bfs", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.prepare_optimizer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.feature_extraction", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.metric_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.metric_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_kernel_distance", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_kernel_distance", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bfs_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bfs_layer"], ["def", "__init__", "(", "self", ",", "hyper_parameters", ",", "E_w_init", ")", ":", "\n", "\n", "# reset graph", "\n", "        ", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "# hyper-parameters", "\n", "self", ".", "hyper_parameters", "=", "hyper_parameters", "\n", "\n", "# placeholders for input variables", "\n", "self", ".", "placeholders", ",", "self", ".", "thetas_E", "=", "self", ".", "initialize_placeholders", "(", "E_w_init", ")", "\n", "\n", "# batch size", "\n", "self", ".", "B", "=", "tf", ".", "shape", "(", "self", ".", "placeholders", "[", "'e_w_L'", "]", ")", "[", "0", "]", "\n", "\n", "# trainable parameters", "\n", "self", ".", "theta", "=", "self", ".", "initialize_parameters", "(", ")", "\n", "# initialize dropout", "\n", "self", ".", "dropout", "=", "self", ".", "initialize_dropout", "(", ")", "\n", "\n", "##########################################", "\n", "# document embeddings (feature extraction)", "\n", "##########################################", "\n", "with", "tf", ".", "variable_scope", "(", "'feature_extraction_doc2vec'", ")", ":", "\n", "            ", "e_c", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'e_c_L'", "]", ",", "self", ".", "placeholders", "[", "'e_c_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "e_w", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'e_w_L'", "]", ",", "self", ".", "placeholders", "[", "'e_w_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "N_w", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'N_w_L'", "]", ",", "self", ".", "placeholders", "[", "'N_w_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "N_s", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'N_s_L'", "]", ",", "self", ".", "placeholders", "[", "'N_s_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "# doc2vec", "\n", "e_d", "=", "self", ".", "feature_extraction", "(", "e_c", ",", "e_w", ",", "N_w", ",", "N_s", ")", "\n", "\n", "############################", "\n", "# deep metric learning (DML)", "\n", "############################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'deep_metric_learning_a'", ")", ":", "\n", "            ", "self", ".", "lev_a_L", ",", "self", ".", "lev_a_R", "=", "self", ".", "metric_layer", "(", "e_d", ",", "\n", "self", ".", "dropout", "[", "'metric_a'", "]", ",", "\n", "self", ".", "theta", "[", "'metric_a'", "]", ",", "\n", "stop_gradient", "=", "False", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'deep_metric_learning_f'", ")", ":", "\n", "            ", "self", ".", "lev_f_L", ",", "self", ".", "lev_f_R", "=", "self", ".", "metric_layer", "(", "e_d", ",", "\n", "self", ".", "dropout", "[", "'metric_f'", "]", ",", "\n", "self", ".", "theta", "[", "'metric_f'", "]", ",", "\n", "stop_gradient", "=", "True", ",", "\n", ")", "\n", "\n", "###################################################", "\n", "# kernel distance for probabilstic contrastive loss", "\n", "###################################################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Euclidean_distance_and_kernel_function_a'", ")", ":", "\n", "            ", "self", ".", "pred_dml_a", "=", "self", ".", "compute_kernel_distance", "(", "self", ".", "lev_a_L", ",", "self", ".", "lev_a_R", ",", "\n", "alpha", "=", "self", ".", "theta", "[", "\"loss_dml_a\"", "]", "[", "\"alpha\"", "]", ",", "\n", "beta", "=", "self", ".", "theta", "[", "\"loss_dml_a\"", "]", "[", "\"beta\"", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Euclidean_distance_and_kernel_function_f'", ")", ":", "\n", "            ", "self", ".", "pred_dml_f", "=", "self", ".", "compute_kernel_distance", "(", "self", ".", "lev_f_L", ",", "self", ".", "lev_f_R", ",", "\n", "alpha", "=", "0.09", ",", "\n", "beta", "=", "3.0", "/", "2.0", ",", "\n", ")", "\n", "\n", "##################################", "\n", "# Bayes factor scoring (BFS) layer", "\n", "##################################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Bayes_factor_scoring_a'", ")", ":", "\n", "            ", "self", ".", "scores_bfs_a", ",", "self", ".", "pred_bfs_a", ",", "self", ".", "H_W_a", ",", "self", ".", "H_B_a", "=", "self", ".", "bfs_layer", "(", "self", ".", "lev_a_L", ",", "\n", "self", ".", "lev_a_R", ",", "\n", "self", ".", "theta", "[", "'bfs_a_1'", "]", ",", "\n", "self", ".", "theta", "[", "'bfs_a_2'", "]", ",", "\n", "self", ".", "dropout", "[", "'bfs_a'", "]", ",", "\n", "stop_gradient", "=", "self", ".", "hyper_parameters", "[", "\"stop_gradient_bfs\"", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Bayes_factor_scoring_f'", ")", ":", "\n", "            ", "self", ".", "scores_bfs_f", ",", "self", ".", "pred_bfs_f", ",", "self", ".", "H_W_f", ",", "self", ".", "H_B_f", "=", "self", ".", "bfs_layer", "(", "self", ".", "lev_f_L", ",", "\n", "self", ".", "lev_f_R", ",", "\n", "self", ".", "theta", "[", "'bfs_f_1'", "]", ",", "\n", "self", ".", "theta", "[", "'bfs_f_2'", "]", ",", "\n", "self", ".", "dropout", "[", "'bfs_f'", "]", ",", "\n", "stop_gradient", "=", "self", ".", "hyper_parameters", "[", "\"stop_gradient_bfs\"", "]", ",", "\n", ")", "\n", "\n", "####################################", "\n", "# uncertainty adaptation layer (UAL)", "\n", "####################################", "\n", "", "self", ".", "loss_ual_a", ",", "self", ".", "reg_ual_a", ",", "self", ".", "pred_ual_a", ",", "self", ".", "conf_matrix_a", "=", "self", ".", "ual_layer", "(", "self", ".", "theta", "[", "'ual_a'", "]", ",", "\n", "self", ".", "dropout", "[", "'ual_a'", "]", ",", "\n", "self", ".", "pred_bfs_a", ",", "\n", "self", ".", "lev_a_L", ",", "\n", "self", ".", "lev_a_R", ",", "\n", "stop_gradient", "=", "self", ".", "hyper_parameters", "[", "\"stop_gradient_ual\"", "]", ",", "\n", ")", "\n", "\n", "##############################", "\n", "# loss functions and optimizer", "\n", "##############################", "\n", "\n", "# loss functions for authorship", "\n", "self", ".", "loss_metric_a", "=", "self", ".", "loss_function_dml", "(", "pred", "=", "self", ".", "pred_dml_a", ",", "labels", "=", "self", ".", "placeholders", "[", "'labels_a'", "]", ")", "\n", "self", ".", "loss_plda_a", "=", "self", ".", "loss_function_bfs", "(", "scores", "=", "self", ".", "scores_bfs_a", ",", "labels", "=", "self", ".", "placeholders", "[", "'labels_a'", "]", ")", "\n", "self", ".", "loss_ual_a", "=", "self", ".", "loss_ual_a", "+", "self", ".", "hyper_parameters", "[", "'reg_ual'", "]", "*", "self", ".", "reg_ual_a", "\n", "self", ".", "loss_a", "=", "self", ".", "loss_metric_a", "+", "self", ".", "loss_plda_a", "+", "self", ".", "loss_ual_a", "\n", "\n", "# loss functions for fandoms", "\n", "self", ".", "loss_metric_f", "=", "self", ".", "loss_function_dml", "(", "pred", "=", "self", ".", "pred_dml_f", ",", "labels", "=", "self", ".", "placeholders", "[", "'labels_f'", "]", ")", "\n", "self", ".", "loss_plda_f", "=", "self", ".", "loss_function_bfs", "(", "scores", "=", "self", ".", "scores_bfs_f", ",", "labels", "=", "self", ".", "placeholders", "[", "'labels_f'", "]", ")", "\n", "self", ".", "loss_f", "=", "self", ".", "loss_metric_f", "+", "self", ".", "loss_plda_f", "\n", "\n", "# joint loss", "\n", "self", ".", "loss", "=", "self", ".", "loss_a", "+", "self", ".", "loss_f", "\n", "\n", "# optimizer", "\n", "self", ".", "optimizer", ",", "self", ".", "step", "=", "self", ".", "prepare_optimizer", "(", ")", "\n", "\n", "################", "\n", "# launch session", "\n", "################", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.scale_gradient": [[172, 177], ["tensorflow.stop_gradient", "tensorflow.cast", "tensorflow.cast"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "scale_gradient", "(", "x", ",", "gsl_beta", "=", "1.0", ")", ":", "\n", "        ", "forward_path", "=", "tf", ".", "stop_gradient", "(", "x", "*", "tf", ".", "cast", "(", "1.0", "-", "gsl_beta", ",", "tf", ".", "float32", ")", ")", "\n", "backward_path", "=", "x", "*", "tf", ".", "cast", "(", "gsl_beta", ",", "tf", ".", "float32", ")", "\n", "return", "forward_path", "+", "backward_path", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.ual_layer": [[181, 235], ["tensorflow.reshape", "tensorflow.square", "tensorflow.cond", "tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh", "tensorflow.cond", "tensorflow.nn.xw_plus_b", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.reduce_mean", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "adhominem.AdHominem.scale_gradient", "adhominem.AdHominem.scale_gradient", "adhominem.AdHominem.scale_gradient", "tensorflow.cast", "tensorflow.equal", "tensorflow.equal", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply", "tensorflow.subtract", "tensorflow.expand_dims", "tensorflow.log", "tensorflow.range", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.scale_gradient", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.scale_gradient", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.scale_gradient"], ["", "def", "ual_layer", "(", "self", ",", "theta", ",", "dropout", ",", "pred_bfs", ",", "lev_L", ",", "lev_R", ",", "stop_gradient", "=", "True", ")", ":", "\n", "\n", "        ", "if", "stop_gradient", ":", "\n", "            ", "lev_L", "=", "tf", ".", "stop_gradient", "(", "lev_L", ")", "\n", "lev_R", "=", "tf", ".", "stop_gradient", "(", "lev_R", ")", "\n", "pred_bfs", "=", "tf", ".", "stop_gradient", "(", "pred_bfs", ")", "\n", "", "else", ":", "\n", "            ", "lev_L", "=", "self", ".", "scale_gradient", "(", "lev_L", ",", "gsl_beta", "=", "self", ".", "hyper_parameters", "[", "'gsl_ual'", "]", ")", "\n", "lev_R", "=", "self", ".", "scale_gradient", "(", "lev_R", ",", "gsl_beta", "=", "self", ".", "hyper_parameters", "[", "'gsl_ual'", "]", ")", "\n", "pred_bfs", "=", "self", ".", "scale_gradient", "(", "pred_bfs", ",", "gsl_beta", "=", "self", ".", "hyper_parameters", "[", "'gsl_ual'", "]", ")", "\n", "\n", "", "labels", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "self", ".", "placeholders", "[", "'labels_a'", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "shape", "=", "[", "self", ".", "B", "]", ")", "\n", "\n", "y", "=", "tf", ".", "square", "(", "lev_L", "-", "lev_R", ")", "\n", "\n", "# apply dropout", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "y", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout", "[", "'ual_1'", "]", ",", "y", ")", ",", "\n", "lambda", ":", "y", ",", "\n", ")", "\n", "\n", "# dense layer", "\n", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W1\"", "]", ",", "theta", "[", "\"b1\"", "]", ")", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "# apply dropout", "\n", "y", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout", "[", "'ual_2'", "]", ",", "y", ")", ",", "\n", "lambda", ":", "y", ",", "\n", ")", "\n", "\n", "# compute confusion matrix, shape = [B, 2 * 2]", "\n", "logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W2\"", "]", ",", "theta", "[", "\"b2\"", "]", ")", "\n", "# shape = [B, 2, 2]", "\n", "logits", "=", "tf", ".", "reshape", "(", "logits", ",", "shape", "=", "[", "-", "1", ",", "2", ",", "2", "]", ")", "\n", "\n", "conf_matrix", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "pred_bfs", "=", "tf", ".", "concat", "(", "[", "tf", ".", "subtract", "(", "1.0", ",", "pred_bfs", ")", ",", "pred_bfs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# uncertainty adaptation, shape = [B, 2, 2] --> [B, 2]", "\n", "pred_ual", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "conf_matrix", ",", "tf", ".", "expand_dims", "(", "pred_bfs", ",", "axis", "=", "2", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "# maximum entropy regularization", "\n", "p", "=", "tf", ".", "maximum", "(", "tf", ".", "reshape", "(", "conf_matrix", ",", "shape", "=", "[", "self", ".", "B", ",", "4", "]", ")", ",", "1e-6", ")", "\n", "reg", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "log", "(", "p", ")", ",", "p", ")", ",", "axis", "=", "1", ")", "\n", "reg", "=", "tf", ".", "reduce_mean", "(", "reg", ")", "\n", "\n", "# loss", "\n", "idx", "=", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "0", ",", "self", ".", "B", ",", "1", ")", ",", "labels", "]", ",", "axis", "=", "1", ")", "\n", "loss_ual", "=", "tf", ".", "gather_nd", "(", "pred_ual", ",", "idx", ")", "\n", "loss_ual", "=", "tf", ".", "reduce_mean", "(", "-", "tf", ".", "log", "(", "loss_ual", "+", "1e-8", ")", ")", "\n", "\n", "return", "loss_ual", ",", "reg", ",", "pred_ual", ",", "conf_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.prepare_optimizer": [[239, 252], ["tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.compute_gradients", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.clip_by_norm"], "methods", ["None"], ["", "def", "prepare_optimizer", "(", "self", ")", ":", "\n", "\n", "# global step counter", "\n", "        ", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ",", "trainable", "=", "False", ")", "\n", "# optimizer", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "placeholders", "[", "'lr'", "]", ")", "\n", "\n", "# local gradient normalization", "\n", "grads_and_vars", "=", "opt", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "clipped_grads_and_vars", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "5.0", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "]", "\n", "optimizer", "=", "opt", ".", "apply_gradients", "(", "clipped_grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "\n", "return", "optimizer", ",", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.metric_layer": [[256, 280], ["tensorflow.concat", "tensorflow.cond", "tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh", "tensorflow.stop_gradient", "tensorflow.equal", "tensorflow.constant", "tensorflow.multiply"], "methods", ["None"], ["", "def", "metric_layer", "(", "self", ",", "e_d", ",", "dropout", ",", "theta", ",", "stop_gradient", "=", "False", ")", ":", "\n", "\n", "        ", "if", "stop_gradient", ":", "\n", "            ", "e_d", "=", "tf", ".", "stop_gradient", "(", "e_d", ")", "\n", "\n", "", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "dropout_mask", "=", "tf", ".", "concat", "(", "[", "dropout", "[", "'metric_1'", "]", ",", "\n", "dropout", "[", "'metric_1'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "# apply dropout", "\n", "y", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_mask", ",", "e_d", ")", ",", "\n", "lambda", ":", "e_d", ",", "\n", ")", "\n", "# fully-connected layer", "\n", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "\n", "theta", "[", "'W'", "]", ",", "\n", "theta", "[", "'b'", "]", ",", "\n", ")", "\n", "# nonlinear output", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "return", "y", "[", ":", "self", ".", "B", ",", ":", "]", ",", "y", "[", "self", ".", "B", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.bfs_layer": [[284, 371], ["tensorflow.cond", "tensorflow.cond", "tensorflow.nn.xw_plus_b", "tensorflow.nn.xw_plus_b", "tensorflow.nn.relu", "tensorflow.nn.relu", "adhominem.AdHominem.bfs_layer.makeS"], "methods", ["None"], ["", "def", "bfs_layer", "(", "self", ",", "lev_L", ",", "lev_R", ",", "theta_bfs_1", ",", "theta_bfs_2", ",", "dropout", ",", "stop_gradient", "=", "True", ")", ":", "\n", "\n", "        ", "def", "makeS", "(", "C", ",", "D", ")", ":", "\n", "            ", "diagC", "=", "tf", ".", "math", ".", "exp", "(", "tf", ".", "diag_part", "(", "C", ")", ")", "\n", "maskC", "=", "tf", ".", "ones_like", "(", "C", ")", "-", "tf", ".", "eye", "(", "D", ")", "\n", "maskC", "=", "tf", ".", "matrix_band_part", "(", "maskC", ",", "0", ",", "-", "1", ")", "\n", "C", "=", "tf", ".", "multiply", "(", "maskC", ",", "C", ")", "+", "tf", ".", "diag", "(", "diagC", ")", "\n", "S", "=", "tf", ".", "matmul", "(", "C", ",", "C", ",", "transpose_b", "=", "True", ")", "+", "1e-6", "*", "tf", ".", "eye", "(", "D", ")", "\n", "return", "S", "\n", "\n", "", "def", "bilinear_form", "(", "x1", ",", "X", ",", "x2", ")", ":", "\n", "# [None, D] x [D, D] = [None, D]", "\n", "            ", "x1X", "=", "tf", ".", "matmul", "(", "x1", ",", "X", ")", "\n", "# [None, 1, D] x [None, D, 1] = [None, 1, 1]", "\n", "x1X", "=", "tf", ".", "expand_dims", "(", "x1X", ",", "axis", "=", "2", ")", "\n", "x1Xx2", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "x2", ",", "axis", "=", "1", ")", ",", "x1X", ")", "\n", "# [None, 1]", "\n", "x1Xx2", "=", "tf", ".", "squeeze", "(", "x1Xx2", ",", "axis", "=", "2", ")", "\n", "return", "x1Xx2", "\n", "\n", "", "if", "stop_gradient", ":", "\n", "            ", "lev_L", "=", "tf", ".", "stop_gradient", "(", "lev_L", ")", "\n", "lev_R", "=", "tf", ".", "stop_gradient", "(", "lev_R", ")", "\n", "", "else", ":", "\n", "            ", "lev_L", "=", "self", ".", "scale_gradient", "(", "lev_L", ",", "gsl_beta", "=", "self", ".", "hyper_parameters", "[", "'gsl_bfs'", "]", ")", "\n", "lev_R", "=", "self", ".", "scale_gradient", "(", "lev_R", ",", "gsl_beta", "=", "self", ".", "hyper_parameters", "[", "'gsl_bfs'", "]", ")", "\n", "\n", "# apply dropout", "\n", "", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "x1", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout", "[", "'bfs_1'", "]", ",", "lev_L", ")", ",", "\n", "lambda", ":", "lev_L", ",", "\n", ")", "\n", "x2", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout", "[", "'bfs_1'", "]", ",", "lev_R", ")", ",", "\n", "lambda", ":", "lev_R", ",", "\n", ")", "\n", "\n", "# fully-connected layer", "\n", "x1", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "x1", ",", "\n", "theta_bfs_1", "[", "'W'", "]", ",", "\n", "theta_bfs_1", "[", "'b'", "]", ",", "\n", ")", "\n", "x2", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "x2", ",", "\n", "theta_bfs_1", "[", "'W'", "]", ",", "\n", "theta_bfs_1", "[", "'b'", "]", ",", "\n", ")", "\n", "x1", "=", "tf", ".", "nn", ".", "relu", "(", "x1", ")", "\n", "x2", "=", "tf", ".", "nn", ".", "relu", "(", "x2", ")", "\n", "\n", "# PLDA layer", "\n", "B", "=", "theta_bfs_2", "[", "'B'", "]", "\n", "B", "=", "makeS", "(", "B", ",", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", "\n", "W", "=", "theta_bfs_2", "[", "'W'", "]", "\n", "W", "=", "makeS", "(", "W", ",", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", "\n", "mu", "=", "theta_bfs_2", "[", "'mu'", "]", "\n", "\n", "A_tilde", "=", "tf", ".", "matrix_inverse", "(", "B", "+", "2", "*", "W", "+", "1e-6", "*", "tf", ".", "eye", "(", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", ")", "\n", "G_tilde", "=", "tf", ".", "matrix_inverse", "(", "B", "+", "W", "+", "1e-6", "*", "tf", ".", "eye", "(", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", ")", "\n", "\n", "B_mu", "=", "tf", ".", "matmul", "(", "B", ",", "mu", ")", "\n", "mu_B_mu", "=", "tf", ".", "matmul", "(", "mu", ",", "B_mu", ",", "transpose_a", "=", "True", ")", "\n", "W_AmG", "=", "tf", ".", "matmul", "(", "W", ",", "A_tilde", "-", "G_tilde", ",", "transpose_a", "=", "True", ")", "\n", "mu_B_Am2G", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "B_mu", ",", "A_tilde", "-", "2", "*", "G_tilde", ",", "transpose_a", "=", "True", ")", ",", "B_mu", ")", "\n", "\n", "A", "=", "0.5", "*", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "W", ",", "A_tilde", ",", "transpose_a", "=", "True", ")", ",", "W", ")", "\n", "G", "=", "0.5", "*", "tf", ".", "matmul", "(", "W_AmG", ",", "W", ")", "\n", "c", "=", "tf", ".", "matmul", "(", "W_AmG", ",", "B_mu", ")", "\n", "\n", "k_tilde", "=", "2", "*", "tf", ".", "linalg", ".", "logdet", "(", "G_tilde", ")", "-", "tf", ".", "linalg", ".", "logdet", "(", "B", ")", "-", "tf", ".", "linalg", ".", "logdet", "(", "A_tilde", ")", "+", "mu_B_mu", "\n", "k", "=", "k_tilde", "+", "0.5", "*", "mu_B_Am2G", "\n", "\n", "x1Ax2", "=", "bilinear_form", "(", "x1", ",", "A", ",", "x2", ")", "\n", "x2Ax1", "=", "bilinear_form", "(", "x2", ",", "A", ",", "x1", ")", "\n", "x1Gx1", "=", "bilinear_form", "(", "x1", ",", "G", ",", "x1", ")", "\n", "x2Gx2", "=", "bilinear_form", "(", "x2", ",", "G", ",", "x2", ")", "\n", "x1x2c", "=", "tf", ".", "matmul", "(", "tf", ".", "add", "(", "x1", ",", "x2", ")", ",", "c", ")", "\n", "\n", "score", "=", "x1Ax2", "+", "x2Ax1", "+", "x1Gx1", "+", "x2Gx2", "+", "x1x2c", "+", "k", "\n", "\n", "pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "score", ")", "\n", "\n", "# compute entropy", "\n", "H_W", "=", "tf", ".", "linalg", ".", "logdet", "(", "tf", ".", "matrix_inverse", "(", "W", ")", ")", "\n", "H_B", "=", "tf", ".", "linalg", ".", "logdet", "(", "tf", ".", "matrix_inverse", "(", "B", ")", ")", "\n", "\n", "return", "score", ",", "pred", ",", "H_W", ",", "H_B", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_placeholders": [[375, 492], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.variable_scope", "tensorflow.zeros", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.zeros", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.concat", "E_w_init[].reshape", "tensorflow.initializers.random_uniform", "len"], "methods", ["None"], ["", "def", "initialize_placeholders", "(", "self", ",", "E_w_init", ")", ":", "\n", "\n", "        ", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "D_c", "=", "self", ".", "hyper_parameters", "[", "'D_c'", "]", "\n", "D_w", "=", "self", ".", "hyper_parameters", "[", "'D_w'", "]", "\n", "V_c", "=", "self", ".", "hyper_parameters", "[", "'V_c'", "]", "\n", "\n", "r", "=", "0.03", "\n", "\n", "# input character placeholder", "\n", "x_c_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", ",", "T_c", "]", ",", "\n", "name", "=", "'x_c_L'", ",", "\n", ")", "\n", "x_c_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", ",", "T_c", "]", ",", "\n", "name", "=", "'x_c_R'", ",", "\n", ")", "\n", "\n", "# initialize embedding matrix for characters", "\n", "with", "tf", ".", "variable_scope", "(", "'character_embedding_matrix'", ")", ":", "\n", "# zero-padding embedding", "\n", "            ", "E_c_0", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "D_c", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# trainable embeddings", "\n", "E_c_1", "=", "tf", ".", "get_variable", "(", "name", "=", "'E_c_1'", ",", "\n", "shape", "=", "[", "len", "(", "V_c", ")", "-", "1", ",", "D_c", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "# concatenate special-token embeddings + regular-token embeddings", "\n", "E_c", "=", "tf", ".", "concat", "(", "[", "E_c_0", ",", "E_c_1", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# character embeddings, shape=[B, T_s, T_w, T_c, D_c]", "\n", "", "e_c_L", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_c", ",", "x_c_L", ")", "\n", "e_c_R", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_c", ",", "x_c_R", ")", "\n", "\n", "# word-based placeholder for two documents", "\n", "x_w_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", "]", ",", "name", "=", "'x_w_L'", ")", "\n", "x_w_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", "]", ",", "name", "=", "'x_w_R'", ")", "\n", "\n", "# true sentence / document lengths", "\n", "N_w_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", "]", ",", "name", "=", "'N_w_L'", ")", "\n", "N_w_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", "]", ",", "name", "=", "'N_w_R'", ")", "\n", "N_s_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'N_s_L'", ")", "\n", "N_s_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'N_s_R'", ")", "\n", "\n", "# matrix for word embeddings, shape=[len(V_w), D_w]", "\n", "with", "tf", ".", "variable_scope", "(", "'word_embedding_matrix'", ")", ":", "\n", "# zero-padding embedding", "\n", "            ", "E_w_0", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "D_w", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# <UNK> embedding", "\n", "E_w_1", "=", "tf", ".", "Variable", "(", "E_w_init", "[", "1", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "D_w", ")", ")", ",", "\n", "name", "=", "'E_w_1'", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "# pre-trained word embedding", "\n", "E_w_2", "=", "tf", ".", "Variable", "(", "E_w_init", "[", "2", ":", ",", ":", "]", ",", "\n", "name", "=", "'E_w_2'", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "# concatenate special-token embeddings + regular-token embeddings", "\n", "E_w", "=", "tf", ".", "concat", "(", "[", "E_w_0", ",", "E_w_1", ",", "E_w_2", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# word embeddings, shape=[B, T_s, T_w, D_w]", "\n", "", "e_w_L", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_w", ",", "x_w_L", ")", "\n", "e_w_R", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_w", ",", "x_w_R", ")", "\n", "\n", "####################", "\n", "# training variables", "\n", "####################", "\n", "# labels", "\n", "labels_a", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "1", "]", ",", "name", "=", "'labels_a'", ")", "\n", "labels_f", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "1", "]", ",", "name", "=", "'labels_f'", ")", "\n", "\n", "# training mode (for dropout regularization)", "\n", "is_training", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ",", "name", "=", "'training_mode'", ")", "\n", "# learning rate", "\n", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "name", "=", "'lr'", ")", "\n", "\n", "#############", "\n", "# make tuples", "\n", "#############", "\n", "placeholders", "=", "{", "'x_c_L'", ":", "x_c_L", ",", "\n", "'x_c_R'", ":", "x_c_R", ",", "\n", "#", "\n", "'e_c_L'", ":", "e_c_L", ",", "\n", "'e_c_R'", ":", "e_c_R", ",", "\n", "#", "\n", "'x_w_L'", ":", "x_w_L", ",", "\n", "'x_w_R'", ":", "x_w_R", ",", "\n", "#", "\n", "'e_w_L'", ":", "e_w_L", ",", "\n", "'e_w_R'", ":", "e_w_R", ",", "\n", "#", "\n", "'N_w_L'", ":", "N_w_L", ",", "\n", "'N_w_R'", ":", "N_w_R", ",", "\n", "'N_s_L'", ":", "N_s_L", ",", "\n", "'N_s_R'", ":", "N_s_R", ",", "\n", "#", "\n", "'labels_a'", ":", "labels_a", ",", "\n", "'labels_f'", ":", "labels_f", ",", "\n", "#", "\n", "'is_training'", ":", "is_training", ",", "\n", "'lr'", ":", "lr", ",", "\n", "}", "\n", "\n", "thetas_E", "=", "{", "'E_c_1'", ":", "E_c_1", ",", "\n", "'E_w_1'", ":", "E_w_1", ",", "\n", "'E_w_2'", ":", "E_w_2", ",", "\n", "}", "\n", "\n", "return", "placeholders", ",", "thetas_E", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.feature_extraction": [[496, 509], ["tensorflow.variable_scope", "adhominem.AdHominem.cnn_layer_cw", "tensorflow.variable_scope", "tensorflow.concat", "adhominem.AdHominem.bilstm_layer_ws", "adhominem.AdHominem.att_layer_ws", "tensorflow.variable_scope", "adhominem.AdHominem.bilstm_layer_sd", "adhominem.AdHominem.att_layer_sd"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.cnn_layer_cw", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_layer_ws", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.att_layer_ws", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_layer_sd", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.att_layer_sd"], ["", "def", "feature_extraction", "(", "self", ",", "e_c", ",", "e_w", ",", "N_w", ",", "N_s", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'characters_to_word_encoding'", ")", ":", "\n", "            ", "r_c", "=", "self", ".", "cnn_layer_cw", "(", "e_c", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'words_to_sentence_encoding'", ")", ":", "\n", "            ", "e_cw", "=", "tf", ".", "concat", "(", "[", "e_w", ",", "r_c", "]", ",", "axis", "=", "3", ")", "\n", "h_w", "=", "self", ".", "bilstm_layer_ws", "(", "e_cw", ",", "N_w", ")", "\n", "e_s", "=", "self", ".", "att_layer_ws", "(", "h_w", ",", "N_w", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sentences_to_document_encoding'", ")", ":", "\n", "            ", "h_s", "=", "self", ".", "bilstm_layer_sd", "(", "e_s", ",", "N_s", ")", "\n", "e_d", "=", "self", ".", "att_layer_sd", "(", "h_s", ",", "N_s", ")", "\n", "\n", "", "return", "e_d", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_kernel_distance": [[513, 525], ["tensorflow.subtract", "tensorflow.math.pow", "tensorflow.math.exp", "tensorflow.square", "tensorflow.reduce_sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_kernel_distance", "(", "lev_L", ",", "lev_R", ",", "alpha", ",", "beta", ")", ":", "\n", "# define euclidean distance, shape = (B, D_h)", "\n", "        ", "distance", "=", "tf", ".", "subtract", "(", "lev_L", ",", "lev_R", ")", "\n", "distance", "=", "tf", ".", "square", "(", "distance", ")", "+", "1e-8", "\n", "# shape = (B, 1)", "\n", "distance", "=", "tf", ".", "reduce_sum", "(", "distance", ",", "1", ",", "keepdims", "=", "True", ")", "+", "1e-8", "\n", "# kernel", "\n", "pred", "=", "tf", ".", "math", ".", "pow", "(", "x", "=", "distance", ",", "y", "=", "beta", ")", "\n", "pred", "=", "tf", ".", "math", ".", "exp", "(", "-", "alpha", "*", "pred", ")", "\n", "pred", "=", "pred", "+", "1e-8", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_labels": [[529, 535], ["numpy.ones"], "methods", ["None"], ["", "def", "compute_labels", "(", "self", ",", "pred", ",", "thr", "=", "0.5", ")", ":", "\n", "# numpy array for estimated labels", "\n", "        ", "labels_hat", "=", "np", ".", "ones", "(", "pred", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# dissimilar pairs --> 0, similar pairs --> 1", "\n", "labels_hat", "[", "pred", "<=", "thr", "]", "=", "0", "\n", "return", "labels_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.loss_function_dml": [[539, 551], ["tensorflow.multiply", "tensorflow.multiply", "tensorflow.add", "tensorflow.reduce_mean", "tensorflow.subtract", "tensorflow.square", "tensorflow.square", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.subtract", "tensorflow.subtract"], "methods", ["None"], ["", "def", "loss_function_dml", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "\n", "        ", "t_s", "=", "self", ".", "hyper_parameters", "[", "'t_s'", "]", "\n", "t_d", "=", "self", ".", "hyper_parameters", "[", "'t_d'", "]", "\n", "\n", "# define contrastive loss:", "\n", "l0", "=", "tf", ".", "multiply", "(", "tf", ".", "subtract", "(", "1.0", ",", "labels", ")", ",", "tf", ".", "square", "(", "tf", ".", "maximum", "(", "tf", ".", "subtract", "(", "pred", ",", "t_d", ")", ",", "0.0", ")", ")", ")", "\n", "l1", "=", "tf", ".", "multiply", "(", "labels", ",", "tf", ".", "square", "(", "tf", ".", "maximum", "(", "tf", ".", "subtract", "(", "t_s", ",", "pred", ")", ",", "0.0", ")", ")", ")", "\n", "loss", "=", "tf", ".", "add", "(", "l0", ",", "l1", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.loss_function_bfs": [[552, 560], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "loss_function_bfs", "(", "scores", ",", "labels", ")", ":", "\n", "\n", "# define binary cross entropy loss", "\n", "        ", "loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "scores", ",", "labels", "=", "labels", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.cnn_layer_cw": [[564, 620], ["tensorflow.concat", "tensorflow.reshape", "tensorflow.cond", "tensorflow.pad", "tensorflow.nn.conv1d", "tensorflow.nn.bias_add", "tensorflow.nn.tanh", "tensorflow.expand_dims", "tensorflow.nn.max_pool", "tensorflow.squeeze", "tensorflow.reshape", "tensorflow.equal", "tensorflow.constant", "tensorflow.constant", "tensorflow.multiply"], "methods", ["None"], ["", "def", "cnn_layer_cw", "(", "self", ",", "e_c", ")", ":", "\n", "\n", "        ", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "h", "=", "self", ".", "hyper_parameters", "[", "'w'", "]", "\n", "D_c", "=", "self", ".", "hyper_parameters", "[", "'D_c'", "]", "\n", "D_r", "=", "self", ".", "hyper_parameters", "[", "'D_r'", "]", "\n", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "dropout_mask", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'cnn'", "]", ",", "\n", "self", ".", "dropout", "[", "'cnn'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "# dropout and zero-padding", "\n", "# reshape: [B, T_s, T_w, T_c, D_c] --> [B * T_s * T_w, T_c, D_c]", "\n", "e_c", "=", "tf", ".", "reshape", "(", "e_c", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "T_c", ",", "D_c", "]", ")", "\n", "# dropout", "\n", "e_c", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_mask", ",", "e_c", ")", ",", "\n", "lambda", ":", "e_c", ",", "\n", ")", "\n", "# zero-padding, shape = [B * T_s * T_w, T_c + 2 * (h-1), D_c]", "\n", "e_c", "=", "tf", ".", "pad", "(", "e_c", ",", "\n", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "h", "-", "1", ",", "h", "-", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", ",", "\n", "mode", "=", "'CONSTANT'", ",", "\n", ")", "\n", "\n", "# 1D convolution", "\n", "# shape = [B * T_s * T_w, T_c + 2 * (h-1) - h + 1, D_r] = [B * T_s * T_w, T_c + h - 1, D_r]", "\n", "r_c", "=", "tf", ".", "nn", ".", "conv1d", "(", "e_c", ",", "\n", "self", ".", "theta", "[", "'cnn'", "]", "[", "'W'", "]", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "'chraracter_1D_cnn'", ",", "\n", ")", "\n", "# apply bias term", "\n", "r_c", "=", "tf", ".", "nn", ".", "bias_add", "(", "r_c", ",", "self", ".", "theta", "[", "'cnn'", "]", "[", "'b'", "]", ")", "\n", "# apply nonlinear function", "\n", "r_c", "=", "tf", ".", "nn", ".", "tanh", "(", "r_c", ")", "\n", "\n", "# max-over-time pooling", "\n", "# shape = [B * T_s * T_w, T_c + h - 1, D_r, 1]", "\n", "r_c", "=", "tf", ".", "expand_dims", "(", "r_c", ",", "3", ")", "\n", "# max-over-time-pooling, shape = [B * T_s * T_w, 1, D_r, 1]", "\n", "r_c", "=", "tf", ".", "nn", ".", "max_pool", "(", "r_c", ",", "\n", "ksize", "=", "[", "1", ",", "T_c", "+", "h", "-", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", ")", "\n", "# shape = [B * T_s * T_w, D_r]", "\n", "r_c", "=", "tf", ".", "squeeze", "(", "r_c", ")", "\n", "#  shape = [B, T_s, T_w, D_r]", "\n", "r_c", "=", "tf", ".", "reshape", "(", "r_c", ",", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "T_w", ",", "D_r", "]", ")", "\n", "\n", "return", "r_c", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.bilstm_layer_ws": [[624, 669], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reverse_sequence", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.constant", "tensorflow.tile", "tensorflow.scan", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reverse_sequence", "tensorflow.concat", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "bilstm_layer_ws", "(", "self", ",", "e_w_f", ",", "N_w", ")", ":", "\n", "\n", "        ", "D_w", "=", "self", ".", "hyper_parameters", "[", "'D_w'", "]", "\n", "D_r", "=", "self", ".", "hyper_parameters", "[", "'D_r'", "]", "\n", "D_s", "=", "self", ".", "hyper_parameters", "[", "'D_s'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# reshape N_w, shape = [B * T_s]", "\n", "N_w", "=", "tf", ".", "reshape", "(", "N_w", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "]", ")", "\n", "# reshape input word embeddings, shape = [B * T_s, T_w, D_w + D_r]", "\n", "e_w_f", "=", "tf", ".", "reshape", "(", "e_w_f", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "T_w", ",", "D_w", "+", "D_r", "]", ")", "\n", "# reverse input sentences", "\n", "e_w_b", "=", "tf", ".", "reverse_sequence", "(", "e_w_f", ",", "seq_lengths", "=", "N_w", ",", "seq_axis", "=", "1", ")", "\n", "\n", "h_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "h_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "t_0", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "N_w_t", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "N_w", ",", "axis", "=", "1", ")", ",", "tf", ".", "constant", "(", "[", "1", ",", "T_w", "]", ",", "tf", ".", "int32", ")", ")", "\n", "\n", "states", "=", "tf", ".", "scan", "(", "self", ".", "bilstm_cell_ws", ",", "\n", "[", "tf", ".", "transpose", "(", "e_w_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "e_w_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "N_w_t", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "]", ",", "\n", "initializer", "=", "[", "h_0_f", ",", "h_0_b", ",", "c_0_f", ",", "c_0_b", ",", "t_0", "]", ",", "\n", "name", "=", "'lstm_ws_layer'", ",", "\n", ")", "\n", "\n", "h_f", "=", "states", "[", "0", "]", "\n", "h_b", "=", "states", "[", "1", "]", "\n", "h_f", "=", "tf", ".", "transpose", "(", "h_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "h_b", "=", "tf", ".", "transpose", "(", "h_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# reverse again backward state", "\n", "h_b", "=", "tf", ".", "reverse_sequence", "(", "h_b", ",", "seq_lengths", "=", "N_w", ",", "seq_axis", "=", "1", ")", "\n", "\n", "# concatenate hidden states, shape=[2 * B * T_s, T_w, 2 * D_s]", "\n", "h", "=", "tf", ".", "concat", "(", "[", "h_f", ",", "h_b", "]", ",", "axis", "=", "2", ")", "\n", "# reshape input word embeddings, shape = [2 * B, T_s, T_w, 2 * D_s]", "\n", "h", "=", "tf", ".", "reshape", "(", "h", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.bilstm_cell_ws": [[673, 707], ["adhominem.AdHominem.lstm_cell", "adhominem.AdHominem.lstm_cell", "tensorflow.less", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.add"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell"], ["", "def", "bilstm_cell_ws", "(", "self", ",", "prev", ",", "input", ")", ":", "\n", "\n", "# input parameters", "\n", "        ", "h_prev_f", "=", "prev", "[", "0", "]", "\n", "h_prev_b", "=", "prev", "[", "1", "]", "\n", "c_prev_f", "=", "prev", "[", "2", "]", "\n", "c_prev_b", "=", "prev", "[", "3", "]", "\n", "t", "=", "prev", "[", "4", "]", "\n", "\n", "e_w_f", "=", "input", "[", "0", "]", "\n", "e_w_b", "=", "input", "[", "1", "]", "\n", "N_w", "=", "input", "[", "2", "]", "\n", "\n", "# compute next forward states", "\n", "h_next_f", ",", "c_next_f", "=", "self", ".", "lstm_cell", "(", "e_w_f", ",", "h_prev_f", ",", "c_prev_f", ",", "\n", "self", ".", "theta", "[", "'lstm_ws_forward'", "]", ",", "\n", "self", ".", "dropout", "[", "'lstm_ws_forward'", "]", ",", "\n", ")", "\n", "# compute next backward states", "\n", "h_next_b", ",", "c_next_b", "=", "self", ".", "lstm_cell", "(", "e_w_b", ",", "h_prev_b", ",", "c_prev_b", ",", "\n", "self", ".", "theta", "[", "'lstm_ws_backward'", "]", ",", "\n", "self", ".", "dropout", "[", "'lstm_ws_backward'", "]", ",", "\n", ")", "\n", "\n", "# t < T", "\n", "condition", "=", "tf", ".", "less", "(", "t", ",", "N_w", ")", "\n", "\n", "# copy-through states if t > T", "\n", "h_next_f", "=", "tf", ".", "where", "(", "condition", ",", "h_next_f", ",", "h_prev_f", ")", "\n", "c_next_f", "=", "tf", ".", "where", "(", "condition", ",", "c_next_f", ",", "c_prev_f", ")", "\n", "h_next_b", "=", "tf", ".", "where", "(", "condition", ",", "h_next_b", ",", "h_prev_b", ")", "\n", "c_next_b", "=", "tf", ".", "where", "(", "condition", ",", "c_next_b", ",", "c_prev_b", ")", "\n", "\n", "return", "[", "h_next_f", ",", "h_next_b", ",", "c_next_f", ",", "c_next_b", ",", "tf", ".", "add", "(", "t", ",", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.bilstm_layer_sd": [[711, 747], ["tensorflow.reverse_sequence", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.constant", "tensorflow.tile", "tensorflow.scan", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reverse_sequence", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "bilstm_layer_sd", "(", "self", ",", "e_s_f", ",", "N_s", ")", ":", "\n", "\n", "        ", "D_d", "=", "self", ".", "hyper_parameters", "[", "'D_d'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# reverse input sentences", "\n", "e_s_b", "=", "tf", ".", "reverse_sequence", "(", "e_s_f", ",", "seq_lengths", "=", "N_s", ",", "seq_axis", "=", "1", ")", "\n", "\n", "h_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "h_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "t_0", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "N_s_t", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "N_s", ",", "axis", "=", "1", ")", ",", "tf", ".", "constant", "(", "[", "1", ",", "T_s", "]", ",", "tf", ".", "int32", ")", ")", "\n", "\n", "states", "=", "tf", ".", "scan", "(", "self", ".", "bilstm_cell_sd", ",", "\n", "[", "tf", ".", "transpose", "(", "e_s_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "e_s_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "N_s_t", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "]", ",", "\n", "initializer", "=", "[", "h_0_f", ",", "h_0_b", ",", "c_0_f", ",", "c_0_b", ",", "t_0", "]", ",", "\n", "name", "=", "'lstm_sd_layer'", ",", "\n", ")", "\n", "\n", "h_f", "=", "states", "[", "0", "]", "\n", "h_b", "=", "states", "[", "1", "]", "\n", "h_f", "=", "tf", ".", "transpose", "(", "h_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "h_b", "=", "tf", ".", "transpose", "(", "h_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# reverse again backward state", "\n", "h_b", "=", "tf", ".", "reverse_sequence", "(", "h_b", ",", "seq_lengths", "=", "N_s", ",", "seq_axis", "=", "1", ")", "\n", "\n", "# concatenate hidden states, shape=[2 * B, T_s, 2 * D_d]", "\n", "h", "=", "tf", ".", "concat", "(", "[", "h_f", ",", "h_b", "]", ",", "axis", "=", "2", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.bilstm_cell_sd": [[751, 785], ["adhominem.AdHominem.lstm_cell", "adhominem.AdHominem.lstm_cell", "tensorflow.less", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.add"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell"], ["", "def", "bilstm_cell_sd", "(", "self", ",", "prev", ",", "input", ")", ":", "\n", "\n", "# input parameters", "\n", "        ", "h_prev_f", "=", "prev", "[", "0", "]", "\n", "h_prev_b", "=", "prev", "[", "1", "]", "\n", "c_prev_f", "=", "prev", "[", "2", "]", "\n", "c_prev_b", "=", "prev", "[", "3", "]", "\n", "t", "=", "prev", "[", "4", "]", "\n", "\n", "e_s_f", "=", "input", "[", "0", "]", "\n", "e_s_b", "=", "input", "[", "1", "]", "\n", "N_s", "=", "input", "[", "2", "]", "\n", "\n", "# compute next forward states", "\n", "h_next_f", ",", "c_next_f", "=", "self", ".", "lstm_cell", "(", "e_s_f", ",", "h_prev_f", ",", "c_prev_f", ",", "\n", "self", ".", "theta", "[", "'lstm_sd_forward'", "]", ",", "\n", "self", ".", "dropout", "[", "'lstm_sd_forward'", "]", ",", "\n", ")", "\n", "# compute next backward states", "\n", "h_next_b", ",", "c_next_b", "=", "self", ".", "lstm_cell", "(", "e_s_b", ",", "h_prev_b", ",", "c_prev_b", ",", "\n", "self", ".", "theta", "[", "'lstm_sd_backward'", "]", ",", "\n", "self", ".", "dropout", "[", "'lstm_sd_backward'", "]", ",", "\n", ")", "\n", "\n", "# t < T", "\n", "condition", "=", "tf", ".", "less", "(", "t", ",", "N_s", ")", "\n", "\n", "# copy-through states if t > T", "\n", "h_next_f", "=", "tf", ".", "where", "(", "condition", ",", "h_next_f", ",", "h_prev_f", ")", "\n", "c_next_f", "=", "tf", ".", "where", "(", "condition", ",", "c_next_f", ",", "c_prev_f", ")", "\n", "h_next_b", "=", "tf", ".", "where", "(", "condition", ",", "h_next_b", ",", "h_prev_b", ")", "\n", "c_next_b", "=", "tf", ".", "where", "(", "condition", ",", "c_next_b", ",", "c_prev_b", ")", "\n", "\n", "return", "[", "h_next_f", ",", "h_next_b", ",", "c_next_f", ",", "c_next_b", ",", "tf", ".", "add", "(", "t", ",", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.lstm_cell": [[789, 835], ["tensorflow.concat", "tensorflow.concat", "tensorflow.cond", "tensorflow.cond", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.tanh", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.equal", "tensorflow.equal", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.tanh", "tensorflow.constant", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "lstm_cell", "(", "self", ",", "e_w", ",", "h_prev", ",", "c_prev", ",", "params", ",", "dropout", ")", ":", "\n", "\n", "        ", "dropout_x", "=", "tf", ".", "concat", "(", "[", "dropout", "[", "'x'", "]", ",", "\n", "dropout", "[", "'x'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "dropout_h", "=", "tf", ".", "concat", "(", "[", "dropout", "[", "'h'", "]", ",", "\n", "dropout", "[", "'h'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "W_i", "=", "params", "[", "'W_i'", "]", "\n", "U_i", "=", "params", "[", "'U_i'", "]", "\n", "b_i", "=", "params", "[", "'b_i'", "]", "\n", "W_f", "=", "params", "[", "'W_f'", "]", "\n", "U_f", "=", "params", "[", "'U_f'", "]", "\n", "b_f", "=", "params", "[", "'b_f'", "]", "\n", "W_o", "=", "params", "[", "'W_o'", "]", "\n", "U_o", "=", "params", "[", "'U_o'", "]", "\n", "b_o", "=", "params", "[", "'b_o'", "]", "\n", "W_c", "=", "params", "[", "'W_c'", "]", "\n", "U_c", "=", "params", "[", "'U_c'", "]", "\n", "b_c", "=", "params", "[", "'b_c'", "]", "\n", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "\n", "e_w", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_x", ",", "e_w", ")", ",", "\n", "lambda", ":", "e_w", ",", "\n", ")", "\n", "h_prev", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_h", ",", "h_prev", ")", ",", "\n", "lambda", ":", "h_prev", ",", "\n", ")", "\n", "# forget", "\n", "i_t", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_i", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_i", ")", "+", "b_i", ")", "\n", "# input", "\n", "f_t", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_f", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_f", ")", "+", "b_f", ")", "\n", "# new memory", "\n", "c_tilde", "=", "tf", ".", "tanh", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_c", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_c", ")", "+", "b_c", ")", "\n", "# final memory", "\n", "c_next", "=", "tf", ".", "multiply", "(", "i_t", ",", "c_tilde", ")", "+", "tf", ".", "multiply", "(", "f_t", ",", "c_prev", ")", "\n", "# output", "\n", "o_t", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_o", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_o", ")", "+", "b_o", ")", "\n", "# next hidden state", "\n", "h_next", "=", "tf", ".", "multiply", "(", "o_t", ",", "tf", ".", "tanh", "(", "c_next", ")", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.att_layer_ws": [[839, 895], ["tensorflow.concat", "tensorflow.concat", "tensorflow.cond", "tensorflow.reshape", "tensorflow.nn.tanh", "tensorflow.reshape", "tensorflow.cond", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.sequence_mask", "tensorflow.nn.softmax", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.equal", "tensorflow.nn.xw_plus_b", "tensorflow.equal", "tensorflow.stack", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply"], "methods", ["None"], ["", "def", "att_layer_ws", "(", "self", ",", "h_w", ",", "N_w", ")", ":", "\n", "\n", "        ", "D_s", "=", "self", ".", "hyper_parameters", "[", "'D_s'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# prepare \"siamese\" dropout", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "dropout_Wb", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'att_ws'", "]", "[", "'Wb'", "]", ",", "\n", "self", ".", "dropout", "[", "'att_ws'", "]", "[", "'Wb'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "dropout_v", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'att_ws'", "]", "[", "'v'", "]", ",", "\n", "self", ".", "dropout", "[", "'att_ws'", "]", "[", "'v'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "# apply dropout, shape=[2 * B, T_s, T_w, 2 * D_s]", "\n", "scores", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_Wb", ",", "h_w", ")", ",", "\n", "lambda", ":", "h_w", ",", "\n", ")", "\n", "# shape=[2 * B * T_s * T_w, 2 * D_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "scores", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "scores", ",", "\n", "self", ".", "theta", "[", "'att_ws'", "]", "[", "'W'", "]", ",", "\n", "self", ".", "theta", "[", "'att_ws'", "]", "[", "'b'", "]", ")", ")", "\n", "# shape=[2 * B * T_s, T_w, D_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "# apply dropout", "\n", "scores", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_v", ",", "scores", ")", ",", "\n", "lambda", ":", "scores", ",", "\n", ")", "\n", "# shape=[2 * B * T_s * T_w, 2 * D_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "\n", "# shape=[2 * B * T_s * T_w, 1]", "\n", "scores", "=", "tf", ".", "matmul", "(", "scores", ",", "self", ".", "theta", "[", "'att_ws'", "]", "[", "'v'", "]", ")", "\n", "# shape=[2 * B, T_s, T_w]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "T_w", "]", ")", "\n", "\n", "# binary mask, shape = [2 * B, T_s, T_w]", "\n", "mask", "=", "tf", ".", "sequence_mask", "(", "N_w", ",", "maxlen", "=", "T_w", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "(", "1.0", "-", "mask", ")", "*", "-", "5000.0", "\n", "\n", "# shape = [2 * B, T_s, T_w]", "\n", "scores", "=", "scores", "+", "mask", "\n", "scores", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "2", ")", "\n", "\n", "# expand to shape=[B, T_s, T_w, 1]", "\n", "alpha", "=", "tf", ".", "expand_dims", "(", "scores", ",", "axis", "=", "3", ")", "\n", "# fill up to shape=[B, T_s, T_w, D_s]", "\n", "alpha", "=", "tf", ".", "tile", "(", "alpha", ",", "tf", ".", "stack", "(", "[", "1", ",", "1", ",", "1", ",", "2", "*", "D_s", "]", ")", ")", "\n", "# combine to get sentence representations, shape=[B, T_s, 2 * D_s]", "\n", "e_s", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "alpha", ",", "h_w", ")", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "\n", "return", "e_s", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.att_layer_sd": [[899, 955], ["tensorflow.concat", "tensorflow.concat", "tensorflow.cond", "tensorflow.reshape", "tensorflow.nn.tanh", "tensorflow.reshape", "tensorflow.cond", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.sequence_mask", "tensorflow.nn.softmax", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.equal", "tensorflow.nn.xw_plus_b", "tensorflow.equal", "tensorflow.stack", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply", "tensorflow.constant", "tensorflow.multiply"], "methods", ["None"], ["", "def", "att_layer_sd", "(", "self", ",", "h_s", ",", "N_s", ")", ":", "\n", "\n", "        ", "D_d", "=", "self", ".", "hyper_parameters", "[", "'D_d'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# prepare \"siamese\" dropout", "\n", "is_training", "=", "self", ".", "placeholders", "[", "'is_training'", "]", "\n", "dropout_Wb", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'att_sd'", "]", "[", "'Wb'", "]", ",", "\n", "self", ".", "dropout", "[", "'att_sd'", "]", "[", "'Wb'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "dropout_v", "=", "tf", ".", "concat", "(", "[", "self", ".", "dropout", "[", "'att_sd'", "]", "[", "'v'", "]", ",", "\n", "self", ".", "dropout", "[", "'att_sd'", "]", "[", "'v'", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "# apply dropout, shape=[2 * B, T_s, 2 * D_d]", "\n", "scores", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_Wb", ",", "h_s", ")", ",", "\n", "lambda", ":", "h_s", ",", "\n", ")", "\n", "# shape=[2 * B * T_s, 2 * D_d]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "2", "*", "D_d", "]", ")", "\n", "scores", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "scores", ",", "\n", "self", ".", "theta", "[", "'att_sd'", "]", "[", "'W'", "]", ",", "\n", "self", ".", "theta", "[", "'att_sd'", "]", "[", "'b'", "]", ")", ")", "\n", "# shape=[2 * B, T_s, 2 * D_d]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "2", "*", "D_d", "]", ")", "\n", "\n", "# apply dropout", "\n", "scores", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "is_training", ",", "tf", ".", "constant", "(", "True", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "multiply", "(", "dropout_v", ",", "scores", ")", ",", "\n", "lambda", ":", "scores", ",", "\n", ")", "\n", "# shape=[2 * B * T_s, 2 * D_d]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "2", "*", "D_d", "]", ")", "\n", "\n", "# shape=[2 * B * T_s, 1]", "\n", "scores", "=", "tf", ".", "matmul", "(", "scores", ",", "self", ".", "theta", "[", "'att_sd'", "]", "[", "'v'", "]", ")", "\n", "# shape=[2 * B, T_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", "]", ")", "\n", "\n", "# binary mask, shape = [2 * B, T_s]", "\n", "mask", "=", "tf", ".", "sequence_mask", "(", "N_s", ",", "maxlen", "=", "T_s", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "(", "1.0", "-", "mask", ")", "*", "-", "5000.0", "\n", "\n", "# shape = [2 * B, T_s]", "\n", "scores", "=", "scores", "+", "mask", "\n", "scores", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "# expand to shape=[B, T_s, 1]", "\n", "alpha", "=", "tf", ".", "expand_dims", "(", "scores", ",", "axis", "=", "2", ")", "\n", "# fill up to shape=[B, T_s, 2 * D_d]", "\n", "alpha", "=", "tf", ".", "tile", "(", "alpha", ",", "tf", ".", "stack", "(", "[", "1", ",", "1", ",", "2", "*", "D_d", "]", ")", ")", "\n", "# combine to get doc representations, shape=[B, 2 * D_d]", "\n", "e_d", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "alpha", ",", "h_s", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "\n", "return", "e_d", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask": [[959, 965], ["tensorflow.convert_to_tensor", "tensorflow.floor", "tensorflow.divide", "tensorflow.random_uniform"], "methods", ["None"], ["", "def", "make_dropout_mask", "(", "self", ",", "shape", ",", "keep_prob", ")", ":", "\n", "        ", "keep_prob", "=", "tf", ".", "convert_to_tensor", "(", "keep_prob", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "random_tensor", "=", "keep_prob", "+", "tf", ".", "random_uniform", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "binary_tensor", "=", "tf", ".", "floor", "(", "random_tensor", ")", "\n", "dropout_mask", "=", "tf", ".", "divide", "(", "binary_tensor", ",", "keep_prob", ")", "\n", "return", "dropout_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_dropout": [[966, 1062], ["tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "tensorflow.variable_scope", "adhominem.AdHominem.make_dropout_mask", "adhominem.AdHominem.make_dropout_mask"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.make_dropout_mask"], ["", "def", "initialize_dropout", "(", "self", ")", ":", "\n", "\n", "        ", "D_c", "=", "self", ".", "hyper_parameters", "[", "'D_c'", "]", "\n", "D_r", "=", "self", ".", "hyper_parameters", "[", "'D_r'", "]", "\n", "D_w", "=", "self", ".", "hyper_parameters", "[", "'D_w'", "]", "\n", "D_s", "=", "self", ".", "hyper_parameters", "[", "'D_s'", "]", "\n", "D_d", "=", "self", ".", "hyper_parameters", "[", "'D_d'", "]", "\n", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "D_lev", "=", "self", ".", "hyper_parameters", "[", "'D_lev'", "]", "\n", "\n", "dropout", "=", "{", "}", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'dropout_cnn'", ")", ":", "\n", "            ", "dropout", "[", "'cnn'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "T_c", ",", "D_c", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_cnn'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_lstm_ws_forward'", ")", ":", "\n", "            ", "dropout", "[", "'lstm_ws_forward'", "]", "=", "{", "}", "\n", "dropout", "[", "'lstm_ws_forward'", "]", "[", "'x'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "D_w", "+", "D_r", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "dropout", "[", "'lstm_ws_forward'", "]", "[", "'h'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_lstm_ws_backward'", ")", ":", "\n", "            ", "dropout", "[", "'lstm_ws_backward'", "]", "=", "{", "}", "\n", "dropout", "[", "'lstm_ws_backward'", "]", "[", "'x'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "D_w", "+", "D_r", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "dropout", "[", "'lstm_ws_backward'", "]", "[", "'h'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_lstm_sd_forward'", ")", ":", "\n", "            ", "dropout", "[", "'lstm_sd_forward'", "]", "=", "{", "}", "\n", "dropout", "[", "'lstm_sd_forward'", "]", "[", "'x'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "2", "*", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "dropout", "[", "'lstm_sd_forward'", "]", "[", "'h'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_lstm_sd_backward'", ")", ":", "\n", "            ", "dropout", "[", "'lstm_sd_backward'", "]", "=", "{", "}", "\n", "dropout", "[", "'lstm_sd_backward'", "]", "[", "'x'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "2", "*", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "dropout", "[", "'lstm_sd_backward'", "]", "[", "'h'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_lstm'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_att_ws'", ")", ":", "\n", "            ", "dropout", "[", "'att_ws'", "]", "=", "{", "}", "\n", "dropout", "[", "'att_ws'", "]", "[", "'Wb'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "T_s", ",", "1", ",", "2", "*", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_att'", "]", ",", "\n", ")", "\n", "dropout", "[", "'att_ws'", "]", "[", "'v'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", "*", "T_s", ",", "1", ",", "2", "*", "D_s", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_att'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_att_sd'", ")", ":", "\n", "            ", "dropout", "[", "'att_sd'", "]", "=", "{", "}", "\n", "dropout", "[", "'att_sd'", "]", "[", "'Wb'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "1", ",", "2", "*", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_att'", "]", ",", "\n", ")", "\n", "dropout", "[", "'att_sd'", "]", "[", "'v'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "1", ",", "2", "*", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_att'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_metric_a'", ")", ":", "\n", "            ", "dropout", "[", "'metric_a'", "]", "=", "{", "}", "\n", "dropout", "[", "'metric_a'", "]", "[", "'metric_1'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "2", "*", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_metric'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_metric_f'", ")", ":", "\n", "            ", "dropout", "[", "'metric_f'", "]", "=", "{", "}", "\n", "dropout", "[", "'metric_f'", "]", "[", "'metric_1'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "2", "*", "D_d", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_metric'", "]", ",", "\n", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_bfs_a'", ")", ":", "\n", "            ", "dropout", "[", "'bfs_a'", "]", "=", "{", "}", "\n", "dropout", "[", "'bfs_a'", "]", "[", "'bfs_1'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "D_lev", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_bfs'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_bfs_f'", ")", ":", "\n", "            ", "dropout", "[", "'bfs_f'", "]", "=", "{", "}", "\n", "dropout", "[", "'bfs_f'", "]", "[", "'bfs_1'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "D_lev", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_bfs'", "]", ",", "\n", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'dropout_ual_a'", ")", ":", "\n", "            ", "dropout", "[", "'ual_a'", "]", "=", "{", "}", "\n", "dropout", "[", "'ual_a'", "]", "[", "'ual_1'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "D_lev", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_ual'", "]", ",", "\n", ")", "\n", "dropout", "[", "'ual_a'", "]", "[", "'ual_2'", "]", "=", "self", ".", "make_dropout_mask", "(", "shape", "=", "[", "self", ".", "B", ",", "2", "*", "D_lev", "]", ",", "\n", "keep_prob", "=", "self", ".", "hyper_parameters", "[", "'keep_prob_ual'", "]", ",", "\n", ")", "\n", "", "return", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_parameters": [[1063, 1116], ["tensorflow.variable_scope", "adhominem.AdHominem.initialize_cnn", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_lstm", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_lstm", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_lstm", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_lstm", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_att", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_att", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_mlp", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_mlp", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_mlp", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_bfs", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_mlp", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_bfs", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_ual", "tensorflow.variable_scope", "adhominem.AdHominem.initialize_theta_loss"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_cnn", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_att", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_att", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_mlp", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_mlp", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_mlp", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_bfs", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_mlp", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_bfs", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_ual", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_theta_loss"], ["", "def", "initialize_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "D_c", "=", "self", ".", "hyper_parameters", "[", "'D_c'", "]", "\n", "D_r", "=", "self", ".", "hyper_parameters", "[", "'D_r'", "]", "\n", "h", "=", "self", ".", "hyper_parameters", "[", "'w'", "]", "\n", "D_w", "=", "self", ".", "hyper_parameters", "[", "'D_w'", "]", "\n", "D_s", "=", "self", ".", "hyper_parameters", "[", "'D_s'", "]", "\n", "D_d", "=", "self", ".", "hyper_parameters", "[", "'D_d'", "]", "\n", "D_lev", "=", "self", ".", "hyper_parameters", "[", "'D_lev'", "]", "\n", "D_plda", "=", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", "\n", "\n", "theta", "=", "{", "}", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'theta_cnn'", ")", ":", "\n", "            ", "theta", "[", "'cnn'", "]", "=", "self", ".", "initialize_cnn", "(", "D_c", ",", "D_r", ",", "h", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_ws_forward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_ws_forward'", "]", "=", "self", ".", "initialize_lstm", "(", "D_w", "+", "D_r", ",", "D_s", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_ws_backward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_ws_backward'", "]", "=", "self", ".", "initialize_lstm", "(", "D_w", "+", "D_r", ",", "D_s", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_sd_forward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_sd_forward'", "]", "=", "self", ".", "initialize_lstm", "(", "2", "*", "D_s", ",", "D_d", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_sd_backward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_sd_backward'", "]", "=", "self", ".", "initialize_lstm", "(", "2", "*", "D_s", ",", "D_d", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_att_ws'", ")", ":", "\n", "            ", "theta", "[", "'att_ws'", "]", "=", "self", ".", "initialize_att", "(", "2", "*", "D_s", ",", "2", "*", "D_s", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_att_sd'", ")", ":", "\n", "            ", "theta", "[", "'att_sd'", "]", "=", "self", ".", "initialize_att", "(", "2", "*", "D_d", ",", "2", "*", "D_d", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_metric_a'", ")", ":", "\n", "            ", "theta", "[", "'metric_a'", "]", "=", "self", ".", "initialize_mlp", "(", "2", "*", "D_d", ",", "D_lev", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_metric_f'", ")", ":", "\n", "            ", "theta", "[", "'metric_f'", "]", "=", "self", ".", "initialize_mlp", "(", "2", "*", "D_d", ",", "D_lev", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_bfs_a_1'", ")", ":", "\n", "            ", "theta", "[", "'bfs_a_1'", "]", "=", "self", ".", "initialize_mlp", "(", "D_lev", ",", "D_plda", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_bfs_a_2'", ")", ":", "\n", "            ", "theta", "[", "'bfs_a_2'", "]", "=", "self", ".", "initialize_bfs", "(", "D_plda", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_bfs_f_1'", ")", ":", "\n", "            ", "theta", "[", "'bfs_f_1'", "]", "=", "self", ".", "initialize_mlp", "(", "D_lev", ",", "D_plda", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_bfs_f_2'", ")", ":", "\n", "            ", "theta", "[", "'bfs_f_2'", "]", "=", "self", ".", "initialize_bfs", "(", "D_plda", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_ual_a'", ")", ":", "\n", "            ", "theta", "[", "'ual_a'", "]", "=", "self", ".", "initialize_ual", "(", "D_lev", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_dml_loss_a'", ")", ":", "\n", "            ", "theta", "[", "'loss_dml_a'", "]", "=", "self", ".", "initialize_theta_loss", "(", ")", "\n", "\n", "", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_theta_loss": [[1117, 1133], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "initialize_theta_loss", "(", "self", ")", ":", "\n", "        ", "theta", "=", "{", "'alpha'", ":", "tf", ".", "get_variable", "(", "name", "=", "'loss_alpha'", ",", "\n", "shape", "=", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.09", ")", ",", "\n", "trainable", "=", "self", ".", "hyper_parameters", "[", "\"train_kernel\"", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'beta'", ":", "tf", ".", "get_variable", "(", "name", "=", "'loss_beta'", ",", "\n", "shape", "=", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "3.0", "/", "2.0", ")", ",", "\n", "trainable", "=", "self", ".", "hyper_parameters", "[", "\"train_kernel\"", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_ual": [[1134, 1163], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "initialize_ual", "(", "self", ",", "D", ")", ":", "\n", "        ", "theta", "=", "{", "'W1'", ":", "tf", ".", "get_variable", "(", "name", "=", "'W1'", ",", "\n", "shape", "=", "[", "D", ",", "2", "*", "D", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'b1'", ":", "tf", ".", "get_variable", "(", "name", "=", "'b1'", ",", "\n", "shape", "=", "[", "2", "*", "D", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'W2'", ":", "tf", ".", "get_variable", "(", "name", "=", "'W2'", ",", "\n", "shape", "=", "[", "2", "*", "D", ",", "4", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'b2'", ":", "tf", ".", "get_variable", "(", "name", "=", "'b2'", ",", "\n", "shape", "=", "[", "4", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_bfs": [[1164, 1178], ["numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.random.rand", "numpy.random.rand", "numpy.log", "numpy.log", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.get_variable", "numpy.array", "numpy.array", "tensorflow.initializers.random_uniform"], "methods", ["None"], ["", "def", "initialize_bfs", "(", "self", ",", "D", ")", ":", "\n", "        ", "m_W", "=", "0.02", "*", "np", ".", "random", ".", "rand", "(", "D", ",", "D", ")", "\n", "m_B", "=", "0.02", "*", "np", ".", "random", ".", "rand", "(", "D", ",", "D", ")", "\n", "np", ".", "fill_diagonal", "(", "m_W", ",", "np", ".", "log", "(", "1.02", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "m_B", ",", "np", ".", "log", "(", "0.98", ")", ")", "\n", "theta", "=", "{", "'W'", ":", "tf", ".", "Variable", "(", "np", ".", "array", "(", "m_W", ",", "dtype", "=", "np", ".", "float32", ")", ",", "name", "=", "'W'", ",", "trainable", "=", "True", ")", ",", "\n", "'B'", ":", "tf", ".", "Variable", "(", "np", ".", "array", "(", "m_B", ",", "dtype", "=", "np", ".", "float32", ")", ",", "name", "=", "'B'", ",", "trainable", "=", "True", ")", ",", "\n", "'mu'", ":", "tf", ".", "get_variable", "(", "name", "=", "'mu'", ",", "\n", "shape", "=", "[", "D", ",", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "0.0001", ",", "maxval", "=", "0.0001", ")", ",", "\n", "trainable", "=", "True", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_mlp": [[1179, 1195], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.initializers.random_uniform", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "initialize_mlp", "(", "self", ",", "D_in", ",", "D_out", ")", ":", "\n", "        ", "r", "=", "0.4", "\n", "theta", "=", "{", "'W'", ":", "tf", ".", "get_variable", "(", "'W'", ",", "\n", "shape", "=", "[", "D_in", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'b'", ":", "tf", ".", "get_variable", "(", "'b'", ",", "\n", "shape", "=", "[", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_cnn": [[1196, 1213], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.initializers.random_uniform", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "initialize_cnn", "(", "self", ",", "D_in", ",", "D_out", ",", "h", ")", ":", "\n", "        ", "r", "=", "0.1", "\n", "theta", "=", "{", "'W'", ":", "tf", ".", "get_variable", "(", "name", "=", "'W'", ",", "\n", "shape", "=", "[", "h", ",", "D_in", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'b'", ":", "tf", ".", "get_variable", "(", "name", "=", "'b'", ",", "\n", "shape", "=", "[", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_att": [[1214, 1235], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.initializers.random_uniform", "tensorflow.initializers.random_uniform", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "initialize_att", "(", "self", ",", "D_in", ",", "D_out", ")", ":", "\n", "        ", "r", "=", "0.03", "\n", "theta", "=", "{", "'W'", ":", "tf", ".", "get_variable", "(", "'W_a'", ",", "\n", "shape", "=", "[", "D_in", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'v'", ":", "tf", ".", "get_variable", "(", "'v_a'", ",", "shape", "=", "[", "D_out", ",", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'b'", ":", "tf", ".", "get_variable", "(", "'b_a'", ",", "shape", "=", "[", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.initialize_lstm": [[1236, 1300], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.initializers.random_uniform", "tensorflow.initializers.random_uniform", "tensorflow.constant_initializer", "tensorflow.initializers.random_uniform", "tensorflow.initializers.random_uniform", "tensorflow.constant_initializer", "tensorflow.initializers.random_uniform", "tensorflow.initializers.random_uniform", "tensorflow.constant_initializer", "tensorflow.initializers.random_uniform", "tensorflow.initializers.random_uniform", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "initialize_lstm", "(", "self", ",", "D_in", ",", "D_out", ")", ":", "\n", "        ", "r", "=", "0.05", "\n", "theta", "=", "{", "'W_i'", ":", "tf", ".", "get_variable", "(", "'W_i'", ",", "shape", "=", "[", "D_in", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'U_i'", ":", "tf", ".", "get_variable", "(", "'U_i'", ",", "shape", "=", "[", "D_out", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'b_i'", ":", "tf", ".", "get_variable", "(", "'b_i'", ",", "shape", "=", "[", "1", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'W_f'", ":", "tf", ".", "get_variable", "(", "'W_f'", ",", "shape", "=", "[", "D_in", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'U_f'", ":", "tf", ".", "get_variable", "(", "'U_f'", ",", "shape", "=", "[", "D_out", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'b_f'", ":", "tf", ".", "get_variable", "(", "'b_f'", ",", "shape", "=", "[", "1", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "2.5", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'W_c'", ":", "tf", ".", "get_variable", "(", "'W_c'", ",", "shape", "=", "[", "D_in", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'U_c'", ":", "tf", ".", "get_variable", "(", "'U_c'", ",", "shape", "=", "[", "D_out", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'b_c'", ":", "tf", ".", "get_variable", "(", "'b_c'", ",", "shape", "=", "[", "1", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'W_o'", ":", "tf", ".", "get_variable", "(", "'W_o'", ",", "shape", "=", "[", "D_in", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'U_o'", ":", "tf", ".", "get_variable", "(", "'U_o'", ",", "shape", "=", "[", "D_out", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "-", "r", ",", "maxval", "=", "r", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", ",", "\n", "'b_o'", ":", "tf", ".", "get_variable", "(", "'b_o'", ",", "shape", "=", "[", "1", ",", "D_out", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.update_model": [[1304, 1355], ["adhominem.AdHominem.sess.run", "adhominem.AdHominem.compute_labels", "adhominem.AdHominem.compute_labels", "adhominem.AdHominem.compute_labels", "adhominem.AdHominem.compute_labels", "adhominem.AdHominem.compute_labels", "adhominem.AdHominem.compute_TP_FP_TN_FN", "adhominem.AdHominem.compute_TP_FP_TN_FN", "adhominem.AdHominem.compute_TP_FP_TN_FN", "adhominem.AdHominem.compute_TP_FP_TN_FN", "adhominem.AdHominem.compute_TP_FP_TN_FN"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_TP_FP_TN_FN", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_TP_FP_TN_FN", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_TP_FP_TN_FN", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_TP_FP_TN_FN", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_TP_FP_TN_FN"], ["", "def", "update_model", "(", "self", ",", "x_w_L", ",", "x_w_R", ",", "x_c_L", ",", "x_c_R", ",", "labels_a", ",", "labels_f", ",", "N_w_L", ",", "N_w_R", ",", "N_s_L", ",", "N_s_R", ",", "lr", ")", ":", "\n", "\n", "        ", "feed_dict", "=", "{", "self", ".", "placeholders", "[", "'x_w_L'", "]", ":", "x_w_L", ",", "\n", "self", ".", "placeholders", "[", "'x_w_R'", "]", ":", "x_w_R", ",", "\n", "self", ".", "placeholders", "[", "'x_c_L'", "]", ":", "x_c_L", ",", "\n", "self", ".", "placeholders", "[", "'x_c_R'", "]", ":", "x_c_R", ",", "\n", "self", ".", "placeholders", "[", "'labels_a'", "]", ":", "labels_a", ",", "\n", "self", ".", "placeholders", "[", "'labels_f'", "]", ":", "labels_f", ",", "\n", "self", ".", "placeholders", "[", "'N_w_L'", "]", ":", "N_w_L", ",", "\n", "self", ".", "placeholders", "[", "'N_w_R'", "]", ":", "N_w_R", ",", "\n", "self", ".", "placeholders", "[", "'N_s_L'", "]", ":", "N_s_L", ",", "\n", "self", ".", "placeholders", "[", "'N_s_R'", "]", ":", "N_s_R", ",", "\n", "self", ".", "placeholders", "[", "'is_training'", "]", ":", "True", ",", "\n", "self", ".", "placeholders", "[", "'lr'", "]", ":", "lr", ",", "\n", "}", "\n", "_", ",", "loss", ",", "pred_dml_a", ",", "pred_dml_f", ",", "pred_bfs_a", ",", "pred_bfs_f", ",", "pred_ual_a", ",", "conf_matrix_a", ",", "H_W_a", ",", "H_B_a", ",", "H_W_f", ",", "H_B_f", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer", ",", "self", ".", "loss", ",", "\n", "self", ".", "pred_dml_a", ",", "self", ".", "pred_dml_f", ",", "\n", "self", ".", "pred_bfs_a", ",", "self", ".", "pred_bfs_f", ",", "\n", "self", ".", "pred_ual_a", ",", "self", ".", "conf_matrix_a", ",", "\n", "self", ".", "H_W_a", ",", "self", ".", "H_B_a", ",", "self", ".", "H_W_f", ",", "self", ".", "H_B_f", ",", "\n", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "# execute label computation function", "\n", "labels_dml_a", "=", "self", ".", "compute_labels", "(", "pred_dml_a", ")", "\n", "labels_bfs_a", "=", "self", ".", "compute_labels", "(", "pred_bfs_a", ")", "\n", "labels_ual_a", "=", "self", ".", "compute_labels", "(", "pred_ual_a", "[", ":", ",", "1", "]", ")", "\n", "\n", "labels_dml_f", "=", "self", ".", "compute_labels", "(", "pred_dml_f", ")", "\n", "labels_bfs_f", "=", "self", ".", "compute_labels", "(", "pred_bfs_f", ")", "\n", "\n", "# compute values for accuracy, F1-score and c@1", "\n", "TP_dml_a", ",", "FP_dml_a", ",", "TN_dml_a", ",", "FN_dml_a", "=", "self", ".", "compute_TP_FP_TN_FN", "(", "labels_a", ",", "labels_dml_a", ")", "\n", "TP_bfs_a", ",", "FP_bfs_a", ",", "TN_bfs_a", ",", "FN_bfs_a", "=", "self", ".", "compute_TP_FP_TN_FN", "(", "labels_a", ",", "labels_bfs_a", ")", "\n", "TP_ual_a", ",", "FP_ual_a", ",", "TN_ual_a", ",", "FN_ual_a", "=", "self", ".", "compute_TP_FP_TN_FN", "(", "labels_a", ",", "labels_ual_a", ")", "\n", "\n", "TP_dml_f", ",", "FP_dml_f", ",", "TN_dml_f", ",", "FN_dml_f", "=", "self", ".", "compute_TP_FP_TN_FN", "(", "labels_f", ",", "labels_dml_f", ")", "\n", "TP_bfs_f", ",", "FP_bfs_f", ",", "TN_bfs_f", ",", "FN_bfs_f", "=", "self", ".", "compute_TP_FP_TN_FN", "(", "labels_f", ",", "labels_bfs_f", ")", "\n", "\n", "return", "loss", ",", "TP_dml_a", ",", "FP_dml_a", ",", "TN_dml_a", ",", "FN_dml_a", ",", "TP_bfs_a", ",", "FP_bfs_a", ",", "TN_bfs_a", ",", "FN_bfs_a", ",", "TP_ual_a", ",", "FP_ual_a", ",", "TN_ual_a", ",", "FN_ual_a", ",", "TP_dml_f", ",", "FP_dml_f", ",", "TN_dml_f", ",", "FN_dml_f", ",", "TP_bfs_f", ",", "FP_bfs_f", ",", "TN_bfs_f", ",", "FN_bfs_f", ",", "H_W_a", ",", "H_B_a", ",", "H_W_f", ",", "H_B_f", ",", "conf_matrix_a", "[", "0", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_confidence": [[1356, 1361], ["pred.copy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_confidence", "(", "pred", ",", "labels_hat", ")", ":", "\n", "        ", "confidences", "=", "pred", ".", "copy", "(", ")", "\n", "confidences", "[", "labels_hat", "==", "0", "]", "=", "1.0", "-", "confidences", "[", "labels_hat", "==", "0", "]", "\n", "return", "confidences", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.evaluate_model": [[1365, 1465], ["math.ceil", "range", "numpy.array().reshape", "numpy.array().reshape", "adhominem.AdHominem.compute_labels().reshape", "numpy.array().reshape", "adhominem.AdHominem.compute_labels().reshape", "numpy.array().reshape", "adhominem.AdHominem.compute_labels().reshape", "adhominem.AdHominem.compute_accuracy", "adhominem.AdHominem.compute_accuracy", "adhominem.AdHominem.compute_accuracy", "adhominem.AdHominem.compute_confidence", "reliability_diagrams.compute_calibration", "adhominem.AdHominem.compute_confidence", "reliability_diagrams.compute_calibration", "adhominem.AdHominem.compute_confidence", "reliability_diagrams.compute_calibration", "evaluate.evaluate_all", "evaluate.evaluate_all", "evaluate.evaluate_all", "adhominem.AdHominem.next_batch", "len", "len", "adhominem.AdHominem.doc2mat", "adhominem.AdHominem.doc2mat", "adhominem.AdHominem.compute_eval_measures", "numpy.array().reshape.extend", "numpy.array().reshape.extend", "numpy.array().reshape.extend", "numpy.array", "numpy.array", "adhominem.AdHominem.compute_labels", "numpy.array", "adhominem.AdHominem.compute_labels", "numpy.array", "adhominem.AdHominem.compute_labels", "numpy.array().reshape", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_accuracy", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_accuracy", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_accuracy", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_confidence", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_confidence", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_confidence", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.evaluate_all", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.evaluate_all", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.evaluate_all", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.next_batch", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_eval_measures", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels"], ["", "def", "evaluate_model", "(", "self", ",", "docs_L", ",", "docs_R", ",", "labels", ",", "batch_size", ")", ":", "\n", "\n", "        ", "num_batches", "=", "ceil", "(", "len", "(", "labels", ")", "/", "batch_size", ")", "\n", "\n", "TP_dml", ",", "FP_dml", ",", "TN_dml", ",", "FN_dml", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "TP_bfs", ",", "FP_bfs", ",", "TN_bfs", ",", "FN_bfs", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "TP_ual", ",", "FP_ual", ",", "TN_ual", ",", "FN_ual", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "pred_dml", ",", "pred_bfs", ",", "pred_ual", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "\n", "# get next batch", "\n", "            ", "docs_L_i", ",", "docs_R_i", ",", "labels_i", ",", "_", "=", "self", ".", "next_batch", "(", "i", "*", "batch_size", ",", "\n", "(", "i", "+", "1", ")", "*", "batch_size", ",", "\n", "docs_L", ",", "\n", "docs_R", ",", "\n", "labels", ",", "\n", "labels", ",", "\n", ")", "\n", "B", "=", "len", "(", "labels_i", ")", "\n", "\n", "if", "B", ">", "0", ":", "\n", "# word/character embeddings", "\n", "                ", "x_w_L", ",", "N_w_L", ",", "N_s_L", ",", "x_c_L", "=", "self", ".", "doc2mat", "(", "docs_L_i", ")", "\n", "x_w_R", ",", "N_w_R", ",", "N_s_R", ",", "x_c_R", "=", "self", ".", "doc2mat", "(", "docs_R_i", ")", "\n", "\n", "# accuracy for training set", "\n", "curr_TP_dml", ",", "curr_FP_dml", ",", "curr_TN_dml", ",", "curr_FN_dml", ",", "curr_TP_bfs", ",", "curr_FP_bfs", ",", "curr_TN_bfs", ",", "curr_FN_bfs", ",", "curr_TP_ual", ",", "curr_FP_ual", ",", "curr_TN_ual", ",", "curr_FN_ual", ",", "curr_pred_dml", ",", "curr_pred_bfs", ",", "curr_pred_ual", "=", "self", ".", "compute_eval_measures", "(", "x_w_L", "=", "x_w_L", ",", "\n", "x_w_R", "=", "x_w_R", ",", "\n", "x_c_L", "=", "x_c_L", ",", "\n", "x_c_R", "=", "x_c_R", ",", "\n", "labels", "=", "np", ".", "array", "(", "labels_i", ")", ".", "reshape", "(", "(", "B", ",", "1", ")", ")", ",", "\n", "N_w_L", "=", "N_w_L", ",", "\n", "N_w_R", "=", "N_w_R", ",", "\n", "N_s_L", "=", "N_s_L", ",", "\n", "N_s_R", "=", "N_s_R", ",", "\n", ")", "\n", "TP_dml", "+=", "curr_TP_dml", "\n", "FP_dml", "+=", "curr_FP_dml", "\n", "TN_dml", "+=", "curr_TN_dml", "\n", "FN_dml", "+=", "curr_FN_dml", "\n", "\n", "TP_bfs", "+=", "curr_TP_bfs", "\n", "FP_bfs", "+=", "curr_FP_bfs", "\n", "TN_bfs", "+=", "curr_TN_bfs", "\n", "FN_bfs", "+=", "curr_FN_bfs", "\n", "\n", "TP_ual", "+=", "curr_TP_ual", "\n", "FP_ual", "+=", "curr_FP_ual", "\n", "TN_ual", "+=", "curr_TN_ual", "\n", "FN_ual", "+=", "curr_FN_ual", "\n", "\n", "pred_dml", ".", "extend", "(", "curr_pred_dml", ")", "\n", "pred_bfs", ".", "extend", "(", "curr_pred_bfs", ")", "\n", "pred_ual", ".", "extend", "(", "curr_pred_ual", ")", "\n", "\n", "", "", "labels", "=", "np", ".", "array", "(", "labels", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "pred_dml", "=", "np", ".", "array", "(", "pred_dml", ")", ".", "reshape", "(", "-", "1", ")", "\n", "labels_dml", "=", "self", ".", "compute_labels", "(", "pred_dml", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "pred_bfs", "=", "np", ".", "array", "(", "pred_bfs", ")", ".", "reshape", "(", "-", "1", ")", "\n", "labels_bfs", "=", "self", ".", "compute_labels", "(", "pred_bfs", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "pred_ual", "=", "np", ".", "array", "(", "pred_ual", ")", ".", "reshape", "(", "-", "1", ")", "\n", "labels_ual", "=", "self", ".", "compute_labels", "(", "pred_ual", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "acc_dml", "=", "self", ".", "compute_accuracy", "(", "TP_dml", ",", "FP_dml", ",", "TN_dml", ",", "FN_dml", ")", "\n", "acc_bfs", "=", "self", ".", "compute_accuracy", "(", "TP_bfs", ",", "FP_bfs", ",", "TN_bfs", ",", "FN_bfs", ")", "\n", "acc_ual", "=", "self", ".", "compute_accuracy", "(", "TP_ual", ",", "FP_ual", ",", "TN_ual", ",", "FN_ual", ")", "\n", "\n", "# compute expected calibration error and maximum cal. error", "\n", "confidence_dml", "=", "self", ".", "compute_confidence", "(", "pred_dml", ",", "labels_dml", ")", "\n", "calibration_dml", "=", "compute_calibration", "(", "true_labels", "=", "labels", ",", "\n", "pred_labels", "=", "labels_dml", ",", "\n", "confidences", "=", "confidence_dml", ",", "\n", ")", "\n", "confidence_bfs", "=", "self", ".", "compute_confidence", "(", "pred_bfs", ",", "labels_bfs", ")", "\n", "calibration_bfs", "=", "compute_calibration", "(", "true_labels", "=", "labels", ",", "\n", "pred_labels", "=", "labels_bfs", ",", "\n", "confidences", "=", "confidence_bfs", ",", "\n", ")", "\n", "confidence_ual", "=", "self", ".", "compute_confidence", "(", "pred_ual", ",", "labels_ual", ")", "\n", "calibration_ual", "=", "compute_calibration", "(", "true_labels", "=", "labels", ",", "\n", "pred_labels", "=", "labels_ual", ",", "\n", "confidences", "=", "confidence_ual", ",", "\n", ")", "\n", "\n", "pan_dml", "=", "evaluate_all", "(", "pred_y", "=", "pred_dml", ",", "true_y", "=", "labels", ")", "\n", "pan_bfs", "=", "evaluate_all", "(", "pred_y", "=", "pred_bfs", ",", "true_y", "=", "labels", ")", "\n", "pan_ual", "=", "evaluate_all", "(", "pred_y", "=", "pred_ual", ",", "true_y", "=", "labels", ")", "\n", "\n", "return", "acc_dml", ",", "acc_bfs", ",", "acc_ual", ",", "pan_dml", ",", "pan_bfs", ",", "pan_ual", ",", "calibration_dml", ",", "calibration_bfs", ",", "calibration_ual", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_eval_measures": [[1469, 1498], ["adhominem.AdHominem.sess.run", "adhominem.AdHominem.compute_labels", "adhominem.AdHominem.compute_labels", "adhominem.AdHominem.compute_labels", "adhominem.AdHominem.compute_TP_FP_TN_FN", "adhominem.AdHominem.compute_TP_FP_TN_FN", "adhominem.AdHominem.compute_TP_FP_TN_FN"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_TP_FP_TN_FN", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_TP_FP_TN_FN", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_TP_FP_TN_FN"], ["", "def", "compute_eval_measures", "(", "self", ",", "x_w_L", ",", "x_w_R", ",", "x_c_L", ",", "x_c_R", ",", "labels", ",", "N_w_L", ",", "N_w_R", ",", "N_s_L", ",", "N_s_R", ")", ":", "\n", "\n", "# compute distances", "\n", "        ", "pred_dml", ",", "pred_bfs", ",", "pred_ual", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_dml_a", ",", "self", ".", "pred_bfs_a", ",", "self", ".", "pred_ual_a", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "placeholders", "[", "'x_w_L'", "]", ":", "x_w_L", ",", "\n", "self", ".", "placeholders", "[", "'x_w_R'", "]", ":", "x_w_R", ",", "\n", "self", ".", "placeholders", "[", "'x_c_L'", "]", ":", "x_c_L", ",", "\n", "self", ".", "placeholders", "[", "'x_c_R'", "]", ":", "x_c_R", ",", "\n", "self", ".", "placeholders", "[", "'N_w_L'", "]", ":", "N_w_L", ",", "\n", "self", ".", "placeholders", "[", "'N_w_R'", "]", ":", "N_w_R", ",", "\n", "self", ".", "placeholders", "[", "'N_s_L'", "]", ":", "N_s_L", ",", "\n", "self", ".", "placeholders", "[", "'N_s_R'", "]", ":", "N_s_R", ",", "\n", "self", ".", "placeholders", "[", "'is_training'", "]", ":", "False", ",", "\n", "}", ")", "\n", "\n", "# execute label computation function", "\n", "labels_dml", "=", "self", ".", "compute_labels", "(", "pred_dml", ")", "\n", "labels_bfs", "=", "self", ".", "compute_labels", "(", "pred_bfs", ")", "\n", "labels_ual", "=", "self", ".", "compute_labels", "(", "pred_ual", "[", ":", ",", "1", "]", ")", "\n", "\n", "# compute values for accuracy, F1-score and c@1", "\n", "TP_dml", ",", "FP_dml", ",", "TN_dml", ",", "FN_dml", "=", "self", ".", "compute_TP_FP_TN_FN", "(", "labels", ",", "labels_dml", ")", "\n", "TP_bfs", ",", "FP_bfs", ",", "TN_bfs", ",", "FN_bfs", "=", "self", ".", "compute_TP_FP_TN_FN", "(", "labels", ",", "labels_bfs", ")", "\n", "TP_ual", ",", "FP_ual", ",", "TN_ual", ",", "FN_ual", "=", "self", ".", "compute_TP_FP_TN_FN", "(", "labels", ",", "labels_ual", ")", "\n", "\n", "return", "TP_dml", ",", "FP_dml", ",", "TN_dml", ",", "FN_dml", ",", "TP_bfs", ",", "FP_bfs", ",", "TN_bfs", ",", "FN_bfs", ",", "TP_ual", ",", "FP_ual", ",", "TN_ual", ",", "FN_ual", ",", "pred_dml", ",", "pred_bfs", ",", "pred_ual", "[", ":", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_TP_FP_TN_FN": [[1502, 1518], ["range", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_TP_FP_TN_FN", "(", "labels", ",", "labels_hat", ")", ":", "\n", "\n", "        ", "TP", ",", "FP", ",", "TN", ",", "FN", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "labels_hat", ")", ")", ":", "\n", "            ", "if", "labels", "[", "i", "]", "==", "1", "and", "labels_hat", "[", "i", "]", "==", "1", ":", "\n", "                ", "TP", "+=", "1", "\n", "", "if", "labels", "[", "i", "]", "==", "0", "and", "labels_hat", "[", "i", "]", "==", "1", ":", "\n", "                ", "FP", "+=", "1", "\n", "", "if", "labels", "[", "i", "]", "==", "0", "and", "labels_hat", "[", "i", "]", "==", "0", ":", "\n", "                ", "TN", "+=", "1", "\n", "", "if", "labels", "[", "i", "]", "==", "1", "and", "labels_hat", "[", "i", "]", "==", "0", ":", "\n", "                ", "FN", "+=", "1", "\n", "\n", "", "", "return", "TP", ",", "FP", ",", "TN", ",", "FN", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.compute_accuracy": [[1522, 1528], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_accuracy", "(", "TP", ",", "FP", ",", "TN", ",", "FN", ")", ":", "\n", "\n", "        ", "acc", "=", "(", "TP", "+", "TN", ")", "/", "(", "TP", "+", "FP", "+", "TN", "+", "FN", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.next_batch": [[1532, 1541], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "next_batch", "(", "t_s", ",", "t_e", ",", "docs_L", ",", "docs_R", ",", "labels_a", ",", "labels_f", ")", ":", "\n", "\n", "        ", "docs_L", "=", "docs_L", "[", "t_s", ":", "t_e", "]", "\n", "docs_R", "=", "docs_R", "[", "t_s", ":", "t_e", "]", "\n", "labels_a", "=", "labels_a", "[", "t_s", ":", "t_e", "]", "\n", "labels_f", "=", "labels_f", "[", "t_s", ":", "t_e", "]", "\n", "\n", "return", "docs_L", ",", "docs_R", ",", "labels_a", ",", "labels_f", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.sliding_window": [[1545, 1564], ["doc.split", "len", "doc_new.append", "sent_new.strip"], "methods", ["None"], ["", "def", "sliding_window", "(", "self", ",", "doc", ")", ":", "\n", "\n", "        ", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "hop_length", "=", "self", ".", "hyper_parameters", "[", "'hop_length'", "]", "\n", "\n", "tokens", "=", "doc", ".", "split", "(", ")", "\n", "doc_new", "=", "[", "]", "\n", "n", "=", "0", "\n", "while", "len", "(", "tokens", "[", "n", ":", "n", "+", "T_w", "]", ")", ">", "0", ":", "\n", "# split sentence into tokens", "\n", "            ", "sent_new", "=", "''", "\n", "for", "token", "in", "tokens", "[", "n", ":", "n", "+", "T_w", "]", ":", "\n", "                ", "sent_new", "+=", "token", "+", "' '", "\n", "# add to new doc", "\n", "", "doc_new", ".", "append", "(", "sent_new", ".", "strip", "(", ")", ")", "\n", "# update stepsize", "\n", "n", "+=", "hop_length", "\n", "\n", "", "return", "doc_new", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.doc2mat": [[1568, 1615], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "adhominem.AdHominem.sliding_window", "len", "enumerate", "sentence.split", "len", "enumerate", "len", "random.uniform", "random.randint", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.plot_att_html.sliding_window"], ["", "def", "doc2mat", "(", "self", ",", "docs", ",", "is_training", "=", "False", ")", ":", "\n", "\n", "        ", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "V_c", "=", "self", ".", "hyper_parameters", "[", "'V_c'", "]", "\n", "V_w", "=", "self", ".", "hyper_parameters", "[", "'V_w'", "]", "\n", "\n", "# batch size", "\n", "B", "=", "len", "(", "docs", ")", "\n", "N_w", "=", "np", ".", "zeros", "(", "(", "B", ",", "T_s", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "N_s", "=", "np", ".", "zeros", "(", "(", "B", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# word-based tensor, shape = [B, T_s, T_w]", "\n", "x_w", "=", "np", ".", "zeros", "(", "(", "B", ",", "T_s", ",", "T_w", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# character-based tensor", "\n", "x_c", "=", "np", ".", "zeros", "(", "(", "B", ",", "T_s", ",", "T_w", ",", "T_c", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# current document", "\n", "for", "i", ",", "doc", "in", "enumerate", "(", "docs", ")", ":", "\n", "\n", "# apply sliding window to construct sentence like units", "\n", "            ", "doc", "=", "self", ".", "sliding_window", "(", "doc", ")", "\n", "\n", "if", "len", "(", "doc", ")", ">", "T_s", "and", "is_training", ":", "\n", "                ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "0.5", ":", "\n", "                    ", "r", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "doc", ")", "-", "T_s", ")", "\n", "doc", "=", "doc", "[", "r", ":", "r", "+", "T_s", "]", "\n", "", "", "N_s", "[", "i", "]", "=", "len", "(", "doc", "[", ":", "T_s", "]", ")", "\n", "# current sentence", "\n", "for", "j", ",", "sentence", "in", "enumerate", "(", "doc", "[", ":", "T_s", "]", ")", ":", "\n", "                ", "tokens", "=", "sentence", ".", "split", "(", ")", "\n", "N_w", "[", "i", ",", "j", "]", "=", "len", "(", "tokens", ")", "\n", "# current tokens", "\n", "for", "k", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                    ", "if", "token", "in", "V_w", ":", "\n", "                        ", "x_w", "[", "i", ",", "j", ",", "k", "]", "=", "V_w", "[", "token", "]", "\n", "", "else", ":", "\n", "                        ", "x_w", "[", "i", ",", "j", ",", "k", "]", "=", "V_w", "[", "'<UNK>'", "]", "\n", "# current character", "\n", "", "for", "l", ",", "chr", "in", "enumerate", "(", "token", "[", ":", "T_c", "]", ")", ":", "\n", "                        ", "if", "chr", "in", "V_c", ":", "\n", "                            ", "x_c", "[", "i", ",", "j", ",", "k", ",", "l", "]", "=", "V_c", "[", "chr", "]", "\n", "", "else", ":", "\n", "                            ", "x_c", "[", "i", ",", "j", ",", "k", ",", "l", "]", "=", "V_c", "[", "'<UNK>'", "]", "\n", "\n", "", "", "", "", "", "return", "x_w", ",", "N_w", ",", "N_s", ",", "x_c", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.store_parameters": [[1619, 1649], ["os.path.join", "adhominem.AdHominem.thetas_E.keys", "adhominem.AdHominem.theta.keys", "os.path.join", "os.path.exists", "os.makedirs", "adhominem.AdHominem.sess.run", "adhominem.AdHominem.theta[].keys", "open", "pickle.dump", "adhominem.AdHominem.sess.run", "str"], "methods", ["None"], ["", "def", "store_parameters", "(", "self", ",", "step", ",", "dire_results", ")", ":", "\n", "\n", "        ", "dir_weights", "=", "os", ".", "path", ".", "join", "(", "dire_results", ",", "\n", "'weights_adhominem'", ",", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_weights", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_weights", ")", "\n", "\n", "", "parameters", "=", "{", "'hyper_parameters'", ":", "{", "}", ",", "\n", "'theta'", ":", "{", "}", ",", "\n", "'theta_E'", ":", "{", "}", ",", "\n", "}", "\n", "\n", "# hyper-parameters", "\n", "for", "hp", "in", "self", ".", "hyper_parameters", ":", "\n", "            ", "parameters", "[", "'hyper_parameters'", "]", "[", "hp", "]", "=", "self", ".", "hyper_parameters", "[", "hp", "]", "\n", "\n", "# character and word embeddings", "\n", "", "for", "var", "in", "self", ".", "thetas_E", ".", "keys", "(", ")", ":", "\n", "            ", "parameters", "[", "'theta_E'", "]", "[", "var", "]", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "thetas_E", "[", "var", "]", ")", "\n", "\n", "# variables for feature extraction and plda", "\n", "", "for", "layer", "in", "self", ".", "theta", ".", "keys", "(", ")", ":", "\n", "            ", "parameters", "[", "'theta'", "]", "[", "layer", "]", "=", "{", "}", "\n", "for", "var", "in", "self", ".", "theta", "[", "layer", "]", ".", "keys", "(", ")", ":", "\n", "                ", "parameters", "[", "'theta'", "]", "[", "layer", "]", "[", "var", "]", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "theta", "[", "layer", "]", "[", "var", "]", ")", "\n", "\n", "", "", "file", "=", "os", ".", "path", ".", "join", "(", "dir_weights", ",", "'weights_'", "+", "str", "(", "step", ")", ")", "\n", "with", "open", "(", "file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "parameters", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.train_model": [[1653, 1826], ["numpy.array", "numpy.maximum", "open().write", "range", "range", "open().write", "open().write", "resample_pairs_train.resample_pairs_train.resample_pairs_train", "sklearn.utils.shuffle", "len", "math.ceil", "range", "adhominem.AdHominem.evaluate_model", "open().write", "adhominem.AdHominem.store_parameters", "open", "str().split", "adhominem.AdHominem.next_batch", "len", "str().split", "str", "open", "open", "adhominem.AdHominem.doc2mat", "adhominem.AdHominem.doc2mat", "adhominem.AdHominem.update_model", "loss.append", "open().write", "open", "str", "str", "str", "str", "datetime.datetime.now", "numpy.array().reshape", "numpy.array().reshape", "numpy.round", "open", "datetime.datetime.now", "str", "str", "conf_matrix_a.reshape", "str", "numpy.array", "numpy.array", "round", "str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "round", "str", "str", "round", "round", "str", "str", "round", "round", "str", "round", "str", "str", "round", "round", "str", "str", "round", "round", "str", "str", "float", "round", "numpy.mean", "str", "str", "round", "str", "str"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.resample_pairs_train.resample_pairs_train", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.evaluate_model", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.store_parameters", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.next_batch", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.training_adhominem.adhominem.AdHominem.update_model"], ["", "", "def", "train_model", "(", "self", ",", "dev_set", ",", "file_results", ",", "file_tmp", ",", "dir_results", ")", ":", "\n", "\n", "# total number of epochs", "\n", "        ", "epochs", "=", "self", ".", "hyper_parameters", "[", "'epochs'", "]", "\n", "\n", "# number of batches for dev/test set", "\n", "batch_size", "=", "self", ".", "hyper_parameters", "[", "'batch_size'", "]", "\n", "batch_size_dev", "=", "self", ".", "hyper_parameters", "[", "'batch_size_dev'", "]", "\n", "\n", "# dev set", "\n", "docs_L_dev", ",", "docs_R_dev", ",", "labels_dev", "=", "dev_set", "\n", "\n", "# define learning rate", "\n", "epoch_1", "=", "0", "\n", "epoch_2", "=", "self", ".", "hyper_parameters", "[", "'lr_epoch'", "]", "\n", "lr_1", "=", "self", ".", "hyper_parameters", "[", "'lr_start'", "]", "\n", "lr_2", "=", "self", ".", "hyper_parameters", "[", "'lr_end'", "]", "\n", "p", "=", "np", ".", "array", "(", "range", "(", "epochs", ")", ")", "\n", "m", "=", "(", "lr_2", "-", "lr_1", ")", "/", "(", "epoch_2", "-", "epoch_1", ")", "\n", "b", "=", "lr_1", "\n", "lr", "=", "np", ".", "maximum", "(", "m", "*", "p", "+", "b", ",", "lr_2", ")", "\n", "\n", "################", "\n", "# start training", "\n", "################", "\n", "open", "(", "file_tmp", ",", "'a'", ")", ".", "write", "(", "'Preprocessing steps done, start training...'", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "# store current time", "\n", "            ", "s", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "open", "(", "file_tmp", ",", "'a'", ")", ".", "write", "(", "'\\n\\n'", "+", "100", "*", "'-'", "+", "'\\n'", ")", "\n", "open", "(", "file_tmp", ",", "'a'", ")", ".", "write", "(", "'start epoch '", "+", "str", "(", "epoch", ")", "+", "': '", "+", "s", "+", "'\\n'", ")", "\n", "\n", "# training set", "\n", "docs_L_tr", ",", "docs_R_tr", ",", "labels_a_tr", ",", "labels_f_tr", "=", "resample_pairs_train", "(", "file_results", ")", "\n", "# shuffle (again)", "\n", "docs_L_tr", ",", "docs_R_tr", ",", "labels_a_tr", ",", "labels_f_tr", "=", "shuffle", "(", "docs_L_tr", ",", "docs_R_tr", ",", "labels_a_tr", ",", "labels_f_tr", ")", "\n", "\n", "# number of training pairs", "\n", "N_tr", "=", "len", "(", "labels_a_tr", ")", "\n", "# number of batches for training", "\n", "num_batches_tr", "=", "ceil", "(", "N_tr", "/", "batch_size", ")", "\n", "\n", "# average loss and accuracy", "\n", "loss", "=", "[", "]", "\n", "TP_dml_a", ",", "FP_dml_a", ",", "TN_dml_a", ",", "FN_dml_a", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "TP_bfs_a", ",", "FP_bfs_a", ",", "TN_bfs_a", ",", "FN_bfs_a", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "TP_ual_a", ",", "FP_ual_a", ",", "TN_ual_a", ",", "FN_ual_a", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "TP_dml_f", ",", "FP_dml_f", ",", "TN_dml_f", ",", "FN_dml_f", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "TP_bfs_f", ",", "FP_bfs_f", ",", "TN_bfs_f", ",", "FN_bfs_f", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "# loop over all batches", "\n", "for", "i", "in", "range", "(", "num_batches_tr", ")", ":", "\n", "\n", "# get next batch", "\n", "                ", "docs_L_i", ",", "docs_R_i", ",", "labels_a_i", ",", "labels_f_i", "=", "self", ".", "next_batch", "(", "i", "*", "batch_size", ",", "\n", "(", "i", "+", "1", ")", "*", "batch_size", ",", "\n", "docs_L_tr", ",", "\n", "docs_R_tr", ",", "\n", "labels_a_tr", ",", "\n", "labels_f_tr", ",", "\n", ")", "\n", "\n", "# current batch size", "\n", "B", "=", "len", "(", "labels_a_i", ")", "\n", "\n", "if", "B", ">", "0", ":", "\n", "# word / character embeddings", "\n", "                    ", "x_w_L", ",", "N_w_L", ",", "N_s_L", ",", "x_c_L", "=", "self", ".", "doc2mat", "(", "docs_L_i", ",", "is_training", "=", "True", ")", "\n", "x_w_R", ",", "N_w_R", ",", "N_s_R", ",", "x_c_R", "=", "self", ".", "doc2mat", "(", "docs_R_i", ",", "is_training", "=", "True", ")", "\n", "\n", "# update model parameters", "\n", "curr_loss", ",", "curr_TP_dml_a", ",", "curr_FP_dml_a", ",", "curr_TN_dml_a", ",", "curr_FN_dml_a", ",", "curr_TP_bfs_a", ",", "curr_FP_bfs_a", ",", "curr_TN_bfs_a", ",", "curr_FN_bfs_a", ",", "curr_TP_ual_a", ",", "curr_FP_ual_a", ",", "curr_TN_ual_a", ",", "curr_FN_ual_a", ",", "curr_TP_dml_f", ",", "curr_FP_dml_f", ",", "curr_TN_dml_f", ",", "curr_FN_dml_f", ",", "curr_TP_bfs_f", ",", "curr_FP_bfs_f", ",", "curr_TN_bfs_f", ",", "curr_FN_bfs_f", ",", "H_W_a", ",", "H_B_a", ",", "H_W_f", ",", "H_B_f", ",", "conf_matrix_a", "=", "self", ".", "update_model", "(", "x_w_L", "=", "x_w_L", ",", "\n", "x_w_R", "=", "x_w_R", ",", "\n", "x_c_L", "=", "x_c_L", ",", "\n", "x_c_R", "=", "x_c_R", ",", "\n", "labels_a", "=", "np", ".", "array", "(", "labels_a_i", ")", ".", "reshape", "(", "(", "B", ",", "1", ")", ")", ",", "\n", "labels_f", "=", "np", ".", "array", "(", "labels_f_i", ")", ".", "reshape", "(", "(", "B", ",", "1", ")", ")", ",", "\n", "N_w_L", "=", "N_w_L", ",", "\n", "N_w_R", "=", "N_w_R", ",", "\n", "N_s_L", "=", "N_s_L", ",", "\n", "N_s_R", "=", "N_s_R", ",", "\n", "lr", "=", "lr", "[", "epoch", "]", ",", "\n", ")", "\n", "\n", "loss", ".", "append", "(", "curr_loss", ")", "\n", "\n", "TP_dml_a", "+=", "curr_TP_dml_a", "\n", "FP_dml_a", "+=", "curr_FP_dml_a", "\n", "TN_dml_a", "+=", "curr_TN_dml_a", "\n", "FN_dml_a", "+=", "curr_FN_dml_a", "\n", "\n", "TP_bfs_a", "+=", "curr_TP_bfs_a", "\n", "FP_bfs_a", "+=", "curr_FP_bfs_a", "\n", "TN_bfs_a", "+=", "curr_TN_bfs_a", "\n", "FN_bfs_a", "+=", "curr_FN_bfs_a", "\n", "\n", "TP_ual_a", "+=", "curr_TP_ual_a", "\n", "FP_ual_a", "+=", "curr_FP_ual_a", "\n", "TN_ual_a", "+=", "curr_TN_ual_a", "\n", "FN_ual_a", "+=", "curr_FN_ual_a", "\n", "\n", "TP_dml_f", "+=", "curr_TP_dml_f", "\n", "FP_dml_f", "+=", "curr_FP_dml_f", "\n", "TN_dml_f", "+=", "curr_TN_dml_f", "\n", "FN_dml_f", "+=", "curr_FN_dml_f", "\n", "\n", "TP_bfs_f", "+=", "curr_TP_bfs_f", "\n", "FP_bfs_f", "+=", "curr_FP_bfs_f", "\n", "TN_bfs_f", "+=", "curr_TN_bfs_f", "\n", "FN_bfs_f", "+=", "curr_FN_bfs_f", "\n", "\n", "s", "=", "'Epoch:'", "+", "str", "(", "epoch", ")", "+", "', B: '", "+", "str", "(", "round", "(", "100", "*", "(", "i", "+", "1", ")", "/", "num_batches_tr", ",", "0", ")", ")", "+", "', #P: '", "+", "str", "(", "N_tr", ")", "+", "', L: '", "+", "str", "(", "round", "(", "float", "(", "np", ".", "mean", "(", "loss", ")", ")", ",", "3", ")", ")", "+", "', A(dml): '", "+", "str", "(", "round", "(", "100", "*", "(", "TP_dml_a", "+", "TN_dml_a", ")", "/", "(", "TP_dml_a", "+", "FP_dml_a", "+", "TN_dml_a", "+", "FN_dml_a", ")", ",", "2", ")", ")", "+", "', A(bfs): '", "+", "str", "(", "round", "(", "100", "*", "(", "TP_bfs_a", "+", "TN_bfs_a", ")", "/", "(", "TP_bfs_a", "+", "FP_bfs_a", "+", "TN_bfs_a", "+", "FN_bfs_a", ")", ",", "2", ")", ")", "+", "', A(ual): '", "+", "str", "(", "round", "(", "100", "*", "(", "TP_ual_a", "+", "TN_ual_a", ")", "/", "(", "TP_ual_a", "+", "FP_ual_a", "+", "TN_ual_a", "+", "FN_ual_a", ")", ",", "2", ")", ")", "+", "', A(f-dml): '", "+", "str", "(", "round", "(", "100", "*", "(", "TP_dml_f", "+", "TN_dml_f", ")", "/", "(", "TP_dml_f", "+", "FP_dml_f", "+", "TN_dml_f", "+", "FN_dml_f", ")", ",", "2", ")", ")", "+", "', A(f-bfs): '", "+", "str", "(", "round", "(", "100", "*", "(", "TP_bfs_f", "+", "TN_bfs_f", ")", "/", "(", "TP_bfs_f", "+", "FP_bfs_f", "+", "TN_bfs_f", "+", "FN_bfs_f", ")", ",", "2", ")", ")", "+", "', H_W(a): '", "+", "str", "(", "round", "(", "H_W_a", ",", "3", ")", ")", "+", "', H_B(a): '", "+", "str", "(", "round", "(", "H_B_a", ",", "3", ")", ")", "+", "', H_W(f): '", "+", "str", "(", "round", "(", "H_W_f", ",", "3", ")", ")", "+", "', H_B(f): '", "+", "str", "(", "round", "(", "H_B_f", ",", "3", ")", ")", "+", "', LR: '", "+", "str", "(", "round", "(", "lr", "[", "epoch", "]", ",", "5", ")", ")", "+", "', CM: '", "+", "str", "(", "np", ".", "round", "(", "conf_matrix_a", ".", "reshape", "(", "-", "1", ")", ",", "3", ")", ")", "\n", "open", "(", "file_tmp", ",", "'a'", ")", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "\n", "####################", "\n", "# compute accuracies", "\n", "####################", "\n", "", "", "acc_dev_dml", ",", "acc_dev_bfs", ",", "acc_dev_ual", ",", "pan_dev_dml", ",", "pan_dev_bfs", ",", "pan_dev_ual", ",", "calibration_dev_dml", ",", "calibration_dev_bfs", ",", "calibration_dev_ual", "=", "self", ".", "evaluate_model", "(", "docs_L_dev", ",", "docs_R_dev", ",", "labels_dev", ",", "batch_size_dev", ")", "\n", "\n", "#####################", "\n", "# update progress bar", "\n", "#####################", "\n", "time", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "s", "=", "'\\n Time: '", "+", "str", "(", "time", ")", "+", "'\\n Epoch: '", "+", "str", "(", "epoch", ")", "+", "'\\n ----------'", "+", "'\\n Acc (dml, train): '", "+", "str", "(", "round", "(", "100", "*", "(", "TP_dml_a", "+", "TN_dml_a", ")", "/", "(", "TP_dml_a", "+", "FP_dml_a", "+", "TN_dml_a", "+", "FN_dml_a", ")", ",", "2", ")", ")", "+", "'\\n Acc (bfs, train): '", "+", "str", "(", "round", "(", "100", "*", "(", "TP_bfs_a", "+", "TN_bfs_a", ")", "/", "(", "TP_bfs_a", "+", "FP_bfs_a", "+", "TN_bfs_a", "+", "FN_bfs_a", ")", ",", "2", ")", ")", "+", "'\\n Acc (ual, train): '", "+", "str", "(", "round", "(", "100", "*", "(", "TP_ual_a", "+", "TN_ual_a", ")", "/", "(", "TP_ual_a", "+", "FP_ual_a", "+", "TN_ual_a", "+", "FN_ual_a", ")", ",", "2", ")", ")", "+", "'\\n ----------'", "+", "'\\n Acc (dml, dev): '", "+", "str", "(", "round", "(", "100", "*", "acc_dev_dml", ",", "4", ")", ")", "+", "'\\n Acc (bfs, dev): '", "+", "str", "(", "round", "(", "100", "*", "acc_dev_bfs", ",", "4", ")", ")", "+", "'\\n Acc (ual, dev): '", "+", "str", "(", "round", "(", "100", "*", "acc_dev_ual", ",", "4", ")", ")", "+", "'\\n ----------'", "+", "'\\n PAN scores (dml, dev): '", "+", "str", "(", "pan_dev_dml", ")", "+", "'\\n PAN scores (bfs, dev): '", "+", "str", "(", "pan_dev_bfs", ")", "+", "'\\n PAN scores (ual, dev): '", "+", "str", "(", "pan_dev_ual", ")", "+", "'\\n ----------'", "+", "'\\n Calibration scores (dml, dev): '", "+", "str", "(", "calibration_dev_dml", ")", "+", "'\\n Calibration scores (bfs, dev): '", "+", "str", "(", "calibration_dev_bfs", ")", "+", "'\\n Calibration scores (ual, dev): '", "+", "str", "(", "calibration_dev_ual", ")", "\n", "open", "(", "file_results", ",", "'a'", ")", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "\n", "##########################", "\n", "# store weights/parameters", "\n", "##########################", "\n", "self", ".", "store_parameters", "(", "epoch", ",", "dir_results", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.binarize": [[87, 93], ["numpy.array", "numpy.ma.fix_invalid"], "function", ["None"], ["def", "binarize", "(", "y", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "y", "=", "np", ".", "ma", ".", "fix_invalid", "(", "y", ",", "fill_value", "=", "threshold", ")", "\n", "y", "[", "y", ">=", "threshold", "]", "=", "1", "\n", "y", "[", "y", "<", "threshold", "]", "=", "0", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.auc": [[95, 127], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "def", "auc", "(", "true_y", ",", "pred_y", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the AUC score (Area Under the Curve), a well-known\n    scalar evaluation score for binary classifiers. This score\n    also considers \"unanswered\" problem, where score = 0.5.\n\n    Parameters\n    ----------\n    prediction_scores : array [n_problems]\n\n        The predictions outputted by a verification system.\n        Assumes `0 >= prediction <=1`.\n\n    ground_truth_scores : array [n_problems]\n\n        The gold annotations provided for each problem.\n        Will typically be `0` or `1`.\n\n    Returns\n    ----------\n    auc = the Area Under the Curve.\n\n    References\n    ----------\n        E. Stamatatos, et al. Overview of the Author Identification\n        Task at PAN 2014. CLEF (Working Notes) 2014: 877-897.\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "return", "roc_auc_score", "(", "true_y", ",", "pred_y", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.c_at_1": [[129, 177], ["float", "zip", "len"], "function", ["None"], ["", "", "def", "c_at_1", "(", "true_y", ",", "pred_y", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the c@1 score, an evaluation method specific to the\n    PAN competition. This method rewards predictions which leave\n    some problems unanswered (score = 0.5). See:\n\n        A. Pe\u00f1as and A. Rodrigo. A Simple Measure to Assess Nonresponse.\n        In Proc. of the 49th Annual Meeting of the Association for\n        Computational Linguistics, Vol. 1, pages 1415-1424, 2011.\n\n    Parameters\n    ----------\n    prediction_scores : array [n_problems]\n\n        The predictions outputted by a verification system.\n        Assumes `0 >= prediction <=1`.\n\n    ground_truth_scores : array [n_problems]\n\n        The gold annotations provided for each problem.\n        Will always be `0` or `1`.\n\n    Returns\n    ----------\n    c@1 = the c@1 measure (which accounts for unanswered\n        problems.)\n\n\n    References\n    ----------\n        - E. Stamatatos, et al. Overview of the Author Identification\n        Task at PAN 2014. CLEF (Working Notes) 2014: 877-897.\n        - A. Pe\u00f1as and A. Rodrigo. A Simple Measure to Assess Nonresponse.\n        In Proc. of the 49th Annual Meeting of the Association for\n        Computational Linguistics, Vol. 1, pages 1415-1424, 2011.\n\n    \"\"\"", "\n", "\n", "n", "=", "float", "(", "len", "(", "pred_y", ")", ")", "\n", "nc", ",", "nu", "=", "0.0", ",", "0.0", "\n", "\n", "for", "gt_score", ",", "pred_score", "in", "zip", "(", "true_y", ",", "pred_y", ")", ":", "\n", "        ", "if", "pred_score", "==", "0.5", ":", "\n", "            ", "nu", "+=", "1", "\n", "", "elif", "(", "pred_score", ">", "0.5", ")", "==", "(", "gt_score", ">", "0.5", ")", ":", "\n", "            ", "nc", "+=", "1.0", "\n", "\n", "", "", "return", "(", "1", "/", "n", ")", "*", "(", "nc", "+", "(", "nu", "*", "nc", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.f1": [[179, 217], ["zip", "evaluate.binarize", "sklearn.metrics.f1_score", "true_y_filtered.append", "binarize.append"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.binarize"], ["", "def", "f1", "(", "true_y", ",", "pred_y", ")", ":", "\n", "    ", "\"\"\"\n    Assesses verification performance, assuming that every\n    `score > 0.5` represents a same-author pair decision.\n    Note that all non-decisions (scores == 0.5) are ignored\n    by this metric.\n\n    Parameters\n    ----------\n    prediction_scores : array [n_problems]\n\n        The predictions outputted by a verification system.\n        Assumes `0 >= prediction <=1`.\n\n    ground_truth_scores : array [n_problems]\n\n        The gold annotations provided for each problem.\n        Will typically be `0` or `1`.\n\n    Returns\n    ----------\n    acc = The number of correct attributions.\n\n    References\n    ----------\n        E. Stamatatos, et al. Overview of the Author Identification\n        Task at PAN 2014. CLEF (Working Notes) 2014: 877-897.\n    \"\"\"", "\n", "true_y_filtered", ",", "pred_y_filtered", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "true", ",", "pred", "in", "zip", "(", "true_y", ",", "pred_y", ")", ":", "\n", "        ", "if", "pred", "!=", "0.5", ":", "\n", "            ", "true_y_filtered", ".", "append", "(", "true", ")", "\n", "pred_y_filtered", ".", "append", "(", "pred", ")", "\n", "\n", "", "", "pred_y_filtered", "=", "binarize", "(", "pred_y_filtered", ")", "\n", "\n", "return", "f1_score", "(", "true_y_filtered", ",", "pred_y_filtered", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.f_05_u_score": [[219, 248], ["evaluate.binarize", "enumerate"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.binarize"], ["", "def", "f_05_u_score", "(", "true_y", ",", "pred_y", ",", "pos_label", "=", "1", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Return F0.5u score of prediction.\n\n    :param true_y: true labels\n    :param pred_y: predicted labels\n    :param threshold: indication for non-decisions (default = 0.5)\n    :param pos_label: positive class label (default = 1)\n    :return: F0.5u score\n    \"\"\"", "\n", "\n", "pred_y", "=", "binarize", "(", "pred_y", ")", "\n", "\n", "n_tp", "=", "0", "\n", "n_fn", "=", "0", "\n", "n_fp", "=", "0", "\n", "n_u", "=", "0", "\n", "\n", "for", "i", ",", "pred", "in", "enumerate", "(", "pred_y", ")", ":", "\n", "        ", "if", "pred", "==", "threshold", ":", "\n", "            ", "n_u", "+=", "1", "\n", "", "elif", "pred", "==", "pos_label", "and", "pred", "==", "true_y", "[", "i", "]", ":", "\n", "            ", "n_tp", "+=", "1", "\n", "", "elif", "pred", "==", "pos_label", "and", "pred", "!=", "true_y", "[", "i", "]", ":", "\n", "            ", "n_fp", "+=", "1", "\n", "", "elif", "true_y", "[", "i", "]", "==", "pos_label", "and", "pred", "!=", "true_y", "[", "i", "]", ":", "\n", "            ", "n_fn", "+=", "1", "\n", "\n", "", "", "return", "(", "1.25", "*", "n_tp", ")", "/", "(", "1.25", "*", "n_tp", "+", "0.25", "*", "(", "n_fn", "+", "n_u", ")", "+", "n_fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.brier_score": [[249, 284], ["sklearn.metrics.brier_score_loss"], "function", ["None"], ["", "def", "brier_score", "(", "true_y", ",", "pred_y", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the complement of the Brier score loss (which is bounded\n    to the [0-1]), so that higher scores indicate better performance.\n    This score also considers \"unanswered\" problem, where score = 0.5.\n    We use the Brier implementation in scikit-learn [Pedregosa et al.\n    2011].\n\n    Parameters\n    ----------\n    prediction_scores : array [n_problems]\n\n        The predictions outputted by a verification system.\n        Assumes `0 >= prediction <=1`.\n\n    ground_truth_scores : array [n_problems]\n\n        The gold annotations provided for each problem.\n        Will typically be `0` or `1`.\n\n    Returns\n    ----------\n    brier = float\n        the complement of the Brier score\n\n    References\n    ----------\n    - Pedregosa, F. et al. Scikit-learn: Machine Learning in Python,\n      Journal of Machine Learning Research 12 (2011), 2825--2830.\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "return", "1", "-", "brier_score_loss", "(", "true_y", ",", "pred_y", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.load_file": [[286, 295], ["open", "json.loads", "line.strip", "int"], "function", ["None"], ["", "", "def", "load_file", "(", "fn", ")", ":", "\n", "    ", "problems", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "fn", ")", ":", "\n", "        ", "d", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "if", "'value'", "in", "d", ":", "\n", "            ", "problems", "[", "d", "[", "'id'", "]", "]", "=", "d", "[", "'value'", "]", "\n", "", "else", ":", "\n", "            ", "problems", "[", "d", "[", "'id'", "]", "]", "=", "int", "(", "d", "[", "'same'", "]", ")", "\n", "", "", "return", "problems", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.evaluate_all": [[297, 318], ["numpy.mean", "results.items", "evaluate.auc", "evaluate.c_at_1", "evaluate.f_05_u_score", "evaluate.f1", "evaluate.brier_score", "list", "round", "results.values"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.auc", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.c_at_1", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.f_05_u_score", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.f1", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.brier_score"], ["", "def", "evaluate_all", "(", "true_y", ",", "pred_y", ")", ":", "\n", "    ", "\"\"\"\n    Convenience function: calculates all PAN20 evaluation measures\n    and returns them as a dict, including the 'overall' score, which\n    is the mean of the individual metrics (0 >= metric >= 1). All \n    scores get rounded to three digits.\n    \"\"\"", "\n", "\n", "results", "=", "{", "'auc'", ":", "auc", "(", "true_y", ",", "pred_y", ")", ",", "\n", "'c@1'", ":", "c_at_1", "(", "true_y", ",", "pred_y", ")", ",", "\n", "'f_05_u'", ":", "f_05_u_score", "(", "true_y", ",", "pred_y", ")", ",", "\n", "'F1'", ":", "f1", "(", "true_y", ",", "pred_y", ")", ",", "\n", "'brier'", ":", "brier_score", "(", "true_y", ",", "pred_y", ")", "\n", "}", "\n", "\n", "results", "[", "'overall'", "]", "=", "np", ".", "mean", "(", "list", "(", "results", ".", "values", "(", ")", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "results", "[", "k", "]", "=", "round", "(", "v", ",", "3", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.main": [[320, 375], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "evaluate.load_file", "evaluate.load_file", "print", "print", "sorted", "zip", "numpy.array", "numpy.array", "evaluate.evaluate_all", "print", "ValueError", "ValueError", "ValueError", "len", "len", "len", "len", "set().union", "set", "len", "len", "open", "json.dump", "open", "evaluate_all.items", "set", "np.array.keys", "sorted", "f.write", "f.write", "f.write", "f.write", "set", "np.array.keys", "str"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.load_file", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.load_file", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.evaluate.evaluate_all"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evaluation script AA@PAN2020'", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Path to the jsonl-file with ground truth scores'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Path to the jsonl-file with the answers (system prediction)'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Path to output files'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# validate:", "\n", "if", "not", "args", ".", "i", ":", "\n", "        ", "raise", "ValueError", "(", "'The ground truth path is required'", ")", "\n", "", "if", "not", "args", ".", "a", ":", "\n", "        ", "raise", "ValueError", "(", "'The answers path is required'", ")", "\n", "", "if", "not", "args", ".", "o", ":", "\n", "        ", "raise", "ValueError", "(", "'The output folder path is required'", ")", "\n", "\n", "# load:", "\n", "", "gt", "=", "load_file", "(", "f\"{args.i}/truth.jsonl\"", ")", "\n", "pred", "=", "load_file", "(", "f\"{args.a}/answers.jsonl\"", ")", "\n", "\n", "print", "(", "'->'", ",", "len", "(", "gt", ")", ",", "'problems in ground truth'", ")", "\n", "print", "(", "'->'", ",", "len", "(", "pred", ")", ",", "'solutions explicitly proposed'", ")", "\n", "\n", "# default missing problems to 0.5", "\n", "for", "probl_id", "in", "sorted", "(", "gt", ")", ":", "\n", "        ", "if", "probl_id", "not", "in", "pred", ":", "\n", "            ", "pred", "[", "probl_id", "]", "=", "0.5", "\n", "\n", "# sanity check:    ", "\n", "", "", "assert", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", "\n", "assert", "set", "(", "gt", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "pred", ")", ")", "==", "set", "(", "gt", ".", "keys", "(", ")", ")", "\n", "\n", "# align the scores:", "\n", "scores", "=", "[", "(", "gt", "[", "k", "]", ",", "pred", "[", "k", "]", ")", "for", "k", "in", "sorted", "(", "gt", ")", "]", "\n", "gt", ",", "pred", "=", "zip", "(", "*", "scores", ")", "\n", "gt", "=", "np", ".", "array", "(", "gt", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "pred", "=", "np", ".", "array", "(", "pred", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "assert", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", "\n", "\n", "# evaluate:", "\n", "results", "=", "evaluate_all", "(", "gt", ",", "pred", ")", "\n", "print", "(", "results", ")", "\n", "\n", "with", "open", "(", "args", ".", "o", "+", "os", ".", "sep", "+", "'out.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "o", "+", "os", ".", "sep", "+", "'evaluation.prototext'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "metric", ",", "score", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "f", ".", "write", "(", "'measure {\\n'", ")", "\n", "f", ".", "write", "(", "' key: \"'", "+", "metric", "+", "'\"\\n'", ")", "\n", "f", ".", "write", "(", "' value: \"'", "+", "str", "(", "score", ")", "+", "'\"\\n'", ")", "\n", "f", ".", "write", "(", "'}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration": [[6, 72], ["numpy.linspace", "numpy.digitize", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.abs", "numpy.max", "len", "len", "len", "len", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.where", "len", "numpy.mean", "numpy.mean", "len", "round", "round", "round", "round", "round", "round", "round", "round"], "function", ["None"], ["def", "compute_calibration", "(", "true_labels", ",", "pred_labels", ",", "confidences", ",", "num_bins", "=", "10", ",", "all_metrics", "=", "False", ")", ":", "\n", "    ", "\"\"\"Collects predictions into bins used to draw a reliability diagram.\n\n    Arguments:\n        true_labels: the true labels for the test examples\n        pred_labels: the predicted labels for the test examples\n        confidences: the predicted confidences for the test examples\n        num_bins: number of bins\n\n    The true_labels, pred_labels, confidences arguments must be NumPy arrays;\n    pred_labels and true_labels may contain numeric or string labels.\n\n    For a multi-class model, the predicted label and confidence should be those\n    of the highest scoring class.\n\n    Returns a dictionary containing the following NumPy arrays:\n        accuracies: the average accuracy for each bin\n        confidences: the average confidence for each bin\n        counts: the number of examples in each bin\n        bins: the confidence thresholds for each bin\n        avg_accuracy: the accuracy over the entire test set\n        avg_confidence: the average confidence over the entire test set\n        expected_calibration_error: a weighted average of all calibration gaps\n        max_calibration_error: the largest calibration gap across all bins\n    \"\"\"", "\n", "assert", "(", "len", "(", "confidences", ")", "==", "len", "(", "pred_labels", ")", ")", "\n", "assert", "(", "len", "(", "confidences", ")", "==", "len", "(", "true_labels", ")", ")", "\n", "assert", "(", "num_bins", ">", "0", ")", "\n", "\n", "bin_size", "=", "1.0", "/", "num_bins", "\n", "bins", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "num_bins", "+", "1", ")", "\n", "indices", "=", "np", ".", "digitize", "(", "confidences", ",", "bins", ",", "right", "=", "True", ")", "\n", "\n", "bin_accuracies", "=", "np", ".", "zeros", "(", "num_bins", ",", "dtype", "=", "np", ".", "float", ")", "\n", "bin_confidences", "=", "np", ".", "zeros", "(", "num_bins", ",", "dtype", "=", "np", ".", "float", ")", "\n", "bin_counts", "=", "np", ".", "zeros", "(", "num_bins", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "for", "b", "in", "range", "(", "num_bins", ")", ":", "\n", "        ", "selected", "=", "np", ".", "where", "(", "indices", "==", "b", "+", "1", ")", "[", "0", "]", "\n", "if", "len", "(", "selected", ")", ">", "0", ":", "\n", "            ", "bin_accuracies", "[", "b", "]", "=", "np", ".", "mean", "(", "true_labels", "[", "selected", "]", "==", "pred_labels", "[", "selected", "]", ")", "\n", "bin_confidences", "[", "b", "]", "=", "np", ".", "mean", "(", "confidences", "[", "selected", "]", ")", "\n", "bin_counts", "[", "b", "]", "=", "len", "(", "selected", ")", "\n", "\n", "", "", "avg_acc", "=", "np", ".", "sum", "(", "bin_accuracies", "*", "bin_counts", ")", "/", "np", ".", "sum", "(", "bin_counts", ")", "\n", "avg_conf", "=", "np", ".", "sum", "(", "bin_confidences", "*", "bin_counts", ")", "/", "np", ".", "sum", "(", "bin_counts", ")", "\n", "\n", "gaps", "=", "np", ".", "abs", "(", "bin_accuracies", "-", "bin_confidences", ")", "\n", "ece", "=", "np", ".", "sum", "(", "gaps", "*", "bin_counts", ")", "/", "np", ".", "sum", "(", "bin_counts", ")", "\n", "mce", "=", "np", ".", "max", "(", "gaps", ")", "\n", "\n", "if", "all_metrics", ":", "\n", "        ", "return", "{", "\"accuracies\"", ":", "bin_accuracies", ",", "\n", "\"confidences\"", ":", "bin_confidences", ",", "\n", "\"counts\"", ":", "bin_counts", ",", "\n", "\"bins\"", ":", "bins", ",", "\n", "\"avg_accuracy\"", ":", "round", "(", "avg_acc", ",", "3", ")", ",", "\n", "\"avg_confidence\"", ":", "round", "(", "avg_conf", ",", "3", ")", ",", "\n", "\"expected_calibration_error\"", ":", "round", "(", "ece", ",", "4", ")", ",", "\n", "\"max_calibration_error\"", ":", "round", "(", "mce", ",", "3", ")", "\n", "}", "\n", "", "else", ":", "\n", "        ", "return", "{", "\"avg_accuracy\"", ":", "round", "(", "avg_acc", ",", "3", ")", ",", "\n", "\"avg_confidence\"", ":", "round", "(", "avg_conf", ",", "3", ")", ",", "\n", "\"expected_calibration_error\"", ":", "round", "(", "ece", ",", "4", ")", ",", "\n", "\"max_calibration_error\"", ":", "round", "(", "mce", ",", "3", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams._reliability_diagram_subplot": [[76, 133], ["numpy.min", "numpy.max", "numpy.zeros", "ax.bar", "ax.bar", "ax.set_aspect", "ax.plot", "ax.set_xlim", "ax.set_ylim", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.legend", "len", "numpy.abs", "ax.text", "len", "numpy.minimum"], "function", ["None"], ["", "", "def", "_reliability_diagram_subplot", "(", "ax", ",", "bin_data", ",", "\n", "draw_ece", "=", "True", ",", "\n", "draw_bin_importance", "=", "False", ",", "\n", "title", "=", "\"Reliability Diagram\"", ",", "\n", "xlabel", "=", "\"Confidence\"", ",", "\n", "ylabel", "=", "\"Expected Accuracy\"", ")", ":", "\n", "    ", "\"\"\"Draws a reliability diagram into a subplot.\"\"\"", "\n", "accuracies", "=", "bin_data", "[", "\"accuracies\"", "]", "\n", "confidences", "=", "bin_data", "[", "\"confidences\"", "]", "\n", "counts", "=", "bin_data", "[", "\"counts\"", "]", "\n", "bins", "=", "bin_data", "[", "\"bins\"", "]", "\n", "\n", "bin_size", "=", "1.0", "/", "len", "(", "counts", ")", "\n", "positions", "=", "bins", "[", ":", "-", "1", "]", "+", "bin_size", "/", "2.0", "\n", "\n", "widths", "=", "bin_size", "\n", "alphas", "=", "0.3", "\n", "min_count", "=", "np", ".", "min", "(", "counts", ")", "\n", "max_count", "=", "np", ".", "max", "(", "counts", ")", "\n", "normalized_counts", "=", "(", "counts", "-", "min_count", ")", "/", "(", "max_count", "-", "min_count", ")", "\n", "\n", "if", "draw_bin_importance", "==", "\"alpha\"", ":", "\n", "        ", "alphas", "=", "0.2", "+", "0.8", "*", "normalized_counts", "\n", "", "elif", "draw_bin_importance", "==", "\"width\"", ":", "\n", "        ", "widths", "=", "0.1", "*", "bin_size", "+", "0.9", "*", "bin_size", "*", "normalized_counts", "\n", "\n", "", "colors", "=", "np", ".", "zeros", "(", "(", "len", "(", "counts", ")", ",", "4", ")", ")", "\n", "colors", "[", ":", ",", "0", "]", "=", "240", "/", "255.", "\n", "colors", "[", ":", ",", "1", "]", "=", "60", "/", "255.", "\n", "colors", "[", ":", ",", "2", "]", "=", "60", "/", "255.", "\n", "colors", "[", ":", ",", "3", "]", "=", "alphas", "\n", "\n", "gap_plt", "=", "ax", ".", "bar", "(", "positions", ",", "np", ".", "abs", "(", "accuracies", "-", "confidences", ")", ",", "\n", "bottom", "=", "np", ".", "minimum", "(", "accuracies", ",", "confidences", ")", ",", "width", "=", "widths", ",", "\n", "edgecolor", "=", "colors", ",", "color", "=", "colors", ",", "linewidth", "=", "1", ",", "label", "=", "\"Gap\"", ")", "\n", "\n", "acc_plt", "=", "ax", ".", "bar", "(", "positions", ",", "0", ",", "bottom", "=", "accuracies", ",", "width", "=", "widths", ",", "\n", "edgecolor", "=", "\"black\"", ",", "color", "=", "\"black\"", ",", "alpha", "=", "1.0", ",", "linewidth", "=", "3", ",", "\n", "label", "=", "\"Accuracy\"", ")", "\n", "\n", "ax", ".", "set_aspect", "(", "\"equal\"", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"gray\"", ")", "\n", "\n", "if", "draw_ece", ":", "\n", "        ", "ece", "=", "(", "bin_data", "[", "\"expected_calibration_error\"", "]", "*", "100", ")", "\n", "ax", ".", "text", "(", "0.98", ",", "0.02", ",", "\"ECE=%.2f\"", "%", "ece", ",", "color", "=", "\"black\"", ",", "\n", "ha", "=", "\"right\"", ",", "va", "=", "\"bottom\"", ",", "transform", "=", "ax", ".", "transAxes", ")", "\n", "\n", "", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "#ax.set_xticks(bins)", "\n", "\n", "ax", ".", "set_title", "(", "title", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "\n", "ax", ".", "legend", "(", "handles", "=", "[", "gap_plt", ",", "acc_plt", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams._confidence_histogram_subplot": [[135, 160], ["ax.bar", "ax.set_xlim", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "len", "ax.axvline", "ax.axvline", "ax.legend"], "function", ["None"], ["", "def", "_confidence_histogram_subplot", "(", "ax", ",", "bin_data", ",", "\n", "draw_averages", "=", "True", ",", "\n", "title", "=", "\"Examples per bin\"", ",", "\n", "xlabel", "=", "\"Confidence\"", ",", "\n", "ylabel", "=", "\"Count\"", ")", ":", "\n", "    ", "\"\"\"Draws a confidence histogram into a subplot.\"\"\"", "\n", "counts", "=", "bin_data", "[", "\"counts\"", "]", "\n", "bins", "=", "bin_data", "[", "\"bins\"", "]", "\n", "\n", "bin_size", "=", "1.0", "/", "len", "(", "counts", ")", "\n", "positions", "=", "bins", "[", ":", "-", "1", "]", "+", "bin_size", "/", "2.0", "\n", "\n", "ax", ".", "bar", "(", "positions", ",", "counts", ",", "width", "=", "bin_size", "*", "0.9", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_title", "(", "title", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "\n", "if", "draw_averages", ":", "\n", "        ", "acc_plt", "=", "ax", ".", "axvline", "(", "x", "=", "bin_data", "[", "\"avg_accuracy\"", "]", ",", "ls", "=", "\"solid\"", ",", "lw", "=", "3", ",", "\n", "c", "=", "\"black\"", ",", "label", "=", "\"Accuracy\"", ")", "\n", "conf_plt", "=", "ax", ".", "axvline", "(", "x", "=", "bin_data", "[", "\"avg_confidence\"", "]", ",", "ls", "=", "\"dotted\"", ",", "lw", "=", "3", ",", "\n", "c", "=", "\"#444\"", ",", "label", "=", "\"Avg. confidence\"", ")", "\n", "ax", ".", "legend", "(", "handles", "=", "[", "acc_plt", ",", "conf_plt", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams._reliability_diagram_combined": [[162, 191], ["matplotlib.subplots", "matplotlib.tight_layout", "matplotlib.subplots_adjust", "reliability_diagrams._reliability_diagram_subplot", "reliability_diagrams._confidence_histogram_subplot", "numpy.abs().astype", "ax[].set_yticklabels", "matplotlib.show", "numpy.abs", "ax[].get_yticks"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams._reliability_diagram_subplot", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams._confidence_histogram_subplot"], ["", "", "def", "_reliability_diagram_combined", "(", "bin_data", ",", "\n", "draw_ece", ",", "draw_bin_importance", ",", "draw_averages", ",", "\n", "title", ",", "figsize", ",", "dpi", ",", "return_fig", ")", ":", "\n", "    ", "\"\"\"Draws a reliability diagram and confidence histogram using the output\n    from compute_calibration().\"\"\"", "\n", "figsize", "=", "(", "figsize", "[", "0", "]", ",", "figsize", "[", "0", "]", "*", "1.4", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ",", "ncols", "=", "1", ",", "sharex", "=", "True", ",", "figsize", "=", "figsize", ",", "dpi", "=", "dpi", ",", "\n", "gridspec_kw", "=", "{", "\"height_ratios\"", ":", "[", "4", ",", "1", "]", "}", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "subplots_adjust", "(", "hspace", "=", "-", "0.1", ")", "\n", "\n", "_reliability_diagram_subplot", "(", "ax", "[", "0", "]", ",", "bin_data", ",", "draw_ece", ",", "draw_bin_importance", ",", "\n", "title", "=", "title", ",", "xlabel", "=", "\"\"", ")", "\n", "\n", "# Draw the confidence histogram upside down.", "\n", "orig_counts", "=", "bin_data", "[", "\"counts\"", "]", "\n", "bin_data", "[", "\"counts\"", "]", "=", "-", "bin_data", "[", "\"counts\"", "]", "\n", "_confidence_histogram_subplot", "(", "ax", "[", "1", "]", ",", "bin_data", ",", "draw_averages", ",", "title", "=", "\"\"", ")", "\n", "bin_data", "[", "\"counts\"", "]", "=", "orig_counts", "\n", "\n", "# Also negate the ticks for the upside-down histogram.", "\n", "new_ticks", "=", "np", ".", "abs", "(", "ax", "[", "1", "]", ".", "get_yticks", "(", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "ax", "[", "1", "]", ".", "set_yticklabels", "(", "new_ticks", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "if", "return_fig", ":", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.reliability_diagram": [[193, 241], ["reliability_diagrams.compute_calibration", "reliability_diagrams._reliability_diagram_combined"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams._reliability_diagram_combined"], ["", "def", "reliability_diagram", "(", "true_labels", ",", "pred_labels", ",", "confidences", ",", "num_bins", "=", "10", ",", "\n", "draw_ece", "=", "True", ",", "draw_bin_importance", "=", "False", ",", "\n", "draw_averages", "=", "True", ",", "title", "=", "\"Reliability Diagram\"", ",", "\n", "figsize", "=", "(", "6", ",", "6", ")", ",", "dpi", "=", "72", ",", "return_fig", "=", "False", ")", ":", "\n", "    ", "\"\"\"Draws a reliability diagram and confidence histogram in a single plot.\n    \n    First, the model's predictions are divided up into bins based on their\n    confidence scores.\n\n    The reliability diagram shows the gap between average accuracy and average \n    confidence in each bin. These are the red bars.\n\n    The black line is the accuracy, the other end of the bar is the confidence.\n\n    Ideally, there is no gap and the black line is on the dotted diagonal.\n    In that case, the model is properly calibrated and we can interpret the\n    confidence scores as probabilities.\n\n    The confidence histogram visualizes how many examples are in each bin. \n    This is useful for judging how much each bin contributes to the calibration\n    error.\n\n    The confidence histogram also shows the overall accuracy and confidence. \n    The closer these two lines are together, the better the calibration.\n    \n    The ECE or Expected Calibration Error is a summary statistic that gives the\n    difference in expectation between confidence and accuracy. In other words,\n    it's a weighted average of the gaps across all bins. A lower ECE is better.\n\n    Arguments:\n        true_labels: the true labels for the test examples\n        pred_labels: the predicted labels for the test examples\n        confidences: the predicted confidences for the test examples\n        num_bins: number of bins\n        draw_ece: whether to include the Expected Calibration Error\n        draw_bin_importance: whether to represent how much each bin contributes\n            to the total accuracy: False, \"alpha\", \"widths\"\n        draw_averages: whether to draw the overall accuracy and confidence in\n            the confidence histogram\n        title: optional title for the plot\n        figsize: setting for matplotlib; height is ignored\n        dpi: setting for matplotlib\n        return_fig: if True, returns the matplotlib Figure object\n    \"\"\"", "\n", "bin_data", "=", "compute_calibration", "(", "true_labels", ",", "pred_labels", ",", "confidences", ",", "num_bins", ",", "True", ")", "\n", "return", "_reliability_diagram_combined", "(", "bin_data", ",", "draw_ece", ",", "draw_bin_importance", ",", "\n", "draw_averages", ",", "title", ",", "figsize", "=", "figsize", ",", "\n", "dpi", "=", "dpi", ",", "return_fig", "=", "return_fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.reliability_diagrams": [[243, 290], ["matplotlib.subplots", "enumerate", "range", "matplotlib.show", "results.items", "reliability_diagrams.compute_calibration", "reliability_diagrams._reliability_diagram_subplot", "ax[].axis", "len", "plot_name.split"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams.compute_calibration", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.reliability_diagrams._reliability_diagram_subplot"], ["", "def", "reliability_diagrams", "(", "results", ",", "num_bins", "=", "10", ",", "\n", "draw_ece", "=", "True", ",", "draw_bin_importance", "=", "False", ",", "\n", "num_cols", "=", "4", ",", "dpi", "=", "72", ",", "return_fig", "=", "False", ")", ":", "\n", "    ", "\"\"\"Draws reliability diagrams for one or more models.\n    \n    Arguments:\n        results: dictionary where the key is the model name and the value is\n            a dictionary containing the true labels, predicated labels, and\n            confidences for this model\n        num_bins: number of bins\n        draw_ece: whether to include the Expected Calibration Error\n        draw_bin_importance: whether to represent how much each bin contributes\n            to the total accuracy: False, \"alpha\", \"widths\"\n        num_cols: how wide to make the plot\n        dpi: setting for matplotlib\n        return_fig: if True, returns the matplotlib Figure object\n    \"\"\"", "\n", "ncols", "=", "num_cols", "\n", "nrows", "=", "(", "len", "(", "results", ")", "+", "ncols", "-", "1", ")", "//", "ncols", "\n", "figsize", "=", "(", "ncols", "*", "4", ",", "nrows", "*", "4", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "nrows", ",", "ncols", "=", "ncols", ",", "sharex", "=", "True", ",", "sharey", "=", "True", ",", "\n", "figsize", "=", "figsize", ",", "dpi", "=", "dpi", ",", "constrained_layout", "=", "True", ")", "\n", "\n", "for", "i", ",", "(", "plot_name", ",", "data", ")", "in", "enumerate", "(", "results", ".", "items", "(", ")", ")", ":", "\n", "        ", "y_true", "=", "data", "[", "\"true_labels\"", "]", "\n", "y_pred", "=", "data", "[", "\"pred_labels\"", "]", "\n", "y_conf", "=", "data", "[", "\"confidences\"", "]", "\n", "\n", "bin_data", "=", "compute_calibration", "(", "y_true", ",", "y_pred", ",", "y_conf", ",", "num_bins", ")", "\n", "\n", "row", "=", "i", "//", "ncols", "\n", "col", "=", "i", "%", "ncols", "\n", "_reliability_diagram_subplot", "(", "ax", "[", "row", ",", "col", "]", ",", "bin_data", ",", "draw_ece", ",", "\n", "draw_bin_importance", ",", "\n", "title", "=", "\"\\n\"", ".", "join", "(", "plot_name", ".", "split", "(", ")", ")", ",", "\n", "xlabel", "=", "\"Confidence\"", "if", "row", "==", "nrows", "-", "1", "else", "\"\"", ",", "\n", "ylabel", "=", "\"Expected Accuracy\"", "if", "col", "==", "0", "else", "\"\"", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "i", "+", "1", ",", "nrows", "*", "ncols", ")", ":", "\n", "        ", "row", "=", "i", "//", "ncols", "\n", "col", "=", "i", "%", "ncols", "\n", "ax", "[", "row", ",", "col", "]", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n", "if", "return_fig", ":", "return", "fig", "\n", "", ""]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.SameAuthor.__init__": [[14, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "id", ")", ":", "\n", "\n", "# categories with >=2 documents", "\n", "        ", "self", ".", "list_cw2d", "=", "[", "]", "\n", "# dictionary = {category: documents}", "\n", "self", ".", "dict_c2d", "=", "{", "}", "\n", "# total number of documents", "\n", "self", ".", "n_docs", "=", "0", "\n", "# author id", "\n", "self", ".", "id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.SameAuthor.add_doc": [[26, 40], ["resample_pairs.SameAuthor.dict_c2d[].append", "resample_pairs.SameAuthor.list_cw2d.append"], "methods", ["None"], ["", "def", "add_doc", "(", "self", ",", "d", ",", "c", ")", ":", "\n", "\n", "# increase doc counter", "\n", "        ", "self", ".", "n_docs", "+=", "1", "\n", "\n", "if", "c", "in", "self", ".", "dict_c2d", ":", "\n", "# add document to existing category", "\n", "            ", "self", ".", "dict_c2d", "[", "c", "]", ".", "append", "(", "d", ")", "\n", "if", "c", "not", "in", "self", ".", "list_cw2d", ":", "\n", "# add category to cw2d-list", "\n", "                ", "self", ".", "list_cw2d", ".", "append", "(", "c", ")", "\n", "", "", "else", ":", "\n", "# new category", "\n", "            ", "self", ".", "dict_c2d", "[", "c", "]", "=", "[", "d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.SameAuthor.sample_SC": [[42, 65], ["len", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "resample_pairs.SameAuthor.dict_c2d[].pop", "resample_pairs.SameAuthor.dict_c2d[].pop", "len", "resample_pairs.SameAuthor.list_cw2d.remove", "len"], "methods", ["None"], ["", "", "def", "sample_SC", "(", "self", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "list_cw2d", ")", ">=", "1", ":", "\n", "# shuffle categories, choose one category", "\n", "            ", "self", ".", "list_cw2d", "=", "shuffle", "(", "self", ".", "list_cw2d", ")", "\n", "c", "=", "self", ".", "list_cw2d", "[", "0", "]", "\n", "# shuffle documents in chosen category", "\n", "self", ".", "dict_c2d", "[", "c", "]", "=", "shuffle", "(", "self", ".", "dict_c2d", "[", "c", "]", ")", "\n", "# take two documents, remove them from list", "\n", "d_1", "=", "self", ".", "dict_c2d", "[", "c", "]", ".", "pop", "(", ")", "\n", "d_2", "=", "self", ".", "dict_c2d", "[", "c", "]", ".", "pop", "(", ")", "\n", "# decrease doc counter", "\n", "self", ".", "n_docs", "-=", "2", "\n", "# clean-up", "\n", "if", "len", "(", "self", ".", "dict_c2d", "[", "c", "]", ")", "<=", "1", ":", "\n", "# remove from cw2d-list if category contains less than 2 documents", "\n", "                ", "self", ".", "list_cw2d", ".", "remove", "(", "c", ")", "\n", "# delete category if no document remains", "\n", "if", "len", "(", "self", ".", "dict_c2d", "[", "c", "]", ")", "==", "0", ":", "\n", "                    ", "del", "self", ".", "dict_c2d", "[", "c", "]", "\n", "", "", "return", "d_1", ",", "d_2", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.SameAuthor.sample_DC": [[67, 100], ["len", "sklearn.utils.shuffle", "sklearn.utils.shuffle.pop", "sklearn.utils.shuffle.pop", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "list", "len", "len", "resample_pairs.SameAuthor.dict_c2d.keys", "resample_pairs.SameAuthor.list_cw2d.remove", "len", "resample_pairs.SameAuthor.list_cw2d.remove", "len"], "methods", ["None"], ["", "", "def", "sample_DC", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "dict_c2d", ")", ">=", "2", ":", "\n", "\n", "# shuffle list of categories", "\n", "            ", "list_c", "=", "shuffle", "(", "list", "(", "self", ".", "dict_c2d", ".", "keys", "(", ")", ")", ")", "\n", "# take two categories, remove them from list", "\n", "c_1", "=", "list_c", ".", "pop", "(", ")", "\n", "c_2", "=", "list_c", ".", "pop", "(", ")", "\n", "# shuffle documents", "\n", "self", ".", "dict_c2d", "[", "c_1", "]", "=", "shuffle", "(", "self", ".", "dict_c2d", "[", "c_1", "]", ")", "\n", "self", ".", "dict_c2d", "[", "c_2", "]", "=", "shuffle", "(", "self", ".", "dict_c2d", "[", "c_2", "]", ")", "\n", "# take two documents", "\n", "d_1", "=", "self", ".", "dict_c2d", "[", "c_1", "]", "[", "0", "]", "\n", "d_2", "=", "self", ".", "dict_c2d", "[", "c_2", "]", "[", "0", "]", "\n", "# decrease doc counter", "\n", "self", ".", "n_docs", "-=", "2", "\n", "# clean-up", "\n", "del", "self", ".", "dict_c2d", "[", "c_1", "]", "[", "0", "]", ",", "self", ".", "dict_c2d", "[", "c_2", "]", "[", "0", "]", "\n", "if", "len", "(", "self", ".", "dict_c2d", "[", "c_1", "]", ")", "<=", "1", ":", "\n", "                ", "if", "c_1", "in", "self", ".", "list_cw2d", ":", "\n", "                    ", "self", ".", "list_cw2d", ".", "remove", "(", "c_1", ")", "\n", "# delete category if no document remains", "\n", "", "if", "len", "(", "self", ".", "dict_c2d", "[", "c_1", "]", ")", "==", "0", ":", "\n", "                    ", "del", "self", ".", "dict_c2d", "[", "c_1", "]", "\n", "", "", "if", "len", "(", "self", ".", "dict_c2d", "[", "c_2", "]", ")", "<=", "1", ":", "\n", "                ", "if", "c_2", "in", "self", ".", "list_cw2d", ":", "\n", "                    ", "self", ".", "list_cw2d", ".", "remove", "(", "c_2", ")", "\n", "# delete category if no document remains", "\n", "", "if", "len", "(", "self", ".", "dict_c2d", "[", "c_2", "]", ")", "==", "0", ":", "\n", "                    ", "del", "self", ".", "dict_c2d", "[", "c_2", "]", "\n", "", "", "return", "d_1", ",", "d_2", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.SameAuthor.get_sample_for_DA": [[102, 123], ["sklearn.utils.shuffle", "sklearn.utils.shuffle", "len", "list", "resample_pairs.SameAuthor.list_cw2d.remove", "len", "resample_pairs.SameAuthor.dict_c2d.keys"], "methods", ["None"], ["", "", "def", "get_sample_for_DA", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "n_docs", ">=", "1", ":", "\n", "# get category and document", "\n", "            ", "c", "=", "shuffle", "(", "list", "(", "self", ".", "dict_c2d", ".", "keys", "(", ")", ")", ")", "[", "0", "]", "\n", "self", ".", "dict_c2d", "[", "c", "]", "=", "shuffle", "(", "self", ".", "dict_c2d", "[", "c", "]", ")", "\n", "d", "=", "self", ".", "dict_c2d", "[", "c", "]", "[", "0", "]", "\n", "# decrease doc counter", "\n", "self", ".", "n_docs", "-=", "1", "\n", "# clean-up", "\n", "del", "self", ".", "dict_c2d", "[", "c", "]", "[", "0", "]", "\n", "if", "len", "(", "self", ".", "dict_c2d", "[", "c", "]", ")", "<=", "1", ":", "\n", "# remove from cw2d-list if category contains less than 2 documents", "\n", "                ", "if", "c", "in", "self", ".", "list_cw2d", ":", "\n", "                    ", "self", ".", "list_cw2d", ".", "remove", "(", "c", ")", "\n", "# delete category if no document remains", "\n", "", "if", "len", "(", "self", ".", "dict_c2d", "[", "c", "]", ")", "==", "0", ":", "\n", "                    ", "del", "self", ".", "dict_c2d", "[", "c", "]", "\n", "", "", "return", "c", ",", "d", ",", "self", ".", "id", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.__init__": [[130, 138], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "# categories with >=2 documents", "\n", "        ", "self", ".", "list_cw2d", "=", "[", "]", "\n", "# dictionary = {category: documents}", "\n", "self", ".", "dict_c2d", "=", "{", "}", "\n", "# total number of documents", "\n", "self", ".", "n_docs", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.add_doc": [[140, 154], ["resample_pairs.DifferentAuthor.dict_c2d[].append", "resample_pairs.DifferentAuthor.list_cw2d.append"], "methods", ["None"], ["", "def", "add_doc", "(", "self", ",", "d", ",", "c", ",", "id", ")", ":", "\n", "\n", "# increase doc counter", "\n", "        ", "self", ".", "n_docs", "+=", "1", "\n", "\n", "if", "c", "in", "self", ".", "dict_c2d", ":", "\n", "# add document to existing category", "\n", "            ", "self", ".", "dict_c2d", "[", "c", "]", ".", "append", "(", "(", "d", ",", "id", ")", ")", "\n", "if", "c", "not", "in", "self", ".", "list_cw2d", ":", "\n", "# add document to cw2d-list", "\n", "                ", "self", ".", "list_cw2d", ".", "append", "(", "c", ")", "\n", "", "", "else", ":", "\n", "# new category", "\n", "            ", "self", ".", "dict_c2d", "[", "c", "]", "=", "[", "(", "d", ",", "id", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.sample_SC": [[156, 181], ["len", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "resample_pairs.DifferentAuthor.dict_c2d[].pop", "resample_pairs.DifferentAuthor.dict_c2d[].pop", "len", "resample_pairs.DifferentAuthor.list_cw2d.remove", "len"], "methods", ["None"], ["", "", "def", "sample_SC", "(", "self", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "list_cw2d", ")", ">=", "1", ":", "\n", "\n", "# shuffle categories, choose one category", "\n", "            ", "self", ".", "list_cw2d", "=", "shuffle", "(", "self", ".", "list_cw2d", ")", "\n", "c", "=", "self", ".", "list_cw2d", "[", "0", "]", "\n", "# shuffle documents in chosen category", "\n", "self", ".", "dict_c2d", "[", "c", "]", "=", "shuffle", "(", "self", ".", "dict_c2d", "[", "c", "]", ")", "\n", "# take two documents, remove them from list", "\n", "d_1", ",", "id_1", "=", "self", ".", "dict_c2d", "[", "c", "]", ".", "pop", "(", ")", "\n", "d_2", ",", "id_2", "=", "self", ".", "dict_c2d", "[", "c", "]", ".", "pop", "(", ")", "\n", "# decrease doc counter", "\n", "self", ".", "n_docs", "-=", "2", "\n", "# clean-up", "\n", "if", "len", "(", "self", ".", "dict_c2d", "[", "c", "]", ")", "<=", "1", ":", "\n", "# remove from cw2d-list if category contains less than 2 documents", "\n", "                ", "self", ".", "list_cw2d", ".", "remove", "(", "c", ")", "\n", "# delete category if no document remains", "\n", "if", "len", "(", "self", ".", "dict_c2d", "[", "c", "]", ")", "==", "0", ":", "\n", "                    ", "del", "self", ".", "dict_c2d", "[", "c", "]", "\n", "\n", "", "", "return", "d_1", ",", "d_2", ",", "id_1", ",", "id_2", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.sample_DC": [[183, 217], ["len", "sklearn.utils.shuffle", "sklearn.utils.shuffle.pop", "sklearn.utils.shuffle.pop", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "list", "len", "len", "resample_pairs.DifferentAuthor.dict_c2d.keys", "resample_pairs.DifferentAuthor.list_cw2d.remove", "len", "resample_pairs.DifferentAuthor.list_cw2d.remove", "len"], "methods", ["None"], ["", "", "def", "sample_DC", "(", "self", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "dict_c2d", ")", ">=", "2", ":", "\n", "\n", "# shuffle list of categories", "\n", "            ", "list_c", "=", "shuffle", "(", "list", "(", "self", ".", "dict_c2d", ".", "keys", "(", ")", ")", ")", "\n", "# take two categories, remove them from list", "\n", "c_1", "=", "list_c", ".", "pop", "(", ")", "\n", "c_2", "=", "list_c", ".", "pop", "(", ")", "\n", "# shuffle documents", "\n", "self", ".", "dict_c2d", "[", "c_1", "]", "=", "shuffle", "(", "self", ".", "dict_c2d", "[", "c_1", "]", ")", "\n", "self", ".", "dict_c2d", "[", "c_2", "]", "=", "shuffle", "(", "self", ".", "dict_c2d", "[", "c_2", "]", ")", "\n", "# take two documents", "\n", "d_1", ",", "id_1", "=", "self", ".", "dict_c2d", "[", "c_1", "]", "[", "0", "]", "\n", "d_2", ",", "id_2", "=", "self", ".", "dict_c2d", "[", "c_2", "]", "[", "0", "]", "\n", "# decrease doc counter", "\n", "self", ".", "n_docs", "-=", "2", "\n", "# clean-up", "\n", "del", "self", ".", "dict_c2d", "[", "c_1", "]", "[", "0", "]", ",", "self", ".", "dict_c2d", "[", "c_2", "]", "[", "0", "]", "\n", "if", "len", "(", "self", ".", "dict_c2d", "[", "c_1", "]", ")", "<=", "1", ":", "\n", "                ", "if", "c_1", "in", "self", ".", "list_cw2d", ":", "\n", "                    ", "self", ".", "list_cw2d", ".", "remove", "(", "c_1", ")", "\n", "# delete category if no document remains", "\n", "", "if", "len", "(", "self", ".", "dict_c2d", "[", "c_1", "]", ")", "==", "0", ":", "\n", "                    ", "del", "self", ".", "dict_c2d", "[", "c_1", "]", "\n", "", "", "if", "len", "(", "self", ".", "dict_c2d", "[", "c_2", "]", ")", "<=", "1", ":", "\n", "                ", "if", "c_2", "in", "self", ".", "list_cw2d", ":", "\n", "                    ", "self", ".", "list_cw2d", ".", "remove", "(", "c_2", ")", "\n", "# delete category if no document remains", "\n", "", "if", "len", "(", "self", ".", "dict_c2d", "[", "c_2", "]", ")", "==", "0", ":", "\n", "                    ", "del", "self", ".", "dict_c2d", "[", "c_2", "]", "\n", "", "", "return", "d_1", ",", "d_2", ",", "id_1", ",", "id_2", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.sample_pairs_single_epoch": [[222, 396], ["list", "resample_pairs.DifferentAuthor", "bool", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "author_domain_doc.keys", "resample_pairs.SameAuthor", "author_domain_doc[].keys", "sklearn.utils.shuffle", "random.uniform", "labels_a.append", "labels_c.append", "random.uniform", "list", "random.uniform", "resample_pairs.DifferentAuthor.sample_SC", "bool", "resample_pairs.DifferentAuthor.sample_DC", "bool", "min", "int", "min", "int", "docs_L.append", "docs_R.append", "docs_L.append", "docs_R.append", "author_models[].add_doc", "author_models.keys", "random.uniform", "author_models[].get_sample_for_DA", "bool", "len", "len", "len", "len", "len", "len", "author_models[].sample_DC", "bool", "author_models[].sample_SC", "bool", "resample_pairs.DifferentAuthor.add_doc", "sklearn.utils.shuffle.append", "sklearn.utils.shuffle.append", "sklearn.utils.shuffle.append", "sklearn.utils.shuffle.append", "sklearn.utils.shuffle.append", "sklearn.utils.shuffle.append"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.sample_SC", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.sample_DC", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.add_doc", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.SameAuthor.get_sample_for_DA", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.sample_DC", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.sample_SC", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.resample_pairs.DifferentAuthor.add_doc"], ["", "", "", "def", "sample_pairs_single_epoch", "(", "author_domain_doc", ",", "\n", "delta_1", "=", "0.5", ",", "delta_2", "=", "0.5", ",", "delta_3", "=", "0.5", ",", "\n", "only_SADF_and_DASF", "=", "False", ",", "\n", "make_balanced", "=", "False", ",", "\n", "balance_factor", "=", "1.0", ",", "\n", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:\n        author_domain_doc:      dictionary with sorted documents \n        delta_1:                threshold (SA vs. DA) \n        delta_2:                threshold (SA_SF vs. SA_DF)\n        delta_3:                threshold (DA_SF vs. DA_DF)\n        only_SADF_and_DASF:     if true, return only SA_DF and DA_SF pairs\n        make_balanced:          if true, return (nearly) balanced dataset\n        balance_factor:         balancing factor, if 1.0, all subsets contain the same number of trials\n        \n    Output:\n        docs_L, docs_R:         document pairs\n        labels_a:               authorship label (0 or 1)\n        labels_c:               category/fandom label (0 or 1)\n            \n    \"\"\"", "\n", "\n", "# author list", "\n", "author_list", "=", "list", "(", "author_domain_doc", ".", "keys", "(", ")", ")", "\n", "\n", "# define list for all subsets", "\n", "SA_SF", "=", "[", "]", "\n", "SA_DF", "=", "[", "]", "\n", "DA_SF", "=", "[", "]", "\n", "DA_DF", "=", "[", "]", "\n", "\n", "# dictionary for same-author objects", "\n", "author_models", "=", "{", "}", "\n", "# create different-authors object", "\n", "author_diff", "=", "DifferentAuthor", "(", ")", "\n", "\n", "# create same-author objects", "\n", "for", "a", "in", "author_list", ":", "\n", "# create same-author object for current author", "\n", "        ", "author_models", "[", "a", "]", "=", "SameAuthor", "(", "a", ")", "\n", "# add docs", "\n", "for", "c", "in", "author_domain_doc", "[", "a", "]", ".", "keys", "(", ")", ":", "\n", "            ", "for", "d", "in", "author_domain_doc", "[", "a", "]", "[", "c", "]", ":", "\n", "                ", "author_models", "[", "a", "]", ".", "add_doc", "(", "d", ",", "c", ")", "\n", "\n", "# start re-sampling", "\n", "", "", "", "while", "bool", "(", "author_models", ")", ":", "\n", "\n", "        ", "author_list", "=", "shuffle", "(", "list", "(", "author_models", ".", "keys", "(", ")", ")", ")", "\n", "\n", "for", "a", "in", "author_list", ":", "\n", "\n", "            ", "r1", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "\n", "if", "r1", "<", "delta_1", ":", "\n", "\n", "                ", "r2", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "\n", "###################", "\n", "# sample SA_DF pair", "\n", "###################", "\n", "if", "r2", "<", "delta_2", ":", "\n", "                    ", "d1", ",", "d2", "=", "author_models", "[", "a", "]", ".", "sample_DC", "(", ")", "\n", "if", "bool", "(", "d1", ")", ":", "\n", "                        ", "SA_DF", ".", "append", "(", "(", "d1", ",", "d2", ",", "1", ",", "0", ")", ")", "\n", "\n", "###################", "\n", "# sample SA_SF pair", "\n", "###################", "\n", "", "", "else", ":", "\n", "                    ", "d1", ",", "d2", "=", "author_models", "[", "a", "]", ".", "sample_SC", "(", ")", "\n", "if", "bool", "(", "d1", ")", ":", "\n", "                        ", "SA_SF", ".", "append", "(", "(", "d1", ",", "d2", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "###################", "\n", "# sample doc for DA", "\n", "###################", "\n", "                ", "c", ",", "d", ",", "id", "=", "author_models", "[", "a", "]", ".", "get_sample_for_DA", "(", ")", "\n", "if", "bool", "(", "c", ")", ":", "\n", "                    ", "author_diff", ".", "add_doc", "(", "d", ",", "c", ",", "id", ")", "\n", "\n", "# clean", "\n", "", "", "if", "author_models", "[", "a", "]", ".", "n_docs", "==", "0", ":", "\n", "                ", "del", "author_models", "[", "a", "]", "\n", "\n", "", "", "", "while", "author_diff", ".", "n_docs", ">", "1", ":", "\n", "\n", "        ", "r3", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "\n", "###################", "\n", "# sample DA_SF pair", "\n", "###################", "\n", "if", "r3", "<", "delta_3", ":", "\n", "            ", "d1", ",", "d2", ",", "id_1", ",", "id_2", "=", "author_diff", ".", "sample_SC", "(", ")", "\n", "if", "bool", "(", "d1", ")", ":", "\n", "                ", "if", "id_1", "==", "id_2", ":", "\n", "                    ", "SA_SF", ".", "append", "(", "(", "d1", ",", "d2", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "DA_SF", ".", "append", "(", "(", "d1", ",", "d2", ",", "0", ",", "1", ")", ")", "\n", "\n", "###################", "\n", "# sample DA_DF pair", "\n", "###################", "\n", "", "", "", "else", ":", "\n", "            ", "d1", ",", "d2", ",", "id_1", ",", "id_2", "=", "author_diff", ".", "sample_DC", "(", ")", "\n", "if", "bool", "(", "d1", ")", ":", "\n", "                ", "if", "id_1", "==", "id_2", ":", "\n", "                    ", "SA_DF", ".", "append", "(", "(", "d1", ",", "d2", ",", "1", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "DA_DF", ".", "append", "(", "(", "d1", ",", "d2", ",", "0", ",", "0", ")", ")", "\n", "\n", "#####################", "\n", "# prepare final pairs", "\n", "#####################", "\n", "", "", "", "", "docs_L", "=", "[", "]", "\n", "docs_R", "=", "[", "]", "\n", "labels_a", "=", "[", "]", "\n", "labels_c", "=", "[", "]", "\n", "\n", "# shuffle datasets", "\n", "SA_SF", "=", "shuffle", "(", "SA_SF", ")", "\n", "SA_DF", "=", "shuffle", "(", "SA_DF", ")", "\n", "DA_SF", "=", "shuffle", "(", "DA_SF", ")", "\n", "DA_DF", "=", "shuffle", "(", "DA_DF", ")", "\n", "\n", "# make balanced datasets (for evaluation)   ", "\n", "if", "make_balanced", ":", "\n", "        ", "if", "only_SADF_and_DASF", ":", "\n", "            ", "n", "=", "min", "(", "len", "(", "SA_DF", ")", ",", "len", "(", "DA_SF", ")", ")", "\n", "n", "=", "int", "(", "balance_factor", "*", "n", ")", "\n", "SA_DF", "=", "SA_DF", "[", ":", "n", "]", "\n", "DA_SF", "=", "DA_SF", "[", ":", "n", "]", "\n", "", "else", ":", "\n", "            ", "n", "=", "min", "(", "len", "(", "SA_SF", ")", ",", "len", "(", "SA_DF", ")", ",", "len", "(", "DA_SF", ")", ",", "len", "(", "DA_DF", ")", ")", "\n", "n", "=", "int", "(", "balance_factor", "*", "n", ")", "\n", "SA_SF", "=", "SA_SF", "[", ":", "n", "]", "\n", "SA_DF", "=", "SA_DF", "[", ":", "n", "]", "\n", "DA_SF", "=", "DA_SF", "[", ":", "n", "]", "\n", "DA_DF", "=", "DA_DF", "[", ":", "n", "]", "\n", "\n", "# consider only SA_DF and DA_SF pairs (for evaluation)", "\n", "", "", "if", "only_SADF_and_DASF", ":", "\n", "        ", "pairs", "=", "SA_DF", "+", "DA_SF", "\n", "", "else", ":", "\n", "        ", "pairs", "=", "SA_SF", "+", "SA_DF", "+", "DA_SF", "+", "DA_DF", "\n", "# shuffle", "\n", "", "pairs", "=", "shuffle", "(", "pairs", ")", "\n", "pairs", "=", "shuffle", "(", "pairs", ")", "\n", "\n", "for", "pair", "in", "pairs", ":", "\n", "\n", "        ", "doc_1", ",", "doc_2", ",", "l_a", ",", "l_c", "=", "pair", "\n", "\n", "########", "\n", "# labels", "\n", "########", "\n", "labels_a", ".", "append", "(", "l_a", ")", "\n", "labels_c", ".", "append", "(", "l_c", ")", "\n", "\n", "######", "\n", "# docs", "\n", "######", "\n", "r", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "r", "<", "0.5", ":", "\n", "            ", "docs_L", ".", "append", "(", "doc_1", ")", "\n", "docs_R", ".", "append", "(", "doc_2", ")", "\n", "", "else", ":", "\n", "            ", "docs_L", ".", "append", "(", "doc_2", ")", "\n", "docs_R", ".", "append", "(", "doc_1", ")", "\n", "\n", "", "", "return", "docs_L", ",", "docs_R", ",", "labels_a", ",", "labels_c", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.sort_labels": [[7, 37], ["range", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pred_SA_DF.append", "conf_SA_DF.append", "labels_SA_DF.append", "labels_hat_SA_DF.append", "pred_DA_SF.append", "conf_DA_SF.append", "labels_DA_SF.append", "labels_hat_DA_SF.append"], "function", ["None"], ["def", "sort_labels", "(", "predictions", ",", "confidences", ",", "labels_a", ",", "labels_c", ",", "labels_hat", ")", ":", "\n", "\n", "    ", "pred_SA_DF", "=", "[", "]", "\n", "pred_DA_SF", "=", "[", "]", "\n", "\n", "conf_SA_DF", "=", "[", "]", "\n", "conf_DA_SF", "=", "[", "]", "\n", "\n", "labels_SA_DF", "=", "[", "]", "\n", "labels_DA_SF", "=", "[", "]", "\n", "\n", "labels_hat_SA_DF", "=", "[", "]", "\n", "labels_hat_DA_SF", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "confidences", ")", ")", ":", "\n", "        ", "if", "labels_a", "[", "i", "]", "==", "1", "and", "labels_c", "[", "i", "]", "==", "0", ":", "\n", "            ", "pred_SA_DF", ".", "append", "(", "predictions", "[", "i", "]", ")", "\n", "conf_SA_DF", ".", "append", "(", "confidences", "[", "i", "]", ")", "\n", "labels_SA_DF", ".", "append", "(", "labels_a", "[", "i", "]", ")", "\n", "labels_hat_SA_DF", ".", "append", "(", "labels_hat", "[", "i", "]", ")", "\n", "", "elif", "labels_a", "[", "i", "]", "==", "0", "and", "labels_c", "[", "i", "]", "==", "1", ":", "\n", "            ", "pred_DA_SF", ".", "append", "(", "predictions", "[", "i", "]", ")", "\n", "conf_DA_SF", ".", "append", "(", "confidences", "[", "i", "]", ")", "\n", "labels_DA_SF", ".", "append", "(", "labels_a", "[", "i", "]", ")", "\n", "labels_hat_DA_SF", ".", "append", "(", "labels_hat", "[", "i", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "pred_SA_DF", ")", ",", "np", ".", "array", "(", "pred_DA_SF", ")", ",", "np", ".", "array", "(", "conf_SA_DF", ")", ",", "np", ".", "array", "(", "conf_DA_SF", ")", ",", "np", ".", "array", "(", "labels_hat_SA_DF", ")", ",", "np", ".", "array", "(", "labels_hat_DA_SF", ")", ",", "np", ".", "array", "(", "labels_SA_DF", ")", ",", "np", ".", "array", "(", "labels_DA_SF", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.binning": [[39, 48], ["range", "B.append", "range", "zip"], "function", ["None"], ["", "def", "binning", "(", "confidences", ",", "labels_hat", ",", "labels", ",", "num_bins", ")", ":", "\n", "\n", "    ", "I", "=", "[", "m", "/", "num_bins", "for", "m", "in", "range", "(", "num_bins", "+", "1", ")", "]", "\n", "B", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_bins", ")", ":", "\n", "        ", "B_m", "=", "[", "(", "p", ",", "label_hat", ",", "label_true", ")", "for", "p", ",", "label_hat", ",", "label_true", "in", "zip", "(", "confidences", ",", "labels_hat", ",", "labels", ")", "\n", "if", "I", "[", "i", "]", "<", "p", "+", "1e-06", "<=", "I", "[", "i", "+", "1", "]", "]", "\n", "B", ".", "append", "(", "B_m", ")", "\n", "", "return", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.acc": [[50, 55], ["acc.append", "utils.acc_m"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.acc_m"], ["", "def", "acc", "(", "B", ")", ":", "\n", "    ", "acc", "=", "[", "]", "\n", "for", "B_m", "in", "B", ":", "\n", "        ", "acc", ".", "append", "(", "acc_m", "(", "B_m", ")", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.acc_m": [[57, 66], ["len", "len"], "function", ["None"], ["", "def", "acc_m", "(", "B_m", ")", ":", "\n", "    ", "hit_count", "=", "0", "\n", "for", "sample", "in", "B_m", ":", "\n", "        ", "if", "sample", "[", "1", "]", "==", "sample", "[", "2", "]", ":", "\n", "            ", "hit_count", "+=", "1", "\n", "", "", "if", "len", "(", "B_m", ")", "==", "0", ":", "\n", "        ", "return", "-", "1", "\n", "", "else", ":", "\n", "        ", "return", "hit_count", "/", "len", "(", "B_m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.count": [[68, 73], ["count.append", "utils.count_m"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.count_m"], ["", "", "def", "count", "(", "B", ")", ":", "\n", "    ", "count", "=", "[", "]", "\n", "for", "B_m", "in", "B", ":", "\n", "        ", "count", ".", "append", "(", "count_m", "(", "B_m", ")", ")", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.count_m": [[75, 80], ["None"], "function", ["None"], ["", "def", "count_m", "(", "B_m", ")", ":", "\n", "    ", "count_collected", "=", "0", "\n", "for", "_", "in", "B_m", ":", "\n", "        ", "count_collected", "+=", "1", "\n", "", "return", "count_collected", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.get_conf": [[82, 87], ["conf.append", "utils.conf_m"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.conf_m"], ["", "def", "get_conf", "(", "B", ")", ":", "\n", "    ", "conf", "=", "[", "]", "\n", "for", "B_m", "in", "B", ":", "\n", "        ", "conf", ".", "append", "(", "conf_m", "(", "B_m", ")", ")", "\n", "", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.conf_m": [[89, 97], ["len", "len"], "function", ["None"], ["", "def", "conf_m", "(", "B_m", ")", ":", "\n", "    ", "p_collected", "=", "0", "\n", "for", "sample", "in", "B_m", ":", "\n", "        ", "p_collected", "+=", "sample", "[", "0", "]", "\n", "", "if", "len", "(", "B_m", ")", "==", "0", ":", "\n", "        ", "return", "-", "1", "\n", "", "else", ":", "\n", "        ", "return", "p_collected", "/", "len", "(", "B_m", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.plot_cal_hist.plot_histogram": [[69, 97], ["seaborn.histplot", "ax.vlines", "ax.vlines", "ax.legend", "matplotlib.pyplot.xlim", "matplotlib.pyplot.ylim", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.grid", "numpy.mean", "round", "round", "numpy.mean"], "function", ["None"], ["def", "plot_histogram", "(", "pred", ",", "acc", ",", "conf", ",", "color", ",", "ax", ",", "type", ")", ":", "\n", "\n", "    ", "sns", ".", "histplot", "(", "pred", ",", "\n", "stat", "=", "\"probability\"", ",", "\n", "legend", "=", "True", ",", "\n", "label", "=", "type", ",", "\n", "alpha", "=", "alpha_w", ",", "\n", "color", "=", "color", ",", "\n", "binwidth", "=", "binwidth", ",", "\n", "binrange", "=", "(", "0", ",", "1", ")", ",", "\n", ")", "\n", "ax", ".", "vlines", "(", "acc", ",", "\n", "0", ",", "1", ",", "\n", "colors", "=", "'black'", ",", "\n", "linestyles", "=", "'solid'", ",", "\n", "label", "=", "f'Accuracy: {round(acc * 100, 2)}%'", ",", "\n", ")", "\n", "ax", ".", "vlines", "(", "np", ".", "mean", "(", "conf", ")", ",", "0", ",", "1", ",", "\n", "colors", "=", "'black'", ",", "\n", "linestyles", "=", "'dotted'", ",", "\n", "label", "=", "f'Avg. confidence: {round(np.mean(conf) * 100, 2)}%'", ",", "\n", ")", "\n", "ax", ".", "legend", "(", ")", "# loc='upper left')", "\n", "plt", ".", "xlim", "(", "[", "0", ",", "1", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "plt", ".", "ylabel", "(", "\"% of samples\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Output predictions\"", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.plot_rel_diag.plot_reliability_diagram": [[27, 142], ["utils.binning", "utils.acc", "utils.get_conf", "range", "utils.count", "range", "ax.bar", "ax.bar", "ax.set_aspect", "ax.set_xlim", "ax.set_ylim", "ax.plot", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlim", "matplotlib.pyplot.ylim", "matplotlib.pyplot.legend", "positions.append", "positions.append", "acc_step_norm.append", "acc_step_norm.append", "numpy.max", "ax.bar", "ax.bar", "ax.bar", "ax.bar", "ax.bar", "abs", "ax.bar", "abs", "ax.bar", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.binning", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.acc", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.get_conf", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.helper_functions.utils.count"], ["def", "plot_reliability_diagram", "(", "pred", ",", "conf", ",", "labels", ",", "labels_hat", ",", "layer", ",", "ax", ",", "num_bins", "=", "10", ")", ":", "\n", "\n", "    ", "color", "=", "\"firebrick\"", "\n", "\n", "if", "conf", "is", "not", "None", ":", "\n", "\n", "        ", "B", "=", "binning", "(", "conf", ",", "labels_hat", ",", "labels", ",", "num_bins", ")", "\n", "acc_", "=", "acc", "(", "B", ")", "\n", "conf_", "=", "get_conf", "(", "B", ")", "\n", "\n", "bin_size", "=", "1", "/", "num_bins", "\n", "positions", "=", "[", "]", "\n", "akk_pos", "=", "bin_size", "/", "2", "\n", "for", "i", "in", "range", "(", "num_bins", ")", ":", "\n", "            ", "if", "acc_", "[", "i", "]", "==", "-", "1", ":", "\n", "                ", "positions", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "positions", ".", "append", "(", "akk_pos", ")", "\n", "", "akk_pos", "+=", "bin_size", "\n", "\n", "", "acc_step", "=", "[", "x", "+", "bin_size", "/", "2", "for", "x", "in", "acc_", "]", "\n", "\n", "acc_step_norm", "=", "[", "]", "\n", "for", "data", "in", "acc_step", ":", "\n", "            ", "if", "data", "<", "1", ":", "\n", "                ", "acc_step_norm", ".", "append", "(", "data", ")", "\n", "", "else", ":", "\n", "                ", "acc_step_norm", ".", "append", "(", "1", ")", "\n", "", "", "acc_step", "=", "acc_", "\n", "tilde", "=", "0.01", "\n", "gap_color", "=", "color", "\n", "counter", "=", "count", "(", "B", ")", "\n", "for", "i", "in", "range", "(", "num_bins", ")", ":", "\n", "\n", "###########################################################", "\n", "# define gap_alpha to visualize number of samples per bin", "\n", "###########################################################", "\n", "            ", "x", "=", "counter", "[", "i", "]", "/", "(", "np", ".", "max", "(", "counter", ")", ")", "\n", "gap_alpha", "=", "x", "+", "(", "1", "/", "np", ".", "exp", "(", "15.42", "*", "x", "+", "0.693147", ")", ")", "-", "0.000001", "\n", "\n", "###########################################################", "\n", "# draw reliability diagram", "\n", "# white bars to only highlight the gap", "\n", "###########################################################", "\n", "if", "conf_", "[", "i", "]", ">", "acc_step", "[", "i", "]", ":", "\n", "                ", "if", "abs", "(", "acc_step", "[", "i", "]", "-", "conf_", "[", "i", "]", ")", ">", "tilde", ":", "\n", "                    ", "gap", "=", "ax", ".", "bar", "(", "positions", "[", "i", "]", ",", "\n", "positions", "[", "i", "]", ",", "\n", "width", "=", "bin_size", ",", "\n", "alpha", "=", "gap_alpha", ",", "\n", "color", "=", "gap_color", ",", "\n", "label", "=", "\"Gap\"", ",", "\n", ")", "\n", "", "black", "=", "ax", ".", "bar", "(", "positions", "[", "i", "]", ",", "\n", "acc_step", "[", "i", "]", ",", "\n", "width", "=", "bin_size", ",", "\n", "alpha", "=", "1", ",", "\n", "linewidth", "=", "0", ",", "\n", "color", "=", "\"black\"", ",", "\n", "label", "=", "\"Accuracy\"", ",", "\n", ")", "\n", "white", "=", "ax", ".", "bar", "(", "positions", "[", "i", "]", ",", "\n", "acc_step", "[", "i", "]", "-", "0.007", ",", "\n", "width", "=", "bin_size", "+", "0.003", ",", "\n", "alpha", "=", "1", ",", "\n", "linewidth", "=", "0.1", ",", "\n", "color", "=", "\"white\"", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "black", "=", "ax", ".", "bar", "(", "positions", "[", "i", "]", ",", "\n", "acc_step", "[", "i", "]", ",", "\n", "width", "=", "bin_size", ",", "\n", "alpha", "=", "1", ",", "\n", "linewidth", "=", "0", ",", "\n", "color", "=", "\"black\"", ",", "\n", "label", "=", "\"Accuracy\"", ",", "\n", ")", "\n", "for_line", "=", "ax", ".", "bar", "(", "positions", "[", "i", "]", ",", "\n", "acc_step", "[", "i", "]", "-", "0.007", ",", "\n", "width", "=", "bin_size", ",", "\n", "alpha", "=", "1", ",", "\n", "linewidth", "=", "0.1", ",", "\n", "color", "=", "\"white\"", ",", "\n", ")", "\n", "if", "abs", "(", "acc_step", "[", "i", "]", "-", "conf_", "[", "i", "]", ")", ">", "tilde", ":", "\n", "                    ", "gap", "=", "ax", ".", "bar", "(", "positions", "[", "i", "]", ",", "\n", "acc_step", "[", "i", "]", "-", "0.007", ",", "\n", "width", "=", "bin_size", ",", "\n", "alpha", "=", "gap_alpha", ",", "\n", "linewidth", "=", "0", ",", "\n", "color", "=", "gap_color", ",", "\n", "label", "=", "\"Gap\"", ",", "\n", ")", "\n", "", "optimal", "=", "ax", ".", "bar", "(", "positions", "[", "i", "]", ",", "\n", "positions", "[", "i", "]", ",", "\n", "width", "=", "bin_size", ",", "\n", "alpha", "=", "1", ",", "\n", "color", "=", "\"white\"", ",", "\n", "edgecolor", "=", "\"white\"", ",", "\n", "linewidth", "=", "0.1", ",", "\n", ")", "\n", "\n", "", "", "acc_label", "=", "ax", ".", "bar", "(", "-", "1", ",", "-", "1", ",", "color", "=", "\"black\"", ",", "label", "=", "\"Accuracy\"", ")", "\n", "gap_label", "=", "ax", ".", "bar", "(", "-", "1", ",", "-", "1", ",", "color", "=", "gap_color", ",", "label", "=", "\"Gap\"", ")", "\n", "ax", ".", "set_aspect", "(", "\"equal\"", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\":\"", ",", "color", "=", "\"gray\"", ")", "\n", "plt", ".", "xticks", "(", "[", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", ",", "1.0", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", ",", "1.0", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"Confidence (\"", "+", "layer", "+", "\")\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Accuracy\"", ")", "\n", "plt", ".", "xlim", "(", "[", "0.5", ",", "1", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.5", ",", "1", "]", ")", "\n", "plt", ".", "legend", "(", "handles", "=", "[", "acc_label", ",", "gap_label", "]", ",", "loc", "=", "'lower right'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.__init__": [[39, 116], ["tensorflow.reset_default_graph", "model_inference.AdHominem_O2D2.initialize_placeholders", "model_inference.AdHominem_O2D2.initialize_parameters", "model_inference.AdHominem_O2D2.ual_layer", "tensorflow.Session", "model_inference.AdHominem_O2D2.sess.run", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "model_inference.AdHominem_O2D2.feature_extraction", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.metric_layer", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.compute_kernel_distance", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.bfs_layer", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.o2d2", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_placeholders", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_parameters", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.ual_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.feature_extraction", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.metric_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_kernel_distance", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bfs_layer", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.o2d2"], ["def", "__init__", "(", "self", ",", "hyper_parameters", ",", "theta_init", ",", "theta_E_init", ")", ":", "\n", "\n", "# reset graph", "\n", "        ", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "# hyper-parameters", "\n", "self", ".", "hyper_parameters", "=", "hyper_parameters", "\n", "\n", "# placeholders for input variables", "\n", "self", ".", "placeholders", "=", "self", ".", "initialize_placeholders", "(", "theta_E_init", ")", "\n", "\n", "# batch size", "\n", "self", ".", "B", "=", "tf", ".", "shape", "(", "self", ".", "placeholders", "[", "'e_w_L'", "]", ")", "[", "0", "]", "\n", "\n", "# trainable parameters", "\n", "self", ".", "theta", "=", "self", ".", "initialize_parameters", "(", "theta_init", ")", "\n", "\n", "##########################################", "\n", "# document embeddings (feature extraction)", "\n", "##########################################", "\n", "with", "tf", ".", "variable_scope", "(", "'feature_extraction_doc2vec'", ")", ":", "\n", "            ", "e_c", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'e_c_L'", "]", ",", "self", ".", "placeholders", "[", "'e_c_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "e_w", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'e_w_L'", "]", ",", "self", ".", "placeholders", "[", "'e_w_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "N_w", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'N_w_L'", "]", ",", "self", ".", "placeholders", "[", "'N_w_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "N_s", "=", "tf", ".", "concat", "(", "[", "self", ".", "placeholders", "[", "'N_s_L'", "]", ",", "self", ".", "placeholders", "[", "'N_s_R'", "]", "]", ",", "axis", "=", "0", ")", "\n", "# doc2vec", "\n", "e_d", ",", "self", ".", "att_w_L", ",", "self", ".", "att_w_R", ",", "self", ".", "att_s_L", ",", "self", ".", "att_s_R", "=", "self", ".", "feature_extraction", "(", "e_c", ",", "e_w", ",", "N_w", ",", "N_s", ")", "\n", "\n", "############################", "\n", "# deep metric learning (DML)", "\n", "############################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'deep_metric_learning'", ")", ":", "\n", "            ", "self", ".", "lev_L", ",", "self", ".", "lev_R", "=", "self", ".", "metric_layer", "(", "e_d", ",", "self", ".", "theta", "[", "'metric'", "]", ")", "\n", "\n", "###################################################", "\n", "# kernel distance for probabilstic contrastive loss", "\n", "###################################################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Euclidean_distance_and_kernel_function_a'", ")", ":", "\n", "            ", "self", ".", "pred_dml", "=", "self", ".", "compute_kernel_distance", "(", "self", ".", "lev_L", ",", "self", ".", "lev_R", ",", "\n", "alpha", "=", "self", ".", "theta", "[", "\"loss_dml\"", "]", "[", "\"alpha\"", "]", ",", "\n", "beta", "=", "self", ".", "theta", "[", "\"loss_dml\"", "]", "[", "\"beta\"", "]", ",", "\n", ")", "\n", "\n", "##################################", "\n", "# Bayes factor scoring (BFS) layer", "\n", "##################################", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Bayes_factor_scoring'", ")", ":", "\n", "            ", "self", ".", "pred_bfs", ",", "self", ".", "H_W", ",", "self", ".", "H_B", "=", "self", ".", "bfs_layer", "(", "self", ".", "lev_L", ",", "\n", "self", ".", "lev_R", ",", "\n", "self", ".", "theta", "[", "'bfs_1'", "]", ",", "\n", "self", ".", "theta", "[", "'bfs_2'", "]", ",", "\n", ")", "\n", "\n", "####################################", "\n", "# uncertainty adaptation layer (UAL)", "\n", "####################################", "\n", "", "self", ".", "pred_ual", ",", "self", ".", "conf_matrix", "=", "self", ".", "ual_layer", "(", "self", ".", "theta", "[", "'ual'", "]", ",", "\n", "self", ".", "pred_bfs", ",", "\n", "self", ".", "lev_L", ",", "\n", "self", ".", "lev_R", ",", "\n", ")", "\n", "\n", "#####################################", "\n", "# out-of-distribution detector (O2D2)", "\n", "#####################################", "\n", "with", "tf", ".", "variable_scope", "(", "'out_of_distribution_detector'", ")", ":", "\n", "            ", "self", ".", "pred_o2d2", ",", "self", ".", "labels_o2d2", "=", "self", ".", "o2d2", "(", "lev_L", "=", "self", ".", "lev_L", ",", "\n", "lev_R", "=", "self", ".", "lev_R", ",", "\n", "theta", "=", "self", ".", "theta", "[", "'o2d2'", "]", ",", "\n", "conf_matrix", "=", "self", ".", "conf_matrix", ",", "\n", ")", "\n", "\n", "################", "\n", "# launch session", "\n", "################", "\n", "", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.o2d2": [[120, 143], ["tensorflow.square", "tensorflow.square", "tensorflow.reshape", "tensorflow.concat", "tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh", "tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh", "tensorflow.nn.xw_plus_b", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.cast", "tensorflow.math.round", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "o2d2", "(", "self", ",", "lev_L", ",", "lev_R", ",", "conf_matrix", ",", "theta", ")", ":", "\n", "\n", "# input data", "\n", "        ", "y1", "=", "tf", ".", "square", "(", "lev_L", "-", "lev_R", ")", "\n", "y2", "=", "tf", ".", "square", "(", "lev_L", "+", "lev_R", ")", "\n", "y3", "=", "tf", ".", "reshape", "(", "conf_matrix", ",", "shape", "=", "[", "self", ".", "B", ",", "4", "]", ")", "\n", "y", "=", "tf", ".", "concat", "(", "[", "y1", ",", "y2", ",", "y3", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# layer 1", "\n", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W1\"", "]", ",", "theta", "[", "\"b1\"", "]", ")", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "# layer 2", "\n", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W2\"", "]", ",", "theta", "[", "\"b2\"", "]", ")", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "# layer 3", "\n", "logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W3\"", "]", ",", "theta", "[", "\"b3\"", "]", ")", "\n", "pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", "\n", "\n", "y_hat", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "round", "(", "tf", ".", "squeeze", "(", "pred", ")", ")", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "shape", "=", "[", "self", ".", "B", ",", "1", "]", ")", "\n", "\n", "return", "pred", ",", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.ual_layer": [[147, 167], ["tensorflow.square", "tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh", "tensorflow.nn.xw_plus_b", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.matmul", "tensorflow.subtract", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "ual_layer", "(", "self", ",", "theta", ",", "pred_bfs", ",", "lev_L", ",", "lev_R", ")", ":", "\n", "\n", "        ", "y", "=", "tf", ".", "square", "(", "lev_L", "-", "lev_R", ")", "\n", "\n", "# dense layer", "\n", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W1\"", "]", ",", "theta", "[", "\"b1\"", "]", ")", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "# compute confusion matrix, shape = [B, 2 * 2]", "\n", "logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "y", ",", "theta", "[", "\"W2\"", "]", ",", "theta", "[", "\"b2\"", "]", ")", "\n", "# shape = [B, 2, 2]", "\n", "logits", "=", "tf", ".", "reshape", "(", "logits", ",", "shape", "=", "[", "-", "1", ",", "2", ",", "2", "]", ")", "\n", "\n", "conf_matrix", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "pred_bfs", "=", "tf", ".", "concat", "(", "[", "tf", ".", "subtract", "(", "1.0", ",", "pred_bfs", ")", ",", "pred_bfs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# uncertainty adaptation, shape = [B, 2, 2] --> [B, 2]", "\n", "pred_ual", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "conf_matrix", ",", "tf", ".", "expand_dims", "(", "pred_bfs", ",", "axis", "=", "2", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "pred_ual", ",", "conf_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.metric_layer": [[171, 182], ["tensorflow.nn.xw_plus_b", "tensorflow.nn.tanh"], "methods", ["None"], ["", "def", "metric_layer", "(", "self", ",", "e_d", ",", "theta", ")", ":", "\n", "\n", "# fully-connected layer", "\n", "        ", "y", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "e_d", ",", "\n", "theta", "[", "'W'", "]", ",", "\n", "theta", "[", "'b'", "]", ",", "\n", ")", "\n", "# nonlinear output", "\n", "y", "=", "tf", ".", "nn", ".", "tanh", "(", "y", ")", "\n", "\n", "return", "y", "[", ":", "self", ".", "B", ",", ":", "]", ",", "y", "[", "self", ".", "B", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bfs_layer": [[186, 255], ["tensorflow.nn.xw_plus_b", "tensorflow.nn.xw_plus_b", "tensorflow.nn.relu", "tensorflow.nn.relu", "model_inference.AdHominem_O2D2.bfs_layer.makeS"], "methods", ["None"], ["", "def", "bfs_layer", "(", "self", ",", "lev_L", ",", "lev_R", ",", "theta_bfs_1", ",", "theta_bfs_2", ")", ":", "\n", "\n", "        ", "def", "makeS", "(", "C", ",", "D", ")", ":", "\n", "            ", "diagC", "=", "tf", ".", "math", ".", "exp", "(", "tf", ".", "diag_part", "(", "C", ")", ")", "\n", "maskC", "=", "tf", ".", "ones_like", "(", "C", ")", "-", "tf", ".", "eye", "(", "D", ")", "\n", "maskC", "=", "tf", ".", "matrix_band_part", "(", "maskC", ",", "0", ",", "-", "1", ")", "\n", "C", "=", "tf", ".", "multiply", "(", "maskC", ",", "C", ")", "+", "tf", ".", "diag", "(", "diagC", ")", "\n", "S", "=", "tf", ".", "matmul", "(", "C", ",", "C", ",", "transpose_b", "=", "True", ")", "+", "1e-6", "*", "tf", ".", "eye", "(", "D", ")", "\n", "return", "S", "\n", "\n", "", "def", "bilinear_form", "(", "x1", ",", "X", ",", "x2", ")", ":", "\n", "# [None, D] x [D, D] = [None, D]", "\n", "            ", "x1X", "=", "tf", ".", "matmul", "(", "x1", ",", "X", ")", "\n", "# [None, 1, D] x [None, D, 1] = [None, 1, 1]", "\n", "x1X", "=", "tf", ".", "expand_dims", "(", "x1X", ",", "axis", "=", "2", ")", "\n", "x1Xx2", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "x2", ",", "axis", "=", "1", ")", ",", "x1X", ")", "\n", "# [None, 1]", "\n", "x1Xx2", "=", "tf", ".", "squeeze", "(", "x1Xx2", ",", "axis", "=", "2", ")", "\n", "return", "x1Xx2", "\n", "\n", "# fully-connected layer", "\n", "", "x1", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "lev_L", ",", "\n", "theta_bfs_1", "[", "'W'", "]", ",", "\n", "theta_bfs_1", "[", "'b'", "]", ",", "\n", ")", "\n", "x2", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "lev_R", ",", "\n", "theta_bfs_1", "[", "'W'", "]", ",", "\n", "theta_bfs_1", "[", "'b'", "]", ",", "\n", ")", "\n", "x1", "=", "tf", ".", "nn", ".", "relu", "(", "x1", ")", "\n", "x2", "=", "tf", ".", "nn", ".", "relu", "(", "x2", ")", "\n", "\n", "# PLDA layer", "\n", "B", "=", "theta_bfs_2", "[", "'B'", "]", "\n", "B", "=", "makeS", "(", "B", ",", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", "\n", "W", "=", "theta_bfs_2", "[", "'W'", "]", "\n", "W", "=", "makeS", "(", "W", ",", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", "\n", "mu", "=", "theta_bfs_2", "[", "'mu'", "]", "\n", "\n", "A_tilde", "=", "tf", ".", "matrix_inverse", "(", "B", "+", "2", "*", "W", "+", "1e-6", "*", "tf", ".", "eye", "(", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", ")", "\n", "G_tilde", "=", "tf", ".", "matrix_inverse", "(", "B", "+", "W", "+", "1e-6", "*", "tf", ".", "eye", "(", "self", ".", "hyper_parameters", "[", "'D_plda'", "]", ")", ")", "\n", "\n", "B_mu", "=", "tf", ".", "matmul", "(", "B", ",", "mu", ")", "\n", "mu_B_mu", "=", "tf", ".", "matmul", "(", "mu", ",", "B_mu", ",", "transpose_a", "=", "True", ")", "\n", "W_AmG", "=", "tf", ".", "matmul", "(", "W", ",", "A_tilde", "-", "G_tilde", ",", "transpose_a", "=", "True", ")", "\n", "mu_B_Am2G", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "B_mu", ",", "A_tilde", "-", "2", "*", "G_tilde", ",", "transpose_a", "=", "True", ")", ",", "B_mu", ")", "\n", "\n", "A", "=", "0.5", "*", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "W", ",", "A_tilde", ",", "transpose_a", "=", "True", ")", ",", "W", ")", "\n", "G", "=", "0.5", "*", "tf", ".", "matmul", "(", "W_AmG", ",", "W", ")", "\n", "c", "=", "tf", ".", "matmul", "(", "W_AmG", ",", "B_mu", ")", "\n", "\n", "k_tilde", "=", "2", "*", "tf", ".", "linalg", ".", "logdet", "(", "G_tilde", ")", "-", "tf", ".", "linalg", ".", "logdet", "(", "B", ")", "-", "tf", ".", "linalg", ".", "logdet", "(", "A_tilde", ")", "+", "mu_B_mu", "\n", "k", "=", "k_tilde", "+", "0.5", "*", "mu_B_Am2G", "\n", "\n", "x1Ax2", "=", "bilinear_form", "(", "x1", ",", "A", ",", "x2", ")", "\n", "x2Ax1", "=", "bilinear_form", "(", "x2", ",", "A", ",", "x1", ")", "\n", "x1Gx1", "=", "bilinear_form", "(", "x1", ",", "G", ",", "x1", ")", "\n", "x2Gx2", "=", "bilinear_form", "(", "x2", ",", "G", ",", "x2", ")", "\n", "x1x2c", "=", "tf", ".", "matmul", "(", "tf", ".", "add", "(", "x1", ",", "x2", ")", ",", "c", ")", "\n", "\n", "score", "=", "x1Ax2", "+", "x2Ax1", "+", "x1Gx1", "+", "x2Gx2", "+", "x1x2c", "+", "k", "\n", "\n", "pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "score", ")", "\n", "\n", "# compute entropy", "\n", "H_W", "=", "tf", ".", "linalg", ".", "logdet", "(", "tf", ".", "matrix_inverse", "(", "W", ")", ")", "\n", "H_B", "=", "tf", ".", "linalg", ".", "logdet", "(", "tf", ".", "matrix_inverse", "(", "B", ")", ")", "\n", "\n", "return", "pred", ",", "H_W", ",", "H_B", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_placeholders": [[259, 350], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.variable_scope", "tensorflow.zeros", "tensorflow.Variable", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.zeros", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.concat"], "methods", ["None"], ["", "def", "initialize_placeholders", "(", "self", ",", "theta_E", ")", ":", "\n", "\n", "        ", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "D_c", "=", "self", ".", "hyper_parameters", "[", "'D_c'", "]", "\n", "D_w", "=", "self", ".", "hyper_parameters", "[", "'D_w'", "]", "\n", "\n", "# input character placeholder", "\n", "x_c_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", ",", "T_c", "]", ",", "\n", "name", "=", "'x_c_L'", ",", "\n", ")", "\n", "x_c_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", ",", "T_c", "]", ",", "\n", "name", "=", "'x_c_R'", ",", "\n", ")", "\n", "\n", "# initialize embedding matrix for characters", "\n", "with", "tf", ".", "variable_scope", "(", "'character_embedding_matrix'", ")", ":", "\n", "# <PAD> embedding", "\n", "            ", "E_c_0", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "D_c", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# trainable embeddings", "\n", "E_c_1", "=", "tf", ".", "Variable", "(", "theta_E", "[", "'E_c_1'", "]", ",", "\n", "name", "=", "'E_c_1'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "False", ",", "\n", ")", "\n", "# concatenate zero-padding embedding + trained character embeddings", "\n", "E_c", "=", "tf", ".", "concat", "(", "[", "E_c_0", ",", "E_c_1", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# character embeddings, shape=[B, T_s, T_w, T_c, D_c]", "\n", "", "e_c_L", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_c", ",", "x_c_L", ")", "\n", "e_c_R", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_c", ",", "x_c_R", ")", "\n", "\n", "# word-based placeholder for two documents", "\n", "x_w_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", "]", ",", "name", "=", "'x_w_L'", ")", "\n", "x_w_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", ",", "T_w", "]", ",", "name", "=", "'x_w_R'", ")", "\n", "\n", "# true sentence / document lengths", "\n", "N_w_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", "]", ",", "name", "=", "'N_w_L'", ")", "\n", "N_w_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "T_s", "]", ",", "name", "=", "'N_w_R'", ")", "\n", "N_s_L", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'N_s_L'", ")", "\n", "N_s_R", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'N_s_R'", ")", "\n", "\n", "# matrix for word embeddings, shape=[len(V_w), D_w]", "\n", "with", "tf", ".", "variable_scope", "(", "'word_embedding_matrix'", ")", ":", "\n", "# <PAD> embedding", "\n", "            ", "E_w_0", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "D_w", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# <UNK> embedding", "\n", "E_w_1", "=", "tf", ".", "Variable", "(", "theta_E", "[", "'E_w_1'", "]", ",", "\n", "name", "=", "'E_w_1'", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "# pre-trained word embedding", "\n", "E_w_2", "=", "tf", ".", "Variable", "(", "theta_E", "[", "'E_w_2'", "]", ",", "\n", "name", "=", "'E_w_2'", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "# concatenate special-token embeddings + regular-token embeddings", "\n", "E_w", "=", "tf", ".", "concat", "(", "[", "E_w_0", ",", "E_w_1", ",", "E_w_2", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# word embeddings, shape=[B, T_s, T_w, D_w]", "\n", "", "e_w_L", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_w", ",", "x_w_L", ")", "\n", "e_w_R", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "E_w", ",", "x_w_R", ")", "\n", "\n", "#############", "\n", "# make tuples", "\n", "#############", "\n", "placeholders", "=", "{", "'x_c_L'", ":", "x_c_L", ",", "\n", "'x_c_R'", ":", "x_c_R", ",", "\n", "#", "\n", "'e_c_L'", ":", "e_c_L", ",", "\n", "'e_c_R'", ":", "e_c_R", ",", "\n", "#", "\n", "'x_w_L'", ":", "x_w_L", ",", "\n", "'x_w_R'", ":", "x_w_R", ",", "\n", "#", "\n", "'e_w_L'", ":", "e_w_L", ",", "\n", "'e_w_R'", ":", "e_w_R", ",", "\n", "#", "\n", "'N_w_L'", ":", "N_w_L", ",", "\n", "'N_w_R'", ":", "N_w_R", ",", "\n", "'N_s_L'", ":", "N_s_L", ",", "\n", "'N_s_R'", ":", "N_s_R", ",", "\n", "#", "\n", "}", "\n", "\n", "return", "placeholders", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.feature_extraction": [[354, 367], ["tensorflow.variable_scope", "model_inference.AdHominem_O2D2.cnn_layer_cw", "tensorflow.variable_scope", "tensorflow.concat", "model_inference.AdHominem_O2D2.bilstm_layer_ws", "model_inference.AdHominem_O2D2.att_layer_ws", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.bilstm_layer_sd", "model_inference.AdHominem_O2D2.att_layer_sd"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.cnn_layer_cw", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_layer_ws", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.att_layer_ws", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_layer_sd", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.att_layer_sd"], ["", "def", "feature_extraction", "(", "self", ",", "e_c", ",", "e_w", ",", "N_w", ",", "N_s", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'characters_to_word_encoding'", ")", ":", "\n", "            ", "r_c", "=", "self", ".", "cnn_layer_cw", "(", "e_c", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'words_to_sentence_encoding'", ")", ":", "\n", "            ", "e_cw", "=", "tf", ".", "concat", "(", "[", "e_w", ",", "r_c", "]", ",", "axis", "=", "3", ")", "\n", "h_w", "=", "self", ".", "bilstm_layer_ws", "(", "e_cw", ",", "N_w", ")", "\n", "e_s", ",", "att_w", "=", "self", ".", "att_layer_ws", "(", "h_w", ",", "N_w", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sentences_to_document_encoding'", ")", ":", "\n", "            ", "h_s", "=", "self", ".", "bilstm_layer_sd", "(", "e_s", ",", "N_s", ")", "\n", "e_d", ",", "att_s", "=", "self", ".", "att_layer_sd", "(", "h_s", ",", "N_s", ")", "\n", "\n", "", "return", "e_d", ",", "att_w", "[", ":", "self", ".", "B", ",", ":", ",", ":", "]", ",", "att_w", "[", "self", ".", "B", ":", ",", ":", "]", ",", "att_s", "[", ":", "self", ".", "B", ",", ":", "]", ",", "att_s", "[", "self", ".", "B", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_kernel_distance": [[371, 383], ["tensorflow.subtract", "tensorflow.math.pow", "tensorflow.math.exp", "tensorflow.square", "tensorflow.reduce_sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_kernel_distance", "(", "lev_L", ",", "lev_R", ",", "alpha", ",", "beta", ")", ":", "\n", "# define euclidean distance, shape = (B, D_h)", "\n", "        ", "distance", "=", "tf", ".", "subtract", "(", "lev_L", ",", "lev_R", ")", "\n", "distance", "=", "tf", ".", "square", "(", "distance", ")", "+", "1e-8", "\n", "# shape = (B, 1)", "\n", "distance", "=", "tf", ".", "reduce_sum", "(", "distance", ",", "1", ",", "keepdims", "=", "True", ")", "+", "1e-8", "\n", "# kernel", "\n", "pred", "=", "tf", ".", "math", ".", "pow", "(", "x", "=", "distance", ",", "y", "=", "beta", ")", "\n", "pred", "=", "tf", ".", "math", ".", "exp", "(", "-", "alpha", "*", "pred", ")", "\n", "pred", "=", "pred", "+", "1e-8", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.cnn_layer_cw": [[387, 433], ["tensorflow.reshape", "tensorflow.pad", "tensorflow.nn.conv1d", "tensorflow.nn.bias_add", "tensorflow.nn.tanh", "tensorflow.expand_dims", "tensorflow.nn.max_pool", "tensorflow.squeeze", "tensorflow.reshape", "tensorflow.constant"], "methods", ["None"], ["", "def", "cnn_layer_cw", "(", "self", ",", "e_c", ")", ":", "\n", "\n", "        ", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "h", "=", "self", ".", "hyper_parameters", "[", "'w'", "]", "\n", "D_c", "=", "self", ".", "hyper_parameters", "[", "'D_c'", "]", "\n", "D_r", "=", "self", ".", "hyper_parameters", "[", "'D_r'", "]", "\n", "\n", "# reshape: [B, T_s, T_w, T_c, D_c] --> [B * T_s * T_w, T_c, D_c]", "\n", "e_c", "=", "tf", ".", "reshape", "(", "e_c", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "T_c", ",", "D_c", "]", ")", "\n", "\n", "# zero-padding, shape = [B * T_s * T_w, T_c + 2 * (h-1), D_c]", "\n", "e_c", "=", "tf", ".", "pad", "(", "e_c", ",", "\n", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "h", "-", "1", ",", "h", "-", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", ",", "\n", "mode", "=", "'CONSTANT'", ",", "\n", ")", "\n", "\n", "# 1D convolution", "\n", "# shape = [B * T_s * T_w, T_c + 2 * (h-1) - h + 1, D_r] = [B * T_s * T_w, T_c + h - 1, D_r]", "\n", "r_c", "=", "tf", ".", "nn", ".", "conv1d", "(", "e_c", ",", "\n", "self", ".", "theta", "[", "'cnn'", "]", "[", "'W'", "]", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "'chraracter_1D_cnn'", ",", "\n", ")", "\n", "# apply bias term", "\n", "r_c", "=", "tf", ".", "nn", ".", "bias_add", "(", "r_c", ",", "self", ".", "theta", "[", "'cnn'", "]", "[", "'b'", "]", ")", "\n", "# apply nonlinear function", "\n", "r_c", "=", "tf", ".", "nn", ".", "tanh", "(", "r_c", ")", "\n", "\n", "# max-over-time pooling", "\n", "# shape = [B * T_s * T_w, T_c + h - 1, D_r, 1]", "\n", "r_c", "=", "tf", ".", "expand_dims", "(", "r_c", ",", "3", ")", "\n", "# max-over-time-pooling, shape = [B * T_s * T_w, 1, D_r, 1]", "\n", "r_c", "=", "tf", ".", "nn", ".", "max_pool", "(", "r_c", ",", "\n", "ksize", "=", "[", "1", ",", "T_c", "+", "h", "-", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", ")", "\n", "# shape = [B * T_s * T_w, D_r]", "\n", "r_c", "=", "tf", ".", "squeeze", "(", "r_c", ")", "\n", "#  shape = [B, T_s, T_w, D_r]", "\n", "r_c", "=", "tf", ".", "reshape", "(", "r_c", ",", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "T_w", ",", "D_r", "]", ")", "\n", "\n", "return", "r_c", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_layer_ws": [[437, 482], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reverse_sequence", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.constant", "tensorflow.tile", "tensorflow.scan", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reverse_sequence", "tensorflow.concat", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "bilstm_layer_ws", "(", "self", ",", "e_w_f", ",", "N_w", ")", ":", "\n", "\n", "        ", "D_w", "=", "self", ".", "hyper_parameters", "[", "'D_w'", "]", "\n", "D_r", "=", "self", ".", "hyper_parameters", "[", "'D_r'", "]", "\n", "D_s", "=", "self", ".", "hyper_parameters", "[", "'D_s'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# reshape N_w, shape = [B * T_s]", "\n", "N_w", "=", "tf", ".", "reshape", "(", "N_w", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "]", ")", "\n", "# reshape input word embeddings, shape = [B * T_s, T_w, D_w + D_r]", "\n", "e_w_f", "=", "tf", ".", "reshape", "(", "e_w_f", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "T_w", ",", "D_w", "+", "D_r", "]", ")", "\n", "# reverse input sentences", "\n", "e_w_b", "=", "tf", ".", "reverse_sequence", "(", "e_w_f", ",", "seq_lengths", "=", "N_w", ",", "seq_axis", "=", "1", ")", "\n", "\n", "h_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "h_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "D_s", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "t_0", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "N_w_t", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "N_w", ",", "axis", "=", "1", ")", ",", "tf", ".", "constant", "(", "[", "1", ",", "T_w", "]", ",", "tf", ".", "int32", ")", ")", "\n", "\n", "states", "=", "tf", ".", "scan", "(", "self", ".", "bilstm_cell_ws", ",", "\n", "[", "tf", ".", "transpose", "(", "e_w_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "e_w_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "N_w_t", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "]", ",", "\n", "initializer", "=", "[", "h_0_f", ",", "h_0_b", ",", "c_0_f", ",", "c_0_b", ",", "t_0", "]", ",", "\n", "name", "=", "'lstm_ws_layer'", ",", "\n", ")", "\n", "\n", "h_f", "=", "states", "[", "0", "]", "\n", "h_b", "=", "states", "[", "1", "]", "\n", "h_f", "=", "tf", ".", "transpose", "(", "h_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "h_b", "=", "tf", ".", "transpose", "(", "h_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# reverse again backward state", "\n", "h_b", "=", "tf", ".", "reverse_sequence", "(", "h_b", ",", "seq_lengths", "=", "N_w", ",", "seq_axis", "=", "1", ")", "\n", "\n", "# concatenate hidden states, shape=[2 * B * T_s, T_w, 2 * D_s]", "\n", "h", "=", "tf", ".", "concat", "(", "[", "h_f", ",", "h_b", "]", ",", "axis", "=", "2", ")", "\n", "# reshape input word embeddings, shape = [2 * B, T_s, T_w, 2 * D_s]", "\n", "h", "=", "tf", ".", "reshape", "(", "h", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_cell_ws": [[486, 518], ["model_inference.AdHominem_O2D2.lstm_cell", "model_inference.AdHominem_O2D2.lstm_cell", "tensorflow.less", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.add"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell"], ["", "def", "bilstm_cell_ws", "(", "self", ",", "prev", ",", "input", ")", ":", "\n", "\n", "# input parameters", "\n", "        ", "h_prev_f", "=", "prev", "[", "0", "]", "\n", "h_prev_b", "=", "prev", "[", "1", "]", "\n", "c_prev_f", "=", "prev", "[", "2", "]", "\n", "c_prev_b", "=", "prev", "[", "3", "]", "\n", "t", "=", "prev", "[", "4", "]", "\n", "\n", "e_w_f", "=", "input", "[", "0", "]", "\n", "e_w_b", "=", "input", "[", "1", "]", "\n", "N_w", "=", "input", "[", "2", "]", "\n", "\n", "# compute next forward states", "\n", "h_next_f", ",", "c_next_f", "=", "self", ".", "lstm_cell", "(", "e_w_f", ",", "h_prev_f", ",", "c_prev_f", ",", "\n", "self", ".", "theta", "[", "'lstm_ws_forward'", "]", ",", "\n", ")", "\n", "# compute next backward states", "\n", "h_next_b", ",", "c_next_b", "=", "self", ".", "lstm_cell", "(", "e_w_b", ",", "h_prev_b", ",", "c_prev_b", ",", "\n", "self", ".", "theta", "[", "'lstm_ws_backward'", "]", ",", "\n", ")", "\n", "\n", "# t < T", "\n", "condition", "=", "tf", ".", "less", "(", "t", ",", "N_w", ")", "\n", "\n", "# copy-through states if t > T", "\n", "h_next_f", "=", "tf", ".", "where", "(", "condition", ",", "h_next_f", ",", "h_prev_f", ")", "\n", "c_next_f", "=", "tf", ".", "where", "(", "condition", ",", "c_next_f", ",", "c_prev_f", ")", "\n", "h_next_b", "=", "tf", ".", "where", "(", "condition", ",", "h_next_b", ",", "h_prev_b", ")", "\n", "c_next_b", "=", "tf", ".", "where", "(", "condition", ",", "c_next_b", ",", "c_prev_b", ")", "\n", "\n", "return", "[", "h_next_f", ",", "h_next_b", ",", "c_next_f", ",", "c_next_b", ",", "tf", ".", "add", "(", "t", ",", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_layer_sd": [[522, 558], ["tensorflow.reverse_sequence", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.constant", "tensorflow.tile", "tensorflow.scan", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reverse_sequence", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "bilstm_layer_sd", "(", "self", ",", "e_s_f", ",", "N_s", ")", ":", "\n", "\n", "        ", "D_d", "=", "self", ".", "hyper_parameters", "[", "'D_d'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# reverse input sentences", "\n", "e_s_b", "=", "tf", ".", "reverse_sequence", "(", "e_s_f", ",", "seq_lengths", "=", "N_s", ",", "seq_axis", "=", "1", ")", "\n", "\n", "h_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "h_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_f", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "c_0_b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "D_d", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "t_0", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "N_s_t", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "N_s", ",", "axis", "=", "1", ")", ",", "tf", ".", "constant", "(", "[", "1", ",", "T_s", "]", ",", "tf", ".", "int32", ")", ")", "\n", "\n", "states", "=", "tf", ".", "scan", "(", "self", ".", "bilstm_cell_sd", ",", "\n", "[", "tf", ".", "transpose", "(", "e_s_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "e_s_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "N_s_t", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "]", ",", "\n", "initializer", "=", "[", "h_0_f", ",", "h_0_b", ",", "c_0_f", ",", "c_0_b", ",", "t_0", "]", ",", "\n", "name", "=", "'lstm_sd_layer'", ",", "\n", ")", "\n", "\n", "h_f", "=", "states", "[", "0", "]", "\n", "h_b", "=", "states", "[", "1", "]", "\n", "h_f", "=", "tf", ".", "transpose", "(", "h_f", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "h_b", "=", "tf", ".", "transpose", "(", "h_b", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# reverse again backward state", "\n", "h_b", "=", "tf", ".", "reverse_sequence", "(", "h_b", ",", "seq_lengths", "=", "N_s", ",", "seq_axis", "=", "1", ")", "\n", "\n", "# concatenate hidden states, shape=[2 * B, T_s, 2 * D_d]", "\n", "h", "=", "tf", ".", "concat", "(", "[", "h_f", ",", "h_b", "]", ",", "axis", "=", "2", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.bilstm_cell_sd": [[562, 594], ["model_inference.AdHominem_O2D2.lstm_cell", "model_inference.AdHominem_O2D2.lstm_cell", "tensorflow.less", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.add"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell"], ["", "def", "bilstm_cell_sd", "(", "self", ",", "prev", ",", "input", ")", ":", "\n", "\n", "# input parameters", "\n", "        ", "h_prev_f", "=", "prev", "[", "0", "]", "\n", "h_prev_b", "=", "prev", "[", "1", "]", "\n", "c_prev_f", "=", "prev", "[", "2", "]", "\n", "c_prev_b", "=", "prev", "[", "3", "]", "\n", "t", "=", "prev", "[", "4", "]", "\n", "\n", "e_s_f", "=", "input", "[", "0", "]", "\n", "e_s_b", "=", "input", "[", "1", "]", "\n", "N_s", "=", "input", "[", "2", "]", "\n", "\n", "# compute next forward states", "\n", "h_next_f", ",", "c_next_f", "=", "self", ".", "lstm_cell", "(", "e_s_f", ",", "h_prev_f", ",", "c_prev_f", ",", "\n", "self", ".", "theta", "[", "'lstm_sd_forward'", "]", ",", "\n", ")", "\n", "# compute next backward states", "\n", "h_next_b", ",", "c_next_b", "=", "self", ".", "lstm_cell", "(", "e_s_b", ",", "h_prev_b", ",", "c_prev_b", ",", "\n", "self", ".", "theta", "[", "'lstm_sd_backward'", "]", ",", "\n", ")", "\n", "\n", "# t < T", "\n", "condition", "=", "tf", ".", "less", "(", "t", ",", "N_s", ")", "\n", "\n", "# copy-through states if t > T", "\n", "h_next_f", "=", "tf", ".", "where", "(", "condition", ",", "h_next_f", ",", "h_prev_f", ")", "\n", "c_next_f", "=", "tf", ".", "where", "(", "condition", ",", "c_next_f", ",", "c_prev_f", ")", "\n", "h_next_b", "=", "tf", ".", "where", "(", "condition", ",", "h_next_b", ",", "h_prev_b", ")", "\n", "c_next_b", "=", "tf", ".", "where", "(", "condition", ",", "c_next_b", ",", "c_prev_b", ")", "\n", "\n", "return", "[", "h_next_f", ",", "h_next_b", ",", "c_next_f", ",", "c_next_b", ",", "tf", ".", "add", "(", "t", ",", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.lstm_cell": [[598, 627], ["tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.tanh", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.tanh", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "lstm_cell", "(", "self", ",", "e_w", ",", "h_prev", ",", "c_prev", ",", "params", ")", ":", "\n", "\n", "        ", "W_i", "=", "params", "[", "'W_i'", "]", "\n", "U_i", "=", "params", "[", "'U_i'", "]", "\n", "b_i", "=", "params", "[", "'b_i'", "]", "\n", "W_f", "=", "params", "[", "'W_f'", "]", "\n", "U_f", "=", "params", "[", "'U_f'", "]", "\n", "b_f", "=", "params", "[", "'b_f'", "]", "\n", "W_o", "=", "params", "[", "'W_o'", "]", "\n", "U_o", "=", "params", "[", "'U_o'", "]", "\n", "b_o", "=", "params", "[", "'b_o'", "]", "\n", "W_c", "=", "params", "[", "'W_c'", "]", "\n", "U_c", "=", "params", "[", "'U_c'", "]", "\n", "b_c", "=", "params", "[", "'b_c'", "]", "\n", "\n", "# forget", "\n", "i_t", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_i", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_i", ")", "+", "b_i", ")", "\n", "# input", "\n", "f_t", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_f", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_f", ")", "+", "b_f", ")", "\n", "# new memory", "\n", "c_tilde", "=", "tf", ".", "tanh", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_c", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_c", ")", "+", "b_c", ")", "\n", "# final memory", "\n", "c_next", "=", "tf", ".", "multiply", "(", "i_t", ",", "c_tilde", ")", "+", "tf", ".", "multiply", "(", "f_t", ",", "c_prev", ")", "\n", "# output", "\n", "o_t", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "e_w", ",", "W_o", ")", "+", "tf", ".", "matmul", "(", "h_prev", ",", "U_o", ")", "+", "b_o", ")", "\n", "# next hidden state", "\n", "h_next", "=", "tf", ".", "multiply", "(", "o_t", ",", "tf", ".", "tanh", "(", "c_next", ")", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.att_layer_ws": [[631, 664], ["tensorflow.reshape", "tensorflow.nn.tanh", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.sequence_mask", "tensorflow.nn.softmax", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.nn.xw_plus_b", "tensorflow.stack", "tensorflow.multiply"], "methods", ["None"], ["", "def", "att_layer_ws", "(", "self", ",", "h_w", ",", "N_w", ")", ":", "\n", "\n", "        ", "D_s", "=", "self", ".", "hyper_parameters", "[", "'D_s'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# shape=[2 * B * T_s * T_w, 2 * D_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "h_w", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", "*", "T_w", ",", "2", "*", "D_s", "]", ")", "\n", "scores", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "scores", ",", "\n", "self", ".", "theta", "[", "'att_ws'", "]", "[", "'W'", "]", ",", "\n", "self", ".", "theta", "[", "'att_ws'", "]", "[", "'b'", "]", ")", ")", "\n", "\n", "# shape=[2 * B * T_s * T_w, 1]", "\n", "scores", "=", "tf", ".", "matmul", "(", "scores", ",", "self", ".", "theta", "[", "'att_ws'", "]", "[", "'v'", "]", ")", "\n", "# shape=[2 * B, T_s, T_w]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", ",", "T_w", "]", ")", "\n", "\n", "# binary mask, shape = [2 * B, T_s, T_w]", "\n", "mask", "=", "tf", ".", "sequence_mask", "(", "N_w", ",", "maxlen", "=", "T_w", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "(", "1.0", "-", "mask", ")", "*", "-", "5000.0", "\n", "\n", "# shape = [2 * B, T_s, T_w]", "\n", "scores", "=", "scores", "+", "mask", "\n", "scores", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "2", ")", "\n", "\n", "# expand to shape=[B, T_s, T_w, 1]", "\n", "alpha", "=", "tf", ".", "expand_dims", "(", "scores", ",", "axis", "=", "3", ")", "\n", "# fill up to shape=[B, T_s, T_w, D_s]", "\n", "alpha", "=", "tf", ".", "tile", "(", "alpha", ",", "tf", ".", "stack", "(", "[", "1", ",", "1", ",", "1", ",", "2", "*", "D_s", "]", ")", ")", "\n", "# combine to get sentence representations, shape=[B, T_s, 2 * D_s]", "\n", "e_s", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "alpha", ",", "h_w", ")", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "\n", "return", "e_s", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.att_layer_sd": [[668, 700], ["tensorflow.reshape", "tensorflow.nn.tanh", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.sequence_mask", "tensorflow.nn.softmax", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.nn.xw_plus_b", "tensorflow.stack", "tensorflow.multiply"], "methods", ["None"], ["", "def", "att_layer_sd", "(", "self", ",", "h_s", ",", "N_s", ")", ":", "\n", "\n", "        ", "D_d", "=", "self", ".", "hyper_parameters", "[", "'D_d'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "\n", "# shape=[2 * B * T_s, 2 * D_d]", "\n", "scores", "=", "tf", ".", "reshape", "(", "h_s", ",", "shape", "=", "[", "2", "*", "self", ".", "B", "*", "T_s", ",", "2", "*", "D_d", "]", ")", "\n", "scores", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "scores", ",", "\n", "self", ".", "theta", "[", "'att_sd'", "]", "[", "'W'", "]", ",", "\n", "self", ".", "theta", "[", "'att_sd'", "]", "[", "'b'", "]", ")", ")", "\n", "\n", "# shape=[2 * B * T_s, 1]", "\n", "scores", "=", "tf", ".", "matmul", "(", "scores", ",", "self", ".", "theta", "[", "'att_sd'", "]", "[", "'v'", "]", ")", "\n", "# shape=[2 * B, T_s]", "\n", "scores", "=", "tf", ".", "reshape", "(", "scores", ",", "shape", "=", "[", "2", "*", "self", ".", "B", ",", "T_s", "]", ")", "\n", "\n", "# binary mask, shape = [2 * B, T_s]", "\n", "mask", "=", "tf", ".", "sequence_mask", "(", "N_s", ",", "maxlen", "=", "T_s", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "(", "1.0", "-", "mask", ")", "*", "-", "5000.0", "\n", "\n", "# shape = [2 * B, T_s]", "\n", "scores", "=", "scores", "+", "mask", "\n", "scores", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "# expand to shape=[B, T_s, 1]", "\n", "alpha", "=", "tf", ".", "expand_dims", "(", "scores", ",", "axis", "=", "2", ")", "\n", "# fill up to shape=[B, T_s, 2 * D_d]", "\n", "alpha", "=", "tf", ".", "tile", "(", "alpha", ",", "tf", ".", "stack", "(", "[", "1", ",", "1", ",", "2", "*", "D_d", "]", ")", ")", "\n", "# combine to get doc representations, shape=[B, 2 * D_d]", "\n", "e_d", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "alpha", ",", "h_s", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "\n", "return", "e_d", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_parameters": [[701, 741], ["tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_cnn", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_lstm", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_lstm", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_lstm", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_lstm", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_att", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_att", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_mlp", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_mlp", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_bfs", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_ual", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_theta_loss", "tensorflow.variable_scope", "model_inference.AdHominem_O2D2.initialize_o2d2"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_cnn", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_att", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_att", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_mlp", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_mlp", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_bfs", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_ual", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_theta_loss", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_o2d2"], ["", "def", "initialize_parameters", "(", "self", ",", "theta_init", ")", ":", "\n", "\n", "        ", "theta", "=", "{", "}", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'theta_cnn'", ")", ":", "\n", "            ", "theta", "[", "'cnn'", "]", "=", "self", ".", "initialize_cnn", "(", "theta_init", "[", "'cnn'", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_ws_forward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_ws_forward'", "]", "=", "self", ".", "initialize_lstm", "(", "theta_init", "[", "'lstm_ws_forward'", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_ws_backward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_ws_backward'", "]", "=", "self", ".", "initialize_lstm", "(", "theta_init", "[", "'lstm_ws_backward'", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_sd_forward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_sd_forward'", "]", "=", "self", ".", "initialize_lstm", "(", "theta_init", "[", "'lstm_sd_forward'", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_lstm_sd_backward'", ")", ":", "\n", "            ", "theta", "[", "'lstm_sd_backward'", "]", "=", "self", ".", "initialize_lstm", "(", "theta_init", "[", "'lstm_sd_backward'", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_att_ws'", ")", ":", "\n", "            ", "theta", "[", "'att_ws'", "]", "=", "self", ".", "initialize_att", "(", "theta_init", "[", "'att_ws'", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_att_sd'", ")", ":", "\n", "            ", "theta", "[", "'att_sd'", "]", "=", "self", ".", "initialize_att", "(", "theta_init", "[", "'att_sd'", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_metric'", ")", ":", "\n", "            ", "theta", "[", "'metric'", "]", "=", "self", ".", "initialize_mlp", "(", "theta_init", "[", "'metric'", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_bfs_1'", ")", ":", "\n", "            ", "theta", "[", "'bfs_1'", "]", "=", "self", ".", "initialize_mlp", "(", "theta_init", "[", "'bfs_1'", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_bfs_2'", ")", ":", "\n", "            ", "theta", "[", "'bfs_2'", "]", "=", "self", ".", "initialize_bfs", "(", "theta_init", "[", "'bfs_2'", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_ual'", ")", ":", "\n", "            ", "theta", "[", "'ual'", "]", "=", "self", ".", "initialize_ual", "(", "theta_init", "[", "'ual'", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_dml_loss'", ")", ":", "\n", "            ", "theta", "[", "'loss_dml'", "]", "=", "self", ".", "initialize_theta_loss", "(", "theta_init", "[", "'loss_dml'", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'theta_o2d2'", ")", ":", "\n", "            ", "theta", "[", "'o2d2'", "]", "=", "self", ".", "initialize_o2d2", "(", "theta_init", "[", "'o2d2'", "]", ")", "\n", "\n", "", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_o2d2": [[742, 781], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_o2d2", "(", "self", ",", "theta_init", ")", ":", "\n", "        ", "theta", "=", "{", "'W1'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W1'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W1'", ",", "\n", ")", ",", "\n", "'b1'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b1'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b1'", ",", "\n", ")", ",", "\n", "\n", "'W2'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W2'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W2'", ",", "\n", ")", ",", "\n", "\n", "'b2'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b2'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b2'", ",", "\n", ")", ",", "\n", "\n", "'W3'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W3'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W3'", ",", "\n", ")", ",", "\n", "\n", "'b3'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b3'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b3'", ",", "\n", ")", ",", "\n", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_theta_loss": [[782, 796], ["tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_theta_loss", "(", "self", ",", "theta_init", ")", ":", "\n", "        ", "theta", "=", "{", "'alpha'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'alpha'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'loss_alpha'", ",", "\n", ")", ",", "\n", "'beta'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'beta'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'loss_beta'", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_ual": [[797, 821], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_ual", "(", "self", ",", "theta_init", ")", ":", "\n", "        ", "theta", "=", "{", "'W1'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W1'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W1'", ",", "\n", ")", ",", "\n", "'b1'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b1'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b1'", ",", "\n", ")", ",", "\n", "'W2'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W2'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W2'", ",", "\n", ")", ",", "\n", "'b2'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b2'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b2'", ",", "\n", ")", "\n", "}", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_bfs": [[822, 840], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_bfs", "(", "self", ",", "theta_init", ")", ":", "\n", "        ", "theta", "=", "{", "'W'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W'", ",", "\n", ")", ",", "\n", "'B'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'B'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'B'", ",", "\n", ")", ",", "\n", "'mu'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'mu'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'mu'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_mlp": [[841, 854], ["tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_mlp", "(", "self", ",", "theta_init", ")", ":", "\n", "        ", "theta", "=", "{", "'W'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W'", ",", "\n", ")", ",", "\n", "'b'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_cnn": [[855, 868], ["tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_cnn", "(", "self", ",", "theta_init", ")", ":", "\n", "        ", "theta", "=", "{", "'W'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W'", ",", "\n", ")", ",", "\n", "'b'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_att": [[869, 887], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_att", "(", "self", ",", "theta_init", ")", ":", "\n", "        ", "theta", "=", "{", "'W'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W'", ",", "\n", ")", ",", "\n", "'v'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'v'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'v'", ",", "\n", ")", ",", "\n", "'b'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.initialize_lstm": [[888, 951], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["", "def", "initialize_lstm", "(", "self", ",", "theta_init", ")", ":", "\n", "        ", "theta", "=", "{", "'W_i'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W_i'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W_i'", ",", "\n", ")", ",", "\n", "'U_i'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'U_i'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'U_i'", ",", "\n", ")", ",", "\n", "'b_i'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b_i'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b_i'", ",", "\n", ")", ",", "\n", "'W_f'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W_f'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W_f'", ",", "\n", ")", ",", "\n", "'U_f'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'U_f'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'U_f'", ",", "\n", ")", ",", "\n", "'b_f'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b_f'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b_f'", ",", "\n", ")", ",", "\n", "'W_c'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W_c'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W_c'", ",", "\n", ")", ",", "\n", "'U_c'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'U_c'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'U_c'", ",", "\n", ")", ",", "\n", "'b_c'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b_c'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b_c'", ",", "\n", ")", ",", "\n", "'W_o'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'W_o'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'W_o'", ",", "\n", ")", ",", "\n", "'U_o'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'U_o'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'U_o'", ",", "\n", ")", ",", "\n", "'b_o'", ":", "tf", ".", "Variable", "(", "theta_init", "[", "'b_o'", "]", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'b_o'", ",", "\n", ")", ",", "\n", "}", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels": [[955, 961], ["numpy.ones"], "methods", ["None"], ["", "def", "compute_labels", "(", "self", ",", "pred", ",", "thr", "=", "0.5", ")", ":", "\n", "# numpy array for estimated labels", "\n", "        ", "labels_hat", "=", "np", ".", "ones", "(", "pred", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# dissimilar pairs --> 0, similar pairs --> 1", "\n", "labels_hat", "[", "pred", "<=", "thr", "]", "=", "0", "\n", "return", "labels_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_confidence": [[962, 967], ["model_inference.AdHominem_O2D2.compute_labels", "pred.copy"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.compute_labels"], ["", "def", "compute_confidence", "(", "self", ",", "pred", ")", ":", "\n", "        ", "labels_hat", "=", "self", ".", "compute_labels", "(", "pred", ")", "\n", "confidences", "=", "pred", ".", "copy", "(", ")", "\n", "confidences", "[", "labels_hat", "==", "0", "]", "=", "1.0", "-", "confidences", "[", "labels_hat", "==", "0", "]", "\n", "return", "confidences", ",", "labels_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.next_batch": [[971, 976], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "next_batch", "(", "t_s", ",", "t_e", ",", "docs_L", ",", "docs_R", ")", ":", "\n", "        ", "docs_L", "=", "docs_L", "[", "t_s", ":", "t_e", "]", "\n", "docs_R", "=", "docs_R", "[", "t_s", ":", "t_e", "]", "\n", "return", "docs_L", ",", "docs_R", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.sliding_window": [[980, 999], ["doc.split", "len", "doc_new.append", "sent_new.strip"], "methods", ["None"], ["", "def", "sliding_window", "(", "self", ",", "doc", ")", ":", "\n", "\n", "        ", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "hop_length", "=", "self", ".", "hyper_parameters", "[", "'hop_length'", "]", "\n", "\n", "tokens", "=", "doc", ".", "split", "(", ")", "\n", "doc_new", "=", "[", "]", "\n", "n", "=", "0", "\n", "while", "len", "(", "tokens", "[", "n", ":", "n", "+", "T_w", "]", ")", ">", "0", ":", "\n", "# split sentence into tokens", "\n", "            ", "sent_new", "=", "''", "\n", "for", "token", "in", "tokens", "[", "n", ":", "n", "+", "T_w", "]", ":", "\n", "                ", "sent_new", "+=", "token", "+", "' '", "\n", "# add to new doc", "\n", "", "doc_new", ".", "append", "(", "sent_new", ".", "strip", "(", ")", ")", "\n", "# update stepsize", "\n", "n", "+=", "hop_length", "\n", "\n", "", "return", "doc_new", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat": [[1003, 1046], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "model_inference.AdHominem_O2D2.sliding_window", "len", "enumerate", "sentence.split", "len", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.plot_att_html.sliding_window"], ["", "def", "doc2mat", "(", "self", ",", "docs", ")", ":", "\n", "\n", "        ", "T_c", "=", "self", ".", "hyper_parameters", "[", "'T_c'", "]", "\n", "T_w", "=", "self", ".", "hyper_parameters", "[", "'T_w'", "]", "\n", "T_s", "=", "self", ".", "hyper_parameters", "[", "'T_s'", "]", "\n", "V_c", "=", "self", ".", "hyper_parameters", "[", "'V_c'", "]", "\n", "V_w", "=", "self", ".", "hyper_parameters", "[", "'V_w'", "]", "\n", "\n", "# batch size", "\n", "B", "=", "len", "(", "docs", ")", "\n", "N_w", "=", "np", ".", "zeros", "(", "(", "B", ",", "T_s", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "N_s", "=", "np", ".", "zeros", "(", "(", "B", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# word-based tensor, shape = [B, T_s, T_w]", "\n", "x_w", "=", "np", ".", "zeros", "(", "(", "B", ",", "T_s", ",", "T_w", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# character-based tensor", "\n", "x_c", "=", "np", ".", "zeros", "(", "(", "B", ",", "T_s", ",", "T_w", ",", "T_c", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# current document", "\n", "for", "i", ",", "doc", "in", "enumerate", "(", "docs", ")", ":", "\n", "\n", "# apply sliding window to construct sentence like units", "\n", "            ", "doc", "=", "self", ".", "sliding_window", "(", "doc", ")", "\n", "\n", "N_s", "[", "i", "]", "=", "len", "(", "doc", "[", ":", "T_s", "]", ")", "\n", "# current sentence", "\n", "for", "j", ",", "sentence", "in", "enumerate", "(", "doc", "[", ":", "T_s", "]", ")", ":", "\n", "                ", "tokens", "=", "sentence", ".", "split", "(", ")", "\n", "N_w", "[", "i", ",", "j", "]", "=", "len", "(", "tokens", ")", "\n", "# current tokens", "\n", "for", "k", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                    ", "if", "token", "in", "V_w", ":", "\n", "                        ", "x_w", "[", "i", ",", "j", ",", "k", "]", "=", "V_w", "[", "token", "]", "\n", "", "else", ":", "\n", "                        ", "x_w", "[", "i", ",", "j", ",", "k", "]", "=", "V_w", "[", "'<UNK>'", "]", "\n", "# current character", "\n", "", "for", "l", ",", "chr", "in", "enumerate", "(", "token", "[", ":", "T_c", "]", ")", ":", "\n", "                        ", "if", "chr", "in", "V_c", ":", "\n", "                            ", "x_c", "[", "i", ",", "j", ",", "k", ",", "l", "]", "=", "V_c", "[", "chr", "]", "\n", "", "else", ":", "\n", "                            ", "x_c", "[", "i", ",", "j", ",", "k", ",", "l", "]", "=", "V_c", "[", "'<UNK>'", "]", "\n", "\n", "", "", "", "", "", "return", "x_w", ",", "N_w", ",", "N_s", ",", "x_c", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.evaluate": [[1050, 1141], ["math.ceil", "tqdm.tqdm.tqdm", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape.copy", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "range", "model_inference.AdHominem_O2D2.next_batch", "len", "numpy.where", "len", "len", "model_inference.AdHominem_O2D2.doc2mat", "model_inference.AdHominem_O2D2.doc2mat", "model_inference.AdHominem_O2D2.sess.run", "numpy.array().reshape.extend", "numpy.array().reshape.extend", "numpy.array().reshape.extend", "numpy.array.extend", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.array", "numpy.array", "numpy.array", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.next_batch", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat", "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.model_inference.AdHominem_O2D2.doc2mat"], ["", "def", "evaluate", "(", "self", ",", "docs_L", ",", "docs_R", ",", "batch_size", ")", ":", "\n", "\n", "        ", "num_batches", "=", "ceil", "(", "len", "(", "docs_L", ")", "/", "batch_size", ")", "\n", "\n", "pred_dml", ",", "pred_bfs", ",", "pred_ual", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "labels_o2d2", "=", "[", "]", "\n", "conf_matrix", "=", "[", "]", "\n", "lev_L", ",", "lev_R", "=", "[", "]", ",", "[", "]", "\n", "att_w_L", ",", "att_w_R", ",", "att_s_L", ",", "att_s_R", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "num_batches", ")", ",", "desc", "=", "\"inference...\"", ")", ":", "\n", "\n", "# get next batch", "\n", "            ", "docs_L_i", ",", "docs_R_i", "=", "self", ".", "next_batch", "(", "i", "*", "batch_size", ",", "\n", "(", "i", "+", "1", ")", "*", "batch_size", ",", "\n", "docs_L", ",", "\n", "docs_R", ",", "\n", ")", "\n", "\n", "B", "=", "len", "(", "docs_R_i", ")", "\n", "\n", "if", "B", ">", "0", ":", "\n", "\n", "# word / character embeddings", "\n", "                ", "x_w_L", ",", "N_w_L", ",", "N_s_L", ",", "x_c_L", "=", "self", ".", "doc2mat", "(", "docs_L_i", ")", "\n", "x_w_R", ",", "N_w_R", ",", "N_s_R", ",", "x_c_R", "=", "self", ".", "doc2mat", "(", "docs_R_i", ")", "\n", "\n", "# compute pred", "\n", "curr_pred_dml", ",", "curr_pred_bfs", ",", "curr_pred_ual", ",", "curr_labels_o2d2", ",", "curr_conf_matrix", ",", "curr_lev_L", ",", "curr_lev_R", ",", "curr_att_w_L", ",", "curr_att_w_R", ",", "curr_att_s_L", ",", "curr_att_s_R", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_dml", ",", "self", ".", "pred_bfs", ",", "self", ".", "pred_ual", ",", "self", ".", "labels_o2d2", ",", "\n", "self", ".", "conf_matrix", ",", "self", ".", "lev_L", ",", "self", ".", "lev_R", ",", "\n", "self", ".", "att_w_L", ",", "self", ".", "att_w_R", ",", "self", ".", "att_s_L", ",", "self", ".", "att_s_R", ",", "\n", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "placeholders", "[", "'x_w_L'", "]", ":", "x_w_L", ",", "\n", "self", ".", "placeholders", "[", "'x_w_R'", "]", ":", "x_w_R", ",", "\n", "self", ".", "placeholders", "[", "'x_c_L'", "]", ":", "x_c_L", ",", "\n", "self", ".", "placeholders", "[", "'x_c_R'", "]", ":", "x_c_R", ",", "\n", "self", ".", "placeholders", "[", "'N_w_L'", "]", ":", "N_w_L", ",", "\n", "self", ".", "placeholders", "[", "'N_w_R'", "]", ":", "N_w_R", ",", "\n", "self", ".", "placeholders", "[", "'N_s_L'", "]", ":", "N_s_L", ",", "\n", "self", ".", "placeholders", "[", "'N_s_R'", "]", ":", "N_s_R", ",", "\n", "}", ")", "\n", "\n", "pred_dml", ".", "extend", "(", "curr_pred_dml", ")", "\n", "pred_bfs", ".", "extend", "(", "curr_pred_bfs", ")", "\n", "pred_ual", ".", "extend", "(", "curr_pred_ual", "[", ":", ",", "1", "]", ")", "\n", "labels_o2d2", ".", "extend", "(", "curr_labels_o2d2", ")", "\n", "\n", "conf_matrix", ".", "append", "(", "curr_conf_matrix", ")", "\n", "\n", "lev_L", ".", "append", "(", "curr_lev_L", ")", "\n", "lev_R", ".", "append", "(", "curr_lev_R", ")", "\n", "\n", "# attentions", "\n", "att_w_L", ".", "append", "(", "curr_att_w_L", ")", "\n", "att_w_R", ".", "append", "(", "curr_att_w_R", ")", "\n", "att_s_L", ".", "append", "(", "curr_att_s_L", ")", "\n", "att_s_R", ".", "append", "(", "curr_att_s_R", ")", "\n", "\n", "# predictions", "\n", "", "", "pred_dml", "=", "np", ".", "array", "(", "pred_dml", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pred_bfs", "=", "np", ".", "array", "(", "pred_bfs", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pred_ual", "=", "np", ".", "array", "(", "pred_ual", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# define non-responses", "\n", "pred_o2d2", "=", "pred_ual", ".", "copy", "(", ")", "\n", "labels_o2d2", "=", "np", ".", "array", "(", "labels_o2d2", ")", "\n", "idx", "=", "np", ".", "where", "(", "labels_o2d2", "==", "1", ")", "[", "0", "]", "\n", "pred_o2d2", "[", "idx", "]", "=", "0.5", "\n", "\n", "# number of missclassification in %", "\n", "n_miss", "=", "100", "*", "np", ".", "sum", "(", "labels_o2d2", "==", "1", ")", "/", "len", "(", "labels_o2d2", ")", "\n", "\n", "# attention scores", "\n", "att_w_L", "=", "np", ".", "concatenate", "(", "att_w_L", ",", "axis", "=", "0", ")", "\n", "att_w_R", "=", "np", ".", "concatenate", "(", "att_w_R", ",", "axis", "=", "0", ")", "\n", "att_s_L", "=", "np", ".", "concatenate", "(", "att_s_L", ",", "axis", "=", "0", ")", "\n", "att_s_R", "=", "np", ".", "concatenate", "(", "att_s_R", ",", "axis", "=", "0", ")", "\n", "\n", "# linguistic embedding vectors", "\n", "lev_L", "=", "np", ".", "concatenate", "(", "lev_L", ",", "axis", "=", "0", ")", "\n", "lev_R", "=", "np", ".", "concatenate", "(", "lev_R", ",", "axis", "=", "0", ")", "\n", "\n", "# confusion matrix", "\n", "conf_matrix", "=", "np", ".", "concatenate", "(", "conf_matrix", ",", "axis", "=", "0", ")", "\n", "\n", "return", "pred_dml", ",", "pred_bfs", ",", "pred_ual", ",", "pred_o2d2", ",", "n_miss", ",", "conf_matrix", ",", "lev_L", ",", "lev_R", ",", "att_w_L", ",", "att_w_R", ",", "att_s_L", ",", "att_s_R", "", "", "", ""]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.plot_att_html.sliding_window": [[7, 22], ["doc.split", "len", "doc_new.append", "sent_new.strip"], "function", ["None"], ["def", "sliding_window", "(", "doc", ",", "T_w", ",", "hop_length", ")", ":", "\n", "    ", "tokens", "=", "doc", ".", "split", "(", ")", "\n", "doc_new", "=", "[", "]", "\n", "n", "=", "0", "\n", "while", "len", "(", "tokens", "[", "n", ":", "n", "+", "T_w", "]", ")", ">", "0", ":", "\n", "# split sentence into tokens", "\n", "        ", "sent_new", "=", "''", "\n", "for", "token", "in", "tokens", "[", "n", ":", "n", "+", "T_w", "]", ":", "\n", "            ", "sent_new", "+=", "token", "+", "' '", "\n", "# add to new doc", "\n", "", "doc_new", ".", "append", "(", "sent_new", ".", "strip", "(", ")", ")", "\n", "# update stepsize", "\n", "n", "+=", "hop_length", "\n", "\n", "", "return", "doc_new", "\n", "\n"]], "home.repos.pwc.inspect_result.boenninghoff_pan_2020_2021_authorship_verification.inference.plot_att_html.visualize": [[27, 140], ["range", "numpy.array().reshape", "numpy.max", "numpy.min", "numpy.array().reshape", "numpy.max", "numpy.min", "plot_att_html.visualize.func_weighting"], "function", ["None"], ["", "def", "visualize", "(", "doc_L", ",", "alpha_s_L", ",", "alpha_w_L", ",", "\n", "doc_R", ",", "alpha_s_R", ",", "alpha_w_R", ",", "\n", "T_s", ",", "T_w", ",", "n", ",", "d", ",", "l", ",", "dir_html", ",", "\n", "weighting", "=", "True", ",", "rescaling", "=", "True", ",", "\n", ")", ":", "\n", "\n", "    ", "def", "func_cleaning", "(", "sent", ")", ":", "\n", "        ", "\"\"\"\n            remove \"<\" and \">\": <UNK>  --> UNK\n        \"\"\"", "\n", "sent", "=", "' '", ".", "join", "(", "re", ".", "sub", "(", "'<'", ",", "''", ",", "sent", ")", ".", "split", "(", ")", ")", "\n", "sent", "=", "' '", ".", "join", "(", "re", ".", "sub", "(", "'>'", ",", "''", ",", "sent", ")", ".", "split", "(", ")", ")", "\n", "return", "sent", "\n", "\n", "", "def", "func_weighting", "(", "alpha_s", ",", "alpha_w", ")", ":", "\n", "        ", "\"\"\"\n            alpha_w[t, w] = alpha_w[t, w] * alpha_s[t]\n        \"\"\"", "\n", "T_s", ",", "T_w", "=", "alpha_w", ".", "shape", "\n", "\n", "for", "i", "in", "range", "(", "T_s", ")", ":", "\n", "# weighting: alpha_s[i] * alpha_w[i, j] for all j", "\n", "            ", "alpha_w", "[", "i", ",", ":", "]", "=", "alpha_s", "[", "i", "]", "*", "alpha_w", "[", "i", ",", ":", "]", "\n", "\n", "", "return", "alpha_w", "\n", "\n", "", "def", "func_rescaling", "(", "alpha_s", ",", "alpha_w", ")", ":", "\n", "        ", "\"\"\"\n            min-max normalization to obtain values between 0 and 1\n\n        \"\"\"", "\n", "# rescale alpha_s between [0, 1]", "\n", "alpha_s", "=", "np", ".", "array", "(", "alpha_s", ")", ".", "reshape", "(", "-", "1", ")", "\n", "max_alpha", "=", "np", ".", "max", "(", "alpha_s", ")", "\n", "min_alpha", "=", "np", ".", "min", "(", "alpha_s", ")", "\n", "alpha_s", "=", "(", "alpha_s", "-", "min_alpha", ")", "/", "(", "max_alpha", "-", "min_alpha", ")", "\n", "\n", "# rescale alpha_w between [0, 1]", "\n", "alpha_w", "=", "np", ".", "array", "(", "alpha_w", ")", ".", "reshape", "(", "-", "1", ")", "\n", "max_alpha", "=", "np", ".", "max", "(", "alpha_w", ")", "\n", "min_alpha", "=", "np", ".", "min", "(", "alpha_w", ")", "\n", "alpha_w", "=", "(", "alpha_w", "-", "min_alpha", ")", "/", "(", "max_alpha", "-", "min_alpha", ")", "\n", "\n", "return", "alpha_s", ".", "reshape", "(", "(", "T_s", ",", "1", ")", ")", ",", "alpha_w", ".", "reshape", "(", "(", "T_s", ",", "T_w", ")", ")", "\n", "\n", "#################################################", "\n", "# weighting: alpha_s[i] * alpha_w[i, j] for all j", "\n", "#################################################", "\n", "", "if", "weighting", ":", "\n", "        ", "alpha_w_L", "=", "func_weighting", "(", "alpha_s_L", ",", "alpha_w_L", ")", "\n", "alpha_w_R", "=", "func_weighting", "(", "alpha_s_R", ",", "alpha_w_R", ")", "\n", "\n", "################################################", "\n", "# rescaling: (alpha_w[i, j] - min) / (max - min)", "\n", "################################################", "\n", "", "if", "rescaling", ":", "\n", "        ", "alpha_s_L", ",", "alpha_w_L", "=", "func_rescaling", "(", "alpha_s_L", ",", "alpha_w_L", ")", "\n", "alpha_s_R", ",", "alpha_w_R", "=", "func_rescaling", "(", "alpha_s_R", ",", "alpha_w_R", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir_html", ",", "str", "(", "n", ")", "+", "\".html\"", ")", ",", "\"w\"", ")", "as", "html_file", ":", "\n", "\n", "        ", "whitespace_token", "=", "\"  \"", "\n", "\n", "#############", "\n", "# first lines", "\n", "#############", "\n", "html_file", ".", "write", "(", "\"<!DOCTYPE html>\"", "+", "\"\\n\"", "+", "\"<html>\"", "+", "\"\\n\"", "+", "\"<body>\"", ")", "\n", "html_file", ".", "write", "(", "\"<h1 style=\\\"font-size:12px\\\">\"", ")", "\n", "html_file", ".", "write", "(", "'<b> prediction = %.2f, label = %s </b> <br> <br>'", "%", "(", "d", ",", "l", ")", ")", "\n", "html_file", ".", "write", "(", "\"</h1>\"", ")", "\n", "\n", "################", "\n", "#  first document", "\n", "################", "\n", "html_file", ".", "write", "(", "\"<p style=\\\"font-size:12px\\\">\"", "+", "\"<b> document 1 </b> <br> <br>\"", ")", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc_L", "[", ":", "T_s", "]", ")", ":", "\n", "# <UNK> --> UNK", "\n", "            ", "sent", "=", "func_cleaning", "(", "sentence", ")", "\n", "# display sentence-based attentions", "\n", "html_file", ".", "write", "(", "' <font style=\"background: rgba(0, 0, 255, %f)\">&nbsp&nbsp&nbsp&nbsp&nbsp</font>'", "%", "(", "alpha_s_L", "[", "i", ",", "0", "]", ")", ")", "\n", "tokens", "=", "sent", ".", "split", "(", ")", "[", ":", "T_w", "]", "\n", "# display word-based attentions", "\n", "html_file", ".", "write", "(", "'<font style=\"background: rgba(0, 0, 0, %f)\">%s</font>'", "%", "(", "0.0", ",", "whitespace_token", ")", ")", "\n", "for", "j", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                ", "html_file", ".", "write", "(", "'<font style=\"background: rgba(255, 0, 0, %f)\">%s</font>'", "%", "(", "alpha_w_L", "[", "i", ",", "j", "]", ",", "token", ")", ")", "\n", "html_file", ".", "write", "(", "'<font style=\"background: rgba(0, 0, 0, %f)\">%s</font>'", "%", "(", "0.0", ",", "whitespace_token", ")", ")", "\n", "", "html_file", ".", "write", "(", "'<br>'", ")", "\n", "\n", "", "html_file", ".", "write", "(", "\"</p>\"", ")", "\n", "html_file", ".", "write", "(", "'<br>'", ")", "\n", "\n", "##################", "\n", "#  second document", "\n", "##################", "\n", "html_file", ".", "write", "(", "\"<p style=\\\"font-size:12px\\\">\"", "+", "\"<b> document 2 </b> <br> <br>\"", ")", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc_R", "[", ":", "T_s", "]", ")", ":", "\n", "# <UNK> --> UNK", "\n", "            ", "sent", "=", "func_cleaning", "(", "sentence", ")", "\n", "# display sentence-based attentions", "\n", "html_file", ".", "write", "(", "'<font style=\"background: rgba(0, 0, 255, %f)\">&nbsp&nbsp&nbsp&nbsp&nbsp</font>'", "%", "(", "alpha_s_R", "[", "i", ",", "0", "]", ")", ")", "\n", "tokens", "=", "sent", ".", "split", "(", ")", "[", ":", "T_w", "]", "\n", "# display word-based attentions", "\n", "html_file", ".", "write", "(", "'<font style=\"background: rgba(0, 0, 0, %f)\">%s</font>'", "%", "(", "0.0", ",", "whitespace_token", ")", ")", "\n", "for", "j", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                ", "html_file", ".", "write", "(", "'<font style=\"background: rgba(255, 0, 0, %f)\">%s</font>'", "%", "(", "alpha_w_R", "[", "i", ",", "j", "]", ",", "token", ")", ")", "\n", "html_file", ".", "write", "(", "'<font style=\"background: rgba(0, 0, 0, %f)\">%s</font>'", "%", "(", "0.0", ",", "whitespace_token", ")", ")", "\n", "", "html_file", ".", "write", "(", "'<br>'", ")", "\n", "", "html_file", ".", "write", "(", "\"</p>\"", ")", "\n", "\n", "#################", "\n", "# end of document", "\n", "#################", "\n", "html_file", ".", "write", "(", "\"</body>\"", "+", "\"\\n\"", "+", "\"</html>\"", ")", "\n", "\n"]]}