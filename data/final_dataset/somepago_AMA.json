{"home.repos.pwc.inspect_result.somepago_AMA.None.interpolation.calc_gradient_penalty": [[18, 38], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "alpha.to.to", "torch.tensor.to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netD2", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.grad", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "gradients.norm", "netD2.size"], "function", ["None"], ["def", "calc_gradient_penalty", "(", "netD2", ",", "real_data", ",", "fake_data", ",", "Lambda", "=", "10", ")", ":", "\n", "    ", "device", "=", "real_data", ".", "device", "\n", "b_size", "=", "real_data", ".", "shape", "[", "0", "]", "\n", "alpha", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "(", "torch", ".", "rand", "(", "b_size", ",", "1", ")", ")", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "# alpha = torch.rand(b_size, 1)", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "\n", "#this finds stuff on the line between real and fake ", "\n", "interpolates", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "# interpolates = real_data", "\n", "interpolates", "=", "interpolates", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "torch", ".", "tensor", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "#     interpolates = interpolates.clone().detach().requires_grad_(True)", "\n", "real_inter", "=", "torch", ".", "cat", "(", "(", "real_data", ",", "interpolates", ")", ",", "dim", "=", "1", ")", "\n", "#Runs the discriminator on the resulting interpolated points", "\n", "disc_interpolates", "=", "netD2", "(", "real_inter", ")", "\n", "\n", "#Calculates the gradient", "\n", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "real_inter", ",", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "Lambda", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.interpolation.recon_discriminator_loss": [[39, 71], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "netG().detach", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "netE().detach", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "netG().detach", "interpolation.wass_loss", "x1.size", "x1.size", "netG().detach", "interpolation.calc_gradient_penalty", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "netG", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "netE", "netG", "interpolation.wass_loss", "netE", "interpolation.wass_loss", "interpolation.wass_loss", "netG", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "netE", "x1.size", "x1.size"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.interpolation.wass_loss", "home.repos.pwc.inspect_result.somepago_AMA.None.loss.calc_gradient_penalty", "home.repos.pwc.inspect_result.somepago_AMA.None.interpolation.wass_loss", "home.repos.pwc.inspect_result.somepago_AMA.None.interpolation.wass_loss", "home.repos.pwc.inspect_result.somepago_AMA.None.interpolation.wass_loss"], ["", "def", "recon_discriminator_loss", "(", "images", ",", "labels", ",", "netD2", ",", "netE", ",", "netG", ",", "losstype", "=", "'wasserstein'", ",", "anom_lambda", "=", "1", ",", "use_penalty", "=", "True", ",", "gradp_lambda", "=", "10", ",", "ip_lambda", "=", "0.5", ")", ":", "\n", "    ", "device", "=", "labels", ".", "device", "\n", "real_idx", "=", "(", "(", "labels", ">", "0", ")", ".", "nonzero", "(", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "[", "c", "if", "c", "==", "1", "else", "anom_lambda", "*", "c", "for", "c", "in", "labels", "]", ")", ".", "to", "(", "device", ")", "\n", "rec_real", "=", "netG", "(", "netE", "(", "images", ")", ")", ".", "detach", "(", ")", "\n", "\n", "x1", "=", "images", "[", "real_idx", "]", "\n", "real_labels", "=", "labels", "[", "real_idx", "]", "\n", "alpha1", "=", "torch", ".", "FloatTensor", "(", "x1", ".", "size", "(", "0", ")", ",", "1", ")", ".", "uniform_", "(", "0", ",", "0.5", ")", ".", "to", "(", "device", ")", "\n", "alpha2", "=", "torch", ".", "FloatTensor", "(", "x1", ".", "size", "(", "0", ")", ",", "1", ")", ".", "uniform_", "(", "0", ",", "0.5", ")", ".", "to", "(", "device", ")", "\n", "e1", "=", "netE", "(", "x1", ")", ".", "detach", "(", ")", "\n", "idx1", "=", "torch", ".", "randperm", "(", "x1", ".", "size", "(", "0", ")", ")", "\n", "idx2", "=", "torch", ".", "randperm", "(", "x1", ".", "size", "(", "0", ")", ")", "\n", "x2", "=", "x1", "[", "idx1", "]", "\n", "e2", "=", "e1", "[", "idx1", "]", "\n", "x3", "=", "x1", "[", "idx2", "]", "\n", "e3", "=", "e1", "[", "idx2", "]", "\n", "interpolates", "=", "alpha1", "*", "e1", "+", "alpha2", "*", "e2", "+", "(", "1", "-", "alpha1", "-", "alpha2", ")", "*", "e3", "\n", "ri", "=", "netG", "(", "interpolates", ")", ".", "detach", "(", ")", "\n", "\n", "interpolation_loss", "=", "(", "wass_loss", "(", "x1", ",", "ri", ",", "real_labels", ",", "netG", ",", "netE", ",", "netD2", ")", "+", "wass_loss", "(", "x2", ",", "ri", ",", "real_labels", ",", "netG", ",", "netE", ",", "netD2", ")", "+", "wass_loss", "(", "x3", ",", "ri", ",", "real_labels", ",", "netG", ",", "netE", ",", "netD2", ")", ")", "/", "3", "\n", "\n", "disc_loss", "=", "wass_loss", "(", "images", ",", "rec_real", ",", "labels", ",", "netG", ",", "netE", ",", "netD2", ")", "\n", "#     z = torch.zeros([images.shape[0], 128], dtype=torch.float32, device=device )", "\n", "#     awayloss = wass_loss(images,netG(z).detach(),labels, netG, netE,netD2)", "\n", "\n", "if", "(", "use_penalty", ")", ":", "\n", "        ", "fake", "=", "netG", "(", "netE", "(", "images", ")", ")", ".", "detach", "(", ")", "\n", "lossD2", "=", "calc_gradient_penalty", "(", "netD2", ",", "images", ",", "fake", ",", "Lambda", "=", "gradp_lambda", ")", "\n", "disc_loss", "+=", "lossD2", "\n", "\n", "", "return", "disc_loss", "+", "ip_lambda", "*", "(", "interpolation_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.interpolation.recon_loss_joint": [[72, 105], ["netG", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "netE().detach", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "netG().detach", "netE", "x1.size", "x1.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "netE", "netG", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x1.size", "x1.size", "netD2().view", "real_labels.float", "netD2().view", "torch.tensor().to.float", "torch.ReLU", "netD2().view", "real_labels.float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor().to.float", "netD2().view", "real_labels.float", "netD2", "netD2", "torch.tensor().to.float", "netD2().view", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "netD2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netD2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netD2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "recon_loss_joint", "(", "images", ",", "labels", ",", "netG", ",", "netE", ",", "netD2", ",", "loss_type", "=", "'wasserstein'", ",", "anom_lambda", "=", "1", ",", "ip_lambda", "=", "0.5", ")", ":", "\n", "    ", "rec_real", "=", "netG", "(", "netE", "(", "images", ")", ")", "\n", "real_rec", "=", "torch", ".", "cat", "(", "(", "images", ",", "rec_real", ")", ",", "dim", "=", "1", ")", "\n", "device", "=", "labels", ".", "device", "\n", "real_idx", "=", "(", "(", "labels", ">", "0", ")", ".", "nonzero", "(", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "[", "c", "if", "c", "==", "1", "else", "anom_lambda", "*", "c", "for", "c", "in", "labels", "]", ")", ".", "to", "(", "device", ")", "\n", "x1", "=", "images", "[", "real_idx", "]", "\n", "real_labels", "=", "labels", "[", "real_idx", "]", "\n", "alpha1", "=", "torch", ".", "FloatTensor", "(", "x1", ".", "size", "(", "0", ")", ",", "1", ")", ".", "uniform_", "(", "0", ",", "0.5", ")", ".", "to", "(", "device", ")", "\n", "alpha2", "=", "torch", ".", "FloatTensor", "(", "x1", ".", "size", "(", "0", ")", ",", "1", ")", ".", "uniform_", "(", "0", ",", "0.5", ")", ".", "to", "(", "device", ")", "\n", "e1", "=", "netE", "(", "x1", ")", ".", "detach", "(", ")", "\n", "idx1", "=", "torch", ".", "randperm", "(", "x1", ".", "size", "(", "0", ")", ")", "\n", "idx2", "=", "torch", ".", "randperm", "(", "x1", ".", "size", "(", "0", ")", ")", "\n", "x2", "=", "x1", "[", "idx1", "]", "\n", "e2", "=", "e1", "[", "idx1", "]", "\n", "x3", "=", "x1", "[", "idx2", "]", "\n", "e3", "=", "e1", "[", "idx2", "]", "\n", "interpolates", "=", "alpha1", "*", "e1", "+", "alpha2", "*", "e2", "+", "(", "1", "-", "alpha1", "-", "alpha2", ")", "*", "e3", "\n", "ri", "=", "netG", "(", "interpolates", ")", ".", "detach", "(", ")", "\n", "interpolation_loss", "=", "(", "-", "(", "netD2", "(", "torch", ".", "cat", "(", "(", "x1", ",", "ri", ")", ",", "dim", "=", "1", ")", ")", ".", "view", "(", "-", "1", ")", "*", "real_labels", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "-", "(", "netD2", "(", "torch", ".", "cat", "(", "(", "x2", ",", "ri", ")", ",", "dim", "=", "1", ")", ")", ".", "view", "(", "-", "1", ")", "*", "real_labels", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "-", "(", "netD2", "(", "torch", ".", "cat", "(", "(", "x3", ",", "ri", ")", ",", "dim", "=", "1", ")", ")", ".", "view", "(", "-", "1", ")", "*", "real_labels", ".", "float", "(", ")", ")", ".", "mean", "(", ")", ")", "/", "3", "\n", "#     labels = torch.tensor([c if c==1 else anom_lambda*c for c in labels]).to(device)", "\n", "if", "loss_type", "==", "'wasserstein'", ":", "\n", "        ", "recon_loss_encoded", "=", "-", "(", "netD2", "(", "real_rec", ")", ".", "view", "(", "-", "1", ")", "*", "labels", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "\n", "", "elif", "loss_type", "==", "'hinge'", ":", "\n", "        ", "recon_loss_encoded", "=", "nn", ".", "ReLU", "(", ")", "(", "1.0", "+", "(", "labels", ".", "float", "(", ")", ")", "*", "(", "netD2", "(", "real_rec", ")", ".", "view", "(", "-", "1", ")", ")", ")", ".", "mean", "(", ")", "\n", "", "elif", "loss_type", "==", "'l1'", ":", "\n", "        ", "recon_loss_encoded", "=", "-", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "images", "-", "rec_real", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "*", "labels", ".", "float", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'unknown reconstruction loss type in recon_loss_joint fucntion!: {losstype}'", ")", "\n", "raise", "\n", "#     z = torch.zeros([images.shape[0], 128], dtype=torch.float32, device=device )", "\n", "#     awayloss = wass_loss(images,netG(z).detach(),labels, netG, netE,netD2)", "\n", "", "return", "recon_loss_encoded", "+", "ip_lambda", "*", "(", "interpolation_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.interpolation.wass_loss": [[107, 113], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netD2().view", "labels.float", "netD2().view", "labels.float", "netD2", "netD2"], "function", ["None"], ["", "def", "wass_loss", "(", "images", ",", "interpolates", ",", "labels", ",", "netG", ",", "netE", ",", "netD2", ")", ":", "\n", "    ", "real_real", "=", "torch", ".", "cat", "(", "(", "images", ",", "images", ")", ",", "dim", "=", "1", ")", "\n", "real_recreal", "=", "torch", ".", "cat", "(", "(", "images", ",", "interpolates", ")", ",", "dim", "=", "1", ")", "\n", "\n", "disc_loss", "=", "-", "(", "netD2", "(", "real_real", ")", ".", "view", "(", "-", "1", ")", "*", "labels", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "+", "(", "netD2", "(", "real_recreal", ")", ".", "view", "(", "-", "1", ")", "*", "labels", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "\n", "return", "disc_loss", "", "", ""]], "home.repos.pwc.inspect_result.somepago_AMA.None.data.CIFAR10Anom.__init__": [[21, 75], ["numpy.random.seed", "torchvision.datasets.CIFAR10.__init__", "print", "dict", "print", "len", "print", "numpy.random.choice", "list", "numpy.random.choice", "numpy.random.choice", "numpy.concatenate", "numpy.concatenate", "print", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.where", "numpy.where", "numpy.arange", "numpy.random.shuffle", "numpy.random.uniform().reshape", "int", "int", "list", "int", "len", "len", "len", "len", "set", "set", "data.CIFAR10Anom.class_to_idx.items", "set", "set", "numpy.array", "data.CIFAR10Anom.class_to_idx.keys", "numpy.array", "numpy.array", "numpy.random.uniform", "len", "len", "set", "set", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "stage", "=", "'train'", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "True", ",", "anom_classes", "=", "None", ",", "valid_split", "=", "0.05", ",", "anom_ratio", "=", "0", ",", "\n", "aug", "=", "False", ",", "aug_transform", "=", "None", ",", "setting", "=", "'ss'", ",", "seed", "=", "0", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "train_or_valid", "=", "True", "if", "stage", "==", "'train'", "or", "stage", "==", "'valid'", "else", "False", "\n", "self", ".", "aug_transform", "=", "aug_transform", "\n", "super", "(", "CIFAR10Anom", ",", "self", ")", ".", "__init__", "(", "root", ",", "train", "=", "train_or_valid", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ",", "\n", "download", "=", "download", ")", "\n", "\n", "if", "len", "(", "set", "(", "anom_classes", ")", "&", "set", "(", "self", ".", "class_to_idx", ".", "keys", "(", ")", ")", ")", "==", "0", ":", "\n", "            ", "print", "(", "'No anomaly class found, will be trained on all the classes'", ")", "\n", "\n", "", "anom_class", "=", "-", "1", "\n", "norm_class", "=", "1", "\n", "\n", "print", "(", "self", ".", "class_to_idx", ")", "\n", "\n", "anom_mapping", "=", "dict", "(", "(", "i", ",", "anom_class", ")", "if", "c", "in", "anom_classes", "else", "(", "i", ",", "norm_class", ")", "for", "c", ",", "i", "in", "self", ".", "class_to_idx", ".", "items", "(", ")", ")", "\n", "print", "(", "anom_mapping", ")", "\n", "\n", "if", "train_or_valid", ":", "\n", "            ", "self", ".", "targets", "=", "[", "anom_mapping", "[", "key", "]", "for", "key", "in", "self", ".", "targets", "]", "\n", "norm_indices", "=", "np", ".", "where", "(", "np", ".", "array", "(", "self", ".", "targets", ")", "==", "norm_class", ")", "[", "0", "]", "\n", "anom_indices", "=", "np", ".", "where", "(", "np", ".", "array", "(", "self", ".", "targets", ")", "==", "anom_class", ")", "[", "0", "]", "\n", "if", "aug", ":", "\n", "                ", "imgs", "=", "self", ".", "data", "[", "norm_indices", "]", "\n", "arr", "=", "np", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "arr", ")", "\n", "alpha", "=", "np", ".", "random", ".", "uniform", "(", "AUG_LIMIT", ",", "1", ",", "imgs", ".", "shape", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "imgs2", "=", "imgs", "[", "arr", "]", "\n", "imgs_i", "=", "(", "alpha", "*", "imgs", ")", ".", "astype", "(", "np", ".", "uint8", ")", "+", "(", "(", "1", "-", "alpha", ")", "*", "imgs2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "data", "[", "norm_indices", "]", "=", "imgs_i", "\n", "\n", "", "valid_indices", "=", "np", ".", "random", ".", "choice", "(", "norm_indices", ",", "int", "(", "len", "(", "norm_indices", ")", "*", "valid_split", ")", ",", "replace", "=", "False", ")", "\n", "train_indices", "=", "list", "(", "set", "(", "norm_indices", ")", "-", "set", "(", "valid_indices", ")", ")", "\n", "train_anom_indices", "=", "np", ".", "random", ".", "choice", "(", "anom_indices", ",", "int", "(", "len", "(", "train_indices", ")", "*", "anom_ratio", ")", ",", "replace", "=", "False", ")", "\n", "valid_anom_indices", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "set", "(", "anom_indices", ")", "-", "set", "(", "train_anom_indices", ")", ")", ",", "int", "(", "len", "(", "valid_indices", ")", "*", "0.1", ")", ",", "replace", "=", "False", ")", "\n", "\n", "train_indices", "=", "np", ".", "concatenate", "(", "(", "train_indices", ",", "train_anom_indices", ")", ")", "\n", "valid_indices", "=", "np", ".", "concatenate", "(", "(", "valid_indices", ",", "valid_anom_indices", ")", ")", "\n", "print", "(", "len", "(", "train_indices", ")", ",", "len", "(", "valid_indices", ")", ",", "len", "(", "train_anom_indices", ")", ",", "len", "(", "valid_anom_indices", ")", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "valid_indices", ")", "\n", "\n", "if", "stage", "==", "'train'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "train_indices", "]", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "[", "train_indices", "]", "\n", "", "elif", "stage", "==", "'valid'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "valid_indices", "]", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "[", "valid_indices", "]", "\n", "\n", "", "", "elif", "stage", "==", "'test'", ":", "\n", "            ", "self", ".", "targets", "=", "[", "anom_mapping", "[", "key", "]", "for", "key", "in", "self", ".", "targets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.data.CIFAR10Anom.__getitem__": [[76, 101], ["PIL.Image.fromarray", "int", "data.CIFAR10Anom.aug_transform", "data.CIFAR10Anom.transform", "data.CIFAR10Anom.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "targets", "[", "index", "]", ")", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "target", "==", "1", "and", "self", ".", "aug_transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "aug_transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.data.CIFAR10_OOD.__init__": [[105, 181], ["numpy.random.seed", "torchvision.datasets.CIFAR10.__init__", "numpy.array", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN.data.transpose", "numpy.array", "int", "print", "numpy.vstack", "numpy.concatenate", "numpy.random.choice", "list", "numpy.random.choice", "numpy.random.choice", "numpy.concatenate", "numpy.concatenate", "print", "numpy.random.shuffle", "numpy.random.shuffle", "torchvision.datasets.CIFAR10", "numpy.arange", "numpy.random.shuffle", "numpy.random.uniform().reshape", "torchvision.datasets.CIFAR10", "numpy.ones", "numpy.where", "numpy.where", "int", "int", "list", "int", "len", "len", "len", "len", "print", "torchvision.datasets.CIFAR10", "numpy.array", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN.data.transpose", "numpy.array", "int", "numpy.vstack", "numpy.concatenate", "print", "print", "len", "numpy.ones", "len", "set", "set", "numpy.zeros_like", "numpy.array", "numpy.ones", "numpy.array", "len", "numpy.array", "numpy.random.uniform", "len", "len", "len", "set", "set", "len", "numpy.array", "len", "numpy.ones", "len", "list", "torch.randperm", "int", "len", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "anom_root", ",", "stage", "=", "'train'", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "True", ",", "valid_split", "=", "0.01", ",", "anom_ratio", "=", "0", ",", "aug", "=", "False", ",", "\n", "aug_transform", "=", "None", ",", "corruption", "=", "0", ",", "setting", "=", "'ss'", ",", "seed", "=", "0", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "train_or_valid", "=", "True", "if", "stage", "==", "'train'", "or", "stage", "==", "'valid'", "else", "False", "\n", "\n", "self", ".", "aug_transform", "=", "aug_transform", "\n", "super", "(", "CIFAR10_OOD", ",", "self", ")", ".", "__init__", "(", "root", ",", "train", "=", "train_or_valid", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ",", "\n", "download", "=", "download", ")", "\n", "anom_class", "=", "-", "1", "\n", "norm_class", "=", "1", "\n", "\n", "if", "train_or_valid", ":", "\n", "            ", "if", "aug", ":", "\n", "                ", "normal_set", "=", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ")", "\n", "imgs", "=", "normal_set", ".", "data", "\n", "arr", "=", "np", ".", "arange", "(", "normal_set", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "arr", ")", "\n", "alpha", "=", "np", ".", "random", ".", "uniform", "(", "AUG_LIMIT", ",", "1", ",", "imgs", ".", "shape", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "imgs2", "=", "imgs", "[", "arr", "]", "\n", "imgs_i", "=", "(", "alpha", "*", "imgs", ")", ".", "astype", "(", "np", ".", "uint8", ")", "+", "(", "(", "1", "-", "alpha", ")", "*", "imgs2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "normal_set", ".", "data", "=", "imgs_i", "\n", "", "else", ":", "\n", "                ", "normal_set", "=", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "True", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "", "normal_set", ".", "targets", "=", "np", ".", "array", "(", "np", ".", "ones", "(", "len", "(", "normal_set", ".", "targets", ")", ")", ",", "dtype", "=", "int", ")", "\n", "anom_set", "=", "SVHN", "(", "root", "=", "anom_root", ",", "transform", "=", "transform", ",", "download", "=", "True", ",", "split", "=", "'train'", ")", "\n", "anom_set", ".", "data", "=", "anom_set", ".", "data", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "anom_set", ".", "labels", "=", "np", ".", "array", "(", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "anom_set", ".", "labels", ")", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "anom_count", "=", "int", "(", "len", "(", "normal_set", ".", "targets", ")", "*", "0.2", ")", "\n", "print", "(", "anom_count", ")", "\n", "\n", "self", ".", "data", "=", "np", ".", "vstack", "(", "(", "normal_set", ".", "data", ",", "anom_set", ".", "data", "[", "500", ":", "500", "+", "anom_count", "]", ")", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "(", "normal_set", ".", "targets", ",", "anom_set", ".", "labels", "[", "500", ":", "500", "+", "anom_count", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "norm_indices", "=", "np", ".", "where", "(", "self", ".", "targets", "==", "norm_class", ")", "[", "0", "]", "\n", "anom_indices", "=", "np", ".", "where", "(", "self", ".", "targets", "==", "anom_class", ")", "[", "0", "]", "\n", "valid_indices", "=", "np", ".", "random", ".", "choice", "(", "norm_indices", ",", "int", "(", "len", "(", "norm_indices", ")", "*", "valid_split", ")", ",", "replace", "=", "False", ")", "\n", "train_indices", "=", "list", "(", "set", "(", "norm_indices", ")", "-", "set", "(", "valid_indices", ")", ")", "\n", "train_anom_indices", "=", "np", ".", "random", ".", "choice", "(", "anom_indices", ",", "int", "(", "len", "(", "train_indices", ")", "*", "anom_ratio", ")", ",", "replace", "=", "False", ")", "\n", "valid_anom_indices", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "set", "(", "anom_indices", ")", "-", "set", "(", "train_anom_indices", ")", ")", ",", "int", "(", "len", "(", "valid_indices", ")", "*", "0.1", ")", ",", "replace", "=", "False", ")", "\n", "train_indices", "=", "np", ".", "concatenate", "(", "(", "train_indices", ",", "train_anom_indices", ")", ")", "\n", "valid_indices", "=", "np", ".", "concatenate", "(", "(", "valid_indices", ",", "valid_anom_indices", ")", ")", "\n", "print", "(", "len", "(", "train_indices", ")", ",", "len", "(", "valid_indices", ")", ",", "len", "(", "train_anom_indices", ")", ",", "len", "(", "valid_anom_indices", ")", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "valid_indices", ")", "\n", "if", "setting", "==", "'unsupervised'", ":", "\n", "                ", "self", ".", "targets", "=", "np", ".", "zeros_like", "(", "self", ".", "targets", ")", "+", "norm_class", "\n", "", "if", "stage", "==", "'train'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "train_indices", "]", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "[", "train_indices", "]", "\n", "if", "corruption", ">", "0", ":", "\n", "                    ", "self", ".", "targets", "[", "0", ":", "int", "(", "corruption", "*", "len", "(", "self", ".", "targets", ")", ")", "]", "=", "norm_class", "\n", "", "print", "(", "self", ".", "data", ".", "shape", ",", "self", ".", "targets", ".", "shape", ")", "\n", "", "elif", "stage", "==", "'valid'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "valid_indices", "]", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "[", "valid_indices", "]", "\n", "\n", "", "", "elif", "stage", "==", "'test'", ":", "\n", "            ", "normal_test", "=", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "False", ",", "transform", "=", "transform", ")", "\n", "normal_test", ".", "targets", "=", "np", ".", "array", "(", "np", ".", "ones", "(", "len", "(", "normal_test", ".", "targets", ")", ")", ",", "dtype", "=", "int", ")", "\n", "anom_test", "=", "SVHN", "(", "root", "=", "anom_root", ",", "transform", "=", "transform", ",", "download", "=", "True", ",", "split", "=", "'test'", ")", "\n", "anom_test", ".", "data", "=", "anom_test", ".", "data", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "anom_test", ".", "labels", "=", "np", ".", "array", "(", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "anom_test", ".", "labels", ")", ")", ",", "dtype", "=", "int", ")", "\n", "anom_count", "=", "int", "(", "0.1", "*", "len", "(", "normal_test", ".", "targets", ")", ")", "\n", "\n", "self", ".", "data", "=", "np", ".", "vstack", "(", "(", "normal_test", ".", "data", ",", "anom_test", ".", "data", "[", ":", "anom_count", "+", "1", "]", ")", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "(", "normal_test", ".", "targets", ",", "anom_test", ".", "labels", "[", ":", "anom_count", "+", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "indices", "=", "np", ".", "array", "(", "list", "(", "range", "(", "len", "(", "self", ".", "targets", ")", ")", ")", ")", "[", "torch", ".", "randperm", "(", "len", "(", "self", ".", "targets", ")", ")", "]", "\n", "print", "(", "len", "(", "indices", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "indices", "]", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "[", "indices", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'invalid stage: {stage}'", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.data.CIFAR10_OOD.__getitem__": [[182, 206], ["PIL.Image.fromarray", "int", "data.CIFAR10_OOD.aug_transform", "data.CIFAR10_OOD.transform", "data.CIFAR10_OOD.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "targets", "[", "index", "]", ")", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "target", "==", "1", "and", "self", ".", "aug_transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "aug_transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.data.load_data": [[208, 253], ["torchvision.transforms.Compose", "print", "print", "data.CIFAR10_OOD", "data.CIFAR10_OOD", "data.CIFAR10_OOD", "data.CIFAR10Anom", "data.CIFAR10Anom", "data.CIFAR10Anom", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "", "def", "load_data", "(", "dataset", ",", "ood", ",", "anom_classes", ",", "anom_ratio", ",", "corruption", ",", "seed", ",", "augmentation", "=", "False", ",", "learning_setting", "=", "'ss'", ",", "valid_split", "=", "0.1", ")", ":", "\n", "    ", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "root", "=", "'./data/CIFAR10'", "\n", "anom_root", "=", "'./data/SVHN'", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "32", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n", "\n", "\n", "aug_transform", "=", "None", "\n", "\n", "if", "ood", ":", "\n", "            ", "print", "(", "'In CIFAR10 OOD area'", ")", "\n", "\n", "dataset_train", "=", "CIFAR10_OOD", "(", "root", "=", "root", ",", "anom_root", "=", "anom_root", ",", "stage", "=", "'train'", ",", "\n", "transform", "=", "transform", ",", "\n", "valid_split", "=", "valid_split", ",", "aug", "=", "augmentation", ",", "aug_transform", "=", "aug_transform", ",", "\n", "anom_ratio", "=", "anom_ratio", ",", "seed", "=", "seed", ",", "corruption", "=", "corruption", ")", "\n", "dataset_valid", "=", "CIFAR10_OOD", "(", "root", "=", "root", ",", "anom_root", "=", "anom_root", ",", "stage", "=", "'valid'", ",", "\n", "transform", "=", "transform", ",", "\n", "valid_split", "=", "valid_split", ",", "aug", "=", "augmentation", ",", "aug_transform", "=", "aug_transform", ",", "\n", "anom_ratio", "=", "anom_ratio", ",", "seed", "=", "seed", ")", "\n", "dataset_test", "=", "CIFAR10_OOD", "(", "root", "=", "root", ",", "anom_root", "=", "anom_root", ",", "stage", "=", "'test'", ",", "\n", "transform", "=", "transform", ",", "seed", "=", "seed", ")", "\n", "\n", "", "else", ":", "\n", "            ", "dataset_train", "=", "CIFAR10Anom", "(", "root", "=", "root", ",", "stage", "=", "'train'", ",", "\n", "transform", "=", "transform", ",", "anom_classes", "=", "anom_classes", ",", "\n", "valid_split", "=", "valid_split", ",", "aug", "=", "augmentation", ",", "aug_transform", "=", "aug_transform", ",", "\n", "anom_ratio", "=", "anom_ratio", ",", "seed", "=", "seed", ")", "\n", "dataset_valid", "=", "CIFAR10Anom", "(", "root", "=", "root", ",", "stage", "=", "'valid'", ",", "\n", "transform", "=", "transform", ",", "anom_classes", "=", "anom_classes", ",", "\n", "valid_split", "=", "valid_split", ",", "aug", "=", "augmentation", ",", "aug_transform", "=", "aug_transform", ",", "\n", "anom_ratio", "=", "anom_ratio", ",", "seed", "=", "seed", ")", "\n", "dataset_test", "=", "CIFAR10Anom", "(", "root", "=", "root", ",", "stage", "=", "'test'", ",", "\n", "transform", "=", "transform", ",", "anom_classes", "=", "anom_classes", ",", "seed", "=", "seed", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "f'invalid dataset: {dataset}'", ")", "\n", "raise", "\n", "\n", "", "return", "dataset_train", ",", "dataset_valid", ",", "dataset_test", "\n", "", ""]], "home.repos.pwc.inspect_result.somepago_AMA.None.loss.calc_gradient_penalty": [[18, 38], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "alpha.to.to", "torch.tensor.to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netD2", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.grad", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "gradients.norm", "netD2.size"], "function", ["None"], ["def", "calc_gradient_penalty", "(", "netD2", ",", "real_data", ",", "fake_data", ",", "Lambda", "=", "10", ")", ":", "\n", "    ", "device", "=", "real_data", ".", "device", "\n", "b_size", "=", "real_data", ".", "shape", "[", "0", "]", "\n", "alpha", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "(", "torch", ".", "rand", "(", "b_size", ",", "1", ")", ")", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "# alpha = torch.rand(b_size, 1)", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "\n", "#this finds stuff on the line between real and fake ", "\n", "interpolates", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "# interpolates = real_data", "\n", "interpolates", "=", "interpolates", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "torch", ".", "tensor", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "#     interpolates = interpolates.clone().detach().requires_grad_(True)", "\n", "real_inter", "=", "torch", ".", "cat", "(", "(", "real_data", ",", "interpolates", ")", ",", "dim", "=", "1", ")", "\n", "#Runs the discriminator on the resulting interpolated points", "\n", "disc_interpolates", "=", "netD2", "(", "real_inter", ")", "\n", "\n", "#Calculates the gradient", "\n", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "real_inter", ",", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "Lambda", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.loss.recon_loss_joint": [[39, 55], ["netG", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "netE", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "print", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "netD2().view", "torch.tensor().to.float", "torch.ReLU", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor().to.float", "netD2", "torch.tensor().to.float", "netD2().view", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "netD2"], "function", ["None"], ["", "def", "recon_loss_joint", "(", "images", ",", "labels", ",", "netG", ",", "netE", ",", "netD2", ",", "loss_type", "=", "'wasserstein'", ",", "anom_lambda", "=", "1", ",", "ip_lambda", "=", "0.5", ")", ":", "\n", "    ", "rec_real", "=", "netG", "(", "netE", "(", "images", ")", ")", "\n", "real_rec", "=", "torch", ".", "cat", "(", "(", "images", ",", "rec_real", ")", ",", "dim", "=", "1", ")", "\n", "device", "=", "labels", ".", "device", "\n", "labels", "=", "torch", ".", "tensor", "(", "[", "c", "if", "c", "==", "1", "else", "anom_lambda", "*", "c", "for", "c", "in", "labels", "]", ")", ".", "to", "(", "device", ")", "\n", "if", "loss_type", "==", "'wasserstein'", ":", "\n", "        ", "recon_loss_encoded", "=", "-", "(", "netD2", "(", "real_rec", ")", ".", "view", "(", "-", "1", ")", "*", "labels", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "\n", "", "elif", "loss_type", "==", "'hinge'", ":", "\n", "        ", "recon_loss_encoded", "=", "nn", ".", "ReLU", "(", ")", "(", "1.0", "+", "(", "labels", ".", "float", "(", ")", ")", "*", "(", "netD2", "(", "real_rec", ")", ".", "view", "(", "-", "1", ")", ")", ")", ".", "mean", "(", ")", "\n", "", "elif", "loss_type", "==", "'l1'", ":", "\n", "        ", "recon_loss_encoded", "=", "-", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "images", "-", "rec_real", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "*", "labels", ".", "float", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'unknown reconstruction loss type in recon_loss_joint fucntion!: {losstype}'", ")", "\n", "raise", "\n", "\n", "", "return", "recon_loss_encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.loss.recon_discriminator_loss": [[57, 80], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "netG().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels.cuda.cuda", "netG().detach", "loss.calc_gradient_penalty", "netG", "print", "netE", "netG", "netE", "torch.ReLU", "torch.ReLU", "netD2().view", "labels.cuda.float", "labels.cuda.float", "netD2().view", "labels.cuda.float", "netD2().view", "netD2().view", "labels.cuda.float", "netD2", "netD2", "netD2", "netD2"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.loss.calc_gradient_penalty"], ["", "def", "recon_discriminator_loss", "(", "images", ",", "labels", ",", "netD2", ",", "netE", ",", "netG", ",", "losstype", "=", "'wasserstein'", ",", "anom_lambda", "=", "1", ",", "use_penalty", "=", "True", ",", "gradp_lambda", "=", "10", ",", "ip_lambda", "=", "0.5", ")", ":", "\n", "    ", "device", "=", "labels", ".", "device", "\n", "labels", "=", "torch", ".", "tensor", "(", "[", "c", "if", "c", "==", "1", "else", "anom_lambda", "*", "c", "for", "c", "in", "labels", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "", "rec_real", "=", "netG", "(", "netE", "(", "images", ")", ")", ".", "detach", "(", ")", "\n", "real_real", "=", "torch", ".", "cat", "(", "(", "images", ",", "images", ")", ",", "dim", "=", "1", ")", "\n", "real_recreal", "=", "torch", ".", "cat", "(", "(", "images", ",", "rec_real", ")", ",", "dim", "=", "1", ")", "\n", "if", "losstype", "==", "'hinge'", ":", "\n", "        ", "disc_loss", "=", "nn", ".", "ReLU", "(", ")", "(", "1.0", "-", "labels", ".", "float", "(", ")", "*", "(", "netD2", "(", "real_real", ")", ".", "view", "(", "-", "1", ")", ")", ")", ".", "mean", "(", ")", "+", "nn", ".", "ReLU", "(", ")", "(", "1.0", "+", "labels", ".", "float", "(", ")", "*", "(", "netD2", "(", "real_recreal", ")", ".", "view", "(", "-", "1", ")", ")", ")", ".", "mean", "(", ")", "\n", "", "elif", "losstype", "==", "'wasserstein'", ":", "\n", "        ", "disc_loss", "=", "-", "(", "netD2", "(", "real_real", ")", ".", "view", "(", "-", "1", ")", "*", "labels", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "+", "(", "netD2", "(", "real_recreal", ")", ".", "view", "(", "-", "1", ")", "*", "labels", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'unknown reconstruction loss type!: {losstype}'", ")", "\n", "raise", "\n", "\n", "\n", "", "if", "(", "use_penalty", ")", ":", "\n", "        ", "fake", "=", "netG", "(", "netE", "(", "images", ")", ")", ".", "detach", "(", ")", "\n", "lossD2", "=", "calc_gradient_penalty", "(", "netD2", ",", "images", ",", "fake", ",", "Lambda", "=", "gradp_lambda", ")", "\n", "disc_loss", "+=", "lossD2", "\n", "\n", "", "return", "disc_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Encoder.__init__": [[41, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cifar_models_bNorm.BasicDisEncNeuro", "cifar_models_bNorm.BasicDisEncNeuro", "cifar_models_bNorm.BasicDisEncNeuro", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BasicDisEncNeuro", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BasicDisEncNeuro", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BasicDisEncNeuro"], ["    ", "def", "__init__", "(", "self", ",", "ngpu", ",", "ndf", ",", "nz", "=", "64", ",", "nc", "=", "3", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nz", "=", "nz", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "BasicDisEncNeuro", "(", "nc", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BasicDisEncNeuro", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BasicDisEncNeuro", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "self", ".", "nz", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Encoder.forward": [[51, 55], ["cifar_models_bNorm.Encoder.main", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "main", "(", "input", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.DiscriminatorBlock.__init__": [[60, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ",", "out_chans", ",", "downsample", "=", "False", ",", "first", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "first", "=", "first", "\n", "\n", "if", "in_chans", "!=", "out_chans", ":", "\n", "            ", "self", ".", "shortcut_conv", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "out_chans", ",", "kernel_size", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_conv", "=", "None", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.DiscriminatorBlock.forward": [[73, 93], ["cifar_models_bNorm.DiscriminatorBlock.conv1", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "cifar_models_bNorm.DiscriminatorBlock.conv2", "cifar_models_bNorm.avg_pool2d", "cifar_models_bNorm.DiscriminatorBlock.shortcut_conv", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "cifar_models_bNorm.avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "[", "0", "]", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "shortcut", "=", "avg_pool2d", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "\n", "", "if", "self", ".", "shortcut_conv", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "shortcut_conv", "(", "shortcut", ")", "\n", "\n", "", "if", "not", "self", ".", "first", ":", "\n", "            ", "x", "=", "nn", ".", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "False", ")", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "False", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "avg_pool2d", "(", "x", ")", "\n", "\n", "", "return", "x", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Res_Discriminator.__init__": [[98, 115], ["torch.Module.__init__", "cifar_models_bNorm.DiscriminatorBlock", "cifar_models_bNorm.DiscriminatorBlock", "cifar_models_bNorm.DiscriminatorBlock", "cifar_models_bNorm.DiscriminatorBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.calculate_gain", "torch.calculate_gain", "torch.calculate_gain", "torch.calculate_gain", "torch.calculate_gain", "torch.calculate_gain", "torch.calculate_gain", "torch.calculate_gain", "torch.calculate_gain", "cifar_models_bNorm.Res_Discriminator.modules", "isinstance", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "module.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "ch", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "feats", "=", "ch", "\n", "self", ".", "block1", "=", "DiscriminatorBlock", "(", "channel", ",", "feats", ",", "downsample", "=", "True", ",", "first", "=", "True", ")", "\n", "self", ".", "block2", "=", "DiscriminatorBlock", "(", "feats", ",", "feats", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "DiscriminatorBlock", "(", "feats", ",", "feats", ",", "downsample", "=", "False", ")", "\n", "self", ".", "block4", "=", "DiscriminatorBlock", "(", "feats", ",", "feats", ",", "downsample", "=", "False", ")", "\n", "self", ".", "output_linear", "=", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", "\n", "# Apply Xavier initialisation to the weights", "\n", "relu_gain", "=", "nninit", ".", "calculate_gain", "(", "'relu'", ")", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "gain", "=", "relu_gain", "if", "module", "!=", "self", ".", "block1", ".", "conv1", "else", "1.0", "\n", "nninit", ".", "xavier_uniform", "(", "module", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Res_Discriminator.forward": [[116, 129], ["cifar_models_bNorm.Res_Discriminator.block1", "cifar_models_bNorm.Res_Discriminator.block2", "cifar_models_bNorm.Res_Discriminator.block3", "cifar_models_bNorm.Res_Discriminator.block4", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "cifar_models_bNorm.Res_Discriminator.mean().mean", "cifar_models_bNorm.Res_Discriminator.view", "cifar_models_bNorm.Res_Discriminator.output_linear", "cifar_models_bNorm.Res_Discriminator.mean"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "[", "0", "]", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "False", ")", "\n", "x", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "False", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "False", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "x", "=", "self", ".", "output_linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "def", "feature", "(", "self", ",", "*", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Res_Discriminator.feature": [[129, 140], ["cifar_models_bNorm.Res_Discriminator.block1", "cifar_models_bNorm.Res_Discriminator.block2", "cifar_models_bNorm.Res_Discriminator.block3", "cifar_models_bNorm.Res_Discriminator.block4", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "torch.functional.relu", "x.view.view.mean().mean", "x.view.view.view", "x.view.view.mean"], "methods", ["None"], ["", "def", "feature", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "[", "0", "]", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "False", ")", "\n", "x", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "False", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "False", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Block.__init__": [[146, 167], ["super().__init__", "layers.spectral_norm.Conv2d", "layers.spectral_norm.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "layers.spectral_norm.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "hidden_channels", "=", "None", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "optimized", "=", "False", ",", "spectral_norm", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "optimized", "=", "optimized", "\n", "self", ".", "hidden_channels", "=", "out_channels", "if", "not", "hidden_channels", "else", "hidden_channels", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "hidden_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "spectral_norm_pi", "=", "spectral_norm", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "spectral_norm_pi", "=", "spectral_norm", ")", "\n", "self", ".", "s_conv", "=", "None", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv1", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "if", "self", ".", "in_channels", "!=", "self", ".", "out_channels", "or", "optimized", ":", "\n", "            ", "self", ".", "s_conv", "=", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "\n", "spectral_norm_pi", "=", "spectral_norm", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "s_conv", ".", "weight", ".", "data", ",", "1.", ")", "\n", "\n", "", "self", ".", "activate", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Block.residual": [[168, 175], ["cifar_models_bNorm.Block.conv1", "cifar_models_bNorm.Block.activate", "cifar_models_bNorm.Block.conv2", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d"], ["", "def", "residual", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "if", "self", ".", "optimized", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Block.shortcut": [[176, 183], ["torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "cifar_models_bNorm.Block.s_conv"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d"], ["", "def", "shortcut", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "input", "\n", "if", "self", ".", "optimized", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "", "if", "self", ".", "s_conv", ":", "\n", "            ", "x", "=", "self", ".", "s_conv", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Block.forward": [[185, 189], ["cifar_models_bNorm.Block.residual", "cifar_models_bNorm.Block.shortcut"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.residual", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.shortcut"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "residual", "(", "input", ")", "\n", "x_r", "=", "self", ".", "shortcut", "(", "input", ")", "\n", "return", "x", "+", "x_r", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Gblock.__init__": [[193, 207], ["cifar_models_bNorm.Block.__init__", "cifar_models_bNorm.Gblock.batch_norm", "cifar_models_bNorm.Gblock.batch_norm", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Gblock.batch_norm", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Gblock.batch_norm"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "hidden_channels", "=", "None", ",", "num_categories", "=", "None", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "Gblock", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "hidden_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "\n", "upsample", ",", "spectral_norm", "=", "0", ")", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "num_categories", "=", "num_categories", "\n", "\n", "self", ".", "bn1", "=", "self", ".", "batch_norm", "(", "self", ".", "in_channels", ")", "\n", "self", ".", "bn2", "=", "self", ".", "batch_norm", "(", "self", ".", "hidden_channels", ")", "\n", "if", "upsample", ":", "\n", "# self.up = torch.nn.ConvTranspose2d(in_channels, in_channels, 2, stride=2)", "\n", "            ", "self", ".", "up", "=", "lambda", "a", ":", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "a", ",", "scale_factor", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "lambda", "a", ":", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Gblock.batch_norm": [[208, 211], ["torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "CategoricalBatchNorm"], "methods", ["None"], ["", "", "def", "batch_norm", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "if", "not", "self", ".", "num_categories", "else", "CategoricalBatchNorm", "(", "num_features", ",", "self", ".", "num_categories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Gblock.residual": [[212, 227], ["cifar_models_bNorm.Gblock.activate", "cifar_models_bNorm.Gblock.conv1", "cifar_models_bNorm.Gblock.activate", "cifar_models_bNorm.Gblock.conv2", "cifar_models_bNorm.Gblock.bn1", "cifar_models_bNorm.Gblock.bn1", "cifar_models_bNorm.Gblock.up", "cifar_models_bNorm.Gblock.bn2", "cifar_models_bNorm.Gblock.bn2"], "methods", ["None"], ["", "def", "residual", "(", "self", ",", "input", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", "=", "input", "\n", "x", "=", "self", ".", "bn1", "(", "x", ",", "y", ")", "if", "self", ".", "num_categories", "else", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "# output_size = list(input.size())", "\n", "# output_size[-1] = output_size[-1] * 2", "\n", "# output_size[-2] = output_size[-2] * 2", "\n", "# x = self.up(x, output_size=output_size)", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ",", "y", ")", "if", "self", ".", "num_categories", "else", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Gblock.shortcut": [[228, 235], ["cifar_models_bNorm.Gblock.up", "cifar_models_bNorm.Gblock.s_conv"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "input", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "", "if", "self", ".", "s_conv", ":", "\n", "            ", "x", "=", "self", ".", "s_conv", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Gblock.forward": [[236, 240], ["cifar_models_bNorm.Gblock.residual", "cifar_models_bNorm.Gblock.shortcut"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.residual", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.shortcut"], ["", "def", "forward", "(", "self", ",", "input", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "residual", "(", "input", ",", "y", ")", "\n", "x_r", "=", "self", ".", "shortcut", "(", "input", ")", "\n", "return", "x", "+", "x_r", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.__init__": [[244, 249], ["cifar_models_bNorm.Block.__init__"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "hidden_channels", "=", "None", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "downsample", "=", "False", ",", "spectral_norm", "=", "1", ")", ":", "\n", "        ", "super", "(", "Dblock", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "hidden_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "\n", "downsample", ",", "spectral_norm", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.residual": [[250, 258], ["cifar_models_bNorm.Dblock.activate", "cifar_models_bNorm.Dblock.conv1", "cifar_models_bNorm.Dblock.activate", "cifar_models_bNorm.Dblock.conv2", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d"], ["", "def", "residual", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "activate", "(", "input", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.shortcut": [[259, 266], ["cifar_models_bNorm.Dblock.s_conv", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d"], ["", "def", "shortcut", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "input", "\n", "if", "self", ".", "s_conv", ":", "\n", "            ", "x", "=", "self", ".", "s_conv", "(", "x", ")", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.forward": [[267, 271], ["cifar_models_bNorm.Dblock.residual", "cifar_models_bNorm.Dblock.shortcut"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.residual", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Dblock.shortcut"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "residual", "(", "input", ")", "\n", "x_r", "=", "self", ".", "shortcut", "(", "input", ")", "\n", "return", "x", "+", "x_r", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseGenerator.__init__": [[275, 286], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "cifar_models_bNorm.BaseGenerator.final_block"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseGenerator.final_block"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "ch", ",", "d_ch", "=", "None", ",", "n_categories", "=", "None", ",", "bottom_width", "=", "4", ")", ":", "\n", "        ", "super", "(", "BaseGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "ch", "=", "ch", "\n", "self", ".", "d_ch", "=", "d_ch", "if", "d_ch", "else", "ch", "\n", "self", ".", "n_categories", "=", "n_categories", "\n", "self", ".", "bottom_width", "=", "bottom_width", "\n", "self", ".", "dense", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "self", ".", "bottom_width", "*", "self", ".", "bottom_width", "*", "self", ".", "d_ch", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dense", ".", "weight", ".", "data", ",", "1.", ")", "\n", "self", ".", "blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "final", "=", "self", ".", "final_block", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseGenerator.final_block": [[287, 297], ["torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["None"], ["", "def", "final_block", "(", "self", ")", ":", "\n", "        ", "conv", "=", "torch", ".", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv", ".", "weight", ".", "data", ",", "1.", ")", "\n", "final_", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "BatchNorm2d", "(", "self", ".", "ch", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "conv", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "return", "final_", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseGenerator.forward": [[299, 306], ["cifar_models_bNorm.BaseGenerator.dense", "block.view", "cifar_models_bNorm.BaseGenerator.final", "block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense", "(", "input", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ",", "y", ")", "\n", "", "x", "=", "self", ".", "final", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.ResnetGenerator32.__init__": [[311, 316], ["cifar_models_bNorm.BaseGenerator.__init__", "cifar_models_bNorm.ResnetGenerator32.blocks.append", "cifar_models_bNorm.ResnetGenerator32.blocks.append", "cifar_models_bNorm.ResnetGenerator32.blocks.append", "cifar_models_bNorm.Gblock", "cifar_models_bNorm.Gblock", "cifar_models_bNorm.Gblock"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "256", ",", "z_dim", "=", "128", ",", "n_categories", "=", "None", ",", "bottom_width", "=", "4", ")", ":", "\n", "        ", "super", "(", "ResnetGenerator32", ",", "self", ")", ".", "__init__", "(", "z_dim", ",", "ch", ",", "ch", ",", "n_categories", ",", "bottom_width", ")", "\n", "self", ".", "blocks", ".", "append", "(", "Gblock", "(", "self", ".", "ch", ",", "self", ".", "ch", ",", "upsample", "=", "True", ",", "num_categories", "=", "self", ".", "n_categories", ")", ")", "\n", "self", ".", "blocks", ".", "append", "(", "Gblock", "(", "self", ".", "ch", ",", "self", ".", "ch", ",", "upsample", "=", "True", ",", "num_categories", "=", "self", ".", "n_categories", ")", ")", "\n", "self", ".", "blocks", ".", "append", "(", "Gblock", "(", "self", ".", "ch", ",", "self", ".", "ch", ",", "upsample", "=", "True", ",", "num_categories", "=", "self", ".", "n_categories", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseDiscriminator.__init__": [[320, 332], ["super().__init__", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "layers.spectral_norm.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "layers.spectral_norm.Embedding", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "cifar_models_bNorm.Block"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", "=", "None", ",", "n_categories", "=", "0", ",", "l_bias", "=", "True", ",", "spectral_norm", "=", "1", ",", "stack", "=", "3", ")", ":", "\n", "        ", "super", "(", "BaseDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activate", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "ch", "=", "in_ch", "\n", "self", ".", "out_ch", "=", "out_ch", "if", "out_ch", "else", "in_ch", "\n", "self", ".", "n_categories", "=", "n_categories", "\n", "self", ".", "blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "Block", "(", "stack", ",", "self", ".", "ch", ",", "optimized", "=", "True", ",", "spectral_norm", "=", "spectral_norm", ")", "]", ")", "\n", "self", ".", "l", "=", "Linear", "(", "self", ".", "out_ch", ",", "1", ",", "l_bias", ",", "spectral_norm_pi", "=", "spectral_norm", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "l", ".", "weight", ".", "data", ",", "1.", ")", "\n", "if", "n_categories", ">", "0", ":", "\n", "            ", "self", ".", "l_y", "=", "Embedding", "(", "n_categories", ",", "self", ".", "out_ch", ",", "spectral_norm_pi", "=", "spectral_norm", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "l_y", ".", "weight", ".", "data", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseDiscriminator.forward": [[333, 344], ["cifar_models_bNorm.BaseDiscriminator.activate", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cifar_models_bNorm.BaseDiscriminator.l", "block", "cifar_models_bNorm.BaseDiscriminator.l_y", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", "=", "input", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "x", "=", "torch", ".", "sum", "(", "x", ",", "(", "2", ",", "3", ")", ")", "\n", "output", "=", "self", ".", "l", "(", "x", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "w_y", "=", "self", ".", "l_y", "(", "y", ")", "\n", "output", "+=", "torch", ".", "sum", "(", "w_y", "*", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseDiscriminator.feature": [[345, 354], ["cifar_models_bNorm.BaseDiscriminator.activate", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "block.view", "block"], "methods", ["None"], ["", "def", "feature", "(", "self", ",", "input", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "x", "=", "input", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "x", "=", "torch", ".", "sum", "(", "x", ",", "(", "2", ",", "3", ")", ")", "\n", "feature", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.ResnetDiscriminator32.__init__": [[358, 363], ["cifar_models_bNorm.BaseDiscriminator.__init__", "cifar_models_bNorm.ResnetDiscriminator32.blocks.append", "cifar_models_bNorm.ResnetDiscriminator32.blocks.append", "cifar_models_bNorm.ResnetDiscriminator32.blocks.append", "cifar_models_bNorm.Dblock", "cifar_models_bNorm.Dblock", "cifar_models_bNorm.Dblock"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "128", ",", "n_categories", "=", "0", ",", "spectral_norm", "=", "1", ",", "stack", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResnetDiscriminator32", ",", "self", ")", ".", "__init__", "(", "ch", ",", "ch", ",", "n_categories", ",", "l_bias", "=", "False", ",", "spectral_norm", "=", "spectral_norm", ",", "stack", "=", "stack", ")", "\n", "self", ".", "blocks", ".", "append", "(", "Dblock", "(", "self", ".", "ch", ",", "self", ".", "ch", ",", "downsample", "=", "True", ",", "spectral_norm", "=", "spectral_norm", ")", ")", "\n", "self", ".", "blocks", ".", "append", "(", "Dblock", "(", "self", ".", "ch", ",", "self", ".", "ch", ",", "downsample", "=", "False", ",", "spectral_norm", "=", "spectral_norm", ")", ")", "\n", "self", ".", "blocks", ".", "append", "(", "Dblock", "(", "self", ".", "ch", ",", "self", ".", "ch", ",", "downsample", "=", "False", ",", "spectral_norm", "=", "spectral_norm", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.avg_pool2d": [[30, 33], ["None"], "function", ["None"], ["def", "avg_pool2d", "(", "x", ")", ":", "\n", "    ", "'''Twice differentiable implementation of 2x2 average pooling.'''", "\n", "return", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "+", "x", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", ":", ":", "2", "]", "+", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", "1", ":", ":", "2", "]", "+", "x", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", ")", "/", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BasicDisEncNeuro": [[34, 38], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "BasicDisEncNeuro", "(", "input", ",", "output", ",", "filter_size", ",", "stride", ",", "padding", ",", "bias", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "input", ",", "output", ",", "filter_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.evaluate": [[25, 37], ["newevaluate.roc", "newevaluate.auprc", "sklearn.metrics.f1_score", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.roc", "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.auprc"], ["def", "evaluate", "(", "labels", ",", "scores", ",", "metric", "=", "'roc'", ")", ":", "\n", "    ", "if", "metric", "==", "'roc'", ":", "\n", "        ", "return", "roc", "(", "labels", ",", "scores", ")", "\n", "", "elif", "metric", "==", "'auprc'", ":", "\n", "        ", "return", "auprc", "(", "labels", ",", "scores", ")", "\n", "", "elif", "metric", "==", "'f1_score'", ":", "\n", "        ", "threshold", "=", "0.20", "\n", "scores", "[", "scores", ">=", "threshold", "]", "=", "1", "\n", "scores", "[", "scores", "<", "threshold", "]", "=", "0", "\n", "return", "f1_score", "(", "labels", ",", "scores", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Check the evaluation metric.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.pr": [[39, 47], ["numpy.percentile", "print", "numpy.array", "np.array.astype", "sklearn.metrics.precision_recall_fscore_support", "print"], "function", ["None"], ["", "", "def", "pr", "(", "labels", ",", "scores", ",", "percen", ")", ":", "\n", "    ", "thresh", "=", "np", ".", "percentile", "(", "scores", ",", "100", "-", "percen", ")", "\n", "print", "(", "\"Threshold :\"", ",", "thresh", ")", "\n", "pred", "=", "(", "scores", ">=", "thresh", ")", ".", "astype", "(", "int", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "gt", "=", "labels", ".", "astype", "(", "int", ")", "\n", "precision", ",", "recall", ",", "f_score", ",", "support", "=", "prf", "(", "gt", ",", "pred", ",", "average", "=", "'binary'", ")", "\n", "print", "(", "'precision %f , recall %f , f1: %f'", "%", "(", "precision", ",", "recall", ",", "f_score", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.roc": [[50, 52], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "def", "roc", "(", "labels", ",", "scores", ",", "saveto", "=", "None", ")", ":", "\n", "    ", "return", "roc_auc_score", "(", "labels", ",", "scores", ")", "\n", "#     \"\"\"Compute ROC curve and ROC area for each class\"\"\"", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.auprc": [[83, 86], ["sklearn.metrics.average_precision_score"], "function", ["None"], ["", "def", "auprc", "(", "labels", ",", "scores", ")", ":", "\n", "    ", "ap", "=", "average_precision_score", "(", "labels", ",", "scores", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.stable_cumsum": [[91, 108], ["numpy.cumsum", "numpy.sum", "numpy.allclose", "RuntimeError"], "function", ["None"], ["def", "stable_cumsum", "(", "arr", ",", "rtol", "=", "1e-05", ",", "atol", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\"Use high precision for cumsum and check that final value matches sum\n    Parameters\n    ----------\n    arr : array-like\n        To be cumulatively summed as flat\n    rtol : float\n        Relative tolerance, see ``np.allclose``\n    atol : float\n        Absolute tolerance, see ``np.allclose``\n    \"\"\"", "\n", "out", "=", "np", ".", "cumsum", "(", "arr", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "expected", "=", "np", ".", "sum", "(", "arr", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "if", "not", "np", ".", "allclose", "(", "out", "[", "-", "1", "]", ",", "expected", ",", "rtol", "=", "rtol", ",", "atol", "=", "atol", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'cumsum was found to be unstable: '", "\n", "'its last element does not correspond to sum'", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.fpr_and_fdr_at_recall": [[109, 150], ["numpy.unique", "tps.searchsorted", "slice", "numpy.argmin", "ValueError", "numpy.argsort", "numpy.where", "newevaluate.stable_cumsum", "numpy.abs", "numpy.sum", "numpy.diff", "numpy.logical_not", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.stable_cumsum"], ["", "def", "fpr_and_fdr_at_recall", "(", "y_true", ",", "y_score", ",", "recall_level", "=", "recall_level_default", ",", "pos_label", "=", "None", ")", ":", "\n", "    ", "classes", "=", "np", ".", "unique", "(", "y_true", ")", "\n", "if", "(", "pos_label", "is", "None", "and", "\n", "not", "(", "np", ".", "array_equal", "(", "classes", ",", "[", "0", ",", "1", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "-", "1", ",", "1", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "0", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "-", "1", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "1", "]", ")", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Data is not binary and pos_label is not specified\"", ")", "\n", "", "elif", "pos_label", "is", "None", ":", "\n", "        ", "pos_label", "=", "1.", "\n", "\n", "# make y_true a boolean vector", "\n", "", "y_true", "=", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "# sort scores and corresponding truth values", "\n", "desc_score_indices", "=", "np", ".", "argsort", "(", "y_score", ",", "kind", "=", "\"mergesort\"", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "y_score", "[", "desc_score_indices", "]", "\n", "y_true", "=", "y_true", "[", "desc_score_indices", "]", "\n", "\n", "# y_score typically has many tied values. Here we extract", "\n", "# the indices associated with the distinct values. We also", "\n", "# concatenate a value for the end of the curve.", "\n", "distinct_value_indices", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score", ")", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "np", ".", "r_", "[", "distinct_value_indices", ",", "y_true", ".", "size", "-", "1", "]", "\n", "\n", "# accumulate the true positives with decreasing threshold", "\n", "tps", "=", "stable_cumsum", "(", "y_true", ")", "[", "threshold_idxs", "]", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "# add one because of zero-based indexing", "\n", "\n", "thresholds", "=", "y_score", "[", "threshold_idxs", "]", "\n", "\n", "recall", "=", "tps", "/", "tps", "[", "-", "1", "]", "\n", "\n", "last_ind", "=", "tps", ".", "searchsorted", "(", "tps", "[", "-", "1", "]", ")", "\n", "sl", "=", "slice", "(", "last_ind", ",", "None", ",", "-", "1", ")", "# [last_ind::-1]", "\n", "recall", ",", "fps", ",", "tps", ",", "thresholds", "=", "np", ".", "r_", "[", "recall", "[", "sl", "]", ",", "1", "]", ",", "np", ".", "r_", "[", "fps", "[", "sl", "]", ",", "0", "]", ",", "np", ".", "r_", "[", "tps", "[", "sl", "]", ",", "0", "]", ",", "thresholds", "[", "sl", "]", "\n", "\n", "cutoff", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "recall", "-", "recall_level", ")", ")", "\n", "\n", "return", "fps", "[", "cutoff", "]", "/", "(", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "y_true", ")", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.post_process": [[15, 19], ["image.mul().add.view", "image.mul().add.mul().add", "image.mul().add.mul"], "function", ["None"], ["def", "post_process", "(", "image", ")", ":", "\n", "\t", "image", "=", "image", ".", "view", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "image", "=", "image", ".", "mul", "(", "0.5", ")", ".", "add", "(", "0.5", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.generate_image": [[20, 24], ["post_process.cpu", "anom_utils.post_process", "torchvision.ToPILImage", "vutils.make_grid"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.post_process"], ["", "def", "generate_image", "(", "image", ",", "frame", ",", "name", ")", ":", "\n", "\t", "image", "=", "image", ".", "cpu", "(", ")", "\n", "image", "=", "post_process", "(", "image", ")", "\n", "image", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "vutils", ".", "make_grid", "(", "image", ",", "padding", "=", "2", ",", "normalize", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.reconstruction_loss": [[26, 31], ["torch.norm", "torch.norm", "torch.norm.view().data.cpu().numpy", "anom_utils.post_process", "anom_utils.post_process", "torch.norm.view().data.cpu", "torch.norm.view"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.post_process", "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.post_process"], ["", "def", "reconstruction_loss", "(", "image1", ",", "image2", ")", ":", "\n", "\t", "nc", ",", "image_size", ",", "_", "=", "image1", ".", "shape", "\n", "image1", ",", "image2", "=", "post_process", "(", "image1", ")", ",", "post_process", "(", "image2", ")", "\n", "norm", "=", "torch", ".", "norm", "(", "(", "image2", "-", "image1", ")", ".", "view", "(", "-", "1", ",", "nc", "*", "image_size", "*", "image_size", ")", ",", "dim", "=", "(", "1", ")", ")", "\n", "return", "norm", ".", "view", "(", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.latent_reconstruction_loss": [[34, 37], ["torch.norm", "torch.norm", "torch.norm.view().data.cpu().numpy", "torch.norm.view().data.cpu", "torch.norm.view"], "function", ["None"], ["", "def", "latent_reconstruction_loss", "(", "image1", ",", "image2", ")", ":", "\n", "\t", "norm", "=", "torch", ".", "norm", "(", "(", "image2", "-", "image1", ")", ",", "dim", "=", "1", ")", "\n", "return", "norm", ".", "view", "(", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.l1_latent_reconstruction_loss": [[38, 41], ["torch.sum", "torch.sum", "torch.sum.view().data.cpu().numpy", "torch.abs", "torch.abs", "torch.sum.view().data.cpu", "torch.sum.view"], "function", ["None"], ["", "def", "l1_latent_reconstruction_loss", "(", "image1", ",", "image2", ")", ":", "\n", "\t", "norm", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "image2", "-", "image1", ")", ",", "dim", "=", "1", ")", "\n", "return", "norm", ".", "view", "(", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.adjust_learning_rate": [[44, 50], ["print"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "num_epochs", ",", "lrate", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "lrate", "-", "lrate", "*", "(", "epoch", "-", "45", ")", "/", "(", "num_epochs", "-", "45", ")", "\n", "print", "(", "'use learning rate %f'", "%", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.half_adjust_learning_rate": [[51, 57], ["print"], "function", ["None"], ["", "", "def", "half_adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "num_epochs", ",", "lrate", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "lrate", "-", "1e-4", "\n", "print", "(", "'use learning rate %f'", "%", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.anomaly_score": [[59, 73], ["anom_utils.l1_latent_reconstruction_loss", "torch.mean().detach().cpu", "torch.mean().detach().cpu", "netD2.module.feature", "netD2.module.feature", "netD2.feature", "netD2.feature", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean().detach", "torch.mean().detach", "netG().detach", "netG().detach", "torch.mean", "torch.mean", "torch.abs().view", "torch.abs().view", "netG", "netG", "netE", "netE", "torch.abs", "torch.abs", "netG", "netE"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.l1_latent_reconstruction_loss", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseDiscriminator.feature", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseDiscriminator.feature", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseDiscriminator.feature", "home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.BaseDiscriminator.feature"], ["", "", "def", "anomaly_score", "(", "data", ",", "netG", ",", "netE", ",", "netD2", ",", "ngpu", "=", "1", ",", "anom_metric_type", "=", "'f_anomloss'", ")", ":", "\n", "\n", "\t", "if", "netD2", "is", "None", ":", "\n", "\t\t", "anom_metric_type", "=", "'l1_mean_recon'", "\n", "", "if", "anom_metric_type", "==", "'l1_mean_recon'", ":", "\n", "\t\t", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "data", "-", "netG", "(", "netE", "(", "data", ")", ")", ")", ".", "view", "(", "data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "if", "(", "ngpu", ">", "1", ")", ":", "\n", "\t\t", "a1", "=", "netD2", ".", "module", ".", "feature", "(", "torch", ".", "cat", "(", "(", "data", ",", "data", ")", ",", "dim", "=", "1", ")", ")", "\n", "a2", "=", "netD2", ".", "module", ".", "feature", "(", "torch", ".", "cat", "(", "(", "data", ",", "netG", "(", "netE", "(", "data", ")", ")", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "a1", "=", "netD2", ".", "feature", "(", "torch", ".", "cat", "(", "(", "data", ",", "data", ")", ",", "dim", "=", "1", ")", ")", "\n", "a2", "=", "netD2", ".", "feature", "(", "torch", ".", "cat", "(", "(", "data", ",", "netG", "(", "netE", "(", "data", ")", ")", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "return", "l1_latent_reconstruction_loss", "(", "a1", ",", "a2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.score_and_auc": [[76, 98], ["torch.no_grad", "torch.no_grad", "enumerate", "list", "list", "numpy.array().mean", "data[].to", "list.append", "list.append", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "data[].to().tolist", "anom_utils.anomaly_score", "collections.Counter", "newevaluate.evaluate", "numpy.array", "data[].to"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.anomaly_score", "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.evaluate"], ["", "def", "score_and_auc", "(", "dataLoader", ",", "netG", ",", "netE", ",", "netD2", ",", "device", ",", "ngpu", "=", "1", ",", "break_iters", "=", "10", ",", "anom_metric_type", "=", "'f_anomloss'", ")", ":", "\n", "\t", "score_list", "=", "[", "]", "\n", "score_label", "=", "[", "]", "\n", "count", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "i", ",", "data", "in", "enumerate", "(", "dataLoader", ",", "0", ")", ":", "\n", "\t\t\t", "if", "count", ">=", "break_iters", ":", "\n", "\t\t\t\t", "break", "\n", "", "real", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "score_label", ".", "append", "(", "data", "[", "1", "]", ".", "to", "(", "device", ")", ".", "tolist", "(", ")", ")", "\n", "score_list", ".", "append", "(", "anomaly_score", "(", "real", ",", "netG", ",", "netE", ",", "netD2", ",", "ngpu", ",", "anom_metric_type", ")", ")", "\n", "\n", "count", "+=", "1", "\n", "", "score_list", "=", "list", "(", "chain", ".", "from_iterable", "(", "score_list", ")", ")", "\n", "score_label", "=", "list", "(", "chain", ".", "from_iterable", "(", "score_label", ")", ")", "\n", "# \t\tprint(Counter(score_label))", "\n", "if", "Counter", "(", "score_label", ")", "[", "-", "1", "]", "==", "0", ":", "\n", "\t\t\t", "score_auc", "=", "0", "\n", "", "else", ":", "\n", "\t\t\t", "score_auc", "=", "1", "-", "evaluate", "(", "score_label", ",", "score_list", ")", "\n", "", "score_anom_mean", "=", "np", ".", "array", "(", "score_list", ")", ".", "mean", "(", ")", "\n", "", "return", "score_auc", ",", "score_anom_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.score_and_auc_sep": [[99, 141], ["torch.no_grad", "torch.no_grad", "numpy.array", "enumerate", "enumerate", "list", "list", "list", "scipy.stats.norm.fit", "newevaluate.evaluate", "numpy.median", "newevaluate.evaluate", "numpy.median", "numpy.median", "data[].to", "numpy.append", "data[].to", "list.append", "list.append", "list.append", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "scipy.stats.norm().pdf", "predictions.append", "numpy.array", "newevaluate.evaluate", "newevaluate.evaluate", "numpy.array", "numpy.array", "anom_utils.anomaly_score", "data[].to().tolist", "anom_utils.anomaly_score", "numpy.linalg.norm", "numpy.array", "numpy.array", "netE().detach().cpu().numpy", "scipy.stats.norm", "data[].to", "netE().detach().cpu", "netE().detach", "netE"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.evaluate", "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.evaluate", "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.evaluate", "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.evaluate", "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.anomaly_score", "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.anomaly_score"], ["", "def", "score_and_auc_sep", "(", "dataLoader", ",", "trainloader", ",", "netG", ",", "netE", ",", "netD2", ",", "device", ",", "ngpu", "=", "1", ",", "break_iters", "=", "10", ",", "anom_metric_type", "=", "'f_anomloss'", ")", ":", "\n", "    ", "score_list", "=", "[", "]", "\n", "score_label", "=", "[", "]", "\n", "disn_list", "=", "[", "]", "\n", "count", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "train_score_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "            ", "real", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "train_score_list", "=", "np", ".", "append", "(", "train_score_list", ",", "anomaly_score", "(", "real", ",", "netG", ",", "netE", ",", "netD2", ")", ")", "\n", "#             print(i)", "\n", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "dataLoader", ",", "0", ")", ":", "\n", "            ", "real", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "score_label", ".", "append", "(", "data", "[", "1", "]", ".", "to", "(", "device", ")", ".", "tolist", "(", ")", ")", "\n", "score_list", ".", "append", "(", "anomaly_score", "(", "real", ",", "netG", ",", "netE", ",", "netD2", ",", "ngpu", ",", "anom_metric_type", ")", ")", "\n", "disn_list", ".", "append", "(", "LA", ".", "norm", "(", "netE", "(", "real", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", ")", "\n", "", "score_list", "=", "list", "(", "chain", ".", "from_iterable", "(", "score_list", ")", ")", "\n", "score_label", "=", "list", "(", "chain", ".", "from_iterable", "(", "score_label", ")", ")", "\n", "disn_list", "=", "list", "(", "chain", ".", "from_iterable", "(", "disn_list", ")", ")", "\n", "#         import ipdb; ipdb.set_trace()", "\n", "mu", ",", "std", "=", "norm", ".", "fit", "(", "train_score_list", ")", "\n", "predictions", "=", "[", "]", "\n", "for", "s", "in", "score_list", ":", "\n", "            ", "p", "=", "norm", "(", "mu", ",", "std", ")", ".", "pdf", "(", "s", ")", "\n", "predictions", ".", "append", "(", "p", ")", "\n", "", "norm_auc", "=", "evaluate", "(", "score_label", ",", "predictions", ")", "\n", "\n", "score_mean", "=", "np", ".", "median", "(", "np", ".", "array", "(", "score_list", ")", ")", "\n", "\n", "if", "-", "1", "not", "in", "score_label", ":", "\n", "            ", "return", "0", ",", "score_mean", ",", "0", ",", "0", ",", "0", "\n", "", "score_auc", "=", "1", "-", "evaluate", "(", "score_label", ",", "score_list", ")", "\n", "dis_auc", "=", "1", "-", "evaluate", "(", "score_label", ",", "disn_list", ")", "\n", "prc", "=", "evaluate", "(", "score_label", ",", "score_list", ",", "metric", "=", "'auprc'", ")", "\n", "real_idx", "=", "np", ".", "array", "(", "score_label", ")", ">", "0", "\n", "anom_idx", "=", "np", ".", "array", "(", "score_label", ")", "<", "0", "\n", "real_mean", "=", "np", ".", "median", "(", "np", ".", "array", "(", "score_list", ")", "[", "real_idx", "]", ")", "\n", "anom_mean", "=", "np", ".", "median", "(", "np", ".", "array", "(", "score_list", ")", "[", "anom_idx", "]", ")", "\n", "\n", "", "return", "score_auc", ",", "score_mean", ",", "real_mean", ",", "anom_mean", ",", "prc", ",", "dis_auc", ",", "norm_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.only_auc": [[145, 178], ["torch.no_grad", "torch.no_grad", "enumerate", "enumerate", "list", "list", "scipy.stats.norm.fit", "newevaluate.evaluate", "data[].to", "list.append", "list.append", "data[].to", "list.append", "list.append", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "newevaluate.evaluate", "scipy.stats.norm().pdf", "predictions.append", "data[].to().tolist", "anom_utils.anomaly_score", "data[].to().tolist", "anom_utils.anomaly_score", "scipy.stats.norm", "data[].to", "data[].to"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.evaluate", "home.repos.pwc.inspect_result.somepago_AMA.None.newevaluate.evaluate", "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.anomaly_score", "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.anomaly_score"], ["", "def", "only_auc", "(", "dataLoader1", ",", "dataloader2", ",", "train_score_list", ",", "netG", ",", "netE", ",", "netD2", ",", "device", ",", "ngpu", "=", "1", ",", "break_iters", "=", "10", ",", "anom_metric_type", "=", "'f_anomloss'", ")", ":", "\n", "    ", "score_list", "=", "[", "]", "\n", "score_label", "=", "[", "]", "\n", "count", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "dataLoader1", ",", "0", ")", ":", "\n", "            ", "real", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "score_label", ".", "append", "(", "data", "[", "1", "]", ".", "to", "(", "device", ")", ".", "tolist", "(", ")", ")", "\n", "score_list", ".", "append", "(", "anomaly_score", "(", "real", ",", "netG", ",", "netE", ",", "netD2", ",", "ngpu", ",", "anom_metric_type", ")", ")", "\n", "", "max_i", "=", "i", "\n", "count", "=", "0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader2", ",", "0", ")", ":", "\n", "#             print(i)", "\n", "            ", "if", "count", ">", "max_i", "//", "5", ":", "\n", "                ", "continue", "\n", "", "count", "+=", "1", "\n", "real", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "score_label", ".", "append", "(", "data", "[", "1", "]", ".", "to", "(", "device", ")", ".", "tolist", "(", ")", ")", "\n", "score_list", ".", "append", "(", "anomaly_score", "(", "real", ",", "netG", ",", "netE", ",", "netD2", ",", "ngpu", ",", "anom_metric_type", ")", ")", "\n", "\n", "", "score_list", "=", "list", "(", "chain", ".", "from_iterable", "(", "score_list", ")", ")", "\n", "score_label", "=", "list", "(", "chain", ".", "from_iterable", "(", "score_label", ")", ")", "\n", "\n", "score_auc", "=", "1", "-", "evaluate", "(", "score_label", ",", "score_list", ")", "\n", "\n", "mu", ",", "std", "=", "norm", ".", "fit", "(", "train_score_list", ")", "\n", "predictions", "=", "[", "]", "\n", "for", "s", "in", "score_list", ":", "\n", "            ", "p", "=", "norm", "(", "mu", ",", "std", ")", ".", "pdf", "(", "s", ")", "\n", "predictions", ".", "append", "(", "p", ")", "\n", "", "norm_auc", "=", "evaluate", "(", "score_label", ",", "predictions", ")", "\n", "\n", "", "return", "score_auc", ",", "norm_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.ood_aucs": [[190, 248], ["torchvision.Compose", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "wandb.log", "torch.no_grad", "torch.no_grad", "numpy.array", "enumerate", "print", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "anom_utils.only_auc", "aucs.append", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "data[].to", "numpy.append", "anom_utils.anomaly_score"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.only_auc", "home.repos.pwc.inspect_result.somepago_AMA.None.anom_utils.anomaly_score"], ["def", "ood_aucs", "(", "trainloader", ",", "netG", ",", "netE", ",", "netD2", ",", "wandb", ",", "imgroot", ",", "epoch", ",", "device", ")", ":", "\n", "    ", "aucs", "=", "[", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "32", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "32", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", "\n", ")", "\n", "transform_icons", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "32", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", "\n", ")", "\n", "cifar_test", "=", "CIFAR10", "(", "'./data/CIFAR10'", ",", "train", "=", "False", ",", "transform", "=", "transform", ",", "target_transform", "=", "lambda", "x", ":", "1", ",", "download", "=", "False", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "cifar_test", ",", "batch_size", "=", "64", ",", "\n", "drop_last", "=", "True", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "#     svhn_test = SVHN(root= './data/SVHN',transform=transform, download=True,split='test',target_transform=lambda x:1)", "\n", "#     testloader = torch.utils.data.DataLoader(svhn_test, batch_size=64, ", "\n", "#                                          drop_last = True,", "\n", "#                                            shuffle = False, num_workers=4)", "\n", "\n", "\n", "#     for dataset in ['lsun','isun','imagenet','textures']:", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "train_score_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "            ", "real", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "train_score_list", "=", "np", ".", "append", "(", "train_score_list", ",", "anomaly_score", "(", "real", ",", "netG", ",", "netE", ",", "netD2", ")", ")", "\n", "\n", "", "", "for", "dataset", "in", "[", "'lsun'", "]", ":", "\n", "\n", "        ", "print", "(", "dataset", ")", "\n", "if", "dataset", "==", "'icons'", ":", "\n", "            ", "transform", "=", "transform_icons", "\n", "", "root", "=", "datalocations", "[", "dataset", "]", "\n", "ood_dataset", "=", "ImageFolder", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "lambda", "x", ":", "-", "1", ")", "\n", "oodloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "ood_dataset", ",", "batch_size", "=", "64", ",", "\n", "drop_last", "=", "True", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "auc", ",", "norm_auc", "=", "only_auc", "(", "testloader", ",", "oodloader", ",", "train_score_list", ",", "netG", ",", "netE", ",", "netD2", ",", "device", ",", "anom_metric_type", "=", "'f_anomloss'", ")", "\n", "aucs", ".", "append", "(", "auc", ")", "\n", "\n", "\n", "", "wandb", ".", "log", "(", "{", "'lsun'", ":", "auc", ",", "'lsun_normauc'", ":", "norm_auc", "}", ")", "#, 'isun': aucs[1],'imagenet':aucs[2], 'textures': aucs[3] })", "\n", "\n", "#     with open(os.path.join(imgroot, \"ood_aucs.txt\"), \"a\") as f:", "\n", "#                     f.write(\"{} \\t {:.5f}\\t {:.5f}\\t {:.5f}\\t {:.5f}\".format(epoch, aucs[0], aucs[1], aucs[2], aucs[3]) + \"\\n\")", "\n", "\n", "return", "aucs", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.dataset.FolderWithImages.__init__": [[18, 25], ["torch.Dataset.__init__", "os.path.join", "os.listdir", "dataset.is_image_file", "x.lower"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__", "home.repos.pwc.inspect_result.somepago_AMA.src.dataset.is_image_file"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "input_transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "FolderWithImages", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_filenames", "=", "[", "join", "(", "root", ",", "x", ")", "\n", "for", "x", "in", "listdir", "(", "root", ")", "if", "is_image_file", "(", "x", ".", "lower", "(", ")", ")", "]", "\n", "\n", "self", ".", "input_transform", "=", "input_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.dataset.FolderWithImages.__getitem__": [[26, 35], ["dataset.load_img", "dataset.FolderWithImages.copy", "dataset.FolderWithImages.input_transform", "dataset.FolderWithImages.target_transform"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.src.dataset.load_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "input", "=", "load_img", "(", "self", ".", "image_filenames", "[", "index", "]", ")", "\n", "target", "=", "input", ".", "copy", "(", ")", "\n", "if", "self", ".", "input_transform", ":", "\n", "            ", "input", "=", "self", ".", "input_transform", "(", "input", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "input", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.dataset.FolderWithImages.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_filenames", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.somepago_AMA.src.dataset.is_image_file": [[8, 10], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "\".png\"", ",", "\".jpg\"", ",", "\".jpeg\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.dataset.load_img": [[12, 15], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "load_img", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "filepath", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.SubLoader.__init__": [[56, 84], ["torchvision.CIFAR100.__init__", "numpy.array", "numpy.array().reshape", "numpy.array", "numpy.array().reshape", "labels[].tolist", "utils.SubLoader.__dict__.keys", "labels[].tolist", "labels[].tolist", "numpy.array", "numpy.array", "numpy.array.reshape", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "exclude_list", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SubLoader", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "exclude_list", "==", "[", "]", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "if", "'train_labels'", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "                ", "tversion", "=", "True", "\n", "", "else", ":", "\n", "                ", "tversion", "=", "False", "\n", "", "labels", "=", "np", ".", "array", "(", "self", ".", "train_labels", "if", "tversion", "else", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "mask", "=", "~", "(", "labels", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "if", "tversion", ":", "\n", "                ", "self", ".", "train_data", "=", "self", ".", "train_data", "[", "mask", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "mask", "]", "\n", "", "if", "tversion", ":", "\n", "                ", "self", ".", "targets", "=", "labels", "[", "mask", "]", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_labels", "=", "labels", "[", "mask", "]", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "labels", "=", "np", ".", "array", "(", "self", ".", "test_labels", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "mask", "=", "~", "(", "labels", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", "[", "mask", "]", "\n", "self", ".", "test_labels", "=", "labels", "[", "mask", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.InfiniteDataLoader.__init__": [[165, 169], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "super", "(", "InfiniteDataLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "data_iter", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.InfiniteDataLoader.next": [[170, 179], ["utils.InfiniteDataLoader.data_iter.next", "iter", "utils.InfiniteDataLoader.data_iter.next"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.src.utils.InfiniteDataLoader.next", "home.repos.pwc.inspect_result.somepago_AMA.src.utils.InfiniteDataLoader.next"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "self", ".", "data_iter", ".", "next", "(", ")", "\n", "", "except", "Exception", ":", "\n", "# Reached end of the dataset", "\n", "            ", "self", ".", "data_iter", "=", "iter", "(", "self", ".", "dataloader", ")", "\n", "data", "=", "self", ".", "data_iter", ".", "next", "(", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.InfiniteDataLoader.__len__": [[180, 182], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.ALICropAndScale.__call__": [[286, 288], ["img.resize().crop", "img.resize"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", ".", "resize", "(", "(", "64", ",", "78", ")", ",", "Image", ".", "ANTIALIAS", ")", ".", "crop", "(", "(", "0", ",", "7", ",", "64", ",", "64", "+", "7", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.setup": [[12, 52], ["torch.set_num_threads", "torch.set_num_threads", "print", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "int", "updates[].update", "int", "updates[].update", "os.makedirs", "random.randint", "torch.cuda.is_available", "torch.cuda.is_available", "print", "print", "opt.e_updates.split", "float", "opt.g_updates.split", "float", "x.split", "[].split", "x.split", "[].split", "x.split", "x.split", "opt.e_updates.split", "opt.g_updates.split"], "function", ["None"], ["def", "setup", "(", "opt", ")", ":", "\n", "    ", "'''\n    Setups cudnn, seeds and parses updates string.\n    '''", "\n", "opt", ".", "cuda", "=", "not", "opt", ".", "cpu", "\n", "\n", "torch", ".", "set_num_threads", "(", "4", ")", "\n", "\n", "if", "opt", ".", "nc", "is", "None", ":", "\n", "        ", "opt", ".", "nc", "=", "1", "if", "opt", ".", "dataset", "==", "'mnist'", "else", "3", "\n", "\n", "", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "save_dir", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "print", "(", "'Directory was not created.'", ")", "\n", "\n", "", "if", "opt", ".", "manual_seed", "is", "None", ":", "\n", "        ", "opt", ".", "manual_seed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "\n", "", "print", "(", "\"Random Seed: \"", ",", "opt", ".", "manual_seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "manual_seed", ")", "\n", "torch", ".", "manual_seed", "(", "opt", ".", "manual_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "opt", ".", "manual_seed", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "opt", ".", "cuda", ":", "\n", "        ", "print", "(", "\"WARNING: You have a CUDA device,\"", "\n", "\"so you should probably run with --cuda\"", ")", "\n", "\n", "", "updates", "=", "{", "'e'", ":", "{", "}", ",", "'g'", ":", "{", "}", "}", "\n", "updates", "[", "'e'", "]", "[", "'num_updates'", "]", "=", "int", "(", "opt", ".", "e_updates", ".", "split", "(", "';'", ")", "[", "0", "]", ")", "\n", "updates", "[", "'e'", "]", ".", "update", "(", "{", "x", ".", "split", "(", "':'", ")", "[", "0", "]", ":", "float", "(", "x", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "for", "x", "in", "opt", ".", "e_updates", ".", "split", "(", "';'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "}", ")", "\n", "\n", "updates", "[", "'g'", "]", "[", "'num_updates'", "]", "=", "int", "(", "opt", ".", "g_updates", ".", "split", "(", "';'", ")", "[", "0", "]", ")", "\n", "updates", "[", "'g'", "]", ".", "update", "(", "{", "x", ".", "split", "(", "':'", ")", "[", "0", "]", ":", "float", "(", "x", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "for", "x", "in", "opt", ".", "g_updates", ".", "split", "(", "';'", ")", "[", "1", "]", ".", "split", "(", "','", ")", "}", ")", "\n", "\n", "return", "updates", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.setup_dataset": [[87, 160], ["torchvision.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.InfiniteDataLoader", "os.path.join", "torchvision.ImageFolder", "len", "torchvision.Scale", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.LSUN", "int", "torchvision.CIFAR10", "torchvision.MNIST", "torchvision.SVHN", "utils.SubLoader", "os.path.join", "dataset.FolderWithImages", "range", "torchvision.Compose", "torchvision.ToTensor", "utils.ALICropAndScale", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "", "def", "setup_dataset", "(", "opt", ",", "train", "=", "True", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", ":", "\n", "    ", "'''\n    Setups dataset.\n    '''", "\n", "# Usual transform", "\n", "t", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "[", "opt", ".", "image_size", ",", "opt", ".", "image_size", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "if", "opt", ".", "dataset", "in", "[", "'imagenet'", ",", "'folder'", ",", "'lfw'", "]", ":", "\n", "        ", "imdir", "=", "'train'", "if", "train", "else", "'val'", "\n", "dataroot", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "imdir", ")", "\n", "\n", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "dataroot", ",", "transform", "=", "t", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'lsun'", ":", "\n", "        ", "dataset", "=", "dset", ".", "LSUN", "(", "db_path", "=", "opt", ".", "dataroot", ",", "\n", "classes", "=", "[", "'bedroom_train'", "]", ",", "\n", "train", "=", "train", ",", "\n", "transform", "=", "t", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "dataset", "=", "dset", ".", "CIFAR10", "(", "root", "=", "'data/raw/cifar10'", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "train", ",", "\n", "transform", "=", "t", "\n", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "dataset", "=", "dset", ".", "MNIST", "(", "root", "=", "'data/raw/mnist'", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "train", ",", "\n", "transform", "=", "t", "\n", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "dataset", "=", "dset", ".", "SVHN", "(", "root", "=", "'data/raw/svhn'", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "train", ",", "\n", "transform", "=", "t", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "dataset", "=", "SubLoader", "(", "root", "=", "'data/raw/cifar100'", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "train", ",", "\n", "transform", "=", "t", ",", "exclude_list", "=", "[", "range", "(", "0", ",", "95", ")", "]", ")", "\n", "\n", "", "elif", "opt", ".", "dataset", "==", "'celeba'", ":", "\n", "        ", "imdir", "=", "'train'", "if", "train", "else", "'val'", "\n", "dataroot", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "imdir", ")", "\n", "\n", "dataset", "=", "FolderWithImages", "(", "root", "=", "dataroot", ",", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "ALICropAndScale", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", ",", "\n", "target_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'Wrong dataset name.'", "\n", "\n", "", "assert", "len", "(", "dataset", ")", ">", "0", ",", "'No images found, check your paths.'", "\n", "\n", "# Shuffle and drop last when training", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "int", "(", "opt", ".", "workers", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "\n", "return", "InfiniteDataLoader", "(", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.weights_init": [[184, 194], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "'''\n    Custom weights initialization called on netG and netE\n    '''", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.load_G": [[196, 209], ["importlib.import_module", "importlib.import_module._netG", "m._netG.apply", "m._netG.train", "print", "m._netG.load_state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "load_G", "(", "opt", ")", ":", "\n", "    ", "'''\n    Loads generator model.\n    '''", "\n", "m", "=", "importlib", ".", "import_module", "(", "'models.'", "+", "opt", ".", "netG", ")", "\n", "netG", "=", "m", ".", "_netG", "(", "opt", ")", "\n", "netG", ".", "apply", "(", "weights_init", ")", "\n", "netG", ".", "train", "(", ")", "\n", "if", "opt", ".", "netG_chp", "!=", "''", ":", "\n", "        ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netG_chp", ")", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "print", "(", "'Generator\\n'", ",", "netG", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.load_E": [[211, 225], ["importlib.import_module", "importlib.import_module._netE", "m._netE.apply", "m._netE.train", "print", "m._netE.load_state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_E", "(", "opt", ")", ":", "\n", "    ", "'''\n    Loads encoder model.\n    '''", "\n", "m", "=", "importlib", ".", "import_module", "(", "'models.'", "+", "opt", ".", "netE", ")", "\n", "netE", "=", "m", ".", "_netE", "(", "opt", ")", "\n", "netE", ".", "apply", "(", "weights_init", ")", "\n", "netE", ".", "train", "(", ")", "\n", "if", "opt", ".", "netE_chp", "!=", "''", ":", "\n", "        ", "netE", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netE_chp", ")", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "print", "(", "'Encoder\\n'", ",", "netE", ")", "\n", "\n", "return", "netE", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.match": [[227, 243], ["utils.normalize", "utils.normalize", "normalize.mul().mean", "normalize.mul"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.src.utils.normalize", "home.repos.pwc.inspect_result.somepago_AMA.src.utils.normalize"], ["", "def", "match", "(", "x", ",", "y", ",", "dist", ")", ":", "\n", "    ", "'''\n    Computes distance between corresponding points points in `x` and `y`\n    using distance `dist`.\n    '''", "\n", "if", "dist", "==", "'L2'", ":", "\n", "        ", "return", "(", "x", "-", "y", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "", "elif", "dist", "==", "'L1'", ":", "\n", "        ", "return", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "", "elif", "dist", "==", "'cos'", ":", "\n", "        ", "x_n", "=", "normalize", "(", "x", ")", "\n", "y_n", "=", "normalize", "(", "y", ")", "\n", "\n", "return", "2", "-", "(", "x_n", ")", ".", "mul", "(", "y_n", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "dist", "==", "'none'", ",", "'wtf ?'", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.populate_x": [[245, 251], ["dataloader.next", "x.data.resize_().copy_", "x.data.resize_", "real_cpu.size"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.src.utils.InfiniteDataLoader.next"], ["", "", "def", "populate_x", "(", "x", ",", "dataloader", ")", ":", "\n", "    ", "'''\n    Fills input variable `x` with data generated with dataloader\n    '''", "\n", "real_cpu", ",", "_", "=", "dataloader", ".", "next", "(", ")", "\n", "x", ".", "data", ".", "resize_", "(", "real_cpu", ".", "size", "(", ")", ")", ".", "copy_", "(", "real_cpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.populate_z": [[253, 261], ["z.data.resize_", "z.data.normal_", "utils.normalize_"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.src.utils.normalize_"], ["", "def", "populate_z", "(", "z", ",", "opt", ")", ":", "\n", "    ", "'''\n    Fills noise variable `z` with noise U(S^M)\n    '''", "\n", "z", ".", "data", ".", "resize_", "(", "opt", ".", "batch_size", ",", "opt", ".", "nz", ",", "1", ",", "1", ")", "\n", "z", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "if", "opt", ".", "noise", "==", "'sphere'", ":", "\n", "        ", "normalize_", "(", "z", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.normalize_": [[263, 268], ["x.div_", "x.norm().unsqueeze().expand_as", "x.norm().unsqueeze", "x.norm"], "function", ["None"], ["", "", "def", "normalize_", "(", "x", ",", "dim", "=", "1", ")", ":", "\n", "    ", "'''\n    Projects points to a sphere inplace.\n    '''", "\n", "x", ".", "div_", "(", "x", ".", "norm", "(", "2", ",", "dim", "=", "dim", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.normalize": [[270, 275], ["x.div", "x.norm().unsqueeze().expand_as", "x.norm().unsqueeze", "x.norm"], "function", ["None"], ["", "def", "normalize", "(", "x", ",", "dim", "=", "1", ")", ":", "\n", "    ", "'''\n    Projects points to a sphere.\n    '''", "\n", "return", "x", ".", "div", "(", "x", ".", "norm", "(", "2", ",", "dim", "=", "dim", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.utils.var": [[277, 283], ["x_zero_meaned.pow().mean", "x.mean().expand_as", "x_zero_meaned.pow", "x.mean"], "function", ["None"], ["", "def", "var", "(", "x", ",", "dim", "=", "0", ")", ":", "\n", "    ", "'''\n    Calculates variance.\n    '''", "\n", "x_zero_meaned", "=", "x", "-", "x", ".", "mean", "(", "dim", ")", ".", "expand_as", "(", "x", ")", "\n", "return", "x_zero_meaned", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.losses.KLN01Loss.__init__": [[9, 15], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "direction", ",", "minimize", ")", ":", "\n", "        ", "super", "(", "KLN01Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "minimize", "=", "minimize", "\n", "assert", "direction", "in", "[", "'pq'", ",", "'qp'", "]", ",", "'direction?'", "\n", "\n", "self", ".", "direction", "=", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.losses.KLN01Loss.forward": [[16, 47], ["samples.view.view.view", "src.utils.var", "samples.view.view.mean", "samples.view.view.nelement", "samples.view.view.size", "samples_var.log", "samples.view.view.size", "samples.view.view.size", "samples_var.log", "samples_mean.pow", "samples_var.pow", "samples_var.pow", "samples_mean.pow"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.src.utils.var"], ["", "def", "forward", "(", "self", ",", "samples", ")", ":", "\n", "\n", "        ", "assert", "samples", ".", "nelement", "(", ")", "==", "samples", ".", "size", "(", "1", ")", "*", "samples", ".", "size", "(", "0", ")", ",", "'wtf?'", "\n", "\n", "samples", "=", "samples", ".", "view", "(", "samples", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "self", ".", "samples_var", "=", "var", "(", "samples", ")", "\n", "self", ".", "samples_mean", "=", "samples", ".", "mean", "(", "0", ")", "\n", "\n", "samples_mean", "=", "self", ".", "samples_mean", "\n", "samples_var", "=", "self", ".", "samples_var", "\n", "\n", "if", "self", ".", "direction", "==", "'pq'", ":", "\n", "# mu_1 = 0; sigma_1 = 1", "\n", "\n", "            ", "t1", "=", "(", "1", "+", "samples_mean", ".", "pow", "(", "2", ")", ")", "/", "(", "2", "*", "samples_var", ".", "pow", "(", "2", ")", ")", "\n", "t2", "=", "samples_var", ".", "log", "(", ")", "\n", "\n", "KL", "=", "(", "t1", "+", "t2", "-", "0.5", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "# mu_2 = 0; sigma_2 = 1", "\n", "\n", "            ", "t1", "=", "(", "samples_var", ".", "pow", "(", "2", ")", "+", "samples_mean", ".", "pow", "(", "2", ")", ")", "/", "2", "\n", "t2", "=", "-", "samples_var", ".", "log", "(", ")", "\n", "\n", "KL", "=", "(", "t1", "+", "t2", "-", "0.5", ")", ".", "mean", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "minimize", ":", "\n", "            ", "KL", "*=", "-", "1", "\n", "\n", "", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.losses.SampleKLN01Loss.__init__": [[83, 89], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "direction", ",", "minimize", ")", ":", "\n", "        ", "super", "(", "SampleKLN01Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "minimize", "=", "minimize", "\n", "assert", "direction", "in", "[", "'pq'", ",", "'qp'", "]", ",", "'direction?'", "\n", "\n", "self", ".", "direction", "=", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.losses.SampleKLN01Loss.forward": [[90, 113], ["samples.view.view.view", "src.utils.var", "samples.view.view.mean", "samples.view.view.size", "losses.sample_entropy", "samples.view.view.pow().mean", "samples.view.view.pow"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.src.utils.var", "home.repos.pwc.inspect_result.somepago_AMA.src.losses.sample_entropy"], ["", "def", "forward", "(", "self", ",", "samples", ")", ":", "\n", "\n", "\n", "\n", "        ", "assert", "samples", ".", "ndimension", "==", "2", ",", "'wft'", "\n", "samples", "=", "samples", ".", "view", "(", "samples", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "self", ".", "samples_var", "=", "var", "(", "samples", ")", "\n", "self", ".", "samples_mean", "=", "samples", ".", "mean", "(", "0", ")", "\n", "\n", "if", "self", ".", "direction", "==", "'pq'", ":", "\n", "            ", "assert", "False", ",", "'not possible'", "\n", "", "else", ":", "\n", "            ", "entropy", "=", "sample_entropy", "(", "samples", ")", "\n", "\n", "cross_entropy", "=", "-", "samples", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "/", "2.", "\n", "\n", "KL", "=", "-", "cross_entropy", "-", "entropy", "\n", "\n", "", "if", "not", "self", ".", "minimize", ":", "\n", "            ", "KL", "*=", "-", "1", "\n", "\n", "", "return", "KL", "\n", "", "", ""]], "home.repos.pwc.inspect_result.somepago_AMA.src.losses.pairwise_euclidean": [[51, 61], ["samples.size", "samples.mul().sum", "samples_norm.expand.expand", "samples.mm().mul", "samples_norm.expand.add", "samples.mul", "samples_norm.expand.t", "samples.mm", "samples.t"], "function", ["None"], ["", "", "def", "pairwise_euclidean", "(", "samples", ")", ":", "\n", "\n", "    ", "B", "=", "samples", ".", "size", "(", "0", ")", "\n", "\n", "samples_norm", "=", "samples", ".", "mul", "(", "samples", ")", ".", "sum", "(", "1", ")", "\n", "samples_norm", "=", "samples_norm", ".", "expand", "(", "B", ",", "B", ")", "\n", "\n", "dist_mat", "=", "samples", ".", "mm", "(", "samples", ".", "t", "(", ")", ")", ".", "mul", "(", "-", "2", ")", "+", "samples_norm", ".", "add", "(", "samples_norm", ".", "t", "(", ")", ")", "\n", "return", "dist_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.src.losses.sample_entropy": [[63, 79], ["losses.pairwise_euclidean", "pairwise_euclidean.max().detach", "torch.autograd.Variable().cuda", "samples.size", "pairwise_euclidean.max", "samples.size", "torch.autograd.Variable", "torch.eye", "torch.eye", "pairwise_euclidean.size", "dist_mat_d.min"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.src.losses.pairwise_euclidean"], ["", "def", "sample_entropy", "(", "samples", ")", ":", "\n", "\n", "# Assume B x C input", "\n", "\n", "    ", "dist_mat", "=", "pairwise_euclidean", "(", "samples", ")", "\n", "\n", "# Get max and add it to diag", "\n", "m", "=", "dist_mat", ".", "max", "(", ")", ".", "detach", "(", ")", "\n", "dist_mat_d", "=", "dist_mat", "+", "Variable", "(", "torch", ".", "eye", "(", "dist_mat", ".", "size", "(", "0", ")", ")", "*", "(", "m", ".", "data", "[", "0", "]", "+", "1", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "entropy", "=", "(", "dist_mat_d", ".", "min", "(", "1", ")", "[", "0", "]", "+", "1e-4", ")", ".", "log", "(", ")", ".", "sum", "(", ")", "\n", "\n", "entropy", "*=", "(", "samples", ".", "size", "(", "1", ")", "+", "0.", ")", "/", "samples", ".", "size", "(", "0", ")", "\n", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.Linear.__init__": [[27, 36], ["super().__init__", "spectral_norm.Linear.register_buffer", "spectral_norm.Linear.register_buffer", "torch.nn.init.constant_", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "spectral_norm_pi", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "spectral_norm_pi", "=", "spectral_norm_pi", "\n", "if", "spectral_norm_pi", ">", "0", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"u\"", ",", "torch", ".", "randn", "(", "(", "1", ",", "self", ".", "out_features", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"u\"", ",", "None", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ".", "data", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.Linear.forward": [[38, 52], ["torch.nn.functional.linear", "spectral_norm.Linear.weight.view", "spectral_norm.max_singular_value", "torch.div"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.max_singular_value"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "spectral_norm_pi", ">", "0", ":", "\n", "            ", "w_mat", "=", "self", ".", "weight", ".", "view", "(", "self", ".", "out_features", ",", "-", "1", ")", "\n", "u", ",", "sigma", ",", "_", "=", "max_singular_value", "(", "w_mat", ",", "self", ".", "u", ",", "self", ".", "spectral_norm_pi", ")", "\n", "\n", "# w_bar = torch.div(w_mat, sigma)", "\n", "w_bar", "=", "torch", ".", "div", "(", "self", ".", "weight", ",", "sigma", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "u", "=", "u", "\n", "# self.w_bar = w_bar.detach()", "\n", "# self.sigma = sigma.detach()", "\n", "", "", "else", ":", "\n", "            ", "w_bar", "=", "self", ".", "weight", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "w_bar", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.Conv2d.__init__": [[56, 65], ["super().__init__", "spectral_norm.Conv2d.register_buffer", "spectral_norm.Conv2d.register_buffer", "torch.nn.init.constant_", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "spectral_norm_pi", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "spectral_norm_pi", "=", "spectral_norm_pi", "\n", "if", "spectral_norm_pi", ">", "0", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"u\"", ",", "torch", ".", "randn", "(", "(", "1", ",", "self", ".", "out_channels", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"u\"", ",", "None", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ".", "data", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.Conv2d.forward": [[66, 78], ["torch.nn.functional.conv2d", "spectral_norm.Conv2d.weight.view", "spectral_norm.max_singular_value", "torch.div"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.max_singular_value"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "spectral_norm_pi", ">", "0", ":", "\n", "            ", "w_mat", "=", "self", ".", "weight", ".", "view", "(", "self", ".", "out_channels", ",", "-", "1", ")", "\n", "u", ",", "sigma", ",", "_", "=", "max_singular_value", "(", "w_mat", ",", "self", ".", "u", ",", "self", ".", "spectral_norm_pi", ")", "\n", "w_bar", "=", "torch", ".", "div", "(", "self", ".", "weight", ",", "sigma", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "u", "=", "u", "\n", "", "", "else", ":", "\n", "            ", "w_bar", "=", "self", ".", "weight", "\n", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "w_bar", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.Embedding.__init__": [[82, 89], ["super().__init__", "spectral_norm.Embedding.register_buffer", "spectral_norm.Embedding.register_buffer", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "spectral_norm_pi", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "spectral_norm_pi", "=", "spectral_norm_pi", "\n", "if", "spectral_norm_pi", ">", "0", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"u\"", ",", "torch", ".", "randn", "(", "(", "1", ",", "self", ".", "num_embeddings", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"u\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.Embedding.forward": [[90, 103], ["torch.nn.functional.embedding", "spectral_norm.Embedding.weight.view", "spectral_norm.max_singular_value", "torch.div"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.max_singular_value"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "spectral_norm_pi", ">", "0", ":", "\n", "            ", "w_mat", "=", "self", ".", "weight", ".", "view", "(", "self", ".", "num_embeddings", ",", "-", "1", ")", "\n", "u", ",", "sigma", ",", "_", "=", "max_singular_value", "(", "w_mat", ",", "self", ".", "u", ",", "self", ".", "spectral_norm_pi", ")", "\n", "w_bar", "=", "torch", ".", "div", "(", "self", ".", "weight", ",", "sigma", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "u", "=", "u", "\n", "", "", "else", ":", "\n", "            ", "w_bar", "=", "self", ".", "weight", "\n", "\n", "", "return", "F", ".", "embedding", "(", "\n", "input", ",", "w_bar", ",", "self", ".", "padding_idx", ",", "self", ".", "max_norm", ",", "\n", "self", ".", "norm_type", ",", "self", ".", "scale_grad_by_freq", ",", "self", ".", "sparse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.SpectralNorm.__init__": [[106, 114], ["torch.nn.Module.__init__", "spectral_norm.SpectralNorm.register_buffer", "torch.randn", "getattr"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "name", "=", "'weight'", ",", "power_iterations", "=", "1", ")", ":", "\n", "        ", "super", "(", "SpectralNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "power_iterations", "=", "power_iterations", "\n", "self", ".", "sigma", "=", "None", "\n", "self", ".", "w_bar", "=", "None", "\n", "self", ".", "register_buffer", "(", "\"u\"", ",", "torch", ".", "randn", "(", "getattr", "(", "module", ",", "name", ")", ".", "data", ".", "shape", "[", "0", "]", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.SpectralNorm._update_u_v": [[116, 125], ["getattr", "torch.svd", "spectral_norm.SpectralNorm.sigma.expand_as"], "methods", ["None"], ["", "def", "_update_u_v", "(", "self", ")", ":", "\n", "\n", "        ", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", ")", "\n", "_", ",", "sigma", ",", "_", "=", "torch", ".", "svd", "(", "w", ".", "data", ")", "\n", "self", ".", "sigma", "=", "sigma", "[", "0", "]", "\n", "\n", "self", ".", "w_bar", "=", "w", "/", "self", ".", "sigma", ".", "expand_as", "(", "w", ")", "\n", "\n", "w", ".", "data", "=", "self", ".", "w_bar", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.SpectralNorm.forward": [[139, 148], ["getattr", "torch.svd", "torch.nn.functional.linear", "spectral_norm.SpectralNorm.module.forward", "spectral_norm.SpectralNorm.sigma.expand_as"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# self._update_u_v()", "\n", "        ", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", ")", "\n", "_", ",", "sigma", ",", "_", "=", "torch", ".", "svd", "(", "w", ".", "data", ")", "\n", "self", ".", "sigma", "=", "sigma", "[", "0", "]", "\n", "\n", "self", ".", "w_bar", "=", "w", "/", "self", ".", "sigma", ".", "expand_as", "(", "w", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "input", ",", "self", ".", "w_bar", ",", "self", ".", "module", ".", "bias", ")", "\n", "return", "self", ".", "module", ".", "forward", "(", "*", "args", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.l2normalize": [[7, 9], ["v.norm"], "function", ["None"], ["def", "l2normalize", "(", "v", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "v", "/", "(", "v", ".", "norm", "(", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.max_singular_value": [[12, 22], ["range", "torch.sum", "spectral_norm.l2normalize", "spectral_norm.l2normalize", "torch.mm", "torch.mm", "torch.mm", "torch.t"], "function", ["home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.l2normalize", "home.repos.pwc.inspect_result.somepago_AMA.layers.spectral_norm.l2normalize"], ["", "def", "max_singular_value", "(", "w_mat", ",", "u", ",", "power_iterations", ")", ":", "\n", "\n", "    ", "for", "_", "in", "range", "(", "power_iterations", ")", ":", "\n", "        ", "v", "=", "l2normalize", "(", "torch", ".", "mm", "(", "u", ",", "w_mat", ".", "data", ")", ")", "\n", "\n", "u", "=", "l2normalize", "(", "torch", ".", "mm", "(", "v", ",", "torch", ".", "t", "(", "w_mat", ".", "data", ")", ")", ")", "\n", "\n", "", "sigma", "=", "torch", ".", "sum", "(", "torch", ".", "mm", "(", "u", ",", "w_mat", ")", "*", "v", ")", "\n", "\n", "return", "u", ",", "sigma", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__": [[8, 17], ["super().__init__", "torch.nn.BatchNorm2d", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_categories", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "False", ",", "\n", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "CategoricalBatchNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_norm", "=", "BatchNorm2d", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "gamma_c", "=", "torch", ".", "nn", ".", "Embedding", "(", "num_categories", ",", "num_features", ")", "\n", "self", ".", "beta_c", "=", "torch", ".", "nn", ".", "Embedding", "(", "num_categories", ",", "num_features", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "batch_norm", ".", "running_var", ".", "data", ",", "0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "gamma_c", ".", "weight", ".", "data", ",", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "beta_c", ".", "weight", ".", "data", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somepago_AMA.layers.categorical_batch_norm.CategoricalBatchNorm.forward": [[18, 25], ["categorical_batch_norm.CategoricalBatchNorm.batch_norm", "categorical_batch_norm.CategoricalBatchNorm.gamma_c", "categorical_batch_norm.CategoricalBatchNorm.beta_c", "categorical_batch_norm.CategoricalBatchNorm.unsqueeze().unsqueeze().expand_as", "categorical_batch_norm.CategoricalBatchNorm.unsqueeze().unsqueeze().expand_as", "categorical_batch_norm.CategoricalBatchNorm.unsqueeze().unsqueeze", "categorical_batch_norm.CategoricalBatchNorm.unsqueeze().unsqueeze", "categorical_batch_norm.CategoricalBatchNorm.unsqueeze", "categorical_batch_norm.CategoricalBatchNorm.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.somepago_AMA.None.cifar_models_bNorm.Gblock.batch_norm"], ["", "def", "forward", "(", "self", ",", "input", ",", "y", ")", ":", "\n", "        ", "ret", "=", "self", ".", "batch_norm", "(", "input", ")", "\n", "gamma", "=", "self", ".", "gamma_c", "(", "y", ")", "\n", "beta", "=", "self", ".", "beta_c", "(", "y", ")", "\n", "gamma_b", "=", "gamma", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "expand_as", "(", "ret", ")", "\n", "beta_b", "=", "beta", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "expand_as", "(", "ret", ")", "\n", "return", "gamma_b", "*", "ret", "+", "beta_b", "\n", "", "", ""]]}