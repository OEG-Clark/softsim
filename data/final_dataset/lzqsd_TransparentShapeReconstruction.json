{"home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.normalFeature.__init__": [[9, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "normalFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "8", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn2", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.normalFeature.forward": [[16, 20], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.normalFeature.gn1", "models.normalFeature.gn2", "models.normalFeature.conv1", "models.normalFeature.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "gn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "True", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "gn2", "(", "self", ".", "conv2", "(", "x1", ")", ")", ",", "True", ")", "\n", "return", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.encoder.__init__": [[22, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ",", "isAddCostVolume", "=", "False", ")", ":", "\n", "        ", "super", "(", "encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "15", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn2", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "if", "isAddCostVolume", "==", "True", ":", "\n", "            ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "", "self", ".", "gn3", "=", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn4", "=", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn5", "=", "nn", ".", "GroupNorm", "(", "32", ",", "512", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn6", "=", "nn", ".", "GroupNorm", "(", "32", ",", "512", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.encoder.forward": [[40, 54], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.encoder.gn1", "models.encoder.gn2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.encoder.gn3", "models.encoder.gn4", "models.encoder.gn5", "models.encoder.gn6", "models.encoder.conv1", "models.encoder.conv2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "models.encoder.conv3", "models.encoder.conv4", "models.encoder.conv5", "models.encoder.conv6", "torch.interpolate.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.interpolate.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "volume", "=", "None", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "gn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "True", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "gn2", "(", "self", ".", "conv2", "(", "x1", ")", ")", ",", "True", ")", "\n", "\n", "if", "not", "volume", "is", "None", ":", "\n", "            ", "if", "volume", ".", "size", "(", "2", ")", "!=", "x2", ".", "size", "(", "2", ")", "or", "volume", ".", "size", "(", "3", ")", "!=", "x2", ".", "size", "(", "3", ")", ":", "\n", "                ", "volume", "=", "F", ".", "interpolate", "(", "volume", ",", "[", "x2", ".", "size", "(", "2", ")", ",", "x2", ".", "size", "(", "3", ")", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "", "x2", "=", "torch", ".", "cat", "(", "[", "volume", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "", "x3", "=", "F", ".", "relu", "(", "self", ".", "gn3", "(", "self", ".", "conv3", "(", "x2", ")", ")", ",", "True", ")", "\n", "x4", "=", "F", ".", "relu", "(", "self", ".", "gn4", "(", "self", ".", "conv4", "(", "x3", ")", ")", ",", "True", ")", "\n", "x5", "=", "F", ".", "relu", "(", "self", ".", "gn5", "(", "self", ".", "conv5", "(", "x4", ")", ")", ",", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gn6", "(", "self", ".", "conv6", "(", "x5", ")", ")", ",", "True", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.decoder.__init__": [[57, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# branch for normal prediction", "\n", "self", ".", "dconv0", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn0", "=", "nn", ".", "GroupNorm", "(", "32", ",", "512", ")", "\n", "self", ".", "dconv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn1", "=", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", "\n", "self", ".", "dconv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn2", "=", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", "\n", "self", ".", "dconv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn3", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n", "self", ".", "dconv4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn4", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n", "self", ".", "dconv5", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn5", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "\n", "self", ".", "convFinal", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.decoder.forward": [[75, 90], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "models.decoder.dgn0", "models.decoder.dgn1", "models.decoder.dgn2", "models.decoder.dgn3", "models.decoder.dgn4", "models.decoder.dgn5", "models.decoder.convFinal", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "models.decoder.dconv0", "models.decoder.dconv1", "models.decoder.dconv2", "models.decoder.dconv3", "models.decoder.dconv4", "models.decoder.dconv5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "dgn0", "(", "self", ".", "dconv0", "(", "x", ")", ")", ",", "True", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "dgn1", "(", "self", ".", "dconv1", "(", "x1", ")", ")", ",", "True", ")", "\n", "x3", "=", "F", ".", "relu", "(", "self", ".", "dgn2", "(", "self", ".", "dconv2", "(", "F", ".", "interpolate", "(", "x2", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", ")", ",", "True", ")", "\n", "x4", "=", "F", ".", "relu", "(", "self", ".", "dgn3", "(", "self", ".", "dconv3", "(", "x3", ")", ")", ",", "True", ")", "\n", "x5", "=", "F", ".", "relu", "(", "self", ".", "dgn4", "(", "self", ".", "dconv4", "(", "F", ".", "interpolate", "(", "x4", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", ")", ",", "True", ")", "\n", "x6", "=", "F", ".", "relu", "(", "self", ".", "dgn5", "(", "self", ".", "dconv5", "(", "x5", ")", ")", ",", "True", ")", "\n", "\n", "x_orig", "=", "torch", ".", "tanh", "(", "self", ".", "convFinal", "(", "F", ".", "interpolate", "(", "x6", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", ")", "\n", "\n", "normal1", ",", "normal2", "=", "torch", ".", "split", "(", "x_orig", ",", "[", "3", ",", "3", "]", ",", "dim", "=", "1", ")", "\n", "normal1", "=", "normal1", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal1", "*", "normal1", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "min", "=", "1e-6", ")", "\n", "normal2", "=", "normal2", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal2", "*", "normal2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "min", "=", "1e-6", ")", "\n", "\n", "return", "normal1", ",", "normal2", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.renderer.__init__": [[93, 127], ["numpy.meshgrid", "numpy.tan", "numpy.concatenate().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.arange().reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.linspace", "numpy.linspace", "float", "numpy.ones", "numpy.maximum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "float", "numpy.concatenate", "numpy.arange", "numpy.sqrt", "numpy.sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "eta1", "=", "1.0003", ",", "eta2", "=", "1.4723", ",", "\n", "isCuda", "=", "True", ",", "gpuId", "=", "0", ",", "\n", "batchSize", "=", "12", ",", "\n", "fov", "=", "63.4", ",", "imWidth", "=", "480", ",", "imHeight", "=", "360", ",", "\n", "envWidth", "=", "512", ",", "envHeight", "=", "256", ")", ":", "\n", "# Set the parameters", "\n", "        ", "self", ".", "eta1", "=", "eta1", "\n", "self", ".", "eta2", "=", "eta2", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "self", ".", "fov", "=", "fov", "/", "180", "*", "np", ".", "pi", "\n", "self", ".", "imHeight", "=", "imHeight", "\n", "self", ".", "imWidth", "=", "imWidth", "\n", "self", ".", "envHeight", "=", "envHeight", "\n", "self", ".", "envWidth", "=", "envWidth", "\n", "self", ".", "isCuda", "=", "isCuda", "\n", "self", ".", "gpuId", "=", "gpuId", "\n", "\n", "# Compute view direction", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "imWidth", ")", ",", "\n", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "imHeight", ")", ")", "\n", "tan_fovx", "=", "np", ".", "tan", "(", "self", ".", "fov", "/", "2.0", ")", "\n", "tan_fovy", "=", "tan_fovx", "/", "float", "(", "imWidth", ")", "*", "float", "(", "imHeight", ")", "\n", "x", ",", "y", "=", "x", "*", "tan_fovx", ",", "-", "y", "*", "tan_fovy", "\n", "z", "=", "-", "np", ".", "ones", "(", "[", "imHeight", ",", "imWidth", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x", ",", "y", ",", "z", "=", "x", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "y", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "z", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "v", "=", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "v", "=", "v", "/", "np", ".", "maximum", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "v", "*", "v", ",", "axis", "=", "0", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "1e-6", ")", "\n", "v", "=", "v", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "v", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "v", ")", ")", "\n", "\n", "# Compute the offset", "\n", "offset", "=", "np", ".", "arange", "(", "0", ",", "batchSize", ")", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "offset", "=", "(", "offset", "*", "envWidth", "*", "envHeight", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "offset", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "offset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.renderer.refraction": [[128, 154], ["torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum.detach", "torch.sum.detach", "torch.sum.detach", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "refraction", "(", "self", ",", "l", ",", "normal", ",", "eta1", ",", "eta2", ")", ":", "\n", "# l n x 3 x imHeight x imWidth", "\n", "# normal n x 3 x imHeight x imWidth", "\n", "# eta1 float", "\n", "# eta2 float", "\n", "        ", "cos_theta", "=", "torch", ".", "sum", "(", "l", "*", "(", "-", "normal", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "i_p", "=", "l", "+", "normal", "*", "cos_theta", "\n", "t_p", "=", "eta1", "/", "eta2", "*", "i_p", "\n", "\n", "t_p_norm", "=", "torch", ".", "sum", "(", "t_p", "*", "t_p", ",", "dim", "=", "1", ")", "\n", "totalReflectMask", "=", "(", "t_p_norm", ".", "detach", "(", ")", ">", "0.999999", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "t_i", "=", "torch", ".", "sqrt", "(", "1", "-", "torch", ".", "clamp", "(", "t_p_norm", ",", "0", ",", "0.999999", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "normal", ")", "*", "(", "-", "normal", ")", "\n", "t", "=", "t_i", "+", "t_p", "\n", "t", "=", "t", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "t", "*", "t", ",", "dim", "=", "1", ")", ",", "min", "=", "1e-10", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "cos_theta_t", "=", "torch", ".", "sum", "(", "t", "*", "(", "-", "normal", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "e_i", "=", "(", "cos_theta_t", "*", "eta2", "-", "cos_theta", "*", "eta1", ")", "/", "torch", ".", "clamp", "(", "cos_theta_t", "*", "eta2", "+", "cos_theta", "*", "eta1", ",", "min", "=", "1e-10", ")", "\n", "e_p", "=", "(", "cos_theta_t", "*", "eta1", "-", "cos_theta", "*", "eta2", ")", "/", "torch", ".", "clamp", "(", "cos_theta_t", "*", "eta1", "+", "cos_theta", "*", "eta2", ",", "min", "=", "1e-10", ")", "\n", "\n", "attenuate", "=", "torch", ".", "clamp", "(", "0.5", "*", "(", "e_i", "*", "e_i", "+", "e_p", "*", "e_p", ")", ",", "0", ",", "1", ")", ".", "detach", "(", ")", "\n", "\n", "return", "t", ",", "attenuate", ",", "totalReflectMask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.renderer.reflection": [[155, 168], ["torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "reflection", "(", "self", ",", "l", ",", "normal", ")", ":", "\n", "# l n x 3 x imHeight x imWidth", "\n", "# normal n x 3 x imHeight x imWidth", "\n", "# eta1 float", "\n", "# eta2 float", "\n", "        ", "cos_theta", "=", "torch", ".", "sum", "(", "l", "*", "(", "-", "normal", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "r_p", "=", "l", "+", "normal", "*", "cos_theta", "\n", "r_p_norm", "=", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "r_p", "*", "r_p", ",", "dim", "=", "1", ")", ",", "0", ",", "0.999999", ")", "\n", "r_i", "=", "torch", ".", "sqrt", "(", "1", "-", "r_p_norm", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "normal", ")", "*", "normal", "\n", "r", "=", "r_p", "+", "r_i", "\n", "r", "=", "r", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "r", "*", "r", ",", "dim", "=", "1", ")", ",", "min", "=", "1e-10", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.renderer.transformCoordinate": [[169, 192], ["origin.size", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "xAxis.view.view.view", "yAxis.view.view.view", "zAxis.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat.expand", "torch.cat.expand", "torch.cat.expand", "torch.sum.expand", "torch.sum.expand", "torch.sum.expand", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "transformCoordinate", "(", "self", ",", "l", ",", "origin", ",", "lookat", ",", "up", ")", ":", "\n", "        ", "batchSize", "=", "origin", ".", "size", "(", "0", ")", "\n", "assert", "(", "batchSize", "<=", "self", ".", "batchSize", ")", "\n", "\n", "# Rotate to world coordinate", "\n", "zAxis", "=", "origin", "-", "lookat", "\n", "yAxis", "=", "up", "\n", "xAxis", "=", "torch", ".", "cross", "(", "yAxis", ",", "zAxis", ",", "dim", "=", "1", ")", "\n", "xAxis", "=", "xAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "xAxis", "*", "xAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "yAxis", "=", "yAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "yAxis", "*", "yAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "zAxis", "=", "zAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "zAxis", "*", "zAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "\n", "xAxis", "=", "xAxis", ".", "view", "(", "[", "batchSize", ",", "3", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "yAxis", "=", "yAxis", ".", "view", "(", "[", "batchSize", ",", "3", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "zAxis", "=", "zAxis", ".", "view", "(", "[", "batchSize", ",", "3", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "rotMat", "=", "torch", ".", "cat", "(", "[", "xAxis", ",", "yAxis", ",", "zAxis", "]", ",", "dim", "=", "2", ")", "\n", "l", "=", "l", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "l", "=", "torch", ".", "sum", "(", "rotMat", ".", "expand", "(", "[", "batchSize", ",", "3", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "*", "l", ".", "expand", "(", "[", "batchSize", ",", "3", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", ",", "dim", "=", "2", ")", "\n", "l", "=", "l", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "l", "*", "l", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.renderer.sampleEnvLight": [[193, 247], ["envmap.transpose().transpose().reshape.transpose().transpose().reshape.size", "envmap.transpose().transpose().reshape.transpose().transpose().reshape.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.flatten.expand_as().clone().cuda", "torch.flatten.expand_as().clone().cuda", "torch.flatten.expand_as().clone().cuda", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "envmap.transpose().transpose().reshape.transpose().transpose().reshape.transpose().transpose().reshape", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "renderedImg.transpose().transpose.transpose().transpose.reshape", "renderedImg.transpose().transpose.transpose().transpose.transpose().transpose", "models.renderer.offset.detach", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.flatten.expand_as().clone", "torch.flatten.expand_as().clone", "torch.flatten.expand_as().clone", "envmap.transpose().transpose().reshape.transpose().transpose().reshape.transpose().transpose", "w_u.expand_as", "w_d.expand_as", "w_u.expand_as", "w_d.expand_as", "w_r.expand_as", "w_l.expand_as", "renderedImg.transpose().transpose.transpose().transpose.transpose", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.flatten.expand_as", "torch.flatten.expand_as", "torch.flatten.expand_as", "envmap.transpose().transpose().reshape.transpose().transpose().reshape.transpose"], "methods", ["None"], ["", "def", "sampleEnvLight", "(", "self", ",", "l", ",", "envmap", ")", ":", "\n", "        ", "batchSize", "=", "envmap", ".", "size", "(", "0", ")", "\n", "assert", "(", "batchSize", "<=", "self", ".", "batchSize", ")", "\n", "channelNum", "=", "envmap", ".", "size", "(", "1", ")", "\n", "\n", "l", "=", "torch", ".", "clamp", "(", "l", ",", "-", "0.999999", ",", "0.999999", ")", "\n", "# Compute theta and phi", "\n", "x", ",", "y", ",", "z", "=", "torch", ".", "split", "(", "l", ",", "[", "1", ",", "1", ",", "1", "]", ",", "dim", "=", "1", ")", "\n", "theta", "=", "torch", ".", "acos", "(", "y", ")", "\n", "phi", "=", "torch", ".", "atan2", "(", "x", ",", "z", ")", "\n", "v", "=", "theta", "/", "np", ".", "pi", "*", "(", "self", ".", "envHeight", "-", "1", ")", "\n", "u", "=", "(", "-", "phi", "/", "np", ".", "pi", "/", "2.0", "+", "0.5", ")", "*", "(", "self", ".", "envWidth", "-", "1", ")", "\n", "\n", "# Bilinear interpolation to get the new image", "\n", "offset", "=", "self", ".", "offset", ".", "detach", "(", ")", "[", "0", ":", "batchSize", ",", ":", "]", "\n", "offset", "=", "offset", ".", "expand_as", "(", "u", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "u", ",", "v", "=", "torch", ".", "flatten", "(", "u", ")", ",", "torch", ".", "flatten", "(", "v", ")", "\n", "u1", "=", "torch", ".", "clamp", "(", "torch", ".", "floor", "(", "u", ")", ".", "detach", "(", ")", ",", "0", ",", "self", ".", "envWidth", "-", "1", ")", "\n", "v1", "=", "torch", ".", "clamp", "(", "torch", ".", "floor", "(", "v", ")", ".", "detach", "(", ")", ",", "0", ",", "self", ".", "envHeight", "-", "1", ")", "\n", "u2", "=", "torch", ".", "clamp", "(", "torch", ".", "ceil", "(", "u", ")", ".", "detach", "(", ")", ",", "0", ",", "self", ".", "envWidth", "-", "1", ")", "\n", "v2", "=", "torch", ".", "clamp", "(", "torch", ".", "ceil", "(", "v", ")", ".", "detach", "(", ")", ",", "0", ",", "self", ".", "envHeight", "-", "1", ")", "\n", "\n", "w_r", "=", "(", "u", "-", "u1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "w_l", "=", "(", "1", "-", "w_r", ")", "\n", "w_u", "=", "(", "v2", "-", "v", ")", ".", "unsqueeze", "(", "1", ")", "\n", "w_d", "=", "(", "1", "-", "w_u", ")", "\n", "\n", "u1", ",", "v1", "=", "u1", ".", "long", "(", ")", ",", "v1", ".", "long", "(", ")", "\n", "u2", ",", "v2", "=", "u2", ".", "long", "(", ")", ",", "v2", ".", "long", "(", ")", "\n", "offset", "=", "torch", ".", "flatten", "(", "offset", ")", "\n", "size_0", "=", "self", ".", "envWidth", "*", "self", ".", "envHeight", "*", "batchSize", "\n", "envmap", "=", "envmap", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "reshape", "(", "[", "size_0", ",", "channelNum", "]", ")", "\n", "index", "=", "(", "v1", "*", "self", ".", "envWidth", "+", "u2", ")", "+", "offset", "\n", "envmap_ru", "=", "torch", ".", "index_select", "(", "envmap", ",", "0", ",", "index", ")", "\n", "index", "=", "(", "v2", "*", "self", ".", "envWidth", "+", "u2", ")", "+", "offset", "\n", "envmap_rd", "=", "torch", ".", "index_select", "(", "envmap", ",", "0", ",", "index", ")", "\n", "index", "=", "(", "v1", "*", "self", ".", "envWidth", "+", "u1", ")", "+", "offset", "\n", "envmap_lu", "=", "torch", ".", "index_select", "(", "envmap", ",", "0", ",", "index", ")", "\n", "index", "=", "(", "v2", "*", "self", ".", "envWidth", "+", "u1", ")", "+", "offset", "\n", "envmap_ld", "=", "torch", ".", "index_select", "(", "envmap", ",", "0", ",", "index", ")", "\n", "\n", "envmap_r", "=", "envmap_ru", "*", "w_u", ".", "expand_as", "(", "envmap_ru", ")", "+", "envmap_rd", "*", "w_d", ".", "expand_as", "(", "envmap_rd", ")", "\n", "envmap_l", "=", "envmap_lu", "*", "w_u", ".", "expand_as", "(", "envmap_lu", ")", "+", "envmap_ld", "*", "w_d", ".", "expand_as", "(", "envmap_ld", ")", "\n", "renderedImg", "=", "envmap_r", "*", "w_r", ".", "expand_as", "(", "envmap_r", ")", "+", "envmap_l", "*", "w_l", ".", "expand_as", "(", "envmap_l", ")", "\n", "\n", "# Post processing", "\n", "renderedImg", "=", "renderedImg", ".", "reshape", "(", "[", "batchSize", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", ",", "3", "]", ")", "\n", "renderedImg", "=", "renderedImg", ".", "transpose", "(", "3", ",", "2", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "return", "renderedImg", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.renderer.getBackground": [[248, 253], ["models.renderer.v.expand_as().clone().cuda", "models.renderer.transformCoordinate", "models.renderer.sampleEnvLight", "models.renderer.v.expand_as().clone", "models.renderer.v.expand_as"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.transformCoordinate", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.sampleEnvLight"], ["", "def", "getBackground", "(", "self", ",", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1", ")", ":", "\n", "        ", "l", "=", "self", ".", "v", ".", "expand_as", "(", "normal1", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "l", "=", "self", ".", "transformCoordinate", "(", "l", ",", "origin", ",", "lookat", ",", "up", ")", "\n", "backImg", "=", "self", ".", "sampleEnvLight", "(", "l", ",", "envmap", ")", "\n", "return", "backImg", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.renderer.forward": [[254, 280], ["models.renderer.v.expand_as().clone().cuda", "models.renderer.refraction", "models.renderer.refraction", "models.renderer.reflection", "models.renderer.transformCoordinate", "models.renderer.transformCoordinate", "models.renderer.sampleEnvLight", "models.renderer.sampleEnvLight", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "models.renderer.v.expand_as().clone", "models.renderer.v.expand_as"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.refraction", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.refraction", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.reflection", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.transformCoordinate", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.transformCoordinate", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.sampleEnvLight", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.sampleEnvLight"], ["", "def", "forward", "(", "self", ",", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1", ",", "normal2", ")", ":", "\n", "# origin n x 3", "\n", "# lookat n x 3", "\n", "# up n x 3", "\n", "# envmap n x 3 x envHeight x envWidth", "\n", "# normal1 n x 3 x imHeight x imWidth", "\n", "# normal2 n x 3 x imHeight x imWidth", "\n", "# view 3 x imHeight x imWidth", "\n", "        ", "l", "=", "self", ".", "v", ".", "expand_as", "(", "normal1", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "l_t", ",", "attenuate1", ",", "mask1", "=", "self", ".", "refraction", "(", "l", ",", "normal1", ",", "self", ".", "eta1", ",", "self", ".", "eta2", ")", "\n", "l_t", ",", "attenuate2", ",", "mask2", "=", "self", ".", "refraction", "(", "l_t", ",", "normal2", ",", "self", ".", "eta2", ",", "self", ".", "eta1", ")", "\n", "\n", "l_r", "=", "self", ".", "reflection", "(", "l", ",", "normal1", ")", "\n", "\n", "l_t", "=", "self", ".", "transformCoordinate", "(", "l_t", ",", "origin", ",", "lookat", ",", "up", ")", "\n", "l_r", "=", "self", ".", "transformCoordinate", "(", "l_r", ",", "origin", ",", "lookat", ",", "up", ")", "\n", "\n", "refractImg", "=", "self", ".", "sampleEnvLight", "(", "l_t", ",", "envmap", ")", "\n", "refractImg", "=", "refractImg", "*", "(", "1", "-", "attenuate1", ")", "*", "(", "1", "-", "attenuate2", ")", "\n", "\n", "reflectImg", "=", "self", ".", "sampleEnvLight", "(", "l_r", ",", "envmap", ")", "\n", "reflectImg", "=", "reflectImg", "*", "attenuate1", "\n", "\n", "mask", "=", "torch", ".", "clamp", "(", "(", "mask1", "+", "mask2", ")", ".", "float", "(", ")", ",", "0", ",", "1", ")", "\n", "\n", "return", "refractImg", ",", "reflectImg", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.buildCostVolume.__init__": [[282, 336], ["phis.squeeze().astype.squeeze().astype.squeeze().astype", "thetas.squeeze().astype.squeeze().astype.squeeze().astype", "numpy.meshgrid", "numpy.meshgrid", "numpy.meshgrid", "numpy.meshgrid", "thetaJitters1.reshape.reshape.reshape", "thetaJitters2.reshape.reshape.reshape", "phiJitters1.reshape.reshape.reshape", "phiJitters2.reshape.reshape.reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.buildCostVolume.thetas1.size", "models.renderer", "numpy.array", "up.reshape.reshape.reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "thetas2.reshape", "thetas1.reshape", "phis2.reshape", "phis1.reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "phis.squeeze().astype.squeeze().astype.squeeze", "thetas.squeeze().astype.squeeze().astype.squeeze"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "thetas", ",", "phis", ",", "thetaJitters", ",", "phiJitters", ",", "isCuda", "=", "True", ",", "\n", "eta1", "=", "1.0003", ",", "eta2", "=", "1.4723", ",", "\n", "batchSize", "=", "2", ",", "\n", "fov", "=", "63.4", ",", "imWidth", "=", "480", ",", "imHeight", "=", "360", ",", "\n", "envWidth", "=", "512", ",", "envHeight", "=", "256", ",", "sampleNum", "=", "50", ",", "lamb", "=", "1.0", ")", ":", "\n", "\n", "        ", "phis", "=", "phis", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "thetas", "=", "thetas", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "lamb", "=", "lamb", "\n", "\n", "thetas2", ",", "thetas1", "=", "np", ".", "meshgrid", "(", "thetas", ",", "thetas", ")", "\n", "thetaJitters1", ",", "thetaJitters2", "=", "np", ".", "meshgrid", "(", "thetaJitters", ",", "thetaJitters", ")", "\n", "\n", "phis2", ",", "phis1", "=", "np", ".", "meshgrid", "(", "phis", ",", "phis", ")", "\n", "phiJitters1", ",", "phiJitters2", "=", "np", ".", "meshgrid", "(", "phiJitters", ",", "phiJitters", ")", "\n", "\n", "thetas2", ",", "thetas1", "=", "thetas2", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", ",", "thetas1", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "thetaJitters1", "=", "thetaJitters1", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "thetaJitters2", "=", "thetaJitters2", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "phis2", ",", "phis1", "=", "phis2", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", ",", "phis1", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "phiJitters1", "=", "phiJitters1", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "phiJitters2", "=", "phiJitters2", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "thetas1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "thetas1", ")", ")", "\n", "self", ".", "thetas2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "thetas2", ")", ")", "\n", "self", ".", "thetaJitters1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "thetaJitters1", ")", ")", "\n", "self", ".", "thetaJitters2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "thetaJitters2", ")", ")", "\n", "\n", "self", ".", "phis1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "phis1", ")", ")", "\n", "self", ".", "phis2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "phis2", ")", ")", "\n", "self", ".", "phiJitters1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "phiJitters1", ")", ")", "\n", "self", ".", "phiJitters2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "phiJitters2", ")", ")", "\n", "\n", "self", ".", "inputNum", "=", "self", ".", "thetas1", ".", "size", "(", "1", ")", "\n", "self", ".", "renderer", "=", "renderer", "(", "eta1", "=", "eta1", ",", "eta2", "=", "eta2", ",", "\n", "isCuda", "=", "isCuda", ",", "\n", "batchSize", "=", "batchSize", "*", "self", ".", "inputNum", ",", "\n", "fov", "=", "fov", ",", "imWidth", "=", "imWidth", ",", "imHeight", "=", "imHeight", ",", "\n", "envWidth", "=", "envWidth", ",", "envHeight", "=", "envHeight", ")", "\n", "\n", "self", ".", "imWidth", "=", "imWidth", "\n", "self", ".", "imHeight", "=", "imHeight", "\n", "self", ".", "envWidth", "=", "envWidth", "\n", "self", ".", "envHeight", "=", "envHeight", "\n", "\n", "self", ".", "sampleNum", "=", "sampleNum", "\n", "\n", "up", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "up", "=", "up", ".", "reshape", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "up", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "up", ")", ")", "\n", "\n", "self", ".", "isCuda", "=", "isCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.buildCostVolume.forward": [[337, 413], ["normal1.size", "imBatch.reshape.reshape.unsqueeze().expand", "seg1Batch.reshape.reshape.unsqueeze().expand", "envmap.reshape.reshape.unsqueeze().expand", "origin.reshape.reshape.unsqueeze().expand", "lookat.reshape.reshape.unsqueeze().expand", "up.reshape.reshape.unsqueeze().expand", "imBatch.reshape.reshape.reshape", "seg1Batch.reshape.reshape.reshape", "envmap.reshape.reshape.reshape", "origin.reshape.reshape.reshape", "lookat.reshape.reshape.reshape", "up.reshape.reshape.reshape", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "models.buildCostVolume.renderer.forward", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.buildCostVolume.up.clone().cuda", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "normal1Array.reshape.reshape.reshape", "normal2Array.reshape.reshape.reshape", "models.buildCostVolume.renderer.forward", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "imBatch.reshape.reshape.unsqueeze", "seg1Batch.reshape.reshape.unsqueeze", "envmap.reshape.reshape.unsqueeze", "origin.reshape.reshape.unsqueeze", "lookat.reshape.reshape.unsqueeze", "up.reshape.reshape.unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "yAxis1.unsqueeze", "yAxis2.unsqueeze", "zAxis1.unsqueeze", "zAxis2.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.buildCostVolume.up.clone", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "numpy.random.random().astype", "numpy.random.random().astype", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "numpy.random.random().astype", "numpy.random.random().astype", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.random.random", "numpy.random.random", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "numpy.random.random", "numpy.random.random", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.buildCostVolume.thetas1.size", "models.buildCostVolume.phis1.size", "models.buildCostVolume.thetas2.size", "models.buildCostVolume.phis2.size"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.forward", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.forward"], ["", "def", "forward", "(", "self", ",", "imBatch", ",", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1", ",", "normal2", ",", "seg1Batch", ")", ":", "\n", "        ", "batchSize", "=", "normal1", ".", "size", "(", "0", ")", "\n", "imBatch", "=", "imBatch", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "seg1Batch", "=", "seg1Batch", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "1", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "envmap", "=", "envmap", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", ",", "self", ".", "envHeight", ",", "self", ".", "envWidth", "]", ")", "\n", "origin", "=", "origin", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "lookat", "=", "lookat", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "up", "=", "up", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "\n", "imBatch", "=", "imBatch", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "seg1Batch", "=", "seg1Batch", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "1", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "envmap", "=", "envmap", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "envHeight", ",", "self", ".", "envWidth", "]", ")", "\n", "origin", "=", "origin", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "lookat", "=", "lookat", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "up", "=", "up", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "\n", "normal1Best", "=", "Variable", "(", "torch", ".", "zeros", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "cuda", "(", ")", "\n", "normal2Best", "=", "Variable", "(", "torch", ".", "zeros", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "n", "in", "range", "(", "0", ",", "self", ".", "sampleNum", ")", ":", "\n", "            ", "upAxis", "=", "self", ".", "up", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "yAxis1", "=", "upAxis", "-", "torch", ".", "sum", "(", "upAxis", "*", "normal1", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "*", "normal1", "\n", "yAxis1", "=", "yAxis1", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "yAxis1", "*", "yAxis1", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "zAxis1", "=", "normal1", "\n", "xAxis1", "=", "torch", ".", "cross", "(", "yAxis1", ",", "zAxis1", ",", "dim", "=", "1", ")", "\n", "xAxis1", "=", "xAxis1", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "xAxis1", "*", "xAxis1", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "\n", "yAxis2", "=", "upAxis", "-", "torch", ".", "sum", "(", "upAxis", "*", "normal2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "*", "normal2", "\n", "yAxis2", "=", "yAxis2", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "yAxis2", "*", "yAxis2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "zAxis2", "=", "normal2", "\n", "xAxis2", "=", "torch", ".", "cross", "(", "yAxis2", ",", "zAxis2", ",", "dim", "=", "1", ")", "\n", "xAxis2", "=", "xAxis2", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "xAxis2", "*", "xAxis2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "\n", "xAxis1", ",", "xAxis2", "=", "xAxis1", ".", "unsqueeze", "(", "1", ")", ",", "xAxis2", ".", "unsqueeze", "(", "1", ")", "\n", "yAxis1", ",", "yAxis2", "=", "yAxis1", ".", "unsqueeze", "(", "1", ")", ",", "yAxis2", ".", "unsqueeze", "(", "1", ")", "\n", "zAxis1", ",", "zAxis2", "=", "zAxis1", ".", "unsqueeze", "(", "1", ")", ",", "zAxis2", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "thetaOffsets1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "(", "np", ".", "random", ".", "random", "(", "self", ".", "thetas1", ".", "size", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ")", "\n", "thetas1", "=", "(", "self", ".", "thetas1", "+", "self", ".", "thetaJitters1", "*", "thetaOffsets1", ")", ".", "cuda", "(", ")", "\n", "phiOffsets1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "(", "np", ".", "random", ".", "random", "(", "self", ".", "phis1", ".", "size", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ")", "\n", "phis1", "=", "(", "self", ".", "phis1", "+", "self", ".", "phiJitters1", "*", "phiOffsets1", ")", ".", "cuda", "(", ")", "\n", "normal1Array", "=", "torch", ".", "sin", "(", "thetas1", ")", "*", "torch", ".", "cos", "(", "phis1", ")", "*", "xAxis1", "+", "torch", ".", "sin", "(", "thetas1", ")", "*", "torch", ".", "sin", "(", "phis1", ")", "*", "yAxis1", "+", "torch", ".", "cos", "(", "thetas1", ")", "*", "zAxis1", "\n", "\n", "thetaOffsets2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "(", "np", ".", "random", ".", "random", "(", "self", ".", "thetas2", ".", "size", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ")", "\n", "thetas2", "=", "(", "self", ".", "thetas2", "+", "self", ".", "thetaJitters2", "*", "thetaOffsets2", ")", ".", "cuda", "(", ")", "\n", "phiOffsets2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "(", "np", ".", "random", ".", "random", "(", "self", ".", "phis2", ".", "size", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ")", "\n", "phis2", "=", "(", "self", ".", "phis2", "+", "self", ".", "phiJitters2", "*", "phiOffsets2", ")", ".", "cuda", "(", ")", "\n", "normal2Array", "=", "torch", ".", "sin", "(", "thetas2", ")", "*", "torch", ".", "cos", "(", "phis2", ")", "*", "xAxis2", "+", "torch", ".", "sin", "(", "thetas2", ")", "*", "torch", ".", "sin", "(", "phis2", ")", "*", "yAxis2", "+", "torch", ".", "cos", "(", "thetas2", ")", "*", "zAxis2", "\n", "\n", "normal1Array", "=", "normal1Array", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "normal2Array", "=", "normal2Array", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "\n", "refractImg", ",", "reflectImg", ",", "mask", "=", "self", ".", "renderer", ".", "forward", "(", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1Array", ",", "normal2Array", ")", "\n", "renderedImg", "=", "torch", ".", "clamp", "(", "refractImg", "+", "refractImg", ",", "0", ",", "1", ")", "\n", "\n", "cost", "=", "torch", ".", "norm", "(", "renderedImg", "-", "imBatch", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "normal1Best", "+=", "normal1Array", "*", "torch", ".", "exp", "(", "-", "self", ".", "lamb", "*", "cost", ")", "\n", "normal2Best", "+=", "normal2Array", "*", "torch", ".", "exp", "(", "-", "self", ".", "lamb", "*", "cost", ")", "\n", "\n", "", "normal1Best", "=", "normal1Best", "*", "seg1Batch", "\n", "normal2Best", "=", "normal2Best", "*", "seg1Batch", "\n", "\n", "normal1Best", "=", "normal1Best", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal1Best", "*", "normal1Best", ",", "dim", "=", "1", ")", ")", ",", "min", "=", "1e-10", ")", ".", "unsqueeze", "(", "1", ")", "\n", "normal2Best", "=", "normal2Best", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal2Best", "*", "normal2Best", ",", "dim", "=", "1", ")", ")", ",", "min", "=", "1e-10", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "refractImg", ",", "reflectImg", ",", "mask", "=", "self", ".", "renderer", ".", "forward", "(", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1Best", ",", "normal2Best", ")", "\n", "renderedImg", "=", "torch", ".", "clamp", "(", "refractImg", "+", "refractImg", ",", "0", ",", "1", ")", "\n", "cost", "=", "torch", ".", "norm", "(", "renderedImg", "-", "imBatch", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "costVolume", "=", "torch", ".", "cat", "(", "[", "cost", ",", "mask", ",", "normal1Best", ",", "normal2Best", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "costVolume", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.buildVisualHull.__init__": [[416, 434], ["numpy.meshgrid", "numpy.concatenate().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.linspace", "numpy.linspace", "numpy.linspace", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.concatenate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fov", "=", "63.4", ",", "volumeSize", "=", "32", ")", ":", "\n", "        ", "minX", ",", "maxX", "=", "-", "1.1", ",", "1.1", "\n", "minY", ",", "maxY", "=", "-", "1.1", ",", "1.1", "\n", "minZ", ",", "maxZ", "=", "-", "1.1", ",", "1.1", "\n", "\n", "y", ",", "x", ",", "z", "=", "np", ".", "meshgrid", "(", "\n", "np", ".", "linspace", "(", "minX", ",", "maxX", ",", "volumeSize", ")", ",", "\n", "np", ".", "linspace", "(", "minY", ",", "maxY", ",", "volumeSize", ")", ",", "\n", "np", ".", "linspace", "(", "minZ", ",", "maxZ", ",", "volumeSize", ")", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "z", "=", "z", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "coord", "=", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "3", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "coord", "=", "coord", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "self", ".", "coord", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "coord", ")", ")", "\n", "\n", "self", ".", "volumeSize", "=", "volumeSize", "\n", "self", ".", "fov", "=", "fov", "/", "180.0", "*", "np", ".", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.models.buildVisualHull.forward": [[436, 511], ["origin.reshape.reshape.size", "error.reshape.reshape.size", "error.reshape.reshape.size", "torch.autograd.Variable().cuda.reshape().astype", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "origin.reshape.reshape.reshape", "xAxis.reshape.reshape.reshape", "yAxis.reshape.reshape.reshape", "zAxis.reshape.reshape.reshape", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "error.reshape.reshape.reshape", "mask.reshape.reshape.reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "numpy.tan", "numpy.arange", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "models.buildVisualHull.coord.cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.floor", "torch.clamp.floor", "torch.clamp.floor", "torch.clamp.ceil", "torch.clamp.ceil", "torch.clamp.ceil", "torch.clamp.floor", "torch.clamp.floor", "torch.clamp.floor", "torch.clamp.ceil", "torch.clamp.ceil", "torch.clamp.ceil", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "torch.autograd.Variable().cuda.reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ind_dd.reshape().long", "ind_du.reshape().long", "ind_ud.reshape().long", "ind_uu.reshape().long", "ind_dd.reshape().long", "ind_du.reshape().long", "ind_ud.reshape().long", "ind_uu.reshape().long", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "ind_dd.reshape", "ind_du.reshape", "ind_ud.reshape", "ind_uu.reshape", "ind_dd.reshape", "ind_du.reshape", "ind_ud.reshape", "ind_uu.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "origin", ",", "lookat", ",", "up", ",", "error", ",", "mask", ")", ":", "\n", "        ", "batchSize", "=", "origin", ".", "size", "(", "0", ")", "\n", "imHeight", "=", "error", ".", "size", "(", "2", ")", "\n", "imWidth", "=", "error", ".", "size", "(", "3", ")", "\n", "pixelSize", "=", "0.5", "*", "imWidth", "/", "np", ".", "tan", "(", "self", ".", "fov", "/", "2.0", ")", "\n", "\n", "offset", "=", "np", ".", "arange", "(", "0", ",", "10", ")", "*", "(", "imHeight", "*", "imWidth", ")", "\n", "offset", "=", "offset", ".", "reshape", "(", "10", ",", "1", ",", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "offset", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "offset", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "yAxis", "=", "up", "\n", "zAxis", "=", "lookat", "-", "origin", "\n", "zAxis", "=", "zAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "zAxis", "*", "zAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "xAxis", "=", "torch", ".", "cross", "(", "zAxis", ",", "yAxis", ",", "dim", "=", "1", ")", "\n", "xAxis", "=", "xAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "xAxis", "*", "xAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "origin", "=", "origin", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "xAxis", "=", "xAxis", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "yAxis", "=", "yAxis", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "zAxis", "=", "zAxis", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "\n", "coordCam", "=", "self", ".", "coord", ".", "cuda", "(", ")", "-", "origin", "\n", "weight", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "coordCam", "*", "coordCam", ",", "dim", "=", "4", ")", ")", "\n", "weight", "=", "torch", ".", "exp", "(", "-", "weight", ")", "\n", "\n", "xCam", "=", "torch", ".", "sum", "(", "coordCam", "*", "xAxis", ",", "dim", "=", "4", ")", "\n", "yCam", "=", "torch", ".", "sum", "(", "coordCam", "*", "yAxis", ",", "dim", "=", "4", ")", "\n", "zCam", "=", "torch", ".", "sum", "(", "coordCam", "*", "zAxis", ",", "dim", "=", "4", ")", "\n", "\n", "xCam", "=", "xCam", "/", "torch", ".", "clamp", "(", "zCam", ",", "min", "=", "1e-6", ")", "\n", "yCam", "=", "yCam", "/", "torch", ".", "clamp", "(", "zCam", ",", "min", "=", "1e-6", ")", "\n", "\n", "xId", "=", "xCam", "*", "pixelSize", "+", "imWidth", "/", "2.0", "\n", "yId", "=", "-", "yCam", "*", "pixelSize", "+", "imHeight", "/", "2.0", "\n", "\n", "xId", "=", "torch", ".", "clamp", "(", "xId", ",", "0", ",", "imWidth", "-", "1", ")", "\n", "yId", "=", "torch", ".", "clamp", "(", "yId", ",", "0", ",", "imHeight", "-", "1", ")", "\n", "\n", "xId_d", ",", "xId_u", "=", "xId", ".", "floor", "(", ")", ",", "xId", ".", "ceil", "(", ")", "\n", "yId_d", ",", "yId_u", "=", "yId", ".", "floor", "(", ")", ",", "yId", ".", "ceil", "(", ")", "\n", "ind_dd", "=", "yId_d", "*", "imWidth", "+", "xId_d", "+", "offset", "\n", "ind_du", "=", "yId_d", "*", "imWidth", "+", "xId_u", "+", "offset", "\n", "ind_ud", "=", "yId_u", "*", "imWidth", "+", "xId_d", "+", "offset", "\n", "ind_uu", "=", "yId_u", "*", "imWidth", "+", "xId_u", "+", "offset", "\n", "\n", "wx_d", "=", "(", "xId", "-", "xId_d", ")", "\n", "wx_u", "=", "1", "-", "wx_d", "\n", "wy_d", "=", "(", "yId", "-", "yId_d", ")", "\n", "wy_u", "=", "1", "-", "wy_d", "\n", "\n", "error", "=", "error", ".", "reshape", "(", "-", "1", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "volumeError_dd", "=", "torch", ".", "index_select", "(", "error", ",", "0", ",", "ind_dd", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeError_du", "=", "torch", ".", "index_select", "(", "error", ",", "0", ",", "ind_du", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeError_ud", "=", "torch", ".", "index_select", "(", "error", ",", "0", ",", "ind_ud", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeError_uu", "=", "torch", ".", "index_select", "(", "error", ",", "0", ",", "ind_uu", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeError", "=", "volumeError_dd", "*", "wy_d", "*", "wx_d", "+", "volumeError_du", "*", "wy_d", "*", "wx_u", "+", "volumeError_ud", "*", "wy_u", "*", "wx_d", "+", "volumeError_uu", "*", "wy_u", "*", "wx_u", "\n", "volumeError", "=", "torch", ".", "sum", "(", "volumeError", "*", "weight", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "volumeMask_dd", "=", "torch", ".", "index_select", "(", "mask", ",", "0", ",", "ind_dd", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeMask_du", "=", "torch", ".", "index_select", "(", "mask", ",", "0", ",", "ind_du", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeMask_ud", "=", "torch", ".", "index_select", "(", "mask", ",", "0", ",", "ind_ud", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeMask_uu", "=", "torch", ".", "index_select", "(", "mask", ",", "0", ",", "ind_uu", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeMask", "=", "volumeMask_dd", "*", "wy_d", "*", "wx_d", "+", "volumeMask_du", "*", "wy_d", "*", "wx_u", "+", "volumeMask_ud", "*", "wy_u", "*", "wx_d", "+", "volumeMask_uu", "*", "wy_u", "*", "wx_u", "\n", "volumeMask", "=", "torch", ".", "prod", "(", "volumeMask", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "volume", "=", "volumeMask", "*", "volumeError", "\n", "return", "volume", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.dataLoader.BatchLoader.__init__": [[16, 148], ["phase.upper", "numpy.meshgrid", "numpy.concatenate", "glob.glob", "range", "len", "list", "min", "numpy.linspace", "numpy.linspace", "numpy.linspace", "os.join", "os.join", "range", "range", "print", "max", "min", "os.join", "os.join", "sorted", "random.shuffle", "dataLoader.BatchLoader.imList.append", "random.seed", "range", "random.shuffle", "max", "min", "os.join", "os.join", "os.join", "os.join", "int", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "dataLoader.BatchLoader.originArr.append", "dataLoader.BatchLoader.lookatArr.append", "dataLoader.BatchLoader.upArr.append", "max", "min", "os.join", "os.join", "os.join", "os.join", "xml.parse", "xml.parse.getroot", "et.parse.getroot.findall", "len", "os.isdir", "os.isdir", "glob.glob", "len", "print", "len", "os.isdir", "os.isdir", "open", "camIn.readlines", "camLines[].strip", "camLines[].strip().split", "camLines[].strip().split", "camLines[].strip().split", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "len", "os.isdir", "os.isdir", "len", "os.join.findall", "os.join.findall", "dataLoader.BatchLoader.envList.append", "dataLoader.BatchLoader.scaleList.append", "len", "os.join", "os.join", "numpy.array", "numpy.array", "numpy.array", "origin.astype", "lookat.astype", "up.astype", "len", "st.get", "len", "float", "envListUnique.append", "camLines[].strip", "camLines[].strip", "camLines[].strip", "f.get", "len", "float", "float", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataRoot", ",", "shapeRoot", "=", "None", ",", "\n", "imHeight", "=", "360", ",", "imWidth", "=", "480", ",", "\n", "envHeight", "=", "256", ",", "envWidth", "=", "512", ",", "\n", "isRandom", "=", "True", ",", "phase", "=", "'TRAIN'", ",", "rseed", "=", "1", ",", "\n", "isLoadVH", "=", "False", ",", "isLoadEnvmap", "=", "False", ",", "\n", "isLoadCam", "=", "False", ",", "isLoadOptim", "=", "False", ",", "\n", "camNum", "=", "10", ",", "shapeRs", "=", "0", ",", "shapeRe", "=", "1500", ",", "volumeSize", "=", "32", ",", "batchSize", "=", "None", ",", "isOptim", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "dataRoot", "=", "dataRoot", "\n", "self", ".", "shapeRoot", "=", "shapeRoot", "\n", "self", ".", "imHeight", "=", "imHeight", "\n", "self", ".", "imWidth", "=", "imWidth", "\n", "self", ".", "envHeight", "=", "envHeight", "\n", "self", ".", "envWidth", "=", "envWidth", "\n", "self", ".", "phase", "=", "phase", ".", "upper", "(", ")", "\n", "self", ".", "isLoadVH", "=", "isLoadVH", "\n", "self", ".", "isLoadCam", "=", "isLoadCam", "\n", "self", ".", "isLoadEnvmap", "=", "isLoadEnvmap", "\n", "self", ".", "isLoadOptim", "=", "isLoadOptim", "\n", "self", ".", "camNum", "=", "camNum", "\n", "self", ".", "shapeRs", "=", "shapeRs", "\n", "self", ".", "shapeRe", "=", "shapeRe", "\n", "self", ".", "isOptim", "=", "isOptim", "\n", "\n", "if", "batchSize", "is", "None", ":", "\n", "            ", "batchSize", "=", "camNum", "\n", "self", ".", "batchSize", "=", "min", "(", "batchSize", ",", "10", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "batchSize", "=", "batchSize", "\n", "\n", "", "self", ".", "minX", ",", "self", ".", "maxX", "=", "-", "1.1", ",", "1.1", "\n", "self", ".", "minY", ",", "self", ".", "maxY", "=", "-", "1.1", ",", "1.1", "\n", "self", ".", "minZ", ",", "self", ".", "maxZ", "=", "-", "1.1", ",", "1.1", "\n", "self", ".", "volumeSize", "=", "volumeSize", "\n", "y", ",", "x", ",", "z", "=", "np", ".", "meshgrid", "(", "\n", "np", ".", "linspace", "(", "self", ".", "minX", ",", "self", ".", "maxX", ",", "volumeSize", ")", ",", "\n", "np", ".", "linspace", "(", "self", ".", "minY", ",", "self", ".", "maxY", ",", "volumeSize", ")", ",", "\n", "np", ".", "linspace", "(", "self", ".", "minZ", ",", "self", ".", "maxZ", ",", "volumeSize", ")", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "z", "=", "z", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "coord", "=", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "3", ")", "\n", "\n", "shapeList", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dataRoot", ",", "'Shape__*'", ")", ")", "\n", "if", "isLoadCam", ":", "\n", "            ", "self", ".", "originArr", "=", "[", "]", "\n", "self", ".", "lookatArr", "=", "[", "]", "\n", "self", ".", "upArr", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "max", "(", "0", ",", "shapeRs", ")", ",", "min", "(", "len", "(", "shapeList", ")", ",", "shapeRe", ")", ")", ":", "\n", "                ", "shape", "=", "osp", ".", "join", "(", "shapeRoot", ",", "'Shape__%d'", "%", "n", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "shape", ")", ":", "\n", "                    ", "continue", "\n", "", "camFileName", "=", "osp", ".", "join", "(", "shape", ",", "'cam%d.txt'", "%", "camNum", ")", "\n", "with", "open", "(", "camFileName", ",", "'r'", ")", "as", "camIn", ":", "\n", "                    ", "camLines", "=", "camIn", ".", "readlines", "(", ")", "\n", "", "viewNum", "=", "int", "(", "camLines", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "origins", "=", "[", "]", "\n", "lookats", "=", "[", "]", "\n", "ups", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "0", ",", "viewNum", ")", ":", "\n", "                    ", "originStr", "=", "camLines", "[", "3", "*", "n", "+", "1", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "lookatStr", "=", "camLines", "[", "3", "*", "n", "+", "2", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "upStr", "=", "camLines", "[", "3", "*", "n", "+", "3", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "origin", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "originStr", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "lookat", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "lookatStr", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "up", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "upStr", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "origins", ".", "append", "(", "origin", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "lookats", ".", "append", "(", "lookat", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ups", ".", "append", "(", "up", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "origins", "=", "np", ".", "concatenate", "(", "origins", ",", "axis", "=", "0", ")", "\n", "lookats", "=", "np", ".", "concatenate", "(", "lookats", ",", "axis", "=", "0", ")", "\n", "ups", "=", "np", ".", "concatenate", "(", "ups", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "originArr", ".", "append", "(", "origins", ")", "\n", "self", ".", "lookatArr", ".", "append", "(", "lookats", ")", "\n", "self", ".", "upArr", ".", "append", "(", "ups", ")", "\n", "\n", "", "", "if", "isLoadEnvmap", ":", "\n", "            ", "self", ".", "envList", "=", "[", "]", "\n", "self", ".", "scaleList", "=", "[", "]", "\n", "envListUnique", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "max", "(", "0", ",", "shapeRs", ")", ",", "min", "(", "len", "(", "shapeList", ")", ",", "shapeRe", ")", ")", ":", "\n", "                ", "shape", "=", "osp", ".", "join", "(", "shapeRoot", ",", "'Shape__%d'", "%", "n", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "shape", ")", ":", "\n", "                    ", "continue", "\n", "", "xmlFile", "=", "osp", ".", "join", "(", "shape", ",", "'im.xml'", ")", "\n", "# Create rendering file for Depth maps", "\n", "tree", "=", "et", ".", "parse", "(", "xmlFile", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "\n", "shapes", "=", "root", ".", "findall", "(", "'emitter'", ")", "\n", "assert", "(", "len", "(", "shapes", ")", "==", "1", ")", "\n", "for", "shape", "in", "shapes", ":", "\n", "                    ", "strings", "=", "shape", ".", "findall", "(", "'string'", ")", "\n", "assert", "(", "len", "(", "strings", ")", "==", "1", ")", "\n", "for", "st", "in", "strings", ":", "\n", "                        ", "envFileName", "=", "st", ".", "get", "(", "'value'", ")", "\n", "\n", "", "floats", "=", "shape", ".", "findall", "(", "'float'", ")", "\n", "assert", "(", "len", "(", "floats", ")", "==", "1", ")", "\n", "for", "f", "in", "floats", ":", "\n", "                        ", "scale", "=", "float", "(", "f", ".", "get", "(", "'value'", ")", ")", "\n", "", "self", ".", "envList", ".", "append", "(", "envFileName", ")", "\n", "self", ".", "scaleList", ".", "append", "(", "scale", ")", "\n", "\n", "if", "envFileName", "not", "in", "envListUnique", ":", "\n", "                        ", "envListUnique", ".", "append", "(", "envFileName", ")", "\n", "", "", "", "print", "(", "\"Number of environment maps %d\"", "%", "(", "len", "(", "envListUnique", ")", ")", ")", "\n", "\n", "", "self", ".", "imList", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "max", "(", "0", ",", "shapeRs", ")", ",", "min", "(", "len", "(", "shapeList", ")", ",", "shapeRe", ")", ")", ":", "\n", "            ", "shape", "=", "osp", ".", "join", "(", "dataRoot", ",", "'Shape__%d'", "%", "n", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "shape", ")", ":", "\n", "                ", "continue", "\n", "", "imNames", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "shape", ",", "'im_*.rgbe'", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "imNames", ")", "\n", "if", "len", "(", "imNames", ")", "<", "camNum", ":", "\n", "                ", "print", "(", "'%s: %d'", "%", "(", "shape", ",", "len", "(", "imNames", ")", ")", ")", "\n", "assert", "(", "False", ")", "\n", "", "self", ".", "imList", ".", "append", "(", "imNames", "[", "0", ":", "camNum", "]", ")", "\n", "\n", "", "if", "rseed", "is", "not", "None", ":", "\n", "            ", "random", ".", "seed", "(", "rseed", ")", "\n", "\n", "# Permute the image list", "\n", "", "self", ".", "count", "=", "len", "(", "self", ".", "imList", ")", "\n", "self", ".", "perm", "=", "list", "(", "range", "(", "self", ".", "count", ")", ")", "\n", "if", "isRandom", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.dataLoader.BatchLoader.__len__": [[149, 151], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.dataLoader.BatchLoader.__getitem__": [[152, 417], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "random.shuffle", "imName.replace().replace", "twoBounce[].transpose", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "twoBounce[].transpose", "numpy.ascontiguousarray", "twoBounce[].transpose", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "twoBounce[].transpose", "numpy.ascontiguousarray", "dataLoader.BatchLoader.loadHDR", "int", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "range", "os.isfile", "os.isfile", "imName.replace().replace", "h5py.File", "numpy.array", "h5py.File.close", "numpy.load", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.concatenate", "twoBounce[].transpose", "numpy.ascontiguousarray.astype", "twoBounce[].transpose", "numpy.ascontiguousarray.astype", "int", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "cv2.resize", "numpy.ascontiguousarray", "numpy.concatenate.append", "imName.replace().replace", "twoBounceVH[].transpose", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "twoBounceVH[].transpose", "numpy.ascontiguousarray", "twoBounceVH[].transpose", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "twoBounceVH[].transpose", "numpy.ascontiguousarray", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "imName.replace().replace", "cv2.resize", "cv2.resize", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.concatenate.append", "numpy.concatenate.append", "imName.replace", "h5py.File.get", "numpy.sqrt", "numpy.sqrt", "[].split", "cv2.imread", "os.isfile", "os.isfile", "imName.replace().replace", "h5py.File", "numpy.array", "h5py.File.close", "numpy.load", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.concatenate", "twoBounceVH[].transpose", "numpy.ascontiguousarray.astype", "twoBounceVH[].transpose", "numpy.ascontiguousarray.astype", "os.isfile", "os.isfile", "imName.replace().replace", "h5py.File", "numpy.array", "h5py.File.close", "numpy.load", "numpy.ascontiguousarray.transpose", "numpy.ascontiguousarray.transpose", "imName.replace().replace", "imNamesNew.append", "imName.replace", "numpy.maximum", "numpy.maximum", "[].split", "numpy.ascontiguousarray.transpose", "imName.replace", "h5py.File.get", "numpy.sqrt", "numpy.sqrt", "imName.replace", "h5py.File.get", "numpy.sqrt", "numpy.sqrt", "os.isfile", "os.isfile", "numpy.sum", "numpy.sum", "imName.replace", "numpy.maximum", "numpy.maximum", "imName.replace", "numpy.maximum", "numpy.maximum", "imName.replace", "[].split", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "imName.split", "imName.split"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.loadHDR"], ["", "def", "__getitem__", "(", "self", ",", "ind", ")", ":", "\n", "# normalize the normal vector so that it will be unit length", "\n", "\n", "        ", "imNames", "=", "self", ".", "imList", "[", "self", ".", "perm", "[", "ind", "]", "]", "\n", "if", "self", ".", "batchSize", "<", "self", ".", "camNum", ":", "\n", "            ", "random", ".", "shuffle", "(", "imNames", ")", "\n", "if", "self", ".", "isOptim", ":", "\n", "                ", "count", "=", "0", "\n", "imNamesNew", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "0", ",", "self", ".", "camNum", ")", ":", "\n", "                    ", "isAdd", "=", "False", "\n", "imName", "=", "imNames", "[", "n", "]", "\n", "if", "n", "==", "self", ".", "camNum", "-", "2", ":", "\n", "                        ", "isAdd", "=", "True", "\n", "", "else", ":", "\n", "                        ", "twoNormalName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoNormalPred%d_'", "%", "(", "self", ".", "camNum", ")", ")", ".", "replace", "(", "'.rgbe'", ",", "'.npy'", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "twoNormalName", ")", ":", "\n", "                            ", "isAdd", "=", "True", "\n", "", "", "if", "isAdd", "==", "True", ":", "\n", "                        ", "imNamesNew", ".", "append", "(", "imName", ")", "\n", "count", "+=", "1", "\n", "", "if", "count", "==", "self", ".", "batchSize", ":", "\n", "                        ", "break", "\n", "", "", "imNames", "=", "imNamesNew", "\n", "", "else", ":", "\n", "                ", "imNames", "=", "imNames", "[", "0", ":", "self", ".", "batchSize", "]", "\n", "\n", "", "", "segs", "=", "[", "]", "\n", "seg2s", "=", "[", "]", "\n", "normals", "=", "[", "]", "\n", "normal2s", "=", "[", "]", "\n", "depths", "=", "[", "]", "\n", "depth2s", "=", "[", "]", "\n", "ims", "=", "[", "]", "\n", "imEs", "=", "[", "]", "\n", "\n", "origins", "=", "[", "]", "\n", "lookats", "=", "[", "]", "\n", "ups", "=", "[", "]", "\n", "\n", "envs", "=", "[", "]", "\n", "\n", "segVHs", "=", "[", "]", "\n", "seg2VHs", "=", "[", "]", "\n", "normalVHs", "=", "[", "]", "\n", "normal2VHs", "=", "[", "]", "\n", "depthVHs", "=", "[", "]", "\n", "depth2VHs", "=", "[", "]", "\n", "\n", "normalOpts", "=", "[", "]", "\n", "normal2Opts", "=", "[", "]", "\n", "\n", "imScale", "=", "None", "\n", "for", "imName", "in", "imNames", ":", "\n", "            ", "twoBounceName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoBounce_'", ")", ".", "replace", "(", "'.rgbe'", ",", "'.npy'", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "twoBounceName", ")", ":", "\n", "                ", "twoBounceName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoBounce_'", ")", ".", "replace", "(", "'.rgbe'", ",", "'.h5'", ")", "\n", "hf", "=", "h5py", ".", "File", "(", "twoBounceName", ",", "'r'", ")", "\n", "twoBounce", "=", "np", ".", "array", "(", "hf", ".", "get", "(", "'data'", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "hf", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                ", "twoBounce", "=", "np", ".", "load", "(", "twoBounceName", ")", "\n", "\n", "", "if", "twoBounce", ".", "shape", "[", "0", "]", "!=", "self", ".", "imWidth", "or", "twoBounce", ".", "shape", "[", "1", "]", "!=", "self", ".", "imHeight", ":", "\n", "                ", "newTwoBounce1", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce2", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "3", ":", "6", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce3", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "6", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "newTwoBounce4", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "7", ":", "10", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce5", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "10", ":", "13", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce6", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "13", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "twoBounce", "=", "np", ".", "concatenate", "(", "(", "newTwoBounce1", ",", "newTwoBounce2", ",", "newTwoBounce3", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "newTwoBounce4", ",", "newTwoBounce5", ",", "newTwoBounce6", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "normal", "=", "twoBounce", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "normal", "=", "np", ".", "ascontiguousarray", "(", "normal", ")", "\n", "seg", "=", "twoBounce", "[", ":", ",", ":", ",", "6", ":", "7", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ">", "0.9", "\n", "seg", "=", "np", ".", "ascontiguousarray", "(", "seg", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "depth", "=", "twoBounce", "[", ":", ",", ":", ",", "3", ":", "6", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "depth", "=", "np", ".", "ascontiguousarray", "(", "depth", ")", "\n", "depth", "=", "depth", "*", "seg", "\n", "\n", "normal2", "=", "twoBounce", "[", ":", ",", ":", ",", "7", ":", "10", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "normal2", "=", "np", ".", "ascontiguousarray", "(", "normal2", ")", "\n", "seg2", "=", "twoBounce", "[", ":", ",", ":", ",", "13", ":", "14", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ">", "0.9", "\n", "seg2", "=", "np", ".", "ascontiguousarray", "(", "seg2", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "depth2", "=", "twoBounce", "[", ":", ",", ":", ",", "10", ":", "13", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "depth2", "=", "np", ".", "ascontiguousarray", "(", "depth2", ")", "\n", "depth2", "=", "depth2", "*", "seg", "\n", "\n", "normal", "=", "normal", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normal", "*", "normal", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normal", "=", "normal", "*", "seg", "\n", "normal2", "=", "normal2", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normal2", "*", "normal2", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normal2", "=", "normal2", "*", "seg", "\n", "\n", "\n", "# Read rendered images", "\n", "imE", ",", "imScale", "=", "self", ".", "loadHDR", "(", "imName", ",", "imScale", ")", "\n", "im", "=", "imE", "*", "seg", "\n", "\n", "imId", "=", "int", "(", "imName", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "shapeId", "=", "int", "(", "imName", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "-", "self", ".", "shapeRs", "\n", "\n", "segs", ".", "append", "(", "seg", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "seg2s", ".", "append", "(", "seg2", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normals", ".", "append", "(", "normal", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normal2s", ".", "append", "(", "normal2", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "depths", ".", "append", "(", "depth", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "depth2s", ".", "append", "(", "depth2", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "ims", ".", "append", "(", "im", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "imEs", ".", "append", "(", "imE", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "# Load the rendering file", "\n", "if", "self", ".", "isLoadCam", ":", "\n", "                ", "origin", "=", "self", ".", "originArr", "[", "shapeId", "]", "[", "imId", "-", "1", "]", "\n", "lookat", "=", "self", ".", "lookatArr", "[", "shapeId", "]", "[", "imId", "-", "1", "]", "\n", "up", "=", "self", ".", "upArr", "[", "shapeId", "]", "[", "imId", "-", "1", "]", "\n", "\n", "origins", ".", "append", "(", "origin", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "lookats", ".", "append", "(", "lookat", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "ups", ".", "append", "(", "up", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "", "if", "self", ".", "isLoadEnvmap", ":", "\n", "                ", "envFileName", "=", "self", ".", "envList", "[", "shapeId", "]", "\n", "scale", "=", "self", ".", "scaleList", "[", "shapeId", "]", "\n", "env", "=", "cv2", ".", "imread", "(", "envFileName", ",", "-", "1", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "env", "=", "cv2", ".", "resize", "(", "env", ",", "(", "self", ".", "envWidth", ",", "self", ".", "envHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "env", "=", "np", ".", "ascontiguousarray", "(", "env", ")", "\n", "env", "=", "env", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "*", "imScale", "*", "scale", "\n", "\n", "envs", ".", "append", "(", "env", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "\n", "", "if", "self", ".", "isLoadVH", ":", "\n", "                ", "twoBounceVHName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imVH_%dtwoBounce_'", "%", "self", ".", "camNum", ")", ".", "replace", "(", "'.rgbe'", ",", "'.npy'", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "twoBounceVHName", ")", ":", "\n", "                    ", "twoBounceVHName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imVH_%dtwoBounce_'", "%", "self", ".", "camNum", ")", ".", "replace", "(", "'.rgbe'", ",", "'.h5'", ")", "\n", "hf", "=", "h5py", ".", "File", "(", "twoBounceVHName", ",", "'r'", ")", "\n", "twoBounceVH", "=", "np", ".", "array", "(", "hf", ".", "get", "(", "'data'", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "hf", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                    ", "twoBounceVH", "=", "np", ".", "load", "(", "twoBounceVHName", ")", "\n", "\n", "", "if", "twoBounceVH", ".", "shape", "[", "0", "]", "!=", "self", ".", "imWidth", "or", "twoBounceVH", ".", "shape", "[", "1", "]", "!=", "self", ".", "imHeight", ":", "\n", "                    ", "newTwoBounce1", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce2", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "3", ":", "6", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce3", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "6", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "newTwoBounce4", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "7", ":", "10", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce5", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "10", ":", "13", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce6", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "13", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "twoBounceVH", "=", "np", ".", "concatenate", "(", "(", "newTwoBounce1", ",", "newTwoBounce2", ",", "newTwoBounce3", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "newTwoBounce4", ",", "newTwoBounce5", ",", "newTwoBounce6", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "normalVH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "normalVH", "=", "np", ".", "ascontiguousarray", "(", "normalVH", ")", "\n", "segVH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "6", ":", "7", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ">", "0.9", "\n", "segVH", "=", "np", ".", "ascontiguousarray", "(", "segVH", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "depthVH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "3", ":", "6", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "depthVH", "=", "np", ".", "ascontiguousarray", "(", "depthVH", ")", "\n", "depthVH", "=", "depthVH", "*", "segVH", "\n", "\n", "normal2VH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "7", ":", "10", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "normal2VH", "=", "np", ".", "ascontiguousarray", "(", "normal2VH", ")", "\n", "seg2VH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "13", ":", "14", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ">", "0.9", "\n", "seg2VH", "=", "np", ".", "ascontiguousarray", "(", "seg2VH", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "depth2VH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "10", ":", "13", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "depth2VH", "=", "np", ".", "ascontiguousarray", "(", "depth2VH", ")", "\n", "depth2VH", "=", "depth2VH", "*", "segVH", "\n", "\n", "normalVH", "=", "normalVH", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normalVH", "*", "normalVH", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normalVH", "=", "normalVH", "*", "segVH", "\n", "normal2VH", "=", "normal2VH", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normal2VH", "*", "normal2VH", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normal2VH", "=", "normal2VH", "*", "segVH", "\n", "\n", "segVHs", ".", "append", "(", "segVH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "seg2VHs", ".", "append", "(", "seg2VH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normalVHs", ".", "append", "(", "normalVH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normal2VHs", ".", "append", "(", "normal2VH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "depthVHs", ".", "append", "(", "depthVH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "depth2VHs", ".", "append", "(", "depth2VH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "", "if", "self", ".", "isLoadOptim", ":", "\n", "                ", "twoNormalName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoNormalPred%d_'", "%", "(", "self", ".", "camNum", ")", ")", ".", "replace", "(", "'.rgbe'", ",", "'.npy'", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "twoNormalName", ")", ":", "\n", "                    ", "twoNormalName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoNormalPred%d_'", "%", "(", "self", ".", "camNum", ")", ")", ".", "replace", "(", "'.rgbe'", ",", "'.h5'", ")", "\n", "hf", "=", "h5py", ".", "File", "(", "twoNormalName", ",", "'r'", ")", "\n", "twoNormals", "=", "np", ".", "array", "(", "hf", ".", "get", "(", "'data'", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "hf", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                    ", "twoNormals", "=", "np", ".", "load", "(", "twoNormalName", ")", "\n", "", "normalOpt", ",", "normal2Opt", "=", "twoNormals", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "twoNormals", "[", ":", ",", ":", ",", "3", ":", "6", "]", "\n", "normalOpt", "=", "cv2", ".", "resize", "(", "normalOpt", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "normal2Opt", "=", "cv2", ".", "resize", "(", "normal2Opt", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "normalOpt", "=", "np", ".", "ascontiguousarray", "(", "normalOpt", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "normal2Opt", "=", "np", ".", "ascontiguousarray", "(", "normal2Opt", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "\n", "normalOpt", "=", "normalOpt", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normalOpt", "*", "normalOpt", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normalOpt", "=", "normalOpt", "*", "seg", "\n", "normal2Opt", "=", "normal2Opt", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normal2Opt", "*", "normal2Opt", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normal2Opt", "=", "normal2Opt", "*", "seg", "\n", "\n", "normalOpts", ".", "append", "(", "normalOpt", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normal2Opts", ".", "append", "(", "normal2Opt", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "", "", "segs", "=", "np", ".", "concatenate", "(", "segs", ",", "axis", "=", "0", ")", "\n", "seg2s", "=", "np", ".", "concatenate", "(", "seg2s", ",", "axis", "=", "0", ")", "\n", "normals", "=", "np", ".", "concatenate", "(", "normals", ",", "axis", "=", "0", ")", "\n", "normal2s", "=", "np", ".", "concatenate", "(", "normal2s", ",", "axis", "=", "0", ")", "\n", "depths", "=", "np", ".", "concatenate", "(", "depths", ",", "axis", "=", "0", ")", "\n", "depth2s", "=", "np", ".", "concatenate", "(", "depth2s", ",", "axis", "=", "0", ")", "\n", "ims", "=", "np", ".", "concatenate", "(", "ims", ",", "axis", "=", "0", ")", "\n", "imEs", "=", "np", ".", "concatenate", "(", "imEs", ",", "axis", "=", "0", ")", "\n", "\n", "batchDict", "=", "{", "'seg1'", ":", "segs", ",", "\n", "'seg2'", ":", "seg2s", ",", "\n", "'normal1'", ":", "normals", ",", "\n", "'normal2'", ":", "normal2s", ",", "\n", "'depth1'", ":", "depths", ",", "\n", "'depth2'", ":", "depth2s", ",", "\n", "'im'", ":", "ims", ",", "\n", "'imE'", ":", "imEs", ",", "\n", "'name'", ":", "imNames", "}", "\n", "\n", "if", "self", ".", "isLoadCam", ":", "\n", "            ", "origins", "=", "np", ".", "concatenate", "(", "origins", ",", "axis", "=", "0", ")", "\n", "lookats", "=", "np", ".", "concatenate", "(", "lookats", ",", "axis", "=", "0", ")", "\n", "ups", "=", "np", ".", "concatenate", "(", "ups", ",", "axis", "=", "0", ")", "\n", "\n", "batchDict", "[", "'origin'", "]", "=", "origins", "\n", "batchDict", "[", "'lookat'", "]", "=", "lookats", "\n", "batchDict", "[", "'up'", "]", "=", "ups", "\n", "\n", "", "if", "self", ".", "isLoadEnvmap", ":", "\n", "            ", "envs", "=", "np", ".", "concatenate", "(", "envs", ",", "axis", "=", "0", ")", "\n", "batchDict", "[", "'env'", "]", "=", "envs", "\n", "\n", "", "if", "self", ".", "isLoadVH", ":", "\n", "            ", "segVHs", "=", "np", ".", "concatenate", "(", "segVHs", ",", "axis", "=", "0", ")", "\n", "seg2VHs", "=", "np", ".", "concatenate", "(", "seg2VHs", ",", "axis", "=", "0", ")", "\n", "normalVHs", "=", "np", ".", "concatenate", "(", "normalVHs", ",", "axis", "=", "0", ")", "\n", "normal2VHs", "=", "np", ".", "concatenate", "(", "normal2VHs", ",", "axis", "=", "0", ")", "\n", "depthVHs", "=", "np", ".", "concatenate", "(", "depthVHs", ",", "axis", "=", "0", ")", "\n", "depth2VHs", "=", "np", ".", "concatenate", "(", "depth2VHs", ",", "axis", "=", "0", ")", "\n", "\n", "batchDict", "[", "'seg1VH'", "]", "=", "segVHs", "\n", "batchDict", "[", "'seg2VH'", "]", "=", "seg2VHs", "\n", "batchDict", "[", "'normal1VH'", "]", "=", "normalVHs", "\n", "batchDict", "[", "'normal2VH'", "]", "=", "normal2VHs", "\n", "batchDict", "[", "'depth1VH'", "]", "=", "depthVHs", "\n", "batchDict", "[", "'depth2VH'", "]", "=", "depth2VHs", "\n", "\n", "", "if", "self", ".", "isLoadOptim", ":", "\n", "            ", "normalOpts", "=", "np", ".", "concatenate", "(", "normalOpts", ",", "axis", "=", "0", ")", "\n", "normal2Opts", "=", "np", ".", "concatenate", "(", "normal2Opts", ",", "axis", "=", "0", ")", "\n", "batchDict", "[", "'normalOpt'", "]", "=", "normalOpts", "\n", "batchDict", "[", "'normal2Opt'", "]", "=", "normal2Opts", "\n", "\n", "", "return", "batchDict", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.dataLoader.BatchLoader.loadHDR": [[418, 434], ["cv2.resize", "numpy.ascontiguousarray", "numpy.mean", "numpy.clip().transpose", "os.isfile", "os.isfile", "print", "cv2.imread", "numpy.clip", "numpy.random.random"], "methods", ["None"], ["", "def", "loadHDR", "(", "self", ",", "imName", ",", "scale", ")", ":", "\n", "        ", "if", "not", "osp", ".", "isfile", "(", "imName", ")", ":", "\n", "            ", "print", "(", "'Error: %s does not exist.'", "%", "imName", ")", "\n", "assert", "(", "False", ")", "\n", "", "image", "=", "cv2", ".", "imread", "(", "imName", ",", "-", "1", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image", "=", "np", ".", "ascontiguousarray", "(", "image", ")", "\n", "imMean", "=", "np", ".", "mean", "(", "image", ")", "\n", "\n", "if", "scale", "is", "None", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'TRAIN'", ":", "\n", "                ", "scale", "=", "(", "np", ".", "random", ".", "random", "(", ")", "*", "0.2", "+", "0.4", ")", "/", "imMean", "\n", "", "else", ":", "\n", "                ", "scale", "=", "0.5", "/", "imMean", "\n", "", "", "image", "=", "np", ".", "clip", "(", "(", "image", "*", "scale", ")", ",", "0", ",", "1", ")", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "return", "image", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.dataLoader.BatchLoader.loadImage": [[435, 453], ["PIL.Image.open", "dataLoader.BatchLoader.imResize", "numpy.asarray", "numpy.transpose", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "print", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.imResize"], ["", "def", "loadImage", "(", "self", ",", "imName", ",", "isGama", "=", "False", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "imName", ")", ":", "\n", "            ", "print", "(", "'Fail to load {0}'", ".", "format", "(", "imName", ")", ")", "\n", "im", "=", "np", ".", "zeros", "(", "[", "3", ",", "self", ".", "imSize", ",", "self", ".", "imSize", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "im", "\n", "\n", "", "im", "=", "Image", ".", "open", "(", "imName", ")", "\n", "im", "=", "self", ".", "imResize", "(", "im", ")", "\n", "im", "=", "np", ".", "asarray", "(", "im", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "isGama", ":", "\n", "            ", "im", "=", "(", "im", "/", "255.0", ")", "**", "2.2", "\n", "im", "=", "2", "*", "im", "-", "1", "\n", "", "else", ":", "\n", "            ", "im", "=", "(", "im", "-", "127.5", ")", "/", "127.5", "\n", "", "if", "len", "(", "im", ".", "shape", ")", "==", "2", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "im", "=", "np", ".", "transpose", "(", "im", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.dataLoader.BatchLoader.imResize": [[454, 459], ["im.resize.resize.resize"], "methods", ["None"], ["", "def", "imResize", "(", "self", ",", "im", ")", ":", "\n", "        ", "w0", ",", "h0", "=", "im", ".", "size", "\n", "if", "w0", "!=", "self", ".", "imHeight", "or", "h0", "!=", "self", ".", "imWidth", ":", "\n", "            ", "im", "=", "im", ".", "resize", "(", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "", "return", "im", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeErrToScreen": [[13, 18], ["print", "range", "print", "len", "print", "errorArr[].data.item"], "function", ["None"], ["def", "writeErrToScreen", "(", "errorName", ",", "errorArr", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "print", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "errorName", ")", ",", "end", "=", "' '", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "print", "(", "'%.6f'", "%", "errorArr", "[", "n", "]", ".", "data", ".", "item", "(", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "'.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeCoefToScreen": [[19, 25], ["print", "coef.cpu().data.numpy", "range", "print", "len", "print", "coef.cpu"], "function", ["None"], ["", "def", "writeCoefToScreen", "(", "coefName", ",", "coef", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "print", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "coefName", ")", ",", "end", "=", "' '", ")", "\n", "coefNp", "=", "coef", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "coefNp", ")", ")", ":", "\n", "        ", "print", "(", "'%.6f'", "%", "coefNp", "[", "n", "]", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "'.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeNpErrToScreen": [[26, 31], ["print", "range", "print", "len", "print"], "function", ["None"], ["", "def", "writeNpErrToScreen", "(", "errorName", ",", "errorArr", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "print", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "errorName", ")", ",", "end", "=", "' '", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "print", "(", "'%.6f'", "%", "errorArr", "[", "n", "]", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "'.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeErrToFile": [[32, 37], ["fileOut.write", "range", "fileOut.write", "len", "fileOut.write", "errorArr[].data.item"], "function", ["None"], ["", "def", "writeErrToFile", "(", "errorName", ",", "errorArr", ",", "fileOut", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "fileOut", ".", "write", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "errorName", ")", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "fileOut", ".", "write", "(", "'%.6f '", "%", "errorArr", "[", "n", "]", ".", "data", ".", "item", "(", ")", ")", "\n", "", "fileOut", ".", "write", "(", "'.\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeCoefToFile": [[38, 44], ["fileOut.write", "coef.cpu().data.numpy", "range", "fileOut.write", "len", "fileOut.write", "coef.cpu"], "function", ["None"], ["", "def", "writeCoefToFile", "(", "coefName", ",", "coef", ",", "fileOut", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "fileOut", ".", "write", "(", "(", "'[%d/%d] {0}: '", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "coefName", ")", ")", "\n", "coefNp", "=", "coef", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "coefNp", ")", ")", ":", "\n", "        ", "fileOut", ".", "write", "(", "'%.6f '", "%", "coefNp", "[", "n", "]", ")", "\n", "", "fileOut", ".", "write", "(", "'.\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeNpErrToFile": [[45, 50], ["fileOut.write", "range", "fileOut.write", "len", "fileOut.write"], "function", ["None"], ["", "def", "writeNpErrToFile", "(", "errorName", ",", "errorArr", ",", "fileOut", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "fileOut", ".", "write", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "errorName", ")", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "fileOut", ".", "write", "(", "'%.6f '", "%", "errorArr", "[", "n", "]", ")", "\n", "", "fileOut", ".", "write", "(", "'.\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.turnErrorIntoNumpy": [[51, 56], ["range", "len", "errorNp.append", "numpy.array", "errorArr[].data.item"], "function", ["None"], ["", "def", "turnErrorIntoNumpy", "(", "errorArr", ")", ":", "\n", "    ", "errorNp", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "errorNp", ".", "append", "(", "errorArr", "[", "n", "]", ".", "data", ".", "item", "(", ")", ")", "\n", "", "return", "np", ".", "array", "(", "errorNp", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.visualizeGtEnvmap": [[57, 86], ["len", "numpy.zeros", "range", "numpy.clip", "PIL.Image.fromarray", "Image.fromarray.save", "range", "os.join", "cv2.resize", "name.split", "open", "envName.strip.strip", "cv2.imread", "name.split", "f.readlines", "fileName.split"], "function", ["None"], ["", "def", "visualizeGtEnvmap", "(", "dst", ",", "names", ",", "nrows", ",", "ncols", ",", "gridRows", ",", "gridCols", ",", "edge", "=", "5", ")", ":", "\n", "    ", "imgNum", "=", "len", "(", "names", ")", "\n", "assert", "(", "gridRows", "*", "gridCols", ">=", "imgNum", ")", "\n", "\n", "nRows", "=", "gridRows", "*", "nrows", "+", "edge", "*", "(", "gridRows", "+", "1", ")", "\n", "nCols", "=", "gridCols", "*", "ncols", "+", "edge", "*", "(", "gridCols", "+", "1", ")", "\n", "imArr", "=", "np", ".", "zeros", "(", "[", "nRows", ",", "nCols", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "rId", "in", "range", "(", "0", ",", "gridRows", ")", ":", "\n", "        ", "for", "cId", "in", "range", "(", "0", ",", "gridCols", ")", ":", "\n", "            ", "if", "rId", "*", "gridCols", "+", "cId", ">=", "imgNum", ":", "\n", "                ", "break", "\n", "", "n", "=", "rId", "*", "gridCols", "+", "cId", "\n", "sr", "=", "edge", "*", "(", "rId", "+", "1", ")", "+", "rId", "*", "nrows", "\n", "sc", "=", "edge", "*", "(", "cId", "+", "1", ")", "+", "cId", "*", "ncols", "\n", "\n", "name", "=", "names", "[", "n", "]", "\n", "root", "=", "'/'", ".", "join", "(", "name", ".", "split", "(", "'/'", ")", "[", "0", ":", "-", "1", "]", ")", "\n", "fileName", "=", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "envFile", "=", "osp", ".", "join", "(", "root", ",", "fileName", ".", "split", "(", "'_'", ")", "[", "1", "]", "+", "'.txt'", ")", "\n", "with", "open", "(", "envFile", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "envName", "=", "f", ".", "readlines", "(", ")", "[", "0", "]", "\n", "envName", "=", "envName", ".", "strip", "(", ")", "\n", "", "im", "=", "cv2", ".", "imread", "(", "envName", ",", "cv2", ".", "IMREAD_ANYDEPTH", "|", "cv2", ".", "IMREAD_ANYCOLOR", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "ncols", ",", "nrows", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "imArr", "[", "sr", ":", "sr", "+", "nrows", ",", "sc", ":", "sc", "+", "ncols", ",", ":", "]", "=", "im", "\n", "", "", "imArr", "=", "np", ".", "clip", "(", "imArr", ",", "0", ",", "1", ")", "\n", "imArr", "=", "(", "255", "*", "imArr", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imArr", "=", "Image", ".", "fromarray", "(", "imArr", ")", "\n", "imArr", ".", "save", "(", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.computeConfMap": [[87, 97], ["torch.split", "coef0.view.view", "coef1.view.view", "torch.min", "torch.autograd.Variable", "torch.exp", "torch.FloatTensor().cuda", "torch.FloatTensor", "segBatch.size"], "function", ["None"], ["", "def", "computeConfMap", "(", "imBatch", ",", "segBatch", ",", "coef", ",", "gpuId", ")", ":", "\n", "    ", "im", "=", "0.5", "*", "(", "imBatch", "+", "1", ")", "\n", "\n", "coef0", ",", "coef1", "=", "torch", ".", "split", "(", "coef", ",", "1", ")", "\n", "coef0", "=", "coef0", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "coef1", "=", "coef1", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "minIm", ",", "_", "=", "torch", ".", "min", "(", "im", ",", "dim", "=", "1", ")", "\n", "w0", "=", "(", "1", "-", "torch", ".", "exp", "(", "-", "(", "1", "-", "minIm", ")", "/", "0.02", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "w1", "=", "Variable", "(", "0", "*", "torch", ".", "FloatTensor", "(", "segBatch", ".", "size", "(", ")", ")", ".", "cuda", "(", "gpuId", ")", ")", "+", "1", "\n", "return", "coef0", "*", "w0", "+", "coef1", "*", "w1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeImageToFile": [[99, 111], ["imgBatch.size", "range", "imgBatch[].data.cpu().numpy", "numpy.clip", "PIL.Image.fromarray", "np.concatenate.save", "numpy.power", "numpy.concatenate", "imgBatch[].data.cpu", "np.concatenate.transpose"], "function", ["None"], ["", "def", "writeImageToFile", "(", "imgBatch", ",", "nameBatch", ",", "isGama", "=", "False", ")", ":", "\n", "    ", "batchSize", "=", "imgBatch", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "img", "=", "imgBatch", "[", "n", ",", ":", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "1", ")", "\n", "if", "isGama", ":", "\n", "            ", "img", "=", "np", ".", "power", "(", "img", ",", "1.0", "/", "2.2", ")", "\n", "", "img", "=", "(", "255", "*", "img", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "img", "=", "np", ".", "concatenate", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "2", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", ".", "save", "(", "nameBatch", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeImageBlockToFile": [[113, 130], ["imgBatch.size", "imgBatch.size", "range", "imgBatch[].data.cpu().numpy", "img.reshape.transpose", "img.reshape.reshape", "cv2.imwrite", "cv2.imwrite", "imgBatch[].data.cpu", "img.reshape.squeeze", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "", "def", "writeImageBlockToFile", "(", "imgBatch", ",", "nameBatch", ",", "isGama", "=", "False", ")", ":", "\n", "    ", "batchSize", "=", "imgBatch", ".", "size", "(", "0", ")", "\n", "chNum", "=", "imgBatch", ".", "size", "(", "3", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "img", "=", "imgBatch", "[", "n", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "name", "=", "nameBatch", "[", "n", "]", "\n", "\n", "bheight", ",", "bwidth", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "imHeight", ",", "imWidth", "=", "img", ".", "shape", "[", "3", "]", ",", "img", ".", "shape", "[", "4", "]", "\n", "\n", "img", "=", "img", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "4", ",", "2", "]", ")", "\n", "img", "=", "img", ".", "reshape", "(", "[", "bheight", "*", "imHeight", ",", "bwidth", "*", "imWidth", ",", "chNum", "]", ")", "\n", "img", "=", "(", "255", "*", "np", ".", "clip", "(", "np", ".", "clip", "(", "img", ",", "0", ",", "1", ")", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "chNum", "==", "3", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "nameBatch", "[", "n", "]", ",", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "nameBatch", "[", "n", "]", ",", "img", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeDataToFile": [[132, 141], ["imgBatch.size", "range", "imgBatch[].data.cpu().numpy", "h5py.File", "h5py.File.create_dataset", "h5py.File.close", "imgBatch[].data.cpu"], "function", ["None"], ["", "", "", "def", "writeDataToFile", "(", "imgBatch", ",", "nameBatch", ")", ":", "\n", "    ", "batchSize", "=", "imgBatch", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "img", "=", "imgBatch", "[", "n", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "name", "=", "nameBatch", "[", "n", "]", "\n", "\n", "hf", "=", "h5py", ".", "File", "(", "name", ",", "'w'", ")", "\n", "hf", ".", "create_dataset", "(", "'data'", ",", "data", "=", "img", ",", "compression", "=", "'lzf'", ")", "\n", "hf", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeDepthToFile": [[142, 147], ["depthBatch.size", "range", "depthBatch[].data.cpu().numpy().squeeze", "numpy.save", "depthBatch[].data.cpu().numpy", "depthBatch[].data.cpu"], "function", ["None"], ["", "", "def", "writeDepthToFile", "(", "depthBatch", ",", "nameBatch", ")", ":", "\n", "    ", "batchSize", "=", "depthBatch", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "depth", "=", "depthBatch", "[", "n", ",", ":", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "np", ".", "save", "(", "nameBatch", "[", "n", "]", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeEnvToFile": [[148, 153], ["SHBatch.size", "range", "SHBatch[].data.cpu().numpy", "numpy.save", "SHBatch[].data.cpu"], "function", ["None"], ["", "", "def", "writeEnvToFile", "(", "SHBatch", ",", "nameBatch", ")", ":", "\n", "    ", "batchSize", "=", "SHBatch", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "SH", "=", "SHBatch", "[", "n", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "nameBatch", "[", "n", "]", ",", "SH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeAlbedoNameToFile": [[154, 158], ["open", "range", "len", "fileOut.write"], "function", ["None"], ["", "", "def", "writeAlbedoNameToFile", "(", "fileName", ",", "albedoNameBatch", ")", ":", "\n", "    ", "with", "open", "(", "fileName", ",", "'w'", ")", "as", "fileOut", ":", "\n", "        ", "for", "n", "in", "range", "(", "0", ",", "len", "(", "albedoNameBatch", ")", ")", ":", "\n", "            ", "fileOut", ".", "write", "(", "'%s\\n'", "%", "albedoNameBatch", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.normalErrToColorMap": [[159, 164], ["torch.clamp().type", "torch.acos", "colormap[].squeeze().permute().type", "torch.clamp", "torch.clamp", "colormap[].squeeze().permute", "colormap[].squeeze"], "function", ["None"], ["", "", "", "def", "normalErrToColorMap", "(", "normalErr", ",", "mask", ",", "colormap", ")", ":", "\n", "    ", "errMap", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "(", "-", "1", ")", "*", "normalErr", ",", "-", "1", ",", "1", ")", ")", "*", "mask", "\n", "errMap", "=", "torch", ".", "clamp", "(", "errMap", "*", "180", "/", "np", ".", "pi", ",", "0", ",", "colormap", ".", "shape", "[", "0", "]", "-", "1", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "errMap", "=", "colormap", "[", "errMap", ",", ":", "]", ".", "squeeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "float", ")", "*", "mask", "\n", "return", "errMap", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.errToColorMap": [[165, 170], ["torch.clamp", "colormap[].squeeze().permute().type", "colormap[].squeeze().permute", "colormap[].squeeze"], "function", ["None"], ["", "def", "errToColorMap", "(", "err", ",", "mask", ",", "colormap", ",", "scale", "=", "1", ",", "maxValue", "=", "1", ")", ":", "\n", "    ", "errMap", "=", "torch", ".", "clamp", "(", "err", "*", "scale", ",", "0", ",", "maxValue", ")", "/", "maxValue", "\n", "errMap", "=", "(", "errMap", "*", "colormap", ".", "shape", "[", "0", "]", "-", "1", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "errMap", "=", "colormap", "[", "errMap", ",", ":", "]", ".", "squeeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "float", ")", "*", "mask", "\n", "return", "errMap", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writePointCloud": [[172, 197], ["colormap.cpu().data.numpy.cpu().data.numpy", "visualHull.cpu().data.numpy().squeeze.cpu().data.numpy().squeeze", "numpy.meshgrid", "numpy.concatenate().astype", "visualHull[].reshape", "coord[].reshape", "colormap[].reshape", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.io.write_point_cloud", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.log", "numpy.clip", "visualHull.cpu().data.numpy().squeeze.cpu().data.numpy", "numpy.concatenate", "colormap.cpu().data.numpy.cpu", "numpy.concatenate", "numpy.mean", "visualHull.cpu().data.numpy().squeeze.cpu", "visualHull[].reshape.astype"], "function", ["None"], ["", "def", "writePointCloud", "(", "fileName", ",", "visualHull", ",", "colormap", ")", ":", "\n", "    ", "colormap", "=", "colormap", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "visualHull", "=", "visualHull", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "resolution", "=", "visualHull", ".", "shape", "[", "0", "]", "\n", "y", ",", "x", ",", "z", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "1.1", ",", "1.1", ",", "resolution", ")", ",", "\n", "np", ".", "linspace", "(", "-", "1.1", ",", "1.1", ",", "resolution", ")", ",", "\n", "np", ".", "linspace", "(", "-", "1.1", ",", "1.1", ",", "resolution", ")", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "z", "=", "z", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "coord", "=", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "3", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "visualHull", "=", "visualHull", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "vInd", "=", "visualHull", ">", "0", "\n", "error", "=", "visualHull", "[", "vInd", "]", ".", "reshape", "(", "-", "1", ")", "\n", "error", "=", "-", "np", ".", "log", "(", "error", ")", "\n", "points", "=", "coord", "[", "np", ".", "concatenate", "(", "[", "vInd", ",", "vInd", ",", "vInd", "]", ",", "axis", "=", "3", ")", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "error", "=", "np", ".", "clip", "(", "error", "/", "np", ".", "mean", "(", "error", ")", "*", "0.5", ",", "0", ",", "1", ")", "*", "(", "colormap", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "colors", "=", "colormap", "[", "error", ".", "astype", "(", "np", ".", "uint32", ")", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "points", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "colors", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "fileName", ",", "pcd", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.Normal.utils.writeVisualHull": [[198, 212], ["visualHull.cpu().data.numpy().squeeze.cpu().data.numpy().squeeze", "visualHull.cpu().data.numpy().squeeze.copy", "skimage.measure.marching_cubes_lewiner", "trimesh.Trimesh", "trm.Trimesh.export", "float", "visualHull.cpu().data.numpy().squeeze.cpu().data.numpy", "visualHull.cpu().data.numpy().squeeze.cpu"], "function", ["None"], ["", "def", "writeVisualHull", "(", "fileName", ",", "visualHull", ")", ":", "\n", "    ", "visualHull", "=", "visualHull", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "VH", "=", "visualHull", ".", "copy", "(", ")", "\n", "VH", "[", "visualHull", "==", "0", "]", "=", "1", "\n", "VH", "[", "visualHull", ">", "0", "]", "=", "-", "1", "\n", "verts", ",", "faces", ",", "normals", ",", "_", "=", "measure", ".", "marching_cubes_lewiner", "(", "VH", ",", "0", ")", "\n", "\n", "resolution", "=", "visualHull", ".", "shape", "[", "0", "]", "\n", "axisLen", "=", "float", "(", "resolution", "-", "1", ")", "/", "2.0", "\n", "verts", "=", "(", "verts", "-", "axisLen", ")", "/", "axisLen", "*", "1.1", "\n", "mesh", "=", "trm", ".", "Trimesh", "(", "vertices", "=", "verts", ",", "vertex_normals", "=", "normals", ",", "faces", "=", "faces", ")", "\n", "mesh", ".", "export", "(", "fileName", ")", "\n", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.__init__": [[8, 42], ["numpy.meshgrid", "numpy.tan", "numpy.concatenate().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.arange().reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.linspace", "numpy.linspace", "float", "numpy.ones", "numpy.maximum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "float", "numpy.concatenate", "numpy.arange", "numpy.sqrt", "numpy.sum"], "methods", ["None"], ["class", "normalFeature", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "normalFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "8", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn2", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "gn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "True", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "gn2", "(", "self", ".", "conv2", "(", "x1", ")", ")", ",", "True", ")", "\n", "return", "x2", "\n", "\n", "", "", "class", "encoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "isAddCostVolume", "=", "False", ")", ":", "\n", "        ", "super", "(", "encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "15", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn2", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "if", "isAddCostVolume", "==", "True", ":", "\n", "            ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "", "self", ".", "gn3", "=", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn4", "=", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn5", "=", "nn", ".", "GroupNorm", "(", "32", ",", "512", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "gn6", "=", "nn", ".", "GroupNorm", "(", "32", ",", "512", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "volume", "=", "None", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "gn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "True", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "gn2", "(", "self", ".", "conv2", "(", "x1", ")", ")", ",", "True", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.refraction": [[43, 69], ["torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum.detach", "torch.sum.detach", "torch.sum.detach", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["\n", "if", "not", "volume", "is", "None", ":", "\n", "            ", "if", "volume", ".", "size", "(", "2", ")", "!=", "x2", ".", "size", "(", "2", ")", "or", "volume", ".", "size", "(", "3", ")", "!=", "x2", ".", "size", "(", "3", ")", ":", "\n", "                ", "volume", "=", "F", ".", "interpolate", "(", "volume", ",", "[", "x2", ".", "size", "(", "2", ")", ",", "x2", ".", "size", "(", "3", ")", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "", "x2", "=", "torch", ".", "cat", "(", "[", "volume", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "", "x3", "=", "F", ".", "relu", "(", "self", ".", "gn3", "(", "self", ".", "conv3", "(", "x2", ")", ")", ",", "True", ")", "\n", "x4", "=", "F", ".", "relu", "(", "self", ".", "gn4", "(", "self", ".", "conv4", "(", "x3", ")", ")", ",", "True", ")", "\n", "x5", "=", "F", ".", "relu", "(", "self", ".", "gn5", "(", "self", ".", "conv5", "(", "x4", ")", ")", ",", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gn6", "(", "self", ".", "conv6", "(", "x5", ")", ")", ",", "True", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "decoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# branch for normal prediction", "\n", "self", ".", "dconv0", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn0", "=", "nn", ".", "GroupNorm", "(", "32", ",", "512", ")", "\n", "self", ".", "dconv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn1", "=", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", "\n", "self", ".", "dconv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn2", "=", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", "\n", "self", ".", "dconv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn3", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n", "self", ".", "dconv4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn4", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.reflection": [[70, 83], ["torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt().unsqueeze().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["self", ".", "dconv5", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dgn5", "=", "nn", ".", "GroupNorm", "(", "4", ",", "64", ")", "\n", "\n", "self", ".", "convFinal", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "dgn0", "(", "self", ".", "dconv0", "(", "x", ")", ")", ",", "True", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "dgn1", "(", "self", ".", "dconv1", "(", "x1", ")", ")", ",", "True", ")", "\n", "x3", "=", "F", ".", "relu", "(", "self", ".", "dgn2", "(", "self", ".", "dconv2", "(", "F", ".", "interpolate", "(", "x2", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", ")", ",", "True", ")", "\n", "x4", "=", "F", ".", "relu", "(", "self", ".", "dgn3", "(", "self", ".", "dconv3", "(", "x3", ")", ")", ",", "True", ")", "\n", "x5", "=", "F", ".", "relu", "(", "self", ".", "dgn4", "(", "self", ".", "dconv4", "(", "F", ".", "interpolate", "(", "x4", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", ")", ",", "True", ")", "\n", "x6", "=", "F", ".", "relu", "(", "self", ".", "dgn5", "(", "self", ".", "dconv5", "(", "x5", ")", ")", ",", "True", ")", "\n", "\n", "x_orig", "=", "torch", ".", "tanh", "(", "self", ".", "convFinal", "(", "F", ".", "interpolate", "(", "x6", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.transformCoordinate": [[84, 107], ["origin.size", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "xAxis.view.view.view", "yAxis.view.view.view", "zAxis.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat.expand", "torch.cat.expand", "torch.cat.expand", "torch.sum.expand", "torch.sum.expand", "torch.sum.expand", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["\n", "normal1", ",", "normal2", "=", "torch", ".", "split", "(", "x_orig", ",", "[", "3", ",", "3", "]", ",", "dim", "=", "1", ")", "\n", "normal1", "=", "normal1", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal1", "*", "normal1", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "min", "=", "1e-6", ")", "\n", "normal2", "=", "normal2", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal2", "*", "normal2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "min", "=", "1e-6", ")", "\n", "\n", "return", "normal1", ",", "normal2", "\n", "\n", "\n", "", "", "class", "renderer", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "eta1", "=", "1.0003", ",", "eta2", "=", "1.4723", ",", "\n", "isCuda", "=", "True", ",", "gpuId", "=", "0", ",", "\n", "batchSize", "=", "12", ",", "\n", "fov", "=", "63.4", ",", "imWidth", "=", "480", ",", "imHeight", "=", "360", ",", "\n", "envWidth", "=", "512", ",", "envHeight", "=", "256", ")", ":", "\n", "# Set the parameters", "\n", "        ", "self", ".", "eta1", "=", "eta1", "\n", "self", ".", "eta2", "=", "eta2", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "self", ".", "fov", "=", "fov", "/", "180", "*", "np", ".", "pi", "\n", "self", ".", "imHeight", "=", "imHeight", "\n", "self", ".", "imWidth", "=", "imWidth", "\n", "self", ".", "envHeight", "=", "envHeight", "\n", "self", ".", "envWidth", "=", "envWidth", "\n", "self", ".", "isCuda", "=", "isCuda", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.sampleEnvLight": [[108, 162], ["envmap.transpose().transpose().reshape.transpose().transpose().reshape.size", "envmap.transpose().transpose().reshape.transpose().transpose().reshape.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.flatten.expand_as().clone().cuda", "torch.flatten.expand_as().clone().cuda", "torch.flatten.expand_as().clone().cuda", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "envmap.transpose().transpose().reshape.transpose().transpose().reshape.transpose().transpose().reshape", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "renderedImg.transpose().transpose.transpose().transpose.reshape", "renderedImg.transpose().transpose.transpose().transpose.transpose().transpose", "models.renderer.offset.detach", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.flatten.expand_as().clone", "torch.flatten.expand_as().clone", "torch.flatten.expand_as().clone", "envmap.transpose().transpose().reshape.transpose().transpose().reshape.transpose().transpose", "w_u.expand_as", "w_d.expand_as", "w_u.expand_as", "w_d.expand_as", "w_r.expand_as", "w_l.expand_as", "renderedImg.transpose().transpose.transpose().transpose.transpose", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.flatten.expand_as", "torch.flatten.expand_as", "torch.flatten.expand_as", "envmap.transpose().transpose().reshape.transpose().transpose().reshape.transpose"], "methods", ["None"], ["self", ".", "gpuId", "=", "gpuId", "\n", "\n", "# Compute view direction", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "imWidth", ")", ",", "\n", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "imHeight", ")", ")", "\n", "tan_fovx", "=", "np", ".", "tan", "(", "self", ".", "fov", "/", "2.0", ")", "\n", "tan_fovy", "=", "tan_fovx", "/", "float", "(", "imWidth", ")", "*", "float", "(", "imHeight", ")", "\n", "x", ",", "y", "=", "x", "*", "tan_fovx", ",", "-", "y", "*", "tan_fovy", "\n", "z", "=", "-", "np", ".", "ones", "(", "[", "imHeight", ",", "imWidth", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x", ",", "y", ",", "z", "=", "x", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "y", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "z", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "v", "=", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "v", "=", "v", "/", "np", ".", "maximum", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "v", "*", "v", ",", "axis", "=", "0", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "1e-6", ")", "\n", "v", "=", "v", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "v", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "v", ")", ")", "\n", "\n", "# Compute the offset", "\n", "offset", "=", "np", ".", "arange", "(", "0", ",", "batchSize", ")", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "offset", "=", "(", "offset", "*", "envWidth", "*", "envHeight", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "offset", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "offset", ")", ")", "\n", "\n", "", "def", "refraction", "(", "self", ",", "l", ",", "normal", ",", "eta1", ",", "eta2", ")", ":", "\n", "# l n x 3 x imHeight x imWidth", "\n", "# normal n x 3 x imHeight x imWidth", "\n", "# eta1 float", "\n", "# eta2 float", "\n", "        ", "cos_theta", "=", "torch", ".", "sum", "(", "l", "*", "(", "-", "normal", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "i_p", "=", "l", "+", "normal", "*", "cos_theta", "\n", "t_p", "=", "eta1", "/", "eta2", "*", "i_p", "\n", "\n", "t_p_norm", "=", "torch", ".", "sum", "(", "t_p", "*", "t_p", ",", "dim", "=", "1", ")", "\n", "totalReflectMask", "=", "(", "t_p_norm", ".", "detach", "(", ")", ">", "0.999999", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "t_i", "=", "torch", ".", "sqrt", "(", "1", "-", "torch", ".", "clamp", "(", "t_p_norm", ",", "0", ",", "0.999999", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "normal", ")", "*", "(", "-", "normal", ")", "\n", "t", "=", "t_i", "+", "t_p", "\n", "t", "=", "t", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "t", "*", "t", ",", "dim", "=", "1", ")", ",", "min", "=", "1e-10", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "cos_theta_t", "=", "torch", ".", "sum", "(", "t", "*", "(", "-", "normal", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "e_i", "=", "(", "cos_theta_t", "*", "eta2", "-", "cos_theta", "*", "eta1", ")", "/", "torch", ".", "clamp", "(", "cos_theta_t", "*", "eta2", "+", "cos_theta", "*", "eta1", ",", "min", "=", "1e-10", ")", "\n", "e_p", "=", "(", "cos_theta_t", "*", "eta1", "-", "cos_theta", "*", "eta2", ")", "/", "torch", ".", "clamp", "(", "cos_theta_t", "*", "eta1", "+", "cos_theta", "*", "eta2", ",", "min", "=", "1e-10", ")", "\n", "\n", "attenuate", "=", "torch", ".", "clamp", "(", "0.5", "*", "(", "e_i", "*", "e_i", "+", "e_p", "*", "e_p", ")", ",", "0", ",", "1", ")", ".", "detach", "(", ")", "\n", "\n", "return", "t", ",", "attenuate", ",", "totalReflectMask", "\n", "\n", "", "def", "reflection", "(", "self", ",", "l", ",", "normal", ")", ":", "\n", "# l n x 3 x imHeight x imWidth", "\n", "# normal n x 3 x imHeight x imWidth", "\n", "# eta1 float", "\n", "# eta2 float", "\n", "        ", "cos_theta", "=", "torch", ".", "sum", "(", "l", "*", "(", "-", "normal", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "r_p", "=", "l", "+", "normal", "*", "cos_theta", "\n", "r_p_norm", "=", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "r_p", "*", "r_p", ",", "dim", "=", "1", ")", ",", "0", ",", "0.999999", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.getBackground": [[163, 168], ["models.renderer.v.expand_as().clone().cuda", "models.renderer.transformCoordinate", "models.renderer.sampleEnvLight", "models.renderer.v.expand_as().clone", "models.renderer.v.expand_as"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.transformCoordinate", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.sampleEnvLight"], ["r_i", "=", "torch", ".", "sqrt", "(", "1", "-", "r_p_norm", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "normal", ")", "*", "normal", "\n", "r", "=", "r_p", "+", "r_i", "\n", "r", "=", "r", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "r", "*", "r", ",", "dim", "=", "1", ")", ",", "min", "=", "1e-10", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.forward": [[169, 195], ["models.renderer.v.expand_as().clone().cuda", "models.renderer.refraction", "models.renderer.refraction", "models.renderer.reflection", "models.renderer.transformCoordinate", "models.renderer.transformCoordinate", "models.renderer.sampleEnvLight", "models.renderer.sampleEnvLight", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "models.renderer.v.expand_as().clone", "models.renderer.v.expand_as"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.refraction", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.refraction", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.reflection", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.transformCoordinate", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.transformCoordinate", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.sampleEnvLight", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.renderer.sampleEnvLight"], ["", "def", "transformCoordinate", "(", "self", ",", "l", ",", "origin", ",", "lookat", ",", "up", ")", ":", "\n", "        ", "batchSize", "=", "origin", ".", "size", "(", "0", ")", "\n", "assert", "(", "batchSize", "<=", "self", ".", "batchSize", ")", "\n", "\n", "# Rotate to world coordinate", "\n", "zAxis", "=", "origin", "-", "lookat", "\n", "yAxis", "=", "up", "\n", "xAxis", "=", "torch", ".", "cross", "(", "yAxis", ",", "zAxis", ",", "dim", "=", "1", ")", "\n", "xAxis", "=", "xAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "xAxis", "*", "xAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "yAxis", "=", "yAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "yAxis", "*", "yAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "zAxis", "=", "zAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "zAxis", "*", "zAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "\n", "xAxis", "=", "xAxis", ".", "view", "(", "[", "batchSize", ",", "3", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "yAxis", "=", "yAxis", ".", "view", "(", "[", "batchSize", ",", "3", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "zAxis", "=", "zAxis", ".", "view", "(", "[", "batchSize", ",", "3", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "rotMat", "=", "torch", ".", "cat", "(", "[", "xAxis", ",", "yAxis", ",", "zAxis", "]", ",", "dim", "=", "2", ")", "\n", "l", "=", "l", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "l", "=", "torch", ".", "sum", "(", "rotMat", ".", "expand", "(", "[", "batchSize", ",", "3", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "*", "l", ".", "expand", "(", "[", "batchSize", ",", "3", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", ",", "dim", "=", "2", ")", "\n", "l", "=", "l", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "l", "*", "l", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "\n", "return", "l", "\n", "\n", "", "def", "sampleEnvLight", "(", "self", ",", "l", ",", "envmap", ")", ":", "\n", "        ", "batchSize", "=", "envmap", ".", "size", "(", "0", ")", "\n", "assert", "(", "batchSize", "<=", "self", ".", "batchSize", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.buildCostVolume.__init__": [[198, 252], ["phis.squeeze().astype.squeeze().astype.squeeze().astype", "thetas.squeeze().astype.squeeze().astype.squeeze().astype", "numpy.meshgrid", "numpy.meshgrid", "numpy.meshgrid", "numpy.meshgrid", "thetaJitters1.reshape.reshape.reshape", "thetaJitters2.reshape.reshape.reshape", "phiJitters1.reshape.reshape.reshape", "phiJitters2.reshape.reshape.reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.buildCostVolume.thetas1.size", "models.renderer", "numpy.array", "up.reshape.reshape.reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "thetas2.reshape", "thetas1.reshape", "phis2.reshape", "phis1.reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "phis.squeeze().astype.squeeze().astype.squeeze", "thetas.squeeze().astype.squeeze().astype.squeeze"], "methods", ["None"], ["l", "=", "torch", ".", "clamp", "(", "l", ",", "-", "0.999999", ",", "0.999999", ")", "\n", "# Compute theta and phi", "\n", "x", ",", "y", ",", "z", "=", "torch", ".", "split", "(", "l", ",", "[", "1", ",", "1", ",", "1", "]", ",", "dim", "=", "1", ")", "\n", "theta", "=", "torch", ".", "acos", "(", "y", ")", "\n", "phi", "=", "torch", ".", "atan2", "(", "x", ",", "z", ")", "\n", "v", "=", "theta", "/", "np", ".", "pi", "*", "(", "self", ".", "envHeight", "-", "1", ")", "\n", "u", "=", "(", "-", "phi", "/", "np", ".", "pi", "/", "2.0", "+", "0.5", ")", "*", "(", "self", ".", "envWidth", "-", "1", ")", "\n", "\n", "# Bilinear interpolation to get the new image", "\n", "offset", "=", "self", ".", "offset", ".", "detach", "(", ")", "[", "0", ":", "batchSize", ",", ":", "]", "\n", "offset", "=", "offset", ".", "expand_as", "(", "u", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "u", ",", "v", "=", "torch", ".", "flatten", "(", "u", ")", ",", "torch", ".", "flatten", "(", "v", ")", "\n", "u1", "=", "torch", ".", "clamp", "(", "torch", ".", "floor", "(", "u", ")", ".", "detach", "(", ")", ",", "0", ",", "self", ".", "envWidth", "-", "1", ")", "\n", "v1", "=", "torch", ".", "clamp", "(", "torch", ".", "floor", "(", "v", ")", ".", "detach", "(", ")", ",", "0", ",", "self", ".", "envHeight", "-", "1", ")", "\n", "u2", "=", "torch", ".", "clamp", "(", "torch", ".", "ceil", "(", "u", ")", ".", "detach", "(", ")", ",", "0", ",", "self", ".", "envWidth", "-", "1", ")", "\n", "v2", "=", "torch", ".", "clamp", "(", "torch", ".", "ceil", "(", "v", ")", ".", "detach", "(", ")", ",", "0", ",", "self", ".", "envHeight", "-", "1", ")", "\n", "\n", "w_r", "=", "(", "u", "-", "u1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "w_l", "=", "(", "1", "-", "w_r", ")", "\n", "w_u", "=", "(", "v2", "-", "v", ")", ".", "unsqueeze", "(", "1", ")", "\n", "w_d", "=", "(", "1", "-", "w_u", ")", "\n", "\n", "u1", ",", "v1", "=", "u1", ".", "long", "(", ")", ",", "v1", ".", "long", "(", ")", "\n", "u2", ",", "v2", "=", "u2", ".", "long", "(", ")", ",", "v2", ".", "long", "(", ")", "\n", "offset", "=", "torch", ".", "flatten", "(", "offset", ")", "\n", "size_0", "=", "self", ".", "envWidth", "*", "self", ".", "envHeight", "*", "batchSize", "\n", "envmap", "=", "envmap", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "reshape", "(", "[", "size_0", ",", "channelNum", "]", ")", "\n", "index", "=", "(", "v1", "*", "self", ".", "envWidth", "+", "u2", ")", "+", "offset", "\n", "envmap_ru", "=", "torch", ".", "index_select", "(", "envmap", ",", "0", ",", "index", ")", "\n", "index", "=", "(", "v2", "*", "self", ".", "envWidth", "+", "u2", ")", "+", "offset", "\n", "envmap_rd", "=", "torch", ".", "index_select", "(", "envmap", ",", "0", ",", "index", ")", "\n", "index", "=", "(", "v1", "*", "self", ".", "envWidth", "+", "u1", ")", "+", "offset", "\n", "envmap_lu", "=", "torch", ".", "index_select", "(", "envmap", ",", "0", ",", "index", ")", "\n", "index", "=", "(", "v2", "*", "self", ".", "envWidth", "+", "u1", ")", "+", "offset", "\n", "envmap_ld", "=", "torch", ".", "index_select", "(", "envmap", ",", "0", ",", "index", ")", "\n", "\n", "envmap_r", "=", "envmap_ru", "*", "w_u", ".", "expand_as", "(", "envmap_ru", ")", "+", "envmap_rd", "*", "w_d", ".", "expand_as", "(", "envmap_rd", ")", "\n", "envmap_l", "=", "envmap_lu", "*", "w_u", ".", "expand_as", "(", "envmap_lu", ")", "+", "envmap_ld", "*", "w_d", ".", "expand_as", "(", "envmap_ld", ")", "\n", "renderedImg", "=", "envmap_r", "*", "w_r", ".", "expand_as", "(", "envmap_r", ")", "+", "envmap_l", "*", "w_l", ".", "expand_as", "(", "envmap_l", ")", "\n", "\n", "# Post processing", "\n", "renderedImg", "=", "renderedImg", ".", "reshape", "(", "[", "batchSize", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", ",", "3", "]", ")", "\n", "renderedImg", "=", "renderedImg", ".", "transpose", "(", "3", ",", "2", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "return", "renderedImg", "\n", "\n", "", "def", "getBackground", "(", "self", ",", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1", ")", ":", "\n", "        ", "l", "=", "self", ".", "v", ".", "expand_as", "(", "normal1", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "l", "=", "self", ".", "transformCoordinate", "(", "l", ",", "origin", ",", "lookat", ",", "up", ")", "\n", "backImg", "=", "self", ".", "sampleEnvLight", "(", "l", ",", "envmap", ")", "\n", "return", "backImg", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.buildCostVolume.forward": [[253, 329], ["normal1.size", "imBatch.reshape.reshape.unsqueeze().expand", "seg1Batch.reshape.reshape.unsqueeze().expand", "envmap.reshape.reshape.unsqueeze().expand", "origin.reshape.reshape.unsqueeze().expand", "lookat.reshape.reshape.unsqueeze().expand", "up.reshape.reshape.unsqueeze().expand", "imBatch.reshape.reshape.reshape", "seg1Batch.reshape.reshape.reshape", "envmap.reshape.reshape.reshape", "origin.reshape.reshape.reshape", "lookat.reshape.reshape.reshape", "up.reshape.reshape.reshape", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "models.buildCostVolume.renderer.forward", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.buildCostVolume.up.clone().cuda", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "normal1Array.reshape.reshape.reshape", "normal2Array.reshape.reshape.reshape", "models.buildCostVolume.renderer.forward", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "imBatch.reshape.reshape.unsqueeze", "seg1Batch.reshape.reshape.unsqueeze", "envmap.reshape.reshape.unsqueeze", "origin.reshape.reshape.unsqueeze", "lookat.reshape.reshape.unsqueeze", "up.reshape.reshape.unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "torch.cross.unsqueeze", "yAxis1.unsqueeze", "yAxis2.unsqueeze", "zAxis1.unsqueeze", "zAxis2.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.buildCostVolume.up.clone", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "numpy.random.random().astype", "numpy.random.random().astype", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "numpy.random.random().astype", "numpy.random.random().astype", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.random.random", "numpy.random.random", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "numpy.random.random", "numpy.random.random", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.buildCostVolume.thetas1.size", "models.buildCostVolume.phis1.size", "models.buildCostVolume.thetas2.size", "models.buildCostVolume.phis2.size"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.forward", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.forward"], ["\n", "", "def", "forward", "(", "self", ",", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1", ",", "normal2", ")", ":", "\n", "# origin n x 3", "\n", "# lookat n x 3", "\n", "# up n x 3", "\n", "# envmap n x 3 x envHeight x envWidth", "\n", "# normal1 n x 3 x imHeight x imWidth", "\n", "# normal2 n x 3 x imHeight x imWidth", "\n", "# view 3 x imHeight x imWidth", "\n", "        ", "l", "=", "self", ".", "v", ".", "expand_as", "(", "normal1", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "l_t", ",", "attenuate1", ",", "mask1", "=", "self", ".", "refraction", "(", "l", ",", "normal1", ",", "self", ".", "eta1", ",", "self", ".", "eta2", ")", "\n", "l_t", ",", "attenuate2", ",", "mask2", "=", "self", ".", "refraction", "(", "l_t", ",", "normal2", ",", "self", ".", "eta2", ",", "self", ".", "eta1", ")", "\n", "\n", "l_r", "=", "self", ".", "reflection", "(", "l", ",", "normal1", ")", "\n", "\n", "l_t", "=", "self", ".", "transformCoordinate", "(", "l_t", ",", "origin", ",", "lookat", ",", "up", ")", "\n", "l_r", "=", "self", ".", "transformCoordinate", "(", "l_r", ",", "origin", ",", "lookat", ",", "up", ")", "\n", "\n", "refractImg", "=", "self", ".", "sampleEnvLight", "(", "l_t", ",", "envmap", ")", "\n", "refractImg", "=", "refractImg", "*", "(", "1", "-", "attenuate1", ")", "*", "(", "1", "-", "attenuate2", ")", "\n", "\n", "reflectImg", "=", "self", ".", "sampleEnvLight", "(", "l_r", ",", "envmap", ")", "\n", "reflectImg", "=", "reflectImg", "*", "attenuate1", "\n", "\n", "mask", "=", "torch", ".", "clamp", "(", "(", "mask1", "+", "mask2", ")", ".", "float", "(", ")", ",", "0", ",", "1", ")", "\n", "\n", "return", "refractImg", ",", "reflectImg", ",", "mask", "\n", "\n", "", "", "class", "buildCostVolume", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "thetas", ",", "phis", ",", "thetaJitters", ",", "phiJitters", ",", "isCuda", "=", "True", ",", "\n", "eta1", "=", "1.0003", ",", "eta2", "=", "1.4723", ",", "\n", "batchSize", "=", "2", ",", "\n", "fov", "=", "63.4", ",", "imWidth", "=", "480", ",", "imHeight", "=", "360", ",", "\n", "envWidth", "=", "512", ",", "envHeight", "=", "256", ",", "sampleNum", "=", "50", ",", "lamb", "=", "1.0", ")", ":", "\n", "\n", "        ", "phis", "=", "phis", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "thetas", "=", "thetas", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "lamb", "=", "lamb", "\n", "\n", "thetas2", ",", "thetas1", "=", "np", ".", "meshgrid", "(", "thetas", ",", "thetas", ")", "\n", "thetaJitters1", ",", "thetaJitters2", "=", "np", ".", "meshgrid", "(", "thetaJitters", ",", "thetaJitters", ")", "\n", "\n", "phis2", ",", "phis1", "=", "np", ".", "meshgrid", "(", "phis", ",", "phis", ")", "\n", "phiJitters1", ",", "phiJitters2", "=", "np", ".", "meshgrid", "(", "phiJitters", ",", "phiJitters", ")", "\n", "\n", "thetas2", ",", "thetas1", "=", "thetas2", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", ",", "thetas1", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "thetaJitters1", "=", "thetaJitters1", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "thetaJitters2", "=", "thetaJitters2", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "phis2", ",", "phis1", "=", "phis2", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", ",", "phis1", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "phiJitters1", "=", "phiJitters1", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "phiJitters2", "=", "phiJitters2", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "thetas1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "thetas1", ")", ")", "\n", "self", ".", "thetas2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "thetas2", ")", ")", "\n", "self", ".", "thetaJitters1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "thetaJitters1", ")", ")", "\n", "self", ".", "thetaJitters2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "thetaJitters2", ")", ")", "\n", "\n", "self", ".", "phis1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "phis1", ")", ")", "\n", "self", ".", "phis2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "phis2", ")", ")", "\n", "self", ".", "phiJitters1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "phiJitters1", ")", ")", "\n", "self", ".", "phiJitters2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "phiJitters2", ")", ")", "\n", "\n", "self", ".", "inputNum", "=", "self", ".", "thetas1", ".", "size", "(", "1", ")", "\n", "self", ".", "renderer", "=", "renderer", "(", "eta1", "=", "eta1", ",", "eta2", "=", "eta2", ",", "\n", "isCuda", "=", "isCuda", ",", "\n", "batchSize", "=", "batchSize", "*", "self", ".", "inputNum", ",", "\n", "fov", "=", "fov", ",", "imWidth", "=", "imWidth", ",", "imHeight", "=", "imHeight", ",", "\n", "envWidth", "=", "envWidth", ",", "envHeight", "=", "envHeight", ")", "\n", "\n", "self", ".", "imWidth", "=", "imWidth", "\n", "self", ".", "imHeight", "=", "imHeight", "\n", "self", ".", "envWidth", "=", "envWidth", "\n", "self", ".", "envHeight", "=", "envHeight", "\n", "\n", "self", ".", "sampleNum", "=", "sampleNum", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.buildVisualHull.__init__": [[332, 350], ["numpy.meshgrid", "numpy.concatenate().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.linspace", "numpy.linspace", "numpy.linspace", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.concatenate"], "methods", ["None"], ["up", "=", "up", ".", "reshape", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "up", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "up", ")", ")", "\n", "\n", "self", ".", "isCuda", "=", "isCuda", "\n", "\n", "", "def", "forward", "(", "self", ",", "imBatch", ",", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1", ",", "normal2", ",", "seg1Batch", ")", ":", "\n", "        ", "batchSize", "=", "normal1", ".", "size", "(", "0", ")", "\n", "imBatch", "=", "imBatch", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "seg1Batch", "=", "seg1Batch", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "1", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "envmap", "=", "envmap", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", ",", "self", ".", "envHeight", ",", "self", ".", "envWidth", "]", ")", "\n", "origin", "=", "origin", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "lookat", "=", "lookat", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "up", "=", "up", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "batchSize", ",", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "\n", "imBatch", "=", "imBatch", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "seg1Batch", "=", "seg1Batch", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "1", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "envmap", "=", "envmap", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "envHeight", ",", "self", ".", "envWidth", "]", ")", "\n", "origin", "=", "origin", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", "]", ")", "\n", "lookat", "=", "lookat", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.buildVisualHull.forward": [[352, 427], ["origin.reshape.reshape.size", "error.reshape.reshape.size", "error.reshape.reshape.size", "torch.autograd.Variable().cuda.reshape().astype", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "origin.reshape.reshape.reshape", "xAxis.reshape.reshape.reshape", "yAxis.reshape.reshape.reshape", "zAxis.reshape.reshape.reshape", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "error.reshape.reshape.reshape", "mask.reshape.reshape.reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.sum().unsqueeze().unsqueeze", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.index_select().reshape", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "torch.prod().unsqueeze().unsqueeze", "numpy.tan", "numpy.arange", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "models.buildVisualHull.coord.cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.floor", "torch.clamp.floor", "torch.clamp.floor", "torch.clamp.ceil", "torch.clamp.ceil", "torch.clamp.ceil", "torch.clamp.floor", "torch.clamp.floor", "torch.clamp.floor", "torch.clamp.ceil", "torch.clamp.ceil", "torch.clamp.ceil", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "wx_d.size", "torch.autograd.Variable().cuda.reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.prod().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ind_dd.reshape().long", "ind_du.reshape().long", "ind_ud.reshape().long", "ind_uu.reshape().long", "ind_dd.reshape().long", "ind_du.reshape().long", "ind_ud.reshape().long", "ind_uu.reshape().long", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "ind_dd.reshape", "ind_du.reshape", "ind_ud.reshape", "ind_uu.reshape", "ind_dd.reshape", "ind_du.reshape", "ind_ud.reshape", "ind_uu.reshape"], "methods", ["None"], ["\n", "normal1Best", "=", "Variable", "(", "torch", ".", "zeros", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "cuda", "(", ")", "\n", "normal2Best", "=", "Variable", "(", "torch", ".", "zeros", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "n", "in", "range", "(", "0", ",", "self", ".", "sampleNum", ")", ":", "\n", "            ", "upAxis", "=", "self", ".", "up", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "yAxis1", "=", "upAxis", "-", "torch", ".", "sum", "(", "upAxis", "*", "normal1", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "*", "normal1", "\n", "yAxis1", "=", "yAxis1", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "yAxis1", "*", "yAxis1", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "zAxis1", "=", "normal1", "\n", "xAxis1", "=", "torch", ".", "cross", "(", "yAxis1", ",", "zAxis1", ",", "dim", "=", "1", ")", "\n", "xAxis1", "=", "xAxis1", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "xAxis1", "*", "xAxis1", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "\n", "yAxis2", "=", "upAxis", "-", "torch", ".", "sum", "(", "upAxis", "*", "normal2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "*", "normal2", "\n", "yAxis2", "=", "yAxis2", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "yAxis2", "*", "yAxis2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "zAxis2", "=", "normal2", "\n", "xAxis2", "=", "torch", ".", "cross", "(", "yAxis2", ",", "zAxis2", ",", "dim", "=", "1", ")", "\n", "xAxis2", "=", "xAxis2", "/", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "xAxis2", "*", "xAxis2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "min", "=", "1e-10", ")", ")", "\n", "\n", "xAxis1", ",", "xAxis2", "=", "xAxis1", ".", "unsqueeze", "(", "1", ")", ",", "xAxis2", ".", "unsqueeze", "(", "1", ")", "\n", "yAxis1", ",", "yAxis2", "=", "yAxis1", ".", "unsqueeze", "(", "1", ")", ",", "yAxis2", ".", "unsqueeze", "(", "1", ")", "\n", "zAxis1", ",", "zAxis2", "=", "zAxis1", ".", "unsqueeze", "(", "1", ")", ",", "zAxis2", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "thetaOffsets1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "(", "np", ".", "random", ".", "random", "(", "self", ".", "thetas1", ".", "size", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ")", "\n", "thetas1", "=", "(", "self", ".", "thetas1", "+", "self", ".", "thetaJitters1", "*", "thetaOffsets1", ")", ".", "cuda", "(", ")", "\n", "phiOffsets1", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "(", "np", ".", "random", ".", "random", "(", "self", ".", "phis1", ".", "size", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ")", "\n", "phis1", "=", "(", "self", ".", "phis1", "+", "self", ".", "phiJitters1", "*", "phiOffsets1", ")", ".", "cuda", "(", ")", "\n", "normal1Array", "=", "torch", ".", "sin", "(", "thetas1", ")", "*", "torch", ".", "cos", "(", "phis1", ")", "*", "xAxis1", "+", "torch", ".", "sin", "(", "thetas1", ")", "*", "torch", ".", "sin", "(", "phis1", ")", "*", "yAxis1", "+", "torch", ".", "cos", "(", "thetas1", ")", "*", "zAxis1", "\n", "\n", "thetaOffsets2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "(", "np", ".", "random", ".", "random", "(", "self", ".", "thetas2", ".", "size", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ")", "\n", "thetas2", "=", "(", "self", ".", "thetas2", "+", "self", ".", "thetaJitters2", "*", "thetaOffsets2", ")", ".", "cuda", "(", ")", "\n", "phiOffsets2", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "(", "np", ".", "random", ".", "random", "(", "self", ".", "phis2", ".", "size", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ")", "\n", "phis2", "=", "(", "self", ".", "phis2", "+", "self", ".", "phiJitters2", "*", "phiOffsets2", ")", ".", "cuda", "(", ")", "\n", "normal2Array", "=", "torch", ".", "sin", "(", "thetas2", ")", "*", "torch", ".", "cos", "(", "phis2", ")", "*", "xAxis2", "+", "torch", ".", "sin", "(", "thetas2", ")", "*", "torch", ".", "sin", "(", "phis2", ")", "*", "yAxis2", "+", "torch", ".", "cos", "(", "thetas2", ")", "*", "zAxis2", "\n", "\n", "normal1Array", "=", "normal1Array", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "normal2Array", "=", "normal2Array", ".", "reshape", "(", "[", "batchSize", "*", "self", ".", "inputNum", ",", "3", ",", "self", ".", "imHeight", ",", "self", ".", "imWidth", "]", ")", "\n", "\n", "refractImg", ",", "reflectImg", ",", "mask", "=", "self", ".", "renderer", ".", "forward", "(", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1Array", ",", "normal2Array", ")", "\n", "renderedImg", "=", "torch", ".", "clamp", "(", "refractImg", "+", "refractImg", ",", "0", ",", "1", ")", "\n", "\n", "cost", "=", "torch", ".", "norm", "(", "renderedImg", "-", "imBatch", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "normal1Best", "+=", "normal1Array", "*", "torch", ".", "exp", "(", "-", "self", ".", "lamb", "*", "cost", ")", "\n", "normal2Best", "+=", "normal2Array", "*", "torch", ".", "exp", "(", "-", "self", ".", "lamb", "*", "cost", ")", "\n", "\n", "", "normal1Best", "=", "normal1Best", "*", "seg1Batch", "\n", "normal2Best", "=", "normal2Best", "*", "seg1Batch", "\n", "\n", "normal1Best", "=", "normal1Best", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal1Best", "*", "normal1Best", ",", "dim", "=", "1", ")", ")", ",", "min", "=", "1e-10", ")", ".", "unsqueeze", "(", "1", ")", "\n", "normal2Best", "=", "normal2Best", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal2Best", "*", "normal2Best", ",", "dim", "=", "1", ")", ")", ",", "min", "=", "1e-10", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "refractImg", ",", "reflectImg", ",", "mask", "=", "self", ".", "renderer", ".", "forward", "(", "origin", ",", "lookat", ",", "up", ",", "envmap", ",", "normal1Best", ",", "normal2Best", ")", "\n", "renderedImg", "=", "torch", ".", "clamp", "(", "refractImg", "+", "refractImg", ",", "0", ",", "1", ")", "\n", "cost", "=", "torch", ".", "norm", "(", "renderedImg", "-", "imBatch", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "costVolume", "=", "torch", ".", "cat", "(", "[", "cost", ",", "mask", ",", "normal1Best", ",", "normal2Best", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "costVolume", "\n", "\n", "\n", "", "", "class", "buildVisualHull", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "fov", "=", "63.4", ",", "volumeSize", "=", "32", ")", ":", "\n", "        ", "minX", ",", "maxX", "=", "-", "1.1", ",", "1.1", "\n", "minY", ",", "maxY", "=", "-", "1.1", ",", "1.1", "\n", "minZ", ",", "maxZ", "=", "-", "1.1", ",", "1.1", "\n", "\n", "y", ",", "x", ",", "z", "=", "np", ".", "meshgrid", "(", "\n", "np", ".", "linspace", "(", "minX", ",", "maxX", ",", "volumeSize", ")", ",", "\n", "np", ".", "linspace", "(", "minY", ",", "maxY", ",", "volumeSize", ")", ",", "\n", "np", ".", "linspace", "(", "minZ", ",", "maxZ", ",", "volumeSize", ")", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "z", "=", "z", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.__init__": [[430, 438], ["numpy.tan"], "methods", ["None"], ["self", ".", "coord", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "coord", ")", ")", "\n", "\n", "self", ".", "volumeSize", "=", "volumeSize", "\n", "self", ".", "fov", "=", "fov", "/", "180.0", "*", "np", ".", "pi", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "origin", ",", "lookat", ",", "up", ",", "error", ",", "mask", ")", ":", "\n", "        ", "batchSize", "=", "origin", ".", "size", "(", "0", ")", "\n", "imHeight", "=", "error", ".", "size", "(", "2", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear": [[439, 469], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.floor().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.ceil().detach", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "torch.clamp.long", "w_u.expand_as", "w_d.expand_as", "w_u.expand_as", "w_d.expand_as", "w_r.expand_as", "w_l.expand_as", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil"], "methods", ["None"], ["imWidth", "=", "error", ".", "size", "(", "3", ")", "\n", "pixelSize", "=", "0.5", "*", "imWidth", "/", "np", ".", "tan", "(", "self", ".", "fov", "/", "2.0", ")", "\n", "\n", "offset", "=", "np", ".", "arange", "(", "0", ",", "10", ")", "*", "(", "imHeight", "*", "imWidth", ")", "\n", "offset", "=", "offset", ".", "reshape", "(", "10", ",", "1", ",", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "offset", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "offset", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "yAxis", "=", "up", "\n", "zAxis", "=", "lookat", "-", "origin", "\n", "zAxis", "=", "zAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "zAxis", "*", "zAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "xAxis", "=", "torch", ".", "cross", "(", "zAxis", ",", "yAxis", ",", "dim", "=", "1", ")", "\n", "xAxis", "=", "xAxis", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "xAxis", "*", "xAxis", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "origin", "=", "origin", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "xAxis", "=", "xAxis", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "yAxis", "=", "yAxis", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "zAxis", "=", "zAxis", ".", "reshape", "(", "[", "batchSize", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "\n", "coordCam", "=", "self", ".", "coord", ".", "cuda", "(", ")", "-", "origin", "\n", "weight", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "coordCam", "*", "coordCam", ",", "dim", "=", "4", ")", ")", "\n", "weight", "=", "torch", ".", "exp", "(", "-", "weight", ")", "\n", "\n", "xCam", "=", "torch", ".", "sum", "(", "coordCam", "*", "xAxis", ",", "dim", "=", "4", ")", "\n", "yCam", "=", "torch", ".", "sum", "(", "coordCam", "*", "yAxis", ",", "dim", "=", "4", ")", "\n", "zCam", "=", "torch", ".", "sum", "(", "coordCam", "*", "zAxis", ",", "dim", "=", "4", ")", "\n", "\n", "xCam", "=", "xCam", "/", "torch", ".", "clamp", "(", "zCam", ",", "min", "=", "1e-6", ")", "\n", "yCam", "=", "yCam", "/", "torch", ".", "clamp", "(", "zCam", ",", "min", "=", "1e-6", ")", "\n", "\n", "xId", "=", "xCam", "*", "pixelSize", "+", "imWidth", "/", "2.0", "\n", "yId", "=", "-", "yCam", "*", "pixelSize", "+", "imHeight", "/", "2.0", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.sampleBestView": [[470, 571], ["torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "normalPointsVH.clone", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "points.clone", "normalPoints.clone", "range", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "maskTrBatch[].reshape", "normal1OptBatch[].permute", "normal1Opt.reshape.reshape.reshape", "errorBatch[].reshape", "depth1VHBatch[].reshape", "seg1Batch[].reshape", "depth1Batch[].permute", "depth1.reshape.reshape.reshape", "normal1Batch[].permute", "normal1.reshape.reshape.reshape", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.autograd.Variable().cuda.squeeze", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "models.groundtruthSampler.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "models.groundtruthSampler.unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.groundtruthSampler.selectBilinear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.autograd.Variable().cuda.squeeze", "torch.autograd.Variable().cuda.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.autograd.Variable().cuda.squeeze", "torch.autograd.Variable().cuda.squeeze", "points.size", "points.size", "points.size", "points.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear"], ["\n", "xId", "=", "torch", ".", "clamp", "(", "xId", ",", "0", ",", "imWidth", "-", "1", ")", "\n", "yId", "=", "torch", ".", "clamp", "(", "yId", ",", "0", ",", "imHeight", "-", "1", ")", "\n", "\n", "xId_d", ",", "xId_u", "=", "xId", ".", "floor", "(", ")", ",", "xId", ".", "ceil", "(", ")", "\n", "yId_d", ",", "yId_u", "=", "yId", ".", "floor", "(", ")", ",", "yId", ".", "ceil", "(", ")", "\n", "ind_dd", "=", "yId_d", "*", "imWidth", "+", "xId_d", "+", "offset", "\n", "ind_du", "=", "yId_d", "*", "imWidth", "+", "xId_u", "+", "offset", "\n", "ind_ud", "=", "yId_u", "*", "imWidth", "+", "xId_d", "+", "offset", "\n", "ind_uu", "=", "yId_u", "*", "imWidth", "+", "xId_u", "+", "offset", "\n", "\n", "wx_d", "=", "(", "xId", "-", "xId_d", ")", "\n", "wx_u", "=", "1", "-", "wx_d", "\n", "wy_d", "=", "(", "yId", "-", "yId_d", ")", "\n", "wy_u", "=", "1", "-", "wy_d", "\n", "\n", "error", "=", "error", ".", "reshape", "(", "-", "1", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "volumeError_dd", "=", "torch", ".", "index_select", "(", "error", ",", "0", ",", "ind_dd", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeError_du", "=", "torch", ".", "index_select", "(", "error", ",", "0", ",", "ind_du", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeError_ud", "=", "torch", ".", "index_select", "(", "error", ",", "0", ",", "ind_ud", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeError_uu", "=", "torch", ".", "index_select", "(", "error", ",", "0", ",", "ind_uu", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeError", "=", "volumeError_dd", "*", "wy_d", "*", "wx_d", "+", "volumeError_du", "*", "wy_d", "*", "wx_u", "+", "volumeError_ud", "*", "wy_u", "*", "wx_d", "+", "volumeError_uu", "*", "wy_u", "*", "wx_u", "\n", "volumeError", "=", "torch", ".", "sum", "(", "volumeError", "*", "weight", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "volumeMask_dd", "=", "torch", ".", "index_select", "(", "mask", ",", "0", ",", "ind_dd", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeMask_du", "=", "torch", ".", "index_select", "(", "mask", ",", "0", ",", "ind_du", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeMask_ud", "=", "torch", ".", "index_select", "(", "mask", ",", "0", ",", "ind_ud", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeMask_uu", "=", "torch", ".", "index_select", "(", "mask", ",", "0", ",", "ind_uu", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "reshape", "(", "wx_d", ".", "size", "(", ")", ")", "\n", "volumeMask", "=", "volumeMask_dd", "*", "wy_d", "*", "wx_d", "+", "volumeMask_du", "*", "wy_d", "*", "wx_u", "+", "volumeMask_ud", "*", "wy_u", "*", "wx_d", "+", "volumeMask_uu", "*", "wy_u", "*", "wx_u", "\n", "volumeMask", "=", "torch", ".", "prod", "(", "volumeMask", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "volume", "=", "volumeMask", "*", "volumeError", "\n", "return", "volume", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.sampleNearestView": [[572, 662], ["torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "normalPointsVH.clone", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "points.clone", "normalPoints.clone", "range", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "maskTrBatch[].reshape", "normal1OptBatch[].permute", "normal1Opt.reshape.reshape.reshape", "errorBatch[].reshape", "depth1VHBatch[].reshape", "seg1Batch[].reshape", "depth1Batch[].permute", "depth1.reshape.reshape.reshape", "normal1Batch[].permute", "normal1.reshape.reshape.reshape", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "models.groundtruthSampler.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "models.groundtruthSampler.unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.groundtruthSampler.selectBilinear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.autograd.Variable().cuda.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "points.size", "points.size", "points.size", "points.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear"], []], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.sampleNearestViewAverage": [[663, 753], ["torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "maskTrBatch[].reshape", "normal1OptBatch[].permute", "normal1Opt.reshape.reshape.reshape", "errorBatch[].reshape", "depth1VHBatch[].reshape", "seg1Batch[].reshape", "depth1Batch[].permute", "depth1.reshape.reshape.reshape", "normal1Batch[].permute", "normal1.reshape.reshape.reshape", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear().squeeze", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "models.groundtruthSampler.unsqueeze", "models.groundtruthSampler.unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.groundtruthSampler.selectBilinear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear", "models.groundtruthSampler.selectBilinear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "points.size", "points.size", "points.size", "points.size", "points.size", "points.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.models.groundtruthSampler.selectBilinear"], []], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.__init__": [[17, 144], ["phase.upper", "numpy.meshgrid", "numpy.concatenate", "glob.glob", "range", "len", "list", "numpy.linspace", "numpy.linspace", "numpy.linspace", "os.join", "os.join", "range", "range", "print", "max", "min", "os.join", "os.join", "sorted", "random.shuffle", "dataLoader.BatchLoader.imList.append", "random.seed", "range", "random.shuffle", "max", "min", "os.join", "os.join", "os.join", "os.join", "int", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "dataLoader.BatchLoader.originArr.append", "dataLoader.BatchLoader.lookatArr.append", "dataLoader.BatchLoader.upArr.append", "max", "min", "os.join", "os.join", "os.join", "os.join", "xml.parse", "xml.parse.getroot", "et.parse.getroot.findall", "len", "os.isdir", "os.isdir", "glob.glob", "len", "print", "len", "os.isdir", "os.isdir", "open", "camIn.readlines", "camLines[].strip", "camLines[].strip().split", "camLines[].strip().split", "camLines[].strip().split", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "len", "os.isdir", "os.isdir", "len", "os.join.findall", "os.join.findall", "dataLoader.BatchLoader.envList.append", "dataLoader.BatchLoader.scaleList.append", "len", "os.join", "os.join", "numpy.array", "numpy.array", "numpy.array", "origin.astype", "lookat.astype", "up.astype", "len", "st.get", "len", "float", "envListUnique.append", "camLines[].strip", "camLines[].strip", "camLines[].strip", "f.get", "len", "float", "float", "float"], "methods", ["None"], ["imHeight", "=", "360", ",", "imWidth", "=", "480", ",", "\n", "envHeight", "=", "256", ",", "envWidth", "=", "512", ",", "\n", "isRandom", "=", "True", ",", "phase", "=", "'TRAIN'", ",", "rseed", "=", "1", ",", "\n", "isLoadVH", "=", "False", ",", "isLoadEnvmap", "=", "False", ",", "\n", "isLoadCam", "=", "False", ",", "isLoadOptim", "=", "False", ",", "\n", "camNum", "=", "10", ",", "shapeRs", "=", "0", ",", "shapeRe", "=", "1500", ",", "volumeSize", "=", "32", ",", "batchSize", "=", "None", ",", "isOptim", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "dataRoot", "=", "dataRoot", "\n", "self", ".", "shapeRoot", "=", "shapeRoot", "\n", "self", ".", "imHeight", "=", "imHeight", "\n", "self", ".", "imWidth", "=", "imWidth", "\n", "self", ".", "envHeight", "=", "envHeight", "\n", "self", ".", "envWidth", "=", "envWidth", "\n", "self", ".", "phase", "=", "phase", ".", "upper", "(", ")", "\n", "self", ".", "isLoadVH", "=", "isLoadVH", "\n", "self", ".", "isLoadCam", "=", "isLoadCam", "\n", "self", ".", "isLoadEnvmap", "=", "isLoadEnvmap", "\n", "self", ".", "isLoadOptim", "=", "isLoadOptim", "\n", "self", ".", "camNum", "=", "camNum", "\n", "self", ".", "shapeRs", "=", "shapeRs", "\n", "self", ".", "shapeRe", "=", "shapeRe", "\n", "self", ".", "isOptim", "=", "isOptim", "\n", "\n", "if", "batchSize", "is", "None", ":", "\n", "            ", "batchSize", "=", "camNum", "\n", "self", ".", "batchSize", "=", "min", "(", "batchSize", ",", "10", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "batchSize", "=", "batchSize", "\n", "\n", "", "self", ".", "minX", ",", "self", ".", "maxX", "=", "-", "1.1", ",", "1.1", "\n", "self", ".", "minY", ",", "self", ".", "maxY", "=", "-", "1.1", ",", "1.1", "\n", "self", ".", "minZ", ",", "self", ".", "maxZ", "=", "-", "1.1", ",", "1.1", "\n", "self", ".", "volumeSize", "=", "volumeSize", "\n", "y", ",", "x", ",", "z", "=", "np", ".", "meshgrid", "(", "\n", "np", ".", "linspace", "(", "self", ".", "minX", ",", "self", ".", "maxX", ",", "volumeSize", ")", ",", "\n", "np", ".", "linspace", "(", "self", ".", "minY", ",", "self", ".", "maxY", ",", "volumeSize", ")", ",", "\n", "np", ".", "linspace", "(", "self", ".", "minZ", ",", "self", ".", "maxZ", ",", "volumeSize", ")", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "z", "=", "z", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "coord", "=", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "3", ")", "\n", "\n", "shapeList", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dataRoot", ",", "'Shape__*'", ")", ")", "\n", "if", "isLoadCam", ":", "\n", "            ", "self", ".", "originArr", "=", "[", "]", "\n", "self", ".", "lookatArr", "=", "[", "]", "\n", "self", ".", "upArr", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "max", "(", "0", ",", "shapeRs", ")", ",", "min", "(", "len", "(", "shapeList", ")", ",", "shapeRe", ")", ")", ":", "\n", "                ", "shape", "=", "osp", ".", "join", "(", "shapeRoot", ",", "'Shape__%d'", "%", "n", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "shape", ")", ":", "\n", "                    ", "continue", "\n", "", "camFileName", "=", "osp", ".", "join", "(", "shape", ",", "'cam%d.txt'", "%", "camNum", ")", "\n", "with", "open", "(", "camFileName", ",", "'r'", ")", "as", "camIn", ":", "\n", "                    ", "camLines", "=", "camIn", ".", "readlines", "(", ")", "\n", "", "viewNum", "=", "int", "(", "camLines", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "origins", "=", "[", "]", "\n", "lookats", "=", "[", "]", "\n", "ups", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "0", ",", "viewNum", ")", ":", "\n", "                    ", "originStr", "=", "camLines", "[", "3", "*", "n", "+", "1", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "lookatStr", "=", "camLines", "[", "3", "*", "n", "+", "2", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "upStr", "=", "camLines", "[", "3", "*", "n", "+", "3", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "origin", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "originStr", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "lookat", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "lookatStr", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "up", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "upStr", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "origins", ".", "append", "(", "origin", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "lookats", ".", "append", "(", "lookat", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ups", ".", "append", "(", "up", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "origins", "=", "np", ".", "concatenate", "(", "origins", ",", "axis", "=", "0", ")", "\n", "lookats", "=", "np", ".", "concatenate", "(", "lookats", ",", "axis", "=", "0", ")", "\n", "ups", "=", "np", ".", "concatenate", "(", "ups", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "originArr", ".", "append", "(", "origins", ")", "\n", "self", ".", "lookatArr", ".", "append", "(", "lookats", ")", "\n", "self", ".", "upArr", ".", "append", "(", "ups", ")", "\n", "\n", "", "", "if", "isLoadEnvmap", ":", "\n", "            ", "self", ".", "envList", "=", "[", "]", "\n", "self", ".", "scaleList", "=", "[", "]", "\n", "envListUnique", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "max", "(", "0", ",", "shapeRs", ")", ",", "min", "(", "len", "(", "shapeList", ")", ",", "shapeRe", ")", ")", ":", "\n", "                ", "shape", "=", "osp", ".", "join", "(", "shapeRoot", ",", "'Shape__%d'", "%", "n", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "shape", ")", ":", "\n", "                    ", "continue", "\n", "", "xmlFile", "=", "osp", ".", "join", "(", "shape", ",", "'im.xml'", ")", "\n", "# Create rendering file for Depth maps", "\n", "tree", "=", "et", ".", "parse", "(", "xmlFile", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "\n", "shapes", "=", "root", ".", "findall", "(", "'emitter'", ")", "\n", "assert", "(", "len", "(", "shapes", ")", "==", "1", ")", "\n", "for", "shape", "in", "shapes", ":", "\n", "                    ", "strings", "=", "shape", ".", "findall", "(", "'string'", ")", "\n", "assert", "(", "len", "(", "strings", ")", "==", "1", ")", "\n", "for", "st", "in", "strings", ":", "\n", "                        ", "envFileName", "=", "st", ".", "get", "(", "'value'", ")", "\n", "\n", "", "floats", "=", "shape", ".", "findall", "(", "'float'", ")", "\n", "assert", "(", "len", "(", "floats", ")", "==", "1", ")", "\n", "for", "f", "in", "floats", ":", "\n", "                        ", "scale", "=", "float", "(", "f", ".", "get", "(", "'value'", ")", ")", "\n", "", "self", ".", "envList", ".", "append", "(", "envFileName", ")", "\n", "self", ".", "scaleList", ".", "append", "(", "scale", ")", "\n", "\n", "if", "envFileName", "not", "in", "envListUnique", ":", "\n", "                        ", "envListUnique", ".", "append", "(", "envFileName", ")", "\n", "", "", "", "print", "(", "\"Number of environment maps %d\"", "%", "(", "len", "(", "envListUnique", ")", ")", ")", "\n", "\n", "", "self", ".", "imList", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "max", "(", "0", ",", "shapeRs", ")", ",", "min", "(", "len", "(", "shapeList", ")", ",", "shapeRe", ")", ")", ":", "\n", "            ", "shape", "=", "osp", ".", "join", "(", "dataRoot", ",", "'Shape__%d'", "%", "n", ")", "\n", "if", "not", "osp", ".", "isdir", "(", "shape", ")", ":", "\n", "                ", "continue", "\n", "", "imNames", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "shape", ",", "'im_*.rgbe'", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "imNames", ")", "\n", "if", "len", "(", "imNames", ")", "<", "camNum", ":", "\n", "                ", "print", "(", "'%s: %d'", "%", "(", "shape", ",", "len", "(", "imNames", ")", ")", ")", "\n", "assert", "(", "False", ")", "\n", "", "self", ".", "imList", ".", "append", "(", "imNames", "[", "0", ":", "camNum", "]", ")", "\n", "\n", "", "if", "rseed", "is", "not", "None", ":", "\n", "            ", "random", ".", "seed", "(", "rseed", ")", "\n", "\n", "# Permute the image list", "\n", "", "self", ".", "count", "=", "len", "(", "self", ".", "imList", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.__len__": [[145, 147], ["len"], "methods", ["None"], ["self", ".", "perm", "=", "list", "(", "range", "(", "self", ".", "count", ")", ")", "\n", "if", "isRandom", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "perm", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.__getitem__": [[148, 420], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "imName.replace().replace", "twoBounce[].transpose", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "twoBounce[].transpose", "numpy.ascontiguousarray", "twoBounce[].transpose", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "twoBounce[].transpose", "numpy.ascontiguousarray", "dataLoader.BatchLoader.loadHDR", "int", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "os.join", "os.join", "os.join", "os.join", "numpy.load", "os.join", "os.join", "numpy.load", "os.join", "os.join", "numpy.load", "os.join", "os.join", "numpy.load", "os.join", "os.join", "numpy.load", "os.join", "os.join", "numpy.load", "os.isfile", "os.isfile", "imName.replace().replace", "h5py.File", "numpy.array", "h5py.File.close", "numpy.load", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.concatenate", "scipy.binary_erosion", "scipy.binary_erosion", "numpy.ascontiguousarray.astype", "scipy.binary_erosion", "scipy.binary_erosion", "numpy.ascontiguousarray.astype", "int", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "cv2.resize", "numpy.ascontiguousarray", "numpy.concatenate.append", "imName.replace().replace", "twoBounceVH[].transpose", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "twoBounceVH[].transpose", "numpy.ascontiguousarray", "twoBounceVH[].transpose", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "twoBounceVH[].transpose", "numpy.ascontiguousarray", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "imName.replace().replace", "cv2.resize", "cv2.resize", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.concatenate.append", "numpy.concatenate.append", "imName.split", "imName.replace", "h5py.File.get", "numpy.sqrt", "numpy.sqrt", "[].split", "cv2.imread", "os.isfile", "os.isfile", "imName.replace().replace", "h5py.File", "numpy.array", "h5py.File.close", "numpy.load", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.concatenate", "scipy.binary_erosion", "scipy.binary_erosion", "numpy.ascontiguousarray.astype", "scipy.binary_erosion", "scipy.binary_erosion", "numpy.ascontiguousarray.astype", "os.isfile", "os.isfile", "imName.replace().replace", "h5py.File", "numpy.array", "h5py.File.close", "numpy.load", "numpy.ascontiguousarray.transpose", "numpy.ascontiguousarray.transpose", "imName.replace", "numpy.ones", "numpy.ones", "numpy.maximum", "numpy.maximum", "[].split", "numpy.ascontiguousarray.transpose", "imName.replace", "h5py.File.get", "numpy.sqrt", "numpy.sqrt", "imName.replace", "h5py.File.get", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "imName.replace", "numpy.ones", "numpy.ones", "numpy.maximum", "numpy.maximum", "imName.replace", "numpy.maximum", "numpy.maximum", "[].split", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "imName.split", "imName.split"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.loadHDR"], ["\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "perm", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "ind", ")", ":", "\n", "# normalize the normal vector so that it will be unit length", "\n", "\n", "        ", "imNames", "=", "self", ".", "imList", "[", "self", ".", "perm", "[", "ind", "]", "]", "\n", "if", "self", ".", "batchSize", "<", "self", ".", "camNum", ":", "\n", "            ", "random", ".", "shuffle", "(", "imNames", ")", "\n", "if", "self", ".", "isOptim", ":", "\n", "                ", "count", "=", "0", "\n", "imNamesNew", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "0", ",", "self", ".", "camNum", ")", ":", "\n", "                    ", "isAdd", "=", "False", "\n", "imName", "=", "imNames", "[", "n", "]", "\n", "if", "n", "==", "self", ".", "camNum", "-", "2", ":", "\n", "                        ", "isAdd", "=", "True", "\n", "", "else", ":", "\n", "                        ", "twoNormalName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoNormalPred%d_'", "%", "(", "self", ".", "camNum", ")", ")", ".", "replace", "(", "'.rgbe'", ",", "'.npy'", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "twoNormalName", ")", ":", "\n", "                            ", "isAdd", "=", "True", "\n", "", "", "if", "isAdd", "==", "True", ":", "\n", "                        ", "imNamesNew", ".", "append", "(", "imName", ")", "\n", "count", "+=", "1", "\n", "", "if", "count", "==", "self", ".", "batchSize", ":", "\n", "                        ", "break", "\n", "", "", "imNames", "=", "imNamesNew", "\n", "", "else", ":", "\n", "                ", "imNames", "=", "imNames", "[", "0", ":", "self", ".", "batchSize", "]", "\n", "\n", "", "", "segs", "=", "[", "]", "\n", "seg2s", "=", "[", "]", "\n", "normals", "=", "[", "]", "\n", "normal2s", "=", "[", "]", "\n", "depths", "=", "[", "]", "\n", "depth2s", "=", "[", "]", "\n", "ims", "=", "[", "]", "\n", "imEs", "=", "[", "]", "\n", "\n", "origins", "=", "[", "]", "\n", "lookats", "=", "[", "]", "\n", "ups", "=", "[", "]", "\n", "\n", "envs", "=", "[", "]", "\n", "\n", "segVHs", "=", "[", "]", "\n", "seg2VHs", "=", "[", "]", "\n", "normalVHs", "=", "[", "]", "\n", "normal2VHs", "=", "[", "]", "\n", "depthVHs", "=", "[", "]", "\n", "depth2VHs", "=", "[", "]", "\n", "\n", "normalOpts", "=", "[", "]", "\n", "normal2Opts", "=", "[", "]", "\n", "\n", "imScale", "=", "None", "\n", "for", "imName", "in", "imNames", ":", "\n", "            ", "twoBounceName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoBounce_'", ")", ".", "replace", "(", "'.rgbe'", ",", "'.npy'", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "twoBounceName", ")", ":", "\n", "                ", "twoBounceName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoBounce_'", ")", ".", "replace", "(", "'.rgbe'", ",", "'.h5'", ")", "\n", "hf", "=", "h5py", ".", "File", "(", "twoBounceName", ",", "'r'", ")", "\n", "twoBounce", "=", "np", ".", "array", "(", "hf", ".", "get", "(", "'data'", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "hf", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                ", "twoBounce", "=", "np", ".", "load", "(", "twoBounceName", ")", "\n", "\n", "", "if", "twoBounce", ".", "shape", "[", "0", "]", "!=", "self", ".", "imWidth", "or", "twoBounce", ".", "shape", "[", "1", "]", "!=", "self", ".", "imHeight", ":", "\n", "                ", "newTwoBounce1", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce2", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "3", ":", "6", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce3", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "6", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "newTwoBounce4", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "7", ":", "10", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce5", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "10", ":", "13", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce6", "=", "cv2", ".", "resize", "(", "twoBounce", "[", ":", ",", ":", ",", "13", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "twoBounce", "=", "np", ".", "concatenate", "(", "(", "newTwoBounce1", ",", "newTwoBounce2", ",", "newTwoBounce3", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "newTwoBounce4", ",", "newTwoBounce5", ",", "newTwoBounce6", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "normal", "=", "twoBounce", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "normal", "=", "np", ".", "ascontiguousarray", "(", "normal", ")", "\n", "seg", "=", "twoBounce", "[", ":", ",", ":", ",", "6", ":", "7", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ">", "0.9", "\n", "seg", "=", "np", ".", "ascontiguousarray", "(", "seg", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "depth", "=", "twoBounce", "[", ":", ",", ":", ",", "3", ":", "6", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "depth", "=", "np", ".", "ascontiguousarray", "(", "depth", ")", "\n", "depth", "=", "depth", "*", "seg", "\n", "\n", "normal2", "=", "twoBounce", "[", ":", ",", ":", ",", "7", ":", "10", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "normal2", "=", "np", ".", "ascontiguousarray", "(", "normal2", ")", "\n", "seg2", "=", "twoBounce", "[", ":", ",", ":", ",", "13", ":", "14", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ">", "0.9", "\n", "seg2", "=", "np", ".", "ascontiguousarray", "(", "seg2", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "depth2", "=", "twoBounce", "[", ":", ",", ":", ",", "10", ":", "13", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "depth2", "=", "np", ".", "ascontiguousarray", "(", "depth2", ")", "\n", "depth2", "=", "depth2", "*", "seg", "\n", "\n", "normal", "=", "normal", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normal", "*", "normal", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normal", "=", "normal", "*", "seg", "\n", "normal2", "=", "normal2", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normal2", "*", "normal2", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normal2", "=", "normal2", "*", "seg", "\n", "\n", "\n", "# Read rendered images", "\n", "imE", ",", "imScale", "=", "self", ".", "loadHDR", "(", "imName", ",", "imScale", ")", "\n", "im", "=", "imE", "*", "seg", "\n", "\n", "imId", "=", "int", "(", "imName", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "shapeId", "=", "int", "(", "imName", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "-", "self", ".", "shapeRs", "\n", "\n", "segs", ".", "append", "(", "seg", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "seg2s", ".", "append", "(", "seg2", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normals", ".", "append", "(", "normal", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normal2s", ".", "append", "(", "normal2", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "depths", ".", "append", "(", "depth", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "depth2s", ".", "append", "(", "depth2", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "ims", ".", "append", "(", "im", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "imEs", ".", "append", "(", "imE", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "# Load the rendering file", "\n", "if", "self", ".", "isLoadCam", ":", "\n", "                ", "origin", "=", "self", ".", "originArr", "[", "shapeId", "]", "[", "imId", "-", "1", "]", "\n", "lookat", "=", "self", ".", "lookatArr", "[", "shapeId", "]", "[", "imId", "-", "1", "]", "\n", "up", "=", "self", ".", "upArr", "[", "shapeId", "]", "[", "imId", "-", "1", "]", "\n", "\n", "origins", ".", "append", "(", "origin", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "lookats", ".", "append", "(", "lookat", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "ups", ".", "append", "(", "up", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "", "if", "self", ".", "isLoadEnvmap", ":", "\n", "                ", "envFileName", "=", "self", ".", "envList", "[", "shapeId", "]", "\n", "scale", "=", "self", ".", "scaleList", "[", "shapeId", "]", "\n", "env", "=", "cv2", ".", "imread", "(", "envFileName", ",", "-", "1", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "env", "=", "cv2", ".", "resize", "(", "env", ",", "(", "self", ".", "envWidth", ",", "self", ".", "envHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "env", "=", "np", ".", "ascontiguousarray", "(", "env", ")", "\n", "env", "=", "env", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "*", "imScale", "*", "scale", "\n", "\n", "envs", ".", "append", "(", "env", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "\n", "", "if", "self", ".", "isLoadVH", ":", "\n", "                ", "twoBounceVHName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imVH_%dtwoBounce_'", "%", "self", ".", "camNum", ")", ".", "replace", "(", "'.rgbe'", ",", "'.npy'", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "twoBounceVHName", ")", ":", "\n", "                    ", "twoBounceVHName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imVH_%dtwoBounce_'", "%", "self", ".", "camNum", ")", ".", "replace", "(", "'.rgbe'", ",", "'.h5'", ")", "\n", "hf", "=", "h5py", ".", "File", "(", "twoBounceVHName", ",", "'r'", ")", "\n", "twoBounceVH", "=", "np", ".", "array", "(", "hf", ".", "get", "(", "'data'", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "hf", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                    ", "twoBounceVH", "=", "np", ".", "load", "(", "twoBounceVHName", ")", "\n", "\n", "", "if", "twoBounceVH", ".", "shape", "[", "0", "]", "!=", "self", ".", "imWidth", "or", "twoBounceVH", ".", "shape", "[", "1", "]", "!=", "self", ".", "imHeight", ":", "\n", "                    ", "newTwoBounce1", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce2", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "3", ":", "6", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce3", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "6", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "newTwoBounce4", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "7", ":", "10", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce5", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "10", ":", "13", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "newTwoBounce6", "=", "cv2", ".", "resize", "(", "twoBounceVH", "[", ":", ",", ":", ",", "13", "]", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "twoBounceVH", "=", "np", ".", "concatenate", "(", "(", "newTwoBounce1", ",", "newTwoBounce2", ",", "newTwoBounce3", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "newTwoBounce4", ",", "newTwoBounce5", ",", "newTwoBounce6", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "normalVH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "normalVH", "=", "np", ".", "ascontiguousarray", "(", "normalVH", ")", "\n", "segVH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "6", ":", "7", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ">", "0.9", "\n", "segVH", "=", "np", ".", "ascontiguousarray", "(", "segVH", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "depthVH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "3", ":", "6", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "depthVH", "=", "np", ".", "ascontiguousarray", "(", "depthVH", ")", "\n", "depthVH", "=", "depthVH", "*", "segVH", "\n", "\n", "normal2VH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "7", ":", "10", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "normal2VH", "=", "np", ".", "ascontiguousarray", "(", "normal2VH", ")", "\n", "seg2VH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "13", ":", "14", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ">", "0.9", "\n", "seg2VH", "=", "np", ".", "ascontiguousarray", "(", "seg2VH", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "depth2VH", "=", "twoBounceVH", "[", ":", ",", ":", ",", "10", ":", "13", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "depth2VH", "=", "np", ".", "ascontiguousarray", "(", "depth2VH", ")", "\n", "depth2VH", "=", "depth2VH", "*", "segVH", "\n", "\n", "normalVH", "=", "normalVH", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normalVH", "*", "normalVH", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normalVH", "=", "normalVH", "*", "segVH", "\n", "normal2VH", "=", "normal2VH", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normal2VH", "*", "normal2VH", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normal2VH", "=", "normal2VH", "*", "segVH", "\n", "\n", "segVHs", ".", "append", "(", "segVH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "seg2VHs", ".", "append", "(", "seg2VH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normalVHs", ".", "append", "(", "normalVH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normal2VHs", ".", "append", "(", "normal2VH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "depthVHs", ".", "append", "(", "depthVH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "depth2VHs", ".", "append", "(", "depth2VH", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "", "if", "self", ".", "isLoadOptim", ":", "\n", "                ", "twoNormalName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoNormalPred%d_'", "%", "(", "self", ".", "camNum", ")", ")", ".", "replace", "(", "'.rgbe'", ",", "'.npy'", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "twoNormalName", ")", ":", "\n", "                    ", "twoNormalName", "=", "imName", ".", "replace", "(", "'im_'", ",", "'imtwoNormalPred%d_'", "%", "(", "self", ".", "camNum", ")", ")", ".", "replace", "(", "'.rgbe'", ",", "'.h5'", ")", "\n", "hf", "=", "h5py", ".", "File", "(", "twoNormalName", ",", "'r'", ")", "\n", "twoNormals", "=", "np", ".", "array", "(", "hf", ".", "get", "(", "'data'", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "hf", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                    ", "twoNormals", "=", "np", ".", "load", "(", "twoNormalName", ")", "\n", "", "normalOpt", ",", "normal2Opt", "=", "twoNormals", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "twoNormals", "[", ":", ",", ":", ",", "3", ":", "6", "]", "\n", "normalOpt", "=", "cv2", ".", "resize", "(", "normalOpt", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "normal2Opt", "=", "cv2", ".", "resize", "(", "normal2Opt", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "normalOpt", "=", "np", ".", "ascontiguousarray", "(", "normalOpt", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "normal2Opt", "=", "np", ".", "ascontiguousarray", "(", "normal2Opt", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "\n", "normalOpt", "=", "normalOpt", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normalOpt", "*", "normalOpt", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normalOpt", "=", "normalOpt", "*", "seg", "\n", "normal2Opt", "=", "normal2Opt", "/", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "sum", "(", "normal2Opt", "*", "normal2Opt", ",", "axis", "=", "0", ")", ",", "1e-10", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "normal2Opt", "=", "normal2Opt", "*", "seg", "\n", "\n", "normalOpts", ".", "append", "(", "normalOpt", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "normal2Opts", ".", "append", "(", "normal2Opt", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n", "", "", "segs", "=", "np", ".", "concatenate", "(", "segs", ",", "axis", "=", "0", ")", "\n", "seg2s", "=", "np", ".", "concatenate", "(", "seg2s", ",", "axis", "=", "0", ")", "\n", "normals", "=", "np", ".", "concatenate", "(", "normals", ",", "axis", "=", "0", ")", "\n", "normal2s", "=", "np", ".", "concatenate", "(", "normal2s", ",", "axis", "=", "0", ")", "\n", "depths", "=", "np", ".", "concatenate", "(", "depths", ",", "axis", "=", "0", ")", "\n", "depth2s", "=", "np", ".", "concatenate", "(", "depth2s", ",", "axis", "=", "0", ")", "\n", "ims", "=", "np", ".", "concatenate", "(", "ims", ",", "axis", "=", "0", ")", "\n", "imEs", "=", "np", ".", "concatenate", "(", "imEs", ",", "axis", "=", "0", ")", "\n", "\n", "batchDict", "=", "{", "'seg1'", ":", "segs", ",", "\n", "'seg2'", ":", "seg2s", ",", "\n", "'normal1'", ":", "normals", ",", "\n", "'normal2'", ":", "normal2s", ",", "\n", "'depth1'", ":", "depths", ",", "\n", "'depth2'", ":", "depth2s", ",", "\n", "'im'", ":", "ims", ",", "\n", "'imE'", ":", "imEs", ",", "\n", "'name'", ":", "imNames", "}", "\n", "\n", "if", "self", ".", "isLoadCam", ":", "\n", "            ", "origins", "=", "np", ".", "concatenate", "(", "origins", ",", "axis", "=", "0", ")", "\n", "lookats", "=", "np", ".", "concatenate", "(", "lookats", ",", "axis", "=", "0", ")", "\n", "ups", "=", "np", ".", "concatenate", "(", "ups", ",", "axis", "=", "0", ")", "\n", "\n", "batchDict", "[", "'origin'", "]", "=", "origins", "\n", "batchDict", "[", "'lookat'", "]", "=", "lookats", "\n", "batchDict", "[", "'up'", "]", "=", "ups", "\n", "\n", "", "if", "self", ".", "isLoadEnvmap", ":", "\n", "            ", "envs", "=", "np", ".", "concatenate", "(", "envs", ",", "axis", "=", "0", ")", "\n", "batchDict", "[", "'env'", "]", "=", "envs", "\n", "\n", "", "if", "self", ".", "isLoadVH", ":", "\n", "            ", "segVHs", "=", "np", ".", "concatenate", "(", "segVHs", ",", "axis", "=", "0", ")", "\n", "seg2VHs", "=", "np", ".", "concatenate", "(", "seg2VHs", ",", "axis", "=", "0", ")", "\n", "normalVHs", "=", "np", ".", "concatenate", "(", "normalVHs", ",", "axis", "=", "0", ")", "\n", "normal2VHs", "=", "np", ".", "concatenate", "(", "normal2VHs", ",", "axis", "=", "0", ")", "\n", "depthVHs", "=", "np", ".", "concatenate", "(", "depthVHs", ",", "axis", "=", "0", ")", "\n", "depth2VHs", "=", "np", ".", "concatenate", "(", "depth2VHs", ",", "axis", "=", "0", ")", "\n", "\n", "batchDict", "[", "'seg1VH'", "]", "=", "segVHs", "\n", "batchDict", "[", "'seg2VH'", "]", "=", "seg2VHs", "\n", "batchDict", "[", "'normal1VH'", "]", "=", "normalVHs", "\n", "batchDict", "[", "'normal2VH'", "]", "=", "normal2VHs", "\n", "batchDict", "[", "'depth1VH'", "]", "=", "depthVHs", "\n", "batchDict", "[", "'depth2VH'", "]", "=", "depth2VHs", "\n", "\n", "", "if", "self", ".", "isLoadOptim", ":", "\n", "            ", "normalOpts", "=", "np", ".", "concatenate", "(", "normalOpts", ",", "axis", "=", "0", ")", "\n", "normal2Opts", "=", "np", ".", "concatenate", "(", "normal2Opts", ",", "axis", "=", "0", ")", "\n", "batchDict", "[", "'normalOpt'", "]", "=", "normalOpts", "\n", "batchDict", "[", "'normal2Opt'", "]", "=", "normal2Opts", "\n", "\n", "", "return", "batchDict", "\n", "\n", "", "def", "loadHDR", "(", "self", ",", "imName", ",", "scale", ")", ":", "\n", "        ", "if", "not", "osp", ".", "isfile", "(", "imName", ")", ":", "\n", "            ", "print", "(", "'Error: %s does not exist.'", "%", "imName", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.loadHDR": [[421, 437], ["cv2.resize", "numpy.ascontiguousarray", "numpy.mean", "numpy.clip().transpose", "os.isfile", "os.isfile", "print", "cv2.imread", "numpy.clip", "numpy.random.random"], "methods", ["None"], ["assert", "(", "False", ")", "\n", "", "image", "=", "cv2", ".", "imread", "(", "imName", ",", "-", "1", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image", "=", "np", ".", "ascontiguousarray", "(", "image", ")", "\n", "imMean", "=", "np", ".", "mean", "(", "image", ")", "\n", "\n", "if", "scale", "is", "None", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'TRAIN'", ":", "\n", "                ", "scale", "=", "(", "np", ".", "random", ".", "random", "(", ")", "*", "0.2", "+", "0.4", ")", "/", "imMean", "\n", "", "else", ":", "\n", "                ", "scale", "=", "0.5", "/", "imMean", "\n", "", "", "image", "=", "np", ".", "clip", "(", "(", "image", "*", "scale", ")", ",", "0", ",", "1", ")", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "return", "image", ",", "scale", "\n", "\n", "", "def", "loadImage", "(", "self", ",", "imName", ",", "isGama", "=", "False", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "imName", ")", ":", "\n", "            ", "print", "(", "'Fail to load {0}'", ".", "format", "(", "imName", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.loadImage": [[438, 456], ["PIL.Image.open", "dataLoader.BatchLoader.imResize", "numpy.asarray", "numpy.transpose", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "print", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.imResize"], ["im", "=", "np", ".", "zeros", "(", "[", "3", ",", "self", ".", "imSize", ",", "self", ".", "imSize", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "im", "\n", "\n", "", "im", "=", "Image", ".", "open", "(", "imName", ")", "\n", "im", "=", "self", ".", "imResize", "(", "im", ")", "\n", "im", "=", "np", ".", "asarray", "(", "im", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "isGama", ":", "\n", "            ", "im", "=", "(", "im", "/", "255.0", ")", "**", "2.2", "\n", "im", "=", "2", "*", "im", "-", "1", "\n", "", "else", ":", "\n", "            ", "im", "=", "(", "im", "-", "127.5", ")", "/", "127.5", "\n", "", "if", "len", "(", "im", ".", "shape", ")", "==", "2", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "im", "=", "np", ".", "transpose", "(", "im", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "return", "im", "\n", "\n", "", "def", "imResize", "(", "self", ",", "im", ")", ":", "\n", "        ", "w0", ",", "h0", "=", "im", ".", "size", "\n", "if", "w0", "!=", "self", ".", "imHeight", "or", "h0", "!=", "self", ".", "imWidth", ":", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.dataLoader.BatchLoader.imResize": [[457, 462], ["im.resize.resize.resize"], "methods", ["None"], ["            ", "im", "=", "im", ".", "resize", "(", "(", "self", ".", "imWidth", ",", "self", ".", "imHeight", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "", "return", "im", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeErrToScreen": [[13, 18], ["print", "range", "print", "len", "print", "errorArr[].data.item"], "function", ["None"], ["def", "writeErrToScreen", "(", "errorName", ",", "errorArr", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "print", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "errorName", ")", ",", "end", "=", "' '", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "print", "(", "'%.6f'", "%", "errorArr", "[", "n", "]", ".", "data", ".", "item", "(", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "'.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeCoefToScreen": [[19, 25], ["print", "coef.cpu().data.numpy", "range", "print", "len", "print", "coef.cpu"], "function", ["None"], ["", "def", "writeCoefToScreen", "(", "coefName", ",", "coef", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "print", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "coefName", ")", ",", "end", "=", "' '", ")", "\n", "coefNp", "=", "coef", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "coefNp", ")", ")", ":", "\n", "        ", "print", "(", "'%.6f'", "%", "coefNp", "[", "n", "]", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "'.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeNpErrToScreen": [[26, 31], ["print", "range", "print", "len", "print"], "function", ["None"], ["", "def", "writeNpErrToScreen", "(", "errorName", ",", "errorArr", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "print", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "errorName", ")", ",", "end", "=", "' '", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "print", "(", "'%.6f'", "%", "errorArr", "[", "n", "]", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "'.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeErrToFile": [[32, 37], ["fileOut.write", "range", "fileOut.write", "len", "fileOut.write", "errorArr[].data.item"], "function", ["None"], ["", "def", "writeErrToFile", "(", "errorName", ",", "errorArr", ",", "fileOut", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "fileOut", ".", "write", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "errorName", ")", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "fileOut", ".", "write", "(", "'%.6f '", "%", "errorArr", "[", "n", "]", ".", "data", ".", "item", "(", ")", ")", "\n", "", "fileOut", ".", "write", "(", "'.\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeCoefToFile": [[38, 44], ["fileOut.write", "coef.cpu().data.numpy", "range", "fileOut.write", "len", "fileOut.write", "coef.cpu"], "function", ["None"], ["", "def", "writeCoefToFile", "(", "coefName", ",", "coef", ",", "fileOut", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "fileOut", ".", "write", "(", "(", "'[%d/%d] {0}: '", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "coefName", ")", ")", "\n", "coefNp", "=", "coef", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "coefNp", ")", ")", ":", "\n", "        ", "fileOut", ".", "write", "(", "'%.6f '", "%", "coefNp", "[", "n", "]", ")", "\n", "", "fileOut", ".", "write", "(", "'.\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeNpErrToFile": [[45, 50], ["fileOut.write", "range", "fileOut.write", "len", "fileOut.write"], "function", ["None"], ["", "def", "writeNpErrToFile", "(", "errorName", ",", "errorArr", ",", "fileOut", ",", "epoch", ",", "j", ")", ":", "\n", "    ", "fileOut", ".", "write", "(", "(", "'[%d/%d] {0}:'", "%", "(", "epoch", ",", "j", ")", ")", ".", "format", "(", "errorName", ")", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "fileOut", ".", "write", "(", "'%.6f '", "%", "errorArr", "[", "n", "]", ")", "\n", "", "fileOut", ".", "write", "(", "'.\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.turnErrorIntoNumpy": [[51, 56], ["range", "len", "errorNp.append", "numpy.array", "errorArr[].data.item"], "function", ["None"], ["", "def", "turnErrorIntoNumpy", "(", "errorArr", ")", ":", "\n", "    ", "errorNp", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "0", ",", "len", "(", "errorArr", ")", ")", ":", "\n", "        ", "errorNp", ".", "append", "(", "errorArr", "[", "n", "]", ".", "data", ".", "item", "(", ")", ")", "\n", "", "return", "np", ".", "array", "(", "errorNp", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.visualizeGtEnvmap": [[57, 86], ["len", "numpy.zeros", "range", "numpy.clip", "PIL.Image.fromarray", "Image.fromarray.save", "range", "os.join", "cv2.resize", "name.split", "open", "envName.strip.strip", "cv2.imread", "name.split", "f.readlines", "fileName.split"], "function", ["None"], ["", "def", "visualizeGtEnvmap", "(", "dst", ",", "names", ",", "nrows", ",", "ncols", ",", "gridRows", ",", "gridCols", ",", "edge", "=", "5", ")", ":", "\n", "    ", "imgNum", "=", "len", "(", "names", ")", "\n", "assert", "(", "gridRows", "*", "gridCols", ">=", "imgNum", ")", "\n", "\n", "nRows", "=", "gridRows", "*", "nrows", "+", "edge", "*", "(", "gridRows", "+", "1", ")", "\n", "nCols", "=", "gridCols", "*", "ncols", "+", "edge", "*", "(", "gridCols", "+", "1", ")", "\n", "imArr", "=", "np", ".", "zeros", "(", "[", "nRows", ",", "nCols", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "rId", "in", "range", "(", "0", ",", "gridRows", ")", ":", "\n", "        ", "for", "cId", "in", "range", "(", "0", ",", "gridCols", ")", ":", "\n", "            ", "if", "rId", "*", "gridCols", "+", "cId", ">=", "imgNum", ":", "\n", "                ", "break", "\n", "", "n", "=", "rId", "*", "gridCols", "+", "cId", "\n", "sr", "=", "edge", "*", "(", "rId", "+", "1", ")", "+", "rId", "*", "nrows", "\n", "sc", "=", "edge", "*", "(", "cId", "+", "1", ")", "+", "cId", "*", "ncols", "\n", "\n", "name", "=", "names", "[", "n", "]", "\n", "root", "=", "'/'", ".", "join", "(", "name", ".", "split", "(", "'/'", ")", "[", "0", ":", "-", "1", "]", ")", "\n", "fileName", "=", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "envFile", "=", "osp", ".", "join", "(", "root", ",", "fileName", ".", "split", "(", "'_'", ")", "[", "1", "]", "+", "'.txt'", ")", "\n", "with", "open", "(", "envFile", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "envName", "=", "f", ".", "readlines", "(", ")", "[", "0", "]", "\n", "envName", "=", "envName", ".", "strip", "(", ")", "\n", "", "im", "=", "cv2", ".", "imread", "(", "envName", ",", "cv2", ".", "IMREAD_ANYDEPTH", "|", "cv2", ".", "IMREAD_ANYCOLOR", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "ncols", ",", "nrows", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "imArr", "[", "sr", ":", "sr", "+", "nrows", ",", "sc", ":", "sc", "+", "ncols", ",", ":", "]", "=", "im", "\n", "", "", "imArr", "=", "np", ".", "clip", "(", "imArr", ",", "0", ",", "1", ")", "\n", "imArr", "=", "(", "255", "*", "imArr", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imArr", "=", "Image", ".", "fromarray", "(", "imArr", ")", "\n", "imArr", ".", "save", "(", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.computeConfMap": [[87, 97], ["torch.split", "coef0.view.view", "coef1.view.view", "torch.min", "torch.autograd.Variable", "torch.exp", "torch.FloatTensor().cuda", "torch.FloatTensor", "segBatch.size"], "function", ["None"], ["", "def", "computeConfMap", "(", "imBatch", ",", "segBatch", ",", "coef", ",", "gpuId", ")", ":", "\n", "    ", "im", "=", "0.5", "*", "(", "imBatch", "+", "1", ")", "\n", "\n", "coef0", ",", "coef1", "=", "torch", ".", "split", "(", "coef", ",", "1", ")", "\n", "coef0", "=", "coef0", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "coef1", "=", "coef1", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "minIm", ",", "_", "=", "torch", ".", "min", "(", "im", ",", "dim", "=", "1", ")", "\n", "w0", "=", "(", "1", "-", "torch", ".", "exp", "(", "-", "(", "1", "-", "minIm", ")", "/", "0.02", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "w1", "=", "Variable", "(", "0", "*", "torch", ".", "FloatTensor", "(", "segBatch", ".", "size", "(", ")", ")", ".", "cuda", "(", "gpuId", ")", ")", "+", "1", "\n", "return", "coef0", "*", "w0", "+", "coef1", "*", "w1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeImageToFile": [[99, 111], ["imgBatch.size", "range", "imgBatch[].data.cpu().numpy", "numpy.clip", "PIL.Image.fromarray", "np.concatenate.save", "numpy.power", "numpy.concatenate", "imgBatch[].data.cpu", "np.concatenate.transpose"], "function", ["None"], ["", "def", "writeImageToFile", "(", "imgBatch", ",", "nameBatch", ",", "isGama", "=", "False", ")", ":", "\n", "    ", "batchSize", "=", "imgBatch", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "img", "=", "imgBatch", "[", "n", ",", ":", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "1", ")", "\n", "if", "isGama", ":", "\n", "            ", "img", "=", "np", ".", "power", "(", "img", ",", "1.0", "/", "2.2", ")", "\n", "", "img", "=", "(", "255", "*", "img", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "img", "=", "np", ".", "concatenate", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "2", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", ".", "save", "(", "nameBatch", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeImageBlockToFile": [[113, 130], ["imgBatch.size", "imgBatch.size", "range", "imgBatch[].data.cpu().numpy", "img.reshape.transpose", "img.reshape.reshape", "cv2.imwrite", "cv2.imwrite", "imgBatch[].data.cpu", "img.reshape.squeeze", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "", "def", "writeImageBlockToFile", "(", "imgBatch", ",", "nameBatch", ",", "isGama", "=", "False", ")", ":", "\n", "    ", "batchSize", "=", "imgBatch", ".", "size", "(", "0", ")", "\n", "chNum", "=", "imgBatch", ".", "size", "(", "3", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "img", "=", "imgBatch", "[", "n", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "name", "=", "nameBatch", "[", "n", "]", "\n", "\n", "bheight", ",", "bwidth", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "imHeight", ",", "imWidth", "=", "img", ".", "shape", "[", "3", "]", ",", "img", ".", "shape", "[", "4", "]", "\n", "\n", "img", "=", "img", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "4", ",", "2", "]", ")", "\n", "img", "=", "img", ".", "reshape", "(", "[", "bheight", "*", "imHeight", ",", "bwidth", "*", "imWidth", ",", "chNum", "]", ")", "\n", "img", "=", "(", "255", "*", "np", ".", "clip", "(", "np", ".", "clip", "(", "img", ",", "0", ",", "1", ")", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "chNum", "==", "3", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "nameBatch", "[", "n", "]", ",", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "nameBatch", "[", "n", "]", ",", "img", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeDataToFile": [[132, 141], ["imgBatch.size", "range", "imgBatch[].data.cpu().numpy", "h5py.File", "h5py.File.create_dataset", "h5py.File.close", "imgBatch[].data.cpu"], "function", ["None"], ["", "", "", "def", "writeDataToFile", "(", "imgBatch", ",", "nameBatch", ")", ":", "\n", "    ", "batchSize", "=", "imgBatch", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "img", "=", "imgBatch", "[", "n", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "name", "=", "nameBatch", "[", "n", "]", "\n", "\n", "hf", "=", "h5py", ".", "File", "(", "name", ",", "'w'", ")", "\n", "hf", ".", "create_dataset", "(", "'data'", ",", "data", "=", "img", ",", "compression", "=", "'lzf'", ")", "\n", "hf", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeDepthToFile": [[142, 147], ["depthBatch.size", "range", "depthBatch[].data.cpu().numpy().squeeze", "numpy.save", "depthBatch[].data.cpu().numpy", "depthBatch[].data.cpu"], "function", ["None"], ["", "", "def", "writeDepthToFile", "(", "depthBatch", ",", "nameBatch", ")", ":", "\n", "    ", "batchSize", "=", "depthBatch", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "depth", "=", "depthBatch", "[", "n", ",", ":", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "np", ".", "save", "(", "nameBatch", "[", "n", "]", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeEnvToFile": [[148, 153], ["SHBatch.size", "range", "SHBatch[].data.cpu().numpy", "numpy.save", "SHBatch[].data.cpu"], "function", ["None"], ["", "", "def", "writeEnvToFile", "(", "SHBatch", ",", "nameBatch", ")", ":", "\n", "    ", "batchSize", "=", "SHBatch", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "batchSize", ")", ":", "\n", "        ", "SH", "=", "SHBatch", "[", "n", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "nameBatch", "[", "n", "]", ",", "SH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeAlbedoNameToFile": [[154, 158], ["open", "range", "len", "fileOut.write"], "function", ["None"], ["", "", "def", "writeAlbedoNameToFile", "(", "fileName", ",", "albedoNameBatch", ")", ":", "\n", "    ", "with", "open", "(", "fileName", ",", "'w'", ")", "as", "fileOut", ":", "\n", "        ", "for", "n", "in", "range", "(", "0", ",", "len", "(", "albedoNameBatch", ")", ")", ":", "\n", "            ", "fileOut", ".", "write", "(", "'%s\\n'", "%", "albedoNameBatch", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.normalErrToColorMap": [[159, 164], ["torch.clamp().type", "torch.acos", "colormap[].squeeze().permute().type", "torch.clamp", "torch.clamp", "colormap[].squeeze().permute", "colormap[].squeeze"], "function", ["None"], ["", "", "", "def", "normalErrToColorMap", "(", "normalErr", ",", "mask", ",", "colormap", ")", ":", "\n", "    ", "errMap", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "(", "-", "1", ")", "*", "normalErr", ",", "-", "1", ",", "1", ")", ")", "*", "mask", "\n", "errMap", "=", "torch", ".", "clamp", "(", "errMap", "*", "180", "/", "np", ".", "pi", ",", "0", ",", "colormap", ".", "shape", "[", "0", "]", "-", "1", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "errMap", "=", "colormap", "[", "errMap", ",", ":", "]", ".", "squeeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "float", ")", "*", "mask", "\n", "return", "errMap", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.errToColorMap": [[165, 170], ["torch.clamp", "colormap[].squeeze().permute().type", "colormap[].squeeze().permute", "colormap[].squeeze"], "function", ["None"], ["", "def", "errToColorMap", "(", "err", ",", "mask", ",", "colormap", ",", "scale", "=", "1", ",", "maxValue", "=", "1", ")", ":", "\n", "    ", "errMap", "=", "torch", ".", "clamp", "(", "err", "*", "scale", ",", "0", ",", "maxValue", ")", "/", "maxValue", "\n", "errMap", "=", "(", "errMap", "*", "colormap", ".", "shape", "[", "0", "]", "-", "1", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "errMap", "=", "colormap", "[", "errMap", ",", ":", "]", ".", "squeeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "float", ")", "*", "mask", "\n", "return", "errMap", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writePointCloud": [[172, 197], ["colormap.cpu().data.numpy.cpu().data.numpy", "visualHull.cpu().data.numpy().squeeze.cpu().data.numpy().squeeze", "numpy.meshgrid", "numpy.concatenate().astype", "visualHull[].reshape", "coord[].reshape", "colormap[].reshape", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.io.write_point_cloud", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.log", "numpy.clip", "visualHull.cpu().data.numpy().squeeze.cpu().data.numpy", "numpy.concatenate", "colormap.cpu().data.numpy.cpu", "numpy.concatenate", "numpy.mean", "visualHull.cpu().data.numpy().squeeze.cpu", "visualHull[].reshape.astype"], "function", ["None"], ["", "def", "writePointCloud", "(", "fileName", ",", "visualHull", ",", "colormap", ")", ":", "\n", "    ", "colormap", "=", "colormap", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "visualHull", "=", "visualHull", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "resolution", "=", "visualHull", ".", "shape", "[", "0", "]", "\n", "y", ",", "x", ",", "z", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "1.1", ",", "1.1", ",", "resolution", ")", ",", "\n", "np", ".", "linspace", "(", "-", "1.1", ",", "1.1", ",", "resolution", ")", ",", "\n", "np", ".", "linspace", "(", "-", "1.1", ",", "1.1", ",", "resolution", ")", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "z", "=", "z", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "coord", "=", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "3", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "visualHull", "=", "visualHull", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "vInd", "=", "visualHull", ">", "0", "\n", "error", "=", "visualHull", "[", "vInd", "]", ".", "reshape", "(", "-", "1", ")", "\n", "error", "=", "-", "np", ".", "log", "(", "error", ")", "\n", "points", "=", "coord", "[", "np", ".", "concatenate", "(", "[", "vInd", ",", "vInd", ",", "vInd", "]", ",", "axis", "=", "3", ")", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "error", "=", "np", ".", "clip", "(", "error", "/", "np", ".", "mean", "(", "error", ")", "*", "0.5", ",", "0", ",", "1", ")", "*", "(", "colormap", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "colors", "=", "colormap", "[", "error", ".", "astype", "(", "np", ".", "uint32", ")", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "points", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "colors", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "fileName", ",", "pcd", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writeVisualHull": [[198, 211], ["visualHull.cpu().data.numpy().squeeze.cpu().data.numpy().squeeze", "visualHull.cpu().data.numpy().squeeze.copy", "skimage.measure.marching_cubes_lewiner", "trimesh.Trimesh", "trm.Trimesh.export", "float", "visualHull.cpu().data.numpy().squeeze.cpu().data.numpy", "visualHull.cpu().data.numpy().squeeze.cpu"], "function", ["None"], ["", "def", "writeVisualHull", "(", "fileName", ",", "visualHull", ")", ":", "\n", "    ", "visualHull", "=", "visualHull", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "VH", "=", "visualHull", ".", "copy", "(", ")", "\n", "VH", "[", "visualHull", "==", "0", "]", "=", "1", "\n", "VH", "[", "visualHull", ">", "0", "]", "=", "-", "1", "\n", "verts", ",", "faces", ",", "normals", ",", "_", "=", "measure", ".", "marching_cubes_lewiner", "(", "VH", ",", "0", ")", "\n", "\n", "resolution", "=", "visualHull", ".", "shape", "[", "0", "]", "\n", "axisLen", "=", "float", "(", "resolution", "-", "1", ")", "/", "2.0", "\n", "verts", "=", "(", "verts", "-", "axisLen", ")", "/", "axisLen", "*", "1.1", "\n", "mesh", "=", "trm", ".", "Trimesh", "(", "vertices", "=", "verts", ",", "vertex_normals", "=", "normals", ",", "faces", "=", "faces", ")", "\n", "mesh", ".", "export", "(", "fileName", ")", "\n", "\n", "return", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writePointWithComputedNormal": [[212, 221], ["points.data.cpu().numpy.data.cpu().numpy", "normals.data.cpu().numpy.data.cpu().numpy", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.geometry.PointCloud.estimate_normals", "open3d.utility.Vector3dVector", "open3d.io.write_point_cloud", "points.data.cpu().numpy.data.cpu", "normals.data.cpu().numpy.data.cpu", "open3d.geometry.KDTreeSearchParamHybrid", "numpy.ones"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writePointWithPredictedNormal": [[223, 232], ["points.data.cpu().numpy.data.cpu().numpy", "normals.data.cpu().numpy.data.cpu().numpy", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.io.write_point_cloud", "points.data.cpu().numpy.data.cpu", "normals.data.cpu().numpy.data.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.PointCloud.utils.writePointWithPredictedNormalSeparate": [[233, 253], ["points.data.cpu().numpy.data.cpu().numpy", "normals.data.cpu().numpy.data.cpu().numpy", "viewIds.data.cpu().numpy.data.cpu().numpy", "range", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.io.write_point_cloud", "fileName.replace", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.io.write_point_cloud", "points.data.cpu().numpy.data.cpu", "normals.data.cpu().numpy.data.cpu", "viewIds.data.cpu().numpy.data.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet_util.PointNetSetAbstraction.__init__": [[134, 149], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstraction.mlp_convs.append", "pointnet_util.PointNetSetAbstraction.mlp_gns.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npoint", ",", "radius", ",", "nsample", ",", "in_channel", ",", "mlp", ",", "gn", ")", ":", "\n", "        ", "super", "(", "PointNetSetAbstraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet_util.PointNetSetAbstraction.forward": [[150, 178], ["xyz.permute.permute.permute", "nxyz.permute.permute.permute", "pointnet_util.sample_and_group", "torch.relu.permute", "enumerate", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze().float", "new_xyz.permute.permute.permute", "new_nxyz.permute.permute.permute", "points.permute.permute.permute", "torch.relu", "torch.relu", "torch.relu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "gn", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze", "conv", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.sample_and_group"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz: input points position data, [B, C, N]\n            nxyz: input points normal data, [B, C, N]\n            points: input points data, [B, D, N]\n        Return:\n            new_xyz: sampled points position data, [B, C, S]\n            new_nxyz: sampled points normal data, [B, C, S]\n            new_points_concat: sample points feature data, [B, D', S]\n        \"\"\"", "\n", "xyz", "=", "xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz", "=", "nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "=", "sample_and_group", "(", "self", ".", "npoint", ",", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", "\n", "\n", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, C+D, nsample,npoint]", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "\n", "", "mask", "=", "mask", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "new_points", "=", "torch", ".", "max", "(", "new_points", ",", "2", ")", "[", "0", "]", "\n", "new_xyz", "=", "new_xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_nxyz", "=", "new_nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet_util.PointNetFeaturePropagation.__init__": [[181, 193], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetFeaturePropagation.mlp_convs.append", "pointnet_util.PointNetFeaturePropagation.mlp_gns.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mlp", ",", "gn", ",", "radius", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PointNetFeaturePropagation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "self", ".", "radius", "=", "radius", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv1d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet_util.PointNetFeaturePropagation.forward": [[194, 242], ["xyz1.permute.permute.permute", "nxyz1.permute.permute.permute", "xyz2.permute.permute.permute", "nxyz2.permute.permute.permute", "points2.permute.permute.permute", "torch.relu.permute", "enumerate", "points2.permute.permute.repeat", "pointnet_util.square_distance", "square_distance.sort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "points1.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "gn", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "conv", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["", "", "def", "forward", "(", "self", ",", "xyz1", ",", "nxyz1", ",", "xyz2", ",", "nxyz2", ",", "points1", ",", "points2", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz1: input points position data, [B, C, N]\n            xyz2: sampled input points position data, [B, C, S]\n            points1: input points data, [B, D, N]\n            points2: input points data, [B, D, S]\n        Return:\n            new_points: upsampled points data, [B, D', N]\n        \"\"\"", "\n", "xyz1", "=", "xyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz1", "=", "nxyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "xyz2", "=", "xyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz2", "=", "nxyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "points2", "=", "points2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", ",", "N", ",", "C", "=", "xyz1", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "xyz2", ".", "shape", "\n", "\n", "if", "S", "==", "1", ":", "\n", "            ", "interpolated_points", "=", "points2", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "dists", "=", "square_distance", "(", "xyz1", ",", "xyz2", ")", "\n", "dists", ",", "idx", "=", "dists", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "dists", ",", "idx", "=", "dists", "[", ":", ",", ":", ",", ":", "3", "]", ",", "idx", "[", ":", ",", ":", ",", ":", "3", "]", "# [B, N, 3]", "\n", "dists", "[", "dists", "<", "1e-10", "]", "=", "1e-10", "\n", "weight", "=", "1.0", "/", "dists", "# [B, N, 3]", "\n", "weight", "=", "weight", "/", "torch", ".", "sum", "(", "weight", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "# [B, N, 3]", "\n", "\n", "interpolated_points", "=", "torch", ".", "sum", "(", "index_points", "(", "points2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_nxyz", "=", "torch", ".", "sum", "(", "index_points", "(", "nxyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_xyz", "=", "torch", ".", "sum", "(", "index_points", "(", "xyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "\n", "nxyz_diff", "=", "nxyz1", "-", "interpolated_nxyz", "\n", "xyz_diff", "=", "xyz1", "-", "interpolated_xyz", "\n", "\n", "\n", "", "if", "points1", "is", "not", "None", ":", "\n", "            ", "points1", "=", "points1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "points1", ",", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "new_points", "=", "torch", ".", "cat", "(", "[", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet_util.square_distance": [[7, 29], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "torch.matmul", "dst.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n\n    src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet_util.index_points": [[31, 49], ["list", "list", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "len", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n\n    Input:\n        points: input points data, [B, N, C]\n        idx: sample index data, [B, S]\n    Return:\n        new_points:, indexed points data, [B, S, C]\n    \"\"\"", "\n", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet_util.farthest_point_sample": [[51, 73], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "xyz[].view", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, N, C]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet_util.query_ball_point": [[75, 97], ["torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "pointnet_util.square_distance", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance"], ["", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, [B, N, C]\n        new_xyz: query points, [B, S, C]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n        Repeat the first point if there are not enough points in the space\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "new_xyz", ".", "shape", "\n", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "group_idx", "[", "sqrdists", ">", "(", "radius", "**", "2", ")", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "mask", "=", "~", "(", "group_idx", "==", "N", ")", "\n", "group_idx", "[", "~", "mask", "]", "=", "group_first", "[", "~", "mask", "]", "\n", "return", "group_idx", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet_util.sample_and_group": [[99, 131], ["pointnet_util.farthest_point_sample", "pointnet_util.index_points", "pointnet_util.index_points", "pointnet_util.query_ball_point", "pointnet_util.index_points", "pointnet_util.index_points", "index_points.view", "index_points.view", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["", "def", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        npoint:\n        radius:\n        nsample:\n        xyz: input points position data, [B, N, C]\n        nxyz: input points position data, [B, N, C]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, npoint, C]\n        new_nxyz: sampled points normal data, [B, npoint, C]\n        new_points: sampled points data, [B, npoint, nsample, C+D]\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "new_nxyz", "=", "index_points", "(", "nxyz", ",", "fps_idx", ")", "\n", "idx", ",", "mask", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# [B, npoint, nsample, C]", "\n", "grouped_xyz_norm", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "grouped_nxyz", "=", "index_points", "(", "nxyz", ",", "idx", ")", "\n", "grouped_nxyz_norm", "=", "grouped_nxyz", "-", "new_nxyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "index_points", "(", "points", ",", "idx", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", ",", "grouped_points", "]", ",", "dim", "=", "-", "1", ")", "# [B, npoint, nsample, C+D]", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet.PointNetRefinePoint.__init__": [[9, 21], ["torch.Module.__init__", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PointNetRefinePoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sa1", "=", "PointNetSetAbstraction", "(", "1024", ",", "0.1", ",", "64", ",", "6", "+", "6", ",", "[", "64", ",", "64", "]", ",", "[", "4", ",", "4", "]", ")", "\n", "self", ".", "sa2", "=", "PointNetSetAbstraction", "(", "256", ",", "0.2", ",", "32", ",", "64", "+", "6", ",", "[", "128", ",", "128", "]", ",", "[", "8", ",", "8", "]", ")", "\n", "self", ".", "sa3", "=", "PointNetSetAbstraction", "(", "64", ",", "0.4", ",", "32", ",", "128", "+", "6", ",", "[", "256", ",", "256", "]", ",", "[", "16", ",", "16", "]", ")", "\n", "self", ".", "sa4", "=", "PointNetSetAbstraction", "(", "16", ",", "0.8", ",", "32", ",", "256", "+", "6", ",", "[", "512", ",", "512", "]", ",", "[", "32", ",", "32", "]", ")", "\n", "\n", "self", ".", "fp4", "=", "PointNetFeaturePropagation", "(", "777", ",", "[", "512", ",", "256", "]", ",", "[", "32", ",", "16", "]", ")", "\n", "self", ".", "fp3", "=", "PointNetFeaturePropagation", "(", "393", ",", "[", "256", ",", "128", "]", ",", "[", "16", ",", "8", "]", ")", "\n", "self", ".", "fp2", "=", "PointNetFeaturePropagation", "(", "201", ",", "[", "128", ",", "64", "]", ",", "[", "8", ",", "4", "]", ")", "\n", "self", ".", "fp1", "=", "PointNetFeaturePropagation", "(", "79", ",", "[", "64", "]", ",", "[", "4", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_maxPooling.pointnet.PointNetRefinePoint.forward": [[22, 42], ["pointnet.PointNetRefinePoint.sa1", "pointnet.PointNetRefinePoint.sa2", "pointnet.PointNetRefinePoint.sa3", "pointnet.PointNetRefinePoint.sa4", "pointnet.PointNetRefinePoint.fp4", "pointnet.PointNetRefinePoint.fp3", "pointnet.PointNetRefinePoint.fp2", "pointnet.PointNetRefinePoint.fp1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "depthDelta.permute.permute.permute", "normal.permute.permute.permute", "pointnet.PointNetRefinePoint.conv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", "=", "self", ".", "sa1", "(", "xyz", ",", "nxyz", ",", "points", ")", "\n", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", "=", "self", ".", "sa2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", ")", "\n", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", "=", "self", ".", "sa3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", ")", "\n", "l4_xyz", ",", "l4_nxyz", ",", "l4_points", "=", "self", ".", "sa4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", ")", "\n", "\n", "l3_points_new", "=", "self", ".", "fp4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l4_xyz", ",", "l4_nxyz", ",", "l3_points", ",", "l4_points", ")", "\n", "l2_points_new", "=", "self", ".", "fp3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l3_xyz", ",", "l3_nxyz", ",", "l2_points", ",", "l3_points_new", ")", "\n", "l1_points_new", "=", "self", ".", "fp2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l2_xyz", ",", "l2_nxyz", ",", "l1_points", ",", "l2_points_new", ")", "\n", "l0_points_new", "=", "self", ".", "fp1", "(", "xyz", ",", "nxyz", ",", "l1_xyz", ",", "l1_nxyz", ",", "points", ",", "l1_points_new", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "self", ".", "conv", "(", "l0_points_new", ")", ")", "\n", "\n", "depthDelta", ",", "normal", "=", "torch", ".", "split", "(", "output", ",", "[", "3", ",", "3", "]", ",", "dim", "=", "1", ")", "\n", "depthDelta", "=", "depthDelta", "*", "0.25", "\n", "normal", "=", "normal", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal", "*", "normal", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "min", "=", "1e-10", ")", "\n", "\n", "depthDelta", "=", "depthDelta", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "normal", "=", "normal", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "return", "depthDelta", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet_util.PointNetSetAbstraction.__init__": [[134, 149], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstraction.mlp_convs.append", "pointnet_util.PointNetSetAbstraction.mlp_gns.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npoint", ",", "radius", ",", "nsample", ",", "in_channel", ",", "mlp", ",", "gn", ")", ":", "\n", "        ", "super", "(", "PointNetSetAbstraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet_util.PointNetSetAbstraction.forward": [[150, 178], ["xyz.permute.permute.permute", "nxyz.permute.permute.permute", "pointnet_util.sample_and_group", "torch.relu.permute", "enumerate", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze().float", "new_xyz.permute.permute.permute", "new_nxyz.permute.permute.permute", "points.permute.permute.permute", "torch.relu", "torch.relu", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "gn", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze", "conv", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.sample_and_group"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz: input points position data, [B, C, N]\n            nxyz: input points normal data, [B, C, N]\n            points: input points data, [B, D, N]\n        Return:\n            new_xyz: sampled points position data, [B, C, S]\n            new_nxyz: sampled points normal data, [B, C, S]\n            new_points_concat: sample points feature data, [B, D', S]\n        \"\"\"", "\n", "xyz", "=", "xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz", "=", "nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "=", "sample_and_group", "(", "self", ".", "npoint", ",", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", "\n", "\n", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, C+D, nsample,npoint]", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "\n", "", "mask", "=", "mask", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "new_points", "=", "torch", ".", "max", "(", "new_points", ",", "2", ")", "[", "0", "]", "\n", "new_xyz", "=", "new_xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_nxyz", "=", "new_nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet_util.PointNetFeaturePropagation.__init__": [[181, 193], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetFeaturePropagation.mlp_convs.append", "pointnet_util.PointNetFeaturePropagation.mlp_gns.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mlp", ",", "gn", ",", "radius", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PointNetFeaturePropagation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "self", ".", "radius", "=", "radius", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv1d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet_util.PointNetFeaturePropagation.forward": [[194, 242], ["xyz1.permute.permute.permute", "nxyz1.permute.permute.permute", "xyz2.permute.permute.permute", "nxyz2.permute.permute.permute", "points2.permute.permute.permute", "torch.relu.permute", "enumerate", "points2.permute.permute.repeat", "pointnet_util.square_distance", "square_distance.sort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "points1.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "gn", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "conv", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["", "", "def", "forward", "(", "self", ",", "xyz1", ",", "nxyz1", ",", "xyz2", ",", "nxyz2", ",", "points1", ",", "points2", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz1: input points position data, [B, C, N]\n            xyz2: sampled input points position data, [B, C, S]\n            points1: input points data, [B, D, N]\n            points2: input points data, [B, D, S]\n        Return:\n            new_points: upsampled points data, [B, D', N]\n        \"\"\"", "\n", "xyz1", "=", "xyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz1", "=", "nxyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "xyz2", "=", "xyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz2", "=", "nxyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "points2", "=", "points2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", ",", "N", ",", "C", "=", "xyz1", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "xyz2", ".", "shape", "\n", "\n", "if", "S", "==", "1", ":", "\n", "            ", "interpolated_points", "=", "points2", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "dists", "=", "square_distance", "(", "xyz1", ",", "xyz2", ")", "\n", "dists", ",", "idx", "=", "dists", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "dists", ",", "idx", "=", "dists", "[", ":", ",", ":", ",", ":", "3", "]", ",", "idx", "[", ":", ",", ":", ",", ":", "3", "]", "# [B, N, 3]", "\n", "dists", "[", "dists", "<", "1e-10", "]", "=", "1e-10", "\n", "weight", "=", "1.0", "/", "dists", "# [B, N, 3]", "\n", "weight", "=", "weight", "/", "torch", ".", "sum", "(", "weight", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "# [B, N, 3]", "\n", "\n", "interpolated_points", "=", "torch", ".", "sum", "(", "index_points", "(", "points2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_nxyz", "=", "torch", ".", "sum", "(", "index_points", "(", "nxyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_xyz", "=", "torch", ".", "sum", "(", "index_points", "(", "xyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "\n", "nxyz_diff", "=", "nxyz1", "-", "interpolated_nxyz", "\n", "xyz_diff", "=", "xyz1", "-", "interpolated_xyz", "\n", "\n", "\n", "", "if", "points1", "is", "not", "None", ":", "\n", "            ", "points1", "=", "points1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "points1", ",", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "new_points", "=", "torch", ".", "cat", "(", "[", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet_util.square_distance": [[7, 29], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "torch.matmul", "dst.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n\n    src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet_util.index_points": [[31, 49], ["list", "list", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "len", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n\n    Input:\n        points: input points data, [B, N, C]\n        idx: sample index data, [B, S]\n    Return:\n        new_points:, indexed points data, [B, S, C]\n    \"\"\"", "\n", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet_util.farthest_point_sample": [[51, 73], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "xyz[].view", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, N, C]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet_util.query_ball_point": [[75, 97], ["torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "pointnet_util.square_distance", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance"], ["", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, [B, N, C]\n        new_xyz: query points, [B, S, C]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n        Repeat the first point if there are not enough points in the space\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "new_xyz", ".", "shape", "\n", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "group_idx", "[", "sqrdists", ">", "(", "radius", "**", "2", ")", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "mask", "=", "~", "(", "group_idx", "==", "N", ")", "\n", "group_idx", "[", "~", "mask", "]", "=", "group_first", "[", "~", "mask", "]", "\n", "return", "group_idx", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet_util.sample_and_group": [[99, 131], ["pointnet_util.farthest_point_sample", "pointnet_util.index_points", "pointnet_util.index_points", "pointnet_util.query_ball_point", "pointnet_util.index_points", "pointnet_util.index_points", "index_points.view", "index_points.view", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["", "def", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        npoint:\n        radius:\n        nsample:\n        xyz: input points position data, [B, N, C]\n        nxyz: input points position data, [B, N, C]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, npoint, C]\n        new_nxyz: sampled points normal data, [B, npoint, C]\n        new_points: sampled points data, [B, npoint, nsample, C+D]\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "new_nxyz", "=", "index_points", "(", "nxyz", ",", "fps_idx", ")", "\n", "idx", ",", "mask", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# [B, npoint, nsample, C]", "\n", "grouped_xyz_norm", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "grouped_nxyz", "=", "index_points", "(", "nxyz", ",", "idx", ")", "\n", "grouped_nxyz_norm", "=", "grouped_nxyz", "-", "new_nxyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "index_points", "(", "points", ",", "idx", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", ",", "grouped_points", "]", ",", "dim", "=", "-", "1", ")", "# [B, npoint, nsample, C+D]", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet.PointNetRefinePoint.__init__": [[9, 21], ["torch.Module.__init__", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PointNetRefinePoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sa1", "=", "PointNetSetAbstraction", "(", "1024", ",", "0.1", ",", "64", ",", "6", "+", "6", ",", "[", "64", ",", "64", "]", ",", "[", "4", ",", "4", "]", ")", "\n", "self", ".", "sa2", "=", "PointNetSetAbstraction", "(", "256", ",", "0.2", ",", "32", ",", "64", "+", "6", ",", "[", "128", ",", "128", "]", ",", "[", "8", ",", "8", "]", ")", "\n", "self", ".", "sa3", "=", "PointNetSetAbstraction", "(", "64", ",", "0.4", ",", "32", ",", "128", "+", "6", ",", "[", "256", ",", "256", "]", ",", "[", "16", ",", "16", "]", ")", "\n", "self", ".", "sa4", "=", "PointNetSetAbstraction", "(", "16", ",", "0.8", ",", "32", ",", "256", "+", "6", ",", "[", "512", ",", "512", "]", ",", "[", "32", ",", "32", "]", ")", "\n", "\n", "self", ".", "fp4", "=", "PointNetFeaturePropagation", "(", "777", ",", "[", "512", ",", "256", "]", ",", "[", "32", ",", "16", "]", ")", "\n", "self", ".", "fp3", "=", "PointNetFeaturePropagation", "(", "393", ",", "[", "256", ",", "128", "]", ",", "[", "16", ",", "8", "]", ")", "\n", "self", ".", "fp2", "=", "PointNetFeaturePropagation", "(", "201", ",", "[", "128", ",", "64", "]", ",", "[", "8", ",", "4", "]", ")", "\n", "self", ".", "fp1", "=", "PointNetFeaturePropagation", "(", "79", ",", "[", "64", "]", ",", "[", "4", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalDiff.pointnet.PointNetRefinePoint.forward": [[22, 42], ["pointnet.PointNetRefinePoint.sa1", "pointnet.PointNetRefinePoint.sa2", "pointnet.PointNetRefinePoint.sa3", "pointnet.PointNetRefinePoint.sa4", "pointnet.PointNetRefinePoint.fp4", "pointnet.PointNetRefinePoint.fp3", "pointnet.PointNetRefinePoint.fp2", "pointnet.PointNetRefinePoint.fp1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "depthDelta.permute.permute.permute", "normal.permute.permute.permute", "pointnet.PointNetRefinePoint.conv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", "=", "self", ".", "sa1", "(", "xyz", ",", "nxyz", ",", "points", ")", "\n", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", "=", "self", ".", "sa2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", ")", "\n", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", "=", "self", ".", "sa3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", ")", "\n", "l4_xyz", ",", "l4_nxyz", ",", "l4_points", "=", "self", ".", "sa4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", ")", "\n", "\n", "l3_points_new", "=", "self", ".", "fp4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l4_xyz", ",", "l4_nxyz", ",", "l3_points", ",", "l4_points", ")", "\n", "l2_points_new", "=", "self", ".", "fp3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l3_xyz", ",", "l3_nxyz", ",", "l2_points", ",", "l3_points_new", ")", "\n", "l1_points_new", "=", "self", ".", "fp2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l2_xyz", ",", "l2_nxyz", ",", "l1_points", ",", "l2_points_new", ")", "\n", "l0_points_new", "=", "self", ".", "fp1", "(", "xyz", ",", "nxyz", ",", "l1_xyz", ",", "l1_nxyz", ",", "points", ",", "l1_points_new", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "self", ".", "conv", "(", "l0_points_new", ")", ")", "\n", "\n", "depthDelta", ",", "normal", "=", "torch", ".", "split", "(", "output", ",", "[", "3", ",", "3", "]", ",", "dim", "=", "1", ")", "\n", "depthDelta", "=", "depthDelta", "*", "0.25", "\n", "normal", "=", "normal", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal", "*", "normal", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "min", "=", "1e-10", ")", "\n", "\n", "depthDelta", "=", "depthDelta", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "normal", "=", "normal", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "return", "depthDelta", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet_util.PointNetSetAbstraction.__init__": [[133, 148], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstraction.mlp_convs.append", "pointnet_util.PointNetSetAbstraction.mlp_gns.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["", "class", "PointNetSetAbstraction", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "npoint", ",", "radius", ",", "nsample", ",", "in_channel", ",", "mlp", ",", "gn", ")", ":", "\n", "        ", "super", "(", "PointNetSetAbstraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet_util.PointNetSetAbstraction.forward": [[149, 177], ["xyz.permute.permute.permute", "nxyz.permute.permute.permute", "pointnet_util.sample_and_group", "torch.relu.permute", "enumerate", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze().float", "new_xyz.permute.permute.permute", "new_nxyz.permute.permute.permute", "points.permute.permute.permute", "torch.relu", "torch.relu", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "gn", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze", "conv", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.sample_and_group"], ["\n", "", "", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz: input points position data, [B, C, N]\n            nxyz: input points normal data, [B, C, N]\n            points: input points data, [B, D, N]\n        Return:\n            new_xyz: sampled points position data, [B, C, S]\n            new_nxyz: sampled points normal data, [B, C, S]\n            new_points_concat: sample points feature data, [B, D', S]\n        \"\"\"", "\n", "xyz", "=", "xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz", "=", "nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "=", "sample_and_group", "(", "self", ".", "npoint", ",", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", "\n", "\n", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, C+D, nsample,npoint]", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "\n", "", "mask", "=", "mask", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "new_points", "=", "torch", ".", "max", "(", "new_points", ",", "2", ")", "[", "0", "]", "\n", "new_xyz", "=", "new_xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_nxyz", "=", "new_nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet_util.PointNetFeaturePropagation.__init__": [[180, 192], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetFeaturePropagation.mlp_convs.append", "pointnet_util.PointNetFeaturePropagation.mlp_gns.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["", "", "class", "PointNetFeaturePropagation", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mlp", ",", "gn", ",", "radius", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PointNetFeaturePropagation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "self", ".", "radius", "=", "radius", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv1d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet_util.PointNetFeaturePropagation.forward": [[193, 241], ["xyz1.permute.permute.permute", "nxyz1.permute.permute.permute", "xyz2.permute.permute.permute", "nxyz2.permute.permute.permute", "points2.permute.permute.permute", "torch.relu.permute", "enumerate", "points2.permute.permute.repeat", "pointnet_util.square_distance", "square_distance.sort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "points1.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "gn", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "conv", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["\n", "", "", "def", "forward", "(", "self", ",", "xyz1", ",", "nxyz1", ",", "xyz2", ",", "nxyz2", ",", "points1", ",", "points2", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz1: input points position data, [B, C, N]\n            xyz2: sampled input points position data, [B, C, S]\n            points1: input points data, [B, D, N]\n            points2: input points data, [B, D, S]\n        Return:\n            new_points: upsampled points data, [B, D', N]\n        \"\"\"", "\n", "xyz1", "=", "xyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz1", "=", "nxyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "xyz2", "=", "xyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz2", "=", "nxyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "points2", "=", "points2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", ",", "N", ",", "C", "=", "xyz1", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "xyz2", ".", "shape", "\n", "\n", "if", "S", "==", "1", ":", "\n", "            ", "interpolated_points", "=", "points2", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "dists", "=", "square_distance", "(", "xyz1", ",", "xyz2", ")", "\n", "dists", ",", "idx", "=", "dists", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "dists", ",", "idx", "=", "dists", "[", ":", ",", ":", ",", ":", "3", "]", ",", "idx", "[", ":", ",", ":", ",", ":", "3", "]", "# [B, N, 3]", "\n", "dists", "[", "dists", "<", "1e-10", "]", "=", "1e-10", "\n", "weight", "=", "1.0", "/", "dists", "# [B, N, 3]", "\n", "weight", "=", "weight", "/", "torch", ".", "sum", "(", "weight", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "# [B, N, 3]", "\n", "\n", "interpolated_points", "=", "torch", ".", "sum", "(", "index_points", "(", "points2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_nxyz", "=", "torch", ".", "sum", "(", "index_points", "(", "nxyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_xyz", "=", "torch", ".", "sum", "(", "index_points", "(", "xyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "\n", "nxyz_diff", "=", "nxyz1", "-", "interpolated_nxyz", "\n", "xyz_diff", "=", "xyz1", "-", "interpolated_xyz", "\n", "\n", "\n", "", "if", "points1", "is", "not", "None", ":", "\n", "            ", "points1", "=", "points1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "points1", ",", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "new_points", "=", "torch", ".", "cat", "(", "[", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "", "return", "new_points", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet_util.square_distance": [[6, 28], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "torch.matmul", "dst.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["\n", "def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n\n    src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet_util.index_points": [[30, 48], ["list", "list", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "len", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["\n", "", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n\n    Input:\n        points: input points data, [B, N, C]\n        idx: sample index data, [B, S]\n    Return:\n        new_points:, indexed points data, [B, S, C]\n    \"\"\"", "\n", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "return", "new_points", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet_util.farthest_point_sample": [[50, 72], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "xyz[].view", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["\n", "", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, N, C]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet_util.query_ball_point": [[74, 96], ["torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "pointnet_util.square_distance", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance"], ["\n", "", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, [B, N, C]\n        new_xyz: query points, [B, S, C]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n        Repeat the first point if there are not enough points in the space\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "new_xyz", ".", "shape", "\n", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "group_idx", "[", "sqrdists", ">", "(", "radius", "**", "2", ")", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "mask", "=", "~", "(", "group_idx", "==", "N", ")", "\n", "group_idx", "[", "~", "mask", "]", "=", "group_first", "[", "~", "mask", "]", "\n", "return", "group_idx", ",", "mask", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet_util.sample_and_group": [[98, 130], ["pointnet_util.farthest_point_sample", "pointnet_util.index_points", "pointnet_util.index_points", "pointnet_util.query_ball_point", "pointnet_util.index_points", "pointnet_util.index_points", "index_points.view", "index_points.view", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["\n", "", "def", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        npoint:\n        radius:\n        nsample:\n        xyz: input points position data, [B, N, C]\n        nxyz: input points position data, [B, N, C]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, npoint, C]\n        new_nxyz: sampled points normal data, [B, npoint, C]\n        new_points: sampled points data, [B, npoint, nsample, C+D]\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "new_nxyz", "=", "index_points", "(", "nxyz", ",", "fps_idx", ")", "\n", "idx", ",", "mask", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# [B, npoint, nsample, C]", "\n", "grouped_xyz_norm", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "grouped_nxyz", "=", "index_points", "(", "nxyz", ",", "idx", ")", "\n", "grouped_nxyz_norm", "=", "grouped_nxyz", "-", "new_nxyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "index_points", "(", "points", ",", "idx", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", ",", "grouped_points", "]", ",", "dim", "=", "-", "1", ")", "# [B, npoint, nsample, C+D]", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet.PointNetRefinePoint.__init__": [[9, 21], ["torch.Module.__init__", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PointNetRefinePoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sa1", "=", "PointNetSetAbstraction", "(", "1024", ",", "0.1", ",", "64", ",", "6", "+", "6", ",", "[", "64", ",", "64", "]", ",", "[", "4", ",", "4", "]", ")", "\n", "self", ".", "sa2", "=", "PointNetSetAbstraction", "(", "256", ",", "0.2", ",", "32", ",", "64", "+", "6", ",", "[", "128", ",", "128", "]", ",", "[", "8", ",", "8", "]", ")", "\n", "self", ".", "sa3", "=", "PointNetSetAbstraction", "(", "64", ",", "0.4", ",", "32", ",", "128", "+", "6", ",", "[", "256", ",", "256", "]", ",", "[", "16", ",", "16", "]", ")", "\n", "self", ".", "sa4", "=", "PointNetSetAbstraction", "(", "16", ",", "0.8", ",", "32", ",", "256", "+", "6", ",", "[", "512", ",", "512", "]", ",", "[", "32", ",", "32", "]", ")", "\n", "\n", "self", ".", "fp4", "=", "PointNetFeaturePropagation", "(", "777", ",", "[", "512", ",", "256", "]", ",", "[", "32", ",", "16", "]", ")", "\n", "self", ".", "fp3", "=", "PointNetFeaturePropagation", "(", "393", ",", "[", "256", ",", "128", "]", ",", "[", "16", ",", "8", "]", ")", "\n", "self", ".", "fp2", "=", "PointNetFeaturePropagation", "(", "201", ",", "[", "128", ",", "64", "]", ",", "[", "8", ",", "4", "]", ")", "\n", "self", ".", "fp1", "=", "PointNetFeaturePropagation", "(", "79", ",", "[", "64", "]", ",", "[", "4", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model.pointnet.PointNetRefinePoint.forward": [[22, 42], ["pointnet.PointNetRefinePoint.sa1", "pointnet.PointNetRefinePoint.sa2", "pointnet.PointNetRefinePoint.sa3", "pointnet.PointNetRefinePoint.sa4", "pointnet.PointNetRefinePoint.fp4", "pointnet.PointNetRefinePoint.fp3", "pointnet.PointNetRefinePoint.fp2", "pointnet.PointNetRefinePoint.fp1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "depthDelta.permute.permute.permute", "normal.permute.permute.permute", "pointnet.PointNetRefinePoint.conv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", "=", "self", ".", "sa1", "(", "xyz", ",", "nxyz", ",", "points", ")", "\n", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", "=", "self", ".", "sa2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", ")", "\n", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", "=", "self", ".", "sa3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", ")", "\n", "l4_xyz", ",", "l4_nxyz", ",", "l4_points", "=", "self", ".", "sa4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", ")", "\n", "\n", "l3_points_new", "=", "self", ".", "fp4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l4_xyz", ",", "l4_nxyz", ",", "l3_points", ",", "l4_points", ")", "\n", "l2_points_new", "=", "self", ".", "fp3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l3_xyz", ",", "l3_nxyz", ",", "l2_points", ",", "l3_points_new", ")", "\n", "l1_points_new", "=", "self", ".", "fp2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l2_xyz", ",", "l2_nxyz", ",", "l1_points", ",", "l2_points_new", ")", "\n", "l0_points_new", "=", "self", ".", "fp1", "(", "xyz", ",", "nxyz", ",", "l1_xyz", ",", "l1_nxyz", ",", "points", ",", "l1_points_new", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "self", ".", "conv", "(", "l0_points_new", ")", ")", "\n", "\n", "depthDelta", ",", "normal", "=", "torch", ".", "split", "(", "output", ",", "[", "3", ",", "3", "]", ",", "dim", "=", "1", ")", "\n", "depthDelta", "=", "depthDelta", "*", "0.25", "\n", "normal", "=", "normal", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal", "*", "normal", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "min", "=", "1e-10", ")", "\n", "\n", "depthDelta", "=", "depthDelta", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "normal", "=", "normal", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "return", "depthDelta", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet_util.PointNetSetAbstraction.__init__": [[134, 149], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstraction.mlp_convs.append", "pointnet_util.PointNetSetAbstraction.mlp_gns.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npoint", ",", "radius", ",", "nsample", ",", "in_channel", ",", "mlp", ",", "gn", ")", ":", "\n", "        ", "super", "(", "PointNetSetAbstraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet_util.PointNetSetAbstraction.forward": [[150, 178], ["xyz.permute.permute.permute", "nxyz.permute.permute.permute", "pointnet_util.sample_and_group", "torch.relu.permute", "enumerate", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze().float", "new_xyz.permute.permute.permute", "new_nxyz.permute.permute.permute", "points.permute.permute.permute", "torch.relu", "torch.relu", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "gn", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze", "conv", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.sample_and_group"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz: input points position data, [B, C, N]\n            nxyz: input points normal data, [B, C, N]\n            points: input points data, [B, D, N]\n        Return:\n            new_xyz: sampled points position data, [B, C, S]\n            new_nxyz: sampled points normal data, [B, C, S]\n            new_points_concat: sample points feature data, [B, D', S]\n        \"\"\"", "\n", "xyz", "=", "xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz", "=", "nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "=", "sample_and_group", "(", "self", ".", "npoint", ",", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", "\n", "\n", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, C+D, nsample,npoint]", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "\n", "", "mask", "=", "mask", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "new_points", "=", "torch", ".", "max", "(", "new_points", ",", "2", ")", "[", "0", "]", "\n", "new_xyz", "=", "new_xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_nxyz", "=", "new_nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet_util.PointNetFeaturePropagation.__init__": [[181, 193], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetFeaturePropagation.mlp_convs.append", "pointnet_util.PointNetFeaturePropagation.mlp_gns.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mlp", ",", "gn", ",", "radius", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PointNetFeaturePropagation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "self", ".", "radius", "=", "radius", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv1d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet_util.PointNetFeaturePropagation.forward": [[194, 242], ["xyz1.permute.permute.permute", "nxyz1.permute.permute.permute", "xyz2.permute.permute.permute", "nxyz2.permute.permute.permute", "points2.permute.permute.permute", "torch.relu.permute", "enumerate", "points2.permute.permute.repeat", "pointnet_util.square_distance", "square_distance.sort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "points1.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "gn", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "conv", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["", "", "def", "forward", "(", "self", ",", "xyz1", ",", "nxyz1", ",", "xyz2", ",", "nxyz2", ",", "points1", ",", "points2", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz1: input points position data, [B, C, N]\n            xyz2: sampled input points position data, [B, C, S]\n            points1: input points data, [B, D, N]\n            points2: input points data, [B, D, S]\n        Return:\n            new_points: upsampled points data, [B, D', N]\n        \"\"\"", "\n", "xyz1", "=", "xyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz1", "=", "nxyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "xyz2", "=", "xyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz2", "=", "nxyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "points2", "=", "points2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", ",", "N", ",", "C", "=", "xyz1", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "xyz2", ".", "shape", "\n", "\n", "if", "S", "==", "1", ":", "\n", "            ", "interpolated_points", "=", "points2", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "dists", "=", "square_distance", "(", "xyz1", ",", "xyz2", ")", "\n", "dists", ",", "idx", "=", "dists", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "dists", ",", "idx", "=", "dists", "[", ":", ",", ":", ",", ":", "3", "]", ",", "idx", "[", ":", ",", ":", ",", ":", "3", "]", "# [B, N, 3]", "\n", "dists", "[", "dists", "<", "1e-10", "]", "=", "1e-10", "\n", "weight", "=", "1.0", "/", "dists", "# [B, N, 3]", "\n", "weight", "=", "weight", "/", "torch", ".", "sum", "(", "weight", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "# [B, N, 3]", "\n", "\n", "interpolated_points", "=", "torch", ".", "sum", "(", "index_points", "(", "points2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_nxyz", "=", "torch", ".", "sum", "(", "index_points", "(", "nxyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_xyz", "=", "torch", ".", "sum", "(", "index_points", "(", "xyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "\n", "nxyz_diff", "=", "nxyz1", "-", "interpolated_nxyz", "\n", "xyz_diff", "=", "xyz1", "-", "interpolated_xyz", "\n", "\n", "\n", "", "if", "points1", "is", "not", "None", ":", "\n", "            ", "points1", "=", "points1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "points1", ",", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "new_points", "=", "torch", ".", "cat", "(", "[", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet_util.square_distance": [[7, 29], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "torch.matmul", "dst.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n\n    src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet_util.index_points": [[31, 49], ["list", "list", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "len", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n\n    Input:\n        points: input points data, [B, N, C]\n        idx: sample index data, [B, S]\n    Return:\n        new_points:, indexed points data, [B, S, C]\n    \"\"\"", "\n", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet_util.farthest_point_sample": [[51, 73], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "xyz[].view", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, N, C]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet_util.query_ball_point": [[75, 97], ["torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "pointnet_util.square_distance", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance"], ["", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, [B, N, C]\n        new_xyz: query points, [B, S, C]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n        Repeat the first point if there are not enough points in the space\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "new_xyz", ".", "shape", "\n", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "group_idx", "[", "sqrdists", ">", "(", "radius", "**", "2", ")", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "mask", "=", "~", "(", "group_idx", "==", "N", ")", "\n", "group_idx", "[", "~", "mask", "]", "=", "group_first", "[", "~", "mask", "]", "\n", "return", "group_idx", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet_util.sample_and_group": [[99, 131], ["pointnet_util.farthest_point_sample", "pointnet_util.index_points", "pointnet_util.index_points", "pointnet_util.query_ball_point", "pointnet_util.index_points", "pointnet_util.index_points", "index_points.view", "index_points.view", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["", "def", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        npoint:\n        radius:\n        nsample:\n        xyz: input points position data, [B, N, C]\n        nxyz: input points position data, [B, N, C]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, npoint, C]\n        new_nxyz: sampled points normal data, [B, npoint, C]\n        new_points: sampled points data, [B, npoint, nsample, C+D]\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "new_nxyz", "=", "index_points", "(", "nxyz", ",", "fps_idx", ")", "\n", "idx", ",", "mask", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# [B, npoint, nsample, C]", "\n", "grouped_xyz_norm", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "grouped_nxyz", "=", "index_points", "(", "nxyz", ",", "idx", ")", "\n", "grouped_nxyz_norm", "=", "grouped_nxyz", "-", "new_nxyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "index_points", "(", "points", ",", "idx", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", ",", "grouped_points", "]", ",", "dim", "=", "-", "1", ")", "# [B, npoint, nsample, C+D]", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet.PointNetRefinePoint.__init__": [[9, 21], ["torch.Module.__init__", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PointNetRefinePoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sa1", "=", "PointNetSetAbstraction", "(", "1024", ",", "0.1", ",", "64", ",", "6", "+", "6", ",", "[", "64", ",", "64", "]", ",", "[", "4", ",", "4", "]", ")", "\n", "self", ".", "sa2", "=", "PointNetSetAbstraction", "(", "256", ",", "0.2", ",", "32", ",", "64", "+", "6", ",", "[", "128", ",", "128", "]", ",", "[", "8", ",", "8", "]", ")", "\n", "self", ".", "sa3", "=", "PointNetSetAbstraction", "(", "64", ",", "0.4", ",", "32", ",", "128", "+", "6", ",", "[", "256", ",", "256", "]", ",", "[", "16", ",", "16", "]", ")", "\n", "self", ".", "sa4", "=", "PointNetSetAbstraction", "(", "16", ",", "0.8", ",", "32", ",", "256", "+", "6", ",", "[", "512", ",", "512", "]", ",", "[", "32", ",", "32", "]", ")", "\n", "\n", "self", ".", "fp4", "=", "PointNetFeaturePropagation", "(", "777", ",", "[", "512", ",", "256", "]", ",", "[", "32", ",", "16", "]", ")", "\n", "self", ".", "fp3", "=", "PointNetFeaturePropagation", "(", "393", ",", "[", "256", ",", "128", "]", ",", "[", "16", ",", "8", "]", ")", "\n", "self", ".", "fp2", "=", "PointNetFeaturePropagation", "(", "201", ",", "[", "128", ",", "64", "]", ",", "[", "8", ",", "4", "]", ")", "\n", "self", ".", "fp1", "=", "PointNetFeaturePropagation", "(", "79", ",", "[", "64", "]", ",", "[", "4", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_noNormalSkip.pointnet.PointNetRefinePoint.forward": [[22, 42], ["pointnet.PointNetRefinePoint.sa1", "pointnet.PointNetRefinePoint.sa2", "pointnet.PointNetRefinePoint.sa3", "pointnet.PointNetRefinePoint.sa4", "pointnet.PointNetRefinePoint.fp4", "pointnet.PointNetRefinePoint.fp3", "pointnet.PointNetRefinePoint.fp2", "pointnet.PointNetRefinePoint.fp1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "depthDelta.permute.permute.permute", "normal.permute.permute.permute", "pointnet.PointNetRefinePoint.conv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", "=", "self", ".", "sa1", "(", "xyz", ",", "nxyz", ",", "points", ")", "\n", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", "=", "self", ".", "sa2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", ")", "\n", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", "=", "self", ".", "sa3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", ")", "\n", "l4_xyz", ",", "l4_nxyz", ",", "l4_points", "=", "self", ".", "sa4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", ")", "\n", "\n", "l3_points_new", "=", "self", ".", "fp4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l4_xyz", ",", "l4_nxyz", ",", "l3_points", ",", "l4_points", ")", "\n", "l2_points_new", "=", "self", ".", "fp3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l3_xyz", ",", "l3_nxyz", ",", "l2_points", ",", "l3_points_new", ")", "\n", "l1_points_new", "=", "self", ".", "fp2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l2_xyz", ",", "l2_nxyz", ",", "l1_points", ",", "l2_points_new", ")", "\n", "l0_points_new", "=", "self", ".", "fp1", "(", "xyz", ",", "nxyz", ",", "l1_xyz", ",", "l1_nxyz", ",", "points", ",", "l1_points_new", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "self", ".", "conv", "(", "l0_points_new", ")", ")", "\n", "\n", "depthDelta", ",", "normal", "=", "torch", ".", "split", "(", "output", ",", "[", "3", ",", "3", "]", ",", "dim", "=", "1", ")", "\n", "depthDelta", "=", "depthDelta", "*", "0.25", "\n", "normal", "=", "normal", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal", "*", "normal", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "min", "=", "1e-10", ")", "\n", "\n", "depthDelta", "=", "depthDelta", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "normal", "=", "normal", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "return", "depthDelta", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.chamfer_distance.chamfer_distance.ChamferDistanceFunction.forward": [[10, 34], ["xyz1.contiguous.contiguous.size", "xyz2.contiguous.contiguous.size", "xyz1.contiguous.contiguous.contiguous", "xyz2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ctx.save_for_backward", "cd.forward", "dist1.cuda.cuda.cuda", "dist2.cuda.cuda.cuda", "idx1.cuda.cuda.cuda", "idx2.cuda.cuda.cuda", "cd.forward_cuda"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "batchsize", ",", "n", ",", "_", "=", "xyz1", ".", "size", "(", ")", "\n", "_", ",", "m", ",", "_", "=", "xyz2", ".", "size", "(", ")", "\n", "xyz1", "=", "xyz1", ".", "contiguous", "(", ")", "\n", "xyz2", "=", "xyz2", ".", "contiguous", "(", ")", "\n", "dist1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ")", "\n", "dist2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ")", "\n", "\n", "idx1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "idx2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "if", "not", "xyz1", ".", "is_cuda", ":", "\n", "            ", "cd", ".", "forward", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "dist1", "=", "dist1", ".", "cuda", "(", ")", "\n", "dist2", "=", "dist2", ".", "cuda", "(", ")", "\n", "idx1", "=", "idx1", ".", "cuda", "(", ")", "\n", "idx2", "=", "idx2", ".", "cuda", "(", ")", "\n", "cd", ".", "forward_cuda", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "return", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward": [[35, 53], ["graddist1.contiguous.contiguous.contiguous", "graddist2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "xyz1.size", "xyz2.size", "cd.backward", "gradxyz1.cuda.cuda.cuda", "gradxyz2.cuda.cuda.cuda", "cd.backward_cuda"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "graddist1", ",", "gradidx1", ",", "graddist2", ",", "gradidx2", ")", ":", "\n", "        ", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", "=", "ctx", ".", "saved_tensors", "\n", "\n", "graddist1", "=", "graddist1", ".", "contiguous", "(", ")", "\n", "graddist2", "=", "graddist2", ".", "contiguous", "(", ")", "\n", "\n", "gradxyz1", "=", "torch", ".", "zeros", "(", "xyz1", ".", "size", "(", ")", ")", "\n", "gradxyz2", "=", "torch", ".", "zeros", "(", "xyz2", ".", "size", "(", ")", ")", "\n", "\n", "if", "not", "graddist1", ".", "is_cuda", ":", "\n", "            ", "cd", ".", "backward", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "gradxyz1", "=", "gradxyz1", ".", "cuda", "(", ")", "\n", "gradxyz2", "=", "gradxyz2", ".", "cuda", "(", ")", "\n", "cd", ".", "backward_cuda", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "", "return", "gradxyz1", ",", "gradxyz2", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.chamfer_distance.chamfer_distance.ChamferDistance.forward": [[56, 58], ["ChamferDistanceFunction.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "return", "ChamferDistanceFunction", ".", "apply", "(", "xyz1", ",", "xyz2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.PointNetSetAbstraction.__init__": [[134, 149], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstraction.mlp_convs.append", "pointnet_util.PointNetSetAbstraction.mlp_gns.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npoint", ",", "radius", ",", "nsample", ",", "in_channel", ",", "mlp", ",", "gn", ")", ":", "\n", "        ", "super", "(", "PointNetSetAbstraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.PointNetSetAbstraction.forward": [[150, 178], ["xyz.permute.permute.permute", "nxyz.permute.permute.permute", "pointnet_util.sample_and_group", "torch.relu.permute", "enumerate", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze().float", "new_xyz.permute.permute.permute", "new_nxyz.permute.permute.permute", "points.permute.permute.permute", "torch.relu", "torch.relu", "torch.relu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "gn", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute().unsqueeze", "conv", "mask.permute().unsqueeze().float.permute().unsqueeze().float.permute"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.sample_and_group"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz: input points position data, [B, C, N]\n            nxyz: input points normal data, [B, C, N]\n            points: input points data, [B, D, N]\n        Return:\n            new_xyz: sampled points position data, [B, C, S]\n            new_nxyz: sampled points normal data, [B, C, S]\n            new_points_concat: sample points feature data, [B, D', S]\n        \"\"\"", "\n", "xyz", "=", "xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz", "=", "nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "=", "sample_and_group", "(", "self", ".", "npoint", ",", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", "\n", "\n", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, C+D, nsample,npoint]", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "\n", "", "mask", "=", "mask", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "new_points", "=", "torch", ".", "max", "(", "new_points", ",", "2", ")", "[", "0", "]", "\n", "new_xyz", "=", "new_xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_nxyz", "=", "new_nxyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.PointNetFeaturePropagation.__init__": [[181, 193], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetFeaturePropagation.mlp_convs.append", "pointnet_util.PointNetFeaturePropagation.mlp_gns.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mlp", ",", "gn", ",", "radius", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PointNetFeaturePropagation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_gns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "self", ".", "radius", "=", "radius", "\n", "cnt", "=", "0", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv1d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_gns", ".", "append", "(", "nn", ".", "GroupNorm", "(", "gn", "[", "cnt", "]", ",", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.PointNetFeaturePropagation.forward": [[194, 242], ["xyz1.permute.permute.permute", "nxyz1.permute.permute.permute", "xyz2.permute.permute.permute", "nxyz2.permute.permute.permute", "points2.permute.permute.permute", "torch.relu.permute", "enumerate", "points2.permute.permute.repeat", "pointnet_util.square_distance", "square_distance.sort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "points1.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "gn", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "pointnet_util.index_points", "weight.view", "conv", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["", "", "def", "forward", "(", "self", ",", "xyz1", ",", "nxyz1", ",", "xyz2", ",", "nxyz2", ",", "points1", ",", "points2", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz1: input points position data, [B, C, N]\n            xyz2: sampled input points position data, [B, C, S]\n            points1: input points data, [B, D, N]\n            points2: input points data, [B, D, S]\n        Return:\n            new_points: upsampled points data, [B, D', N]\n        \"\"\"", "\n", "xyz1", "=", "xyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz1", "=", "nxyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "xyz2", "=", "xyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "nxyz2", "=", "nxyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "points2", "=", "points2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", ",", "N", ",", "C", "=", "xyz1", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "xyz2", ".", "shape", "\n", "\n", "if", "S", "==", "1", ":", "\n", "            ", "interpolated_points", "=", "points2", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "dists", "=", "square_distance", "(", "xyz1", ",", "xyz2", ")", "\n", "dists", ",", "idx", "=", "dists", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "dists", ",", "idx", "=", "dists", "[", ":", ",", ":", ",", ":", "3", "]", ",", "idx", "[", ":", ",", ":", ",", ":", "3", "]", "# [B, N, 3]", "\n", "dists", "[", "dists", "<", "1e-10", "]", "=", "1e-10", "\n", "weight", "=", "1.0", "/", "dists", "# [B, N, 3]", "\n", "weight", "=", "weight", "/", "torch", ".", "sum", "(", "weight", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "# [B, N, 3]", "\n", "\n", "interpolated_points", "=", "torch", ".", "sum", "(", "index_points", "(", "points2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_nxyz", "=", "torch", ".", "sum", "(", "index_points", "(", "nxyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "interpolated_xyz", "=", "torch", ".", "sum", "(", "index_points", "(", "xyz2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "\n", "nxyz_diff", "=", "nxyz1", "-", "interpolated_nxyz", "\n", "xyz_diff", "=", "xyz1", "-", "interpolated_xyz", "\n", "\n", "\n", "", "if", "points1", "is", "not", "None", ":", "\n", "            ", "points1", "=", "points1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "points1", ",", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "new_points", "=", "torch", ".", "cat", "(", "[", "2", "*", "nxyz1", ",", "2", "*", "nxyz_diff", ",", "2", "*", "xyz_diff", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "gn", "=", "self", ".", "mlp_gns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "gn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance": [[7, 29], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "torch.matmul", "dst.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n\n    src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points": [[31, 49], ["list", "list", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "len", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n\n    Input:\n        points: input points data, [B, N, C]\n        idx: sample index data, [B, S]\n    Return:\n        new_points:, indexed points data, [B, S, C]\n    \"\"\"", "\n", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.farthest_point_sample": [[51, 73], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "xyz[].view", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, N, C]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.query_ball_point": [[75, 97], ["torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "pointnet_util.square_distance", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.square_distance"], ["", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, [B, N, C]\n        new_xyz: query points, [B, S, C]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n        Repeat the first point if there are not enough points in the space\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "new_xyz", ".", "shape", "\n", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "group_idx", "[", "sqrdists", ">", "(", "radius", "**", "2", ")", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "mask", "=", "~", "(", "group_idx", "==", "N", ")", "\n", "group_idx", "[", "~", "mask", "]", "=", "group_first", "[", "~", "mask", "]", "\n", "return", "group_idx", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.sample_and_group": [[99, 131], ["pointnet_util.farthest_point_sample", "pointnet_util.index_points", "pointnet_util.index_points", "pointnet_util.query_ball_point", "pointnet_util.index_points", "pointnet_util.index_points", "index_points.view", "index_points.view", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points", "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet_util.index_points"], ["", "def", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        npoint:\n        radius:\n        nsample:\n        xyz: input points position data, [B, N, C]\n        nxyz: input points position data, [B, N, C]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, npoint, C]\n        new_nxyz: sampled points normal data, [B, npoint, C]\n        new_points: sampled points data, [B, npoint, nsample, C+D]\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "new_nxyz", "=", "index_points", "(", "nxyz", ",", "fps_idx", ")", "\n", "idx", ",", "mask", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# [B, npoint, nsample, C]", "\n", "grouped_xyz_norm", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "grouped_nxyz", "=", "index_points", "(", "nxyz", ",", "idx", ")", "\n", "grouped_nxyz_norm", "=", "grouped_nxyz", "-", "new_nxyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "index_points", "(", "points", ",", "idx", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", ",", "grouped_points", "]", ",", "dim", "=", "-", "1", ")", "# [B, npoint, nsample, C+D]", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", "*", "2", ",", "grouped_nxyz_norm", "*", "2", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "new_xyz", ",", "new_nxyz", ",", "new_points", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__": [[9, 21], ["torch.Module.__init__", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetSetAbstraction", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "model.pointnet_util.PointNetFeaturePropagation", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PointNetRefinePoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sa1", "=", "PointNetSetAbstraction", "(", "1024", ",", "0.1", ",", "64", ",", "6", "+", "6", ",", "[", "64", ",", "64", "]", ",", "[", "4", ",", "4", "]", ")", "\n", "self", ".", "sa2", "=", "PointNetSetAbstraction", "(", "256", ",", "0.2", ",", "32", ",", "64", "+", "6", ",", "[", "128", ",", "128", "]", ",", "[", "8", ",", "8", "]", ")", "\n", "self", ".", "sa3", "=", "PointNetSetAbstraction", "(", "64", ",", "0.4", ",", "32", ",", "128", "+", "6", ",", "[", "256", ",", "256", "]", ",", "[", "16", ",", "16", "]", ")", "\n", "self", ".", "sa4", "=", "PointNetSetAbstraction", "(", "16", ",", "0.8", ",", "32", ",", "256", "+", "6", ",", "[", "512", ",", "512", "]", ",", "[", "32", ",", "32", "]", ")", "\n", "\n", "self", ".", "fp4", "=", "PointNetFeaturePropagation", "(", "777", ",", "[", "512", ",", "256", "]", ",", "[", "32", ",", "16", "]", ")", "\n", "self", ".", "fp3", "=", "PointNetFeaturePropagation", "(", "393", ",", "[", "256", ",", "128", "]", ",", "[", "16", ",", "8", "]", ")", "\n", "self", ".", "fp2", "=", "PointNetFeaturePropagation", "(", "201", ",", "[", "128", ",", "64", "]", ",", "[", "8", ",", "4", "]", ")", "\n", "self", ".", "fp1", "=", "PointNetFeaturePropagation", "(", "79", ",", "[", "64", "]", ",", "[", "4", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzqsd_TransparentShapeReconstruction.model_standard.pointnet.PointNetRefinePoint.forward": [[22, 42], ["pointnet.PointNetRefinePoint.sa1", "pointnet.PointNetRefinePoint.sa2", "pointnet.PointNetRefinePoint.sa3", "pointnet.PointNetRefinePoint.sa4", "pointnet.PointNetRefinePoint.fp4", "pointnet.PointNetRefinePoint.fp3", "pointnet.PointNetRefinePoint.fp2", "pointnet.PointNetRefinePoint.fp1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "depthDelta.permute.permute.permute", "normal.permute.permute.permute", "pointnet.PointNetRefinePoint.conv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "nxyz", ",", "points", ")", ":", "\n", "        ", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", "=", "self", ".", "sa1", "(", "xyz", ",", "nxyz", ",", "points", ")", "\n", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", "=", "self", ".", "sa2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l1_points", ")", "\n", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", "=", "self", ".", "sa3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l2_points", ")", "\n", "l4_xyz", ",", "l4_nxyz", ",", "l4_points", "=", "self", ".", "sa4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l3_points", ")", "\n", "\n", "l3_points_new", "=", "self", ".", "fp4", "(", "l3_xyz", ",", "l3_nxyz", ",", "l4_xyz", ",", "l4_nxyz", ",", "l3_points", ",", "l4_points", ")", "\n", "l2_points_new", "=", "self", ".", "fp3", "(", "l2_xyz", ",", "l2_nxyz", ",", "l3_xyz", ",", "l3_nxyz", ",", "l2_points", ",", "l3_points_new", ")", "\n", "l1_points_new", "=", "self", ".", "fp2", "(", "l1_xyz", ",", "l1_nxyz", ",", "l2_xyz", ",", "l2_nxyz", ",", "l1_points", ",", "l2_points_new", ")", "\n", "l0_points_new", "=", "self", ".", "fp1", "(", "xyz", ",", "nxyz", ",", "l1_xyz", ",", "l1_nxyz", ",", "points", ",", "l1_points_new", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "self", ".", "conv", "(", "l0_points_new", ")", ")", "\n", "\n", "depthDelta", ",", "normal", "=", "torch", ".", "split", "(", "output", ",", "[", "3", ",", "3", "]", ",", "dim", "=", "1", ")", "\n", "depthDelta", "=", "depthDelta", "*", "0.25", "\n", "normal", "=", "normal", "/", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "normal", "*", "normal", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "min", "=", "1e-10", ")", "\n", "\n", "depthDelta", "=", "depthDelta", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "normal", "=", "normal", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "return", "depthDelta", ",", "normal", "\n", "\n"]]}