{"home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER.__init__": [[21, 26], ["socket.gethostbyname", "tensorflow.get_default_graph", "socket.gethostname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "computeNodes", ")", "->", "None", ":", "\n", "        ", "self", ".", "computeNodes", "=", "computeNodes", "\n", "self", ".", "dispatchIP", "=", "socket", ".", "gethostbyname", "(", "socket", ".", "gethostname", "(", ")", ")", "\n", "self", ".", "chunk_size", "=", "512", "*", "1000", "\n", "self", ".", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._partition": [[27, 43], ["dispatcher.DEFER.graph.as_default", "range", "dag_util.construct_model", "models.append", "len", "len", "print"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.dag_util.construct_model"], ["", "def", "_partition", "(", "self", ",", "model", ":", "tf", ".", "keras", ".", "Model", ",", "layer_parts", ":", "List", "[", "str", "]", ")", "->", "List", "[", "tf", ".", "keras", ".", "Model", "]", ":", "\n", "        ", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "models", "=", "[", "]", "\n", "for", "p", "in", "range", "(", "len", "(", "layer_parts", ")", "+", "1", ")", ":", "\n", "                ", "if", "p", "==", "0", ":", "\n", "                    ", "start", "=", "model", ".", "input", ".", "_keras_history", "[", "0", "]", ".", "name", "\n", "", "else", ":", "\n", "                    ", "start", "=", "layer_parts", "[", "p", "-", "1", "]", "\n", "", "if", "p", "==", "len", "(", "layer_parts", ")", ":", "\n", "                    ", "print", "(", "model", ".", "output", ")", "\n", "end", "=", "model", ".", "output", ".", "_keras_history", "[", "0", "]", ".", "name", "\n", "", "else", ":", "\n", "                    ", "end", "=", "layer_parts", "[", "p", "]", "\n", "", "part", "=", "construct_model", "(", "model", ",", "start", ",", "end", ",", "part_name", "=", "f\"part{p+1}\"", ")", "\n", "models", ".", "append", "(", "part", ")", "\n", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._dispatchModels": [[44, 66], ["range", "len", "socket.socket", "socket.socket.setblocking", "socket.socket.settimeout", "models[].to_json", "socket.socket.connect", "dispatcher.DEFER._send_weights", "socket.socket", "socket.socket.setblocking", "socket.socket.settimeout", "socket.socket.connect", "node_state.socket_send", "node_state.socket_send", "select.select", "socket.socket.recv", "models[].get_weights", "models[].to_json.encode", "nextNode.encode", "len"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._send_weights", "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_send", "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_send"], ["", "", "def", "_dispatchModels", "(", "self", ",", "models", ":", "list", ",", "nodeIPs", ":", "List", "[", "str", "]", ")", "->", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "models", ")", ")", ":", "\n", "            ", "weights_sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "weights_sock", ".", "setblocking", "(", "0", ")", "\n", "weights_sock", ".", "settimeout", "(", "10", ")", "\n", "model_json", "=", "models", "[", "i", "]", ".", "to_json", "(", ")", "\n", "weights_sock", ".", "connect", "(", "(", "nodeIPs", "[", "i", "]", ",", "5002", ")", ")", "\n", "if", "i", "!=", "len", "(", "models", ")", "-", "1", ":", "\n", "                ", "nextNode", "=", "nodeIPs", "[", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "# Reached the end of the nodes, the last node needs to point back to the dispatcher", "\n", "                ", "nextNode", "=", "self", ".", "dispatchIP", "\n", "\n", "", "self", ".", "_send_weights", "(", "models", "[", "i", "]", ".", "get_weights", "(", ")", ",", "weights_sock", ",", "self", ".", "chunk_size", ")", "\n", "model_sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "model_sock", ".", "setblocking", "(", "0", ")", "\n", "model_sock", ".", "settimeout", "(", "10", ")", "\n", "model_sock", ".", "connect", "(", "(", "nodeIPs", "[", "i", "]", ",", "5001", ")", ")", "\n", "socket_send", "(", "model_json", ".", "encode", "(", ")", ",", "model_sock", ",", "self", ".", "chunk_size", ")", "\n", "socket_send", "(", "nextNode", ".", "encode", "(", ")", ",", "model_sock", ",", "chunk_size", "=", "1", ")", "\n", "select", ".", "select", "(", "[", "model_sock", "]", ",", "[", "]", ",", "[", "]", ")", "# Waiting for acknowledgement", "\n", "model_sock", ".", "recv", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._send_weights": [[67, 81], ["len", "len.to_bytes", "len", "dispatcher.DEFER._comp", "node_state.socket_send", "sock.send", "select.select"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._comp", "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_send"], ["", "", "def", "_send_weights", "(", "self", ",", "weights", ":", "List", ",", "sock", ":", "socket", ".", "socket", ",", "chunk_size", ":", "int", ")", ":", "\n", "        ", "size", "=", "len", "(", "weights", ")", "\n", "size_bytes", "=", "size", ".", "to_bytes", "(", "8", ",", "'big'", ")", "\n", "while", "len", "(", "size_bytes", ")", ">", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "sent", "=", "sock", ".", "send", "(", "size_bytes", ")", "\n", "size_bytes", "=", "size_bytes", "[", "sent", ":", "]", "\n", "", "except", "socket", ".", "error", "as", "e", ":", "\n", "                    ", "if", "e", ".", "errno", "!=", "socket", ".", "EAGAIN", ":", "\n", "                        ", "raise", "e", "\n", "", "select", ".", "select", "(", "[", "]", ",", "[", "sock", "]", ",", "[", "]", ")", "\n", "", "", "for", "w_arr", "in", "weights", ":", "\n", "                ", "as_bytes", "=", "self", ".", "_comp", "(", "w_arr", ")", "\n", "socket_send", "(", "as_bytes", ",", "sock", ",", "chunk_size", ")", "\n", "", "", "def", "_comp", "(", "self", ",", "arr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._comp": [[81, 83], ["lz4.frame.compress", "zfpy.compress_numpy"], "methods", ["None"], ["", "", "def", "_comp", "(", "self", ",", "arr", ")", ":", "\n", "        ", "return", "lz4", ".", "frame", ".", "compress", "(", "zfpy", ".", "compress_numpy", "(", "arr", ")", ")", "\n", "", "def", "_decomp", "(", "self", ",", "byts", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._decomp": [[83, 85], ["zfpy.compress_numpy", "lz4.frame.decompress"], "methods", ["None"], ["", "def", "_decomp", "(", "self", ",", "byts", ")", ":", "\n", "        ", "return", "zfpy", ".", "compress_numpy", "(", "lz4", ".", "frame", ".", "decompress", "(", "byts", ")", ")", "\n", "", "def", "_startDistEdgeInference", "(", "self", ",", "input", ":", "queue", ".", "Queue", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._startDistEdgeInference": [[85, 94], ["socket.socket", "socket.socket.connect", "socket.socket.setblocking", "input.get", "dispatcher.DEFER._comp", "node_state.socket_send"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._comp", "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_send"], ["", "def", "_startDistEdgeInference", "(", "self", ",", "input", ":", "queue", ".", "Queue", ")", ":", "\n", "        ", "data_sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "data_sock", ".", "connect", "(", "(", "self", ".", "computeNodes", "[", "0", "]", ",", "5000", ")", ")", "\n", "data_sock", ".", "setblocking", "(", "0", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "model_input", "=", "input", ".", "get", "(", ")", "\n", "out", "=", "self", ".", "_comp", "(", "model_input", ")", "\n", "socket_send", "(", "out", ",", "data_sock", ",", "self", ".", "chunk_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._result_server": [[95, 106], ["socket.socket", "socket.socket.bind", "socket.socket.listen", "data_cli.setblocking", "socket.socket.accept", "bytes", "dispatcher.DEFER._decomp", "output.put", "node_state.socket_recv"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._decomp", "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_recv"], ["", "", "def", "_result_server", "(", "self", ",", "output", ":", "queue", ".", "Queue", ")", ":", "\n", "        ", "data_server", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "data_server", ".", "bind", "(", "(", "\"0.0.0.0\"", ",", "5000", ")", ")", "\n", "data_server", ".", "listen", "(", "1", ")", "\n", "data_cli", "=", "data_server", ".", "accept", "(", ")", "[", "0", "]", "\n", "data_cli", ".", "setblocking", "(", "0", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "data", "=", "bytes", "(", "socket_recv", "(", "data_cli", ",", "self", ".", "chunk_size", ")", ")", "\n", "pred", "=", "self", ".", "_decomp", "(", "data", ")", "\n", "output", ".", "put", "(", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER.run_defer": [[107, 116], ["dispatcher.DEFER._partition", "threading.Thread", "threading.Thread.start", "dispatcher.DEFER._dispatchModels", "time.sleep", "threading.Thread", "threading.Thread.start", "threading.Thread.join"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._partition", "home.repos.pwc.inspect_result.anrgusc_defer.src.dispatcher.DEFER._dispatchModels"], ["", "", "def", "run_defer", "(", "self", ",", "model", ":", "tf", ".", "keras", ".", "Model", ",", "partition_layers", ",", "input_stream", ":", "queue", ".", "Queue", ",", "output_stream", ":", "queue", ".", "Queue", ")", ":", "\n", "        ", "models_to_dispatch", "=", "self", ".", "_partition", "(", "model", ",", "partition_layers", ")", "\n", "a", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "_result_server", ",", "args", "=", "(", "output_stream", ",", ")", ")", "\n", "a", ".", "start", "(", ")", "\n", "self", ".", "_dispatchModels", "(", "models_to_dispatch", ",", "self", ".", "computeNodes", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "b", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "_startDistEdgeInference", ",", "args", "=", "(", "input_stream", ",", ")", ",", "daemon", "=", "True", ")", "\n", "b", ".", "start", "(", ")", "\n", "a", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._model_socket": [[20, 44], ["socket.socket", "socket.socket.bind", "print", "socket.socket.listen", "model_cli.setblocking", "node_state.socket_recv", "node_state.socket_recv", "tensorflow.keras.models.model_from_json", "tensorflow.keras.models.model_from_json.set_weights", "socket.gethostbyname", "md._make_predict_function", "tensorflow.keras.utils.plot_model", "node_state.socket_recv.decode", "select.select", "model_cli.send", "socket.socket.close", "socket.socket.accept", "time.sleep", "socket.gethostname"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_recv", "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_recv"], ["    ", "def", "_model_socket", "(", "self", ",", "node_state", ":", "NodeState", ")", ":", "\n", "        ", "model_server", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "model_server", ".", "bind", "(", "(", "\"0.0.0.0\"", ",", "5001", ")", ")", "\n", "print", "(", "\"Model socket running\"", ")", "\n", "model_server", ".", "listen", "(", "1", ")", "\n", "model_cli", "=", "model_server", ".", "accept", "(", ")", "[", "0", "]", "\n", "model_cli", ".", "setblocking", "(", "0", ")", "\n", "\n", "model_json", "=", "socket_recv", "(", "model_cli", ",", "node_state", ".", "chunk_size", ")", "\n", "next_node", "=", "socket_recv", "(", "model_cli", ",", "chunk_size", "=", "1", ")", "\n", "\n", "part", "=", "tf", ".", "keras", ".", "models", ".", "model_from_json", "(", "model_json", ")", "\n", "while", "(", "node_state", ".", "weights", "==", "\"\"", ")", ":", "# Waiting for weights to be sent on other thread", "\n", "            ", "time", ".", "sleep", "(", "5", ")", "\n", "", "part", ".", "set_weights", "(", "node_state", ".", "weights", ")", "\n", "id", "=", "socket", ".", "gethostbyname", "(", "socket", ".", "gethostname", "(", ")", ")", "\n", "md", "=", "part", "\n", "md", ".", "_make_predict_function", "(", ")", "\n", "node_state", ".", "model", "=", "md", "\n", "tf", ".", "keras", ".", "utils", ".", "plot_model", "(", "md", ",", "f\"model_{id}.png\"", ")", "\n", "node_state", ".", "next_node", "=", "next_node", ".", "decode", "(", ")", "\n", "select", ".", "select", "(", "[", "]", ",", "[", "model_cli", "]", ",", "[", "]", ")", "\n", "model_cli", ".", "send", "(", "b'\\x06'", ")", "\n", "model_server", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._weights_socket": [[45, 56], ["socket.socket", "socket.socket.bind", "socket.socket.listen", "weights_cli.setblocking", "node.Node._recv_weights", "socket.socket.close", "socket.socket.accept"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._recv_weights"], ["", "def", "_weights_socket", "(", "self", ",", "node_state", ")", ":", "\n", "        ", "chunk_size", "=", "node_state", ".", "chunk_size", "\n", "weights_server", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "weights_server", ".", "bind", "(", "(", "\"0.0.0.0\"", ",", "5002", ")", ")", "\n", "weights_server", ".", "listen", "(", "1", ")", "\n", "weights_cli", "=", "weights_server", ".", "accept", "(", ")", "[", "0", "]", "\n", "weights_cli", ".", "setblocking", "(", "0", ")", "\n", "\n", "model_weights", "=", "self", ".", "_recv_weights", "(", "weights_cli", ",", "chunk_size", ")", "\n", "node_state", ".", "weights", "=", "model_weights", "\n", "weights_server", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._recv_weights": [[57, 76], ["bytearray", "int.from_bytes", "range", "bytes", "weights.append", "sock.recv", "len", "bytearray.extend", "node_state.socket_recv", "node.Node._decomp", "min", "select.select"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_recv", "home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._decomp"], ["", "def", "_recv_weights", "(", "self", ",", "sock", ":", "socket", ".", "socket", ",", "chunk_size", ":", "int", ")", ":", "\n", "        ", "size_left", "=", "8", "\n", "byts", "=", "bytearray", "(", ")", "\n", "while", "size_left", ">", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "recv", "=", "sock", ".", "recv", "(", "min", "(", "size_left", ",", "8", ")", ")", "\n", "size_left", "-=", "len", "(", "recv", ")", "\n", "byts", ".", "extend", "(", "recv", ")", "\n", "", "except", "socket", ".", "error", "as", "e", ":", "\n", "                ", "if", "e", ".", "errno", "!=", "socket", ".", "EAGAIN", ":", "\n", "                    ", "raise", "e", "\n", "", "select", ".", "select", "(", "[", "sock", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "", "", "array_len", "=", "int", ".", "from_bytes", "(", "byts", ",", "'big'", ")", "\n", "\n", "weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "array_len", ")", ":", "\n", "            ", "recv", "=", "bytes", "(", "socket_recv", "(", "sock", ",", "chunk_size", ")", ")", "\n", "weights", ".", "append", "(", "self", ".", "_decomp", "(", "recv", ")", ")", "\n", "", "return", "weights", "\n", "", "def", "_comp", "(", "self", ",", "arr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._comp": [[76, 78], ["lz4.frame.compress", "zfpy.compress_numpy"], "methods", ["None"], ["", "def", "_comp", "(", "self", ",", "arr", ")", ":", "\n", "        ", "return", "lz4", ".", "frame", ".", "compress", "(", "zfpy", ".", "compress_numpy", "(", "arr", ")", ")", "\n", "", "def", "_decomp", "(", "self", ",", "byts", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._decomp": [[78, 80], ["zfpy.decompress_numpy", "lz4.frame.decompress"], "methods", ["None"], ["", "def", "_decomp", "(", "self", ",", "byts", ")", ":", "\n", "        ", "return", "zfpy", ".", "decompress_numpy", "(", "lz4", ".", "frame", ".", "decompress", "(", "byts", ")", ")", "\n", "", "def", "_data_server", "(", "self", ",", "node_state", ":", "NodeState", ",", "to_send", ":", "Queue", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._data_server": [[80, 92], ["socket.socket", "socket.socket.bind", "socket.socket.listen", "data_cli.setblocking", "socket.socket.accept", "bytes", "zfpy.decompress_numpy", "to_send.put", "node_state.socket_recv"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_recv"], ["", "def", "_data_server", "(", "self", ",", "node_state", ":", "NodeState", ",", "to_send", ":", "Queue", ")", ":", "\n", "        ", "chunk_size", "=", "node_state", ".", "chunk_size", "\n", "data_server", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "data_server", ".", "bind", "(", "(", "\"0.0.0.0\"", ",", "5000", ")", ")", "\n", "data_server", ".", "listen", "(", "1", ")", "\n", "data_cli", "=", "data_server", ".", "accept", "(", ")", "[", "0", "]", "\n", "data_cli", ".", "setblocking", "(", "0", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "data", "=", "bytes", "(", "socket_recv", "(", "data_cli", ",", "chunk_size", ")", ")", "\n", "inpt", "=", "zfpy", ".", "decompress_numpy", "(", "data", ")", "\n", "to_send", ".", "put", "(", "inpt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._data_client": [[93, 109], ["tensorflow.get_default_graph", "socket.socket", "socket.socket.connect", "socket.socket.setblocking", "time.sleep", "to_send.get", "node.Node._comp", "node_state.socket_send", "tensorflow.get_default_graph.as_default", "model.predict"], "methods", ["home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node._comp", "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_send"], ["", "", "def", "_data_client", "(", "self", ",", "node_state", ":", "NodeState", ",", "to_send", ":", "Queue", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "while", "node_state", ".", "next_node", "==", "\"\"", ":", "\n", "            ", "time", ".", "sleep", "(", "5", ")", "# Wait until next_node is set by model socket", "\n", "", "chunk_size", "=", "node_state", ".", "chunk_size", "\n", "model", "=", "node_state", ".", "model", "\n", "next_node_client", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "next_node_client", ".", "connect", "(", "(", "node_state", ".", "next_node", ",", "5000", ")", ")", "\n", "next_node_client", ".", "setblocking", "(", "0", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "inpt", "=", "to_send", ".", "get", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "                ", "output", "=", "model", ".", "predict", "(", "inpt", ")", "\n", "", "out", "=", "self", ".", "_comp", "(", "output", ")", "\n", "socket_send", "(", "out", ",", "next_node_client", ",", "chunk_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node.Node.run": [[110, 125], ["node_state.NodeState", "threading.Thread", "threading.Thread", "queue.Queue", "threading.Thread", "threading.Thread", "threading.Thread.start", "threading.Thread.start", "threading.Thread.start", "threading.Thread.start", "threading.Thread.join", "threading.Thread.join", "threading.Thread.join", "threading.Thread.join"], "methods", ["None"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "ns", "=", "NodeState", "(", "chunk_size", "=", "512", "*", "1000", ")", "\n", "m", "=", "Thread", "(", "target", "=", "self", ".", "_model_socket", ",", "args", "=", "(", "ns", ",", ")", ")", "\n", "w", "=", "Thread", "(", "target", "=", "self", ".", "_weights_socket", ",", "args", "=", "(", "ns", ",", ")", ")", "\n", "to_send", "=", "queue", ".", "Queue", "(", "1000", ")", "# Arbitrary size of queue, can change later", "\n", "dserv", "=", "Thread", "(", "target", "=", "self", ".", "_data_server", ",", "args", "=", "(", "ns", ",", "to_send", ")", ")", "\n", "dcli", "=", "Thread", "(", "target", "=", "self", ".", "_data_client", ",", "args", "=", "(", "ns", ",", "to_send", ")", ")", "\n", "m", ".", "start", "(", ")", "\n", "w", ".", "start", "(", ")", "\n", "dserv", ".", "start", "(", ")", "\n", "dcli", ".", "start", "(", ")", "\n", "m", ".", "join", "(", ")", "\n", "w", ".", "join", "(", ")", "\n", "dserv", ".", "join", "(", ")", "\n", "dcli", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dag_util.get_previous": [[3, 8], ["type", "model.get_layer"], "function", ["None"], ["def", "get_previous", "(", "model", ",", "name", ")", ":", "\n", "    ", "inbound", "=", "model", ".", "get_layer", "(", "name", ")", ".", "inbound_nodes", "[", "0", "]", ".", "inbound_layers", "\n", "if", "type", "(", "inbound", ")", "!=", "list", ":", "\n", "        ", "inbound", "=", "[", "inbound", "]", "\n", "", "return", "[", "layer", ".", "name", "for", "layer", "in", "inbound", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dag_util.traverse": [[9, 26], ["dag_util.get_previous", "model.get_layer", "model.get_layer.", "output.append", "len", "dag_util.traverse"], "function", ["home.repos.pwc.inspect_result.anrgusc_defer.src.dag_util.get_previous", "home.repos.pwc.inspect_result.anrgusc_defer.src.dag_util.traverse"], ["", "def", "traverse", "(", "model", ",", "name", ",", "start", ",", "part_name", ",", "inpt", ")", ":", "\n", "# On subsequent recursive steps, the new input layer will be defined, ", "\n", "# so that name needs to be checked in base case", "\n", "    ", "if", "(", "name", "==", "start", ")", "or", "(", "name", "==", "part_name", ")", ":", "\n", "        ", "return", "inpt", "\n", "\n", "", "output", "=", "[", "]", "\n", "for", "n", "in", "get_previous", "(", "model", ",", "name", ")", ":", "\n", "        ", "output", ".", "append", "(", "traverse", "(", "model", ",", "n", ",", "start", ",", "part_name", ",", "inpt", ")", ")", "\n", "\n", "# If the DAG node only has 1 previous connection", "\n", "", "if", "len", "(", "output", ")", "==", "1", ":", "\n", "        ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "layer", "=", "model", ".", "get_layer", "(", "name", ")", "\n", "to_next", "=", "layer", "(", "output", ")", "\n", "return", "to_next", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.dag_util.construct_model": [[27, 32], ["tensorflow.keras.Input", "dag_util.traverse", "tensorflow.keras.Model", "model.get_layer", "model.get_layer"], "function", ["home.repos.pwc.inspect_result.anrgusc_defer.src.dag_util.traverse"], ["", "def", "construct_model", "(", "model", ",", "start", ",", "end", ",", "part_name", "=", "\"part_begin\"", ")", ":", "\n", "    ", "inpt", "=", "tf", ".", "keras", ".", "Input", "(", "tensor", "=", "model", ".", "get_layer", "(", "start", ")", ".", "output", ",", "name", "=", "part_name", ")", "\n", "output", "=", "traverse", "(", "model", ",", "end", ",", "start", ",", "part_name", ",", "inpt", ")", "\n", "part", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "model", ".", "get_layer", "(", "start", ")", ".", "output", ",", "outputs", "=", "output", ")", "\n", "return", "part", "\n", "", ""]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.NodeState.__init__": [[7, 13], ["threading.Lock"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "chunk_size", ")", "->", "None", ":", "\n", "        ", "self", ".", "_chunk_size", "=", "chunk_size", "\n", "self", ".", "_next_node", "=", "\"\"", "\n", "self", ".", "_model", "=", "\"\"", "\n", "self", ".", "_weights", "=", "\"\"", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.NodeState.chunk_size": [[13, 17], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "chunk_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "return", "self", ".", "_chunk_size", "\n", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.NodeState.next_node": [[21, 25], ["None"], "methods", ["None"], ["", "", "@", "next_node", ".", "setter", "\n", "def", "next_node", "(", "self", ",", "nx", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "self", ".", "_next_node", "=", "nx", "\n", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.NodeState.model": [[29, 33], ["None"], "methods", ["None"], ["", "", "@", "model", ".", "setter", "\n", "def", "model", "(", "self", ",", "m", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "self", ".", "_model", "=", "m", "\n", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.NodeState.weights": [[37, 42], ["print"], "methods", ["None"], ["", "", "@", "weights", ".", "setter", "\n", "def", "weights", "(", "self", ",", "w", ")", ":", "\n", "        ", "print", "(", "\"Weights set\"", ")", "\n", "with", "self", ".", "_lock", ":", "\n", "            ", "self", ".", "_weights", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_send": [[43, 70], ["len", "len.to_bytes", "range", "len", "len", "sock.send", "len", "select.select", "len", "sock.send", "select.select"], "function", ["None"], ["", "", "", "def", "socket_send", "(", "bytes", ",", "sock", ":", "socket", ".", "socket", ",", "chunk_size", ":", "int", ")", ":", "\n", "    ", "size", "=", "len", "(", "bytes", ")", "\n", "size_bytes", "=", "size", ".", "to_bytes", "(", "8", ",", "'big'", ")", "\n", "while", "len", "(", "size_bytes", ")", ">", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "sent", "=", "sock", ".", "send", "(", "size_bytes", ")", "\n", "size_bytes", "=", "size_bytes", "[", "sent", ":", "]", "\n", "", "except", "socket", ".", "error", "as", "e", ":", "\n", "                ", "if", "e", ".", "errno", "!=", "socket", ".", "EAGAIN", ":", "\n", "                    ", "raise", "e", "\n", "#print(f\"Blocking w/ {len(size_bytes)} left in size array\")", "\n", "", "select", ".", "select", "(", "[", "]", ",", "[", "sock", "]", ",", "[", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "bytes", ")", ",", "chunk_size", ")", ":", "\n", "        ", "if", "len", "(", "bytes", ")", "-", "i", "<", "chunk_size", ":", "\n", "            ", "chunk", "=", "bytes", "[", "i", ":", "]", "\n", "", "else", ":", "\n", "            ", "chunk", "=", "bytes", "[", "i", ":", "i", "+", "chunk_size", "]", "\n", "", "while", "len", "(", "chunk", ")", ">", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "cs", "=", "sock", ".", "send", "(", "chunk", ")", "\n", "#print(\"Sent chunk w/ size\", cs)", "\n", "chunk", "=", "chunk", "[", "cs", ":", "]", "\n", "", "except", "socket", ".", "error", "as", "e", ":", "\n", "                ", "if", "e", ".", "errno", "!=", "socket", ".", "EAGAIN", ":", "\n", "                    ", "raise", "e", "\n", "#print(f\"Blocking w/ {len(chunk)} left in chunk\")", "\n", "", "select", ".", "select", "(", "[", "]", ",", "[", "sock", "]", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anrgusc_defer.src.node_state.socket_recv": [[71, 102], ["bytearray", "int.from_bytes", "bytearray", "sock.recv", "len", "bytearray.extend", "sock.recv", "len", "len", "min", "select.select", "min", "select.select", "len"], "function", ["None"], ["", "", "", "", "def", "socket_recv", "(", "sock", ":", "socket", ".", "socket", ",", "chunk_size", ":", "int", ")", ":", "\n", "#data_json = b''", "\n", "    ", "size_left", "=", "8", "\n", "byts", "=", "bytearray", "(", ")", "\n", "while", "size_left", ">", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "recv", "=", "sock", ".", "recv", "(", "min", "(", "size_left", ",", "8", ")", ")", "\n", "size_left", "-=", "len", "(", "recv", ")", "\n", "byts", ".", "extend", "(", "recv", ")", "\n", "", "except", "socket", ".", "error", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "socket", ".", "EAGAIN", ":", "\n", "                ", "raise", "e", "\n", "#print(\"Blocking while getting size\")", "\n", "", "select", ".", "select", "(", "[", "sock", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "", "", "data_size", "=", "int", ".", "from_bytes", "(", "byts", ",", "'big'", ")", "\n", "#print(\"Got data, len\", data_size)", "\n", "data_json", "=", "bytearray", "(", "data_size", ")", "\n", "data_counter", "=", "0", "\n", "left", "=", "data_size", "\n", "while", "(", "left", ">", "0", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "recv", "=", "sock", ".", "recv", "(", "min", "(", "left", ",", "chunk_size", ")", ")", "\n", "left", "-=", "len", "(", "recv", ")", "\n", "data_json", "[", "data_counter", ":", "data_counter", "+", "len", "(", "recv", ")", "]", "=", "recv", "\n", "data_counter", "+=", "len", "(", "recv", ")", "\n", "#print(\"Data left to process: \", left)", "\n", "", "except", "socket", ".", "error", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "socket", ".", "EAGAIN", ":", "\n", "                ", "raise", "e", "\n", "", "select", ".", "select", "(", "[", "sock", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "", "", "return", "data_json", "", "", ""]], "home.repos.pwc.inspect_result.anrgusc_defer.test.test.print_result": [[29, 38], ["print", "print", "exit", "q.get", "print", "time.time"], "function", ["None"], ["def", "print_result", "(", "q", ")", ":", "\n", "    ", "res_count", "=", "0", "\n", "while", "(", "time", ".", "time", "(", ")", "-", "start", ")", "<", "run", ":", "\n", "        ", "res", "=", "q", ".", "get", "(", ")", "\n", "res_count", "+=", "1", "\n", "print", "(", "res", ".", "shape", ")", "\n", "", "print", "(", "f\"{res_count} results in {time_min} min\"", ")", "\n", "print", "(", "f\"Throughput: {res_count / run}\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]]}