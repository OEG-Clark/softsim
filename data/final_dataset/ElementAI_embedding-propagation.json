{"home.repos.pwc.inspect_result.ElementAI_embedding-propagation.None.trainval.trainval": [[26, 175], ["haven.haven_utils.hash_dict", "os.path.join", "os.makedirs", "haven.haven_utils.save_json", "pprint.pprint", "print", "src.datasets.get_dataset", "src.datasets.get_dataset", "src.datasets.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "src.models.backbones.get_backbone", "src.models.get_model", "os.path.join", "os.path.join", "os.path.exists", "range", "haven.haven_chk.delete_experiment", "os.path.join", "os.path.join", "models.get_model.load_state_dict", "haven.haven_utils.load_pkl", "score_dict.update", "score_dict.update", "score_dict.update", "score_dict.update", "pandas.DataFrame", "print", "haven.haven_utils.save_pkl", "haven.haven_utils.torch_save", "print", "models.get_model.is_end_of_training", "os.path.join", "os.path.join", "exp_dict.get", "os.path.join", "src.utils.get_collate", "os.path.exists", "models.get_model.test_on_loader", "haven.haven_utils.save_pkl", "haven.haven_utils.torch_load", "models.get_model.get_lr", "models.get_model.train_on_loader", "models.get_model.val_on_loader", "models.get_model.test_on_loader", "pd.DataFrame.tail", "models.get_model.get_state_dict", "haven.haven_utils.save_pkl", "haven.haven_utils.torch_save", "print", "[].max", "[].min", "os.path.join", "os.path.join", "models.get_model.get_state_dict"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.__init__.get_backbone", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.get_model", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.is_end_of_training", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.src.utils.get_collate", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.test_on_loader", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.get_lr", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.train_on_loader", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.val_on_loader", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.test_on_loader", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.get_state_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.get_state_dict"], ["def", "trainval", "(", "exp_dict", ",", "savedir_base", ",", "datadir", ",", "reset", "=", "False", ",", "\n", "num_workers", "=", "0", ",", "pretrained_weights_dir", "=", "None", ")", ":", "\n", "# bookkeeping", "\n", "# ---------------", "\n", "\n", "# get experiment directory", "\n", "    ", "exp_id", "=", "hu", ".", "hash_dict", "(", "exp_dict", ")", "\n", "savedir", "=", "os", ".", "path", ".", "join", "(", "savedir_base", ",", "exp_id", ")", "\n", "\n", "if", "reset", ":", "\n", "# delete and backup experiment", "\n", "        ", "hc", ".", "delete_experiment", "(", "savedir", ",", "backup_flag", "=", "True", ")", "\n", "\n", "# create folder and save the experiment dictionary", "\n", "", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "hu", ".", "save_json", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'exp_dict.json'", ")", ",", "exp_dict", ")", "\n", "pprint", ".", "pprint", "(", "exp_dict", ")", "\n", "print", "(", "'Experiment saved in %s'", "%", "savedir", ")", "\n", "\n", "# load datasets", "\n", "# ==========================", "\n", "train_set", "=", "datasets", ".", "get_dataset", "(", "dataset_name", "=", "exp_dict", "[", "\"dataset_train\"", "]", ",", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "exp_dict", "[", "\"dataset_train_root\"", "]", ")", ",", "\n", "split", "=", "\"train\"", ",", "\n", "transform", "=", "exp_dict", "[", "\"transform_train\"", "]", ",", "\n", "classes", "=", "exp_dict", "[", "\"classes_train\"", "]", ",", "\n", "support_size", "=", "exp_dict", "[", "\"support_size_train\"", "]", ",", "\n", "query_size", "=", "exp_dict", "[", "\"query_size_train\"", "]", ",", "\n", "n_iters", "=", "exp_dict", "[", "\"train_iters\"", "]", ",", "\n", "unlabeled_size", "=", "exp_dict", "[", "\"unlabeled_size_train\"", "]", ")", "\n", "\n", "val_set", "=", "datasets", ".", "get_dataset", "(", "dataset_name", "=", "exp_dict", "[", "\"dataset_val\"", "]", ",", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "exp_dict", "[", "\"dataset_val_root\"", "]", ")", ",", "\n", "split", "=", "\"val\"", ",", "\n", "transform", "=", "exp_dict", "[", "\"transform_val\"", "]", ",", "\n", "classes", "=", "exp_dict", "[", "\"classes_val\"", "]", ",", "\n", "support_size", "=", "exp_dict", "[", "\"support_size_val\"", "]", ",", "\n", "query_size", "=", "exp_dict", "[", "\"query_size_val\"", "]", ",", "\n", "n_iters", "=", "exp_dict", ".", "get", "(", "\"val_iters\"", ",", "None", ")", ",", "\n", "unlabeled_size", "=", "exp_dict", "[", "\"unlabeled_size_val\"", "]", ")", "\n", "\n", "test_set", "=", "datasets", ".", "get_dataset", "(", "dataset_name", "=", "exp_dict", "[", "\"dataset_test\"", "]", ",", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "exp_dict", "[", "\"dataset_test_root\"", "]", ")", ",", "\n", "split", "=", "\"test\"", ",", "\n", "transform", "=", "exp_dict", "[", "\"transform_val\"", "]", ",", "\n", "classes", "=", "exp_dict", "[", "\"classes_test\"", "]", ",", "\n", "support_size", "=", "exp_dict", "[", "\"support_size_test\"", "]", ",", "\n", "query_size", "=", "exp_dict", "[", "\"query_size_test\"", "]", ",", "\n", "n_iters", "=", "exp_dict", "[", "\"test_iters\"", "]", ",", "\n", "unlabeled_size", "=", "exp_dict", "[", "\"unlabeled_size_test\"", "]", ")", "\n", "\n", "# get dataloaders", "\n", "# ==========================", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "exp_dict", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "ut", ".", "get_collate", "(", "exp_dict", "[", "\"collate_fn\"", "]", ")", ",", "\n", "drop_last", "=", "True", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", "drop_last", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "# create model and trainer", "\n", "# ==========================", "\n", "\n", "# Create model, opt, wrapper", "\n", "backbone", "=", "backbones", ".", "get_backbone", "(", "backbone_name", "=", "exp_dict", "[", "'model'", "]", "[", "\"backbone\"", "]", ",", "exp_dict", "=", "exp_dict", ")", "\n", "model", "=", "models", ".", "get_model", "(", "model_name", "=", "exp_dict", "[", "\"model\"", "]", "[", "'name'", "]", ",", "backbone", "=", "backbone", ",", "\n", "n_classes", "=", "exp_dict", "[", "\"n_classes\"", "]", ",", "\n", "exp_dict", "=", "exp_dict", ",", "\n", "pretrained_weights_dir", "=", "pretrained_weights_dir", ",", "\n", "savedir_base", "=", "savedir_base", ")", "\n", "\n", "# Pretrain or Fine-tune or run SSL", "\n", "if", "exp_dict", "[", "\"model\"", "]", "[", "'name'", "]", "==", "'ssl'", ":", "\n", "# runs the SSL experiments", "\n", "        ", "score_list_path", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'score_list.pkl'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "score_list_path", ")", ":", "\n", "            ", "test_dict", "=", "model", ".", "test_on_loader", "(", "test_loader", ",", "max_iter", "=", "None", ")", "\n", "hu", ".", "save_pkl", "(", "score_list_path", ",", "[", "test_dict", "]", ")", "\n", "", "return", "\n", "\n", "# Checkpoint", "\n", "# -----------", "\n", "", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'checkpoint.pth'", ")", "\n", "score_list_path", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'score_list.pkl'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "score_list_path", ")", ":", "\n", "# resume experiment", "\n", "        ", "model", ".", "load_state_dict", "(", "hu", ".", "torch_load", "(", "checkpoint_path", ")", ")", "\n", "score_list", "=", "hu", ".", "load_pkl", "(", "score_list_path", ")", "\n", "s_epoch", "=", "score_list", "[", "-", "1", "]", "[", "'epoch'", "]", "+", "1", "\n", "", "else", ":", "\n", "# restart experiment", "\n", "        ", "score_list", "=", "[", "]", "\n", "s_epoch", "=", "0", "\n", "\n", "# Run training and validation", "\n", "", "for", "epoch", "in", "range", "(", "s_epoch", ",", "exp_dict", "[", "\"max_epoch\"", "]", ")", ":", "\n", "        ", "score_dict", "=", "{", "\"epoch\"", ":", "epoch", "}", "\n", "score_dict", ".", "update", "(", "model", ".", "get_lr", "(", ")", ")", "\n", "\n", "# train", "\n", "score_dict", ".", "update", "(", "model", ".", "train_on_loader", "(", "train_loader", ")", ")", "\n", "\n", "# validate", "\n", "score_dict", ".", "update", "(", "model", ".", "val_on_loader", "(", "val_loader", ")", ")", "\n", "score_dict", ".", "update", "(", "model", ".", "test_on_loader", "(", "test_loader", ")", ")", "\n", "\n", "# Add score_dict to score_list", "\n", "score_list", "+=", "[", "score_dict", "]", "\n", "\n", "# Report", "\n", "score_df", "=", "pd", ".", "DataFrame", "(", "score_list", ")", "\n", "print", "(", "score_df", ".", "tail", "(", ")", ")", "\n", "\n", "# Save checkpoint", "\n", "hu", ".", "save_pkl", "(", "score_list_path", ",", "score_list", ")", "\n", "hu", ".", "torch_save", "(", "checkpoint_path", ",", "model", ".", "get_state_dict", "(", ")", ")", "\n", "print", "(", "\"Saved: %s\"", "%", "savedir", ")", "\n", "\n", "if", "\"accuracy\"", "in", "exp_dict", "[", "\"target_loss\"", "]", ":", "\n", "            ", "is_best", "=", "score_dict", "[", "exp_dict", "[", "\"target_loss\"", "]", "]", ">=", "score_df", "[", "exp_dict", "[", "\"target_loss\"", "]", "]", "[", ":", "-", "1", "]", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "            ", "is_best", "=", "score_dict", "[", "exp_dict", "[", "\"target_loss\"", "]", "]", "<=", "score_df", "[", "exp_dict", "[", "\"target_loss\"", "]", "]", "[", ":", "-", "1", "]", ".", "min", "(", ")", "\n", "\n", "# Save best checkpoint", "\n", "", "if", "is_best", ":", "\n", "            ", "hu", ".", "save_pkl", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "\"score_list_best.pkl\"", ")", ",", "score_list", ")", "\n", "hu", ".", "torch_save", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "\"checkpoint_best.pth\"", ")", ",", "model", ".", "get_state_dict", "(", ")", ")", "\n", "print", "(", "\"Saved Best: %s\"", "%", "savedir", ")", "\n", "\n", "# Check for end of training conditions", "\n", "", "if", "model", ".", "is_end_of_training", "(", ")", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.EmbeddingPropagation.__init__": [[8, 13], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "rbf_scale", "=", "1", ",", "norm_prop", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "rbf_scale", "=", "rbf_scale", "\n", "self", ".", "norm_prop", "=", "norm_prop", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.EmbeddingPropagation.forward": [[14, 16], ["embedding_propagation.embedding_propagation"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.embedding_propagation"], ["", "def", "forward", "(", "self", ",", "x", ",", "propagator", "=", "None", ")", ":", "\n", "        ", "return", "embedding_propagation", "(", "x", ",", "self", ".", "alpha", ",", "self", ".", "rbf_scale", ",", "self", ".", "norm_prop", ",", "propagator", "=", "propagator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.LabelPropagation.__init__": [[19, 26], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.2", ",", "rbf_scale", "=", "1", ",", "norm_prop", "=", "True", ",", "apply_log", "=", "True", ",", "balanced", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "rbf_scale", "=", "rbf_scale", "\n", "self", ".", "norm_prop", "=", "norm_prop", "\n", "self", ".", "apply_log", "=", "apply_log", "\n", "self", ".", "balanced", "=", "balanced", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.LabelPropagation.forward": [[27, 44], ["embedding_propagation.label_propagation"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.label_propagation"], ["", "def", "forward", "(", "self", ",", "x", ",", "labels", ",", "nclasses", ",", "propagator", "=", "None", ")", ":", "\n", "        ", "\"\"\"Applies label propagation given a set of embeddings and labels\n\n        Arguments:\n            x {Tensor} -- Input embeddings\n            labels {Tensor} -- Input labels from 0 to nclasses + 1. The highest value corresponds to unlabeled samples.\n            nclasses {int} -- Total number of classes\n\n        Keyword Arguments:\n            propagator {Tensor} -- A pre-computed propagator (default: {None})\n\n        Returns:\n            tuple(Tensor, Tensor) -- Logits and Propagator\n        \"\"\"", "\n", "return", "label_propagation", "(", "x", ",", "labels", ",", "nclasses", ",", "self", ".", "alpha", ",", "self", ".", "rbf_scale", ",", "\n", "self", ".", "norm_prop", ",", "self", ".", "apply_log", ",", "propagator", "=", "propagator", ",", "\n", "balanced", "=", "self", ".", "balanced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.get_similarity_matrix": [[46, 55], ["x.size", "torch.exp", "torch.exp", "torch.eye", "torch.eye", "numpy.sqrt", "sq_dist[].std", "torch.exp.size", "x.view", "x.view"], "function", ["None"], ["", "", "def", "get_similarity_matrix", "(", "x", ",", "rbf_scale", ")", ":", "\n", "    ", "b", ",", "c", "=", "x", ".", "size", "(", ")", "\n", "sq_dist", "=", "(", "(", "x", ".", "view", "(", "b", ",", "1", ",", "c", ")", "-", "x", ".", "view", "(", "1", ",", "b", ",", "c", ")", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", "/", "np", ".", "sqrt", "(", "c", ")", "\n", "mask", "=", "sq_dist", "!=", "0", "\n", "sq_dist", "=", "sq_dist", "/", "sq_dist", "[", "mask", "]", ".", "std", "(", ")", "\n", "weights", "=", "torch", ".", "exp", "(", "-", "sq_dist", "*", "rbf_scale", ")", "\n", "mask", "=", "torch", ".", "eye", "(", "weights", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "weights", ".", "device", ")", "\n", "weights", "=", "weights", "*", "(", "~", "mask", ")", ".", "float", "(", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.embedding_propagation": [[57, 63], ["torch.mm", "torch.mm", "embedding_propagation.get_similarity_matrix", "embedding_propagation.global_consistency"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.get_similarity_matrix", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.global_consistency"], ["", "def", "embedding_propagation", "(", "x", ",", "alpha", ",", "rbf_scale", ",", "norm_prop", ",", "propagator", "=", "None", ")", ":", "\n", "    ", "if", "propagator", "is", "None", ":", "\n", "        ", "weights", "=", "get_similarity_matrix", "(", "x", ",", "rbf_scale", ")", "\n", "propagator", "=", "global_consistency", "(", "\n", "weights", ",", "alpha", "=", "alpha", ",", "norm_prop", "=", "norm_prop", ")", "\n", "", "return", "torch", ".", "mm", "(", "propagator", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.label_propagation": [[65, 79], ["torch.one_hot", "labels[].float", "torch.mm", "torch.mm", "embedding_propagation.get_similarity_matrix", "embedding_propagation.global_consistency", "torch.log", "torch.log", "labels[].float.sum"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.get_similarity_matrix", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.global_consistency"], ["", "def", "label_propagation", "(", "x", ",", "labels", ",", "nclasses", ",", "alpha", ",", "rbf_scale", ",", "norm_prop", ",", "apply_log", ",", "propagator", "=", "None", ",", "balanced", "=", "False", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "    ", "labels", "=", "F", ".", "one_hot", "(", "labels", ",", "nclasses", "+", "1", ")", "\n", "labels", "=", "labels", "[", ":", ",", ":", "nclasses", "]", ".", "float", "(", ")", "# the max label is unlabeled", "\n", "if", "balanced", ":", "\n", "        ", "labels", "=", "labels", "/", "labels", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "", "if", "propagator", "is", "None", ":", "\n", "        ", "weights", "=", "get_similarity_matrix", "(", "x", ",", "rbf_scale", ")", "\n", "propagator", "=", "global_consistency", "(", "\n", "weights", ",", "alpha", "=", "alpha", ",", "norm_prop", "=", "norm_prop", ")", "\n", "", "y_pred", "=", "torch", ".", "mm", "(", "propagator", ",", "labels", ")", "\n", "if", "apply_log", ":", "\n", "        ", "y_pred", "=", "torch", ".", "log", "(", "y_pred", "+", "epsilon", ")", "\n", "\n", "", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.global_consistency": [[81, 104], ["torch.eye", "torch.eye", "torch.sqrt", "torch.sqrt", "torch.inverse", "torch.inverse", "torch.normalize", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "global_consistency", "(", "weights", ",", "alpha", "=", "1", ",", "norm_prop", "=", "False", ")", ":", "\n", "    ", "\"\"\"Implements D. Zhou et al. \"Learning with local and global consistency\". (Same as in TPN paper but without bug)\n\n    Args:\n        weights: Tensor of shape (n, n). Expected to be exp( -d^2/s^2 ), where d is the euclidean distance and\n            s the scale parameter.\n        labels: Tensor of shape (n, n_classes)\n        alpha: Scaler, acts as a smoothing factor\n    Returns:\n        Tensor of shape (n, n_classes) representing the logits of each classes\n    \"\"\"", "\n", "n", "=", "weights", ".", "shape", "[", "1", "]", "\n", "identity", "=", "torch", ".", "eye", "(", "n", ",", "dtype", "=", "weights", ".", "dtype", ",", "device", "=", "weights", ".", "device", ")", "\n", "isqrt_diag", "=", "1.", "/", "torch", ".", "sqrt", "(", "1e-4", "+", "torch", ".", "sum", "(", "weights", ",", "dim", "=", "-", "1", ")", ")", "\n", "# checknan(laplacian=isqrt_diag)", "\n", "S", "=", "weights", "*", "isqrt_diag", "[", "None", ",", ":", "]", "*", "isqrt_diag", "[", ":", ",", "None", "]", "\n", "# checknan(normalizedlaplacian=S)", "\n", "propagator", "=", "identity", "-", "alpha", "*", "S", "\n", "propagator", "=", "torch", ".", "inverse", "(", "propagator", "[", "None", ",", "...", "]", ")", "[", "0", "]", "\n", "# checknan(propagator=propagator)", "\n", "if", "norm_prop", ":", "\n", "        ", "propagator", "=", "F", ".", "normalize", "(", "propagator", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "propagator", "\n", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.BatchEmbeddingPropagation.__init__": [[7, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "rbf_scale", "=", "1", ",", "norm_prop", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "rbf_scale", "=", "rbf_scale", "\n", "self", ".", "norm_prop", "=", "norm_prop", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.BatchEmbeddingPropagation.forward": [[13, 15], ["batch_embedding_propagation.batch_embedding_propagation"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_embedding_propagation"], ["", "def", "forward", "(", "self", ",", "x", ",", "propagator", "=", "None", ")", ":", "\n", "        ", "return", "batch_embedding_propagation", "(", "x", ",", "self", ".", "alpha", ",", "self", ".", "rbf_scale", ",", "self", ".", "norm_prop", ",", "propagator", "=", "propagator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.BatchLabelPropagation.__init__": [[18, 25], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.2", ",", "rbf_scale", "=", "1", ",", "norm_prop", "=", "True", ",", "apply_log", "=", "True", ",", "balanced", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "rbf_scale", "=", "rbf_scale", "\n", "self", ".", "norm_prop", "=", "norm_prop", "\n", "self", ".", "apply_log", "=", "apply_log", "\n", "self", ".", "balanced", "=", "balanced", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.BatchLabelPropagation.forward": [[26, 43], ["batch_embedding_propagation.batch_label_propagation"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_label_propagation"], ["", "def", "forward", "(", "self", ",", "x", ",", "labels", ",", "nclasses", ",", "propagator", "=", "None", ")", ":", "\n", "        ", "\"\"\"Applies label propagation given a set of embeddings and labels\n\n        Arguments:\n            x {Tensor} -- Input embeddings\n            labels {Tensor} -- Input labels from 0 to nclasses + 1. The highest value corresponds to unlabeled samples.\n            nclasses {int} -- Total number of classes\n\n        Keyword Arguments:\n            propagator {Tensor} -- A pre-computed propagator (default: {None})\n\n        Returns:\n            tuple(Tensor, Tensor) -- Logits and Propagator\n        \"\"\"", "\n", "return", "batch_label_propagation", "(", "x", ",", "labels", ",", "nclasses", ",", "self", ".", "alpha", ",", "self", ".", "rbf_scale", ",", "\n", "self", ".", "norm_prop", ",", "self", ".", "apply_log", ",", "propagator", "=", "propagator", ",", "\n", "balanced", "=", "self", ".", "balanced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_get_similarity_matrix": [[44, 53], ["x.size", "torch.exp", "torch.exp", "torch.eye", "torch.eye", "numpy.sqrt", "sq_dist[].std", "torch.exp.size", "x.view", "x.view"], "function", ["None"], ["", "", "def", "batch_get_similarity_matrix", "(", "x", ",", "rbf_scale", ")", ":", "\n", "    ", "b", ",", "e", ",", "c", "=", "x", ".", "size", "(", ")", "\n", "sq_dist", "=", "(", "(", "x", ".", "view", "(", "b", ",", "e", ",", "1", ",", "c", ")", "-", "x", ".", "view", "(", "b", ",", "1", ",", "e", ",", "c", ")", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", "/", "np", ".", "sqrt", "(", "c", ")", "\n", "mask", "=", "sq_dist", "!=", "0", "\n", "sq_dist", "=", "sq_dist", "/", "sq_dist", "[", "mask", "]", ".", "std", "(", ")", "\n", "weights", "=", "torch", ".", "exp", "(", "-", "sq_dist", "*", "rbf_scale", ")", "\n", "mask", "=", "torch", ".", "eye", "(", "weights", ".", "size", "(", "-", "1", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "weights", ".", "device", ")", "\n", "weights", "=", "weights", "*", "(", "~", "mask", ")", ".", "float", "(", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_embedding_propagation": [[55, 61], ["torch.bmm", "torch.bmm", "batch_embedding_propagation.batch_get_similarity_matrix", "batch_embedding_propagation.batch_global_consistency"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_get_similarity_matrix", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_global_consistency"], ["", "def", "batch_embedding_propagation", "(", "x", ",", "alpha", ",", "rbf_scale", ",", "norm_prop", ",", "propagator", "=", "None", ")", ":", "\n", "    ", "if", "propagator", "is", "None", ":", "\n", "        ", "weights", "=", "batch_get_similarity_matrix", "(", "x", ",", "rbf_scale", ")", "\n", "propagator", "=", "batch_global_consistency", "(", "\n", "weights", ",", "alpha", "=", "alpha", ",", "norm_prop", "=", "norm_prop", ")", "\n", "", "return", "torch", ".", "bmm", "(", "propagator", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_global_consistency": [[63, 86], ["torch.eye", "torch.eye", "torch.inverse", "torch.inverse", "torch.sqrt", "torch.sqrt", "torch.normalize", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "batch_global_consistency", "(", "weights", ",", "alpha", "=", "1", ",", "norm_prop", "=", "False", ")", ":", "\n", "    ", "\"\"\"Implements D. Zhou et al. \"Learning with local and global consistency\". (Same as in TPN paper but without bug)\n    Args:\n        weights: Tensor of shape (n, n). Expected to be exp( -d^2/s^2 ), where d is the euclidean distance and\n            s the scale parameter.\n        labels: Tensor of shape (n, n_classes)\n        alpha: Scaler, acts as a smoothing factor\n    Returns:\n        Tensor of shape (n, n_classes) representing the logits of each classes\n    \"\"\"", "\n", "n", "=", "weights", ".", "shape", "[", "-", "1", "]", "\n", "identity", "=", "torch", ".", "eye", "(", "n", ",", "dtype", "=", "weights", ".", "dtype", ",", "device", "=", "weights", ".", "device", ")", "\n", "isqrt_diag", "=", "1.", "/", "torch", ".", "sqrt", "(", "1e-4", "+", "torch", ".", "sum", "(", "weights", ",", "dim", "=", "-", "1", ")", ")", "\n", "# checknan(laplacian=isqrt_diag)", "\n", "S", "=", "weights", "*", "isqrt_diag", "[", ":", ",", "None", ",", ":", "]", "*", "isqrt_diag", "[", ":", ",", "None", ",", ":", "]", "\n", "# checknan(normalizedlaplacian=S)", "\n", "\n", "propagator", "=", "identity", "[", "None", "]", "-", "alpha", "*", "S", "\n", "propagator", "=", "torch", ".", "inverse", "(", "propagator", ")", "\n", "# checknan(propagator=propagator)", "\n", "if", "norm_prop", ":", "\n", "        ", "propagator", "=", "F", ".", "normalize", "(", "propagator", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "propagator", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_label_propagation": [[88, 102], ["torch.one_hot", "labels[].float", "torch.bmm", "torch.bmm", "batch_embedding_propagation.batch_get_similarity_matrix", "batch_embedding_propagation.batch_global_consistency", "torch.log", "torch.log", "labels[].float.sum"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_get_similarity_matrix", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.batch_embedding_propagation.batch_global_consistency"], ["", "def", "batch_label_propagation", "(", "x", ",", "labels", ",", "nclasses", ",", "alpha", ",", "rbf_scale", ",", "norm_prop", ",", "apply_log", ",", "propagator", "=", "None", ",", "balanced", "=", "False", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "    ", "labels", "=", "F", ".", "one_hot", "(", "labels", ",", "nclasses", "+", "1", ")", "\n", "labels", "=", "labels", "[", "...", ",", ":", "nclasses", "]", ".", "float", "(", ")", "# the max label is unlabeled", "\n", "if", "balanced", ":", "\n", "        ", "labels", "=", "labels", "/", "labels", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "if", "propagator", "is", "None", ":", "\n", "        ", "weights", "=", "batch_get_similarity_matrix", "(", "x", ",", "rbf_scale", ")", "\n", "propagator", "=", "batch_global_consistency", "(", "\n", "weights", ",", "alpha", "=", "alpha", ",", "norm_prop", "=", "norm_prop", ")", "\n", "", "y_pred", "=", "torch", ".", "bmm", "(", "propagator", ",", "labels", ")", "\n", "if", "apply_log", ":", "\n", "        ", "y_pred", "=", "torch", ".", "log", "(", "y_pred", "+", "epsilon", ")", "\n", "\n", "", "return", "y_pred", "\n", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.src.utils.get_collate": [[3, 8], ["None"], "function", ["None"], ["def", "get_collate", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "\"identity\"", ":", "\n", "        ", "return", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "        ", "return", "default_collate", "", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataLoader.__iter__": [[10, 16], ["isinstance", "_DataLoader.__iter__", "episodic_dataset.EpisodicDataLoader.dataset.__iter__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.__iter__", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.__iter__"], ["    ", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "dataset", ",", "EpisodicDataset", ")", ":", "\n", "            ", "self", ".", "dataset", ".", "__iter__", "(", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "", "", "torch", ".", "utils", ".", "data", ".", "DataLoader", "=", "EpisodicDataLoader", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.FewShotSampler.__init__": [[20, 22], ["episodic_dataset.FewShotSampler.FewShotTask"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "nclasses", ",", "support_size", ",", "query_size", ",", "unlabeled_size", ")", ":", "\n", "        ", "self", ".", "task", "=", "self", ".", "FewShotTask", "(", "nclasses", ",", "support_size", ",", "query_size", ",", "unlabeled_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.FewShotSampler.sample": [[23, 25], ["copy.deepcopy"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "deepcopy", "(", "self", ".", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.__init__": [[27, 35], ["numpy.unique", "numpy.arange", "episodic_dataset.EpisodicDataset.reshuffle", "len"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.reshuffle"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "sampler", ",", "size", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "labels", "=", "labels", "\n", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "labelset", "=", "np", ".", "unique", "(", "labels", ")", "\n", "self", ".", "indices", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "reshuffle", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.reshuffle": [[36, 43], ["numpy.zeros", "numpy.array", "numpy.random.permutation", "len", "len"], "methods", ["None"], ["", "def", "reshuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Helper method to randomize tasks again\n        \"\"\"", "\n", "self", ".", "clss_idx", "=", "[", "np", ".", "random", ".", "permutation", "(", "self", ".", "indices", "[", "self", ".", "labels", "==", "label", "]", ")", "for", "label", "in", "self", ".", "labelset", "]", "\n", "self", ".", "starts", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "clss_idx", ")", ",", "dtype", "=", "int", ")", "\n", "self", ".", "lengths", "=", "np", ".", "array", "(", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "clss_idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.gen_few_shot_task": [[44, 65], ["numpy.random.choice", "numpy.array", "numpy.reshape().transpose", "numpy.reshape().transpose.flatten", "numpy.min", "numpy.reshape", "range", "len"], "methods", ["None"], ["", "def", "gen_few_shot_task", "(", "self", ",", "nclasses", ",", "size", ")", ":", "\n", "        ", "\"\"\" Iterates through the dataset sampling tasks\n\n        Args:\n            n: FewShotTask.n\n            sample_size: FewShotTask.k\n            query_size: FewShotTask.k (default), else query_set_size // FewShotTask.n\n\n        Returns: Sampled task or None in the case the dataset has been exhausted.\n\n        \"\"\"", "\n", "classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "labelset", ",", "nclasses", ",", "replace", "=", "False", ")", "\n", "starts", "=", "self", ".", "starts", "[", "classes", "]", "\n", "reminders", "=", "self", ".", "lengths", "[", "classes", "]", "-", "starts", "\n", "if", "np", ".", "min", "(", "reminders", ")", "<", "size", ":", "\n", "            ", "return", "None", "\n", "", "sample_indices", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "clss_idx", "[", "classes", "[", "i", "]", "]", "[", "starts", "[", "i", "]", ":", "(", "starts", "[", "i", "]", "+", "size", ")", "]", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "]", ")", "\n", "sample_indices", "=", "np", ".", "reshape", "(", "sample_indices", ",", "[", "nclasses", ",", "size", "]", ")", ".", "transpose", "(", ")", "\n", "self", ".", "starts", "[", "classes", "]", "+=", "size", "\n", "return", "sample_indices", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.sample_task_list": [[66, 92], ["episodic_dataset.EpisodicDataset.sampler.sample", "min", "FewShotSampler.FewShotTask", "numpy.any", "episodic_dataset.EpisodicDataset.gen_few_shot_task", "RuntimeError", "task_list.append", "episodic_dataset.EpisodicDataset.sampler.sample", "episodic_dataset.EpisodicDataset.gen_few_shot_task", "episodic_dataset.EpisodicDataset.lengths.min"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.FewShotSampler.sample", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.gen_few_shot_task", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.FewShotSampler.sample", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.gen_few_shot_task"], ["", "def", "sample_task_list", "(", "self", ")", ":", "\n", "        ", "\"\"\" Generates a list of tasks (until the dataset is exhausted)\n\n        Returns: the list of tasks [(FewShotTask object, task_indices), ...]\n\n        \"\"\"", "\n", "task_list", "=", "[", "]", "\n", "task_info", "=", "self", ".", "sampler", ".", "sample", "(", ")", "\n", "nclasses", ",", "support_size", ",", "query_size", ",", "unlabeled_size", "=", "task_info", "\n", "unlabeled_size", "=", "min", "(", "unlabeled_size", ",", "self", ".", "lengths", ".", "min", "(", ")", "-", "support_size", "-", "query_size", ")", "\n", "task_info", "=", "FewShotSampler", ".", "FewShotTask", "(", "nclasses", "=", "nclasses", ",", "\n", "support_size", "=", "support_size", ",", "\n", "query_size", "=", "query_size", ",", "\n", "unlabeled_size", "=", "unlabeled_size", ")", "\n", "k", "=", "support_size", "+", "query_size", "+", "unlabeled_size", "\n", "if", "np", ".", "any", "(", "k", ">", "self", ".", "lengths", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Requested more samples than existing\"", ")", "\n", "", "few_shot_task", "=", "self", ".", "gen_few_shot_task", "(", "nclasses", ",", "k", ")", "\n", "\n", "while", "few_shot_task", "is", "not", "None", ":", "\n", "            ", "task_list", ".", "append", "(", "(", "task_info", ",", "few_shot_task", ")", ")", "\n", "task_info", "=", "self", ".", "sampler", ".", "sample", "(", ")", "\n", "nclasses", ",", "support_size", ",", "query_size", ",", "unlabeled_size", "=", "task_info", "\n", "k", "=", "support_size", "+", "query_size", "+", "unlabeled_size", "\n", "few_shot_task", "=", "self", ".", "gen_few_shot_task", "(", "nclasses", ",", "k", ")", "\n", "", "return", "task_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.sample_images": [[93, 95], ["None"], "methods", ["None"], ["", "def", "sample_images", "(", "self", ",", "indices", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.__getitem__": [[96, 133], ["numpy.argsort", "numpy.sort", "episodic_dataset.EpisodicDataset.sample_images", "torch.stack", "images.view.view.size", "images.view.view.view", "numpy.zeros", "episodic_dataset.EpisodicDataset.labels[].ravel", "torch.from_numpy", "episodic_dataset.EpisodicDataset.transforms", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.sample_images"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\" Reads the idx th task (episode) from disk\n\n        Args:\n            idx: task index\n\n        Returns: task dictionary with (dataset (char), task (char), dim (tuple), episode (Tensor))\n\n        \"\"\"", "\n", "fs_task_info", ",", "indices", "=", "self", ".", "task_list", "[", "idx", "]", "\n", "ordered_argindices", "=", "np", ".", "argsort", "(", "indices", ")", "\n", "ordered_indices", "=", "np", ".", "sort", "(", "indices", ")", "\n", "nclasses", ",", "support_size", ",", "query_size", ",", "unlabeled_size", "=", "fs_task_info", "\n", "k", "=", "support_size", "+", "query_size", "+", "unlabeled_size", "\n", "_images", "=", "self", ".", "sample_images", "(", "ordered_indices", ")", "\n", "images", "=", "torch", ".", "stack", "(", "[", "self", ".", "transforms", "(", "_images", "[", "i", "]", ")", "for", "i", "in", "np", ".", "argsort", "(", "ordered_argindices", ")", "]", ")", "\n", "total", ",", "c", ",", "h", ",", "w", "=", "images", ".", "size", "(", ")", "\n", "assert", "(", "total", "==", "(", "k", "*", "nclasses", ")", ")", "\n", "images", "=", "images", ".", "view", "(", "k", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", "\n", "del", "(", "_images", ")", "\n", "images", "=", "images", "*", "2", "-", "1", "\n", "targets", "=", "np", ".", "zeros", "(", "[", "nclasses", "*", "k", "]", ",", "dtype", "=", "int", ")", "\n", "targets", "[", "ordered_argindices", "]", "=", "self", ".", "labels", "[", "ordered_indices", ",", "...", "]", ".", "ravel", "(", ")", "\n", "sample", "=", "{", "\"dataset\"", ":", "self", ".", "name", ",", "\n", "\"channels\"", ":", "c", ",", "\n", "\"height\"", ":", "h", ",", "\n", "\"width\"", ":", "w", ",", "\n", "\"nclasses\"", ":", "nclasses", ",", "\n", "\"support_size\"", ":", "support_size", ",", "\n", "\"query_size\"", ":", "query_size", ",", "\n", "\"unlabeled_size\"", ":", "unlabeled_size", ",", "\n", "\"targets\"", ":", "torch", ".", "from_numpy", "(", "targets", ")", ",", "\n", "\"support_set\"", ":", "images", "[", ":", "support_size", ",", "...", "]", ",", "\n", "\"query_set\"", ":", "images", "[", "support_size", ":", "(", "support_size", "+", "\n", "query_size", ")", ",", "...", "]", ",", "\n", "\"unlabeled_set\"", ":", "None", "if", "unlabeled_size", "==", "0", "else", "images", "[", "(", "support_size", "+", "query_size", ")", ":", ",", "...", "]", "}", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.__iter__": [[135, 143], ["len", "episodic_dataset.EpisodicDataset.reshuffle", "episodic_dataset.EpisodicDataset.sample_task_list"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.reshuffle", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.sample_task_list"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# print(\"Prefetching new epoch episodes\")", "\n", "        ", "self", ".", "task_list", "=", "[", "]", "\n", "while", "len", "(", "self", ".", "task_list", ")", "<", "self", ".", "size", ":", "\n", "            ", "self", ".", "reshuffle", "(", ")", "\n", "self", ".", "task_list", "+=", "self", ".", "sample_task_list", "(", ")", "\n", "# print(\"done prefetching.\")", "\n", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_dataset.EpisodicDataset.__len__": [[144, 146], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_miniimagenet.EpisodicMiniImagenet.__init__": [[18, 35], ["os.path.join", "numpy.load", "src.datasets.episodic_dataset.EpisodicDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ",", "split", ",", "sampler", ",", "size", ",", "transforms", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            split: data split\n            few_shot_sampler: FewShotSampler instance\n            task: dataset task (if more than one)\n            size: number of tasks to generate (int)\n            disjoint: whether to create disjoint splits.\n        \"\"\"", "\n", "self", ".", "data_root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mini-imagenet-%s.npz\"", ")", "\n", "self", ".", "split", "=", "split", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "data_root", "%", "self", ".", "split_paths", "[", "split", "]", ")", "\n", "self", ".", "features", "=", "data", "[", "\"features\"", "]", "\n", "labels", "=", "data", "[", "\"targets\"", "]", "\n", "del", "(", "data", ")", "\n", "super", "(", ")", ".", "__init__", "(", "labels", ",", "sampler", ",", "size", ",", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_miniimagenet.EpisodicMiniImagenet.sample_images": [[36, 38], ["None"], "methods", ["None"], ["", "def", "sample_images", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "features", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_miniimagenet.EpisodicMiniImagenet.__iter__": [[39, 41], ["src.datasets.episodic_dataset.EpisodicDataset.__iter__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_miniimagenet.EpisodicMiniImagenetPkl.__init__": [[52, 73], ["os.path.join", "data[].keys", "numpy.zeros", "enumerate", "src.datasets.episodic_dataset.EpisodicDataset.__init__", "open", "pickle.load", "sorted", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ",", "split", ",", "sampler", ",", "size", ",", "transforms", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            split: data split\n            few_shot_sampler: FewShotSampler instance\n            task: dataset task (if more than one)\n            size: number of tasks to generate (int)\n            disjoint: whether to create disjoint splits.\n        \"\"\"", "\n", "self", ".", "data_root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mini-imagenet-cache-%s.pkl\"", ")", "\n", "self", ".", "split", "=", "split", "\n", "with", "open", "(", "self", ".", "data_root", "%", "self", ".", "split_paths", "[", "split", "]", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "data", "=", "pkl", ".", "load", "(", "infile", ")", "\n", "", "self", ".", "features", "=", "data", "[", "\"image_data\"", "]", "\n", "label_names", "=", "data", "[", "\"class_dict\"", "]", ".", "keys", "(", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "self", ".", "features", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "sorted", "(", "label_names", ")", ")", ":", "\n", "            ", "labels", "[", "np", ".", "array", "(", "data", "[", "'class_dict'", "]", "[", "name", "]", ")", "]", "=", "i", "\n", "", "del", "(", "data", ")", "\n", "super", "(", ")", ".", "__init__", "(", "labels", ",", "sampler", ",", "size", ",", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_miniimagenet.EpisodicMiniImagenetPkl.sample_images": [[74, 76], ["None"], "methods", ["None"], ["", "def", "sample_images", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "features", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_miniimagenet.EpisodicMiniImagenetPkl.__iter__": [[77, 79], ["src.datasets.episodic_dataset.EpisodicDataset.__iter__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.tiered_imagenet.NonEpisodicTieredImagenet.__init__": [[17, 37], ["os.path.join", "os.path.join", "open", "pickle.load", "open", "pickle.load"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_root", ",", "split", ",", "transforms", ",", "rotation_labels", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            split: data split\n            few_shot_sampler: FewShotSampler instance\n            task: dataset task (if more than one)\n            size: number of tasks to generate (int)\n            disjoint: whether to create disjoint splits.\n        \"\"\"", "\n", "split", "=", "self", ".", "split_paths", "[", "split", "]", "\n", "self", ".", "data_root", "=", "data_root", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"%s_images_png.pkl\"", "%", "(", "split", ")", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"%s_labels.pkl\"", "%", "(", "split", ")", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "rotation_labels", "=", "rotation_labels", "\n", "with", "open", "(", "img_path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "self", ".", "features", "=", "pkl", ".", "load", "(", "infile", ",", "encoding", "=", "\"bytes\"", ")", "\n", "", "with", "open", "(", "label_path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "self", ".", "labels", "=", "pkl", ".", "load", "(", "infile", ",", "encoding", "=", "\"bytes\"", ")", "[", "b'label_specific'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.tiered_imagenet.NonEpisodicTieredImagenet.next_run": [[38, 40], ["None"], "methods", ["None"], ["", "", "def", "next_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.tiered_imagenet.NonEpisodicTieredImagenet.__getitem__": [[41, 45], ["cv2.imdecode", "int", "tiered_imagenet.NonEpisodicTieredImagenet.transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imdecode", "(", "self", ".", "features", "[", "item", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "images", "=", "self", ".", "transforms", "(", "image", ")", "*", "2", "-", "1", "\n", "return", "images", ",", "int", "(", "self", ".", "labels", "[", "item", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.tiered_imagenet.NonEpisodicTieredImagenet.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.tiered_imagenet.RotatedNonEpisodicTieredImagenet.__init__": [[57, 68], ["tiered_imagenet.NonEpisodicTieredImagenet.__init__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            split: data split\n            few_shot_sampler: FewShotSampler instance\n            task: dataset task (if more than one)\n            size: number of tasks to generate (int)\n            disjoint: whether to create disjoint splits.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.tiered_imagenet.RotatedNonEpisodicTieredImagenet.rotate_img": [[69, 80], ["numpy.flipud", "numpy.transpose", "numpy.fliplr", "numpy.flipud", "numpy.transpose", "ValueError", "numpy.flipud"], "methods", ["None"], ["", "def", "rotate_img", "(", "self", ",", "img", ",", "rot", ")", ":", "\n", "        ", "if", "rot", "==", "0", ":", "# 0 degrees rotation", "\n", "            ", "return", "img", "\n", "", "elif", "rot", "==", "90", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "flipud", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "0", ",", "2", ")", ")", ")", "\n", "", "elif", "rot", "==", "180", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "img", ")", ")", "\n", "", "elif", "rot", "==", "270", ":", "# 270 degrees rotation / or -90", "\n", "            ", "return", "np", ".", "transpose", "(", "np", ".", "flipud", "(", "img", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'rotation should be 0, 90, 180, or 270 degrees'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.tiered_imagenet.RotatedNonEpisodicTieredImagenet.__getitem__": [[81, 90], ["numpy.random.randint", "tiered_imagenet.RotatedNonEpisodicTieredImagenet.transforms", "tiered_imagenet.RotatedNonEpisodicTieredImagenet.transforms", "tiered_imagenet.RotatedNonEpisodicTieredImagenet.transforms", "cv2.imdecode", "numpy.fliplr", "tiered_imagenet.RotatedNonEpisodicTieredImagenet.rotate_img", "tiered_imagenet.RotatedNonEpisodicTieredImagenet.rotate_img", "tiered_imagenet.RotatedNonEpisodicTieredImagenet.rotate_img", "torch.LongTensor", "torch.stack", "torch.ones", "int", "tiered_imagenet.RotatedNonEpisodicTieredImagenet.transforms"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imdecode", "(", "self", ".", "features", "[", "item", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "if", "np", ".", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "image", "=", "np", ".", "fliplr", "(", "image", ")", "\n", "", "image_90", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "90", ")", ")", "\n", "image_180", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "180", ")", ")", "\n", "image_270", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "270", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "[", "self", ".", "transforms", "(", "image", ")", ",", "image_90", ",", "image_180", ",", "image_270", "]", ")", "*", "2", "-", "1", "\n", "return", "images", ",", "torch", ".", "ones", "(", "4", ",", "dtype", "=", "torch", ".", "long", ")", "*", "int", "(", "self", ".", "labels", "[", "item", "]", ")", ",", "torch", ".", "LongTensor", "(", "self", ".", "rotation_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.cub.NonEpisodicCUB.__init__": [[18, 38], ["numpy.array", "numpy.array", "len", "open", "json.load", "os.path.join", "enumerate", "sorted", "numpy.unique"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_root", ",", "split", ",", "transforms", ",", "rotation_labels", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            split: data split\n            few_shot_sampler: FewShotSampler instance\n            task: dataset task (if more than one)\n            size: number of tasks to generate (int)\n            disjoint: whether to create disjoint splits.\n        \"\"\"", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "split", "=", "{", "\"train\"", ":", "\"base\"", ",", "\"val\"", ":", "\"val\"", ",", "\"valid\"", ":", "\"val\"", ",", "\"test\"", ":", "\"novel\"", "}", "[", "split", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"few_shot_lists\"", ",", "\"%s.json\"", "%", "self", ".", "split", ")", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "self", ".", "metadata", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "rotation_labels", "=", "rotation_labels", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "self", ".", "metadata", "[", "'image_labels'", "]", ")", "\n", "label_map", "=", "{", "l", ":", "i", "for", "i", ",", "l", "in", "enumerate", "(", "sorted", "(", "np", ".", "unique", "(", "self", ".", "labels", ")", ")", ")", "}", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "[", "label_map", "[", "l", "]", "for", "l", "in", "self", ".", "labels", "]", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "metadata", "[", "\"image_labels\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.cub.NonEpisodicCUB.next_run": [[39, 41], ["None"], "methods", ["None"], ["", "def", "next_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.cub.NonEpisodicCUB.rotate_img": [[42, 53], ["numpy.flipud", "numpy.transpose", "numpy.fliplr", "numpy.flipud", "numpy.transpose", "ValueError", "numpy.flipud"], "methods", ["None"], ["", "def", "rotate_img", "(", "self", ",", "img", ",", "rot", ")", ":", "\n", "        ", "if", "rot", "==", "0", ":", "# 0 degrees rotation", "\n", "            ", "return", "img", "\n", "", "elif", "rot", "==", "90", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "flipud", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "0", ",", "2", ")", ")", ")", "\n", "", "elif", "rot", "==", "180", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "img", ")", ")", "\n", "", "elif", "rot", "==", "270", ":", "# 270 degrees rotation / or -90", "\n", "            ", "return", "np", ".", "transpose", "(", "np", ".", "flipud", "(", "img", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'rotation should be 0, 90, 180, or 270 degrees'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.cub.NonEpisodicCUB.__getitem__": [[54, 58], ["numpy.array", "PIL.Image.open().convert", "int", "cub.NonEpisodicCUB.transforms", "PIL.Image.open"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "metadata", "[", "\"image_names\"", "]", "[", "item", "]", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "images", "=", "self", ".", "transforms", "(", "image", ")", "*", "2", "-", "1", "\n", "return", "images", ",", "int", "(", "self", ".", "labels", "[", "item", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.cub.NonEpisodicCUB.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.cub.RotatedNonEpisodicCUB.__init__": [[70, 81], ["cub.NonEpisodicCUB.__init__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            split: data split\n            few_shot_sampler: FewShotSampler instance\n            task: dataset task (if more than one)\n            size: number of tasks to generate (int)\n            disjoint: whether to create disjoint splits.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.cub.RotatedNonEpisodicCUB.rotate_img": [[82, 93], ["numpy.flipud", "numpy.transpose", "numpy.fliplr", "numpy.flipud", "numpy.transpose", "ValueError", "numpy.flipud"], "methods", ["None"], ["", "def", "rotate_img", "(", "self", ",", "img", ",", "rot", ")", ":", "\n", "        ", "if", "rot", "==", "0", ":", "# 0 degrees rotation", "\n", "            ", "return", "img", "\n", "", "elif", "rot", "==", "90", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "flipud", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "0", ",", "2", ")", ")", ")", "\n", "", "elif", "rot", "==", "180", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "img", ")", ")", "\n", "", "elif", "rot", "==", "270", ":", "# 270 degrees rotation / or -90", "\n", "            ", "return", "np", ".", "transpose", "(", "np", ".", "flipud", "(", "img", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'rotation should be 0, 90, 180, or 270 degrees'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.cub.RotatedNonEpisodicCUB.__getitem__": [[94, 103], ["numpy.array", "numpy.random.randint", "cub.RotatedNonEpisodicCUB.transforms", "cub.RotatedNonEpisodicCUB.transforms", "cub.RotatedNonEpisodicCUB.transforms", "PIL.Image.open().convert", "numpy.fliplr", "cub.RotatedNonEpisodicCUB.rotate_img", "cub.RotatedNonEpisodicCUB.rotate_img", "cub.RotatedNonEpisodicCUB.rotate_img", "torch.LongTensor", "torch.stack", "torch.ones", "int", "PIL.Image.open", "cub.RotatedNonEpisodicCUB.transforms"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "metadata", "[", "\"image_names\"", "]", "[", "item", "]", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "if", "np", ".", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "image", "=", "np", ".", "fliplr", "(", "image", ")", "\n", "", "image_90", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "90", ")", ")", "\n", "image_180", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "180", ")", ")", "\n", "image_270", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "270", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "[", "self", ".", "transforms", "(", "image", ")", ",", "image_90", ",", "image_180", ",", "image_270", "]", ")", "*", "2", "-", "1", "\n", "return", "images", ",", "torch", ".", "ones", "(", "4", ",", "dtype", "=", "torch", ".", "long", ")", "*", "int", "(", "self", ".", "labels", "[", "item", "]", ")", ",", "torch", ".", "LongTensor", "(", "self", ".", "rotation_labels", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_cub.EpisodicCUB.__init__": [[19, 28], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "episodic_dataset.EpisodicDataset.__init__", "open", "json.load", "os.path.join", "enumerate", "sorted", "numpy.unique", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ",", "split", ",", "sampler", ",", "size", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "split", "=", "split", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"few_shot_lists\"", ",", "\"%s.json\"", "%", "self", ".", "split_paths", "[", "split", "]", ")", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "self", ".", "metadata", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "labels", "=", "np", ".", "array", "(", "self", ".", "metadata", "[", "'image_labels'", "]", ")", "\n", "label_map", "=", "{", "l", ":", "i", "for", "i", ",", "l", "in", "enumerate", "(", "sorted", "(", "np", ".", "unique", "(", "labels", ")", ")", ")", "}", "\n", "labels", "=", "np", ".", "array", "(", "[", "label_map", "[", "l", "]", "for", "l", "in", "labels", "]", ")", "\n", "super", "(", ")", ".", "__init__", "(", "labels", ",", "sampler", ",", "size", ",", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_cub.EpisodicCUB.sample_images": [[29, 31], ["numpy.array", "numpy.array", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "sample_images", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "[", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "metadata", "[", "'image_names'", "]", "[", "i", "]", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "for", "i", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_cub.EpisodicCUB.__iter__": [[32, 34], ["episodic_dataset.EpisodicDataset.__iter__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.NonEpisodicMiniImagenet.__init__": [[16, 31], ["os.path.join", "numpy.load"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_root", ",", "split", ",", "transforms", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            split: data split\n            few_shot_sampler: FewShotSampler instance\n            task: dataset task (if more than one)\n            size: number of tasks to generate (int)\n            disjoint: whether to create disjoint splits.\n        \"\"\"", "\n", "self", ".", "data_root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mini-imagenet-%s.npz\"", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "data_root", "%", "self", ".", "split_paths", "[", "split", "]", ")", "\n", "self", ".", "features", "=", "data", "[", "\"features\"", "]", "\n", "self", ".", "labels", "=", "data", "[", "\"targets\"", "]", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.NonEpisodicMiniImagenet.next_run": [[32, 34], ["None"], "methods", ["None"], ["", "def", "next_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.NonEpisodicMiniImagenet.__getitem__": [[35, 39], ["miniimagenet.NonEpisodicMiniImagenet.transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", "=", "self", ".", "transforms", "(", "self", ".", "features", "[", "item", "]", ")", "\n", "image", "=", "image", "*", "2", "-", "1", "\n", "return", "image", ",", "self", ".", "labels", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.NonEpisodicMiniImagenet.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenet.__init__": [[52, 69], ["os.path.join", "numpy.load", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_root", ",", "split", ",", "transforms", ",", "rotation_labels", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            split: data split\n            few_shot_sampler: FewShotSampler instance\n            task: dataset task (if more than one)\n            size: number of tasks to generate (int)\n            disjoint: whether to create disjoint splits.\n        \"\"\"", "\n", "self", ".", "data_root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mini-imagenet-%s.npz\"", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "data_root", "%", "self", ".", "split_paths", "[", "split", "]", ")", "\n", "self", ".", "features", "=", "data", "[", "\"features\"", "]", "\n", "self", ".", "labels", "=", "data", "[", "\"targets\"", "]", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "features", ")", "\n", "self", ".", "rotation_labels", "=", "rotation_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenet.next_run": [[70, 72], ["None"], "methods", ["None"], ["", "def", "next_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenet.rotate_img": [[73, 84], ["numpy.flipud", "numpy.transpose", "numpy.fliplr", "numpy.flipud", "numpy.transpose", "ValueError", "numpy.flipud"], "methods", ["None"], ["", "def", "rotate_img", "(", "self", ",", "img", ",", "rot", ")", ":", "\n", "        ", "if", "rot", "==", "0", ":", "# 0 degrees rotation", "\n", "            ", "return", "img", "\n", "", "elif", "rot", "==", "90", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "flipud", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "0", ",", "2", ")", ")", ")", "\n", "", "elif", "rot", "==", "180", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "img", ")", ")", "\n", "", "elif", "rot", "==", "270", ":", "# 270 degrees rotation / or -90", "\n", "            ", "return", "np", ".", "transpose", "(", "np", ".", "flipud", "(", "img", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'rotation should be 0, 90, 180, or 270 degrees'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenet.__getitem__": [[85, 97], ["numpy.random.randint", "numpy.fliplr().copy", "miniimagenet.RotatedNonEpisodicMiniImagenet.transforms", "len", "miniimagenet.RotatedNonEpisodicMiniImagenet.transforms", "miniimagenet.RotatedNonEpisodicMiniImagenet.transforms", "miniimagenet.RotatedNonEpisodicMiniImagenet.transforms", "cat.extend", "torch.LongTensor", "miniimagenet.RotatedNonEpisodicMiniImagenet.rotate_img", "miniimagenet.RotatedNonEpisodicMiniImagenet.rotate_img", "miniimagenet.RotatedNonEpisodicMiniImagenet.rotate_img", "torch.stack", "torch.ones", "int", "numpy.fliplr", "len"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", "=", "self", ".", "features", "[", "item", "]", "\n", "if", "np", ".", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "image", "=", "np", ".", "fliplr", "(", "image", ")", ".", "copy", "(", ")", "\n", "", "cat", "=", "[", "self", ".", "transforms", "(", "image", ")", "]", "\n", "if", "len", "(", "self", ".", "rotation_labels", ")", ">", "1", ":", "\n", "            ", "image_90", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "90", ")", ")", "\n", "image_180", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "180", ")", ")", "\n", "image_270", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "270", ")", ")", "\n", "cat", ".", "extend", "(", "[", "image_90", ",", "image_180", ",", "image_270", "]", ")", "\n", "", "images", "=", "torch", ".", "stack", "(", "cat", ")", "*", "2", "-", "1", "\n", "return", "images", ",", "torch", ".", "ones", "(", "len", "(", "self", ".", "rotation_labels", ")", ",", "dtype", "=", "torch", ".", "long", ")", "*", "int", "(", "self", ".", "labels", "[", "item", "]", ")", ",", "torch", ".", "LongTensor", "(", "self", ".", "rotation_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenet.__len__": [[98, 100], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.__init__": [[110, 132], ["os.path.join", "data[].keys", "numpy.zeros", "enumerate", "len", "open", "pickle.load", "sorted", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_root", ",", "split", ",", "transforms", ",", "rotation_labels", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            split: data split\n            few_shot_sampler: FewShotSampler instance\n            task: dataset task (if more than one)\n            size: number of tasks to generate (int)\n            disjoint: whether to create disjoint splits.\n        \"\"\"", "\n", "self", ".", "data_root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"mini-imagenet-cache-%s.pkl\"", ")", "\n", "with", "open", "(", "self", ".", "data_root", "%", "self", ".", "split_paths", "[", "split", "]", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "data", "=", "pkl", ".", "load", "(", "infile", ")", "\n", "", "self", ".", "features", "=", "data", "[", "\"image_data\"", "]", "\n", "label_names", "=", "data", "[", "\"class_dict\"", "]", ".", "keys", "(", ")", "\n", "self", ".", "labels", "=", "np", ".", "zeros", "(", "(", "self", ".", "features", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "sorted", "(", "label_names", ")", ")", ":", "\n", "            ", "self", ".", "labels", "[", "np", ".", "array", "(", "data", "[", "'class_dict'", "]", "[", "name", "]", ")", "]", "=", "i", "\n", "", "del", "(", "data", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "features", ")", "\n", "self", ".", "rotation_labels", "=", "rotation_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.next_run": [[133, 135], ["None"], "methods", ["None"], ["", "def", "next_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img": [[136, 147], ["numpy.flipud", "numpy.transpose", "numpy.fliplr", "numpy.flipud", "numpy.transpose", "ValueError", "numpy.flipud"], "methods", ["None"], ["", "def", "rotate_img", "(", "self", ",", "img", ",", "rot", ")", ":", "\n", "        ", "if", "rot", "==", "0", ":", "# 0 degrees rotation", "\n", "            ", "return", "img", "\n", "", "elif", "rot", "==", "90", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "flipud", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "0", ",", "2", ")", ")", ")", "\n", "", "elif", "rot", "==", "180", ":", "# 90 degrees rotation", "\n", "            ", "return", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "img", ")", ")", "\n", "", "elif", "rot", "==", "270", ":", "# 270 degrees rotation / or -90", "\n", "            ", "return", "np", ".", "transpose", "(", "np", ".", "flipud", "(", "img", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'rotation should be 0, 90, 180, or 270 degrees'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.__getitem__": [[148, 160], ["numpy.random.randint", "numpy.fliplr().copy", "miniimagenet.RotatedNonEpisodicMiniImagenetPkl.transforms", "len", "miniimagenet.RotatedNonEpisodicMiniImagenetPkl.transforms", "miniimagenet.RotatedNonEpisodicMiniImagenetPkl.transforms", "miniimagenet.RotatedNonEpisodicMiniImagenetPkl.transforms", "cat.extend", "torch.LongTensor", "miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "torch.stack", "torch.ones", "int", "numpy.fliplr", "len"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.rotate_img"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", "=", "self", ".", "features", "[", "item", "]", "\n", "if", "np", ".", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "image", "=", "np", ".", "fliplr", "(", "image", ")", ".", "copy", "(", ")", "\n", "", "cat", "=", "[", "self", ".", "transforms", "(", "image", ")", "]", "\n", "if", "len", "(", "self", ".", "rotation_labels", ")", ">", "1", ":", "\n", "            ", "image_90", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "90", ")", ")", "\n", "image_180", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "180", ")", ")", "\n", "image_270", "=", "self", ".", "transforms", "(", "self", ".", "rotate_img", "(", "image", ",", "270", ")", ")", "\n", "cat", ".", "extend", "(", "[", "image_90", ",", "image_180", ",", "image_270", "]", ")", "\n", "", "images", "=", "torch", ".", "stack", "(", "cat", ")", "*", "2", "-", "1", "\n", "return", "images", ",", "torch", ".", "ones", "(", "len", "(", "self", ".", "rotation_labels", ")", ",", "dtype", "=", "torch", ".", "long", ")", "*", "int", "(", "self", ".", "labels", "[", "item", "]", ")", ",", "torch", ".", "LongTensor", "(", "self", ".", "rotation_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.miniimagenet.RotatedNonEpisodicMiniImagenetPkl.__len__": [[161, 163], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.__init__": [[21, 31], ["os.path.join", "os.path.join", "episodic_dataset.EpisodicDataset.__init__", "open", "pickle.load", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ",", "split", ",", "sampler", ",", "size", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "split", "=", "split", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"%s_images_png.pkl\"", "%", "(", "split", ")", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"%s_labels.pkl\"", "%", "(", "split", ")", ")", "\n", "with", "open", "(", "img_path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "self", ".", "features", "=", "pkl", ".", "load", "(", "infile", ",", "encoding", "=", "\"bytes\"", ")", "\n", "", "with", "open", "(", "label_path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "labels", "=", "pkl", ".", "load", "(", "infile", ",", "encoding", "=", "\"bytes\"", ")", "[", "b'label_specific'", "]", "\n", "", "super", "(", ")", ".", "__init__", "(", "labels", ",", "sampler", ",", "size", ",", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.sample_images": [[32, 34], ["cv2.imdecode"], "methods", ["None"], ["", "def", "sample_images", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "[", "cv2", ".", "imdecode", "(", "self", ".", "features", "[", "i", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "for", "i", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.__iter__": [[35, 37], ["episodic_dataset.EpisodicDataset.__iter__"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.episodic_tiered_imagenet.EpisodicTieredImagenet.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.__init__.get_dataset": [[24, 85], ["__init__.get_transformer", "miniimagenet.RotatedNonEpisodicMiniImagenet", "miniimagenet.NonEpisodicMiniImagenet", "episodic_dataset.FewShotSampler", "episodic_miniimagenet.EpisodicMiniImagenet", "miniimagenet.RotatedNonEpisodicMiniImagenetPkl", "episodic_dataset.FewShotSampler", "episodic_miniimagenet.EpisodicMiniImagenetPkl", "cub.NonEpisodicCUB", "cub.RotatedNonEpisodicCUB", "episodic_dataset.FewShotSampler", "episodic_cub.EpisodicCUB", "tiered_imagenet.NonEpisodicTieredImagenet", "tiered_imagenet.RotatedNonEpisodicTieredImagenet", "episodic_dataset.FewShotSampler", "episodic_tiered_imagenet.EpisodicTieredImagenet"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.__init__.get_transformer"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.datasets.__init__.get_transformer": [[89, 144], ["torchvision.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get": [[8, 37], ["BasicMeter.meters.items", "meters.BasicMeter", "BasicMeter.meters[].get_submeter"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get_submeter"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ",", "recursive", "=", "False", ",", "tag", "=", "None", ",", "force", "=", "True", ")", ":", "\n", "        ", "\"\"\" Creates a new meter or returns an already existing one with the given name.\n\n        Args:\n            name: meter name\n\n        Returns: BasicMeter instance\n\n        \"\"\"", "\n", "\n", "if", "name", "not", "in", "BasicMeter", ".", "meters", ":", "\n", "            ", "if", "recursive", ":", "\n", "                ", "for", "supername", ",", "meter", "in", "BasicMeter", ".", "meters", ".", "items", "(", ")", ":", "\n", "                    ", "for", "subname", "in", "meter", ".", "submeters", ":", "\n", "                        ", "if", "\"%s_%s\"", "%", "(", "supername", ",", "subname", ")", "==", "name", ":", "\n", "                            ", "return", "meter", ".", "submeters", "[", "subname", "]", "\n", "", "", "", "", "if", "force", ":", "\n", "                ", "BasicMeter", ".", "meters", "[", "name", "]", "=", "BasicMeter", "(", "name", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ModuleNotFoundError", "\n", "\n", "", "", "if", "tag", "is", "not", "None", ":", "\n", "            ", "if", "force", ":", "\n", "                ", "return", "BasicMeter", ".", "meters", "[", "name", "]", ".", "get_submeter", "(", "tag", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ModuleNotFoundError", "\n", "\n", "", "", "return", "BasicMeter", ".", "meters", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.dict": [[38, 49], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "\n", "\n", "@", "staticmethod", "\n", "def", "dict", "(", ")", ":", "\n", "        ", "\"\"\" Obtain meters in a dictionary\n\n        Returns: dictionary of BasicMeter\n\n        \"\"\"", "\n", "return", "BasicMeter", ".", "meters", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.__init__": [[50, 58], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "name", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        \"\"\"", "\n", "self", ".", "count", "=", "0.", "\n", "self", ".", "total", "=", "0.", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "submeters", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get_submeter": [[59, 64], ["meters.BasicMeter"], "methods", ["None"], ["", "def", "get_submeter", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "not", "in", "self", ".", "submeters", ":", "\n", "            ", "name_", "=", "\"%s_%s\"", "%", "(", "self", ".", "name", ",", "name", ")", "\n", "self", ".", "submeters", "[", "name", "]", "=", "BasicMeter", "(", "name_", ")", "\n", "", "return", "self", ".", "submeters", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update": [[65, 84], ["isinstance", "meters.BasicMeter.get_submeter().update", "meters.BasicMeter.get_submeter"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get_submeter"], ["", "def", "update", "(", "self", ",", "v", ",", "count", ",", "tag", "=", "None", ")", ":", "\n", "        ", "\"\"\" Update meter values\n\n        Args:\n            v: current value\n            count: N if value is the average of N values.\n\n        Returns: self\n\n        \"\"\"", "\n", "self", ".", "count", "+=", "count", "\n", "self", ".", "total", "+=", "v", "\n", "\n", "if", "tag", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "tag", ",", "list", ")", ":", "\n", "                ", "tag", "=", "[", "tag", "]", "\n", "", "for", "t", "in", "tag", ":", "\n", "                ", "self", ".", "get_submeter", "(", "t", ")", ".", "update", "(", "v", ",", "count", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean": [[85, 103], ["meters.BasicMeter.get_submeter().mean", "ret.update", "meters.BasicMeter.get_submeter().mean", "meters.BasicMeter.get_submeter", "meters.BasicMeter.get_submeter"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get_submeter", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get_submeter"], ["", "def", "mean", "(", "self", ",", "tag", "=", "None", ",", "recursive", "=", "False", ")", ":", "\n", "        ", "\"\"\" Computes the mean of the current values\n\n        Returns: mean of the current values (float)\n\n        \"\"\"", "\n", "if", "recursive", ":", "\n", "            ", "try", ":", "\n", "                ", "ret", "=", "{", "self", ".", "name", ":", "self", ".", "total", "/", "self", ".", "count", "}", "\n", "", "except", "ZeroDivisionError", ":", "\n", "                ", "return", "{", "self", ".", "name", ":", "0", "}", "\n", "", "for", "submeter", "in", "self", ".", "submeters", ":", "\n", "                ", "ret", ".", "update", "(", "self", ".", "get_submeter", "(", "submeter", ")", ".", "mean", "(", "recursive", "=", "True", ")", ")", "\n", "", "return", "ret", "\n", "", "if", "tag", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "get_submeter", "(", "tag", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset": [[104, 116], ["meters.BasicMeter.submeters[].reset"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Resets the meter.\n\n        Returns: self\n\n        \"\"\"", "\n", "for", "submeter", "in", "self", ".", "submeters", ":", "\n", "            ", "self", ".", "submeters", "[", "submeter", "]", ".", "reset", "(", ")", "\n", "", "self", ".", "count", "=", "0", "\n", "self", ".", "total", "=", "0", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.plot_episode.plot_episode": [[3, 17], ["episode[].cpu", "episode[].cpu", "sample_set.permute.size", "query_set.permute.size", "pylab.imsave", "pylab.imsave", "sample_set.permute.permute", "query_set.permute.permute"], "function", ["None"], ["def", "plot_episode", "(", "episode", ",", "classes_first", "=", "True", ")", ":", "\n", "    ", "sample_set", "=", "episode", "[", "\"support_set\"", "]", ".", "cpu", "(", ")", "\n", "query_set", "=", "episode", "[", "\"query_set\"", "]", ".", "cpu", "(", ")", "\n", "support_size", "=", "episode", "[", "\"support_size\"", "]", "\n", "query_size", "=", "episode", "[", "\"query_size\"", "]", "\n", "if", "not", "classes_first", ":", "\n", "        ", "sample_set", "=", "sample_set", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "query_set", "=", "query_set", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "", "n", ",", "support_size", ",", "c", ",", "h", ",", "w", "=", "sample_set", ".", "size", "(", ")", "\n", "n", ",", "query_size", ",", "c", ",", "h", ",", "w", "=", "query_set", ".", "size", "(", ")", "\n", "sample_set", "=", "(", "(", "sample_set", "/", "2", "+", "0.5", ")", "*", "255", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ")", ")", ".", "reshape", "(", "(", "n", "*", "h", ",", "support_size", "*", "w", ",", "c", ")", ")", "\n", "pylab", ".", "imsave", "(", "'support_set.png'", ",", "sample_set", ")", "\n", "query_set", "=", "(", "(", "query_set", "/", "2", "+", "0.5", ")", "*", "255", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ")", ")", ".", "reshape", "(", "(", "n", "*", "h", ",", "query_size", "*", "w", ",", "c", ")", ")", "\n", "pylab", ".", "imsave", "(", "'query_set.png'", ",", "query_set", ")", "\n", "# pylab.imshow(query_set)", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.modules.distances._make_aligned_labels": [[4, 8], ["torch.eye", "torch.eye", "identity[].expand().contiguous", "identity[].expand"], "function", ["None"], ["def", "_make_aligned_labels", "(", "inputs", ")", ":", "\n", "    ", "batch", ",", "n_sample_pc", ",", "n_classes", ",", "z_dim", "=", "inputs", ".", "shape", "\n", "identity", "=", "torch", ".", "eye", "(", "n_classes", ",", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "return", "identity", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch", ",", "n_sample_pc", ",", "-", "1", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "", "def", "generalized_pw_sq_dist", "(", "data", ",", "d_type", "=", "\"euclidean\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.modules.distances.generalized_pw_sq_dist": [[8, 21], ["F.normalize.size", "torch.sum", "torch.sum", "numpy.sqrt", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.sqrt", "torch.sqrt", "torch.normalize", "torch.bmm", "torch.bmm", "ValueError", "F.normalize.transpose", "torch.mean", "torch.mean", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["", "def", "generalized_pw_sq_dist", "(", "data", ",", "d_type", "=", "\"euclidean\"", ")", ":", "\n", "    ", "batch", ",", "samples", ",", "z_dim", "=", "data", ".", "size", "(", ")", "\n", "if", "d_type", "==", "\"euclidean\"", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "(", "data", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "data", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "3", ")", "/", "np", ".", "sqrt", "(", "z_dim", ")", "\n", "", "elif", "d_type", "==", "\"l1\"", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "data", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "data", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "3", ")", "\n", "", "elif", "d_type", "==", "\"stable_euclidean\"", ":", "\n", "        ", "return", "torch", ".", "sqrt", "(", "1e-6", "+", "torch", ".", "mean", "(", "(", "data", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "data", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "3", ")", "/", "np", ".", "sqrt", "(", "z_dim", ")", ")", "\n", "", "elif", "d_type", "==", "\"cosine\"", ":", "\n", "        ", "data", "=", "F", ".", "normalize", "(", "data", ",", "dim", "=", "2", ")", "\n", "return", "torch", ".", "bmm", "(", "data", ",", "data", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Distance type not recognized\"", ")", "\n", "", "", "def", "standarized_label_prop", "(", "embeddings", ",", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.modules.distances.standarized_label_prop": [[21, 93], ["distances.generalized_pw_sq_dist", "distances.global_consistency", "torch.exp", "torch.exp", "torch.eye", "torch.eye", "torch.log", "torch.log", "torch.softplus", "torch.softplus", "sq_dist[].std", "torch.sqrt", "torch.sqrt", "torch.linspace", "torch.linspace", "torch.exp", "torch.exp", "F.softmax.size", "sorted[].detach.size", "torch.relu", "torch.log", "torch.log", "torch.sort", "torch.sort", "sorted.size", "sorted[].detach", "torch.linspace.view", "torch.softmax", "torch.median", "torch.median", "generalized_pw_sq_dist.unsqueeze", "torch.softmax", "torch.relu", "torch.relu", "torch.ones", "torch.ones", "generalized_pw_sq_dist.size", "sorted[].detach.view", "torch.relu", "int"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.generalized_pw_sq_dist", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.global_consistency"], ["", "", "def", "standarized_label_prop", "(", "embeddings", ",", "\n", "labels", ",", "\n", "gaussian_scale", "=", "1", ",", "alpha", "=", "0.5", ",", "\n", "weights", "=", "None", ",", "\n", "apply_log", "=", "False", ",", "\n", "scale_bound", "=", "\"\"", ",", "\n", "standarize", "=", "\"all\"", ",", "\n", "kernel", "=", "\"rbf\"", ",", "\n", "square_root", "=", "False", ",", "\n", "norm_prop", "=", "0", ",", "\n", "epsilon", "=", "1e-6", ")", ":", "\n", "    ", "propagator_scale", "=", "gaussian_scale", "\n", "gaussian_scale", "=", "1", "\n", "if", "scale_bound", "==", "\"softplus\"", ":", "\n", "        ", "gaussian_scale", "=", "0.01", "+", "F", ".", "softplus", "(", "gaussian_scale", ")", "\n", "alpha", "=", "0.1", "+", "F", ".", "softplus", "(", "alpha", ")", "\n", "", "elif", "scale_bound", "==", "\"square\"", ":", "\n", "        ", "gaussian_scale", "=", "1e-4", "+", "gaussian_scale", "**", "2", "\n", "alpha", "=", "0.1", "+", "alpha", "**", "2", "\n", "", "elif", "scale_bound", "==", "\"convex_relu\"", ":", "\n", "#gaussian_scale = gaussian_scale ** 2", "\n", "        ", "alpha", "=", "F", ".", "relu", "(", "alpha", ")", "+", "0.1", "\n", "", "elif", "scale_bound", "==", "\"convex_square\"", ":", "\n", "# gaussian_scale = gaussian_scale ** 2", "\n", "        ", "alpha", "=", "0.1", "+", "alpha", "**", "2", "\n", "", "elif", "scale_bound", "==", "\"relu\"", ":", "\n", "        ", "gaussian_scale", "=", "F", ".", "relu", "(", "gaussian_scale", ")", "+", "0.01", "\n", "alpha", "=", "F", ".", "relu", "(", "alpha", ")", "+", "0.1", "\n", "", "elif", "scale_bound", "==", "\"constant\"", ":", "\n", "        ", "gaussian_scale", "=", "1", "\n", "alpha", "=", "1", "\n", "", "elif", "scale_bound", "==", "\"alpha_square\"", ":", "\n", "        ", "alpha", "=", "0.1", "+", "F", ".", "relu", "(", "alpha", ")", "\n", "# Compute the pairwise distance between the examples of the sample and query sets", "\n", "# XXX: labels are set to a constant for the query set", "\n", "", "sq_dist", "=", "generalized_pw_sq_dist", "(", "embeddings", ",", "\"euclidean\"", ")", "\n", "if", "square_root", ":", "\n", "        ", "sq_dist", "=", "(", "sq_dist", "+", "epsilon", ")", ".", "sqrt", "(", ")", "\n", "", "if", "standarize", "==", "\"all\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "0", "\n", "#   sq_dist = sq_dist - sq_dist[mask].mean()", "\n", "sq_dist", "=", "sq_dist", "/", "sq_dist", "[", "mask", "]", ".", "std", "(", ")", "\n", "", "elif", "standarize", "==", "\"median\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "0", "\n", "gaussian_scale", "=", "torch", ".", "sqrt", "(", "\n", "0.5", "*", "torch", ".", "median", "(", "sq_dist", "[", "mask", "]", ")", "/", "torch", ".", "log", "(", "torch", ".", "ones", "(", "1", ",", "device", "=", "sq_dist", ".", "device", ")", "+", "sq_dist", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "standarize", "==", "\"frobenius\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "0", "\n", "sq_dist", "=", "sq_dist", "/", "(", "sq_dist", "[", "mask", "]", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "\n", "", "elif", "standarize", "==", "\"percentile\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "2", "\n", "sorted", ",", "indices", "=", "torch", ".", "sort", "(", "sq_dist", ".", "data", "[", "mask", "]", ")", "\n", "total", "=", "sorted", ".", "size", "(", "0", ")", "\n", "gaussian_scale", "=", "sorted", "[", "int", "(", "total", "*", "0.1", ")", "]", ".", "detach", "(", ")", "\n", "", "if", "kernel", "==", "\"rbf\"", ":", "\n", "        ", "weights", "=", "torch", ".", "exp", "(", "-", "sq_dist", "*", "gaussian_scale", ")", "\n", "", "elif", "kernel", "==", "\"convex_rbf\"", ":", "\n", "        ", "scales", "=", "torch", ".", "linspace", "(", "0.1", ",", "10", ",", "gaussian_scale", ".", "size", "(", "0", ")", ",", "device", "=", "sq_dist", ".", "device", ",", "dtype", "=", "sq_dist", ".", "dtype", ")", "\n", "weights", "=", "torch", ".", "exp", "(", "-", "sq_dist", ".", "unsqueeze", "(", "1", ")", "*", "scales", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "weights", "=", "(", "weights", "*", "F", ".", "softmax", "(", "gaussian_scale", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", "1", ")", "\n", "# checknan(timessoftmax=weights)", "\n", "", "elif", "kernel", "==", "\"euclidean\"", ":", "\n", "# Compute similarity between the examples -- inversely proportional to distance", "\n", "        ", "weights", "=", "1", "/", "(", "gaussian_scale", "+", "sq_dist", ")", "\n", "", "elif", "kernel", "==", "\"softmax\"", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "-", "sq_dist", "/", "gaussian_scale", ",", "-", "1", ")", "\n", "", "mask", "=", "torch", ".", "eye", "(", "weights", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "weights", ".", "device", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "weights", "=", "weights", "*", "(", "~", "mask", ")", ".", "float", "(", ")", "\n", "logits", ",", "propagator", "=", "global_consistency", "(", "weights", ",", "labels", ",", "alpha", "=", "alpha", ",", "norm_prop", "=", "norm_prop", ",", "scale", "=", "propagator_scale", ")", "\n", "if", "apply_log", ":", "\n", "        ", "logits", "=", "torch", ".", "log", "(", "logits", "+", "epsilon", ")", "\n", "", "return", "logits", ",", "propagator", "\n", "", "def", "global_consistency", "(", "weights", ",", "labels", ",", "alpha", "=", "1", ",", "norm_prop", "=", "0", ",", "scale", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.modules.distances.global_consistency": [[93, 119], ["torch.inverse", "torch.inverse", "torch.eye", "torch.eye", "torch.sqrt", "torch.sqrt", "torch.normalize", "distances._propagate", "torch.softmax", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive._propagate"], ["", "def", "global_consistency", "(", "weights", ",", "labels", ",", "alpha", "=", "1", ",", "norm_prop", "=", "0", ",", "scale", "=", "1", ")", ":", "\n", "    ", "\"\"\"Implements D. Zhou et al. \"Learning with local and global consistency\". (Same as in TPN paper but without bug)\n    Args:\n        weights: Tensor of shape (batch, n, n). Expected to be exp( -d^2/s^2 ), where d is the euclidean distance and\n            s the scale parameter.\n        labels: Tensor of shape (batch, n, n_classes)\n        alpha: Scaler, acts as a smoothing factor\n    Returns:\n        Tensor of shape (batch, n, n_classes) representing the logits of each classes\n    \"\"\"", "\n", "n", "=", "weights", ".", "shape", "[", "1", "]", "\n", "identity", "=", "torch", ".", "eye", "(", "n", ",", "dtype", "=", "weights", ".", "dtype", ",", "device", "=", "weights", ".", "device", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "#weights = weights * (1. - identity)  # zero out diagonal", "\n", "isqrt_diag", "=", "1.", "/", "torch", ".", "sqrt", "(", "1e-4", "+", "torch", ".", "sum", "(", "weights", ",", "dim", "=", "2", ")", ")", "\n", "# checknan(laplacian=isqrt_diag)", "\n", "S", "=", "weights", "*", "isqrt_diag", "[", ":", ",", "None", ",", ":", "]", "*", "isqrt_diag", "[", ":", ",", ":", ",", "None", "]", "\n", "# checknan(normalizedlaplacian=S)", "\n", "propagator", "=", "identity", "-", "alpha", "*", "S", "\n", "propagator", "=", "torch", ".", "inverse", "(", "propagator", ")", "\n", "# checknan(propagator=propagator)", "\n", "if", "norm_prop", ">", "0", ":", "\n", "        ", "propagator", "=", "F", ".", "normalize", "(", "propagator", ",", "p", "=", "norm_prop", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "norm_prop", "<", "0", ":", "\n", "        ", "propagator", "=", "F", ".", "softmax", "(", "propagator", ",", "dim", "=", "-", "1", ")", "\n", "", "propagator", "=", "propagator", "*", "scale", "\n", "return", "_propagate", "(", "labels", ",", "propagator", ",", "scaling", "=", "1", ")", ",", "propagator", "\n", "", "def", "_propagate", "(", "labels", ",", "propagator", ",", "scaling", "=", "1.", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.modules.distances._propagate": [[119, 121], ["torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "_propagate", "(", "labels", ",", "propagator", ",", "scaling", "=", "1.", ")", ":", "\n", "    ", "return", "torch", ".", "matmul", "(", "propagator", ",", "labels", ")", "*", "scaling", "\n", "", "def", "prototype_distance", "(", "support_set", ",", "query_set", ",", "labels", ",", "unlabeled_set", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.modules.distances.prototype_distance": [[121, 146], ["query_set.view.size", "support_set.view.size", "support_set.view.view", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.sum", "prototypes.view.view", "query_set.view.view", "int", "labels.view", "numpy.sqrt", "labels.data.max", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "prototype_distance", "(", "support_set", ",", "query_set", ",", "labels", ",", "unlabeled_set", "=", "None", ")", ":", "\n", "  ", "\"\"\"Computes distance from each element of the query set to prototypes in the sample set.\n  Args:\n      sample_set: Tensor of shape (batch, n_classes, n_sample_per_classes, z_dim) containing the representation z of\n          each images.\n      query_set: Tensor of shape (batch, n_classes, n_query_per_classes, z_dim) containing the representation z of\n          each images.\n      unlabeled_set: Tensor of shape (batch, n_classes, n_unlabeled_per_classes, z_dim) containing the representation\n          z of each images.\n  Returns:\n      Tensor of shape (batch, n_total_query, n_classes) containing the similarity between each pair of query,\n      prototypes, for each task.\n  \"\"\"", "\n", "n_queries", ",", "channels", "=", "query_set", ".", "size", "(", ")", "\n", "n_support", ",", "channels", "=", "support_set", ".", "size", "(", ")", "\n", "support_set", "=", "support_set", ".", "view", "(", "n_support", ",", "1", ",", "channels", ")", "\n", "way", "=", "int", "(", "labels", ".", "data", ".", "max", "(", ")", ")", "+", "1", "\n", "one_hot_labels", "=", "torch", ".", "zeros", "(", "n_support", ",", "way", ",", "1", ",", "dtype", "=", "support_set", ".", "dtype", ",", "device", "=", "support_set", ".", "device", ")", "\n", "one_hot_labels", ".", "scatter_", "(", "1", ",", "labels", ".", "view", "(", "n_support", ",", "1", ",", "1", ")", ",", "1", ")", "\n", "total_per_class", "=", "one_hot_labels", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "prototypes", "=", "(", "support_set", "*", "one_hot_labels", ")", ".", "sum", "(", "0", ")", "/", "total_per_class", "\n", "prototypes", "=", "prototypes", ".", "view", "(", "1", ",", "way", ",", "channels", ")", "\n", "query_set", "=", "query_set", ".", "view", "(", "n_queries", ",", "1", ",", "channels", ")", "\n", "d", "=", "query_set", "-", "prototypes", "\n", "return", "-", "torch", ".", "sum", "(", "d", "**", "2", ",", "2", ")", "/", "np", ".", "sqrt", "(", "channels", ")", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.__init__": [[23, 82], ["base_wrapper.BaseWrapper.__init__", "embedding_propagation.EmbeddingPropagation", "embedding_propagation.LabelPropagation", "finetuning.FinetuneWrapper.model.add_classifier", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "finetuning.FinetuneWrapper.model.cuda", "finetuning.FinetuneWrapper.model.add_classifier", "os.listdir", "print", "finetuning.FinetuneWrapper.model.load_state_dict", "finetuning.FinetuneWrapper.model.parameters", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "os.path.join", "os.path.join", "haven.haven_utils.haven_utils.load_json", "os.path.join", "os.path.exists", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "list", "finetuning.FinetuneWrapper.model.load_state_dict", "range", "loaded_exp_dict[].split", "exp_dict[].split", "haven.haven_utils.haven_utils.load_pkl", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.add_classifier", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.add_classifier", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict"], ["def", "__init__", "(", "self", ",", "model", ",", "nclasses", ",", "exp_dict", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            model: architecture to train\n            nclasses: number of output classes\n            exp_dict: reference to dictionary with the hyperparameters\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "exp_dict", "=", "exp_dict", "\n", "self", ".", "ngpu", "=", "self", ".", "exp_dict", "[", "\"ngpu\"", "]", "\n", "\n", "self", ".", "embedding_propagation", "=", "EmbeddingPropagation", "(", ")", "\n", "self", ".", "label_propagation", "=", "LabelPropagation", "(", ")", "\n", "self", ".", "model", ".", "add_classifier", "(", "nclasses", ",", "modalities", "=", "0", ")", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "\n", "if", "self", ".", "exp_dict", "[", "\"rotation_weight\"", "]", ">", "0", ":", "\n", "            ", "self", ".", "model", ".", "add_classifier", "(", "4", ",", "\"classifier_rot\"", ")", "\n", "\n", "", "best_accuracy", "=", "-", "1", "\n", "if", "self", ".", "exp_dict", "[", "\"pretrained_weights_root\"", "]", "is", "not", "None", ":", "\n", "            ", "for", "exp_hash", "in", "os", ".", "listdir", "(", "self", ".", "exp_dict", "[", "'pretrained_weights_root'", "]", ")", ":", "\n", "                ", "base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dict", "[", "'pretrained_weights_root'", "]", ",", "exp_hash", ")", "\n", "exp_dict_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'exp_dict.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "exp_dict_path", ")", ":", "\n", "                    ", "continue", "\n", "", "loaded_exp_dict", "=", "haven", ".", "load_json", "(", "exp_dict_path", ")", "\n", "pkl_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'score_list_best.pkl'", ")", "\n", "if", "(", "loaded_exp_dict", "[", "\"model\"", "]", "[", "\"name\"", "]", "==", "'pretraining'", "and", "\n", "loaded_exp_dict", "[", "\"dataset_train\"", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "==", "exp_dict", "[", "\"dataset_train\"", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "and", "\n", "loaded_exp_dict", "[", "\"model\"", "]", "[", "\"backbone\"", "]", "==", "exp_dict", "[", "'model'", "]", "[", "\"backbone\"", "]", "and", "\n", "# loaded_exp_dict[\"labelprop_alpha\"] == exp_dict[\"labelprop_alpha\"] and", "\n", "# loaded_exp_dict[\"labelprop_scale\"] == exp_dict[\"labelprop_scale\"] and", "\n", "os", ".", "path", ".", "exists", "(", "pkl_path", ")", ")", ":", "\n", "                    ", "accuracy", "=", "haven", ".", "load_pkl", "(", "pkl_path", ")", "[", "-", "1", "]", "[", "\"val_accuracy\"", "]", "\n", "try", ":", "\n", "                        ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'checkpoint_best.pth'", ")", ")", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "if", "accuracy", ">", "best_accuracy", ":", "\n", "                            ", "best_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'checkpoint_best.pth'", ")", "\n", "best_accuracy", "=", "accuracy", "\n", "", "", "except", ":", "\n", "                        ", "continue", "\n", "", "", "", "assert", "(", "best_accuracy", ">", "0.1", ")", "\n", "print", "(", "\"Finetuning %s with original accuracy : %f\"", "%", "(", "base_path", ",", "best_accuracy", ")", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "best_path", ")", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "\n", "# Add optimizers here", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "exp_dict", "[", "\"lr\"", "]", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "self", ".", "exp_dict", "[", "\"weight_decay\"", "]", ",", "\n", "nesterov", "=", "True", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "self", ".", "optimizer", ",", "\n", "mode", "=", "\"min\"", "if", "\"loss\"", "in", "self", ".", "exp_dict", "[", "\"target_loss\"", "]", "else", "\"max\"", ",", "\n", "patience", "=", "self", ".", "exp_dict", "[", "\"patience\"", "]", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "if", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "self", ".", "parallel_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "list", "(", "range", "(", "self", ".", "ngpu", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.get_logits": [[83, 115], ["embeddings.view.view.size", "finetuning.FinetuneWrapper.embedding_propagation", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "finetuning.FinetuneWrapper.label_propagation", "[].view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "embeddings.view.view.view", "src.modules.distances.prototype_distance().view", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "src.modules.distances.prototype_distance().view.view", "src.modules.distances.prototype_distance", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "support_embeddings.view", "query_embeddings.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.embedding_propagation", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.label_propagation", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.prototypical.prototype_distance"], ["", "", "def", "get_logits", "(", "self", ",", "embeddings", ",", "support_size", ",", "query_size", ",", "nclasses", ")", ":", "\n", "        ", "\"\"\"Computes the logits from the queries of an episode\n        \n        Args:\n            embeddings (torch.Tensor): episode embeddings\n            support_size (int): size of the support set\n            query_size (int): size of the query set\n            nclasses (int): number of classes\n        \n        Returns:\n            torch.Tensor: logits\n        \"\"\"", "\n", "b", ",", "c", "=", "embeddings", ".", "size", "(", ")", "\n", "\n", "propagator", "=", "None", "\n", "if", "self", ".", "exp_dict", "[", "\"embedding_prop\"", "]", "==", "True", ":", "\n", "            ", "embeddings", "=", "self", ".", "embedding_propagation", "(", "embeddings", ")", "\n", "\n", "", "if", "self", ".", "exp_dict", "[", "\"distance_type\"", "]", "==", "\"labelprop\"", ":", "\n", "            ", "support_labels", "=", "torch", ".", "arange", "(", "nclasses", ",", "device", "=", "embeddings", ".", "device", ")", ".", "view", "(", "1", ",", "nclasses", ")", ".", "repeat", "(", "support_size", ",", "1", ")", ".", "view", "(", "support_size", ",", "nclasses", ")", "\n", "unlabeled_labels", "=", "nclasses", "*", "torch", ".", "ones", "(", "query_size", "*", "nclasses", ",", "dtype", "=", "support_labels", ".", "dtype", ",", "device", "=", "support_labels", ".", "device", ")", ".", "view", "(", "query_size", ",", "nclasses", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "support_labels", ",", "unlabeled_labels", "]", ",", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "logits", "=", "self", ".", "label_propagation", "(", "embeddings", ",", "labels", ",", "nclasses", ")", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "nclasses", ",", "nclasses", ")", "[", "support_size", ":", "(", "support_size", "+", "query_size", ")", ",", "...", "]", ".", "view", "(", "-", "1", ",", "nclasses", ")", "\n", "\n", "", "elif", "self", ".", "exp_dict", "[", "\"distance_tpe\"", "]", "==", "\"prototypical\"", ":", "\n", "            ", "embeddings", "=", "embeddings", ".", "view", "(", "-", "1", ",", "nclasses", ",", "c", ")", "\n", "support_embeddings", "=", "embeddings", "[", ":", "support_size", "]", "\n", "query_embeddings", "=", "embeddings", "[", "support_size", ":", "]", "\n", "logits", "=", "prototype_distance", "(", "(", "support_embeddings", ".", "view", "(", "1", ",", "support_size", ",", "nclasses", ",", "c", ")", ",", "False", ")", ",", "\n", "(", "query_embeddings", ".", "view", "(", "1", ",", "query_size", ",", "nclasses", ",", "c", ")", ",", "False", ")", ")", ".", "view", "(", "query_size", "*", "nclasses", ",", "nclasses", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.train_on_batch": [[116, 154], ["episode[].view().cuda().long", "episode[].view().cuda", "episode[].view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().cuda.view().cuda.view().cuda", "finetuning.FinetuneWrapper.size", "finetuning.FinetuneWrapper.get_logits", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "finetuning.FinetuneWrapper.parallel_model", "finetuning.FinetuneWrapper.model", "torch.cross_entropy", "torch.cross_entropy", "episode[].view().cuda", "episode[].view", "episode[].view", "x.view().cuda.view().cuda.view", "torch.cross_entropy", "torch.cross_entropy", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "finetuning.FinetuneWrapper.model.classifier", "episode[].view().cuda().long.view", "episode[].view", "finetuning.FinetuneWrapper.view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.get_logits"], ["", "def", "train_on_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Computes the loss on an episode\n        \n        Args:\n            batch (dict): Episode dict\n        \n        Returns:\n            tuple: loss and accuracy of the episode \n        \"\"\"", "\n", "episode", "=", "batch", "[", "0", "]", "\n", "nclasses", "=", "episode", "[", "\"nclasses\"", "]", "\n", "support_size", "=", "episode", "[", "\"support_size\"", "]", "\n", "query_size", "=", "episode", "[", "\"query_size\"", "]", "\n", "labels", "=", "episode", "[", "\"targets\"", "]", ".", "view", "(", "support_size", "+", "query_size", ",", "nclasses", ",", "-", "1", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "k", "=", "(", "support_size", "+", "query_size", ")", "\n", "c", "=", "episode", "[", "\"channels\"", "]", "\n", "h", "=", "episode", "[", "\"height\"", "]", "\n", "w", "=", "episode", "[", "\"width\"", "]", "\n", "\n", "tx", "=", "episode", "[", "\"support_set\"", "]", ".", "view", "(", "support_size", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "vx", "=", "episode", "[", "\"query_set\"", "]", ".", "view", "(", "query_size", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "tx", ",", "vx", "]", ",", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "if", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "embeddings", "=", "self", ".", "parallel_model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "self", ".", "model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "", "b", ",", "c", "=", "embeddings", ".", "size", "(", ")", "\n", "\n", "logits", "=", "self", ".", "get_logits", "(", "embeddings", ",", "support_size", ",", "query_size", ",", "nclasses", ")", "\n", "\n", "loss", "=", "0", "\n", "if", "self", ".", "exp_dict", "[", "\"classification_weight\"", "]", ">", "0", ":", "\n", "            ", "loss", "+=", "F", ".", "cross_entropy", "(", "self", ".", "model", ".", "classifier", "(", "embeddings", ".", "view", "(", "b", ",", "c", ")", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "*", "self", ".", "exp_dict", "[", "\"classification_weight\"", "]", "\n", "\n", "", "query_labels", "=", "torch", ".", "arange", "(", "nclasses", ",", "device", "=", "logits", ".", "device", ")", ".", "view", "(", "1", ",", "nclasses", ")", ".", "repeat", "(", "query_size", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "+=", "F", ".", "cross_entropy", "(", "logits", ",", "query_labels", ")", "*", "self", ".", "exp_dict", "[", "\"few_shot_weight\"", "]", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.predict_on_batch": [[155, 183], ["batch[].view().cuda", "batch[].view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().cuda.view().cuda.view().cuda", "finetuning.FinetuneWrapper.get_logits", "finetuning.FinetuneWrapper.parallel_model", "finetuning.FinetuneWrapper.model", "batch[].view", "batch[].view", "x.view().cuda.view().cuda.view"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.get_logits"], ["", "def", "predict_on_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Computes the logits of an episode\n        \n        Args:\n            batch (dict): episode dict\n        \n        Returns:\n            tensor: logits for the queries of the current episode\n        \"\"\"", "\n", "nclasses", "=", "batch", "[", "\"nclasses\"", "]", "\n", "support_size", "=", "batch", "[", "\"support_size\"", "]", "\n", "query_size", "=", "batch", "[", "\"query_size\"", "]", "\n", "k", "=", "(", "support_size", "+", "query_size", ")", "\n", "c", "=", "batch", "[", "\"channels\"", "]", "\n", "h", "=", "batch", "[", "\"height\"", "]", "\n", "w", "=", "batch", "[", "\"width\"", "]", "\n", "\n", "tx", "=", "batch", "[", "\"support_set\"", "]", ".", "view", "(", "support_size", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "vx", "=", "batch", "[", "\"query_set\"", "]", ".", "view", "(", "query_size", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "tx", ",", "vx", "]", ",", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "embeddings", "=", "self", ".", "parallel_model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "self", ".", "model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "\n", "", "return", "self", ".", "get_logits", "(", "embeddings", ",", "support_size", ",", "query_size", ",", "nclasses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.val_on_batch": [[184, 203], ["finetuning.FinetuneWrapper.predict_on_batch", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.cross_entropy", "torch.cross_entropy", "float", "[].eq().float().mean", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "[].eq().float", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "[].eq", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "finetuning.FinetuneWrapper.max"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.predict_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["", "def", "val_on_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Computes the loss and accuracy on a validation batch\n        \n        Args:\n            batch (dict): Episode dict\n        \n        Returns:\n            tuple: loss and accuracy of the episode \n        \"\"\"", "\n", "nclasses", "=", "batch", "[", "\"nclasses\"", "]", "\n", "query_size", "=", "batch", "[", "\"query_size\"", "]", "\n", "\n", "logits", "=", "self", ".", "predict_on_batch", "(", "batch", ")", "\n", "\n", "query_labels", "=", "torch", ".", "arange", "(", "nclasses", ",", "device", "=", "logits", ".", "device", ")", ".", "view", "(", "1", ",", "nclasses", ")", ".", "repeat", "(", "query_size", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "query_labels", ")", "\n", "accuracy", "=", "float", "(", "logits", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "eq", "(", "query_labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "return", "loss", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.train_on_loader": [[204, 225], ["finetuning.FinetuneWrapper.model.train", "src.tools.meters.BasicMeter.get().reset", "finetuning.FinetuneWrapper.optimizer.zero_grad", "enumerate", "src.tools.meters.BasicMeter.get().reset.update", "loss.backward", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get", "finetuning.FinetuneWrapper.train_on_batch", "float", "finetuning.FinetuneWrapper.optimizer.step", "finetuning.FinetuneWrapper.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.train_on_batch"], ["", "def", "train_on_loader", "(", "self", ",", "data_loader", ",", "max_iter", "=", "None", ",", "debug_plot_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterate over the training set\n\n        Args:\n            data_loader: iterable training data loader\n            max_iter: max number of iterations to perform if the end of the dataset is not reached\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "train_loss_meter", "=", "BasicMeter", ".", "get", "(", "\"train_loss\"", ")", ".", "reset", "(", ")", "\n", "# Iterate through tasks, each iteration loads n tasks, with n = number of GPU", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "loss", "=", "self", ".", "train_on_batch", "(", "batch", ")", "/", "self", ".", "exp_dict", "[", "\"tasks_per_batch\"", "]", "\n", "train_loss_meter", ".", "update", "(", "float", "(", "loss", ")", ",", "1", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "(", "(", "batch_idx", "+", "1", ")", "%", "self", ".", "exp_dict", "[", "\"tasks_per_batch\"", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "if", "batch_idx", "+", "1", "==", "max_iter", ":", "\n", "                ", "break", "\n", "", "", "return", "{", "\"train_loss\"", ":", "train_loss_meter", ".", "mean", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.val_on_loader": [[227, 247], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "finetuning.FinetuneWrapper.model.eval", "src.tools.meters.BasicMeter.get().reset", "src.tools.meters.BasicMeter.get().reset", "enumerate", "src.tools.meters.BasicMeter.get().mean", "finetuning.FinetuneWrapper.scheduler.step", "finetuning.FinetuneWrapper.val_on_batch", "src.tools.meters.BasicMeter.get().reset.update", "src.tools.meters.BasicMeter.get().reset.update", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get", "src.tools.meters.BasicMeter.get", "float", "float", "src.tools.meters.BasicMeter.get"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.val_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "val_on_loader", "(", "self", ",", "data_loader", ",", "max_iter", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterate over the validation set\n\n        Args:\n            data_loader: iterable validation data loader\n            max_iter: max number of iterations to perform if the end of the dataset is not reached\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "val_loss_meter", "=", "BasicMeter", ".", "get", "(", "\"val_loss\"", ")", ".", "reset", "(", ")", "\n", "val_accuracy_meter", "=", "BasicMeter", ".", "get", "(", "\"val_accuracy\"", ")", ".", "reset", "(", ")", "\n", "# Iterate through tasks, each iteration loads n tasks, with n = number of GPU", "\n", "for", "batch_idx", ",", "_data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch", "=", "_data", "[", "0", "]", "\n", "loss", ",", "accuracy", "=", "self", ".", "val_on_batch", "(", "batch", ")", "\n", "val_loss_meter", ".", "update", "(", "float", "(", "loss", ")", ",", "1", ")", "\n", "val_accuracy_meter", ".", "update", "(", "float", "(", "accuracy", ")", ",", "1", ")", "\n", "", "loss", "=", "BasicMeter", ".", "get", "(", "self", ".", "exp_dict", "[", "\"target_loss\"", "]", ",", "recursive", "=", "True", ",", "force", "=", "False", ")", ".", "mean", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", "loss", ")", "# update the learning rate monitor", "\n", "return", "{", "\"val_loss\"", ":", "val_loss_meter", ".", "mean", "(", ")", ",", "\"val_accuracy\"", ":", "val_accuracy_meter", ".", "mean", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.test_on_loader": [[248, 273], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "finetuning.FinetuneWrapper.model.eval", "src.tools.meters.BasicMeter.get().reset", "src.tools.meters.BasicMeter.get().reset", "enumerate", "len", "scipy.stats.sem", "finetuning.FinetuneWrapper.val_on_batch", "src.tools.meters.BasicMeter.get().reset.update", "src.tools.meters.BasicMeter.get().reset.update", "test_accuracy.append", "numpy.array", "scipy.stats.t.ppf", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get", "src.tools.meters.BasicMeter.get", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.val_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_on_loader", "(", "self", ",", "data_loader", ",", "max_iter", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterate over the validation set\n\n        Args:\n            data_loader: iterable validation data loader\n            max_iter: max number of iterations to perform if the end of the dataset is not reached\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "test_loss_meter", "=", "BasicMeter", ".", "get", "(", "\"test_loss\"", ")", ".", "reset", "(", ")", "\n", "test_accuracy_meter", "=", "BasicMeter", ".", "get", "(", "\"test_accuracy\"", ")", ".", "reset", "(", ")", "\n", "test_accuracy", "=", "[", "]", "\n", "# Iterate through tasks, each iteration loads n tasks, with n = number of GPU", "\n", "for", "batch_idx", ",", "_data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch", "=", "_data", "[", "0", "]", "\n", "loss", ",", "accuracy", "=", "self", ".", "val_on_batch", "(", "batch", ")", "\n", "test_loss_meter", ".", "update", "(", "float", "(", "loss", ")", ",", "1", ")", "\n", "test_accuracy_meter", ".", "update", "(", "float", "(", "accuracy", ")", ",", "1", ")", "\n", "test_accuracy", ".", "append", "(", "float", "(", "accuracy", ")", ")", "\n", "", "from", "scipy", ".", "stats", "import", "sem", ",", "t", "\n", "confidence", "=", "0.95", "\n", "n", "=", "len", "(", "test_accuracy", ")", "\n", "std_err", "=", "sem", "(", "np", ".", "array", "(", "test_accuracy", ")", ")", "\n", "h", "=", "std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "confidence", ")", "/", "2", ",", "n", "-", "1", ")", "\n", "return", "{", "\"test_loss\"", ":", "test_loss_meter", ".", "mean", "(", ")", ",", "\"test_accuracy\"", ":", "test_accuracy_meter", ".", "mean", "(", ")", ",", "\"test_confidence\"", ":", "h", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.get_state_dict": [[274, 285], ["finetuning.FinetuneWrapper.optimizer.state_dict", "finetuning.FinetuneWrapper.model.state_dict", "finetuning.FinetuneWrapper.scheduler.state_dict"], "methods", ["None"], ["", "def", "get_state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Obtains the state dict of this model including optimizer, scheduler, etc\n        \n        Returns:\n            dict: state dict\n        \"\"\"", "\n", "ret", "=", "{", "}", "\n", "ret", "[", "\"optimizer\"", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "ret", "[", "\"model\"", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "ret", "[", "\"scheduler\"", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.load_state_dict": [[286, 295], ["finetuning.FinetuneWrapper.optimizer.load_state_dict", "finetuning.FinetuneWrapper.model.load_state_dict", "finetuning.FinetuneWrapper.scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the state of the model\n        \n        Args:\n            state_dict (dict): The state to load\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", "[", "\"optimizer\"", "]", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "state_dict", "[", "\"model\"", "]", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "state_dict", "[", "\"scheduler\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.get_lr": [[296, 301], ["enumerate", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "ret", "[", "\"current_lr_%d\"", "%", "i", "]", "=", "float", "(", "param_group", "[", "\"lr\"", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.finetuning.FinetuneWrapper.is_end_of_training": [[302, 305], ["finetuning.FinetuneWrapper.get_lr"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.get_lr"], ["", "def", "is_end_of_training", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "get_lr", "(", ")", "[", "\"current_lr_0\"", "]", "\n", "return", "lr", "<=", "(", "self", ".", "exp_dict", "[", "\"lr\"", "]", "*", "self", ".", "exp_dict", "[", "\"min_lr_decay\"", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.__init__": [[13, 45], ["base_wrapper.BaseWrapper.__init__", "embedding_propagation.EmbeddingPropagation", "embedding_propagation.LabelPropagation", "pretraining.PretrainWrapper.model.add_classifier", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "pretraining.PretrainWrapper.model.cuda", "pretraining.PretrainWrapper.model.add_classifier", "pretraining.PretrainWrapper.model.parameters", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "list", "range"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.add_classifier", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.add_classifier"], ["def", "__init__", "(", "self", ",", "model", ",", "nclasses", ",", "exp_dict", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            model: architecture to train\n            nclasses: number of output classes\n            exp_dict: reference to dictionary with the hyperparameters\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "exp_dict", "=", "exp_dict", "\n", "self", ".", "ngpu", "=", "self", ".", "exp_dict", "[", "\"ngpu\"", "]", "\n", "self", ".", "embedding_propagation", "=", "EmbeddingPropagation", "(", ")", "\n", "self", ".", "label_propagation", "=", "LabelPropagation", "(", ")", "\n", "self", ".", "model", ".", "add_classifier", "(", "nclasses", ",", "modalities", "=", "0", ")", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "\n", "\n", "if", "self", ".", "exp_dict", "[", "\"rotation_weight\"", "]", ">", "0", ":", "\n", "            ", "self", ".", "model", ".", "add_classifier", "(", "4", ",", "\"classifier_rot\"", ")", "\n", "\n", "# Add optimizers here", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "exp_dict", "[", "\"lr\"", "]", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "self", ".", "exp_dict", "[", "\"weight_decay\"", "]", ",", "\n", "nesterov", "=", "True", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "self", ".", "optimizer", ",", "\n", "mode", "=", "\"min\"", "if", "\"loss\"", "in", "self", ".", "exp_dict", "[", "\"target_loss\"", "]", "else", "\"max\"", ",", "\n", "patience", "=", "self", ".", "exp_dict", "[", "\"patience\"", "]", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "if", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "self", ".", "parallel_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "list", "(", "range", "(", "self", ".", "ngpu", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.get_logits": [[46, 77], ["embeddings.view.view.size", "pretraining.PretrainWrapper.embedding_propagation", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "pretraining.PretrainWrapper.label_propagation", "[].view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "embeddings.view.view.view", "src.modules.distances.prototype_distance", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "support_embeddings.view", "query_embeddings.view", "torch.arange().view().repeat().view.view", "torch.arange().view().repeat().view.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "src.modules.distances.prototype_distance.view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.embedding_propagation", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.label_propagation", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.prototypical.prototype_distance"], ["", "", "def", "get_logits", "(", "self", ",", "embeddings", ",", "support_size", ",", "query_size", ",", "nclasses", ")", ":", "\n", "        ", "\"\"\"Computes the logits from the queries of an episode\n        \n        Args:\n            embeddings (torch.Tensor): episode embeddings\n            support_size (int): size of the support set\n            query_size (int): size of the query set\n            nclasses (int): number of classes\n        \n        Returns:\n            torch.Tensor: logits\n        \"\"\"", "\n", "b", ",", "c", "=", "embeddings", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "exp_dict", "[", "\"embedding_prop\"", "]", "==", "True", ":", "\n", "            ", "embeddings", "=", "self", ".", "embedding_propagation", "(", "embeddings", ")", "\n", "", "if", "self", ".", "exp_dict", "[", "\"distance_type\"", "]", "==", "\"labelprop\"", ":", "\n", "            ", "support_labels", "=", "torch", ".", "arange", "(", "nclasses", ",", "device", "=", "embeddings", ".", "device", ")", ".", "view", "(", "1", ",", "nclasses", ")", ".", "repeat", "(", "support_size", ",", "1", ")", ".", "view", "(", "support_size", ",", "nclasses", ")", "\n", "unlabeled_labels", "=", "nclasses", "*", "torch", ".", "ones", "(", "query_size", "*", "nclasses", ",", "dtype", "=", "support_labels", ".", "dtype", ",", "device", "=", "support_labels", ".", "device", ")", ".", "view", "(", "query_size", ",", "nclasses", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "support_labels", ",", "unlabeled_labels", "]", ",", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "logits", "=", "self", ".", "label_propagation", "(", "embeddings", ",", "labels", ",", "nclasses", ")", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "nclasses", ",", "nclasses", ")", "[", "support_size", ":", "(", "support_size", "+", "query_size", ")", ",", "...", "]", ".", "view", "(", "-", "1", ",", "nclasses", ")", "\n", "\n", "", "elif", "self", ".", "exp_dict", "[", "\"distance_type\"", "]", "==", "\"prototypical\"", ":", "\n", "            ", "embeddings", "=", "embeddings", ".", "view", "(", "-", "1", ",", "nclasses", ",", "c", ")", "\n", "support_embeddings", "=", "embeddings", "[", ":", "support_size", "]", "\n", "query_embeddings", "=", "embeddings", "[", "support_size", ":", "]", "\n", "logits", "=", "prototype_distance", "(", "support_embeddings", ".", "view", "(", "-", "1", ",", "c", ")", ",", "\n", "query_embeddings", ".", "view", "(", "-", "1", ",", "c", ")", ",", "\n", "support_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.train_on_batch": [[78, 108], ["y.cuda().view.cuda().view.cuda().view", "r.cuda().view.cuda().view.cuda().view", "x.view().cuda.view().cuda.size", "x.view().cuda.view().cuda.view().cuda", "pretraining.PretrainWrapper.size", "pretraining.PretrainWrapper.model.classifier", "pretraining.PretrainWrapper.parallel_model", "pretraining.PretrainWrapper.model", "pretraining.PretrainWrapper.model.classifier_rot", "pretraining.PretrainWrapper.embedding_propagation", "torch.cross_entropy", "torch.cross_entropy", "y.cuda().view.cuda().view.cuda", "r.cuda().view.cuda().view.cuda", "x.view().cuda.view().cuda.view", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.embedding_propagation.embedding_propagation.embedding_propagation"], ["", "def", "train_on_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Computes the loss of a batch\n        \n        Args:\n            batch (tuple): Inputs and labels\n        \n        Returns:\n            loss: Loss on the batch\n        \"\"\"", "\n", "x", ",", "y", ",", "r", "=", "batch", "\n", "y", "=", "y", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "view", "(", "-", "1", ")", "\n", "r", "=", "r", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "view", "(", "-", "1", ")", "\n", "k", ",", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "n", "*", "k", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "if", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "embeddings", "=", "self", ".", "parallel_model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "self", ".", "model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "", "b", ",", "c", "=", "embeddings", ".", "size", "(", ")", "\n", "\n", "loss", "=", "0", "\n", "if", "self", ".", "exp_dict", "[", "\"rotation_weight\"", "]", ">", "0", ":", "\n", "            ", "rot", "=", "self", ".", "model", ".", "classifier_rot", "(", "embeddings", ")", "\n", "loss", "+=", "F", ".", "cross_entropy", "(", "rot", ",", "r", ")", "*", "self", ".", "exp_dict", "[", "\"rotation_weight\"", "]", "\n", "\n", "", "if", "self", ".", "exp_dict", "[", "\"embedding_prop\"", "]", "==", "True", ":", "\n", "            ", "embeddings", "=", "self", ".", "embedding_propagation", "(", "embeddings", ")", "\n", "", "logits", "=", "self", ".", "model", ".", "classifier", "(", "embeddings", ")", "\n", "loss", "+=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "*", "self", ".", "exp_dict", "[", "\"cross_entropy_weight\"", "]", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.val_on_batch": [[109, 128], ["pretraining.PretrainWrapper.predict_on_batch", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.cross_entropy", "torch.cross_entropy", "float", "[].eq().float().mean", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "[].eq().float", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "[].eq", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "pretraining.PretrainWrapper.max"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.predict_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["", "def", "val_on_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Computes the loss and accuracy on a validation batch\n        \n        Args:\n            batch (dict): Episode dict\n        \n        Returns:\n            tuple: loss and accuracy of the episode \n        \"\"\"", "\n", "nclasses", "=", "batch", "[", "\"nclasses\"", "]", "\n", "query_size", "=", "batch", "[", "\"query_size\"", "]", "\n", "\n", "logits", "=", "self", ".", "predict_on_batch", "(", "batch", ")", "\n", "\n", "query_labels", "=", "torch", ".", "arange", "(", "nclasses", ",", "device", "=", "logits", ".", "device", ")", ".", "view", "(", "1", ",", "nclasses", ")", ".", "repeat", "(", "query_size", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "query_labels", ")", "\n", "accuracy", "=", "float", "(", "logits", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "eq", "(", "query_labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "return", "loss", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.predict_on_batch": [[129, 158], ["batch[].view().cuda", "batch[].view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().cuda.view().cuda.view().cuda", "pretraining.PretrainWrapper.size", "pretraining.PretrainWrapper.get_logits", "pretraining.PretrainWrapper.parallel_model", "pretraining.PretrainWrapper.model", "batch[].view", "batch[].view", "x.view().cuda.view().cuda.view"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.get_logits"], ["", "def", "predict_on_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Computes the logits of an episode\n        \n        Args:\n            batch (dict): episode dict\n        \n        Returns:\n            tensor: logits for the queries of the current episode\n        \"\"\"", "\n", "nclasses", "=", "batch", "[", "\"nclasses\"", "]", "\n", "support_size", "=", "batch", "[", "\"support_size\"", "]", "\n", "query_size", "=", "batch", "[", "\"query_size\"", "]", "\n", "k", "=", "(", "support_size", "+", "query_size", ")", "\n", "c", "=", "batch", "[", "\"channels\"", "]", "\n", "h", "=", "batch", "[", "\"height\"", "]", "\n", "w", "=", "batch", "[", "\"width\"", "]", "\n", "\n", "tx", "=", "batch", "[", "\"support_set\"", "]", ".", "view", "(", "support_size", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "vx", "=", "batch", "[", "\"query_set\"", "]", ".", "view", "(", "query_size", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "tx", ",", "vx", "]", ",", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "embeddings", "=", "self", ".", "parallel_model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "self", ".", "model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "", "b", ",", "c", "=", "embeddings", ".", "size", "(", ")", "\n", "\n", "return", "self", ".", "get_logits", "(", "embeddings", ",", "support_size", ",", "query_size", ",", "nclasses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.train_on_loader": [[159, 181], ["pretraining.PretrainWrapper.model.train", "src.tools.meters.BasicMeter.get().reset", "enumerate", "pretraining.PretrainWrapper.optimizer.zero_grad", "pretraining.PretrainWrapper.train_on_batch", "src.tools.meters.BasicMeter.get().reset.update", "pretraining.PretrainWrapper.backward", "pretraining.PretrainWrapper.optimizer.step", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get", "float"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.train_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get"], ["", "def", "train_on_loader", "(", "self", ",", "data_loader", ",", "max_iter", "=", "None", ",", "debug_plot_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterate over the training set\n        \n        Args:\n            data_loader (torch.utils.data.DataLoader): a pytorch dataloader\n            max_iter (int, optional): Max number of iterations if the end of the dataset is not reached. Defaults to None.\n        \n        Returns:\n            metrics: dictionary with metrics of the training set\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "train_loss_meter", "=", "BasicMeter", ".", "get", "(", "\"train_loss\"", ")", ".", "reset", "(", ")", "\n", "# Iterate through tasks, each iteration loads n tasks, with n = number of GPU", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "train_on_batch", "(", "batch", ")", "\n", "train_loss_meter", ".", "update", "(", "float", "(", "loss", ")", ",", "1", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "+", "1", "==", "max_iter", ":", "\n", "                ", "break", "\n", "", "", "return", "{", "\"train_loss\"", ":", "train_loss_meter", ".", "mean", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.val_on_loader": [[183, 203], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pretraining.PretrainWrapper.model.eval", "src.tools.meters.BasicMeter.get().reset", "src.tools.meters.BasicMeter.get().reset", "enumerate", "src.tools.meters.BasicMeter.get().mean", "pretraining.PretrainWrapper.scheduler.step", "pretraining.PretrainWrapper.val_on_batch", "src.tools.meters.BasicMeter.get().reset.update", "src.tools.meters.BasicMeter.get().reset.update", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get", "src.tools.meters.BasicMeter.get", "float", "float", "src.tools.meters.BasicMeter.get"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.val_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "val_on_loader", "(", "self", ",", "data_loader", ",", "max_iter", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterate over the validation set\n\n        Args:\n            data_loader: iterable validation data loader\n            max_iter: max number of iterations to perform if the end of the dataset is not reached\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "val_loss_meter", "=", "BasicMeter", ".", "get", "(", "\"val_loss\"", ")", ".", "reset", "(", ")", "\n", "val_accuracy_meter", "=", "BasicMeter", ".", "get", "(", "\"val_accuracy\"", ")", ".", "reset", "(", ")", "\n", "# Iterate through tasks, each iteration loads n tasks, with n = number of GPU", "\n", "for", "batch_idx", ",", "_data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch", "=", "_data", "[", "0", "]", "\n", "loss", ",", "accuracy", "=", "self", ".", "val_on_batch", "(", "batch", ")", "\n", "val_loss_meter", ".", "update", "(", "float", "(", "loss", ")", ",", "1", ")", "\n", "val_accuracy_meter", ".", "update", "(", "float", "(", "accuracy", ")", ",", "1", ")", "\n", "", "loss", "=", "BasicMeter", ".", "get", "(", "self", ".", "exp_dict", "[", "\"target_loss\"", "]", ",", "recursive", "=", "True", ",", "force", "=", "False", ")", ".", "mean", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", "loss", ")", "# update the learning rate monitor", "\n", "return", "{", "\"val_loss\"", ":", "val_loss_meter", ".", "mean", "(", ")", ",", "\"val_accuracy\"", ":", "val_accuracy_meter", ".", "mean", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.test_on_loader": [[204, 222], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pretraining.PretrainWrapper.model.eval", "src.tools.meters.BasicMeter.get().reset", "src.tools.meters.BasicMeter.get().reset", "enumerate", "pretraining.PretrainWrapper.val_on_batch", "src.tools.meters.BasicMeter.get().reset.update", "src.tools.meters.BasicMeter.get().reset.update", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get", "src.tools.meters.BasicMeter.get", "float", "float"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.val_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_on_loader", "(", "self", ",", "data_loader", ",", "max_iter", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterate over the validation set\n\n        Args:\n            data_loader: iterable validation data loader\n            max_iter: max number of iterations to perform if the end of the dataset is not reached\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "test_loss_meter", "=", "BasicMeter", ".", "get", "(", "\"test_loss\"", ")", ".", "reset", "(", ")", "\n", "test_accuracy_meter", "=", "BasicMeter", ".", "get", "(", "\"test_accuracy\"", ")", ".", "reset", "(", ")", "\n", "# Iterate through tasks, each iteration loads n tasks, with n = number of GPU", "\n", "for", "batch_idx", ",", "_data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch", "=", "_data", "[", "0", "]", "\n", "loss", ",", "accuracy", "=", "self", ".", "val_on_batch", "(", "batch", ")", "\n", "test_loss_meter", ".", "update", "(", "float", "(", "loss", ")", ",", "1", ")", "\n", "test_accuracy_meter", ".", "update", "(", "float", "(", "accuracy", ")", ",", "1", ")", "\n", "", "return", "{", "\"test_loss\"", ":", "test_loss_meter", ".", "mean", "(", ")", ",", "\"test_accuracy\"", ":", "test_accuracy_meter", ".", "mean", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.get_state_dict": [[223, 234], ["pretraining.PretrainWrapper.optimizer.state_dict", "pretraining.PretrainWrapper.model.state_dict", "pretraining.PretrainWrapper.scheduler.state_dict"], "methods", ["None"], ["", "def", "get_state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Obtains the state dict of this model including optimizer, scheduler, etc\n        \n        Returns:\n            dict: state dict\n        \"\"\"", "\n", "ret", "=", "{", "}", "\n", "ret", "[", "\"optimizer\"", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "ret", "[", "\"model\"", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "ret", "[", "\"scheduler\"", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.load_state_dict": [[235, 244], ["pretraining.PretrainWrapper.optimizer.load_state_dict", "pretraining.PretrainWrapper.model.load_state_dict", "pretraining.PretrainWrapper.scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the state of the model\n        \n        Args:\n            state_dict (dict): The state to load\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", "[", "\"optimizer\"", "]", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "state_dict", "[", "\"model\"", "]", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "state_dict", "[", "\"scheduler\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.get_lr": [[245, 250], ["enumerate", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "ret", "[", "\"current_lr_%d\"", "%", "i", "]", "=", "float", "(", "param_group", "[", "\"lr\"", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.is_end_of_training": [[251, 254], ["pretraining.PretrainWrapper.get_lr"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.get_lr"], ["", "def", "is_end_of_training", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "get_lr", "(", ")", "[", "\"current_lr_0\"", "]", "\n", "return", "lr", "<=", "(", "self", ".", "exp_dict", "[", "\"lr\"", "]", "*", "self", ".", "exp_dict", "[", "\"min_lr_decay\"", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.__init__": [[28, 97], ["base_wrapper.BaseWrapper.__init__", "ssl_wrapper.SSLWrapper.model.add_classifier", "print", "print", "print", "print", "print", "ssl_wrapper.SSLWrapper.model.cuda", "[].replace", "os.listdir", "print", "ssl_wrapper.SSLWrapper.model.load_state_dict", "exp_dict[].split", "os.path.exists", "ValueError", "os.path.join", "os.path.join", "haven.haven_utils.load_json", "os.path.join", "os.path.exists", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "exp_dict[].split", "print", "ssl_wrapper.SSLWrapper.model.load_state_dict", "os.path.join", "print", "loaded_exp_dict[].split", "exp_dict[].split", "haven.haven_utils.load_pkl", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.add_classifier", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict"], ["def", "__init__", "(", "self", ",", "model", ",", "n_classes", ",", "exp_dict", ",", "pretrained_savedir", "=", "None", ",", "savedir_base", "=", "None", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            model: architecture to train\n            exp_dict: reference to dictionary with the global state of the application\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "exp_dict", "=", "exp_dict", "\n", "self", ".", "ngpu", "=", "self", ".", "exp_dict", "[", "\"ngpu\"", "]", "\n", "self", ".", "predict_method", "=", "exp_dict", "[", "'predict_method'", "]", "\n", "\n", "self", ".", "model", ".", "add_classifier", "(", "n_classes", ",", "modalities", "=", "0", ")", "\n", "self", ".", "nclasses", "=", "n_classes", "\n", "\n", "best_accuracy", "=", "-", "1", "\n", "self", ".", "label", "=", "exp_dict", "[", "'model'", "]", "[", "'backbone'", "]", "+", "\"_\"", "+", "exp_dict", "[", "'dataset_test'", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ".", "replace", "(", "'-imagenet'", ",", "''", ")", "\n", "print", "(", "'============='", ")", "\n", "print", "(", "'dataset:'", ",", "exp_dict", "[", "\"dataset_train\"", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "print", "(", "'backbone:'", ",", "exp_dict", "[", "'model'", "]", "[", "\"backbone\"", "]", ")", "\n", "print", "(", "'n_classes:'", ",", "exp_dict", "[", "'n_classes'", "]", ")", "\n", "print", "(", "'support_size_train:'", ",", "exp_dict", "[", "'support_size_train'", "]", ")", "\n", "\n", "if", "pretrained_savedir", "is", "None", ":", "\n", "# find the best checkpoint", "\n", "            ", "savedir_base", "=", "exp_dict", "[", "\"finetuned_weights_root\"", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir_base", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Please set the variable named \\\n                    'finetuned_weights_root' with the path of the folder \\\n                    with the episodic finetuning experiments\"", ")", "\n", "", "for", "exp_hash", "in", "os", ".", "listdir", "(", "savedir_base", ")", ":", "\n", "                ", "base_path", "=", "os", ".", "path", ".", "join", "(", "savedir_base", ",", "exp_hash", ")", "\n", "exp_dict_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'exp_dict.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "exp_dict_path", ")", ":", "\n", "                    ", "continue", "\n", "", "loaded_exp_dict", "=", "hu", ".", "load_json", "(", "exp_dict_path", ")", "\n", "pkl_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'score_list_best.pkl'", ")", "\n", "\n", "if", "exp_dict", "[", "'support_size_train'", "]", "in", "[", "2", ",", "3", ",", "4", "]", ":", "\n", "                    ", "support_size_needed", "=", "1", "\n", "", "else", ":", "\n", "                    ", "support_size_needed", "=", "exp_dict", "[", "'support_size_train'", "]", "\n", "\n", "", "if", "(", "loaded_exp_dict", "[", "\"model\"", "]", "[", "\"name\"", "]", "==", "'finetuning'", "and", "\n", "loaded_exp_dict", "[", "\"dataset_train\"", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "==", "exp_dict", "[", "\"dataset_train\"", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "and", "\n", "loaded_exp_dict", "[", "\"model\"", "]", "[", "\"backbone\"", "]", "==", "exp_dict", "[", "'model'", "]", "[", "\"backbone\"", "]", "and", "\n", "loaded_exp_dict", "[", "'n_classes'", "]", "==", "exp_dict", "[", "\"n_classes\"", "]", "and", "\n", "loaded_exp_dict", "[", "'support_size_train'", "]", "==", "support_size_needed", ",", "\n", "loaded_exp_dict", "[", "\"embedding_prop\"", "]", "==", "exp_dict", "[", "\"embedding_prop\"", "]", ")", ":", "\n", "\n", "                    ", "model_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'checkpoint_best.pth'", ")", "\n", "\n", "try", ":", "\n", "                        ", "print", "(", "\"Attempting to load \"", ",", "model_path", ")", "\n", "accuracy", "=", "hu", ".", "load_pkl", "(", "pkl_path", ")", "[", "-", "1", "]", "[", "\"val_accuracy\"", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "if", "accuracy", ">", "best_accuracy", ":", "\n", "                            ", "best_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'checkpoint_best.pth'", ")", "\n", "best_accuracy", "=", "accuracy", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "print", "(", "e", ")", "\n", "\n", "", "", "", "assert", "(", "best_accuracy", ">", "0.1", ")", "\n", "print", "(", "\"Finetuning %s with original accuracy : %f\"", "%", "(", "base_path", ",", "best_accuracy", ")", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "best_path", ")", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "", "self", ".", "best_accuracy", "=", "best_accuracy", "\n", "self", ".", "acc_sum", "=", "0.0", "\n", "self", ".", "n_count", "=", "0", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.get_embeddings": [[98, 104], ["embeddings.size", "embeddings.view", "embedding_propagation.EmbeddingPropagation"], "methods", ["None"], ["", "def", "get_embeddings", "(", "self", ",", "embeddings", ",", "support_size", ",", "query_size", ",", "nclasses", ")", ":", "\n", "        ", "b", ",", "c", "=", "embeddings", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "exp_dict", "[", "\"embedding_prop\"", "]", "==", "True", ":", "\n", "            ", "embeddings", "=", "EmbeddingPropagation", "(", ")", "(", "embeddings", ")", "\n", "", "return", "embeddings", ".", "view", "(", "b", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.get_episode_dict": [[105, 155], ["batch[].view().cuda", "batch[].view().cuda", "batch[].view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().cuda.view().cuda.view().cuda", "ssl_wrapper.SSLWrapper.get_embeddings", "numpy.unique", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "episode_dict.items", "ssl_wrapper.SSLWrapper.parallel_model", "ssl_wrapper.SSLWrapper.model", "[].cpu().numpy", "batch[].view", "batch[].view", "batch[].view", "x.view().cuda.view().cuda.view", "[].cpu().numpy().astype", "[].cpu", "[].cpu().numpy", "[].cpu"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.get_embeddings"], ["", "def", "get_episode_dict", "(", "self", ",", "batch", ")", ":", "\n", "        ", "nclasses", "=", "batch", "[", "\"nclasses\"", "]", "\n", "support_size", "=", "batch", "[", "\"support_size\"", "]", "\n", "query_size", "=", "batch", "[", "\"query_size\"", "]", "\n", "k", "=", "(", "support_size", "+", "query_size", ")", "\n", "c", "=", "batch", "[", "\"channels\"", "]", "\n", "h", "=", "batch", "[", "\"height\"", "]", "\n", "w", "=", "batch", "[", "\"width\"", "]", "\n", "\n", "tx", "=", "batch", "[", "\"support_set\"", "]", ".", "view", "(", "support_size", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "vx", "=", "batch", "[", "\"query_set\"", "]", ".", "view", "(", "query_size", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "ux", "=", "batch", "[", "\"unlabeled_set\"", "]", ".", "view", "(", "batch", "[", "\"unlabeled_size\"", "]", ",", "nclasses", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "tx", ",", "vx", ",", "ux", "]", ",", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "features", "=", "self", ".", "parallel_model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "model", "(", "x", ",", "is_support", "=", "True", ")", "\n", "\n", "", "embeddings", "=", "self", ".", "get_embeddings", "(", "features", ",", "\n", "support_size", ",", "\n", "query_size", "+", "\n", "batch", "[", "'unlabeled_size'", "]", ",", "\n", "nclasses", ")", "# (b, channels)", "\n", "\n", "uniques", "=", "np", ".", "unique", "(", "batch", "[", "'targets'", "]", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "batch", "[", "'targets'", "]", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", ",", "u", "in", "enumerate", "(", "uniques", ")", ":", "\n", "            ", "labels", "[", "batch", "[", "'targets'", "]", "==", "u", "]", "=", "i", "\n", "\n", "## perform ssl", "\n", "# 1. indices", "\n", "", "episode_dict", "=", "{", "}", "\n", "ns", "=", "support_size", "*", "nclasses", "\n", "nq", "=", "query_size", "*", "nclasses", "\n", "episode_dict", "[", "\"support\"", "]", "=", "{", "'samples'", ":", "embeddings", "[", ":", "ns", "]", ",", "\n", "'labels'", ":", "labels", "[", ":", "ns", "]", "}", "\n", "episode_dict", "[", "\"query\"", "]", "=", "{", "'samples'", ":", "embeddings", "[", "ns", ":", "ns", "+", "nq", "]", ",", "\n", "'labels'", ":", "labels", "[", "ns", ":", "ns", "+", "nq", "]", "}", "\n", "episode_dict", "[", "\"unlabeled\"", "]", "=", "{", "'samples'", ":", "embeddings", "[", "ns", "+", "nq", ":", "]", "}", "\n", "# batch[\"support_so_far\"] = {'samples':embeddings, ", "\n", "#                            'labels':labels}", "\n", "\n", "\n", "for", "k", ",", "v", "in", "episode_dict", ".", "items", "(", ")", ":", "\n", "            ", "episode_dict", "[", "k", "]", "[", "'samples'", "]", "=", "episode_dict", "[", "k", "]", "[", "'samples'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "'labels'", "in", "episode_dict", "[", "k", "]", ":", "\n", "                ", "episode_dict", "[", "k", "]", "[", "'labels'", "]", "=", "episode_dict", "[", "k", "]", "[", "'labels'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "", "", "return", "episode_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.predict_on_batch": [[156, 165], ["base_ssl.selection_methods.get_indices", "ssl_wrapper.update_episode_dict", "base_ssl.predict_methods.get_predictions"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.selection_methods.__init__.get_indices", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.update_episode_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.__init__.get_predictions"], ["", "def", "predict_on_batch", "(", "self", ",", "episode_dict", ",", "support_size_max", "=", "None", ")", ":", "\n", "        ", "ind_selected", "=", "sm", ".", "get_indices", "(", "selection_method", "=", "\"ssl\"", ",", "\n", "episode_dict", "=", "episode_dict", ",", "\n", "support_size_max", "=", "support_size_max", ")", "\n", "episode_dict", "=", "update_episode_dict", "(", "ind_selected", ",", "episode_dict", ")", "\n", "pred_labels", "=", "pm", ".", "get_predictions", "(", "predict_method", "=", "self", ".", "predict_method", ",", "\n", "episode_dict", "=", "episode_dict", ")", "\n", "\n", "return", "pred_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.val_on_batch": [[166, 188], ["copy.deepcopy", "ssl_wrapper.SSLWrapper.predict_on_batch", "base_ssl.oracle.compute_acc", "ssl_wrapper.SSLWrapper.exp_dict.get", "ssl_wrapper.SSLWrapper.sampler.sample_episode", "ssl_wrapper.SSLWrapper.get_episode_dict", "int", "ssl_wrapper.SSLWrapper.exp_dict.get"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.predict_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.compute_acc", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler.sample_episode", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.get_episode_dict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get"], ["", "def", "val_on_batch", "(", "self", ",", "batch", ")", ":", "\n", "# if self.exp_dict['ora']", "\n", "        ", "if", "self", ".", "exp_dict", ".", "get", "(", "\"pretrained_weights_root\"", ")", "==", "'hdf5'", ":", "\n", "            ", "episode_dict", "=", "self", ".", "sampler", ".", "sample_episode", "(", "int", "(", "self", ".", "exp_dict", "[", "'support_size_test'", "]", ")", ",", "\n", "self", ".", "exp_dict", "[", "'query_size_test'", "]", ",", "\n", "self", ".", "exp_dict", "[", "'unlabeled_size_test'", "]", ",", "\n", "apply_ten_flag", "=", "self", ".", "exp_dict", ".", "get", "(", "\"apply_ten_flag\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "episode_dict", "=", "self", ".", "get_episode_dict", "(", "batch", ")", "\n", "", "episode_dict", "[", "\"support_so_far\"", "]", "=", "copy", ".", "deepcopy", "(", "episode_dict", "[", "\"support\"", "]", ")", "\n", "episode_dict", "[", "\"n_classes\"", "]", "=", "5", "\n", "\n", "pred_labels", "=", "self", ".", "predict_on_batch", "(", "episode_dict", ",", "support_size_max", "=", "self", ".", "exp_dict", "[", "'unlabeled_size_test'", "]", "*", "self", ".", "exp_dict", "[", "'classes_test'", "]", ")", "\n", "accuracy", "=", "oracle", ".", "compute_acc", "(", "pred_labels", "=", "pred_labels", ",", "\n", "true_labels", "=", "episode_dict", "[", "\"query\"", "]", "[", "\"labels\"", "]", ")", "\n", "\n", "# query_labels = episode_dict[\"query\"][\"labels\"]", "\n", "# accuracy = float((pred_labels == query_labels.cuda()).float().mean())", "\n", "\n", "self", ".", "acc_sum", "+=", "accuracy", "\n", "self", ".", "n_count", "+=", "1", "\n", "return", "-", "1", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.test_on_loader": [[189, 227], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ssl_wrapper.SSLWrapper.model.eval", "src.tools.meters.BasicMeter.get().reset", "len", "scipy.stats.sem", "tqdm.tqdm", "numpy.array", "scipy.stats.t.ppf", "src.tools.meters.BasicMeter.get().reset.mean", "src.tools.meters.BasicMeter.get", "ssl_wrapper.SSLWrapper.val_on_batch", "src.tools.meters.BasicMeter.get().reset.update", "test_accuracy.append", "pbar.update", "pbar.set_description", "len", "float", "float", "src.tools.meters.BasicMeter.get().reset.mean"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.reset", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.get", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.val_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_on_loader", "(", "self", ",", "data_loader", ",", "max_iter", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterate over the validation set\n\n        Args:\n            data_loader: iterable validation data loader\n            max_iter: max number of iterations to perform if the end of the dataset is not reached\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "test_accuracy_meter", "=", "BasicMeter", ".", "get", "(", "\"test_accuracy\"", ")", ".", "reset", "(", ")", "\n", "test_accuracy", "=", "[", "]", "\n", "# Iterate through tasks, each iteration loads n tasks, with n = number of GPU", "\n", "# dirname = os.path.split(self.exp_dict[\"pretrained_weights_root\"])[-1]", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "data_loader", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "batch_all", "in", "data_loader", ":", "\n", "                ", "batch", "=", "batch_all", "[", "0", "]", "\n", "loss", ",", "accuracy", "=", "self", ".", "val_on_batch", "(", "batch", ")", "\n", "\n", "test_accuracy_meter", ".", "update", "(", "float", "(", "accuracy", ")", ",", "1", ")", "\n", "test_accuracy", ".", "append", "(", "float", "(", "accuracy", ")", ")", "\n", "\n", "string", "=", "(", "\"'%s'  -  ssl: %.3f\"", "%", "\n", "(", "self", ".", "label", ",", "\n", "# dirname, ", "\n", "test_accuracy_meter", ".", "mean", "(", ")", ")", ")", "\n", "# print(string)", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "pbar", ".", "set_description", "(", "string", ")", "\n", "\n", "", "", "confidence", "=", "0.95", "\n", "n", "=", "len", "(", "test_accuracy", ")", "\n", "std_err", "=", "sem", "(", "np", ".", "array", "(", "test_accuracy", ")", ")", "\n", "h", "=", "std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "confidence", ")", "/", "2", ",", "n", "-", "1", ")", "\n", "return", "{", "\"test_loss\"", ":", "-", "1", ",", "\n", "\"ssl_accuracy\"", ":", "test_accuracy_meter", ".", "mean", "(", ")", ",", "\n", "\"ssl_confidence\"", ":", "h", ",", "\n", "'finetuned_accuracy'", ":", "self", ".", "best_accuracy", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.update_episode_dict": [[228, 249], ["episode_dict[].items", "numpy.setdiff1d", "episode_dict[].items", "numpy.concatenate", "numpy.arange"], "function", ["None"], ["", "", "def", "update_episode_dict", "(", "ind", ",", "episode_dict", ")", ":", "\n", "# 1. update supports so far", "\n", "    ", "selected_samples", "=", "episode_dict", "[", "\"unlabeled\"", "]", "[", "\"samples\"", "]", "[", "ind", "]", "\n", "selected_labels", "=", "episode_dict", "[", "\"unlabeled\"", "]", "[", "\"labels\"", "]", "[", "ind", "]", "\n", "\n", "selected_support_dict", "=", "{", "\"samples\"", ":", "selected_samples", ",", "\"labels\"", ":", "selected_labels", "}", "\n", "\n", "for", "k", ",", "v", "in", "episode_dict", "[", "\"support_so_far\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "episode_dict", "[", "\"support_so_far\"", "]", "[", "k", "]", "=", "np", ".", "concatenate", "(", "[", "v", ",", "selected_support_dict", "[", "k", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# 2. update unlabeled samples", "\n", "", "n_unlabeled", "=", "episode_dict", "[", "\"unlabeled\"", "]", "[", "\"samples\"", "]", ".", "shape", "[", "0", "]", "\n", "ind_rest", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "n_unlabeled", ")", ",", "ind", ")", "\n", "\n", "new_unlabeled_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "episode_dict", "[", "\"unlabeled\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "new_unlabeled_dict", "[", "k", "]", "=", "v", "[", "ind_rest", "]", "\n", "\n", "", "episode_dict", "[", "\"unlabeled\"", "]", "=", "new_unlabeled_dict", "\n", "\n", "return", "episode_dict", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.get_state_dict": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "get_state_dict", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict": [[7, 9], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.TrainMonitor.__init__": [[108, 111], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.TrainMonitor.add": [[112, 119], ["score_dict.items"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.TrainMonitor.get_avg_score": [[120, 122], ["__init__.TrainMonitor.score_dict_sum.items"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.get_model": [[9, 35], ["pretraining.PretrainWrapper", "os.path.join", "print", "print", "ssl_wrapper.SSLWrapper.model.load_state_dict", "finetuning.FinetuneWrapper", "os.path.dirname", "os.path.exists", "os.path.join", "ssl_wrapper.SSLWrapper", "ValueError", "torch.load", "os.path.split", "os.path.dirname", "hu.load_pkl"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.base_wrapper.BaseWrapper.load_state_dict"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.train_on_loader": [[38, 54], ["model.train", "len", "__init__.TrainMonitor", "range", "__init__.TrainMonitor.get_avg_score", "enumerate", "model.train_on_batch", "__init__.TrainMonitor.add", "print", "__init__.TrainMonitor.get_avg_score"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.TrainMonitor.get_avg_score", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.pretraining.PretrainWrapper.train_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.TrainMonitor.add", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.TrainMonitor.get_avg_score"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.val_on_loader": [[55, 71], ["model.eval", "len", "enumerate", "val_monitor.get_avg_score", "model.val_on_batch", "val_monitor.add", "print", "val_monitor.get_avg_score"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.TrainMonitor.get_avg_score", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.ssl_wrapper.SSLWrapper.val_on_batch", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.TrainMonitor.add", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.TrainMonitor.get_avg_score"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.vis_on_loader": [[73, 82], ["torch.no_grad", "model.eval", "len", "enumerate", "print", "model.vis_on_batch", "savedir.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.models.__init__.test_on_loader": [[84, 105], ["model.eval", "len", "tqdm.tqdm", "enumerate", "tqdm.tqdm.close", "print", "model.predict", "abs().sum", "tqdm.tqdm.set_description", "tqdm.tqdm.update", "abs", "batch[].cpu().numpy().ravel", "model.predict.ravel", "batch[].cpu().numpy", "batch[].cpu"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.selection_methods.ssl.predict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.update"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.resnet12.Block.__init__": [[7, 18], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ni", ",", "no", ",", "stride", ",", "dropout", "=", "0", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout2d", "(", "dropout", ")", "if", "dropout", ">", "0", "else", "lambda", "x", ":", "x", "\n", "self", ".", "conv0", "=", "torch", ".", "nn", ".", "Conv2d", "(", "ni", ",", "no", ",", "3", ",", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn0", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "no", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "no", ",", "no", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "no", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "no", ",", "no", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "no", ")", "\n", "if", "stride", "==", "2", "or", "ni", "!=", "no", ":", "\n", "            ", "self", ".", "shortcut", "=", "torch", ".", "nn", ".", "Conv2d", "(", "ni", ",", "no", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.resnet12.Block.get_parameters": [[19, 21], ["resnet12.Block.parameters"], "methods", ["None"], ["", "", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.resnet12.Block.forward": [[22, 29], ["torch.relu", "torch.relu", "resnet12.Block.dropout", "torch.relu", "torch.relu", "resnet12.Block.dropout", "resnet12.Block.bn2", "torch.relu", "torch.relu", "resnet12.Block.bn0", "resnet12.Block.bn1", "resnet12.Block.conv2", "resnet12.Block.conv0", "resnet12.Block.conv1", "resnet12.Block.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_support", "=", "True", ")", ":", "\n", "        ", "y", "=", "F", ".", "relu", "(", "self", ".", "bn0", "(", "self", ".", "conv0", "(", "x", ")", ")", ",", "True", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y", ")", ")", ",", "True", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "y", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", "\n", "return", "F", ".", "relu", "(", "y", "+", "self", ".", "shortcut", "(", "x", ")", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.resnet12.Resnet12.__init__": [[32, 44], ["super().__init__", "resnet12.Resnet12.widths.append", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "range", "len", "setattr", "int", "resnet12.Block"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "dropout", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "512", "\n", "assert", "(", "width", "==", "1", ")", "# Comment for different variants of this model", "\n", "self", ".", "widths", "=", "[", "x", "*", "int", "(", "width", ")", "for", "x", "in", "[", "64", ",", "128", ",", "256", "]", "]", "\n", "self", ".", "widths", ".", "append", "(", "self", ".", "output_size", "*", "width", ")", "\n", "self", ".", "bn_out", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "output_size", ")", "\n", "\n", "start_width", "=", "3", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "widths", ")", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "\"group_%d\"", "%", "i", ",", "Block", "(", "start_width", ",", "self", ".", "widths", "[", "i", "]", ",", "1", ",", "dropout", ")", ")", "\n", "start_width", "=", "self", ".", "widths", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.resnet12.Resnet12.add_classifier": [[45, 47], ["setattr", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["None"], ["", "", "def", "add_classifier", "(", "self", ",", "nclasses", ",", "name", "=", "\"classifier\"", ",", "modalities", "=", "None", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "name", ",", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "output_size", ",", "nclasses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.resnet12.Resnet12.up_to_embedding": [[48, 60], ["range", "len", "torch.max_pool2d", "torch.max_pool2d", "getattr"], "methods", ["None"], ["", "def", "up_to_embedding", "(", "self", ",", "x", ",", "is_support", ")", ":", "\n", "        ", "\"\"\" Applies the four residual groups\n        Args:\n            x: input images\n            n: number of few-shot classes\n            k: number of images per few-shot class\n            is_support: whether the input is the support set (for non-transductive)\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "widths", ")", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "\"group_%d\"", "%", "i", ")", "(", "x", ",", "is_support", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "3", ",", "2", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.resnet12.Resnet12.forward": [[61, 74], ["resnet12.Resnet12.size", "resnet12.Resnet12.view", "resnet12.Resnet12.up_to_embedding", "torch.relu", "torch.relu", "resnet12.Resnet12.bn_out", "resnet12.Resnet12.mean().mean", "resnet12.Resnet12.mean"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.resnet12.Resnet12.up_to_embedding", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_support", ")", ":", "\n", "        ", "\"\"\"Main Pytorch forward function\n\n        Returns: class logits\n\n        Args:\n            x: input mages\n            is_support: whether the input is the sample set\n        \"\"\"", "\n", "*", "args", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "x", "=", "self", ".", "up_to_embedding", "(", "x", ",", "is_support", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn_out", "(", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", ")", ",", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.conv4.Conv4.__init__": [[7, 22], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "exp_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv0", "=", "torch", ".", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn0", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "exp_dict", "=", "exp_dict", "\n", "if", "self", ".", "exp_dict", "[", "\"avgpool\"", "]", "==", "True", ":", "\n", "            ", "self", ".", "output_size", "=", "64", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_size", "=", "1600", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.conv4.Conv4.add_classifier": [[23, 25], ["setattr", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["None"], ["", "", "def", "add_classifier", "(", "self", ",", "no", ",", "name", "=", "\"classifier\"", ",", "modalities", "=", "None", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "name", ",", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "output_size", ",", "no", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.conv4.Conv4.forward": [[26, 44], ["x.mean().mean.mean().mean.size", "x.mean().mean.mean().mean.view", "conv4.Conv4.conv0", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "conv4.Conv4.conv1", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "conv4.Conv4.conv2", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "conv4.Conv4.conv3", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "x.mean().mean.mean().mean.view", "conv4.Conv4.bn0", "conv4.Conv4.bn1", "conv4.Conv4.bn2", "conv4.Conv4.bn3", "x.mean().mean.mean().mean.mean().mean", "x.mean().mean.mean().mean.mean"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "dim", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "x", "=", "self", ".", "conv0", "(", "x", ")", "# 84", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn0", "(", "x", ")", ",", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ",", "0", ")", "# 84 -> 42", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ",", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ",", "0", ")", "# 42 -> 21", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "x", ")", ",", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ",", "0", ")", "# 21 -> 10", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "x", ")", ",", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ",", "0", ")", "# 21 -> 5", "\n", "if", "self", ".", "exp_dict", "[", "\"avgpool\"", "]", "==", "True", ":", "\n", "            ", "x", "=", "x", ".", "mean", "(", "3", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", "\n", "", "return", "x", ".", "view", "(", "*", "dim", ",", "self", ".", "output_size", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.__init__.get_backbone": [[4, 13], ["resnet12.Resnet12", "conv4.Conv4", "wrn.WideResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.Block.__init__": [[8, 24], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ni", ",", "no", ",", "stride", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv0", "=", "torch", ".", "nn", ".", "Conv2d", "(", "ni", ",", "no", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn0", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "no", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "conv0", ".", "weight", ".", "data", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "no", ")", "\n", "if", "dropout", "==", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout2d", "(", "dropout", ")", "\n", "", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "no", ",", "no", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "conv1", ".", "weight", ".", "data", ")", "\n", "self", ".", "reduce", "=", "ni", "!=", "no", "\n", "if", "self", ".", "reduce", ":", "\n", "            ", "self", ".", "conv_reduce", "=", "torch", ".", "nn", ".", "Conv2d", "(", "ni", ",", "no", ",", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "conv_reduce", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.Block.forward": [[25, 35], ["wrn.Block.conv0", "torch.relu", "torch.relu", "wrn.Block.dropout", "wrn.Block.conv1", "wrn.Block.bn1", "wrn.Block.bn0", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wrn.Block.conv_reduce"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv0", "(", "x", ")", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "bn0", "(", "y", ")", ",", "inplace", "=", "True", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "y", "=", "self", ".", "conv1", "(", "y", ")", "\n", "y", "=", "self", ".", "bn1", "(", "y", ")", "\n", "if", "self", ".", "reduce", ":", "\n", "            ", "return", "F", ".", "relu", "(", "y", "+", "self", ".", "conv_reduce", "(", "x", ")", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "relu", "(", "y", "+", "x", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.Group.__init__": [[38, 43], ["super().__init__", "range", "wrn.Group.__setattr__", "wrn.Block"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ni", ",", "no", ",", "n", ",", "stride", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n", "=", "n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "\"block_%d\"", "%", "i", ",", "Block", "(", "ni", "if", "i", "==", "0", "else", "no", ",", "no", ",", "stride", "if", "i", "==", "0", "else", "1", ",", "dropout", "=", "dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.Group.forward": [[44, 48], ["range", "wrn.Group.__getattr__"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "x", "=", "self", ".", "__getattr__", "(", "\"block_%d\"", "%", "i", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.__init__": [[51, 64], ["super().__init__", "torch.Tensor().mul().int().numpy().tolist", "torch.Tensor().mul().int().numpy().tolist", "torch.Tensor().mul().int().numpy().tolist", "torch.Tensor().mul().int().numpy().tolist", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "wrn.Group", "wrn.Group", "wrn.Group", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.Tensor().mul().int().numpy", "torch.Tensor().mul().int().numpy", "torch.Tensor().mul().int().numpy", "torch.Tensor().mul().int().numpy", "torch.Tensor().mul().int", "torch.Tensor().mul().int", "torch.Tensor().mul().int", "torch.Tensor().mul().int", "torch.Tensor().mul", "torch.Tensor().mul", "torch.Tensor().mul", "torch.Tensor().mul", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "width", ",", "exp_dict", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ",", "'depth should be 6n+4'", "\n", "self", ".", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "self", ".", "output_size", "=", "640", "\n", "self", ".", "widths", "=", "torch", ".", "Tensor", "(", "[", "16", ",", "32", ",", "64", "]", ")", ".", "mul", "(", "width", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "self", ".", "conv0", "=", "torch", ".", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "widths", "[", "0", "]", "//", "2", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_0", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "self", ".", "widths", "[", "0", "]", "//", "2", ")", "\n", "self", ".", "dropout_prob", "=", "exp_dict", "[", "\"dropout\"", "]", "\n", "self", ".", "group_0", "=", "Group", "(", "self", ".", "widths", "[", "0", "]", "//", "2", ",", "self", ".", "widths", "[", "0", "]", ",", "self", ".", "n", ",", "2", ",", "dropout", "=", "self", ".", "dropout_prob", ")", "\n", "self", ".", "group_1", "=", "Group", "(", "self", ".", "widths", "[", "0", "]", ",", "self", ".", "widths", "[", "1", "]", ",", "self", ".", "n", ",", "2", ",", "dropout", "=", "self", ".", "dropout_prob", ")", "\n", "self", ".", "group_2", "=", "Group", "(", "self", ".", "widths", "[", "1", "]", ",", "self", ".", "widths", "[", "2", "]", ",", "self", ".", "n", ",", "2", ",", "dropout", "=", "self", ".", "dropout_prob", ")", "\n", "self", ".", "bn_out", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.get_base_parameters": [[65, 75], ["list", "list", "list", "list", "list", "wrn.WideResNet.conv0.parameters", "wrn.WideResNet.group_0.parameters", "wrn.WideResNet.group_1.parameters", "wrn.WideResNet.group_2.parameters", "wrn.WideResNet.bn.parameters", "list"], "methods", ["None"], ["", "def", "get_base_parameters", "(", "self", ")", ":", "\n", "        ", "parameters", "=", "[", "]", "\n", "parameters", "+=", "list", "(", "self", ".", "conv0", ".", "parameters", "(", ")", ")", "\n", "parameters", "+=", "list", "(", "self", ".", "group_0", ".", "parameters", "(", ")", ")", "\n", "parameters", "+=", "list", "(", "self", ".", "group_1", ".", "parameters", "(", ")", ")", "\n", "parameters", "+=", "list", "(", "self", ".", "group_2", ".", "parameters", "(", ")", ")", "\n", "parameters", "+=", "list", "(", "self", ".", "bn", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "embedding", ":", "\n", "            ", "parameters", "+=", "list", "(", "self", ".", "conv_embed", ")", "\n", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.get_classifier_parameters": [[76, 78], ["wrn.WideResNet.classifier.parameters"], "methods", ["None"], ["", "def", "get_classifier_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "classifier", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.add_classifier": [[79, 81], ["setattr", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["None"], ["", "def", "add_classifier", "(", "self", ",", "nclasses", ",", "name", "=", "\"classifier\"", ",", "modalities", "=", "None", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "name", ",", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "output_size", ",", "nclasses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.backbones.wrn.WideResNet.forward": [[82, 90], ["torch.relu", "torch.relu", "wrn.WideResNet.group_0", "wrn.WideResNet.group_1", "wrn.WideResNet.group_2", "torch.relu.mean().mean", "torch.relu", "torch.relu", "wrn.WideResNet.bn_0", "wrn.WideResNet.bn_out", "wrn.WideResNet.conv0", "torch.relu.mean", "torch.relu.view", "torch.relu.size"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "o", "=", "F", ".", "relu", "(", "self", ".", "bn_0", "(", "self", ".", "conv0", "(", "x", ")", ")", ",", "True", ")", "\n", "o", "=", "self", ".", "group_0", "(", "o", ")", "\n", "o", "=", "self", ".", "group_1", "(", "o", ")", "\n", "o", "=", "self", ".", "group_2", "(", "o", ")", "\n", "o", "=", "o", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "o", "=", "F", ".", "relu", "(", "self", ".", "bn_out", "(", "o", ".", "view", "(", "o", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ")", "\n", "return", "o", "", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.MLP.__init__": [[601, 607], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.MLP.forward": [[608, 614], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "distances.MLP.linear3", "x.detach.detach.detach", "distances.MLP.linear1", "distances.MLP.linear2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.Distance.__init__": [[616, 647], ["super().__init__", "exp_params[].split", "distances.Distance.register_buffer", "distances.Distance.register_buffer", "functools.partial", "functools.partial", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.Distance.forward": [[648, 650], ["distances.Distance.d"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.checknan": [[13, 18], ["kwargs.items", "value.data.sum", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.abs", "torch.abs"], "function", ["None"], ["        ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "data", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "data", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "3", ")", "\n", "", "elif", "d_type", "==", "\"stable_euclidean\"", ":", "\n", "        ", "return", "torch", ".", "sqrt", "(", "1e-6", "+", "torch", ".", "mean", "(", "(", "data", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "data", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "3", ")", "/", "np", ".", "sqrt", "(", "z_dim", ")", ")", "\n", "", "elif", "d_type", "==", "\"cosine\"", ":", "\n", "        ", "data", "=", "F", ".", "normalize", "(", "data", ",", "dim", "=", "2", ")", "\n", "return", "torch", ".", "bmm", "(", "data", ",", "data", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._make_aligned_labels": [[104, 117], ["torch.eye", "torch.eye", "identity[].expand().contiguous", "identity[].expand"], "function", ["None"], ["identity", "=", "torch", ".", "eye", "(", "n", ",", "dtype", "=", "weights", ".", "dtype", ",", "device", "=", "weights", ".", "device", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "#weights = weights * (1. - identity)  # zero out diagonal", "\n", "isqrt_diag", "=", "1.", "/", "torch", ".", "sqrt", "(", "1e-4", "+", "torch", ".", "sum", "(", "weights", ",", "dim", "=", "2", ")", ")", "\n", "# checknan(laplacian=isqrt_diag)", "\n", "S", "=", "weights", "*", "isqrt_diag", "[", ":", ",", "None", ",", ":", "]", "*", "isqrt_diag", "[", ":", ",", ":", ",", "None", "]", "\n", "# checknan(normalizedlaplacian=S)", "\n", "propagator", "=", "identity", "-", "alpha", "*", "S", "\n", "propagator", "=", "torch", ".", "inverse", "(", "propagator", ")", "\n", "# checknan(propagator=propagator)", "\n", "if", "norm_prop", ">", "0", ":", "\n", "        ", "propagator", "=", "F", ".", "normalize", "(", "propagator", ",", "p", "=", "norm_prop", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "norm_prop", "<", "0", ":", "\n", "        ", "propagator", "=", "F", ".", "softmax", "(", "propagator", ",", "dim", "=", "-", "1", ")", "\n", "", "propagator", "=", "propagator", "*", "scale", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.matching_nets": [[25, 64], ["_support_set.view().transpose.size", "_query_set.view.size", "isinstance", "torch.softmax().view", "_make_aligned_labels.view", "torch.log", "torch.log", "distances._make_aligned_labels", "_support_set.view().transpose.view", "_query_set.view.view", "torch.normalize", "torch.normalize", "_support_set.view().transpose.view().transpose", "_query_set.view.view", "torch.matmul", "torch.matmul", "torch.matmul().view", "torch.matmul().view", "numpy.sqrt", "torch.softmax", "_support_set.view().transpose.view", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._make_aligned_labels"], ["apply_log", "=", "False", ",", "\n", "scale_bound", "=", "\"\"", ",", "\n", "standarize", "=", "\"all\"", ",", "\n", "kernel", "=", "\"rbf\"", ",", "\n", "square_root", "=", "False", ",", "\n", "norm_prop", "=", "0", ",", "\n", "epsilon", "=", "1e-6", ")", ":", "\n", "    ", "propagator_scale", "=", "gaussian_scale", "\n", "gaussian_scale", "=", "1", "\n", "if", "scale_bound", "==", "\"softplus\"", ":", "\n", "        ", "gaussian_scale", "=", "0.01", "+", "F", ".", "softplus", "(", "gaussian_scale", ")", "\n", "alpha", "=", "0.1", "+", "F", ".", "softplus", "(", "alpha", ")", "\n", "", "elif", "scale_bound", "==", "\"square\"", ":", "\n", "        ", "gaussian_scale", "=", "1e-4", "+", "gaussian_scale", "**", "2", "\n", "alpha", "=", "0.1", "+", "alpha", "**", "2", "\n", "", "elif", "scale_bound", "==", "\"convex_relu\"", ":", "\n", "#gaussian_scale = gaussian_scale ** 2", "\n", "        ", "alpha", "=", "F", ".", "relu", "(", "alpha", ")", "+", "0.1", "\n", "", "elif", "scale_bound", "==", "\"convex_square\"", ":", "\n", "# gaussian_scale = gaussian_scale ** 2", "\n", "        ", "alpha", "=", "0.1", "+", "alpha", "**", "2", "\n", "", "elif", "scale_bound", "==", "\"relu\"", ":", "\n", "        ", "gaussian_scale", "=", "F", ".", "relu", "(", "gaussian_scale", ")", "+", "0.01", "\n", "alpha", "=", "F", ".", "relu", "(", "alpha", ")", "+", "0.1", "\n", "", "elif", "scale_bound", "==", "\"constant\"", ":", "\n", "        ", "gaussian_scale", "=", "1", "\n", "alpha", "=", "1", "\n", "", "elif", "scale_bound", "==", "\"alpha_square\"", ":", "\n", "        ", "alpha", "=", "0.1", "+", "F", ".", "relu", "(", "alpha", ")", "\n", "# Compute the pairwise distance between the examples of the sample and query sets", "\n", "# XXX: labels are set to a constant for the query set", "\n", "", "sq_dist", "=", "generalized_pw_sq_dist", "(", "embeddings", ",", "\"euclidean\"", ")", "\n", "if", "square_root", ":", "\n", "        ", "sq_dist", "=", "(", "sq_dist", "+", "epsilon", ")", ".", "sqrt", "(", ")", "\n", "", "if", "standarize", "==", "\"all\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "0", "\n", "#   sq_dist = sq_dist - sq_dist[mask].mean()", "\n", "sq_dist", "=", "sq_dist", "/", "sq_dist", "[", "mask", "]", ".", "std", "(", ")", "\n", "", "elif", "standarize", "==", "\"median\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "0", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.prototype_distance": [[66, 86], ["_query_set.view.size", "_support_set.mean().view.mean().view", "_query_set.view.view", "numpy.sqrt", "_support_set.mean().view.mean", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["0.5", "*", "torch", ".", "median", "(", "sq_dist", "[", "mask", "]", ")", "/", "torch", ".", "log", "(", "torch", ".", "ones", "(", "1", ",", "device", "=", "sq_dist", ".", "device", ")", "+", "sq_dist", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "standarize", "==", "\"frobenius\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "0", "\n", "sq_dist", "=", "sq_dist", "/", "(", "sq_dist", "[", "mask", "]", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "\n", "", "elif", "standarize", "==", "\"percentile\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "2", "\n", "sorted", ",", "indices", "=", "torch", ".", "sort", "(", "sq_dist", ".", "data", "[", "mask", "]", ")", "\n", "total", "=", "sorted", ".", "size", "(", "0", ")", "\n", "gaussian_scale", "=", "sorted", "[", "int", "(", "total", "*", "0.1", ")", "]", ".", "detach", "(", ")", "\n", "", "if", "kernel", "==", "\"rbf\"", ":", "\n", "        ", "weights", "=", "torch", ".", "exp", "(", "-", "sq_dist", "*", "gaussian_scale", ")", "\n", "", "elif", "kernel", "==", "\"convex_rbf\"", ":", "\n", "        ", "scales", "=", "torch", ".", "linspace", "(", "0.1", ",", "10", ",", "gaussian_scale", ".", "size", "(", "0", ")", ",", "device", "=", "sq_dist", ".", "device", ",", "dtype", "=", "sq_dist", ".", "dtype", ")", "\n", "weights", "=", "torch", ".", "exp", "(", "-", "sq_dist", ".", "unsqueeze", "(", "1", ")", "*", "scales", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "weights", "=", "(", "weights", "*", "F", ".", "softmax", "(", "gaussian_scale", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", "1", ")", "\n", "# checknan(timessoftmax=weights)", "\n", "", "elif", "kernel", "==", "\"euclidean\"", ":", "\n", "# Compute similarity between the examples -- inversely proportional to distance", "\n", "        ", "weights", "=", "1", "/", "(", "gaussian_scale", "+", "sq_dist", ")", "\n", "", "elif", "kernel", "==", "\"softmax\"", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "-", "sq_dist", "/", "gaussian_scale", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.gauss_distance": [[88, 102], ["sample_set.size", "sample_set.std().view", "sample_set.mean().view", "query_set.view.view", "numpy.sqrt", "sample_set.std", "sample_set.mean", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["weights", "=", "weights", "*", "(", "~", "mask", ")", ".", "float", "(", ")", "\n", "logits", ",", "propagator", "=", "global_consistency", "(", "weights", ",", "labels", ",", "alpha", "=", "alpha", ",", "norm_prop", "=", "norm_prop", ",", "scale", "=", "propagator_scale", ")", "\n", "if", "apply_log", ":", "\n", "        ", "logits", "=", "torch", ".", "log", "(", "logits", "+", "epsilon", ")", "\n", "", "return", "logits", ",", "propagator", "\n", "", "def", "global_consistency", "(", "weights", ",", "labels", ",", "alpha", "=", "1", ",", "norm_prop", "=", "0", ",", "scale", "=", "1", ")", ":", "\n", "    ", "\"\"\"Implements D. Zhou et al. \"Learning with local and global consistency\". (Same as in TPN paper but without bug)\n    Args:\n        weights: Tensor of shape (batch, n, n). Expected to be exp( -d^2/s^2 ), where d is the euclidean distance and\n            s the scale parameter.\n        labels: Tensor of shape (batch, n, n_classes)\n        alpha: Scaler, acts as a smoothing factor\n    Returns:\n        Tensor of shape (batch, n, n_classes) representing the logits of each classes\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.generalized_pw_sq_dist": [[119, 133], ["F.normalize.size", "F.normalize.view", "torch.sum", "torch.sum", "numpy.sqrt", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.sqrt", "torch.sqrt", "torch.normalize", "torch.bmm", "torch.bmm", "ValueError", "F.normalize.transpose", "torch.mean", "torch.mean", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["", "def", "_propagate", "(", "labels", ",", "propagator", ",", "scaling", "=", "1.", ")", ":", "\n", "    ", "return", "torch", ".", "matmul", "(", "propagator", ",", "labels", ")", "*", "scaling", "\n", "", "def", "prototype_distance", "(", "support_set", ",", "query_set", ",", "labels", ",", "unlabeled_set", "=", "None", ")", ":", "\n", "  ", "\"\"\"Computes distance from each element of the query set to prototypes in the sample set.\n  Args:\n      sample_set: Tensor of shape (batch, n_classes, n_sample_per_classes, z_dim) containing the representation z of\n          each images.\n      query_set: Tensor of shape (batch, n_classes, n_query_per_classes, z_dim) containing the representation z of\n          each images.\n      unlabeled_set: Tensor of shape (batch, n_classes, n_unlabeled_per_classes, z_dim) containing the representation\n          z of each images.\n  Returns:\n      Tensor of shape (batch, n_total_query, n_classes) containing the similarity between each pair of query,\n      prototypes, for each task.\n  \"\"\"", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.pw_sq_dist": [[135, 156], ["distances._make_aligned_labels", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "distances._make_aligned_labels", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._make_aligned_labels", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._make_aligned_labels"], ["n_support", ",", "channels", "=", "support_set", ".", "size", "(", ")", "\n", "support_set", "=", "support_set", ".", "view", "(", "n_support", ",", "1", ",", "channels", ")", "\n", "way", "=", "int", "(", "labels", ".", "data", ".", "max", "(", ")", ")", "+", "1", "\n", "one_hot_labels", "=", "torch", ".", "zeros", "(", "n_support", ",", "way", ",", "1", ",", "dtype", "=", "support_set", ".", "dtype", ",", "device", "=", "support_set", ".", "device", ")", "\n", "one_hot_labels", ".", "scatter_", "(", "1", ",", "labels", ".", "view", "(", "n_support", ",", "1", ",", "1", ")", ",", "1", ")", "\n", "total_per_class", "=", "one_hot_labels", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "prototypes", "=", "(", "support_set", "*", "one_hot_labels", ")", ".", "sum", "(", "0", ")", "/", "total_per_class", "\n", "prototypes", "=", "prototypes", ".", "view", "(", "1", ",", "way", ",", "channels", ")", "\n", "query_set", "=", "query_set", ".", "view", "(", "n_queries", ",", "1", ",", "channels", ")", "\n", "d", "=", "query_set", "-", "prototypes", "\n", "return", "-", "torch", ".", "sum", "(", "d", "**", "2", ",", "2", ")", "/", "np", ".", "sqrt", "(", "channels", ")", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._ravel_index": [[158, 164], ["numpy.prod", "list", "torch.arange", "torch.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._learned_scale_adjustment": [[166, 200], ["sq_dist.view().mean().repeat", "sq_dist.view().std().repeat", "sq_dist.mean().mean().repeat", "sq_dist.std().mean().repeat", "sq_dist[].clone().view", "sq_dist[].clone().view.mean().mean().repeat", "sq_dist[].clone().view.std().mean().repeat", "sq_dist.mean", "sq_dist.std", "torch.stack", "torch.stack", "mlp().view", "sq_dist.size", "sq_dist.size", "sq_dist.size", "sq_dist.size", "sq_dist.size", "sq_dist.size", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "sq_dist.size", "sq_dist.size", "torch.softplus", "sq_dist.view().mean", "sq_dist.view().std", "sq_dist.mean().mean", "sq_dist.std().mean", "sq_dist[].clone", "sq_dist[].clone().view.mean().mean", "sq_dist[].clone().view.std().mean", "mlp", "torch.stack.view", "sq_dist.view", "sq_dist.view", "sq_dist.mean", "sq_dist.std", "sq_dist[].clone().view.mean", "sq_dist[].clone().view.std"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.label_prop": [[202, 308], ["torch.cat.size", "sample_set.size", "[].reshape.reshape", "torch.cat.size", "torch.cat", "torch.cat", "distances.pw_sq_dist", "torch.exp", "torch.exp", "distances._propagate", "print", "numpy.save", "numpy.save", "numpy.save", "torch.log", "torch.log", "distances._make_aligned_labels", "logits[].reshape", "[].reshape", "unlabeled_set.size", "distances._learned_scale_adjustment", "torch.sort", "torch.sort", "weights.scatter.scatter", "distances.regularized_laplacian", "weights[].detach().cpu().numpy", "propagator[].detach().cpu().numpy", "numpy.argmax", "logits[].reshape", "distances._make_aligned_labels", "torch.sum", "torch.sum", "distances.global_consistency", "Exception", "torch.cat().view().cpu().numpy", "torch.cat().view().cpu().numpy", "weights[].detach().cpu", "propagator[].detach().cpu", "[].reshape.reshape", "torch.cat().view().cpu", "torch.cat().view().cpu", "int", "weights[].detach", "propagator[].detach", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "distances._make_aligned_labels", "distances._make_aligned_labels"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.pw_sq_dist", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive._propagate", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._make_aligned_labels", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._learned_scale_adjustment", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.regularized_laplacian", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._make_aligned_labels", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.global_consistency", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._make_aligned_labels", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._make_aligned_labels"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.make_one_hot_labels": [[309, 317], ["torch.eye", "torch.eye", "labels.max", "n_classes.item"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.standarized_label_prop": [[433, 545], ["torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.log.view", "enumerate", "data.size", "torch.cat.append", "offsets.append", "isinstance", "distances.generalized_pw_sq_dist", "[].view().expand", "distances.global_consistency", "distances._propagate", "torch.log", "torch.log", "logits_ret.append", "labels.view.view", "enumerate", "tuple", "tuple", "torch.softplus", "torch.softplus", "labels.view.append", "is_labeled.append", "labels.view.append", "is_labeled.append", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "F.softmax.size", "logits[].contiguous().view", "labels_ret.append", "distances._make_aligned_labels", "sq_dist[].std", "torch.sqrt", "torch.sqrt", "torch.linspace", "torch.linspace", "torch.exp", "torch.exp", "[].view", "labels[].contiguous().view", "torch.relu", "sorted[].detach.size", "F.softmax.size", "F.softmax.size", "logits[].contiguous", "torch.log", "torch.log", "torch.sort", "torch.sort", "sorted.size", "sorted[].detach", "torch.linspace.view", "torch.softmax", "labels[].contiguous", "torch.relu", "torch.relu", "_labels.cpu().numpy", "torch.median", "torch.median", "generalized_pw_sq_dist.unsqueeze", "torch.softmax", "torch.eye", "torch.eye", "torch.ones", "torch.ones", "generalized_pw_sq_dist.size", "sorted[].detach.view", "F.softmax.size", "torch.relu", "_labels.cpu", "int"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.generalized_pw_sq_dist", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.global_consistency", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive._propagate", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._make_aligned_labels"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.regularized_laplacian": [[547, 567], ["torch.diag_embed", "torch.diag_embed", "torch.inverse", "torch.inverse", "torch.sum", "torch.sum", "torch.eye", "torch.eye", "distances._propagate"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive._propagate"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances.global_consistency": [[569, 594], ["torch.eye", "torch.eye", "torch.sqrt", "torch.sqrt", "torch.inverse", "torch.inverse", "distances._propagate", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive._propagate"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.distances._propagate": [[596, 598], ["torch.matmul", "torch.matmul"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler.__init__": [[38, 46], ["h5py.File", "numpy.arange", "numpy.arange", "len", "oracle.Sampler.label_indices.keys", "set"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "embeddings_fname", ",", "n_classes", ",", "distract_flag", ")", ":", "\n", "        ", "self", ".", "h5fp", "=", "h5py", ".", "File", "(", "embeddings_fname", ",", "'r'", ")", "\n", "self", ".", "labels", "=", "self", ".", "h5fp", "[", "\"test_targets\"", "]", "[", "...", "]", "\n", "indices", "=", "np", ".", "arange", "(", "self", ".", "labels", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "label_indices", "=", "{", "i", ":", "indices", "[", "self", ".", "labels", "==", "i", "]", "for", "i", "in", "set", "(", "self", ".", "labels", ")", "}", "\n", "self", ".", "nclasses", "=", "len", "(", "self", ".", "label_indices", ".", "keys", "(", ")", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "distract_flag", "=", "distract_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler.sample_episode_indices": [[47, 84], ["numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation", "support_indices.append", "query_indices.append", "unlabel_indices.append", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "oracle.Sampler.label_indices.items", "numpy.random.permutation", "numpy.random.permutation", "len", "unlabel_indices.append"], "methods", ["None"], ["", "def", "sample_episode_indices", "(", "self", ",", "support_size", ",", "\n", "query_size", ",", "unlabeled_size", ",", "ways", ")", ":", "\n", "        ", "\"\"\"\n        Returns the indices of the images of a random episode with predefined support, query and unlabeled sizes.\n        the number of images is expressed in \"ways\"\n        \"\"\"", "\n", "label_indices", "=", "{", "k", ":", "np", ".", "random", ".", "permutation", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "label_indices", ".", "items", "(", ")", "}", "\n", "#label_indices = self.label_indices", "\n", "\n", "if", "self", ".", "distract_flag", ":", "\n", "            ", "classes", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "nclasses", ")", "\n", "distract_classes", "=", "classes", "[", "ways", ":", "(", "ways", "+", "ways", ")", "]", "\n", "classes", "=", "classes", "[", ":", "ways", "]", "\n", "", "else", ":", "\n", "            ", "classes", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "nclasses", ")", "[", ":", "ways", "]", "\n", "\n", "", "support_indices", "=", "[", "]", "\n", "query_indices", "=", "[", "]", "\n", "unlabel_indices", "=", "[", "]", "\n", "\n", "for", "cls", "in", "classes", ":", "\n", "            ", "start", "=", "0", "\n", "end", "=", "support_size", "\n", "support_indices", ".", "append", "(", "label_indices", "[", "cls", "]", "[", "start", ":", "end", "]", ")", "\n", "start", "=", "end", "\n", "end", "+=", "query_size", "\n", "query_indices", ".", "append", "(", "label_indices", "[", "cls", "]", "[", "start", ":", "end", "]", ")", "\n", "start", "=", "end", "\n", "end", "+=", "unlabeled_size", "\n", "assert", "(", "end", "<", "len", "(", "label_indices", "[", "cls", "]", ")", ")", "\n", "unlabel_indices", ".", "append", "(", "label_indices", "[", "cls", "]", "[", "start", ":", "end", "]", ")", "\n", "\n", "", "if", "self", ".", "distract_flag", ":", "\n", "            ", "for", "cls", "in", "distract_classes", ":", "\n", "                ", "unlabel_indices", ".", "append", "(", "label_indices", "[", "cls", "]", "[", ":", "unlabeled_size", "]", ")", "\n", "\n", "", "", "return", "np", ".", "vstack", "(", "support_indices", ")", ",", "np", ".", "vstack", "(", "query_indices", ")", ",", "np", ".", "vstack", "(", "unlabel_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler._sample_field": [[85, 100], ["tuple", "_indices.ravel.ravel.ravel", "numpy.argsort", "numpy.argsort", "len", "ret.append", "dset.copy", "ret.append", "ind.tolist"], "methods", ["None"], ["", "def", "_sample_field", "(", "self", ",", "field", ",", "*", "indices", ")", ":", "\n", "        ", "features", "=", "self", ".", "h5fp", "[", "\"test_{}\"", ".", "format", "(", "field", ")", "]", "\n", "ret", "=", "[", "]", "\n", "for", "_indices", "in", "indices", ":", "\n", "            ", "_indices", "=", "_indices", ".", "ravel", "(", ")", "\n", "argind", "=", "np", ".", "argsort", "(", "_indices", ")", "\n", "if", "len", "(", "argind", ")", "==", "0", ":", "\n", "                ", "ret", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "ind", "=", "_indices", "[", "argind", "]", "\n", "dset", "=", "features", "[", "ind", ".", "tolist", "(", ")", "]", "\n", "dset", "[", "argind", "]", "=", "dset", ".", "copy", "(", ")", "\n", "ret", ".", "append", "(", "dset", ")", "\n", "\n", "", "", "return", "tuple", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler.sample_features": [[101, 103], ["oracle.Sampler._sample_field"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler._sample_field"], ["", "def", "sample_features", "(", "self", ",", "support_indices", ",", "query_indices", ",", "unlabel_indices", ")", ":", "\n", "        ", "return", "self", ".", "_sample_field", "(", "\"features\"", ",", "support_indices", ",", "query_indices", ",", "unlabel_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler.sample_labels": [[104, 106], ["oracle.Sampler._sample_field"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler._sample_field"], ["", "def", "sample_labels", "(", "self", ",", "support_indices", ",", "query_indices", ",", "unlabel_indices", ")", ":", "\n", "        ", "return", "self", ".", "_sample_field", "(", "\"targets\"", ",", "support_indices", ",", "query_indices", ",", "unlabel_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler.sample_episode": [[107, 129], ["oracle.Sampler.sample_episode_indices", "oracle.Sampler.sample_features", "utils.make_labels", "utils.make_labels", "utils.make_labels", "oracle.episode2dict", "utils.apply_ten_on_episode"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler.sample_episode_indices", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.Sampler.sample_features", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.make_labels", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.make_labels", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.make_labels", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.episode2dict"], ["", "def", "sample_episode", "(", "self", ",", "support_size", ",", "query_size", ",", "unlabeled_size", ",", "apply_ten_flag", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Randomly samples an episode (features and labels) given the size of each set and the number of classes\n        \n        Returns: tuple(numpy array). Sets are of the size (set_size * nclasses, a512). a512 is the number\n                    of channels of the embeddings\n        \"\"\"", "\n", "ways", "=", "self", ".", "n_classes", "\n", "support_indices", ",", "query_indices", ",", "unlabel_indices", "=", "self", ".", "sample_episode_indices", "(", "support_size", ",", "query_size", ",", "unlabeled_size", ",", "ways", ")", "\n", "support_set", ",", "query_set", ",", "unlabel_set", "=", "self", ".", "sample_features", "(", "support_indices", ",", "\n", "query_indices", ",", "\n", "unlabel_indices", ")", "\n", "support_labels", "=", "ut", ".", "make_labels", "(", "support_size", ",", "ways", ")", "\n", "query_labels", "=", "ut", ".", "make_labels", "(", "query_size", ",", "ways", ")", "\n", "unlabel_labels", "=", "ut", ".", "make_labels", "(", "unlabeled_size", ",", "ways", ")", "\n", "\n", "episode_dict", "=", "episode2dict", "(", "support_set", ",", "query_set", ",", "unlabel_set", ",", "support_labels", ",", "query_labels", ",", "unlabel_labels", ")", "\n", "\n", "if", "apply_ten_flag", ":", "\n", "            ", "episode_dict", "=", "ut", ".", "apply_ten_on_episode", "(", "episode_dict", ")", "\n", "\n", "", "return", "episode_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.episode2dict": [[130, 140], ["None"], "function", ["None"], ["", "", "def", "episode2dict", "(", "support_set", ",", "query_set", ",", "unlabel_set", ",", "support_labels", ",", "query_labels", ",", "unlabel_labels", ")", ":", "\n", "    ", "n_classes", "=", "support_set", ".", "shape", "[", "0", "]", "\n", "\n", "support_dict", "=", "{", "\"samples\"", ":", "support_set", ",", "\"labels\"", ":", "support_labels", "}", "\n", "query_dict", "=", "{", "\"samples\"", ":", "query_set", ",", "\"labels\"", ":", "query_labels", "}", "\n", "unlabeled_dict", "=", "{", "\"samples\"", ":", "unlabel_set", ",", "\"labels\"", ":", "unlabel_labels", "}", "\n", "\n", "return", "{", "\"support\"", ":", "support_dict", ",", "\n", "\"query\"", ":", "query_dict", ",", "\n", "\"unlabeled\"", ":", "unlabeled_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.compute_acc": [[143, 147], ["true_labels.flatten", "pred_labels.ravel"], "function", ["None"], ["", "def", "compute_acc", "(", "pred_labels", ",", "true_labels", ")", ":", "\n", "    ", "acc", "=", "(", "true_labels", ".", "flatten", "(", ")", "==", "pred_labels", ".", "ravel", "(", ")", ")", ".", "astype", "(", "float", ")", ".", "mean", "(", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.get_unlabeled_set": [[34, 77], ["get_support_labels().ravel().astype", "get_support_labels().ravel", "get_support_labels().ravel().astype.reshape", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda.view", "range", "range", "torch.cat().cpu().numpy().astype", "torch.cat().cpu().numpy().astype", "torch.cat().cpu().numpy().astype", "torch.cat().cpu().numpy().astype", "numpy.vstack().ravel().astype", "predict_sort", "predict", "min", "utils.get_support_labels", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "numpy.vstack().ravel", "numpy.ones", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "numpy.vstack", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.selection_methods.ssl.predict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.get_support_labels"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.xlogy": [[81, 87], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "y.min", "torch.where", "torch.where", "torch.where", "torch.where", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.get_support_labels": [[89, 96], ["range", "numpy.vstack", "numpy.ones"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.get_entropy_support_set": [[98, 130], ["range", "range", "numpy.vstack", "range", "numpy.arange", "copy.deepcopy", "range", "monitor.compute_entropy", "numpy.unique", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.get_kmeans_support_set": [[131, 145], ["range", "numpy.vstack", "sklearn.cluster.KMeans().fit", "sklearn.cluster.KMeans"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.get_greedy_support_set": [[148, 184], ["range", "range", "numpy.vstack", "range", "numpy.arange", "copy.deepcopy", "range", "monitor.compute_acc", "numpy.unique", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.oracle.compute_acc"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.get_random_support_set": [[188, 197], ["range", "numpy.vstack", "numpy.arange", "numpy.random.choice"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.calc_accuracy": [[198, 207], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Sampler", "check_pairs"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.make_labels": [[212, 217], ["numpy.arange().reshape", "numpy.zeros", "numpy.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.base_ssl.utils.to_pytorch": [[219, 224], ["torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__": [[44, 55], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "label_prop.LabelpropDouble", "label_prop.Labelprop", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "list", "adaptive.AdaptiveTenInner.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "nclasses", ",", "double_flag", ",", "mu_init", "=", "0", ",", "scale_init", "=", "0", ",", "precision_init", "=", "0", ",", "**", "exp_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "precision", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "1", ",", "output_size", ")", "*", "0.1", ")", "\n", "self", ".", "classifier", "=", "torch", ".", "nn", ".", "Linear", "(", "output_size", ",", "nclasses", ")", "\n", "self", ".", "exp_dict", "=", "exp_dict", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "LBFGS", "(", "[", "self", ".", "precision", "]", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", ",", "tolerance_grad", "=", "1e-5", ",", "tolerance_change", "=", "1e-5", ",", "lr", "=", "0.1", ")", "\n", "if", "double_flag", ":", "\n", "            ", "self", ".", "label_prop", "=", "lp", ".", "LabelpropDouble", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "label_prop", "=", "lp", ".", "Labelprop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.train_step": [[56, 76], ["_x.clone", "adaptive.AdaptiveTenInner.optimizer.zero_grad", "_propagate.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "adaptive.standarized_label_prop", "adaptive._propagate", "[].view", "adaptive.AdaptiveTenInner.classifier", "loss.backward", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "_propagate.view", "torch.cross_entropy", "torch.cross_entropy", "labels.view"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.standarized_label_prop", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive._propagate"], ["", "", "def", "train_step", "(", "self", ",", "_x", ",", "support_size", ",", "query_size", ",", "labels", ")", ":", "\n", "        ", "x", "=", "_x", ".", "clone", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "b", ",", "k", ",", "c", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", "*", "torch", ".", "sigmoid", "(", "1", "+", "self", ".", "precision", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "1", ",", "k", ",", "self", ".", "nclasses", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "logits", ",", "propagator", "=", "standarized_label_prop", "(", "x", ",", "zeros", ",", "\n", "1", ",", "1", ",", "\n", "apply_log", "=", "True", ",", "scale_bound", "=", "\"\"", ",", "\n", "standarize", "=", "\"all\"", ",", "kernel", "=", "\"rbf\"", ")", "\n", "x", "=", "_propagate", "(", "x", ",", "propagator", ")", "\n", "# support_set = x.view(-1, self.nclasses, c)[:support_size, ...].view(-1, c)", "\n", "support_set", "=", "x", ".", "view", "(", "-", "1", ",", "c", ")", "[", ":", "support_size", ",", "...", "]", "\n", "support_labels", "=", "labels", ".", "view", "(", "-", "1", ",", "self", ".", "nclasses", ")", "[", ":", "support_size", ",", "...", "]", ".", "view", "(", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "support_set", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "support_labels", ")", "+", "0.0001", "*", "(", "self", ".", "precision", "**", "2", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.forward": [[77, 103], ["adaptive.AdaptiveTenInner.train", "adaptive.AdaptiveTenInner.optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.one_hot().float", "torch.one_hot().float", "one_hot_labels.view.view.view", "adaptive.standarized_label_prop", "adaptive._propagate", "adaptive.standarized_label_prop", "logits.view.view.view", "logits[].view", "adaptive.AdaptiveTenInner.train_step", "adaptive.AdaptiveTenInner.precision.detach", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.one_hot", "torch.one_hot", "labels.view"], "methods", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.standarized_label_prop", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive._propagate", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.standarized_label_prop", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.train_step"], ["", "def", "forward", "(", "self", ",", "x", ",", "support_size", ",", "query_size", ",", "labels", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", "lambda", ":", "self", ".", "train_step", "(", "x", ",", "support_size", ",", "query_size", ",", "labels", ")", ")", "\n", "# self.train_step(x, support_size, query_size, labels)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# mu, scale, precision = (0.5 + self.mu **2).detach(), (0.5 + self.scale ** 2).detach(), (1 + self.precision.detach())", "\n", "            ", "mu", ",", "scale", ",", "precision", "=", "1", ",", "1", ",", "self", ".", "precision", ".", "detach", "(", ")", "\n", "# mu, scale, precision = 1, 1, 1", "\n", "x", "=", "x", "*", "torch", ".", "sigmoid", "(", "1", "+", "precision", ")", "\n", "one_hot_labels", "=", "F", ".", "one_hot", "(", "labels", ".", "view", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "one_hot_labels", "=", "one_hot_labels", ".", "view", "(", "1", ",", "\n", "support_size", "+", "query_size", ",", "\n", "self", ".", "nclasses", ")", "\n", "one_hot_labels", "[", ":", ",", "support_size", ":", ",", "...", "]", "=", "0", "\n", "\n", "logits", ",", "propagator", "=", "standarized_label_prop", "(", "x", ",", "one_hot_labels", ",", "\n", "scale", ",", "mu", ",", "apply_log", "=", "True", ",", "\n", "scale_bound", "=", "\"\"", ",", "standarize", "=", "\"all\"", ",", "\n", "kernel", "=", "\"rbf\"", ")", "\n", "x", "=", "_propagate", "(", "x", ",", "propagator", ")", "\n", "logits", ",", "propagator", "=", "standarized_label_prop", "(", "x", ",", "one_hot_labels", ",", "\n", "scale", ",", "mu", ",", "apply_log", "=", "True", ",", "\n", "scale_bound", "=", "\"\"", ",", "standarize", "=", "\"all\"", ",", "\n", "kernel", "=", "\"rbf\"", ")", "\n", "logits", "=", "logits", ".", "view", "(", "(", "support_size", "+", "query_size", ")", ",", "self", ".", "nclasses", ")", "\n", "return", "logits", "[", "support_size", ":", "]", ".", "view", "(", "-", "1", ",", "self", ".", "nclasses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.adaptive_predict": [[16, 41], ["torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.cat", "torch.cat", "AdaptiveTenInner().cuda", "AdaptiveTenInner().cuda.forward", "UQ_logits[].argmax", "torch.cat", "torch.cat", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "adaptive.AdaptiveTenInner", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.AdaptiveTenInner.forward"], ["def", "adaptive_predict", "(", "episode_dict", ",", "double_flag", "=", "False", ")", ":", "\n", "# Get variables", "\n", "    ", "S", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"support_so_far\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "S_labels", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"support_so_far\"", "]", "[", "\"labels\"", "]", ")", ".", "cuda", "(", ")", "\n", "Q", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"query\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "U", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"unlabeled\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "SUQ", "=", "torch", ".", "cat", "(", "[", "S", ",", "U", ",", "Q", "]", ")", "[", "None", "]", "\n", "Q_labels", "=", "-", "1", "*", "torch", ".", "ones", "(", "Q", ".", "shape", "[", "0", "]", ",", "device", "=", "S_labels", ".", "device", ",", "dtype", "=", "S_labels", ".", "dtype", ")", ".", "cuda", "(", ")", "\n", "U_labels", "=", "-", "1", "*", "torch", ".", "ones", "(", "U", ".", "shape", "[", "0", "]", ",", "device", "=", "S_labels", ".", "device", ",", "dtype", "=", "S_labels", ".", "dtype", ")", ".", "cuda", "(", ")", "\n", "\n", "SUQ_labels", "=", "torch", ".", "cat", "(", "[", "S_labels", ",", "U_labels", ",", "Q_labels", "]", ")", "\n", "# Init Adaptive", "\n", "adaptive", "=", "AdaptiveTenInner", "(", "output_size", "=", "S", ".", "shape", "[", "1", "]", ",", "\n", "nclasses", "=", "5", ",", "\n", "double_flag", "=", "double_flag", ")", ".", "cuda", "(", ")", "\n", "\n", "# Apply Adaptive", "\n", "# adaptive.train_step()", "\n", "UQ_logits", "=", "adaptive", ".", "forward", "(", "x", "=", "SUQ", ",", "\n", "support_size", "=", "S", ".", "shape", "[", "0", "]", ",", "\n", "query_size", "=", "U", ".", "shape", "[", "0", "]", "+", "Q", ".", "shape", "[", "0", "]", ",", "\n", "labels", "=", "SUQ_labels", ")", "\n", "\n", "return", "UQ_logits", "[", "-", "Q", ".", "shape", "[", "0", "]", ":", "]", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.standarized_label_prop": [[105, 176], ["adaptive.generalized_pw_sq_dist", "adaptive.global_consistency", "torch.exp", "torch.exp", "torch.eye", "torch.eye", "torch.log", "torch.log", "torch.softplus", "torch.softplus", "sq_dist[].std", "torch.sqrt", "torch.sqrt", "torch.linspace", "torch.linspace", "torch.exp", "torch.exp", "F.softmax.size", "sorted[].detach.size", "torch.relu", "torch.log", "torch.log", "torch.sort", "torch.sort", "sorted.size", "sorted[].detach", "torch.linspace.view", "torch.softmax", "torch.median", "torch.median", "generalized_pw_sq_dist.unsqueeze", "torch.softmax", "torch.relu", "torch.relu", "torch.ones", "torch.ones", "generalized_pw_sq_dist.size", "sorted[].detach.view", "torch.relu", "int"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.generalized_pw_sq_dist", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.global_consistency"], ["", "", "", "def", "standarized_label_prop", "(", "embeddings", ",", "\n", "labels", ",", "\n", "gaussian_scale", "=", "1", ",", "alpha", "=", "1", ",", "\n", "weights", "=", "None", ",", "\n", "apply_log", "=", "False", ",", "scale_bound", "=", "\"\"", ",", "standarize", "=", "\"\"", ",", "kernel", "=", "\"\"", ",", "square_root", "=", "False", ",", "\n", "epsilon", "=", "1e-6", ")", ":", "\n", "    ", "if", "scale_bound", "==", "\"softplus\"", ":", "\n", "        ", "gaussian_scale", "=", "0.01", "+", "F", ".", "softplus", "(", "gaussian_scale", ")", "\n", "alpha", "=", "0.1", "+", "F", ".", "softplus", "(", "alpha", ")", "\n", "", "elif", "scale_bound", "==", "\"square\"", ":", "\n", "        ", "gaussian_scale", "=", "1e-4", "+", "gaussian_scale", "**", "2", "\n", "alpha", "=", "0.1", "+", "alpha", "**", "2", "\n", "", "elif", "scale_bound", "==", "\"convex_relu\"", ":", "\n", "#gaussian_scale = gaussian_scale ** 2", "\n", "        ", "alpha", "=", "F", ".", "relu", "(", "alpha", ")", "+", "0.1", "\n", "", "elif", "scale_bound", "==", "\"convex_square\"", ":", "\n", "# gaussian_scale = gaussian_scale ** 2", "\n", "        ", "alpha", "=", "0.1", "+", "alpha", "**", "2", "\n", "", "elif", "scale_bound", "==", "\"relu\"", ":", "\n", "        ", "gaussian_scale", "=", "F", ".", "relu", "(", "gaussian_scale", ")", "+", "0.01", "\n", "alpha", "=", "F", ".", "relu", "(", "alpha", ")", "+", "0.1", "\n", "", "elif", "scale_bound", "==", "\"constant\"", ":", "\n", "        ", "gaussian_scale", "=", "1", "\n", "alpha", "=", "1", "\n", "", "elif", "scale_bound", "==", "\"alpha_square\"", ":", "\n", "        ", "alpha", "=", "0.1", "+", "F", ".", "relu", "(", "alpha", ")", "\n", "\n", "# Compute the pairwise distance between the examples of the sample and query sets", "\n", "# XXX: labels are set to a constant for the query set", "\n", "", "sq_dist", "=", "generalized_pw_sq_dist", "(", "embeddings", ",", "\"euclidean\"", ")", "\n", "if", "square_root", ":", "\n", "        ", "sq_dist", "=", "(", "sq_dist", "+", "epsilon", ")", ".", "sqrt", "(", ")", "\n", "", "if", "standarize", "==", "\"all\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "0", "\n", "#   sq_dist = sq_dist - sq_dist[mask].mean()", "\n", "sq_dist", "=", "sq_dist", "/", "sq_dist", "[", "mask", "]", ".", "std", "(", ")", "\n", "", "elif", "standarize", "==", "\"median\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "0", "\n", "gaussian_scale", "=", "torch", ".", "sqrt", "(", "\n", "0.5", "*", "torch", ".", "median", "(", "sq_dist", "[", "mask", "]", ")", "/", "torch", ".", "log", "(", "torch", ".", "ones", "(", "1", ",", "device", "=", "sq_dist", ".", "device", ")", "+", "sq_dist", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "standarize", "==", "\"frobenius\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "0", "\n", "sq_dist", "=", "sq_dist", "/", "(", "sq_dist", "[", "mask", "]", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "\n", "", "elif", "standarize", "==", "\"percentile\"", ":", "\n", "        ", "mask", "=", "sq_dist", "!=", "2", "\n", "sorted", ",", "indices", "=", "torch", ".", "sort", "(", "sq_dist", ".", "data", "[", "mask", "]", ")", "\n", "total", "=", "sorted", ".", "size", "(", "0", ")", "\n", "gaussian_scale", "=", "sorted", "[", "int", "(", "total", "*", "0.1", ")", "]", ".", "detach", "(", ")", "\n", "\n", "", "if", "kernel", "==", "\"rbf\"", ":", "\n", "        ", "weights", "=", "torch", ".", "exp", "(", "-", "sq_dist", "*", "gaussian_scale", ")", "\n", "", "elif", "kernel", "==", "\"convex_rbf\"", ":", "\n", "        ", "scales", "=", "torch", ".", "linspace", "(", "0.1", ",", "10", ",", "gaussian_scale", ".", "size", "(", "0", ")", ",", "device", "=", "sq_dist", ".", "device", ",", "dtype", "=", "sq_dist", ".", "dtype", ")", "\n", "weights", "=", "torch", ".", "exp", "(", "-", "sq_dist", ".", "unsqueeze", "(", "1", ")", "*", "scales", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "weights", "=", "(", "weights", "*", "F", ".", "softmax", "(", "gaussian_scale", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", "1", ")", "\n", "# checknan(timessoftmax=weights)", "\n", "", "elif", "kernel", "==", "\"euclidean\"", ":", "\n", "# Compute similarity between the examples -- inversely proportional to distance", "\n", "        ", "weights", "=", "1", "/", "(", "gaussian_scale", "+", "sq_dist", ")", "\n", "", "elif", "kernel", "==", "\"softmax\"", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "-", "sq_dist", "/", "gaussian_scale", ",", "-", "1", ")", "\n", "\n", "", "mask", "=", "torch", ".", "eye", "(", "weights", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "weights", ".", "device", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "weights", "=", "weights", "*", "(", "~", "mask", ")", ".", "float", "(", ")", "\n", "\n", "logits", ",", "propagator", "=", "global_consistency", "(", "weights", ",", "labels", ",", "alpha", "=", "alpha", ")", "\n", "\n", "if", "apply_log", ":", "\n", "        ", "logits", "=", "torch", ".", "log", "(", "logits", "+", "epsilon", ")", "\n", "\n", "", "return", "logits", ",", "propagator", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.generalized_pw_sq_dist": [[177, 190], ["F.normalize.size", "torch.sum", "torch.sum", "numpy.sqrt", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.sqrt", "torch.sqrt", "torch.normalize", "torch.bmm", "torch.bmm", "ValueError", "F.normalize.transpose", "torch.mean", "torch.mean", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.tools.meters.BasicMeter.mean"], ["", "def", "generalized_pw_sq_dist", "(", "data", ",", "d_type", "=", "\"euclidean\"", ")", ":", "\n", "    ", "batch", ",", "samples", ",", "z_dim", "=", "data", ".", "size", "(", ")", "\n", "if", "d_type", "==", "\"euclidean\"", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "(", "data", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "data", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "3", ")", "/", "np", ".", "sqrt", "(", "z_dim", ")", "\n", "", "elif", "d_type", "==", "\"l1\"", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "data", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "data", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "3", ")", "\n", "", "elif", "d_type", "==", "\"stable_euclidean\"", ":", "\n", "        ", "return", "torch", ".", "sqrt", "(", "1e-6", "+", "torch", ".", "mean", "(", "(", "data", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "data", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "3", ")", "/", "np", ".", "sqrt", "(", "z_dim", ")", ")", "\n", "", "elif", "d_type", "==", "\"cosine\"", ":", "\n", "        ", "data", "=", "F", ".", "normalize", "(", "data", ",", "dim", "=", "2", ")", "\n", "return", "torch", ".", "bmm", "(", "data", ",", "data", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Distance type not recognized\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive.global_consistency": [[191, 215], ["torch.eye", "torch.eye", "torch.sqrt", "torch.sqrt", "torch.inverse", "torch.inverse", "adaptive._propagate", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive._propagate"], ["", "", "def", "global_consistency", "(", "weights", ",", "labels", ",", "alpha", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Implements D. Zhou et al. \"Learning with local and global consistency\". (Same as in TPN paper but without bug)\n    Args:\n        weights: Tensor of shape (batch, n, n). Expected to be exp( -d^2/s^2 ), where d is the euclidean distance and\n            s the scale parameter.\n        labels: Tensor of shape (batch, n, n_classes)\n        alpha: Scaler, acts as a smoothing factor\n    Returns:\n        Tensor of shape (batch, n, n_classes) representing the logits of each classes\n    \"\"\"", "\n", "n", "=", "weights", ".", "shape", "[", "1", "]", "\n", "_alpha", "=", "1", "/", "(", "1", "+", "alpha", ")", "\n", "_beta", "=", "alpha", "/", "(", "1", "+", "alpha", ")", "\n", "identity", "=", "torch", ".", "eye", "(", "n", ",", "dtype", "=", "weights", ".", "dtype", ",", "device", "=", "weights", ".", "device", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "#weights = weights * (1. - identity)  # zero out diagonal", "\n", "isqrt_diag", "=", "1.", "/", "torch", ".", "sqrt", "(", "1e-4", "+", "torch", ".", "sum", "(", "weights", ",", "dim", "=", "2", ")", ")", "\n", "# checknan(laplacian=isqrt_diag)", "\n", "S", "=", "weights", "*", "isqrt_diag", "[", ":", ",", "None", ",", ":", "]", "*", "isqrt_diag", "[", ":", ",", ":", ",", "None", "]", "\n", "# checknan(normalizedlaplacian=S)", "\n", "propagator", "=", "identity", "-", "_alpha", "*", "S", "\n", "propagator", "=", "torch", ".", "inverse", "(", "propagator", ")", "*", "_beta", "\n", "# checknan(propagator=propagator)", "\n", "\n", "return", "_propagate", "(", "labels", ",", "propagator", ",", "scaling", "=", "1", ")", ",", "propagator", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.adaptive._propagate": [[217, 219], ["torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "_propagate", "(", "labels", ",", "propagator", ",", "scaling", "=", "1.", ")", ":", "\n", "    ", "return", "torch", ".", "matmul", "(", "propagator", ",", "labels", ")", "*", "scaling", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.prototypical.prototypical_predict": [[5, 15], ["torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "prototypical.prototype_distance", "prototype_distance.argmax", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.prototypical.prototype_distance"], ["def", "prototypical_predict", "(", "episode_dict", ")", ":", "\n", "    ", "support_samples", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"support_so_far\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "support_labels", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"support_so_far\"", "]", "[", "\"labels\"", "]", ")", ".", "cuda", "(", ")", "\n", "query_samples", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"query\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "logits", "=", "prototype_distance", "(", "support_set", "=", "support_samples", ",", "\n", "query_set", "=", "query_samples", ",", "\n", "labels", "=", "support_labels", ",", "\n", "unlabeled_set", "=", "None", ")", "\n", "return", "logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.prototypical.prototype_distance": [[19, 49], ["query_set.view.size", "support_set.view.size", "support_set.view.view", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.sum", "prototypes.view.view", "query_set.view.view", "int", "labels.view", "numpy.sqrt", "labels.data.max", "torch.sum"], "function", ["None"], ["", "def", "prototype_distance", "(", "support_set", ",", "query_set", ",", "labels", ",", "unlabeled_set", "=", "None", ")", ":", "\n", "  ", "\"\"\"Computes distance from each element of the query set to prototypes in the sample set.\n  Args:\n      sample_set: Tensor of shape (batch, n_classes, n_sample_per_classes, z_dim) containing the representation z of\n          each images.\n      query_set: Tensor of shape (batch, n_classes, n_query_per_classes, z_dim) containing the representation z of\n          each images.\n      labels: Tensor of Long of shape(support_set_size)\n      unlabeled_set: Tensor of shape (batch, n_classes, n_unlabeled_per_classes, z_dim) containing the representation\n          z of each images.\n  Returns:\n      Tensor of shape (batch, n_total_query, n_classes) containing the similarity between each pair of query,\n      prototypes, for each task.\n  \"\"\"", "\n", "n_queries", ",", "channels", "=", "query_set", ".", "size", "(", ")", "\n", "n_support", ",", "channels", "=", "support_set", ".", "size", "(", ")", "\n", "\n", "support_set", "=", "support_set", ".", "view", "(", "n_support", ",", "1", ",", "channels", ")", "\n", "\n", "way", "=", "int", "(", "labels", ".", "data", ".", "max", "(", ")", ")", "+", "1", "\n", "one_hot_labels", "=", "torch", ".", "zeros", "(", "n_support", ",", "way", ",", "1", ",", "dtype", "=", "support_set", ".", "dtype", ",", "device", "=", "support_set", ".", "device", ")", "\n", "one_hot_labels", ".", "scatter_", "(", "1", ",", "labels", ".", "view", "(", "n_support", ",", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "total_per_class", "=", "one_hot_labels", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "prototypes", "=", "(", "support_set", "*", "one_hot_labels", ")", ".", "sum", "(", "0", ")", "/", "total_per_class", "\n", "prototypes", "=", "prototypes", ".", "view", "(", "1", ",", "way", ",", "channels", ")", "\n", "\n", "query_set", "=", "query_set", ".", "view", "(", "n_queries", ",", "1", ",", "channels", ")", "\n", "d", "=", "query_set", "-", "prototypes", "\n", "return", "-", "torch", ".", "sum", "(", "d", "**", "2", ",", "2", ")", "/", "np", ".", "sqrt", "(", "channels", ")", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.__init__.get_predictions": [[6, 14], ["label_prop.label_prop_predict", "prototypical.prototypical_predict", "ValueError"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.label_prop.label_prop_predict", "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.prototypical.prototypical_predict"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.predict_methods.label_prop.label_prop_predict": [[14, 32], ["torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "int", "torch.cat", "torch.cat", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "embedding_propagation.LabelPropagation", "torch.cat", "torch.cat", "embedding_propagation.LabelPropagation.", "logits_query.argmax().cpu().numpy", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.max", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "logits_query.argmax().cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "logits_query.argmax"], "function", ["None"], ["def", "label_prop_predict", "(", "episode_dict", ")", ":", "\n", "    ", "S", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"support_so_far\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "S_labels", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"support_so_far\"", "]", "[", "\"labels\"", "]", ")", ".", "cuda", "(", ")", "\n", "nclasses", "=", "int", "(", "S_labels", ".", "max", "(", ")", "+", "1", ")", "\n", "Q_labels", "=", "torch", ".", "zeros", "(", "episode_dict", "[", "\"query\"", "]", "[", "\"samples\"", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "S_labels", ".", "dtype", ")", ".", "cuda", "(", ")", "+", "nclasses", "\n", "U_labels", "=", "torch", ".", "zeros", "(", "episode_dict", "[", "\"unlabeled\"", "]", "[", "\"samples\"", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "S_labels", ".", "dtype", ")", ".", "cuda", "(", ")", "+", "nclasses", "\n", "A_labels", "=", "torch", ".", "cat", "(", "[", "S_labels", ",", "Q_labels", ",", "U_labels", "]", ",", "0", ")", "\n", "Q", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"query\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "U", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"unlabeled\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "lp", "=", "LabelPropagation", "(", "balanced", "=", "True", ")", "\n", "\n", "SUQ", "=", "torch", ".", "cat", "(", "[", "S", ",", "U", ",", "Q", "]", ",", "dim", "=", "0", ")", "\n", "logits", "=", "lp", "(", "SUQ", ",", "A_labels", ",", "nclasses", ")", "\n", "logits_query", "=", "logits", "[", "-", "Q", ".", "shape", "[", "0", "]", ":", "]", "\n", "\n", "return", "logits_query", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.selection_methods.__init__.get_indices": [[4, 20], ["numpy.random.choice", "numpy.random.choice", "ssl.ssl_get_next_best_indices"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.selection_methods.ssl.ssl_get_next_best_indices"], []], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.selection_methods.ssl.ssl_get_next_best_indices": [[9, 38], ["torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "int", "torch.cat", "torch.cat", "embedding_propagation.LabelPropagation", "embedding_propagation.LabelPropagation.", "U_logits.argmax().cpu().numpy", "torch.zeros().cuda", "torch.zeros().cuda", "numpy.arange", "[].cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.max", "U_logits.argmax().cpu", "[].cpu().numpy.argsort", "torch.zeros", "torch.zeros", "[].cpu", "U_logits.argmax", "U_logits.max"], "function", ["None"], ["def", "ssl_get_next_best_indices", "(", "episode_dict", ",", "support_size_max", "=", "None", ")", ":", "\n", "    ", "S", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"support_so_far\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "Q", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"query\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "U", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"unlabeled\"", "]", "[", "\"samples\"", "]", ")", ".", "cuda", "(", ")", "\n", "S_labels", "=", "torch", ".", "from_numpy", "(", "episode_dict", "[", "\"support_so_far\"", "]", "[", "\"labels\"", "]", ")", ".", "cuda", "(", ")", "\n", "nclasses", "=", "int", "(", "S_labels", ".", "max", "(", ")", "+", "1", ")", "\n", "Q_labels", "=", "torch", ".", "zeros", "(", "episode_dict", "[", "\"query\"", "]", "[", "\"samples\"", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "S_labels", ".", "dtype", ")", ".", "cuda", "(", ")", "+", "nclasses", "\n", "U_labels", "=", "torch", ".", "zeros", "(", "episode_dict", "[", "\"unlabeled\"", "]", "[", "\"samples\"", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "S_labels", ".", "dtype", ")", ".", "cuda", "(", ")", "+", "nclasses", "\n", "A_labels", "=", "torch", ".", "cat", "(", "[", "S_labels", ",", "Q_labels", ",", "U_labels", "]", ",", "0", ")", "\n", "\n", "SQU", "=", "torch", ".", "cat", "(", "[", "S", ",", "Q", ",", "U", "]", ",", "dim", "=", "0", ")", "# Information gain is measured in the whole system", "\n", "\n", "# train label_prop", "\n", "lp", "=", "LabelPropagation", "(", "balanced", "=", "True", ")", "\n", "logits", "=", "lp", "(", "SQU", ",", "A_labels", ",", "nclasses", ")", "\n", "\n", "U_logits", "=", "logits", "[", "-", "U", ".", "shape", "[", "0", "]", ":", "]", "\n", "# modify the labels of the unlabeled", "\n", "episode_dict", "[", "\"unlabeled\"", "]", "[", "\"labels\"", "]", "=", "U_logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# unlabeled_scores = U_logits.max(dim=1).cpu().numpy()", "\n", "\n", "if", "support_size_max", "is", "None", ":", "\n", "# choose all the unlabeled examples", "\n", "        ", "return", "np", ".", "arange", "(", "U", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "# score each", "\n", "        ", "score_list", "=", "U_logits", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "score_list", ".", "argsort", "(", ")", "[", "-", "support_size_max", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ElementAI_embedding-propagation.selection_methods.ssl.predict": [[39, 49], ["predict_methods.label_prop.Labelprop", "lp.Labelprop.fit", "lp.Labelprop.predict", "U_logits.argmax().cpu().numpy", "U_logits.argmax().cpu", "U_logits.argmax"], "function", ["home.repos.pwc.inspect_result.ElementAI_embedding-propagation.selection_methods.ssl.predict"], ["", "", "def", "predict", "(", "S", ",", "S_labels", ",", "UQ", ",", "U_shape", ")", ":", "\n", "    ", "label_prop", "=", "lp", ".", "Labelprop", "(", ")", "\n", "label_prop", ".", "fit", "(", "support_set", "=", "S", ",", "unlabeled_set", "=", "UQ", ")", "\n", "\n", "logits", "=", "label_prop", ".", "predict", "(", "support_labels", "=", "S_labels", ",", "\n", "unlabeled_pseudolabels", "=", "None", ",", "\n", "balanced_flag", "=", "True", ")", "\n", "\n", "U_logits", "=", "logits", "[", "S", ".", "shape", "[", "0", "]", ":", "S", ".", "shape", "[", "0", "]", "+", "U_shape", "[", "0", "]", "]", "\n", "return", "U_logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "", "", ""]]}