{"home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.test_models.AverageMeter.__init__": [[31, 33], ["test_models.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.test_models.AverageMeter.reset": [[34, 39], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.test_models.AverageMeter.update": [[40, 45], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.test_models.accuracy": [[47, 60], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].float().sum", "res.append", "correct[].float().sum.mul_", "target.view", "correct[].float"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "#  correct_k = correct[:k].view(-1).float().sum(0)", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.test_models.parse_shift_option_from_log_name": [[62, 71], ["log_name.split", "enumerate", "int", "strings[].replace"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split"], ["", "def", "parse_shift_option_from_log_name", "(", "log_name", ")", ":", "\n", "    ", "if", "'shift'", "in", "log_name", ":", "\n", "        ", "strings", "=", "log_name", ".", "split", "(", "'_'", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "strings", ")", ":", "\n", "            ", "if", "'shift'", "in", "s", ":", "\n", "                ", "break", "\n", "", "", "return", "True", ",", "int", "(", "strings", "[", "i", "]", ".", "replace", "(", "'shift'", ",", "''", ")", ")", ",", "strings", "[", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "False", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.test_models.eval_video": [[213, 262], ["net.eval", "print", "net.train", "torch.no_grad", "torch.no_grad", "label.numel", "net", "rst.reshape().mean().reshape.reshape().mean", "rst.reshape().mean().reshape.data.cpu().numpy().copy", "torch.cuda.is_available", "torch.cuda.is_available", "data_in.view.view", "os.path.join", "ops.utils.save_kernels", "torch.nn.functional.softmax", "data_in.view.size", "data_in.view.size", "rst.reshape().mean().reshape.reshape", "rst.reshape().mean().reshape.data.cpu().numpy", "rst.reshape().mean().reshape.reshape", "rst.reshape().mean().reshape.reshape().mean().reshape", "rst.reshape().mean().reshape.reshape", "rst.reshape().mean().reshape.reshape().mean().reshape", "rst.reshape().mean().reshape.data.cpu", "rst.reshape().mean().reshape.reshape().mean", "rst.reshape().mean().reshape.reshape().mean", "rst.reshape().mean().reshape.reshape", "rst.reshape().mean().reshape.reshape"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.train", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.save_kernels", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.softmax"], ["def", "eval_video", "(", "video_data", ",", "net", ",", "this_test_segments", ",", "modality", ",", "mode", "=", "'eval'", ")", ":", "\n", "    ", "if", "mode", "==", "'eval'", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"something wrong. double check the flags\"", ")", "\n", "net", ".", "train", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "i", ",", "data", ",", "label", ",", "_", "=", "video_data", "\n", "batch_size", "=", "label", ".", "numel", "(", ")", "\n", "num_crop", "=", "args", ".", "test_crops", "\n", "if", "args", ".", "dense_sample", ":", "\n", "            ", "num_crop", "*=", "10", "# 10 clips for testing when using dense sample", "\n", "\n", "", "if", "args", ".", "twice_sample", ":", "\n", "            ", "num_crop", "*=", "2", "\n", "\n", "", "length", "=", "3", "\n", "data_in", "=", "data", "\n", "\n", "if", "is_shift", ":", "\n", "            ", "data_in", "=", "data_in", ".", "view", "(", "batch_size", "*", "num_crop", ",", "this_test_segments", ",", "length", ",", "data_in", ".", "size", "(", "2", ")", ",", "data_in", ".", "size", "(", "3", ")", ")", "\n", "\n", "\n", "", "rst", ",", "model_aux_feats", "=", "net", "(", "data_in", ")", "\n", "aux", "=", "model_aux_feats", "[", "'interm_feats'", "]", "\n", "offsets", "=", "model_aux_feats", "[", "'offsets'", "]", "\n", "\n", "list_save_iter", "=", "[", "0", ",", "100", ",", "1000", "]", "\n", "if", "args", ".", "save_kernels", "and", "i", "in", "list_save_iter", ":", "\n", "            ", "folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "args", ".", "store_name", ",", "args", ".", "root_log", ",", "'kernels'", ")", "\n", "save_kernels", "(", "data_in", ",", "aux", ",", "folder", "=", "folder", ",", "name", "=", "f'validation_iter_{i}'", ",", "predicted_offsets", "=", "offsets", ")", "\n", "", "rst", "=", "rst", ".", "reshape", "(", "batch_size", ",", "num_crop", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "if", "args", ".", "softmax", ":", "\n", "# take the softmax to normalize the output to probability", "\n", "            ", "rst", "=", "F", ".", "softmax", "(", "rst", ",", "dim", "=", "1", ")", "\n", "", "rst", "=", "rst", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "if", "net", ".", "module", ".", "is_shift", ":", "\n", "                ", "rst", "=", "rst", ".", "reshape", "(", "batch_size", ",", "num_class", ")", "\n", "", "else", ":", "\n", "                ", "rst", "=", "rst", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "num_class", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "batch_size", ",", "num_class", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "net", ".", "is_shift", ":", "\n", "                ", "rst", "=", "rst", ".", "reshape", "(", "batch_size", ",", "num_class", ")", "\n", "", "else", ":", "\n", "                ", "rst", "=", "rst", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "num_class", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "batch_size", ",", "num_class", ")", ")", "\n", "", "", "return", "i", ",", "rst", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.opts.str2bool": [[6, 15], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "       ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.opts.parse_args": [[177, 182], ["parser.parse_args", "models_config.get_models_config"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.opts.parse_args", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.get_models_config"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "from", "ops", "import", "models_config", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "graph_params", ",", "args", ".", "out_pool_size", ",", "args", ".", "out_num_ch", ",", "args", ".", "distill_path", "=", "models_config", ".", "get_models_config", "(", ")", "\n", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.create_model.SpaceTimeModel.__init__": [[6, 19], ["super().__init__", "ops.dyreg.dyregParams", "ops.dyreg.DynamicGraph", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SpaceTimeModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dyreg_params", "=", "dyregParams", "(", ")", "\n", "dyregParams", ".", "offset_lstm_dim", "=", "32", "\n", "self", ".", "dyreg", "=", "DynamicGraph", "(", "dyreg_params", ",", "\n", "backbone_dim", "=", "32", ",", "node_dim", "=", "32", ",", "out_num_ch", "=", "32", ",", "\n", "H", "=", "16", ",", "W", "=", "16", ",", "\n", "iH", "=", "16", ",", "iW", "=", "16", ",", "\n", "project_i3d", "=", "False", ",", "\n", "name", "=", "'lalalal'", ")", "\n", "\n", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.create_model.SpaceTimeModel.forward": [[20, 29], ["create_model.SpaceTimeModel.dyreg", "create_model.SpaceTimeModel.mean().mean().mean", "create_model.SpaceTimeModel.fc", "create_model.SpaceTimeModel.mean().mean", "create_model.SpaceTimeModel.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "dx", "=", "self", ".", "dyreg", "(", "x", ")", "\n", "# you can initialize the dyreg branch as identity function by normalisation, ", "\n", "#   as done in DynamicGraphWrapper found in ./ops/dyreg.py ", "\n", "x", "=", "x", "+", "dx", "\n", "# average over time and space: T, H, W", "\n", "x", "=", "x", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "2", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.create_model.ConvSpaceTimeModel.__init__": [[33, 49], ["super().__init__", "ops.dyreg.dyregParams", "torch.nn.Conv3d", "torch.nn.Conv3d", "ops.dyreg.DynamicGraph", "torch.nn.Conv3d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConvSpaceTimeModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dyreg_params", "=", "dyregParams", "(", ")", "\n", "dyregParams", ".", "offset_lstm_dim", "=", "32", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv3d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv3d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "dyreg", "=", "DynamicGraph", "(", "dyreg_params", ",", "\n", "backbone_dim", "=", "32", ",", "node_dim", "=", "32", ",", "out_num_ch", "=", "32", ",", "\n", "H", "=", "16", ",", "W", "=", "16", ",", "\n", "iH", "=", "16", ",", "iW", "=", "16", ",", "\n", "project_i3d", "=", "False", ",", "\n", "name", "=", "'lalalal'", ")", "\n", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv3d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "avgpool", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.create_model.ConvSpaceTimeModel.forward": [[50, 64], ["torch.nn.functional.relu", "torch.nn.functional.relu", "create_model.ConvSpaceTimeModel.permute().contiguous", "create_model.ConvSpaceTimeModel.dyreg", "dx.permute().contiguous.permute().contiguous.permute().contiguous", "torch.nn.functional.relu", "create_model.ConvSpaceTimeModel.mean().mean().mean", "create_model.ConvSpaceTimeModel.fc", "create_model.ConvSpaceTimeModel.conv1", "create_model.ConvSpaceTimeModel.conv2", "create_model.ConvSpaceTimeModel.conv3", "create_model.ConvSpaceTimeModel.permute", "dx.permute().contiguous.permute().contiguous.permute", "create_model.ConvSpaceTimeModel.mean().mean", "create_model.ConvSpaceTimeModel.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "input", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "dx", "=", "self", ".", "dyreg", "(", "input", ")", "\n", "dx", "=", "dx", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "# you can initialize the dyreg branch as identity function by normalisation, ", "\n", "#   as done in DynamicGraphWrapper found in ./ops/dyreg.py ", "\n", "x", "=", "x", "+", "dx", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "# average over time and space: T, H, W", "\n", "x", "=", "x", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.count_parameters": [[39, 76], ["print", "print", "print_learnable_params.sort", "print", "model.named_parameters", "print", "print", "ops.utils.count_params", "print", "ops.utils.count_params", "print", "ops.utils.count_params", "print", "print", "learnable_params.append", "print_learnable_params.append", "list_params.append", "print", "name.replace.replace", "print", "ops.utils.count_params"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.count_params", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.count_params", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.count_params", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.count_params"], ["", "def", "count_parameters", "(", "policies", ",", "model", ")", ":", "\n", "    ", "learnable_params", "=", "[", "]", "\n", "print_learnable_params", "=", "[", "]", "\n", "for", "p", "in", "policies", ":", "\n", "        ", "list_name_param_tuple", "=", "p", "[", "'params'", "]", "\n", "list_params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "list_name_param_tuple", ":", "\n", "            ", "learnable_params", ".", "append", "(", "name", ")", "\n", "print_learnable_params", ".", "append", "(", "(", "name", ",", "param", ".", "shape", ")", ")", "\n", "list_params", ".", "append", "(", "param", ")", "\n", "", "p", "[", "'params'", "]", "=", "list_params", "\n", "", "print", "(", "'_'", "*", "120", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "print", "(", "'Learnable parameters'", ")", "\n", "print_learnable_params", ".", "sort", "(", ")", "\n", "for", "name", ",", "shape", "in", "print_learnable_params", ":", "\n", "            ", "print", "(", "f'{name} shape: {shape}'", ")", "\n", "\n", "", "print", "(", "'NOT Learnable parameters'", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "name", "=", "name", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "if", "name", "not", "in", "learnable_params", ":", "\n", "                ", "print", "(", "f'{name} shape: {param.shape}'", ")", "\n", "", "", "print", "(", "'_'", "*", "120", ")", "\n", "\n", "print", "(", "f'Total number of params: {count_params(print_learnable_params)}'", ")", "\n", "\n", "number_params", "=", "count_params", "(", "print_learnable_params", ",", "contains", "=", "[", "'graph'", ",", "'norm_dict.residual_norm'", "]", ")", "\n", "print", "(", "f'Graph number of params: {number_params}'", ")", "\n", "\n", "number_params", "=", "count_params", "(", "print_learnable_params", ",", "contains", "=", "[", "'rstg'", ",", "'norm_dict.residual_norm'", "]", ")", "\n", "print", "(", "f'RSTG number of params: {number_params}'", ")", "\n", "\n", "number_params", "=", "count_params", "(", "print_learnable_params", ",", "contains", "=", "[", "'dynamic'", "]", ",", "ignores", "=", "[", "'rstg'", "]", ")", "\n", "print", "(", "f'Dynamic number of params: {number_params}'", ")", "\n", "print", "(", "'_'", "*", "120", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.main": [[78, 401], ["opts.parse_args", "print", "vars", "ops.dataset_config.return_dataset", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "ops.models.TSN", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.parallel.DistributedDataParallel.get_optim_policies", "torch.nn.parallel.DistributedDataParallel.get_augmentation", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "main_standard.count_parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ops.transforms.GroupNormalize", "ops.dataset.TSNDataSet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ops.dataset.TSNDataSet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "main_standard.validate", "main_standard.save_checkpoint", "range", "print", "open", "f.write", "main_standard.check_rootfolders", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel.to", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "os.path.isfile", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "open", "tensorboardX.SummaryWriter", "main_standard.validate", "tensorboardX.SummaryWriter.close", "ops.utils.LearnedParamChecker", "main_standard.adjust_learning_rate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "main_standard.train", "os.path.join", "str", "ops.temporal_shift.make_temporal_pool", "print", "torch.load", "torch.load", "torch.load", "print", "torch.nn.parallel.DistributedDataParallel.state_dict", "print", "ckpt_dict.items", "ckpt_dict.items", "model.state_dict.update", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "os.path.isfile", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "os.path.join", "open", "f.write", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "train_sampler.set_epoch", "ops.utils.LearnedParamChecker.compare_current_initial_params", "main_standard.validate", "max", "print", "k.replace.replace", "k.replace.replace", "k.replace.replace", "model.state_dict.items", "ops.temporal_shift.make_temporal_pool", "print", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.state_dict", "ckpt_dict.items", "model.state_dict.items", "model.state_dict.update", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "print", "print", "ops.temporal_shift.make_temporal_pool", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "os.path.join", "str", "os.path.join", "tensorboardX.SummaryWriter.add_scalar", "print", "open.write", "open.flush", "main_standard.save_checkpoint", "getattr", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "k.replace.replace", "k.replace.replace", "ops.transforms.Stack", "ops.transforms.ToTorchFormatTensor", "ops.transforms.GroupScale", "ops.transforms.GroupCenterCrop", "ops.transforms.Stack", "ops.transforms.ToTorchFormatTensor", "main_standard.save_checkpoint", "k.replace.replace", "k.replace.replace", "k.replace.replace", "int", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.opts.parse_args", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_config.return_dataset", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.get_optim_policies", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.get_augmentation", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.count_parameters", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.validate", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.save_checkpoint", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.check_rootfolders", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.validate", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.adjust_learning_rate", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.train", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.make_temporal_pool", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.LearnedParamChecker.compare_current_initial_params", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.validate", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.make_temporal_pool", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.make_temporal_pool", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.save_checkpoint", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.save_checkpoint"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "parse_args", "(", ")", "\n", "\n", "print", "(", "'Arguments:'", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "print", "(", "f'{arg}: {getattr(args, arg)}'", ")", "\n", "\n", "", "num_class", ",", "args", ".", "train_list", ",", "args", ".", "val_list", ",", "args", ".", "root_path", ",", "prefix", "=", "dataset_config", ".", "return_dataset", "(", "args", ".", "dataset", ",", "\n", "args", ".", "modality", ")", "\n", "\n", "#prepare the args according to the current model", "\n", "full_arch_name", "=", "args", ".", "arch", "\n", "if", "args", ".", "shift", ":", "\n", "        ", "full_arch_name", "+=", "'_shift{}_{}'", ".", "format", "(", "args", ".", "shift_div", ",", "args", ".", "shift_place", ")", "\n", "", "if", "args", ".", "temporal_pool", ":", "\n", "        ", "full_arch_name", "+=", "'_tpool'", "\n", "", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "\n", "[", "'TSM'", "+", "args", ".", "name", ",", "args", ".", "dataset", ",", "args", ".", "modality", ",", "full_arch_name", ",", "args", ".", "consensus_type", ",", "'segment%d'", "%", "args", ".", "num_segments", ",", "\n", "'e{}'", ".", "format", "(", "args", ".", "epochs", ")", ",", "f'lr_{args.lr}'", ",", "f'batch_{args.batch_size}'", "]", ")", "\n", "if", "args", ".", "pretrain", "!=", "'imagenet'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "pretrain", ")", "\n", "", "if", "args", ".", "lr_type", "!=", "'step'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "lr_type", ")", "\n", "", "if", "args", ".", "dense_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_dense'", "\n", "", "if", "args", ".", "non_local", ">", "0", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_nl'", "\n", "", "if", "args", ".", "suffix", "is", "not", "None", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "suffix", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "args", ".", "store_name", "+", "'_args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "args", ".", "store_name", "=", "''", "\n", "print", "(", "'storing name: '", "+", "args", ".", "store_name", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "check_rootfolders", "(", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "world_size", "=", "NGPU", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "'env://'", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "args", ".", "local_rank", ")", "\n", "\n", "", "model", "=", "TSN", "(", "num_class", ",", "args", ".", "num_segments", ",", "args", ".", "modality", ",", "\n", "base_model", "=", "args", ".", "arch", ",", "\n", "consensus_type", "=", "args", ".", "consensus_type", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "img_feature_dim", "=", "args", ".", "img_feature_dim", ",", "\n", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "\n", "pretrain", "=", "args", ".", "pretrain", ",", "\n", "is_shift", "=", "args", ".", "shift", ",", "shift_div", "=", "args", ".", "shift_div", ",", "shift_place", "=", "args", ".", "shift_place", ",", "\n", "fc_lr5", "=", "not", "(", "args", ".", "tune_from", "and", "args", ".", "dataset", "in", "args", ".", "tune_from", ")", ",", "\n", "temporal_pool", "=", "args", ".", "temporal_pool", ",", "\n", "non_local", "=", "args", ".", "non_local", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "\n", "", "crop_size", "=", "model", ".", "crop_size", "\n", "scale_size", "=", "model", ".", "scale_size", "\n", "input_mean", "=", "model", ".", "input_mean", "\n", "input_std", "=", "model", ".", "input_std", "\n", "\n", "policies", "=", "model", ".", "get_optim_policies", "(", ")", "\n", "train_augmentation", "=", "model", ".", "get_augmentation", "(", "flip", "=", "False", "if", "'something'", "in", "args", ".", "dataset", "else", "True", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "dev", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ",", "\n", ")", "\n", "#count and print learnable parameters ", "\n", "", "count_parameters", "(", "policies", ",", "model", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policies", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "#restore parameters from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "temporal_pool", ":", "\n", "            ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "print", "(", "args", ".", "start_epoch", ")", "\n", "ckpt_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "print", "(", "'checkpoint parameters'", ")", "\n", "for", "k", ",", "v", "in", "ckpt_dict", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f'{k} shape: {v.shape}'", ")", "\n", "\n", "", "restore_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "ckpt_dict", ".", "items", "(", ")", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "'.block'", ",", "'.0.block'", ")", "\n", "k", "=", "k", ".", "replace", "(", "'.dynamic_graph.'", ",", "'.1.dynamic_graph.'", ")", "\n", "k", "=", "k", ".", "replace", "(", "'.norm_dict.residual_norm'", ",", "'.1.norm_dict.residual_norm'", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "k", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "\n", "# don't load constants", "\n", "", "if", "(", "'dynamic_graph.ph'", "not", "in", "k", "\n", "and", "'dynamic_graph.pw'", "not", "in", "k", "\n", "and", "'dynamic_graph.arange_h'", "not", "in", "k", "\n", "and", "'dynamic_graph.arange_w'", "not", "in", "k", "\n", ")", ":", "\n", "                    ", "restore_dict", "[", "k", "]", "=", "v", "\n", "", "if", "'base_model.map_final_project'", "in", "k", ":", "\n", "                    ", "new_name", "=", "k", ".", "replace", "(", "'base_model.'", ",", "''", ")", "\n", "restore_dict", "[", "new_name", "]", "=", "v", "\n", "del", "restore_dict", "[", "k", "]", "\n", "\n", "\n", "", "", "if", "args", ".", "replace_ignore", ":", "\n", "                ", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "'ignore'", "in", "k", ":", "\n", "                        ", "old_name", "=", "k", ".", "replace", "(", "'ignore.'", ",", "''", ")", "\n", "ckpt_val", "=", "ckpt_dict", "[", "old_name", "]", "\n", "del", "restore_dict", "[", "old_name", "]", "\n", "restore_dict", "[", "k", "]", "=", "ckpt_val", "\n", "", "", "", "model_dict", ".", "update", "(", "restore_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "\n", "#restore subset of parameters from an existing checkpoint", "\n", "", "", "elif", "args", ".", "tune_from", ":", "\n", "        ", "if", "args", ".", "temporal_pool", ":", "\n", "            ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "tune_from", ")", ":", "\n", "            ", "print", "(", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "tune_from", ")", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "tune_from", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "\n", "ckpt_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "restore_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "ckpt_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "(", "'dynamic_graph.ph'", "not", "in", "k", "\n", "and", "'dynamic_graph.pw'", "not", "in", "k", "\n", "and", "'dynamic_graph.arange_h'", "not", "in", "k", "\n", "and", "'dynamic_graph.arange_w'", "not", "in", "k", "\n", "and", "'new_fc'", "not", "in", "k", "# do not restore last fc", "\n", ")", ":", "\n", "                    ", "restore_dict", "[", "k", "]", "=", "v", "\n", "", "if", "'base_model.map_final_project'", "in", "k", ":", "\n", "                    ", "new_name", "=", "k", ".", "replace", "(", "'base_model.'", ",", "''", ")", "\n", "restore_dict", "[", "new_name", "]", "=", "v", "\n", "del", "restore_dict", "[", "k", "]", "\n", "\n", "", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "'ignore'", "in", "k", ":", "\n", "                    ", "old_name", "=", "k", ".", "replace", "(", "'ignore.'", ",", "''", ")", "\n", "ckpt_val", "=", "ckpt_dict", "[", "old_name", "]", "\n", "del", "restore_dict", "[", "old_name", "]", "\n", "restore_dict", "[", "k", "]", "=", "ckpt_val", "\n", "", "", "model_dict", ".", "update", "(", "restore_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "print", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "temporal_pool", ":", "\n", "            ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "#Load data", "\n", "normalize", "=", "GroupNormalize", "(", "input_mean", ",", "input_std", ")", "\n", "data_length", "=", "1", "\n", "\n", "train_dataset", "=", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "train_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "train_augmentation", ",", "\n", "Stack", "(", "roll", "=", "(", "False", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "True", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ",", "split", "=", "'train'", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "\n", "num_replicas", "=", "NGPU", ",", "\n", "rank", "=", "args", ".", "local_rank", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "None", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "(", "args", ".", "workers", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "0", ")", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ")", "# prevent something not % n_GPU", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "train_loader", ".", "shuffle", "=", "True", "\n", "\n", "", "val_dataset", "=", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "val_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "random_shift", "=", "False", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "int", "(", "scale_size", ")", ")", ",", "\n", "GroupCenterCrop", "(", "crop_size", ")", ",", "\n", "Stack", "(", "roll", "=", "(", "False", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "True", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ",", "split", "=", "'val'", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "val_dataset", ",", "\n", "num_replicas", "=", "NGPU", ",", "\n", "rank", "=", "args", ".", "local_rank", ",", "\n", "shuffle", "=", "False", "\n", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "None", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "(", "args", ".", "workers", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "0", ")", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "val_loader", ".", "shuffle", "=", "False", "\n", "\n", "", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "dev", ")", "\n", "\n", "for", "group", "in", "policies", ":", "\n", "        ", "print", "(", "(", "'group: {} has {} params, lr_mult: {}, decay_mult: {}'", ".", "format", "(", "\n", "group", "[", "'name'", "]", ",", "len", "(", "group", "[", "'params'", "]", ")", ",", "group", "[", "'lr_mult'", "]", ",", "group", "[", "'decay_mult'", "]", ")", ")", ")", "\n", "\n", "# only master thread", "\n", "", "log_training", "=", "None", "\n", "tf_writer", "=", "None", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "args", ".", "store_name", ",", "args", ".", "root_log", ",", "'log.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "args", ".", "store_name", ",", "args", ".", "root_log", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "args", ".", "store_name", ",", "args", ".", "root_log", ")", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ".", "start_epoch", "-", "1", ",", "log_training", ",", "tf_writer", ",", "max_iters", "=", "None", ")", "\n", "tf_writer", ".", "close", "(", ")", "\n", "return", "\n", "\n", "", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ".", "start_epoch", "-", "1", ",", "log_training", ",", "tf_writer", ",", "max_iters", "=", "None", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "args", ".", "start_epoch", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "False", ",", "aux_name", "=", "'initial_model'", ")", "\n", "\n", "# save initial parameters:", "\n", "param_checker", "=", "None", "\n", "if", "args", ".", "check_learned_params", ":", "\n", "        ", "param_checker", "=", "LearnedParamChecker", "(", "model", ")", "\n", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ".", "lr_type", ",", "args", ".", "lr_steps", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "# train for one epoch", "\n", "", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log_training", ",", "tf_writer", ",", "param_checker", ",", "max_iters", "=", "None", ")", "\n", "\n", "if", "args", ".", "check_learned_params", ":", "\n", "            ", "param_checker", ".", "compare_current_initial_params", "(", ")", "\n", "\n", "\n", "# evaluate on validation set", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_freq", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log_training", ",", "tf_writer", ",", "max_iters", "=", "None", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1_best'", ",", "best_prec1", ",", "epoch", ")", "\n", "\n", "output_best", "=", "'Best Prec@1: %.3f\\n'", "%", "(", "best_prec1", ")", "\n", "print", "(", "output_best", ")", "\n", "log_training", ".", "write", "(", "output_best", "+", "'\\n'", ")", "\n", "log_training", ".", "flush", "(", ")", "\n", "\n", "# Overwrite last checkpoint at each epoch", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "(", "5", "*", "args", ".", "eval_freq", ")", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "                    ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ",", "aux_name", "=", "f'epoch_{epoch}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.transform": [[404, 412], ["np.stack"], "function", ["None"], ["", "", "", "", "", "def", "transform", "(", "point", ",", "dim", ",", "crop_trans", ")", ":", "\n", "# crop_trans: (resize_ratio_h, resize_ratio_w, offset_h, offset_w)", "\n", "    ", "abs_dh", "=", "point", "[", ":", ",", ":", ",", "0", "]", "/", "crop_trans", "[", ":", ",", ":", ",", "0", "]", "+", "crop_trans", "[", ":", ",", ":", ",", "2", "]", "\n", "abs_dw", "=", "point", "[", ":", ",", ":", ",", "1", "]", "/", "crop_trans", "[", ":", ",", ":", ",", "1", "]", "+", "crop_trans", "[", ":", ",", ":", ",", "3", "]", "\n", "abs_h", "=", "dim", "[", ":", ",", ":", ",", "0", "]", "/", "crop_trans", "[", ":", ",", ":", ",", "0", "]", "\n", "abs_w", "=", "dim", "[", ":", ",", ":", ",", "1", "]", "/", "crop_trans", "[", ":", ",", ":", ",", "1", "]", "\n", "# return [float(abs_dh.cpu().numpy()), float(abs_dw.cpu().numpy()), float(abs_h.cpu().numpy()), float(abs_w.cpu().numpy())]", "\n", "return", "np", ".", "stack", "(", "[", "abs_h", ",", "abs_w", ",", "abs_dh", ",", "abs_dw", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.train": [[413, 513], ["ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model.train", "time.time", "print", "enumerate", "list", "ops.utils.AverageMeter.update", "target.to.to", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "ops.utils.accuracy", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "criterion.backward", "optimizer.step", "optimizer.zero_grad", "ops.utils.AverageMeter.update", "time.time", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "model.module.partialBN", "model.module.partialBN", "model.partialBN", "model.partialBN", "np.linspace().astype", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "os.path.join", "ops.utils.save_kernels", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "sys.stdout.flush", "gc.collect", "param_checker.compare_current_initial_params", "time.time", "time.time", "log.write", "log.flush", "np.linspace", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len", "len"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.train", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.accuracy", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.InplaceShift.backward", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.partialBN", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.partialBN", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.partialBN", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.partialBN", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.save_kernels", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.LearnedParamChecker.compare_current_initial_params"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log", ",", "tf_writer", ",", "param_checker", ",", "max_iters", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "args", ".", "no_partialbn", ":", "\n", "            ", "model", ".", "module", ".", "partialBN", "(", "False", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "module", ".", "partialBN", "(", "True", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "no_partialbn", ":", "\n", "            ", "model", ".", "partialBN", "(", "False", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "partialBN", "(", "True", ")", "\n", "\n", "", "", "list_save_iter", "=", "list", "(", "np", ".", "linspace", "(", "0", ",", "len", "(", "train_loader", ")", "//", "1", ",", "5", ")", ".", "astype", "(", "int", ")", ")", "[", ":", "4", "]", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "print", "(", "f'Epoch: {epoch}'", ")", "\n", "for", "i", ",", "(", "_", ",", "input", ",", "target", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "check_learned_params", ":", "\n", "            ", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "param_checker", ".", "compare_current_initial_params", "(", ")", "\n", "\n", "", "", "if", "max_iters", "is", "not", "None", ":", "\n", "            ", "if", "i", ">", "max_iters", ":", "\n", "                ", "break", "\n", "# measure data loading time", "\n", "", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "target", "=", "target", ".", "to", "(", "dev", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "\n", "output", ",", "model_aux_feats", "=", "model", "(", "input_var", ")", "\n", "offsets", "=", "model_aux_feats", "[", "'offsets'", "]", "\n", "aux", "=", "model_aux_feats", "[", "'interm_feats'", "]", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "use_rstg", "and", "i", "in", "list_save_iter", "and", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "args", ".", "store_name", ",", "args", ".", "root_log", ",", "'kernels'", ")", "\n", "save_kernels", "(", "input", ",", "aux", ",", "folder", "=", "folder", ",", "name", "=", "f'train_epoch{epoch}_iter_{i}_{args.local_rank}'", ",", "predicted_offsets", "=", "offsets", ")", "\n", "\n", "", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "# args.distributed:", "\n", "                ", "effective_batch_size", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "*", "args", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "effective_batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "output", "=", "(", "'[rank {rank}] Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", "//", "(", "1", "if", "args", ".", "dataset", "!=", "'syncMNIST'", "else", "effective_batch_size", ")", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "rank", "=", "args", ".", "local_rank", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "3", "]", "[", "'lr'", "]", ")", ")", "# TODO", "\n", "\n", "print", "(", "output", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "i", "%", "100", "==", "0", ":", "\n", "            ", "gc", ".", "collect", "(", ")", "\n", "\n", "", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.save_data": [[514, 524], ["open", "pickle.dump", "open", "isinstance", "data.items", "f.write", "f.write", "str"], "function", ["None"], ["", "", "def", "save_data", "(", "data", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", "+", "'.pickle'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "filename", "+", "'.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "f", ".", "write", "(", "f'{k}: {v}\\n'", ")", "\n", "", "", "else", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.validate": [[525, 655], ["ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "model.eval", "time.time", "print", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model_aux_feats[].items", "ops.utils.save_mean_kernels", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "time.time", "target.to.to", "model", "ops.utils.accuracy", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "time.time", "os.path.join", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "log.write", "log.flush", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "model", "model_aux_feats[].items", "criterion", "criterion", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "ops.utils.save_kernels", "print", "print", "c_kernel.detach().cpu().numpy().mean.view", "c_kernel.detach().cpu().numpy().mean.detach().cpu().numpy().mean", "target.to.view", "time.time", "log.write", "log.flush", "len", "c_kernel.detach().cpu().numpy().mean.detach().cpu().numpy", "c_kernel.detach().cpu().numpy().mean.detach().cpu", "c_kernel.detach().cpu().numpy().mean.detach"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.save_mean_kernels", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.accuracy", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.save_kernels"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ",", "max_iters", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# warmup BN statistics", "\n", "if", "args", ".", "warmup_validate", "==", "True", ":", "\n", "        ", "warm_max_iters", "=", "500", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                ", "if", "i", "%", "20", "==", "0", ":", "\n", "                    ", "print", "(", "f'Warmup iter: {i}'", ")", "\n", "\n", "", "if", "i", ">", "warm_max_iters", ":", "\n", "                    ", "break", "\n", "", "output", ",", "_", "=", "model", "(", "input", ")", "\n", "\n", "", "", "", "model", ".", "eval", "(", ")", "\n", "# TODO: de un-hardcodat", "\n", "E_kernels", "=", "{", "'layer2_block2'", ":", "0", ",", "'layer3_block4'", ":", "0", ",", "'layer4_block1'", ":", "0", "}", "\n", "if", "args", ".", "arch", "==", "'resnet18'", ":", "\n", "        ", "E_kernels", "=", "{", "'layer2_block1'", ":", "0", ",", "'layer3_block1'", ":", "0", ",", "'layer4_block1'", ":", "0", "}", "\n", "", "elif", "args", ".", "arch", "==", "'resnet34'", ":", "\n", "        ", "E_kernels", "=", "{", "'layer2_block2'", ":", "0", ",", "'layer3_block4'", ":", "0", ",", "'layer4_block1'", ":", "0", "}", "\n", "", "elif", "args", ".", "arch", "==", "'wide_resnet50_2'", ":", "\n", "        ", "E_kernels", "=", "{", "'layer2_block2'", ":", "0", ",", "'layer3_block1'", ":", "0", ",", "'layer4_block1'", ":", "0", "}", "\n", "", "elif", "args", ".", "arch", "==", "'resnet101'", ":", "\n", "        ", "E_kernels", "=", "{", "'layer2_block2'", ":", "0", ",", "'layer3_block1'", ":", "0", ",", "'layer3_block4'", ":", "0", ",", "'layer4_block1'", ":", "0", "}", "\n", "\n", "\n", "# E_kernels = {'layer3_block4' : 0}", "\n", "\n", "", "nr_batches", "=", "0", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "gt_boxes", ",", "input", ",", "target", ",", "detected_boxes", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "time1", "=", "time", ".", "time", "(", ")", "\n", "if", "max_iters", "is", "not", "None", ":", "\n", "                ", "if", "i", ">", "max_iters", ":", "\n", "                    ", "break", "\n", "", "", "target", "=", "target", ".", "to", "(", "dev", ")", "\n", "output", ",", "model_aux_feats", "=", "model", "(", "input", ")", "\n", "\n", "offsets", "=", "model_aux_feats", "[", "'offsets'", "]", "\n", "aux", "=", "model_aux_feats", "[", "'interm_feats'", "]", "\n", "\n", "# add all kernels", "\n", "nr_batches", "+=", "1", "\n", "if", "args", ".", "use_rstg", ":", "\n", "                ", "for", "key", ",", "val", "in", "model_aux_feats", "[", "'kernel'", "]", ".", "items", "(", ")", ":", "\n", "                    ", "c_kernel", "=", "model_aux_feats", "[", "'kernel'", "]", "[", "key", "]", "\n", "c_kernel", "=", "c_kernel", ".", "view", "(", "args", ".", "batch_size", ",", "args", ".", "num_segments", ",", "9", ",", "c_kernel", ".", "shape", "[", "-", "2", "]", ",", "c_kernel", ".", "shape", "[", "-", "1", "]", ")", "\n", "c_kernel", "=", "c_kernel", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "mean", "(", "0", ")", "\n", "E_kernels", "[", "key", "]", "=", "E_kernels", "[", "key", "]", "+", "c_kernel", "\n", "\n", "", "", "if", "args", ".", "dataset", "==", "'syncMNIST'", ":", "\n", "                ", "loss", "=", "criterion", "(", "output", ",", "target", ".", "view", "(", "target", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "\n", "# measure accuracy and record loss", "\n", "", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "args", ".", "store_name", ",", "args", ".", "root_log", ",", "'kernels'", ")", "\n", "#if i % args.print_freq == 0:", "\n", "if", "args", ".", "dataset", "==", "'others'", "or", "(", "args", ".", "use_rstg", "and", "i", "in", "[", "10", ",", "100", ",", "1000", ",", "2000", ",", "3000", ",", "4000", ",", "5000", "]", ")", ":", "# and not args.evaluate:", "\n", "                ", "save_kernels", "(", "input", ",", "aux", ",", "folder", "=", "folder", ",", "name", "=", "f'valid_epoch_{epoch}_iter_{i}_{args.local_rank}'", ",", "target_boxes_val", "=", "gt_boxes", ",", "predicted_offsets", "=", "offsets", ")", "\n", "\n", "", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'[rank {rank}] Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", "//", "(", "1", "if", "args", ".", "dataset", "!=", "'syncMNIST'", "else", "args", ".", "batch_size", ")", ",", "\n", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "rank", "=", "args", ".", "local_rank", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "output", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", "and", "log", "is", "not", "None", ":", "\n", "                    ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "", "", "if", "args", ".", "use_rstg", ":", "\n", "        ", "for", "key", ",", "_", "in", "model_aux_feats", "[", "'kernel'", "]", ".", "items", "(", ")", ":", "\n", "            ", "E_kernels", "[", "key", "]", "/=", "nr_batches", "\n", "\n", "", "save_mean_kernels", "(", "E_kernels", ",", "epoch", "=", "epoch", ",", "folder", "=", "folder", ")", "\n", "\n", "", "output", "=", "(", "'Process {local_rank} Individual Testing Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ",", "local_rank", "=", "args", ".", "local_rank", ")", ")", "\n", "print", "(", "output", ")", "\n", "\n", "top1_avg", "=", "torch", ".", "tensor", "(", "top1", ".", "avg", ")", ".", "to", "(", "dev", ")", "\n", "top5_avg", "=", "torch", ".", "tensor", "(", "top5", ".", "avg", ")", ".", "to", "(", "dev", ")", "\n", "losses_avg", "=", "torch", ".", "tensor", "(", "losses", ".", "avg", ")", ".", "to", "(", "dev", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "distributed", ".", "reduce", "(", "top1_avg", ",", "dst", "=", "0", ")", "\n", "torch", ".", "distributed", ".", "reduce", "(", "top5_avg", ",", "dst", "=", "0", ")", "\n", "torch", ".", "distributed", ".", "reduce", "(", "losses_avg", ",", "dst", "=", "0", ")", "\n", "\n", "", "top1_avg", "=", "top1_avg", "/", "NGPU", "\n", "top5_avg", "=", "top5_avg", "/", "NGPU", "\n", "losses_avg", "=", "losses_avg", "/", "NGPU", "\n", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "all_output", "=", "(", "'[Reduced] Testing Results: Prec@1 {top1:.3f} Prec@5 {top5:.3f} Loss {loss:.5f}'", "\n", ".", "format", "(", "top1", "=", "top1_avg", ",", "top5", "=", "top5_avg", ",", "loss", "=", "losses_avg", ")", ")", "\n", "print", "(", "all_output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'loss/test'", ",", "losses_avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1'", ",", "top1_avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top5'", ",", "top5_avg", ",", "epoch", ")", "\n", "\n", "", "", "return", "top1_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.save_checkpoint": [[657, 663], ["torch.save", "torch.save", "torch.save", "shutil.copyfile", "filename.replace"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "aux_name", "=", "''", ")", ":", "\n", "# filename = '%s/%s/ckpt.pth.tar' % (args.model_dir, args.store_name, args.root_model)", "\n", "    ", "filename", "=", "f'{args.model_dir}/{args.store_name}/{ args.root_model}/{aux_name}ckpt.pth.tar'", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "filename", ".", "replace", "(", "f'{aux_name}ckpt.pth.tar'", ",", "'best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.adjust_learning_rate": [[665, 688], ["sum", "np.array", "sum", "math.cos", "np.array"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr_type", ",", "lr_steps", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "lr_type", "==", "'step'", ":", "\n", "        ", "decay", "=", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "lr_steps", ")", ")", ")", "\n", "lr", "=", "args", ".", "lr", "*", "decay", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "elif", "lr_type", "==", "'small_init_step'", ":", "\n", "        ", "if", "epoch", "<", "10", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "0.2", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "else", ":", "\n", "            ", "decay", "=", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "lr_steps", ")", ")", ")", "\n", "lr", "=", "args", ".", "lr", "*", "decay", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "", "elif", "lr_type", "==", "'cos'", ":", "\n", "        ", "import", "math", "\n", "lr", "=", "0.5", "*", "args", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.check_rootfolders": [[690, 699], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.makedirs"], "function", ["None"], ["", "", "def", "check_rootfolders", "(", ")", ":", "\n", "    ", "\"\"\"Create log and model folder\"\"\"", "\n", "folders_util", "=", "[", "args", ".", "model_dir", ",", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "args", ".", "store_name", ",", "args", ".", "root_log", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "args", ".", "store_name", ",", "args", ".", "root_model", ")", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "'creating folder '", "+", "folder", ")", "\n", "os", ".", "makedirs", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_other.split": [[24, 28], ["range", "len"], "function", ["None"], ["def", "split", "(", "l", ",", "n", ")", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from l.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_other.extract": [[30, 42], ["os.system"], "function", ["None"], ["", "", "def", "extract", "(", "video", ",", "tmpl", "=", "'%06d.jpg'", ")", ":", "\n", "# os.system(f'ffmpeg -i {VIDEO_ROOT}/{video} -vf -threads 1 -vf scale=-1:256 -q:v 0 '", "\n", "#           f'{FRAME_ROOT}/{video[:-5]}/{tmpl}')", "\n", "# cmd0 = 'ffmpeg -i \\\"{}/{}\\\" -threads 1 -vf scale=-1:256 -q:v 0 \\\"{}/{}/%06d.jpg\\\"'.format(VIDEO_ROOT, video,", "\n", "#  FRAME_ROOT, video[:-5])", "\n", "\n", "    ", "cmd", "=", "f'ffmpeg -t 00:0{num_sec} '", "\n", "cmd", "=", "cmd", "+", "'-i \\\"{}/{}\\\" -threads 1 -vf scale=-1:256 -q:v 0 \\\"{}/{}/%06d.jpg\\\"'", ".", "format", "(", "VIDEO_ROOT", ",", "video", ",", "\n", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", "\n", "\n", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_other.target": [[44, 56], ["os.path.join", "os.path.exists", "os.makedirs", "vid2img_other.extract", "os.listdir", "os.path.join", "os.path.join", "len", "print", "vid2img_other.extract", "len"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.extract", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.extract"], ["", "def", "target", "(", "video_list", ")", ":", "\n", "    ", "for", "video", "in", "video_list", ":", "\n", "        ", "video_path", "=", "os", ".", "path", ".", "join", "(", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "#print(f'video {video_path} does not exists')", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", ")", "\n", "extract", "(", "video", ")", "\n", "", "else", ":", "\n", "            ", "dir_files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", ")", "\n", "if", "len", "(", "dir_files", ")", "<=", "10", ":", "\n", "                ", "print", "(", "f'folder {video} has only {len(dir_files)} frames'", ")", "\n", "extract", "(", "video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split": [[13, 17], ["range", "len"], "function", ["None"], ["def", "split", "(", "l", ",", "n", ")", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from l.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.extract": [[19, 23], ["os.system"], "function", ["None"], ["", "", "def", "extract", "(", "video", ",", "tmpl", "=", "'%06d.jpg'", ")", ":", "\n", "    ", "cmd", "=", "'ffmpeg -i \\\"{}/{}\\\" -threads 1 -vf scale=-1:256 -q:v 0 \\\"{}/{}/%06d.jpg\\\"'", ".", "format", "(", "VIDEO_ROOT", ",", "video", ",", "\n", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.target": [[25, 36], ["os.path.join", "os.path.exists", "os.makedirs", "vid2img_sthv2.extract", "os.listdir", "os.path.join", "os.path.join", "print", "vid2img_sthv2.extract", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.extract", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.extract"], ["", "def", "target", "(", "video_list", ")", ":", "\n", "    ", "for", "video", "in", "video_list", ":", "\n", "        ", "video_path", "=", "os", ".", "path", ".", "join", "(", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", ")", "\n", "extract", "(", "video", ")", "\n", "", "else", ":", "\n", "            ", "dir_files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", ")", "\n", "if", "len", "(", "dir_files", ")", "<=", "10", "and", "len", "(", "dir_files", ")", "!=", "0", ":", "\n", "                ", "print", "(", "f'folder {video} has only {len(dir_files)} frames'", ")", "\n", "extract", "(", "video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraph.__init__": [[27, 99], ["torch.nn.Module.__init__", "RSTG", "dyreg.DynamicGraph.compute_anchors", "dyreg.DynamicGraph.register_buffer", "dyreg.DynamicGraph.register_buffer", "torch.nn.ModuleDict", "dyreg.DynamicGraph.create_offset_modules", "torch.arange().unsqueeze().unsqueeze().to", "torch.arange().unsqueeze().unsqueeze().to", "dyreg.DynamicGraph.register_buffer", "dyreg.DynamicGraph.register_buffer", "LayerNormAffineXC", "LayerNormAffineXC", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Linear", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "LayerNormAffine2D", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.compute_anchors", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.create_offset_modules"], ["    ", "def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "backbone_dim", "=", "1024", ",", "\n", "H", "=", "14", ",", "W", "=", "14", ",", "oH", "=", "7", ",", "oW", "=", "7", ",", "iH", "=", "None", ",", "iW", "=", "None", ",", "\n", "h", "=", "3", ",", "w", "=", "3", ",", "\n", "node_dim", "=", "512", ",", "out_num_ch", "=", "2048", ",", "project_i3d", "=", "False", ",", "name", "=", "''", ")", ":", "\n", "        ", "super", "(", "DynamicGraph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "params", "=", "params", "\n", "# the dimenstion of the input used at training time", "\n", "# to be used for resize for fullsize evaluation", "\n", "self", ".", "iH", "=", "iH", "\n", "self", ".", "iW", "=", "iW", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "rstg", "=", "RSTG", "(", "params", ",", "backbone_dim", "=", "backbone_dim", ",", "node_dim", "=", "node_dim", ",", "project_i3d", "=", "project_i3d", ")", "\n", "\n", "self", ".", "backbone_dim", "=", "backbone_dim", "\n", "self", ".", "C", "=", "self", ".", "rstg", ".", "node_dim", "\n", "self", ".", "out_num_ch", "=", "out_num_ch", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "W", "=", "W", "\n", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "num_nodes", "=", "self", ".", "h", "*", "self", ".", "w", "\n", "self", ".", "project_i3d", "=", "project_i3d", "\n", "ph", ",", "pw", "=", "self", ".", "compute_anchors", "(", ")", "\n", "self", ".", "register_buffer", "(", "'ph_buf'", ",", "ph", ")", "\n", "self", ".", "register_buffer", "(", "'pw_buf'", ",", "pw", ")", "\n", "\n", "self", ".", "norm_dict", "=", "nn", ".", "ModuleDict", "(", "{", "}", ")", "\n", "# input projection           ", "\n", "if", "self", ".", "project_i3d", ":", "\n", "            ", "self", ".", "project_i3d_linear", "=", "nn", ".", "Conv2d", "(", "backbone_dim", ",", "self", ".", "C", ",", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "project_back_i3d_linear", "=", "nn", ".", "Conv2d", "(", "self", ".", "C", ",", "backbone_dim", ",", "[", "1", ",", "1", "]", ")", "\n", "\n", "", "self", ".", "create_offset_modules", "(", ")", "\n", "\n", "# project kernel", "\n", "if", "self", ".", "params", ".", "full_res", ":", "\n", "            ", "self", ".", "kernel_projection1", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "iH", "*", "self", ".", "iW", ",", "self", ".", "C", ")", "\n", "self", ".", "kernel_location_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "self", ".", "iH", ",", "self", ".", "iW", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "kernel_projection1", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "H", "*", "self", ".", "W", ",", "self", ".", "C", ")", "\n", "\n", "# B*T x 1 x H ", "\n", "", "arange_h", "=", "(", "torch", ".", "arange", "(", "0", ",", "self", ".", "H", ")", "\n", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", ".", "to", "(", "self", ".", "kernel_projection1", ".", "weight", ".", "device", ")", "\n", ")", "\n", "# # B*T x 1 x W ", "\n", "arange_w", "=", "(", "torch", ".", "arange", "(", "0", ",", "self", ".", "W", ")", "\n", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", ".", "to", "(", "self", ".", "kernel_projection1", ".", "weight", ".", "device", ")", "\n", ")", "\n", "self", ".", "register_buffer", "(", "'arange_h_buf'", ",", "arange_h", ")", "\n", "self", ".", "register_buffer", "(", "'arange_w_buf'", ",", "arange_w", ")", "\n", "\n", "# norm", "\n", "self", ".", "norm_dict", "[", "f'offset_ln_feats_coords'", "]", "=", "LayerNormAffineXC", "(", "\n", "self", ".", "params", ".", "offset_lstm_dim", ",", "\n", "(", "self", ".", "num_nodes", ",", "self", ".", "params", ".", "offset_lstm_dim", ")", "\n", ")", "\n", "self", ".", "norm_dict", "[", "f'offset_ln_lstm'", "]", "=", "LayerNormAffineXC", "(", "\n", "self", ".", "params", ".", "offset_lstm_dim", ",", "\n", "(", "self", ".", "num_nodes", ",", "self", ".", "params", ".", "offset_lstm_dim", ")", "\n", ")", "\n", "\n", "if", "self", ".", "project_i3d", ":", "\n", "            ", "self", ".", "norm_dict", "[", "f'dynamic_graph_projection'", "]", "=", "LayerNormAffine2D", "(", "\n", "self", ".", "C", ",", "(", "self", ".", "C", ",", "self", ".", "H", ",", "self", ".", "W", ")", ")", "\n", "\n", "", "self", ".", "aux_feats", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraph.apply_norm": [[100, 103], ["None"], "methods", ["None"], ["", "def", "apply_norm", "(", "self", ",", "input", ",", "name", ",", "zero_init", "=", "False", ")", ":", "\n", "# input: B*T x N x C", "\n", "        ", "return", "self", ".", "norm_dict", "[", "name", "]", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraph.create_offset_modules": [[104, 135], ["recurrent_net", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.AdaptiveAvgPool2d", "Fishnet", "torch.nn.Sequential", "torch.zeros", "torch.nn.Conv2d", "torch.nn.AdaptiveAvgPool2d", "GloRe"], "methods", ["None"], ["", "def", "create_offset_modules", "(", "self", ")", ":", "\n", "# for fullresolution evaluation: pool the offset_generation input", "\n", "        ", "offset_input_size", "=", "self", ".", "H", "\n", "if", "self", ".", "params", ".", "full_res", ":", "\n", "# TODO: de schimbat hardcodarea", "\n", "            ", "self", ".", "input_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "self", ".", "iH", ",", "self", ".", "iW", ")", ")", "\n", "offset_input_size", "=", "self", ".", "iH", "\n", "\n", "", "if", "self", ".", "params", ".", "offset_generator", "==", "'big'", ":", "\n", "            ", "self", ".", "fishnet", "=", "Fishnet", "(", "input_channels", "=", "self", ".", "C", ",", "input_height", "=", "offset_input_size", ")", "\n", "full_res_pad", "=", "0", "\n", "# TODO: hack, at training time the global conv acts as a fully connected", "\n", "# for fullsize evaluation it should be the same size as at training", "\n", "global_conv_size", "=", "self", ".", "fishnet", ".", "norm_size", "[", "-", "1", "]", "-", "full_res_pad", "\n", "\n", "self", ".", "global_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "fishnet", ".", "offset_channels", "[", "-", "1", "]", ",", "self", ".", "num_nodes", "*", "self", ".", "params", ".", "offset_lstm_dim", ",", "\n", "[", "global_conv_size", ",", "global_conv_size", "]", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", ")", "\n", "\n", "", "elif", "self", ".", "params", ".", "offset_generator", "==", "'small'", ":", "\n", "            ", "self", ".", "glore", "=", "GloRe", "(", "input_channels", "=", "self", ".", "C", ",", "input_height", "=", "self", ".", "H", ",", "h", "=", "self", ".", "h", ",", "w", "=", "self", ".", "w", ")", "\n", "\n", "\n", "", "self", ".", "offset_lstm", "=", "recurrent_net", "(", "batch_first", "=", "True", ",", "\n", "input_size", "=", "self", ".", "params", ".", "offset_lstm_dim", ",", "hidden_size", "=", "self", ".", "params", ".", "offset_lstm_dim", ")", "\n", "\n", "\n", "self", ".", "offset_pred", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "params", ".", "offset_lstm_dim", ",", "4", ")", "\n", "self", ".", "offset_alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "[", "4", "]", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraph.compute_anchors": [[136, 158], ["ph.repeat().view.repeat().view.repeat().view", "pw.repeat.repeat.repeat", "torch.ones", "torch.ones", "ph.repeat().view.repeat().view.unsqueeze().unsqueeze", "pw.repeat.repeat.unsqueeze().unsqueeze", "ph.repeat().view.repeat().view.repeat().view", "pw.repeat.repeat.repeat", "print", "sys.exit", "ph.repeat().view.repeat().view.repeat", "torch.linspace", "torch.linspace", "ph.repeat().view.repeat().view.unsqueeze", "pw.repeat.repeat.unsqueeze", "ph.repeat().view.repeat().view.repeat"], "methods", ["None"], ["", "def", "compute_anchors", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "params", ".", "init_regions", "==", "'center'", ":", "\n", "            ", "ph", "=", "self", ".", "H", "/", "2", "*", "torch", ".", "ones", "(", "1", ",", "self", ".", "h", ",", "1", ")", "\n", "pw", "=", "self", ".", "H", "/", "2", "*", "torch", ".", "ones", "(", "1", ",", "self", ".", "w", ",", "1", ")", "\n", "# ph: BT x (h * w) x 1", "\n", "ph", "=", "ph", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "w", ")", ".", "view", "(", "1", ",", "self", ".", "h", "*", "self", ".", "w", ",", "1", ")", "\n", "# ph: BT x (h * w) x 1", "\n", "pw", "=", "pw", ".", "repeat", "(", "1", ",", "self", ".", "h", ",", "1", ")", "\n", "\n", "", "elif", "self", ".", "params", ".", "init_regions", "==", "'grid'", ":", "\n", "            ", "ph", "=", "torch", ".", "linspace", "(", "0", ",", "self", ".", "H", ",", "2", "*", "self", ".", "h", "+", "1", ")", "[", "1", ":", ":", "2", "]", "\n", "ph", "=", "ph", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "pw", "=", "torch", ".", "linspace", "(", "0", ",", "self", ".", "W", ",", "2", "*", "self", ".", "w", "+", "1", ")", "[", "1", ":", ":", "2", "]", "\n", "pw", "=", "pw", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "ph", "=", "ph", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "w", ")", ".", "view", "(", "1", ",", "self", ".", "h", "*", "self", ".", "w", ",", "1", ")", "\n", "#ph: BT x (h * w) x 1", "\n", "pw", "=", "pw", ".", "repeat", "(", "1", ",", "self", ".", "h", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'init_regions: center or grid'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "ph", ",", "pw", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraph.get_offsets": [[160, 196], ["dyreg.DynamicGraph.apply_norm", "global_features.permute.permute.view", "global_features.permute.permute.permute().contiguous", "global_features.permute.permute.view", "dyreg.DynamicGraph.offset_lstm.flatten_parameters", "dyreg.DynamicGraph.offset_lstm", "dyreg.DynamicGraph.view", "dyreg.DynamicGraph.permute().contiguous", "dyreg.DynamicGraph.view", "dyreg.DynamicGraph.apply_norm", "dyreg.DynamicGraph.offset_pred", "dyreg.DynamicGraph.input_pooling", "dyreg.DynamicGraph.fishnet", "dyreg.DynamicGraph.global_conv", "global_features.permute.permute.view", "dyreg.DynamicGraph.glore", "global_features.permute.permute.permute", "global_features.permute.permute.permute", "dyreg.DynamicGraph.permute"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraphWrapper.apply_norm", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraphWrapper.apply_norm"], ["", "def", "get_offsets", "(", "self", ",", "input_features", ",", "name", "=", "'offset'", ")", ":", "\n", "# resize the input for the offset generation functions", "\n", "        ", "if", "self", ".", "params", ".", "full_res", ":", "\n", "            ", "input_features", "=", "self", ".", "input_pooling", "(", "input_features", ")", "\n", "# input_features: B * T, C, H, W ", "\n", "# get global input embedding", "\n", "", "if", "self", ".", "params", ".", "offset_generator", "==", "'big'", ":", "\n", "            ", "global_features", "=", "self", ".", "fishnet", "(", "input_features", ")", "\n", "assert", "global_features", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "fishnet", ".", "norm_size", "[", "-", "1", "]", "and", "global_features", ".", "shape", "[", "-", "2", "]", "==", "self", ".", "fishnet", ".", "norm_size", "[", "-", "1", "]", "\n", "# assert global_features.shape[-1] == 5 and global_features.shape[-2] == 5", "\n", "\n", "global_features", "=", "self", ".", "global_conv", "(", "global_features", ")", "\n", "global_features", "=", "global_features", ".", "view", "(", "self", ".", "BT", ",", "self", ".", "num_nodes", ",", "self", ".", "params", ".", "offset_lstm_dim", ")", "\n", "\n", "", "elif", "self", ".", "params", ".", "offset_generator", "==", "'small'", ":", "\n", "            ", "global_features", "=", "self", ".", "glore", "(", "input_features", ")", "\n", "global_features", "=", "global_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# norm", "\n", "", "global_features", "=", "self", ".", "apply_norm", "(", "global_features", ",", "f'{name}_ln_feats_coords'", ")", "\n", "global_features", "=", "global_features", ".", "view", "(", "self", ".", "B", ",", "self", ".", "T", ",", "self", ".", "num_nodes", ",", "self", ".", "params", ".", "offset_lstm_dim", ")", "\n", "global_features", "=", "global_features", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "global_features", "=", "global_features", ".", "view", "(", "self", ".", "B", "*", "self", ".", "num_nodes", ",", "self", ".", "T", ",", "self", ".", "params", ".", "offset_lstm_dim", ")", "\n", "\n", "# aplly recurrence", "\n", "self", ".", "offset_lstm", ".", "flatten_parameters", "(", ")", "\n", "offset_feats", ",", "_", "=", "self", ".", "offset_lstm", "(", "global_features", ")", "\n", "offset_feats", "=", "offset_feats", ".", "view", "(", "self", ".", "B", ",", "self", ".", "num_nodes", ",", "self", ".", "T", ",", "self", ".", "params", ".", "offset_lstm_dim", ")", "\n", "offset_feats", "=", "offset_feats", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "offset_feats", "=", "offset_feats", ".", "view", "(", "self", ".", "BT", ",", "self", ".", "num_nodes", ",", "self", ".", "params", ".", "offset_lstm_dim", ")", "\n", "offset_feats", "=", "self", ".", "apply_norm", "(", "offset_feats", ",", "f'{name}_ln_lstm'", ")", "\n", "\n", "# predict final coordinates", "\n", "offsets", "=", "self", ".", "offset_pred", "(", "offset_feats", ")", "\n", "offsets", "=", "offsets", "*", "self", ".", "offset_alpha", "\n", "return", "offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraph.get_dynamic_kernel": [[197, 251], ["offsets.view.view.view", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.tanh", "torch.tanh", "torch.clamp", "torch.abs", "torch.nn.functional.relu", "kernel_h.unsqueeze.unsqueeze.unsqueeze", "torch.clamp", "torch.abs", "torch.nn.functional.relu", "kernel_w.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "torch.stack", "kernel.view.view.view", "torch.exp", "torch.exp", "offsets[].unsqueeze", "atanh", "offsets[].unsqueeze", "atanh", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.atanh", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.atanh"], ["", "def", "get_dynamic_kernel", "(", "self", ",", "offsets", ")", ":", "\n", "        ", "offsets", "=", "offsets", ".", "view", "(", "offsets", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "4", ")", "\n", "# create the fixed anchors", "\n", "ph", "=", "self", ".", "ph_buf", "\n", "pw", "=", "self", ".", "pw_buf", "\n", "self", ".", "arange_h", "=", "self", ".", "arange_h_buf", "\n", "self", ".", "arange_w", "=", "self", ".", "arange_w_buf", "\n", "\n", "# pw: BT x (h * w) x 1", "\n", "# scale the offsets so that they always stay in the input region", "\n", "regions_h", "=", "torch", ".", "exp", "(", "offsets", "[", ":", ",", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "regions_w", "=", "torch", ".", "exp", "(", "offsets", "[", ":", ",", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "regions_dh", "=", "torch", ".", "tanh", "(", "offsets", "[", ":", ",", ":", ",", "2", "]", ".", "unsqueeze", "(", "-", "1", ")", "+", "atanh", "(", "2", "*", "ph", "/", "self", ".", "H", "-", "1", ")", ")", "\n", "regions_dw", "=", "torch", ".", "tanh", "(", "offsets", "[", ":", ",", ":", ",", "3", "]", ".", "unsqueeze", "(", "-", "1", ")", "+", "atanh", "(", "2", "*", "pw", "/", "self", ".", "W", "-", "1", ")", ")", "\n", "\n", "\n", "h_init", "=", "self", ".", "H", "/", "(", "2", "*", "self", ".", "h", ")", "+", "1", "\n", "w_init", "=", "self", ".", "W", "/", "(", "2", "*", "self", ".", "w", ")", "+", "1", "\n", "\n", "regions_h", "=", "regions_h", "*", "h_init", "+", "1", "\n", "regions_w", "=", "regions_w", "*", "w_init", "+", "1", "\n", "\n", "regions_dh", "=", "regions_dh", "*", "(", "self", ".", "H", "/", "2", ")", "+", "self", ".", "H", "/", "2", "-", "ph", "\n", "regions_dw", "=", "regions_dw", "*", "(", "self", ".", "W", "/", "2", ")", "+", "self", ".", "W", "/", "2", "-", "pw", "\n", "\n", "\n", "\n", "# B*T x N x H x 1", "\n", "kernel_center_h", "=", "torch", ".", "clamp", "(", "ph", "+", "regions_dh", ",", "0", ",", "self", ".", "H", "-", "1", ")", "\n", "dist_h", "=", "torch", ".", "abs", "(", "self", ".", "arange_h", "-", "kernel_center_h", ")", "\n", "kernel_h", "=", "F", ".", "relu", "(", "regions_h", "-", "dist_h", ")", "\n", "kernel_h", "=", "kernel_h", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# B*T x N x 1 x W", "\n", "kernel_center_w", "=", "torch", ".", "clamp", "(", "pw", "+", "regions_dw", ",", "0", ",", "self", ".", "W", "-", "1", ")", "\n", "dist_w", "=", "torch", ".", "abs", "(", "self", ".", "arange_w", "-", "kernel_center_w", ")", "\n", "kernel_w", "=", "F", ".", "relu", "(", "regions_w", "-", "dist_w", ")", "\n", "kernel_w", "=", "kernel_w", ".", "unsqueeze", "(", "-", "2", ")", "\n", "# B*T x N x H x W", "\n", "kernel", "=", "torch", ".", "matmul", "(", "kernel_h", ",", "kernel_w", ")", "\n", "\n", "self", ".", "offsets", "=", "torch", ".", "stack", "(", "[", "regions_h", ",", "regions_w", ",", "kernel_center_h", ",", "kernel_center_w", "]", ",", "dim", "=", "3", ")", "\n", "\n", "eps", "=", "1e-37", "\n", "kernel", "=", "kernel", "/", "(", "torch", ".", "sum", "(", "kernel", ",", "dim", "=", "(", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "+", "eps", ")", "\n", "# B*T x h x w x H x W", "\n", "kernel", "=", "kernel", ".", "view", "(", "self", ".", "BT", ",", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "H", ",", "self", ".", "W", ")", "\n", "\n", "# necessary to compute the bounding box", "\n", "self", ".", "kernel_center_h", "=", "kernel_center_h", "\n", "self", ".", "kernel_center_w", "=", "kernel_center_w", "\n", "self", ".", "kernel_h", "=", "regions_h", "\n", "self", ".", "kernel_w", "=", "regions_w", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraph.set_input": [[252, 313], ["enumerate", "torch.cat", "torch.cat", "dyreg.DynamicGraph.kernel.mean().mean", "input_features.mean().mean", "differentiable_resize_area", "dyreg.DynamicGraph.nodes.mean", "dyreg.DynamicGraph.kernel_foreground.view", "differentiable_resize_area", "act_scale.view.view.view", "initial_kernel.view", "dyreg.DynamicGraph.kernel_projection1", "kernel_location.view.view.permute", "nodes_wo_position.append", "patch_feats.append", "tuple", "tuple", "kernel_background.sum().sum", "dyreg.DynamicGraph.kernel_foreground.sum().sum", "initial_kernel.view", "dyreg.DynamicGraph.kernel_location_pool", "kernel_location.view.view.view", "dyreg.DynamicGraph.kernel.mean", "[].max", "input_features.mean", "kernel_background.sum", "dyreg.DynamicGraph.kernel_foreground.sum", "dyreg.DynamicGraph.get_glore_kernel", "dyreg.DynamicGraph.get_offsets", "dyreg.DynamicGraph.get_dynamic_kernel", "dyreg.DynamicGraph.kernel_foreground.max"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.differentiable_resize_area", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.differentiable_resize_area", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_glore_kernel", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_offsets", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_dynamic_kernel"], ["", "def", "set_input", "(", "self", ",", "input_features", ")", ":", "\n", "# input_features: B * T, C, H, W ", "\n", "        ", "patch_feats", "=", "[", "]", "\n", "nodes_wo_position", "=", "[", "]", "\n", "# # tmp", "\n", "for", "idx", ",", "scale", "in", "enumerate", "(", "[", "1", "]", ")", ":", "# TODO or NOT TODO:multiscale", "\n", "\n", "            ", "if", "self", ".", "params", ".", "dynamic_regions", "==", "'none'", ":", "\n", "                ", "pass", "\n", "", "elif", "self", ".", "params", ".", "dynamic_regions", "in", "[", "'pos_only'", ",", "'dyreg'", ",", "'semantic'", "]", ":", "\n", "# BT x 9 x 4", "\n", "                ", "if", "self", ".", "params", ".", "dynamic_regions", "==", "'semantic'", ":", "\n", "                    ", "self", ".", "kernel", "=", "self", ".", "get_glore_kernel", "(", "input_features", ")", "\n", "self", ".", "offsets", "=", "self", ".", "kernel", "# TODO: de forma, doar ca sa pastram interfata din models.py", "\n", "\n", "", "else", ":", "\n", "                    ", "offsets", "=", "self", ".", "get_offsets", "(", "input_features", ")", "\n", "self", ".", "kernel", "=", "self", ".", "get_dynamic_kernel", "(", "offsets", ")", "\n", "initial_kernel", "=", "self", ".", "kernel", "\n", "\n", "", "", "act_scale", "=", "differentiable_resize_area", "(", "input_features", ",", "self", ".", "kernel", ")", "\n", "act_scale", "=", "act_scale", ".", "view", "(", "self", ".", "B", ",", "self", ".", "T", ",", "self", ".", "C", ",", "self", ".", "h", "*", "self", ".", "w", ")", "\n", "\n", "# add location embeding to each node", "\n", "# B x T x num_nodes x (H*W)", "\n", "kernel_location", "=", "initial_kernel", ".", "view", "(", "self", ".", "B", ",", "self", ".", "T", ",", "self", ".", "h", "*", "self", ".", "w", ",", "self", ".", "H", "*", "self", ".", "W", ")", "\n", "# for fullsize evaluation the kernel should have the same shape as it did at training time", "\n", "if", "self", ".", "params", ".", "full_res", ":", "\n", "                ", "kernel_location", "=", "initial_kernel", ".", "view", "(", "self", ".", "BT", ",", "self", ".", "h", "*", "self", ".", "w", ",", "self", ".", "H", ",", "self", ".", "W", ")", "\n", "kernel_location", "=", "self", ".", "kernel_location_pool", "(", "kernel_location", ")", "\n", "kernel_location", "=", "kernel_location", ".", "view", "(", "self", ".", "B", ",", "self", ".", "T", ",", "self", ".", "h", "*", "self", ".", "w", ",", "self", ".", "iH", "*", "self", ".", "iW", ")", "\n", "\n", "", "kernel_location", "=", "self", ".", "kernel_projection1", "(", "kernel_location", ")", "\n", "kernel_location", "=", "kernel_location", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "nodes_wo_position", ".", "append", "(", "act_scale", ")", "\n", "act_scale", "=", "act_scale", "+", "kernel_location", "\n", "\n", "patch_feats", ".", "append", "(", "act_scale", ")", "\n", "# nodes: B x T x C x N", "\n", "", "nodes", "=", "torch", ".", "cat", "(", "tuple", "(", "patch_feats", ")", ",", "dim", "=", "3", ")", "\n", "\n", "self", ".", "nodes_wo_position", "=", "torch", ".", "cat", "(", "tuple", "(", "nodes_wo_position", ")", ",", "dim", "=", "3", ")", "\n", "self", ".", "nodes", "=", "nodes", "\n", "# self.kernel:  BT x 3 x 3 x 28 x 28", "\n", "self", ".", "kernel_foreground", "=", "self", ".", "kernel", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "kernel_background", "=", "self", ".", "kernel_foreground", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "max", "(", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "-", "self", ".", "kernel_foreground", "\n", "self", ".", "kernel_background", "=", "kernel_background", "/", "kernel_background", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "kernel_foreground", "=", "self", ".", "kernel_foreground", "/", "self", ".", "kernel_foreground", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "self", ".", "global_mean_features", "=", "input_features", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "nodes_background", "=", "differentiable_resize_area", "(", "input_features", ",", "self", ".", "kernel_background", ")", "\n", "self", ".", "nodes_foreground", "=", "self", ".", "nodes", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "aux_feats", "[", "'global_mean_features'", "]", "=", "self", ".", "global_mean_features", "\n", "self", ".", "aux_feats", "[", "'nodes_background'", "]", "=", "self", ".", "nodes_background", "\n", "self", ".", "aux_feats", "[", "'nodes_foreground'", "]", "=", "self", ".", "nodes_foreground", "\n", "\n", "self", ".", "kernel_foreground", "=", "self", ".", "kernel_foreground", ".", "view", "(", "self", ".", "kernel_foreground", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "self", ".", "aux_feats", "[", "'kernel_foreground'", "]", "=", "self", ".", "kernel_foreground", "\n", "return", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraph.remap_nodes": [[315, 334], ["nodes_scale.view.view.view", "differentiable_resize_area", "dyreg.DynamicGraph.kernel.permute"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.differentiable_resize_area"], ["", "def", "remap_nodes", "(", "self", ",", "nodes", ")", ":", "\n", "# nodes: B x T x C x num_nodes", "\n", "        ", "start", "=", "end", "=", "out", "=", "0", "\n", "#for scale in self.gc.scales:", "\n", "for", "scale", "in", "[", "(", "self", ".", "h", ",", "self", ".", "w", ")", "]", ":", "\n", "\n", "            ", "end", "+=", "scale", "[", "0", "]", "*", "scale", "[", "1", "]", "\n", "nodes_scale", "=", "nodes", "[", ":", ",", ":", ",", ":", ",", "start", ":", "end", "]", "\n", "nodes_scale", "=", "nodes_scale", ".", "view", "(", "self", ".", "BT", ",", "nodes", ".", "shape", "[", "2", "]", ",", "scale", "[", "0", "]", ",", "scale", "[", "1", "]", ")", "\n", "start", "+=", "scale", "[", "0", "]", "*", "scale", "[", "1", "]", "\n", "\n", "if", "self", ".", "params", ".", "dynamic_regions", "!=", "'none'", ":", "\n", "                ", "kernel", "=", "self", ".", "kernel", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "\n", "", "out_scale", "=", "differentiable_resize_area", "(", "nodes_scale", ",", "kernel", ")", "\n", "\n", "out", "=", "out", "+", "out_scale", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraph.forward": [[335, 363], ["input_feats.view.view.view", "dyreg.DynamicGraph.set_input", "dyreg.DynamicGraph.rstg", "dyreg.DynamicGraph.remap_nodes", "dyreg.DynamicGraph.view", "dyreg.DynamicGraph.project_i3d_linear", "dyreg.DynamicGraph.apply_norm", "dyreg.DynamicGraph.view", "dyreg.DynamicGraph.project_back_i3d_linear"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.set_input", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.remap_nodes", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraphWrapper.apply_norm"], ["", "def", "forward", "(", "self", ",", "input_feats", ")", ":", "\n", "# input_feats: B x T x C x H x W -> BT x C x H x W", "\n", "# TODO: add B, T as parameters for dyreg", "\n", "        ", "self", ".", "B", "=", "input_feats", ".", "shape", "[", "0", "]", "\n", "self", ".", "T", "=", "input_feats", ".", "shape", "[", "1", "]", "\n", "self", ".", "BT", "=", "self", ".", "B", "*", "self", ".", "T", "\n", "input_feats", "=", "input_feats", ".", "view", "(", "self", ".", "B", "*", "self", ".", "T", ",", "*", "input_feats", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "\n", "if", "self", ".", "project_i3d", ":", "# and self.params.project_at_input:", "\n", "            ", "x", "=", "self", ".", "project_i3d_linear", "(", "input_feats", ")", "\n", "x", "=", "self", ".", "apply_norm", "(", "x", ",", "'dynamic_graph_projection'", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "input_feats", "\n", "", "nodes", "=", "self", ".", "set_input", "(", "x", ")", "\n", "# nodes: B x T x C x N", "\n", "nodes", "=", "self", ".", "rstg", "(", "nodes", ")", "\n", "# nodes: B x T x C x N", "\n", "\n", "out", "=", "self", ".", "remap_nodes", "(", "nodes", ")", "\n", "if", "self", ".", "project_i3d", ":", "# and self.params.project_at_input and self.params.remap_first==True:", "\n", "            ", "out", "=", "out", ".", "view", "(", "self", ".", "B", "*", "self", ".", "T", ",", "self", ".", "C", ",", "self", ".", "H", ",", "self", ".", "W", ")", "\n", "out", "=", "self", ".", "project_back_i3d_linear", "(", "out", ")", "\n", "\n", "# out: B x T x C x H x W", "\n", "", "out", "=", "out", ".", "view", "(", "self", ".", "B", ",", "self", ".", "T", ",", "*", "out", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraphWrapper.__init__": [[366, 397], ["torch.nn.Module.__init__", "dyreg.DynamicGraph", "torch.nn.ModuleDict", "LayerNormAffine2D"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "\n", "H", "=", "14", ",", "W", "=", "14", ",", "oH", "=", "7", ",", "oW", "=", "7", ",", "iH", "=", "None", ",", "iW", "=", "None", ",", "\n", "h", "=", "3", ",", "w", "=", "3", ",", "\n", "node_dim", "=", "512", ",", "in_channels", "=", "1024", ",", "out_num_ch", "=", "2048", ",", "\n", "project_i3d", "=", "False", ",", "name", "=", "''", ")", ":", "\n", "        ", "super", "(", "DynamicGraphWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.block = block", "\n", "self", ".", "dynamic_graph", "=", "DynamicGraph", "(", "params", "=", "params", ",", "backbone_dim", "=", "in_channels", ",", "\n", "H", "=", "H", ",", "W", "=", "W", ",", "oH", "=", "oH", ",", "oW", "=", "oW", ",", "iH", "=", "iH", ",", "iW", "=", "iW", ",", "\n", "h", "=", "h", ",", "w", "=", "w", ",", "\n", "node_dim", "=", "node_dim", ",", "out_num_ch", "=", "out_num_ch", ",", "\n", "project_i3d", "=", "project_i3d", ",", "name", "=", "name", ")", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "W", "=", "W", "\n", "# the dimenstion of the input used at training time", "\n", "# to be used for resize for fullsize evaluation", "\n", "self", ".", "iH", "=", "iH", "\n", "self", ".", "iW", "=", "iW", "\n", "\n", "# residual branch", "\n", "# for paraleel branch, initialize the residual branch with 0, ", "\n", "# so that it is ignored at the begening of the optimization", "\n", "self", ".", "norm_dict", "=", "nn", ".", "ModuleDict", "(", "{", "}", ")", "\n", "if", "self", ".", "params", ".", "rstg_combine", "==", "'serial'", ":", "\n", "            ", "zero_init", "=", "False", "\n", "", "else", ":", "\n", "            ", "zero_init", "=", "True", "\n", "self", ".", "norm_dict", "[", "'residual_norm'", "]", "=", "LayerNormAffine2D", "(", "self", ".", "in_channels", ",", "(", "self", ".", "in_channels", ",", "self", ".", "H", ",", "self", ".", "W", ")", ",", "\n", "zero_init", "=", "zero_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraphWrapper.apply_norm": [[399, 402], ["None"], "methods", ["None"], ["", "", "def", "apply_norm", "(", "self", ",", "input", ",", "name", ")", ":", "\n", "# input: B*T x C x H x W", "\n", "        ", "return", "self", ".", "norm_dict", "[", "name", "]", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraphWrapper.forward": [[403, 414], ["dyreg.DynamicGraphWrapper.dynamic_graph", "dyreg.DynamicGraphWrapper.view", "dyreg.DynamicGraphWrapper.apply_norm", "x.view"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.DynamicGraphWrapper.apply_norm"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "dynamic_graph", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "shape", "[", "0", "]", "*", "y", ".", "shape", "[", "1", "]", ",", "*", "y", ".", "shape", "[", "2", ":", "]", ")", "\n", "y", "=", "self", ".", "apply_norm", "(", "y", ",", "'residual_norm'", ")", "\n", "\n", "if", "self", ".", "params", ".", "rstg_combine", "==", "'serial'", ":", "\n", "            ", "out", "=", "y", "\n", "", "elif", "self", ".", "params", ".", "rstg_combine", "==", "'plus'", ":", "\n", "            ", "out", "=", "x", ".", "view", "(", "*", "y", ".", "shape", ")", "+", "y", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.SplitBT.__init__": [[475, 480], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "T", ")", ":", "\n", "        ", "super", "(", "SplitBT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.SplitBT.forward": [[481, 486], ["dyreg.SplitBT.block", "dyreg.SplitBT.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block", "(", "x", ")", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "//", "self", ".", "T", "\n", "out", "=", "x", ".", "view", "(", "B", ",", "self", ".", "T", ",", "*", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.dyregParams.__init__": [[488, 501], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "dyregParams", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "full_res", "=", "False", "\n", "self", ".", "rstg_combine", "=", "'plus'", "\n", "self", ".", "dynamic_regions", "=", "'dyreg'", "\n", "self", ".", "offset_lstm_dim", "=", "128", "\n", "self", ".", "offset_generator", "=", "'big'", "\n", "self", ".", "init_regions", "=", "'center'", "\n", "self", ".", "combine_by_sum", "=", "True", "\n", "self", ".", "aggregation_type", "=", "'dot'", "\n", "self", ".", "send_layers", "=", "1", "\n", "self", ".", "update_layers", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.dyregParams.set_from_args": [[502, 509], ["None"], "methods", ["None"], ["", "def", "set_from_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "full_res", "=", "args", ".", "full_res", "\n", "self", ".", "rstg_combine", "=", "args", ".", "rstg_combine", "\n", "self", ".", "dynamic_regions", "=", "args", ".", "dynamic_regions", "\n", "self", ".", "offset_lstm_dim", "=", "args", ".", "offset_lstm_dim", "\n", "self", ".", "offset_generator", "=", "args", ".", "offset_generator", "\n", "self", ".", "init_regions", "=", "args", ".", "init_regions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.make_rstg": [[416, 463], ["args.place_graph.replace().split", "print", "dyreg.dyregParams", "dyregParams.set_from_args", "int", "int", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "args.place_graph.replace", "torch.nn.Sequential", "dyreg.DynamicGraphWrapper", "place.split", "place.split", "dyreg.SplitBT", "dyreg.DynamicGraphWrapper"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.dyregParams.set_from_args", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split"], ["", "", "def", "make_rstg", "(", "net", ")", ":", "\n", "    ", "places", "=", "args", ".", "place_graph", ".", "replace", "(", "'layer'", ",", "''", ")", ".", "split", "(", "'_'", ")", "\n", "\n", "graph_params", "=", "args", ".", "graph_params", "\n", "out_pool_size", "=", "args", ".", "out_pool_size", "\n", "out_num_ch", "=", "args", ".", "out_num_ch", "\n", "\n", "print", "(", "f'out_pool_size: {out_pool_size}'", ")", "\n", "\n", "list_layer", "=", "{", "}", "\n", "list_layer", "[", "1", "]", "=", "[", "x", "for", "x", "in", "net", ".", "layer1", "]", "\n", "list_layer", "[", "2", "]", "=", "[", "x", "for", "x", "in", "net", ".", "layer2", "]", "\n", "list_layer", "[", "3", "]", "=", "[", "x", "for", "x", "in", "net", ".", "layer3", "]", "\n", "list_layer", "[", "4", "]", "=", "[", "x", "for", "x", "in", "net", ".", "layer4", "]", "\n", "\n", "dyreg_params", "=", "dyregParams", "(", ")", "\n", "dyreg_params", ".", "set_from_args", "(", "args", ")", "\n", "\n", "for", "place", "in", "places", ":", "\n", "        ", "layer", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "block", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "if", "args", ".", "bottleneck_graph", ":", "\n", "            ", "list_layer", "[", "layer", "]", "[", "block", "]", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "SplitBT", "(", "block", "=", "list_layer", "[", "layer", "]", "[", "block", "]", ".", "conv2", ",", "T", "=", "16", ")", ",", "\n", "DynamicGraphWrapper", "(", "dyreg_params", ",", "\n", "# list_layer[layer][block].conv2 = DynamicGraphWrapper(list_layer[layer][block].conv2, ", "\n", "in_channels", "=", "graph_params", "[", "layer", "]", "[", "'in_channels'", "]", ",", "\n", "H", "=", "graph_params", "[", "layer", "]", "[", "'H'", "]", ",", "W", "=", "graph_params", "[", "layer", "]", "[", "'H'", "]", ",", "\n", "oH", "=", "out_pool_size", ",", "oW", "=", "out_pool_size", ",", "\n", "iH", "=", "graph_params", "[", "layer", "]", "[", "'iH'", "]", ",", "iW", "=", "graph_params", "[", "layer", "]", "[", "'iH'", "]", ",", "\n", "out_num_ch", "=", "out_num_ch", ",", "\n", "node_dim", "=", "graph_params", "[", "layer", "]", "[", "'node_dim'", "]", ",", "project_i3d", "=", "graph_params", "[", "layer", "]", "[", "'project_i3d'", "]", ",", "\n", "name", "=", "graph_params", "[", "layer", "]", "[", "'name'", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "list_layer", "[", "layer", "]", "[", "block", "]", "=", "DynamicGraphWrapper", "(", "dyreg_params", ",", "\n", "in_channels", "=", "graph_params", "[", "layer", "]", "[", "'in_channels'", "]", ",", "\n", "H", "=", "graph_params", "[", "layer", "]", "[", "'H'", "]", ",", "W", "=", "graph_params", "[", "layer", "]", "[", "'H'", "]", ",", "\n", "oH", "=", "out_pool_size", ",", "oW", "=", "out_pool_size", ",", "\n", "out_num_ch", "=", "out_num_ch", ",", "\n", "node_dim", "=", "graph_params", "[", "layer", "]", "[", "'node_dim'", "]", ",", "project_i3d", "=", "graph_params", "[", "layer", "]", "[", "'project_i3d'", "]", ",", "\n", "name", "=", "graph_params", "[", "layer", "]", "[", "'name'", "]", ")", "\n", "\n", "", "net", ".", "layer1", "=", "nn", ".", "Sequential", "(", "*", "list_layer", "[", "1", "]", ")", "\n", "net", ".", "layer2", "=", "nn", ".", "Sequential", "(", "*", "list_layer", "[", "2", "]", ")", "\n", "net", ".", "layer3", "=", "nn", ".", "Sequential", "(", "*", "list_layer", "[", "3", "]", ")", "\n", "net", ".", "layer4", "=", "nn", ".", "Sequential", "(", "*", "list_layer", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg.save_image": [[465, 473], ["out.permute.permute", "matplotlib.subplots", "axarr.imshow", "matplotlib.savefig", "out.permute.detach().numpy", "out_image.min", "out_image.max", "out.permute.detach"], "function", ["None"], ["", "", "def", "save_image", "(", "out", ",", "name", "=", "'img'", ")", ":", "\n", "    ", "out", "=", "out", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "\n", "out_image", "=", "out", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", "\n", "out_image", "=", "out_image", "-", "out_image", ".", "min", "(", ")", "\n", "out_image", "=", "out_image", "/", "out_image", ".", "max", "(", ")", "\n", "f", ",", "axarr", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "axarr", ".", "imshow", "(", "out_image", ")", "\n", "plt", ".", "savefig", "(", "name", "+", "'.jpeg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillCompose.__init__": [[31, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillCompose.__call__": [[34, 41], ["isinstance", "t", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "crop_params", "=", "None", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "if", "isinstance", "(", "t", ",", "DistillGroupMultiScaleCrop", ")", ":", "\n", "                 ", "img", "=", "t", "(", "img", ",", "crop_params", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "t", "(", "img", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillCompose.__repr__": [[42, 49], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "'    {0}'", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillGroupMultiScaleCrop.__init__": [[53, 60], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scales", "=", "None", ",", "max_distort", "=", "1", ",", "fix_crop", "=", "True", ",", "more_fix_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "if", "scales", "is", "not", "None", "else", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", "\n", "self", ".", "max_distort", "=", "max_distort", "\n", "self", ".", "fix_crop", "=", "fix_crop", "\n", "self", ".", "more_fix_crop", "=", "more_fix_crop", "\n", "self", ".", "input_size", "=", "input_size", "if", "not", "isinstance", "(", "input_size", ",", "int", ")", "else", "[", "input_size", ",", "input_size", "]", "\n", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "# self.augment_crop = augment_crop", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillGroupMultiScaleCrop.reverse_crop": [[63, 66], ["None"], "methods", ["None"], ["", "def", "reverse_crop", "(", "p_h", ",", "p_w", ",", "resize_ratio_h", ",", "resize_ratio_w", ",", "offset_h", ",", "offset_w", ")", ":", "\n", "        ", "abs_p_h", "=", "x_h", "/", "resize_ratio_h", "+", "offset_h", "\n", "abs_p_w", "=", "x_w", "/", "resize_ratio_w", "+", "offset_w", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillGroupMultiScaleCrop.__call__": [[67, 87], ["transforms.DistillGroupMultiScaleCrop._sample_crop_size", "img.crop", "img.resize"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop._sample_crop_size"], ["", "def", "__call__", "(", "self", ",", "img_group", ",", "crop_params", "=", "None", ")", ":", "\n", "\n", "        ", "im_size", "=", "img_group", "[", "0", "]", ".", "size", "\n", "\n", "\n", "if", "args", ".", "predefined_augm", ":", "\n", "# TO DO", "\n", "            ", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "crop_params", "\n", "", "else", ":", "\n", "            ", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "self", ".", "_sample_crop_size", "(", "im_size", ")", "\n", "\n", "", "crop_img_group", "=", "[", "img", ".", "crop", "(", "(", "offset_w", ",", "offset_h", ",", "offset_w", "+", "crop_w", ",", "offset_h", "+", "crop_h", ")", ")", "for", "img", "in", "img_group", "]", "\n", "ret_img_group", "=", "[", "img", ".", "resize", "(", "(", "self", ".", "input_size", "[", "0", "]", ",", "self", ".", "input_size", "[", "1", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "for", "img", "in", "crop_img_group", "]", "\n", "\n", "# resize_ratio_h = self.input_size[1] / crop_h", "\n", "# resize_ratio_w = self.input_size[0] / crop_w", "\n", "# rev_transform = (resize_ratio_h, resize_ratio_w, float(offset_h), float(offset_w))", "\n", "crop_coords", "=", "(", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", ")", "\n", "return", "(", "crop_coords", ",", "ret_img_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillGroupMultiScaleCrop._sample_crop_size": [[89, 112], ["min", "enumerate", "random.choice", "int", "enumerate", "random.randint", "random.randint", "transforms.DistillGroupMultiScaleCrop._sample_fix_offset", "abs", "abs", "abs", "pairs.append"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop._sample_fix_offset"], ["", "def", "_sample_crop_size", "(", "self", ",", "im_size", ")", ":", "\n", "        ", "image_w", ",", "image_h", "=", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", "\n", "\n", "# find a crop size", "\n", "base_size", "=", "min", "(", "image_w", ",", "image_h", ")", "\n", "crop_sizes", "=", "[", "int", "(", "base_size", "*", "x", ")", "for", "x", "in", "self", ".", "scales", "]", "\n", "crop_h", "=", "[", "self", ".", "input_size", "[", "1", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "1", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "crop_w", "=", "[", "self", ".", "input_size", "[", "0", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "0", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "crop_h", ")", ":", "\n", "            ", "for", "j", ",", "w", "in", "enumerate", "(", "crop_w", ")", ":", "\n", "                ", "if", "abs", "(", "i", "-", "j", ")", "<=", "self", ".", "max_distort", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "crop_pair", "=", "random", ".", "choice", "(", "pairs", ")", "\n", "if", "not", "self", ".", "fix_crop", ":", "\n", "            ", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "image_w", "-", "crop_pair", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "image_h", "-", "crop_pair", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w_offset", ",", "h_offset", "=", "self", ".", "_sample_fix_offset", "(", "image_w", ",", "image_h", ",", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ")", "\n", "\n", "", "return", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ",", "w_offset", ",", "h_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillGroupMultiScaleCrop._sample_fix_offset": [[113, 116], ["transforms.DistillGroupMultiScaleCrop.fill_fix_offset", "random.choice"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "_sample_fix_offset", "(", "self", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "offsets", "=", "self", ".", "fill_fix_offset", "(", "self", ".", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "return", "random", ".", "choice", "(", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillGroupMultiScaleCrop.fill_fix_offset": [[117, 141], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fill_fix_offset", "(", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "ret", ".", "append", "(", "(", "0", ",", "0", ")", ")", "# upper left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "0", ")", ")", "# upper right", "\n", "ret", ".", "append", "(", "(", "0", ",", "4", "*", "h_step", ")", ")", "# lower left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "if", "more_fix_crop", ":", "\n", "            ", "ret", ".", "append", "(", "(", "0", ",", "2", "*", "h_step", ")", ")", "# center left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower center", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "0", "*", "h_step", ")", ")", "# upper center", "\n", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper right quarter", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower righ quarter", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupRandomCrop.__init__": [[146, 151], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupRandomCrop.__call__": [[152, 170], ["list", "random.randint", "random.randint", "list.append", "list.append", "img.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "w", ",", "h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "out_images", "=", "list", "(", ")", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "for", "img", "in", "img_group", ":", "\n", "            ", "assert", "(", "img", ".", "size", "[", "0", "]", "==", "w", "and", "img", ".", "size", "[", "1", "]", "==", "h", ")", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ")", "\n", "\n", "", "", "return", "out_images", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupShiftCrop.__init__": [[172, 179], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "dh", "=", "0", ",", "dw", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "dw", "=", "dw", "\n", "self", ".", "dh", "=", "dh", "\n", "", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupShiftCrop.__call__": [[179, 199], ["list", "numpy.clip", "numpy.clip", "list.append", "list.append", "img.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "w", ",", "h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "out_images", "=", "list", "(", ")", "\n", "\n", "corner_center_w", "=", "(", "w", "-", "tw", ")", "/", "2", "\n", "x1", "=", "np", ".", "clip", "(", "corner_center_w", "+", "self", ".", "dw", ",", "0", ",", "w", "-", "tw", ")", "\n", "\n", "corner_center_h", "=", "(", "h", "-", "th", ")", "/", "2", "\n", "y1", "=", "np", ".", "clip", "(", "corner_center_h", "+", "self", ".", "dh", ",", "0", ",", "h", "-", "th", ")", "\n", "\n", "for", "img", "in", "img_group", ":", "\n", "            ", "assert", "(", "img", ".", "size", "[", "0", "]", "==", "w", "and", "img", ".", "size", "[", "1", "]", "==", "h", ")", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ")", "\n", "\n", "", "", "return", "out_images", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupCenterCrop.__init__": [[201, 203], ["torchvision.transforms.CenterCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "CenterCrop", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupCenterCrop.__call__": [[204, 206], ["transforms.GroupCenterCrop.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupRandomHorizontalFlip.__init__": [[211, 213], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_flow", "=", "False", ")", ":", "\n", "        ", "self", ".", "is_flow", "=", "is_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupRandomHorizontalFlip.__call__": [[214, 224], ["random.random", "img.transpose", "range", "len", "PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ",", "is_flow", "=", "False", ")", ":", "\n", "        ", "v", "=", "random", ".", "random", "(", ")", "\n", "if", "v", "<", "0.5", ":", "\n", "            ", "ret", "=", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "img_group", "]", "\n", "if", "self", ".", "is_flow", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "ret", ")", ",", "2", ")", ":", "\n", "                    ", "ret", "[", "i", "]", "=", "ImageOps", ".", "invert", "(", "ret", "[", "i", "]", ")", "# invert flow pixel values when flipping", "\n", "", "", "return", "ret", "\n", "", "else", ":", "\n", "            ", "return", "img_group", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupNormalize.__init__": [[227, 230], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupNormalize.__call__": [[231, 239], ["zip", "t.sub_().div_", "len", "len", "tensor.size", "tensor.size", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "rep_mean", "=", "self", ".", "mean", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "mean", ")", ")", "\n", "rep_std", "=", "self", ".", "std", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "std", ")", ")", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "rep_mean", ",", "rep_std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillGroupNormalize.__init__": [[241, 244], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillGroupNormalize.__call__": [[245, 254], ["zip", "t.sub_().div_", "len", "len", "tensor.size", "tensor.size", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "fct_tensor", ")", ":", "\n", "        ", "fct", ",", "tensor", "=", "fct_tensor", "\n", "rep_mean", "=", "self", ".", "mean", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "mean", ")", ")", "\n", "rep_std", "=", "self", ".", "std", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "std", ")", ")", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "rep_mean", ",", "rep_std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "\n", "", "return", "fct", ",", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupScale.__init__": [[265, 267], ["torchvision.transforms.Resize"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "Resize", "(", "size", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupScale.__call__": [[268, 270], ["transforms.GroupScale.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupOverSample.__init__": [[273, 281], ["transforms.GroupScale", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ",", "flip", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupOverSample.__call__": [[282, 309], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "list", "transforms.GroupOverSample.scale_worker", "list", "list", "enumerate", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.extend", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", "=", "self", ".", "scale_worker", "(", "img_group", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "offsets", "=", "GroupMultiScaleCrop", ".", "fill_fix_offset", "(", "False", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                    ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                ", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "", "return", "oversample_group", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupFullResSample.__init__": [[312, 320], ["transforms.GroupScale", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ",", "flip", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupFullResSample.__call__": [[321, 355], ["list", "list.append", "list.append", "list.append", "list", "transforms.GroupFullResSample.scale_worker", "list", "list", "enumerate", "list.extend", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", "=", "self", ".", "scale_worker", "(", "img_group", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "offsets", "=", "list", "(", ")", "\n", "offsets", ".", "append", "(", "(", "0", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# left", "\n", "offsets", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# right", "\n", "offsets", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                    ", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                        ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                        ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "return", "oversample_group", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop.__init__": [[359, 366], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scales", "=", "None", ",", "max_distort", "=", "1", ",", "fix_crop", "=", "True", ",", "more_fix_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "if", "scales", "is", "not", "None", "else", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", "\n", "self", ".", "max_distort", "=", "max_distort", "\n", "self", ".", "fix_crop", "=", "fix_crop", "\n", "self", ".", "more_fix_crop", "=", "more_fix_crop", "\n", "self", ".", "input_size", "=", "input_size", "if", "not", "isinstance", "(", "input_size", ",", "int", ")", "else", "[", "input_size", ",", "input_size", "]", "\n", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop.__call__": [[367, 376], ["transforms.GroupMultiScaleCrop._sample_crop_size", "img.crop", "img.resize"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop._sample_crop_size"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "im_size", "=", "img_group", "[", "0", "]", ".", "size", "\n", "\n", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "self", ".", "_sample_crop_size", "(", "im_size", ")", "\n", "crop_img_group", "=", "[", "img", ".", "crop", "(", "(", "offset_w", ",", "offset_h", ",", "offset_w", "+", "crop_w", ",", "offset_h", "+", "crop_h", ")", ")", "for", "img", "in", "img_group", "]", "\n", "ret_img_group", "=", "[", "img", ".", "resize", "(", "(", "self", ".", "input_size", "[", "0", "]", ",", "self", ".", "input_size", "[", "1", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "for", "img", "in", "crop_img_group", "]", "\n", "return", "ret_img_group", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop._sample_crop_size": [[377, 400], ["min", "enumerate", "random.choice", "int", "enumerate", "random.randint", "random.randint", "transforms.GroupMultiScaleCrop._sample_fix_offset", "abs", "abs", "abs", "pairs.append"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop._sample_fix_offset"], ["", "def", "_sample_crop_size", "(", "self", ",", "im_size", ")", ":", "\n", "        ", "image_w", ",", "image_h", "=", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", "\n", "\n", "# find a crop size", "\n", "base_size", "=", "min", "(", "image_w", ",", "image_h", ")", "\n", "crop_sizes", "=", "[", "int", "(", "base_size", "*", "x", ")", "for", "x", "in", "self", ".", "scales", "]", "\n", "crop_h", "=", "[", "self", ".", "input_size", "[", "1", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "1", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "crop_w", "=", "[", "self", ".", "input_size", "[", "0", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "0", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "crop_h", ")", ":", "\n", "            ", "for", "j", ",", "w", "in", "enumerate", "(", "crop_w", ")", ":", "\n", "                ", "if", "abs", "(", "i", "-", "j", ")", "<=", "self", ".", "max_distort", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "crop_pair", "=", "random", ".", "choice", "(", "pairs", ")", "\n", "if", "not", "self", ".", "fix_crop", ":", "\n", "            ", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "image_w", "-", "crop_pair", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "image_h", "-", "crop_pair", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w_offset", ",", "h_offset", "=", "self", ".", "_sample_fix_offset", "(", "image_w", ",", "image_h", ",", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ")", "\n", "\n", "", "return", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ",", "w_offset", ",", "h_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop._sample_fix_offset": [[401, 404], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "random.choice"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "_sample_fix_offset", "(", "self", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "offsets", "=", "self", ".", "fill_fix_offset", "(", "self", ".", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "return", "random", ".", "choice", "(", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupMultiScaleCrop.fill_fix_offset": [[405, 429], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fill_fix_offset", "(", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "ret", ".", "append", "(", "(", "0", ",", "0", ")", ")", "# upper left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "0", ")", ")", "# upper right", "\n", "ret", ".", "append", "(", "(", "0", ",", "4", "*", "h_step", ")", ")", "# lower left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "if", "more_fix_crop", ":", "\n", "            ", "ret", ".", "append", "(", "(", "0", ",", "2", "*", "h_step", ")", ")", "# center left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower center", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "0", "*", "h_step", ")", ")", "# upper center", "\n", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper right quarter", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower righ quarter", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupRandomSizedCrop.__init__": [[438, 441], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.GroupRandomSizedCrop.__call__": [[442, 476], ["range", "random.uniform", "int", "int", "list", "transforms.GroupScale", "transforms.GroupRandomCrop", "GroupRandomCrop.", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "list.append", "GroupScale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "*", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.08", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "and", "h", "<=", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "found", "=", "False", "\n", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "\n", "", "if", "found", ":", "\n", "            ", "out_group", "=", "list", "(", ")", "\n", "for", "img", "in", "img_group", ":", "\n", "                ", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "out_group", ".", "append", "(", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", ")", "\n", "", "return", "out_group", "\n", "", "else", ":", "\n", "# Fallback", "\n", "            ", "scale", "=", "GroupScale", "(", "self", ".", "size", ",", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "crop", "=", "GroupRandomCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "scale", "(", "img_group", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.Stack.__init__": [[480, 482], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "roll", "=", "False", ")", ":", "\n", "        ", "self", ".", "roll", "=", "roll", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.Stack.__call__": [[483, 491], ["numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "if", "img_group", "[", "0", "]", ".", "mode", "==", "'L'", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "x", ",", "2", ")", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "elif", "img_group", "[", "0", "]", ".", "mode", "==", "'RGB'", ":", "\n", "            ", "if", "self", ".", "roll", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "x", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "img_group", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillStack.__init__": [[493, 495], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "roll", "=", "False", ")", ":", "\n", "        ", "self", ".", "roll", "=", "roll", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillStack.__call__": [[496, 505], ["numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "fct_img_group", ")", ":", "\n", "        ", "fct", ",", "img_group", "=", "fct_img_group", "\n", "if", "img_group", "[", "0", "]", ".", "mode", "==", "'L'", ":", "\n", "            ", "return", "fct", ",", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "x", ",", "2", ")", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "elif", "img_group", "[", "0", "]", ".", "mode", "==", "'RGB'", ":", "\n", "            ", "if", "self", ".", "roll", ":", "\n", "                ", "return", "(", "fct", ",", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "x", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "fct", ",", "np", ".", "concatenate", "(", "img_group", ",", "axis", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.ToTorchFormatTensor.__init__": [[510, 512], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "div", "=", "True", ")", ":", "\n", "        ", "self", ".", "div", "=", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.ToTorchFormatTensor.__call__": [[513, 525], ["isinstance", "torch.from_numpy().permute().contiguous", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.ByteStorage.from_buffer", "len", "torch.from_numpy().permute", "pic.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# handle PIL Image", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "len", "(", "pic", ".", "mode", ")", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "if", "self", ".", "div", "else", "img", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillToTorchFormatTensor.__init__": [[529, 531], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "div", "=", "True", ")", ":", "\n", "        ", "self", ".", "div", "=", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.DistillToTorchFormatTensor.__call__": [[532, 545], ["isinstance", "torch.from_numpy().permute().contiguous", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "torch.ByteStorage.from_buffer", "len", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy().permute", "pic.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "fct_pic", ")", ":", "\n", "        ", "fct", ",", "pic", "=", "fct_pic", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# handle PIL Image", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "len", "(", "pic", ".", "mode", ")", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "return", "(", "fct", ",", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "if", "self", ".", "div", "else", "img", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.transforms.IdentityTransform.__call__": [[550, 552], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.__init__": [[31, 180], ["torch.nn.Module.__init__", "RSTG", "dyreg0.DynamicGraph.compute_anchors", "dyreg0.DynamicGraph.register_buffer", "dyreg0.DynamicGraph.register_buffer", "torch.nn.ModuleDict", "dyreg0.DynamicGraph.create_offset_modules", "torch.arange().unsqueeze().unsqueeze().to", "torch.arange().unsqueeze().unsqueeze().to", "dyreg0.DynamicGraph.register_buffer", "dyreg0.DynamicGraph.register_buffer", "LayerNormAffineXC", "LayerNormAffineXC", "torch.nn.Conv2d", "torch.nn.Conv2d", "LayerNormAffine2D", "torch.nn.AdaptiveAvgPool2d", "torch.ones", "torch.ones", "dyreg0.DynamicGraph.register_buffer", "dyreg0.DynamicGraph.register_buffer", "Fishnet", "torch.nn.Conv2d", "torch.nn.Linear", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "LayerNormAffine2D", "LayerNormAffine2D", "torch.zeros", "dyreg0.DynamicGraph.register_buffer", "dyreg0.DynamicGraph.get_fix_kernel", "dyreg0.DynamicGraph.register_buffer", "dyreg0.DynamicGraph.fix_kernel.unsqueeze().repeat", "torch.nn.Conv1d", "torch.nn.Sequential", "torch.nn.Conv1d", "torch.nn.Conv2d", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "max", "dyreg0.DynamicGraph.fix_kernel.unsqueeze", "torch.cuda.device_count", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.compute_anchors", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.create_offset_modules", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_fix_kernel"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_norm": [[180, 183], ["None"], "methods", ["None"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.create_offset_modules": [[184, 233], ["recurrent_net", "torch.nn.AdaptiveAvgPool2d", "Fishnet", "torch.nn.Sequential", "torch.nn.Linear", "torch.zeros", "torch.ones", "torch.cat", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Conv2d", "torch.nn.AdaptiveAvgPool2d", "GloRe", "torch.zeros", "Fishnet", "GloRe"], "methods", ["None"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.compute_anchors": [[234, 258], ["ph.repeat().view.repeat().view.repeat().view", "pw.repeat.repeat.repeat", "torch.ones", "torch.ones", "ph.repeat().view.repeat().view.unsqueeze().unsqueeze", "pw.repeat.repeat.unsqueeze().unsqueeze", "ph.repeat().view.repeat().view.repeat().view", "pw.repeat.repeat.repeat", "print", "sys.exit", "ph.repeat().view.repeat().view.repeat", "torch.linspace", "torch.linspace", "ph.repeat().view.repeat().view.unsqueeze", "pw.repeat.repeat.unsqueeze", "ph.repeat().view.repeat().view.repeat"], "methods", ["None"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_offsets": [[260, 301], ["dyreg0.DynamicGraph.get_norm", "global_features.permute.permute.view", "global_features.permute.permute.permute().contiguous", "global_features.permute.permute.view", "dyreg0.DynamicGraph.offset_lstm.flatten_parameters", "dyreg0.DynamicGraph.offset_lstm", "dyreg0.DynamicGraph.view", "dyreg0.DynamicGraph.permute().contiguous", "dyreg0.DynamicGraph.view", "dyreg0.DynamicGraph.get_norm", "dyreg0.DynamicGraph.offset_pred", "dyreg0.DynamicGraph.input_pooling", "dyreg0.DynamicGraph.fishnet", "dyreg0.DynamicGraph.global_conv", "global_features.permute.permute.view", "dyreg0.DynamicGraph.glore", "global_features.permute.permute.permute", "global_features.permute.permute.permute", "dyreg0.DynamicGraph.permute", "dyreg0.DynamicGraph.fishnet", "dyreg0.DynamicGraph.glore", "global_features.permute.permute.permute"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_fix_kernel": [[302, 312], ["print", "os.path.exists", "saved_filters[].astype", "torch.tensor", "open", "pickle.load"], "methods", ["None"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_glore_kernel": [[313, 318], ["dyreg0.DynamicGraph.mask_fishnet", "dyreg0.DynamicGraph.mask_pred", "mask.view.view.view"], "methods", ["None"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_dynamic_kernel": [[319, 447], ["offsets.view.view.view", "torch.clamp", "torch.nn.functional.relu.unsqueeze", "torch.clamp", "torch.nn.functional.relu.unsqueeze", "torch.matmul", "torch.stack", "kernel.view.view.view", "torch.exp", "torch.abs", "torch.nn.functional.relu", "torch.exp", "torch.abs", "torch.nn.functional.relu", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.tanh", "torch.tanh", "torch.sum", "offsets[].unsqueeze", "offsets[].unsqueeze", "offsets[].unsqueeze", "offsets[].unsqueeze", "dyreg0.DynamicGraph.const_dh_ones_buf.repeat", "dyreg0.DynamicGraph.const_dw_ones_buf.repeat", "torch.tanh", "torch.tanh", "print", "sys.exit", "offsets[].unsqueeze", "offsets[].unsqueeze", "offsets[].unsqueeze", "offsets[].unsqueeze", "torch.exp", "torch.exp", "offsets[].unsqueeze", "atanh", "offsets[].unsqueeze", "atanh", "offsets[].unsqueeze", "atanh", "offsets[].unsqueeze", "atanh"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.atanh", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.atanh", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.atanh", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.atanh"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.set_input": [[448, 569], ["enumerate", "torch.cat", "torch.cat", "dyreg0.DynamicGraph.kernel.mean().mean", "input_features.mean().mean", "differentiable_resize_area", "dyreg0.DynamicGraph.nodes.mean", "dyreg0.DynamicGraph.kernel_foreground.view", "differentiable_resize_area", "act_scale.permute.permute.view", "initial_kernel.view", "dyreg0.DynamicGraph.kernel_projection1", "kernel_location.detach.detach.permute", "nodes_wo_position.append", "patch_feats.append", "tuple", "tuple", "kernel_background.sum().sum", "dyreg0.DynamicGraph.kernel_foreground.sum().sum", "dyreg0.DynamicGraph.contrastive_mlp", "dyreg0.DynamicGraph.nodes_background.squeeze().squeeze", "dyreg0.DynamicGraph.contrastive_mlp", "dyreg0.DynamicGraph.nodes_background.unsqueeze().unsqueeze", "dyreg0.DynamicGraph.contrastive_mlp", "dyreg0.DynamicGraph.nodes_wo_position.permute", "dyreg0.DynamicGraph.contrastive_mlp", "dyreg0.DynamicGraph.nodes_wo_position.permute", "act_scale.permute.permute.view", "dyreg0.DynamicGraph.node_confidence", "torch.nn.functional.sigmoid", "dyreg0.DynamicGraph.node_conf.view", "kernel_location.detach.detach.detach", "initial_kernel.view", "dyreg0.DynamicGraph.kernel_location_pool", "kernel_location.detach.detach.view", "kernel_location.detach.detach.detach", "torch.cat", "act_scale.permute.permute.permute", "dyreg0.DynamicGraph.kernel_projection2", "act_scale.permute.permute.permute", "dyreg0.DynamicGraph.kernel.mean", "[].max", "input_features.mean", "kernel_background.sum", "dyreg0.DynamicGraph.kernel_foreground.sum", "dyreg0.DynamicGraph.nodes_background.squeeze", "dyreg0.DynamicGraph.nodes_background.unsqueeze", "dyreg0.DynamicGraph.get_glore_kernel", "dyreg0.DynamicGraph.get_offsets", "torch.nn.functional.sigmoid", "dyreg0.DynamicGraph.node_conf.view", "dyreg0.DynamicGraph.get_dynamic_kernel", "dyreg0.DynamicGraph.get_dynamic_kernel", "dyreg0.DynamicGraph.kernel_foreground.max"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.differentiable_resize_area", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.differentiable_resize_area", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_glore_kernel", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_offsets", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_dynamic_kernel", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_dynamic_kernel"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.remap_nodes": [[570, 594], ["nodes_scale.view.view.view", "differentiable_resize_area", "dyreg0.DynamicGraph.project_skip_graph", "dyreg0.DynamicGraph.get_norm", "dyreg0.DynamicGraph.avg_pool_7", "dyreg0.DynamicGraph.kernel.permute"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.differentiable_resize_area", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.get_gernel": [[595, 597], ["None"], "methods", ["None"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.forward": [[597, 629], ["dyreg0.DynamicGraph.set_input", "dyreg0.DynamicGraph.rstg", "dyreg0.DynamicGraph.remap_nodes", "dyreg0.DynamicGraph.get_norm", "dyreg0.DynamicGraph.project_i3d_linear", "nodes.view.view.view", "dyreg0.DynamicGraph.project_back_i3d_linear", "nodes.view.view.view", "out.view.view.view", "dyreg0.DynamicGraph.project_back_i3d_linear", "out.view.view.view", "dyreg0.DynamicGraph.get_norm"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.set_input", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraph.remap_nodes", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraphWrapper.__init__": [[632, 691], ["torch.nn.Module.__init__", "dyreg0.DynamicGraph", "torch.nn.ModuleDict", "LayerNormAffine2D", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.init.constant_", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Parameter", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "torch.Tensor", "torch.nn.Sequential", "torch.nn.init.constant_", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraphWrapper.get_norm": [[692, 695], ["None"], "methods", ["None"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraphWrapper.get_gru_gate": [[696, 702], ["torch.nn.Sigmoid", "torch.nn.Tanh", "dyreg0.DynamicGraphWrapper.gru_gate_r_w", "dyreg0.DynamicGraphWrapper.gru_gate_r_u", "torch.nn.Sigmoid", "dyreg0.DynamicGraphWrapper.gru_gate_h_w", "dyreg0.DynamicGraphWrapper.gru_gate_h_u", "dyreg0.DynamicGraphWrapper.gru_gate_z_w", "dyreg0.DynamicGraphWrapper.gru_gate_z_u"], "methods", ["None"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraphWrapper.forward": [[703, 749], ["dyreg0.DynamicGraphWrapper.block", "dyreg0.DynamicGraphWrapper.dynamic_graph", "dyreg0.DynamicGraphWrapper.permute().contiguous", "dyreg0.DynamicGraphWrapper.view", "dyreg0.DynamicGraphWrapper.input_pooling", "dyreg0.DynamicGraphWrapper.get_norm", "dyreg0.DynamicGraphWrapper.output_pooling", "out.permute().contiguous.permute().contiguous.view", "out.permute().contiguous.permute().contiguous.permute().contiguous", "dyreg0.DynamicGraphWrapper.permute", "dyreg0.DynamicGraphWrapper.out_gate", "dyreg0.DynamicGraphWrapper.get_gru_gate", "out.permute().contiguous.permute().contiguous.permute", "type", "dyreg0.DynamicGraphWrapper.one_chan_out_gate"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.DynamicGraphWrapper.get_gru_gate"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.make_rstg": [[751, 802], ["args.place_graph.replace().split", "print", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "args.place_graph.replace", "int", "int", "dyreg0.DynamicGraphWrapper", "dyreg0.DynamicGraphWrapper", "place.split", "place.split"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.save_image": [[804, 812], ["out.permute.permute", "matplotlib.subplots", "axarr.imshow", "matplotlib.savefig", "out.permute.detach().numpy", "out_image.min", "out_image.max", "out.permute.detach"], "function", ["None"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.__init__": [[25, 116], ["torch.nn.Module.__init__", "args.place_graph.replace().split", "models.TSN._prepare_base_model", "models.TSN._prepare_tsn", "ops.basic_ops.ConsensusModule", "ValueError", "int", "int", "models.TSN.places.append", "print", "torch.nn.Softmax", "models.TSN.partialBN", "args.place_graph.replace", "place.split", "place.split"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN._prepare_base_model", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN._prepare_tsn", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.partialBN", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_segments", ",", "modality", ",", "\n", "base_model", "=", "'resnet101'", ",", "new_length", "=", "None", ",", "\n", "consensus_type", "=", "'avg'", ",", "before_softmax", "=", "True", ",", "\n", "dropout", "=", "0.8", ",", "img_feature_dim", "=", "256", ",", "\n", "crop_num", "=", "1", ",", "partial_bn", "=", "True", ",", "print_spec", "=", "True", ",", "pretrain", "=", "'imagenet'", ",", "\n", "is_shift", "=", "False", ",", "shift_div", "=", "8", ",", "shift_place", "=", "'blockres'", ",", "fc_lr5", "=", "False", ",", "\n", "temporal_pool", "=", "False", ",", "non_local", "=", "False", ")", ":", "\n", "        ", "super", "(", "TSN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "reshape", "=", "True", "\n", "self", ".", "before_softmax", "=", "before_softmax", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "crop_num", "=", "crop_num", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "# the dimension of the CNN feature to represent each frame", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "self", ".", "is_shift", "=", "is_shift", "\n", "self", ".", "shift_div", "=", "shift_div", "\n", "self", ".", "shift_place", "=", "shift_place", "\n", "self", ".", "base_model_name", "=", "base_model", "\n", "self", ".", "fc_lr5", "=", "fc_lr5", "\n", "self", ".", "temporal_pool", "=", "temporal_pool", "\n", "self", ".", "non_local", "=", "non_local", "\n", "if", "args", ".", "arch", "==", "'resnet13'", ":", "\n", "            ", "self", ".", "out_pool_size", "=", "8", "\n", "self", ".", "out_num_ch", "=", "256", "\n", "", "elif", "args", ".", "arch", "==", "'resnet18'", ":", "\n", "            ", "self", ".", "out_pool_size", "=", "7", "\n", "self", ".", "out_num_ch", "=", "512", "\n", "", "elif", "args", ".", "arch", "==", "'resnet34'", ":", "\n", "            ", "self", ".", "out_pool_size", "=", "7", "\n", "self", ".", "out_num_ch", "=", "512", "\n", "", "elif", "'resnet50'", "in", "args", ".", "arch", ":", "\n", "            ", "self", ".", "out_pool_size", "=", "7", "\n", "self", ".", "out_num_ch", "=", "2048", "\n", "if", "args", ".", "full_res", ":", "\n", "                ", "self", ".", "out_pool_size", "=", "8", "\n", "", "", "elif", "args", ".", "arch", "==", "'wide_resnet50_2'", ":", "\n", "            ", "self", ".", "out_pool_size", "=", "7", "\n", "self", ".", "out_num_ch", "=", "512", "\n", "", "elif", "'resnet101'", "in", "args", ".", "arch", ":", "\n", "            ", "self", ".", "out_pool_size", "=", "7", "\n", "self", ".", "out_num_ch", "=", "2048", "\n", "if", "args", ".", "full_res", ":", "\n", "                ", "self", ".", "out_pool_size", "=", "8", "\n", "\n", "# auxiliary intermediate features", "\n", "", "", "self", ".", "interm_feats", "=", "{", "}", "\n", "self", ".", "kernels", "=", "{", "}", "\n", "if", "not", "before_softmax", "and", "consensus_type", "!=", "'avg'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only avg consensus can be used after Softmax\"", ")", "\n", "\n", "", "if", "new_length", "is", "None", ":", "\n", "            ", "self", ".", "new_length", "=", "1", "if", "modality", "==", "\"RGB\"", "or", "modality", "==", "'gray'", "else", "5", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_length", "=", "new_length", "\n", "\n", "", "places", "=", "args", ".", "place_graph", ".", "replace", "(", "'layer'", ",", "''", ")", ".", "split", "(", "'_'", ")", "\n", "self", ".", "places", "=", "[", "]", "\n", "for", "place", "in", "places", ":", "\n", "            ", "layer", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "block", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "self", ".", "places", ".", "append", "(", "(", "layer", ",", "block", ")", ")", "\n", "\n", "\n", "", "if", "print_spec", ":", "\n", "            ", "print", "(", "(", "\"\"\"\n    Initializing TSN with base model: {}.\n    TSN Configurations:\n        input_modality:     {}\n        num_segments:       {}\n        new_length:         {}\n        consensus_module:   {}\n        dropout_ratio:      {}\n        img_feature_dim:    {}\n            \"\"\"", ".", "format", "(", "base_model", ",", "self", ".", "modality", ",", "self", ".", "num_segments", ",", "self", ".", "new_length", ",", "consensus_type", ",", "self", ".", "dropout", ",", "self", ".", "img_feature_dim", ")", ")", ")", "\n", "\n", "", "self", ".", "_prepare_base_model", "(", "base_model", ")", "\n", "\n", "feature_dim", "=", "self", ".", "_prepare_tsn", "(", "num_class", ")", "\n", "\n", "self", ".", "consensus", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "\n", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n", "", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN._prepare_tsn": [[117, 135], ["getattr", "setattr", "setattr", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "hasattr", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.init.normal_", "torch.nn.init.constant_", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_tsn", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "if", "self", ".", "dropout", "==", "0", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", ")", "\n", "self", ".", "new_fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "self", ".", "out_num_ch", ",", "num_class", ")", "\n", "\n", "", "std", "=", "0.001", "\n", "if", "self", ".", "new_fc", "is", "None", ":", "\n", "            ", "normal_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "new_fc", ",", "'weight'", ")", ":", "\n", "                ", "normal_", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "", "", "return", "feature_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN._prepare_base_model": [[136, 220], ["print", "ops.resnet2d.resnet18", "torch.nn.Sequential", "torch.nn.Conv2d", "print", "make_temporal_shift", "print", "make_non_local", "print", "make_rstg", "torch.nn.Identity", "torch.nn.AdaptiveAvgPool2d", "torch.nn.ModuleDict", "ops.resnet2d.resnet18", "torch.nn.Identity", "torch.nn.Conv2d", "torch.nn.Identity", "torch.nn.AdaptiveAvgPool2d", "torch.nn.ModuleDict", "ops.resnet2d.resnet34", "LayerNormAffine2D", "torch.nn.Conv2d", "ops.resnet2d.resnet50", "LayerNormAffine2D", "ops.resnet2d.resnet101", "ops.resnet2d.wide_resnet50_2"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet18", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.make_temporal_shift", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.non_local.make_non_local", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dyreg0.make_rstg", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet18", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet34", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet50", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet101", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.wide_resnet50_2"], ["", "def", "_prepare_base_model", "(", "self", ",", "base_model", ")", ":", "\n", "        ", "print", "(", "'=> base model: {}'", ".", "format", "(", "base_model", ")", ")", "\n", "\n", "if", "'resnet'", "in", "base_model", ":", "\n", "\n", "            ", "if", "base_model", "==", "'resnet13'", ":", "\n", "# do NOT load pretrained imagenet", "\n", "                ", "self", ".", "base_model", "=", "resnet18", "(", "pretrained", "=", "False", ")", "\n", "", "elif", "base_model", "==", "'resnet18'", ":", "\n", "                ", "self", ".", "base_model", "=", "resnet18", "(", "pretrained", "=", "False", "if", "args", ".", "resume", "else", "True", ")", "\n", "", "elif", "base_model", "==", "'resnet34'", ":", "\n", "                ", "self", ".", "base_model", "=", "resnet34", "(", "pretrained", "=", "False", "if", "args", ".", "resume", "else", "True", ")", "\n", "", "elif", "base_model", "==", "'resnet50'", ":", "\n", "                ", "self", ".", "base_model", "=", "resnet50", "(", "pretrained", "=", "False", "if", "args", ".", "resume", "else", "True", ")", "\n", "", "elif", "base_model", "==", "'resnet101'", ":", "\n", "                ", "self", ".", "base_model", "=", "resnet101", "(", "pretrained", "=", "False", "if", "args", ".", "resume", "else", "True", ")", "\n", "", "elif", "base_model", "==", "'wide_resnet50_2'", ":", "\n", "                ", "self", ".", "base_model", "=", "wide_resnet50_2", "(", "pretrained", "=", "False", "if", "args", ".", "resume", "else", "True", ")", "\n", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'syncMNIST'", "or", "args", ".", "dataset", "==", "'multiSyncMNIST'", ":", "\n", "# self.base_model.layer3 = self.base_model.layer4", "\n", "                ", "self", ".", "base_model", ".", "layer4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Identity", "(", ")", ")", "\n", "self", ".", "base_model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "is_shift", ":", "\n", "                ", "print", "(", "'Adding temporal shift...'", ")", "\n", "from", "ops", ".", "temporal_shift", "import", "make_temporal_shift", "\n", "make_temporal_shift", "(", "self", ".", "base_model", ",", "self", ".", "num_segments", ",", "\n", "n_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ",", "temporal_pool", "=", "self", ".", "temporal_pool", ")", "\n", "", "if", "self", ".", "non_local", ":", "\n", "                ", "print", "(", "'Adding non-local module...'", ")", "\n", "from", "ops", ".", "non_local", "import", "make_non_local", "\n", "make_non_local", "(", "self", ".", "base_model", ",", "self", ".", "num_segments", ")", "\n", "", "if", "args", ".", "use_rstg", ":", "\n", "                ", "print", "(", "'Adding rstg module...'", ")", "\n", "from", "ops", ".", "dyreg", "import", "make_rstg", "\n", "make_rstg", "(", "self", ".", "base_model", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'somethingv2'", "or", "args", ".", "dataset", "==", "'something'", "or", "args", ".", "dataset", "==", "'cater'", "or", "args", ".", "dataset", "==", "'others'", ":", "\n", "                ", "if", "'resnet50_smt_else'", "in", "base_model", ":", "\n", "                    ", "self", ".", "base_model", ".", "last_layer_name", "=", "'classifier'", "\n", "", "else", ":", "\n", "                    ", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "# self.base_model.avgpool = nn.AdaptiveAvgPool2d(1)", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "base_model", ".", "rstg_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "self", ".", "norm_dict", "=", "nn", ".", "ModuleDict", "(", "{", "}", ")", "\n", "\n", "if", "args", ".", "rstg_skip_connection", "==", "True", ":", "\n", "                    ", "self", ".", "map_final_project", "=", "nn", ".", "Conv2d", "(", "self", ".", "out_num_ch", "//", "args", ".", "ch_div", ",", "self", ".", "out_num_ch", ",", "[", "1", ",", "1", "]", ")", "\n", "if", "args", ".", "tmp_norm_skip_conn", ":", "\n", "                        ", "if", "args", ".", "freeze_backbone", "or", "args", ".", "init_skip_zero", ":", "\n", "                            ", "zero_init", "=", "True", "\n", "", "else", ":", "\n", "                            ", "zero_init", "=", "False", "\n", "", "self", ".", "norm_dict", "[", "'skip_conn'", "]", "=", "LayerNormAffine2D", "(", "self", ".", "out_num_ch", ",", "(", "self", ".", "out_num_ch", ",", "7", ",", "7", ")", ",", "\n", "zero_init", "=", "zero_init", ")", "\n", "\n", "\n", "", "", "", "elif", "args", ".", "dataset", "==", "'syncMNIST'", "or", "args", ".", "dataset", "==", "'multiSyncMNIST'", ":", "\n", "                ", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "self", ".", "input_size", "=", "128", "\n", "self", ".", "input_mean", "=", "[", "0", "]", "\n", "self", ".", "input_std", "=", "[", "1", "]", "\n", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "base_model", ".", "rstg_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "norm_dict", "=", "nn", ".", "ModuleDict", "(", "{", "}", ")", "\n", "\n", "if", "args", ".", "rstg_skip_connection", "==", "True", ":", "\n", "                    ", "self", ".", "map_final_project", "=", "nn", ".", "Conv2d", "(", "self", ".", "out_num_ch", "//", "args", ".", "ch_div", ",", "self", ".", "out_num_ch", ",", "[", "1", ",", "1", "]", ")", "\n", "if", "args", ".", "tmp_norm_skip_conn", ":", "\n", "                        ", "if", "args", ".", "freeze_backbone", ":", "\n", "                            ", "zero_init", "=", "True", "\n", "", "else", ":", "\n", "                            ", "zero_init", "=", "False", "\n", "", "self", ".", "norm_dict", "[", "'skip_conn'", "]", "=", "LayerNormAffine2D", "(", "self", ".", "out_num_ch", ",", "(", "self", ".", "out_num_ch", ",", "7", ",", "7", ")", ",", "\n", "zero_init", "=", "zero_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.train": [[222, 239], ["super().train", "print", "models.TSN.base_model.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.train"], ["", "", "", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        :return:\n        \"\"\"", "\n", "super", "(", "TSN", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", "and", "mode", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm2D\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "# count += 1", "\n", "# if count >= (2 if self._enable_pbn else 1):", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.partialBN": [[241, 243], ["None"], "methods", ["None"], ["", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.get_optim_policies": [[245, 397], ["models.TSN.named_modules", "models.TSN.named_parameters", "isinstance", "isinstance", "isinstance", "list", "isinstance", "m.named_parameters", "first_conv_weight.append", "normal_weight.append", "isinstance", "normal_weight.append", "len", "first_conv_bias.append", "len", "normal_bias.append", "print", "list", "list", "normal_weight.append", "normal_bias.append", "isinstance", "m.named_parameters", "lr5_weight.append", "normal_weight.append", "len", "m.named_parameters", "list", "bn.extend", "isinstance", "lr10_bias.append", "normal_bias.append", "m.named_parameters", "list", "bn.extend", "m.named_parameters", "list", "bn.extend", "isinstance", "isinstance", "list", "normal_weight.append", "normal_weight.append", "normal_bias.append", "normal_bias.append", "m.named_parameters", "m.named_parameters", "isinstance", "isinstance", "isinstance", "list", "bn.extend", "isinstance", "m.named_parameters", "list", "normal_weight.append", "normal_bias.append", "isinstance", "m.named_parameters", "list", "print", "m.named_parameters", "len", "len", "ValueError", "list", "m.named_parameters", "type"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "first_conv_weight", "=", "[", "]", "\n", "first_conv_bias", "=", "[", "]", "\n", "normal_weight", "=", "[", "]", "\n", "normal_bias", "=", "[", "]", "\n", "lr5_weight", "=", "[", "]", "\n", "lr10_bias", "=", "[", "]", "\n", "bn", "=", "[", "]", "\n", "custom_ops", "=", "[", "]", "\n", "\n", "conv_cnt", "=", "0", "\n", "bn_cnt", "=", "0", "\n", "\n", "for", "(", "m_name", ",", "m", ")", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "ps", "=", "[", "(", "m_name", "+", "'.'", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "ps", "]", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "continue", "\n", "\n", "", "conv_cnt", "+=", "1", "\n", "if", "conv_cnt", "==", "1", ":", "\n", "                    ", "first_conv_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "first_conv_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "# TODO: ce inseamna hardcodarile astea 56, 56?? ", "\n", "                ", "if", "174", "in", "m", ".", "weight", ".", "shape", "or", "46", "in", "m", ".", "weight", ".", "shape", "or", "56", "in", "m", ".", "weight", ".", "shape", ":", "\n", "                    ", "print", "(", "f'Last layer: Prediction: {m}'", ")", "\n", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "ps", "=", "[", "(", "m_name", "+", "'.'", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "ps", "]", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                        ", "continue", "\n", "", "if", "self", ".", "fc_lr5", ":", "\n", "                        ", "lr5_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "\n", "", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "if", "self", ".", "fc_lr5", ":", "\n", "                            ", "lr10_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "ps", "=", "[", "(", "m_name", "+", "'.'", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "ps", "]", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                        ", "continue", "\n", "", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "ps", "=", "[", "(", "m_name", "+", "'.'", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "ps", "]", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                        ", "continue", "\n", "", "bn", ".", "extend", "(", "ps", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "SyncBatchNorm", ")", ":", "\n", "                ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "ps", "=", "[", "(", "m_name", "+", "'.'", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "ps", "]", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                        ", "continue", "\n", "", "bn", ".", "extend", "(", "ps", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "ps", "=", "[", "(", "m_name", "+", "'.'", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "ps", "]", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                        ", "continue", "\n", "", "bn", ".", "extend", "(", "ps", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "GRU", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "LSTM", ")", ":", "\n", "                ", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "ps", "=", "[", "(", "m_name", "+", "'.'", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "ps", "]", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "continue", "\n", "", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "normal_bias", ".", "append", "(", "ps", "[", "2", "]", ")", "\n", "normal_bias", ".", "append", "(", "ps", "[", "3", "]", ")", "\n", "", "elif", "(", "isinstance", "(", "m", ",", "LayerNormAffineXC", ")", "\n", "or", "isinstance", "(", "m", ",", "LayerNormAffine2D", ")", "or", "isinstance", "(", "m", ",", "LayerNormAffine1D", ")", ")", ":", "\n", "                ", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "ps", "=", "[", "(", "m_name", "+", "'.'", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "ps", "]", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "continue", "\n", "# named_parameter = list(m.named_parameters())", "\n", "", "bn", ".", "extend", "(", "ps", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "ps", "=", "[", "(", "m_name", "+", "'.'", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "ps", "]", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "continue", "\n", "", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Parameter", ")", ":", "\n", "                ", "ps", "=", "list", "(", "m", ".", "named_parameters", "(", ")", ")", "\n", "if", "ps", "[", "0", "]", "[", "1", "]", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "continue", "\n", "", "print", "(", "m", ")", "\n", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                ", "if", "len", "(", "list", "(", "m", ".", "named_parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"New atomic module type: {}. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "\n", "", "", "", "additional_params_name", "=", "[", "'offset_alpha'", ",", "'att_bias'", "]", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "add_p", "in", "additional_params_name", ":", "\n", "                ", "if", "add_p", "in", "name", ":", "\n", "                    ", "if", "param", ".", "requires_grad", "==", "False", ":", "\n", "                        ", "continue", "\n", "", "normal_weight", ".", "append", "(", "(", "name", ",", "param", ")", ")", "\n", "\n", "", "", "", "lr_policies", "=", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "# for fc", "\n", "{", "'params'", ":", "lr5_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"lr5_weight\"", "}", ",", "\n", "{", "'params'", ":", "lr10_bias", ",", "'lr_mult'", ":", "10", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"lr10_bias\"", "}", ",", "\n", "]", "\n", "\n", "if", "args", ".", "dataset", "==", "'syncMNIST'", "or", "args", ".", "dataset", "==", "'multiSyncMNIST'", ":", "\n", "# set all lr mult, decay mult to 1 for all layers", "\n", "            ", "for", "p", "in", "lr_policies", ":", "\n", "                ", "p", "[", "'lr_mult'", "]", "=", "1", "\n", "p", "[", "'decay_mult'", "]", "=", "1", "\n", "\n", "", "", "return", "lr_policies", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.forward": [[400, 539], ["base_out.view.view.view", "models.TSN.base_model.rstg_avgpool", "torch.flatten", "model_aux_feats.update", "models.TSN.base_model", "models.TSN.base_model", "models.TSN.map_final_project", "models.TSN.new_fc", "models.TSN.softmax", "models.TSN.consensus", "models.TSN.squeeze", "input.view", "base_out.view.view.view", "base_out.view.view.view", "dynamic_graph1.aux_feats.keys", "dynamic_graph2.aux_feats.keys", "input.size", "dynamic_graph3.aux_feats.keys", "base_out.view.view.size", "base_out.view.view.size", "dynamic_graph4.aux_feats.keys"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.softmax"], ["", "def", "forward", "(", "self", ",", "input", ",", "no_reshape", "=", "False", ")", ":", "\n", "        ", "if", "not", "no_reshape", ":", "\n", "            ", "sample_len", "=", "(", "3", "if", "self", ".", "modality", "==", "\"RGB\"", "else", "2", ")", "*", "self", ".", "new_length", "\n", "if", "self", ".", "modality", "==", "'gray'", ":", "\n", "                ", "sample_len", "=", "1", "*", "self", ".", "new_length", "\n", "", "base_out", "=", "self", ".", "base_model", "(", "input", ".", "view", "(", "(", "-", "1", ",", "sample_len", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "\n", "            ", "base_out", "=", "self", ".", "base_model", "(", "input", ")", "\n", "# B x C x T x H x W", "\n", "\n", "\n", "\n", "", "if", "args", ".", "use_rstg", ":", "\n", "            ", "for", "layer", ",", "block", "in", "self", ".", "places", ":", "\n", "                ", "if", "args", ".", "bottleneck_graph", ":", "\n", "                    ", "if", "layer", "==", "1", ":", "\n", "                        ", "dynamic_graph1", "=", "self", ".", "base_model", ".", "layer1", "[", "block", "]", ".", "conv2", "[", "1", "]", ".", "dynamic_graph", "\n", "", "elif", "layer", "==", "2", ":", "\n", "                        ", "dynamic_graph2", "=", "self", ".", "base_model", ".", "layer2", "[", "block", "]", ".", "conv2", "[", "1", "]", ".", "dynamic_graph", "\n", "", "elif", "layer", "==", "3", ":", "\n", "                        ", "dynamic_graph3", "=", "self", ".", "base_model", ".", "layer3", "[", "block", "]", ".", "conv2", "[", "1", "]", ".", "dynamic_graph", "\n", "", "elif", "layer", "==", "4", ":", "\n", "                        ", "dynamic_graph4", "=", "self", ".", "base_model", ".", "layer4", "[", "block", "]", ".", "conv2", "[", "1", "]", ".", "dynamic_graph", "\n", "", "", "else", ":", "\n", "                    ", "if", "layer", "==", "1", ":", "\n", "                        ", "dynamic_graph1", "=", "self", ".", "base_model", ".", "layer1", "[", "block", "]", ".", "dynamic_graph", "\n", "", "elif", "layer", "==", "2", ":", "\n", "                        ", "dynamic_graph2", "=", "self", ".", "base_model", ".", "layer2", "[", "block", "]", ".", "dynamic_graph", "\n", "", "elif", "layer", "==", "3", ":", "\n", "                        ", "dynamic_graph3", "=", "self", ".", "base_model", ".", "layer3", "[", "block", "]", ".", "dynamic_graph", "\n", "", "elif", "layer", "==", "4", ":", "\n", "                        ", "dynamic_graph4", "=", "self", ".", "base_model", ".", "layer4", "[", "block", "]", ".", "dynamic_graph", "\n", "\n", "", "", "", "for", "layer", ",", "block", "in", "self", ".", "places", ":", "\n", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "                    ", "self", ".", "interm_feats", "[", "f'layer{layer}_{block}_kernels'", "]", "=", "dynamic_graph1", ".", "kernel", "\n", "self", ".", "kernels", "[", "f'layer{layer}_block{block}'", "]", "=", "dynamic_graph1", ".", "kernel", "\n", "\n", "", "elif", "layer", "==", "2", ":", "\n", "                    ", "self", ".", "interm_feats", "[", "f'layer{layer}_{block}_kernels'", "]", "=", "dynamic_graph2", ".", "kernel", "\n", "self", ".", "kernels", "[", "f'layer{layer}_block{block}'", "]", "=", "dynamic_graph2", ".", "kernel", "\n", "\n", "", "elif", "layer", "==", "3", ":", "\n", "                    ", "self", ".", "interm_feats", "[", "f'layer{layer}_{block}_kernels'", "]", "=", "dynamic_graph3", ".", "kernel", "\n", "self", ".", "kernels", "[", "f'layer{layer}_block{block}'", "]", "=", "dynamic_graph3", ".", "kernel", "\n", "\n", "", "elif", "layer", "==", "4", ":", "\n", "                    ", "self", ".", "interm_feats", "[", "f'layer{layer}_{block}_kernels'", "]", "=", "dynamic_graph4", ".", "kernel", "\n", "self", ".", "kernels", "[", "f'layer{layer}_block{block}'", "]", "=", "dynamic_graph4", ".", "kernel", "\n", "\n", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "interm_feats", "[", "'layer3_kernels'", "]", "=", "None", "\n", "\n", "", "base_out", "=", "base_out", ".", "view", "(", "(", "base_out", ".", "shape", "[", "0", "]", ",", "self", ".", "out_num_ch", ",", "self", ".", "out_pool_size", ",", "self", ".", "out_pool_size", ")", ")", "\n", "self", ".", "offsets", "=", "{", "}", "\n", "self", ".", "offsets_normed", "=", "{", "}", "\n", "self", ".", "nodes", "=", "{", "}", "\n", "if", "args", ".", "use_rstg", "and", "args", ".", "rstg_skip_connection", ":", "\n", "            ", "all_graphs_sum", "=", "0", "\n", "for", "layer", ",", "block", "in", "self", ".", "places", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "                    ", "all_graphs_sum", "=", "all_graphs_sum", "+", "dynamic_graph1", ".", "graph_out_map", "\n", "", "elif", "layer", "==", "2", ":", "\n", "                    ", "all_graphs_sum", "=", "all_graphs_sum", "+", "dynamic_graph2", ".", "graph_out_map", "\n", "", "elif", "layer", "==", "3", ":", "\n", "                    ", "all_graphs_sum", "=", "all_graphs_sum", "+", "dynamic_graph3", ".", "graph_out_map", "\n", "", "elif", "layer", "==", "4", ":", "\n", "                    ", "all_graphs_sum", "=", "all_graphs_sum", "+", "dynamic_graph4", ".", "graph_out_map", "\n", "\n", "\n", "", "", "all_graphs_sum", "=", "self", ".", "map_final_project", "(", "all_graphs_sum", ")", "\n", "base_out", "=", "base_out", "+", "all_graphs_sum", "\n", "\n", "", "self", ".", "aux_feats", "=", "{", "}", "\n", "if", "args", ".", "use_rstg", ":", "\n", "            ", "for", "layer", ",", "block", "in", "self", ".", "places", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "                    ", "self", ".", "offsets", "[", "f'layer1_block{block}'", "]", "=", "dynamic_graph1", ".", "offsets", "\n", "self", ".", "offsets_normed", "[", "f'layer1_block{block}'", "]", "=", "dynamic_graph1", ".", "offsets", "/", "args", ".", "graph_params", "[", "layer", "]", "[", "'H'", "]", "\n", "self", ".", "nodes", "[", "f'layer1_block{block}'", "]", "=", "dynamic_graph1", ".", "nodes_wo_position", "\n", "for", "key", "in", "dynamic_graph1", ".", "aux_feats", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "self", ".", "aux_feats", ":", "\n", "                            ", "self", ".", "aux_feats", "[", "key", "]", "=", "{", "}", "\n", "", "self", ".", "aux_feats", "[", "key", "]", "[", "f'layer1_block{block}'", "]", "=", "dynamic_graph1", ".", "aux_feats", "[", "key", "]", "\n", "", "", "elif", "layer", "==", "2", ":", "\n", "                    ", "self", ".", "offsets", "[", "f'layer2_block{block}'", "]", "=", "dynamic_graph2", ".", "offsets", "\n", "self", ".", "offsets_normed", "[", "f'layer2_block{block}'", "]", "=", "dynamic_graph2", ".", "offsets", "/", "args", ".", "graph_params", "[", "layer", "]", "[", "'H'", "]", "\n", "self", ".", "nodes", "[", "f'layer2_block{block}'", "]", "=", "dynamic_graph2", ".", "nodes_wo_position", "\n", "for", "key", "in", "dynamic_graph2", ".", "aux_feats", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "self", ".", "aux_feats", ":", "\n", "                            ", "self", ".", "aux_feats", "[", "key", "]", "=", "{", "}", "\n", "", "self", ".", "aux_feats", "[", "key", "]", "[", "f'layer2_block{block}'", "]", "=", "dynamic_graph2", ".", "aux_feats", "[", "key", "]", "\n", "", "", "elif", "layer", "==", "3", ":", "\n", "                    ", "self", ".", "offsets", "[", "f'layer3_block{block}'", "]", "=", "dynamic_graph3", ".", "offsets", "\n", "self", ".", "offsets_normed", "[", "f'layer3_block{block}'", "]", "=", "dynamic_graph3", ".", "offsets", "/", "args", ".", "graph_params", "[", "layer", "]", "[", "'H'", "]", "\n", "self", ".", "nodes", "[", "f'layer3_block{block}'", "]", "=", "dynamic_graph3", ".", "nodes_wo_position", "\n", "for", "key", "in", "dynamic_graph3", ".", "aux_feats", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "self", ".", "aux_feats", ":", "\n", "                            ", "self", ".", "aux_feats", "[", "key", "]", "=", "{", "}", "\n", "", "self", ".", "aux_feats", "[", "key", "]", "[", "f'layer3_block{block}'", "]", "=", "dynamic_graph3", ".", "aux_feats", "[", "key", "]", "\n", "", "", "elif", "layer", "==", "4", ":", "\n", "                    ", "self", ".", "offsets", "[", "f'layer4_block{block}'", "]", "=", "dynamic_graph4", ".", "offsets", "\n", "self", ".", "offsets_normed", "[", "f'layer4_block{block}'", "]", "=", "dynamic_graph4", ".", "offsets", "/", "args", ".", "graph_params", "[", "layer", "]", "[", "'H'", "]", "\n", "self", ".", "nodes", "[", "f'layer4_block{block}'", "]", "=", "dynamic_graph4", ".", "nodes_wo_position", "\n", "for", "key", "in", "dynamic_graph4", ".", "aux_feats", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "self", ".", "aux_feats", ":", "\n", "                            ", "self", ".", "aux_feats", "[", "key", "]", "=", "{", "}", "\n", "", "self", ".", "aux_feats", "[", "key", "]", "[", "f'layer4_block{block}'", "]", "=", "dynamic_graph4", ".", "aux_feats", "[", "key", "]", "\n", "\n", "", "", "", "", "base_out", "=", "self", ".", "base_model", ".", "rstg_avgpool", "(", "base_out", ")", "\n", "base_out", "=", "torch", ".", "flatten", "(", "base_out", ",", "1", ")", "\n", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "base_out", "=", "self", ".", "new_fc", "(", "base_out", ")", "\n", "\n", "", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "base_out", "=", "self", ".", "softmax", "(", "base_out", ")", "\n", "\n", "", "if", "self", ".", "reshape", ":", "\n", "            ", "if", "(", "self", ".", "is_shift", "and", "self", ".", "temporal_pool", ")", ":", "\n", "                ", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", "//", "2", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "args", ".", "num_segments", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "\n", "", "output", "=", "self", ".", "consensus", "(", "base_out", ")", "\n", "\n", "", "model_aux_feats", "=", "{", "\n", "'offsets'", ":", "self", ".", "offsets", ",", "\n", "'offsets_normed'", ":", "self", ".", "offsets_normed", ",", "\n", "'nodes'", ":", "self", ".", "nodes", ",", "\n", "'interm_feats'", ":", "self", ".", "interm_feats", ",", "\n", "'kernel'", ":", "self", ".", "kernels", "\n", "}", "\n", "model_aux_feats", ".", "update", "(", "self", ".", "aux_feats", ")", "\n", "return", "output", ".", "squeeze", "(", "1", ")", ",", "model_aux_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.crop_size": [[540, 543], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "crop_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.scale_size": [[544, 547], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "*", "256", "//", "224", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models.TSN.get_augmentation": [[548, 556], ["torchvision.transforms.Compose", "print", "torchvision.transforms.Compose", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop"], "methods", ["None"], ["", "def", "get_augmentation", "(", "self", ",", "flip", "=", "True", ")", ":", "\n", "\n", "        ", "if", "flip", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'#'", "*", "20", ",", "'NO FLIP!!!'", ")", "\n", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.non_local._NonLocalBlockND.__init__": [[10, 64], ["torch.nn.Module.__init__", "conv_nd", "conv_nd", "conv_nd", "torch.nn.MaxPool3d", "torch.nn.Sequential", "torch.nn.init.constant_", "torch.nn.init.constant_", "conv_nd", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool1d", "conv_nd", "bn"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "3", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "_NonLocalBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample", "=", "sub_sample", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "                ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "(", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "\n", "", "self", ".", "g", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "bn_layer", ":", "\n", "            ", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "sub_sample", ":", "\n", "            ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool_layer", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Sequential", "(", "self", ".", "phi", ",", "max_pool_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.non_local._NonLocalBlockND.forward": [[65, 89], ["x.size", "non_local._NonLocalBlockND.g().view", "g_x.permute.permute.permute", "non_local._NonLocalBlockND.theta().view", "theta_x.permute.permute.permute", "non_local._NonLocalBlockND.phi().view", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "non_local._NonLocalBlockND.W", "non_local._NonLocalBlockND.g", "non_local._NonLocalBlockND.theta", "non_local._NonLocalBlockND.phi", "y.view.view.permute", "x.size"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.softmax"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: (b, c, t, h, w)\n        :return:\n        '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "f_div_C", "=", "F", ".", "softmax", "(", "f", ",", "dim", "=", "-", "1", ")", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.non_local.NONLocalBlock1D.__init__": [[92, 97], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock1D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "1", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.non_local.NONLocalBlock2D.__init__": [[100, 105], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "2", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.non_local.NONLocalBlock3D.__init__": [[108, 113], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock3D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "3", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.non_local.NL3DWrapper.__init__": [[116, 121], ["torch.nn.Module.__init__", "non_local.NONLocalBlock3D"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "n_segment", ")", ":", "\n", "        ", "super", "(", "NL3DWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "nl", "=", "NONLocalBlock3D", "(", "block", ".", "bn3", ".", "num_features", ")", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.non_local.NL3DWrapper.forward": [[122, 130], ["non_local.NL3DWrapper.block", "x.transpose().contiguous().view.transpose().contiguous().view.size", "x.transpose().contiguous().view.transpose().contiguous().view.view().transpose", "non_local.NL3DWrapper.nl", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "x.transpose().contiguous().view.transpose().contiguous().view.view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "x.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block", "(", "x", ")", "\n", "\n", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "nt", "//", "self", ".", "n_segment", ",", "self", ".", "n_segment", ",", "c", ",", "h", ",", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", "# n, c, t, h, w", "\n", "x", "=", "self", ".", "nl", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nt", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.non_local.make_non_local": [[132, 152], ["isinstance", "torch.nn.Sequential", "torch.nn.Sequential", "non_local.NL3DWrapper", "non_local.NL3DWrapper", "non_local.NL3DWrapper", "non_local.NL3DWrapper", "non_local.NL3DWrapper"], "function", ["None"], ["", "", "def", "make_non_local", "(", "net", ",", "n_segment", ")", ":", "\n", "    ", "import", "torchvision", "\n", "import", "archs", "\n", "if", "isinstance", "(", "net", ",", "torchvision", ".", "models", ".", "ResNet", ")", ":", "\n", "        ", "net", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "NL3DWrapper", "(", "net", ".", "layer2", "[", "0", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer2", "[", "1", "]", ",", "\n", "NL3DWrapper", "(", "net", ".", "layer2", "[", "2", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer2", "[", "3", "]", ",", "\n", ")", "\n", "net", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "NL3DWrapper", "(", "net", ".", "layer3", "[", "0", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer3", "[", "1", "]", ",", "\n", "NL3DWrapper", "(", "net", ".", "layer3", "[", "2", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer3", "[", "3", "]", ",", "\n", "NL3DWrapper", "(", "net", ".", "layer3", "[", "4", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer3", "[", "5", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.LayerNormAffine2D.__init__": [[71, 83], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.LayerNorm", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch", ",", "norm_shape", ",", "zero_init", "=", "False", ")", ":", "\n", "        ", "super", "(", "LayerNormAffine2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "1", ",", "num_ch", ",", "1", ",", "1", "]", ")", ")", "#.to(input.device)", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "1", ",", "num_ch", ",", "1", ",", "1", "]", ")", ")", "#.to(input.device)", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "norm_shape", ",", "elementwise_affine", "=", "False", ")", "#.to(input.device)", "\n", "\n", "bias_init", "=", "0", "\n", "scale_init", "=", "1", "\n", "if", "zero_init", ":", "\n", "            ", "scale_init", "=", "0", "\n", "", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "bias_init", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "scale", ",", "scale_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.LayerNormAffine2D.forward": [[84, 87], ["models_utils.LayerNormAffine2D.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "self", ".", "norm", "(", "input", ")", "*", "self", ".", "scale", "+", "self", ".", "bias", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.LayerNormAffine1D.__init__": [[90, 102], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.LayerNorm", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch", ",", "norm_shape", ",", "zero_init", "=", "False", ")", ":", "\n", "        ", "super", "(", "LayerNormAffine1D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "1", ",", "num_ch", ",", "1", "]", ")", ")", "#.to(input.device)", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "1", ",", "num_ch", ",", "1", "]", ")", ")", "#.to(input.device)", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "norm_shape", ",", "elementwise_affine", "=", "False", ")", "#.to(input.device)", "\n", "\n", "bias_init", "=", "0", "\n", "scale_init", "=", "1", "\n", "if", "zero_init", ":", "\n", "            ", "scale_init", "=", "0", "\n", "", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "bias_init", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "scale", ",", "scale_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.LayerNormAffine1D.forward": [[103, 106], ["models_utils.LayerNormAffine1D.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "self", ".", "norm", "(", "input", ")", "*", "self", ".", "scale", "+", "self", ".", "bias", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.LayerNormAffineXC.__init__": [[111, 119], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.LayerNorm", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch", ",", "norm_shape", ")", ":", "\n", "        ", "super", "(", "LayerNormAffineXC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "num_ch", "]", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "num_ch", "]", ")", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "norm_shape", ",", "elementwise_affine", "=", "False", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "scale", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.LayerNormAffineXC.forward": [[120, 123], ["models_utils.LayerNormAffineXC.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "self", ".", "norm", "(", "input", ")", "*", "self", ".", "scale", "+", "self", ".", "bias", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.GloRe.__init__": [[128, 150], ["torch.nn.Module.__init__", "torch.nn.ModuleDict", "models_utils.LayerNormAffine2D", "torch.nn.Conv2d", "torch.nn.Conv1d", "models_utils.GloRe.positional_emb", "models_utils.GloRe.register_buffer", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.GloRe.positional_emb"], ["    ", "def", "__init__", "(", "self", ",", "input_height", "=", "14", ",", "input_channels", "=", "16", ",", "h", "=", "3", ",", "w", "=", "3", ")", ":", "\n", "        ", "super", "(", "GloRe", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "H", "=", "input_height", "\n", "self", ".", "W", "=", "input_height", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "num_nodes", "=", "h", "*", "w", "\n", "\n", "self", ".", "norm_dict", "=", "nn", ".", "ModuleDict", "(", "{", "}", ")", "\n", "self", ".", "norm_dict", "[", "f'offset_location_emb'", "]", "=", "LayerNormAffine2D", "(", "\n", "input_channels", ",", "(", "input_channels", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", ")", "\n", "# reduce channels", "\n", "self", ".", "mask_conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "num_nodes", ",", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "update", "=", "nn", ".", "Conv1d", "(", "self", ".", "input_channels", ",", "args", ".", "offset_lstm_dim", ",", "[", "1", "]", ")", "\n", "\n", "# positional embeding", "\n", "pos_emb", "=", "self", ".", "positional_emb", "(", "self", ".", "input_channels", ")", "\n", "self", ".", "register_buffer", "(", "'pos_emb_buf'", ",", "pos_emb", ")", "\n", "self", ".", "sin_pos_emb_proj", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "input_channels", ",", "[", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.GloRe.get_norm": [[151, 156], ["norm"], "methods", ["None"], ["", "def", "get_norm", "(", "self", ",", "input", ",", "name", ")", ":", "\n", "# input: B * T x C x H x W", "\n", "        ", "norm", "=", "self", ".", "norm_dict", "[", "name", "]", "\n", "input", "=", "norm", "(", "input", ")", "\n", "return", "input", "\n", "", "def", "apply_sin_positional_emb", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.GloRe.apply_sin_positional_emb": [[156, 165], ["models_utils.GloRe.pos_emb_buf.unsqueeze", "models_utils.GloRe.repeat", "models_utils.GloRe.sin_pos_emb_proj"], "methods", ["None"], ["", "def", "apply_sin_positional_emb", "(", "self", ",", "x", ")", ":", "\n", "# pos_emb_buf: C x H x W", "\n", "# x:B * T x C x H x W   ", "\n", "        ", "emb", "=", "self", ".", "pos_emb_buf", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "emb", "=", "emb", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "emb", "=", "self", ".", "sin_pos_emb_proj", "(", "emb", ")", "\n", "out", "=", "x", "+", "emb", "\n", "return", "out", "#emb- just pos", "\n", "", "def", "positional_emb", "(", "self", ",", "num_channels", "=", "2", "*", "32", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.GloRe.positional_emb": [[165, 194], ["torch.linspace().unsqueeze().unsqueeze", "torch.pow", "[].unsqueeze", "torch.sin", "[].unsqueeze", "torch.cos", "torch.cat().view", "emb_h.repeat.repeat.repeat", "torch.linspace().unsqueeze().unsqueeze", "torch.sin", "torch.cos", "torch.cat().view", "emb_w.repeat.repeat.repeat", "torch.cat().permute", "torch.linspace().unsqueeze", "torch.arange().float", "torch.cat", "torch.linspace().unsqueeze", "torch.cat", "torch.cat", "torch.pow.view", "torch.pow.view", "torch.linspace", "torch.arange", "torch.linspace"], "methods", ["None"], ["", "def", "positional_emb", "(", "self", ",", "num_channels", "=", "2", "*", "32", ")", ":", "\n", "# pos_h:        H x 1 x 1", "\n", "# T:          1 x C x 1", "\n", "# T_even:     1 x C/2 x 1", "\n", "# emb_h_even:   H x C/2 x 1", "\n", "        ", "channels", "=", "num_channels", "//", "2", "\n", "pos_h", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "H", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "T", "=", "torch", ".", "pow", "(", "10000", ",", "torch", ".", "arange", "(", "0", ",", "channels", ")", ".", "float", "(", ")", "/", "channels", ")", "\n", "T_even", "=", "T", ".", "view", "(", "-", "1", ",", "2", ")", "[", ":", ",", ":", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "emb_h_even", "=", "torch", ".", "sin", "(", "pos_h", "/", "T_even", ")", "\n", "\n", "T_odd", "=", "T", ".", "view", "(", "-", "1", ",", "2", ")", "[", ":", ",", "1", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "emb_h_odd", "=", "torch", ".", "cos", "(", "pos_h", "/", "T_odd", ")", "\n", "\n", "emb_h", "=", "torch", ".", "cat", "(", "(", "emb_h_even", ",", "emb_h_odd", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "self", ".", "H", ",", "1", ",", "channels", ")", "\n", "emb_h", "=", "emb_h", ".", "repeat", "(", "1", ",", "self", ".", "W", ",", "1", ")", "\n", "\n", "# pos_w:        W x 1 x 1", "\n", "# T:          1 x C x 1", "\n", "# T_even:     1 x C/2 x 1", "\n", "# emb_h_even:   W x C/2 x 1", "\n", "pos_w", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "W", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "emb_w_even", "=", "torch", ".", "sin", "(", "pos_w", "/", "T_even", ")", "\n", "emb_w_odd", "=", "torch", ".", "cos", "(", "pos_w", "/", "T_odd", ")", "\n", "emb_w", "=", "torch", ".", "cat", "(", "(", "emb_w_even", ",", "emb_w_odd", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "1", ",", "self", ".", "W", ",", "channels", ")", "\n", "emb_w", "=", "emb_w", ".", "repeat", "(", "self", ".", "H", ",", "1", ",", "1", ")", "\n", "\n", "emb", "=", "torch", ".", "cat", "(", "(", "emb_h", ",", "emb_w", ")", ",", "dim", "=", "2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "emb", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.GloRe.forward": [[194, 213], ["models_utils.GloRe.mask_conv", "models_utils.GloRe.apply_sin_positional_emb", "torch.nn.functional.softmax", "mask.view.view.view", "models_utils.differentiable_resize_area", "models_utils.GloRe.view", "models_utils.GloRe.update"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.GloRe.apply_sin_positional_emb", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.softmax", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.differentiable_resize_area", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: B * T x C x H x W ", "\n", "# mask: B * T x num_nodes x H x W", "\n", "        ", "mask", "=", "self", ".", "mask_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "apply_sin_positional_emb", "(", "x", ")", "\n", "\n", "# softmax over the number of receiving nodes: each of the ", "\n", "# H * W location send predominantly to one node", "\n", "mask", "=", "F", ".", "softmax", "(", "mask", ",", "dim", "=", "1", ")", "\n", "mask", "=", "mask", ".", "view", "(", "mask", ".", "shape", "[", "0", "]", ",", "3", ",", "3", ",", "mask", ".", "shape", "[", "2", "]", ",", "mask", ".", "shape", "[", "3", "]", ")", "\n", "\n", "# nodes: B*T x C x num_nodes", "\n", "offset_nodes", "=", "differentiable_resize_area", "(", "x", ",", "mask", ")", "\n", "\n", "# B*T x C x h x w", "\n", "offset_nodes", "=", "offset_nodes", ".", "view", "(", "offset_nodes", ".", "shape", "[", "0", "]", ",", "offset_nodes", ".", "shape", "[", "1", "]", ",", "offset_nodes", ".", "shape", "[", "2", "]", "*", "offset_nodes", ".", "shape", "[", "3", "]", ")", "\n", "offset_nodes", "=", "self", ".", "update", "(", "offset_nodes", ")", "\n", "# nodes: B*T x offset_lstm_dim x num_nodes", "\n", "return", "offset_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.Fishnet.__init__": [[259, 327], ["torch.nn.Module.__init__", "models_utils.get_fishnet_params", "torch.nn.ModuleDict", "torch.nn.Conv2d", "models_utils.LayerNormAffine2D", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "enumerate", "models_utils.Fishnet.tail_conv.append", "models_utils.LayerNormAffine2D", "range", "models_utils.LayerNormAffine2D", "range", "torch.nn.Conv2d", "models_utils.Fishnet.body_trans_conv.append", "models_utils.Fishnet.body_trans_conv.append", "models_utils.Fishnet.head_conv.append", "models_utils.LayerNormAffine2D", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Conv2d", "max"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.get_fishnet_params"], ["    ", "def", "__init__", "(", "self", ",", "input_height", "=", "14", ",", "input_channels", "=", "16", ",", "keep_spatial_size", "=", "False", ")", ":", "\n", "        ", "super", "(", "Fishnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "offset_layers", "=", "2", "\n", "self", ".", "offset_channels", "=", "[", "32", ",", "16", ",", "16", "]", "\n", "self", ".", "offset_channels_tr", "=", "[", "32", ",", "32", ",", "16", "]", "\n", "self", ".", "input_height", "=", "input_height", "\n", "self", ".", "keep_spatial_size", "=", "keep_spatial_size", "\n", "\n", "first_height", ",", "strides", ",", "padding", ",", "norm_size", ",", "output_padding", "=", "get_fishnet_params", "(", "\n", "input_height", ",", "keep_spatial_size", ")", "\n", "self", ".", "norm_size", "=", "norm_size", "\n", "\n", "self", ".", "norm_dict", "=", "nn", ".", "ModuleDict", "(", "{", "}", ")", "\n", "\n", "# reduce channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "self", ".", "offset_channels", "[", "0", "]", ",", "[", "1", ",", "1", "]", ")", "# de pus relu", "\n", "self", ".", "norm_dict", "[", "f'norm1'", "]", "=", "LayerNormAffine2D", "(", "\n", "self", ".", "offset_channels", "[", "0", "]", ",", "\n", "(", "self", ".", "offset_channels", "[", "0", "]", ",", "first_height", ",", "first_height", ")", "\n", ")", "\n", "\n", "self", ".", "tail_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "body_trans_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "head_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "offset_layers", ")", ":", "\n", "            ", "self", ".", "tail_conv", ".", "append", "(", "nn", ".", "Conv2d", "(", "\n", "self", ".", "offset_channels", "[", "max", "(", "0", ",", "i", "-", "1", ")", "]", ",", "self", ".", "offset_channels", "[", "i", "]", ",", "\n", "[", "3", ",", "3", "]", ",", "padding", "=", "padding", "[", "i", "]", ",", "stride", "=", "strides", "[", "i", "]", "\n", ")", "\n", ")", "\n", "self", ".", "norm_dict", "[", "f'tail_norm_{i}'", "]", "=", "LayerNormAffine2D", "(", "\n", "self", ".", "offset_channels", "[", "i", "]", ",", "\n", "(", "self", ".", "offset_channels", "[", "i", "]", ",", "norm_size", "[", "i", "]", ",", "norm_size", "[", "i", "]", ")", "\n", ")", "\n", "", "stop", "=", "0", "\n", "if", "self", ".", "keep_spatial_size", ":", "\n", "            ", "stop", "=", "-", "1", "\n", "", "for", "ind", ",", "i", "in", "enumerate", "(", "range", "(", "self", ".", "offset_layers", "-", "1", ",", "stop", ",", "-", "1", ")", ")", ":", "\n", "                ", "if", "keep_spatial_size", "and", "i", "==", "0", ":", "\n", "                    ", "self", ".", "body_trans_conv", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "\n", "self", ".", "offset_channels_tr", "[", "i", "+", "1", "]", ",", "self", ".", "offset_channels_tr", "[", "i", "]", ",", "\n", "[", "3", ",", "3", "]", ",", "padding", "=", "padding", "[", "i", "]", ",", "output_padding", "=", "output_padding", ",", "\n", "stride", "=", "strides", "[", "i", "]", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "body_trans_conv", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "\n", "self", ".", "offset_channels_tr", "[", "i", "+", "1", "]", ",", "self", ".", "offset_channels_tr", "[", "i", "]", ",", "\n", "[", "3", ",", "3", "]", ",", "padding", "=", "padding", "[", "i", "]", ",", "stride", "=", "strides", "[", "i", "]", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "norm_dict", "[", "f'body_trans_norm_{ind}'", "]", "=", "LayerNormAffine2D", "(", "\n", "self", ".", "offset_channels_tr", "[", "i", "]", ",", "\n", "(", "self", ".", "offset_channels_tr", "[", "i", "]", ",", "norm_size", "[", "i", "-", "1", "]", ",", "norm_size", "[", "i", "-", "1", "]", ")", "\n", ")", "\n", "\n", "", "if", "not", "self", ".", "keep_spatial_size", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "offset_layers", ")", ":", "\n", "                ", "self", ".", "head_conv", ".", "append", "(", "nn", ".", "Conv2d", "(", "\n", "self", ".", "offset_channels", "[", "i", "-", "1", "]", ",", "self", ".", "offset_channels", "[", "i", "]", ",", "\n", "[", "3", ",", "3", "]", ",", "padding", "=", "padding", "[", "i", "]", ",", "stride", "=", "strides", "[", "i", "]", "\n", ")", "\n", ")", "\n", "self", ".", "norm_dict", "[", "f'head_norm_{i-1}'", "]", "=", "LayerNormAffine2D", "(", "\n", "self", ".", "offset_channels", "[", "i", "]", ",", "\n", "(", "self", ".", "offset_channels", "[", "i", "]", ",", "norm_size", "[", "i", "]", ",", "norm_size", "[", "i", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.Fishnet.get_norm": [[329, 334], ["norm"], "methods", ["None"], ["", "", "", "def", "get_norm", "(", "self", ",", "input", ",", "name", ",", "zero_init", "=", "False", ")", ":", "\n", "# input: B * T x C x H x W", "\n", "        ", "norm", "=", "self", ".", "norm_dict", "[", "name", "]", "\n", "input", "=", "norm", "(", "input", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.Fishnet.forward": [[335, 365], ["torch.nn.functional.relu", "models_utils.Fishnet.get_norm", "range", "enumerate", "models_utils.Fishnet.conv1", "models_utils.Fishnet.max_pool", "torch.nn.functional.relu", "models_utils.Fishnet.get_norm", "all_x.append", "range", "torch.nn.functional.relu", "models_utils.Fishnet.get_norm", "range", "torch.nn.functional.relu", "models_utils.Fishnet.get_norm"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: B * T x C x H x W ", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "if", "self", ".", "input_height", ">", "50", ":", "\n", "            ", "x", "=", "self", ".", "max_pool", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "get_norm", "(", "x", ",", "'norm1'", ")", "\n", "all_x", "=", "[", "]", "\n", "all_x", "=", "[", "x", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "offset_layers", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "tail_conv", "[", "i", "]", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "get_norm", "(", "x", ",", "f'tail_norm_{i}'", ")", "\n", "all_x", ".", "append", "(", "x", ")", "\n", "\n", "", "stop", "=", "0", "\n", "if", "self", ".", "keep_spatial_size", ":", "\n", "            ", "stop", "=", "-", "1", "\n", "\n", "", "for", "ind", ",", "i", "in", "enumerate", "(", "range", "(", "self", ".", "offset_layers", "-", "1", ",", "stop", ",", "-", "1", ")", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "body_trans_conv", "[", "ind", "]", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "get_norm", "(", "x", ",", "f'body_trans_norm_{ind}'", ")", "\n", "x", "=", "x", "+", "all_x", "[", "i", "]", "\n", "\n", "", "if", "not", "self", ".", "keep_spatial_size", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "offset_layers", ")", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "self", ".", "head_conv", "[", "i", "-", "1", "]", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "get_norm", "(", "x", ",", "f'head_norm_{i-1}'", ")", "\n", "\n", "", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.differentiable_resize_area": [[28, 46], ["kernel.view", "kernel_res.permute.permute", "x.view", "torch.matmul", "x_resize.view.view", "x.size", "x.size", "x.size", "x.size", "kernel.size", "kernel.size"], "function", ["None"], ["", "def", "differentiable_resize_area", "(", "x", ",", "kernel", ")", ":", "\n", "# x: B x C x H x W", "\n", "# kernel: B x h x w x H x W", "\n", "    ", "B", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "C", "=", "x", ".", "size", "(", ")", "[", "1", "]", "\n", "H", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "W", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "h", "=", "kernel", ".", "size", "(", ")", "[", "1", "]", "\n", "w", "=", "kernel", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "kernel_res", "=", "kernel", ".", "view", "(", "B", ",", "h", "*", "w", ",", "H", "*", "W", ")", "\n", "kernel_res", "=", "kernel_res", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_res", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "*", "W", ")", "\n", "\n", "x_resize", "=", "torch", ".", "matmul", "(", "x_res", ",", "kernel_res", ")", "\n", "x_resize", "=", "x_resize", ".", "view", "(", "B", ",", "C", ",", "h", ",", "w", ")", "\n", "# x_resize: B x C x h x w", "\n", "return", "x_resize", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.save_kernel": [[47, 62], ["mean_kernels[].detach().numpy", "range", "matplotlib.subplots", "range", "matplotlib.savefig", "mean_kernels[].detach", "range", "[].imshow"], "function", ["None"], ["", "def", "save_kernel", "(", "mean_kernels", ",", "folder", "=", "'.'", ")", ":", "\n", "    ", "kernel", "=", "mean_kernels", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "max_t", "=", "kernel", ".", "shape", "[", "0", "]", "\n", "num_rows", "=", "kernel", ".", "shape", "[", "1", "]", "\n", "\n", "#for tt in range(max_t-5,max_t):", "\n", "all_frames", "=", "[", "]", "\n", "for", "tt", "in", "range", "(", "max_t", ")", ":", "\n", "        ", "f", ",", "axarr", "=", "plt", ".", "subplots", "(", "num_rows", ",", "num_rows", ")", "\n", "N", "=", "kernel", ".", "shape", "[", "1", "]", "*", "kernel", ".", "shape", "[", "2", "]", "\n", "for", "ii", "in", "range", "(", "kernel", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "for", "jj", "in", "range", "(", "kernel", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "axarr", "[", "ii", "]", "[", "jj", "]", ".", "imshow", "(", "kernel", "[", "tt", "]", "[", "ii", "]", "[", "jj", "]", ")", "\n", "\n", "", "", "plt", ".", "savefig", "(", "f'{folder}/kernel_mean_{tt}.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.atanh": [[64, 67], ["x.clamp.clamp", "torch.log().sub().mul", "torch.log().sub", "torch.log", "torch.log"], "function", ["None"], ["", "", "def", "atanh", "(", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "x", "=", "x", ".", "clamp", "(", "-", "1", "+", "1e-7", ",", "1", "-", "1e-7", ")", "\n", "return", "(", "torch", ".", "log", "(", "1", "+", "x", ")", ".", "sub", "(", "torch", ".", "log", "(", "1", "-", "x", ")", ")", ")", ".", "mul", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_utils.get_fishnet_params": [[215, 257], ["torch.nn.MaxPool2d"], "function", ["None"], ["", "", "def", "get_fishnet_params", "(", "input_height", ",", "keep_spatial_size", "=", "False", ")", ":", "\n", "    ", "first_height", "=", "input_height", "\n", "if", "input_height", "==", "32", ":", "\n", "        ", "first_height", "=", "32", "\n", "strides", "=", "[", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", "\n", "padding", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "\n", "norm_size", "=", "[", "15", ",", "7", ",", "7", "]", "\n", "", "elif", "input_height", "==", "16", ":", "\n", "        ", "first_height", "=", "16", "\n", "strides", "=", "[", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "padding", "=", "[", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "norm_size", "=", "[", "7", ",", "7", ",", "7", "]", "\n", "", "elif", "input_height", "==", "8", ":", "\n", "        ", "strides", "=", "[", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "padding", "=", "[", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "norm_size", "=", "[", "6", ",", "6", ",", "6", "]", "\n", "", "elif", "input_height", ">", "50", ":", "\n", "        ", "strides", "=", "[", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", "\n", "padding", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "\n", "norm_size", "=", "[", "13", ",", "6", ",", "6", "]", "\n", "self", ".", "max_pool", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "first_height", "=", "28", "\n", "", "elif", "input_height", ">", "20", ":", "\n", "        ", "strides", "=", "[", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", "\n", "padding", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "\n", "norm_size", "=", "[", "13", ",", "6", ",", "6", "]", "\n", "", "elif", "input_height", ">", "10", ":", "\n", "        ", "strides", "=", "[", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "padding", "=", "[", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "norm_size", "=", "[", "6", ",", "6", ",", "6", "]", "\n", "", "else", ":", "\n", "        ", "strides", "=", "[", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "padding", "=", "[", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "norm_size", "=", "[", "5", ",", "5", ",", "5", "]", "\n", "\n", "", "output_padding", "=", "(", "0", ",", "0", ")", "\n", "if", "keep_spatial_size", ":", "\n", "        ", "if", "input_height", "==", "16", ":", "\n", "            ", "padding", "=", "[", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "output_padding", "=", "(", "1", ",", "1", ")", "\n", "norm_size", "=", "[", "8", ",", "8", ",", "16", "]", "\n", "", "", "return", "first_height", ",", "strides", ",", "padding", ",", "norm_size", ",", "output_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_config.return_something": [[23, 34], ["print"], "function", ["None"], ["", "def", "return_something", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'tsm_data/smtv1_category.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'/smt-smt-V2-frames/'", "\n", "filename_imglist_train", "=", "'tsm_data/smtv1-train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'tsm_data/smtv1-val_videofolder.txt'", "\n", "prefix", "=", "'{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no such modality:'", "+", "modality", ")", "\n", "raise", "NotImplementedError", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_config.return_others": [[36, 45], ["None"], "function", ["None"], ["", "def", "return_others", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'categories.txt'", "\n", "\n", "root_data", "=", "ROOT_DATASET", "+", "'/gifs-frames-5s/'", "\n", "filename_imglist_train", "=", "'gifs-frames-5s.txt'", "\n", "filename_imglist_val", "=", "'gifs-frames-5s.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "\n", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_config.return_somethingv2": [[48, 59], ["print"], "function", ["None"], ["", "def", "return_somethingv2", "(", "modality", ")", ":", "\n", "    ", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "filename_categories", "=", "'tsm_data/category.txt'", "\n", "root_data", "=", "ROOT_DATASET", "+", "'/smt-smt-V2-frames/'", "\n", "filename_imglist_train", "=", "'tsm_data/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'tsm_data/val_videofolder.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no such modality:'", "+", "modality", ")", "\n", "raise", "NotImplementedError", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_config.return_dataset": [[62, 94], ["os.path.join", "os.path.join", "isinstance", "len", "print", "ValueError", "os.path.join", "open", "f.readlines", "item.rstrip"], "function", ["None"], ["", "def", "return_dataset", "(", "dataset", ",", "modality", ")", ":", "\n", "    ", "if", "dataset", "==", "'syncMNIST'", ":", "\n", "        ", "n_class", "=", "46", "\n", "test_dataset", "=", "'/data/datasets/video_mnist/sync_mnist_large_v2_split_test_max_sync_dist_160_num_classes_46_no_digits_5_no_noise_parts_0/'", "\n", "train_dataset", "=", "'/data/datasets/video_mnist/sync_mnist_large_v2_split_train_max_sync_dist_160_num_classes_46_no_digits_5_no_noise_parts_0/'", "\n", "return", "n_class", ",", "train_dataset", ",", "test_dataset", ",", "None", ",", "None", "\n", "", "elif", "dataset", "==", "'multiSyncMNIST'", ":", "\n", "        ", "n_class", "=", "56", "\n", "test_dataset", "=", "args", ".", "test_dataset", "\n", "train_dataset", "=", "args", ".", "train_dataset", "\n", "return", "n_class", ",", "train_dataset", ",", "test_dataset", ",", "None", ",", "None", "\n", "", "dict_single", "=", "{", "'something'", ":", "return_something", ",", "\n", "'somethingv2'", ":", "return_somethingv2", ",", "\n", "'others'", ":", "return_others", "}", "\n", "if", "dataset", "in", "dict_single", ":", "\n", "        ", "file_categories", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "=", "dict_single", "[", "dataset", "]", "(", "modality", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown dataset '", "+", "dataset", ")", "\n", "\n", "", "file_imglist_train", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_imglist_train", ")", "\n", "file_imglist_val", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_imglist_val", ")", "\n", "\n", "if", "isinstance", "(", "file_categories", ",", "str", ")", ":", "\n", "        ", "file_categories", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_categories", ")", "\n", "with", "open", "(", "file_categories", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "categories", "=", "[", "item", ".", "rstrip", "(", ")", "for", "item", "in", "lines", "]", "\n", "", "else", ":", "# number of categories", "\n", "        ", "categories", "=", "[", "None", "]", "*", "file_categories", "\n", "", "n_class", "=", "len", "(", "categories", ")", "\n", "print", "(", "'{}: {} classes'", ".", "format", "(", "dataset", ",", "n_class", ")", ")", "\n", "return", "n_class", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "\n", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.SyncedMNISTDataSet.__init__": [[31, 45], ["super().__init__", "len", "glob.glob.glob"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "split", "=", "'train'", ",", "dataset_path", "=", "None", ",", "dataset_fraction_used", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "SyncedMNISTDataSet", ")", ".", "__init__", "(", ")", "\n", "#assert end > start, \"this example code only works with end >= start\"", "\n", "self", ".", "split", "=", "split", "\n", "#self.dataset_path = f'/data/datasets/video_mnist/sync_mnist_large_v2_split_{split}_max_sync_dist_160_num_classes_46_no_digits_5_no_noise_parts_0_uint8/'", "\n", "#self.dataset_path = f'/data/datasets/video_mnist/sync_mnist_large_v2_split_{split}_max_sync_dist_160_num_classes_46_no_digits_5_no_noise_parts_0_uint8/'", "\n", "#self.dataset_path = f'/data/datasets/video_mnist/sync_mnist_large_v2_split_{split}_max_sync_dist_160_num_classes_46_no_digits_5_no_noise_parts_0_uint8/'", "\n", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "worker_id", "=", "0", "\n", "self", ".", "max_workers", "=", "0", "\n", "self", ".", "dataset_len", "=", "len", "(", "glob", "(", "self", ".", "dataset_path", "+", "'/data*pickle'", ")", ")", "*", "1000", "\n", "self", ".", "dataset_fraction_used", "=", "dataset_fraction_used", "\n", "# print(f'in iterable dataset: {self.worker_id } / {self.max_workers}')", "\n", "self", ".", "gen", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.SyncedMNISTDataSet.__iter__": [[46, 49], ["dataset_syncMNIST.SyncedMNISTDataSet.gen.next_item"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.SyncMNISTGenerator.next_item"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# print(f'worker: [{self.worker_id } / {self.max_workers}]')", "\n", "        ", "return", "self", ".", "gen", ".", "next_item", "(", "self", ".", "worker_id", ")", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.SyncedMNISTDataSet.__len__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_len", "\n", "", "", "def", "syncMNIST_worker_init_fn", "(", "worker_id", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.SyncMNISTGenerator.__init__": [[103, 138], ["glob.glob.glob", "int", "int", "min", "math.ceil", "len", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "split", ",", "max_epochs", "=", "100", ",", "num_classes", "=", "46", ",", "num_digits", "=", "0", ",", "\n", "worker_id", "=", "0", ",", "max_workers", "=", "1", ",", "dataset_fraction_used", "=", "1.0", ")", ":", "\n", "        ", "no_videos_per_pickle", "=", "1000", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "train_files", "=", "glob", "(", "dataset_path", "+", "'/data*pickle'", ")", "\n", "\n", "# if num_digits == 5:", "\n", "#     train_dataset_files = f'/data/datasets/video_mnist/files_order_pytorch/{split}_files_order3.pickle'", "\n", "# #elif num_digits == 3:", "\n", "# else:", "\n", "#     train_dataset_files = f'/data/datasets/video_mnist/files_order_pytorch/{split}_files_{num_digits}digits_order3.pickle'", "\n", "# if os.path.exists(train_dataset_files):", "\n", "#     with open(train_dataset_files, 'rb') as f:", "\n", "#         self.mnist_random_order = pickle.load(f)", "\n", "#     print(f'Reading from: {self.mnist_random_order[0]}')", "\n", "# else:", "\n", "#     print('Shuffling and saving train files')", "\n", "#     self.mnist_random_order = []", "\n", "#     for ep in range(100):", "\n", "#         np.random.shuffle(self.train_files)", "\n", "#         self.mnist_random_order.append(self.train_files)", "\n", "#     with open(train_dataset_files, 'wb') as f:", "\n", "#         pickle.dump(self.mnist_random_order, f)", "\n", "# print(f'Reading: {len(self.mnist_random_order[0])} pickles')", "\n", "\n", "overall_start", "=", "0", "\n", "# print(f'dataset_path: {dataset_path}')", "\n", "# print(f'len(self.train_files): {len(self.train_files)}')", "\n", "# print(f'dataset_fraction_used: {dataset_fraction_used}')", "\n", "overall_end", "=", "int", "(", "dataset_fraction_used", "*", "len", "(", "self", ".", "train_files", ")", ")", "\n", "\n", "per_worker", "=", "int", "(", "math", ".", "ceil", "(", "(", "overall_end", "-", "overall_start", ")", "/", "float", "(", "max_workers", ")", ")", ")", "\n", "self", ".", "start", "=", "overall_start", "+", "worker_id", "*", "per_worker", "\n", "self", ".", "end", "=", "min", "(", "self", ".", "start", "+", "per_worker", ",", "overall_end", ")", "\n", "# print(f'generator has overall_end:{overall_end} start-end {self.start}-{self.end}')", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.SyncMNISTGenerator.next_item": [[140, 157], ["dataset_syncMNIST.read_data_mnist", "range"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.read_data_mnist"], ["", "def", "next_item", "(", "self", ",", "idx", ")", ":", "\n", "#for epoch in range(self.max_epochs):", "\n", "#    print(f\"Generator epoch: {epoch}\")", "\n", "#return 1", "\n", "        ", "train_files", "=", "self", ".", "train_files", "#self.mnist_random_order[0]", "\n", "train_files", "=", "train_files", "[", "self", ".", "start", ":", "self", ".", "end", "]", "\n", "# print(f'Read:{train_files}')", "\n", "for", "file", "in", "train_files", ":", "\n", "            ", "train_videos", ",", "train_labels", ",", "target_boxes_np", ",", "is_ann_boxes", "=", "read_data_mnist", "(", "file", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "# train_videos, train_labels, target_boxes_np, is_ann_boxes, min_max_label = read_data_mnist(file, num_classes=self.num_classes)", "\n", "\n", "for", "pick_i", "in", "range", "(", "train_videos", ".", "shape", "[", "0", "]", ")", ":", "\n", "# print(f'idx [{idx}] element {pick_i} from {file}')", "\n", "# video_ids = np.zeros_like(train_labels[pick_i], dtype=np.float32)", "\n", "#yield (train_videos[pick_i], train_labels[pick_i],video_ids, target_boxes_np[pick_i], is_ann_boxes[pick_i], pick_i, file)", "\n", "                ", "video", "=", "train_videos", "[", "pick_i", "]", "#.astype(np.float32) / 255.0 * 2 - 1.0", "\n", "yield", "video", ",", "train_labels", "[", "pick_i", "]", ",", "target_boxes_np", "[", "pick_i", "]", "#, min_max_label[pick_i]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.get_labels_dict_multi_sincron": [[11, 29], ["range", "range", "range"], "function", ["None"], ["def", "get_labels_dict_multi_sincron", "(", ")", ":", "\n", "# create labels", "\n", "    ", "label", "=", "0", "\n", "labels_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "            ", "labels_dict", "[", "(", "i", ",", "j", ")", "]", "=", "label", "\n", "labels_dict", "[", "(", "j", ",", "i", ")", "]", "=", "label", "\n", "label", "+=", "1", "\n", "# no sync digits", "\n", "", "", "labels_dict", "[", "(", "-", "1", ",", "-", "1", ")", "]", "=", "label", "\n", "label", "+=", "1", "\n", "# ", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "labels_dict", "[", "(", "i", ",", "i", ")", "]", "=", "label", "\n", "label", "+=", "1", "\n", "\n", "", "return", "labels_dict", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.syncMNIST_worker_init_fn": [[51, 60], ["torch.utils.data.get_worker_info", "dataset_syncMNIST.SyncMNISTGenerator"], "function", ["None"], ["", "", "def", "syncMNIST_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "dataset", "=", "worker_info", ".", "dataset", "# the dataset copy in this worker process", "\n", "dataset", ".", "worker_id", "=", "worker_info", ".", "id", "\n", "dataset", ".", "max_workers", "=", "worker_info", ".", "num_workers", "\n", "# print(f'in woker init fct: {dataset.worker_id}/ {dataset.max_workers}')", "\n", "dataset", ".", "gen", "=", "SyncMNISTGenerator", "(", "dataset_path", "=", "dataset", ".", "dataset_path", ",", "\n", "worker_id", "=", "dataset", ".", "worker_id", ",", "max_workers", "=", "dataset", ".", "max_workers", ",", "\n", "split", "=", "dataset", ".", "split", ",", "dataset_fraction_used", "=", "dataset", ".", "dataset_fraction_used", ")", "\n", "# print(f'in woker init fct: len gen {len(dataset.gen)}')", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.read_data_mnist": [[62, 100], ["open", "pickle.load", "videos_dict[].astype().squeeze", "numpy.clip", "numpy.ones", "np.clip.astype", "numpy.concatenate", "digits.min", "digits.max", "dataset_syncMNIST.get_labels_dict_multi_sincron", "numpy.zeros_like", "range", "videos_dict[].astype"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset_syncMNIST.get_labels_dict_multi_sincron"], ["", "def", "read_data_mnist", "(", "file", ",", "num_classes", "=", "65", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "# print(f'loading: {file}')", "\n", "        ", "videos_dict", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "# x = np.expand_dims(videos_dict['videos'], 4)", "\n", "# x = videos_dict['videos']#.astype(np.float32) / 255.0 * 2 - 1.0", "\n", "x", "=", "videos_dict", "[", "'videos'", "]", "#.astype(np.uint8)", "\n", "\n", "y", "=", "videos_dict", "[", "'labels'", "]", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "y", "=", "np", ".", "clip", "(", "y", ",", "0", ",", "num_classes", "-", "1", ")", "\n", "#y = np.expand_dims(np.eye(num_classes)[y], axis=1)", "\n", "# y = y.astype(np.float32)", "\n", "\n", "coords", "=", "videos_dict", "[", "'videos_digits_coords'", "]", "\n", "top_left", "=", "coords", "\n", "bot_right", "=", "coords", "+", "28", "\n", "digits_boxes", "=", "np", ".", "concatenate", "(", "[", "top_left", ",", "bot_right", "]", ",", "axis", "=", "-", "1", ")", "//", "2", "\n", "is_ann_boxes", "=", "np", ".", "ones", "(", "(", "digits_boxes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "video", "=", "x", "\n", "label", "=", "y", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "if", "False", ":", "\n", "            ", "digits", "=", "videos_dict", "[", "'videos_digits'", "]", "\n", "min_digits", "=", "digits", ".", "min", "(", "1", ")", "\n", "max_digits", "=", "digits", ".", "max", "(", "1", ")", "\n", "labels_dict", ",", "max_labels", "=", "get_labels_dict_multi_sincron", "(", ")", "\n", "\n", "min_max", "=", "np", ".", "zeros_like", "(", "label", ")", "\n", "for", "i", "in", "range", "(", "min_max", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "min_max", "[", "i", "]", "=", "labels_dict", "[", "(", "min_digits", "[", "i", "]", ",", "max_digits", "[", "i", "]", ")", "]", "\n", "\n", "\n", "# print(f'video.dtype: {video.dtype}')", "\n", "# video = torch.from_numpy(x).float()", "\n", "# label = torch.from_numpy(y).long()", "\n", "# print(f'video: {video.shape}')", "\n", "", "", "", "return", "video", ",", "label", ",", "digits_boxes", ",", "is_ann_boxes", "\n", "# return video, label, digits_boxes, is_ann_boxes, min_max", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.VideoRecord.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "_data", "=", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.VideoRecord.path": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.VideoRecord.num_frames": [[23, 26], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.VideoRecord.label": [[27, 30], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet.__init__": [[33, 59], ["dataset.TSNDataSet._parse_list", "print", "print"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._parse_list"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "list_file", ",", "\n", "num_segments", "=", "3", ",", "new_length", "=", "1", ",", "modality", "=", "'RGB'", ",", "\n", "image_tmpl", "=", "'img_{:05d}.jpg'", ",", "transform", "=", "None", ",", "\n", "random_shift", "=", "True", ",", "test_mode", "=", "False", ",", "\n", "remove_missing", "=", "False", ",", "dense_sample", "=", "False", ",", "twice_sample", "=", "False", ",", "split", "=", "''", ")", ":", "\n", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "list_file", "=", "list_file", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "new_length", "=", "new_length", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "image_tmpl", "=", "image_tmpl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "remove_missing", "=", "remove_missing", "\n", "self", ".", "dense_sample", "=", "dense_sample", "# using dense sample as I3D", "\n", "self", ".", "twice_sample", "=", "twice_sample", "# twice sample for more validation", "\n", "if", "self", ".", "dense_sample", ":", "\n", "            ", "print", "(", "'=> Using dense sample for the dataset...'", ")", "\n", "", "if", "self", ".", "twice_sample", ":", "\n", "            ", "print", "(", "'=> Using twice sample for the dataset...'", ")", "\n", "\n", "", "self", ".", "split", "=", "split", "\n", "self", ".", "epoch", "=", "-", "1", "\n", "self", ".", "_parse_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet.set_epoch_attributes": [[61, 66], ["print"], "methods", ["None"], ["", "def", "set_epoch_attributes", "(", "self", ",", "epoch", ",", "augment_dict", ",", "detected_boxes_dict", "=", "None", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "augment_dict", "=", "augment_dict", "\n", "\n", "print", "(", "self", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._load_image": [[67, 73], ["PIL.Image.open().convert", "print", "os.path.join", "PIL.Image.open().convert", "PIL.Image.open", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "PIL.Image.open", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "directory", ",", "idx", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "", "except", "Exception", ":", "\n", "            ", "print", "(", "'error loading image:'", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", "\n", "return", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._parse_list": [[75, 89], ["print", "x.strip().split", "print", "print", "dataset.VideoRecord", "open", "len", "x.strip", "int", "len", "int", "len"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split"], ["", "", "def", "_parse_list", "(", "self", ")", ":", "\n", "# check the frame number is large >3:", "\n", "        ", "tmp", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "open", "(", "self", ".", "list_file", ")", "]", "\n", "if", "not", "self", ".", "test_mode", "or", "self", ".", "remove_missing", ":", "\n", "            ", "print", "(", "f'before removing missing: {len(tmp)}'", ")", "\n", "tmp", "=", "[", "item", "for", "item", "in", "tmp", "if", "int", "(", "item", "[", "1", "]", ")", ">=", "3", "]", "\n", "print", "(", "f'after removing missing: {len(tmp)}'", ")", "\n", "\n", "", "self", ".", "video_list", "=", "[", "VideoRecord", "(", "item", ")", "for", "item", "in", "tmp", "]", "\n", "\n", "if", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "            ", "for", "v", "in", "self", ".", "video_list", ":", "\n", "                ", "v", ".", "_data", "[", "1", "]", "=", "int", "(", "v", ".", "_data", "[", "1", "]", ")", "/", "2", "\n", "", "", "print", "(", "'video number:%d'", "%", "(", "len", "(", "self", ".", "video_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet.get_video_list": [[90, 92], ["None"], "methods", ["None"], ["", "def", "get_video_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "video_list", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._sample_indices": [[93, 115], ["max", "numpy.random.randint", "numpy.array", "range", "numpy.multiply", "numpy.random.randint", "numpy.sort", "numpy.zeros", "list", "numpy.random.randint", "range"], "methods", ["None"], ["", "def", "_sample_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"\n        :param record: VideoRecord\n        :return: list\n        \"\"\"", "\n", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "record", ".", "num_frames", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "record", ".", "num_frames", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "# normal sample", "\n", "            ", "average_duration", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "//", "self", ".", "num_segments", "\n", "if", "average_duration", ">", "0", ":", "\n", "                ", "offsets", "=", "np", ".", "multiply", "(", "list", "(", "range", "(", "self", ".", "num_segments", ")", ")", ",", "average_duration", ")", "+", "randint", "(", "average_duration", ",", "\n", "size", "=", "self", ".", "num_segments", ")", "\n", "", "elif", "record", ".", "num_frames", ">", "self", ".", "num_segments", ":", "\n", "                ", "offsets", "=", "np", ".", "sort", "(", "randint", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ",", "size", "=", "self", ".", "num_segments", ")", ")", "\n", "", "else", ":", "\n", "# shouldn here be a range?", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._get_val_indices": [[116, 131], ["max", "numpy.random.randint", "numpy.array", "numpy.array", "numpy.zeros", "range", "float", "int", "range"], "methods", ["None"], ["", "", "def", "_get_val_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "record", ".", "num_frames", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "record", ".", "num_frames", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "if", "record", ".", "num_frames", ">", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", ":", "\n", "                ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "", "else", ":", "\n", "# shouldn here be a range?", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._get_test_indices": [[132, 153], ["max", "numpy.linspace", "numpy.linspace.tolist", "numpy.array", "numpy.array", "numpy.array", "float", "float", "range", "int", "int", "int", "range", "range", "range"], "methods", ["None"], ["", "", "def", "_get_test_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "record", ".", "num_frames", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_list", "=", "np", ".", "linspace", "(", "0", ",", "sample_pos", "-", "1", ",", "num", "=", "10", ",", "dtype", "=", "int", ")", "\n", "offsets", "=", "[", "]", "\n", "for", "start_idx", "in", "start_list", ".", "tolist", "(", ")", ":", "\n", "                ", "offsets", "+=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "record", ".", "num_frames", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "elif", "self", ".", "twice_sample", ":", "\n", "\n", "\n", "            ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "\n", "[", "int", "(", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "\n", "return", "offsets", "+", "1", "\n", "", "else", ":", "\n", "            ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet.__getitem__": [[156, 190], ["dataset.TSNDataSet.get", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "os.path.exists", "print", "numpy.random.randint", "dataset.TSNDataSet._get_test_indices", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "os.path.join", "len", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet._sample_indices", "dataset.TSNDataSet._get_val_indices", "int", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._get_test_indices", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._sample_indices", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._get_val_indices"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "record", "=", "self", ".", "video_list", "[", "index", "]", "\n", "# check this is a legit video folder", "\n", "\n", "if", "self", ".", "image_tmpl", "==", "'flow_{}_{:05d}.jpg'", ":", "\n", "            ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "", "elif", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "            ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "int", "(", "record", ".", "path", ")", ",", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'{:06d}'", ".", "format", "(", "int", "(", "record", ".", "path", ")", ")", ",", "file_name", ")", "\n", "", "else", ":", "\n", "            ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "\n", "", "while", "not", "os", ".", "path", ".", "exists", "(", "full_path", ")", ":", "\n", "            ", "print", "(", "'################## Not Found:'", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "video_list", ")", ")", "\n", "record", "=", "self", ".", "video_list", "[", "index", "]", "\n", "if", "self", ".", "image_tmpl", "==", "'flow_{}_{:05d}.jpg'", ":", "\n", "                ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "", "elif", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "                ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "int", "(", "record", ".", "path", ")", ",", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'{:06d}'", ".", "format", "(", "int", "(", "record", ".", "path", ")", ")", ",", "file_name", ")", "\n", "", "else", ":", "\n", "                ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "\n", "", "", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "record", ")", "if", "self", ".", "random_shift", "else", "self", ".", "_get_val_indices", "(", "record", ")", "\n", "", "else", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_get_test_indices", "(", "record", ")", "\n", "", "crt_detected_boxes", "=", "10", "\n", "return", "self", ".", "get", "(", "record", ",", "segment_indices", ",", "crt_detected_boxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet.get": [[191, 207], ["list", "list", "dataset.TSNDataSet.transform", "numpy.zeros", "int", "range", "dataset.TSNDataSet._load_image", "list.extend", "list.extend"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.None.main_standard.transform", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet._load_image"], ["", "def", "get", "(", "self", ",", "record", ",", "indices", ",", "detected_boxes", ")", ":", "\n", "        ", "images", "=", "list", "(", ")", "\n", "temp_indices", "=", "list", "(", ")", "\n", "for", "seg_ind", "in", "indices", ":", "\n", "            ", "p", "=", "int", "(", "seg_ind", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "new_length", ")", ":", "\n", "                ", "seg_imgs", "=", "self", ".", "_load_image", "(", "record", ".", "path", ",", "p", ")", "\n", "\n", "temp_indices", ".", "extend", "(", "[", "p", "]", ")", "\n", "images", ".", "extend", "(", "seg_imgs", ")", "\n", "if", "p", "<", "record", ".", "num_frames", ":", "\n", "                    ", "p", "+=", "1", "\n", "\n", "", "", "", "process_data", "=", "self", ".", "transform", "(", "images", ")", "\n", "gt_box", "=", "np", ".", "zeros", "(", "(", "16", ",", "10", ",", "4", ")", ")", "\n", "return", "gt_box", ",", "process_data", ",", "record", ".", "label", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.dataset.TSNDataSet.__len__": [[209, 211], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_list", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.BasicBlock.__init__": [[48, 57], ["torch.Module.__init__", "resnet3d_xl.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet3d_xl.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.conv3x3x3", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.conv3x3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.BasicBlock.forward": [[58, 75], ["resnet3d_xl.BasicBlock.conv1", "resnet3d_xl.BasicBlock.bn1", "resnet3d_xl.BasicBlock.relu", "resnet3d_xl.BasicBlock.conv2", "resnet3d_xl.BasicBlock.bn2", "resnet3d_xl.BasicBlock.relu", "resnet3d_xl.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.Bottleneck.__init__": [[81, 107], ["torch.Module.__init__", "resnet3d_xl.Bottleneck.Conv3dBN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet3d_xl.Bottleneck.Conv3dBN", "resnet3d_xl.Bottleneck.Conv3dBN", "resnet3d_xl.Bottleneck.Conv3dBN"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.Bottleneck.Conv3dBN", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.Bottleneck.Conv3dBN", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.Bottleneck.Conv3dBN", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.Bottleneck.Conv3dBN"], ["def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "stride", ",", "dim_inner", ",", "group", "=", "1", ",", "use_temp_conv", "=", "1", ",", "temp_stride", "=", "1", ",", "dcn", "=", "False", ",", "\n", "shortcut_type", "=", "'B'", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1 x 1 layer", "\n", "self", ".", "with_dcn", "=", "dcn", "\n", "self", ".", "conv1", "=", "self", ".", "Conv3dBN", "(", "dim_in", ",", "dim_inner", ",", "(", "1", "+", "use_temp_conv", "*", "2", ",", "1", ",", "1", ")", ",", "(", "temp_stride", ",", "1", ",", "1", ")", ",", "\n", "(", "use_temp_conv", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 3 x 3 layer", "\n", "self", ".", "conv2", "=", "self", ".", "Conv3dBN", "(", "dim_inner", ",", "dim_inner", ",", "(", "1", ",", "3", ",", "3", ")", ",", "(", "1", ",", "stride", ",", "stride", ")", ",", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "# 1 x 1 layer", "\n", "self", ".", "conv3", "=", "self", ".", "Conv3dBN", "(", "dim_inner", ",", "dim_out", ",", "(", "1", ",", "1", ",", "1", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "self", ".", "shortcut_type", "=", "shortcut_type", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "self", ".", "dim_out", "=", "dim_out", "\n", "self", ".", "temp_stride", "=", "temp_stride", "\n", "self", ".", "stride", "=", "stride", "\n", "# nn.Conv3d(dim_in, dim_out, (1,1,1),(temp_stride,stride,stride),(0,0,0))", "\n", "if", "self", ".", "shortcut_type", "==", "'B'", ":", "\n", "            ", "if", "self", ".", "dim_in", "==", "self", ".", "dim_out", "and", "self", ".", "temp_stride", "==", "1", "and", "self", ".", "stride", "==", "1", ":", "# or (self.dim_in == self.dim_out and self.dim_in == 64 and self.stride ==1):", "\n", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "# pass", "\n", "                ", "self", ".", "shortcut", "=", "self", ".", "Conv3dBN", "(", "dim_in", ",", "dim_out", ",", "(", "1", ",", "1", ",", "1", ")", ",", "(", "temp_stride", ",", "stride", ",", "stride", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.Bottleneck.forward": [[110, 124], ["resnet3d_xl.Bottleneck.conv1", "resnet3d_xl.Bottleneck.relu", "resnet3d_xl.Bottleneck.conv2", "resnet3d_xl.Bottleneck.relu", "resnet3d_xl.Bottleneck.conv3", "resnet3d_xl.Bottleneck.relu", "resnet3d_xl.Bottleneck.shortcut"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "if", "self", ".", "dim_in", "==", "self", ".", "dim_out", "and", "self", ".", "temp_stride", "==", "1", "and", "self", ".", "stride", "==", "1", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "residual", "=", "self", ".", "shortcut", "(", "residual", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.Bottleneck.Conv3dBN": [[125, 137], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet3d_xl.Bottleneck.conv_op", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "def", "Conv3dBN", "(", "self", ",", "dim_in", ",", "dim_out", ",", "kernels", ",", "strides", ",", "pads", ",", "group", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "with_dcn", "and", "kernels", "[", "0", "]", ">", "1", ":", "\n", "# use deformable conv", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "self", ".", "conv_op", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "kernels", ",", "stride", "=", "strides", ",", "padding", "=", "pads", ",", "bias", "=", "False", ",", "\n", "offset_groups", "=", "self", ".", "offset_groups", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "dim_out", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "kernels", ",", "stride", "=", "strides", ",", "padding", "=", "pads", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "dim_out", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.ResNet.__init__": [[142, 207], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet3d_xl.ResNet._make_layer", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet3d_xl.ResNet._make_layer", "resnet3d_xl.ResNet._make_layer", "resnet3d_xl.ResNet._make_layer", "int", "int", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "resnet3d_xl.ResNet.modules", "math.ceil", "math.ceil", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._make_layer", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._make_layer", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._make_layer", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "use_temp_convs_set", ",", "\n", "temp_strides_set", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "num_classes", "=", "400", ",", "\n", "stage_with_dcn", "=", "(", "False", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "extract_features", "=", "False", ",", "\n", "loss_type", "=", "'softmax'", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "extract_features", "=", "extract_features", "\n", "self", ".", "stage_with_dcn", "=", "stage_with_dcn", "\n", "self", ".", "group", "=", "1", "\n", "self", ".", "width_per_group", "=", "64", "\n", "self", ".", "dim_inner", "=", "self", ".", "group", "*", "self", ".", "width_per_group", "\n", "# self.shortcut_type = shortcut_type", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "(", "1", "+", "use_temp_convs_set", "[", "0", "]", "[", "0", "]", "*", "2", ",", "7", ",", "7", ")", ",", "\n", "stride", "=", "(", "temp_strides_set", "[", "0", "]", "[", "0", "]", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "use_temp_convs_set", "[", "0", "]", "[", "0", "]", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "with_dcn", "=", "True", "if", "self", ".", "stage_with_dcn", "[", "0", "]", "else", "False", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "256", ",", "shortcut_type", ",", "stride", "=", "1", ",", "num_blocks", "=", "layers", "[", "0", "]", ",", "\n", "dim_inner", "=", "self", ".", "dim_inner", ",", "group", "=", "self", ".", "group", ",", "use_temp_convs", "=", "use_temp_convs_set", "[", "1", "]", ",", "\n", "temp_strides", "=", "temp_strides_set", "[", "1", "]", ",", "dcn", "=", "with_dcn", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "with_dcn", "=", "True", "if", "self", ".", "stage_with_dcn", "[", "1", "]", "else", "False", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "512", ",", "shortcut_type", ",", "stride", "=", "2", ",", "num_blocks", "=", "layers", "[", "1", "]", ",", "\n", "dim_inner", "=", "self", ".", "dim_inner", "*", "2", ",", "group", "=", "self", ".", "group", ",", "\n", "use_temp_convs", "=", "use_temp_convs_set", "[", "2", "]", ",", "temp_strides", "=", "temp_strides_set", "[", "2", "]", ",", "\n", "dcn", "=", "with_dcn", ")", "\n", "with_dcn", "=", "True", "if", "self", ".", "stage_with_dcn", "[", "2", "]", "else", "False", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "1024", ",", "shortcut_type", ",", "stride", "=", "2", ",", "num_blocks", "=", "layers", "[", "2", "]", ",", "\n", "dim_inner", "=", "self", ".", "dim_inner", "*", "4", ",", "group", "=", "self", ".", "group", ",", "\n", "use_temp_convs", "=", "use_temp_convs_set", "[", "3", "]", ",", "temp_strides", "=", "temp_strides_set", "[", "3", "]", ",", "\n", "dcn", "=", "with_dcn", ")", "\n", "with_dcn", "=", "True", "if", "self", ".", "stage_with_dcn", "[", "3", "]", "else", "False", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "1024", ",", "2048", ",", "shortcut_type", ",", "stride", "=", "1", ",", "num_blocks", "=", "layers", "[", "3", "]", ",", "\n", "dim_inner", "=", "self", ".", "dim_inner", "*", "8", ",", "group", "=", "self", ".", "group", ",", "\n", "use_temp_convs", "=", "use_temp_convs_set", "[", "4", "]", ",", "temp_strides", "=", "temp_strides_set", "[", "4", "]", ",", "\n", "dcn", "=", "with_dcn", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "2", ")", ")", "# int(math.ceil(sample_duration / 8))", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "16", ")", ")", "\n", "# self.avgpool = nn.AvgPool3d((last_duration, last_size, last_size), stride=1) #nn.AdaptiveAvgPool3d((1, 1, 1)) #", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# if isinstance(m, nn.Conv3d):", "\n", "#     m.weight = nn.init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "# elif isinstance(m,nn.Linear):", "\n", "#    m.weight = nn.init.kaiming_normal(m.weight, mode='fan_out')", "\n", "# elif ", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.ResNet._make_layer": [[208, 226], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.zeros().astype", "numpy.ones().astype", "len", "range", "layers.append", "numpy.zeros().astype.append", "numpy.ones().astype.append", "block", "numpy.zeros", "numpy.ones", "len"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "dim_in", ",", "dim_out", ",", "shortcut_type", ",", "stride", ",", "num_blocks", ",", "dim_inner", "=", "None", ",", "group", "=", "None", ",", "\n", "use_temp_convs", "=", "None", ",", "temp_strides", "=", "None", ",", "dcn", "=", "False", ")", ":", "\n", "        ", "if", "use_temp_convs", "is", "None", ":", "\n", "            ", "use_temp_convs", "=", "np", ".", "zeros", "(", "num_blocks", ")", ".", "astype", "(", "int", ")", "\n", "", "if", "temp_strides", "is", "None", ":", "\n", "            ", "temp_strides", "=", "np", ".", "ones", "(", "num_blocks", ")", ".", "astype", "(", "int", ")", "\n", "", "if", "len", "(", "use_temp_convs", ")", "<", "num_blocks", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_blocks", "-", "len", "(", "use_temp_convs", ")", ")", ":", "\n", "                ", "use_temp_convs", ".", "append", "(", "0", ")", "\n", "temp_strides", ".", "append", "(", "1", ")", "\n", "", "", "layers", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "block_stride", "=", "2", "if", "(", "idx", "==", "0", "and", "stride", "==", "2", ")", "else", "1", "\n", "\n", "layers", ".", "append", "(", "\n", "block", "(", "dim_in", ",", "dim_out", ",", "block_stride", ",", "dim_inner", ",", "group", ",", "use_temp_convs", "[", "idx", "]", ",", "temp_strides", "[", "idx", "]", ",", "dcn", ")", ")", "\n", "dim_in", "=", "dim_out", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.ResNet.forward_single": [[227, 252], ["resnet3d_xl.ResNet.conv1", "resnet3d_xl.ResNet.bn1", "resnet3d_xl.ResNet.relu", "resnet3d_xl.ResNet.maxpool1", "resnet3d_xl.ResNet.layer1", "resnet3d_xl.ResNet.maxpool2", "resnet3d_xl.ResNet.layer2", "resnet3d_xl.ResNet.layer3", "resnet3d_xl.ResNet.layer4", "resnet3d_xl.ResNet.avgpool"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "features", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "features", ")", "\n", "\n", "y", "=", "x", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.dropout(x)", "\n", "\n", "# y = self.classifier(x)", "\n", "if", "self", ".", "extract_features", ":", "\n", "            ", "return", "y", ",", "features", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.ResNet.forward_multi": [[253, 266], ["range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "resnet3d_xl.ResNet.forward_single", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.ResNet.forward_single"], ["", "", "def", "forward_multi", "(", "self", ",", "x", ")", ":", "\n", "        ", "clip_preds", "=", "[", "]", "\n", "# import ipdb;ipdb.set_trace()", "\n", "for", "clip_idx", "in", "range", "(", "x", ".", "shape", "[", "1", "]", ")", ":", "# B, 10, 3, 3, 32, 224, 224", "\n", "            ", "spatial_crops", "=", "[", "]", "\n", "for", "crop_idx", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "clip", "=", "x", "[", ":", ",", "clip_idx", ",", "crop_idx", "]", "\n", "clip", "=", "self", ".", "forward_single", "(", "clip", ")", "\n", "spatial_crops", ".", "append", "(", "clip", ")", "\n", "", "spatial_crops", "=", "torch", ".", "stack", "(", "spatial_crops", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "clip_preds", ".", "append", "(", "spatial_crops", ")", "\n", "", "clip_preds", "=", "torch", ".", "stack", "(", "clip_preds", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "return", "clip_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.ResNet.forward": [[267, 287], ["x.permute.permute.view", "x.permute.permute.permute", "x.permute.permute.dim", "resnet3d_xl.ResNet.forward_single", "x.permute.permute.dim", "resnet3d_xl.ResNet.forward_multi"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.ResNet.forward_single", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.ResNet.forward_multi"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# pdb.set_trace()", "\n", "# x: BT x 3 x H x W -> B x T x 3 x H x W ", "\n", "# pdb.set_trace()", "\n", "        ", "x", "=", "x", ".", "view", "(", "[", "args", ".", "batch_size", ",", "args", ".", "num_segments", ",", "x", ".", "shape", "[", "-", "3", "]", ",", "x", ".", "shape", "[", "-", "2", "]", ",", "x", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "x", "=", "x", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "# 5D tensor == single clip", "\n", "if", "x", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "pred", "=", "self", ".", "forward_single", "(", "x", ")", "\n", "\n", "# 7D tensor == 3 crops/10 clips", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "7", ":", "\n", "            ", "pred", "=", "self", ".", "forward_multi", "(", "x", ")", "\n", "\n", "# loss_dict = {}", "\n", "# if 'label' in batch:", "\n", "#     loss = F.cross_entropy(pred, batch['label'], reduction='none')", "\n", "#     loss_dict = {'clf': loss}", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.conv3x3x3": [[21, 30], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.downsample_basic_block": [[32, 43], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.get_fine_tuning_parameters": [[289, 308], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "# import ipdb;ipdb.set_trace()", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.obtain_arc": [[310, 373], ["range", "use_temp_convs_4.append", "use_temp_convs_4.append"], "function", ["None"], ["", "def", "obtain_arc", "(", "arc_type", ")", ":", "\n", "# c2d, ResNet50", "\n", "    ", "if", "arc_type", "==", "1", ":", "\n", "        ", "use_temp_convs_1", "=", "[", "0", "]", "\n", "temp_strides_1", "=", "[", "2", "]", "\n", "use_temp_convs_2", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "temp_strides_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_3", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "temp_strides_3", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_4", "=", "[", "0", ",", "]", "*", "6", "\n", "temp_strides_4", "=", "[", "1", ",", "]", "*", "6", "\n", "use_temp_convs_5", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "temp_strides_5", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "\n", "# i3d, ResNet50", "\n", "", "if", "arc_type", "==", "2", ":", "\n", "        ", "use_temp_convs_1", "=", "[", "2", "]", "\n", "temp_strides_1", "=", "[", "1", "]", "\n", "use_temp_convs_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "temp_strides_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_3", "=", "[", "1", ",", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_3", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_4", "=", "[", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_4", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_5", "=", "[", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_5", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "\n", "# c2d, ResNet101", "\n", "", "if", "arc_type", "==", "3", ":", "\n", "        ", "use_temp_convs_1", "=", "[", "0", "]", "\n", "temp_strides_1", "=", "[", "2", "]", "\n", "use_temp_convs_2", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "temp_strides_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_3", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "temp_strides_3", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_4", "=", "[", "0", ",", "]", "*", "23", "\n", "temp_strides_4", "=", "[", "1", ",", "]", "*", "23", "\n", "use_temp_convs_5", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "temp_strides_5", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "\n", "# i3d, ResNet101", "\n", "", "if", "arc_type", "==", "4", ":", "\n", "        ", "use_temp_convs_1", "=", "[", "2", "]", "\n", "temp_strides_1", "=", "[", "2", "]", "\n", "use_temp_convs_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "temp_strides_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_3", "=", "[", "1", ",", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_3", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_4", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "23", ")", ":", "\n", "            ", "if", "i", "%", "2", "==", "0", ":", "\n", "                ", "use_temp_convs_4", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "use_temp_convs_4", ".", "append", "(", "0", ")", "\n", "\n", "", "", "temp_strides_4", "=", "[", "1", ",", "]", "*", "23", "\n", "use_temp_convs_5", "=", "[", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_5", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "\n", "", "use_temp_convs_set", "=", "[", "use_temp_convs_1", ",", "use_temp_convs_2", ",", "use_temp_convs_3", ",", "use_temp_convs_4", ",", "use_temp_convs_5", "]", "\n", "temp_strides_set", "=", "[", "temp_strides_1", ",", "temp_strides_2", ",", "temp_strides_3", ",", "temp_strides_4", ",", "temp_strides_5", "]", "\n", "\n", "return", "use_temp_convs_set", ",", "temp_strides_set", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.resnet10": [[375, 382], ["resnet3d_xl.ResNet"], "function", ["None"], ["", "def", "resnet10", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "use_temp_convs_set", "=", "[", "]", "\n", "temp_strides_set", "=", "[", "]", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "use_temp_convs_set", ",", "temp_strides_set", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.resnet18": [[384, 391], ["resnet3d_xl.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "use_temp_convs_set", "=", "[", "]", "\n", "temp_strides_set", "=", "[", "]", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "use_temp_convs_set", ",", "temp_strides_set", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.resnet34": [[393, 400], ["resnet3d_xl.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    \"\"\"", "\n", "use_temp_convs_set", "=", "[", "]", "\n", "temp_strides_set", "=", "[", "]", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "use_temp_convs_set", ",", "temp_strides_set", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.resnet50": [[402, 409], ["resnet3d_xl.obtain_arc", "resnet3d_xl.ResNet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.obtain_arc"], ["", "def", "resnet50", "(", "extract_features", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "use_temp_convs_set", ",", "temp_strides_set", "=", "obtain_arc", "(", "2", ")", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "use_temp_convs_set", ",", "temp_strides_set", ",", "\n", "extract_features", "=", "extract_features", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.resnet101": [[411, 417], ["resnet3d_xl.obtain_arc", "resnet3d_xl.ResNet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.obtain_arc"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "use_temp_convs_set", ",", "temp_strides_set", "=", "obtain_arc", "(", "4", ")", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "use_temp_convs_set", ",", "temp_strides_set", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.resnet152": [[419, 426], ["resnet3d_xl.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "use_temp_convs_set", "=", "[", "]", "\n", "temp_strides_set", "=", "[", "]", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "use_temp_convs_set", ",", "temp_strides_set", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.resnet200": [[428, 435], ["resnet3d_xl.ResNet"], "function", ["None"], ["", "def", "resnet200", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "use_temp_convs_set", "=", "[", "]", "\n", "temp_strides_set", "=", "[", "]", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "use_temp_convs_set", ",", "temp_strides_set", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet3d_xl.Net": [[437, 469], ["torch.load.items", "net.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "print", "net.named_parameters", "globals", "torch.load", "torch.load", "torch.load", "k.startswith", "print", "name.startswith", "str", "k.replace"], "function", ["None"], ["", "def", "Net", "(", "num_classes", ",", "extract_features", "=", "False", ",", "loss_type", "=", "'softmax'", ",", "\n", "weights", "=", "None", ",", "freeze_all_but_cls", "=", "False", ")", ":", "\n", "    ", "net", "=", "globals", "(", ")", "[", "'resnet'", "+", "str", "(", "50", ")", "]", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "sample_size", "=", "50", ",", "\n", "sample_duration", "=", "32", ",", "\n", "extract_features", "=", "extract_features", ",", "\n", "loss_type", "=", "loss_type", ",", "\n", ")", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "kinetics_weights", "=", "torch", ".", "load", "(", "weights", ")", "[", "'state_dict'", "]", "\n", "print", "(", "\"Found weights in {}.\"", ".", "format", "(", "weights", ")", ")", "\n", "cls_name", "=", "'fc'", "\n", "", "else", ":", "\n", "        ", "kinetics_weights", "=", "torch", ".", "load", "(", "'kinetics-res50.pth'", ")", "\n", "cls_name", "=", "'fc'", "\n", "print", "(", "'\\n Restoring Kintetics \\n'", ")", "\n", "\n", "", "new_weights", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "kinetics_weights", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "k", ".", "startswith", "(", "'module.'", "+", "cls_name", ")", ":", "\n", "            ", "new_weights", "[", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"!!! Smt wrong with restore {k}\"", ")", "\n", "", "", "net", ".", "load_state_dict", "(", "new_weights", ",", "strict", "=", "False", ")", "\n", "\n", "if", "freeze_all_but_cls", ":", "\n", "        ", "for", "name", ",", "par", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "name", ".", "startswith", "(", "'classifier'", ")", ":", "\n", "                ", "par", ".", "requires_grad", "=", "False", "\n", "", "", "", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.BasicBlock.__init__": [[45, 71], ["torch.Module.__init__", "resnet2d.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet2d.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.conv3x3", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.BasicBlock.forward": [[72, 89], ["resnet2d.BasicBlock.conv1", "resnet2d.BasicBlock.bn1", "resnet2d.BasicBlock.relu", "resnet2d.BasicBlock.conv2", "resnet2d.BasicBlock.bn2", "resnet2d.BasicBlock.relu", "resnet2d.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.Bottleneck.__init__": [[100, 125], ["torch.Module.__init__", "resnet2d.conv1x1", "norm_layer", "resnet2d.conv3x3", "norm_layer", "resnet2d.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.conv1x1", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.conv3x3", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.Bottleneck.forward": [[126, 147], ["resnet2d.Bottleneck.conv1", "resnet2d.Bottleneck.bn1", "resnet2d.Bottleneck.relu", "resnet2d.Bottleneck.conv2", "resnet2d.Bottleneck.bn2", "resnet2d.Bottleneck.relu", "resnet2d.Bottleneck.conv3", "resnet2d.Bottleneck.bn3", "resnet2d.Bottleneck.relu", "resnet2d.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet.__init__": [[151, 209], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet2d.ResNet._make_layer", "resnet2d.ResNet._make_layer", "resnet2d.ResNet._make_layer", "resnet2d.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet2d.ResNet.modules", "len", "ValueError", "isinstance", "resnet2d.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._make_layer", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._make_layer", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._make_layer", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._make_layer": [[210, 234], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet2d.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._forward_impl": [[235, 250], ["resnet2d.ResNet.conv1", "resnet2d.ResNet.bn1", "resnet2d.ResNet.relu", "resnet2d.ResNet.maxpool", "resnet2d.ResNet.layer1", "resnet2d.ResNet.layer2", "resnet2d.ResNet.layer3", "resnet2d.ResNet.layer4", "resnet2d.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet2d.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet.forward": [[251, 253], ["resnet2d.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.conv3x3": [[31, 35], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.conv1x1": [[37, 40], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet": [[255, 282], ["resnet2d.ResNet", "load_state_dict_from_url", "ResNet.state_dict", "load_state_dict_from_url.items", "model.state_dict.items", "ResNet.load_state_dict", "k.replace"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "ckpt_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "restore_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "ckpt_dict", ".", "items", "(", ")", ":", "\n", "            ", "restore_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'ignore'", "in", "k", ":", "\n", "                ", "old_name", "=", "k", ".", "replace", "(", "'ignore.'", ",", "''", ")", "\n", "ckpt_val", "=", "ckpt_dict", "[", "old_name", "]", "\n", "del", "restore_dict", "[", "old_name", "]", "\n", "restore_dict", "[", "k", "]", "=", "ckpt_val", "\n", "\n", "", "", "model", ".", "load_state_dict", "(", "restore_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet18": [[284, 294], ["resnet2d._resnet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet"], ["", "def", "resnet18", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet34": [[296, 306], ["resnet2d._resnet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet"], ["", "def", "resnet34", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet50": [[308, 318], ["resnet2d._resnet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet"], ["", "def", "resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet101": [[320, 330], ["resnet2d._resnet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet"], ["", "def", "resnet101", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnet152": [[332, 342], ["resnet2d._resnet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet"], ["", "def", "resnet152", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnext50_32x4d": [[344, 356], ["resnet2d._resnet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.resnext101_32x8d": [[358, 370], ["resnet2d._resnet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.wide_resnet50_2": [[372, 388], ["resnet2d._resnet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d.wide_resnet101_2": [[390, 406], ["resnet2d._resnet"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.resnet2d._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.basic_ops.Identity.forward": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.basic_ops.SegmentConsensus.__init__": [[11, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "SegmentConsensus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "shape", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.basic_ops.SegmentConsensus.forward": [[17, 27], ["input_tensor.size", "input_tensor.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "self", ".", "shape", "=", "input_tensor", ".", "size", "(", ")", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "output", "=", "input_tensor", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "consensus_type", "==", "'identity'", ":", "\n", "            ", "output", "=", "input_tensor", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.basic_ops.ConsensusModule.__init__": [[31, 35], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConsensusModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "if", "consensus_type", "!=", "'rnn'", "else", "'identity'", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.basic_ops.ConsensusModule.forward": [[36, 38], ["basic_ops.SegmentConsensus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "SegmentConsensus", "(", "self", ".", "consensus_type", ",", "self", ".", "dim", ")", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet13": [[5, 13], ["None"], "function", ["None"], ["def", "return_config_resnet13", "(", ")", ":", "\n", "    ", "graph_params", "=", "{", "}", "\n", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "64", ",", "'H'", ":", "32", ",", "'node_dim'", ":", "2", "*", "64", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "128", ",", "'H'", ":", "16", ",", "'node_dim'", ":", "128", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "256", ",", "'H'", ":", "8", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer3'", "}", "\n", "out_pool_size", "=", "8", "\n", "# 256", "\n", "return", "graph_params", ",", "out_pool_size", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet18": [[14, 40], ["min", "min", "min"], "function", ["None"], ["", "def", "return_config_resnet18", "(", ")", ":", "\n", "    ", "graph_params", "=", "{", "}", "\n", "if", "args", ".", "bottleneck_graph", ":", "\n", "        ", "if", "args", ".", "full_res", ":", "\n", "            ", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "64", "//", "args", ".", "ch_div", ",", "'iH'", ":", "56", ",", "'H'", ":", "64", ",", "'node_dim'", ":", "64", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "128", "//", "args", ".", "ch_div", ",", "'iH'", ":", "28", ",", "'H'", ":", "32", ",", "'node_dim'", ":", "128", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "256", "//", "args", ".", "ch_div", ",", "'iH'", ":", "14", ",", "'H'", ":", "16", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "512", "//", "args", ".", "ch_div", ",", "'iH'", ":", "7", ",", "'H'", ":", "8", ",", "'node_dim'", ":", "min", "(", "256", ",", "512", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "out_pool_size", "=", "8", "\n", "", "else", ":", "\n", "            ", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "64", "//", "args", ".", "ch_div", ",", "'H'", ":", "56", ",", "'iH'", ":", "56", ",", "'node_dim'", ":", "64", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "128", "//", "args", ".", "ch_div", ",", "'H'", ":", "28", ",", "'iH'", ":", "28", ",", "'node_dim'", ":", "128", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "256", "//", "args", ".", "ch_div", ",", "'H'", ":", "14", ",", "'iH'", ":", "14", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "512", "//", "args", ".", "ch_div", ",", "'H'", ":", "7", ",", "'iH'", ":", "7", ",", "'node_dim'", ":", "min", "(", "256", ",", "512", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "out_pool_size", "=", "7", "\n", "\n", "", "for", "i", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "            ", "graph_params", "[", "i", "]", "[", "'project_i3d'", "]", "=", "(", "args", ".", "offset_generator", "==", "'glore'", ")", "#True for glore, False for fishnet", "\n", "", "", "else", ":", "\n", "        ", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "64", ",", "'H'", ":", "56", ",", "'node_dim'", ":", "64", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "128", ",", "'H'", ":", "28", ",", "'node_dim'", ":", "128", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "256", ",", "'H'", ":", "14", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "512", ",", "'H'", ":", "7", ",", "'node_dim'", ":", "min", "(", "512", ",", "512", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "out_pool_size", "=", "7", "\n", "\n", "", "return", "graph_params", ",", "out_pool_size", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet34": [[41, 51], ["min"], "function", ["None"], ["", "def", "return_config_resnet34", "(", ")", ":", "\n", "    ", "graph_params", "=", "{", "}", "\n", "\n", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "64", ",", "'H'", ":", "56", ",", "'node_dim'", ":", "64", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "128", ",", "'H'", ":", "28", ",", "'node_dim'", ":", "128", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "256", ",", "'H'", ":", "14", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "512", ",", "'H'", ":", "7", ",", "'node_dim'", ":", "min", "(", "512", ",", "512", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "out_pool_size", "=", "7", "\n", "\n", "return", "graph_params", ",", "out_pool_size", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_wide_resnet50_2": [[54, 70], ["min"], "function", ["None"], ["", "def", "return_config_wide_resnet50_2", "(", ")", ":", "\n", "    ", "graph_params", "=", "{", "}", "\n", "\n", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "512", "//", "args", ".", "ch_div", ",", "'H'", ":", "56", ",", "'iH'", ":", "56", ",", "'node_dim'", ":", "512", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "1024", "//", "args", ".", "ch_div", ",", "'H'", ":", "28", ",", "'iH'", ":", "28", ",", "'node_dim'", ":", "1024", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "2048", "//", "args", ".", "ch_div", ",", "'H'", ":", "14", ",", "'iH'", ":", "14", ",", "'node_dim'", ":", "2048", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "4096", "//", "args", ".", "ch_div", ",", "'H'", ":", "7", ",", "'iH'", ":", "7", ",", "'node_dim'", ":", "min", "(", "512", ",", "4096", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "\n", "\n", "out_pool_size", "=", "7", "\n", "\n", "for", "i", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "        ", "graph_params", "[", "i", "]", "[", "'project_i3d'", "]", "=", "(", "args", ".", "offset_generator", "==", "'glore'", ")", "#True for glore, False for fishnet", "\n", "\n", "\n", "", "return", "graph_params", ",", "out_pool_size", "\n", "", "def", "return_config_resnet50", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet50": [[70, 101], ["min", "min", "min"], "function", ["None"], ["", "def", "return_config_resnet50", "(", ")", ":", "\n", "    ", "graph_params", "=", "{", "}", "\n", "out_pool_size", "=", "0", "\n", "if", "args", ".", "bottleneck_graph", ":", "\n", "\n", "        ", "if", "args", ".", "full_res", ":", "\n", "            ", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "256", "//", "args", ".", "ch_div", ",", "'iH'", ":", "56", ",", "'H'", ":", "64", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "512", "//", "args", ".", "ch_div", ",", "'iH'", ":", "28", ",", "'H'", ":", "32", ",", "'node_dim'", ":", "512", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "1024", "//", "args", ".", "ch_div", ",", "'iH'", ":", "14", ",", "'H'", ":", "16", ",", "'node_dim'", ":", "1024", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "2048", "//", "args", ".", "ch_div", ",", "'iH'", ":", "7", ",", "'H'", ":", "8", ",", "'node_dim'", ":", "min", "(", "256", ",", "2048", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "out_pool_size", "=", "8", "\n", "\n", "", "else", ":", "\n", "            ", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "256", "//", "args", ".", "ch_div", ",", "'H'", ":", "56", ",", "'iH'", ":", "56", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "512", "//", "args", ".", "ch_div", ",", "'H'", ":", "28", ",", "'iH'", ":", "28", ",", "'node_dim'", ":", "512", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "1024", "//", "args", ".", "ch_div", ",", "'H'", ":", "14", ",", "'iH'", ":", "14", ",", "'node_dim'", ":", "1024", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "2048", "//", "args", ".", "ch_div", ",", "'H'", ":", "7", ",", "'iH'", ":", "7", ",", "'node_dim'", ":", "min", "(", "256", ",", "2048", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "out_pool_size", "=", "7", "\n", "\n", "", "for", "i", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "            ", "graph_params", "[", "i", "]", "[", "'project_i3d'", "]", "=", "(", "args", ".", "offset_generator", "==", "'glore'", ")", "#True for glore, False for fishnet", "\n", "\n", "\n", "", "", "else", ":", "\n", "# TO BE REEMOVED", "\n", "        ", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "256", ",", "'H'", ":", "56", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "512", ",", "'H'", ":", "28", ",", "'node_dim'", ":", "512", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "1024", ",", "'H'", ":", "14", ",", "'node_dim'", ":", "1024", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "2048", ",", "'H'", ":", "7", ",", "'node_dim'", ":", "min", "(", "512", ",", "2048", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "\n", "", "return", "graph_params", ",", "out_pool_size", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet101": [[102, 123], ["min", "min"], "function", ["None"], ["", "def", "return_config_resnet101", "(", ")", ":", "\n", "    ", "graph_params", "=", "{", "}", "\n", "if", "args", ".", "bottleneck_graph", ":", "\n", "\n", "            ", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "256", "//", "args", ".", "ch_div", ",", "'H'", ":", "56", ",", "'iH'", ":", "56", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "512", "//", "args", ".", "ch_div", ",", "'H'", ":", "28", ",", "'iH'", ":", "28", ",", "'node_dim'", ":", "512", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "1024", "//", "args", ".", "ch_div", ",", "'H'", ":", "14", ",", "'iH'", ":", "14", ",", "'node_dim'", ":", "1024", "//", "args", ".", "ch_div", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "2048", "//", "args", ".", "ch_div", ",", "'H'", ":", "7", ",", "'iH'", ":", "7", ",", "'node_dim'", ":", "min", "(", "256", ",", "2048", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "out_pool_size", "=", "7", "\n", "\n", "for", "i", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "                ", "graph_params", "[", "i", "]", "[", "'project_i3d'", "]", "=", "(", "args", ".", "offset_generator", "==", "'glore'", ")", "#True for glore, False for fishnet", "\n", "", "", "else", ":", "\n", "        ", "graph_params", "[", "1", "]", "=", "{", "'in_channels'", ":", "256", ",", "'H'", ":", "56", ",", "'node_dim'", ":", "256", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer1'", "}", "\n", "graph_params", "[", "2", "]", "=", "{", "'in_channels'", ":", "512", ",", "'H'", ":", "28", ",", "'node_dim'", ":", "512", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer2'", "}", "\n", "graph_params", "[", "3", "]", "=", "{", "'in_channels'", ":", "1024", ",", "'H'", ":", "14", ",", "'node_dim'", ":", "1024", "//", "args", ".", "ch_div", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer3'", "}", "\n", "graph_params", "[", "4", "]", "=", "{", "'in_channels'", ":", "2048", ",", "'H'", ":", "7", ",", "'node_dim'", ":", "min", "(", "512", ",", "2048", "//", "args", ".", "ch_div", ")", ",", "'project_i3d'", ":", "True", ",", "'name'", ":", "'layer4'", "}", "\n", "", "out_pool_size", "=", "7", "\n", "if", "args", ".", "full_res", ":", "\n", "        ", "out_pool_size", "=", "8", "\n", "", "return", "graph_params", ",", "out_pool_size", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.get_models_config": [[128, 144], ["models_config.return_config_resnet13", "models_config.return_config_resnet18", "models_config.return_config_resnet34", "models_config.return_config_resnet50", "models_config.return_config_wide_resnet50_2", "models_config.return_config_resnet101"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet13", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet18", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet34", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet50", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_wide_resnet50_2", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.models_config.return_config_resnet101"], ["", "def", "get_models_config", "(", ")", ":", "\n", "    ", "graph_params", "=", "{", "}", "\n", "if", "args", ".", "arch", "==", "'resnet13'", ":", "\n", "        ", "graph_params", ",", "out_pool_size", "=", "return_config_resnet13", "(", ")", "\n", "", "if", "args", ".", "arch", "==", "'resnet18'", ":", "\n", "        ", "graph_params", ",", "out_pool_size", "=", "return_config_resnet18", "(", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet34'", ":", "\n", "        ", "graph_params", ",", "out_pool_size", "=", "return_config_resnet34", "(", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "        ", "graph_params", ",", "out_pool_size", "=", "return_config_resnet50", "(", ")", "\n", "", "elif", "args", ".", "arch", "==", "'wide_resnet50_2'", ":", "\n", "        ", "graph_params", ",", "out_pool_size", "=", "return_config_wide_resnet50_2", "(", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet101'", ":", "\n", "        ", "graph_params", ",", "out_pool_size", "=", "return_config_resnet101", "(", ")", "\n", "", "out_num_ch", "=", "2048", "\n", "return", "graph_params", ",", "out_pool_size", ",", "out_num_ch", ",", "None", "", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.TemporalShift.__init__": [[12, 21], ["torch.Module.__init__", "print", "print"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "n_segment", "=", "3", ",", "n_div", "=", "8", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "TemporalShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "fold_div", "=", "n_div", "\n", "self", ".", "inplace", "=", "inplace", "\n", "if", "inplace", ":", "\n", "            ", "print", "(", "'=> Using in-place shift...'", ")", "\n", "", "print", "(", "'=> Using fold div: {}'", ".", "format", "(", "self", ".", "fold_div", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.TemporalShift.forward": [[22, 25], ["temporal_shift.TemporalShift.shift", "temporal_shift.TemporalShift.net"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.TemporalShift.shift"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "shift", "(", "x", ",", "self", ".", "n_segment", ",", "fold_div", "=", "self", ".", "fold_div", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.TemporalShift.shift": [[26, 48], ["x.view.view.size", "x.view.view.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "shift", "(", "x", ",", "n_segment", ",", "fold_div", "=", "3", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "n_batch", "=", "nt", "//", "n_segment", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "n_segment", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "fold", "=", "c", "//", "fold_div", "\n", "if", "inplace", ":", "\n", "# Due to some out of order error when performing parallel computing. ", "\n", "# May need to write a CUDA kernel.", "\n", "            ", "raise", "NotImplementedError", "\n", "# out = InplaceShift.apply(x, fold)", "\n", "", "else", ":", "\n", "# pdb.set_trace()", "\n", "# print(f'shift input mean: {x.mean()}')", "\n", "            ", "out", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "out", "[", ":", ",", ":", "-", "1", ",", ":", "fold", "]", "=", "x", "[", ":", ",", "1", ":", ",", ":", "fold", "]", "# shift left", "\n", "out", "[", ":", ",", "1", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "x", "[", ":", ",", ":", "-", "1", ",", "fold", ":", "2", "*", "fold", "]", "# shift right", "\n", "out", "[", ":", ",", ":", ",", "2", "*", "fold", ":", "]", "=", "x", "[", ":", ",", ":", ",", "2", "*", "fold", ":", "]", "# not shift", "\n", "# print(f'shift out mean: {out.mean()}')", "\n", "# print(f'out shape {out.shape}')", "\n", "", "return", "out", ".", "view", "(", "nt", ",", "c", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.MyIdentity.__init__": [[50, 52], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ")", ":", "\n", "        ", "super", "(", "MyIdentity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.MyIdentity.forward": [[54, 56], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.InplaceShift.forward": [[61, 74], ["input.size", "input.data.new().zero_", "input.data.new().zero_.zero_", "input.data.new"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "fold", ")", ":", "\n", "# not support higher order gradient", "\n", "# input = input.detach_()", "\n", "        ", "ctx", ".", "fold_", "=", "fold", "\n", "n", ",", "t", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "buffer", "=", "input", ".", "data", ".", "new", "(", "n", ",", "t", ",", "fold", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", ":", "-", "1", "]", "=", "input", ".", "data", "[", ":", ",", "1", ":", ",", ":", "fold", "]", "\n", "input", ".", "data", "[", ":", ",", ":", ",", ":", "fold", "]", "=", "buffer", "\n", "buffer", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", "1", ":", "]", "=", "input", ".", "data", "[", ":", ",", ":", "-", "1", ",", "fold", ":", "2", "*", "fold", "]", "\n", "input", ".", "data", "[", ":", ",", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "buffer", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.InplaceShift.backward": [[75, 87], ["grad_output.size", "grad_output.data.new().zero_", "grad_output.data.new().zero_.zero_", "grad_output.data.new"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# grad_output = grad_output.detach_()", "\n", "        ", "fold", "=", "ctx", ".", "fold_", "\n", "n", ",", "t", ",", "c", ",", "h", ",", "w", "=", "grad_output", ".", "size", "(", ")", "\n", "buffer", "=", "grad_output", ".", "data", ".", "new", "(", "n", ",", "t", ",", "fold", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", "1", ":", "]", "=", "grad_output", ".", "data", "[", ":", ",", ":", "-", "1", ",", ":", "fold", "]", "\n", "grad_output", ".", "data", "[", ":", ",", ":", ",", ":", "fold", "]", "=", "buffer", "\n", "buffer", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", ":", "-", "1", "]", "=", "grad_output", ".", "data", "[", ":", ",", "1", ":", ",", "fold", ":", "2", "*", "fold", "]", "\n", "grad_output", ".", "data", "[", ":", ",", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "buffer", "\n", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.TemporalPool.__init__": [[90, 94], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "n_segment", ")", ":", "\n", "        ", "super", "(", "TemporalPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.TemporalPool.forward": [[95, 98], ["temporal_shift.TemporalPool.temporal_pool", "temporal_shift.TemporalPool.net"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.TemporalPool.temporal_pool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "temporal_pool", "(", "x", ",", "n_segment", "=", "self", ".", "n_segment", ")", "\n", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.TemporalPool.temporal_pool": [[99, 107], ["x.transpose().contiguous().view.transpose().contiguous().view.size", "x.transpose().contiguous().view.transpose().contiguous().view.view().transpose", "torch.max_pool3d", "torch.max_pool3d", "torch.max_pool3d", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "x.transpose().contiguous().view.transpose().contiguous().view.view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "x.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "temporal_pool", "(", "x", ",", "n_segment", ")", ":", "\n", "        ", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "n_batch", "=", "nt", "//", "n_segment", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "n_segment", ",", "c", ",", "h", ",", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", "# n, c, t, h, w", "\n", "x", "=", "F", ".", "max_pool3d", "(", "x", ",", "kernel_size", "=", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nt", "//", "2", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.make_temporal_shift": [[109, 168], ["print", "NotImplementedError", "temporal_shift.make_temporal_shift.make_block_temporal"], "function", ["None"], ["", "", "def", "make_temporal_shift", "(", "net", ",", "n_segment", ",", "n_div", "=", "8", ",", "place", "=", "'blockres'", ",", "temporal_pool", "=", "False", ")", ":", "\n", "    ", "if", "temporal_pool", ":", "\n", "        ", "n_segment_list", "=", "[", "n_segment", ",", "n_segment", "//", "2", ",", "n_segment", "//", "2", ",", "n_segment", "//", "2", "]", "\n", "", "else", ":", "\n", "        ", "n_segment_list", "=", "[", "n_segment", "]", "*", "4", "\n", "", "assert", "n_segment_list", "[", "-", "1", "]", ">", "0", "\n", "print", "(", "'=> n_segment per stage: {}'", ".", "format", "(", "n_segment_list", ")", ")", "\n", "\n", "import", "torchvision", "\n", "# if isinstance(net, torchvision.models.ResNet):", "\n", "if", "True", ":", "\n", "        ", "if", "place", "==", "'block'", ":", "\n", "# print('place == block')", "\n", "            ", "def", "make_block_temporal", "(", "stage", ",", "this_segment", ")", ":", "\n", "                ", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "# print('=> Processing stage with {} blocks'.format(len(blocks)))", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "# print(f'tenporal shift {b}')", "\n", "# pdb.set_trace()", "\n", "                    ", "blocks", "[", "i", "]", "=", "TemporalShift", "(", "b", ",", "n_segment", "=", "this_segment", ",", "n_div", "=", "n_div", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "(", "blocks", ")", ")", "\n", "# pdb.set_trace()", "\n", "", "net", ".", "layer1", "=", "make_block_temporal", "(", "net", ".", "layer1", ",", "n_segment_list", "[", "0", "]", ")", "\n", "net", ".", "layer2", "=", "make_block_temporal", "(", "net", ".", "layer2", ",", "n_segment_list", "[", "1", "]", ")", "\n", "net", ".", "layer3", "=", "make_block_temporal", "(", "net", ".", "layer3", ",", "n_segment_list", "[", "2", "]", ")", "\n", "net", ".", "layer4", "=", "make_block_temporal", "(", "net", ".", "layer4", ",", "n_segment_list", "[", "3", "]", ")", "\n", "\n", "", "elif", "'blockres'", "in", "place", ":", "\n", "            ", "print", "(", "f'place={place}'", ")", "\n", "\n", "n_round", "=", "1", "\n", "if", "len", "(", "list", "(", "net", ".", "layer3", ".", "children", "(", ")", ")", ")", ">=", "23", ":", "\n", "                ", "n_round", "=", "2", "\n", "print", "(", "'=> Using n_round {} to insert temporal shift'", ".", "format", "(", "n_round", ")", ")", "\n", "\n", "", "def", "make_block_temporal", "(", "stage", ",", "this_segment", ")", ":", "\n", "                ", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "print", "(", "'=> Processing stage with {} blocks residual'", ".", "format", "(", "len", "(", "blocks", ")", ")", ")", "\n", "nr_shift_layers", "=", "0", "\n", "# pdb.set_trace()", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "                    ", "if", "i", "%", "n_round", "==", "0", ":", "\n", "# print(f'[{i}] tenporal shift. this_segment = {this_segment}. n_div = {n_div}. n_round = {n_round}')", "\n", "#pdb.set_trace()", "\n", "                        ", "nr_shift_layers", "+=", "1", "\n", "blocks", "[", "i", "]", ".", "conv1", "=", "TemporalShift", "(", "b", ".", "conv1", ",", "n_segment", "=", "this_segment", ",", "n_div", "=", "n_div", ")", "\n", "# blocks[i].conv1 = b.conv1", "\n", "# print(f'nr_shift_layers: {nr_shift_layers}') ", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "# pdb.set_trace()", "\n", "# net.bn1 = MyIdentity(net.bn1)", "\n", "\n", "# net.conv1 =  TemporalShift(net.conv1, n_segment=n_segment_list[0], n_div=3)", "\n", "", "net", ".", "layer1", "=", "make_block_temporal", "(", "net", ".", "layer1", ",", "n_segment_list", "[", "0", "]", ")", "\n", "net", ".", "layer2", "=", "make_block_temporal", "(", "net", ".", "layer2", ",", "n_segment_list", "[", "1", "]", ")", "\n", "net", ".", "layer3", "=", "make_block_temporal", "(", "net", ".", "layer3", ",", "n_segment_list", "[", "2", "]", ")", "\n", "net", ".", "layer4", "=", "make_block_temporal", "(", "net", ".", "layer4", ",", "n_segment_list", "[", "3", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "place", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.temporal_shift.make_temporal_pool": [[170, 177], ["isinstance", "print", "temporal_shift.TemporalPool"], "function", ["None"], ["", "", "def", "make_temporal_pool", "(", "net", ",", "n_segment", ")", ":", "\n", "    ", "import", "torchvision", "\n", "if", "isinstance", "(", "net", ",", "torchvision", ".", "models", ".", "ResNet", ")", ":", "\n", "        ", "print", "(", "'=> Injecting nonlocal pooling'", ")", "\n", "net", ".", "layer2", "=", "TemporalPool", "(", "net", ".", "layer2", ",", "n_segment", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.LearnedParamChecker.__init__": [[377, 380], ["utils.LearnedParamChecker.save_initial_params"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.LearnedParamChecker.save_initial_params"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "initial_params", "=", "self", ".", "save_initial_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.LearnedParamChecker.save_initial_params": [[381, 386], ["utils.LearnedParamChecker.model.named_parameters", "p.detach().cpu().numpy", "p.detach().cpu", "p.detach"], "methods", ["None"], ["", "def", "save_initial_params", "(", "self", ")", ":", "\n", "        ", "initial_params", "=", "{", "}", "\n", "for", "name", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "initial_params", "[", "name", "]", "=", "p", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "initial_params", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.LearnedParamChecker.compare_current_initial_params": [[387, 393], ["utils.LearnedParamChecker.model.named_parameters", "current_p.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "numpy.mean", "print", "numpy.abs", "current_p.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "current_p.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["None"], ["", "def", "compare_current_initial_params", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "current_p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "initial_p", "=", "self", ".", "initial_params", "[", "name", "]", "\n", "current_p", "=", "current_p", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "initial_p", "-", "current_p", ")", ")", "\n", "print", "(", "f'params: {name} mean change : {diff}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.__init__": [[399, 401], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.reset": [[402, 407], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.AverageMeter.update": [[408, 413], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.offsets_to_boxes": [[17, 45], ["args.place_graph.replace().split", "int", "int", "all_positions.append", "int", "offsets[].squeeze().detach().cpu().numpy", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.stack", "args.place_graph.replace", "numpy.maximum", "numpy.maximum", "place.split", "place.split", "offsets[].squeeze().detach().cpu", "offsets[].squeeze().detach", "offsets[].squeeze"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split"], ["def", "offsets_to_boxes", "(", "offsets", ",", "frame_size", "=", "224", ")", ":", "\n", "    ", "pred_boxes_dict", "=", "{", "}", "\n", "places", "=", "args", ".", "place_graph", ".", "replace", "(", "'layer'", ",", "''", ")", ".", "split", "(", "'_'", ")", "\n", "all_positions", "=", "[", "]", "\n", "for", "place", "in", "places", ":", "\n", "        ", "layer", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "block", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "pred_position", "=", "f'layer{layer}_{block}'", "\n", "lb", "=", "(", "layer", ",", "block", ")", "\n", "all_positions", ".", "append", "(", "lb", ")", "\n", "", "for", "(", "layer", ",", "block", ")", "in", "all_positions", ":", "\n", "        ", "pred_position", "=", "f'layer{layer}_block{block}'", "\n", "num_layer", "=", "int", "(", "layer", ")", "\n", "pred_offset", "=", "offsets", "[", "pred_position", "]", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_offsets", "=", "pred_offset", "/", "args", ".", "graph_params", "[", "num_layer", "]", "[", "'H'", "]", "*", "frame_size", "#224.0", "\n", "regions_h", "=", "pred_offsets", "[", ":", ",", ":", ",", "0", "]", "\n", "regions_w", "=", "pred_offsets", "[", ":", ",", ":", ",", "1", "]", "\n", "kernel_center_h", "=", "pred_offsets", "[", ":", ",", ":", ",", "2", "]", "\n", "kernel_center_w", "=", "pred_offsets", "[", ":", ",", ":", ",", "3", "]", "\n", "\n", "y1", "=", "np", ".", "minimum", "(", "frame_size", "-", "1", ",", "np", ".", "maximum", "(", "0", ",", "kernel_center_h", "-", "regions_h", ")", ")", "\n", "x1", "=", "np", ".", "minimum", "(", "frame_size", "-", "1", ",", "np", ".", "maximum", "(", "0", ",", "kernel_center_w", "-", "regions_w", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "frame_size", "-", "1", ",", "kernel_center_h", "+", "regions_h", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "frame_size", "-", "1", ",", "kernel_center_w", "+", "regions_w", ")", "\n", "\n", "pred_boxes", "=", "np", ".", "stack", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ",", "axis", "=", "-", "1", ")", "\n", "pred_boxes_dict", "[", "f'layer{layer}_{block}'", "]", "=", "pred_boxes", "\n", "", "return", "pred_boxes_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.draw_box": [[48, 64], ["max", "min", "max", "min", "int", "int", "int", "int"], "function", ["None"], ["", "def", "draw_box", "(", "frame", ",", "box", ",", "color", "=", "[", "1", ",", "1", ",", "1", "]", ")", ":", "\n", "    ", "H", "=", "args", ".", "input_size", "\n", "(", "h", ",", "w", ",", "dh", ",", "dw", ")", "=", "box", "\n", "\n", "left", "=", "max", "(", "0", ",", "int", "(", "dw", "-", "w", ")", ")", "\n", "right", "=", "min", "(", "int", "(", "dw", "+", "w", ")", ",", "H", "-", "1", ")", "\n", "up", "=", "max", "(", "int", "(", "dh", "-", "h", ")", ",", "0", ")", "\n", "down", "=", "min", "(", "int", "(", "dh", "+", "h", ")", ",", "H", "-", "1", ")", "\n", "\n", "# print(left,right,up,down)", "\n", "frame", "[", "left", ",", "up", ":", "down", "]", "=", "color", "#(0,0,1)", "\n", "\n", "frame", "[", "right", ",", "up", ":", "down", "]", "=", "color", "#(0,0,1)", "\n", "frame", "[", "left", ":", "right", ",", "up", "]", "=", "color", "#(0,0,1)", "\n", "frame", "[", "left", ":", "right", ",", "down", "]", "=", "color", "#(0,0,1)", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.draw_box_gt": [[65, 84], ["range", "len", "int", "int", "int", "int"], "function", ["None"], ["", "def", "draw_box_gt", "(", "frame", ",", "target_boxes", ",", "colors", "=", "[", "1", ",", "1", ",", "1", "]", ",", "partial", "=", "False", ",", "line_width", "=", "1", ")", ":", "\n", "    ", "if", "len", "(", "colors", ")", "<", "target_boxes", ".", "shape", "[", "0", "]", ":", "\n", "        ", "colors", "=", "colors", "*", "target_boxes", ".", "shape", "[", "0", "]", "\n", "", "for", "b", "in", "range", "(", "target_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "partial", "and", "b", "%", "3", "!=", "0", ":", "\n", "            ", "continue", "\n", "", "box", "=", "target_boxes", "[", "b", "]", "\n", "\n", "top_h", "=", "int", "(", "box", "[", "0", "]", ")", "\n", "left_w", "=", "int", "(", "box", "[", "1", "]", ")", "\n", "bot_h", "=", "int", "(", "box", "[", "2", "]", ")", "\n", "right_w", "=", "int", "(", "box", "[", "3", "]", ")", "\n", "frame", "[", "top_h", ":", "bot_h", ",", "left_w", ":", "left_w", "+", "line_width", "]", "=", "colors", "[", "b", "]", "\n", "frame", "[", "top_h", ":", "bot_h", ",", "right_w", ":", "right_w", "+", "line_width", "]", "=", "colors", "[", "b", "]", "\n", "\n", "frame", "[", "top_h", ":", "top_h", "+", "line_width", ",", "left_w", ":", "right_w", "]", "=", "colors", "[", "b", "]", "\n", "frame", "[", "bot_h", ":", "bot_h", "+", "line_width", ",", "left_w", ":", "right_w", "]", "=", "colors", "[", "b", "]", "\n", "\n", "", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.save_grad_cam": [[85, 127], ["input.detach().cpu().numpy", "numpy.reshape", "numpy.transpose", "enumerate", "os.path.exists", "os.makedirs", "grad_cam.view.view", "range", "input.detach().cpu", "min", "range", "grad_cam[].cpu().detach().numpy", "np.array.min", "numpy.array", "cv2.applyColorMap", "numpy.concatenate", "cv2.imwrite", "input.detach", "PIL.Image.fromarray().resize", "numpy.float32", "numpy.float32", "cam.max", "os.path.join", "grad_cam[].cpu().detach", "numpy.uint8", "numpy.uint8", "PIL.Image.fromarray", "grad_cam[].cpu"], "function", ["None"], ["", "def", "save_grad_cam", "(", "input", ",", "grad_cams", ",", "folder", ",", "name", "=", "'initial'", ")", ":", "\n", "\n", "    ", "import", "cv2", "\n", "folder_dir", "=", "folder", "+", "f'/viz_grad_cam_{name}/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_dir", ")", "\n", "\n", "", "video_input_val", "=", "input", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "video_input_val", "=", "np", ".", "reshape", "(", "video_input_val", ",", "[", "args", ".", "batch_size", ",", "-", "1", ",", "3", ",", "video_input_val", ".", "shape", "[", "3", "]", ",", "video_input_val", ".", "shape", "[", "4", "]", "]", ")", "\n", "video_input_val", "=", "np", ".", "transpose", "(", "video_input_val", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "2", "]", ")", "\n", "for", "ind_grad", ",", "gr", "in", "enumerate", "(", "grad_cams", ")", ":", "\n", "        ", "name", "=", "gr", "[", "0", "]", "\n", "grad_cam", "=", "gr", "[", "1", "]", "\n", "grad_cam", "=", "grad_cam", ".", "view", "(", "(", "-", "1", ",", "16", ")", "+", "grad_cam", ".", "shape", "[", "1", ":", "]", ")", "\n", "num_saved_videos", "=", "2", "\n", "for", "video_idx", "in", "range", "(", "min", "(", "num_saved_videos", ",", "args", ".", "batch_size", ")", ")", ":", "\n", "            ", "max_t", "=", "16", "\n", "all_frames", "=", "[", "]", "\n", "for", "tt", "in", "range", "(", "max_t", ")", ":", "\n", "                ", "if", "'resnet50_smt_else'", "in", "args", ".", "arch", ":", "\n", "                    ", "real_tt", "=", "2", "*", "tt", "\n", "", "else", ":", "\n", "                    ", "real_tt", "=", "tt", "\n", "\n", "", "frame", "=", "video_input_val", "[", "video_idx", ",", "real_tt", ",", ":", ",", ":", "]", "\n", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "                    ", "frame", "=", "frame", "*", "57.375", "+", "114.75", "\n", "\n", "", "grad_c", "=", "grad_cam", "[", "video_idx", ",", "tt", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "grad_min", "=", "grad_c", ".", "min", "(", ")", "\n", "grad_max", "=", "(", "grad_c", "-", "grad_min", ")", ".", "max", "(", ")", "\n", "grad_c", "=", "(", "grad_c", "-", "grad_min", ")", "/", "grad_max", "\n", "grad_c", "=", "(", "grad_c", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "grad_c", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "grad_c", ")", ".", "resize", "(", "(", "frame", ".", "shape", "[", "0", "]", ",", "frame", ".", "shape", "[", "1", "]", ")", ",", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ")", ")", "\n", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "grad_c", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "cam", "=", "np", ".", "float32", "(", "heatmap", ")", "+", "np", ".", "float32", "(", "frame", ")", "\n", "cam", "=", "cam", "/", "cam", ".", "max", "(", ")", "\n", "\n", "combined_img", "=", "np", ".", "concatenate", "(", "(", "np", ".", "uint8", "(", "frame", ")", ",", "np", ".", "uint8", "(", "255", "*", "cam", ")", ")", ",", "axis", "=", "1", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "folder_dir", ",", "f'video_{video_idx}_frame_{tt}_{ind_grad}_grad_{name}.jpg'", ")", ",", "combined_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.save_mean_kernels": [[129, 159], ["args.place_graph.replace().split", "int", "int", "placement_all_models.append", "numpy.reshape", "range", "args.place_graph.replace", "matplotlib.subplots", "range", "placement.replace.replace", "matplotlib.savefig", "place.split", "place.split", "range", "os.path.exists", "os.makedirs", "np.array.max", "numpy.array", "[].imshow", "PIL.Image.fromarray().resize", "np.array.astype", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split"], ["", "", "", "", "def", "save_mean_kernels", "(", "all_kernels", ",", "epoch", "=", "0", ",", "folder", "=", "''", ")", ":", "\n", "    ", "places", "=", "args", ".", "place_graph", ".", "replace", "(", "'layer'", ",", "''", ")", ".", "split", "(", "'_'", ")", "\n", "placement_all_models", "=", "[", "]", "\n", "for", "place", "in", "places", ":", "\n", "        ", "layer", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "block", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "placement_all_models", ".", "append", "(", "f'layer{layer}_block{block}'", ")", "\n", "\n", "", "for", "placement", "in", "placement_all_models", ":", "\n", "        ", "kernel_val", "=", "all_kernels", "[", "placement", "]", "\n", "\n", "kernel_val", "=", "np", ".", "reshape", "(", "kernel_val", ",", "[", "args", ".", "num_segments", ",", "3", ",", "3", ",", "kernel_val", ".", "shape", "[", "-", "2", "]", ",", "kernel_val", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "for", "tt", "in", "range", "(", "args", ".", "num_segments", ")", ":", "\n", "            ", "f", ",", "axarr", "=", "plt", ".", "subplots", "(", "3", ",", "3", ")", "\n", "for", "ii", "in", "range", "(", "3", ")", ":", "\n", "                ", "for", "jj", "in", "range", "(", "3", ")", ":", "\n", "                        ", "curent_kernel", "=", "kernel_val", "[", "tt", "]", "[", "ii", "]", "[", "jj", "]", "\n", "curent_kernel_max", "=", "curent_kernel", ".", "max", "(", ")", "\n", "curent_kernel", "=", "curent_kernel", "/", "curent_kernel_max", "\n", "curent_kernel", "=", "(", "curent_kernel", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "curent_kernel", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "curent_kernel", ")", ".", "resize", "(", "(", "224", ",", "224", ")", ",", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ")", ")", "\n", "curent_kernel", "=", "curent_kernel", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "\n", "axarr", "[", "ii", "]", "[", "jj", "]", ".", "imshow", "(", "curent_kernel", ")", "\n", "\n", "", "", "placement", "=", "placement", ".", "replace", "(", "'block'", ",", "''", ")", "\n", "folder_dir", "=", "folder", "+", "f'/viz_kernel_{placement}/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "folder_dir", ")", "\n", "", "plt", ".", "savefig", "(", "f'{folder_dir}/mean_kernels_time_epoch_{epoch}_time_{tt}.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.save_kernels": [[163, 297], ["utils.offsets_to_boxes", "args.place_graph.replace().split", "int", "int", "placement_all_models.append", "predicted_boxes.reshape.reshape", "interm_feats[].detach().cpu().numpy", "input.detach().cpu().numpy", "numpy.reshape", "numpy.transpose", "numpy.reshape", "range", "matplotlib.close", "args.place_graph.replace", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "min", "range", "moviepy.editor.ImageSequenceClip", "moviepy.editor.ImageSequenceClip.write_gif", "placement.replace.split", "placement.replace.split", "interm_feats[].detach().cpu", "input.detach().cpu", "numpy.ones", "matplotlib.rgb_to_hsv", "numpy.array", "matplotlib.rgb_to_hsv", "matplotlib.subplots", "frame_hsv[].max", "numpy.zeros", "range", "matplotlib.hsv_to_rgb", "numpy.clip", "matplotlib.close", "all_frames.append", "list", "frame_hsv[].mean", "range", "numpy.tile", "np.tile.copy", "range", "matplotlib.savefig", "matplotlib.subplots", "axarr.imshow", "matplotlib.savefig", "interm_feats[].detach", "input.detach", "range", "np.array.max", "numpy.array", "placement.replace", "int", "int", "utils.draw_box", "numpy.clip", "matplotlib.subplots", "axarr.imshow", "matplotlib.savefig", "frame_hsv[].max", "frame_hsv[].mean", "[].imshow", "PIL.Image.fromarray().resize", "np.array.astype", "np.array.max", "placement.replace.split", "placement.replace.split", "np.tile.max", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.offsets_to_boxes", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.draw_box", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.tools.vid2img_sthv2.split"], ["", "", "", "def", "save_kernels", "(", "input", ",", "interm_feats", ",", "folder", ",", "name", "=", "'initial'", ",", "target_offset", "=", "None", ",", "target_boxes_val", "=", "None", ",", "predicted_offsets", "=", "None", ")", ":", "\n", "# predicted offsets is a dict. detach when used", "\n", "    ", "predicted_boxes_dict", "=", "offsets_to_boxes", "(", "predicted_offsets", ",", "frame_size", "=", "input", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "places", "=", "args", ".", "place_graph", ".", "replace", "(", "'layer'", ",", "''", ")", ".", "split", "(", "'_'", ")", "\n", "placement_all_models", "=", "[", "]", "# ['layer4', 'layer3','layer2','layer1']", "\n", "for", "place", "in", "places", ":", "\n", "        ", "layer", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "block", "=", "int", "(", "place", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "placement_all_models", ".", "append", "(", "f'layer{layer}_{block}'", ")", "\n", "", "input_ch", "=", "3", "\n", "if", "args", ".", "modality", "==", "'gray'", ":", "\n", "        ", "input_ch", "=", "1", "\n", "", "for", "placement", "in", "placement_all_models", ":", "\n", "        ", "predicted_boxes", "=", "predicted_boxes_dict", "[", "placement", "]", "\n", "predicted_boxes", "=", "predicted_boxes", ".", "reshape", "(", "input", ".", "shape", "[", "0", "]", ",", "args", ".", "num_segments", ",", "predicted_boxes", ".", "shape", "[", "1", "]", ",", "predicted_boxes", ".", "shape", "[", "2", "]", ")", "\n", "\n", "kernel_val", "=", "interm_feats", "[", "placement", "+", "'_kernels'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "video_input_val", "=", "input", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "video_input_val", "=", "np", ".", "reshape", "(", "video_input_val", ",", "[", "args", ".", "batch_size", "*", "args", ".", "test_crops", ",", "-", "1", ",", "input_ch", ",", "video_input_val", ".", "shape", "[", "-", "2", "]", ",", "video_input_val", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "video_input_val", "=", "np", ".", "transpose", "(", "video_input_val", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "2", "]", ")", "\n", "if", "args", ".", "modality", "==", "'gray'", ":", "\n", "            ", "tmp_zeros", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "video_input_val", ".", "shape", "[", "0", "]", ",", "video_input_val", ".", "shape", "[", "1", "]", ",", "video_input_val", ".", "shape", "[", "2", "]", ",", "video_input_val", ".", "shape", "[", "3", "]", ",", "3", ")", ")", "\n", "tmp_zeros", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "=", "video_input_val", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "video_input_val", "=", "tmp_zeros", "\n", "\n", "\n", "", "kernel_val", "=", "np", ".", "reshape", "(", "kernel_val", ",", "[", "args", ".", "batch_size", "*", "args", ".", "test_crops", ",", "-", "1", ",", "kernel_val", ".", "shape", "[", "1", "]", ",", "kernel_val", ".", "shape", "[", "2", "]", ",", "kernel_val", ".", "shape", "[", "3", "]", ",", "kernel_val", ".", "shape", "[", "4", "]", "]", ")", "\n", "\n", "folder_dir", "=", "folder", "+", "f'/viz_kernel_{placement}/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_dir", ")", "\n", "\n", "", "folder_dir", "=", "folder_dir", "+", "f'/{name}/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_dir", ")", "\n", "", "tt", "=", "2", "\n", "\n", "num_rows", "=", "kernel_val", ".", "shape", "[", "2", "]", "\n", "save_individual_frames", "=", "True", "\n", "\n", "num_saved_videos", "=", "2", "\n", "\n", "for", "video_idx", "in", "range", "(", "min", "(", "num_saved_videos", ",", "args", ".", "test_crops", "*", "args", ".", "batch_size", ")", ")", ":", "\n", "            ", "max_t", "=", "kernel_val", ".", "shape", "[", "1", "]", "\n", "all_frames", "=", "[", "]", "\n", "for", "tt", "in", "range", "(", "max_t", ")", ":", "\n", "                ", "if", "'resnet50_smt_else'", "in", "args", ".", "arch", ":", "\n", "                    ", "real_tt", "=", "2", "*", "tt", "\n", "", "else", ":", "\n", "                    ", "real_tt", "=", "tt", "\n", "", "frame", "=", "video_input_val", "[", "video_idx", ",", "real_tt", ",", ":", ",", ":", "]", "\n", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "                    ", "frame", "=", "frame", "*", "57.375", "+", "114.75", "\n", "frame", "=", "frame", "/", "255.0", "\n", "", "else", ":", "\n", "                    ", "frame", "=", "(", "frame", "+", "1.0", ")", "/", "2.0", "\n", "\n", "", "frame_hsv", "=", "colors", ".", "rgb_to_hsv", "(", "frame", ")", "\n", "\n", "rgb", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "hsv", "=", "colors", ".", "rgb_to_hsv", "(", "rgb", ")", "\n", "\n", "f", ",", "axarr", "=", "plt", ".", "subplots", "(", "num_rows", ",", "num_rows", ")", "\n", "N", "=", "kernel_val", ".", "shape", "[", "2", "]", "*", "kernel_val", ".", "shape", "[", "3", "]", "\n", "\n", "max_s", "=", "frame_hsv", "[", ":", ",", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "max_v", "=", "frame_hsv", "[", ":", ",", ":", ",", "2", "]", ".", "mean", "(", ")", "+", "0.85", "*", "(", "frame_hsv", "[", ":", ",", ":", ",", "2", "]", ".", "max", "(", ")", "-", "frame_hsv", "[", ":", ",", ":", ",", "2", "]", ".", "mean", "(", ")", ")", "# poate de pus mean", "\n", "HSV_tuples", "=", "[", "(", "x", "*", "1.0", "/", "N", ",", "max_s", ",", "max_v", ")", "for", "x", "in", "range", "(", "N", ")", "]", "\n", "\n", "color_kernels", "=", "np", ".", "zeros", "(", "frame", ".", "shape", "[", ":", "2", "]", "+", "(", "3", ",", ")", ")", "\n", "\n", "cc", "=", "0", "\n", "for", "ii", "in", "range", "(", "kernel_val", ".", "shape", "[", "2", "]", ")", ":", "\n", "                    ", "for", "jj", "in", "range", "(", "kernel_val", ".", "shape", "[", "3", "]", ")", ":", "\n", "\n", "                        ", "if", "save_individual_frames", ":", "\n", "                            ", "axarr", "[", "ii", "]", "[", "jj", "]", ".", "imshow", "(", "kernel_val", "[", "video_idx", "]", "[", "tt", "]", "[", "ii", "]", "[", "jj", "]", ")", "\n", "", "curent_kernel", "=", "kernel_val", "[", "video_idx", "]", "[", "tt", "]", "[", "ii", "]", "[", "jj", "]", "\n", "curent_kernel_max", "=", "curent_kernel", ".", "max", "(", ")", "\n", "curent_kernel", "=", "curent_kernel", "/", "curent_kernel_max", "\n", "curent_kernel", "=", "(", "curent_kernel", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "curent_kernel", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "curent_kernel", ")", ".", "resize", "(", "(", "frame", ".", "shape", "[", "0", "]", ",", "frame", ".", "shape", "[", "1", "]", ")", ",", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ")", ")", "\n", "curent_kernel", "=", "curent_kernel", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "\n", "mask", "=", "(", "(", "curent_kernel", "/", "curent_kernel", ".", "max", "(", ")", ")", ">", "0.3", ")", "\n", "\n", "curent_kernel", "=", "curent_kernel", "\n", "\n", "color_kernels", "[", ":", ",", ":", ",", "0", "]", "=", "(", "1.0", "-", "mask", ")", "*", "color_kernels", "[", ":", ",", ":", ",", "0", "]", "+", "mask", "*", "HSV_tuples", "[", "cc", "]", "[", "0", "]", "\n", "color_kernels", "[", ":", ",", ":", ",", "1", "]", "=", "(", "1.0", "-", "mask", ")", "*", "color_kernels", "[", ":", ",", ":", ",", "1", "]", "+", "mask", "*", "HSV_tuples", "[", "cc", "]", "[", "1", "]", "\n", "color_kernels", "[", ":", ",", ":", ",", "2", "]", "=", "(", "1.0", "-", "mask", ")", "*", "color_kernels", "[", ":", ",", ":", ",", "2", "]", "+", "mask", "*", "curent_kernel", "*", "HSV_tuples", "[", "cc", "]", "[", "2", "]", "\n", "\n", "cc", "+=", "1", "\n", "\n", "", "", "if", "frame", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "# gray to rgb", "\n", "                    ", "frame", "=", "np", ".", "tile", "(", "frame", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "\n", "\n", "", "if", "target_offset", "and", "'layer1'", "not", "in", "placement", ":", "\n", "                    ", "frame_distill", "=", "frame", ".", "copy", "(", ")", "\n", "for", "ii", "in", "range", "(", "kernel_val", ".", "shape", "[", "2", "]", "*", "kernel_val", ".", "shape", "[", "3", "]", ")", ":", "\n", "                        ", "place", "=", "placement", ".", "replace", "(", "'layer'", ",", "''", ")", "\n", "layer", "=", "int", "(", "place", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "block", "=", "int", "(", "place", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "# TODO: un-hardcodat 224 ", "\n", "h", ",", "w", ",", "dh", ",", "dw", "=", "target_offset", "[", "f'layer{layer}_block{block}'", "]", "[", "video_idx", ",", "tt", ",", "ii", "]", "/", "kernel_val", ".", "shape", "[", "-", "1", "]", "*", "224", "\n", "frame_distill", "=", "draw_box", "(", "frame_distill", ",", "(", "h", ",", "w", ",", "dh", ",", "dw", ")", ")", "\n", "frame_distill", "=", "np", ".", "clip", "(", "frame_distill", ",", "0.0", ",", "1.0", ")", "\n", "", "", "rgb_color_kernels", "=", "colors", ".", "hsv_to_rgb", "(", "color_kernels", ")", "\n", "frame", "[", ":", ",", ":", "]", "+=", "1", "*", "rgb_color_kernels", "#10 * kernel_sum", "\n", "frame", "=", "np", ".", "clip", "(", "frame", ",", "0.0", ",", "1.0", ")", "\n", "\n", "if", "save_individual_frames", ":", "\n", "                    ", "plt", ".", "savefig", "(", "f'{folder_dir}/kernel_{video_idx}_{tt}.png'", ")", "\n", "f", ",", "axarr", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "axarr", ".", "imshow", "(", "frame", ")", "\n", "plt", ".", "savefig", "(", "f'{folder_dir}/frame_{video_idx}_{tt}.png'", ")", "\n", "if", "target_offset", "and", "'layer1'", "not", "in", "placement", ":", "\n", "                        ", "f", ",", "axarr", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "axarr", ".", "imshow", "(", "frame_distill", ")", "\n", "plt", ".", "savefig", "(", "f'{folder_dir}/z_distill_{video_idx}_{tt}.png'", ")", "\n", "", "", "plt", ".", "close", "(", "f", ")", "\n", "\n", "\n", "frame", "=", "(", "frame", "/", "frame", ".", "max", "(", ")", "*", "255.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "all_frames", ".", "append", "(", "frame", ")", "\n", "\n", "", "clip", "=", "ImageSequenceClip", "(", "list", "(", "all_frames", ")", ",", "fps", "=", "3", ")", "\n", "clip", ".", "write_gif", "(", "f'{folder_dir}/video_{video_idx}.gif'", ",", "fps", "=", "3", ")", "\n", "\n", "", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.draw_frames": [[299, 348], ["print", "int", "range", "matplotlib.close", "numpy.reshape", "numpy.transpose", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "matplotlib.rgb_to_hsv", "numpy.array", "numpy.clip", "matplotlib.subplots", "axarr.imshow", "matplotlib.savefig", "matplotlib.close"], "function", ["None"], ["", "", "def", "draw_frames", "(", "input", ",", "folder", ",", "ref_point", ",", "ref_dim", ",", "video_id", ",", "name", "=", "''", ")", ":", "\n", "    ", "print", "(", "input", ".", "shape", ")", "\n", "video_input_val", "=", "input", "\n", "if", "name", "==", "'crop'", ":", "\n", "        ", "video_input_val", "=", "np", ".", "reshape", "(", "video_input_val", ",", "[", "-", "1", ",", "3", ",", "video_input_val", ".", "shape", "[", "1", "]", ",", "video_input_val", ".", "shape", "[", "2", "]", "]", ")", "\n", "video_input_val", "=", "np", ".", "transpose", "(", "video_input_val", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "folder_dir", "=", "folder", "+", "f'/viz_kernel_tmp/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_dir", ")", "\n", "\n", "", "folder_dir", "=", "folder_dir", "+", "f'/'", "#'./viz_kernel_center/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_dir", ")", "\n", "", "tt", "=", "2", "\n", "\n", "video_idx", "=", "int", "(", "video_id", ")", "\n", "for", "tt", "in", "range", "(", "16", ")", ":", "\n", "        ", "frame", "=", "video_input_val", "[", "tt", ",", ":", ",", ":", "]", "\n", "if", "args", ".", "modality", "==", "'RGB'", "and", "name", "==", "'crop'", ":", "\n", "            ", "frame", "=", "frame", "*", "57.375", "+", "114.75", "\n", "frame", "=", "frame", "/", "255.0", "\n", "", "elif", "name", "==", "'crop'", ":", "\n", "            ", "frame", "=", "(", "frame", "+", "1.0", ")", "/", "2.0", "\n", "", "else", ":", "\n", "            ", "frame", "=", "frame", "/", "255.0", "\n", "\n", "", "frame_hsv", "=", "colors", ".", "rgb_to_hsv", "(", "frame", ")", "\n", "\n", "rgb", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "frame", "=", "np", ".", "clip", "(", "frame", ",", "0.0", ",", "1.0", ")", "\n", "# draw center", "\n", "frame", "[", "ref_point", "[", "0", "]", "-", "3", ":", "ref_point", "[", "0", "]", "+", "3", ",", "ref_point", "[", "1", "]", "-", "3", ":", "ref_point", "[", "1", "]", "+", "3", "]", "=", "(", "1.0", ",", "0.0", ",", "0.0", ")", "\n", "# draw box", "\n", "left", "=", "ref_point", "[", "1", "]", "-", "ref_dim", "[", "1", "]", "\n", "right", "=", "ref_point", "[", "1", "]", "+", "ref_dim", "[", "1", "]", "\n", "up", "=", "ref_point", "[", "0", "]", "-", "ref_dim", "[", "0", "]", "\n", "down", "=", "ref_point", "[", "0", "]", "+", "ref_dim", "[", "0", "]", "\n", "frame", "[", "up", "-", "1", ":", "up", "+", "1", ",", "left", ":", "right", "]", "=", "(", "0", ",", "1", ",", "0", ")", "\n", "frame", "[", "down", "-", "1", ":", "down", "+", "1", ",", "left", ":", "right", "]", "=", "(", "0", ",", "1", ",", "0", ")", "\n", "frame", "[", "up", ":", "down", ",", "left", "-", "1", ":", "left", "+", "1", "]", "=", "(", "0", ",", "1", ",", "0", ")", "\n", "frame", "[", "up", ":", "down", ",", "right", "-", "1", ":", "right", "+", "1", "]", "=", "(", "0", ",", "1", ",", "0", ")", "\n", "\n", "f", ",", "axarr", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "axarr", ".", "imshow", "(", "frame", ")", "\n", "plt", ".", "savefig", "(", "f'{folder_dir}/frame_{video_idx}_{tt}_{name}.png'", ")", "\n", "plt", ".", "close", "(", "f", ")", "\n", "", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.count_params": [[351, 371], ["None"], "function", ["None"], ["", "def", "count_params", "(", "params", ",", "contains", "=", "[", "''", "]", ",", "ignores", "=", "[", "'nonenone'", "]", ")", ":", "\n", "    ", "total_params", "=", "0", "\n", "for", "name", ",", "shape", "in", "params", ":", "\n", "# print(f'{name} shape: {shape}')", "\n", "        ", "ok", "=", "True", "\n", "for", "ignore_name", "in", "ignores", ":", "\n", "            ", "if", "ignore_name", "in", "name", ":", "\n", "                ", "ok", "=", "False", "\n", "", "", "if", "not", "ok", ":", "\n", "            ", "continue", "\n", "", "prod", "=", "1", "\n", "for", "d", "in", "shape", ":", "\n", "            ", "prod", "*=", "d", "\n", "", "selected_param", "=", "False", "\n", "for", "c", "in", "contains", ":", "\n", "            ", "if", "c", "in", "name", ":", "\n", "                ", "selected_param", "=", "True", "\n", "", "", "if", "selected_param", ":", "\n", "            ", "total_params", "+=", "prod", "\n", "", "", "return", "total_params", "\n", "", "def", "softmax", "(", "scores", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.softmax": [[371, 374], ["numpy.exp", "np.exp.sum", "scores.max"], "function", ["None"], ["", "def", "softmax", "(", "scores", ")", ":", "\n", "    ", "es", "=", "np", ".", "exp", "(", "scores", "-", "scores", ".", "max", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", ")", "\n", "return", "es", "/", "es", ".", "sum", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.accuracy": [[415, 431], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "# correct_k = correct[:k].view(-1).float().sum(0)", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.adjust_kernel": [[435, 491], ["numpy.reshape", "numpy.zeros_like", "time.time", "range", "time.time", "print", "range", "time.time", "numpy.array", "time.time", "np.array.sum", "numpy.array", "time.time", "numpy.arange", "time.time", "pred_kernel_val[].max", "PIL.Image.fromarray().resize", "np.array.astype", "np.array.sum", "int", "int", "int", "int", "numpy.array", "curent_kernel[].sum", "numpy.array", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "adjust_kernel", "(", "pred_kernel_val", ",", "pred_boxes", ")", ":", "\n", "# pred_kernel_val: (BT, 3, 3, 14, 14)", "\n", "# pred_boxes:  (BT, 9, 4) ([left_h, left_w, righ_h, right_w]))", "\n", "\n", "    ", "pred_kernel_val", "=", "np", ".", "reshape", "(", "pred_kernel_val", ",", "(", "pred_kernel_val", ".", "shape", "[", "0", "]", ",", "pred_kernel_val", ".", "shape", "[", "1", "]", "*", "pred_kernel_val", ".", "shape", "[", "2", "]", ",", "pred_kernel_val", ".", "shape", "[", "3", "]", ",", "pred_kernel_val", ".", "shape", "[", "4", "]", ")", ")", "\n", "all_adjust_kernel_boxes", "=", "np", ".", "zeros_like", "(", "pred_boxes", ")", "\n", "\n", "time1", "=", "time", ".", "time", "(", ")", "\n", "for", "b", "in", "range", "(", "pred_kernel_val", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "# kernel from 14x14 ->224x224", "\n", "            ", "curent_kernel", "=", "pred_kernel_val", "[", "b", ",", "i", "]", "/", "pred_kernel_val", "[", "b", ",", "i", "]", ".", "max", "(", ")", "\n", "curent_kernel", "=", "(", "curent_kernel", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "time5", "=", "time", ".", "time", "(", ")", "\n", "curent_kernel", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "curent_kernel", ")", ".", "resize", "(", "(", "224", ",", "224", ")", ",", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ")", ")", "\n", "time6", "=", "time", ".", "time", "(", ")", "\n", "# print(f'Resize time: {time6-time5}')", "\n", "curent_kernel", "=", "curent_kernel", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "curent_kernel", "=", "curent_kernel", "/", "curent_kernel", ".", "sum", "(", ")", "\n", "\n", "(", "left_h", ",", "left_w", ",", "right_h", ",", "right_w", ")", "=", "pred_boxes", "[", "b", ",", "i", "]", "\n", "h", "=", "right_h", "-", "left_h", "\n", "w", "=", "right_w", "-", "left_w", "\n", "# print(f'New frame h={h}, w={w}')", "\n", "prev_sums", "=", "curent_kernel", ".", "sum", "(", ")", "\n", "prev_adjust_kernel_boxes", "=", "np", ".", "array", "(", "[", "left_h", ",", "left_w", ",", "right_h", ",", "right_w", "]", ")", "\n", "prev_dx", "=", "0.0", "\n", "prev_dy", "=", "0.0", "\n", "time7", "=", "time", ".", "time", "(", ")", "\n", "for", "j", "in", "np", ".", "arange", "(", "0.01", ",", "1", ",", "0.01", ")", ":", "\n", "                ", "dx", "=", "j", "*", "(", "h", "/", "2", ")", "\n", "dy", "=", "j", "*", "(", "w", "/", "2", ")", "\n", "new_left_h", "=", "int", "(", "left_h", "+", "dx", ")", "\n", "new_left_w", "=", "int", "(", "left_w", "+", "dy", ")", "\n", "new_right_h", "=", "int", "(", "right_h", "-", "dx", ")", "\n", "new_right_w", "=", "int", "(", "right_w", "-", "dy", ")", "\n", "adjust_kernel_boxes", "=", "np", ".", "array", "(", "[", "new_left_h", ",", "new_left_w", ",", "new_right_h", ",", "new_right_w", "]", ")", "\n", "crt_sums", "=", "curent_kernel", "[", "new_left_h", ":", "new_right_h", "+", "1", ",", "new_left_w", ":", "new_right_w", "+", "1", "]", ".", "sum", "(", ")", "\n", "if", "crt_sums", "<", "0.90", "and", "prev_sums", ">=", "0.90", ":", "\n", "# print(prev_dx, prev_dy, prev_sums)", "\n", "# print(dx, dy, crt_sums)", "\n", "\n", "# print(f'[ {left_h}, {left_w}, {right_h}, {right_w}] -> [{new_left_h}, {new_left_w}, {new_right_h}, {new_right_w}]')", "\n", "                    ", "all_adjust_kernel_boxes", "[", "b", ",", "i", "]", "=", "prev_adjust_kernel_boxes", "\n", "break", "\n", "\n", "", "prev_sums", "=", "crt_sums", "\n", "prev_adjust_kernel_boxes", "=", "np", ".", "array", "(", "[", "new_left_h", ",", "new_left_w", ",", "new_right_h", ",", "new_right_w", "]", ")", "\n", "prev_dx", "=", "dx", "\n", "prev_dy", "=", "dy", "\n", "", "time8", "=", "time", ".", "time", "(", ")", "\n", "# print(f'find adjustment: {time8-time7}') ", "\n", "", "", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f'Adjust kernel: {time2-time1}'", ")", "\n", "return", "all_adjust_kernel_boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.__init__": [[24, 100], ["torch.nn.Module.__init__", "torch.nn.ModuleDict", "recurrent_net", "recurrent_net", "LayerNormAffineXC", "LayerNormAffineXC", "LayerNormAffineXC", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Identity", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Sequential", "torch.zeros", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "backbone_dim", "=", "1024", ",", "node_dim", "=", "512", ",", "project_i3d", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "RSTG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "backbone_dim", "=", "backbone_dim", "\n", "self", ".", "node_dim", "=", "node_dim", "\n", "self", ".", "number_iterations", "=", "3", "\n", "self", ".", "num_nodes", "=", "9", "\n", "self", ".", "project_i3d", "=", "project_i3d", "\n", "self", ".", "norm_dict", "=", "nn", ".", "ModuleDict", "(", "{", "}", ")", "\n", "\n", "# intern LSTM", "\n", "self", ".", "internal_lstm", "=", "recurrent_net", "(", "batch_first", "=", "True", ",", "\n", "input_size", "=", "self", ".", "node_dim", ",", "hidden_size", "=", "self", ".", "node_dim", ")", "\n", "# extern LSTM", "\n", "self", ".", "external_lstm", "=", "recurrent_net", "(", "batch_first", "=", "True", ",", "\n", "input_size", "=", "self", ".", "node_dim", ",", "hidden_size", "=", "self", ".", "node_dim", ")", "\n", "\n", "# send function", "\n", "if", "self", ".", "params", ".", "send_layers", "==", "1", ":", "\n", "                ", "self", ".", "send_mlp", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "node_dim", ",", "self", ".", "node_dim", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "elif", "self", ".", "params", ".", "send_layers", "==", "2", ":", "\n", "            ", "if", "self", ".", "params", ".", "combine_by_sum", ":", "\n", "                ", "comb_mult", "=", "1", "\n", "", "else", ":", "\n", "                ", "comb_mult", "=", "2", "\n", "", "self", ".", "send_mlp", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "comb_mult", "*", "self", ".", "node_dim", ",", "self", ".", "node_dim", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "node_dim", ",", "self", ".", "node_dim", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "# norm send ", "\n", "", "self", ".", "norm_dict", "[", "'send_message_norm'", "]", "=", "LayerNormAffineXC", "(", "\n", "self", ".", "node_dim", ",", "(", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ",", "self", ".", "node_dim", ")", "\n", ")", "\n", "self", ".", "norm_dict", "[", "'update_norm'", "]", "=", "LayerNormAffineXC", "(", "\n", "self", ".", "node_dim", ",", "(", "self", ".", "num_nodes", ",", "self", ".", "node_dim", ")", "\n", ")", "\n", "self", ".", "norm_dict", "[", "'before_graph_norm'", "]", "=", "LayerNormAffineXC", "(", "\n", "self", ".", "node_dim", ",", "(", "self", ".", "num_nodes", ",", "self", ".", "node_dim", ")", "\n", ")", "\n", "\n", "\n", "\n", "# attention function", "\n", "if", "'dot'", "in", "self", ".", "params", ".", "aggregation_type", ":", "\n", "            ", "self", ".", "att_q", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "node_dim", ",", "self", ".", "node_dim", ")", "\n", "self", ".", "att_k", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "node_dim", ",", "self", ".", "node_dim", ")", "\n", "# attention bias", "\n", "self", ".", "att_bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "size", "=", "[", "1", ",", "1", ",", "1", ",", "self", ".", "node_dim", "]", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "\n", "# update function", "\n", "", "if", "self", ".", "params", ".", "update_layers", "==", "0", ":", "\n", "            ", "self", ".", "update_mlp", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "self", ".", "params", ".", "update_layers", "==", "1", ":", "\n", "            ", "self", ".", "update_mlp", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "node_dim", ",", "self", ".", "node_dim", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "elif", "self", ".", "params", ".", "update_layers", "==", "2", ":", "\n", "            ", "if", "self", ".", "params", ".", "combine_by_sum", ":", "\n", "                ", "comb_mult", "=", "1", "\n", "", "else", ":", "\n", "                ", "comb_mult", "=", "2", "\n", "", "self", ".", "update_mlp", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "comb_mult", "*", "self", ".", "node_dim", ",", "self", ".", "node_dim", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "node_dim", ",", "self", ".", "node_dim", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.get_norm": [[102, 118], ["norm", "len", "input.permute().contiguous.permute().contiguous.permute().contiguous", "len", "input.permute().contiguous.permute().contiguous.permute().contiguous", "input.permute().contiguous.permute().contiguous.size", "len", "input.permute().contiguous.permute().contiguous.permute().contiguous", "input.permute().contiguous.permute().contiguous.size", "len", "input.permute().contiguous.permute().contiguous.permute().contiguous", "input.permute().contiguous.permute().contiguous.permute", "input.permute().contiguous.permute().contiguous.size", "input.permute().contiguous.permute().contiguous.permute", "input.permute().contiguous.permute().contiguous.size", "input.permute().contiguous.permute().contiguous.permute", "input.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "", "def", "get_norm", "(", "self", ",", "input", ",", "name", ",", "zero_init", "=", "False", ")", ":", "\n", "# input: B x N x T x C ", "\n", "#     or B x N x N x T x C", "\n", "        ", "if", "len", "(", "input", ".", "size", "(", ")", ")", "==", "5", ":", "\n", "            ", "input", "=", "input", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "", "elif", "len", "(", "input", ".", "size", "(", ")", ")", "==", "4", ":", "\n", "            ", "input", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "norm", "=", "self", ".", "norm_dict", "[", "name", "]", "\n", "\n", "input", "=", "norm", "(", "input", ")", "\n", "if", "len", "(", "input", ".", "size", "(", ")", ")", "==", "5", ":", "\n", "            ", "input", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "", "elif", "len", "(", "input", ".", "size", "(", ")", ")", "==", "4", ":", "\n", "            ", "input", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.send_messages": [[119, 136], ["nodes.unsqueeze", "nodes.unsqueeze", "nodes1.repeat.repeat.repeat", "nodes2.repeat.repeat.repeat", "rstg.RSTG.send_mlp", "rstg.RSTG.get_norm", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm"], ["", "def", "send_messages", "(", "self", ",", "nodes", ")", ":", "\n", "# nodes: B x N x T x C", "\n", "# nodes1: B x 1 x N x T x C", "\n", "# nodes2: B x N x 1 x T x C", "\n", "        ", "nodes1", "=", "nodes", ".", "unsqueeze", "(", "1", ")", "\n", "nodes2", "=", "nodes", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "nodes1", "=", "nodes1", ".", "repeat", "(", "1", ",", "self", ".", "num_nodes", ",", "1", ",", "1", ",", "1", ")", "\n", "nodes2", "=", "nodes2", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "num_nodes", ",", "1", ",", "1", ")", "\n", "# B x N x N x T x 2C", "\n", "if", "self", ".", "params", ".", "combine_by_sum", ":", "\n", "            ", "messages", "=", "nodes1", "+", "nodes2", "\n", "", "else", ":", "\n", "            ", "messages", "=", "torch", ".", "cat", "(", "(", "nodes1", ",", "nodes2", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "messages", "=", "self", ".", "send_mlp", "(", "messages", ")", "\n", "messages", "=", "self", ".", "get_norm", "(", "messages", ",", "'send_message_norm'", ")", "\n", "return", "messages", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.aggregate": [[137, 142], ["rstg.RSTG.sum_aggregate", "rstg.RSTG.dot_attention"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.sum_aggregate", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.dot_attention"], ["", "def", "aggregate", "(", "self", ",", "nodes", ",", "messages", ")", ":", "\n", "        ", "if", "'sum'", "in", "self", ".", "params", ".", "aggregation_type", ":", "\n", "            ", "return", "self", ".", "sum_aggregate", "(", "messages", ")", "\n", "", "elif", "'dot'", "in", "self", ".", "params", ".", "aggregation_type", ":", "\n", "            ", "return", "self", ".", "dot_attention", "(", "nodes", ",", "messages", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.sum_aggregate": [[143, 147], ["messages.mean"], "methods", ["None"], ["", "", "def", "sum_aggregate", "(", "self", ",", "messages", ")", ":", "\n", "# nodes:    B x N x T x C", "\n", "# messages: B x NxN x T x C", "\n", "        ", "return", "messages", ".", "mean", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.dot_attention": [[148, 171], ["rstg.RSTG.att_q", "rstg.RSTG.att_k", "nodes_q.permute.permute.permute", "nodes_k.permute.permute.permute", "torch.matmul().unsqueeze", "corr.permute.permute.permute", "torch.nn.functional.relu.sum", "torch.nn.functional.relu", "torch.nn.functional.softmax", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.utils.softmax"], ["", "def", "dot_attention", "(", "self", ",", "nodes", ",", "messages", ")", ":", "\n", "# nodes:    B x N x T x C", "\n", "# messages: B x NxN x T x C", "\n", "\n", "# nodes1: B x N x 1 x T x C", "\n", "# nodes2: B x 1 x N x T x C", "\n", "# corr B x N x N x T", "\n", "\n", "        ", "nodes_q", "=", "self", ".", "att_q", "(", "nodes", ")", "\n", "nodes_k", "=", "self", ".", "att_k", "(", "nodes", ")", "\n", "\n", "nodes_q", "=", "nodes_q", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "nodes_k", "=", "nodes_k", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "corr", "=", "torch", ".", "matmul", "(", "nodes_q", ",", "nodes_k", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "corr", "=", "corr", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ",", "4", ")", "\n", "\n", "nodes", "=", "F", ".", "softmax", "(", "corr", ",", "dim", "=", "2", ")", "*", "messages", "\n", "nodes", "=", "nodes", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "nodes", "=", "nodes", "+", "self", ".", "att_bias", "\n", "nodes", "=", "F", ".", "relu", "(", "nodes", ")", "\n", "return", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.update_nodes": [[172, 180], ["rstg.RSTG.update_mlp", "rstg.RSTG.get_norm", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm"], ["", "def", "update_nodes", "(", "self", ",", "nodes", ",", "aggregated", ")", ":", "\n", "        ", "if", "self", ".", "params", ".", "combine_by_sum", ":", "\n", "            ", "upd_input", "=", "nodes", "+", "aggregated", "\n", "", "else", ":", "\n", "            ", "upd_input", "=", "torch", ".", "cat", "(", "(", "nodes", ",", "aggregated", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "nodes", "=", "self", ".", "update_mlp", "(", "upd_input", ")", "\n", "nodes", "=", "self", ".", "get_norm", "(", "nodes", ",", "'update_norm'", ")", "\n", "return", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.forward": [[181, 222], ["input.permute", "rstg.RSTG.get_norm", "range", "nodes.view.view.view", "rstg.RSTG.external_lstm.flatten_parameters", "rstg.RSTG.external_lstm", "nodes.view.view.view", "nodes.view.view.permute().contiguous", "rstg.RSTG.send_messages", "rstg.RSTG.aggregate", "rstg.RSTG.update_nodes", "nodes.view.view.view", "rstg.RSTG.internal_lstm.flatten_parameters", "rstg.RSTG.internal_lstm", "nodes.view.view.view", "nodes.view.view.permute"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.send_messages", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.aggregate", "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.rstg.RSTG.update_nodes"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "B", "=", "input", ".", "shape", "[", "0", "]", "\n", "self", ".", "T", "=", "input", ".", "shape", "[", "1", "]", "\n", "\n", "# input RSTG: B x T x C x H x W", "\n", "# set input: ... -> B x T x C x N", "\n", "\n", "# for LSTM we need (B * N) x T x C", "\n", "# propagation: B x 1 x N x T x C ", "\n", "#   + B x N x 1 x T x C", "\n", "#    (B x N*N x T) x C => liniar", "\n", "# nodes: B x N x T x C", "\n", "nodes", "=", "input", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "nodes", "=", "self", ".", "get_norm", "(", "nodes", ",", "'before_graph_norm'", ")", "\n", "time_iter_mom", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "\n", "for", "space_iter", "in", "range", "(", "self", ".", "number_iterations", ")", ":", "\n", "# internal time processing", "\n", "            ", "if", "space_iter", "in", "time_iter_mom", ":", "\n", "                ", "nodes", "=", "nodes", ".", "view", "(", "self", ".", "B", "*", "self", ".", "num_nodes", ",", "self", ".", "T", ",", "self", ".", "node_dim", ")", "\n", "self", ".", "internal_lstm", ".", "flatten_parameters", "(", ")", "\n", "nodes", ",", "_", "=", "self", ".", "internal_lstm", "(", "nodes", ")", "\n", "nodes", "=", "nodes", ".", "view", "(", "self", ".", "B", ",", "self", ".", "num_nodes", ",", "self", ".", "T", ",", "self", ".", "node_dim", ")", "\n", "\n", "# space_processing: send, aggregate, update", "\n", "", "messages", "=", "self", ".", "send_messages", "(", "nodes", ")", "\n", "aggregated", "=", "self", ".", "aggregate", "(", "nodes", ",", "messages", ")", "\n", "nodes", "=", "self", ".", "update_nodes", "(", "nodes", ",", "aggregated", ")", "\n", "\n", "# external time processing", "\n", "", "nodes", "=", "nodes", ".", "view", "(", "self", ".", "B", "*", "self", ".", "num_nodes", ",", "self", ".", "T", ",", "self", ".", "node_dim", ")", "\n", "self", ".", "external_lstm", ".", "flatten_parameters", "(", ")", "\n", "nodes", ",", "_", "=", "self", ".", "external_lstm", "(", "nodes", ")", "\n", "nodes", "=", "nodes", ".", "view", "(", "self", ".", "B", ",", "self", ".", "num_nodes", ",", "self", ".", "T", ",", "self", ".", "node_dim", ")", "\n", "\n", "\n", "# B x N x T x C -> B x T x C x N", "\n", "nodes", "=", "nodes", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "nodes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.RandomDataset.__init__": [[74, 77], ["torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "length", ")", ":", "\n", "        ", "self", ".", "len", "=", "length", "\n", "self", ".", "data", "=", "torch", ".", "randn", "(", "length", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.RandomDataset.__getitem__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.RandomDataset.__len__": [[81, 83], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.LayerNormAffine.__init__": [[103, 119], ["torch.Module.__init__", "torch.LayerNorm().to", "torch.LayerNorm().to", "torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.LayerNorm", "torch.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input", ",", "size", "=", "128", ")", ":", "\n", "        ", "super", "(", "LayerNormAffine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "128", ",", "elementwise_affine", "=", "False", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "# nn.init.constant_(self.norm.weight, 0)", "\n", "# nn.init.constant_(self.norm.bias, 0)", "\n", "\n", "self", ".", "scale", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "1", ",", "1", ",", "1", ",", "size", "]", ")", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "1", ",", "1", ",", "1", ",", "size", "]", ")", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "\n", "# pdb.set_trace()", "\n", "# self.norm = self.norm.to(input.device)", "\n", "# self.scale = scale.to(input.device)", "\n", "# self.bias = bias.to(input.device)", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "scale", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.LayerNormAffine.forward": [[123, 129], ["nested_model.LayerNormAffine.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# input = self.norm(input) * self.params['scale'] + self.params['bias']", "\n", "        ", "input", "=", "self", ".", "norm", "(", "input", ")", "*", "self", ".", "scale", "+", "self", ".", "bias", "\n", "\n", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.__init__": [[134, 142], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleList", "torch.ModuleList", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.constant_", "torch.init.constant_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", "Model2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "ch_dim", ",", "ch_dim", ")", "\n", "self", ".", "norm_dict", "=", "nn", ".", "ModuleDict", "(", "{", "}", ")", "\n", "self", ".", "module_norm_dict", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "model2_bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "1", ",", "1", ",", "1", ",", "128", "]", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "model2_bias", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm": [[146, 162], ["torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.constant_", "torch.init.constant_", "nested_model.LayerNormAffine", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "get_norm", "(", "self", ",", "input", ",", "name", ",", "zero_init", "=", "False", ")", ":", "\n", "# input: B * T x C x H x W", "\n", "\n", "        ", "if", "name", "not", "in", "self", ".", "norm_dict", ":", "\n", "            ", "self", ".", "model2_asdasdiasdadksa", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "[", "1", ",", "1", ",", "1", ",", "128", "]", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "model2_asdasdiasdadksa", ",", "1", ")", "\n", "\n", "\n", "norm", "=", "LayerNormAffine", "(", "input", ")", "\n", "self", ".", "norm_dict", "[", "name", "]", "=", "norm", "\n", "# print(self)", "\n", "", "else", ":", "\n", "            ", "norm", "=", "self", ".", "norm_dict", "[", "name", "]", "\n", "\n", "", "input", "=", "self", ".", "norm_dict", "[", "name", "]", "(", "input", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.forward": [[163, 173], ["pdb.set_trace", "nested_model.Model2.get_norm", "nested_model.Model2.fc", "print", "nested_model.Model2.size", "nested_model.Model2.size"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model2.get_norm"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "pdb", ".", "set_trace", "(", ")", "\n", "input", "=", "self", ".", "get_norm", "(", "input", ",", "'norm1'", ")", "\n", "input", "=", "input", "+", "self", ".", "model2_bias", "\n", "\n", "output", "=", "self", ".", "fc", "(", "input", ")", "\n", "print", "(", "\"\\tIn Model2: input size\"", ",", "input", ".", "size", "(", ")", ",", "\n", "\"output size\"", ",", "output", ".", "size", "(", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__": [[178, 182], ["torch.Module.__init__", "nested_model.Model2", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model2", "=", "Model2", "(", "input_size", ",", "ch_dim", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "ch_dim", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bit-ml_dyreg-gnn.ops.nested_model.Model.forward": [[183, 197], ["nested_model.Model.model2", "nested_model.Model.fc", "print", "model.named_parameters", "print", "print", "print", "nested_model.Model.size", "nested_model.Model.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "self", ".", "model2", "(", "input", ")", "\n", "output", "=", "self", ".", "fc", "(", "input", ")", "\n", "print", "(", "f\"Forward model: {self}\"", ")", "\n", "# print(f'Model parameters: {self.parameters()}')", "\n", "#for p in self.parameters():", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "print", "(", "f'param: {name}'", ")", "\n", "print", "(", "f'param: {param.device}'", ")", "\n", "\n", "", "print", "(", "\"\\tIn Model: input size\"", ",", "input", ".", "size", "(", ")", ",", "\n", "\"output size\"", ",", "output", ".", "size", "(", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]]}