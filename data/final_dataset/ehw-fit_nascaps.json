{"home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.dcapscell_layer.DCapsCellLayer.__init__": [[14, 26], ["generic_layer.GenericLayer.__init__", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sa_rows", ",", "sa_cols", ",", "pe_width", ",", "pe_stages", ",", "\n", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "outsize", ",", "\n", "outchannels", ",", "outcapsules", ",", "period", "=", "2", ",", "pe_out_bw", "=", "25", ")", ":", "\n", "        ", "generic_layer", ".", "GenericLayer", ".", "__init__", "(", "self", ",", "sa_rows", "=", "sa_rows", ",", "sa_cols", "=", "sa_cols", ",", "pe_width", "=", "pe_width", ",", "pe_stages", "=", "pe_stages", ",", "period", "=", "period", ",", "pe_out_bw", "=", "pe_out_bw", ")", "\n", "raise", "NotImplementedError", "(", "\"invalid implementation\"", ")", "\n", "self", ".", "insize", "=", "insize", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "incapsules", "=", "incapsules", "\n", "self", ".", "kernsize", "=", "kernsize", "\n", "self", ".", "outsize", "=", "outsize", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "outcapsules", "=", "outcapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.dcapscell_layer.DCapsCellLayer.get_memory": [[27, 30], ["sum_update_layer.sum_update_layer.sum_update_layer.get_memory"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_memory"], ["", "def", "get_memory", "(", "self", ")", ":", "#memory footprint", "\n", "        ", "ret_mem", "=", "6", "*", "sum_update_layer", ".", "get_memory", "(", "self", ")", "\n", "return", "ret_mem", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.dcapscell_layer.DCapsCellLayer.get_cycles": [[31, 34], ["sum_update_layer.sum_update_layer.sum_update_layer.get_cycles"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles"], ["", "def", "get_cycles", "(", "self", ")", ":", "#latency", "\n", "        ", "ret_cycles", "=", "6", "*", "sum_update_layer", ".", "get_cycles", "(", "self", ")", "\n", "return", "ret_cycles", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.dcapscell_layer.DCapsCellLayer.get_sums_per_out": [[35, 37], ["sum_update_layer.sum_update_layer.sum_update_layer.get_sums_per_out"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_sums_per_out"], ["", "def", "get_sums_per_out", "(", "self", ")", ":", "\n", "        ", "return", "6", "*", "sum_update_layer", ".", "get_sums_per_out", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.dcapscell_layer.DCapsCellLayer.get_data_per_weight": [[38, 40], ["sum_update_layer.sum_update_layer.sum_update_layer.get_data_per_weight"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_data_per_weight"], ["", "def", "get_data_per_weight", "(", "self", ")", ":", "\n", "        ", "return", "6", "*", "sum_update_layer", ".", "get_data_per_weight", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.dcapscell_layer.DCapsCellLayer.__str__": [[42, 57], ["map"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"DCapsCellLayer(%s)\"", "%", "\",\"", ".", "join", "(", "map", "(", "str", ",", "[", "\n", "self", ".", "sa_rows", ",", "\n", "self", ".", "sa_cols", ",", "\n", "self", ".", "pe_width", ",", "\n", "self", ".", "pe_stages", ",", "\n", "self", ".", "insize", ",", "\n", "self", ".", "inchannels", ",", "\n", "self", ".", "incapsules", ",", "\n", "self", ".", "kernsize", ",", "\n", "self", ".", "outsize", ",", "\n", "self", ".", "outchannels", ",", "\n", "self", ".", "outcapsules", ",", "\n", "self", ".", "period", ",", "\n", "self", ".", "pe_out_bw", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.conv_layer.ConvLayer.__init__": [[6, 19], ["generic_layer.GenericLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sa_rows", ",", "sa_cols", ",", "pe_width", ",", "pe_stages", ",", "\n", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "\n", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ",", "period", "=", "2", ",", "pe_out_bw", "=", "25", ")", ":", "\n", "\n", "        ", "generic_layer", ".", "GenericLayer", ".", "__init__", "(", "self", ",", "sa_rows", "=", "sa_rows", ",", "sa_cols", "=", "sa_cols", ",", "pe_width", "=", "pe_width", ",", "pe_stages", "=", "pe_stages", ",", "period", "=", "period", ",", "pe_out_bw", "=", "pe_out_bw", ")", "\n", "\n", "self", ".", "insize", "=", "insize", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "incapsules", "=", "incapsules", "\n", "self", ".", "kernsize", "=", "kernsize", "\n", "self", ".", "outsize", "=", "outsize", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "outcapsules", "=", "outcapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.conv_layer.ConvLayer.get_memory": [[20, 23], ["None"], "methods", ["None"], ["", "def", "get_memory", "(", "self", ")", ":", "\n", "        ", "kern2", "=", "self", ".", "kernsize", "*", "self", ".", "kernsize", "\n", "return", "(", "self", ".", "inchannels", "*", "kern2", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "# weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.conv_layer.ConvLayer.get_cycles": [[24, 36], ["math.ceil", "min"], "methods", ["None"], ["", "def", "get_cycles", "(", "self", ")", ":", "\n", "\n", "#out_data = self.outsize*self.outsize*self.outchannels*self.outcapsules # L2 unused", "\n", "        ", "kern2", "=", "self", ".", "kernsize", "*", "self", ".", "kernsize", "\n", "\n", "weights", "=", "(", "self", ".", "inchannels", "*", "kern2", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "# weights", "\n", "sums_per_out", "=", "(", "kern2", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# sums_per_out", "\n", "data_per_weight", "=", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# data_per_weight", "\n", "w_load_cycles", "=", "self", ".", "sa_rows", "+", "self", ".", "pe_stages", "-", "1", "# w_load_cycles", "\n", "w_loads", "=", "math", ".", "ceil", "(", "weights", "/", "self", ".", "sa_cols", "/", "min", "(", "(", "self", ".", "sa_rows", "*", "self", ".", "pe_width", ")", ",", "sums_per_out", ")", ")", "# w_loads", "\n", "cycles", "=", "w_load_cycles", "*", "w_loads", "+", "data_per_weight", "\n", "return", "cycles", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.conv_layer.ConvLayer.get_sums_per_out": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get_sums_per_out", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.conv_layer.ConvLayer.get_data_per_weight": [[40, 42], ["None"], "methods", ["None"], ["", "def", "get_data_per_weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.conv_layer.ConvLayer.__str__": [[43, 58], ["map"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"ConvLayer(%s)\"", "%", "\",\"", ".", "join", "(", "map", "(", "str", ",", "[", "\n", "self", ".", "sa_rows", ",", "\n", "self", ".", "sa_cols", ",", "\n", "self", ".", "pe_width", ",", "\n", "self", ".", "pe_stages", ",", "\n", "self", ".", "insize", ",", "\n", "self", ".", "inchannels", ",", "\n", "self", ".", "incapsules", ",", "\n", "self", ".", "kernsize", ",", "\n", "self", ".", "outsize", ",", "\n", "self", ".", "outchannels", ",", "\n", "self", ".", "outcapsules", ",", "\n", "self", ".", "period", ",", "\n", "self", ".", "pe_out_bw", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.capscell_layer.CapsCellLayer.__init__": [[7, 21], ["generic_layer.GenericLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sa_rows", ",", "sa_cols", ",", "pe_width", ",", "pe_stages", ",", "\n", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "outsize", ",", "\n", "outchannels", ",", "outcapsules", ",", "threedskip", ",", "period", "=", "2", ",", "pe_out_bw", "=", "25", ")", ":", "\n", "\n", "        ", "generic_layer", ".", "GenericLayer", ".", "__init__", "(", "self", ",", "sa_rows", "=", "sa_rows", ",", "sa_cols", "=", "sa_cols", ",", "pe_width", "=", "pe_width", ",", "pe_stages", "=", "pe_stages", ",", "period", "=", "period", ",", "pe_out_bw", "=", "pe_out_bw", ")", "\n", "\n", "self", ".", "insize", "=", "insize", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "incapsules", "=", "incapsules", "\n", "self", ".", "kernsize", "=", "kernsize", "\n", "self", ".", "outsize", "=", "outsize", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "outcapsules", "=", "outcapsules", "\n", "self", ".", "threedskip", "=", "threedskip", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.capscell_layer.CapsCellLayer.get_memory": [[22, 28], ["caps_layer.caps_layer.caps_layer.get_memory", "convcaps3d_layer.convcaps3d_layer.convcaps3d_layer.get_memory", "caps_layer.caps_layer.caps_layer.get_memory"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_memory", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_memory", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_memory"], ["", "def", "get_memory", "(", "self", ")", ":", "#memory footprint", "\n", "        ", "if", "self", ".", "threedskip", "==", "0", ":", "\n", "            ", "ret_mem", "=", "4", "*", "caps_layer", ".", "get_memory", "(", "self", ")", "\n", "", "elif", "self", ".", "threedskip", "==", "1", ":", "\n", "            ", "ret_mem", "=", "3", "*", "caps_layer", ".", "get_memory", "(", "self", ")", "+", "convcaps3d_layer", ".", "get_memory", "(", "self", ")", "\n", "", "return", "ret_mem", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.capscell_layer.CapsCellLayer.get_cycles": [[29, 35], ["caps_layer.caps_layer.caps_layer.get_cycles", "max", "convcaps3d_layer.convcaps3d_layer.convcaps3d_layer.get_cycles", "caps_layer.caps_layer.caps_layer.get_cycles"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles"], ["", "def", "get_cycles", "(", "self", ")", ":", "#latency", "\n", "        ", "if", "self", ".", "threedskip", "==", "0", ":", "\n", "            ", "ret_cycles", "=", "3", "*", "caps_layer", ".", "get_cycles", "(", "self", ")", "\n", "", "elif", "self", ".", "threedskip", "==", "1", ":", "\n", "            ", "ret_cycles", "=", "max", "(", "3", "*", "caps_layer", ".", "get_cycles", "(", "self", ")", ",", "convcaps3d_layer", ".", "get_cycles", "(", "self", ")", ")", "\n", "", "return", "ret_cycles", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.capscell_layer.CapsCellLayer.get_sums_per_out": [[36, 42], ["caps_layer.caps_layer.caps_layer.get_sums_per_out", "convcaps3d_layer.convcaps3d_layer.convcaps3d_layer.get_sums_per_out", "caps_layer.caps_layer.caps_layer.get_sums_per_out"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_sums_per_out", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_sums_per_out", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_sums_per_out"], ["", "def", "get_sums_per_out", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "threedskip", "==", "0", ":", "\n", "            ", "ret_spo", "=", "3", "*", "caps_layer", ".", "get_sums_per_out", "(", "self", ")", "\n", "", "elif", "self", ".", "threedskip", "==", "1", ":", "\n", "            ", "ret_spo", "=", "3", "*", "caps_layer", ".", "get_sums_per_out", "(", "self", ")", "+", "convcaps3d_layer", ".", "get_sums_per_out", "(", "self", ")", "\n", "", "return", "ret_spo", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.capscell_layer.CapsCellLayer.get_data_per_weight": [[43, 49], ["caps_layer.caps_layer.caps_layer.get_data_per_weight", "convcaps3d_layer.convcaps3d_layer.convcaps3d_layer.get_data_per_weight", "caps_layer.caps_layer.caps_layer.get_data_per_weight"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_data_per_weight", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_data_per_weight", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_data_per_weight"], ["", "def", "get_data_per_weight", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "threedskip", "==", "0", ":", "\n", "            ", "ret_dpw", "=", "3", "*", "caps_layer", ".", "get_data_per_weight", "(", "self", ")", "\n", "", "elif", "self", ".", "threedskip", "==", "1", ":", "\n", "            ", "ret_dpw", "=", "3", "*", "caps_layer", ".", "get_data_per_weight", "(", "self", ")", "+", "convcaps3d_layer", ".", "get_data_per_weight", "(", "self", ")", "\n", "", "return", "ret_dpw", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.capscell_layer.CapsCellLayer.__str__": [[50, 65], ["map"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"CapsCellLayer(%s)\"", "%", "\",\"", ".", "join", "(", "map", "(", "str", ",", "[", "\n", "self", ".", "sa_rows", ",", "\n", "self", ".", "sa_cols", ",", "\n", "self", ".", "pe_width", ",", "\n", "self", ".", "pe_stages", ",", "\n", "self", ".", "insize", ",", "\n", "self", ".", "inchannels", ",", "\n", "self", ".", "incapsules", ",", "\n", "self", ".", "kernsize", ",", "\n", "self", ".", "outsize", ",", "\n", "self", ".", "outchannels", ",", "\n", "self", ".", "outcapsules", ",", "\n", "self", ".", "period", ",", "\n", "self", ".", "pe_out_bw", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.class_layer.ClassLayer.__init__": [[6, 19], ["generic_layer.GenericLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sa_rows", ",", "sa_cols", ",", "pe_width", ",", "pe_stages", ",", "\n", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "outsize", ",", "\n", "outchannels", ",", "outcapsules", ",", "period", "=", "2", ",", "pe_out_bw", "=", "25", ")", ":", "\n", "\n", "        ", "generic_layer", ".", "GenericLayer", ".", "__init__", "(", "self", ",", "sa_rows", "=", "sa_rows", ",", "sa_cols", "=", "sa_cols", ",", "pe_width", "=", "pe_width", ",", "pe_stages", "=", "pe_stages", ",", "period", "=", "period", ",", "pe_out_bw", "=", "pe_out_bw", ")", "\n", "\n", "self", ".", "insize", "=", "insize", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "incapsules", "=", "incapsules", "\n", "self", ".", "kernsize", "=", "kernsize", "\n", "self", ".", "outsize", "=", "outsize", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "outcapsules", "=", "outcapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.class_layer.ClassLayer.get_memory": [[20, 22], ["None"], "methods", ["None"], ["", "def", "get_memory", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "# weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.class_layer.ClassLayer.get_cycles": [[23, 32], ["math.ceil", "min"], "methods", ["None"], ["", "def", "get_cycles", "(", "self", ")", ":", "\n", "        ", "out_data", "=", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "# L2", "\n", "weights", "=", "(", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "# weights", "\n", "sums_per_out", "=", "(", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# sums_per_out", "\n", "data_per_weight", "=", "1", "# data_per_weight", "\n", "w_load_cycles", "=", "self", ".", "sa_rows", "+", "self", ".", "pe_stages", "-", "1", "# w_load_cycles", "\n", "w_loads", "=", "math", ".", "ceil", "(", "weights", "/", "self", ".", "sa_cols", "/", "min", "(", "(", "self", ".", "sa_rows", "*", "self", ".", "pe_width", ")", ",", "sums_per_out", ")", ")", "# w_loads", "\n", "cycles", "=", "w_load_cycles", "*", "w_loads", "+", "data_per_weight", "\n", "return", "cycles", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.class_layer.ClassLayer.get_sums_per_out": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_sums_per_out", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# sums_per_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.class_layer.ClassLayer.get_data_per_weight": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get_data_per_weight", "(", "self", ")", ":", "\n", "        ", "return", "1", "# data_per_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.class_layer.ClassLayer.__str__": [[41, 56], ["map"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"ClassLayer(%s)\"", "%", "\",\"", ".", "join", "(", "map", "(", "str", ",", "[", "\n", "self", ".", "sa_rows", ",", "\n", "self", ".", "sa_cols", ",", "\n", "self", ".", "pe_width", ",", "\n", "self", ".", "pe_stages", ",", "\n", "self", ".", "insize", ",", "\n", "self", ".", "inchannels", ",", "\n", "self", ".", "incapsules", ",", "\n", "self", ".", "kernsize", ",", "\n", "self", ".", "outsize", ",", "\n", "self", ".", "outchannels", ",", "\n", "self", ".", "outcapsules", ",", "\n", "self", ".", "period", ",", "\n", "self", ".", "pe_out_bw", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.__init__": [[9, 20], ["json.load", "gzip.open", "os.path.join", "os.path.dirname", "os.path.realpath"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sa_rows", ",", "sa_cols", ",", "pe_width", ",", "pe_stages", ",", "period", ",", "pe_out_bw", "=", "25", ")", ":", "\n", "\n", "        ", "self", ".", "sa_rows", "=", "sa_rows", "\n", "self", ".", "sa_cols", "=", "sa_cols", "\n", "self", ".", "pe_width", "=", "pe_width", "\n", "self", ".", "pe_stages", "=", "pe_stages", "\n", "self", ".", "period", "=", "period", "\n", "self", ".", "pe_out_bw", "=", "pe_out_bw", "\n", "\n", "if", "not", "self", ".", "memtable", ":", "\n", "            ", "self", ".", "memtable", "=", "json", ".", "load", "(", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "\"../data/mem.json.gz\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_cycles": [[22, 24], ["NotImplemented"], "methods", ["None"], ["", "", "def", "get_cycles", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "(", "\"This function is implemented in special layers types\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_config_": [[25, 60], ["filter", "list", "json.load", "len", "KeyError", "len", "print", "KeyError", "gzip.open", "list", "list", "list", "os.path.join", "filter", "filter", "filter", "str", "str", "os.path.dirname", "os.path.realpath"], "methods", ["None"], ["", "def", "get_config_", "(", "self", ")", ":", "\n", "# find the value in the table", "\n", "        ", "if", "not", "GenericLayer", ".", "systable", ":", "\n", "            ", "d", "=", "json", ".", "load", "(", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "\"../data/pe.json.gz\"", ")", ")", ")", "\n", "GenericLayer", ".", "systable", "=", "[", "d", "[", "x", "]", "for", "x", "in", "d", "if", "\"_same\"", "not", "in", "x", "]", "\n", "\n", "", "period", "=", "self", ".", "period", "*", "1", "\n", "\n", "if", "period", "not", "in", "GenericLayer", ".", "parsed", ":", "\n", "            ", "GenericLayer", ".", "parsed", "[", "period", "]", "=", "{", "\n", "\"__all__\"", ":", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "\"period\"", "]", "==", "period", ",", "GenericLayer", ".", "systable", ")", ")", "\n", "}", "\n", "\n", "", "if", "self", ".", "pe_out_bw", "not", "in", "GenericLayer", ".", "parsed", "[", "period", "]", ":", "\n", "             ", "GenericLayer", ".", "parsed", "[", "period", "]", "[", "self", ".", "pe_out_bw", "]", "=", "{", "\n", "\"__all__\"", ":", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "\"nout\"", "]", "==", "self", ".", "pe_out_bw", ",", "GenericLayer", ".", "parsed", "[", "period", "]", "[", "\"__all__\"", "]", ")", ")", "\n", "}", "\n", "\n", "", "if", "self", ".", "pe_stages", "not", "in", "GenericLayer", ".", "parsed", "[", "period", "]", "[", "self", ".", "pe_out_bw", "]", ":", "\n", "             ", "GenericLayer", ".", "parsed", "[", "period", "]", "[", "self", ".", "pe_out_bw", "]", "[", "self", ".", "pe_stages", "]", "=", "{", "\n", "\"__all__\"", ":", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "\"stages\"", "]", "==", "self", ".", "pe_stages", ",", "GenericLayer", ".", "parsed", "[", "period", "]", "[", "self", ".", "pe_out_bw", "]", "[", "\"__all__\"", "]", ")", ")", "\n", "}", "\n", "# find the selected item in the data", "\n", "", "data", "=", "filter", "(", "lambda", "x", ":", "x", "[", "\"ninputs\"", "]", "==", "self", ".", "pe_width", ",", "GenericLayer", ".", "parsed", "[", "period", "]", "[", "self", ".", "pe_out_bw", "]", "[", "self", ".", "pe_stages", "]", "[", "\"__all__\"", "]", ")", "\n", "data", "=", "list", "(", "data", ")", "\n", "\n", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "            ", "raise", "KeyError", "(", "\"Configuration of %s was not found in the table\"", "%", "(", "str", "(", "self", ")", ")", ")", "\n", "\n", "\n", "", "if", "len", "(", "data", ")", ">", "1", ":", "\n", "            ", "print", "(", "data", ")", "\n", "raise", "KeyError", "(", "\"Multiple configurations of %s was found in the table\"", "%", "(", "str", "(", "self", ")", ")", ")", "\n", "\n", "", "return", "data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_power_pe_": [[61, 66], ["float", "generic_layer.GenericLayer.get_config_"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_config_"], ["", "def", "get_power_pe_", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "get_config_", "(", ")", "[", "\"pdk45_pwr\"", "]", "*", "self", ".", "sa_rows", "*", "self", ".", "sa_cols", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "float", "(", "\"NaN\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_area_pe_": [[67, 72], ["float", "generic_layer.GenericLayer.get_config_"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_config_"], ["", "", "def", "get_area_pe_", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "get_config_", "(", ")", "[", "\"pdk45_area\"", "]", "*", "self", ".", "sa_rows", "*", "self", ".", "sa_cols", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "float", "(", "\"NaN\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_power_mem_": [[73, 80], ["None"], "methods", ["None"], ["", "", "def", "get_power_mem_", "(", "self", ",", "bw", ")", ":", "\n", "# power consumption of a memory cell", "\n", "        ", "nname", "=", "\"p%02d_b%02d\"", "%", "(", "self", ".", "period", "*", "1", ",", "bw", ")", "\n", "mem", "=", "self", ".", "memtable", "[", "nname", "]", "\n", "assert", "mem", "[", "\"bw\"", "]", "==", "bw", "\n", "assert", "mem", "[", "\"period\"", "]", "==", "self", ".", "period", "*", "1", "\n", "return", "mem", "[", "\"pdk45_pwr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_area_mem_": [[81, 88], ["None"], "methods", ["None"], ["", "def", "get_area_mem_", "(", "self", ",", "bw", ")", ":", "\n", "# power consumption of a memory cell", "\n", "        ", "nname", "=", "\"p%02d_b%02d\"", "%", "(", "self", ".", "period", "*", "1", ",", "bw", ")", "\n", "mem", "=", "self", ".", "memtable", "[", "nname", "]", "\n", "assert", "mem", "[", "\"bw\"", "]", "==", "bw", "\n", "assert", "mem", "[", "\"period\"", "]", "==", "self", ".", "period", "*", "1", "\n", "return", "mem", "[", "\"pdk45_area\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_sums_per_out": [[89, 91], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_sums_per_out", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_data_per_weight": [[92, 94], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_data_per_weight", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_power": [[95, 102], ["generic_layer.GenericLayer.get_data_per_weight", "generic_layer.GenericLayer.get_power_pe_", "max", "generic_layer.GenericLayer.get_power_mem_", "generic_layer.GenericLayer.get_sums_per_out"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_data_per_weight", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_power_pe_", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_power_mem_", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_sums_per_out"], ["", "def", "get_power", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_data_per_weight", "(", ")", "==", "1", ":", "\n", "            ", "mem_accum", "=", "self", ".", "sa_cols", "\n", "", "else", ":", "\n", "            ", "mem_accum", "=", "self", ".", "sa_cols", "*", "max", "(", "self", ".", "get_sums_per_out", "(", ")", "-", "self", ".", "sa_rows", "*", "self", ".", "pe_width", "+", "1", ",", "1", ")", "\n", "\n", "", "return", "self", ".", "get_power_pe_", "(", ")", "+", "mem_accum", "*", "self", ".", "get_power_mem_", "(", "self", ".", "pe_out_bw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_period": [[103, 105], ["None"], "methods", ["None"], ["", "def", "get_period", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "period", "*", "1e-9", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_area": [[106, 110], ["generic_layer.GenericLayer.get_area_pe_", "generic_layer.GenericLayer.get_area_mem_"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_area_pe_", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_area_mem_"], ["", "def", "get_area", "(", "self", ")", ":", "\n", "        ", "mem_accum", "=", "self", ".", "sa_cols", "*", "self", ".", "sa_rows", "\n", "\n", "return", "self", ".", "get_area_pe_", "(", ")", "+", "mem_accum", "*", "self", ".", "get_area_mem_", "(", "self", ".", "pe_out_bw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.__str__": [[111, 113], ["map"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"GenericLayer(%s)\"", "%", "\",\"", ".", "join", "(", "map", "(", "str", ",", "[", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "self", ".", "period", ",", "self", ".", "pe_out_bw", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.primary_layer.PrimaryLayer.__init__": [[6, 19], ["generic_layer.GenericLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sa_rows", ",", "sa_cols", ",", "pe_width", ",", "pe_stages", ",", "\n", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "outsize", ",", "\n", "outchannels", ",", "outcapsules", ",", "period", "=", "2", ",", "pe_out_bw", "=", "25", ")", ":", "\n", "\n", "        ", "generic_layer", ".", "GenericLayer", ".", "__init__", "(", "self", ",", "sa_rows", "=", "sa_rows", ",", "sa_cols", "=", "sa_cols", ",", "pe_width", "=", "pe_width", ",", "pe_stages", "=", "pe_stages", ",", "period", "=", "period", ",", "pe_out_bw", "=", "pe_out_bw", ")", "\n", "\n", "self", ".", "insize", "=", "insize", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "incapsules", "=", "incapsules", "\n", "self", ".", "kernsize", "=", "kernsize", "\n", "self", ".", "outsize", "=", "outsize", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "outcapsules", "=", "outcapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.primary_layer.PrimaryLayer.get_memory": [[20, 22], ["None"], "methods", ["None"], ["", "def", "get_memory", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "# weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.primary_layer.PrimaryLayer.get_cycles": [[23, 32], ["math.ceil", "min"], "methods", ["None"], ["", "def", "get_cycles", "(", "self", ")", ":", "\n", "#out_data = self.outsize*self.outsize*self.outchannels*self.outcapsules # out_data unused", "\n", "        ", "weights", "=", "(", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "# weights", "\n", "sums_per_out", "=", "(", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# sums_per_out", "\n", "data_per_weight", "=", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# data_per_weight", "\n", "w_load_cycles", "=", "self", ".", "sa_rows", "+", "self", ".", "pe_stages", "-", "1", "# w_load_cycles", "\n", "w_loads", "=", "math", ".", "ceil", "(", "weights", "/", "self", ".", "sa_cols", "/", "min", "(", "(", "self", ".", "sa_rows", "*", "self", ".", "pe_width", ")", ",", "sums_per_out", ")", ")", "# w_loads", "\n", "cycles", "=", "w_load_cycles", "*", "w_loads", "+", "data_per_weight", "\n", "return", "cycles", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.primary_layer.PrimaryLayer.get_sums_per_out": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_sums_per_out", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.primary_layer.PrimaryLayer.get_data_per_weight": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_data_per_weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.primary_layer.PrimaryLayer.__str__": [[40, 55], ["map"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"PrimaryLayer(%s)\"", "%", "\",\"", ".", "join", "(", "map", "(", "str", ",", "[", "\n", "self", ".", "sa_rows", ",", "\n", "self", ".", "sa_cols", ",", "\n", "self", ".", "pe_width", ",", "\n", "self", ".", "pe_stages", ",", "\n", "self", ".", "insize", ",", "\n", "self", ".", "inchannels", ",", "\n", "self", ".", "incapsules", ",", "\n", "self", ".", "kernsize", ",", "\n", "self", ".", "outsize", ",", "\n", "self", ".", "outchannels", ",", "\n", "self", ".", "outcapsules", ",", "\n", "self", ".", "period", ",", "\n", "self", ".", "pe_out_bw", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.caps_layer.caps_layer.__init__": [[6, 19], ["generic_layer.GenericLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sa_rows", ",", "sa_cols", ",", "pe_width", ",", "pe_stages", ",", "\n", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "outsize", ",", "\n", "outchannels", ",", "outcapsules", ",", "period", "=", "2", ",", "pe_out_bw", "=", "25", ")", ":", "\n", "\n", "        ", "generic_layer", ".", "GenericLayer", ".", "__init__", "(", "self", ",", "sa_rows", "=", "sa_rows", ",", "sa_cols", "=", "sa_cols", ",", "pe_width", "=", "pe_width", ",", "pe_stages", "=", "pe_stages", ",", "period", "=", "period", ",", "pe_out_bw", "=", "pe_out_bw", ")", "\n", "\n", "self", ".", "insize", "=", "insize", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "incapsules", "=", "incapsules", "\n", "self", ".", "kernsize", "=", "kernsize", "\n", "self", ".", "outsize", "=", "outsize", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "outcapsules", "=", "outcapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.caps_layer.caps_layer.get_memory": [[20, 22], ["None"], "methods", ["None"], ["", "def", "get_memory", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "# weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.caps_layer.caps_layer.get_cycles": [[23, 32], ["math.ceil", "min"], "methods", ["None"], ["", "def", "get_cycles", "(", "self", ")", ":", "\n", "#out_data = self.outsize*self.outsize*self.outchannels*self.outcapsules # out_data unused", "\n", "        ", "weights", "=", "(", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "# weights", "\n", "sums_per_out", "=", "(", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# sums_per_out", "\n", "data_per_weight", "=", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# data_per_weight", "\n", "w_load_cycles", "=", "self", ".", "sa_rows", "+", "self", ".", "pe_stages", "-", "1", "# w_load_cycles", "\n", "w_loads", "=", "math", ".", "ceil", "(", "weights", "/", "self", ".", "sa_cols", "/", "min", "(", "(", "self", ".", "sa_rows", "*", "self", ".", "pe_width", ")", ",", "sums_per_out", ")", ")", "# w_loads", "\n", "cycles", "=", "w_load_cycles", "*", "w_loads", "+", "data_per_weight", "\n", "return", "cycles", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.caps_layer.caps_layer.get_sums_per_out": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_sums_per_out", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.caps_layer.caps_layer.get_data_per_weight": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_data_per_weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.caps_layer.caps_layer.__str__": [[40, 55], ["map"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"CapsLayer(%s)\"", "%", "\",\"", ".", "join", "(", "map", "(", "str", ",", "[", "\n", "self", ".", "sa_rows", ",", "\n", "self", ".", "sa_cols", ",", "\n", "self", ".", "pe_width", ",", "\n", "self", ".", "pe_stages", ",", "\n", "self", ".", "insize", ",", "\n", "self", ".", "inchannels", ",", "\n", "self", ".", "incapsules", ",", "\n", "self", ".", "kernsize", ",", "\n", "self", ".", "outsize", ",", "\n", "self", ".", "outchannels", ",", "\n", "self", ".", "outcapsules", ",", "\n", "self", ".", "period", ",", "\n", "self", ".", "pe_out_bw", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.sum_update_layer.sum_update_layer.__init__": [[6, 19], ["generic_layer.GenericLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sa_rows", ",", "sa_cols", ",", "pe_width", ",", "pe_stages", ",", "\n", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "outsize", ",", "\n", "outchannels", ",", "outcapsules", ",", "period", "=", "2", ",", "pe_out_bw", "=", "25", ")", ":", "\n", "\n", "        ", "generic_layer", ".", "GenericLayer", ".", "__init__", "(", "self", ",", "sa_rows", "=", "sa_rows", ",", "sa_cols", "=", "sa_cols", ",", "pe_width", "=", "pe_width", ",", "pe_stages", "=", "pe_stages", ",", "period", "=", "period", ",", "pe_out_bw", "=", "pe_out_bw", ")", "\n", "\n", "self", ".", "insize", "=", "insize", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "incapsules", "=", "incapsules", "\n", "self", ".", "kernsize", "=", "kernsize", "\n", "self", ".", "outsize", "=", "outsize", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "outcapsules", "=", "outcapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.sum_update_layer.sum_update_layer.get_memory": [[20, 22], ["None"], "methods", ["None"], ["", "def", "get_memory", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "*", "self", ".", "outchannels", "# weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.sum_update_layer.sum_update_layer.get_cycles": [[23, 33], ["math.ceil", "min"], "methods", ["None"], ["", "def", "get_cycles", "(", "self", ")", ":", "\n", "\n", "        ", "out_data", "=", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "outcapsules", "*", "self", ".", "outcapsules", "# L2", "\n", "weights", "=", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "*", "self", ".", "outchannels", "# weights", "\n", "sums_per_out", "=", "self", ".", "incapsules", "# sums_per_out", "\n", "data_per_weight", "=", "1", "# data_per_weight", "\n", "w_load_cycles", "=", "self", ".", "sa_rows", "+", "self", ".", "pe_stages", "-", "1", "# w_load_cycles", "\n", "w_loads", "=", "math", ".", "ceil", "(", "weights", "/", "self", ".", "sa_cols", "/", "min", "(", "(", "self", ".", "sa_rows", "*", "self", ".", "pe_width", ")", ",", "sums_per_out", ")", ")", "# w_loads", "\n", "cycles", "=", "w_load_cycles", "*", "w_loads", "+", "data_per_weight", "\n", "return", "cycles", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.sum_update_layer.sum_update_layer.get_sums_per_out": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_sums_per_out", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "incapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.sum_update_layer.sum_update_layer.get_data_per_weight": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get_data_per_weight", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.sum_update_layer.sum_update_layer.__str__": [[40, 55], ["map"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"SumUpdateLayer(%s)\"", "%", "\",\"", ".", "join", "(", "map", "(", "str", ",", "[", "\n", "self", ".", "sa_rows", ",", "\n", "self", ".", "sa_cols", ",", "\n", "self", ".", "pe_width", ",", "\n", "self", ".", "pe_stages", ",", "\n", "self", ".", "insize", ",", "\n", "self", ".", "inchannels", ",", "\n", "self", ".", "incapsules", ",", "\n", "self", ".", "kernsize", ",", "\n", "self", ".", "outsize", ",", "\n", "self", ".", "outchannels", ",", "\n", "self", ".", "outcapsules", ",", "\n", "self", ".", "period", ",", "\n", "self", ".", "pe_out_bw", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.__init__": [[6, 19], ["generic_layer.GenericLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sa_rows", ",", "sa_cols", ",", "pe_width", ",", "pe_stages", ",", "\n", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "outsize", ",", "\n", "outchannels", ",", "outcapsules", ",", "period", "=", "2", ",", "pe_out_bw", "=", "25", ")", ":", "\n", "\n", "        ", "generic_layer", ".", "GenericLayer", ".", "__init__", "(", "self", ",", "sa_rows", "=", "sa_rows", ",", "sa_cols", "=", "sa_cols", ",", "pe_width", "=", "pe_width", ",", "pe_stages", "=", "pe_stages", ",", "period", "=", "period", ",", "pe_out_bw", "=", "pe_out_bw", ")", "\n", "\n", "self", ".", "insize", "=", "insize", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "incapsules", "=", "incapsules", "\n", "self", ".", "kernsize", "=", "kernsize", "\n", "self", ".", "outsize", "=", "outsize", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "outcapsules", "=", "outcapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_memory": [[20, 23], ["None"], "methods", ["None"], ["", "def", "get_memory", "(", "self", ")", ":", "\n", "        ", "ret", "=", "(", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "#2D", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles": [[24, 33], ["math.ceil", "min"], "methods", ["None"], ["", "def", "get_cycles", "(", "self", ")", ":", "\n", "#out_data = self.outsize*self.outsize*self.outchannels*self.outcapsules # out_data unused", "\n", "        ", "weights", "=", "(", "self", ".", "inchannels", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "outchannels", "*", "self", ".", "outcapsules", "*", "self", ".", "incapsules", "# weights", "\n", "sums_per_out", "=", "(", "self", ".", "kernsize", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# sums_per_out", "\n", "data_per_weight", "=", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "# data_per_weight", "\n", "w_load_cycles", "=", "self", ".", "sa_rows", "+", "self", ".", "pe_stages", "-", "1", "# w_load_cycles", "\n", "w_loads", "=", "math", ".", "ceil", "(", "weights", "/", "self", ".", "sa_cols", "/", "min", "(", "(", "self", ".", "sa_rows", "*", "self", ".", "pe_width", ")", ",", "sums_per_out", ")", ")", "# w_loads", "\n", "cycles", "=", "w_load_cycles", "*", "w_loads", "+", "data_per_weight", "\n", "return", "cycles", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_sums_per_out": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_sums_per_out", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "kernsize", "*", "self", ".", "kernsize", "*", "self", ".", "kernsize", "+", "1", ")", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_data_per_weight": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get_data_per_weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "outsize", "*", "self", ".", "outsize", "*", "self", ".", "inchannels", "*", "self", ".", "incapsules", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.__str__": [[41, 56], ["map"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Conv3D(%s)\"", "%", "\",\"", ".", "join", "(", "map", "(", "str", ",", "[", "\n", "self", ".", "sa_rows", ",", "\n", "self", ".", "sa_cols", ",", "\n", "self", ".", "pe_width", ",", "\n", "self", ".", "pe_stages", ",", "\n", "self", ".", "insize", ",", "\n", "self", ".", "inchannels", ",", "\n", "self", ".", "incapsules", ",", "\n", "self", ".", "kernsize", ",", "\n", "self", ".", "outsize", ",", "\n", "self", ".", "outchannels", ",", "\n", "self", ".", "outcapsules", ",", "\n", "self", ".", "period", ",", "\n", "self", ".", "pe_out_bw", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.tests.test_layers.Testhwacc.test_conv_hwacc": [[10, 17], ["test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "hwacc.ConvLayer().get_cycles", "hwacc.ConvLayer().get_cycles", "hwacc.ConvLayer().get_cycles", "hwacc.ConvLayer().get_cycles", "hwacc.ConvLayer().get_cycles", "hwacc.ConvLayer().get_cycles", "hwacc.ConvLayer", "hwacc.ConvLayer", "hwacc.ConvLayer", "hwacc.ConvLayer", "hwacc.ConvLayer", "hwacc.ConvLayer"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles"], ["    ", "def", "test_conv_hwacc", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "hwacc", ".", "ConvLayer", "(", "16", ",", "16", ",", "1", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "1794", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ConvLayer", "(", "16", ",", "16", ",", "16", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "672", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ConvLayer", "(", "1", ",", "1", ",", "6", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "3", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "3", ")", ".", "get_cycles", "(", ")", ",", "63664", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ConvLayer", "(", "1", ",", "2", ",", "6", ",", "2", ",", "insize", "=", "10", ",", "inchannels", "=", "4", ",", "incapsules", "=", "4", ",", "kernsize", "=", "25", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "433238", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ConvLayer", "(", "4", ",", "5", ",", "5", ",", "2", ",", "insize", "=", "10", ",", "inchannels", "=", "5", ",", "incapsules", "=", "3", ",", "kernsize", "=", "25", ",", "outsize", "=", "25", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "2", ")", ".", "get_cycles", "(", ")", ",", "249455", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ConvLayer", "(", "7", ",", "1", ",", "8", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "25", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "5", ")", ".", "get_cycles", "(", ")", ",", "114872", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.tests.test_layers.Testhwacc.test_primary_hwacc": [[18, 27], ["test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "hwacc.PrimaryLayer().get_cycles", "hwacc.PrimaryLayer().get_cycles", "hwacc.PrimaryLayer().get_cycles", "hwacc.PrimaryLayer().get_cycles", "hwacc.PrimaryLayer().get_cycles", "hwacc.PrimaryLayer().get_cycles", "hwacc.PrimaryLayer().get_cycles", "hwacc.PrimaryLayer().get_cycles", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles"], ["", "def", "test_primary_hwacc", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "hwacc", ".", "PrimaryLayer", "(", "16", ",", "16", ",", "1", ",", "2", ",", "insize", "=", "20", ",", "inchannels", "=", "256", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "6", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ")", ".", "get_cycles", "(", ")", ",", "361745", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "PrimaryLayer", "(", "16", ",", "16", ",", "16", ",", "2", ",", "insize", "=", "20", ",", "inchannels", "=", "256", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "6", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ")", ".", "get_cycles", "(", ")", ",", "31265", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "PrimaryLayer", "(", "16", ",", "16", ",", "1", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "1794", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "PrimaryLayer", "(", "16", ",", "16", ",", "16", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "672", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "PrimaryLayer", "(", "1", ",", "1", ",", "6", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "3", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "3", ")", ".", "get_cycles", "(", ")", ",", "63664", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "PrimaryLayer", "(", "1", ",", "2", ",", "6", ",", "2", ",", "insize", "=", "10", ",", "inchannels", "=", "4", ",", "incapsules", "=", "4", ",", "kernsize", "=", "25", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "433238", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "PrimaryLayer", "(", "4", ",", "5", ",", "5", ",", "2", ",", "insize", "=", "10", ",", "inchannels", "=", "5", ",", "incapsules", "=", "3", ",", "kernsize", "=", "25", ",", "outsize", "=", "25", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "2", ")", ".", "get_cycles", "(", ")", ",", "249455", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "PrimaryLayer", "(", "7", ",", "1", ",", "8", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "25", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "5", ")", ".", "get_cycles", "(", ")", ",", "114872", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.tests.test_layers.Testhwacc.test_class_hwacc": [[28, 37], ["test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "hwacc.ClassLayer().get_cycles", "hwacc.ClassLayer().get_cycles", "hwacc.ClassLayer().get_cycles", "hwacc.ClassLayer().get_cycles", "hwacc.ClassLayer().get_cycles", "hwacc.ClassLayer().get_cycles", "hwacc.ClassLayer().get_cycles", "hwacc.ClassLayer().get_cycles", "hwacc.ClassLayer", "hwacc.ClassLayer", "hwacc.ClassLayer", "hwacc.ClassLayer", "hwacc.ClassLayer", "hwacc.ClassLayer", "hwacc.ClassLayer", "hwacc.ClassLayer"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles"], ["", "def", "test_class_hwacc", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "hwacc", ".", "ClassLayer", "(", "16", ",", "16", ",", "1", ",", "2", ",", "insize", "=", "6", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "6", ",", "outsize", "=", "1", ",", "outchannels", "=", "10", ",", "outcapsules", "=", "16", ")", ".", "get_cycles", "(", ")", ",", "98006", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ClassLayer", "(", "16", ",", "16", ",", "16", ",", "2", ",", "insize", "=", "6", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "6", ",", "outsize", "=", "1", ",", "outchannels", "=", "10", ",", "outcapsules", "=", "16", ")", ".", "get_cycles", "(", ")", ",", "6138", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ClassLayer", "(", "16", ",", "16", ",", "1", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "1395", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ClassLayer", "(", "16", ",", "16", ",", "16", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "273", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ClassLayer", "(", "1", ",", "1", ",", "6", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "3", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "3", ")", ".", "get_cycles", "(", ")", ",", "62465", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ClassLayer", "(", "1", ",", "2", ",", "6", ",", "2", ",", "insize", "=", "10", ",", "inchannels", "=", "4", ",", "incapsules", "=", "4", ",", "kernsize", "=", "25", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "426839", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ClassLayer", "(", "4", ",", "5", ",", "5", ",", "2", ",", "insize", "=", "10", ",", "inchannels", "=", "5", ",", "incapsules", "=", "3", ",", "kernsize", "=", "25", ",", "outsize", "=", "25", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "2", ")", ".", "get_cycles", "(", ")", ",", "240081", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "ClassLayer", "(", "7", ",", "1", ",", "8", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "25", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "5", ")", ".", "get_cycles", "(", ")", ",", "114473", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.tests.test_layers.Testhwacc.test_sum_update_hwacc": [[39, 48], ["test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "test_layers.Testhwacc.assertEqual", "hwacc.SumUpdateLayer().get_cycles", "hwacc.SumUpdateLayer().get_cycles", "hwacc.SumUpdateLayer().get_cycles", "hwacc.SumUpdateLayer().get_cycles", "hwacc.SumUpdateLayer().get_cycles", "hwacc.SumUpdateLayer().get_cycles", "hwacc.SumUpdateLayer().get_cycles", "hwacc.SumUpdateLayer().get_cycles", "hwacc.SumUpdateLayer", "hwacc.SumUpdateLayer", "hwacc.SumUpdateLayer", "hwacc.SumUpdateLayer", "hwacc.SumUpdateLayer", "hwacc.SumUpdateLayer", "hwacc.SumUpdateLayer", "hwacc.SumUpdateLayer"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles"], ["", "def", "test_sum_update_hwacc", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "hwacc", ".", "SumUpdateLayer", "(", "16", ",", "16", ",", "1", ",", "2", ",", "insize", "=", "6", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "6", ",", "outsize", "=", "1", ",", "outchannels", "=", "10", ",", "outcapsules", "=", "16", ")", ".", "get_cycles", "(", ")", ",", "1531", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "SumUpdateLayer", "(", "16", ",", "16", ",", "16", ",", "2", ",", "insize", "=", "6", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "6", ",", "outsize", "=", "1", ",", "outchannels", "=", "10", ",", "outcapsules", "=", "16", ")", ".", "get_cycles", "(", ")", ",", "1531", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "SumUpdateLayer", "(", "16", ",", "16", ",", "1", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "22033", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "SumUpdateLayer", "(", "16", ",", "16", ",", "16", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "22033", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "SumUpdateLayer", "(", "1", ",", "1", ",", "6", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "3", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "3", ")", ".", "get_cycles", "(", ")", ",", "124417", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "SumUpdateLayer", "(", "1", ",", "2", ",", "6", ",", "2", ",", "insize", "=", "10", ",", "inchannels", "=", "4", ",", "incapsules", "=", "4", ",", "kernsize", "=", "25", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ")", ".", "get_cycles", "(", ")", ",", "160001", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "SumUpdateLayer", "(", "4", ",", "5", ",", "5", ",", "2", ",", "insize", "=", "10", ",", "inchannels", "=", "5", ",", "incapsules", "=", "3", ",", "kernsize", "=", "25", ",", "outsize", "=", "25", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "2", ")", ".", "get_cycles", "(", ")", ",", "266671", ")", "\n", "self", ".", "assertEqual", "(", "hwacc", ".", "SumUpdateLayer", "(", "7", ",", "1", ",", "8", ",", "2", ",", "insize", "=", "28", ",", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "25", ",", "outsize", "=", "20", ",", "outchannels", "=", "256", ",", "outcapsules", "=", "5", ")", ".", "get_cycles", "(", ")", ",", "1280001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.CapsuleLayer.__init__": [[22, 30], ["keras.layers.Layer.__init__", "keras.initializers.get"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["def", "__init__", "(", "self", ",", "num_capsule", ",", "dim_capsule", ",", "routings", "=", "3", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CapsuleLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_capsule", "=", "num_capsule", "\n", "self", ".", "dim_capsule", "=", "dim_capsule", "\n", "self", ".", "routings", "=", "routings", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.CapsuleLayer.build": [[31, 43], ["CapsuleLayers.CapsuleLayer.add_weight", "len"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", ">=", "3", ",", "\"The input Tensor should have shape=[None, input_num_capsule, input_dim_capsule]\"", "\n", "self", ".", "input_num_capsule", "=", "input_shape", "[", "1", "]", "\n", "self", ".", "input_dim_capsule", "=", "input_shape", "[", "2", "]", "\n", "\n", "# Transform matrix", "\n", "self", ".", "W", "=", "self", ".", "add_weight", "(", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "input_num_capsule", ",", "\n", "self", ".", "dim_capsule", ",", "self", ".", "input_dim_capsule", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'W'", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.CapsuleLayer.call": [[44, 88], ["keras.backend.expand_dims", "print", "keras.backend.tile", "keras.backend.map_fn", "tensorflow.zeros", "range", "keras.backend.expand_dims.get_shape().as_list", "tensorflow.nn.softmax", "CapsuleLayers.squash", "keras.backend.batch_dot", "keras.backend.batch_dot", "keras.backend.batch_dot", "keras.backend.expand_dims.get_shape", "keras.backend.shape"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.softmax", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "None", ")", ":", "\n", "# inputs.shape=[None, input_num_capsule, input_dim_capsule]", "\n", "# inputs_expand.shape=[None, 1, input_num_capsule, input_dim_capsule]", "\n", "        ", "inputs_expand", "=", "K", ".", "expand_dims", "(", "inputs", ",", "1", ")", "\n", "print", "(", "inputs_expand", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "# Replicate num_capsule dimension to prepare being multiplied by W", "\n", "# inputs_tiled.shape=[None, num_capsule, input_num_capsule, input_dim_capsule]", "\n", "inputs_tiled", "=", "K", ".", "tile", "(", "inputs_expand", ",", "[", "1", ",", "self", ".", "num_capsule", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Compute `inputs * W` by scanning inputs_tiled on dimension 0.", "\n", "# x.shape=[num_capsule, input_num_capsule, input_dim_capsule]", "\n", "# W.shape=[num_capsule, input_num_capsule, dim_capsule, input_dim_capsule]", "\n", "# Regard the first two dimensions as `batch` dimension,", "\n", "# then matmul: [input_dim_capsule] x [dim_capsule, input_dim_capsule]^T -> [dim_capsule].", "\n", "# inputs_hat.shape = [None, num_capsule, input_num_capsule, dim_capsule]", "\n", "inputs_hat", "=", "K", ".", "map_fn", "(", "lambda", "x", ":", "K", ".", "batch_dot", "(", "x", ",", "self", ".", "W", ",", "[", "2", ",", "3", "]", ")", ",", "elems", "=", "inputs_tiled", ")", "\n", "\n", "# Begin: Routing algorithm ---------------------------------------------------------------------#", "\n", "# The prior for coupling coefficient, initialized as zeros.", "\n", "# b.shape = [None, self.num_capsule, self.input_num_capsule].", "\n", "b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "K", ".", "shape", "(", "inputs_hat", ")", "[", "0", "]", ",", "self", ".", "num_capsule", ",", "self", ".", "input_num_capsule", "]", ")", "\n", "\n", "assert", "self", ".", "routings", ">", "0", ",", "'The routings should be > 0.'", "\n", "for", "i", "in", "range", "(", "self", ".", "routings", ")", ":", "\n", "# c.shape=[batch_size, num_capsule, input_num_capsule]", "\n", "            ", "c", "=", "tf", ".", "nn", ".", "softmax", "(", "b", ",", "dim", "=", "1", ")", "\n", "\n", "# c.shape =  [batch_size, num_capsule, input_num_capsule]", "\n", "# inputs_hat.shape=[None, num_capsule, input_num_capsule, dim_capsule]", "\n", "# The first two dimensions as `batch` dimension,", "\n", "# then matmal: [input_num_capsule] x [input_num_capsule, dim_capsule] -> [dim_capsule].", "\n", "# outputs.shape=[None, num_capsule, dim_capsule]", "\n", "outputs", "=", "squash", "(", "K", ".", "batch_dot", "(", "c", ",", "inputs_hat", ",", "[", "2", ",", "2", "]", ")", ")", "# [None, 10, 16]", "\n", "\n", "if", "i", "<", "self", ".", "routings", "-", "1", ":", "\n", "# outputs.shape =  [None, num_capsule, dim_capsule]", "\n", "# inputs_hat.shape=[None, num_capsule, input_num_capsule, dim_capsule]", "\n", "# The first two dimensions as `batch` dimension,", "\n", "# then matmal: [dim_capsule] x [input_num_capsule, dim_capsule]^T -> [input_num_capsule].", "\n", "# b.shape=[batch_size, num_capsule, input_num_capsule]", "\n", "                ", "b", "+=", "K", ".", "batch_dot", "(", "outputs", ",", "inputs_hat", ",", "[", "2", ",", "3", "]", ")", "\n", "# End: Routing algorithm -----------------------------------------------------------------------#", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.CapsuleLayer.compute_output_shape": [[89, 91], ["tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "None", ",", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.CapsuleLayer.get_config": [[92, 100], ["super().get_config", "dict", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'num_capsule'", ":", "self", ".", "num_capsule", ",", "\n", "'dim_capsule'", ":", "self", ".", "dim_capsule", ",", "\n", "'routings'", ":", "self", ".", "routings", "\n", "}", "\n", "base_config", "=", "super", "(", "CapsuleLayer", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.PrimaryCap": [[102, 115], ["keras.layers.Conv2D", "keras.layers.Lambda"], "function", ["None"], ["", "", "def", "PrimaryCap", "(", "inputs", ",", "dim_capsule", ",", "n_channels", ",", "kernel_size", ",", "strides", ",", "padding", ")", ":", "\n", "    ", "\"\"\"\n    Apply Conv2D `n_channels` times and concatenate all capsules\n    :param inputs: 4D tensor, shape=[None, width, height, channels]\n    :param dim_capsule: the dim of the output vector of capsule\n    :param n_channels: the number of types of capsules\n    :return: output tensor, shape=[None, num_capsule, dim_capsule]\n    \"\"\"", "\n", "outputs", "=", "layers", ".", "Conv2D", "(", "filters", "=", "dim_capsule", "*", "n_channels", ",", "kernel_size", "=", "kernel_size", ",", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "name", "=", "'primarycap_conv2d'", ")", "(", "inputs", ")", "\n", "#outputs = layers.Reshape(target_shape=[-1, dim_capsule], name='primarycap_reshape')(outputs)", "\n", "outputs", "=", "layers", ".", "Lambda", "(", "squash", ",", "name", "=", "'primarycap_squash'", ")", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.squash": [[118, 122], ["keras.backend.sum", "keras.backend.epsilon", "keras.backend.sqrt", "keras.backend.square"], "function", ["None"], ["", "def", "squash", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "s_squared_norm", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "x", ")", ",", "axis", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", "\n", "scale", "=", "K", ".", "sqrt", "(", "s_squared_norm", ")", "/", "(", "0.5", "+", "s_squared_norm", ")", "\n", "return", "scale", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.softmax": [[126, 129], ["keras.backend.exp", "keras.backend.sum", "keras.backend.max"], "function", ["None"], ["", "def", "softmax", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "ex", "=", "K", ".", "exp", "(", "x", "-", "K", ".", "max", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "ex", "/", "K", ".", "sum", "(", "ex", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.caps_batch_dot": [[130, 136], ["keras.backend.expand_dims", "tensorflow.matmul", "keras.backend.squeeze", "keras.backend.permute_dimensions", "keras.backend.int_shape"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.squeeze"], ["", "def", "caps_batch_dot", "(", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "K", ".", "expand_dims", "(", "x", ",", "2", ")", "\n", "if", "K", ".", "int_shape", "(", "x", ")", "[", "3", "]", "is", "not", "None", ":", "\n", "        ", "y", "=", "K", ".", "permute_dimensions", "(", "y", ",", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "", "o", "=", "tf", ".", "matmul", "(", "x", ",", "y", ")", "\n", "return", "K", ".", "squeeze", "(", "o", ",", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.ConvertToCaps.__init__": [[20, 22], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvertToCaps", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "# self.input_spec = InputSpec(min_ndim=2)", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.ConvertToCaps.compute_output_shape": [[24, 28], ["list", "list.insert", "tuple", "len"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "output_shape", "=", "list", "(", "input_shape", ")", "\n", "output_shape", ".", "insert", "(", "1", "if", "cf", "else", "len", "(", "output_shape", ")", ",", "1", ")", "\n", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.ConvertToCaps.call": [[29, 31], ["keras.backend.expand_dims"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "K", ".", "expand_dims", "(", "inputs", ",", "1", "if", "cf", "else", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.ConvertToCaps.get_config": [[32, 38], ["super().get_config", "dict", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'input_spec'", ":", "5", "\n", "}", "\n", "base_config", "=", "super", "(", "ConvertToCaps", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.FlattenCaps.__init__": [[42, 45], ["keras.layers.Layer.__init__", "keras.layers.InputSpec"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FlattenCaps", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "input_spec", "=", "InputSpec", "(", "min_ndim", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.FlattenCaps.compute_output_shape": [[46, 55], ["all", "ValueError", "numpy.prod", "str"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "not", "all", "(", "input_shape", "[", "1", ":", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'The shape of the input to \"FlattenCaps\" '", "\n", "'is not fully defined '", "\n", "'(got '", "+", "str", "(", "input_shape", "[", "1", ":", "]", ")", "+", "'. '", "\n", "'Make sure to pass a complete \"input_shape\" '", "\n", "'or \"batch_input_shape\" argument to the first '", "\n", "'layer in your model.'", ")", "\n", "", "return", "(", "input_shape", "[", "0", "]", ",", "np", ".", "prod", "(", "input_shape", "[", "1", ":", "-", "1", "]", ")", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.FlattenCaps.call": [[56, 59], ["keras.backend.int_shape", "keras.backend.reshape", "numpy.prod"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "shape", "=", "K", ".", "int_shape", "(", "inputs", ")", "\n", "return", "K", ".", "reshape", "(", "inputs", ",", "(", "-", "1", ",", "np", ".", "prod", "(", "shape", "[", "1", ":", "-", "1", "]", ")", ",", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.CapsToScalars.__init__": [[63, 66], ["keras.layers.Layer.__init__", "keras.layers.InputSpec"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CapsToScalars", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "input_spec", "=", "InputSpec", "(", "min_ndim", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.CapsToScalars.compute_output_shape": [[67, 69], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.CapsToScalars.call": [[70, 72], ["keras.backend.sqrt", "keras.backend.sum", "keras.backend.square", "keras.backend.epsilon"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "K", ".", "sqrt", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "inputs", "+", "K", ".", "epsilon", "(", ")", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.Conv2DCaps.__init__": [[76, 107], ["keras.layers.Layer.__init__", "keras.utils.conv_utils.normalize_tuple", "keras.utils.conv_utils.normalize_tuple", "keras.utils.conv_utils.normalize_padding", "keras.backend.normalize_data_format", "keras.initializers.get", "keras.initializers.get", "keras.regularizers.get", "keras.regularizers.get", "keras.constraints.get", "keras.layers.InputSpec"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_j", ",", "n_j", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "r_num", "=", "1", ",", "\n", "b_alphas", "=", "[", "8", ",", "8", ",", "8", "]", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Conv2DCaps", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "rank", "=", "2", "\n", "self", ".", "ch_j", "=", "ch_j", "# Number of capsules in layer J", "\n", "self", ".", "n_j", "=", "n_j", "# Number of neurons in a capsule in J", "\n", "self", ".", "kernel_size", "=", "conv_utils", ".", "normalize_tuple", "(", "kernel_size", ",", "rank", ",", "'kernel_size'", ")", "\n", "self", ".", "strides", "=", "conv_utils", ".", "normalize_tuple", "(", "strides", ",", "rank", ",", "'strides'", ")", "\n", "self", ".", "r_num", "=", "r_num", "\n", "self", ".", "b_alphas", "=", "b_alphas", "\n", "self", ".", "padding", "=", "conv_utils", ".", "normalize_padding", "(", "padding", ")", "\n", "self", ".", "data_format", "=", "K", ".", "normalize_data_format", "(", "data_format", ")", "\n", "self", ".", "dilation_rate", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "bias_initializer", "=", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "self", ".", "kernel_regularizer", "=", "regularizers", ".", "get", "(", "kernel_regularizer", ")", "\n", "self", ".", "activity_regularizer", "=", "regularizers", ".", "get", "(", "activity_regularizer", ")", "\n", "self", ".", "kernel_constraint", "=", "constraints", ".", "get", "(", "kernel_constraint", ")", "\n", "self", ".", "input_spec", "=", "InputSpec", "(", "ndim", "=", "rank", "+", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.Conv2DCaps.build": [[108, 134], ["DeepCapsKerasLayers.Conv2DCaps.add_weight", "keras.utils.conv_utils.conv_output_length", "keras.utils.conv_utils.conv_output_length"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "self", ".", "h_i", ",", "self", ".", "w_i", ",", "self", ".", "ch_i", ",", "self", ".", "n_i", "=", "input_shape", "[", "1", ":", "5", "]", "\n", "\n", "self", ".", "h_j", ",", "self", ".", "w_j", "=", "[", "conv_utils", ".", "conv_output_length", "(", "input_shape", "[", "i", "+", "1", "]", ",", "\n", "self", ".", "kernel_size", "[", "i", "]", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "stride", "=", "self", ".", "strides", "[", "i", "]", ",", "\n", "dilation", "=", "self", ".", "dilation_rate", "[", "i", "]", ")", "for", "i", "in", "(", "0", ",", "1", ")", "]", "\n", "\n", "self", ".", "ah_j", ",", "self", ".", "aw_j", "=", "[", "conv_utils", ".", "conv_output_length", "(", "input_shape", "[", "i", "+", "1", "]", ",", "\n", "self", ".", "kernel_size", "[", "i", "]", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "self", ".", "dilation_rate", "[", "i", "]", ")", "for", "i", "in", "(", "0", ",", "1", ")", "]", "\n", "\n", "self", ".", "w_shape", "=", "self", ".", "kernel_size", "+", "(", "self", ".", "ch_i", ",", "self", ".", "n_i", ",", "\n", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", "\n", "\n", "self", ".", "w", "=", "self", ".", "add_weight", "(", "shape", "=", "self", ".", "w_shape", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'kernel'", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.Conv2DCaps.call": [[135, 152], ["keras.backend.conv2d", "DeepCapsKerasLayers.squeeze", "keras.backend.reshape", "keras.backend.reshape", "keras.backend.reshape"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.squeeze"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "r_num", "==", "1", ":", "\n", "# if there is no routing (and this is so when r_num is 1 and all c are equal)", "\n", "# then this is a common convolution", "\n", "            ", "outputs", "=", "K", ".", "conv2d", "(", "K", ".", "reshape", "(", "inputs", ",", "(", "-", "1", ",", "self", ".", "h_i", ",", "self", ".", "w_i", ",", "\n", "self", ".", "ch_i", "*", "self", ".", "n_i", ")", ")", ",", "\n", "K", ".", "reshape", "(", "self", ".", "w", ",", "self", ".", "kernel_size", "+", "\n", "(", "self", ".", "ch_i", "*", "self", ".", "n_i", ",", "self", ".", "ch_j", "*", "self", ".", "n_j", ")", ")", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "strides", "=", "self", ".", "strides", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "dilation_rate", "=", "self", ".", "dilation_rate", ")", "\n", "\n", "outputs", "=", "squeeze", "(", "K", ".", "reshape", "(", "outputs", ",", "(", "(", "-", "1", ",", "self", ".", "h_j", ",", "self", ".", "w_j", ",", "\n", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.Conv2DCaps.compute_output_shape": [[153, 155], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "self", ".", "h_j", ",", "self", ".", "w_j", ",", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.Conv2DCaps.get_config": [[156, 173], ["super().get_config", "dict", "keras.initializers.serialize", "keras.regularizers.serialize", "keras.regularizers.serialize", "keras.constraints.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'ch_j'", ":", "self", ".", "ch_j", ",", "\n", "'n_j'", ":", "self", ".", "n_j", ",", "\n", "'kernel_size'", ":", "self", ".", "kernel_size", ",", "\n", "'strides'", ":", "self", ".", "strides", ",", "\n", "'b_alphas'", ":", "self", ".", "b_alphas", ",", "\n", "'padding'", ":", "self", ".", "padding", ",", "\n", "'data_format'", ":", "self", ".", "data_format", ",", "\n", "'dilation_rate'", ":", "self", ".", "dilation_rate", ",", "\n", "'kernel_initializer'", ":", "initializers", ".", "serialize", "(", "self", ".", "kernel_initializer", ")", ",", "\n", "'kernel_regularizer'", ":", "regularizers", ".", "serialize", "(", "self", ".", "kernel_regularizer", ")", ",", "\n", "'activity_regularizer'", ":", "regularizers", ".", "serialize", "(", "self", ".", "activity_regularizer", ")", ",", "\n", "'kernel_constraint'", ":", "constraints", ".", "serialize", "(", "self", ".", "kernel_constraint", ")", "\n", "}", "\n", "base_config", "=", "super", "(", "Conv2DCaps", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.Mask.call": [[177, 193], ["isinstance", "keras.backend.batch_flatten", "keras.backend.sqrt", "keras.backend.one_hot", "len", "keras.backend.sum", "keras.backend.expand_dims", "keras.backend.square", "keras.backend.argmax", "keras.backend.sqrt.get_shape().as_list", "keras.backend.sqrt.get_shape"], "methods", ["None"], ["    ", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "# true label is provided with shape = [None, n_classes], i.e. one-hot code.", "\n", "            ", "assert", "len", "(", "inputs", ")", "==", "2", "\n", "inputs", ",", "mask", "=", "inputs", "\n", "", "else", ":", "# if no true label, mask by the max length of capsules. Mainly used for prediction", "\n", "# compute lengths of capsules", "\n", "            ", "x", "=", "K", ".", "sqrt", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "inputs", ")", ",", "-", "1", ")", ")", "\n", "# generate the mask which is a one-hot code.", "\n", "# mask.shape=[None, n_classes]=[None, num_capsule]", "\n", "mask", "=", "K", ".", "one_hot", "(", "indices", "=", "K", ".", "argmax", "(", "x", ",", "1", ")", ",", "num_classes", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ")", "\n", "\n", "# inputs.shape=[None, num_capsule, dim_capsule]", "\n", "# mask.shape=[None, num_capsule]", "\n", "# masked.shape=[None, num_capsule * dim_capsule]", "\n", "", "masked", "=", "K", ".", "batch_flatten", "(", "inputs", "*", "K", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", ")", "\n", "return", "masked", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.Mask.compute_output_shape": [[194, 199], ["isinstance", "tuple", "tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_shape", "[", "0", "]", ",", "tuple", ")", ":", "# true label provided", "\n", "            ", "return", "tuple", "(", "[", "None", ",", "input_shape", "[", "0", "]", "[", "1", "]", "*", "input_shape", "[", "0", "]", "[", "2", "]", "]", ")", "\n", "", "else", ":", "# no true label provided", "\n", "            ", "return", "tuple", "(", "[", "None", ",", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.Mask_CID.call": [[203, 224], ["isinstance", "tensorflow.range", "tensorflow.stack", "tensorflow.gather_nd", "keras.backend.argmax", "keras.backend.sqrt", "keras.backend.argmax", "len", "keras.backend.sum", "tensorflow.cast", "keras.backend.square", "tensorflow.shape"], "methods", ["None"], ["    ", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "# true label is provided with shape = [None, n_classes], i.e. one-hot code.", "\n", "            ", "assert", "len", "(", "inputs", ")", "==", "2", "\n", "inputs", ",", "a", "=", "inputs", "\n", "mask", "=", "K", ".", "argmax", "(", "a", ",", "1", ")", "\n", "", "else", ":", "# if no true label, mask by the max length of capsules. Mainly used for prediction", "\n", "# compute lengths of capsules", "\n", "            ", "x", "=", "K", ".", "sqrt", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "inputs", ")", ",", "-", "1", ")", ")", "\n", "# generate the mask which is a one-hot code.", "\n", "# mask.shape=[None, n_classes]=[None, num_capsule]", "\n", "mask", "=", "K", ".", "argmax", "(", "x", ",", "1", ")", "\n", "\n", "", "increasing", "=", "tf", ".", "range", "(", "start", "=", "0", ",", "limit", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "delta", "=", "1", ")", "\n", "m", "=", "tf", ".", "stack", "(", "[", "increasing", ",", "tf", ".", "cast", "(", "mask", ",", "tf", ".", "int32", ")", "]", ",", "axis", "=", "1", ")", "\n", "# inputs.shape=[None, num_capsule, dim_capsule]", "\n", "# mask.shape=[None, num_capsule]", "\n", "# masked.shape=[None, num_capsule * dim_capsule]", "\n", "# x1 = tf.transpose(inputs, (0))", "\n", "masked", "=", "tf", ".", "gather_nd", "(", "inputs", ",", "m", ")", "\n", "\n", "return", "masked", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.Mask_CID.compute_output_shape": [[225, 230], ["isinstance", "tuple", "tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_shape", "[", "0", "]", ",", "tuple", ")", ":", "# true label provided", "\n", "            ", "return", "tuple", "(", "[", "None", ",", "input_shape", "[", "0", "]", "[", "2", "]", "]", ")", "\n", "", "else", ":", "# no true label provided", "\n", "            ", "return", "tuple", "(", "[", "None", ",", "input_shape", "[", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.ConvCapsuleLayer3D.__init__": [[234, 244], ["keras.layers.Layer.__init__", "keras.initializers.get"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "num_capsule", ",", "num_atoms", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ",", "routings", "=", "3", ",", "\n", "kernel_initializer", "=", "'he_normal'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvCapsuleLayer3D", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_capsule", "=", "num_capsule", "\n", "self", ".", "num_atoms", "=", "num_atoms", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "routings", "=", "routings", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.ConvCapsuleLayer3D.build": [[245, 263], ["DeepCapsKerasLayers.ConvCapsuleLayer3D.add_weight", "DeepCapsKerasLayers.ConvCapsuleLayer3D.add_weight", "len", "keras.initializers.constant"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", "==", "5", ",", "\"The input Tensor should have shape=[None, input_height, input_width,\"", "\" input_num_capsule, input_num_atoms]\"", "\n", "self", ".", "input_height", "=", "input_shape", "[", "1", "]", "\n", "self", ".", "input_width", "=", "input_shape", "[", "2", "]", "\n", "self", ".", "input_num_capsule", "=", "input_shape", "[", "3", "]", "\n", "self", ".", "input_num_atoms", "=", "input_shape", "[", "4", "]", "\n", "\n", "# Transform matrix", "\n", "self", ".", "W", "=", "self", ".", "add_weight", "(", "shape", "=", "[", "self", ".", "input_num_atoms", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "num_capsule", "*", "self", ".", "num_atoms", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'W'", ")", "\n", "\n", "self", ".", "b", "=", "self", ".", "add_weight", "(", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "num_atoms", ",", "1", ",", "1", "]", ",", "\n", "initializer", "=", "initializers", ".", "constant", "(", "0.1", ")", ",", "\n", "name", "=", "'b'", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.ConvCapsuleLayer3D.call": [[264, 297], ["tensorflow.transpose", "keras.backend.shape", "keras.backend.reshape", "keras.backend.reshape.set_shape", "keras.backend.conv3d", "keras.backend.shape", "tensorflow.transpose.get_shape", "tensorflow.transpose", "keras.backend.reshape", "keras.backend.reshape.set_shape", "keras.backend.stack", "keras.backend.tile", "DeepCapsKerasLayers.update_routing", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.update_routing"], ["", "def", "call", "(", "self", ",", "input_tensor", ",", "training", "=", "None", ")", ":", "\n", "\n", "        ", "input_transposed", "=", "tf", ".", "transpose", "(", "input_tensor", ",", "[", "0", ",", "3", ",", "4", ",", "1", ",", "2", "]", ")", "\n", "input_shape", "=", "K", ".", "shape", "(", "input_transposed", ")", "\n", "input_tensor_reshaped", "=", "K", ".", "reshape", "(", "input_tensor", ",", "[", "input_shape", "[", "0", "]", ",", "1", ",", "self", ".", "input_num_capsule", "*", "self", ".", "input_num_atoms", ",", "self", ".", "input_height", ",", "self", ".", "input_width", "]", ")", "\n", "\n", "input_tensor_reshaped", ".", "set_shape", "(", "(", "None", ",", "1", ",", "self", ".", "input_num_capsule", "*", "self", ".", "input_num_atoms", ",", "self", ".", "input_height", ",", "self", ".", "input_width", ")", ")", "\n", "\n", "# conv = Conv3D(input_tensor_reshaped, self.W, (self.strides, self.strides),", "\n", "#                 padding=self.padding, data_format='channels_first')", "\n", "\n", "conv", "=", "K", ".", "conv3d", "(", "input_tensor_reshaped", ",", "self", ".", "W", ",", "strides", "=", "(", "self", ".", "input_num_atoms", ",", "self", ".", "strides", ",", "self", ".", "strides", ")", ",", "padding", "=", "self", ".", "padding", ",", "data_format", "=", "'channels_first'", ")", "\n", "\n", "votes_shape", "=", "K", ".", "shape", "(", "conv", ")", "\n", "_", ",", "_", ",", "_", ",", "conv_height", ",", "conv_width", "=", "conv", ".", "get_shape", "(", ")", "\n", "conv", "=", "tf", ".", "transpose", "(", "conv", ",", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "votes", "=", "K", ".", "reshape", "(", "conv", ",", "[", "input_shape", "[", "0", "]", ",", "self", ".", "input_num_capsule", ",", "self", ".", "num_capsule", ",", "self", ".", "num_atoms", ",", "votes_shape", "[", "3", "]", ",", "votes_shape", "[", "4", "]", "]", ")", "\n", "votes", ".", "set_shape", "(", "(", "None", ",", "self", ".", "input_num_capsule", ",", "self", ".", "num_capsule", ",", "self", ".", "num_atoms", ",", "conv_height", ".", "value", ",", "conv_width", ".", "value", ")", ")", "\n", "\n", "logit_shape", "=", "K", ".", "stack", "(", "[", "input_shape", "[", "0", "]", ",", "self", ".", "input_num_capsule", ",", "self", ".", "num_capsule", ",", "votes_shape", "[", "3", "]", ",", "votes_shape", "[", "4", "]", "]", ")", "\n", "biases_replicated", "=", "K", ".", "tile", "(", "self", ".", "b", ",", "[", "1", ",", "1", ",", "conv_height", ".", "value", ",", "conv_width", ".", "value", "]", ")", "\n", "\n", "activations", "=", "update_routing", "(", "\n", "votes", "=", "votes", ",", "\n", "biases", "=", "biases_replicated", ",", "\n", "logit_shape", "=", "logit_shape", ",", "\n", "num_dims", "=", "6", ",", "\n", "input_dim", "=", "self", ".", "input_num_capsule", ",", "\n", "output_dim", "=", "self", ".", "num_capsule", ",", "\n", "num_routing", "=", "self", ".", "routings", ")", "\n", "\n", "a2", "=", "tf", ".", "transpose", "(", "activations", ",", "[", "0", ",", "3", ",", "4", ",", "1", ",", "2", "]", ")", "\n", "return", "a2", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.ConvCapsuleLayer3D.compute_output_shape": [[298, 306], ["range", "len", "keras.utils.conv_utils.conv_output_length", "new_space.append", "tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "space", "=", "input_shape", "[", "1", ":", "-", "2", "]", "\n", "new_space", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "space", ")", ")", ":", "\n", "            ", "new_dim", "=", "conv_output_length", "(", "space", "[", "i", "]", ",", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "padding", ",", "stride", "=", "self", ".", "strides", ",", "dilation", "=", "1", ")", "\n", "new_space", ".", "append", "(", "new_dim", ")", "\n", "\n", "", "return", "(", "input_shape", "[", "0", "]", ",", ")", "+", "tuple", "(", "new_space", ")", "+", "(", "self", ".", "num_capsule", ",", "self", ".", "num_atoms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.ConvCapsuleLayer3D.get_config": [[307, 319], ["super().get_config", "dict", "keras.initializers.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'kernel_size'", ":", "self", ".", "kernel_size", ",", "\n", "'num_capsule'", ":", "self", ".", "num_capsule", ",", "\n", "'num_atoms'", ":", "self", ".", "num_atoms", ",", "\n", "'strides'", ":", "self", ".", "strides", ",", "\n", "'padding'", ":", "self", ".", "padding", ",", "\n", "'routings'", ":", "self", ".", "routings", ",", "\n", "'kernel_initializer'", ":", "initializers", ".", "serialize", "(", "self", ".", "kernel_initializer", ")", "\n", "}", "\n", "base_config", "=", "super", "(", "ConvCapsuleLayer3D", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.DenseCaps.__init__": [[379, 400], ["keras.layers.Layer.__init__", "keras.initializers.get", "keras.regularizers.get", "keras.regularizers.get", "keras.constraints.get", "keras.layers.InputSpec", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_j", ",", "n_j", ",", "\n", "r_num", "=", "1", ",", "\n", "b_alphas", "=", "[", "8", ",", "8", ",", "8", "]", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "'input_shape'", "not", "in", "kwargs", "and", "'input_dim'", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'input_shape'", "]", "=", "(", "kwargs", ".", "pop", "(", "'input_dim'", ")", ",", ")", "\n", "", "super", "(", "DenseCaps", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "ch_j", "=", "ch_j", "# number of capsules in layer J", "\n", "self", ".", "n_j", "=", "n_j", "# number of neurons in a capsule in J", "\n", "self", ".", "r_num", "=", "r_num", "\n", "self", ".", "b_alphas", "=", "b_alphas", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "kernel_regularizer", "=", "regularizers", ".", "get", "(", "kernel_regularizer", ")", "\n", "self", ".", "activity_regularizer", "=", "regularizers", ".", "get", "(", "activity_regularizer", ")", "\n", "self", ".", "kernel_constraint", "=", "constraints", ".", "get", "(", "kernel_constraint", ")", "\n", "self", ".", "input_spec", "=", "InputSpec", "(", "min_ndim", "=", "3", ")", "\n", "self", ".", "supports_masking", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.DenseCaps.build": [[401, 413], ["DeepCapsKerasLayers.DenseCaps.add_weight"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "ch_i", ",", "self", ".", "n_i", "=", "input_shape", "[", "1", ":", "]", "\n", "\n", "self", ".", "w_shape", "=", "(", "self", ".", "ch_i", ",", "self", ".", "n_i", ",", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", "\n", "\n", "self", ".", "w", "=", "self", ".", "add_weight", "(", "shape", "=", "self", ".", "w_shape", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'kernel'", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.DenseCaps.call": [[414, 470], ["keras.backend.dot", "DeepCapsKerasLayers.squeeze", "keras.backend.reshape", "tensorflow.transpose", "keras.backend.reshape", "keras.backend.reshape", "keras.backend.reshape", "keras.backend.reshape", "keras.backend.reshape", "keras.backend.reshape", "tensorflow.matmul", "keras.backend.reshape", "keras.backend.stop_gradient", "range", "DeepCapsKerasLayers.DenseCaps.call.rt"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.squeeze"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "r_num", "==", "1", ":", "\n", "            ", "outputs", "=", "K", ".", "dot", "(", "K", ".", "reshape", "(", "inputs", ",", "(", "-", "1", ",", "self", ".", "ch_i", "*", "self", ".", "n_i", ")", ")", ",", "\n", "K", ".", "reshape", "(", "self", ".", "w", ",", "(", "self", ".", "ch_i", "*", "self", ".", "n_i", ",", "\n", "self", ".", "ch_j", "*", "self", ".", "n_j", ")", ")", ")", "\n", "outputs", "=", "squeeze", "(", "K", ".", "reshape", "(", "outputs", ",", "(", "-", "1", ",", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "wr", "=", "K", ".", "reshape", "(", "self", ".", "w", ",", "(", "self", ".", "ch_i", ",", "self", ".", "n_i", ",", "self", ".", "ch_j", "*", "self", ".", "n_j", ")", ")", "\n", "\n", "u", "=", "tf", ".", "transpose", "(", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "inputs", ",", "[", "1", ",", "0", ",", "2", "]", ")", ",", "wr", ")", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "u", "=", "K", ".", "reshape", "(", "u", ",", "(", "-", "1", ",", "self", ".", "ch_i", ",", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", ")", "\n", "\n", "def", "rt", "(", "ub", ")", ":", "\n", "                ", "ub", "=", "K", ".", "reshape", "(", "ub", ",", "(", "-", "1", ",", "self", ".", "ch_i", ",", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", ")", "\n", "ub_wo_g", "=", "K", ".", "stop_gradient", "(", "ub", ")", "\n", "b", "=", "0.0", "\n", "for", "r", "in", "range", "(", "self", ".", "r_num", ")", ":", "\n", "                    ", "if", "r", ">", "0", ":", "\n", "                        ", "c", "=", "K", ".", "expand_dims", "(", "K", ".", "softmax", "(", "b", "*", "self", ".", "b_alphas", "[", "r", "]", ")", ")", "*", "self", ".", "ch_j", "# distribution of weighs of capsules in I across capsules in J", "\n", "c", "=", "K", ".", "stop_gradient", "(", "c", ")", "\n", "", "else", ":", "\n", "                        ", "c", "=", "1.0", "\n", "\n", "", "if", "r", "==", "self", ".", "r_num", "-", "1", ":", "\n", "                        ", "cub", "=", "c", "*", "ub", "\n", "", "else", ":", "\n", "                        ", "cub", "=", "c", "*", "ub_wo_g", "\n", "", "s", "=", "K", ".", "sum", "(", "cub", ",", "axis", "=", "-", "3", ")", "# vectors of capsules in J", "\n", "v", "=", "squeeze", "(", "s", ")", "# squeezed vectors of capsules in J", "\n", "if", "r", "==", "self", ".", "r_num", "-", "1", ":", "\n", "                        ", "break", "\n", "\n", "", "v", "=", "K", ".", "stop_gradient", "(", "v", ")", "\n", "\n", "a", "=", "tf", ".", "einsum", "(", "'bjk,bijk->bij'", ",", "v", ",", "ub", ")", "# a = v dot u", "\n", "# a = K.matmul(K.reshape(v, (-1, 1, J, 1, n_j)),", "\n", "#             K.reshape(u, (-1, I, J, n_j, 1))).reshape((-1, I, J))", "\n", "\n", "b", "=", "b", "+", "a", "# increase those b[i,j] where v[j] dot b[i,j] is larger", "\n", "", "return", "v", "\n", "\n", "", "u", "=", "K", ".", "reshape", "(", "u", ",", "(", "-", "1", ",", "self", ".", "ch_i", "*", "self", ".", "ch_j", "*", "self", ".", "n_j", ")", ")", "\n", "\n", "global", "useGPU", "\n", "\n", "if", "useGPU", ":", "\n", "                ", "outputs", "=", "rt", "(", "u", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "tf", ".", "map_fn", "(", "rt", ",", "u", ",", "\n", "parallel_iterations", "=", "100", ",", "back_prop", "=", "True", ",", "\n", "infer_shape", "=", "False", ")", "\n", "\n", "", "outputs", "=", "K", ".", "reshape", "(", "outputs", ",", "(", "-", "1", ",", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.DenseCaps.compute_output_shape": [[471, 473], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.DenseCaps.get_config": [[474, 487], ["super().get_config", "dict", "keras.initializers.serialize", "keras.regularizers.serialize", "keras.regularizers.serialize", "keras.constraints.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'ch_j'", ":", "self", ".", "ch_j", ",", "\n", "'n_j'", ":", "self", ".", "n_j", ",", "\n", "'r_num'", ":", "self", ".", "r_num", ",", "\n", "'b_alphas'", ":", "self", ".", "b_alphas", ",", "\n", "'kernel_initializer'", ":", "initializers", ".", "serialize", "(", "self", ".", "kernel_initializer", ")", ",", "\n", "'kernel_regularizer'", ":", "regularizers", ".", "serialize", "(", "self", ".", "kernel_regularizer", ")", ",", "\n", "'activity_regularizer'", ":", "regularizers", ".", "serialize", "(", "self", ".", "activity_regularizer", ")", ",", "\n", "'kernel_constraint'", ":", "constraints", ".", "serialize", "(", "self", ".", "kernel_constraint", ")", ",", "\n", "}", "\n", "base_config", "=", "super", "(", "DenseCaps", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.DClassCaps.__init__": [[491, 500], ["keras.layers.Layer.__init__", "keras.initializers.get"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_capsule", ",", "dim_capsule", ",", "channels", ",", "routings", "=", "3", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DClassCaps", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_capsule", "=", "num_capsule", "\n", "self", ".", "dim_capsule", "=", "dim_capsule", "\n", "self", ".", "routings", "=", "routings", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.DClassCaps.build": [[501, 526], ["len", "DeepCapsKerasLayers.DClassCaps.add_weight", "DeepCapsKerasLayers.DClassCaps.add_weight", "DeepCapsKerasLayers.DClassCaps.add_weight", "DeepCapsKerasLayers.DClassCaps.add_weight", "int"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", ">=", "3", ",", "\"The input Tensor should have shape=[None, input_num_capsule, input_dim_capsule]\"", "\n", "self", ".", "input_num_capsule", "=", "input_shape", "[", "1", "]", "\n", "self", ".", "input_dim_capsule", "=", "input_shape", "[", "2", "]", "\n", "\n", "if", "(", "self", ".", "channels", "!=", "0", ")", ":", "\n", "            ", "assert", "int", "(", "self", ".", "input_num_capsule", "/", "self", ".", "channels", ")", "/", "(", "self", ".", "input_num_capsule", "/", "self", ".", "channels", ")", "==", "1", ",", "\"error\"", "\n", "self", ".", "W", "=", "self", ".", "add_weight", "(", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "channels", ",", "\n", "self", ".", "dim_capsule", ",", "self", ".", "input_dim_capsule", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'W'", ")", "\n", "\n", "self", ".", "B", "=", "self", ".", "add_weight", "(", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'B'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "self", ".", "add_weight", "(", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "input_num_capsule", ",", "\n", "self", ".", "dim_capsule", ",", "self", ".", "input_dim_capsule", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'W'", ")", "\n", "self", ".", "B", "=", "self", ".", "add_weight", "(", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'B'", ")", "\n", "\n", "", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.DClassCaps.call": [[527, 575], ["keras.backend.expand_dims", "keras.backend.tile", "keras.backend.map_fn", "tensorflow.zeros", "range", "keras.backend.repeat_elements", "tensorflow.nn.softmax", "DeepCapsKerasLayers.squash", "int", "keras.backend.batch_dot", "keras.backend.batch_dot", "keras.backend.batch_dot", "keras.backend.shape"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.softmax", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "None", ")", ":", "\n", "# inputs.shape=[None, input_num_capsule, input_dim_capsule]", "\n", "# inputs_expand.shape=[None, 1, input_num_capsule, input_dim_capsule]", "\n", "        ", "inputs_expand", "=", "K", ".", "expand_dims", "(", "inputs", ",", "1", ")", "\n", "\n", "# Replicate num_capsule dimension to prepare being multiplied by W", "\n", "# inputs_tiled.shape=[None, num_capsule, input_num_capsule, input_dim_capsule]", "\n", "inputs_tiled", "=", "K", ".", "tile", "(", "inputs_expand", ",", "[", "1", ",", "self", ".", "num_capsule", ",", "1", ",", "1", "]", ")", "\n", "\n", "if", "(", "self", ".", "channels", "!=", "0", ")", ":", "\n", "            ", "W2", "=", "K", ".", "repeat_elements", "(", "self", ".", "W", ",", "int", "(", "self", ".", "input_num_capsule", "/", "self", ".", "channels", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "W2", "=", "self", ".", "W", "\n", "# Compute `inputs * W` by scanning inputs_tiled on dimension 0.", "\n", "# x.shape=[num_capsule, input_num_capsule, input_dim_capsule]", "\n", "# W.shape=[num_capsule, input_num_capsule, dim_capsule, input_dim_capsule]", "\n", "# Regard the first two dimensions as `batch` dimension,", "\n", "# then matmul: [input_dim_capsule] x [dim_capsule, input_dim_capsule]^T -> [dim_capsule].", "\n", "# inputs_hat.shape = [None, num_capsule, input_num_capsule, dim_capsule]", "\n", "", "inputs_hat", "=", "K", ".", "map_fn", "(", "lambda", "x", ":", "K", ".", "batch_dot", "(", "x", ",", "W2", ",", "[", "2", ",", "3", "]", ")", ",", "elems", "=", "inputs_tiled", ")", "\n", "\n", "# Begin: Routing algorithm ---------------------------------------------------------------------#", "\n", "# The prior for coupling coefficient, initialized as zeros.", "\n", "# b.shape = [None, self.num_capsule, self.input_num_capsule].", "\n", "b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "K", ".", "shape", "(", "inputs_hat", ")", "[", "0", "]", ",", "self", ".", "num_capsule", ",", "self", ".", "input_num_capsule", "]", ")", "\n", "\n", "assert", "self", ".", "routings", ">", "0", ",", "'The routings should be > 0.'", "\n", "for", "i", "in", "range", "(", "self", ".", "routings", ")", ":", "\n", "# c.shape=[batch_size, num_capsule, input_num_capsule]", "\n", "            ", "c", "=", "tf", ".", "nn", ".", "softmax", "(", "b", ",", "dim", "=", "1", ")", "\n", "\n", "# c.shape =  [batch_size, num_capsule, input_num_capsule]", "\n", "# inputs_hat.shape=[None, num_capsule, input_num_capsule, dim_capsule]", "\n", "# The first two dimensions as `batch` dimension,", "\n", "# then matmal: [input_num_capsule] x [input_num_capsule, dim_capsule] -> [dim_capsule].", "\n", "# outputs.shape=[None, num_capsule, dim_capsule]", "\n", "outputs", "=", "squash", "(", "K", ".", "batch_dot", "(", "c", ",", "inputs_hat", ",", "[", "2", ",", "2", "]", ")", "+", "self", ".", "B", ")", "# [None, 10, 16]", "\n", "\n", "if", "i", "<", "self", ".", "routings", "-", "1", ":", "\n", "# outputs.shape =  [None, num_capsule, dim_capsule]", "\n", "# inputs_hat.shape=[None, num_capsule, input_num_capsule, dim_capsule]", "\n", "# The first two dimensions as `batch` dimension,", "\n", "# then matmal: [dim_capsule] x [input_num_capsule, dim_capsule]^T -> [input_num_capsule].", "\n", "# b.shape=[batch_size, num_capsule, input_num_capsule]", "\n", "                ", "b", "+=", "K", ".", "batch_dot", "(", "outputs", ",", "inputs_hat", ",", "[", "2", ",", "3", "]", ")", "\n", "# End: Routing algorithm -----------------------------------------------------------------------#", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.DClassCaps.compute_output_shape": [[576, 578], ["tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "None", ",", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.squeeze": [[13, 16], ["keras.backend.sum", "keras.backend.square", "keras.backend.sqrt", "keras.backend.epsilon"], "function", ["None"], ["def", "squeeze", "(", "s", ")", ":", "\n", "    ", "sq", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "s", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "(", "sq", "/", "(", "1", "+", "sq", ")", ")", "*", "(", "s", "/", "K", ".", "sqrt", "(", "sq", "+", "K", ".", "epsilon", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.update_routing": [[321, 375], ["tensorflow.transpose", "tf.transpose.get_shape", "tensorflow.TensorArray", "tensorflow.fill", "tensorflow.constant", "tensorflow.while_loop", "keras.backend.cast", "keras.backend.cast", "tf.fill.get_shape", "print", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.transpose", "DeepCapsKerasLayers.squash", "activations.write.write", "keras.backend.expand_dims", "numpy.ones().tolist", "tensorflow.tile", "tensorflow.reduce_sum", "activations.write.read", "activations.write.read", "NotImplementedError", "tensorflow.reduce_sum", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.softmax", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash"], ["", "", "def", "update_routing", "(", "votes", ",", "biases", ",", "logit_shape", ",", "num_dims", ",", "input_dim", ",", "output_dim", ",", "\n", "num_routing", ")", ":", "\n", "    ", "if", "num_dims", "==", "6", ":", "\n", "        ", "votes_t_shape", "=", "[", "3", ",", "0", ",", "1", ",", "2", ",", "4", ",", "5", "]", "\n", "r_t_shape", "=", "[", "1", ",", "2", ",", "3", ",", "0", ",", "4", ",", "5", "]", "\n", "", "elif", "num_dims", "==", "4", ":", "\n", "        ", "votes_t_shape", "=", "[", "3", ",", "0", ",", "1", ",", "2", "]", "\n", "r_t_shape", "=", "[", "1", ",", "2", ",", "3", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Not implemented'", ")", "\n", "\n", "", "votes_trans", "=", "tf", ".", "transpose", "(", "votes", ",", "votes_t_shape", ")", "\n", "_", ",", "_", ",", "_", ",", "height", ",", "width", ",", "caps", "=", "votes_trans", ".", "get_shape", "(", ")", "\n", "\n", "def", "_body", "(", "i", ",", "logits", ",", "activations", ")", ":", "\n", "        ", "\"\"\"Routing while loop.\"\"\"", "\n", "# route: [batch, input_dim, output_dim, ...]", "\n", "a", ",", "b", ",", "c", ",", "d", ",", "e", "=", "logits", ".", "get_shape", "(", ")", "\n", "a", "=", "logit_shape", "[", "0", "]", "\n", "b", "=", "logit_shape", "[", "1", "]", "\n", "c", "=", "logit_shape", "[", "2", "]", "\n", "d", "=", "logit_shape", "[", "3", "]", "\n", "e", "=", "logit_shape", "[", "4", "]", "\n", "print", "(", "logit_shape", ")", "\n", "logit_temp", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "a", ",", "b", ",", "-", "1", "]", ")", "\n", "route_temp", "=", "tf", ".", "nn", ".", "softmax", "(", "logit_temp", ",", "dim", "=", "-", "1", ")", "\n", "route", "=", "tf", ".", "reshape", "(", "route_temp", ",", "[", "a", ",", "b", ",", "c", ",", "d", ",", "e", "]", ")", "\n", "preactivate_unrolled", "=", "route", "*", "votes_trans", "\n", "preact_trans", "=", "tf", ".", "transpose", "(", "preactivate_unrolled", ",", "r_t_shape", ")", "\n", "preactivate", "=", "tf", ".", "reduce_sum", "(", "preact_trans", ",", "axis", "=", "1", ")", "+", "biases", "\n", "# activation = _squash(preactivate)", "\n", "activation", "=", "squash", "(", "preactivate", ",", "axis", "=", "[", "-", "1", ",", "-", "2", ",", "-", "3", "]", ")", "\n", "activations", "=", "activations", ".", "write", "(", "i", ",", "activation", ")", "\n", "\n", "act_3d", "=", "K", ".", "expand_dims", "(", "activation", ",", "1", ")", "\n", "tile_shape", "=", "np", ".", "ones", "(", "num_dims", ",", "dtype", "=", "np", ".", "int32", ")", ".", "tolist", "(", ")", "\n", "tile_shape", "[", "1", "]", "=", "input_dim", "\n", "act_replicated", "=", "tf", ".", "tile", "(", "act_3d", ",", "tile_shape", ")", "\n", "distances", "=", "tf", ".", "reduce_sum", "(", "votes", "*", "act_replicated", ",", "axis", "=", "3", ")", "\n", "logits", "+=", "distances", "\n", "return", "(", "i", "+", "1", ",", "logits", ",", "activations", ")", "\n", "\n", "", "activations", "=", "tf", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "num_routing", ",", "clear_after_read", "=", "False", ")", "\n", "logits", "=", "tf", ".", "fill", "(", "logit_shape", ",", "0.0", ")", "\n", "\n", "i", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "_", ",", "logits", ",", "activations", "=", "tf", ".", "while_loop", "(", "\n", "lambda", "i", ",", "logits", ",", "activations", ":", "i", "<", "num_routing", ",", "\n", "_body", ",", "\n", "loop_vars", "=", "[", "i", ",", "logits", ",", "activations", "]", ",", "\n", "swap_memory", "=", "True", ")", "\n", "a", "=", "K", ".", "cast", "(", "activations", ".", "read", "(", "num_routing", "-", "1", ")", ",", "dtype", "=", "'float32'", ")", "\n", "return", "K", ".", "cast", "(", "activations", ".", "read", "(", "num_routing", "-", "1", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers._squash": [[580, 584], ["tensorflow.norm"], "function", ["None"], ["", "", "def", "_squash", "(", "input_tensor", ")", ":", "\n", "    ", "norm", "=", "tf", ".", "norm", "(", "input_tensor", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "norm_squared", "=", "norm", "*", "norm", "\n", "return", "(", "input_tensor", "/", "norm", ")", "*", "(", "norm_squared", "/", "(", "1", "+", "norm_squared", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.squash": [[586, 590], ["keras.backend.sum", "keras.backend.square", "keras.backend.sqrt"], "function", ["None"], ["", "def", "squash", "(", "vectors", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "s_squared_norm", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "vectors", ")", ",", "axis", ",", "keepdims", "=", "True", ")", "\n", "scale", "=", "s_squared_norm", "/", "(", "1", "+", "s_squared_norm", ")", "/", "K", ".", "sqrt", "(", "s_squared_norm", ")", "\n", "return", "scale", "*", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.ConvertToCaps.__init__": [[17, 19], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvertToCaps", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "# self.input_spec = InputSpec(min_ndim=2)", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.ConvertToCaps.call": [[28, 32], ["input.get_shape", "tensorflow.reshape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ")", ":", "\n", "        ", "input_shape", "=", "input", ".", "get_shape", "(", ")", "\n", "#return K.expand_dims(inputs, 1 if cf else -1)", "\n", "return", "tf", ".", "reshape", "(", "input", ",", "shape", "=", "(", "input_shape", "[", "0", ":", "3", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.ConvertToCaps.get_config": [[33, 39], ["super().get_config", "dict", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'input_spec'", ":", "5", "\n", "}", "\n", "base_config", "=", "super", "(", "ConvertToCaps", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.Conv2DCaps.__init__": [[43, 78], ["object.__init__", "keras.utils.conv_utils.normalize_tuple", "keras.utils.conv_utils.normalize_tuple", "keras.utils.conv_utils.normalize_padding", "tensorflow.keras.initializers.get", "tensorflow.keras.initializers.get", "tensorflow.keras.regularizers.get", "tensorflow.keras.regularizers.get", "tensorflow.keras.constraints.get", "tensorflow.keras.layers.InputSpec", "keras.backend.common.normalize_data_format", "keras.utils.conv_utils.normalize_data_format"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_j", ",", "n_j", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "r_num", "=", "1", ",", "\n", "b_alphas", "=", "[", "8", ",", "8", ",", "8", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Conv2DCaps", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "rank", "=", "2", "\n", "self", ".", "ch_j", "=", "ch_j", "# Number of capsules in layer J", "\n", "self", ".", "n_j", "=", "n_j", "# Number of neurons in a capsule in J", "\n", "self", ".", "kernel_size", "=", "conv_utils", ".", "normalize_tuple", "(", "kernel_size", ",", "rank", ",", "'kernel_size'", ")", "\n", "self", ".", "stride", "=", "conv_utils", ".", "normalize_tuple", "(", "stride", ",", "rank", ",", "'stride'", ")", "\n", "self", ".", "r_num", "=", "r_num", "\n", "self", ".", "b_alphas", "=", "b_alphas", "\n", "self", ".", "padding", "=", "conv_utils", ".", "normalize_padding", "(", "padding", ")", "\n", "try", ":", "\n", "            ", "self", ".", "data_format", "=", "k", ".", "backend", ".", "common", ".", "normalize_data_format", "(", "data_format", ")", "\n", "", "except", "AttributeError", ":", "# different version of Keras", "\n", "            ", "self", ".", "data_format", "=", "conv_utils", ".", "normalize_data_format", "(", "data_format", ")", "\n", "\n", "", "self", ".", "dilation_rate", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "kernel_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "bias_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "self", ".", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "get", "(", "kernel_regularizer", ")", "\n", "self", ".", "activity_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "get", "(", "activity_regularizer", ")", "\n", "self", ".", "kernel_constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "get", "(", "kernel_constraint", ")", "\n", "self", ".", "input_spec", "=", "tf", ".", "keras", ".", "layers", ".", "InputSpec", "(", "ndim", "=", "rank", "+", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.Conv2DCaps.__call__": [[83, 129], ["input.get_shape", "print", "tensorflow.compat.v1.get_variable", "keras.utils.conv_utils.conv_output_length", "keras.utils.conv_utils.conv_output_length", "tensorflow.keras.backend.conv2d", "tensorflow.squeeze", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.squeeze"], ["", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "#assert input.get_shape() == [cfg.batch_size, self.in_size, self.in_size, self.prev_num_outputs_veclen]", "\n", "        ", "input_shape", "=", "input", ".", "get_shape", "(", ")", "\n", "print", "(", "input_shape", ")", "\n", "\n", "self", ".", "h_i", ",", "self", ".", "w_i", ",", "self", ".", "ch_i", ",", "self", ".", "n_i", "=", "input_shape", "[", "1", ":", "5", "]", "\n", "\n", "self", ".", "h_j", ",", "self", ".", "w_j", "=", "[", "conv_utils", ".", "conv_output_length", "(", "input_shape", "[", "i", "+", "1", "]", ",", "\n", "self", ".", "kernel_size", "[", "i", "]", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "stride", "=", "self", ".", "stride", "[", "i", "]", ",", "\n", "dilation", "=", "self", ".", "dilation_rate", "[", "i", "]", ")", "for", "i", "in", "(", "0", ",", "1", ")", "]", "\n", "\n", "self", ".", "ah_j", ",", "self", ".", "aw_j", "=", "[", "conv_utils", ".", "conv_output_length", "(", "input_shape", "[", "i", "+", "1", "]", ",", "\n", "self", ".", "kernel_size", "[", "i", "]", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "self", ".", "dilation_rate", "[", "i", "]", ")", "for", "i", "in", "(", "0", ",", "1", ")", "]", "\n", "\n", "self", ".", "w_shape", "=", "self", ".", "kernel_size", "+", "(", "self", ".", "ch_i", ",", "self", ".", "n_i", ",", "\n", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", "\n", "\n", "#        self.w = self.add_weight(shape=self.w_shape,", "\n", "#                                 initializer=self.kernel_initializer,", "\n", "#                                 name='kernel',", "\n", "#                                 regularizer=self.kernel_regularizer,", "\n", "#                                 constraint=self.kernel_constraint)", "\n", "self", ".", "w", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "'Weight'", ",", "shape", "=", "self", ".", "w_shape", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ")", "#self.kernel_initializer)", "\n", "\n", "#self.built = True", "\n", "\n", "\n", "if", "self", ".", "r_num", "==", "1", ":", "\n", "# if there is no routing (and this is so when r_num is 1 and all c are equal)", "\n", "# then this is a common convolution", "\n", "            ", "outputs", "=", "tf", ".", "keras", ".", "backend", ".", "conv2d", "(", "tf", ".", "reshape", "(", "input", ",", "shape", "=", "(", "-", "1", ",", "self", ".", "h_i", ",", "self", ".", "w_i", ",", "self", ".", "ch_i", "*", "self", ".", "n_i", ")", ")", ",", "\n", "tf", ".", "reshape", "(", "self", ".", "w", ",", "shape", "=", "(", "self", ".", "kernel_size", "+", "(", "self", ".", "ch_i", "*", "self", ".", "n_i", ",", "self", ".", "ch_j", "*", "self", ".", "n_j", ")", ")", ")", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "strides", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "dilation_rate", "=", "self", ".", "dilation_rate", ")", "\n", "\n", "outputs", "=", "tf", ".", "squeeze", "(", "tf", ".", "reshape", "(", "outputs", ",", "shape", "=", "(", "(", "-", "1", ",", "self", ".", "h_j", ",", "self", ".", "w_j", ",", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.Conv2DCaps.compute_output_shape": [[130, 132], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "self", ".", "h_j", ",", "self", ".", "w_j", ",", "self", ".", "ch_j", ",", "self", ".", "n_j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.Conv2DCaps.get_config": [[133, 150], ["super().get_config", "dict", "tensorflow.initializers.serialize", "tensorflow.regularizers.serialize", "tensorflow.regularizers.serialize", "tensorflow.constraints.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'ch_j'", ":", "self", ".", "ch_j", ",", "\n", "'n_j'", ":", "self", ".", "n_j", ",", "\n", "'kernel_size'", ":", "self", ".", "kernel_size", ",", "\n", "'strides'", ":", "self", ".", "stride", ",", "\n", "'b_alphas'", ":", "self", ".", "b_alphas", ",", "\n", "'padding'", ":", "self", ".", "padding", ",", "\n", "'data_format'", ":", "self", ".", "data_format", ",", "\n", "'dilation_rate'", ":", "self", ".", "dilation_rate", ",", "\n", "'kernel_initializer'", ":", "tf", ".", "initializers", ".", "serialize", "(", "self", ".", "kernel_initializer", ")", ",", "\n", "'kernel_regularizer'", ":", "tf", ".", "regularizers", ".", "serialize", "(", "self", ".", "kernel_regularizer", ")", ",", "\n", "'activity_regularizer'", ":", "tf", ".", "regularizers", ".", "serialize", "(", "self", ".", "activity_regularizer", ")", ",", "\n", "'kernel_constraint'", ":", "tf", ".", "constraints", ".", "serialize", "(", "self", ".", "kernel_constraint", ")", "\n", "}", "\n", "base_config", "=", "super", "(", "Conv2DCaps", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.ConvCapsuleLayer3D.__init__": [[157, 165], ["tensorflow.keras.initializers.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "num_capsule", ",", "num_atoms", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "routings", "=", "3", ",", "kernel_initializer", "=", "'he_normal'", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_capsule", "=", "num_capsule", "\n", "self", ".", "num_atoms", "=", "num_atoms", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "routings", "=", "routings", "\n", "self", ".", "kernel_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.ConvCapsuleLayer3D.__call__": [[166, 215], ["input.get_shape", "print", "tensorflow.compat.v1.get_variable", "tensorflow.compat.v1.get_variable", "tensorflow.transpose", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape.set_shape", "keras.backend.conv3d", "tensorflow.shape", "tensorflow.transpose.get_shape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape.set_shape", "tensorflow.stack", "tensorflow.tile", "DeepCapsLayers.update_routing", "tensorflow.transpose", "len", "tensorflow.compat.v1.initializers.constant"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.update_routing"], ["", "def", "__call__", "(", "self", ",", "input", ",", "training", "=", "None", ")", ":", "\n", "\n", "        ", "input_shape", "=", "input", ".", "get_shape", "(", ")", "\n", "print", "(", "input_shape", ")", "\n", "assert", "len", "(", "input_shape", ")", "==", "5", "\n", "self", ".", "input_height", "=", "input_shape", "[", "1", "]", "\n", "self", ".", "input_width", "=", "input_shape", "[", "2", "]", "\n", "self", ".", "input_num_capsule", "=", "input_shape", "[", "3", "]", "\n", "self", ".", "input_num_atoms", "=", "input_shape", "[", "4", "]", "\n", "\n", "# Transform matrix", "\n", "self", ".", "W", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "'W'", ",", "shape", "=", "[", "self", ".", "input_num_atoms", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "num_capsule", "*", "self", ".", "num_atoms", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ")", "#self.kernel_initializer)", "\n", "\n", "self", ".", "b", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "'b'", ",", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "num_atoms", ",", "1", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "compat", ".", "v1", ".", "initializers", ".", "constant", "(", "0.1", ")", ")", "\n", "\n", "input_transposed", "=", "tf", ".", "transpose", "(", "input", ",", "[", "0", ",", "3", ",", "4", ",", "1", ",", "2", "]", ")", "\n", "input_shape", "=", "tf", ".", "shape", "(", "input_transposed", ")", "\n", "input_tensor_reshaped", "=", "tf", ".", "reshape", "(", "input", ",", "shape", "=", "(", "input_shape", "[", "0", "]", ",", "1", ",", "self", ".", "input_num_capsule", "*", "self", ".", "input_num_atoms", ",", "self", ".", "input_height", ",", "self", ".", "input_width", ")", ")", "\n", "\n", "input_tensor_reshaped", ".", "set_shape", "(", "(", "None", ",", "1", ",", "self", ".", "input_num_capsule", "*", "self", ".", "input_num_atoms", ",", "self", ".", "input_height", ",", "self", ".", "input_width", ")", ")", "\n", "\n", "conv", "=", "K", ".", "conv3d", "(", "input_tensor_reshaped", ",", "self", ".", "W", ",", "strides", "=", "(", "self", ".", "input_num_atoms", ",", "self", ".", "strides", ",", "self", ".", "strides", ")", ",", "padding", "=", "'same'", ",", "data_format", "=", "'channels_first'", ")", "\n", "#conv = tf.nn.conv3d(input_tensor_reshaped, self.W, strides=(1, self.input_num_atoms, self.strides, self.strides, 1), padding=self.padding, data_format='NCDHW')", "\n", "#print(\"conv\"+str(conv.get_shape().as_list())+\"\\n\\n\")", "\n", "votes_shape", "=", "tf", ".", "shape", "(", "conv", ")", "\n", "#print(conv.get_shape().as_list())", "\n", "_", ",", "_", ",", "_", ",", "conv_height", ",", "conv_width", "=", "conv", ".", "get_shape", "(", ")", "\n", "conv", "=", "tf", ".", "transpose", "(", "conv", ",", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "#print(conv.get_shape().as_list())", "\n", "#print([input_shape[0], self.input_num_capsule, self.num_capsule, self.num_atoms, votes_shape[3], votes_shape[4]])", "\n", "votes", "=", "tf", ".", "reshape", "(", "conv", ",", "shape", "=", "(", "input_shape", "[", "0", "]", ",", "self", ".", "input_num_capsule", ",", "self", ".", "num_capsule", ",", "self", ".", "num_atoms", ",", "votes_shape", "[", "3", "]", ",", "votes_shape", "[", "4", "]", ")", ")", "\n", "votes", ".", "set_shape", "(", "(", "None", ",", "self", ".", "input_num_capsule", ",", "self", ".", "num_capsule", ",", "self", ".", "num_atoms", ",", "conv_height", ".", "value", ",", "conv_width", ".", "value", ")", ")", "\n", "\n", "logit_shape", "=", "tf", ".", "stack", "(", "[", "input_shape", "[", "0", "]", ",", "self", ".", "input_num_capsule", ",", "self", ".", "num_capsule", ",", "votes_shape", "[", "3", "]", ",", "votes_shape", "[", "4", "]", "]", ")", "\n", "biases_replicated", "=", "tf", ".", "tile", "(", "self", ".", "b", ",", "[", "1", ",", "1", ",", "conv_height", ".", "value", ",", "conv_width", ".", "value", "]", ")", "\n", "\n", "activations", "=", "update_routing", "(", "\n", "votes", "=", "votes", ",", "\n", "biases", "=", "biases_replicated", ",", "\n", "logit_shape", "=", "logit_shape", ",", "\n", "num_dims", "=", "6", ",", "\n", "input_dim", "=", "self", ".", "input_num_capsule", ",", "\n", "output_dim", "=", "self", ".", "num_capsule", ",", "\n", "num_routing", "=", "self", ".", "routings", ")", "\n", "\n", "a2", "=", "tf", ".", "transpose", "(", "activations", ",", "[", "0", ",", "3", ",", "4", ",", "1", ",", "2", "]", ")", "\n", "return", "a2", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.ConvCapsuleLayer3D.compute_output_shape": [[216, 224], ["range", "len", "tensorflow.conv_output_length", "new_space.append", "tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "space", "=", "input_shape", "[", "1", ":", "-", "2", "]", "\n", "new_space", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "space", ")", ")", ":", "\n", "            ", "new_dim", "=", "tf", ".", "conv_output_length", "(", "space", "[", "i", "]", ",", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "padding", ",", "stride", "=", "self", ".", "strides", ",", "dilation", "=", "1", ")", "\n", "new_space", ".", "append", "(", "new_dim", ")", "\n", "\n", "", "return", "(", "input_shape", "[", "0", "]", ",", ")", "+", "tuple", "(", "new_space", ")", "+", "(", "self", ".", "num_capsule", ",", "self", ".", "num_atoms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.ConvCapsuleLayer3D.get_config": [[225, 237], ["super().get_config", "dict", "tensorflow.compat.v1.initializers.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'kernel_size'", ":", "self", ".", "kernel_size", ",", "\n", "'num_capsule'", ":", "self", ".", "num_capsule", ",", "\n", "'num_atoms'", ":", "self", ".", "num_atoms", ",", "\n", "'strides'", ":", "self", ".", "strides", ",", "\n", "'padding'", ":", "self", ".", "padding", ",", "\n", "'routings'", ":", "self", ".", "routings", ",", "\n", "'kernel_initializer'", ":", "tf", ".", "compat", ".", "v1", ".", "initializers", ".", "serialize", "(", "self", ".", "kernel_initializer", ")", "\n", "}", "\n", "base_config", "=", "super", "(", "ConvCapsuleLayer3D", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.FlattenCaps.__init__": [[242, 245], ["keras.layers.InputSpec"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ")", ":", "\n", "        ", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "input_spec", "=", "InputSpec", "(", "min_ndim", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.FlattenCaps.compute_output_shape": [[246, 257], ["input.get_shape().as_list", "all", "ValueError", "numpy.prod", "input.get_shape", "str"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input", ")", ":", "\n", "#input_shape=[self.in_size, self.in_size]", "\n", "        ", "input_shape", "=", "input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "not", "all", "(", "input_shape", "[", "1", ":", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'The shape of the input to \"FlattenCaps\" '", "\n", "'is not fully defined '", "\n", "'(got '", "+", "str", "(", "input_shape", "[", "1", ":", "]", ")", "+", "'. '", "\n", "'Make sure to pass a complete \"input_shape\" '", "\n", "'or \"batch_input_shape\" argument to the first '", "\n", "'layer in your model.'", ")", "\n", "", "return", "(", "self", ".", "in_size", ",", "np", ".", "prod", "(", "input_shape", "[", "1", ":", "-", "1", "]", ")", ",", "self", ".", "in_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.FlattenCaps.__call__": [[258, 263], ["input.get_shape", "keras.backend.reshape", "print", "numpy.prod", "str", "keras.backend.reshape.get_shape().as_list", "keras.backend.reshape.get_shape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "        ", "shape", "=", "input", ".", "get_shape", "(", ")", "\n", "FlatCap", "=", "K", ".", "reshape", "(", "input", ",", "(", "-", "1", ",", "np", ".", "prod", "(", "shape", "[", "1", ":", "-", "1", "]", ")", ",", "shape", "[", "-", "1", "]", ")", ")", "#tf.reshape(input, shape=(cfg.batch_size, np.prod(shape[1:-1]), shape[-1]))", "\n", "print", "(", "\"FlatCaps: \"", "+", "str", "(", "FlatCap", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ")", "\n", "return", "FlatCap", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.DClassCaps.__init__": [[322, 330], ["tensorflow.keras.initializers.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_capsule", ",", "dim_capsule", ",", "channels", ",", "routings", "=", "3", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "num_capsule", "=", "num_capsule", "\n", "self", ".", "dim_capsule", "=", "dim_capsule", "\n", "self", ".", "routings", "=", "routings", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "kernel_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.DClassCaps.__call__": [[331, 402], ["input.get_shape().as_list", "keras.backend.expand_dims", "keras.backend.tile", "keras.backend.map_fn", "tensorflow.zeros", "range", "len", "tensorflow.compat.v1.get_variable", "tensorflow.compat.v1.get_variable", "tensorflow.compat.v1.get_variable", "tensorflow.compat.v1.get_variable", "keras.backend.repeat_elements", "tensorflow.nn.softmax", "DeepCapsLayers.squash", "input.get_shape", "int", "keras.backend.batch_dot", "keras.backend.batch_dot", "int", "keras.backend.batch_dot", "keras.backend.shape"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.softmax", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash"], ["", "def", "__call__", "(", "self", ",", "input", ",", "training", "=", "None", ")", ":", "\n", "        ", "input_shape", "=", "input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "assert", "len", "(", "input_shape", ")", ">=", "3", ",", "\"The input Tensor should have shape=[None, input_num_capsule, input_dim_capsule]\"", "\n", "self", ".", "input_num_capsule", "=", "input_shape", "[", "1", "]", "\n", "self", ".", "input_dim_capsule", "=", "input_shape", "[", "2", "]", "\n", "\n", "if", "(", "self", ".", "channels", "!=", "0", ")", ":", "\n", "            ", "assert", "int", "(", "self", ".", "input_num_capsule", "/", "self", ".", "channels", ")", "/", "(", "self", ".", "input_num_capsule", "/", "self", ".", "channels", ")", "==", "1", ",", "\"error\"", "\n", "self", ".", "W", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "'W'", ",", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "channels", ",", "\n", "self", ".", "dim_capsule", ",", "self", ".", "input_dim_capsule", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ")", "#self.kernel_initializer)", "\n", "\n", "self", ".", "B", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "'B'", ",", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "self", ".", "W", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "'W'", ",", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "input_num_capsule", ",", "\n", "self", ".", "dim_capsule", ",", "self", ".", "input_dim_capsule", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ")", "#self.kernel_initializer)", "\n", "\n", "self", ".", "B", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "'B'", ",", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ")", "\n", "\n", "# inputs.shape=[None, input_num_capsule, input_dim_capsule]", "\n", "# inputs_expand.shape=[None, 1, input_num_capsule, input_dim_capsule]", "\n", "", "inputs_expand", "=", "K", ".", "expand_dims", "(", "input", ",", "1", ")", "\n", "\n", "# Replicate num_capsule dimension to prepare being multiplied by W", "\n", "# inputs_tiled.shape=[None, num_capsule, input_num_capsule, input_dim_capsule]", "\n", "inputs_tiled", "=", "K", ".", "tile", "(", "inputs_expand", ",", "[", "1", ",", "self", ".", "num_capsule", ",", "1", ",", "1", "]", ")", "\n", "\n", "if", "(", "self", ".", "channels", "!=", "0", ")", ":", "\n", "            ", "W2", "=", "K", ".", "repeat_elements", "(", "self", ".", "W", ",", "int", "(", "self", ".", "input_num_capsule", "/", "self", ".", "channels", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "W2", "=", "self", ".", "W", "\n", "# Compute `inputs * W` by scanning inputs_tiled on dimension 0.", "\n", "# x.shape=[num_capsule, input_num_capsule, input_dim_capsule]", "\n", "# W.shape=[num_capsule, input_num_capsule, dim_capsule, input_dim_capsule]", "\n", "# Regard the first two dimensions as `batch` dimension,", "\n", "# then matmul: [input_dim_capsule] x [dim_capsule, input_dim_capsule]^T -> [dim_capsule].", "\n", "# inputs_hat.shape = [None, num_capsule, input_num_capsule, dim_capsule]", "\n", "", "inputs_hat", "=", "K", ".", "map_fn", "(", "lambda", "x", ":", "K", ".", "batch_dot", "(", "x", ",", "W2", ",", "[", "2", ",", "3", "]", ")", ",", "elems", "=", "inputs_tiled", ")", "\n", "\n", "# Begin: Routing algorithm ---------------------------------------------------------------------#", "\n", "# The prior for coupling coefficient, initialized as zeros.", "\n", "# b.shape = [None, self.num_capsule, self.input_num_capsule].", "\n", "b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "K", ".", "shape", "(", "inputs_hat", ")", "[", "0", "]", ",", "self", ".", "num_capsule", ",", "self", ".", "input_num_capsule", "]", ")", "\n", "\n", "assert", "self", ".", "routings", ">", "0", ",", "'The routings should be > 0.'", "\n", "for", "i", "in", "range", "(", "self", ".", "routings", ")", ":", "\n", "# c.shape=[batch_size, num_capsule, input_num_capsule]", "\n", "            ", "c", "=", "tf", ".", "nn", ".", "softmax", "(", "b", ",", "dim", "=", "1", ")", "\n", "\n", "# c.shape =  [batch_size, num_capsule, input_num_capsule]", "\n", "# inputs_hat.shape=[None, num_capsule, input_num_capsule, dim_capsule]", "\n", "# The first two dimensions as `batch` dimension,", "\n", "# then matmal: [input_num_capsule] x [input_num_capsule, dim_capsule] -> [dim_capsule].", "\n", "# outputs.shape=[None, num_capsule, dim_capsule]", "\n", "outputs", "=", "squash", "(", "K", ".", "batch_dot", "(", "c", ",", "inputs_hat", ",", "[", "2", ",", "2", "]", ")", "+", "self", ".", "B", ")", "# [None, 10, 16]", "\n", "\n", "if", "i", "<", "self", ".", "routings", "-", "1", ":", "\n", "# outputs.shape =  [None, num_capsule, dim_capsule]", "\n", "# inputs_hat.shape=[None, num_capsule, input_num_capsule, dim_capsule]", "\n", "# The first two dimensions as `batch` dimension,", "\n", "# then matmal: [dim_capsule] x [input_num_capsule, dim_capsule]^T -> [input_num_capsule].", "\n", "# b.shape=[batch_size, num_capsule, input_num_capsule]", "\n", "                ", "b", "+=", "K", ".", "batch_dot", "(", "outputs", ",", "inputs_hat", ",", "[", "2", ",", "3", "]", ")", "\n", "# End: Routing algorithm -----------------------------------------------------------------------#", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.DClassCaps.compute_output_shape": [[403, 405], ["tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "None", ",", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.Mask_CID.__call__": [[410, 431], ["isinstance", "tensorflow.range", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.keras.backend.argmax", "tensorflow.keras.backend.sqrt", "tensorflow.keras.backend.argmax", "len", "tensorflow.keras.backend.sum", "tensorflow.cast", "tensorflow.keras.backend.square", "tensorflow.shape"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "# true label is provided with shape = [None, n_classes], i.e. one-hot code.", "\n", "            ", "assert", "len", "(", "input", ")", "==", "2", "\n", "input", ",", "a", "=", "input", "\n", "mask", "=", "tf", ".", "keras", ".", "backend", ".", "argmax", "(", "a", ",", "1", ")", "\n", "", "else", ":", "# if no true label, mask by the max length of capsules. Mainly used for prediction", "\n", "# compute lengths of capsules", "\n", "            ", "x", "=", "tf", ".", "keras", ".", "backend", ".", "sqrt", "(", "tf", ".", "keras", ".", "backend", ".", "sum", "(", "tf", ".", "keras", ".", "backend", ".", "square", "(", "input", ")", ",", "-", "1", ")", ")", "\n", "# generate the mask which is a one-hot code.", "\n", "# mask.shape=[None, n_classes]=[None, num_capsule]", "\n", "mask", "=", "tf", ".", "keras", ".", "backend", ".", "argmax", "(", "x", ",", "1", ")", "\n", "\n", "", "increasing", "=", "tf", ".", "range", "(", "start", "=", "0", ",", "limit", "=", "tf", ".", "shape", "(", "input", ")", "[", "0", "]", ",", "delta", "=", "1", ")", "\n", "m", "=", "tf", ".", "stack", "(", "[", "increasing", ",", "tf", ".", "cast", "(", "mask", ",", "tf", ".", "int32", ")", "]", ",", "axis", "=", "1", ")", "\n", "# inputs.shape=[None, num_capsule, dim_capsule]", "\n", "# mask.shape=[None, num_capsule]", "\n", "# masked.shape=[None, num_capsule * dim_capsule]", "\n", "# x1 = tf.transpose(inputs, (0))", "\n", "masked", "=", "tf", ".", "gather_nd", "(", "input", ",", "m", ")", "\n", "\n", "return", "masked", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.Mask_CID.compute_output_shape": [[432, 437], ["isinstance", "tuple", "tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_shape", "[", "0", "]", ",", "tuple", ")", ":", "# true label provided", "\n", "            ", "return", "tuple", "(", "[", "None", ",", "input_shape", "[", "0", "]", "[", "2", "]", "]", ")", "\n", "", "else", ":", "# no true label provided", "\n", "            ", "return", "tuple", "(", "[", "None", ",", "input_shape", "[", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.update_routing": [[265, 319], ["tensorflow.transpose", "tf.transpose.get_shape", "tensorflow.TensorArray", "tensorflow.fill", "tensorflow.constant", "tensorflow.while_loop", "tensorflow.cast", "tf.fill.get_shape", "print", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.transpose", "DeepCapsLayers.squash", "activations.write.write", "tensorflow.expand_dims", "numpy.ones().tolist", "tensorflow.tile", "tensorflow.reduce_sum", "activations.write.read", "NotImplementedError", "tensorflow.reduce_sum", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.softmax", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash"], ["", "", "def", "update_routing", "(", "votes", ",", "biases", ",", "logit_shape", ",", "num_dims", ",", "input_dim", ",", "output_dim", ",", "\n", "num_routing", ")", ":", "\n", "    ", "if", "num_dims", "==", "6", ":", "\n", "        ", "votes_t_shape", "=", "[", "3", ",", "0", ",", "1", ",", "2", ",", "4", ",", "5", "]", "\n", "r_t_shape", "=", "[", "1", ",", "2", ",", "3", ",", "0", ",", "4", ",", "5", "]", "\n", "", "elif", "num_dims", "==", "4", ":", "\n", "        ", "votes_t_shape", "=", "[", "3", ",", "0", ",", "1", ",", "2", "]", "\n", "r_t_shape", "=", "[", "1", ",", "2", ",", "3", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Not implemented'", ")", "\n", "\n", "", "votes_trans", "=", "tf", ".", "transpose", "(", "votes", ",", "votes_t_shape", ")", "\n", "_", ",", "_", ",", "_", ",", "height", ",", "width", ",", "caps", "=", "votes_trans", ".", "get_shape", "(", ")", "\n", "\n", "def", "_body", "(", "i", ",", "logits", ",", "activations", ")", ":", "\n", "        ", "\"\"\"Routing while loop.\"\"\"", "\n", "# route: [batch, input_dim, output_dim, ...]", "\n", "a", ",", "b", ",", "c", ",", "d", ",", "e", "=", "logits", ".", "get_shape", "(", ")", "\n", "a", "=", "logit_shape", "[", "0", "]", "\n", "b", "=", "logit_shape", "[", "1", "]", "\n", "c", "=", "logit_shape", "[", "2", "]", "\n", "d", "=", "logit_shape", "[", "3", "]", "\n", "e", "=", "logit_shape", "[", "4", "]", "\n", "print", "(", "logit_shape", ")", "\n", "logit_temp", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "a", ",", "b", ",", "-", "1", "]", ")", "\n", "route_temp", "=", "tf", ".", "nn", ".", "softmax", "(", "logit_temp", ",", "axis", "=", "-", "1", ")", "\n", "route", "=", "tf", ".", "reshape", "(", "route_temp", ",", "[", "a", ",", "b", ",", "c", ",", "d", ",", "e", "]", ")", "\n", "preactivate_unrolled", "=", "route", "*", "votes_trans", "\n", "preact_trans", "=", "tf", ".", "transpose", "(", "preactivate_unrolled", ",", "r_t_shape", ")", "\n", "preactivate", "=", "tf", ".", "reduce_sum", "(", "preact_trans", ",", "axis", "=", "1", ")", "+", "biases", "\n", "# activation = _squash(preactivate)", "\n", "activation", "=", "squash", "(", "preactivate", ")", "\n", "activations", "=", "activations", ".", "write", "(", "i", ",", "activation", ")", "\n", "\n", "act_3d", "=", "tf", ".", "expand_dims", "(", "activation", ",", "1", ")", "\n", "tile_shape", "=", "np", ".", "ones", "(", "num_dims", ",", "dtype", "=", "np", ".", "int32", ")", ".", "tolist", "(", ")", "\n", "tile_shape", "[", "1", "]", "=", "input_dim", "\n", "act_replicated", "=", "tf", ".", "tile", "(", "act_3d", ",", "tile_shape", ")", "\n", "distances", "=", "tf", ".", "reduce_sum", "(", "votes", "*", "act_replicated", ",", "axis", "=", "3", ")", "\n", "logits", "+=", "distances", "\n", "return", "(", "i", "+", "1", ",", "logits", ",", "activations", ")", "\n", "\n", "", "activations", "=", "tf", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "num_routing", ",", "clear_after_read", "=", "False", ")", "\n", "logits", "=", "tf", ".", "fill", "(", "logit_shape", ",", "0.0", ")", "\n", "\n", "i", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "_", ",", "logits", ",", "activations", "=", "tf", ".", "while_loop", "(", "\n", "lambda", "i", ",", "logits", ",", "activations", ":", "i", "<", "num_routing", ",", "\n", "_body", ",", "\n", "loop_vars", "=", "[", "i", ",", "logits", ",", "activations", "]", ",", "\n", "swap_memory", "=", "True", ")", "\n", "a", "=", "tf", ".", "cast", "(", "activations", ".", "read", "(", "num_routing", "-", "1", ")", ",", "dtype", "=", "'float32'", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsLayers.squash": [[438, 449], ["tensorflow.reduce_sum", "tensorflow.square", "tensorflow.sqrt"], "function", ["None"], ["", "", "", "def", "squash", "(", "vector", ")", ":", "\n", "    ", "'''Squashing function\n    Args:\n        vector: A tensor with shape [batch_size, 1, num_caps, vec_len, 1] or [batch_size, num_caps, vec_len, 1].\n    Returns:\n        A tensor with the same shape as vector but squashed in 'vec_len' dimension.\n    '''", "\n", "vec_squared_norm", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "vector", ")", ",", "-", "2", ",", "keepdims", "=", "True", ")", "\n", "scalar_factor", "=", "vec_squared_norm", "/", "(", "1", "+", "vec_squared_norm", ")", "/", "tf", ".", "sqrt", "(", "vec_squared_norm", "+", "epsilon", ")", "\n", "vec_squashed", "=", "scalar_factor", "*", "vector", "# element-wise", "\n", "return", "vec_squashed", "\n", "", ""]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsLayer.CapsLayer.__init__": [[24, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_outputs", ",", "in_size", ",", "vec_len", ",", "prev_num_outputs_veclen", ",", "with_routing", "=", "True", ",", "layer_type", "=", "'FC'", ")", ":", "\n", "        ", "self", ".", "num_outputs", "=", "num_outputs", "\n", "self", ".", "prev_num_outputs_veclen", "=", "prev_num_outputs_veclen", "\n", "self", ".", "vec_len", "=", "vec_len", "\n", "self", ".", "with_routing", "=", "with_routing", "\n", "self", ".", "layer_type", "=", "layer_type", "\n", "self", ".", "in_size", "=", "in_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsLayer.CapsLayer.__call__": [[32, 76], ["print", "print", "print", "tensorflow.contrib.layers.conv2d", "math.ceil", "print", "print", "print", "CapsLayer.squash", "tensorflow.reshape", "print", "print", "print", "input.get_shape().as_list", "input.get_shape", "tensorflow.squeeze.get_shape().as_list", "tensorflow.squeeze.get_shape", "CapsLayer.CapsLayer.input.get_shape().as_list", "tensorflow.compat.v1.variable_scope", "tensorflow.constant", "CapsLayer.routing", "tensorflow.squeeze", "float", "float", "numpy.zeros", "input.get_shape", "tensorflow.squeeze.get_shape", "CapsLayer.CapsLayer.input.get_shape"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash", "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsLayer.routing", "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.DeepCapsKerasLayers.squeeze"], ["", "def", "__call__", "(", "self", ",", "input", ",", "kernel_size", "=", "None", ",", "stride", "=", "None", ")", ":", "\n", "        ", "'''\n        The parameters 'kernel_size' and 'stride' will be used while 'layer_type' equal 'CONV'\n        '''", "\n", "if", "self", ".", "layer_type", "==", "'CONV'", ":", "\n", "            ", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "not", "self", ".", "with_routing", ":", "\n", "# input: [batch_size, insize, insize, previous layer num_outputs*vec_len]", "\n", "                ", "print", "(", "\"Input capsule:\"", ")", "\n", "print", "(", "input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "print", "(", "[", "cfg", ".", "batch_size", ",", "self", ".", "in_size", ",", "self", ".", "in_size", ",", "self", ".", "prev_num_outputs_veclen", "]", ")", "\n", "assert", "input", ".", "get_shape", "(", ")", "==", "[", "cfg", ".", "batch_size", ",", "self", ".", "in_size", ",", "self", ".", "in_size", ",", "self", ".", "prev_num_outputs_veclen", "]", "\n", "\n", "capsules", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "input", ",", "self", ".", "num_outputs", "*", "self", ".", "vec_len", ",", "\n", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "padding", "=", "\"SAME\"", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "out_size", "=", "ceil", "(", "float", "(", "self", ".", "in_size", ")", "/", "float", "(", "self", ".", "stride", ")", ")", "\n", "print", "(", "\"Non Reshaped Capsules sizes:\\n\"", ")", "\n", "print", "(", "capsules", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "print", "(", "[", "cfg", ".", "batch_size", ",", "out_size", ",", "out_size", ",", "self", ".", "num_outputs", "*", "self", ".", "vec_len", "]", ")", "\n", "\n", "capsules", "=", "squash", "(", "capsules", ")", "\n", "assert", "capsules", ".", "get_shape", "(", ")", "==", "[", "cfg", ".", "batch_size", ",", "out_size", ",", "out_size", ",", "self", ".", "num_outputs", "*", "self", ".", "vec_len", "]", "\n", "return", "(", "capsules", ")", "\n", "\n", "", "", "if", "self", ".", "layer_type", "==", "'FC'", ":", "# ClassCaps layer (FC)", "\n", "            ", "if", "self", ".", "with_routing", ":", "\n", "\n", "# Reshape the input into [batch_size, 1152, 1, 8, 1]", "\n", "                ", "self", ".", "input", "=", "tf", ".", "reshape", "(", "input", ",", "shape", "=", "(", "cfg", ".", "batch_size", ",", "-", "1", ",", "1", ",", "input", ".", "shape", "[", "-", "2", "]", ".", "value", ",", "1", ")", ")", "\n", "print", "(", "\"\\nReshaped:\"", ")", "\n", "print", "(", "self", ".", "input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "'routing'", ")", ":", "\n", "# b_IJ: [batch_size, num_caps_l, num_caps_l_plus_1, 1, 1],", "\n", "\n", "                    ", "b_IJ", "=", "tf", ".", "constant", "(", "np", ".", "zeros", "(", "[", "cfg", ".", "batch_size", ",", "input", ".", "shape", "[", "1", "]", ".", "value", ",", "self", ".", "num_outputs", ",", "1", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "capsules", "=", "routing", "(", "self", ",", "self", ".", "input", ",", "b_IJ", ")", "\n", "capsules", "=", "tf", ".", "squeeze", "(", "capsules", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "return", "(", "capsules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsLayer.routing": [[78, 157], ["print", "tensorflow.compat.v1.get_variable", "tensorflow.tile", "tensorflow.tile", "print", "print", "tensorflow.matmul", "tensorflow.stop_gradient", "range", "tf.tile.get_shape().as_list", "tf.tile.get_shape", "tf.matmul.get_shape", "tensorflow.random_normal_initializer", "int", "int", "int", "tensorflow.compat.v1.variable_scope", "tensorflow.nn.softmax", "int", "tf.tile.get_shape", "tensorflow.multiply", "tensorflow.reduce_sum", "CapsLayer.squash", "str", "tf.reduce_sum.get_shape", "squash.get_shape", "tensorflow.multiply", "tensorflow.reduce_sum", "CapsLayer.squash", "tensorflow.tile", "tensorflow.matmul", "tf.matmul.get_shape", "int", "int"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.softmax", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash"], ["", "", "", "def", "routing", "(", "self", ",", "input", ",", "b_IJ", ")", ":", "\n", "##########################################################################################", "\n", "# Comments for this function are the original for the network presented in [Sabour 2017] #", "\n", "##########################################################################################", "\n", "    ", "''' The routing algorithm. 1152=6x6x32\n    Args:\n        input: A Tensor with [batch_size, num_caps_l=1152, 1, length(u_i)=8, 1]\n               shape, num_caps_l meaning the number of capsule in the layer l.\n    Returns:\n        A Tensor of shape [batch_size, num_caps_l_plus_1, length(v_j)=16, 1]\n        representing the vector output `v_j` in the layer l+1\n    Notes:\n        u_i represents the vector output of capsule i in the layer l, and\n        v_j the vector output of capsule j in the layer l+1.\n     '''", "\n", "print", "(", "\"Routing\"", ")", "\n", "# W: [num_caps_i, num_caps_j, len_u_i, len_v_j]", "\n", "W", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "'Weight'", ",", "shape", "=", "(", "1", ",", "int", "(", "self", ".", "prev_num_outputs_veclen", "*", "self", ".", "in_size", "*", "self", ".", "in_size", "/", "self", ".", "vec_len", ")", ",", "10", ",", "self", ".", "vec_len", ",", "self", ".", "vec_len", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "cfg", ".", "stddev", ")", ")", "\n", "\n", "# Eq.2, calc u_hat", "\n", "# do tiling for input and W before matmul", "\n", "# input => [batch_size, 1152, 10, 8, 1]", "\n", "# W => [batch_size, 1152, 10, 8, 16]", "\n", "input", "=", "tf", ".", "tile", "(", "input", ",", "[", "1", ",", "1", ",", "10", ",", "1", ",", "1", "]", ")", "\n", "W", "=", "tf", ".", "tile", "(", "W", ",", "[", "cfg", ".", "batch_size", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "print", "(", "input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "print", "(", "[", "cfg", ".", "batch_size", ",", "int", "(", "self", ".", "prev_num_outputs_veclen", "*", "self", ".", "in_size", "*", "self", ".", "in_size", "/", "self", ".", "vec_len", ")", ",", "self", ".", "num_outputs", ",", "self", ".", "vec_len", ",", "1", "]", ")", "\n", "assert", "input", ".", "get_shape", "(", ")", "==", "[", "cfg", ".", "batch_size", ",", "int", "(", "self", ".", "prev_num_outputs_veclen", "*", "self", ".", "in_size", "*", "self", ".", "in_size", "/", "self", ".", "vec_len", ")", ",", "self", ".", "num_outputs", ",", "self", ".", "vec_len", ",", "1", "]", "\n", "\n", "# in last 2 dims:", "\n", "# [8, 16].T x [8, 1] => [16, 1] => [batch_size, 1152, 10, 16, 1]", "\n", "# tf.scan, 3 iter, 1080ti, 128 batch size: 10min/epoch", "\n", "# u_hat = tf.scan(lambda ac, x: tf.matmul(W, x, transpose_a=True), input, initializer=tf.zeros([1152, 10, 16, 1]))", "\n", "# tf.tile, 3 iter, 1080ti, 128 batch size: 6min/epoch", "\n", "u_hat", "=", "tf", ".", "matmul", "(", "W", ",", "input", ",", "transpose_a", "=", "True", ")", "\n", "assert", "u_hat", ".", "get_shape", "(", ")", "==", "[", "cfg", ".", "batch_size", ",", "int", "(", "self", ".", "prev_num_outputs_veclen", "*", "self", ".", "in_size", "*", "self", ".", "in_size", "/", "self", ".", "vec_len", ")", ",", "10", ",", "self", ".", "vec_len", ",", "1", "]", "\n", "\n", "# In forward, u_hat_stopped = u_hat; in backward, no gradient passed back from u_hat_stopped to u_hat", "\n", "u_hat_stopped", "=", "tf", ".", "stop_gradient", "(", "u_hat", ",", "name", "=", "'stop_gradient'", ")", "\n", "\n", "# line 3,for r iterations do", "\n", "for", "r_iter", "in", "range", "(", "cfg", ".", "iter_routing", ")", ":", "\n", "        ", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "'iter_'", "+", "str", "(", "r_iter", ")", ")", ":", "\n", "# line 4:", "\n", "# => [batch_size, 1152, 10, 1, 1]", "\n", "            ", "c_IJ", "=", "tf", ".", "nn", ".", "softmax", "(", "b_IJ", ",", "axis", "=", "2", ")", "\n", "\n", "# At last iteration, use `u_hat` in order to receive gradients from the following graph", "\n", "if", "r_iter", "==", "cfg", ".", "iter_routing", "-", "1", ":", "\n", "# line 5:", "\n", "# weighting u_hat with c_IJ, element-wise in the last two dims", "\n", "# => [batch_size, 1152, 10, 16, 1]", "\n", "                ", "s_J", "=", "tf", ".", "multiply", "(", "c_IJ", ",", "u_hat", ")", "\n", "# then sum in the second dim, resulting in [batch_size, 1, 10, 16, 1]", "\n", "s_J", "=", "tf", ".", "reduce_sum", "(", "s_J", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "assert", "s_J", ".", "get_shape", "(", ")", "==", "[", "cfg", ".", "batch_size", ",", "1", ",", "self", ".", "num_outputs", ",", "self", ".", "vec_len", ",", "1", "]", "\n", "\n", "# line 6:", "\n", "# squash using Eq.1,", "\n", "v_J", "=", "squash", "(", "s_J", ")", "\n", "assert", "v_J", ".", "get_shape", "(", ")", "==", "[", "cfg", ".", "batch_size", ",", "1", ",", "self", ".", "num_outputs", ",", "self", ".", "vec_len", ",", "1", "]", "\n", "", "elif", "r_iter", "<", "cfg", ".", "iter_routing", "-", "1", ":", "# Inner iterations, do not apply backpropagation", "\n", "                ", "s_J", "=", "tf", ".", "multiply", "(", "c_IJ", ",", "u_hat_stopped", ")", "\n", "s_J", "=", "tf", ".", "reduce_sum", "(", "s_J", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "v_J", "=", "squash", "(", "s_J", ")", "\n", "\n", "# line 7:", "\n", "# reshape & tile v_j from [batch_size ,1, 10, 16, 1] to [batch_size, 1152, 10, 16, 1]", "\n", "# then matmul in the last tow dim: [16, 1].T x [16, 1] => [1, 1], reduce mean in the", "\n", "# batch_size dim, resulting in [1, 1152, 10, 1, 1]", "\n", "v_J_tiled", "=", "tf", ".", "tile", "(", "v_J", ",", "[", "1", ",", "int", "(", "self", ".", "prev_num_outputs_veclen", "*", "self", ".", "in_size", "*", "self", ".", "in_size", "/", "self", ".", "vec_len", ")", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "u_produce_v", "=", "tf", ".", "matmul", "(", "u_hat_stopped", ",", "v_J_tiled", ",", "transpose_a", "=", "True", ")", "\n", "assert", "u_produce_v", ".", "get_shape", "(", ")", "==", "[", "cfg", ".", "batch_size", ",", "int", "(", "self", ".", "prev_num_outputs_veclen", "*", "self", ".", "in_size", "*", "self", ".", "in_size", "/", "self", ".", "vec_len", ")", ",", "self", ".", "num_outputs", ",", "1", ",", "1", "]", "\n", "\n", "# b_IJ += tf.reduce_sum(u_produce_v, axis=0, keepdims=True)", "\n", "b_IJ", "+=", "u_produce_v", "\n", "\n", "", "", "", "return", "(", "v_J", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsLayer.squash": [[159, 170], ["tensorflow.reduce_sum", "tensorflow.square", "tensorflow.sqrt"], "function", ["None"], ["", "def", "squash", "(", "vector", ")", ":", "\n", "    ", "'''Squashing function corresponding to Eq. 1\n    Args:\n        vector: A tensor with shape [batch_size, 1, num_caps, vec_len, 1] or [batch_size, num_caps, vec_len, 1].\n    Returns:\n        A tensor with the same shape as vector but squashed in 'vec_len' dimension.\n    '''", "\n", "vec_squared_norm", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "vector", ")", ",", "-", "2", ",", "keepdims", "=", "True", ")", "\n", "scalar_factor", "=", "vec_squared_norm", "/", "(", "1", "+", "vec_squared_norm", ")", "/", "tf", ".", "sqrt", "(", "vec_squared_norm", "+", "epsilon", ")", "\n", "vec_squashed", "=", "scalar_factor", "*", "vector", "# element-wise", "\n", "return", "(", "vec_squashed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.randlearn.run_random": [[39, 53], ["time.time", "random.seed", "random.seed", "parent.append", "print", "main.evaluate_population", "main.random_configuration"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.evaluate_population", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.random_configuration"], ["def", "run_random", "(", "metrics", ",", "inshape", ")", ":", "\n", "    ", "\"\"\" Generates one random configuration and try to evaluate it\n    \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "random", ".", "seed", "(", ")", "\n", "\n", "# random initial population Pt", "\n", "parent", "=", "[", "]", "\n", "parent", ".", "append", "(", "{", "\"gene\"", ":", "random_configuration", "(", "*", "inshape", ")", "}", ")", "# (insize, inchannels, incapsules, n_classes)", "\n", "print", "(", "\"\\n Evaluate population.\\n\"", ")", "\n", "\n", "evaluate_population", "(", "parent", ")", "\n", "\n", "return", "parent", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn.run_chromosome": [[42, 61], ["time.time", "random.seed", "random.seed", "json.load", "json.load", "print", "parent.append", "print", "main.evaluate_population", "open", "str"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.evaluate_population"], ["def", "run_chromosome", "(", "chromosome_name", ",", "metrics", ",", "inshape", ")", ":", "\n", "    ", "\"\"\" Generates one random configuration and try to evaluate it\n    \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "random", ".", "seed", "(", ")", "\n", "\n", "# random initial population Pt", "\n", "parent", "=", "[", "]", "\n", "chromosome", "=", "json", ".", "load", "(", "open", "(", "chromosome_name", ")", ")", "\n", "\n", "chromosome", "[", "-", "3", "]", "[", "-", "2", "]", "=", "inshape", "[", "-", "1", "]", "\n", "\n", "print", "(", "\"parsing chromosome {0}\"", ".", "format", "(", "str", "(", "chromosome", ")", ")", ")", "\n", "parent", ".", "append", "(", "{", "\"gene\"", ":", "chromosome", "}", ")", "# (insize, inchannels, incapsules, n_classes)", "\n", "print", "(", "\"\\n Evaluate population.\\n\"", ")", "\n", "\n", "evaluate_population", "(", "parent", ")", "\n", "\n", "return", "parent", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.set_args": [[41, 45], ["None"], "function", ["None"], ["def", "set_args", "(", "a", ")", ":", "\n", "    ", "\"\"\" Function for setting of global parameters from another modules such as randlearn \"\"\"", "\n", "global", "args", "\n", "args", "=", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.set_data": [[47, 54], ["None"], "function", ["None"], ["", "def", "set_data", "(", "x_tr", ",", "y_tr", ",", "x_te", ",", "y_te", ")", ":", "\n", "    ", "\"\"\" Function for setting of global parameters from another modules such as randlearn \"\"\"", "\n", "global", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "\n", "global", "x_train_shapes", ",", "x_test_shapes", "\n", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "=", "x_tr", ",", "y_tr", ",", "x_te", ",", "y_te", "\n", "x_train_shapes", "=", "{", "}", "\n", "x_test_shapes", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.resize": [[55, 81], ["print", "print", "range", "print", "print", "data_set.resize", "scipy.misc.imresize", "X_temp.append", "numpy.array", "X_temp.resize", "data_set.resize", "list"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.resize", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.resize", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.resize"], ["", "def", "resize", "(", "data_set", ",", "size", ")", ":", "\n", "    ", "X_temp", "=", "[", "]", "\n", "import", "scipy", "\n", "# one channel images: scipy.misc.imresize needs to have an input shape (N, H, W, C) if C is > 1; otherwise only (N, H, W)", "\n", "print", "(", "\"input shape\"", ",", "data_set", ".", "shape", ")", "\n", "one_channel", "=", "False", "\n", "if", "data_set", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "one_channel", "=", "True", "\n", "data_set", ".", "resize", "(", "data_set", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "", "print", "(", "\"input shape after reshape\"", ",", "data_set", ".", "shape", ")", "\n", "\n", "for", "i", "in", "range", "(", "data_set", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "resized", "=", "scipy", ".", "misc", ".", "imresize", "(", "data_set", "[", "i", "]", ",", "(", "size", ",", "size", ")", ")", "\n", "X_temp", ".", "append", "(", "resized", ")", "\n", "\n", "", "X_temp", "=", "np", ".", "array", "(", "X_temp", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "# if one channel input was resized, add one dimension to the tensor to (N, H, W, 1)", "\n", "print", "(", "\"output shape before reshape\"", ",", "X_temp", ".", "shape", ")", "\n", "if", "one_channel", ":", "\n", "        ", "X_temp", ".", "resize", "(", "(", "X_temp", ".", "shape", "[", "0", "]", ",", "size", ",", "size", ",", "1", ")", ")", "\n", "data_set", ".", "resize", "(", "list", "(", "data_set", ".", "shape", ")", "+", "[", "1", "]", ")", "# resize dazaset back", "\n", "", "print", "(", "\"output shape after reshape\"", ",", "X_temp", ".", "shape", ")", "\n", "\n", "return", "X_temp", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.random_configuration": [[86, 255], ["random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "range", "gene.append", "gene.append", "print", "print", "gene.append", "range", "print", "print", "print", "math.ceil", "random.randint", "math.ceil", "gene.append", "range", "range", "range", "random.choice", "random.choice", "random.randint", "random.randint", "random.randint", "math.ceil", "min", "random.randint", "math.ceil", "gene.append", "str", "str", "float", "float", "random.randint", "float", "float", "random.randint", "random.randint", "len", "random.randint", "float", "float", "random.randint", "float", "float", "range", "str", "str", "random.randint", "len", "str", "len"], "function", ["None"], ["def", "random_configuration", "(", "insize", ",", "inchannels", ",", "incapsules", ",", "n_classes", ")", ":", "\n", "\n", "    ", "N_conv", "=", "randint", "(", "3", ",", "6", ")", "\n", "N_caps", "=", "randint", "(", "2", ",", "6", ")", "\n", "N_dcaps", "=", "randint", "(", "4", ",", "8", ")", "\n", "kernel_sizes", "=", "[", "3", ",", "5", ",", "9", "]", "\n", "withstride2", "=", "0", "\n", "layer", "=", "0", "\n", "gene", "=", "[", "]", "\n", "\n", "resize_input", "=", "randint", "(", "1", ",", "2", ")", "\n", "#resize_input=2", "\n", "type", "=", "randint", "(", "1", ",", "2", ")", "\n", "#type=1", "\n", "\n", "# Convolutional layers", "\n", "for", "i", "in", "range", "(", "1", ",", "N_conv", "+", "1", ")", ":", "\n", "\n", "        ", "if", "i", "==", "1", ":", "\n", "            ", "insize", "=", "insize", "*", "resize_input", "\n", "inchannels", "=", "inchannels", "\n", "incapsules", "=", "incapsules", "\n", "kernsize", "=", "9", "\n", "stride", "=", "1", "\n", "outsize", "=", "ceil", "(", "float", "(", "insize", ")", "/", "float", "(", "stride", ")", ")", "\n", "outchannels", "=", "2", "**", "randint", "(", "2", ",", "6", ")", "\n", "outcapsules", "=", "1", "\n", "", "else", ":", "\n", "            ", "insize", "=", "outsize", "\n", "inchannels", "=", "outchannels", "\n", "incapsules", "=", "outcapsules", "\n", "kernsize", "=", "kernel_sizes", "[", "randint", "(", "0", ",", "2", ")", "]", "\n", "stride", "=", "randint", "(", "1", ",", "2", ")", "\n", "if", "stride", "==", "2", ":", "\n", "                ", "withstride2", "+=", "1", "\n", "", "outsize", "=", "ceil", "(", "float", "(", "insize", ")", "/", "float", "(", "stride", ")", ")", "\n", "outchannels", "=", "2", "**", "randint", "(", "2", ",", "6", ")", "\n", "outcapsules", "=", "1", "\n", "\n", "", "conv", "=", "[", "0", ",", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "stride", ",", "outsize", ",", "outchannels", ",", "outcapsules", "]", "\n", "#conv = [0, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "gene", ".", "append", "(", "conv", ")", "\n", "layer", "=", "layer", "+", "1", "\n", "\n", "\n", "\n", "# Sabour Capsule layers", "\n", "", "if", "type", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "N_caps", "+", "1", ")", ":", "\n", "\n", "            ", "if", "i", "!=", "N_caps", ":", "\n", "                ", "insize", "=", "outsize", "\n", "inchannels", "=", "outchannels", "\n", "incapsules", "=", "outcapsules", "\n", "kernsize", "=", "kernel_sizes", "[", "randint", "(", "0", ",", "2", ")", "]", "\n", "stride", "=", "randint", "(", "1", ",", "2", ")", "\n", "outsize", "=", "ceil", "(", "float", "(", "insize", ")", "/", "float", "(", "stride", ")", ")", "\n", "outchannels", "=", "2", "**", "randint", "(", "2", ",", "6", ")", "\n", "outcapsules", "=", "min", "(", "incapsules", "+", "randint", "(", "4", ",", "20", ")", ",", "64", ")", "\n", "", "else", ":", "\n", "                ", "insize", "=", "outsize", "\n", "inchannels", "=", "outchannels", "\n", "incapsules", "=", "outcapsules", "\n", "kernsize", "=", "insize", "#kernel_sizes[randint(0,2)]", "\n", "stride", "=", "randint", "(", "1", ",", "2", ")", "\n", "outsize", "=", "ceil", "(", "float", "(", "insize", ")", "/", "float", "(", "stride", ")", ")", "\n", "outchannels", "=", "n_classes", "\n", "outcapsules", "=", "2", "**", "randint", "(", "2", ",", "6", ")", "\n", "\n", "", "caps", "=", "[", "1", ",", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "stride", ",", "outsize", ",", "outchannels", ",", "outcapsules", "]", "\n", "#caps = [1, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "gene", ".", "append", "(", "caps", ")", "\n", "layer", "=", "layer", "+", "1", "\n", "\n", "# DeepCaps cell layers", "\n", "", "", "elif", "type", "==", "2", ":", "\n", "\n", "        ", "w", "=", "N_dcaps", "-", "4", "-", "withstride2", "\n", "remaining", "=", "N_dcaps", "\n", "withstride1", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "N_dcaps", "+", "1", ")", ":", "\n", "            ", "if", "(", "w", ">", "0", "and", "randint", "(", "0", ",", "2", ")", "==", "1", ")", "or", "remaining", "<", "4", ":", "\n", "                ", "withstride1", "[", "i", "]", "=", "1", "\n", "w", "=", "w", "-", "1", "\n", "", "else", ":", "\n", "                ", "withstride1", "[", "i", "]", "=", "0", "\n", "", "remaining", "=", "remaining", "-", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "N_dcaps", "+", "1", ")", ":", "\n", "\n", "            ", "if", "i", "==", "1", ":", "\n", "                ", "insize", "=", "outsize", "\n", "inchannels", "=", "outchannels", "\n", "incapsules", "=", "outcapsules", "\n", "kernsize", "=", "3", "\n", "if", "withstride1", "[", "i", "]", "==", "1", ":", "\n", "                    ", "stride", "=", "1", "\n", "", "else", ":", "\n", "                    ", "stride", "=", "2", "\n", "", "outsize", "=", "(", "insize", "+", "stride", "-", "1", ")", "//", "stride", "\n", "outchannels", "=", "32", "\n", "outcapsules", "=", "4", "\n", "\n", "", "elif", "i", "in", "range", "(", "2", ",", "N_dcaps", ")", ":", "\n", "                ", "insize", "=", "outsize", "\n", "inchannels", "=", "outchannels", "\n", "incapsules", "=", "outcapsules", "\n", "kernsize", "=", "3", "\n", "if", "withstride1", "[", "i", "]", "==", "1", ":", "\n", "                    ", "stride", "=", "1", "\n", "", "else", ":", "\n", "                    ", "stride", "=", "2", "\n", "", "outsize", "=", "(", "insize", "+", "stride", "-", "1", ")", "//", "stride", "\n", "if", "outsize", "==", "1", ":", "\n", "                    ", "stride", "=", "1", "\n", "outsize", "=", "(", "insize", "+", "stride", "-", "1", ")", "//", "stride", "\n", "", "outchannels", "=", "32", "# randint(20,50)", "\n", "outcapsules", "=", "8", "\n", "\n", "", "else", ":", "\n", "                ", "insize", "=", "outsize", "\n", "inchannels", "=", "outchannels", "\n", "incapsules", "=", "outcapsules", "\n", "kernsize", "=", "insize", "\n", "stride", "=", "1", "# unused                 ", "\n", "outsize", "=", "1", "\n", "outchannels", "=", "n_classes", "\n", "outcapsules", "=", "16", "\n", "\n", "\n", "", "d_caps", "=", "[", "2", ",", "insize", ",", "inchannels", ",", "incapsules", ",", "kernsize", ",", "stride", ",", "outsize", ",", "outchannels", ",", "outcapsules", "]", "#Standard CapsCells are used", "\n", "#d_caps = [2, kernsize, stride, outsize, outchannels, outcapsules] #Standard CapsCells are used", "\n", "\n", "gene", ".", "append", "(", "d_caps", ")", "\n", "layer", "=", "layer", "+", "1", "\n", "\n", "", "", "N_layers", "=", "layer", "\n", "\n", "if", "type", "==", "2", ":", "\n", "        ", "index", "=", "layer", "-", "1", "\n", "print", "(", "\"lengene is \"", "+", "str", "(", "len", "(", "gene", ")", ")", "+", "\" layer is \"", "+", "str", "(", "layer", ")", ")", "\n", "while", "gene", "[", "index", "]", "[", "1", "]", "==", "gene", "[", "index", "-", "1", "]", "[", "6", "]", "and", "gene", "[", "index", "]", "[", "1", "]", "==", "gene", "[", "index", "]", "[", "6", "]", "and", "gene", "[", "index", "]", "[", "0", "]", "==", "gene", "[", "index", "-", "1", "]", "[", "0", "]", ":", "# while gene[index][2]==1         while gene[layer][1]==gene[layer-1][6] and gene[layer][1]==gene[layer][6] and gene[layer][0]==gene[layer-1][0]:", "\n", "            ", "index", "-=", "1", "\n", "", "try", ":", "\n", "            ", "xtrachoice", "=", "range", "(", "index", "+", "2", ",", "len", "(", "gene", ")", "-", "1", ")", "\n", "", "except", ":", "\n", "            ", "xtrachoice", "=", "[", "-", "1", "]", "\n", "\n", "", "print", "(", "\"lengene is \"", "+", "str", "(", "len", "(", "gene", ")", ")", "+", "\" layer is \"", "+", "str", "(", "layer", ")", "+", "\" index is \"", "+", "str", "(", "index", ")", ")", "\n", "print", "(", "xtrachoice", ")", "\n", "\n", "try", ":", "\n", "            ", "xtraskip", "=", "random", ".", "choice", "(", "xtrachoice", ")", "#xtrachoice[randint(0,len(gene)-2-layer)] ", "\n", "", "except", ":", "\n", "            ", "xtraskip", "=", "-", "1", "\n", "\n", "", "if", "xtraskip", "==", "N_layers", ":", "\n", "            ", "xtraskip", "=", "-", "1", "\n", "\n", "", "", "elif", "type", "==", "1", "or", "type", "==", "0", ":", "\n", "        ", "xtraskip", "=", "-", "1", "\n", "\n", "", "gene", ".", "append", "(", "[", "xtraskip", "]", ")", "\n", "gene", ".", "append", "(", "[", "resize_input", "]", ")", "\n", "\n", "\n", "print", "(", "gene", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "return", "gene", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.fix": [[256, 351], ["print", "range", "print", "print", "print", "print", "print", "math.ceil", "len", "range", "random.choice", "random.choice", "len", "len", "math.ceil", "str", "str", "str", "len", "len", "float", "float", "len", "len", "len", "len", "len", "len", "len", "len", "float", "float", "len", "str", "str"], "function", ["None"], ["", "def", "fix", "(", "gene", ")", ":", "\n", "\n", "# Scan for type of layers", "\n", "    ", "conv", "=", "[", "]", "\n", "caps", "=", "[", "]", "\n", "dcaps", "=", "[", "]", "\n", "N_conv", "=", "0", "\n", "N_caps", "=", "0", "\n", "i", "=", "0", "\n", "type", "=", "gene", "[", "len", "(", "gene", ")", "-", "3", "]", "[", "0", "]", "\n", "\n", "for", "layer", "in", "gene", ":", "\n", "        ", "if", "layer", "[", "0", "]", "==", "0", "and", "len", "(", "layer", ")", ">", "1", ":", "\n", "            ", "N_conv", "=", "N_conv", "+", "1", "\n", "i", "+=", "1", "\n", "", "elif", "layer", "[", "0", "]", "==", "1", "and", "len", "(", "layer", ")", ">", "1", ":", "\n", "            ", "N_caps", "=", "N_caps", "+", "1", "\n", "i", "+=", "1", "\n", "", "elif", "layer", "[", "0", "]", "==", "2", "and", "len", "(", "layer", ")", ">", "1", ":", "\n", "            ", "N_caps", "=", "N_caps", "+", "1", "\n", "i", "+=", "1", "\n", "", "", "nlayers", "=", "N_conv", "+", "N_caps", "\n", "\n", "print", "(", "\"Fixing...\"", ")", "\n", "count", "=", "0", "\n", "for", "layer", "in", "range", "(", "1", ",", "nlayers", ")", ":", "\n", "\n", "        ", "if", "len", "(", "gene", "[", "layer", "]", ")", ">", "1", "and", "gene", "[", "layer", "]", "[", "0", "]", "==", "0", ":", "#convolutional", "\n", "#[0, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "            ", "gene", "[", "layer", "]", "[", "1", "]", "=", "gene", "[", "layer", "-", "1", "]", "[", "6", "]", "#insize TO DELETE", "\n", "gene", "[", "layer", "]", "[", "2", "]", "=", "gene", "[", "layer", "-", "1", "]", "[", "7", "]", "#inchannels TO DELETE", "\n", "gene", "[", "layer", "]", "[", "3", "]", "=", "gene", "[", "layer", "-", "1", "]", "[", "8", "]", "#incapsules TO DELETE", "\n", "gene", "[", "layer", "]", "[", "6", "]", "=", "ceil", "(", "float", "(", "gene", "[", "layer", "]", "[", "1", "]", ")", "/", "float", "(", "gene", "[", "layer", "]", "[", "5", "]", ")", ")", "#outsize", "\n", "\n", "", "elif", "len", "(", "gene", "[", "layer", "]", ")", ">", "1", "and", "gene", "[", "layer", "]", "[", "0", "]", "==", "1", ":", "#sabour caps", "\n", "#[1, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "            ", "gene", "[", "layer", "]", "[", "1", "]", "=", "gene", "[", "layer", "-", "1", "]", "[", "6", "]", "#insize TO DELETE", "\n", "gene", "[", "layer", "]", "[", "2", "]", "=", "gene", "[", "layer", "-", "1", "]", "[", "7", "]", "#inchannels TO DELETE", "\n", "gene", "[", "layer", "]", "[", "3", "]", "=", "gene", "[", "layer", "-", "1", "]", "[", "8", "]", "#incapsules TO DELETE", "\n", "gene", "[", "layer", "]", "[", "6", "]", "=", "ceil", "(", "float", "(", "gene", "[", "layer", "]", "[", "1", "]", ")", "/", "float", "(", "gene", "[", "layer", "]", "[", "5", "]", ")", ")", "#outsize", "\n", "\n", "", "elif", "len", "(", "gene", "[", "layer", "]", ")", ">", "1", "and", "gene", "[", "layer", "]", "[", "0", "]", "==", "2", ":", "#deepcaps", "\n", "            ", "count", "+=", "1", "\n", "#[2, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "gene", "[", "layer", "]", "[", "1", "]", "=", "gene", "[", "layer", "-", "1", "]", "[", "6", "]", "#insize TO DELETE", "\n", "gene", "[", "layer", "]", "[", "2", "]", "=", "gene", "[", "layer", "-", "1", "]", "[", "7", "]", "#inchannels TO DELETE", "\n", "gene", "[", "layer", "]", "[", "3", "]", "=", "gene", "[", "layer", "-", "1", "]", "[", "8", "]", "#incapsules TO DELETE", "\n", "gene", "[", "layer", "]", "[", "6", "]", "=", "(", "gene", "[", "layer", "]", "[", "1", "]", "+", "gene", "[", "layer", "]", "[", "5", "]", "-", "1", ")", "//", "gene", "[", "layer", "]", "[", "5", "]", "#outsize", "\n", "#gene[layer][7]= gene[layer-1][7]", "\n", "if", "count", "==", "1", ":", "\n", "                ", "gene", "[", "layer", "]", "[", "8", "]", "=", "4", "\n", "", "else", ":", "\n", "                ", "gene", "[", "layer", "]", "[", "8", "]", "=", "8", "\n", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "\n", "# Adjust last layer kernel dimension to fit with insize", "\n", "", "", "gene", "[", "len", "(", "gene", ")", "-", "3", "]", "[", "4", "]", "=", "gene", "[", "len", "(", "gene", ")", "-", "3", "]", "[", "1", "]", "\n", "\n", "if", "type", "==", "2", ":", "\n", "        ", "layer", "=", "len", "(", "gene", ")", "-", "3", "# posizionato sull'ultimo layer", "\n", "print", "(", "\"layer is\"", "+", "str", "(", "layer", ")", "+", "\"\\n len_gene is\"", "+", "str", "(", "len", "(", "gene", ")", ")", ")", "\n", "print", "(", "\"gene[layer][1]=\"", "+", "str", "(", "gene", "[", "layer", "]", "[", "1", "]", ")", ")", "\n", "while", "gene", "[", "layer", "]", "[", "1", "]", "==", "gene", "[", "layer", "-", "1", "]", "[", "6", "]", "and", "gene", "[", "layer", "]", "[", "1", "]", "==", "gene", "[", "layer", "]", "[", "6", "]", "and", "gene", "[", "layer", "]", "[", "0", "]", "==", "gene", "[", "layer", "-", "1", "]", "[", "0", "]", ":", "\n", "            ", "layer", "-=", "1", "\n", "", "print", "(", "\"layer is\"", "+", "str", "(", "layer", ")", "+", "\"\\n len_gene is\"", "+", "str", "(", "len", "(", "gene", ")", ")", ")", "\n", "try", ":", "\n", "            ", "xtrachoice", "=", "range", "(", "index", "+", "2", ",", "len", "(", "gene", ")", "-", "3", ")", "\n", "", "except", ":", "\n", "            ", "xtrachoice", "=", "[", "-", "1", "]", "\n", "\n", "", "print", "(", "xtrachoice", ")", "\n", "\n", "try", ":", "\n", "            ", "xtraskip", "=", "random", ".", "choice", "(", "xtrachoice", ")", "\n", "", "except", ":", "\n", "            ", "xtraskip", "=", "-", "1", "\n", "\n", "", "if", "xtraskip", "==", "nlayers", "-", "1", ":", "\n", "            ", "xtraskip", "=", "-", "1", "\n", "\n", "", "", "elif", "type", "==", "1", "or", "type", "==", "0", ":", "\n", "        ", "xtraskip", "=", "-", "1", "\n", "\n", "", "gene", "[", "len", "(", "gene", ")", "-", "2", "]", "[", "0", "]", "=", "xtraskip", "\n", "\n", "# resize value adjustes with the one of the first layer", "\n", "if", "gene", "[", "0", "]", "[", "1", "]", "==", "28", "or", "gene", "[", "0", "]", "[", "1", "]", "==", "32", ":", "\n", "        ", "gene", "[", "-", "1", "]", "[", "0", "]", "=", "1", "\n", "", "elif", "gene", "[", "0", "]", "[", "1", "]", "==", "56", "or", "gene", "[", "0", "]", "[", "1", "]", "==", "64", ":", "\n", "        ", "gene", "[", "-", "1", "]", "[", "0", "]", "=", "2", "\n", "\n", "", "print", "(", "\"Fixed.\"", ")", "\n", "return", "gene", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.crossover": [[352, 403], ["random.randint", "random.randint", "print", "print", "print", "print", "main.fix", "print", "fix_out_a.append", "print", "print", "print", "main.fix", "print", "print", "fix_out_b.append", "print", "print", "len", "len", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.fix", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.fix"], ["", "def", "crossover", "(", "par_a", ",", "par_b", ",", "cross_out", ")", ":", "\n", "# TODO Add check for same-type of parent networks (in WRAP - to be tested)", "\n", "\n", "    ", "numlayers1", "=", "len", "(", "par_a", ")", "-", "2", "#-1 for xtraskip managment", "\n", "numlayers2", "=", "len", "(", "par_b", ")", "-", "2", "\n", "cut1", "=", "randint", "(", "1", ",", "numlayers1", "-", "1", ")", "# starts from 2 in order to have at least 2 conv layers", "\n", "cut2", "=", "randint", "(", "1", ",", "numlayers2", "-", "1", ")", "\n", "type", "=", "par_a", "[", "len", "(", "par_a", ")", "-", "3", "]", "[", "0", "]", "\n", "print", "(", "par_a", ")", "\n", "print", "(", "par_b", ")", "\n", "print", "(", "\"crossover\"", ")", "\n", "countd", "=", "0", "\n", "\n", "if", "type", "==", "1", ":", "\n", "# In order to avoid sequence conv+caps+CONV+CAPS", "\n", "        ", "while", "(", "par_a", "[", "cut1", "-", "1", "]", "[", "0", "]", "==", "1", "and", "par_b", "[", "cut2", "]", "[", "0", "]", "==", "0", ")", "or", "(", "par_b", "[", "cut1", "-", "1", "]", "[", "0", "]", "==", "1", "and", "par_a", "[", "cut2", "]", "[", "0", "]", "==", "0", ")", ":", "\n", "#while (par_a[cut1-1][0]==1 and par_b[cut2][0]==0) or (par_b[cut1-1][0]==1 and par_a[cut2][0]==0): ", "\n", "#cut2=cut2+1  ", "\n", "            ", "cut2", "=", "randint", "(", "1", ",", "numlayers2", "-", "1", ")", "\n", "\n", "", "", "elif", "type", "==", "2", ":", "\n", "        ", "cut1", "=", "randint", "(", "1", ",", "numlayers1", "-", "4", ")", "\n", "cut2", "=", "randint", "(", "1", ",", "numlayers2", "-", "4", ")", "\n", "# In order to avoid sequence conv+dcaps+CONV+DCAPS", "\n", "#while par_a[cut1-1][0]==2 and par_b[cut2][0]==0:         ", "\n", "while", "par_a", "[", "cut1", "]", "[", "0", "]", "==", "2", "and", "par_b", "[", "cut2", "]", "[", "0", "]", "==", "0", ":", "\n", "            ", "cut2", "=", "randint", "(", "1", ",", "numlayers2", "-", "4", ")", "\n", "#cut2=cut2+1    ", "\n", "#while par_b[cut1-1][0]==2 and par_a[cut2][0]==0:", "\n", "", "while", "par_b", "[", "cut2", "]", "[", "0", "]", "==", "2", "and", "par_a", "[", "cut1", "]", "[", "0", "]", "==", "0", ":", "\n", "            ", "cut1", "=", "randint", "(", "1", ",", "numlayers1", "-", "4", ")", "\n", "#cut1=cut1+1  ", "\n", "\n", "", "", "child_a", "=", "deepcopy", "(", "par_a", "[", "0", ":", "cut1", "]", ")", "+", "deepcopy", "(", "par_b", "[", "cut2", ":", "len", "(", "par_b", ")", "]", ")", "\n", "print", "(", "\"\\nchild_a: \"", ",", "child_a", ")", "\n", "child_a", "=", "fix", "(", "child_a", ")", "\n", "print", "(", "\"\\nfchild_a: \"", ",", "child_a", ")", "\n", "fix_out_a", ".", "append", "(", "child_a", ")", "\n", "print", "(", "\"\\nfix_out_a: \"", ",", "fix_out_a", ")", "\n", "\n", "child_b", "=", "deepcopy", "(", "par_b", "[", "0", ":", "cut2", "]", ")", "+", "deepcopy", "(", "par_a", "[", "cut1", ":", "len", "(", "par_a", ")", "]", ")", "\n", "print", "(", "\"\\nchild_b: \"", ",", "child_b", ")", "\n", "print", "(", "\"\\nfix_out_a: \"", ",", "fix_out_a", ")", "\n", "\n", "child_b", "=", "fix", "(", "child_b", ")", "\n", "print", "(", "\"\\nfchild_b: \"", ",", "child_b", ")", "\n", "print", "(", "\"\\nfix_out_a: \"", ",", "fix_out_a", ")", "# At this point the fix_out_a gene has changed", "\n", "# with the last part coming from fix_out_b", "\n", "fix_out_b", ".", "append", "(", "child_b", ")", "\n", "print", "(", "\"\\nfix_out_a: \"", ",", "fix_out_a", ")", "\n", "print", "(", "\"\\nfix_out_b: \"", ",", "fix_out_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.mutate": [[404, 504], ["int", "random.choice", "random.choice", "print", "copy.deepcopy", "random.randint", "range", "main.fix", "len", "conv.append", "range", "random.choice", "random.choice", "range", "random.choice", "random.choice", "str", "math.ceil", "print", "print", "print", "print", "caps.append", "random.randint", "len", "range", "random.choice", "random.choice", "len", "len", "random.randint", "float", "float", "str", "str", "str", "random.randint", "len", "len", "len", "len", "random.randint", "len", "len", "str", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.fix"], ["", "def", "mutate", "(", "gene", ")", ":", "# always mutes also xtraskip if type==2", "\n", "\n", "# Scan for type of layers", "\n", "    ", "N_layers", "=", "int", "(", "len", "(", "gene", ")", "-", "3", ")", "\n", "conv", "=", "[", "]", "\n", "caps", "=", "[", "]", "\n", "N_conv", "=", "0", "\n", "N_caps", "=", "0", "\n", "i", "=", "0", "\n", "for", "layer", "in", "gene", ":", "\n", "        ", "if", "layer", "[", "0", "]", "==", "0", ":", "\n", "            ", "N_conv", "=", "N_conv", "+", "1", "\n", "conv", ".", "append", "(", "i", ")", "\n", "i", "+=", "1", "\n", "", "elif", "layer", "[", "0", "]", "==", "1", "or", "layer", "[", "0", "]", "==", "2", ":", "\n", "            ", "N_caps", "=", "N_caps", "+", "1", "\n", "caps", ".", "append", "(", "i", ")", "\n", "i", "+=", "1", "\n", "\n", "", "", "type", "=", "gene", "[", "len", "(", "gene", ")", "-", "3", "]", "[", "0", "]", "\n", "mute_type_choice", "=", "[", "0", ",", "1", "]", "# 0 = normal, 1 = delete", "\n", "mute_type", "=", "random", ".", "choice", "(", "mute_type_choice", ")", "\n", "\n", "if", "type", "==", "2", "and", "N_caps", "<=", "5", ":", "\n", "        ", "try", ":", "\n", "            ", "layer_to_delete_choice", "=", "range", "(", "1", ",", "N_conv", ")", "\n", "layer_to_delete", "=", "random", ".", "choice", "(", "layer_to_delete_choice", ")", "\n", "", "except", ":", "\n", "            ", "mute_type", "=", "0", "#do not delete", "\n", "", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "layer_to_delete_choice", "=", "range", "(", "1", ",", "len", "(", "gene", ")", "-", "3", ")", "\n", "layer_to_delete", "=", "random", ".", "choice", "(", "layer_to_delete_choice", ")", "\n", "", "except", ":", "\n", "            ", "mute_type", "=", "0", "#do not delete", "\n", "\n", "", "", "print", "(", "\"mute_type = \"", "+", "str", "(", "mute_type", ")", ")", "\n", "\n", "if", "mute_type", "==", "0", ":", "\n", "        ", "kernel_sizes", "=", "[", "3", ",", "5", ",", "9", "]", "\n", "\n", "choices", "=", "[", "4", ",", "5", ",", "8", "]", "#kernelsize, stride, outsize", "\n", "layer_to_mutate", "=", "randint", "(", "0", ",", "N_layers", ")", "\n", "el_to_mutate", "=", "choices", "[", "randint", "(", "0", ",", "2", ")", "]", "\n", "current", "=", "gene", "[", "layer_to_mutate", "]", "[", "el_to_mutate", "]", "\n", "new", "=", "current", "\n", "\n", "if", "el_to_mutate", "==", "4", ":", "#kernel size          if el_to_mutate==1: #kernel size", "\n", "            ", "while", "new", "==", "current", ":", "\n", "                ", "new", "=", "kernel_sizes", "[", "randint", "(", "0", ",", "2", ")", "]", "\n", "", "", "elif", "el_to_mutate", "==", "5", ":", "# stride            elif el_to_mutate==2: #stride", "\n", "            ", "while", "new", "==", "current", ":", "\n", "                ", "new", "=", "randint", "(", "1", ",", "2", ")", "\n", "", "", "elif", "el_to_mutate", "==", "8", ":", "# out_channels      elif el_to_mutate==4: # out_channels", "\n", "            ", "while", "new", "==", "current", ":", "\n", "                ", "new", "=", "2", "**", "randint", "(", "2", ",", "6", ")", "\n", "\n", "", "", "gene", "[", "layer_to_mutate", "]", "[", "el_to_mutate", "]", "=", "new", "\n", "if", "el_to_mutate", "==", "5", ":", "#       if el_to_mutate==2:", "\n", "            ", "gene", "[", "layer_to_mutate", "]", "[", "6", "]", "=", "ceil", "(", "float", "(", "gene", "[", "layer_to_mutate", "]", "[", "1", "]", ")", "/", "float", "(", "new", ")", ")", "# adjust outsize            ceil(float(gene[layer_to_mutate-1][3])/float(new))", "\n", "\n", "", "for", "index", "in", "range", "(", "layer_to_mutate", "+", "1", ",", "N_layers", "-", "1", ")", ":", "\n", "            ", "gene", "[", "index", "]", "[", "1", "]", "=", "gene", "[", "index", "-", "1", "]", "[", "1", "]", "#insize TO DELETE", "\n", "gene", "[", "index", "]", "[", "2", "]", "=", "gene", "[", "index", "-", "1", "]", "[", "2", "]", "#inchannel TO DELETE", "\n", "\n", "", "if", "gene", "[", "len", "(", "gene", ")", "-", "3", "]", "[", "0", "]", "==", "2", ":", "\n", "            ", "prev_xtraskip", "=", "gene", "[", "len", "(", "gene", ")", "-", "2", "]", "[", "0", "]", "\n", "layer", "=", "len", "(", "gene", ")", "-", "3", "# posizionato sull'ultimo layer", "\n", "print", "(", "\"layer is\"", "+", "str", "(", "layer", ")", "+", "\"\\n len_gene is\"", "+", "str", "(", "len", "(", "gene", ")", ")", ")", "\n", "print", "(", "\"gene[layer][1]=\"", "+", "str", "(", "gene", "[", "layer", "]", "[", "1", "]", ")", ")", "\n", "while", "gene", "[", "layer", "]", "[", "1", "]", "==", "gene", "[", "layer", "-", "1", "]", "[", "6", "]", "and", "gene", "[", "layer", "]", "[", "1", "]", "==", "gene", "[", "layer", "]", "[", "6", "]", "and", "gene", "[", "layer", "]", "[", "0", "]", "==", "gene", "[", "layer", "-", "1", "]", "[", "0", "]", ":", "\n", "                ", "layer", "-=", "1", "\n", "", "print", "(", "\"layer is\"", "+", "str", "(", "layer", ")", "+", "\"\\n len_gene is\"", "+", "str", "(", "len", "(", "gene", ")", ")", ")", "\n", "try", ":", "\n", "                ", "xtrachoice", "=", "range", "(", "index", "+", "2", ",", "len", "(", "gene", ")", "-", "3", ")", "\n", "", "except", ":", "\n", "                ", "xtrachoice", "=", "[", "-", "1", "]", "\n", "\n", "", "print", "(", "xtrachoice", ")", "\n", "\n", "try", ":", "\n", "                ", "xtraskip", "=", "random", ".", "choice", "(", "xtrachoice", ")", "\n", "", "except", ":", "\n", "                ", "xtraskip", "=", "-", "1", "\n", "\n", "", "if", "xtraskip", "==", "N_layers", ":", "\n", "                ", "xtraskip", "=", "-", "1", "\n", "\n", "", "", "elif", "gene", "[", "len", "(", "gene", ")", "-", "3", "]", "[", "0", "]", "==", "1", "or", "gene", "[", "len", "(", "gene", ")", "-", "3", "]", "[", "0", "]", "==", "0", ":", "\n", "            ", "xtraskip", "=", "-", "1", "\n", "\n", "", "gene", "[", "len", "(", "gene", ")", "-", "2", "]", "[", "0", "]", "=", "xtraskip", "\n", "\n", "", "elif", "mute_type", "==", "1", ":", "\n", "        ", "del", "gene", "[", "layer_to_delete", "]", "\n", "\n", "", "gene", "=", "deepcopy", "(", "fix", "(", "gene", ")", ")", "\n", "\n", "\n", "return", "gene", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.evaluate_population": [[507, 574], ["len", "enumerate", "print", "print", "print", "print", "hw_estimator.hw_estimator", "hw_estimator.hw_estimator.parse_genotype", "print", "str", "json.load", "main.wrap_train_test", "hw_estimator.hw_estimator.get_energy", "hw_estimator.hw_estimator.get_latency", "hw_estimator.hw_estimator.get_memory", "os.path.isfile", "json.dump", "gzip.open", "main.genestr", "print", "shutil.copy", "gzip.open", "str", "main.genestr", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.parse_genotype", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.wrap_train_test", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_energy", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_latency", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_memory", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.genestr", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.genestr"], ["", "def", "evaluate_population", "(", "pop", ")", ":", "\n", "    ", "\"\"\" \n        Most important part; needs to be implemented! \n        population is a list of individuals where each individual is a dictionary\n        each individual contains at least \"gene\" item; the rest of them is calculated lated\n    \"\"\"", "\n", "popcnt", "=", "len", "(", "pop", ")", "\n", "for", "popid", ",", "p", "in", "enumerate", "(", "pop", ")", ":", "\n", "        ", "print", "(", "f\"### EVAL candidate {popid}/{popcnt}\"", ")", "\n", "cache_name", "=", "\"cache_\"", "+", "str", "(", "args", ".", "dataset", ")", "+", "\"_e\"", "+", "str", "(", "args", ".", "epochs", ")", "\n", "try", ":", "\n", "            ", "cache", "=", "json", ".", "load", "(", "gzip", ".", "open", "(", "args", ".", "cache_dir", "+", "\"/%s.json.gz\"", "%", "cache_name", ",", "\"rt\"", ")", ")", "\n", "", "except", "IOError", ":", "\n", "            ", "cache", "=", "{", "}", "\n", "\n", "", "assert", "\"gene\"", "in", "p", "\n", "#p[\"gene\"]=[[0, 64, 3, 1, 3, 1, 64, 128, 1], [2, 64, 32, 4, 3, 2, 32, 32, 4], [2, 32, 32, 4, 3, 2, 16, 32, 8], [2, 16, 32, 8, 3, 2, 8, 32, 8], [2, 8, 32, 8, 3, 2, 4, 32, 8], [2, 4, 32, 8, 4, 1, 1, 10, 16], [4], [2]]", "\n", "if", "(", "\"accuracy_drop\"", "not", "in", "p", ")", "or", "(", "\"gene\"", "not", "in", "cache", ")", ":", "\n", "            ", "p", "[", "\"runid\"", "]", ",", "train_acc", "=", "wrap_train_test", "(", "p", "[", "\"gene\"", "]", ")", "\n", "p", "[", "\"accuracy_drop\"", "]", "=", "1", "-", "train_acc", "\n", "from_cache", "=", "False", "\n", "# note: we are minimizing all parameters! therefore accuracy drop must be evaluated instead of the accuracy", "\n", "", "else", ":", "\n", "             ", "train_acc", "=", "cache", "[", "genestr", "(", "p", "[", "\"gene\"", "]", ")", "]", "\n", "from_cache", "=", "True", "\n", "\n", "", "cache", "[", "genestr", "(", "p", "[", "\"gene\"", "]", ")", "]", "=", "train_acc", "\n", "print", "(", "\"\\nTrain accuracy: \"", "+", "str", "(", "train_acc", ")", "+", "\"\\n\\n\"", ")", "\n", "\n", "print", "(", "\"\\nHW Estimator\\n\"", ")", "\n", "estimator", "=", "hw_estimator", ".", "hw_estimator", "(", ")", "\n", "\n", "estimator", ".", "parse_genotype", "(", "p", "[", "\"gene\"", "]", ")", "\n", "\n", "print", "(", "\"\\nParsed gene\\n\"", ")", "\n", "\n", "if", "\"energy\"", "not", "in", "p", ":", "\n", "            ", "p", "[", "\"energy\"", "]", "=", "estimator", ".", "get_energy", "(", ")", "\n", "\n", "", "if", "\"latency\"", "not", "in", "p", ":", "\n", "            ", "p", "[", "\"latency\"", "]", "=", "estimator", ".", "get_latency", "(", ")", "\n", "\n", "", "if", "\"memory\"", "not", "in", "p", ":", "\n", "            ", "p", "[", "\"memory\"", "]", "=", "estimator", ".", "get_memory", "(", ")", "\n", "\n", "", "for", "x", "in", "[", "\"memory\"", ",", "\"latency\"", ",", "\"accuracy_drop\"", ",", "\"energy\"", "]", ":", "\n", "            ", "if", "x", "in", "p", ":", "\n", "                ", "print", "(", "\"OPT eval\"", ",", "x", ",", "\"=\"", ",", "p", "[", "x", "]", ")", "\n", "\n", "# save the previous version of the cache", "\n", "# because of concurrent processes (it may destroy the file)", "\n", "", "", "if", "not", "from_cache", ":", "# result was not cached", "\n", "            ", "backupid", "=", "0", "\n", "while", "(", "os", ".", "path", ".", "isfile", "(", "args", ".", "cache_dir", "+", "\"/backup_%s_%03d.json.gz\"", "%", "(", "cache_name", ",", "backupid", ")", ")", ")", ":", "\n", "                ", "backupid", "+=", "1", "\n", "", "try", ":", "\n", "                ", "shutil", ".", "copy", "(", "args", ".", "cache_dir", "+", "\"/cache_\"", "+", "str", "(", "args", ".", "dataset", ")", "+", "\"_e\"", "+", "str", "(", "args", ".", "epochs", ")", "+", "\".json.gz\"", ",", "args", ".", "cache_dir", "+", "\"/backup_%s_%03d.json.gz\"", "%", "(", "cache_name", ",", "backupid", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# save the cache", "\n", "", "json", ".", "dump", "(", "cache", ",", "gzip", ".", "open", "(", "args", ".", "cache_dir", "+", "\"/%s.json.gz\"", "%", "cache_name", ",", "\"wt\"", ")", ",", "indent", "=", "2", ")", "\n", "\n", "\n", "", "", "print", "(", "\"\\nEvaluation of current population completed\\n\"", ")", "\n", "\n", "return", "pop", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.genestr": [[576, 578], ["str().replace", "str"], "function", ["None"], ["", "def", "genestr", "(", "gene", ")", ":", "\n", "    ", "return", "str", "(", "gene", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.wrap_train_test": [[579, 661], ["print", "print", "tensorflow.distribute.MirroredStrategy", "print", "model.summary", "keras.utils.layer_utils.count_params", "main.test", "tensorflow.keras.backend.clear_session", "keras.backend.clear_session", "open", "f.write", "f.write", "print", "wrapper.CapsNet", "print", "tensorflow.keras.backend.clear_session", "keras.backend.clear_session", "model.load_weights", "print", "main.train", "main.genestr", "main.resize", "main.resize", "print", "print", "print", "tensorflow.keras.backend.clear_session", "keras.backend.clear_session", "print", "print", "tensorflow.keras.backend.clear_session", "keras.backend.clear_session", "print", "str", "len", "numpy.unique", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.test", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.wrapper.CapsNet", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.train", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.genestr", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.resize", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.resize"], ["", "def", "wrap_train_test", "(", "gene", ")", ":", "\n", "    ", "global", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "\n", "global", "x_train_shapes", ",", "x_test_shapes", "\n", "runid", "=", "\"N/A\"", "\n", "print", "(", "gene", ")", "\n", "\n", "with", "open", "(", "\"tested.log\"", ",", "\"a\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "genestr", "(", "gene", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "print", "(", "\"\\nWrapping...\\n\"", ")", "\n", "strategy", "=", "tf", ".", "distribute", ".", "MirroredStrategy", "(", ")", "\n", "print", "(", "'Number of devices: {}'", ".", "format", "(", "strategy", ".", "num_replicas_in_sync", ")", ")", "\n", "\n", "\n", "# reshaping of the training data", "\n", "if", "gene", "[", "-", "1", "]", "[", "0", "]", "==", "2", ":", "# reshaping is enabled", "\n", "        ", "desired_size", "=", "gene", "[", "0", "]", "[", "1", "]", "\n", "if", "desired_size", "not", "in", "x_train_shapes", ":", "\n", "            ", "x_train_shapes", "[", "desired_size", "]", "=", "resize", "(", "x_train", ",", "desired_size", ")", "\n", "", "if", "desired_size", "not", "in", "x_test_shapes", ":", "\n", "            ", "x_test_shapes", "[", "desired_size", "]", "=", "resize", "(", "x_test", ",", "desired_size", ")", "\n", "\n", "", "x_train_current", "=", "x_train_shapes", "[", "desired_size", "]", "\n", "x_test_current", "=", "x_test_shapes", "[", "desired_size", "]", "\n", "", "elif", "gene", "[", "-", "1", "]", "[", "0", "]", "==", "1", ":", "# no reshaping", "\n", "        ", "x_train_current", "=", "x_train", "\n", "x_test_current", "=", "x_test", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"#### INVALID GENE - last value is not 1 nor 2\"", ",", "gene", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "return", "runid", ",", "0", "\n", "\n", "\n", "# define model", "\n", "", "try", ":", "\n", "        ", "print", "(", "\"x_train shape: \"", "+", "str", "(", "x_train_current", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "model", ",", "eval_model", ",", "manipulate_model", "=", "CapsNet", "(", "gene", "=", "gene", ",", "input_shape", "=", "x_train_current", ".", "shape", "[", "1", ":", "]", ",", "\n", "n_class", "=", "len", "(", "np", ".", "unique", "(", "np", ".", "argmax", "(", "y_train", ",", "1", ")", ")", ")", ",", "\n", "routings", "=", "args", ".", "routings", ")", "\n", "", "except", "ValueError", "as", "e", ":", "# some bug in the chromosome ....", "\n", "        ", "print", "(", "\"#### VALUE error desc \"", ",", "e", ")", "\n", "print", "(", "\"#### VALUE error gene \"", ",", "gene", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "return", "runid", ",", "0", "\n", "", "except", "tf", ".", "errors", ".", "ResourceExhaustedError", "as", "e", ":", "# some bug in the chromosome ....", "\n", "        ", "print", "(", "\"#### Out of resources error desc \"", ",", "e", ")", "\n", "print", "(", "\"#### Out of resources error gene \"", ",", "gene", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "return", "runid", ",", "0", "\n", "\n", "\n", "", "model", ".", "summary", "(", ")", "\n", "\n", "\n", "trainable_count", "=", "count_params", "(", "model", ".", "trainable_weights", ")", "\n", "if", "args", ".", "max_params", ">", "0", "and", "trainable_count", ">", "args", ".", "max_params", ":", "\n", "        ", "print", "(", "f\"## ERR: number of trainable params {trainable_count} exceeded limit {args.max_params}\"", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "return", "runid", ",", "0", "\n", "\n", "# train or test", "\n", "", "if", "args", ".", "weights", "is", "not", "None", ":", "# init the model weights with provided one", "\n", "        ", "model", ".", "load_weights", "(", "args", ".", "weights", ")", "\n", "", "if", "not", "args", ".", "testing", ":", "\n", "# if gene[len(gene)-1][0]==2:", "\n", "#     x_train = resize(x_train, gene[0][1]) #64", "\n", "#     x_test = resize(x_test, gene[0][1])", "\n", "#     train(model=model, data=((x_train, y_train), (x_test, y_test)), args=args)", "\n", "# elif gene[len(gene)-1][0]==1:", "\n", "        ", "print", "(", "\"Train shapes:\"", ",", "x_train", ".", "shape", ",", "y_train", ".", "shape", ")", "\n", "runid", ",", "_", "=", "train", "(", "model", "=", "model", ",", "data", "=", "(", "(", "x_train_current", ",", "y_train", ")", ",", "(", "x_test_current", ",", "y_test", ")", ")", ",", "args", "=", "args", ")", "\n", "", "else", ":", "# as long as weights are given, will run testing", "\n", "        ", "if", "args", ".", "weights", "is", "None", ":", "\n", "            ", "print", "(", "'No weights are provided. Will test using random initialized weights.'", ")", "\n", "", "", "test_acc", "=", "test", "(", "model", "=", "eval_model", ",", "data", "=", "(", "x_test_current", ",", "y_test", ")", ",", "args", "=", "args", ")", "\n", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "return", "runid", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.crowding_distance": [[665, 681], ["list", "zip", "zip", "sorted", "float", "float", "range", "range", "range", "len", "len", "len", "abs"], "function", ["None"], ["", "def", "crowding_distance", "(", "par", ",", "objs", ")", ":", "\n", "    ", "\"\"\" calculates crowding distance for pareto frontier par for objectives objs \"\"\"", "\n", "park", "=", "list", "(", "zip", "(", "range", "(", "len", "(", "par", ")", ")", ",", "par", ")", ")", "# list of \"ids, evaluated_offsprint\"", "\n", "distance", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "par", ")", ")", "]", "\n", "\n", "for", "o", "in", "objs", ":", "\n", "        ", "sval", "=", "sorted", "(", "park", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "o", "]", ")", "# sort by objective", "\n", "minval", ",", "maxval", "=", "sval", "[", "0", "]", "[", "1", "]", "[", "o", "]", ",", "sval", "[", "-", "1", "]", "[", "1", "]", "[", "o", "]", "\n", "# distance of the lowest and highest value is infty", "\n", "distance", "[", "sval", "[", "0", "]", "[", "0", "]", "]", "=", "float", "(", "\"inf\"", ")", "\n", "distance", "[", "sval", "[", "-", "1", "]", "[", "0", "]", "]", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "sval", ")", "-", "1", ")", ":", "\n", "            ", "distance", "[", "sval", "[", "i", "]", "[", "0", "]", "]", "+=", "abs", "(", "sval", "[", "i", "-", "1", "]", "[", "1", "]", "[", "o", "]", "-", "sval", "[", "i", "+", "1", "]", "[", "1", "]", "[", "o", "]", ")", "/", "(", "maxval", "-", "minval", ")", "\n", "\n", "", "", "return", "zip", "(", "par", ",", "distance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.crowding_reduce": [[682, 692], ["len", "main.crowding_distance", "sorted"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.crowding_distance"], ["", "def", "crowding_reduce", "(", "par", ",", "number", ",", "objs", ")", ":", "\n", "    ", "\"\"\" Removes the elements from pareto frontier; iteratively removest the node with the lowest crowding distance \"\"\"", "\n", "par", "=", "par", "\n", "while", "len", "(", "par", ")", ">", "number", ":", "\n", "        ", "vals", "=", "crowding_distance", "(", "par", ",", "objs", ")", "\n", "vals", "=", "sorted", "(", "vals", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "# sort by distance descending", "\n", "#print(vals)", "\n", "\n", "par", "=", "[", "x", "[", "0", "]", "for", "x", "in", "vals", "[", ":", "-", "1", "]", "]", "\n", "", "return", "par", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.run_NSGA2": [[693, 804], ["time.time", "random.seed", "random.seed", "range", "print", "main.evaluate_population", "print", "range", "main.evaluate_population", "paretoarchive.PyBspTreeArchive().filter", "print", "len", "parent.append", "range", "main.evaluate_population", "print", "json.dump", "ret.append", "int", "random.choice", "random.choice", "print", "print", "random.choice", "random.choice", "print", "len", "paretoarchive.PyBspTreeArchive().filter", "reversed", "open", "paretoarchive.PyBspTreeArchive", "main.random_configuration", "print", "random.choice", "random.choice", "main.mutate", "main.mutate", "print", "main.crossover", "print", "print", "len", "len", "main.crowding_reduce", "sorted", "population.pop", "len", "len", "offsprings.append", "offsprings.append", "paretoarchive.PyBspTreeArchive", "time.time", "str", "random.random", "random.random", "main.mutate", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.evaluate_population", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.evaluate_population", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.evaluate_population", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.random_configuration", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.mutate", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.mutate", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.crossover", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.crowding_reduce", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.mutate"], ["", "def", "run_NSGA2", "(", "metrics", ",", "inshape", ",", "p_size", "=", "2", ",", "q_size", "=", "2", ",", "generations", "=", "5", ",", "mutation_rate", "=", "0.1", ")", ":", "\n", "    ", "\"\"\" Heuristic optimization NSGA2 algorithm; \n        metrics - which parameters should be optimized, see evaluate_population\n        p_size - number of elements in the parent generation\n        q_size - number of offsprings generated by binary crossover and random mutation\n        qenerations - number of generations\n        mutation_rate - probability of mutation of one configuration parameter\n    \"\"\"", "\n", "assert", "len", "(", "metrics", ")", ">=", "2", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "random", ".", "seed", "(", ")", "\n", "\n", "# random initial population Pt", "\n", "parent", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "p_size", ")", ":", "\n", "        ", "parent", ".", "append", "(", "{", "\"gene\"", ":", "random_configuration", "(", "inshape", "[", "0", "]", ",", "inshape", "[", "1", "]", ",", "inshape", "[", "2", "]", ",", "inshape", "[", "3", "]", ")", "}", ")", "# (insize, inchannels, incapsules, n_classes)", "\n", "", "print", "(", "\"\\n Evaluate population.\\n\"", ")", "\n", "\n", "evaluate_population", "(", "parent", ")", "\n", "\n", "# genetic loop", "\n", "print", "(", "\"\\nGenetic Loop.\\n\"", ")", "\n", "for", "g", "in", "range", "(", "generations", ")", ":", "\n", "# generate offsprings Qt", "\n", "        ", "offsprings", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "q_size", "/", "2", ")", ")", ":", "\n", "            ", "par_a", "=", "random", ".", "choice", "(", "parent", ")", "\n", "print", "(", "par_a", ")", "\n", "print", "(", "par_a", "[", "\"gene\"", "]", "[", "len", "(", "par_a", "[", "\"gene\"", "]", ")", "-", "3", "]", "[", "0", "]", ")", "\n", "par_b", "=", "random", ".", "choice", "(", "parent", ")", "\n", "print", "(", "par_b", "[", "\"gene\"", "]", "[", "len", "(", "par_b", "[", "\"gene\"", "]", ")", "-", "3", "]", "[", "0", "]", ")", "\n", "\n", "# todo: this part can goes to infinite loop", "\n", "cnt", "=", "0", "\n", "while", "par_b", "[", "\"gene\"", "]", "[", ":", "]", "==", "par_a", "[", "\"gene\"", "]", "[", ":", "]", "or", "par_a", "[", "\"gene\"", "]", "[", "len", "(", "par_a", "[", "\"gene\"", "]", ")", "-", "3", "]", "[", "0", "]", "!=", "par_b", "[", "\"gene\"", "]", "[", "len", "(", "par_b", "[", "\"gene\"", "]", ")", "-", "3", "]", "[", "0", "]", "or", "cnt", "<", "100", ":", "\n", "                ", "print", "(", "par_a", "[", "\"gene\"", "]", "[", "len", "(", "par_a", "[", "\"gene\"", "]", ")", "-", "3", "]", "[", "0", "]", ")", "\n", "par_b", "=", "random", ".", "choice", "(", "parent", ")", "\n", "cnt", "+=", "1", "\n", "if", "cnt", "==", "99", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "cnt", ">", "98", ":", "\n", "                ", "mut", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "# no second parent found in 100 tries", "\n", "mut", "[", "0", "]", "=", "mutate", "(", "par_a", "[", "\"gene\"", "]", ")", "\n", "mut", "[", "1", "]", "=", "mutate", "(", "par_a", "[", "\"gene\"", "]", ")", "\n", "for", "off", "in", "mut", ":", "\n", "                    ", "c", "=", "{", "}", "\n", "c", "[", "\"gene\"", "]", "=", "off", "\n", "offsprings", ".", "append", "(", "c", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "par_b", ")", "\n", "# binary crossover", "\n", "crossover", "(", "par_a", "[", "\"gene\"", "]", ",", "par_b", "[", "\"gene\"", "]", ",", "cross_out", ")", "\n", "out_cross", "=", "[", "fix_out_a", "[", "0", "]", ",", "fix_out_b", "[", "0", "]", "]", "\n", "print", "(", "\"out_cross: \"", "+", "str", "(", "out_cross", ")", ")", "\n", "#print(\"fa: \"+ str(child_a))", "\n", "print", "(", "\"out of crossover\\n\"", ")", "\n", "for", "off", "in", "out_cross", ":", "\n", "                    ", "c", "=", "{", "}", "\n", "c", "[", "\"gene\"", "]", "=", "off", "\n", "\n", "# mutation", "\n", "if", "random", ".", "random", "(", ")", "<", "mutation_rate", ":", "\n", "                        ", "mutate", "(", "c", "[", "\"gene\"", "]", ")", "\n", "\n", "", "offsprings", ".", "append", "(", "c", ")", "\n", "\n", "", "", "", "evaluate_population", "(", "offsprings", ")", "\n", "del", "fix_out_a", "[", ":", "]", "\n", "del", "fix_out_b", "[", ":", "]", "\n", "del", "cross_out", "[", ":", "]", "\n", "\n", "\n", "population", "=", "parent", "+", "offsprings", "\n", "\n", "# selection of pareto frontiers", "\n", "next_parent", "=", "[", "]", "\n", "while", "len", "(", "next_parent", ")", "<", "p_size", ":", "\n", "# select pareto frontier", "\n", "            ", "pareto", "=", "PyBspTreeArchive", "(", "len", "(", "metrics", ")", ")", ".", "filter", "(", "[", "[", "x", "[", "m", "]", "for", "m", "in", "metrics", "]", "for", "x", "in", "population", "]", ",", "returnIds", "=", "True", ")", "\n", "\n", "current_pareto", "=", "[", "population", "[", "i", "]", "for", "i", "in", "pareto", "]", "\n", "missing", "=", "p_size", "-", "len", "(", "next_parent", ")", "\n", "\n", "if", "(", "len", "(", "current_pareto", ")", "<=", "missing", ")", ":", "# can we put all pareto frontier to the next parent", "\n", "                ", "next_parent", "+=", "current_pareto", "\n", "", "else", ":", "# distance crowding ", "\n", "                ", "next_parent", "+=", "crowding_reduce", "(", "current_pareto", ",", "missing", ",", "metrics", ")", "\n", "\n", "", "for", "i", "in", "reversed", "(", "sorted", "(", "pareto", ")", ")", ":", "# delete nodes from the current population", "\n", "                ", "population", ".", "pop", "(", "i", ")", "\n", "\n", "", "", "parent", "=", "next_parent", "\n", "print", "(", "\"gen \"", ",", "g", ")", "\n", "\n", "# TODO: I recomend to save the current population to some TMP folder; the name of the results must be unique for each separate run", "\n", "# because many runs will run in parallel", "\n", "json", ".", "dump", "(", "parent", ",", "open", "(", "f\"{args.save_dir}/{args.output}_gen_{g}.json\"", ",", "\"wt\"", ")", ")", "\n", "# final filtering", "\n", "", "evaluate_population", "(", "parent", ")", "\n", "pareto", "=", "PyBspTreeArchive", "(", "len", "(", "metrics", ")", ")", ".", "filter", "(", "[", "[", "x", "[", "m", "]", "for", "m", "in", "metrics", "]", "for", "x", "in", "parent", "]", ",", "returnIds", "=", "True", ")", "\n", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "pareto", ":", "\n", "        ", "ret", ".", "append", "(", "parent", "[", "i", "]", ")", "\n", "\n", "", "print", "(", "\"Filt pareto combinations: %d in %f seconds\"", "%", "(", "len", "(", "ret", ")", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.margin_loss": [[812, 823], ["keras.backend.mean", "keras.backend.sum", "keras.backend.square", "keras.backend.square", "keras.backend.maximum", "keras.backend.maximum"], "function", ["None"], ["", "def", "margin_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "\"\"\"\n    Margin loss for Eq.(4). When y_true[i, :] contains not just one `1`, this loss should work too. Not test it.\n    :param y_true: [None, n_classes]\n    :param y_pred: [None, num_capsule]\n    :return: a scalar loss value.\n    \"\"\"", "\n", "L", "=", "y_true", "*", "K", ".", "square", "(", "K", ".", "maximum", "(", "0.", ",", "0.9", "-", "y_pred", ")", ")", "+", "0.5", "*", "(", "1", "-", "y_true", ")", "*", "K", ".", "square", "(", "K", ".", "maximum", "(", "0.", ",", "y_pred", "-", "0.1", ")", ")", "\n", "\n", "return", "K", ".", "mean", "(", "K", ".", "sum", "(", "L", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.train": [[825, 902], ["print", "keras.callbacks.CSVLogger", "keras.callbacks.TensorBoard", "keras.callbacks.ModelCheckpoint", "keras.callbacks.LearningRateScheduler", "timeout_callback.TimeoutCallback", "utils.multi_gpu_model.compile", "utils.multi_gpu_model.fit_generator", "uuid.uuid1", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.flow", "int", "tensorflow.contrib.eager.num_gpus", "keras.utils.multi_gpu_model", "print", "print", "print", "print", "keras.optimizers.Adam", "train_datagen.flow.next", "main.train.train_generator"], "function", ["None"], ["", "def", "train", "(", "model", ",", "data", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    Training a CapsuleNet\n    :param model: the CapsuleNet model\n    :param data: a tuple containing training and testing data, like `((x_train, y_train), (x_test, y_test))`\n    :param args: arguments\n    :return: The trained model\n    \"\"\"", "\n", "# unpacking the data", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "data", "\n", "\n", "# callbacks", "\n", "\n", "import", "uuid", "\n", "runid", "=", "uuid", ".", "uuid1", "(", ")", ".", "hex", "\n", "print", "(", "\"### runid:\"", ",", "runid", ")", "\n", "\n", "log", "=", "callbacks", ".", "CSVLogger", "(", "args", ".", "save_dir", "+", "'/'", "+", "runid", "+", "'.csv'", ")", "\n", "tb", "=", "callbacks", ".", "TensorBoard", "(", "log_dir", "=", "args", ".", "save_dir", "+", "'/tensorboard-logs'", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "histogram_freq", "=", "int", "(", "args", ".", "debug", ")", ")", "\n", "\n", "checkpoint", "=", "callbacks", ".", "ModelCheckpoint", "(", "args", ".", "save_dir", "+", "'/'", "+", "runid", "+", "'.h5'", ",", "monitor", "=", "'val_capsnet_acc'", ",", "\n", "save_best_only", "=", "True", ",", "save_weights_only", "=", "True", ",", "verbose", "=", "1", ")", "\n", "lr_decay", "=", "callbacks", ".", "LearningRateScheduler", "(", "schedule", "=", "lambda", "epoch", ":", "args", ".", "lr", "*", "(", "args", ".", "lr_decay", "**", "epoch", ")", ")", "\n", "\n", "timeout_call", "=", "TimeoutCallback", "(", "args", ".", "timeout", ")", "# timeout", "\n", "\n", "try", ":", "\n", "        ", "gpus", "=", "args", ".", "gpus", "\n", "if", "not", "gpus", ":", "\n", "            ", "gpus", "=", "tf", ".", "contrib", ".", "eager", ".", "num_gpus", "(", ")", "\n", "\n", "", "if", "gpus", ">", "1", ":", "\n", "            ", "model", "=", "utils", ".", "multi_gpu_model", "(", "model", ",", "gpus", ",", "cpu_merge", "=", "False", ")", "\n", "print", "(", "f\"Training using multiple GPUs.. ({gpus})\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Single-GPU model is used\"", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Exception \"", ",", "e", ")", "\n", "print", "(", "\"Training using single GPU or CPU..\"", ")", "\n", "\n", "# compile the model", "\n", "", "model", ".", "compile", "(", "optimizer", "=", "optimizers", ".", "Adam", "(", "lr", "=", "args", ".", "lr", ")", ",", "\n", "loss", "=", "[", "margin_loss", ",", "'mse'", "]", ",", "\n", "loss_weights", "=", "[", "1.", ",", "args", ".", "lam_recon", "]", ",", "\n", "metrics", "=", "{", "'capsnet'", ":", "'accuracy'", "}", ")", "\n", "\n", "\"\"\"\n    # Training without data augmentation:\n    model.fit([x_train, y_train], [y_train, x_train], batch_size=args.batch_size, epochs=args.epochs,\n              validation_data=[[x_test, y_test], [y_test, x_test]], callbacks=[log, tb, checkpoint, lr_decay])\n    \"\"\"", "\n", "\n", "# Begin: Training with data augmentation ---------------------------------------------------------------------#", "\n", "def", "train_generator", "(", "x", ",", "y", ",", "batch_size", ",", "shift_fraction", "=", "0.", ")", ":", "\n", "        ", "train_datagen", "=", "ImageDataGenerator", "(", "width_shift_range", "=", "shift_fraction", ",", "\n", "height_shift_range", "=", "shift_fraction", ")", "# shift up to 2 pixel for MNIST", "\n", "generator", "=", "train_datagen", ".", "flow", "(", "x", ",", "y", ",", "batch_size", "=", "batch_size", ")", "\n", "while", "1", ":", "\n", "            ", "x_batch", ",", "y_batch", "=", "generator", ".", "next", "(", ")", "\n", "yield", "(", "[", "x_batch", ",", "y_batch", "]", ",", "[", "y_batch", ",", "x_batch", "]", ")", "\n", "\n", "# Training with data augmentation. If shift_fraction=0., also no augmentation.", "\n", "", "", "model", ".", "fit_generator", "(", "generator", "=", "train_generator", "(", "x_train", ",", "y_train", ",", "args", ".", "batch_size", ",", "args", ".", "shift_fraction", ")", ",", "\n", "steps_per_epoch", "=", "int", "(", "y_train", ".", "shape", "[", "0", "]", "/", "args", ".", "batch_size", ")", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "validation_data", "=", "[", "[", "x_test", ",", "y_test", "]", ",", "[", "y_test", ",", "x_test", "]", "]", ",", "\n", "callbacks", "=", "[", "timeout_call", ",", "log", ",", "checkpoint", ",", "lr_decay", "]", ")", "\n", "# End: Training with data augmentation -----------------------------------------------------------------------#", "\n", "\n", "#model.save_weights(args.save_dir + '/trained_model.h5')", "\n", "#print('Trained model saved to \\'%s/trained_model.h5\\'' % args.save_dir)", "\n", "\n", "#from keras.utils import plot_log", "\n", "#plot_log(args.save_dir + '/log.csv', show=True)", "\n", "\n", "return", "runid", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.test": [[904, 911], ["model.predict", "print", "print", "numpy.sum", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "test", "(", "model", ",", "data", ",", "args", ")", ":", "\n", "    ", "x_test", ",", "y_test", "=", "data", "\n", "y_pred", ",", "x_recon", "=", "model", ".", "predict", "(", "x_test", ",", "batch_size", "=", "100", ")", "\n", "print", "(", "'-'", "*", "30", "+", "'Begin: test'", "+", "'-'", "*", "30", ")", "\n", "test_acc", "=", "np", ".", "sum", "(", "np", ".", "argmax", "(", "y_pred", ",", "1", ")", "==", "np", ".", "argmax", "(", "y_test", ",", "1", ")", ")", "/", "y_test", ".", "shape", "[", "0", "]", "\n", "print", "(", "'Test acc:'", ",", "test_acc", ")", "\n", "return", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.load_mnist": [[915, 925], ["mnist.load_data", "keras.utils.to_categorical", "keras.utils.to_categorical", "x_train.reshape().astype", "x_test.reshape().astype", "utils.to_categorical.astype", "utils.to_categorical.astype", "x_train.reshape", "x_test.reshape"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.svhn.load_data"], ["", "def", "load_mnist", "(", ")", ":", "\n", "# the data, shuffled and split between train and test sets", "\n", "    ", "from", "keras", ".", "datasets", "import", "mnist", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "mnist", ".", "load_data", "(", ")", "\n", "\n", "x_train", "=", "x_train", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "x_test", "=", "x_test", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "y_train", "=", "utils", ".", "to_categorical", "(", "y_train", ".", "astype", "(", "'float32'", ")", ")", "\n", "y_test", "=", "utils", ".", "to_categorical", "(", "y_test", ".", "astype", "(", "'float32'", ")", ")", "\n", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.load_fmnist": [[927, 937], ["fashion_mnist.load_data", "keras.utils.to_categorical", "keras.utils.to_categorical", "x_train.reshape().astype", "x_test.reshape().astype", "utils.to_categorical.astype", "utils.to_categorical.astype", "x_train.reshape", "x_test.reshape"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.svhn.load_data"], ["", "def", "load_fmnist", "(", ")", ":", "\n", "# the data, shuffled and split between train and test sets", "\n", "    ", "from", "keras", ".", "datasets", "import", "fashion_mnist", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "fashion_mnist", ".", "load_data", "(", ")", "\n", "\n", "x_train", "=", "x_train", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "x_test", "=", "x_test", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "y_train", "=", "utils", ".", "to_categorical", "(", "y_train", ".", "astype", "(", "'float32'", ")", ")", "\n", "y_test", "=", "utils", ".", "to_categorical", "(", "y_test", ".", "astype", "(", "'float32'", ")", ")", "\n", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.load_cifar10": [[938, 955], ["cifar10.load_data", "keras.utils.to_categorical", "keras.utils.to_categorical", "x_train.astype", "x_test.astype", "utils.to_categorical.astype", "utils.to_categorical.astype"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.svhn.load_data"], ["", "def", "load_cifar10", "(", ")", ":", "\n", "    ", "from", "keras", ".", "datasets", "import", "cifar10", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "cifar10", ".", "load_data", "(", ")", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "x_test", "=", "x_test", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "y_train", "=", "utils", ".", "to_categorical", "(", "y_train", ".", "astype", "(", "'float32'", ")", ")", "\n", "y_test", "=", "utils", ".", "to_categorical", "(", "y_test", ".", "astype", "(", "'float32'", ")", ")", "\n", "\n", "# data preprocessing ", "\n", "x_train", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "x_train", "[", ":", ",", ":", ",", ":", ",", "0", "]", "-", "123.680", ")", "\n", "x_train", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "x_train", "[", ":", ",", ":", ",", ":", ",", "1", "]", "-", "116.779", ")", "\n", "x_train", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "(", "x_train", "[", ":", ",", ":", ",", ":", ",", "2", "]", "-", "103.939", ")", "\n", "x_test", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "x_test", "[", ":", ",", ":", ",", ":", ",", "0", "]", "-", "123.680", ")", "\n", "x_test", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "x_test", "[", ":", ",", ":", ",", ":", ",", "1", "]", "-", "116.779", ")", "\n", "x_test", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "(", "x_test", "[", ":", ",", ":", ",", ":", ",", "2", "]", "-", "103.939", ")", "\n", "\n", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.load_cifar100": [[958, 975], ["cifar100.load_data", "keras.utils.to_categorical", "keras.utils.to_categorical", "x_train.astype", "x_test.astype", "utils.to_categorical.astype", "utils.to_categorical.astype"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.svhn.load_data"], ["", "def", "load_cifar100", "(", ")", ":", "\n", "    ", "from", "keras", ".", "datasets", "import", "cifar100", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "cifar100", ".", "load_data", "(", ")", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "x_test", "=", "x_test", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "y_train", "=", "utils", ".", "to_categorical", "(", "y_train", ".", "astype", "(", "'float32'", ")", ")", "\n", "y_test", "=", "utils", ".", "to_categorical", "(", "y_test", ".", "astype", "(", "'float32'", ")", ")", "\n", "\n", "# data preprocessing ", "\n", "x_train", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "x_train", "[", ":", ",", ":", ",", ":", ",", "0", "]", "-", "123.680", ")", "\n", "x_train", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "x_train", "[", ":", ",", ":", ",", ":", ",", "1", "]", "-", "116.779", ")", "\n", "x_train", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "(", "x_train", "[", ":", ",", ":", ",", ":", ",", "2", "]", "-", "103.939", ")", "\n", "x_test", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "x_test", "[", ":", ",", ":", ",", ":", ",", "0", "]", "-", "123.680", ")", "\n", "x_test", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "x_test", "[", ":", ",", ":", ",", ":", ",", "1", "]", "-", "116.779", ")", "\n", "x_test", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "(", "x_test", "[", ":", ",", ":", ",", ":", ",", "2", "]", "-", "103.939", ")", "\n", "\n", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.load_svhn": [[977, 985], ["svhn.load_data", "y_train.astype.astype", "y_test.astype.astype", "x_train.astype", "x_test.astype"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.svhn.load_data"], ["", "def", "load_svhn", "(", ")", ":", "\n", "    ", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "svhn", ".", "load_data", "(", ")", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "x_test", "=", "x_test", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "y_train", "=", "y_train", ".", "astype", "(", "'float32'", ")", "\n", "y_test", "=", "y_test", ".", "astype", "(", "'float32'", ")", "\n", "\n", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.Length.call": [[22, 24], ["keras.sqrt", "keras.sum", "keras.epsilon", "keras.square"], "methods", ["None"], ["def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "K", ".", "sqrt", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "inputs", ")", ",", "-", "1", ")", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.Length.compute_output_shape": [[25, 27], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.Length.get_config": [[28, 31], ["super().get_config"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", "Length", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.Mask.call": [[47, 63], ["keras.batch_flatten", "type", "keras.sqrt", "keras.one_hot", "len", "keras.sum", "keras.expand_dims", "keras.square", "keras.argmax", "keras.sqrt.get_shape().as_list", "keras.sqrt.get_shape"], "methods", ["None"], ["def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "type", "(", "inputs", ")", "is", "list", ":", "# true label is provided with shape = [None, n_classes], i.e. one-hot code.", "\n", "            ", "assert", "len", "(", "inputs", ")", "==", "2", "\n", "inputs", ",", "mask", "=", "inputs", "\n", "", "else", ":", "# if no true label, mask by the max length of capsules. Mainly used for prediction", "\n", "# compute lengths of capsules", "\n", "            ", "x", "=", "K", ".", "sqrt", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "inputs", ")", ",", "-", "1", ")", ")", "\n", "# generate the mask which is a one-hot code.", "\n", "# mask.shape=[None, n_classes]=[None, num_capsule]", "\n", "mask", "=", "K", ".", "one_hot", "(", "indices", "=", "K", ".", "argmax", "(", "x", ",", "1", ")", ",", "num_classes", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ")", "\n", "\n", "# inputs.shape=[None, num_capsule, dim_capsule]", "\n", "# mask.shape=[None, num_capsule]", "\n", "# masked.shape=[None, num_capsule * dim_capsule]", "\n", "", "masked", "=", "K", ".", "batch_flatten", "(", "inputs", "*", "K", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", ")", "\n", "return", "masked", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.Mask.compute_output_shape": [[64, 69], ["type", "tuple", "tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "type", "(", "input_shape", "[", "0", "]", ")", "is", "tuple", ":", "# true label provided", "\n", "            ", "return", "tuple", "(", "[", "None", ",", "input_shape", "[", "0", "]", "[", "1", "]", "*", "input_shape", "[", "0", "]", "[", "2", "]", "]", ")", "\n", "", "else", ":", "# no true label provided", "\n", "            ", "return", "tuple", "(", "[", "None", ",", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.Mask.get_config": [[70, 73], ["super().get_config"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", "Mask", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.__init__": [[98, 106], ["keras.layers.Layer.__init__", "keras.initializers.get"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["def", "__init__", "(", "self", ",", "num_capsule", ",", "dim_capsule", ",", "routings", "=", "3", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CapsuleLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_capsule", "=", "num_capsule", "\n", "self", ".", "dim_capsule", "=", "dim_capsule", "\n", "self", ".", "routings", "=", "routings", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.build": [[107, 119], ["capsulelayers.CapsuleLayer.add_weight", "len"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", ">=", "3", ",", "\"The input Tensor should have shape=[None, input_num_capsule, input_dim_capsule]\"", "\n", "self", ".", "input_num_capsule", "=", "input_shape", "[", "1", "]", "\n", "self", ".", "input_dim_capsule", "=", "input_shape", "[", "2", "]", "\n", "\n", "# Transform matrix", "\n", "self", ".", "W", "=", "self", ".", "add_weight", "(", "shape", "=", "[", "self", ".", "num_capsule", ",", "self", ".", "input_num_capsule", ",", "\n", "self", ".", "dim_capsule", ",", "self", ".", "input_dim_capsule", "]", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'W'", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.call": [[120, 164], ["keras.expand_dims", "keras.tile", "keras.map_fn", "tensorflow.zeros", "range", "tensorflow.nn.softmax", "capsulelayers.squash", "keras.batch_dot", "keras.batch_dot", "keras.batch_dot", "keras.shape"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.layers.CapsuleLayers.softmax", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "None", ")", ":", "\n", "# inputs.shape=[None, input_num_capsule, input_dim_capsule]", "\n", "# inputs_expand.shape=[None, 1, input_num_capsule, input_dim_capsule]", "\n", "        ", "inputs_expand", "=", "K", ".", "expand_dims", "(", "inputs", ",", "1", ")", "\n", "\n", "# Replicate num_capsule dimension to prepare being multiplied by W", "\n", "# inputs_tiled.shape=[None, num_capsule, input_num_capsule, input_dim_capsule]", "\n", "inputs_tiled", "=", "K", ".", "tile", "(", "inputs_expand", ",", "[", "1", ",", "self", ".", "num_capsule", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Compute `inputs * W` by scanning inputs_tiled on dimension 0.", "\n", "# x.shape=[num_capsule, input_num_capsule, input_dim_capsule]", "\n", "# W.shape=[num_capsule, input_num_capsule, dim_capsule, input_dim_capsule]", "\n", "# Regard the first two dimensions as `batch` dimension,", "\n", "# then matmul: [input_dim_capsule] x [dim_capsule, input_dim_capsule]^T -> [dim_capsule].", "\n", "# inputs_hat.shape = [None, num_capsule, input_num_capsule, dim_capsule]", "\n", "inputs_hat", "=", "K", ".", "map_fn", "(", "lambda", "x", ":", "K", ".", "batch_dot", "(", "x", ",", "self", ".", "W", ",", "[", "2", ",", "3", "]", ")", ",", "elems", "=", "inputs_tiled", ")", "\n", "\n", "# Begin: Routing algorithm ---------------------------------------------------------------------#", "\n", "# The prior for coupling coefficient, initialized as zeros.", "\n", "# b.shape = [None, self.num_capsule, self.input_num_capsule].", "\n", "b", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "K", ".", "shape", "(", "inputs_hat", ")", "[", "0", "]", ",", "self", ".", "num_capsule", ",", "self", ".", "input_num_capsule", "]", ")", "\n", "\n", "assert", "self", ".", "routings", ">", "0", ",", "'The routings should be > 0.'", "\n", "for", "i", "in", "range", "(", "self", ".", "routings", ")", ":", "\n", "# c.shape=[batch_size, num_capsule, input_num_capsule]", "\n", "            ", "c", "=", "tf", ".", "nn", ".", "softmax", "(", "b", ",", "axis", "=", "1", ")", "\n", "\n", "# c.shape =  [batch_size, num_capsule, input_num_capsule]", "\n", "# inputs_hat.shape=[None, num_capsule, input_num_capsule, dim_capsule]", "\n", "# The first two dimensions as `batch` dimension,", "\n", "# then matmal: [input_num_capsule] x [input_num_capsule, dim_capsule] -> [dim_capsule].", "\n", "# outputs.shape=[None, num_capsule, dim_capsule]", "\n", "outputs", "=", "squash", "(", "K", ".", "batch_dot", "(", "c", ",", "inputs_hat", ",", "[", "2", ",", "2", "]", ")", ")", "# [None, 10, 16]", "\n", "\n", "if", "i", "<", "self", ".", "routings", "-", "1", ":", "\n", "# outputs.shape =  [None, num_capsule, dim_capsule]", "\n", "# inputs_hat.shape=[None, num_capsule, input_num_capsule, dim_capsule]", "\n", "# The first two dimensions as `batch` dimension,", "\n", "# then matmal: [dim_capsule] x [input_num_capsule, dim_capsule]^T -> [input_num_capsule].", "\n", "# b.shape=[batch_size, num_capsule, input_num_capsule]", "\n", "                ", "b", "+=", "K", ".", "batch_dot", "(", "outputs", ",", "inputs_hat", ",", "[", "2", ",", "3", "]", ")", "\n", "# End: Routing algorithm -----------------------------------------------------------------------#", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.compute_output_shape": [[165, 167], ["tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "None", ",", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config": [[168, 176], ["super().get_config", "dict", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.CapsuleLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'num_capsule'", ":", "self", ".", "num_capsule", ",", "\n", "'dim_capsule'", ":", "self", ".", "dim_capsule", ",", "\n", "'routings'", ":", "self", ".", "routings", "\n", "}", "\n", "base_config", "=", "super", "(", "CapsuleLayer", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.squash": [[75, 85], ["keras.sum", "keras.square", "keras.sqrt", "keras.epsilon"], "function", ["None"], ["", "", "def", "squash", "(", "vectors", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    The non-linear activation used in Capsule. It drives the length of a large vector to near 1 and small vector to 0\n    :param vectors: some vectors to be squashed, N-dim tensor\n    :param axis: the axis to squash\n    :return: a Tensor with same shape as input vectors\n    \"\"\"", "\n", "s_squared_norm", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "vectors", ")", ",", "axis", ",", "keepdims", "=", "True", ")", "\n", "scale", "=", "s_squared_norm", "/", "(", "1", "+", "s_squared_norm", ")", "/", "K", ".", "sqrt", "(", "s_squared_norm", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "return", "scale", "*", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.PrimaryCap": [[178, 189], ["keras.layers.Conv2D", "keras.layers.Lambda"], "function", ["None"], ["", "", "def", "PrimaryCap", "(", "inputs", ",", "dim_capsule", ",", "n_channels", ",", "kernel_size", ",", "strides", ",", "padding", ")", ":", "\n", "    ", "\"\"\"\n    Apply Conv2D `n_channels` times and concatenate all capsules\n    :param inputs: 4D tensor, shape=[None, width, height, channels]\n    :param dim_capsule: the dim of the output vector of capsule\n    :param n_channels: the number of types of capsules\n    :return: output tensor, shape=[None, num_capsule, dim_capsule]\n    \"\"\"", "\n", "outputs", "=", "layers", ".", "Conv2D", "(", "filters", "=", "dim_capsule", "*", "n_channels", ",", "kernel_size", "=", "kernel_size", ",", "strides", "=", "strides", ",", "padding", "=", "padding", ")", "(", "inputs", ")", "\n", "#outputs = layers.Reshape(target_shape=[-1, dim_capsule])(output)", "\n", "return", "layers", ".", "Lambda", "(", "squash", ")", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.wrapper.CapsNet": [[19, 287], ["keras.layers.Input", "print", "print", "range", "range", "keras.layers.Input", "keras.models.Sequential", "models.Sequential.summary", "keras.models.Model", "keras.models.Model", "keras.layers.Input", "keras.models.Model", "len", "len", "len", "capsulelayers.Length", "capsulelayers.Mask", "capsulelayers.Mask", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "keras.layers.Add", "capsulelayers.Mask", "models.Sequential.", "conv.append", "len", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.BatchNormalization", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Activation", "keras.layers.Reshape", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.", "models.Sequential.", "str", "caps.append", "print", "print", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.BatchNormalization", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Activation", "keras.layers.Reshape", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "len", "dcaps.append", "print", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "capsulelayers.PrimaryCap.get_shape().as_list", "capsulelayers.PrimaryCap", "print", "print", "print", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.BatchNormalization", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Activation", "keras.layers.Reshape", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "keras.layers.Reshape", "str", "capsulelayers.PrimaryCap.get_shape().as_list", "print", "print", "print", "print", "print", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.BatchNormalization", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Activation", "keras.layers.Reshape", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.summary", "models.Sequential.add", "str", "capsulelayers.PrimaryCap.get_shape", "str", "str", "capsulelayers.PrimaryCap.get_shape().as_list", "keras.layers.Reshape", "capsulelayers.PrimaryCap.get_shape().as_list", "capsulelayers.CapsuleLayer", "capsulelayers.PrimaryCap.get_shape().as_list", "capsulelayers.PrimaryCap.get_shape().as_list", "print", "print", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.BatchNormalization", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Activation", "keras.layers.Reshape", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "models.Sequential.add", "NotImplementedError", "capsulelayers.PrimaryCap.get_shape", "print", "capsulelayers.PrimaryCap.get_shape().as_list", "layers.DeepCapsKerasLayers.Conv2DCaps", "layers.DeepCapsKerasLayers.Conv2DCaps", "layers.DeepCapsKerasLayers.Conv2DCaps", "keras.layers.Add", "print", "print", "layers.DeepCapsKerasLayers.FlattenCaps", "layers.DeepCapsKerasLayers.FlattenCaps.", "layers.DeepCapsKerasLayers.FlattenCaps", "layers.DeepCapsKerasLayers.FlattenCaps.", "print", "print", "print", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.BatchNormalization", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Activation", "keras.layers.Reshape", "len", "capsulelayers.PrimaryCap.get_shape", "capsulelayers.PrimaryCap.get_shape", "capsulelayers.PrimaryCap.get_shape", "capsulelayers.PrimaryCap.get_shape", "layers.DeepCapsKerasLayers.ConvertToCaps", "layers.DeepCapsKerasLayers.ConvCapsuleLayer3D", "layers.DeepCapsKerasLayers.Conv2DCaps", "x1.get_shape().as_list", "x2.get_shape().as_list", "keras.layers.Concatenate", "flatCaps.get_shape().as_list", "layers.DeepCapsKerasLayers.DClassCaps", "capsulelayers.PrimaryCap.get_shape().as_list", "str", "capsulelayers.PrimaryCap.get_shape", "x1.get_shape", "x2.get_shape", "flatCaps.get_shape", "capsulelayers.PrimaryCap.get_shape"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.capsulelayers.PrimaryCap"], ["def", "CapsNet", "(", "gene", ",", "input_shape", ",", "n_class", ",", "routings", ")", ":", "\n", "    ", "\"\"\"\n    A Capsule Network on MNIST.\n    :param input_shape: data shape, 3d, [width, height, channels]\n    :param n_class: number of classes\n    :param routings: number of routing iterations\n    :return: Two Keras Models, the first one used for training, and the second one for evaluation.\n            `eval_model` can also be used for training.\n    \"\"\"", "\n", "inputs", "=", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "x", "=", "inputs", "\n", "\n", "print", "(", "\"### Input shape\"", ",", ")", "\n", "\n", "# if input_shape==(28, 28, 1):", "\n", "#     dataset=\"mnist\"", "\n", "# elif input_shape==(32, 32, 3):", "\n", "#     dataset=\"cifar\"", "\n", "# elif input_shape==(32, 32, 3) and gene[len(gene)-1][0]==2:", "\n", "#     dataset=\"cifar_resized\"", "\n", "\n", "remaining", "=", "len", "(", "gene", ")", "-", "2", "\n", "conv_index", "=", "1", "\n", "caps_index", "=", "1", "\n", "deepcaps_index", "=", "1", "\n", "count", "=", "0", "\n", "xtra_skip", "=", "gene", "[", "len", "(", "gene", ")", "-", "2", "]", "[", "0", "]", "\n", "print", "(", "\"xtra_skip is \"", "+", "str", "(", "gene", "[", "len", "(", "gene", ")", "-", "2", "]", "[", "0", "]", ")", "+", "\"\\n\"", ")", "\n", "\n", "# Scan for type of layers", "\n", "#N_layers = int((len(gene)-2)/9) # -1 for xtraskip term", "\n", "conv", "=", "[", "]", "\n", "caps", "=", "[", "]", "\n", "dcaps", "=", "[", "]", "\n", "N_conv", "=", "0", "\n", "N_caps", "=", "0", "\n", "N_dcaps", "=", "0", "\n", "i", "=", "0", "\n", "prevlayertype", "=", "0", "\n", "for", "index", "in", "range", "(", "0", ",", "len", "(", "gene", ")", ")", ":", "\n", "        ", "if", "gene", "[", "index", "]", "[", "0", "]", "==", "0", ":", "\n", "            ", "N_conv", "=", "N_conv", "+", "1", "\n", "conv", ".", "append", "(", "i", ")", "\n", "i", "+=", "1", "\n", "", "elif", "gene", "[", "index", "]", "[", "0", "]", "==", "1", ":", "\n", "            ", "type", "=", "1", "\n", "N_caps", "=", "N_caps", "+", "1", "\n", "caps", ".", "append", "(", "i", ")", "\n", "i", "+=", "1", "\n", "", "elif", "gene", "[", "index", "]", "[", "0", "]", "==", "2", ":", "\n", "            ", "convert", "=", "1", "\n", "type", "=", "2", "\n", "N_dcaps", "=", "N_dcaps", "+", "1", "\n", "dcaps", ".", "append", "(", "i", ")", "\n", "i", "+=", "1", "\n", "\n", "\n", "\n", "", "", "for", "index", "in", "range", "(", "0", ",", "len", "(", "gene", ")", ")", ":", "\n", "#for layer in gene:", "\n", "\n", "        ", "if", "len", "(", "gene", "[", "index", "]", ")", ">", "1", ":", "\n", "\n", "# Convolutional layers", "\n", "# conv = [0, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "            ", "if", "gene", "[", "index", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "if", "prevlayertype", "==", "2", ":", "\n", "                    ", "x", "=", "layers", ".", "Reshape", "(", "(", "gene", "[", "index", "]", "[", "1", "]", ",", "gene", "[", "index", "]", "[", "1", "]", ",", "-", "1", ")", ")", "(", "x", ")", "\n", "print", "(", "\"ConvertToConv\"", "+", "str", "(", "prevlayertype", ")", ")", "\n", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "gene", "[", "index", "]", "[", "7", "]", "*", "gene", "[", "index", "]", "[", "8", "]", ",", "kernel_size", "=", "gene", "[", "index", "]", "[", "4", "]", ",", "strides", "=", "gene", "[", "index", "]", "[", "5", "]", ",", "padding", "=", "'same'", ",", "data_format", "=", "\"channels_last\"", ")", "(", "x", ")", "\n", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "print", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "conv_index", "=", "conv_index", "+", "1", "\n", "remaining", "=", "remaining", "-", "1", "\n", "print", "(", "\"Added Conv%s_layer\"", "%", "str", "(", "conv_index", "-", "1", ")", ")", "\n", "count", "+=", "1", "\n", "if", "xtra_skip", "==", "count", "-", "1", "or", "(", "xtra_skip", "==", "0", "and", "count", "==", "1", ")", ":", "\n", "                    ", "x1", "=", "x", "\n", "xtra_skip", "=", "-", "2", "#flag==2 for inserted xtra skip", "\n", "", "prevlayertype", "=", "0", "\n", "\n", "# Primary Capsules layers", "\n", "# caps = [1, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "", "elif", "gene", "[", "index", "]", "[", "0", "]", "==", "1", "and", "remaining", ">", "1", ":", "\n", "                ", "x", "=", "PrimaryCap", "(", "x", ",", "dim_capsule", "=", "gene", "[", "index", "]", "[", "8", "]", ",", "n_channels", "=", "gene", "[", "index", "]", "[", "7", "]", ",", "kernel_size", "=", "gene", "[", "index", "]", "[", "4", "]", ",", "strides", "=", "gene", "[", "index", "]", "[", "5", "]", ",", "padding", "=", "'same'", ")", "#CapsuleLayer(layer[7], layer[8])(x)", "\n", "print", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "caps_index", "=", "caps_index", "+", "1", "\n", "remaining", "=", "remaining", "-", "1", "\n", "print", "(", "\"rem \"", "+", "str", "(", "remaining", ")", ")", "\n", "print", "(", "\"Added Caps%s_layer\"", "%", "str", "(", "caps_index", "-", "1", ")", ")", "\n", "veclen", "=", "gene", "[", "index", "]", "[", "7", "]", "\n", "numout", "=", "gene", "[", "index", "]", "[", "8", "]", "\n", "prevlayertype", "=", "1", "\n", "\n", "# Class Capsules layer", "\n", "# caps = [1, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "", "elif", "gene", "[", "index", "]", "[", "0", "]", "==", "1", "and", "remaining", "==", "1", ":", "\n", "                ", "print", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "x", "=", "layers", ".", "Reshape", "(", "target_shape", "=", "[", "-", "1", ",", "gene", "[", "index", "]", "[", "2", "]", "]", ")", "(", "x", ")", "#[veclen*layer[1]*layer[1],  numout])(x) # added this to solve error instead of   Reshape(target_shape=[-1, layer[2]])(x) ", "\n", "print", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "x", "=", "CapsuleLayer", "(", "gene", "[", "index", "]", "[", "7", "]", ",", "gene", "[", "index", "]", "[", "8", "]", ",", "3", ",", "name", "=", "'digitcaps'", ")", "(", "x", ")", "\n", "print", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "dim_capsule_out", "=", "gene", "[", "index", "]", "[", "8", "]", "\n", "caps_index", "=", "caps_index", "+", "1", "\n", "remaining", "=", "remaining", "-", "1", "\n", "print", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "print", "(", "\"Added ClassCaps_layer\\n\"", ")", "\n", "\n", "# DeepCaps Cells", "\n", "# d_caps = [2, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "", "elif", "gene", "[", "index", "]", "[", "0", "]", "==", "2", "and", "remaining", ">", "1", ":", "\n", "                ", "if", "prevlayertype", "==", "0", ":", "\n", "                    ", "x", "=", "ConvertToCaps", "(", ")", "(", "x", ")", "\n", "print", "(", "\"ConvertToCaps\"", "+", "str", "(", "prevlayertype", ")", ")", "\n", "\n", "", "print", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "x", "=", "Conv2DCaps", "(", "gene", "[", "index", "]", "[", "7", "]", ",", "gene", "[", "index", "]", "[", "8", "]", ",", "kernel_size", "=", "(", "gene", "[", "index", "]", "[", "4", "]", ",", "gene", "[", "index", "]", "[", "4", "]", ")", ",", "strides", "=", "(", "gene", "[", "index", "]", "[", "5", "]", ",", "gene", "[", "index", "]", "[", "5", "]", ")", ",", "r_num", "=", "1", ",", "b_alphas", "=", "[", "1", ",", "1", ",", "1", "]", ")", "(", "x", ")", "\n", "deepcaps_index", "=", "deepcaps_index", "+", "1", "\n", "\n", "if", "remaining", "==", "2", ":", "\n", "                    ", "x_skip", "=", "ConvCapsuleLayer3D", "(", "kernel_size", "=", "3", ",", "num_capsule", "=", "gene", "[", "index", "]", "[", "7", "]", ",", "num_atoms", "=", "gene", "[", "index", "]", "[", "8", "]", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "routings", "=", "3", ")", "(", "x", ")", "\n", "deepcaps_index", "=", "deepcaps_index", "+", "1", "\n", "", "else", ":", "\n", "                    ", "x_skip", "=", "Conv2DCaps", "(", "gene", "[", "index", "]", "[", "7", "]", ",", "gene", "[", "index", "]", "[", "8", "]", ",", "kernel_size", "=", "(", "gene", "[", "index", "]", "[", "4", "]", ",", "gene", "[", "index", "]", "[", "4", "]", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "r_num", "=", "1", ",", "b_alphas", "=", "[", "1", ",", "1", ",", "1", "]", ")", "(", "x", ")", "\n", "deepcaps_index", "=", "deepcaps_index", "+", "1", "\n", "\n", "", "x", "=", "Conv2DCaps", "(", "gene", "[", "index", "]", "[", "7", "]", ",", "gene", "[", "index", "]", "[", "8", "]", ",", "kernel_size", "=", "(", "gene", "[", "index", "]", "[", "4", "]", ",", "gene", "[", "index", "]", "[", "4", "]", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "r_num", "=", "1", ",", "b_alphas", "=", "[", "1", ",", "1", ",", "1", "]", ")", "(", "x", ")", "\n", "deepcaps_index", "=", "deepcaps_index", "+", "1", "\n", "x", "=", "Conv2DCaps", "(", "gene", "[", "index", "]", "[", "7", "]", ",", "gene", "[", "index", "]", "[", "8", "]", ",", "kernel_size", "=", "(", "gene", "[", "index", "]", "[", "4", "]", ",", "gene", "[", "index", "]", "[", "4", "]", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "r_num", "=", "1", ",", "b_alphas", "=", "[", "1", ",", "1", ",", "1", "]", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Add", "(", ")", "(", "[", "x", ",", "x_skip", "]", ")", "\n", "count", "+=", "1", "#CapsCell count", "\n", "print", "(", "\"Added CapsCell_layer\\n\"", ")", "\n", "\n", "if", "xtra_skip", "-", "1", "==", "count", "-", "1", ":", "\n", "                    ", "x1", "=", "x", "\n", "xtra_skip", "=", "-", "2", "#flag==2 for inserted xtra skip", "\n", "", "elif", "remaining", "==", "1", "and", "xtra_skip", "==", "-", "2", ":", "\n", "                    ", "x2", "=", "x", "\n", "", "elif", "remaining", "==", "2", "and", "xtra_skip", "==", "-", "1", ":", "\n", "                    ", "x1", "=", "x", "\n", "x2", "=", "x", "\n", "\n", "", "deepcaps_index", "=", "deepcaps_index", "+", "1", "\n", "remaining", "=", "remaining", "-", "1", "\n", "x2", "=", "x", "\n", "prevlayertype", "=", "2", "\n", "\n", "#FlattenCaps", "\n", "", "elif", "gene", "[", "index", "]", "[", "0", "]", "==", "2", "and", "remaining", "==", "1", ":", "\n", "                ", "print", "(", "x1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "print", "(", "x2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "flatCaps", "=", "FlattenCaps", "(", ")", "\n", "xa", "=", "flatCaps", "(", "x2", ")", "\n", "flatCaps", "=", "FlattenCaps", "(", ")", "\n", "xb", "=", "flatCaps", "(", "x1", ")", "\n", "x", "=", "layers", ".", "Concatenate", "(", "axis", "=", "-", "2", ")", "(", "[", "xa", ",", "xb", "]", ")", "\n", "print", "(", "xa", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "x", "=", "DClassCaps", "(", "num_capsule", "=", "gene", "[", "index", "]", "[", "7", "]", ",", "dim_capsule", "=", "gene", "[", "index", "]", "[", "8", "]", ",", "routings", "=", "3", ",", "channels", "=", "0", ",", "name", "=", "'digit_caps'", ")", "(", "x", ")", "\n", "print", "(", "\"Added FlattenCaps_layer\\n\"", ")", "\n", "print", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "dim_capsule_out", "=", "gene", "[", "index", "]", "[", "8", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "\n", "\n", "", "", "digitcaps", "=", "x", "\n", "\n", "# Layer 4: This is an auxiliary layer to replace each capsule with its length. Just to match the true label's shape.", "\n", "# If using tensorflow, this will not be necessary. :)", "\n", "out_caps", "=", "Length", "(", "name", "=", "'capsnet'", ")", "(", "digitcaps", ")", "\n", "\n", "# Decoder network.", "\n", "y", "=", "layers", ".", "Input", "(", "shape", "=", "(", "n_class", ",", ")", ")", "\n", "masked_by_y", "=", "Mask", "(", ")", "(", "[", "digitcaps", ",", "y", "]", ")", "# The true label is used to mask the output of capsule layer. For training", "\n", "masked", "=", "Mask", "(", ")", "(", "digitcaps", ")", "# Mask using the capsule with maximal length. For prediction", "\n", "\n", "# Shared Decoder model in training and prediction", "\n", "decoder", "=", "models", ".", "Sequential", "(", "name", "=", "'decoder'", ")", "\n", "\n", "# DeepCaps Decoder", "\n", "if", "input_shape", "==", "(", "32", ",", "32", ",", "3", ")", ":", "# cifar10 resized", "\n", "        ", "decoder", ".", "add", "(", "layers", ".", "Dense", "(", "8", "*", "8", "*", "16", ",", "input_dim", "=", "dim_capsule_out", "*", "n_class", ",", "activation", "=", "'relu'", ")", ")", "#8*8*16", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "(", "8", ",", "8", ",", "16", ")", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "64", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "32", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "16", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "#decoder.add(layers.Conv2DTranspose(8, (3, 3), strides=(2, 2), padding=\"same\"))", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "3", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Activation", "(", "\"relu\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "target_shape", "=", "(", "32", ",", "32", ",", "3", ")", ",", "name", "=", "'out_recon'", ")", ")", "# 64, 64 in origial code", "\n", "", "elif", "input_shape", "==", "(", "64", ",", "64", ",", "3", ")", ":", "# cifar 10 resized", "\n", "        ", "decoder", ".", "add", "(", "layers", ".", "Dense", "(", "8", "*", "8", "*", "16", ",", "input_dim", "=", "dim_capsule_out", "*", "n_class", ",", "activation", "=", "'relu'", ")", ")", "#8*8*16", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "(", "8", ",", "8", ",", "16", ")", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "64", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "32", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "16", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "8", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "3", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Activation", "(", "\"relu\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "target_shape", "=", "(", "64", ",", "64", ",", "3", ")", ",", "name", "=", "'out_recon'", ")", ")", "\n", "", "elif", "input_shape", "==", "(", "28", ",", "28", ",", "1", ")", ":", "# mnist", "\n", "        ", "decoder", ".", "add", "(", "layers", ".", "Dense", "(", "7", "*", "7", "*", "16", ",", "input_dim", "=", "dim_capsule_out", "*", "n_class", ",", "activation", "=", "\"relu\"", ")", ")", "#7*7*16", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "(", "7", ",", "7", ",", "16", ")", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "64", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "32", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "16", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "1", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Activation", "(", "\"relu\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "target_shape", "=", "(", "28", ",", "28", ",", "1", ")", ",", "name", "=", "'out_recon'", ")", ")", "\n", "", "elif", "input_shape", "==", "(", "56", ",", "56", ",", "1", ")", ":", "# mnist resized", "\n", "        ", "decoder", ".", "add", "(", "layers", ".", "Dense", "(", "7", "*", "7", "*", "16", ",", "input_dim", "=", "dim_capsule_out", "*", "n_class", ",", "activation", "=", "\"relu\"", ")", ")", "#7*7*16", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "(", "7", ",", "7", ",", "16", ")", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "64", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "32", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "16", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "4", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Activation", "(", "\"relu\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "target_shape", "=", "(", "56", ",", "56", ",", "1", ")", ",", "name", "=", "'out_recon'", ")", ")", "\n", "\n", "", "elif", "input_shape", "==", "(", "56", ",", "56", ",", "3", ")", ":", "# mnist resized", "\n", "        ", "decoder", ".", "add", "(", "layers", ".", "Dense", "(", "7", "*", "7", "*", "16", ",", "input_dim", "=", "dim_capsule_out", "*", "n_class", ",", "activation", "=", "\"relu\"", ")", ")", "#7*7*16", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "(", "7", ",", "7", ",", "16", ")", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "64", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "32", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "16", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "12", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Activation", "(", "\"relu\"", ")", ")", "\n", "decoder", ".", "summary", "(", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "target_shape", "=", "(", "56", ",", "56", ",", "3", ")", ",", "name", "=", "'out_recon'", ")", ")", "\n", "\n", "\n", "", "elif", "input_shape", "==", "(", "64", ",", "64", ",", "1", ")", ":", "# mnist resized for deepcaps (64x64 inputs)", "\n", "        ", "decoder", ".", "add", "(", "layers", ".", "Dense", "(", "8", "*", "8", "*", "16", ",", "input_dim", "=", "dim_capsule_out", "*", "n_class", ",", "activation", "=", "'relu'", ")", ")", "#8*8*16", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "(", "8", ",", "8", ",", "16", ")", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "64", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "32", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "16", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "8", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Conv2DTranspose", "(", "1", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"same\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Activation", "(", "\"relu\"", ")", ")", "\n", "decoder", ".", "add", "(", "layers", ".", "Reshape", "(", "target_shape", "=", "(", "64", ",", "64", ",", "1", ")", ",", "name", "=", "'out_recon'", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Unknown decoder for shape {input_shape}\"", ")", "\n", "", "decoder", ".", "summary", "(", ")", "\n", "\n", "# Models for training and evaluation (prediction)", "\n", "train_model", "=", "models", ".", "Model", "(", "[", "inputs", ",", "y", "]", ",", "[", "out_caps", ",", "decoder", "(", "masked_by_y", ")", "]", ")", "\n", "eval_model", "=", "models", ".", "Model", "(", "inputs", ",", "[", "out_caps", ",", "decoder", "(", "masked", ")", "]", ")", "\n", "\n", "# manipulate model", "\n", "noise", "=", "layers", ".", "Input", "(", "shape", "=", "(", "n_class", ",", "dim_capsule_out", ")", ")", "\n", "noised_digitcaps", "=", "layers", ".", "Add", "(", ")", "(", "[", "digitcaps", ",", "noise", "]", ")", "\n", "masked_noised_y", "=", "Mask", "(", ")", "(", "[", "noised_digitcaps", ",", "y", "]", ")", "\n", "manipulate_model", "=", "models", ".", "Model", "(", "[", "inputs", ",", "y", ",", "noise", "]", ",", "decoder", "(", "masked_noised_y", ")", ")", "\n", "return", "train_model", ",", "eval_model", ",", "manipulate_model", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.timeout_callback.TimeoutCallback.__init__": [[15, 19], ["keras.callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__"], ["def", "__init__", "(", "self", ",", "train_time", ")", ":", "\n", "        ", "super", "(", "TimeoutCallback", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "train_time", "=", "train_time", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.timeout_callback.TimeoutCallback.on_train_begin": [[20, 23], ["time.time.time", "print"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "train_start", "=", "time", "(", ")", "\n", "print", "(", "'Training starts at {}'", ".", "format", "(", "self", ".", "train_start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.timeout_callback.TimeoutCallback.on_epoch_end": [[24, 33], ["print", "print", "time.time.time"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "train_time", ":", "\n", "            ", "remains", "=", "self", ".", "train_time", "-", "(", "time", "(", ")", "-", "self", ".", "train_start", ")", "\n", "if", "remains", "<=", "0", ":", "# limit reached", "\n", "                ", "print", "(", "'Training interrupted by TimeoutCallback({}) in epoch {} (ren: {:.1f})'", ".", "format", "(", "self", ".", "train_time", ",", "epoch", ",", "remains", ")", ")", "\n", "self", ".", "model", ".", "stop_training", "=", "True", "\n", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Remaining timeout {:.0f} sec in epoch {}'", ".", "format", "(", "remains", ",", "epoch", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.margin_loss": [[43, 54], ["keras.backend.mean", "keras.backend.sum", "keras.backend.square", "keras.backend.square", "keras.backend.maximum", "keras.backend.maximum"], "function", ["None"], ["def", "margin_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "\"\"\"\n    Margin loss for Eq.(4). When y_true[i, :] contains not just one `1`, this loss should work too. Not test it.\n    :param y_true: [None, n_classes]\n    :param y_pred: [None, num_capsule]\n    :return: a scalar loss value.\n    \"\"\"", "\n", "L", "=", "y_true", "*", "K", ".", "square", "(", "K", ".", "maximum", "(", "0.", ",", "0.9", "-", "y_pred", ")", ")", "+", "0.5", "*", "(", "1", "-", "y_true", ")", "*", "K", ".", "square", "(", "K", ".", "maximum", "(", "0.", ",", "y_pred", "-", "0.1", ")", ")", "\n", "\n", "return", "K", ".", "mean", "(", "K", ".", "sum", "(", "L", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.train": [[55, 134], ["print", "callbacks.CSVLogger", "callbacks.TensorBoard", "callbacks.ModelCheckpoint", "int", "callbacks.LearningRateScheduler", "utils.multi_gpu_model.compile", "utils.multi_gpu_model.fit_generator", "uuid.uuid1", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.flow", "int", "tensorflow.contrib.eager.num_gpus", "keras.utils.multi_gpu_model", "print", "print", "print", "print", "keras.optimizers.Adam", "train_datagen.flow.next", "chrlearn_complex.train.train_generator"], "function", ["None"], ["", "def", "train", "(", "model", ",", "data", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    Training a CapsuleNet\n    :param model: the CapsuleNet model\n    :param data: a tuple containing training and testing data, like `((x_train, y_train), (x_test, y_test))`\n    :param args: arguments\n    :return: The trained model\n    \"\"\"", "\n", "# unpacking the data", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "data", "\n", "\n", "# callbacks", "\n", "\n", "import", "uuid", "\n", "runid", "=", "uuid", ".", "uuid1", "(", ")", ".", "hex", "\n", "print", "(", "\"### runid:\"", ",", "runid", ")", "\n", "\n", "log", "=", "callbacks", ".", "CSVLogger", "(", "args", ".", "save_dir", "+", "'/'", "+", "runid", "+", "'.csv'", ")", "\n", "tb", "=", "callbacks", ".", "TensorBoard", "(", "log_dir", "=", "args", ".", "save_dir", "+", "'/tensorboard-logs'", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "histogram_freq", "=", "int", "(", "args", ".", "debug", ")", ")", "\n", "\n", "checkpoint", "=", "callbacks", ".", "ModelCheckpoint", "(", "args", ".", "save_dir", "+", "'/'", "+", "runid", "+", "'.h5'", ",", "monitor", "=", "'val_capsnet_acc'", ",", "\n", "save_best_only", "=", "True", ",", "save_weights_only", "=", "True", ",", "verbose", "=", "1", ")", "\n", "steps_per_epoch", "=", "int", "(", "y_train", ".", "shape", "[", "0", "]", "/", "args", ".", "batch_size", ")", "\n", "lr_decay", "=", "callbacks", ".", "LearningRateScheduler", "(", "schedule", "=", "lambda", "epoch", ":", "args", ".", "lr", "*", "(", "args", ".", "lr_decay", "**", "(", "epoch", "*", "steps_per_epoch", "/", "args", ".", "decay_steps", ")", ")", ")", "\n", "\n", "\n", "try", ":", "\n", "        ", "gpus", "=", "args", ".", "gpus", "\n", "if", "not", "gpus", ":", "\n", "            ", "gpus", "=", "tf", ".", "contrib", ".", "eager", ".", "num_gpus", "(", ")", "\n", "\n", "", "if", "gpus", ">", "1", ":", "\n", "            ", "model", "=", "utils", ".", "multi_gpu_model", "(", "model", ",", "gpus", ",", "cpu_merge", "=", "False", ")", "\n", "print", "(", "f\"Training using multiple GPUs.. ({gpus})\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Single-GPU model is used\"", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Exception \"", ",", "e", ")", "\n", "print", "(", "\"Training using single GPU or CPU..\"", ")", "\n", "\n", "# compile the model", "\n", "", "model", ".", "compile", "(", "optimizer", "=", "optimizers", ".", "Adam", "(", "lr", "=", "args", ".", "lr", ")", ",", "\n", "loss", "=", "[", "margin_loss", ",", "'mse'", "]", ",", "\n", "loss_weights", "=", "[", "1.", ",", "args", ".", "lam_recon", "]", ",", "\n", "metrics", "=", "{", "'capsnet'", ":", "'accuracy'", "}", ")", "\n", "\n", "\"\"\"\n    # Training without data augmentation:\n    model.fit([x_train, y_train], [y_train, x_train], batch_size=args.batch_size, epochs=args.epochs,\n              validation_data=[[x_test, y_test], [y_test, x_test]], callbacks=[log, tb, checkpoint, lr_decay])\n    \"\"\"", "\n", "\n", "# Begin: Training with data augmentation ---------------------------------------------------------------------#", "\n", "def", "train_generator", "(", "x", ",", "y", ",", "batch_size", ",", "shift_fraction", "=", "0.", ",", "rotation_range", "=", "0.", ",", "horizontal_flip", "=", "False", ")", ":", "\n", "        ", "train_datagen", "=", "ImageDataGenerator", "(", "width_shift_range", "=", "shift_fraction", ",", "\n", "height_shift_range", "=", "shift_fraction", ",", "# shift up to 2 pixel for MNIST", "\n", "rotation_range", "=", "rotation_range", ",", "\n", "horizontal_flip", "=", "horizontal_flip", ")", "\n", "generator", "=", "train_datagen", ".", "flow", "(", "x", ",", "y", ",", "batch_size", "=", "batch_size", ")", "\n", "while", "1", ":", "\n", "            ", "x_batch", ",", "y_batch", "=", "generator", ".", "next", "(", ")", "\n", "yield", "(", "[", "x_batch", ",", "y_batch", "]", ",", "[", "y_batch", ",", "x_batch", "]", ")", "\n", "\n", "# Training with data augmentation. If shift_fraction=0., also no augmentation.", "\n", "", "", "model", ".", "fit_generator", "(", "generator", "=", "train_generator", "(", "x_train", ",", "y_train", ",", "args", ".", "batch_size", ",", "args", ".", "shift_fraction", ",", "args", ".", "rotation_range", ",", "args", ".", "horizontal_flip", ")", ",", "\n", "steps_per_epoch", "=", "int", "(", "y_train", ".", "shape", "[", "0", "]", "/", "args", ".", "batch_size", ")", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "validation_data", "=", "[", "[", "x_test", ",", "y_test", "]", ",", "[", "y_test", ",", "x_test", "]", "]", ",", "\n", "callbacks", "=", "[", "log", ",", "checkpoint", ",", "lr_decay", "]", ")", "\n", "# End: Training with data augmentation -----------------------------------------------------------------------#", "\n", "\n", "#model.save_weights(args.save_dir + '/trained_model.h5')", "\n", "#print('Trained model saved to \\'%s/trained_model.h5\\'' % args.save_dir)", "\n", "\n", "#from keras.utils import plot_log", "\n", "#plot_log(args.save_dir + '/log.csv', show=True)", "\n", "\n", "return", "runid", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.test": [[137, 144], ["model.predict", "print", "print", "numpy.sum", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "test", "(", "model", ",", "data", ",", "args", ")", ":", "\n", "    ", "x_test", ",", "y_test", "=", "data", "\n", "y_pred", ",", "x_recon", "=", "model", ".", "predict", "(", "x_test", ",", "batch_size", "=", "100", ")", "\n", "print", "(", "'-'", "*", "30", "+", "'Begin: test'", "+", "'-'", "*", "30", ")", "\n", "test_acc", "=", "np", ".", "sum", "(", "np", ".", "argmax", "(", "y_pred", ",", "1", ")", "==", "np", ".", "argmax", "(", "y_test", ",", "1", ")", ")", "/", "y_test", ".", "shape", "[", "0", "]", "\n", "print", "(", "'Test acc:'", ",", "test_acc", ")", "\n", "return", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.wrap_train_test": [[147, 214], ["print", "print", "tensorflow.distribute.MirroredStrategy", "print", "model.summary", "chrlearn_complex.test", "tensorflow.keras.backend.clear_session", "keras.backend.clear_session", "main.resize", "main.resize", "print", "wrapper.CapsNet", "model.load_weights", "print", "chrlearn_complex.train", "os.system", "print", "print", "print", "tensorflow.keras.backend.clear_session", "keras.backend.clear_session", "print", "print", "tensorflow.keras.backend.clear_session", "keras.backend.clear_session", "print", "str", "len", "numpy.unique", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.test", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.resize", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.main.resize", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.wrapper.CapsNet", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.train"], ["", "def", "wrap_train_test", "(", "gene", ")", ":", "\n", "    ", "global", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "\n", "runid", "=", "\"N/A\"", "\n", "print", "(", "gene", ")", "\n", "\n", "print", "(", "\"\\nWrapping...\\n\"", ")", "\n", "strategy", "=", "tf", ".", "distribute", ".", "MirroredStrategy", "(", ")", "\n", "print", "(", "'Number of devices: {}'", ".", "format", "(", "strategy", ".", "num_replicas_in_sync", ")", ")", "\n", "\n", "\n", "# reshaping of the training data", "\n", "if", "gene", "[", "-", "1", "]", "[", "0", "]", "==", "2", ":", "# reshaping is enabled", "\n", "        ", "desired_size", "=", "gene", "[", "0", "]", "[", "1", "]", "\n", "x_train_current", "=", "resize", "(", "x_train", ",", "desired_size", ")", "\n", "x_test_current", "=", "resize", "(", "x_test", ",", "desired_size", ")", "\n", "", "elif", "gene", "[", "-", "1", "]", "[", "0", "]", "==", "1", ":", "# no reshaping", "\n", "        ", "x_train_current", "=", "x_train", "\n", "x_test_current", "=", "x_test", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"#### INVALID GENE - last value is not 1 nor 2\"", ",", "gene", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "return", "runid", ",", "0", "\n", "\n", "\n", "# define model", "\n", "", "try", ":", "\n", "        ", "print", "(", "\"x_train shape: \"", "+", "str", "(", "x_train_current", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "model", ",", "eval_model", ",", "manipulate_model", "=", "CapsNet", "(", "gene", "=", "gene", ",", "input_shape", "=", "x_train_current", ".", "shape", "[", "1", ":", "]", ",", "\n", "n_class", "=", "len", "(", "np", ".", "unique", "(", "np", ".", "argmax", "(", "y_train", ",", "1", ")", ")", ")", ",", "\n", "routings", "=", "args", ".", "routings", ")", "\n", "", "except", "ValueError", "as", "e", ":", "# some bug in the chromosome ....", "\n", "        ", "print", "(", "\"#### VALUE error desc \"", ",", "e", ")", "\n", "print", "(", "\"#### VALUE error gene \"", ",", "gene", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "return", "runid", ",", "0", "\n", "", "except", "tf", ".", "errors", ".", "ResourceExhaustedError", "as", "e", ":", "# some bug in the chromosome ....", "\n", "        ", "print", "(", "\"#### Out of resources error desc \"", ",", "e", ")", "\n", "print", "(", "\"#### Out of resources error gene \"", ",", "gene", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "return", "runid", ",", "0", "\n", "\n", "\n", "", "model", ".", "summary", "(", ")", "\n", "\n", "# train or test", "\n", "if", "args", ".", "weights", "is", "not", "None", ":", "# init the model weights with provided one", "\n", "        ", "model", ".", "load_weights", "(", "args", ".", "weights", ")", "\n", "", "if", "not", "args", ".", "testing", ":", "\n", "# if gene[len(gene)-1][0]==2:", "\n", "#     x_train = resize(x_train, gene[0][1]) #64", "\n", "#     x_test = resize(x_test, gene[0][1])", "\n", "#     train(model=model, data=((x_train, y_train), (x_test, y_test)), args=args)", "\n", "# elif gene[len(gene)-1][0]==1:", "\n", "        ", "print", "(", "\"Train shapes:\"", ",", "x_train", ".", "shape", ",", "y_train", ".", "shape", ")", "\n", "runid", ",", "_", "=", "train", "(", "model", "=", "model", ",", "data", "=", "(", "(", "x_train_current", ",", "y_train", ")", ",", "(", "x_test_current", ",", "y_test", ")", ")", ",", "args", "=", "args", ")", "\n", "", "else", ":", "# as long as weights are given, will run testing", "\n", "        ", "if", "args", ".", "weights", "is", "None", ":", "\n", "            ", "print", "(", "'No weights are provided. Will test using random initialized weights.'", ")", "\n", "", "", "test_acc", "=", "test", "(", "model", "=", "eval_model", ",", "data", "=", "(", "x_test_current", ",", "y_test", ")", ",", "args", "=", "args", ")", "\n", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "if", "False", ":", "\n", "        ", "import", "os", "\n", "os", ".", "system", "(", "\"nvidia-smi\"", ")", "\n", "", "return", "runid", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.run_chromosome": [[216, 232], ["time.time", "random.seed", "random.seed", "json.load", "json.load", "print", "chrlearn_complex.wrap_train_test", "open", "str"], "function", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.chrlearn_complex.wrap_train_test"], ["", "def", "run_chromosome", "(", "chromosome_name", ",", "metrics", ",", "inshape", ")", ":", "\n", "    ", "\"\"\" Train and tests given chromosome\n    \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "random", ".", "seed", "(", ")", "\n", "\n", "# random initial population Pt", "\n", "parent", "=", "[", "]", "\n", "chromosome", "=", "json", ".", "load", "(", "open", "(", "chromosome_name", ")", ")", "\n", "\n", "chromosome", "[", "-", "3", "]", "[", "-", "2", "]", "=", "inshape", "[", "-", "1", "]", "\n", "\n", "print", "(", "\"parsing chromosome {0}\"", ".", "format", "(", "str", "(", "chromosome", ")", ")", ")", "\n", "accuracy", ",", "_", "=", "wrap_train_test", "(", "chromosome", ")", "\n", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__init__": [[8, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", "=", "[", "]", "\n", "# TODO discuss these parameters with Alberto; these parameters will be fixed during the evolution", "\n", "# for fixed parameters we will not focus on the     ", "\n", "self", ".", "sa_rows", "=", "16", "\n", "self", ".", "sa_cols", "=", "16", "\n", "self", ".", "pe_width", "=", "1", "\n", "self", ".", "pe_stages", "=", "1", "\n", "self", ".", "period", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer": [[18, 20], ["hw_estimator.hw_estimator.layers.append"], "methods", ["None"], ["", "def", "add_layer", "(", "self", ",", "name", ",", "layer", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "(", "name", ",", "layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_energy": [[22, 24], ["sum", "l.get_period", "l.get_power", "l.get_cycles"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_period", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_power", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles"], ["", "def", "get_energy", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "l", ".", "get_power", "(", ")", "*", "l", ".", "get_cycles", "(", ")", "*", "l", ".", "get_period", "(", ")", "for", "_", ",", "l", "in", "self", ".", "layers", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_latency": [[25, 27], ["sum", "l.get_cycles", "l.get_period"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.convcaps3d_layer.convcaps3d_layer.get_cycles", "home.repos.pwc.inspect_result.ehw-fit_nascaps.hwacc.generic_layer.GenericLayer.get_period"], ["", "def", "get_latency", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "l", ".", "get_cycles", "(", ")", "*", "l", ".", "get_period", "(", ")", "for", "_", ",", "l", "in", "self", ".", "layers", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_memory": [[28, 30], ["sum", "l.get_memory"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.get_memory"], ["", "def", "get_memory", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "l", ".", "get_memory", "(", ")", "for", "_", ",", "l", "in", "self", ".", "layers", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.__str__": [[31, 33], ["str().replace().replace", "str().replace", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"<hwest>\\n\"", "+", "\"\\n\"", ".", "join", "(", "[", "\"  %s: %s\"", "%", "(", "s", ",", "str", "(", "l", ")", ".", "replace", "(", "\"(16,16,1,1,\"", ",", "\"(\"", ")", ".", "replace", "(", "\",3,25)\"", ",", "\")\"", ")", ")", "for", "s", ",", "l", "in", "self", ".", "layers", "]", ")", "+", "\"\\n</hwest>\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.parse_genotype": [[36, 149], ["len", "print", "hw_estimator.hw_estimator.add_layer", "len", "hwacc.ConvLayer", "hw_estimator.hw_estimator.add_layer", "len", "str", "len", "hwacc.CapsLayer", "hw_estimator.hw_estimator.add_layer", "range", "str", "len", "hwacc.ClassLayer", "hw_estimator.hw_estimator.add_layer", "hwacc.SumLayer", "len", "range", "hw_estimator.hw_estimator.add_layer", "range", "range", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hwacc.ConvCaps3D", "hw_estimator.hw_estimator.add_layer", "len", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hwacc.ClassLayer", "hwacc.CapsLayer", "int", "hwacc.CapsLayer", "int", "hwacc.SumLayer", "hwacc.UpdateLayer"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer"], ["", "def", "parse_genotype", "(", "self", ",", "gene", ")", ":", "\n", "        ", "self", ".", "layers", "=", "[", "]", "\n", "# gene-specific part", "\n", "remaining", "=", "len", "(", "gene", ")", "-", "2", "\n", "conv_index", "=", "1", "\n", "caps_index", "=", "1", "\n", "deepcaps_index", "=", "1", "\n", "resize_factor", "=", "gene", "[", "len", "(", "gene", ")", "-", "1", "]", "[", "0", "]", "\n", "\n", "insize", "=", "gene", "[", "0", "]", "[", "1", "]", "\n", "\n", "\n", "first", "=", "1", "\n", "\n", "for", "layer", "in", "gene", ":", "\n", "            ", "print", "(", "remaining", ")", "\n", "\n", "# Convolutional layers", "\n", "# conv = [0, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "if", "layer", "[", "0", "]", "==", "0", "and", "len", "(", "layer", ")", ">", "1", ":", "\n", "                ", "self", ".", "add_layer", "(", "\"conv\"", "+", "str", "(", "conv_index", ")", ",", "hwacc", ".", "ConvLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "layer", "[", "1", "]", ",", "\n", "inchannels", "=", "layer", "[", "2", "]", ",", "incapsules", "=", "layer", "[", "3", "]", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "\n", "outsize", "=", "layer", "[", "6", "]", ",", "outchannels", "=", "layer", "[", "7", "]", ",", "\n", "outcapsules", "=", "layer", "[", "8", "]", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "conv_index", "=", "conv_index", "+", "1", "\n", "remaining", "=", "remaining", "-", "1", "\n", "\n", "\n", "# Primary Capsules layers", "\n", "# caps = [1, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "", "elif", "layer", "[", "0", "]", "==", "1", "and", "remaining", ">", "1", "and", "len", "(", "layer", ")", ">", "1", ":", "\n", "                ", "self", ".", "add_layer", "(", "\"caps\"", "+", "str", "(", "caps_index", ")", ",", "hwacc", ".", "CapsLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "layer", "[", "1", "]", ",", "\n", "inchannels", "=", "layer", "[", "2", "]", ",", "incapsules", "=", "layer", "[", "3", "]", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "\n", "outsize", "=", "layer", "[", "6", "]", ",", "outchannels", "=", "layer", "[", "7", "]", ",", "\n", "outcapsules", "=", "layer", "[", "8", "]", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "caps_index", "=", "caps_index", "+", "1", "\n", "remaining", "=", "remaining", "-", "1", "\n", "\n", "\n", "# Class Capsules layer", "\n", "# caps = [1, insize, inchannels, incapsules, kernsize, stride, outsize, outchannels, outcapsules]", "\n", "", "elif", "layer", "[", "0", "]", "==", "1", "and", "remaining", "==", "1", "and", "len", "(", "layer", ")", ">", "1", ":", "\n", "                ", "self", ".", "add_layer", "(", "\"Class\"", ",", "hwacc", ".", "ClassLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "layer", "[", "1", "]", ",", "inchannels", "=", "layer", "[", "2", "]", ",", "\n", "incapsules", "=", "layer", "[", "3", "]", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "outsize", "=", "layer", "[", "6", "]", ",", "outchannels", "=", "layer", "[", "7", "]", ",", "outcapsules", "=", "layer", "[", "8", "]", ",", "\n", "period", "=", "self", ".", "period", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                    ", "self", ".", "add_layer", "(", "\"sum_%d\"", "%", "i", ",", "hwacc", ".", "SumLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "layer", "[", "1", "]", ",", "inchannels", "=", "layer", "[", "2", "]", ",", "incapsules", "=", "layer", "[", "3", "]", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "outsize", "=", "layer", "[", "6", "]", ",", "outchannels", "=", "layer", "[", "7", "]", ",", "outcapsules", "=", "layer", "[", "8", "]", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "\n", "", "caps_index", "=", "caps_index", "+", "1", "\n", "remaining", "=", "remaining", "-", "1", "\n", "\n", "\n", "# DeepCaps Cells", "\n", "# d_caps = [2, 0, inchannels, incapsules, kernsize, stride, 0, outchannels, outcapsules]", "\n", "", "elif", "layer", "[", "0", "]", "==", "2", "and", "remaining", ">", "1", "and", "len", "(", "layer", ")", ">", "1", ":", "\n", "\n", "                ", "insize", "=", "layer", "[", "1", "]", "\n", "inchannels", "=", "layer", "[", "2", "]", "\n", "incapsules", "=", "layer", "[", "3", "]", "\n", "\n", "if", "remaining", "==", "2", ":", "\n", "# 3x caps layer + 1x conv_caps_3d", "\n", "# add also ", "\n", "\n", "                    ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                        ", "self", ".", "add_layer", "(", "f\"CapsCell{caps_index}_cl_{i}\"", ",", "hwacc", ".", "CapsLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "insize", ",", "inchannels", "=", "layer", "[", "2", "]", ",", "\n", "incapsules", "=", "layer", "[", "3", "]", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "outsize", "=", "layer", "[", "6", "]", ",", "outchannels", "=", "layer", "[", "7", "]", ",", "outcapsules", "=", "layer", "[", "8", "]", ",", "\n", "period", "=", "self", ".", "period", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                            ", "insize", "=", "int", "(", "insize", "/", "2", ")", "\n", "\n", "\n", "", "", "self", ".", "add_layer", "(", "f\"CapsCell{caps_index}_c3d\"", ",", "hwacc", ".", "ConvCaps3D", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "insize", ",", "inchannels", "=", "layer", "[", "2", "]", ",", "\n", "incapsules", "=", "layer", "[", "3", "]", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "outsize", "=", "layer", "[", "6", "]", ",", "outchannels", "=", "layer", "[", "7", "]", ",", "outcapsules", "=", "layer", "[", "8", "]", ",", "\n", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                        ", "self", ".", "add_layer", "(", "f\"CapsCell{caps_index}_cl_{i}\"", ",", "hwacc", ".", "CapsLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "insize", ",", "inchannels", "=", "layer", "[", "2", "]", ",", "\n", "incapsules", "=", "incapsules", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "outsize", "=", "layer", "[", "6", "]", ",", "outchannels", "=", "layer", "[", "7", "]", ",", "outcapsules", "=", "layer", "[", "8", "]", ",", "\n", "period", "=", "self", ".", "period", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                            ", "insize", "=", "int", "(", "insize", "/", "2", ")", "\n", "incapsules", "=", "layer", "[", "8", "]", "\n", "\n", "", "", "", "caps_index", "=", "caps_index", "+", "1", "\n", "#count +=1", "\n", "deepcaps_index", "=", "deepcaps_index", "+", "1", "\n", "remaining", "=", "remaining", "-", "1", "\n", "\n", "\n", "#FlattenCaps", "\n", "", "elif", "layer", "[", "0", "]", "==", "2", "and", "remaining", "==", "1", "and", "len", "(", "layer", ")", ">", "1", ":", "\n", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                    ", "self", ".", "add_layer", "(", "f\"FlattenCaps_ClassCaps_sum_{i}\"", ",", "hwacc", ".", "SumLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "layer", "[", "1", "]", ",", "inchannels", "=", "layer", "[", "2", "]", ",", "\n", "incapsules", "=", "layer", "[", "3", "]", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "outsize", "=", "layer", "[", "6", "]", ",", "outchannels", "=", "layer", "[", "7", "]", ",", "outcapsules", "=", "layer", "[", "8", "]", ",", "\n", "period", "=", "self", ".", "period", ")", ")", "\n", "self", ".", "add_layer", "(", "f\"FlattenCaps_ClassCaps_update_{i}\"", ",", "hwacc", ".", "UpdateLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "layer", "[", "1", "]", ",", "inchannels", "=", "layer", "[", "2", "]", ",", "\n", "incapsules", "=", "layer", "[", "3", "]", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "outsize", "=", "layer", "[", "6", "]", ",", "outchannels", "=", "layer", "[", "7", "]", ",", "outcapsules", "=", "layer", "[", "8", "]", ",", "\n", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "\n", "\n", "", "self", ".", "add_layer", "(", "\"ClassCaps_class\"", ",", "hwacc", ".", "ClassLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "layer", "[", "1", "]", ",", "inchannels", "=", "layer", "[", "2", "]", ",", "incapsules", "=", "layer", "[", "3", "]", ",", "kernsize", "=", "layer", "[", "4", "]", ",", "outsize", "=", "layer", "[", "6", "]", ",", "\n", "outchannels", "=", "layer", "[", "7", "]", ",", "outcapsules", "=", "layer", "[", "8", "]", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "remaining", "=", "remaining", "-", "1", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.force_deepcaps": [[151, 211], ["hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "range", "hw_estimator.hw_estimator.add_layer", "hwacc.ConvLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.PrimaryLayer", "hwacc.ConvCaps3D", "hw_estimator.hw_estimator.add_layer", "hw_estimator.hw_estimator.add_layer", "hwacc.ClassLayer", "hwacc.SumLayer", "hwacc.SumLayer"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer"], ["", "", "", "def", "force_deepcaps", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_layer", "(", "\"Conv\"", ",", "hwacc", ".", "ConvLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "64", ",", "inchannels", "=", "3", ",", "incapsules", "=", "1", ",", "kernsize", "=", "3", ",", "outsize", "=", "64", ",", "outchannels", "=", "128", ",", "outcapsules", "=", "1", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_1\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "64", ",", "inchannels", "=", "32", ",", "incapsules", "=", "4", ",", "kernsize", "=", "3", ",", "outsize", "=", "32", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "4", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_2\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "32", ",", "inchannels", "=", "32", ",", "incapsules", "=", "4", ",", "kernsize", "=", "3", ",", "outsize", "=", "32", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "4", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_3\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "32", ",", "inchannels", "=", "32", ",", "incapsules", "=", "4", ",", "kernsize", "=", "3", ",", "outsize", "=", "32", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "4", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_4\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "32", ",", "inchannels", "=", "32", ",", "incapsules", "=", "4", ",", "kernsize", "=", "3", ",", "outsize", "=", "32", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "4", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_5\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "32", ",", "inchannels", "=", "32", ",", "incapsules", "=", "4", ",", "kernsize", "=", "3", ",", "outsize", "=", "16", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_6\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "16", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "16", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_7\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "16", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "16", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_8\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "16", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "16", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_9\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "16", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "8", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_10\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "8", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "8", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_11\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "8", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "8", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_12\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "8", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "8", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_13\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "8", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "4", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_14\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "4", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "4", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps2D_15\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "4", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "4", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "\n", "self", ".", "add_layer", "(", "\"ConvCaps3D_conv\"", ",", "hwacc", ".", "ConvCaps3D", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "\n", "insize", "=", "4", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "3", ",", "outsize", "=", "4", ",", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "self", ".", "add_layer", "(", "\"ConvCaps3D_sum_%d\"", "%", "i", ",", "hwacc", ".", "SumLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "4", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "4", ",", "outsize", "=", "1", ",", "outchannels", "=", "10", ",", "outcapsules", "=", "16", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "self", ".", "add_layer", "(", "\"ConvCaps3D_update_%d\"", "%", "i", ",", "hwacc", ".", "SumLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "4", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "4", ",", "outsize", "=", "1", ",", "outchannels", "=", "10", ",", "outcapsules", "=", "16", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "\n", "", "self", ".", "add_layer", "(", "\"ClassCaps_class\"", ",", "hwacc", ".", "ClassLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "4", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "4", ",", "outsize", "=", "1", ",", "\n", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.force_capsnet": [[216, 230], ["e.add_layer", "e.add_layer", "e.add_layer", "range", "hwacc.ConvLayer", "hwacc.PrimaryLayer", "hwacc.ClassLayer", "e.add_layer", "hwacc.SumLayer"], "methods", ["home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer", "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.hw_estimator.hw_estimator.add_layer"], ["", "def", "force_capsnet", "(", "self", ")", ":", "\n", "        ", "c1", "=", "e", ".", "add_layer", "(", "\"conv1\"", ",", "hwacc", ".", "ConvLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "28", ",", "\n", "inchannels", "=", "1", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "20", ",", "\n", "outchannels", "=", "256", ",", "outcapsules", "=", "1", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "c2", "=", "e", ".", "add_layer", "(", "\"primary\"", ",", "hwacc", ".", "PrimaryLayer", "(", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "20", ",", "\n", "inchannels", "=", "256", ",", "incapsules", "=", "1", ",", "kernsize", "=", "9", ",", "outsize", "=", "6", ",", "outchannels", "=", "32", ",", "\n", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "c3", "=", "e", ".", "add_layer", "(", "\"class\"", ",", "hwacc", ".", "ClassLayer", "(", "\n", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "6", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "6", ",", "outsize", "=", "1", ",", "\n", "outchannels", "=", "32", ",", "outcapsules", "=", "8", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "e", ".", "add_layer", "(", "\"sum_%d\"", "%", "i", ",", "hwacc", ".", "SumLayer", "(", "\n", "self", ".", "sa_rows", ",", "self", ".", "sa_cols", ",", "self", ".", "pe_width", ",", "self", ".", "pe_stages", ",", "insize", "=", "6", ",", "inchannels", "=", "32", ",", "incapsules", "=", "8", ",", "kernsize", "=", "6", ",", "outsize", "=", "1", ",", "outchannels", "=", "10", ",", "outcapsules", "=", "16", ",", "period", "=", "self", ".", "period", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ehw-fit_nascaps.nsga.svhn.load_data": [[18, 65], ["os.path.join", "scipy.loadmat", "numpy.asarray", "range", "numpy.asarray", "range", "keras.utils.to_categorical", "scipy.loadmat", "numpy.asarray", "range", "numpy.asarray", "range", "keras.utils.to_categorical", "paths.append", "np.asarray.append", "len", "np.asarray.append", "len", "keras.utils.data_utils.get_file"], "function", ["None"], ["def", "load_data", "(", ")", ":", "\n", "    ", "\"\"\"Loads CIFAR10 dataset.\n    # Returns\n        Tuple of Numpy arrays: `(x_train, y_train), (x_test, y_test)`.\n    \"\"\"", "\n", "dirname", "=", "os", ".", "path", ".", "join", "(", "'datasets'", ",", "'svhn-dataset'", ")", "\n", "base", "=", "'http://ufldl.stanford.edu/housenumbers/'", "\n", "files", "=", "[", "'train_32x32.mat'", ",", "'test_32x32.mat'", "]", "\n", "\n", "paths", "=", "[", "]", "\n", "for", "fname", "in", "files", ":", "\n", "        ", "paths", ".", "append", "(", "get_file", "(", "fname", ",", "\n", "origin", "=", "base", "+", "fname", ",", "\n", "cache_subdir", "=", "dirname", ")", ")", "\n", "\n", "\n", "\n", "", "train_dict", "=", "sio", ".", "loadmat", "(", "paths", "[", "0", "]", ")", "\n", "\n", "X", "=", "np", ".", "asarray", "(", "train_dict", "[", "'X'", "]", ")", "\n", "\n", "X_train", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "3", "]", ")", ":", "\n", "        ", "X_train", ".", "append", "(", "X", "[", ":", ",", ":", ",", ":", ",", "i", "]", ")", "\n", "", "X_train", "=", "np", ".", "asarray", "(", "X_train", ")", "\n", "\n", "Y_train", "=", "train_dict", "[", "'y'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "Y_train", ")", ")", ":", "\n", "        ", "if", "Y_train", "[", "i", "]", "%", "10", "==", "0", ":", "\n", "            ", "Y_train", "[", "i", "]", "=", "0", "\n", "\n", "", "", "Y_train", "=", "to_categorical", "(", "Y_train", ",", "10", ")", "\n", "\n", "test_dict", "=", "sio", ".", "loadmat", "(", "paths", "[", "1", "]", ")", "\n", "X", "=", "np", ".", "asarray", "(", "test_dict", "[", "'X'", "]", ")", "\n", "\n", "X_test", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "3", "]", ")", ":", "\n", "        ", "X_test", ".", "append", "(", "X", "[", ":", ",", ":", ",", ":", ",", "i", "]", ")", "\n", "", "X_test", "=", "np", ".", "asarray", "(", "X_test", ")", "\n", "\n", "Y_test", "=", "test_dict", "[", "'y'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "Y_test", ")", ")", ":", "\n", "        ", "if", "Y_test", "[", "i", "]", "%", "10", "==", "0", ":", "\n", "            ", "Y_test", "[", "i", "]", "=", "0", "\n", "", "", "Y_test", "=", "to_categorical", "(", "Y_test", ",", "10", ")", "\n", "return", "(", "X_train", ",", "Y_train", ")", ",", "(", "X_test", ",", "Y_test", ")", "\n", "\n"]]}