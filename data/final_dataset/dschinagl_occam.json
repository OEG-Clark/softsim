{"home.repos.pwc.inspect_result.dschinagl_occam.None.occam_demo.parse_config": [[9, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pcdet.config.cfg_from_yaml_file", "pcdet.config.cfg_from_yaml_file"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.pcdet.config.cfg_from_yaml_file", "home.repos.pwc.inspect_result.dschinagl_occam.pcdet.config.cfg_from_yaml_file"], ["def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'arg parser'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_cfg_file'", ",", "type", "=", "str", ",", "\n", "default", "=", "'cfgs/kitti_models/pointpillar.yaml'", ",", "\n", "help", "=", "'dataset/model config for the demo'", ")", "\n", "parser", ".", "add_argument", "(", "'--occam_cfg_file'", ",", "type", "=", "str", ",", "\n", "default", "=", "'cfgs/occam_configs/kitti_pointpillar.yaml'", ",", "\n", "help", "=", "'specify the OccAM config'", ")", "\n", "parser", ".", "add_argument", "(", "'--source_file_path'", ",", "type", "=", "str", ",", "default", "=", "'demo_pcl.npy'", ",", "\n", "help", "=", "'point cloud data file to analyze'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to pretrained model parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'batch size for OccAM creation'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of workers for dataloader'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_it'", ",", "type", "=", "int", ",", "default", "=", "6000", ",", "\n", "help", "=", "'number of sub-sampling iterations N'", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "cfg_from_yaml_file", "(", "args", ".", "model_cfg_file", ",", "cfg", ")", "\n", "cfg_from_yaml_file", "(", "args", ".", "occam_cfg_file", ",", "cfg", ")", "\n", "\n", "return", "args", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.None.occam_demo.main": [[37, 66], ["occam_demo.parse_config", "pcdet.utils.common_utils.create_logger", "common_utils.create_logger.info", "occam_utils.occam.OccAM", "occam_utils.occam.OccAM.load_and_preprocess_pcl", "occam_utils.occam.OccAM.get_base_predictions", "common_utils.create_logger.info", "common_utils.create_logger.info", "occam_utils.occam.OccAM.compute_attribution_maps", "common_utils.create_logger.info", "common_utils.create_logger.info", "occam_utils.occam.OccAM.visualize_attr_map", "str"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.None.occam_demo.parse_config", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.create_logger", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam_datasets.BaseDataset.load_and_preprocess_pcl", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.get_base_predictions", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_attribution_maps", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.visualize_attr_map"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", ",", "config", "=", "parse_config", "(", ")", "\n", "logger", "=", "common_utils", ".", "create_logger", "(", ")", "\n", "logger", ".", "info", "(", "'------------------------ OccAM Demo -------------------------'", ")", "\n", "\n", "occam", "=", "OccAM", "(", "data_config", "=", "config", ".", "DATA_CONFIG", ",", "model_config", "=", "config", ".", "MODEL", ",", "\n", "occam_config", "=", "config", ".", "OCCAM", ",", "class_names", "=", "config", ".", "CLASS_NAMES", ",", "\n", "model_ckpt_path", "=", "args", ".", "ckpt", ",", "nr_it", "=", "args", ".", "nr_it", ",", "logger", "=", "logger", ")", "\n", "\n", "pcl", "=", "occam", ".", "load_and_preprocess_pcl", "(", "args", ".", "source_file_path", ")", "\n", "\n", "# get detections to analyze (in full pcl)", "\n", "base_det", "=", "occam", ".", "get_base_predictions", "(", "pcl", "=", "pcl", ")", "\n", "base_det_boxes", ",", "base_det_labels", ",", "base_det_scores", "=", "base_det", "\n", "\n", "logger", ".", "info", "(", "'Number of detected objects to analyze: '", "\n", "+", "str", "(", "base_det_labels", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Start attribution map computation:'", ")", "\n", "\n", "attr_maps", "=", "occam", ".", "compute_attribution_maps", "(", "\n", "pcl", "=", "pcl", ",", "base_det_boxes", "=", "base_det_boxes", ",", "\n", "base_det_labels", "=", "base_det_labels", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "logger", ".", "info", "(", "'DONE'", ")", "\n", "\n", "logger", ".", "info", "(", "'Visualize attribution map of first object'", ")", "\n", "occam", ".", "visualize_attr_map", "(", "pcl", ",", "base_det_boxes", "[", "0", ",", ":", "]", ",", "attr_maps", "[", "0", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.None.setup.make_cuda_ext": [[8, 14], ["torch.utils.cpp_extension.CUDAExtension", "os.path.join", "module.split"], "function", ["None"], ["def", "make_cuda_ext", "(", "name", ",", "module", ",", "sources", ")", ":", "\n", "    ", "cuda_ext", "=", "CUDAExtension", "(", "\n", "name", "=", "'%s.%s'", "%", "(", "module", ",", "name", ")", ",", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "*", "module", ".", "split", "(", "'.'", ")", ",", "src", ")", "for", "src", "in", "sources", "]", "\n", ")", "\n", "return", "cuda_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.None.setup.write_version_to_file": [[16, 19], ["open", "print"], "function", ["None"], ["", "def", "write_version_to_file", "(", "version", ",", "target_file", ")", ":", "\n", "    ", "with", "open", "(", "target_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "print", "(", "'__version__ = \"%s\"'", "%", "version", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.__init__": [[25, 63], ["occam_utils.occam_datasets.BaseDataset", "pcdet.models.build_network", "occam.OccAM.model.load_params_from_file", "occam.OccAM.model.cuda", "occam.OccAM.model.eval", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.models.__init__.build_network", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.load_params_from_file"], ["def", "__init__", "(", "self", ",", "data_config", ",", "model_config", ",", "occam_config", ",", "class_names", ",", "\n", "model_ckpt_path", ",", "nr_it", ",", "logger", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            data_config : EasyDict\n               dataset cfg including data preprocessing properties (OpenPCDet)\n            model_config : EasyDict\n               object detection model definition (OpenPCDet)\n            occam_config: EasyDict\n                sampling properties for attribution map generation, see cfg file\n            class_names :\n                list of class names (OpenPCDet)\n            model_ckpt_path: str\n                path to pretrained model weights\n            nr_it : int\n                number of sub-sampling iterations; the higher, the more accurate\n                are the resulting attribution maps\n            logger: Logger\n        \"\"\"", "\n", "self", ".", "data_config", "=", "data_config", "\n", "self", ".", "model_config", "=", "model_config", "\n", "self", ".", "occam_config", "=", "occam_config", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "nr_it", "=", "nr_it", "\n", "\n", "self", ".", "base_dataset", "=", "BaseDataset", "(", "data_config", "=", "self", ".", "data_config", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "occam_config", "=", "self", ".", "occam_config", ")", "\n", "\n", "self", ".", "model", "=", "build_network", "(", "model_cfg", "=", "self", ".", "model_config", ",", "\n", "num_class", "=", "len", "(", "self", ".", "class_names", ")", ",", "\n", "dataset", "=", "self", ".", "base_dataset", ")", "\n", "self", ".", "model", ".", "load_params_from_file", "(", "filename", "=", "model_ckpt_path", ",", "\n", "logger", "=", "logger", ",", "to_cpu", "=", "True", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.load_and_preprocess_pcl": [[64, 81], ["occam.OccAM.base_dataset.load_and_preprocess_pcl"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam_datasets.BaseDataset.load_and_preprocess_pcl"], ["", "def", "load_and_preprocess_pcl", "(", "self", ",", "source_file_path", ")", ":", "\n", "        ", "\"\"\"\n        load given point cloud file and preprocess data according OpenPCDet\n        data config using the base dataset\n\n        Parameters\n        ----------\n        source_file_path : str\n            path to point cloud to analyze (bin or npy)\n\n        Returns\n        -------\n        pcl : ndarray (N, 4)\n            preprocessed point cloud (x, y, z, intensity)\n        \"\"\"", "\n", "pcl", "=", "self", ".", "base_dataset", ".", "load_and_preprocess_pcl", "(", "source_file_path", ")", "\n", "return", "pcl", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.get_base_predictions": [[82, 117], ["occam.OccAM.base_dataset.prepare_data", "occam.OccAM.base_dataset.collate_batch", "pcdet.models.load_data_to_gpu", "[].cpu().numpy", "[].cpu().numpy", "[].cpu().numpy", "torch.no_grad", "occam.OccAM.model.forward", "[].cpu", "[].cpu", "[].cpu"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.prepare_data", "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.collate_batch", "home.repos.pwc.inspect_result.dschinagl_occam.models.__init__.load_data_to_gpu", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward"], ["", "def", "get_base_predictions", "(", "self", ",", "pcl", ")", ":", "\n", "        ", "\"\"\"\n        get all K detections in full point cloud for which attribution maps will\n        be determined\n\n        Parameters\n        ----------\n        pcl : ndarray (N, 4)\n            preprocessed point cloud (x, y, z, intensity)\n\n        Returns\n        -------\n        base_det_boxes : ndarray (K, 7)\n            bounding box parameters of detected objects\n        base_det_labels : ndarray (K)\n            labels of detected objects\n        base_det_scores : ndarray (K)\n            confidence scores for detected objects\n        \"\"\"", "\n", "input_dict", "=", "{", "\n", "'points'", ":", "pcl", "\n", "}", "\n", "\n", "data_dict", "=", "self", ".", "base_dataset", ".", "prepare_data", "(", "data_dict", "=", "input_dict", ")", "\n", "data_dict", "=", "self", ".", "base_dataset", ".", "collate_batch", "(", "[", "data_dict", "]", ")", "\n", "load_data_to_gpu", "(", "data_dict", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "base_pred_dict", ",", "_", "=", "self", ".", "model", ".", "forward", "(", "data_dict", ")", "\n", "\n", "", "base_det_boxes", "=", "base_pred_dict", "[", "0", "]", "[", "'pred_boxes'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "base_det_labels", "=", "base_pred_dict", "[", "0", "]", "[", "'pred_labels'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "base_det_scores", "=", "base_pred_dict", "[", "0", "]", "[", "'pred_scores'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "base_det_boxes", ",", "base_det_labels", ",", "base_det_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.merge_detections_in_batch": [[118, 165], ["collections.defaultdict", "enumerate", "numpy.concatenate", "collections.defaultdict.items", "numpy.concatenate.append", "cur_sample.items", "data_dict[].append", "numpy.concatenate", "numpy.ones", "data.cpu().numpy.cpu().numpy.cpu().numpy", "merged_data.append", "data.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "def", "merge_detections_in_batch", "(", "self", ",", "det_dicts", ")", ":", "\n", "        ", "\"\"\"\n        In order to efficiently determine the confidence score for\n        all detections in a batch they are merged.\n\n        Parameters\n        ----------\n        det_dicts : list\n            list of M dicts containing the detections in the M samples within\n            the batch (pred boxes, pred scores, pred labels)\n\n        Returns\n        -------\n        pert_det_boxes : ndarray (L, 7)\n            bounding boxes of all L detections in the M samples\n        pert_det_labels : ndarray (L)\n            labels of all L detections in the M samples\n        pert_det_scores : ndarray (L)\n            scores of all L detections in the M samples\n        batch_ids : ndarray (L)\n            Mapping of the detections to the individual samples within the batch\n        \"\"\"", "\n", "batch_ids", "=", "[", "]", "\n", "\n", "data_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "batch_id", ",", "cur_sample", "in", "enumerate", "(", "det_dicts", ")", ":", "\n", "            ", "batch_ids", ".", "append", "(", "\n", "np", ".", "ones", "(", "cur_sample", "[", "'pred_labels'", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "int", ")", "\n", "*", "batch_id", ")", "\n", "\n", "for", "key", ",", "val", "in", "cur_sample", ".", "items", "(", ")", ":", "\n", "                ", "data_dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "batch_ids", "=", "np", ".", "concatenate", "(", "batch_ids", ",", "axis", "=", "0", ")", "\n", "\n", "merged_dict", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "[", "'pred_boxes'", ",", "'pred_scores'", ",", "'pred_labels'", "]", ":", "\n", "                ", "merged_data", "=", "[", "]", "\n", "for", "data", "in", "val", ":", "\n", "                    ", "data", "=", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "merged_data", ".", "append", "(", "data", ")", "\n", "", "merged_dict", "[", "key", "]", "=", "np", ".", "concatenate", "(", "merged_data", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "pert_det_boxes", "=", "merged_dict", "[", "'pred_boxes'", "]", "\n", "pert_det_labels", "=", "merged_dict", "[", "'pred_labels'", "]", "\n", "pert_det_scores", "=", "merged_dict", "[", "'pred_scores'", "]", "\n", "return", "pert_det_boxes", ",", "pert_det_labels", ",", "pert_det_scores", ",", "batch_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_iou": [[166, 176], ["torch.from_numpy", "torch.from_numpy", "pcdet.ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "iou.cpu().numpy.cpu().numpy.cpu().numpy", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "iou.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "def", "compute_iou", "(", "self", ",", "base_boxes", ",", "pert_boxes", ")", ":", "\n", "        ", "\"\"\"\n        3D IoU between base and perturbed detections\n        \"\"\"", "\n", "base_boxes", "=", "torch", ".", "from_numpy", "(", "base_boxes", ")", "\n", "pert_boxes", "=", "torch", ".", "from_numpy", "(", "pert_boxes", ")", "\n", "base_boxes", ",", "pert_boxes", "=", "base_boxes", ".", "cuda", "(", ")", ",", "pert_boxes", ".", "cuda", "(", ")", "\n", "iou", "=", "boxes_iou3d_gpu", "(", "base_boxes", ",", "pert_boxes", ")", "\n", "iou", "=", "iou", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_translation_score": [[177, 186], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "compute_translation_score", "(", "self", ",", "base_boxes", ",", "pert_boxes", ")", ":", "\n", "        ", "\"\"\"\n        translation score (see paper for details)\n        \"\"\"", "\n", "translation_error", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "base_boxes", "[", ":", ",", ":", "3", "]", "[", ":", ",", "None", ",", ":", "]", "-", "pert_boxes", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "2", ")", "\n", "translation_score", "=", "1", "-", "translation_error", "\n", "translation_score", "[", "translation_score", "<", "0", "]", "=", "0", "\n", "return", "translation_score", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_orientation_score": [[187, 211], ["copy.deepcopy", "copy.deepcopy", "numpy.abs", "numpy.concatenate", "numpy.min", "numpy.abs"], "methods", ["None"], ["", "def", "compute_orientation_score", "(", "self", ",", "base_boxes", ",", "pert_boxes", ")", ":", "\n", "        ", "\"\"\"\n        orientation score (see paper for details)\n        \"\"\"", "\n", "boxes_a", "=", "copy", ".", "deepcopy", "(", "base_boxes", ")", "\n", "boxes_b", "=", "copy", ".", "deepcopy", "(", "pert_boxes", ")", "\n", "\n", "boxes_a", "[", ":", ",", "6", "]", "=", "boxes_a", "[", ":", ",", "6", "]", "%", "(", "2", "*", "math", ".", "pi", ")", "\n", "boxes_a", "[", "boxes_a", "[", ":", ",", "6", "]", ">", "math", ".", "pi", ",", "6", "]", "-=", "2", "*", "math", ".", "pi", "\n", "boxes_a", "[", "boxes_a", "[", ":", ",", "6", "]", "<", "-", "math", ".", "pi", ",", "6", "]", "+=", "2", "*", "math", ".", "pi", "\n", "boxes_b", "[", ":", ",", "6", "]", "=", "boxes_b", "[", ":", ",", "6", "]", "%", "(", "2", "*", "math", ".", "pi", ")", "\n", "boxes_b", "[", "boxes_b", "[", ":", ",", "6", "]", ">", "math", ".", "pi", ",", "6", "]", "-=", "2", "*", "math", ".", "pi", "\n", "boxes_b", "[", "boxes_b", "[", ":", ",", "6", "]", "<", "-", "math", ".", "pi", ",", "6", "]", "+=", "2", "*", "math", ".", "pi", "\n", "orientation_error_", "=", "np", ".", "abs", "(", "\n", "boxes_a", "[", ":", ",", "6", "]", "[", ":", ",", "None", "]", "-", "boxes_b", "[", ":", ",", "6", "]", "[", "None", ",", ":", "]", ")", "\n", "orientation_error__", "=", "2", "*", "math", ".", "pi", "-", "np", ".", "abs", "(", "\n", "boxes_a", "[", ":", ",", "6", "]", "[", ":", ",", "None", "]", "-", "boxes_b", "[", ":", ",", "6", "]", "[", "None", ",", ":", "]", ")", "\n", "orientation_error", "=", "np", ".", "concatenate", "(", "\n", "(", "orientation_error_", "[", ":", ",", ":", ",", "None", "]", ",", "orientation_error__", "[", ":", ",", ":", ",", "None", "]", ")", ",", "\n", "axis", "=", "2", ")", "\n", "orientation_error", "=", "np", ".", "min", "(", "orientation_error", ",", "axis", "=", "2", ")", "\n", "orientation_score", "=", "1", "-", "orientation_error", "\n", "orientation_score", "[", "orientation_score", "<", "0", "]", "=", "0", "\n", "return", "orientation_score", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_scale_score": [[212, 225], ["copy.deepcopy", "copy.deepcopy", "occam.OccAM.compute_iou"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_iou"], ["", "def", "compute_scale_score", "(", "self", ",", "base_boxes", ",", "pert_boxes", ")", ":", "\n", "        ", "\"\"\"\n        scale score (see paper for details)\n        \"\"\"", "\n", "boxes_centered_a", "=", "copy", ".", "deepcopy", "(", "base_boxes", ")", "\n", "boxes_centered_b", "=", "copy", ".", "deepcopy", "(", "pert_boxes", ")", "\n", "boxes_centered_a", "[", ":", ",", ":", "3", "]", "=", "0", "\n", "boxes_centered_a", "[", ":", ",", "6", "]", "=", "0", "\n", "boxes_centered_b", "[", ":", ",", ":", "3", "]", "=", "0", "\n", "boxes_centered_b", "[", ":", ",", "6", "]", "=", "0", "\n", "scale_score", "=", "self", ".", "compute_iou", "(", "boxes_centered_a", ",", "boxes_centered_b", ")", "\n", "scale_score", "[", "scale_score", "<", "0", "]", "=", "0", "\n", "return", "scale_score", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.get_similarity_matrix": [[226, 270], ["s_overlap.astype.astype.astype", "s_class.astype.astype.astype", "numpy.repeat", "occam.OccAM.compute_translation_score", "occam.OccAM.compute_orientation_score", "occam.OccAM.compute_scale_score", "occam.OccAM.compute_iou"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_translation_score", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_orientation_score", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_scale_score", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_iou"], ["", "def", "get_similarity_matrix", "(", "self", ",", "base_det_boxes", ",", "base_det_labels", ",", "\n", "pert_det_boxes", ",", "pert_det_labels", ",", "pert_det_scores", ")", ":", "\n", "        ", "\"\"\"\n        compute similarity score between the base detections in the full\n        point cloud and the detections in the perturbed samples\n\n        Parameters\n        ----------\n        base_det_boxes : (K, 7)\n            bounding boxes of detected objects in full pcl\n        base_det_labels : (K)\n            class labels of detected objects in full pcl\n        pert_det_boxes : ndarray (L, 7)\n            bounding boxes of all L detections in the perturbed samples of the batch\n        pert_det_labels : ndarray (L)\n            labels of all L detections in the perturbed samples of the batch\n        pert_det_scores : ndarray (L)\n            scores of all L detections in the perturbed samples of the batch\n        Returns\n        -------\n        sim_scores : ndarray (K, L)\n            similarity score between all K detections in the full pcl and\n            the L detections in the perturbed samples within the batch\n        \"\"\"", "\n", "# similarity score is only greater zero if boxes overlap", "\n", "s_overlap", "=", "self", ".", "compute_iou", "(", "base_det_boxes", ",", "pert_det_boxes", ")", ">", "0", "\n", "s_overlap", "=", "s_overlap", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# similarity score is only greater zero for boxes of same class", "\n", "s_class", "=", "base_det_labels", "[", ":", ",", "None", "]", "==", "pert_det_labels", "[", "None", ",", ":", "]", "\n", "s_class", "=", "s_class", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# confidence score is directly used (see paper)", "\n", "s_conf", "=", "np", ".", "repeat", "(", "pert_det_scores", "[", "None", ",", ":", "]", ",", "base_det_boxes", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "s_transl", "=", "self", ".", "compute_translation_score", "(", "base_det_boxes", ",", "pert_det_boxes", ")", "\n", "\n", "s_orient", "=", "self", ".", "compute_orientation_score", "(", "base_det_boxes", ",", "pert_det_boxes", ")", "\n", "\n", "s_score", "=", "self", ".", "compute_scale_score", "(", "base_det_boxes", ",", "pert_det_boxes", ")", "\n", "\n", "sim_scores", "=", "s_overlap", "*", "s_conf", "*", "s_transl", "*", "s_orient", "*", "s_score", "*", "s_class", "\n", "\n", "return", "sim_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.compute_attribution_maps": [[271, 348], ["numpy.zeros", "numpy.zeros", "occam_utils.occam_datasets.OccamInferenceDataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "tqdm.tqdm.close", "torch.no_grad", "enumerate", "pcdet.models.load_data_to_gpu", "occam.OccAM.model.forward", "occam.OccAM.merge_detections_in_batch", "occam.OccAM.get_similarity_matrix", "len", "range", "tqdm.tqdm.update", "[].cpu().numpy", "numpy.sum", "numpy.max", "[].cpu"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.models.__init__.load_data_to_gpu", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.merge_detections_in_batch", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.get_similarity_matrix", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "compute_attribution_maps", "(", "self", ",", "pcl", ",", "base_det_boxes", ",", "base_det_labels", ",", "\n", "batch_size", ",", "num_workers", ")", ":", "\n", "        ", "\"\"\"\n        attribution map computation for each base detection\n\n        Parameters\n        ----------\n        pcl : ndarray (N, 4)\n            preprocessed full point cloud (x, y, z, intensity)\n        base_det_boxes : ndarray (K, 7)\n            bounding boxes of detected objects in full pcl\n        base_det_labels : ndarray (K)\n            class labels of detected objects in full pcl\n        batch_size : int\n            batch_size during AM computation\n        num_workers : int\n            number of dataloader workers\n\n        Returns\n        -------\n        attr_maps : ndarray (K, N)\n            attribution scores for all K detected base objects and all N points\n        \"\"\"", "\n", "\n", "attr_maps", "=", "np", ".", "zeros", "(", "(", "base_det_labels", ".", "shape", "[", "0", "]", ",", "pcl", ".", "shape", "[", "0", "]", ")", ")", "\n", "# count number of occurrences of each point in sampled pcl's", "\n", "sampling_map", "=", "np", ".", "zeros", "(", "pcl", ".", "shape", "[", "0", "]", ")", "\n", "\n", "occam_inference_dataset", "=", "OccamInferenceDataset", "(", "\n", "data_config", "=", "self", ".", "data_config", ",", "class_names", "=", "self", ".", "class_names", ",", "\n", "occam_config", "=", "self", ".", "occam_config", ",", "pcl", "=", "pcl", ",", "nr_it", "=", "self", ".", "nr_it", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "\n", "occam_inference_dataset", ",", "batch_size", "=", "batch_size", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "occam_inference_dataset", ".", "collate_batch", ",", "drop_last", "=", "False", ",", "\n", "sampler", "=", "None", ",", "timeout", "=", "0", "\n", ")", "\n", "\n", "progress_bar", "=", "tqdm", ".", "tqdm", "(", "\n", "total", "=", "self", ".", "nr_it", ",", "leave", "=", "True", ",", "desc", "=", "'OccAM computation'", ",", "\n", "dynamic_ncols", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch_dict", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "                ", "load_data_to_gpu", "(", "batch_dict", ")", "\n", "pert_pred_dicts", ",", "_", "=", "self", ".", "model", ".", "forward", "(", "batch_dict", ")", "\n", "\n", "pert_det_boxes", ",", "pert_det_labels", ",", "pert_det_scores", ",", "batch_ids", "=", "self", ".", "merge_detections_in_batch", "(", "pert_pred_dicts", ")", "\n", "\n", "similarity_matrix", "=", "self", ".", "get_similarity_matrix", "(", "\n", "base_det_boxes", ",", "base_det_labels", ",", "\n", "pert_det_boxes", ",", "pert_det_labels", ",", "pert_det_scores", ")", "\n", "\n", "cur_batch_size", "=", "len", "(", "pert_pred_dicts", ")", "\n", "for", "j", "in", "range", "(", "cur_batch_size", ")", ":", "\n", "                    ", "cur_mask", "=", "batch_dict", "[", "'mask'", "]", "[", "j", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sampling_map", "+=", "cur_mask", "\n", "\n", "batch_sample_mask", "=", "batch_ids", "==", "j", "\n", "if", "np", ".", "sum", "(", "batch_sample_mask", ")", ">", "0", ":", "\n", "                        ", "max_score", "=", "np", ".", "max", "(", "\n", "similarity_matrix", "[", ":", ",", "batch_sample_mask", "]", ",", "axis", "=", "1", ")", "\n", "attr_maps", "+=", "max_score", "[", ":", ",", "None", "]", "*", "cur_mask", "\n", "\n", "", "", "progress_bar", ".", "update", "(", "n", "=", "cur_batch_size", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "\n", "# normalize using occurrences", "\n", "attr_maps", "[", ":", ",", "sampling_map", ">", "0", "]", "/=", "sampling_map", "[", "sampling_map", ">", "0", "]", "\n", "\n", "return", "attr_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam.OccAM.visualize_attr_map": [[349, 378], ["matplotlib.get_cmap", "attr_map_scaled.max", "open3d.visualization.Visualizer", "open3d.visualization.Visualizer.create_window", "scipy.spatial.transform.Rotation.from_rotvec().as_matrix", "open3d.geometry.OrientedBoundingBox", "open3d.visualization.Visualizer.add_geometry", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.visualization.Visualizer.add_geometry", "open3d.visualization.Visualizer.run", "open3d.visualization.Visualizer.destroy_window", "attr_map.min", "matplotlib.get_cmap.", "open3d.visualization.Visualizer.get_render_option", "open3d.visualization.Visualizer.get_render_option", "numpy.ones", "open3d.geometry.TriangleMesh.create_coordinate_frame", "open3d.visualization.Visualizer.add_geometry", "scipy.spatial.transform.Rotation.from_rotvec"], "methods", ["None"], ["", "def", "visualize_attr_map", "(", "self", ",", "points", ",", "box", ",", "attr_map", ",", "draw_origin", "=", "True", ")", ":", "\n", "        ", "turbo_cmap", "=", "plt", ".", "get_cmap", "(", "'turbo'", ")", "\n", "attr_map_scaled", "=", "attr_map", "-", "attr_map", ".", "min", "(", ")", "\n", "attr_map_scaled", "/=", "attr_map_scaled", ".", "max", "(", ")", "\n", "color", "=", "turbo_cmap", "(", "attr_map_scaled", ")", "[", ":", ",", ":", "3", "]", "\n", "\n", "vis", "=", "open3d", ".", "visualization", ".", "Visualizer", "(", ")", "\n", "vis", ".", "create_window", "(", ")", "\n", "\n", "vis", ".", "get_render_option", "(", ")", ".", "point_size", "=", "4.0", "\n", "vis", ".", "get_render_option", "(", ")", ".", "background_color", "=", "np", ".", "ones", "(", "3", ")", "*", "0.25", "\n", "\n", "if", "draw_origin", ":", "\n", "            ", "axis_pcd", "=", "open3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "\n", "size", "=", "1.0", ",", "origin", "=", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "vis", ".", "add_geometry", "(", "axis_pcd", ")", "\n", "\n", "", "rot_mat", "=", "Rotation", ".", "from_rotvec", "(", "[", "0", ",", "0", ",", "box", "[", "6", "]", "]", ")", ".", "as_matrix", "(", ")", "\n", "bb", "=", "open3d", ".", "geometry", ".", "OrientedBoundingBox", "(", "box", "[", ":", "3", "]", ",", "rot_mat", ",", "box", "[", "3", ":", "6", "]", ")", "\n", "bb", ".", "color", "=", "(", "1.0", ",", "0.0", ",", "1.0", ")", "\n", "vis", ".", "add_geometry", "(", "bb", ")", "\n", "\n", "pts", "=", "open3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pts", ".", "points", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "points", "[", ":", ",", ":", "3", "]", ")", "\n", "pts", ".", "colors", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "color", ")", "\n", "vis", ".", "add_geometry", "(", "pts", ")", "\n", "\n", "vis", ".", "run", "(", ")", "\n", "vis", ".", "destroy_window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam_datasets.BaseDataset.__init__": [[14, 28], ["pcdet.datasets.DatasetTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "data_config", ",", "class_names", ",", "occam_config", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            data_config : EasyDict\n               dataset cfg including data preprocessing properties (OpenPCDet)\n            class_names :\n                list of class names (OpenPCDet)\n             occam_config: EasyDict\n                sampling properties for attribution map generation, see cfg file\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "dataset_cfg", "=", "data_config", ",", "class_names", "=", "class_names", ",", "\n", "training", "=", "False", ")", "\n", "self", ".", "occam_config", "=", "occam_config", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam_datasets.BaseDataset.load_and_preprocess_pcl": [[29, 65], ["occam_datasets.BaseDataset.prepare_data", "numpy.fromfile", "numpy.load.reshape", "numpy.abs", "source_file_path.split", "numpy.load", "numpy.degrees", "source_file_path.split", "numpy.arctan2"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.prepare_data"], ["", "def", "load_and_preprocess_pcl", "(", "self", ",", "source_file_path", ")", ":", "\n", "        ", "\"\"\"\n        load given point cloud file and preprocess data according OpenPCDet cfg\n\n        Parameters\n        ----------\n        source_file_path : str\n            path to point cloud to analyze (bin or npy)\n\n        Returns\n        -------\n        pcl : ndarray (N, 4)\n            preprocessed point cloud (x, y, z, intensity)\n        \"\"\"", "\n", "\n", "if", "source_file_path", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'bin'", ":", "\n", "            ", "points", "=", "np", ".", "fromfile", "(", "source_file_path", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "points", "=", "points", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "", "elif", "source_file_path", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'npy'", ":", "\n", "            ", "points", "=", "np", ".", "load", "(", "source_file_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# FOV crop is usually done using the image", "\n", "", "if", "self", ".", "occam_config", ".", "FOV_CROP", ":", "\n", "            ", "angles", "=", "np", ".", "abs", "(", "np", ".", "degrees", "(", "np", ".", "arctan2", "(", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "0", "]", ")", ")", ")", "\n", "mask", "=", "angles", "<=", "self", ".", "occam_config", ".", "FOV_ANGLE", "\n", "points", "=", "points", "[", "mask", ",", ":", "]", "\n", "\n", "", "input_dict", "=", "{", "\n", "'points'", ":", "points", "\n", "}", "\n", "\n", "data_dict", "=", "self", ".", "prepare_data", "(", "data_dict", "=", "input_dict", ")", "\n", "pcl", "=", "data_dict", "[", "'points'", "]", "\n", "return", "pcl", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam_datasets.OccamInferenceDataset.__init__": [[72, 115], ["pcdet.datasets.DatasetTemplate.__init__", "numpy.array", "numpy.array", "occam_datasets.OccamInferenceDataset.get_sampling_range", "spconv.pytorch.utils.PointToVoxel", "list", "list"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam_datasets.OccamInferenceDataset.get_sampling_range"], ["def", "__init__", "(", "self", ",", "data_config", ",", "class_names", ",", "occam_config", ",", "pcl", ",", "nr_it", ",", "logger", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            data_config : EasyDict\n                dataset cfg including data preprocessing properties (OpenPCDet)\n            class_names :\n                list of class names (OpenPCDet)\n            occam_config: EasyDict\n                sampling properties for attribution map generation, see cfg file\n            pcl : ndarray (N, 4)\n                preprocessed full point cloud\n            nr_it : int\n                number of sub-sampling iterations\n            logger : Logger\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "data_config", ",", "class_names", "=", "class_names", ",", "training", "=", "False", ",", "\n", "root_path", "=", "None", ",", "logger", "=", "logger", "\n", ")", "\n", "\n", "self", ".", "occam_config", "=", "occam_config", "\n", "self", ".", "pcl", "=", "pcl", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "nr_it", "=", "nr_it", "\n", "\n", "self", ".", "sampling_rand_rot", "=", "self", ".", "occam_config", ".", "SAMPLING", ".", "RANDOM_ROT", "\n", "self", ".", "sampling_vx_size", "=", "np", ".", "array", "(", "self", ".", "occam_config", ".", "SAMPLING", ".", "VOXEL_SIZE", ")", "\n", "self", ".", "lbda", "=", "self", ".", "occam_config", ".", "SAMPLING", ".", "LAMBDA", "# see paper", "\n", "self", ".", "sampling_density_coeff", "=", "np", ".", "array", "(", "\n", "self", ".", "occam_config", ".", "SAMPLING", ".", "DENSITY_DISTR_COEFF", ")", "\n", "self", ".", "sampling_range", "=", "self", ".", "get_sampling_range", "(", "\n", "rand_rot", "=", "self", ".", "sampling_rand_rot", ",", "\n", "pcl", "=", "self", ".", "pcl", ",", "\n", "vx_size", "=", "self", ".", "sampling_vx_size", "\n", ")", "\n", "\n", "self", ".", "voxel_generator", "=", "PointToVoxel", "(", "\n", "vsize_xyz", "=", "list", "(", "self", ".", "sampling_vx_size", ")", ",", "\n", "coors_range_xyz", "=", "list", "(", "self", ".", "sampling_range", ")", ",", "\n", "num_point_features", "=", "3", ",", "\n", "max_num_points_per_voxel", "=", "self", ".", "occam_config", ".", "SAMPLING", ".", "MAX_PTS_PER_VOXEL", ",", "\n", "max_num_voxels", "=", "self", ".", "occam_config", ".", "SAMPLING", ".", "MAX_VOXELS", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam_datasets.OccamInferenceDataset.get_sampling_range": [[117, 147], ["scipy.spatial.transform.Rotation.from_rotvec", "scipy.spatial.transform.Rotation.from_rotvec", "numpy.concatenate", "numpy.concatenate", "numpy.matmul", "numpy.matmul", "numpy.floor", "numpy.ceil", "scipy.spatial.transform.Rotation.from_rotvec.as_matrix", "scipy.spatial.transform.Rotation.from_rotvec.as_matrix", "numpy.min", "numpy.max"], "methods", ["None"], ["", "def", "get_sampling_range", "(", "self", ",", "rand_rot", ",", "pcl", ",", "vx_size", ")", ":", "\n", "        ", "\"\"\"\n        compute min/max sampling range for given random rotation\n\n        Parameters\n        ----------\n        rand_rot : float\n            max random rotation before sampling (+/-) in degrees\n        pcl : ndarray (N, 4)\n            full point cloud\n        vx_size : ndarray (3)\n            voxel size for sampling in x, y, z\n\n        Returns\n        -------\n        sampling_range : ndarray (6)\n            min/max sampling range for given rotation\n        \"\"\"", "\n", "rotmat_pos", "=", "Rotation", ".", "from_rotvec", "(", "[", "0", ",", "0", ",", "rand_rot", "]", ",", "degrees", "=", "True", ")", "\n", "rotmat_neg", "=", "Rotation", ".", "from_rotvec", "(", "[", "0", ",", "0", ",", "-", "rand_rot", "]", ",", "degrees", "=", "True", ")", "\n", "\n", "rot_pts", "=", "np", ".", "concatenate", "(", "\n", "(", "np", ".", "matmul", "(", "rotmat_pos", ".", "as_matrix", "(", ")", ",", "pcl", "[", ":", ",", ":", "3", "]", ".", "T", ")", ",", "\n", "np", ".", "matmul", "(", "rotmat_neg", ".", "as_matrix", "(", ")", ",", "pcl", "[", ":", ",", ":", "3", "]", ".", "T", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "min_grid", "=", "np", ".", "floor", "(", "np", ".", "min", "(", "rot_pts", ",", "axis", "=", "1", ")", "/", "vx_size", ")", "*", "vx_size", "-", "vx_size", "\n", "max_grid", "=", "np", ".", "ceil", "(", "np", ".", "max", "(", "rot_pts", ",", "axis", "=", "1", ")", "/", "vx_size", ")", "*", "vx_size", "+", "vx_size", "\n", "\n", "sampling_range", "=", "np", ".", "concatenate", "(", "(", "min_grid", ",", "max_grid", ")", ")", "\n", "return", "sampling_range", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam_datasets.OccamInferenceDataset.__len__": [[148, 150], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nr_it", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.occam_utils.occam_datasets.OccamInferenceDataset.__getitem__": [[151, 198], ["scipy.spatial.transform.Rotation.from_rotvec", "rand_rot_mat.as_matrix.as_matrix.as_matrix", "numpy.ascontiguousarray", "occam_datasets.OccamInferenceDataset.voxel_generator.generate_voxel_with_id", "numpy.linalg.norm", "numpy.in1d", "occam_datasets.OccamInferenceDataset.prepare_data", "numpy.random.rand", "numpy.matmul", "torch.from_numpy", "vx_coord.numpy", "pt_vx_id.numpy", "numpy.matmul", "numpy.where", "numpy.linalg.inv", "numpy.random.rand", "numpy.random.rand", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.prepare_data"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "==", "self", ".", "nr_it", ":", "\n", "            ", "raise", "IndexError", "\n", "\n", "# randomly rotate and translate full pcl", "\n", "", "rand_transl", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "3", ")", "*", "(", "self", ".", "sampling_vx_size", "[", "None", ",", ":", "]", ")", "\n", "rand_transl", "-=", "self", ".", "sampling_vx_size", "[", "None", ",", ":", "]", "/", "2", "\n", "\n", "rand_rot_", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "*", "self", ".", "sampling_rand_rot", "*", "2", "-", "self", ".", "sampling_rand_rot", "\n", "rand_rot_mat", "=", "Rotation", ".", "from_rotvec", "(", "[", "0", ",", "0", ",", "rand_rot_", "[", "0", "]", "]", ",", "degrees", "=", "True", ")", "\n", "rand_rot_mat", "=", "rand_rot_mat", ".", "as_matrix", "(", ")", "\n", "\n", "rand_rot_pcl", "=", "np", ".", "matmul", "(", "rand_rot_mat", ",", "self", ".", "pcl", "[", ":", ",", ":", "3", "]", ".", "T", ")", ".", "T", "\n", "rand_rot_transl_pcl", "=", "rand_rot_pcl", "+", "rand_transl", "\n", "rand_rot_transl_pcl", "=", "np", ".", "ascontiguousarray", "(", "rand_rot_transl_pcl", ")", "\n", "\n", "# voxelixe full pcl", "\n", "_", ",", "vx_coord", ",", "_", ",", "pt_vx_id", "=", "self", ".", "voxel_generator", ".", "generate_voxel_with_id", "(", "\n", "torch", ".", "from_numpy", "(", "rand_rot_transl_pcl", ")", ")", "\n", "vx_coord", ",", "pt_vx_id", "=", "vx_coord", ".", "numpy", "(", ")", ",", "pt_vx_id", ".", "numpy", "(", ")", "\n", "vx_coord", "=", "vx_coord", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n", "# compute voxel center in original pcl", "\n", "vx_orig_coord", "=", "vx_coord", "*", "self", ".", "sampling_vx_size", "[", "None", ",", ":", "]", "\n", "vx_orig_coord", "+=", "self", ".", "sampling_range", "[", ":", "3", "]", "[", "None", ",", ":", "]", "\n", "vx_orig_coord", "+=", "self", ".", "sampling_vx_size", "[", "None", ",", ":", "]", "/", "2", "\n", "vx_orig_coord", "-=", "rand_transl", "\n", "vx_orig_coord", "=", "np", ".", "matmul", "(", "np", ".", "linalg", ".", "inv", "(", "rand_rot_mat", ")", ",", "vx_orig_coord", ".", "T", ")", ".", "T", "\n", "\n", "vx_dist", "=", "np", ".", "linalg", ".", "norm", "(", "vx_orig_coord", ",", "axis", "=", "1", ")", "\n", "vx_keep_prob", "=", "self", ".", "lbda", "*", "(", "\n", "np", ".", "power", "(", "vx_dist", ",", "2", ")", "*", "self", ".", "sampling_density_coeff", "[", "0", "]", "\n", "+", "vx_dist", "*", "self", ".", "sampling_density_coeff", "[", "1", "]", "\n", "+", "self", ".", "sampling_density_coeff", "[", "2", "]", ")", "\n", "\n", "vx_keep_ids", "=", "np", ".", "where", "(", "np", ".", "random", ".", "rand", "(", "vx_keep_prob", ".", "shape", "[", "0", "]", ")", "<", "vx_keep_prob", ")", "[", "0", "]", "\n", "pt_keep_mask", "=", "np", ".", "in1d", "(", "pt_vx_id", ",", "vx_keep_ids", ")", "\n", "\n", "input_dict", "=", "{", "\n", "'points'", ":", "self", ".", "pcl", "[", "pt_keep_mask", ",", ":", "]", ",", "\n", "'mask'", ":", "pt_keep_mask", "\n", "}", "\n", "\n", "data_dict", "=", "self", ".", "prepare_data", "(", "data_dict", "=", "input_dict", ")", "\n", "\n", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.pcdet.config.log_config_to_file": [[7, 14], ["cfg.items", "isinstance", "logger.info", "logger.info", "config.log_config_to_file"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.pcdet.config.log_config_to_file"], ["def", "log_config_to_file", "(", "cfg", ",", "pre", "=", "'cfg'", ",", "logger", "=", "None", ")", ":", "\n", "    ", "for", "key", ",", "val", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "cfg", "[", "key", "]", ",", "EasyDict", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'\\n%s.%s = edict()'", "%", "(", "pre", ",", "key", ")", ")", "\n", "log_config_to_file", "(", "cfg", "[", "key", "]", ",", "pre", "=", "pre", "+", "'.'", "+", "key", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "", "logger", ".", "info", "(", "'%s.%s: %s'", "%", "(", "pre", ",", "key", ",", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pcdet.config.cfg_from_list": [[16, 49], ["zip", "k.split", "len", "literal_eval", "isinstance", "literal_eval.split", "type", "type", "src.split", "type", "type.", "isinstance", "literal_eval.split", "enumerate", "type", "type", "type", "type", "type", "type", "type"], "function", ["None"], ["", "", "def", "cfg_from_list", "(", "cfg_list", ",", "config", ")", ":", "\n", "    ", "\"\"\"Set config keys via list (e.g., from command line).\"\"\"", "\n", "from", "ast", "import", "literal_eval", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "k", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "        ", "key_list", "=", "k", ".", "split", "(", "'.'", ")", "\n", "d", "=", "config", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "            ", "assert", "subkey", "in", "d", ",", "'NotFoundKey: %s'", "%", "subkey", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "subkey", "in", "d", ",", "'NotFoundKey: %s'", "%", "subkey", "\n", "try", ":", "\n", "            ", "value", "=", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "            ", "value", "=", "v", "\n", "\n", "", "if", "type", "(", "value", ")", "!=", "type", "(", "d", "[", "subkey", "]", ")", "and", "isinstance", "(", "d", "[", "subkey", "]", ",", "EasyDict", ")", ":", "\n", "            ", "key_val_list", "=", "value", ".", "split", "(", "','", ")", "\n", "for", "src", "in", "key_val_list", ":", "\n", "                ", "cur_key", ",", "cur_val", "=", "src", ".", "split", "(", "':'", ")", "\n", "val_type", "=", "type", "(", "d", "[", "subkey", "]", "[", "cur_key", "]", ")", "\n", "cur_val", "=", "val_type", "(", "cur_val", ")", "\n", "d", "[", "subkey", "]", "[", "cur_key", "]", "=", "cur_val", "\n", "", "", "elif", "type", "(", "value", ")", "!=", "type", "(", "d", "[", "subkey", "]", ")", "and", "isinstance", "(", "d", "[", "subkey", "]", ",", "list", ")", ":", "\n", "            ", "val_list", "=", "value", ".", "split", "(", "','", ")", "\n", "for", "k", ",", "x", "in", "enumerate", "(", "val_list", ")", ":", "\n", "                ", "val_list", "[", "k", "]", "=", "type", "(", "d", "[", "subkey", "]", "[", "0", "]", ")", "(", "x", ")", "\n", "", "d", "[", "subkey", "]", "=", "val_list", "\n", "", "else", ":", "\n", "            ", "assert", "type", "(", "value", ")", "==", "type", "(", "d", "[", "subkey", "]", ")", ",", "'type {} does not match original type {}'", ".", "format", "(", "type", "(", "value", ")", ",", "type", "(", "d", "[", "subkey", "]", ")", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pcdet.config.merge_new_config": [[51, 69], ["new_config.items", "config.update", "config.merge_new_config", "open", "easydict.EasyDict", "isinstance", "easydict.EasyDict", "yaml.safe_load", "yaml.safe_load"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.pcdet.config.merge_new_config"], ["", "", "", "def", "merge_new_config", "(", "config", ",", "new_config", ")", ":", "\n", "    ", "if", "'_BASE_CONFIG_'", "in", "new_config", ":", "\n", "        ", "with", "open", "(", "new_config", "[", "'_BASE_CONFIG_'", "]", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "yaml_config", "=", "yaml", ".", "safe_load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "except", ":", "\n", "                ", "yaml_config", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "", "config", ".", "update", "(", "EasyDict", "(", "yaml_config", ")", ")", "\n", "\n", "", "for", "key", ",", "val", "in", "new_config", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "val", ",", "dict", ")", ":", "\n", "            ", "config", "[", "key", "]", "=", "val", "\n", "continue", "\n", "", "if", "key", "not", "in", "config", ":", "\n", "            ", "config", "[", "key", "]", "=", "EasyDict", "(", ")", "\n", "", "merge_new_config", "(", "config", "[", "key", "]", ",", "val", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pcdet.config.cfg_from_yaml_file": [[71, 81], ["open", "config.merge_new_config", "yaml.safe_load", "yaml.safe_load"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.pcdet.config.merge_new_config"], ["", "def", "cfg_from_yaml_file", "(", "cfg_file", ",", "config", ")", ":", "\n", "    ", "with", "open", "(", "cfg_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "try", ":", "\n", "            ", "new_config", "=", "yaml", ".", "safe_load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "except", ":", "\n", "            ", "new_config", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "", "merge_new_config", "(", "config", "=", "config", ",", "new_config", "=", "new_config", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pcdet.__init__.get_git_commit_number": [[11, 18], ["subprocess.run", "subprocess.run.stdout.decode", "pathlib.Path"], "function", ["None"], ["def", "get_git_commit_number", "(", ")", ":", "\n", "    ", "if", "not", "(", "Path", "(", "__file__", ")", ".", "parent", "/", "'../.git'", ")", ".", "exists", "(", ")", ":", "\n", "        ", "return", "'0000000'", "\n", "\n", "", "cmd_out", "=", "subprocess", ".", "run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "git_commit_number", "=", "cmd_out", ".", "stdout", ".", "decode", "(", "'utf-8'", ")", "[", ":", "7", "]", "\n", "return", "git_commit_number", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.ResidualCoder.__init__": [[6, 12], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", "=", "7", ",", "encode_angle_by_sincos", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_size", "=", "code_size", "\n", "self", ".", "encode_angle_by_sincos", "=", "encode_angle_by_sincos", "\n", "if", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "self", ".", "code_size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.ResidualCoder.encode_torch": [[13, 44], ["torch.clamp_min", "torch.clamp_min", "torch.split", "torch.split", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.cat", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "zip"], "methods", ["None"], ["", "", "def", "encode_torch", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n            anchors: (N, 7 + C) [x, y, z, dx, dy, dz, heading or *[cos, sin], ...]\n\n        Returns:\n\n        \"\"\"", "\n", "anchors", "[", ":", ",", "3", ":", "6", "]", "=", "torch", ".", "clamp_min", "(", "anchors", "[", ":", ",", "3", ":", "6", "]", ",", "min", "=", "1e-5", ")", "\n", "boxes", "[", ":", ",", "3", ":", "6", "]", "=", "torch", ".", "clamp_min", "(", "boxes", "[", ":", ",", "3", ":", "6", "]", ",", "min", "=", "1e-5", ")", "\n", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "=", "torch", ".", "split", "(", "boxes", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "zt", "=", "(", "zg", "-", "za", ")", "/", "dza", "\n", "dxt", "=", "torch", ".", "log", "(", "dxg", "/", "dxa", ")", "\n", "dyt", "=", "torch", ".", "log", "(", "dyg", "/", "dya", ")", "\n", "dzt", "=", "torch", ".", "log", "(", "dzg", "/", "dza", ")", "\n", "if", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "rt_cos", "=", "torch", ".", "cos", "(", "rg", ")", "-", "torch", ".", "cos", "(", "ra", ")", "\n", "rt_sin", "=", "torch", ".", "sin", "(", "rg", ")", "-", "torch", ".", "sin", "(", "ra", ")", "\n", "rts", "=", "[", "rt_cos", ",", "rt_sin", "]", "\n", "", "else", ":", "\n", "            ", "rts", "=", "[", "rg", "-", "ra", "]", "\n", "\n", "", "cts", "=", "[", "g", "-", "a", "for", "g", ",", "a", "in", "zip", "(", "cgs", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "*", "rts", ",", "*", "cts", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.ResidualCoder.decode_torch": [[45, 78], ["torch.split", "torch.sqrt", "torch.cat", "torch.split", "torch.split", "torch.exp", "torch.exp", "torch.exp", "torch.atan2", "torch.cos", "torch.sin", "zip"], "methods", ["None"], ["", "def", "decode_torch", "(", "self", ",", "box_encodings", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_encodings: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading or *[cos, sin], ...]\n            anchors: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "if", "not", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "rt", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "cost", ",", "sint", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "dza", "+", "za", "\n", "\n", "dxg", "=", "torch", ".", "exp", "(", "dxt", ")", "*", "dxa", "\n", "dyg", "=", "torch", ".", "exp", "(", "dyt", ")", "*", "dya", "\n", "dzg", "=", "torch", ".", "exp", "(", "dzt", ")", "*", "dza", "\n", "\n", "if", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "rg_cos", "=", "cost", "+", "torch", ".", "cos", "(", "ra", ")", "\n", "rg_sin", "=", "sint", "+", "torch", ".", "sin", "(", "ra", ")", "\n", "rg", "=", "torch", ".", "atan2", "(", "rg_sin", ",", "rg_cos", ")", "\n", "", "else", ":", "\n", "            ", "rg", "=", "rt", "+", "ra", "\n", "\n", "", "cgs", "=", "[", "t", "+", "a", "for", "t", ",", "a", "in", "zip", "(", "cts", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PreviousResidualDecoder.__init__": [[81, 84], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", "=", "7", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_size", "=", "code_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PreviousResidualDecoder.decode_torch": [[85, 110], ["torch.split", "torch.split", "torch.sqrt", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "decode_torch", "(", "box_encodings", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_encodings:  (B, N, 7 + ?) x, y, z, w, l, h, r, custom values\n            anchors: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "dza", "+", "za", "\n", "\n", "dxg", "=", "torch", ".", "exp", "(", "lt", ")", "*", "dxa", "\n", "dyg", "=", "torch", ".", "exp", "(", "wt", ")", "*", "dya", "\n", "dzg", "=", "torch", ".", "exp", "(", "ht", ")", "*", "dza", "\n", "rg", "=", "rt", "+", "ra", "\n", "\n", "cgs", "=", "[", "t", "+", "a", "for", "t", ",", "a", "in", "zip", "(", "cts", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PreviousResidualRoIDecoder.__init__": [[113, 116], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", "=", "7", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_size", "=", "code_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PreviousResidualRoIDecoder.decode_torch": [[117, 142], ["torch.split", "torch.split", "torch.sqrt", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "decode_torch", "(", "box_encodings", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_encodings:  (B, N, 7 + ?) x, y, z, w, l, h, r, custom values\n            anchors: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "dza", "+", "za", "\n", "\n", "dxg", "=", "torch", ".", "exp", "(", "lt", ")", "*", "dxa", "\n", "dyg", "=", "torch", ".", "exp", "(", "wt", ")", "*", "dya", "\n", "dzg", "=", "torch", ".", "exp", "(", "ht", ")", "*", "dza", "\n", "rg", "=", "ra", "-", "rt", "\n", "\n", "cgs", "=", "[", "t", "+", "a", "for", "t", ",", "a", "in", "zip", "(", "cts", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.__init__": [[145, 152], ["object.__init__", "torch.from_numpy().cuda().float", "box_coder_utils.PointResidualCoder.mean_size.min", "torch.from_numpy().cuda", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", "=", "8", ",", "use_mean_size", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_size", "=", "code_size", "\n", "self", ".", "use_mean_size", "=", "use_mean_size", "\n", "if", "self", ".", "use_mean_size", ":", "\n", "            ", "self", ".", "mean_size", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "kwargs", "[", "'mean_size'", "]", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "mean_size", ".", "min", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.encode_torch": [[153, 188], ["torch.clamp_min", "torch.split", "torch.split", "torch.cat", "torch.split", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "gt_classes.max", "torch.cos", "torch.sin"], "methods", ["None"], ["", "", "def", "encode_torch", "(", "self", ",", "gt_boxes", ",", "points", ",", "gt_classes", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n            points: (N, 3) [x, y, z]\n            gt_classes: (N) [1, num_classes]\n        Returns:\n            box_coding: (N, 8 + C)\n        \"\"\"", "\n", "gt_boxes", "[", ":", ",", "3", ":", "6", "]", "=", "torch", ".", "clamp_min", "(", "gt_boxes", "[", ":", ",", "3", ":", "6", "]", ",", "min", "=", "1e-5", ")", "\n", "\n", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "=", "torch", ".", "split", "(", "gt_boxes", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xa", ",", "ya", ",", "za", "=", "torch", ".", "split", "(", "points", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_mean_size", ":", "\n", "            ", "assert", "gt_classes", ".", "max", "(", ")", "<=", "self", ".", "mean_size", ".", "shape", "[", "0", "]", "\n", "point_anchor_size", "=", "self", ".", "mean_size", "[", "gt_classes", "-", "1", "]", "\n", "dxa", ",", "dya", ",", "dza", "=", "torch", ".", "split", "(", "point_anchor_size", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "zt", "=", "(", "zg", "-", "za", ")", "/", "dza", "\n", "dxt", "=", "torch", ".", "log", "(", "dxg", "/", "dxa", ")", "\n", "dyt", "=", "torch", ".", "log", "(", "dyg", "/", "dya", ")", "\n", "dzt", "=", "torch", ".", "log", "(", "dzg", "/", "dza", ")", "\n", "", "else", ":", "\n", "            ", "xt", "=", "(", "xg", "-", "xa", ")", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "\n", "zt", "=", "(", "zg", "-", "za", ")", "\n", "dxt", "=", "torch", ".", "log", "(", "dxg", ")", "\n", "dyt", "=", "torch", ".", "log", "(", "dyg", ")", "\n", "dzt", "=", "torch", ".", "log", "(", "dzg", ")", "\n", "\n", "", "cts", "=", "[", "g", "for", "g", "in", "cgs", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "torch", ".", "cos", "(", "rg", ")", ",", "torch", ".", "sin", "(", "rg", ")", ",", "*", "cts", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.decode_torch": [[189, 223], ["torch.split", "torch.split", "torch.atan2", "torch.cat", "torch.split", "torch.sqrt", "torch.split", "pred_classes.max", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "decode_torch", "(", "self", ",", "box_encodings", ",", "points", ",", "pred_classes", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_encodings: (N, 8 + C) [x, y, z, dx, dy, dz, cos, sin, ...]\n            points: [x, y, z]\n            pred_classes: (N) [1, num_classes]\n        Returns:\n\n        \"\"\"", "\n", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "cost", ",", "sint", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xa", ",", "ya", ",", "za", "=", "torch", ".", "split", "(", "points", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_mean_size", ":", "\n", "            ", "assert", "pred_classes", ".", "max", "(", ")", "<=", "self", ".", "mean_size", ".", "shape", "[", "0", "]", "\n", "point_anchor_size", "=", "self", ".", "mean_size", "[", "pred_classes", "-", "1", "]", "\n", "dxa", ",", "dya", ",", "dza", "=", "torch", ".", "split", "(", "point_anchor_size", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "dza", "+", "za", "\n", "\n", "dxg", "=", "torch", ".", "exp", "(", "dxt", ")", "*", "dxa", "\n", "dyg", "=", "torch", ".", "exp", "(", "dyt", ")", "*", "dya", "\n", "dzg", "=", "torch", ".", "exp", "(", "dzt", ")", "*", "dza", "\n", "", "else", ":", "\n", "            ", "xg", "=", "xt", "+", "xa", "\n", "yg", "=", "yt", "+", "ya", "\n", "zg", "=", "zt", "+", "za", "\n", "dxg", ",", "dyg", ",", "dzg", "=", "torch", ".", "split", "(", "torch", ".", "exp", "(", "box_encodings", "[", "...", ",", "3", ":", "6", "]", ")", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "rg", "=", "torch", ".", "atan2", "(", "sint", ",", "cost", ")", "\n", "\n", "cgs", "=", "[", "t", "for", "t", "in", "cts", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.Object3d.__init__": [[19, 37], ["line.strip().split", "object3d_kitti.cls_type_to_id", "float", "float", "float", "numpy.array", "float", "float", "float", "numpy.array", "numpy.linalg.norm", "float", "object3d_kitti.Object3d.get_kitti_obj_level", "float", "line.strip", "float", "float", "float", "float", "float", "float", "float", "line.strip().split.__len__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.cls_type_to_id", "home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.Object3d.get_kitti_obj_level", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "line", ")", ":", "\n", "        ", "label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "src", "=", "line", "\n", "self", ".", "cls_type", "=", "label", "[", "0", "]", "\n", "self", ".", "cls_id", "=", "cls_type_to_id", "(", "self", ".", "cls_type", ")", "\n", "self", ".", "truncation", "=", "float", "(", "label", "[", "1", "]", ")", "\n", "self", ".", "occlusion", "=", "float", "(", "label", "[", "2", "]", ")", "# 0:fully visible 1:partly occluded 2:largely occluded 3:unknown", "\n", "self", ".", "alpha", "=", "float", "(", "label", "[", "3", "]", ")", "\n", "self", ".", "box2d", "=", "np", ".", "array", "(", "(", "float", "(", "label", "[", "4", "]", ")", ",", "float", "(", "label", "[", "5", "]", ")", ",", "float", "(", "label", "[", "6", "]", ")", ",", "float", "(", "label", "[", "7", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "h", "=", "float", "(", "label", "[", "8", "]", ")", "\n", "self", ".", "w", "=", "float", "(", "label", "[", "9", "]", ")", "\n", "self", ".", "l", "=", "float", "(", "label", "[", "10", "]", ")", "\n", "self", ".", "loc", "=", "np", ".", "array", "(", "(", "float", "(", "label", "[", "11", "]", ")", ",", "float", "(", "label", "[", "12", "]", ")", ",", "float", "(", "label", "[", "13", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "dis_to_cam", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "loc", ")", "\n", "self", ".", "ry", "=", "float", "(", "label", "[", "14", "]", ")", "\n", "self", ".", "score", "=", "float", "(", "label", "[", "15", "]", ")", "if", "label", ".", "__len__", "(", ")", "==", "16", "else", "-", "1.0", "\n", "self", ".", "level_str", "=", "None", "\n", "self", ".", "level", "=", "self", ".", "get_kitti_obj_level", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.Object3d.get_kitti_obj_level": [[38, 53], ["float", "float"], "methods", ["None"], ["", "def", "get_kitti_obj_level", "(", "self", ")", ":", "\n", "        ", "height", "=", "float", "(", "self", ".", "box2d", "[", "3", "]", ")", "-", "float", "(", "self", ".", "box2d", "[", "1", "]", ")", "+", "1", "\n", "\n", "if", "height", ">=", "40", "and", "self", ".", "truncation", "<=", "0.15", "and", "self", ".", "occlusion", "<=", "0", ":", "\n", "            ", "self", ".", "level_str", "=", "'Easy'", "\n", "return", "0", "# Easy", "\n", "", "elif", "height", ">=", "25", "and", "self", ".", "truncation", "<=", "0.3", "and", "self", ".", "occlusion", "<=", "1", ":", "\n", "            ", "self", ".", "level_str", "=", "'Moderate'", "\n", "return", "1", "# Moderate", "\n", "", "elif", "height", ">=", "25", "and", "self", ".", "truncation", "<=", "0.5", "and", "self", ".", "occlusion", "<=", "2", ":", "\n", "            ", "self", ".", "level_str", "=", "'Hard'", "\n", "return", "2", "# Hard", "\n", "", "else", ":", "\n", "            ", "self", ".", "level_str", "=", "'UnKnown'", "\n", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.Object3d.generate_corners3d": [[54, 71], ["numpy.array", "numpy.vstack", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "", "def", "generate_corners3d", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        generate corners3d representation for this object\n        :return corners_3d: (8, 3) corners of box3d in camera coord\n        \"\"\"", "\n", "l", ",", "h", ",", "w", "=", "self", ".", "l", ",", "self", ".", "h", ",", "self", ".", "w", "\n", "x_corners", "=", "[", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", "]", "\n", "y_corners", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "-", "h", ",", "-", "h", ",", "-", "h", ",", "-", "h", "]", "\n", "z_corners", "=", "[", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", "]", "\n", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "self", ".", "ry", ")", ",", "0", ",", "np", ".", "sin", "(", "self", ".", "ry", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "self", ".", "ry", ")", ",", "0", ",", "np", ".", "cos", "(", "self", ".", "ry", ")", "]", "]", ")", "\n", "corners3d", "=", "np", ".", "vstack", "(", "[", "x_corners", ",", "y_corners", ",", "z_corners", "]", ")", "# (3, 8)", "\n", "corners3d", "=", "np", ".", "dot", "(", "R", ",", "corners3d", ")", ".", "T", "\n", "corners3d", "=", "corners3d", "+", "self", ".", "loc", "\n", "return", "corners3d", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.Object3d.to_str": [[72, 77], ["None"], "methods", ["None"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "print_str", "=", "'%s %.3f %.3f %.3f box2d: %s hwl: [%.3f %.3f %.3f] pos: %s ry: %.3f'", "%", "(", "self", ".", "cls_type", ",", "self", ".", "truncation", ",", "self", ".", "occlusion", ",", "self", ".", "alpha", ",", "self", ".", "box2d", ",", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ",", "\n", "self", ".", "loc", ",", "self", ".", "ry", ")", "\n", "return", "print_str", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.Object3d.to_kitti_format": [[78, 84], ["int"], "methods", ["None"], ["", "def", "to_kitti_format", "(", "self", ")", ":", "\n", "        ", "kitti_str", "=", "'%s %.2f %d %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f'", "%", "(", "self", ".", "cls_type", ",", "self", ".", "truncation", ",", "int", "(", "self", ".", "occlusion", ")", ",", "self", ".", "alpha", ",", "self", ".", "box2d", "[", "0", "]", ",", "self", ".", "box2d", "[", "1", "]", ",", "\n", "self", ".", "box2d", "[", "2", "]", ",", "self", ".", "box2d", "[", "3", "]", ",", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ",", "self", ".", "loc", "[", "0", "]", ",", "self", ".", "loc", "[", "1", "]", ",", "self", ".", "loc", "[", "2", "]", ",", "\n", "self", ".", "ry", ")", "\n", "return", "kitti_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.get_objects_from_label": [[4, 9], ["open", "f.readlines", "object3d_kitti.Object3d"], "function", ["None"], ["def", "get_objects_from_label", "(", "label_file", ")", ":", "\n", "    ", "with", "open", "(", "label_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "objects", "=", "[", "Object3d", "(", "line", ")", "for", "line", "in", "lines", "]", "\n", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.cls_type_to_id": [[11, 16], ["type_to_id.keys"], "function", ["None"], ["", "def", "cls_type_to_id", "(", "cls_type", ")", ":", "\n", "    ", "type_to_id", "=", "{", "'Car'", ":", "1", ",", "'Pedestrian'", ":", "2", ",", "'Cyclist'", ":", "3", ",", "'Van'", ":", "4", "}", "\n", "if", "cls_type", "not", "in", "type_to_id", ".", "keys", "(", ")", ":", "\n", "        ", "return", "-", "1", "\n", "", "return", "type_to_id", "[", "cls_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size": [[15, 21], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_rank": [[23, 29], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.is_main_process": [[31, 33], ["commu_utils.get_rank"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.synchronize": [[35, 48], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.all_gather": [[50, 112], ["commu_utils.get_world_size", "torch.LongTensor().to", "torch.LongTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "isinstance", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "data.reshape.size", "data.reshape.reshape", "torch.LongTensor().to", "torch.LongTensor().to", "int", "tensor_list.append", "torch.FloatTensor().cuda().to", "torch.FloatTensor().cuda().to", "torch.cat", "torch.cat", "torch.LongTensor", "torch.LongTensor", "range", "size.item", "torch.FloatTensor().cuda().to", "torch.FloatTensor().cuda().to", "data_list.append", "data_list.append", "list", "data.reshape.reshape", "resized_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.cat.numel", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.cat.cpu().numpy", "torch.FloatTensor", "torch.FloatTensor", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size", "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.all_gather", "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "origin_size", "=", "None", "\n", "if", "not", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "origin_size", "=", "data", ".", "size", "(", ")", "\n", "tensor", "=", "data", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "tensor_type", "=", "tensor", ".", "dtype", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "LongTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "FloatTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "cuda", "(", ")", ".", "to", "(", "tensor_type", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "FloatTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "cuda", "(", ")", ".", "to", "(", "tensor_type", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "if", "origin_size", "is", "None", ":", "\n", "            ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "", "else", ":", "\n", "            ", "buffer", "=", "tensor", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "buffer", ")", "\n", "\n", "", "", "if", "origin_size", "is", "not", "None", ":", "\n", "        ", "new_shape", "=", "[", "-", "1", "]", "+", "list", "(", "origin_size", "[", "1", ":", "]", ")", "\n", "resized_list", "=", "[", "]", "\n", "for", "data", "in", "data_list", ":", "\n", "# suppose the difference of tensor size exist in first dimension", "\n", "            ", "data", "=", "data", ".", "reshape", "(", "new_shape", ")", "\n", "resized_list", ".", "append", "(", "data", ")", "\n", "\n", "", "return", "resized_list", "\n", "", "else", ":", "\n", "        ", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.reduce_dict": [[114, 141], ["commu_utils.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size", "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_rank"], ["", "", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.average_reduce_value": [[143, 146], ["commu_utils.all_gather", "sum", "len"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.all_gather"], ["", "def", "average_reduce_value", "(", "data", ")", ":", "\n", "    ", "data_list", "=", "all_gather", "(", "data", ")", "\n", "return", "sum", "(", "data_list", ")", "/", "len", "(", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.all_reduce": [[148, 169], ["commu_utils.get_world_size", "data.clone", "torch.all_reduce", "commu_utils.all_reduce.op_map"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size", "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.all_reduce"], ["", "def", "all_reduce", "(", "data", ",", "op", "=", "\"sum\"", ",", "average", "=", "False", ")", ":", "\n", "\n", "    ", "def", "op_map", "(", "op", ")", ":", "\n", "        ", "op_dict", "=", "{", "\n", "\"SUM\"", ":", "dist", ".", "ReduceOp", ".", "SUM", ",", "\n", "\"MAX\"", ":", "dist", ".", "ReduceOp", ".", "MAX", ",", "\n", "\"MIN\"", ":", "dist", ".", "ReduceOp", ".", "MIN", ",", "\n", "\"PRODUCT\"", ":", "dist", ".", "ReduceOp", ".", "PRODUCT", ",", "\n", "}", "\n", "return", "op_dict", "[", "op", "]", "\n", "\n", "", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", ">", "1", ":", "\n", "        ", "reduced_data", "=", "data", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "reduced_data", ",", "op", "=", "op_map", "(", "op", ".", "upper", "(", ")", ")", ")", "\n", "if", "average", ":", "\n", "            ", "assert", "op", ".", "upper", "(", ")", "==", "'SUM'", "\n", "return", "reduced_data", "/", "world_size", "\n", "", "else", ":", "\n", "            ", "return", "reduced_data", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.concat_all_gather": [[171, 183], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.all_gather", "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.all_gather", "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size", "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.__init__": [[254, 256], ["common_utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.reset": [[257, 262], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update": [[263, 268], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch": [[15, 19], ["isinstance", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "check_numpy_to_torch", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", ",", "True", "\n", "", "return", "x", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.limit_period": [[21, 25], ["common_utils.check_numpy_to_torch", "ans.numpy", "torch.floor", "torch.floor", "torch.floor"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch"], ["", "def", "limit_period", "(", "val", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", ")", ":", "\n", "    ", "val", ",", "is_numpy", "=", "check_numpy_to_torch", "(", "val", ")", "\n", "ans", "=", "val", "-", "torch", ".", "floor", "(", "val", "/", "period", "+", "offset", ")", "*", "period", "\n", "return", "ans", ".", "numpy", "(", ")", "if", "is_numpy", "else", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.drop_info_with_name": [[27, 33], ["info.keys", "enumerate"], "function", ["None"], ["", "def", "drop_info_with_name", "(", "info", ",", "name", ")", ":", "\n", "    ", "ret_info", "=", "{", "}", "\n", "keep_indices", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "info", "[", "'name'", "]", ")", "if", "x", "!=", "name", "]", "\n", "for", "key", "in", "info", ".", "keys", "(", ")", ":", "\n", "        ", "ret_info", "[", "key", "]", "=", "info", "[", "key", "]", "[", "keep_indices", "]", "\n", "", "return", "ret_info", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z": [[35, 58], ["common_utils.check_numpy_to_torch", "common_utils.check_numpy_to_torch", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "angle.new_zeros", "angle.new_ones", "torch.stack().view().float", "torch.stack().view().float", "torch.stack().view().float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat.numpy", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch"], ["", "def", "rotate_points_along_z", "(", "points", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (B, N, 3 + C)\n        angle: (B), angle along z-axis, angle increases x ==> y\n    Returns:\n\n    \"\"\"", "\n", "points", ",", "is_numpy", "=", "check_numpy_to_torch", "(", "points", ")", "\n", "angle", ",", "_", "=", "check_numpy_to_torch", "(", "angle", ")", "\n", "\n", "cosa", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sina", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "zeros", "=", "angle", ".", "new_zeros", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "ones", "=", "angle", ".", "new_ones", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "rot_matrix", "=", "torch", ".", "stack", "(", "(", "\n", "cosa", ",", "sina", ",", "zeros", ",", "\n", "-", "sina", ",", "cosa", ",", "zeros", ",", "\n", "zeros", ",", "zeros", ",", "ones", "\n", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", ".", "float", "(", ")", "\n", "points_rot", "=", "torch", ".", "matmul", "(", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "rot_matrix", ")", "\n", "points_rot", "=", "torch", ".", "cat", "(", "(", "points_rot", ",", "points", "[", ":", ",", ":", ",", "3", ":", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "points_rot", ".", "numpy", "(", ")", "if", "is_numpy", "else", "points_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.mask_points_by_range": [[60, 64], ["None"], "function", ["None"], ["", "def", "mask_points_by_range", "(", "points", ",", "limit_range", ")", ":", "\n", "    ", "mask", "=", "(", "points", "[", ":", ",", "0", "]", ">=", "limit_range", "[", "0", "]", ")", "&", "(", "points", "[", ":", ",", "0", "]", "<=", "limit_range", "[", "3", "]", ")", "&", "(", "points", "[", ":", ",", "1", "]", ">=", "limit_range", "[", "1", "]", ")", "&", "(", "points", "[", ":", ",", "1", "]", "<=", "limit_range", "[", "4", "]", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_voxel_centers": [[66, 83], ["voxel_coords[].float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "get_voxel_centers", "(", "voxel_coords", ",", "downsample_times", ",", "voxel_size", ",", "point_cloud_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        voxel_coords: (N, 3)\n        downsample_times:\n        voxel_size:\n        point_cloud_range:\n\n    Returns:\n\n    \"\"\"", "\n", "assert", "voxel_coords", ".", "shape", "[", "1", "]", "==", "3", "\n", "voxel_centers", "=", "voxel_coords", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ".", "float", "(", ")", "# (xyz)", "\n", "voxel_size", "=", "torch", ".", "tensor", "(", "voxel_size", ",", "device", "=", "voxel_centers", ".", "device", ")", ".", "float", "(", ")", "*", "downsample_times", "\n", "pc_range", "=", "torch", ".", "tensor", "(", "point_cloud_range", "[", "0", ":", "3", "]", ",", "device", "=", "voxel_centers", ".", "device", ")", ".", "float", "(", ")", "\n", "voxel_centers", "=", "(", "voxel_centers", "+", "0.5", ")", "*", "voxel_size", "+", "pc_range", "\n", "return", "voxel_centers", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.create_logger": [[85, 100], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "create_logger", "(", "log_file", "=", "None", ",", "rank", "=", "0", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "log_level", "if", "rank", "==", "0", "else", "'ERROR'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s  %(levelname)5s  %(message)s'", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "log_level", "if", "rank", "==", "0", "else", "'ERROR'", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console", ")", "\n", "if", "log_file", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", "=", "log_file", ")", "\n", "file_handler", ".", "setLevel", "(", "log_level", "if", "rank", "==", "0", "else", "'ERROR'", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "logger", ".", "propagate", "=", "False", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.set_random_seed": [[102, 108], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_pad_params": [[110, 126], ["None"], "function", ["None"], ["", "def", "get_pad_params", "(", "desired_size", ",", "cur_size", ")", ":", "\n", "    ", "\"\"\"\n    Get padding parameters for np.pad function\n    Args:\n        desired_size: int, Desired padded output size\n        cur_size: int, Current size. Should always be less than or equal to cur_size\n    Returns:\n        pad_params: tuple(int), Number of values padded to the edges (before, after)\n    \"\"\"", "\n", "assert", "desired_size", ">=", "cur_size", "\n", "\n", "# Calculate amount to pad", "\n", "diff", "=", "desired_size", "-", "cur_size", "\n", "pad_params", "=", "(", "0", ",", "diff", ")", "\n", "\n", "return", "pad_params", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.keep_arrays_by_name": [[128, 132], ["numpy.array", "enumerate"], "function", ["None"], ["", "def", "keep_arrays_by_name", "(", "gt_names", ",", "used_classes", ")", ":", "\n", "    ", "inds", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "gt_names", ")", "if", "x", "in", "used_classes", "]", "\n", "inds", "=", "np", ".", "array", "(", "inds", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.init_dist_slurm": [[134, 159], ["int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "subprocess.getoutput", "str", "str", "str", "torch.init_process_group", "torch.get_world_size", "torch.get_rank"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size", "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_rank"], ["", "def", "init_dist_slurm", "(", "tcp_port", ",", "local_rank", ",", "backend", "=", "'nccl'", ")", ":", "\n", "    ", "\"\"\"\n    modified from https://github.com/open-mmlab/mmdetection\n    Args:\n        tcp_port:\n        backend:\n\n    Returns:\n\n    \"\"\"", "\n", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "'SLURM_NODELIST'", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "proc_id", "%", "num_gpus", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "'scontrol show hostname {} | head -n1'", ".", "format", "(", "node_list", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "tcp_port", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "addr", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "proc_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ")", "\n", "\n", "total_gpus", "=", "dist", ".", "get_world_size", "(", ")", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "return", "total_gpus", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.init_dist_pytorch": [[161, 177], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.get_rank", "torch.get_start_method", "torch.set_start_method"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_rank"], ["", "def", "init_dist_pytorch", "(", "tcp_port", ",", "local_rank", ",", "backend", "=", "'nccl'", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "# os.environ['MASTER_PORT'] = str(tcp_port)", "\n", "# os.environ['MASTER_ADDR'] = 'localhost'", "\n", "", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", "%", "num_gpus", ")", "\n", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "backend", ",", "\n", "# init_method='tcp://127.0.0.1:%d' % tcp_port,", "\n", "# rank=local_rank,", "\n", "# world_size=num_gpus", "\n", ")", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "return", "num_gpus", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_dist_info": [[179, 199], ["torch.is_available", "torch.get_rank", "torch.get_world_size", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_rank", "home.repos.pwc.inspect_result.dschinagl_occam.utils.commu_utils.get_world_size"], ["", "def", "get_dist_info", "(", "return_gpu_per_machine", "=", "False", ")", ":", "\n", "    ", "if", "torch", ".", "__version__", "<", "'1.0'", ":", "\n", "        ", "initialized", "=", "dist", ".", "_initialized", "\n", "", "else", ":", "\n", "        ", "if", "dist", ".", "is_available", "(", ")", ":", "\n", "            ", "initialized", "=", "dist", ".", "is_initialized", "(", ")", "\n", "", "else", ":", "\n", "            ", "initialized", "=", "False", "\n", "", "", "if", "initialized", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "world_size", "=", "1", "\n", "\n", "", "if", "return_gpu_per_machine", ":", "\n", "        ", "gpu_per_machine", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "return", "rank", ",", "world_size", ",", "gpu_per_machine", "\n", "\n", "", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.merge_results_dist": [[201, 223], ["common_utils.get_dist_info", "os.makedirs", "torch.barrier", "pickle.dump", "torch.barrier", "range", "zip", "shutil.rmtree", "open", "os.path.join", "part_list.append", "ordered_results.extend", "os.path.join", "pickle.load", "list", "open"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_dist_info"], ["", "def", "merge_results_dist", "(", "result_part", ",", "size", ",", "tmpdir", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "os", ".", "makedirs", "(", "tmpdir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "dist", ".", "barrier", "(", ")", "\n", "pickle", ".", "dump", "(", "result_part", ",", "open", "(", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'result_part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ",", "'wb'", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "        ", "part_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'result_part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "pickle", ".", "load", "(", "open", "(", "part_file", ",", "'rb'", ")", ")", ")", "\n", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "        ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.scatter_point_inds": [[225, 232], ["indices.view", "torch.ones", "torch.ones", "torch.ones", "range"], "function", ["None"], ["", "def", "scatter_point_inds", "(", "indices", ",", "point_inds", ",", "shape", ")", ":", "\n", "    ", "ret", "=", "-", "1", "*", "torch", ".", "ones", "(", "*", "shape", ",", "dtype", "=", "point_inds", ".", "dtype", ",", "device", "=", "point_inds", ".", "device", ")", "\n", "ndim", "=", "indices", ".", "shape", "[", "-", "1", "]", "\n", "flattened_indices", "=", "indices", ".", "view", "(", "-", "1", ",", "ndim", ")", "\n", "slices", "=", "[", "flattened_indices", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "ndim", ")", "]", "\n", "ret", "[", "slices", "]", "=", "point_inds", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.generate_voxel2pinds": [[234, 243], ["sparse_tensor.indices.long", "torch.arange", "torch.arange", "torch.arange", "common_utils.scatter_point_inds", "list"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.scatter_point_inds"], ["", "def", "generate_voxel2pinds", "(", "sparse_tensor", ")", ":", "\n", "    ", "device", "=", "sparse_tensor", ".", "indices", ".", "device", "\n", "batch_size", "=", "sparse_tensor", ".", "batch_size", "\n", "spatial_shape", "=", "sparse_tensor", ".", "spatial_shape", "\n", "indices", "=", "sparse_tensor", ".", "indices", ".", "long", "(", ")", "\n", "point_indices", "=", "torch", ".", "arange", "(", "indices", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "output_shape", "=", "[", "batch_size", "]", "+", "list", "(", "spatial_shape", ")", "\n", "v2pinds_tensor", "=", "scatter_point_inds", "(", "indices", ",", "point_indices", ",", "output_shape", ")", "\n", "return", "v2pinds_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.sa_create": [[245, 250], ["SharedArray.create"], "function", ["None"], ["", "def", "sa_create", "(", "name", ",", "var", ")", ":", "\n", "    ", "x", "=", "SharedArray", ".", "create", "(", "name", ",", "var", ".", "shape", ",", "dtype", "=", "var", ".", "dtype", ")", "\n", "x", "[", "...", "]", "=", "var", "[", "...", "]", "\n", "x", ".", "flags", ".", "writeable", "=", "False", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.find_all_spconv_keys": [[11, 26], ["set", "model.named_children", "isinstance", "found_keys.update", "found_keys.add", "spconv_utils.find_all_spconv_keys"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.find_all_spconv_keys"], ["def", "find_all_spconv_keys", "(", "model", ":", "nn", ".", "Module", ",", "prefix", "=", "\"\"", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Finds all spconv keys that need to have weight's transposed\n    \"\"\"", "\n", "found_keys", ":", "Set", "[", "str", "]", "=", "set", "(", ")", "\n", "for", "name", ",", "child", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "new_prefix", "=", "f\"{prefix}.{name}\"", "if", "prefix", "!=", "\"\"", "else", "name", "\n", "\n", "if", "isinstance", "(", "child", ",", "spconv", ".", "conv", ".", "SparseConvolution", ")", ":", "\n", "            ", "new_prefix", "=", "f\"{new_prefix}.weight\"", "\n", "found_keys", ".", "add", "(", "new_prefix", ")", "\n", "\n", "", "found_keys", ".", "update", "(", "find_all_spconv_keys", "(", "child", ",", "prefix", "=", "new_prefix", ")", ")", "\n", "\n", "", "return", "found_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature": [[28, 35], ["out.__dir__", "out.replace_feature"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature"], ["", "def", "replace_feature", "(", "out", ",", "new_features", ")", ":", "\n", "    ", "if", "\"replace_feature\"", "in", "out", ".", "__dir__", "(", ")", ":", "\n", "# spconv 2.x behaviour", "\n", "        ", "return", "out", ".", "replace_feature", "(", "new_features", ")", "\n", "", "else", ":", "\n", "        ", "out", ".", "features", "=", "new_features", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.in_hull": [[11, 26], ["isinstance", "scipy.spatial.Delaunay", "scipy.spatial.Delaunay.find_simplex", "print", "numpy.zeros", "str"], "function", ["None"], ["def", "in_hull", "(", "p", ",", "hull", ")", ":", "\n", "    ", "\"\"\"\n    :param p: (N, K) test points\n    :param hull: (M, K) M corners of a box\n    :return (N) bool\n    \"\"\"", "\n", "try", ":", "\n", "        ", "if", "not", "isinstance", "(", "hull", ",", "Delaunay", ")", ":", "\n", "            ", "hull", "=", "Delaunay", "(", "hull", ")", "\n", "", "flag", "=", "hull", ".", "find_simplex", "(", "p", ")", ">=", "0", "\n", "", "except", "scipy", ".", "spatial", ".", "qhull", ".", "QhullError", ":", "\n", "        ", "print", "(", "'Warning: not a hull %s'", "%", "str", "(", "hull", ")", ")", "\n", "flag", "=", "np", ".", "zeros", "(", "p", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes_to_corners_3d": [[28, 54], ["common_utils.check_numpy_to_torch", "common_utils.rotate_points_along_z().view", "boxes3d.new_tensor", "boxes3d[].repeat", "common_utils.rotate_points_along_z().view.numpy", "common_utils.rotate_points_along_z", "common_utils.rotate_points_along_z().view.view"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "boxes_to_corners_3d", "(", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n        7 -------- 4\n       /|         /|\n      6 -------- 5 .\n      | |        | |\n      . 3 -------- 0\n      |/         |/\n      2 -------- 1\n    Args:\n        boxes3d:  (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n\n    Returns:\n    \"\"\"", "\n", "boxes3d", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes3d", ")", "\n", "\n", "template", "=", "boxes3d", ".", "new_tensor", "(", "(", "\n", "[", "1", ",", "1", ",", "-", "1", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ",", "\n", ")", ")", "/", "2", "\n", "\n", "corners3d", "=", "boxes3d", "[", ":", ",", "None", ",", "3", ":", "6", "]", ".", "repeat", "(", "1", ",", "8", ",", "1", ")", "*", "template", "[", "None", ",", ":", ",", ":", "]", "\n", "corners3d", "=", "common_utils", ".", "rotate_points_along_z", "(", "corners3d", ".", "view", "(", "-", "1", ",", "8", ",", "3", ")", ",", "boxes3d", "[", ":", ",", "6", "]", ")", ".", "view", "(", "-", "1", ",", "8", ",", "3", ")", "\n", "corners3d", "+=", "boxes3d", "[", ":", ",", "None", ",", "0", ":", "3", "]", "\n", "\n", "return", "corners3d", ".", "numpy", "(", ")", "if", "is_numpy", "else", "corners3d", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.mask_boxes_outside_range_numpy": [[56, 73], ["box_utils.boxes_to_corners_3d", "mask.sum"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes_to_corners_3d"], ["", "def", "mask_boxes_outside_range_numpy", "(", "boxes", ",", "limit_range", ",", "min_num_corners", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes: (N, 7) [x, y, z, dx, dy, dz, heading, ...], (x, y, z) is the box center\n        limit_range: [minx, miny, minz, maxx, maxy, maxz]\n        min_num_corners:\n\n    Returns:\n\n    \"\"\"", "\n", "if", "boxes", ".", "shape", "[", "1", "]", ">", "7", ":", "\n", "        ", "boxes", "=", "boxes", "[", ":", ",", "0", ":", "7", "]", "\n", "", "corners", "=", "boxes_to_corners_3d", "(", "boxes", ")", "# (N, 8, 3)", "\n", "mask", "=", "(", "(", "corners", ">=", "limit_range", "[", "0", ":", "3", "]", ")", "&", "(", "corners", "<=", "limit_range", "[", "3", ":", "6", "]", ")", ")", ".", "all", "(", "axis", "=", "2", ")", "\n", "mask", "=", "mask", ".", "sum", "(", "axis", "=", "1", ")", ">=", "min_num_corners", "# (N)", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.remove_points_in_boxes3d": [[75, 90], ["common_utils.check_numpy_to_torch", "common_utils.check_numpy_to_torch", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu", "points.numpy", "roiaware_pool3d_utils.points_in_boxes_cpu.sum"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["", "def", "remove_points_in_boxes3d", "(", "points", ",", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (num_points, 3 + C)\n        boxes3d: (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center, each box DO NOT overlaps\n\n    Returns:\n\n    \"\"\"", "\n", "boxes3d", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes3d", ")", "\n", "points", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "points", ")", "\n", "point_masks", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_cpu", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "boxes3d", ")", "\n", "points", "=", "points", "[", "point_masks", ".", "sum", "(", "dim", "=", "0", ")", "==", "0", "]", "\n", "\n", "return", "points", ".", "numpy", "(", ")", "if", "is_numpy", "else", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_kitti_camera_to_lidar": [[92, 109], ["copy.deepcopy", "calib.rect_to_lidar", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.rect_to_lidar"], ["", "def", "boxes3d_kitti_camera_to_lidar", "(", "boxes3d_camera", ",", "calib", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d_camera: (N, 7) [x, y, z, l, h, w, r] in rect camera coords\n        calib:\n\n    Returns:\n        boxes3d_lidar: [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n\n    \"\"\"", "\n", "boxes3d_camera_copy", "=", "copy", ".", "deepcopy", "(", "boxes3d_camera", ")", "\n", "xyz_camera", ",", "r", "=", "boxes3d_camera_copy", "[", ":", ",", "0", ":", "3", "]", ",", "boxes3d_camera_copy", "[", ":", ",", "6", ":", "7", "]", "\n", "l", ",", "h", ",", "w", "=", "boxes3d_camera_copy", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d_camera_copy", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d_camera_copy", "[", ":", ",", "5", ":", "6", "]", "\n", "\n", "xyz_lidar", "=", "calib", ".", "rect_to_lidar", "(", "xyz_camera", ")", "\n", "xyz_lidar", "[", ":", ",", "2", "]", "+=", "h", "[", ":", ",", "0", "]", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz_lidar", ",", "l", ",", "w", ",", "h", ",", "-", "(", "r", "+", "np", ".", "pi", "/", "2", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_kitti_fakelidar_to_lidar": [[111, 126], ["copy.deepcopy", "numpy.concatenate"], "function", ["None"], ["", "def", "boxes3d_kitti_fakelidar_to_lidar", "(", "boxes3d_lidar", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d_fakelidar: (N, 7) [x, y, z, w, l, h, r] in old LiDAR coordinates, z is bottom center\n\n    Returns:\n        boxes3d_lidar: [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n\n    \"\"\"", "\n", "boxes3d_lidar_copy", "=", "copy", ".", "deepcopy", "(", "boxes3d_lidar", ")", "\n", "w", ",", "l", ",", "h", "=", "boxes3d_lidar_copy", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d_lidar_copy", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d_lidar_copy", "[", ":", ",", "5", ":", "6", "]", "\n", "r", "=", "boxes3d_lidar_copy", "[", ":", ",", "6", ":", "7", "]", "\n", "\n", "boxes3d_lidar_copy", "[", ":", ",", "2", "]", "+=", "h", "[", ":", ",", "0", "]", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "boxes3d_lidar_copy", "[", ":", ",", "0", ":", "3", "]", ",", "l", ",", "w", ",", "h", ",", "-", "(", "r", "+", "np", ".", "pi", "/", "2", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_kitti_lidar_to_fakelidar": [[128, 143], ["copy.deepcopy", "numpy.concatenate"], "function", ["None"], ["", "def", "boxes3d_kitti_lidar_to_fakelidar", "(", "boxes3d_lidar", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d_lidar: (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n\n    Returns:\n        boxes3d_fakelidar: [x, y, z, w, l, h, r] in old LiDAR coordinates, z is bottom center\n\n    \"\"\"", "\n", "boxes3d_lidar_copy", "=", "copy", ".", "deepcopy", "(", "boxes3d_lidar", ")", "\n", "dx", ",", "dy", ",", "dz", "=", "boxes3d_lidar_copy", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d_lidar_copy", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d_lidar_copy", "[", ":", ",", "5", ":", "6", "]", "\n", "heading", "=", "boxes3d_lidar_copy", "[", ":", ",", "6", ":", "7", "]", "\n", "\n", "boxes3d_lidar_copy", "[", ":", ",", "2", "]", "-=", "dz", "[", ":", ",", "0", "]", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "boxes3d_lidar_copy", "[", ":", ",", "0", ":", "3", "]", ",", "dy", ",", "dx", ",", "dz", ",", "-", "heading", "-", "np", ".", "pi", "/", "2", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.enlarge_box3d": [[145, 159], ["common_utils.check_numpy_to_torch", "boxes3d.clone", "boxes3d.new_tensor"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch"], ["", "def", "enlarge_box3d", "(", "boxes3d", ",", "extra_width", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d: [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n        extra_width: [extra_x, extra_y, extra_z]\n\n    Returns:\n\n    \"\"\"", "\n", "boxes3d", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes3d", ")", "\n", "large_boxes3d", "=", "boxes3d", ".", "clone", "(", ")", "\n", "\n", "large_boxes3d", "[", ":", ",", "3", ":", "6", "]", "+=", "boxes3d", ".", "new_tensor", "(", "extra_width", ")", "[", "None", ",", ":", "]", "\n", "return", "large_boxes3d", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_lidar_to_kitti_camera": [[161, 178], ["copy.deepcopy", "calib.lidar_to_rect", "numpy.concatenate", "h.reshape"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.lidar_to_rect"], ["", "def", "boxes3d_lidar_to_kitti_camera", "(", "boxes3d_lidar", ",", "calib", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d_lidar: (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n    :param calib:\n    :return:\n        boxes3d_camera: (N, 7) [x, y, z, l, h, w, r] in rect camera coords\n    \"\"\"", "\n", "boxes3d_lidar_copy", "=", "copy", ".", "deepcopy", "(", "boxes3d_lidar", ")", "\n", "xyz_lidar", "=", "boxes3d_lidar_copy", "[", ":", ",", "0", ":", "3", "]", "\n", "l", ",", "w", ",", "h", "=", "boxes3d_lidar_copy", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d_lidar_copy", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d_lidar_copy", "[", ":", ",", "5", ":", "6", "]", "\n", "r", "=", "boxes3d_lidar_copy", "[", ":", ",", "6", ":", "7", "]", "\n", "\n", "xyz_lidar", "[", ":", ",", "2", "]", "-=", "h", ".", "reshape", "(", "-", "1", ")", "/", "2", "\n", "xyz_cam", "=", "calib", ".", "lidar_to_rect", "(", "xyz_lidar", ")", "\n", "# xyz_cam[:, 1] += h.reshape(-1) / 2", "\n", "r", "=", "-", "r", "-", "np", ".", "pi", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz_cam", ",", "l", ",", "h", ",", "w", ",", "r", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_to_corners3d_kitti_camera": [[180, 224], ["numpy.array", "numpy.transpose", "numpy.concatenate", "numpy.matmul", "numpy.concatenate", "np.concatenate.astype", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.ones", "x_loc.reshape", "x_corners.reshape", "y_loc.reshape", "np.zeros.reshape", "z_loc.reshape", "z_corners.reshape", "h.reshape().repeat", "numpy.array", "x_corners.reshape", "np.zeros.reshape", "z_corners.reshape", "x.reshape", "y.reshape", "z.reshape", "numpy.cos", "numpy.sin", "numpy.cos", "h.reshape", "numpy.sin"], "function", ["None"], ["", "def", "boxes3d_to_corners3d_kitti_camera", "(", "boxes3d", ",", "bottom_center", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, l, h, w, ry] in camera coords, see the definition of ry in KITTI dataset\n    :param bottom_center: whether y is on the bottom center of object\n    :return: corners3d: (N, 8, 3)\n        7 -------- 4\n       /|         /|\n      6 -------- 5 .\n      | |        | |\n      . 3 -------- 0\n      |/         |/\n      2 -------- 1\n    \"\"\"", "\n", "boxes_num", "=", "boxes3d", ".", "shape", "[", "0", "]", "\n", "l", ",", "h", ",", "w", "=", "boxes3d", "[", ":", ",", "3", "]", ",", "boxes3d", "[", ":", ",", "4", "]", ",", "boxes3d", "[", ":", ",", "5", "]", "\n", "x_corners", "=", "np", ".", "array", "(", "[", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "z_corners", "=", "np", ".", "array", "(", "[", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", ",", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "if", "bottom_center", ":", "\n", "        ", "y_corners", "=", "np", ".", "zeros", "(", "(", "boxes_num", ",", "8", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_corners", "[", ":", ",", "4", ":", "8", "]", "=", "-", "h", ".", "reshape", "(", "boxes_num", ",", "1", ")", ".", "repeat", "(", "4", ",", "axis", "=", "1", ")", "# (N, 8)", "\n", "", "else", ":", "\n", "        ", "y_corners", "=", "np", ".", "array", "(", "[", "h", "/", "2.", ",", "h", "/", "2.", ",", "h", "/", "2.", ",", "h", "/", "2.", ",", "-", "h", "/", "2.", ",", "-", "h", "/", "2.", ",", "-", "h", "/", "2.", ",", "-", "h", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "\n", "", "ry", "=", "boxes3d", "[", ":", ",", "6", "]", "\n", "zeros", ",", "ones", "=", "np", ".", "zeros", "(", "ry", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "ones", "(", "ry", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rot_list", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "ry", ")", ",", "zeros", ",", "-", "np", ".", "sin", "(", "ry", ")", "]", ",", "\n", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "\n", "[", "np", ".", "sin", "(", "ry", ")", ",", "zeros", ",", "np", ".", "cos", "(", "ry", ")", "]", "]", ")", "# (3, 3, N)", "\n", "R_list", "=", "np", ".", "transpose", "(", "rot_list", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# (N, 3, 3)", "\n", "\n", "temp_corners", "=", "np", ".", "concatenate", "(", "(", "x_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "\n", "z_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "# (N, 8, 3)", "\n", "rotated_corners", "=", "np", ".", "matmul", "(", "temp_corners", ",", "R_list", ")", "# (N, 8, 3)", "\n", "x_corners", ",", "y_corners", ",", "z_corners", "=", "rotated_corners", "[", ":", ",", ":", ",", "0", "]", ",", "rotated_corners", "[", ":", ",", ":", ",", "1", "]", ",", "rotated_corners", "[", ":", ",", ":", ",", "2", "]", "\n", "\n", "x_loc", ",", "y_loc", ",", "z_loc", "=", "boxes3d", "[", ":", ",", "0", "]", ",", "boxes3d", "[", ":", ",", "1", "]", ",", "boxes3d", "[", ":", ",", "2", "]", "\n", "\n", "x", "=", "x_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "x_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "y", "=", "y_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "y_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "z", "=", "z_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "z_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "\n", "corners", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "z", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "corners", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_kitti_camera_to_imageboxes": [[226, 247], ["box_utils.boxes3d_to_corners3d_kitti_camera", "calib.rect_to_img", "pts_img.reshape", "numpy.min", "numpy.max", "numpy.concatenate", "boxes3d_to_corners3d_kitti_camera.reshape", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_to_corners3d_kitti_camera", "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.rect_to_img"], ["", "def", "boxes3d_kitti_camera_to_imageboxes", "(", "boxes3d", ",", "calib", ",", "image_shape", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, l, h, w, r] in rect camera coords\n    :param calib:\n    :return:\n        box_2d_preds: (N, 4) [x1, y1, x2, y2]\n    \"\"\"", "\n", "corners3d", "=", "boxes3d_to_corners3d_kitti_camera", "(", "boxes3d", ")", "\n", "pts_img", ",", "_", "=", "calib", ".", "rect_to_img", "(", "corners3d", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", "\n", "corners_in_image", "=", "pts_img", ".", "reshape", "(", "-", "1", ",", "8", ",", "2", ")", "\n", "\n", "min_uv", "=", "np", ".", "min", "(", "corners_in_image", ",", "axis", "=", "1", ")", "# (N, 2)", "\n", "max_uv", "=", "np", ".", "max", "(", "corners_in_image", ",", "axis", "=", "1", ")", "# (N, 2)", "\n", "boxes2d_image", "=", "np", ".", "concatenate", "(", "[", "min_uv", ",", "max_uv", "]", ",", "axis", "=", "1", ")", "\n", "if", "image_shape", "is", "not", "None", ":", "\n", "        ", "boxes2d_image", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "boxes2d_image", "[", ":", ",", "0", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_shape", "[", "1", "]", "-", "1", ")", "\n", "boxes2d_image", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "boxes2d_image", "[", ":", ",", "1", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_shape", "[", "0", "]", "-", "1", ")", "\n", "boxes2d_image", "[", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "boxes2d_image", "[", ":", ",", "2", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_shape", "[", "1", "]", "-", "1", ")", "\n", "boxes2d_image", "[", ":", ",", "3", "]", "=", "np", ".", "clip", "(", "boxes2d_image", "[", ":", ",", "3", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "", "return", "boxes2d_image", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes_iou_normal": [[249, 270], ["torch.max", "torch.min", "torch.max", "torch.min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min"], "function", ["None"], ["", "def", "boxes_iou_normal", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 4) [x1, y1, x2, y2]\n        boxes_b: (M, 4) [x1, y1, x2, y2]\n\n    Returns:\n\n    \"\"\"", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "boxes_b", ".", "shape", "[", "1", "]", "==", "4", "\n", "x_min", "=", "torch", ".", "max", "(", "boxes_a", "[", ":", ",", "0", ",", "None", "]", ",", "boxes_b", "[", "None", ",", ":", ",", "0", "]", ")", "\n", "x_max", "=", "torch", ".", "min", "(", "boxes_a", "[", ":", ",", "2", ",", "None", "]", ",", "boxes_b", "[", "None", ",", ":", ",", "2", "]", ")", "\n", "y_min", "=", "torch", ".", "max", "(", "boxes_a", "[", ":", ",", "1", ",", "None", "]", ",", "boxes_b", "[", "None", ",", ":", ",", "1", "]", ")", "\n", "y_max", "=", "torch", ".", "min", "(", "boxes_a", "[", ":", ",", "3", ",", "None", "]", ",", "boxes_b", "[", "None", ",", ":", ",", "3", "]", ")", "\n", "x_len", "=", "torch", ".", "clamp_min", "(", "x_max", "-", "x_min", ",", "min", "=", "0", ")", "\n", "y_len", "=", "torch", ".", "clamp_min", "(", "y_max", "-", "y_min", ",", "min", "=", "0", ")", "\n", "area_a", "=", "(", "boxes_a", "[", ":", ",", "2", "]", "-", "boxes_a", "[", ":", ",", "0", "]", ")", "*", "(", "boxes_a", "[", ":", ",", "3", "]", "-", "boxes_a", "[", ":", ",", "1", "]", ")", "\n", "area_b", "=", "(", "boxes_b", "[", ":", ",", "2", "]", "-", "boxes_b", "[", ":", ",", "0", "]", ")", "*", "(", "boxes_b", "[", ":", ",", "3", "]", "-", "boxes_b", "[", ":", ",", "1", "]", ")", "\n", "a_intersect_b", "=", "x_len", "*", "y_len", "\n", "iou", "=", "a_intersect_b", "/", "torch", ".", "clamp_min", "(", "area_a", "[", ":", ",", "None", "]", "+", "area_b", "[", "None", ",", ":", "]", "-", "a_intersect_b", ",", "min", "=", "1e-6", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_lidar_to_aligned_bev_boxes": [[272, 284], ["common_utils.limit_period().abs", "torch.where", "torch.cat", "common_utils.limit_period"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.limit_period"], ["", "def", "boxes3d_lidar_to_aligned_bev_boxes", "(", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d: (N, 7 + C) [x, y, z, dx, dy, dz, heading] in lidar coordinate\n\n    Returns:\n        aligned_bev_boxes: (N, 4) [x1, y1, x2, y2] in the above lidar coordinate\n    \"\"\"", "\n", "rot_angle", "=", "common_utils", ".", "limit_period", "(", "boxes3d", "[", ":", ",", "6", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", ")", ".", "abs", "(", ")", "\n", "choose_dims", "=", "torch", ".", "where", "(", "rot_angle", "[", ":", ",", "None", "]", "<", "np", ".", "pi", "/", "4", ",", "boxes3d", "[", ":", ",", "[", "3", ",", "4", "]", "]", ",", "boxes3d", "[", ":", ",", "[", "4", ",", "3", "]", "]", ")", "\n", "aligned_bev_boxes", "=", "torch", ".", "cat", "(", "(", "boxes3d", "[", ":", ",", "0", ":", "2", "]", "-", "choose_dims", "/", "2", ",", "boxes3d", "[", ":", ",", "0", ":", "2", "]", "+", "choose_dims", "/", "2", ")", ",", "dim", "=", "1", ")", "\n", "return", "aligned_bev_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_nearest_bev_iou": [[286, 299], ["box_utils.boxes3d_lidar_to_aligned_bev_boxes", "box_utils.boxes3d_lidar_to_aligned_bev_boxes", "box_utils.boxes_iou_normal"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_lidar_to_aligned_bev_boxes", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_lidar_to_aligned_bev_boxes", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes_iou_normal"], ["", "def", "boxes3d_nearest_bev_iou", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (N, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n\n    \"\"\"", "\n", "boxes_bev_a", "=", "boxes3d_lidar_to_aligned_bev_boxes", "(", "boxes_a", ")", "\n", "boxes_bev_b", "=", "boxes3d_lidar_to_aligned_bev_boxes", "(", "boxes_b", ")", "\n", "\n", "return", "boxes_iou_normal", "(", "boxes_bev_a", ",", "boxes_bev_b", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.__init__": [[24, 41], ["isinstance", "calibration_kitti.get_calib_from_file"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.get_calib_from_file"], ["    ", "def", "__init__", "(", "self", ",", "calib_file", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "calib_file", ",", "dict", ")", ":", "\n", "            ", "calib", "=", "get_calib_from_file", "(", "calib_file", ")", "\n", "", "else", ":", "\n", "            ", "calib", "=", "calib_file", "\n", "\n", "", "self", ".", "P2", "=", "calib", "[", "'P2'", "]", "# 3 x 4", "\n", "self", ".", "R0", "=", "calib", "[", "'R0'", "]", "# 3 x 3", "\n", "self", ".", "V2C", "=", "calib", "[", "'Tr_velo2cam'", "]", "# 3 x 4", "\n", "\n", "# Camera intrinsics and extrinsics", "\n", "self", ".", "cu", "=", "self", ".", "P2", "[", "0", ",", "2", "]", "\n", "self", ".", "cv", "=", "self", ".", "P2", "[", "1", ",", "2", "]", "\n", "self", ".", "fu", "=", "self", ".", "P2", "[", "0", ",", "0", "]", "\n", "self", ".", "fv", "=", "self", ".", "P2", "[", "1", ",", "1", "]", "\n", "self", ".", "tx", "=", "self", ".", "P2", "[", "0", ",", "3", "]", "/", "(", "-", "self", ".", "fu", ")", "\n", "self", ".", "ty", "=", "self", ".", "P2", "[", "1", ",", "3", "]", "/", "(", "-", "self", ".", "fv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.cart_to_hom": [[42, 49], ["numpy.hstack", "numpy.ones"], "methods", ["None"], ["", "def", "cart_to_hom", "(", "self", ",", "pts", ")", ":", "\n", "        ", "\"\"\"\n        :param pts: (N, 3 or 2)\n        :return pts_hom: (N, 4 or 3)\n        \"\"\"", "\n", "pts_hom", "=", "np", ".", "hstack", "(", "(", "pts", ",", "np", ".", "ones", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "return", "pts_hom", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.rect_to_lidar": [[50, 64], ["calibration_kitti.Calibration.cart_to_hom", "numpy.hstack", "numpy.vstack", "numpy.vstack", "numpy.dot", "numpy.linalg.inv", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.cart_to_hom"], ["", "def", "rect_to_lidar", "(", "self", ",", "pts_rect", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_lidar: (N, 3)\n        :return pts_rect: (N, 3)\n        \"\"\"", "\n", "pts_rect_hom", "=", "self", ".", "cart_to_hom", "(", "pts_rect", ")", "# (N, 4)", "\n", "R0_ext", "=", "np", ".", "hstack", "(", "(", "self", ".", "R0", ",", "np", ".", "zeros", "(", "(", "3", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "# (3, 4)", "\n", "R0_ext", "=", "np", ".", "vstack", "(", "(", "R0_ext", ",", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "# (4, 4)", "\n", "R0_ext", "[", "3", ",", "3", "]", "=", "1", "\n", "V2C_ext", "=", "np", ".", "vstack", "(", "(", "self", ".", "V2C", ",", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "# (4, 4)", "\n", "V2C_ext", "[", "3", ",", "3", "]", "=", "1", "\n", "\n", "pts_lidar", "=", "np", ".", "dot", "(", "pts_rect_hom", ",", "np", ".", "linalg", ".", "inv", "(", "np", ".", "dot", "(", "R0_ext", ",", "V2C_ext", ")", ".", "T", ")", ")", "\n", "return", "pts_lidar", "[", ":", ",", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.lidar_to_rect": [[65, 74], ["calibration_kitti.Calibration.cart_to_hom", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.cart_to_hom"], ["", "def", "lidar_to_rect", "(", "self", ",", "pts_lidar", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_lidar: (N, 3)\n        :return pts_rect: (N, 3)\n        \"\"\"", "\n", "pts_lidar_hom", "=", "self", ".", "cart_to_hom", "(", "pts_lidar", ")", "\n", "pts_rect", "=", "np", ".", "dot", "(", "pts_lidar_hom", ",", "np", ".", "dot", "(", "self", ".", "V2C", ".", "T", ",", "self", ".", "R0", ".", "T", ")", ")", "\n", "# pts_rect = reduce(np.dot, (pts_lidar_hom, self.V2C.T, self.R0.T))", "\n", "return", "pts_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.rect_to_img": [[75, 85], ["calibration_kitti.Calibration.cart_to_hom", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.cart_to_hom"], ["", "def", "rect_to_img", "(", "self", ",", "pts_rect", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_rect: (N, 3)\n        :return pts_img: (N, 2)\n        \"\"\"", "\n", "pts_rect_hom", "=", "self", ".", "cart_to_hom", "(", "pts_rect", ")", "\n", "pts_2d_hom", "=", "np", ".", "dot", "(", "pts_rect_hom", ",", "self", ".", "P2", ".", "T", ")", "\n", "pts_img", "=", "(", "pts_2d_hom", "[", ":", ",", "0", ":", "2", "]", ".", "T", "/", "pts_rect_hom", "[", ":", ",", "2", "]", ")", ".", "T", "# (N, 2)", "\n", "pts_rect_depth", "=", "pts_2d_hom", "[", ":", ",", "2", "]", "-", "self", ".", "P2", ".", "T", "[", "3", ",", "2", "]", "# depth in rect camera coord", "\n", "return", "pts_img", ",", "pts_rect_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.lidar_to_img": [[86, 94], ["calibration_kitti.Calibration.lidar_to_rect", "calibration_kitti.Calibration.rect_to_img"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.rect_to_img"], ["", "def", "lidar_to_img", "(", "self", ",", "pts_lidar", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_lidar: (N, 3)\n        :return pts_img: (N, 2)\n        \"\"\"", "\n", "pts_rect", "=", "self", ".", "lidar_to_rect", "(", "pts_lidar", ")", "\n", "pts_img", ",", "pts_depth", "=", "self", ".", "rect_to_img", "(", "pts_rect", ")", "\n", "return", "pts_img", ",", "pts_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.img_to_rect": [[95, 106], ["numpy.concatenate", "x.reshape", "y.reshape", "depth_rect.reshape"], "methods", ["None"], ["", "def", "img_to_rect", "(", "self", ",", "u", ",", "v", ",", "depth_rect", ")", ":", "\n", "        ", "\"\"\"\n        :param u: (N)\n        :param v: (N)\n        :param depth_rect: (N)\n        :return:\n        \"\"\"", "\n", "x", "=", "(", "(", "u", "-", "self", ".", "cu", ")", "*", "depth_rect", ")", "/", "self", ".", "fu", "+", "self", ".", "tx", "\n", "y", "=", "(", "(", "v", "-", "self", ".", "cv", ")", "*", "depth_rect", ")", "/", "self", ".", "fv", "+", "self", ".", "ty", "\n", "pts_rect", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "depth_rect", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "return", "pts_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.corners3d_to_img_boxes": [[107, 126], ["numpy.concatenate", "numpy.matmul", "numpy.concatenate", "numpy.concatenate", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.ones", "x1.reshape", "y1.reshape", "x2.reshape", "y2.reshape", "x.reshape", "y.reshape"], "methods", ["None"], ["", "def", "corners3d_to_img_boxes", "(", "self", ",", "corners3d", ")", ":", "\n", "        ", "\"\"\"\n        :param corners3d: (N, 8, 3) corners in rect coordinate\n        :return: boxes: (None, 4) [x1, y1, x2, y2] in rgb coordinate\n        :return: boxes_corner: (None, 8) [xi, yi] in rgb coordinate\n        \"\"\"", "\n", "sample_num", "=", "corners3d", ".", "shape", "[", "0", "]", "\n", "corners3d_hom", "=", "np", ".", "concatenate", "(", "(", "corners3d", ",", "np", ".", "ones", "(", "(", "sample_num", ",", "8", ",", "1", ")", ")", ")", ",", "axis", "=", "2", ")", "# (N, 8, 4)", "\n", "\n", "img_pts", "=", "np", ".", "matmul", "(", "corners3d_hom", ",", "self", ".", "P2", ".", "T", ")", "# (N, 8, 3)", "\n", "\n", "x", ",", "y", "=", "img_pts", "[", ":", ",", ":", ",", "0", "]", "/", "img_pts", "[", ":", ",", ":", ",", "2", "]", ",", "img_pts", "[", ":", ",", ":", ",", "1", "]", "/", "img_pts", "[", ":", ",", ":", ",", "2", "]", "\n", "x1", ",", "y1", "=", "np", ".", "min", "(", "x", ",", "axis", "=", "1", ")", ",", "np", ".", "min", "(", "y", ",", "axis", "=", "1", ")", "\n", "x2", ",", "y2", "=", "np", ".", "max", "(", "x", ",", "axis", "=", "1", ")", ",", "np", ".", "max", "(", "y", ",", "axis", "=", "1", ")", "\n", "\n", "boxes", "=", "np", ".", "concatenate", "(", "(", "x1", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y1", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "x2", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y2", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "boxes_corner", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "boxes", ",", "boxes_corner", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.get_calib_from_file": [[4, 21], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "open", "f.readlines", "lines[].strip().split", "lines[].strip().split", "lines[].strip().split", "lines[].strip().split", "np.array.reshape", "np.array.reshape", "np.array.reshape", "np.array.reshape", "lines[].strip", "lines[].strip", "lines[].strip", "lines[].strip"], "function", ["None"], ["def", "get_calib_from_file", "(", "calib_file", ")", ":", "\n", "    ", "with", "open", "(", "calib_file", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "obj", "=", "lines", "[", "2", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "P2", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj", "=", "lines", "[", "3", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "P3", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj", "=", "lines", "[", "4", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "R0", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj", "=", "lines", "[", "5", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "Tr_velo_to_cam", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "{", "'P2'", ":", "P2", ".", "reshape", "(", "3", ",", "4", ")", ",", "\n", "'P3'", ":", "P3", ".", "reshape", "(", "3", ",", "4", ")", ",", "\n", "'R0'", ":", "R0", ".", "reshape", "(", "3", ",", "3", ")", ",", "\n", "'Tr_velo2cam'", ":", "Tr_velo_to_cam", ".", "reshape", "(", "3", ",", "4", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.transform_utils.project_to_image": [[14, 36], ["convert_points_to_homogeneous", "points.unsqueeze.unsqueeze", "project.unsqueeze.unsqueeze", "points_t.squeeze.squeeze", "convert_points_from_homogeneous"], "function", ["None"], ["", "def", "project_to_image", "(", "project", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Project points to image\n    Args:\n        project [torch.tensor(..., 3, 4)]: Projection matrix\n        points [torch.Tensor(..., 3)]: 3D points\n    Returns:\n        points_img [torch.Tensor(..., 2)]: Points in image\n        points_depth [torch.Tensor(...)]: Depth of each point\n    \"\"\"", "\n", "# Reshape tensors to expected shape", "\n", "points", "=", "convert_points_to_homogeneous", "(", "points", ")", "\n", "points", "=", "points", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "project", "=", "project", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "# Transform points to image and get depths", "\n", "points_t", "=", "project", "@", "points", "\n", "points_t", "=", "points_t", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "points_img", "=", "convert_points_from_homogeneous", "(", "points_t", ")", "\n", "points_depth", "=", "points_t", "[", "...", ",", "-", "1", "]", "-", "project", "[", "...", ",", "2", ",", "3", "]", "\n", "\n", "return", "points_img", ",", "points_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.transform_utils.normalize_coords": [[38, 54], ["torch.flip"], "function", ["None"], ["", "def", "normalize_coords", "(", "coords", ",", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Normalize coordinates of a grid between [-1, 1]\n    Args:\n        coords: (..., 3), Coordinates in grid\n        shape: (3), Grid shape\n    Returns:\n        norm_coords: (.., 3), Normalized coordinates in grid\n    \"\"\"", "\n", "min_n", "=", "-", "1", "\n", "max_n", "=", "1", "\n", "shape", "=", "torch", ".", "flip", "(", "shape", ",", "dims", "=", "[", "0", "]", ")", "# Reverse ordering of shape", "\n", "\n", "# Subtract 1 since pixel indexing from [0, shape - 1]", "\n", "norm_coords", "=", "coords", "/", "(", "shape", "-", "1", ")", "*", "(", "max_n", "-", "min_n", ")", "+", "min_n", "\n", "return", "norm_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.transform_utils.bin_depths": [[56, 92], ["indices.type.type", "torch.isfinite", "torch.sqrt", "math.log", "math.log", "torch.log", "math.log"], "function", ["None"], ["", "def", "bin_depths", "(", "depth_map", ",", "mode", ",", "depth_min", ",", "depth_max", ",", "num_bins", ",", "target", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Converts depth map into bin indices\n    Args:\n        depth_map: (H, W), Depth Map\n        mode: string, Discretiziation mode (See https://arxiv.org/pdf/2005.13423.pdf for more details)\n            UD: Uniform discretiziation\n            LID: Linear increasing discretiziation\n            SID: Spacing increasing discretiziation\n        depth_min: float, Minimum depth value\n        depth_max: float, Maximum depth value\n        num_bins: int, Number of depth bins\n        target: bool, Whether the depth bins indices will be used for a target tensor in loss comparison\n    Returns:\n        indices: (H, W), Depth bin indices\n    \"\"\"", "\n", "if", "mode", "==", "\"UD\"", ":", "\n", "        ", "bin_size", "=", "(", "depth_max", "-", "depth_min", ")", "/", "num_bins", "\n", "indices", "=", "(", "(", "depth_map", "-", "depth_min", ")", "/", "bin_size", ")", "\n", "", "elif", "mode", "==", "\"LID\"", ":", "\n", "        ", "bin_size", "=", "2", "*", "(", "depth_max", "-", "depth_min", ")", "/", "(", "num_bins", "*", "(", "1", "+", "num_bins", ")", ")", "\n", "indices", "=", "-", "0.5", "+", "0.5", "*", "torch", ".", "sqrt", "(", "1", "+", "8", "*", "(", "depth_map", "-", "depth_min", ")", "/", "bin_size", ")", "\n", "", "elif", "mode", "==", "\"SID\"", ":", "\n", "        ", "indices", "=", "num_bins", "*", "(", "torch", ".", "log", "(", "1", "+", "depth_map", ")", "-", "math", ".", "log", "(", "1", "+", "depth_min", ")", ")", "/", "(", "math", ".", "log", "(", "1", "+", "depth_max", ")", "-", "math", ".", "log", "(", "1", "+", "depth_min", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "target", ":", "\n", "# Remove indicies outside of bounds", "\n", "        ", "mask", "=", "(", "indices", "<", "0", ")", "|", "(", "indices", ">", "num_bins", ")", "|", "(", "~", "torch", ".", "isfinite", "(", "indices", ")", ")", "\n", "indices", "[", "mask", "]", "=", "num_bins", "\n", "\n", "# Convert to integer", "\n", "indices", "=", "indices", ".", "type", "(", "torch", ".", "int64", ")", "\n", "", "return", "indices", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.SigmoidFocalClassificationLoss.__init__": [[14, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "gamma", ":", "float", "=", "2.0", ",", "alpha", ":", "float", "=", "0.25", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gamma: Weighting parameter to balance loss for hard and easy examples.\n            alpha: Weighting parameter to balance loss for positive and negative examples.\n        \"\"\"", "\n", "super", "(", "SigmoidFocalClassificationLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.SigmoidFocalClassificationLoss.sigmoid_cross_entropy_with_logits": [[24, 43], ["torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sigmoid_cross_entropy_with_logits", "(", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\" PyTorch Implementation for tf.nn.sigmoid_cross_entropy_with_logits:\n            max(x, 0) - x * z + log(1 + exp(-abs(x))) in\n            https://www.tensorflow.org/api_docs/python/tf/nn/sigmoid_cross_entropy_with_logits\n\n        Args:\n            input: (B, #anchors, #classes) float tensor.\n                Predicted logits for each class\n            target: (B, #anchors, #classes) float tensor.\n                One-hot encoded classification targets\n\n        Returns:\n            loss: (B, #anchors, #classes) float tensor.\n                Sigmoid cross entropy loss without reduction\n        \"\"\"", "\n", "loss", "=", "torch", ".", "clamp", "(", "input", ",", "min", "=", "0", ")", "-", "input", "*", "target", "+", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "input", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.SigmoidFocalClassificationLoss.forward": [[44, 73], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss_utils.SigmoidFocalClassificationLoss.sigmoid_cross_entropy_with_logits", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "weights.unsqueeze.unsqueeze.unsqueeze", "weights.unsqueeze.unsqueeze.shape.__len__", "loss.shape.__len__", "weights.unsqueeze.unsqueeze.shape.__len__", "weights.unsqueeze.unsqueeze.shape.__len__", "target.shape.__len__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.SigmoidFocalClassificationLoss.sigmoid_cross_entropy_with_logits", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (B, #anchors, #classes) float tensor.\n                Predicted logits for each class\n            target: (B, #anchors, #classes) float tensor.\n                One-hot encoded classification targets\n            weights: (B, #anchors) float tensor.\n                Anchor-wise weights.\n\n        Returns:\n            weighted_loss: (B, #anchors, #classes) float tensor after weighting.\n        \"\"\"", "\n", "pred_sigmoid", "=", "torch", ".", "sigmoid", "(", "input", ")", "\n", "alpha_weight", "=", "target", "*", "self", ".", "alpha", "+", "(", "1", "-", "target", ")", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "pt", "=", "target", "*", "(", "1.0", "-", "pred_sigmoid", ")", "+", "(", "1.0", "-", "target", ")", "*", "pred_sigmoid", "\n", "focal_weight", "=", "alpha_weight", "*", "torch", ".", "pow", "(", "pt", ",", "self", ".", "gamma", ")", "\n", "\n", "bce_loss", "=", "self", ".", "sigmoid_cross_entropy_with_logits", "(", "input", ",", "target", ")", "\n", "\n", "loss", "=", "focal_weight", "*", "bce_loss", "\n", "\n", "if", "weights", ".", "shape", ".", "__len__", "(", ")", "==", "2", "or", "(", "weights", ".", "shape", ".", "__len__", "(", ")", "==", "1", "and", "target", ".", "shape", ".", "__len__", "(", ")", "==", "2", ")", ":", "\n", "            ", "weights", "=", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "assert", "weights", ".", "shape", ".", "__len__", "(", ")", "==", "loss", ".", "shape", ".", "__len__", "(", ")", "\n", "\n", "return", "loss", "*", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedSmoothL1Loss.__init__": [[84, 98], ["torch.Module.__init__", "numpy.array", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "beta", ":", "float", "=", "1.0", "/", "9.0", ",", "code_weights", ":", "list", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            beta: Scalar float.\n                L1 to L2 change point.\n                For beta values < 1e-5, L1 loss is computed.\n            code_weights: (#codes) float list if not None.\n                Code-wise weights.\n        \"\"\"", "\n", "super", "(", "WeightedSmoothL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "if", "code_weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "code_weights", "=", "np", ".", "array", "(", "code_weights", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "code_weights", "=", "torch", ".", "from_numpy", "(", "self", ".", "code_weights", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedSmoothL1Loss.smooth_l1_loss": [[99, 108], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "smooth_l1_loss", "(", "diff", ",", "beta", ")", ":", "\n", "        ", "if", "beta", "<", "1e-5", ":", "\n", "            ", "loss", "=", "torch", ".", "abs", "(", "diff", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "torch", ".", "abs", "(", "diff", ")", "\n", "loss", "=", "torch", ".", "where", "(", "n", "<", "beta", ",", "0.5", "*", "n", "**", "2", "/", "beta", ",", "n", "-", "0.5", "*", "beta", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedSmoothL1Loss.forward": [[109, 137], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "loss_utils.WeightedSmoothL1Loss.smooth_l1_loss", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "loss_utils.WeightedSmoothL1Loss.code_weights.view", "weights.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedSmoothL1Loss.smooth_l1_loss"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (B, #anchors, #codes) float tensor.\n                Ecoded predicted locations of objects.\n            target: (B, #anchors, #codes) float tensor.\n                Regression targets.\n            weights: (B, #anchors) float tensor if not None.\n\n        Returns:\n            loss: (B, #anchors) float tensor.\n                Weighted smooth l1 loss without reduction.\n        \"\"\"", "\n", "target", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "target", ")", ",", "input", ",", "target", ")", "# ignore nan targets", "\n", "\n", "diff", "=", "input", "-", "target", "\n", "# code-wise weighting", "\n", "if", "self", ".", "code_weights", "is", "not", "None", ":", "\n", "            ", "diff", "=", "diff", "*", "self", ".", "code_weights", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "", "loss", "=", "self", ".", "smooth_l1_loss", "(", "diff", ",", "self", ".", "beta", ")", "\n", "\n", "# anchor-wise weighting", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "assert", "weights", ".", "shape", "[", "0", "]", "==", "loss", ".", "shape", "[", "0", "]", "and", "weights", ".", "shape", "[", "1", "]", "==", "loss", ".", "shape", "[", "1", "]", "\n", "loss", "=", "loss", "*", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedL1Loss.__init__": [[140, 150], ["torch.Module.__init__", "numpy.array", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_weights", ":", "list", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            code_weights: (#codes) float list if not None.\n                Code-wise weights.\n        \"\"\"", "\n", "super", "(", "WeightedL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "code_weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "code_weights", "=", "np", ".", "array", "(", "code_weights", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "code_weights", "=", "torch", ".", "from_numpy", "(", "self", ".", "code_weights", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedL1Loss.forward": [[151, 179], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "loss_utils.WeightedL1Loss.code_weights.view", "weights.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (B, #anchors, #codes) float tensor.\n                Ecoded predicted locations of objects.\n            target: (B, #anchors, #codes) float tensor.\n                Regression targets.\n            weights: (B, #anchors) float tensor if not None.\n\n        Returns:\n            loss: (B, #anchors) float tensor.\n                Weighted smooth l1 loss without reduction.\n        \"\"\"", "\n", "target", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "target", ")", ",", "input", ",", "target", ")", "# ignore nan targets", "\n", "\n", "diff", "=", "input", "-", "target", "\n", "# code-wise weighting", "\n", "if", "self", ".", "code_weights", "is", "not", "None", ":", "\n", "            ", "diff", "=", "diff", "*", "self", ".", "code_weights", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "", "loss", "=", "torch", ".", "abs", "(", "diff", ")", "\n", "\n", "# anchor-wise weighting", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "assert", "weights", ".", "shape", "[", "0", "]", "==", "loss", ".", "shape", "[", "0", "]", "and", "weights", ".", "shape", "[", "1", "]", "==", "loss", ".", "shape", "[", "1", "]", "\n", "loss", "=", "loss", "*", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedCrossEntropyLoss.__init__": [[186, 188], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "WeightedCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedCrossEntropyLoss.forward": [[189, 207], ["input.permute.permute.permute", "target.argmax.argmax.argmax", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (B, #anchors, #classes) float tensor.\n                Predited logits for each class.\n            target: (B, #anchors, #classes) float tensor.\n                One-hot classification targets.\n            weights: (B, #anchors) float tensor.\n                Anchor-wise weights.\n\n        Returns:\n            loss: (B, #anchors) float tensor.\n                Weighted cross entropy loss without reduction\n        \"\"\"", "\n", "input", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "target", "=", "target", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "reduction", "=", "'none'", ")", "*", "weights", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.FocalLossCenterNet.__init__": [[306, 309], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FocalLossCenterNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "neg_loss", "=", "neg_loss_cornernet", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.FocalLossCenterNet.forward": [[310, 312], ["loss_utils.FocalLossCenterNet.neg_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "out", ",", "target", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "neg_loss", "(", "out", ",", "target", ",", "mask", "=", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.RegLossCenterNet.__init__": [[369, 371], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RegLossCenterNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.RegLossCenterNet.forward": [[372, 387], ["loss_utils._reg_loss", "loss_utils._transpose_and_gather_feat"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils._reg_loss", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._transpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            output: (batch x dim x h x w) or (batch x max_objects)\n            mask: (batch x max_objects)\n            ind: (batch x max_objects)\n            target: (batch x max_objects x dim)\n        Returns:\n        \"\"\"", "\n", "if", "ind", "is", "None", ":", "\n", "            ", "pred", "=", "output", "\n", "", "else", ":", "\n", "            ", "pred", "=", "_transpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "", "loss", "=", "_reg_loss", "(", "pred", ",", "target", ",", "mask", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.get_corner_loss_lidar": [[209, 233], ["box_utils.boxes_to_corners_3d", "box_utils.boxes_to_corners_3d", "gt_bbox3d.clone", "box_utils.boxes_to_corners_3d", "torch.min", "torch.min", "torch.min", "loss_utils.WeightedSmoothL1Loss.smooth_l1_loss", "WeightedSmoothL1Loss.smooth_l1_loss.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedSmoothL1Loss.smooth_l1_loss"], ["", "", "def", "get_corner_loss_lidar", "(", "pred_bbox3d", ":", "torch", ".", "Tensor", ",", "gt_bbox3d", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        pred_bbox3d: (N, 7) float Tensor.\n        gt_bbox3d: (N, 7) float Tensor.\n\n    Returns:\n        corner_loss: (N) float Tensor.\n    \"\"\"", "\n", "assert", "pred_bbox3d", ".", "shape", "[", "0", "]", "==", "gt_bbox3d", ".", "shape", "[", "0", "]", "\n", "\n", "pred_box_corners", "=", "box_utils", ".", "boxes_to_corners_3d", "(", "pred_bbox3d", ")", "\n", "gt_box_corners", "=", "box_utils", ".", "boxes_to_corners_3d", "(", "gt_bbox3d", ")", "\n", "\n", "gt_bbox3d_flip", "=", "gt_bbox3d", ".", "clone", "(", ")", "\n", "gt_bbox3d_flip", "[", ":", ",", "6", "]", "+=", "np", ".", "pi", "\n", "gt_box_corners_flip", "=", "box_utils", ".", "boxes_to_corners_3d", "(", "gt_bbox3d_flip", ")", "\n", "# (N, 8)", "\n", "corner_dist", "=", "torch", ".", "min", "(", "torch", ".", "norm", "(", "pred_box_corners", "-", "gt_box_corners", ",", "dim", "=", "2", ")", ",", "\n", "torch", ".", "norm", "(", "pred_box_corners", "-", "gt_box_corners_flip", ",", "dim", "=", "2", ")", ")", "\n", "# (N, 8)", "\n", "corner_loss", "=", "WeightedSmoothL1Loss", ".", "smooth_l1_loss", "(", "corner_dist", ",", "beta", "=", "1.0", ")", "\n", "\n", "return", "corner_loss", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.compute_fg_mask": [[235, 262], ["torch.device", "torch.device", "torch.device", "torch.zeros", "torch.zeros", "torch.zeros", "torch.floor", "torch.floor", "torch.floor", "torch.ceil", "torch.ceil", "torch.ceil", "gt_boxes2d.long.long", "range", "range"], "function", ["None"], ["", "def", "compute_fg_mask", "(", "gt_boxes2d", ",", "shape", ",", "downsample_factor", "=", "1", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ":", "\n", "    ", "\"\"\"\n    Compute foreground mask for images\n    Args:\n        gt_boxes2d: (B, N, 4), 2D box labels\n        shape: torch.Size or tuple, Foreground mask desired shape\n        downsample_factor: int, Downsample factor for image\n        device: torch.device, Foreground mask desired device\n    Returns:\n        fg_mask (shape), Foreground mask\n    \"\"\"", "\n", "fg_mask", "=", "torch", ".", "zeros", "(", "shape", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "\n", "# Set box corners", "\n", "gt_boxes2d", "/=", "downsample_factor", "\n", "gt_boxes2d", "[", ":", ",", ":", ",", ":", "2", "]", "=", "torch", ".", "floor", "(", "gt_boxes2d", "[", ":", ",", ":", ",", ":", "2", "]", ")", "\n", "gt_boxes2d", "[", ":", ",", ":", ",", "2", ":", "]", "=", "torch", ".", "ceil", "(", "gt_boxes2d", "[", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "gt_boxes2d", "=", "gt_boxes2d", ".", "long", "(", ")", "\n", "\n", "# Set all values within each box to True", "\n", "B", ",", "N", "=", "gt_boxes2d", ".", "shape", "[", ":", "2", "]", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "        ", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "u1", ",", "v1", ",", "u2", ",", "v2", "=", "gt_boxes2d", "[", "b", ",", "n", "]", "\n", "fg_mask", "[", "b", ",", "v1", ":", "v2", ",", "u1", ":", "u2", "]", "=", "True", "\n", "\n", "", "", "return", "fg_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.neg_loss_cornernet": [[264, 300], ["gt.eq().float", "gt.lt().float", "torch.pow", "torch.pow", "torch.pow", "pos_loss.sum.sum", "neg_loss.sum.sum", "mask[].float", "gt.eq().float.float().sum", "gt.eq", "gt.lt", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "gt.eq().float.float", "gt.eq().float.float"], "function", ["None"], ["", "def", "neg_loss_cornernet", "(", "pred", ",", "gt", ",", "mask", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Refer to https://github.com/tianweiy/CenterPoint.\n    Modified focal loss. Exactly the same as CornerNet. Runs faster and costs a little bit more memory\n    Args:\n        pred: (batch x c x h x w)\n        gt: (batch x c x h x w)\n        mask: (batch x h x w)\n    Returns:\n    \"\"\"", "\n", "pos_inds", "=", "gt", ".", "eq", "(", "1", ")", ".", "float", "(", ")", "\n", "neg_inds", "=", "gt", ".", "lt", "(", "1", ")", ".", "float", "(", ")", "\n", "\n", "neg_weights", "=", "torch", ".", "pow", "(", "1", "-", "gt", ",", "4", ")", "\n", "\n", "loss", "=", "0", "\n", "\n", "pos_loss", "=", "torch", ".", "log", "(", "pred", ")", "*", "torch", ".", "pow", "(", "1", "-", "pred", ",", "2", ")", "*", "pos_inds", "\n", "neg_loss", "=", "torch", ".", "log", "(", "1", "-", "pred", ")", "*", "torch", ".", "pow", "(", "pred", ",", "2", ")", "*", "neg_weights", "*", "neg_inds", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", "\n", "pos_loss", "=", "pos_loss", "*", "mask", "\n", "neg_loss", "=", "neg_loss", "*", "mask", "\n", "num_pos", "=", "(", "pos_inds", ".", "float", "(", ")", "*", "mask", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "num_pos", "=", "pos_inds", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "pos_loss", "=", "pos_loss", ".", "sum", "(", ")", "\n", "neg_loss", "=", "neg_loss", ".", "sum", "(", ")", "\n", "\n", "if", "num_pos", "==", "0", ":", "\n", "        ", "loss", "=", "loss", "-", "neg_loss", "\n", "", "else", ":", "\n", "        ", "loss", "=", "loss", "-", "(", "pos_loss", "+", "neg_loss", ")", "/", "num_pos", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils._reg_loss": [[314, 344], ["mask.unsqueeze().expand_as().float.float().sum", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as().float", "torch.abs", "torch.abs", "torch.abs", "torch.sum.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "mask.unsqueeze().expand_as().float.float", "mask.unsqueeze().expand_as().float.unsqueeze().expand_as", "torch.isnan", "torch.isnan", "torch.isnan", "mask.unsqueeze().expand_as().float.unsqueeze"], "function", ["None"], ["", "", "def", "_reg_loss", "(", "regr", ",", "gt_regr", ",", "mask", ")", ":", "\n", "    ", "\"\"\"\n    Refer to https://github.com/tianweiy/CenterPoint\n    L1 regression loss\n    Args:\n        regr (batch x max_objects x dim)\n        gt_regr (batch x max_objects x dim)\n        mask (batch x max_objects)\n    Returns:\n    \"\"\"", "\n", "num", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "gt_regr", ")", ".", "float", "(", ")", "\n", "isnotnan", "=", "(", "~", "torch", ".", "isnan", "(", "gt_regr", ")", ")", ".", "float", "(", ")", "\n", "mask", "*=", "isnotnan", "\n", "regr", "=", "regr", "*", "mask", "\n", "gt_regr", "=", "gt_regr", "*", "mask", "\n", "\n", "loss", "=", "torch", ".", "abs", "(", "regr", "-", "gt_regr", ")", "\n", "loss", "=", "loss", ".", "transpose", "(", "2", ",", "0", ")", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "2", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "1", ")", "\n", "# else:", "\n", "#  # D x M x B", "\n", "#  loss = loss.reshape(loss.shape[0], -1)", "\n", "\n", "# loss = loss / (num + 1e-4)", "\n", "loss", "=", "loss", "/", "torch", ".", "clamp_min", "(", "num", ",", "min", "=", "1.0", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils._gather_feat": [[346, 355], ["feat.view.size", "ind.unsqueeze().expand.unsqueeze().expand", "feat.view.gather", "ind.unsqueeze().expand.size", "ind.unsqueeze().expand.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "feat.view.view", "ind.unsqueeze().expand.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["None"], ["", "def", "_gather_feat", "(", "feat", ",", "ind", ",", "mask", "=", "None", ")", ":", "\n", "    ", "dim", "=", "feat", ".", "size", "(", "2", ")", "\n", "ind", "=", "ind", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "ind", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "1", ")", ",", "dim", ")", "\n", "feat", "=", "feat", ".", "gather", "(", "1", ",", "ind", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "feat", ")", "\n", "feat", "=", "feat", "[", "mask", "]", "\n", "feat", "=", "feat", ".", "view", "(", "-", "1", ",", "dim", ")", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils._transpose_and_gather_feat": [[357, 362], ["_gather_feat.permute().contiguous", "_gather_feat.view", "loss_utils._gather_feat", "_gather_feat.size", "_gather_feat.size", "_gather_feat.permute"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._gather_feat"], ["", "def", "_transpose_and_gather_feat", "(", "feat", ",", "ind", ")", ":", "\n", "    ", "feat", "=", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ",", "feat", ".", "size", "(", "3", ")", ")", "\n", "feat", "=", "_gather_feat", "(", "feat", ",", "ind", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.__init__": [[14, 47], ["torch.Dataset.__init__", "numpy.array", "processor.point_feature_encoder.PointFeatureEncoder", "processor.data_processor.DataProcessor", "hasattr", "pathlib.Path", "augmentor.data_augmentor.DataAugmentor"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_cfg", "=", "None", ",", "class_names", "=", "None", ",", "training", "=", "True", ",", "root_path", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_cfg", "=", "dataset_cfg", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "root_path", "=", "root_path", "if", "root_path", "is", "not", "None", "else", "Path", "(", "self", ".", "dataset_cfg", ".", "DATA_PATH", ")", "\n", "self", ".", "logger", "=", "logger", "\n", "if", "self", ".", "dataset_cfg", "is", "None", "or", "class_names", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "point_cloud_range", "=", "np", ".", "array", "(", "self", ".", "dataset_cfg", ".", "POINT_CLOUD_RANGE", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "point_feature_encoder", "=", "PointFeatureEncoder", "(", "\n", "self", ".", "dataset_cfg", ".", "POINT_FEATURE_ENCODING", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", "\n", ")", "\n", "self", ".", "data_augmentor", "=", "DataAugmentor", "(", "\n", "self", ".", "root_path", ",", "self", ".", "dataset_cfg", ".", "DATA_AUGMENTOR", ",", "self", ".", "class_names", ",", "logger", "=", "self", ".", "logger", "\n", ")", "if", "self", ".", "training", "else", "None", "\n", "self", ".", "data_processor", "=", "DataProcessor", "(", "\n", "self", ".", "dataset_cfg", ".", "DATA_PROCESSOR", ",", "point_cloud_range", "=", "self", ".", "point_cloud_range", ",", "\n", "training", "=", "self", ".", "training", ",", "num_point_features", "=", "self", ".", "point_feature_encoder", ".", "num_point_features", "\n", ")", "\n", "\n", "self", ".", "grid_size", "=", "self", ".", "data_processor", ".", "grid_size", "\n", "self", ".", "voxel_size", "=", "self", ".", "data_processor", ".", "voxel_size", "\n", "self", ".", "total_epochs", "=", "0", "\n", "self", ".", "_merge_all_iters_to_one_epoch", "=", "False", "\n", "\n", "if", "hasattr", "(", "self", ".", "data_processor", ",", "\"depth_downsample_factor\"", ")", ":", "\n", "            ", "self", ".", "depth_downsample_factor", "=", "self", ".", "data_processor", ".", "depth_downsample_factor", "\n", "", "else", ":", "\n", "            ", "self", ".", "depth_downsample_factor", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.mode": [[48, 51], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "'train'", "if", "self", ".", "training", "else", "'test'", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.__getstate__": [[52, 56], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "d", "[", "'logger'", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.__setstate__": [[57, 59], ["dataset.DatasetTemplate.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.generate_prediction_dicts": [[60, 77], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_prediction_dicts", "(", "batch_dict", ",", "pred_dicts", ",", "class_names", ",", "output_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        To support a custom dataset, implement this function to receive the predicted results from the model, and then\n        transform the unified normative coordinate to your required coordinate, and optionally save them to disk.\n\n        Args:\n            batch_dict: dict of original data from the dataloader\n            pred_dicts: dict of predicted results from the model\n                pred_boxes: (N, 7), Tensor\n                pred_scores: (N), Tensor\n                pred_labels: (N), Tensor\n            class_names:\n            output_path: if it is not None, save the results to this path\n        Returns:\n\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.merge_all_iters_to_one_epoch": [[78, 84], ["None"], "methods", ["None"], ["", "def", "merge_all_iters_to_one_epoch", "(", "self", ",", "merge", "=", "True", ",", "epochs", "=", "None", ")", ":", "\n", "        ", "if", "merge", ":", "\n", "            ", "self", ".", "_merge_all_iters_to_one_epoch", "=", "True", "\n", "self", ".", "total_epochs", "=", "epochs", "\n", "", "else", ":", "\n", "            ", "self", ".", "_merge_all_iters_to_one_epoch", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.__len__": [[85, 87], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.__getitem__": [[88, 101], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        To support a custom dataset, implement this function to load the raw data (and labels), then transform them to\n        the unified normative coordinate and call the function self.prepare_data() to process the data and send them\n        to the model.\n\n        Args:\n            index:\n\n        Returns:\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.prepare_data": [[102, 159], ["dataset.DatasetTemplate.data_processor.forward", "dataset.DatasetTemplate.pop", "numpy.array", "dataset.DatasetTemplate.data_augmentor.forward", "dataset.DatasetTemplate.get", "utils.common_utils.keep_arrays_by_name", "numpy.array", "numpy.concatenate", "dataset.DatasetTemplate.get", "dataset.DatasetTemplate.point_feature_encoder.forward", "numpy.random.randint", "dataset.DatasetTemplate.__getitem__", "dataset.DatasetTemplate.get", "len", "dataset.DatasetTemplate.__len__", "numpy.array.reshape().astype", "dataset.DatasetTemplate.class_names.index", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.keep_arrays_by_name", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__getitem__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["", "def", "prepare_data", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                points: optional, (N, 3 + C_in)\n                gt_boxes: optional, (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n                gt_names: optional, (N), string\n                ...\n\n        Returns:\n            data_dict:\n                frame_id: string\n                points: (N, 3 + C_in)\n                gt_boxes: optional, (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n                gt_names: optional, (N), string\n                use_lead_xyz: bool\n                voxels: optional (num_voxels, max_points_per_voxel, 3 + C)\n                voxel_coords: optional (num_voxels, 3)\n                voxel_num_points: optional (num_voxels)\n                ...\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "assert", "'gt_boxes'", "in", "data_dict", ",", "'gt_boxes should be provided for training'", "\n", "gt_boxes_mask", "=", "np", ".", "array", "(", "[", "n", "in", "self", ".", "class_names", "for", "n", "in", "data_dict", "[", "'gt_names'", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "\n", "data_dict", "=", "self", ".", "data_augmentor", ".", "forward", "(", "\n", "data_dict", "=", "{", "\n", "**", "data_dict", ",", "\n", "'gt_boxes_mask'", ":", "gt_boxes_mask", "\n", "}", "\n", ")", "\n", "\n", "", "if", "data_dict", ".", "get", "(", "'gt_boxes'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "selected", "=", "common_utils", ".", "keep_arrays_by_name", "(", "data_dict", "[", "'gt_names'", "]", ",", "self", ".", "class_names", ")", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "selected", "]", "\n", "data_dict", "[", "'gt_names'", "]", "=", "data_dict", "[", "'gt_names'", "]", "[", "selected", "]", "\n", "gt_classes", "=", "np", ".", "array", "(", "[", "self", ".", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "data_dict", "[", "'gt_names'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "(", "data_dict", "[", "'gt_boxes'", "]", ",", "gt_classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "axis", "=", "1", ")", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "\n", "if", "data_dict", ".", "get", "(", "'gt_boxes2d'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "data_dict", "[", "'gt_boxes2d'", "]", "=", "data_dict", "[", "'gt_boxes2d'", "]", "[", "selected", "]", "\n", "\n", "", "", "if", "data_dict", ".", "get", "(", "'points'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "data_dict", "=", "self", ".", "point_feature_encoder", ".", "forward", "(", "data_dict", ")", "\n", "\n", "", "data_dict", "=", "self", ".", "data_processor", ".", "forward", "(", "\n", "data_dict", "=", "data_dict", "\n", ")", "\n", "\n", "if", "self", ".", "training", "and", "len", "(", "data_dict", "[", "'gt_boxes'", "]", ")", "==", "0", ":", "\n", "            ", "new_index", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "__len__", "(", ")", ")", "\n", "return", "self", ".", "__getitem__", "(", "new_index", ")", "\n", "\n", "", "data_dict", ".", "pop", "(", "'gt_names'", ",", "None", ")", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.collate_batch": [[160, 230], ["collections.defaultdict", "len", "collections.defaultdict.items", "cur_sample.items", "data_dict[].append", "numpy.concatenate", "print", "enumerate", "numpy.concatenate", "numpy.pad", "coors.append", "max", "numpy.zeros", "range", "max", "numpy.zeros", "range", "len", "numpy.stack", "numpy.stack", "len", "max", "max", "utils.common_utils.get_pad_params", "utils.common_utils.get_pad_params", "numpy.pad", "images.append", "val[].__len__", "val[].__len__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_pad_params", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_pad_params", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["", "@", "staticmethod", "\n", "def", "collate_batch", "(", "batch_list", ",", "_unused", "=", "False", ")", ":", "\n", "        ", "data_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "cur_sample", "in", "batch_list", ":", "\n", "            ", "for", "key", ",", "val", "in", "cur_sample", ".", "items", "(", ")", ":", "\n", "                ", "data_dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "batch_size", "=", "len", "(", "batch_list", ")", "\n", "ret", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "key", "in", "[", "'voxels'", ",", "'voxel_num_points'", "]", ":", "\n", "                    ", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "val", ",", "axis", "=", "0", ")", "\n", "", "elif", "key", "in", "[", "'points'", ",", "'voxel_coords'", "]", ":", "\n", "                    ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "val", ")", ":", "\n", "                        ", "coor_pad", "=", "np", ".", "pad", "(", "coor", ",", "(", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "i", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "coors", ",", "axis", "=", "0", ")", "\n", "", "elif", "key", "in", "[", "'gt_boxes'", "]", ":", "\n", "                    ", "max_gt", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "val", "]", ")", "\n", "batch_gt_boxes3d", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_gt", ",", "val", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "batch_gt_boxes3d", "[", "k", ",", ":", "val", "[", "k", "]", ".", "__len__", "(", ")", ",", ":", "]", "=", "val", "[", "k", "]", "\n", "", "ret", "[", "key", "]", "=", "batch_gt_boxes3d", "\n", "", "elif", "key", "in", "[", "'gt_boxes2d'", "]", ":", "\n", "                    ", "max_boxes", "=", "0", "\n", "max_boxes", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "val", "]", ")", "\n", "batch_boxes2d", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_boxes", ",", "val", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "if", "val", "[", "k", "]", ".", "size", ">", "0", ":", "\n", "                            ", "batch_boxes2d", "[", "k", ",", ":", "val", "[", "k", "]", ".", "__len__", "(", ")", ",", ":", "]", "=", "val", "[", "k", "]", "\n", "", "", "ret", "[", "key", "]", "=", "batch_boxes2d", "\n", "", "elif", "key", "in", "[", "\"images\"", ",", "\"depth_maps\"", "]", ":", "\n", "# Get largest image size (H, W)", "\n", "                    ", "max_h", "=", "0", "\n", "max_w", "=", "0", "\n", "for", "image", "in", "val", ":", "\n", "                        ", "max_h", "=", "max", "(", "max_h", ",", "image", ".", "shape", "[", "0", "]", ")", "\n", "max_w", "=", "max", "(", "max_w", ",", "image", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# Change size of images", "\n", "", "images", "=", "[", "]", "\n", "for", "image", "in", "val", ":", "\n", "                        ", "pad_h", "=", "common_utils", ".", "get_pad_params", "(", "desired_size", "=", "max_h", ",", "cur_size", "=", "image", ".", "shape", "[", "0", "]", ")", "\n", "pad_w", "=", "common_utils", ".", "get_pad_params", "(", "desired_size", "=", "max_w", ",", "cur_size", "=", "image", ".", "shape", "[", "1", "]", ")", "\n", "pad_width", "=", "(", "pad_h", ",", "pad_w", ")", "\n", "# Pad with nan, to be replaced later in the pipeline.", "\n", "pad_value", "=", "np", ".", "nan", "\n", "\n", "if", "key", "==", "\"images\"", ":", "\n", "                            ", "pad_width", "=", "(", "pad_h", ",", "pad_w", ",", "(", "0", ",", "0", ")", ")", "\n", "", "elif", "key", "==", "\"depth_maps\"", ":", "\n", "                            ", "pad_width", "=", "(", "pad_h", ",", "pad_w", ")", "\n", "\n", "", "image_pad", "=", "np", ".", "pad", "(", "image", ",", "\n", "pad_width", "=", "pad_width", ",", "\n", "mode", "=", "'constant'", ",", "\n", "constant_values", "=", "pad_value", ")", "\n", "\n", "images", ".", "append", "(", "image_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "np", ".", "stack", "(", "images", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "ret", "[", "key", "]", "=", "np", ".", "stack", "(", "val", ",", "axis", "=", "0", ")", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "'Error in collate_batch: key=%s'", "%", "key", ")", "\n", "raise", "TypeError", "\n", "\n", "", "", "ret", "[", "'batch_size'", "]", "=", "batch_size", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.__init__.DistributedSampler.__init__": [[26, 29], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], []], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.__init__.DistributedSampler.__iter__": [[30, 45], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.datasets.__init__.build_dataloader": [[47, 77], ["torch.utils.data.DataLoader", "hasattr", "dataset.merge_all_iters_to_one_epoch", "torch.utils.data.distributed.DistributedSampler", "pcdet.utils.common_utils.get_dist_info", "__init__.DistributedSampler"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.merge_all_iters_to_one_epoch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_dist_info"], []], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.__init__": [[14, 21], ["dataset.DatasetTemplate.__init__", "lyft_dataset.LyftDataset.include_lyft_data", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.include_lyft_data"], ["    ", "def", "__init__", "(", "self", ",", "dataset_cfg", ",", "class_names", ",", "training", "=", "True", ",", "root_path", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "(", "root_path", "if", "root_path", "is", "not", "None", "else", "Path", "(", "dataset_cfg", ".", "DATA_PATH", ")", ")", "/", "dataset_cfg", ".", "VERSION", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "training", "=", "training", ",", "root_path", "=", "self", ".", "root_path", ",", "logger", "=", "logger", "\n", ")", "\n", "self", ".", "infos", "=", "[", "]", "\n", "self", ".", "include_lyft_data", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.include_lyft_data": [[22, 36], ["lyft_dataset.LyftDataset.logger.info", "lyft_dataset.LyftDataset.infos.extend", "lyft_dataset.LyftDataset.logger.info", "info_path.exists", "open", "pickle.load", "lyft_infos.extend", "len"], "methods", ["None"], ["", "def", "include_lyft_data", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Loading lyft dataset'", ")", "\n", "lyft_infos", "=", "[", "]", "\n", "\n", "for", "info_path", "in", "self", ".", "dataset_cfg", ".", "INFO_PATH", "[", "mode", "]", ":", "\n", "            ", "info_path", "=", "self", ".", "root_path", "/", "info_path", "\n", "if", "not", "info_path", ".", "exists", "(", ")", ":", "\n", "                ", "continue", "\n", "", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "lyft_infos", ".", "extend", "(", "infos", ")", "\n", "\n", "", "", "self", ".", "infos", ".", "extend", "(", "lyft_infos", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Total samples for lyft dataset: %d'", "%", "(", "len", "(", "lyft_infos", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.remove_ego_points": [[37, 41], ["numpy.abs", "numpy.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "remove_ego_points", "(", "points", ",", "center_radius", "=", "1.0", ")", ":", "\n", "        ", "mask", "=", "~", "(", "(", "np", ".", "abs", "(", "points", "[", ":", ",", "0", "]", ")", "<", "center_radius", "*", "1.5", ")", "&", "(", "np", ".", "abs", "(", "points", "[", ":", ",", "1", "]", ")", "<", "center_radius", ")", ")", "\n", "return", "points", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.get_sweep": [[42, 57], ["numpy.fromfile", "str", "numpy.fromfile.reshape", "lyft_dataset.LyftDataset.remove_ego_points", "numpy.ones", "sweep_info[].dot", "numpy.vstack", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.remove_ego_points"], ["", "def", "get_sweep", "(", "self", ",", "sweep_info", ")", ":", "\n", "        ", "lidar_path", "=", "self", ".", "root_path", "/", "sweep_info", "[", "'lidar_path'", "]", "\n", "points_sweep", "=", "np", ".", "fromfile", "(", "str", "(", "lidar_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", "\n", "if", "points_sweep", ".", "shape", "[", "0", "]", "%", "5", "!=", "0", ":", "\n", "            ", "points_sweep", "=", "points_sweep", "[", ":", "points_sweep", ".", "shape", "[", "0", "]", "-", "(", "points_sweep", ".", "shape", "[", "0", "]", "%", "5", ")", "]", "\n", "", "points_sweep", "=", "points_sweep", ".", "reshape", "(", "[", "-", "1", ",", "5", "]", ")", "[", ":", ",", ":", "4", "]", "\n", "\n", "points_sweep", "=", "self", ".", "remove_ego_points", "(", "points_sweep", ")", ".", "T", "\n", "if", "sweep_info", "[", "'transform_matrix'", "]", "is", "not", "None", ":", "\n", "            ", "num_points", "=", "points_sweep", ".", "shape", "[", "1", "]", "\n", "points_sweep", "[", ":", "3", ",", ":", "]", "=", "sweep_info", "[", "'transform_matrix'", "]", ".", "dot", "(", "\n", "np", ".", "vstack", "(", "(", "points_sweep", "[", ":", "3", ",", ":", "]", ",", "np", ".", "ones", "(", "num_points", ")", ")", ")", ")", "[", ":", "3", ",", ":", "]", "\n", "\n", "", "cur_times", "=", "sweep_info", "[", "'time_lag'", "]", "*", "np", ".", "ones", "(", "(", "1", ",", "points_sweep", ".", "shape", "[", "1", "]", ")", ")", "\n", "return", "points_sweep", ".", "T", ",", "cur_times", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.get_lidar_with_sweeps": [[58, 79], ["numpy.fromfile", "numpy.random.choice", "numpy.concatenate", "numpy.concatenate().astype", "numpy.concatenate", "str", "numpy.concatenate.reshape", "numpy.zeros", "len", "lyft_dataset.LyftDataset.get_sweep", "sweep_points_list.append", "sweep_times_list.append", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.get_sweep"], ["", "def", "get_lidar_with_sweeps", "(", "self", ",", "index", ",", "max_sweeps", "=", "1", ")", ":", "\n", "        ", "info", "=", "self", ".", "infos", "[", "index", "]", "\n", "lidar_path", "=", "self", ".", "root_path", "/", "info", "[", "'lidar_path'", "]", "\n", "points", "=", "np", ".", "fromfile", "(", "str", "(", "lidar_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", "\n", "if", "points", ".", "shape", "[", "0", "]", "%", "5", "!=", "0", ":", "\n", "            ", "points", "=", "points", "[", ":", "points", ".", "shape", "[", "0", "]", "-", "(", "points", ".", "shape", "[", "0", "]", "%", "5", ")", "]", "\n", "", "points", "=", "points", ".", "reshape", "(", "[", "-", "1", ",", "5", "]", ")", "[", ":", ",", ":", "4", "]", "\n", "\n", "sweep_points_list", "=", "[", "points", "]", "\n", "sweep_times_list", "=", "[", "np", ".", "zeros", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", "\n", "\n", "for", "k", "in", "np", ".", "random", ".", "choice", "(", "len", "(", "info", "[", "'sweeps'", "]", ")", ",", "max_sweeps", "-", "1", ",", "replace", "=", "False", ")", ":", "\n", "            ", "points_sweep", ",", "times_sweep", "=", "self", ".", "get_sweep", "(", "info", "[", "'sweeps'", "]", "[", "k", "]", ")", "\n", "sweep_points_list", ".", "append", "(", "points_sweep", ")", "\n", "sweep_times_list", ".", "append", "(", "times_sweep", ")", "\n", "\n", "", "points", "=", "np", ".", "concatenate", "(", "sweep_points_list", ",", "axis", "=", "0", ")", "\n", "times", "=", "np", ".", "concatenate", "(", "sweep_times_list", ",", "axis", "=", "0", ")", ".", "astype", "(", "points", ".", "dtype", ")", "\n", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "points", ",", "times", ")", ",", "axis", "=", "1", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.__len__": [[80, 85], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "return", "len", "(", "self", ".", "infos", ")", "*", "self", ".", "total_epochs", "\n", "\n", "", "return", "len", "(", "self", ".", "infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.__getitem__": [[86, 108], ["copy.deepcopy", "lyft_dataset.LyftDataset.get_lidar_with_sweeps", "lyft_dataset.LyftDataset.prepare_data", "input_dict.update", "len", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.get_lidar_with_sweeps", "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.prepare_data", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "index", "=", "index", "%", "len", "(", "self", ".", "infos", ")", "\n", "\n", "", "info", "=", "copy", ".", "deepcopy", "(", "self", ".", "infos", "[", "index", "]", ")", "\n", "points", "=", "self", ".", "get_lidar_with_sweeps", "(", "index", ",", "max_sweeps", "=", "self", ".", "dataset_cfg", ".", "MAX_SWEEPS", ")", "\n", "\n", "input_dict", "=", "{", "\n", "'points'", ":", "points", ",", "\n", "'frame_id'", ":", "Path", "(", "info", "[", "'lidar_path'", "]", ")", ".", "stem", ",", "\n", "'metadata'", ":", "{", "'token'", ":", "info", "[", "'token'", "]", "}", "\n", "}", "\n", "\n", "if", "'gt_boxes'", "in", "info", ":", "\n", "            ", "input_dict", ".", "update", "(", "{", "\n", "'gt_boxes'", ":", "info", "[", "'gt_boxes'", "]", ",", "\n", "'gt_names'", ":", "info", "[", "'gt_names'", "]", "\n", "}", ")", "\n", "\n", "", "data_dict", "=", "self", ".", "prepare_data", "(", "data_dict", "=", "input_dict", ")", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.generate_prediction_dicts": [[109, 152], ["enumerate", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "lyft_dataset.LyftDataset.generate_prediction_dicts.get_template_prediction"], "methods", ["None"], ["", "def", "generate_prediction_dicts", "(", "self", ",", "batch_dict", ",", "pred_dicts", ",", "class_names", ",", "output_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                frame_id:\n            pred_dicts: list of pred_dicts\n                pred_boxes: (N, 7), Tensor\n                pred_scores: (N), Tensor\n                pred_labels: (N), Tensor\n            class_names:\n            output_path:\n        Returns:\n        \"\"\"", "\n", "def", "get_template_prediction", "(", "num_samples", ")", ":", "\n", "            ", "ret_dict", "=", "{", "\n", "'name'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "'score'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "\n", "'boxes_lidar'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "7", "]", ")", ",", "'pred_labels'", ":", "np", ".", "zeros", "(", "num_samples", ")", "\n", "}", "\n", "return", "ret_dict", "\n", "\n", "", "def", "generate_single_sample_dict", "(", "box_dict", ")", ":", "\n", "            ", "pred_scores", "=", "box_dict", "[", "'pred_scores'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_boxes", "=", "box_dict", "[", "'pred_boxes'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_labels", "=", "box_dict", "[", "'pred_labels'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_dict", "=", "get_template_prediction", "(", "pred_scores", ".", "shape", "[", "0", "]", ")", "\n", "if", "pred_scores", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "return", "pred_dict", "\n", "\n", "", "pred_dict", "[", "'name'", "]", "=", "np", ".", "array", "(", "class_names", ")", "[", "pred_labels", "-", "1", "]", "\n", "pred_dict", "[", "'score'", "]", "=", "pred_scores", "\n", "pred_dict", "[", "'boxes_lidar'", "]", "=", "pred_boxes", "\n", "pred_dict", "[", "'pred_labels'", "]", "=", "pred_labels", "\n", "\n", "return", "pred_dict", "\n", "\n", "", "annos", "=", "[", "]", "\n", "for", "index", ",", "box_dict", "in", "enumerate", "(", "pred_dicts", ")", ":", "\n", "            ", "single_pred_dict", "=", "generate_single_sample_dict", "(", "box_dict", ")", "\n", "single_pred_dict", "[", "'frame_id'", "]", "=", "batch_dict", "[", "'frame_id'", "]", "[", "index", "]", "\n", "single_pred_dict", "[", "'metadata'", "]", "=", "batch_dict", "[", "'metadata'", "]", "[", "index", "]", "\n", "annos", ".", "append", "(", "single_pred_dict", ")", "\n", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.kitti_eval": [[153, 177], ["kitti_utils.transform_to_kitti_format", "kitti_utils.transform_to_kitti_format", "kitti_eval.get_official_eval_result", "lyft_dataset.LyftDataset.dataset_cfg.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_official_eval_result"], ["", "def", "kitti_eval", "(", "self", ",", "eval_det_annos", ",", "eval_gt_annos", ",", "class_names", ")", ":", "\n", "        ", "from", ".", ".", "kitti", ".", "kitti_object_eval_python", "import", "eval", "as", "kitti_eval", "\n", "from", ".", ".", "kitti", "import", "kitti_utils", "\n", "\n", "map_name_to_kitti", "=", "{", "\n", "'car'", ":", "'Car'", ",", "\n", "'pedestrian'", ":", "'Pedestrian'", ",", "\n", "'truck'", ":", "'Truck'", ",", "\n", "'bicycle'", ":", "'Cyclist'", ",", "\n", "'motorcycle'", ":", "'Cyclist'", "\n", "}", "\n", "\n", "kitti_utils", ".", "transform_to_kitti_format", "(", "eval_det_annos", ",", "map_name_to_kitti", "=", "map_name_to_kitti", ")", "\n", "kitti_utils", ".", "transform_to_kitti_format", "(", "\n", "eval_gt_annos", ",", "map_name_to_kitti", "=", "map_name_to_kitti", ",", "\n", "info_with_fakelidar", "=", "self", ".", "dataset_cfg", ".", "get", "(", "'INFO_WITH_FAKELIDAR'", ",", "False", ")", "\n", ")", "\n", "\n", "kitti_class_names", "=", "[", "map_name_to_kitti", "[", "x", "]", "for", "x", "in", "class_names", "]", "\n", "\n", "ap_result_str", ",", "ap_dict", "=", "kitti_eval", ".", "get_official_eval_result", "(", "\n", "gt_annos", "=", "eval_gt_annos", ",", "dt_annos", "=", "eval_det_annos", ",", "current_classes", "=", "kitti_class_names", "\n", ")", "\n", "return", "ap_result_str", ",", "ap_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.evaluation": [[178, 188], ["copy.deepcopy", "copy.deepcopy", "lyft_dataset.LyftDataset.kitti_eval", "lyft_dataset.LyftDataset.lyft_eval"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.kitti_eval", "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.lyft_eval"], ["", "def", "evaluation", "(", "self", ",", "det_annos", ",", "class_names", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "kwargs", "[", "'eval_metric'", "]", "==", "'kitti'", ":", "\n", "            ", "eval_det_annos", "=", "copy", ".", "deepcopy", "(", "det_annos", ")", "\n", "eval_gt_annos", "=", "copy", ".", "deepcopy", "(", "self", ".", "infos", ")", "\n", "return", "self", ".", "kitti_eval", "(", "eval_det_annos", ",", "eval_gt_annos", ",", "class_names", ")", "\n", "", "elif", "kwargs", "[", "'eval_metric'", "]", "==", "'lyft'", ":", "\n", "            ", "return", "self", ".", "lyft_eval", "(", "det_annos", ",", "class_names", ",", "\n", "iou_thresholds", "=", "self", ".", "dataset_cfg", ".", "EVAL_LYFT_IOU_LIST", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.lyft_eval": [[189, 205], ["Lyft", "lyft_utils.convert_det_to_lyft_format", "lyft_utils.load_lyft_gt_by_tokens", "get_average_precisions", "lyft_utils.format_lyft_results"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.convert_det_to_lyft_format", "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.load_lyft_gt_by_tokens", "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.get_average_precisions", "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.format_lyft_results"], ["", "", "def", "lyft_eval", "(", "self", ",", "det_annos", ",", "class_names", ",", "iou_thresholds", "=", "[", "0.5", "]", ")", ":", "\n", "        ", "from", "lyft_dataset_sdk", ".", "lyftdataset", "import", "LyftDataset", "as", "Lyft", "\n", "from", ".", "import", "lyft_utils", "\n", "# from lyft_dataset_sdk.eval.detection.mAP_evaluation import get_average_precisions", "\n", "from", ".", "lyft_mAP_eval", ".", "lyft_eval", "import", "get_average_precisions", "\n", "\n", "lyft", "=", "Lyft", "(", "json_path", "=", "self", ".", "root_path", "/", "'data'", ",", "data_path", "=", "self", ".", "root_path", ",", "verbose", "=", "True", ")", "\n", "\n", "det_lyft_boxes", ",", "sample_tokens", "=", "lyft_utils", ".", "convert_det_to_lyft_format", "(", "lyft", ",", "det_annos", ")", "\n", "gt_lyft_boxes", "=", "lyft_utils", ".", "load_lyft_gt_by_tokens", "(", "lyft", ",", "sample_tokens", ")", "\n", "\n", "average_precisions", "=", "get_average_precisions", "(", "gt_lyft_boxes", ",", "det_lyft_boxes", ",", "class_names", ",", "iou_thresholds", ")", "\n", "\n", "ap_result_str", ",", "ap_dict", "=", "lyft_utils", ".", "format_lyft_results", "(", "average_precisions", ",", "class_names", ",", "iou_thresholds", ",", "version", "=", "self", ".", "dataset_cfg", ".", "VERSION", ")", "\n", "\n", "return", "ap_result_str", ",", "ap_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.create_groundtruth_database": [[206, 249], ["database_save_path.mkdir", "tqdm.tqdm.tqdm", "all_db_infos.items", "range", "lyft_dataset.LyftDataset.get_lidar_with_sweeps", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze().cpu().numpy", "range", "print", "open", "pickle.dump", "len", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze().cpu", "open", "gt_points.tofile", "str", "filepath.relative_to", "all_db_infos[].append", "len", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.get_lidar_with_sweeps", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu"], ["", "def", "create_groundtruth_database", "(", "self", ",", "used_classes", "=", "None", ",", "max_sweeps", "=", "10", ")", ":", "\n", "        ", "import", "torch", "\n", "\n", "database_save_path", "=", "self", ".", "root_path", "/", "f'gt_database'", "\n", "db_info_save_path", "=", "self", ".", "root_path", "/", "f'lyft_dbinfos_{max_sweeps}sweeps.pkl'", "\n", "\n", "database_save_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "all_db_infos", "=", "{", "}", "\n", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "infos", ")", ")", ")", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "info", "=", "self", ".", "infos", "[", "idx", "]", "\n", "points", "=", "self", ".", "get_lidar_with_sweeps", "(", "idx", ",", "max_sweeps", "=", "max_sweeps", ")", "\n", "gt_boxes", "=", "info", "[", "'gt_boxes'", "]", "\n", "gt_names", "=", "info", "[", "'gt_names'", "]", "\n", "\n", "box_idxs_of_pts", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_gpu", "(", "\n", "torch", ".", "from_numpy", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", ")", ".", "long", "(", ")", ".", "squeeze", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "filename", "=", "'%s_%s_%d.bin'", "%", "(", "sample_idx", ",", "gt_names", "[", "i", "]", ",", "i", ")", "\n", "filepath", "=", "database_save_path", "/", "filename", "\n", "gt_points", "=", "points", "[", "box_idxs_of_pts", "==", "i", "]", "\n", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "gt_boxes", "[", "i", ",", ":", "3", "]", "\n", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "gt_points", ".", "tofile", "(", "f", ")", "\n", "\n", "", "if", "(", "used_classes", "is", "None", ")", "or", "gt_names", "[", "i", "]", "in", "used_classes", ":", "\n", "                    ", "db_path", "=", "str", "(", "filepath", ".", "relative_to", "(", "self", ".", "root_path", ")", ")", "# gt_database/xxxxx.bin", "\n", "db_info", "=", "{", "'name'", ":", "gt_names", "[", "i", "]", ",", "'path'", ":", "db_path", ",", "'image_idx'", ":", "sample_idx", ",", "'gt_idx'", ":", "i", ",", "\n", "'box3d_lidar'", ":", "gt_boxes", "[", "i", "]", ",", "'num_points_in_gt'", ":", "gt_points", ".", "shape", "[", "0", "]", "}", "\n", "if", "gt_names", "[", "i", "]", "in", "all_db_infos", ":", "\n", "                        ", "all_db_infos", "[", "gt_names", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "else", ":", "\n", "                        ", "all_db_infos", "[", "gt_names", "[", "i", "]", "]", "=", "[", "db_info", "]", "\n", "", "", "", "", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Database %s: %d'", "%", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "\n", "", "with", "open", "(", "db_info_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.create_lyft_info": [[251, 307], ["save_path.mkdir", "lyft_dataset.LyftDataset", "lyft_utils.get_available_scenes", "list", "list", "set", "set", "print", "lyft_utils.fill_trainval_infos", "train_split_path.exists", "filter", "filter", "print", "print", "x.strip", "val_split_path.exists", "x.strip", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open().readlines", "open().readlines", "len", "len", "len", "len", "len", "open", "open", "available_scene_names.index", "available_scene_names.index"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.get_available_scenes", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.fill_trainval_infos"], ["", "", "", "def", "create_lyft_info", "(", "version", ",", "data_path", ",", "save_path", ",", "split", ",", "max_sweeps", "=", "10", ")", ":", "\n", "    ", "from", "lyft_dataset_sdk", ".", "lyftdataset", "import", "LyftDataset", "\n", "from", ".", "import", "lyft_utils", "\n", "data_path", "=", "data_path", "/", "version", "\n", "save_path", "=", "save_path", "/", "version", "\n", "split_path", "=", "data_path", ".", "parent", "/", "'ImageSets'", "\n", "\n", "if", "split", "is", "not", "None", ":", "\n", "        ", "save_path", "=", "save_path", "/", "split", "\n", "split_path", "=", "split_path", "/", "split", "\n", "\n", "", "save_path", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "assert", "version", "in", "[", "'trainval'", ",", "'one_scene'", ",", "'test'", "]", "\n", "\n", "if", "version", "==", "'trainval'", ":", "\n", "        ", "train_split_path", "=", "split_path", "/", "'train.txt'", "\n", "val_split_path", "=", "split_path", "/", "'val.txt'", "\n", "", "elif", "version", "==", "'test'", ":", "\n", "        ", "train_split_path", "=", "split_path", "/", "'test.txt'", "\n", "val_split_path", "=", "None", "\n", "", "elif", "version", "==", "'one_scene'", ":", "\n", "        ", "train_split_path", "=", "split_path", "/", "'one_scene.txt'", "\n", "val_split_path", "=", "split_path", "/", "'one_scene.txt'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "train_scenes", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "train_split_path", ")", ".", "readlines", "(", ")", "]", "if", "train_split_path", ".", "exists", "(", ")", "else", "[", "]", "\n", "val_scenes", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "val_split_path", ")", ".", "readlines", "(", ")", "]", "if", "val_split_path", "is", "not", "None", "and", "val_split_path", ".", "exists", "(", ")", "else", "[", "]", "\n", "\n", "lyft", "=", "LyftDataset", "(", "json_path", "=", "data_path", "/", "'data'", ",", "data_path", "=", "data_path", ",", "verbose", "=", "True", ")", "\n", "\n", "available_scenes", "=", "lyft_utils", ".", "get_available_scenes", "(", "lyft", ")", "\n", "available_scene_names", "=", "[", "s", "[", "'name'", "]", "for", "s", "in", "available_scenes", "]", "\n", "train_scenes", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "available_scene_names", ",", "train_scenes", ")", ")", "\n", "val_scenes", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "available_scene_names", ",", "val_scenes", ")", ")", "\n", "train_scenes", "=", "set", "(", "[", "available_scenes", "[", "available_scene_names", ".", "index", "(", "s", ")", "]", "[", "'token'", "]", "for", "s", "in", "train_scenes", "]", ")", "\n", "val_scenes", "=", "set", "(", "[", "available_scenes", "[", "available_scene_names", ".", "index", "(", "s", ")", "]", "[", "'token'", "]", "for", "s", "in", "val_scenes", "]", ")", "\n", "\n", "print", "(", "'%s: train scene(%d), val scene(%d)'", "%", "(", "version", ",", "len", "(", "train_scenes", ")", ",", "len", "(", "val_scenes", ")", ")", ")", "\n", "\n", "train_lyft_infos", ",", "val_lyft_infos", "=", "lyft_utils", ".", "fill_trainval_infos", "(", "\n", "data_path", "=", "data_path", ",", "lyft", "=", "lyft", ",", "train_scenes", "=", "train_scenes", ",", "val_scenes", "=", "val_scenes", ",", "\n", "test", "=", "'test'", "in", "version", ",", "max_sweeps", "=", "max_sweeps", "\n", ")", "\n", "\n", "if", "version", "==", "'test'", ":", "\n", "        ", "print", "(", "'test sample: %d'", "%", "len", "(", "train_lyft_infos", ")", ")", "\n", "with", "open", "(", "save_path", "/", "f'lyft_infos_test.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "train_lyft_infos", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'train sample: %d, val sample: %d'", "%", "(", "len", "(", "train_lyft_infos", ")", ",", "len", "(", "val_lyft_infos", ")", ")", ")", "\n", "with", "open", "(", "save_path", "/", "f'lyft_infos_train.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "train_lyft_infos", ",", "f", ")", "\n", "", "with", "open", "(", "save_path", "/", "f'lyft_infos_val.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "val_lyft_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.get_available_scenes": [[18, 44], ["print", "print", "len", "lyft.get", "lyft.get", "lyft.get", "available_scenes.append", "len", "lyft.get_sample_data", "pathlib.Path().exists", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.get_sample_data"], ["def", "get_available_scenes", "(", "lyft", ")", ":", "\n", "    ", "available_scenes", "=", "[", "]", "\n", "print", "(", "'total scene num:'", ",", "len", "(", "lyft", ".", "scene", ")", ")", "\n", "for", "scene", "in", "lyft", ".", "scene", ":", "\n", "        ", "scene_token", "=", "scene", "[", "'token'", "]", "\n", "scene_rec", "=", "lyft", ".", "get", "(", "'scene'", ",", "scene_token", ")", "\n", "sample_rec", "=", "lyft", ".", "get", "(", "'sample'", ",", "scene_rec", "[", "'first_sample_token'", "]", ")", "\n", "sd_rec", "=", "lyft", ".", "get", "(", "'sample_data'", ",", "sample_rec", "[", "'data'", "]", "[", "'LIDAR_TOP'", "]", ")", "\n", "has_more_frames", "=", "True", "\n", "scene_not_exist", "=", "False", "\n", "while", "has_more_frames", ":", "\n", "            ", "lidar_path", ",", "boxes", ",", "_", "=", "lyft", ".", "get_sample_data", "(", "sd_rec", "[", "'token'", "]", ")", "\n", "if", "not", "Path", "(", "lidar_path", ")", ".", "exists", "(", ")", ":", "\n", "                ", "scene_not_exist", "=", "True", "\n", "break", "\n", "", "else", ":", "\n", "                ", "break", "\n", "# if not sd_rec['next'] == '':", "\n", "#     sd_rec = nusc.get('sample_data', sd_rec['next'])", "\n", "# else:", "\n", "#     has_more_frames = False", "\n", "", "", "if", "scene_not_exist", ":", "\n", "            ", "continue", "\n", "", "available_scenes", ".", "append", "(", "scene", ")", "\n", "", "print", "(", "'exist scene num:'", ",", "len", "(", "available_scenes", ")", ")", "\n", "return", "available_scenes", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.get_sample_data": [[46, 66], ["lyft.get", "lyft.get", "lyft.get", "lyft.get", "lyft.get_boxes", "box.translate", "box.rotate", "box.translate", "box.rotate", "box_list.append", "numpy.array", "lyft_dataset_sdk.utils.data_classes.Quaternion", "numpy.array", "lyft_dataset_sdk.utils.data_classes.Quaternion"], "function", ["None"], ["", "def", "get_sample_data", "(", "lyft", ",", "sample_data_token", ")", ":", "\n", "    ", "sd_rec", "=", "lyft", ".", "get", "(", "\"sample_data\"", ",", "sample_data_token", ")", "\n", "cs_rec", "=", "lyft", ".", "get", "(", "\"calibrated_sensor\"", ",", "sd_rec", "[", "\"calibrated_sensor_token\"", "]", ")", "\n", "\n", "sensor_rec", "=", "lyft", ".", "get", "(", "\"sensor\"", ",", "cs_rec", "[", "\"sensor_token\"", "]", ")", "\n", "pose_rec", "=", "lyft", ".", "get", "(", "\"ego_pose\"", ",", "sd_rec", "[", "\"ego_pose_token\"", "]", ")", "\n", "\n", "boxes", "=", "lyft", ".", "get_boxes", "(", "sample_data_token", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "        ", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "pose_rec", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "pose_rec", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "cs_rec", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "cs_rec", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "\n", "", "return", "box_list", ",", "pose_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.quaternion_yaw": [[68, 84], ["numpy.dot", "numpy.arctan2", "numpy.array"], "function", ["None"], ["", "def", "quaternion_yaw", "(", "q", ":", "Quaternion", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Calculate the yaw angle from a quaternion.\n    Note that this only works for a quaternion that represents a box in lidar or global coordinate frame.\n    It does not work for a box in the camera frame.\n    :param q: Quaternion of interest.\n    :return: Yaw angle in radians.\n    \"\"\"", "\n", "\n", "# Project into xy plane.", "\n", "v", "=", "np", ".", "dot", "(", "q", ".", "rotation_matrix", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ")", "\n", "\n", "# Measure yaw using arctan.", "\n", "yaw", "=", "np", ".", "arctan2", "(", "v", "[", "1", "]", ",", "v", "[", "0", "]", ")", "\n", "\n", "return", "yaw", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.fill_trainval_infos": [[86, 222], ["tqdm.tqdm", "enumerate", "tqdm.tqdm.close", "tqdm.tqdm.update", "lyft.get", "lyft.get", "lyft_dataset_sdk.utils.geometry_utils.transform_matrix", "lyft_dataset_sdk.utils.geometry_utils.transform_matrix", "lyft.get_sample_data_path", "lyft_utils.get_sample_data", "lyft_dataset_sdk.utils.geometry_utils.transform_matrix", "lyft_dataset_sdk.utils.geometry_utils.transform_matrix", "lyft.get", "len", "lyft_dataset_sdk.utils.data_classes.Quaternion", "lyft_dataset_sdk.utils.data_classes.Quaternion", "lyft_dataset_sdk.utils.data_classes.Quaternion", "lyft_dataset_sdk.utils.data_classes.Quaternion", "pathlib.Path().relative_to().__str__", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array().reshape", "numpy.concatenate", "train_lyft_infos.append", "val_lyft_infos.append", "lyft.get", "lyft.get", "lyft_dataset_sdk.utils.geometry_utils.transform_matrix", "lyft.get", "lyft_dataset_sdk.utils.geometry_utils.transform_matrix", "functools.reduce", "lyft.get_sample_data_path", "sweeps.append", "lyft.get", "numpy.array().reshape", "len", "len", "pathlib.Path().relative_to", "len", "sweeps.append", "sweeps.append", "lyft_dataset_sdk.utils.data_classes.Quaternion", "lyft_dataset_sdk.utils.data_classes.Quaternion", "pathlib.Path().relative_to().__str__", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pathlib.Path().relative_to().__str__", "numpy.array", "pathlib.Path", "pathlib.Path().relative_to", "lyft_utils.quaternion_yaw", "pathlib.Path().relative_to", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.get_sample_data", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.quaternion_yaw"], ["", "def", "fill_trainval_infos", "(", "data_path", ",", "lyft", ",", "train_scenes", ",", "val_scenes", ",", "test", "=", "False", ",", "max_sweeps", "=", "10", ")", ":", "\n", "    ", "train_lyft_infos", "=", "[", "]", "\n", "val_lyft_infos", "=", "[", "]", "\n", "progress_bar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "lyft", ".", "sample", ")", ",", "desc", "=", "'create_info'", ",", "dynamic_ncols", "=", "True", ")", "\n", "\n", "# ref_chans = [\"LIDAR_TOP\", \"LIDAR_FRONT_LEFT\", \"LIDAR_FRONT_RIGHT\"]", "\n", "ref_chan", "=", "\"LIDAR_TOP\"", "\n", "\n", "for", "index", ",", "sample", "in", "enumerate", "(", "lyft", ".", "sample", ")", ":", "\n", "        ", "progress_bar", ".", "update", "(", ")", "\n", "\n", "ref_info", "=", "{", "}", "\n", "ref_sd_token", "=", "sample", "[", "\"data\"", "]", "[", "ref_chan", "]", "\n", "ref_sd_rec", "=", "lyft", ".", "get", "(", "\"sample_data\"", ",", "ref_sd_token", ")", "\n", "ref_cs_token", "=", "ref_sd_rec", "[", "\"calibrated_sensor_token\"", "]", "\n", "ref_cs_rec", "=", "lyft", ".", "get", "(", "\"calibrated_sensor\"", ",", "ref_cs_token", ")", "\n", "\n", "ref_to_car", "=", "transform_matrix", "(", "\n", "ref_cs_rec", "[", "\"translation\"", "]", ",", "\n", "Quaternion", "(", "ref_cs_rec", "[", "\"rotation\"", "]", ")", ",", "\n", "inverse", "=", "False", ",", "\n", ")", "\n", "\n", "ref_from_car", "=", "transform_matrix", "(", "\n", "ref_cs_rec", "[", "\"translation\"", "]", ",", "\n", "Quaternion", "(", "ref_cs_rec", "[", "\"rotation\"", "]", ")", ",", "\n", "inverse", "=", "True", ",", "\n", ")", "\n", "\n", "ref_lidar_path", "=", "lyft", ".", "get_sample_data_path", "(", "ref_sd_token", ")", "\n", "\n", "ref_boxes", ",", "ref_pose_rec", "=", "get_sample_data", "(", "lyft", ",", "ref_sd_token", ")", "\n", "ref_time", "=", "1e-6", "*", "ref_sd_rec", "[", "\"timestamp\"", "]", "\n", "car_from_global", "=", "transform_matrix", "(", "\n", "ref_pose_rec", "[", "\"translation\"", "]", ",", "\n", "Quaternion", "(", "ref_pose_rec", "[", "\"rotation\"", "]", ")", ",", "\n", "inverse", "=", "True", ",", "\n", ")", "\n", "\n", "car_to_global", "=", "transform_matrix", "(", "\n", "ref_pose_rec", "[", "\"translation\"", "]", ",", "\n", "Quaternion", "(", "ref_pose_rec", "[", "\"rotation\"", "]", ")", ",", "\n", "inverse", "=", "False", ",", "\n", ")", "\n", "\n", "info", "=", "{", "\n", "\"lidar_path\"", ":", "Path", "(", "ref_lidar_path", ")", ".", "relative_to", "(", "data_path", ")", ".", "__str__", "(", ")", ",", "\n", "\"ref_from_car\"", ":", "ref_from_car", ",", "\n", "\"ref_to_car\"", ":", "ref_to_car", ",", "\n", "'token'", ":", "sample", "[", "'token'", "]", ",", "\n", "'car_from_global'", ":", "car_from_global", ",", "\n", "'car_to_global'", ":", "car_to_global", ",", "\n", "'timestamp'", ":", "ref_time", ",", "\n", "'sweeps'", ":", "[", "]", "\n", "}", "\n", "\n", "sample_data_token", "=", "sample", "[", "'data'", "]", "[", "ref_chan", "]", "\n", "curr_sd_rec", "=", "lyft", ".", "get", "(", "'sample_data'", ",", "sample_data_token", ")", "\n", "sweeps", "=", "[", "]", "\n", "\n", "while", "len", "(", "sweeps", ")", "<", "max_sweeps", "-", "1", ":", "\n", "            ", "if", "curr_sd_rec", "[", "'prev'", "]", "==", "''", ":", "\n", "                ", "if", "len", "(", "sweeps", ")", "==", "0", ":", "\n", "                    ", "sweep", "=", "{", "\n", "'lidar_path'", ":", "Path", "(", "ref_lidar_path", ")", ".", "relative_to", "(", "data_path", ")", ".", "__str__", "(", ")", ",", "\n", "'sample_data_token'", ":", "curr_sd_rec", "[", "'token'", "]", ",", "\n", "'transform_matrix'", ":", "None", ",", "\n", "'time_lag'", ":", "curr_sd_rec", "[", "'timestamp'", "]", "*", "0", ",", "\n", "}", "\n", "sweeps", ".", "append", "(", "sweep", ")", "\n", "", "else", ":", "\n", "                    ", "sweeps", ".", "append", "(", "sweeps", "[", "-", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "curr_sd_rec", "=", "lyft", ".", "get", "(", "'sample_data'", ",", "curr_sd_rec", "[", "'prev'", "]", ")", "\n", "\n", "# Get past pose", "\n", "current_pose_rec", "=", "lyft", ".", "get", "(", "'ego_pose'", ",", "curr_sd_rec", "[", "'ego_pose_token'", "]", ")", "\n", "global_from_car", "=", "transform_matrix", "(", "\n", "current_pose_rec", "[", "'translation'", "]", ",", "Quaternion", "(", "current_pose_rec", "[", "'rotation'", "]", ")", ",", "inverse", "=", "False", ",", "\n", ")", "\n", "\n", "# Homogeneous transformation matrix from sensor coordinate frame to ego car frame.", "\n", "current_cs_rec", "=", "lyft", ".", "get", "(", "\n", "'calibrated_sensor'", ",", "curr_sd_rec", "[", "'calibrated_sensor_token'", "]", "\n", ")", "\n", "car_from_current", "=", "transform_matrix", "(", "\n", "current_cs_rec", "[", "'translation'", "]", ",", "Quaternion", "(", "current_cs_rec", "[", "'rotation'", "]", ")", ",", "inverse", "=", "False", ",", "\n", ")", "\n", "\n", "tm", "=", "reduce", "(", "np", ".", "dot", ",", "[", "ref_from_car", ",", "car_from_global", ",", "global_from_car", ",", "car_from_current", "]", ")", "\n", "\n", "lidar_path", "=", "lyft", ".", "get_sample_data_path", "(", "curr_sd_rec", "[", "'token'", "]", ")", "\n", "\n", "time_lag", "=", "ref_time", "-", "1e-6", "*", "curr_sd_rec", "[", "'timestamp'", "]", "\n", "\n", "sweep", "=", "{", "\n", "'lidar_path'", ":", "Path", "(", "lidar_path", ")", ".", "relative_to", "(", "data_path", ")", ".", "__str__", "(", ")", ",", "\n", "'sample_data_token'", ":", "curr_sd_rec", "[", "'token'", "]", ",", "\n", "'transform_matrix'", ":", "tm", ",", "\n", "'global_from_car'", ":", "global_from_car", ",", "\n", "'car_from_current'", ":", "car_from_current", ",", "\n", "'time_lag'", ":", "time_lag", ",", "\n", "}", "\n", "sweeps", ".", "append", "(", "sweep", ")", "\n", "\n", "", "", "info", "[", "'sweeps'", "]", "=", "sweeps", "\n", "\n", "if", "not", "test", ":", "\n", "            ", "annotations", "=", "[", "\n", "lyft", ".", "get", "(", "\"sample_annotation\"", ",", "token", ")", "for", "token", "in", "sample", "[", "\"anns\"", "]", "\n", "]", "\n", "\n", "locs", "=", "np", ".", "array", "(", "[", "b", ".", "center", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "dims", "=", "np", ".", "array", "(", "[", "b", ".", "wlh", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "\n", "rots", "=", "np", ".", "array", "(", "[", "quaternion_yaw", "(", "b", ".", "orientation", ")", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "\n", "-", "1", ",", "1", "\n", ")", "\n", "velocity", "=", "np", ".", "array", "(", "[", "b", ".", "velocity", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "names", "=", "np", ".", "array", "(", "[", "b", ".", "name", "for", "b", "in", "ref_boxes", "]", ")", "\n", "tokens", "=", "np", ".", "array", "(", "[", "b", ".", "token", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "locs", ",", "dims", ",", "rots", "]", ",", "axis", "=", "1", ")", "\n", "\n", "assert", "len", "(", "annotations", ")", "==", "len", "(", "gt_boxes", ")", "\n", "\n", "info", "[", "\"gt_boxes\"", "]", "=", "gt_boxes", "\n", "info", "[", "\"gt_boxes_velocity\"", "]", "=", "velocity", "\n", "info", "[", "\"gt_names\"", "]", "=", "names", "\n", "info", "[", "\"gt_boxes_token\"", "]", "=", "tokens", "\n", "\n", "", "if", "sample", "[", "\"scene_token\"", "]", "in", "train_scenes", ":", "\n", "            ", "train_lyft_infos", ".", "append", "(", "info", ")", "\n", "", "else", ":", "\n", "            ", "val_lyft_infos", ".", "append", "(", "info", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "return", "train_lyft_infos", ",", "val_lyft_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.boxes_lidar_to_lyft": [[223, 235], ["range", "lyft_dataset_sdk.utils.data_classes.Quaternion", "lyft_dataset_sdk.utils.data_classes.Box", "box_list.append"], "function", ["None"], ["", "def", "boxes_lidar_to_lyft", "(", "boxes3d", ",", "scores", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "    ", "box_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "boxes3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "quat", "=", "Quaternion", "(", "axis", "=", "[", "0", ",", "0", ",", "1", "]", ",", "radians", "=", "boxes3d", "[", "k", ",", "6", "]", ")", "\n", "box", "=", "Box", "(", "\n", "boxes3d", "[", "k", ",", ":", "3", "]", ",", "\n", "boxes3d", "[", "k", ",", "[", "4", ",", "3", ",", "5", "]", "]", ",", "# wlh", "\n", "quat", ",", "label", "=", "labels", "[", "k", "]", "if", "labels", "is", "not", "None", "else", "np", ".", "nan", ",", "\n", "score", "=", "scores", "[", "k", "]", "if", "scores", "is", "not", "None", "else", "np", ".", "nan", ",", "\n", ")", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "", "return", "box_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.lidar_lyft_box_to_global": [[237, 256], ["lyft.get", "lyft.get", "lyft.get", "lyft.get", "lyft.get", "box.rotate", "box.translate", "box.rotate", "box.translate", "box_list.append", "lyft_dataset_sdk.utils.data_classes.Quaternion", "numpy.array", "lyft_dataset_sdk.utils.data_classes.Quaternion", "numpy.array"], "function", ["None"], ["", "def", "lidar_lyft_box_to_global", "(", "lyft", ",", "boxes", ",", "sample_token", ")", ":", "\n", "    ", "s_record", "=", "lyft", ".", "get", "(", "'sample'", ",", "sample_token", ")", "\n", "sample_data_token", "=", "s_record", "[", "'data'", "]", "[", "'LIDAR_TOP'", "]", "\n", "\n", "sd_record", "=", "lyft", ".", "get", "(", "'sample_data'", ",", "sample_data_token", ")", "\n", "cs_record", "=", "lyft", ".", "get", "(", "'calibrated_sensor'", ",", "sd_record", "[", "'calibrated_sensor_token'", "]", ")", "\n", "sensor_record", "=", "lyft", ".", "get", "(", "'sensor'", ",", "cs_record", "[", "'sensor_token'", "]", ")", "\n", "pose_record", "=", "lyft", ".", "get", "(", "'ego_pose'", ",", "sd_record", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "# Move box to ego vehicle coord system", "\n", "        ", "box", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "'rotation'", "]", ")", ")", "\n", "box", ".", "translate", "(", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ")", "\n", "# Move box to global coord system", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "pose_record", "[", "'rotation'", "]", ")", ")", "\n", "box", ".", "translate", "(", "np", ".", "array", "(", "pose_record", "[", "'translation'", "]", ")", ")", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "", "return", "box_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.convert_det_to_lyft_format": [[258, 280], ["sample_tokens.append", "lyft_utils.boxes_lidar_to_lyft", "lyft_utils.lidar_lyft_box_to_global", "enumerate", "det_lyft_box.append", "box.center.tolist", "box.wlh.tolist", "box.orientation.elements.tolist"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.boxes_lidar_to_lyft", "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.lidar_lyft_box_to_global"], ["", "def", "convert_det_to_lyft_format", "(", "lyft", ",", "det_annos", ")", ":", "\n", "    ", "sample_tokens", "=", "[", "]", "\n", "det_lyft_box", "=", "[", "]", "\n", "for", "anno", "in", "det_annos", ":", "\n", "        ", "sample_tokens", ".", "append", "(", "anno", "[", "'metadata'", "]", "[", "'token'", "]", ")", "\n", "\n", "boxes_lyft_list", "=", "boxes_lidar_to_lyft", "(", "anno", "[", "'boxes_lidar'", "]", ",", "anno", "[", "'score'", "]", ",", "anno", "[", "'pred_labels'", "]", ")", "\n", "boxes_list", "=", "lidar_lyft_box_to_global", "(", "lyft", ",", "boxes_lyft_list", ",", "anno", "[", "'metadata'", "]", "[", "'token'", "]", ")", "\n", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "boxes_list", ")", ":", "\n", "            ", "name", "=", "anno", "[", "'name'", "]", "[", "idx", "]", "\n", "box3d", "=", "{", "\n", "'sample_token'", ":", "anno", "[", "'metadata'", "]", "[", "'token'", "]", ",", "\n", "'translation'", ":", "box", ".", "center", ".", "tolist", "(", ")", ",", "\n", "'size'", ":", "box", ".", "wlh", ".", "tolist", "(", ")", ",", "\n", "'rotation'", ":", "box", ".", "orientation", ".", "elements", ".", "tolist", "(", ")", ",", "\n", "'name'", ":", "name", ",", "\n", "'score'", ":", "box", ".", "score", "\n", "}", "\n", "det_lyft_box", ".", "append", "(", "box3d", ")", "\n", "\n", "", "", "return", "det_lyft_box", ",", "sample_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.load_lyft_gt_by_tokens": [[282, 317], ["lyft.get", "lyft.get", "lyft.get", "numpy.array", "lyft.get", "gt_box3ds.append"], "function", ["None"], ["", "def", "load_lyft_gt_by_tokens", "(", "lyft", ",", "sample_tokens", ")", ":", "\n", "    ", "\"\"\"\n    Modify from Lyft tutorial\n    \"\"\"", "\n", "\n", "gt_box3ds", "=", "[", "]", "\n", "\n", "# Load annotations and filter predictions and annotations.", "\n", "for", "sample_token", "in", "sample_tokens", ":", "\n", "\n", "        ", "sample", "=", "lyft", ".", "get", "(", "'sample'", ",", "sample_token", ")", "\n", "\n", "sample_annotation_tokens", "=", "sample", "[", "'anns'", "]", "\n", "\n", "sample_lidar_token", "=", "sample", "[", "\"data\"", "]", "[", "\"LIDAR_TOP\"", "]", "\n", "lidar_data", "=", "lyft", ".", "get", "(", "\"sample_data\"", ",", "sample_lidar_token", ")", "\n", "ego_pose", "=", "lyft", ".", "get", "(", "\"ego_pose\"", ",", "lidar_data", "[", "\"ego_pose_token\"", "]", ")", "\n", "ego_translation", "=", "np", ".", "array", "(", "ego_pose", "[", "'translation'", "]", ")", "\n", "\n", "for", "sample_annotation_token", "in", "sample_annotation_tokens", ":", "\n", "            ", "sample_annotation", "=", "lyft", ".", "get", "(", "'sample_annotation'", ",", "sample_annotation_token", ")", "\n", "sample_annotation_translation", "=", "sample_annotation", "[", "'translation'", "]", "\n", "\n", "class_name", "=", "sample_annotation", "[", "'category_name'", "]", "\n", "\n", "box3d", "=", "{", "\n", "'sample_token'", ":", "sample_token", ",", "\n", "'translation'", ":", "sample_annotation_translation", ",", "\n", "'size'", ":", "sample_annotation", "[", "'size'", "]", ",", "\n", "'rotation'", ":", "sample_annotation", "[", "'rotation'", "]", ",", "\n", "'name'", ":", "class_name", "\n", "}", "\n", "gt_box3ds", ".", "append", "(", "box3d", ")", "\n", "\n", "", "", "return", "gt_box3ds", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_utils.format_lyft_results": [[319, 333], ["enumerate", "numpy.mean", "str"], "function", ["None"], ["", "def", "format_lyft_results", "(", "classwise_ap", ",", "class_names", ",", "iou_threshold_list", ",", "version", "=", "'trainval'", ")", ":", "\n", "    ", "ret_dict", "=", "{", "}", "\n", "result", "=", "'----------------Lyft %s results-----------------\\n'", "%", "version", "\n", "result", "+=", "'Average precision over IoUs: {}\\n'", ".", "format", "(", "str", "(", "iou_threshold_list", ")", ")", "\n", "for", "c_idx", ",", "class_name", "in", "enumerate", "(", "class_names", ")", ":", "\n", "        ", "result", "+=", "'{:<20}: \\t {:.4f}\\n'", ".", "format", "(", "class_name", ",", "classwise_ap", "[", "c_idx", "]", ")", "\n", "ret_dict", "[", "class_name", "]", "=", "classwise_ap", "[", "c_idx", "]", "\n", "\n", "", "result", "+=", "'--------------average performance-------------\\n'", "\n", "mAP", "=", "np", ".", "mean", "(", "classwise_ap", ")", "\n", "result", "+=", "'mAP:\\t {:.4f}\\n'", ".", "format", "(", "mAP", ")", "\n", "\n", "ret_dict", "[", "'mAP'", "]", "=", "mAP", "\n", "return", "result", ",", "ret_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.__init__": [[57, 110], ["kwargs.get", "numpy.any", "numpy.any", "numpy.any", "numpy.prod", "numpy.all", "pyquaternion.Quaternion", "lyft_eval.Box3D.get_ground_bbox_coords", "isinstance", "TypeError", "ValueError", "numpy.isnan", "ValueError", "ValueError", "numpy.isnan", "ValueError", "ValueError", "numpy.isnan", "ValueError", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.get_ground_bbox_coords"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "sample_token", "=", "kwargs", "[", "\"sample_token\"", "]", "\n", "translation", "=", "kwargs", "[", "\"translation\"", "]", "\n", "size", "=", "kwargs", "[", "\"size\"", "]", "\n", "rotation", "=", "kwargs", "[", "\"rotation\"", "]", "\n", "name", "=", "kwargs", "[", "\"name\"", "]", "\n", "score", "=", "kwargs", ".", "get", "(", "\"score\"", ",", "-", "1", ")", "\n", "\n", "if", "not", "isinstance", "(", "sample_token", ",", "str", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Sample_token must be a string!\"", ")", "\n", "\n", "", "if", "not", "len", "(", "translation", ")", "==", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Translation must have 3 elements!\"", ")", "\n", "\n", "", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "translation", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Translation may not be NaN!\"", ")", "\n", "\n", "", "if", "not", "len", "(", "size", ")", "==", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Size must have 3 elements!\"", ")", "\n", "\n", "", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "size", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Size may not be NaN!\"", ")", "\n", "\n", "", "if", "not", "len", "(", "rotation", ")", "==", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"Rotation must have 4 elements!\"", ")", "\n", "\n", "", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "rotation", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Rotation may not be NaN!\"", ")", "\n", "\n", "", "if", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Name cannot be empty!\"", ")", "\n", "\n", "# Assign.", "\n", "", "self", ".", "sample_token", "=", "sample_token", "\n", "self", ".", "translation", "=", "translation", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "volume", "=", "np", ".", "prod", "(", "self", ".", "size", ")", "\n", "self", ".", "score", "=", "score", "\n", "\n", "assert", "np", ".", "all", "(", "[", "x", ">", "0", "for", "x", "in", "size", "]", ")", "\n", "self", ".", "rotation", "=", "rotation", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "quaternion", "=", "Quaternion", "(", "self", ".", "rotation", ")", "\n", "\n", "self", ".", "width", ",", "self", ".", "length", ",", "self", ".", "height", "=", "size", "\n", "\n", "self", ".", "center_x", ",", "self", ".", "center_y", ",", "self", ".", "center_z", "=", "self", ".", "translation", "\n", "\n", "self", ".", "min_z", "=", "self", ".", "center_z", "-", "self", ".", "height", "/", "2", "\n", "self", ".", "max_z", "=", "self", ".", "center_z", "+", "self", ".", "height", "/", "2", "\n", "\n", "self", ".", "ground_bbox_coords", "=", "None", "\n", "self", ".", "ground_bbox_coords", "=", "self", ".", "get_ground_bbox_coords", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.check_orthogonal": [[111, 115], ["numpy.isclose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "check_orthogonal", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "        ", "\"\"\"Check that vector (b - a) is orthogonal to the vector (c - a).\"\"\"", "\n", "return", "np", ".", "isclose", "(", "(", "b", "[", "0", "]", "-", "a", "[", "0", "]", ")", "*", "(", "c", "[", "0", "]", "-", "a", "[", "0", "]", ")", "+", "(", "b", "[", "1", "]", "-", "a", "[", "1", "]", ")", "*", "(", "c", "[", "1", "]", "-", "a", "[", "1", "]", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.get_ground_bbox_coords": [[116, 120], ["lyft_eval.Box3D.calculate_ground_bbox_coords"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.calculate_ground_bbox_coords"], ["", "def", "get_ground_bbox_coords", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ground_bbox_coords", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "ground_bbox_coords", "\n", "", "return", "self", ".", "calculate_ground_bbox_coords", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.calculate_ground_bbox_coords": [[121, 168], ["lyft_eval.Box3D.check_orthogonal", "lyft_eval.Box3D.check_orthogonal", "lyft_eval.Box3D.check_orthogonal", "lyft_eval.Box3D.check_orthogonal", "shapely.geometry.Polygon"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.check_orthogonal", "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.check_orthogonal", "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.check_orthogonal", "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.check_orthogonal"], ["", "def", "calculate_ground_bbox_coords", "(", "self", ")", ":", "\n", "        ", "\"\"\"We assume that the 3D box has lower plane parallel to the ground.\n\n        Returns: Polygon with 4 points describing the base.\n\n        \"\"\"", "\n", "if", "self", ".", "ground_bbox_coords", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "ground_bbox_coords", "\n", "\n", "", "rotation_matrix", "=", "self", ".", "quaternion", ".", "rotation_matrix", "\n", "\n", "cos_angle", "=", "rotation_matrix", "[", "0", ",", "0", "]", "\n", "sin_angle", "=", "rotation_matrix", "[", "1", ",", "0", "]", "\n", "\n", "point_0_x", "=", "self", ".", "center_x", "+", "self", ".", "length", "/", "2", "*", "cos_angle", "+", "self", ".", "width", "/", "2", "*", "sin_angle", "\n", "point_0_y", "=", "self", ".", "center_y", "+", "self", ".", "length", "/", "2", "*", "sin_angle", "-", "self", ".", "width", "/", "2", "*", "cos_angle", "\n", "\n", "point_1_x", "=", "self", ".", "center_x", "+", "self", ".", "length", "/", "2", "*", "cos_angle", "-", "self", ".", "width", "/", "2", "*", "sin_angle", "\n", "point_1_y", "=", "self", ".", "center_y", "+", "self", ".", "length", "/", "2", "*", "sin_angle", "+", "self", ".", "width", "/", "2", "*", "cos_angle", "\n", "\n", "point_2_x", "=", "self", ".", "center_x", "-", "self", ".", "length", "/", "2", "*", "cos_angle", "-", "self", ".", "width", "/", "2", "*", "sin_angle", "\n", "point_2_y", "=", "self", ".", "center_y", "-", "self", ".", "length", "/", "2", "*", "sin_angle", "+", "self", ".", "width", "/", "2", "*", "cos_angle", "\n", "\n", "point_3_x", "=", "self", ".", "center_x", "-", "self", ".", "length", "/", "2", "*", "cos_angle", "+", "self", ".", "width", "/", "2", "*", "sin_angle", "\n", "point_3_y", "=", "self", ".", "center_y", "-", "self", ".", "length", "/", "2", "*", "sin_angle", "-", "self", ".", "width", "/", "2", "*", "cos_angle", "\n", "\n", "point_0", "=", "point_0_x", ",", "point_0_y", "\n", "point_1", "=", "point_1_x", ",", "point_1_y", "\n", "point_2", "=", "point_2_x", ",", "point_2_y", "\n", "point_3", "=", "point_3_x", ",", "point_3_y", "\n", "\n", "assert", "self", ".", "check_orthogonal", "(", "point_0", ",", "point_1", ",", "point_3", ")", "\n", "assert", "self", ".", "check_orthogonal", "(", "point_1", ",", "point_0", ",", "point_2", ")", "\n", "assert", "self", ".", "check_orthogonal", "(", "point_2", ",", "point_1", ",", "point_3", ")", "\n", "assert", "self", ".", "check_orthogonal", "(", "point_3", ",", "point_0", ",", "point_2", ")", "\n", "\n", "self", ".", "ground_bbox_coords", "=", "Polygon", "(", "\n", "[", "\n", "(", "point_0_x", ",", "point_0_y", ")", ",", "\n", "(", "point_1_x", ",", "point_1_y", ")", ",", "\n", "(", "point_2_x", ",", "point_2_y", ")", ",", "\n", "(", "point_3_x", ",", "point_3_y", ")", ",", "\n", "(", "point_0_x", ",", "point_0_y", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "return", "self", ".", "ground_bbox_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.get_height_intersection": [[169, 174], ["max", "min", "max"], "methods", ["None"], ["", "def", "get_height_intersection", "(", "self", ",", "other", ")", ":", "\n", "        ", "min_z", "=", "max", "(", "other", ".", "min_z", ",", "self", ".", "min_z", ")", "\n", "max_z", "=", "min", "(", "other", ".", "max_z", ",", "self", ".", "max_z", ")", "\n", "\n", "return", "max", "(", "0", ",", "max_z", "-", "min_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.get_area_intersection": [[175, 181], ["lyft_eval.Box3D.ground_bbox_coords.intersection"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.intersection"], ["", "def", "get_area_intersection", "(", "self", ",", "other", ")", "->", "float", ":", "\n", "        ", "result", "=", "self", ".", "ground_bbox_coords", ".", "intersection", "(", "other", ".", "ground_bbox_coords", ")", ".", "area", "\n", "\n", "assert", "result", "<=", "self", ".", "width", "*", "self", ".", "length", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.get_intersection": [[182, 188], ["lyft_eval.Box3D.get_height_intersection", "lyft_eval.Box3D.ground_bbox_coords.intersection"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.get_height_intersection", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.intersection"], ["", "def", "get_intersection", "(", "self", ",", "other", ")", "->", "float", ":", "\n", "        ", "height_intersection", "=", "self", ".", "get_height_intersection", "(", "other", ")", "\n", "\n", "area_intersection", "=", "self", ".", "ground_bbox_coords", ".", "intersection", "(", "other", ".", "ground_bbox_coords", ")", ".", "area", "\n", "\n", "return", "height_intersection", "*", "area_intersection", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.get_iou": [[189, 196], ["lyft_eval.Box3D.get_intersection", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.get_intersection"], ["", "def", "get_iou", "(", "self", ",", "other", ")", ":", "\n", "        ", "intersection", "=", "self", ".", "get_intersection", "(", "other", ")", "\n", "union", "=", "self", ".", "volume", "+", "other", ".", "volume", "-", "intersection", "\n", "\n", "iou", "=", "np", ".", "clip", "(", "intersection", "/", "union", ",", "0", ",", "1", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.__repr__": [[197, 199], ["str", "lyft_eval.Box3D.serialize"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.serialize"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "serialize", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.serialize": [[200, 211], ["None"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Returns: Serialized instance as dict.\"\"\"", "\n", "\n", "return", "{", "\n", "\"sample_token\"", ":", "self", ".", "sample_token", ",", "\n", "\"translation\"", ":", "self", ".", "translation", ",", "\n", "\"size\"", ":", "self", ".", "size", ",", "\n", "\"rotation\"", ":", "self", ".", "rotation", ",", "\n", "\"name\"", ":", "self", ".", "name", ",", "\n", "\"volume\"", ":", "self", ".", "volume", ",", "\n", "\"score\"", ":", "self", ".", "score", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.group_by_key": [[214, 219], ["collections.defaultdict", "groups[].append"], "function", ["None"], ["", "", "def", "group_by_key", "(", "detections", ",", "key", ")", ":", "\n", "    ", "groups", "=", "defaultdict", "(", "list", ")", "\n", "for", "detection", "in", "detections", ":", "\n", "        ", "groups", "[", "detection", "[", "key", "]", "]", ".", "append", "(", "detection", ")", "\n", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.wrap_in_box": [[221, 227], ["input.items", "lyft_eval.Box3D"], "function", ["None"], ["", "def", "wrap_in_box", "(", "input", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "input", ".", "items", "(", ")", ":", "\n", "        ", "result", "[", "key", "]", "=", "[", "Box3D", "(", "**", "x", ")", "for", "x", "in", "value", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.get_envelope": [[229, 241], ["range", "numpy.maximum"], "function", ["None"], ["", "def", "get_envelope", "(", "precisions", ")", ":", "\n", "    ", "\"\"\"Compute the precision envelope.\n\n    Args:\n      precisions:\n\n    Returns:\n\n    \"\"\"", "\n", "for", "i", "in", "range", "(", "precisions", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "precisions", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "precisions", "[", "i", "-", "1", "]", ",", "precisions", "[", "i", "]", ")", "\n", "", "return", "precisions", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.get_ap": [[243, 266], ["numpy.concatenate", "numpy.concatenate", "lyft_eval.get_envelope", "numpy.sum", "numpy.where"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.get_envelope"], ["", "def", "get_ap", "(", "recalls", ",", "precisions", ")", ":", "\n", "    ", "\"\"\"Calculate average precision.\n\n    Args:\n      recalls:\n      precisions: Returns (float): average precision.\n\n    Returns:\n\n    \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "recalls", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "recalls", ",", "[", "1.0", "]", ")", ")", "\n", "precisions", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "precisions", ",", "[", "0.0", "]", ")", ")", "\n", "\n", "precisions", "=", "get_envelope", "(", "precisions", ")", "\n", "\n", "# to calculate area under PR curve, look for points where X axis (recall) changes value", "\n", "i", "=", "np", ".", "where", "(", "recalls", "[", "1", ":", "]", "!=", "recalls", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "recalls", "[", "i", "+", "1", "]", "-", "recalls", "[", "i", "]", ")", "*", "precisions", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.get_ious": [[268, 270], ["predicted_box.get_iou"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.Box3D.get_iou"], ["", "def", "get_ious", "(", "gt_boxes", ",", "predicted_box", ")", ":", "\n", "    ", "return", "[", "predicted_box", ".", "get_iou", "(", "x", ")", "for", "x", "in", "gt_boxes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.recall_precision": [[272, 343], ["len", "lyft_eval.group_by_key", "lyft_eval.wrap_in_box", "sorted", "len", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.cumsum", "numpy.cumsum", "range", "numpy.zeros", "lyft_eval.Box3D", "enumerate", "float", "numpy.all", "numpy.all", "numpy.maximum", "numpy.all", "numpy.all", "len", "lyft_eval.get_ap", "ap_list.append", "wrap_in_box.items", "len", "len", "len", "lyft_eval.get_ious", "numpy.max", "numpy.argmax", "len", "len", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.group_by_key", "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.wrap_in_box", "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.get_ap", "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.get_ious"], ["", "def", "recall_precision", "(", "gt", ",", "predictions", ",", "iou_threshold_list", ")", ":", "\n", "    ", "num_gts", "=", "len", "(", "gt", ")", "\n", "\n", "if", "num_gts", "==", "0", ":", "\n", "        ", "return", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n", "", "image_gts", "=", "group_by_key", "(", "gt", ",", "\"sample_token\"", ")", "\n", "image_gts", "=", "wrap_in_box", "(", "image_gts", ")", "\n", "\n", "sample_gt_checked", "=", "{", "sample_token", ":", "np", ".", "zeros", "(", "(", "len", "(", "boxes", ")", ",", "len", "(", "iou_threshold_list", ")", ")", ")", "for", "sample_token", ",", "boxes", "in", "image_gts", ".", "items", "(", ")", "}", "\n", "\n", "predictions", "=", "sorted", "(", "predictions", ",", "key", "=", "lambda", "x", ":", "x", "[", "\"score\"", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "num_predictions", "=", "len", "(", "predictions", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "num_predictions", ",", "len", "(", "iou_threshold_list", ")", ")", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "num_predictions", ",", "len", "(", "iou_threshold_list", ")", ")", ")", "\n", "\n", "for", "prediction_index", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "predicted_box", "=", "Box3D", "(", "**", "prediction", ")", "\n", "\n", "sample_token", "=", "prediction", "[", "\"sample_token\"", "]", "\n", "\n", "max_overlap", "=", "-", "np", ".", "inf", "\n", "jmax", "=", "-", "1", "\n", "\n", "try", ":", "\n", "            ", "gt_boxes", "=", "image_gts", "[", "sample_token", "]", "# gt_boxes per sample", "\n", "gt_checked", "=", "sample_gt_checked", "[", "sample_token", "]", "# gt flags per sample", "\n", "", "except", "KeyError", ":", "\n", "            ", "gt_boxes", "=", "[", "]", "\n", "gt_checked", "=", "None", "\n", "\n", "", "if", "len", "(", "gt_boxes", ")", ">", "0", ":", "\n", "            ", "overlaps", "=", "get_ious", "(", "gt_boxes", ",", "predicted_box", ")", "\n", "\n", "max_overlap", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "for", "i", ",", "iou_threshold", "in", "enumerate", "(", "iou_threshold_list", ")", ":", "\n", "            ", "if", "max_overlap", ">", "iou_threshold", ":", "\n", "                ", "if", "gt_checked", "[", "jmax", ",", "i", "]", "==", "0", ":", "\n", "                    ", "tp", "[", "prediction_index", ",", "i", "]", "=", "1.0", "\n", "gt_checked", "[", "jmax", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "fp", "[", "prediction_index", ",", "i", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "                ", "fp", "[", "prediction_index", ",", "i", "]", "=", "1.0", "\n", "\n", "# compute precision recall", "\n", "", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ",", "axis", "=", "0", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ",", "axis", "=", "0", ")", "\n", "\n", "recalls", "=", "tp", "/", "float", "(", "num_gts", ")", "\n", "\n", "assert", "np", ".", "all", "(", "0", "<=", "recalls", ")", "&", "np", ".", "all", "(", "recalls", "<=", "1", ")", "\n", "\n", "# avoid divide by zero in case the first detection matches a difficult ground truth", "\n", "precisions", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "\n", "assert", "np", ".", "all", "(", "0", "<=", "precisions", ")", "&", "np", ".", "all", "(", "precisions", "<=", "1", ")", "\n", "\n", "ap_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "iou_threshold_list", ")", ")", ":", "\n", "        ", "recall", "=", "recalls", "[", ":", ",", "i", "]", "\n", "precision", "=", "precisions", "[", ":", ",", "i", "]", "\n", "ap", "=", "get_ap", "(", "recall", ",", "precision", ")", "\n", "ap_list", ".", "append", "(", "ap", ")", "\n", "\n", "", "return", "recalls", ",", "precisions", ",", "ap_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.get_average_precisions": [[345, 394], ["all", "lyft_eval.group_by_key", "lyft_eval.group_by_key", "numpy.zeros", "enumerate", "len", "lyft_eval.recall_precision", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.group_by_key", "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.group_by_key", "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.recall_precision"], ["", "def", "get_average_precisions", "(", "gt", ":", "list", ",", "predictions", ":", "list", ",", "class_names", ":", "list", ",", "iou_thresholds", ":", "list", ")", "->", "np", ".", "array", ":", "\n", "    ", "\"\"\"Returns an array with an average precision per class.\n\n\n    Args:\n        gt: list of dictionaries in the format described below.\n        predictions: list of dictionaries in the format described below.\n        class_names: list of the class names.\n        iou_threshold: list of IOU thresholds used to calculate TP / FN\n\n    Returns an array with an average precision per class.\n\n\n    Ground truth and predictions should have schema:\n\n    gt = [{\n    'sample_token': '0f0e3ce89d2324d8b45aa55a7b4f8207fbb039a550991a5149214f98cec136ac',\n    'translation': [974.2811881299899, 1714.6815014457964, -23.689857123368846],\n    'size': [1.796, 4.488, 1.664],\n    'rotation': [0.14882026466054782, 0, 0, 0.9888642620837121],\n    'name': 'car'\n    }]\n\n    predictions = [{\n        'sample_token': '0f0e3ce89d2324d8b45aa55a7b4f8207fbb039a550991a5149214f98cec136ac',\n        'translation': [971.8343488872263, 1713.6816097857359, -25.82534357061308],\n        'size': [2.519726579986132, 7.810161372666739, 3.483438286096803],\n        'rotation': [0.10913582721095375, 0.04099572636992043, 0.01927712319721745, 1.029328402625659],\n        'name': 'car',\n        'score': 0.3077029437237213\n    }]\n\n    \"\"\"", "\n", "assert", "all", "(", "[", "0", "<=", "iou_th", "<=", "1", "for", "iou_th", "in", "iou_thresholds", "]", ")", "\n", "\n", "gt_by_class_name", "=", "group_by_key", "(", "gt", ",", "\"name\"", ")", "\n", "pred_by_class_name", "=", "group_by_key", "(", "predictions", ",", "\"name\"", ")", "\n", "\n", "average_precisions", "=", "np", ".", "zeros", "(", "len", "(", "class_names", ")", ")", "\n", "\n", "for", "class_id", ",", "class_name", "in", "enumerate", "(", "class_names", ")", ":", "\n", "        ", "if", "class_name", "in", "pred_by_class_name", ":", "\n", "            ", "recalls", ",", "precisions", ",", "ap_list", "=", "recall_precision", "(", "\n", "gt_by_class_name", "[", "class_name", "]", ",", "pred_by_class_name", "[", "class_name", "]", ",", "iou_thresholds", "\n", ")", "\n", "aps", "=", "np", ".", "mean", "(", "ap_list", ")", "\n", "average_precisions", "[", "class_id", "]", "=", "aps", "\n", "\n", "", "", "return", "average_precisions", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.lyft_mAP_eval.lyft_eval.get_class_names": [[396, 406], ["sorted", "list", "set"], "function", ["None"], ["", "def", "get_class_names", "(", "gt", ":", "dict", ")", "->", "list", ":", "\n", "    ", "\"\"\"Get sorted list of class names.\n\n    Args:\n        gt:\n\n    Returns: Sorted list of class names.\n\n    \"\"\"", "\n", "return", "sorted", "(", "list", "(", "set", "(", "[", "x", "[", "\"name\"", "]", "for", "x", "in", "gt", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.__init__": [[22, 38], ["dataset.DatasetTemplate.__init__", "waymo_dataset.WaymoDataset.include_waymo_data", "x.strip", "waymo_dataset.WaymoDataset.dataset_cfg.get", "waymo_dataset.WaymoDataset.dataset_cfg.get", "waymo_dataset.WaymoDataset.load_data_to_shared_memory", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.include_waymo_data", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.load_data_to_shared_memory"], ["    ", "def", "__init__", "(", "self", ",", "dataset_cfg", ",", "class_names", ",", "training", "=", "True", ",", "root_path", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "training", "=", "training", ",", "root_path", "=", "root_path", ",", "logger", "=", "logger", "\n", ")", "\n", "self", ".", "data_path", "=", "self", ".", "root_path", "/", "self", ".", "dataset_cfg", ".", "PROCESSED_DATA_TAG", "\n", "self", ".", "split", "=", "self", ".", "dataset_cfg", ".", "DATA_SPLIT", "[", "self", ".", "mode", "]", "\n", "split_dir", "=", "self", ".", "root_path", "/", "'ImageSets'", "/", "(", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "sample_sequence_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "split_dir", ")", ".", "readlines", "(", ")", "]", "\n", "\n", "self", ".", "infos", "=", "[", "]", "\n", "self", ".", "include_waymo_data", "(", "self", ".", "mode", ")", "\n", "\n", "self", ".", "use_shared_memory", "=", "self", ".", "dataset_cfg", ".", "get", "(", "'USE_SHARED_MEMORY'", ",", "False", ")", "and", "self", ".", "training", "\n", "if", "self", ".", "use_shared_memory", ":", "\n", "            ", "self", ".", "shared_memory_file_limit", "=", "self", ".", "dataset_cfg", ".", "get", "(", "'SHARED_MEMORY_FILE_LIMIT'", ",", "0x7FFFFFFF", ")", "\n", "self", ".", "load_data_to_shared_memory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.set_split": [[39, 49], ["dataset.DatasetTemplate.__init__", "waymo_dataset.WaymoDataset.include_waymo_data", "x.strip", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.include_waymo_data"], ["", "", "def", "set_split", "(", "self", ",", "split", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "self", ".", "dataset_cfg", ",", "class_names", "=", "self", ".", "class_names", ",", "training", "=", "self", ".", "training", ",", "\n", "root_path", "=", "self", ".", "root_path", ",", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "self", ".", "split", "=", "split", "\n", "split_dir", "=", "self", ".", "root_path", "/", "'ImageSets'", "/", "(", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "sample_sequence_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "split_dir", ")", ".", "readlines", "(", ")", "]", "\n", "self", ".", "infos", "=", "[", "]", "\n", "self", ".", "include_waymo_data", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.include_waymo_data": [[50, 76], ["waymo_dataset.WaymoDataset.logger.info", "range", "waymo_dataset.WaymoDataset.infos.extend", "waymo_dataset.WaymoDataset.logger.info", "waymo_dataset.WaymoDataset.logger.info", "len", "waymo_dataset.WaymoDataset.check_sequence_name_with_all_version", "range", "waymo_dataset.WaymoDataset.logger.info", "os.path.splitext", "waymo_dataset.WaymoDataset.exists", "open", "pickle.load", "waymo_infos.extend", "len", "len", "sampled_waymo_infos.append", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.check_sequence_name_with_all_version"], ["", "def", "include_waymo_data", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Loading Waymo dataset'", ")", "\n", "waymo_infos", "=", "[", "]", "\n", "\n", "num_skipped_infos", "=", "0", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "sample_sequence_list", ")", ")", ":", "\n", "            ", "sequence_name", "=", "os", ".", "path", ".", "splitext", "(", "self", ".", "sample_sequence_list", "[", "k", "]", ")", "[", "0", "]", "\n", "info_path", "=", "self", ".", "data_path", "/", "sequence_name", "/", "(", "'%s.pkl'", "%", "sequence_name", ")", "\n", "info_path", "=", "self", ".", "check_sequence_name_with_all_version", "(", "info_path", ")", "\n", "if", "not", "info_path", ".", "exists", "(", ")", ":", "\n", "                ", "num_skipped_infos", "+=", "1", "\n", "continue", "\n", "", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "waymo_infos", ".", "extend", "(", "infos", ")", "\n", "\n", "", "", "self", ".", "infos", ".", "extend", "(", "waymo_infos", "[", ":", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Total skipped info %s'", "%", "num_skipped_infos", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Total samples for Waymo dataset: %d'", "%", "(", "len", "(", "waymo_infos", ")", ")", ")", "\n", "\n", "if", "self", ".", "dataset_cfg", ".", "SAMPLED_INTERVAL", "[", "mode", "]", ">", "1", ":", "\n", "            ", "sampled_waymo_infos", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "self", ".", "infos", ")", ",", "self", ".", "dataset_cfg", ".", "SAMPLED_INTERVAL", "[", "mode", "]", ")", ":", "\n", "                ", "sampled_waymo_infos", ".", "append", "(", "self", ".", "infos", "[", "k", "]", ")", "\n", "", "self", ".", "infos", "=", "sampled_waymo_infos", "\n", "self", ".", "logger", ".", "info", "(", "'Total sampled samples for Waymo dataset: %d'", "%", "len", "(", "self", ".", "infos", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.load_data_to_shared_memory": [[77, 98], ["waymo_dataset.WaymoDataset.logger.info", "utils.common_utils.get_dist_info", "torch.barrier", "torch.barrier", "waymo_dataset.WaymoDataset.logger.info", "os.path.exists", "waymo_dataset.WaymoDataset.get_lidar", "utils.common_utils.sa_create", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_dist_info", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.sa_create"], ["", "", "def", "load_data_to_shared_memory", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "f'Loading training data to shared memory (file limit={self.shared_memory_file_limit})'", ")", "\n", "\n", "cur_rank", ",", "num_gpus", "=", "common_utils", ".", "get_dist_info", "(", ")", "\n", "all_infos", "=", "self", ".", "infos", "[", ":", "self", ".", "shared_memory_file_limit", "]", "if", "self", ".", "shared_memory_file_limit", "<", "len", "(", "self", ".", "infos", ")", "else", "self", ".", "infos", "\n", "cur_infos", "=", "all_infos", "[", "cur_rank", ":", ":", "num_gpus", "]", "\n", "for", "info", "in", "cur_infos", ":", "\n", "            ", "pc_info", "=", "info", "[", "'point_cloud'", "]", "\n", "sequence_name", "=", "pc_info", "[", "'lidar_sequence'", "]", "\n", "sample_idx", "=", "pc_info", "[", "'sample_idx'", "]", "\n", "\n", "sa_key", "=", "f'{sequence_name}___{sample_idx}'", "\n", "if", "os", ".", "path", ".", "exists", "(", "f\"/dev/shm/{sa_key}\"", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "points", "=", "self", ".", "get_lidar", "(", "sequence_name", ",", "sample_idx", ")", "\n", "common_utils", ".", "sa_create", "(", "f\"shm://{sa_key}\"", ",", "points", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Training data has been saved to shared memory'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.clean_shared_memory": [[99, 120], ["waymo_dataset.WaymoDataset.logger.info", "utils.common_utils.get_dist_info", "waymo_dataset.WaymoDataset.logger.info", "SharedArray.delete", "torch.barrier", "torch.barrier", "len", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_dist_info"], ["", "def", "clean_shared_memory", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "f'Clean training data from shared memory (file limit={self.shared_memory_file_limit})'", ")", "\n", "\n", "cur_rank", ",", "num_gpus", "=", "common_utils", ".", "get_dist_info", "(", ")", "\n", "all_infos", "=", "self", ".", "infos", "[", ":", "self", ".", "shared_memory_file_limit", "]", "if", "self", ".", "shared_memory_file_limit", "<", "len", "(", "self", ".", "infos", ")", "else", "self", ".", "infos", "\n", "cur_infos", "=", "all_infos", "[", "cur_rank", ":", ":", "num_gpus", "]", "\n", "for", "info", "in", "cur_infos", ":", "\n", "            ", "pc_info", "=", "info", "[", "'point_cloud'", "]", "\n", "sequence_name", "=", "pc_info", "[", "'lidar_sequence'", "]", "\n", "sample_idx", "=", "pc_info", "[", "'sample_idx'", "]", "\n", "\n", "sa_key", "=", "f'{sequence_name}___{sample_idx}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "f\"/dev/shm/{sa_key}\"", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "SharedArray", ".", "delete", "(", "f\"shm://{sa_key}\"", ")", "\n", "\n", "", "if", "num_gpus", ">", "1", ":", "\n", "            ", "dist", ".", "barrier", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'Training data has been deleted from shared memory'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.check_sequence_name_with_all_version": [[121, 136], ["sequence_file.exists", "pathlib.Path.exists", "pathlib.Path.exists", "pathlib.Path", "sequence_file.exists", "pathlib.Path", "pathlib.Path.exists", "str().replace", "str().replace", "str", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "check_sequence_name_with_all_version", "(", "sequence_file", ")", ":", "\n", "        ", "if", "not", "sequence_file", ".", "exists", "(", ")", ":", "\n", "            ", "found_sequence_file", "=", "sequence_file", "\n", "for", "pre_text", "in", "[", "'training'", ",", "'validation'", ",", "'testing'", "]", ":", "\n", "                ", "if", "not", "sequence_file", ".", "exists", "(", ")", ":", "\n", "                    ", "temp_sequence_file", "=", "Path", "(", "str", "(", "sequence_file", ")", ".", "replace", "(", "'segment'", ",", "pre_text", "+", "'_segment'", ")", ")", "\n", "if", "temp_sequence_file", ".", "exists", "(", ")", ":", "\n", "                        ", "found_sequence_file", "=", "temp_sequence_file", "\n", "break", "\n", "", "", "", "if", "not", "found_sequence_file", ".", "exists", "(", ")", ":", "\n", "                ", "found_sequence_file", "=", "Path", "(", "str", "(", "sequence_file", ")", ".", "replace", "(", "'_with_camera_labels'", ",", "''", ")", ")", "\n", "", "if", "found_sequence_file", ".", "exists", "(", ")", ":", "\n", "                ", "sequence_file", "=", "found_sequence_file", "\n", "", "", "return", "sequence_file", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.get_infos": [[137, 158], ["multiprocessing.cpu_count", "print", "partial", "waymo_dataset.WaymoDataset.check_sequence_name_with_all_version", "multiprocessing.Pool", "list", "tqdm.tqdm.tqdm", "len", "p.imap", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.check_sequence_name_with_all_version"], ["", "def", "get_infos", "(", "self", ",", "raw_data_path", ",", "save_path", ",", "num_workers", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "has_label", "=", "True", ",", "sampled_interval", "=", "1", ")", ":", "\n", "        ", "from", "functools", "import", "partial", "\n", "from", ".", "import", "waymo_utils", "\n", "print", "(", "'---------------The waymo sample interval is %d, total sequecnes is %d-----------------'", "\n", "%", "(", "sampled_interval", ",", "len", "(", "self", ".", "sample_sequence_list", ")", ")", ")", "\n", "\n", "process_single_sequence", "=", "partial", "(", "\n", "waymo_utils", ".", "process_single_sequence", ",", "\n", "save_path", "=", "save_path", ",", "sampled_interval", "=", "sampled_interval", ",", "has_label", "=", "has_label", "\n", ")", "\n", "sample_sequence_file_list", "=", "[", "\n", "self", ".", "check_sequence_name_with_all_version", "(", "raw_data_path", "/", "sequence_file", ")", "\n", "for", "sequence_file", "in", "self", ".", "sample_sequence_list", "\n", "]", "\n", "\n", "with", "multiprocessing", ".", "Pool", "(", "num_workers", ")", "as", "p", ":", "\n", "            ", "sequence_infos", "=", "list", "(", "tqdm", "(", "p", ".", "imap", "(", "process_single_sequence", ",", "sample_sequence_file_list", ")", ",", "\n", "total", "=", "len", "(", "sample_sequence_file_list", ")", ")", ")", "\n", "\n", "", "all_sequences_infos", "=", "[", "item", "for", "infos", "in", "sequence_infos", "for", "item", "in", "infos", "]", "\n", "return", "all_sequences_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.get_lidar": [[159, 168], ["numpy.load", "numpy.tanh", "waymo_dataset.WaymoDataset.dataset_cfg.get"], "methods", ["None"], ["", "def", "get_lidar", "(", "self", ",", "sequence_name", ",", "sample_idx", ")", ":", "\n", "        ", "lidar_file", "=", "self", ".", "data_path", "/", "sequence_name", "/", "(", "'%04d.npy'", "%", "sample_idx", ")", "\n", "point_features", "=", "np", ".", "load", "(", "lidar_file", ")", "# (N, 7): [x, y, z, intensity, elongation, NLZ_flag]", "\n", "\n", "points_all", ",", "NLZ_flag", "=", "point_features", "[", ":", ",", "0", ":", "5", "]", ",", "point_features", "[", ":", ",", "5", "]", "\n", "if", "not", "self", ".", "dataset_cfg", ".", "get", "(", "'DISABLE_NLZ_FLAG_ON_POINTS'", ",", "False", ")", ":", "\n", "            ", "points_all", "=", "points_all", "[", "NLZ_flag", "==", "-", "1", "]", "\n", "", "points_all", "[", ":", ",", "3", "]", "=", "np", ".", "tanh", "(", "points_all", "[", ":", ",", "3", "]", ")", "\n", "return", "points_all", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.__len__": [[169, 174], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "return", "len", "(", "self", ".", "infos", ")", "*", "self", ".", "total_epochs", "\n", "\n", "", "return", "len", "(", "self", ".", "infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.__getitem__": [[175, 220], ["copy.deepcopy", "waymo_dataset.WaymoDataset.prepare_data", "copy.deepcopy.get", "waymo_dataset.WaymoDataset.pop", "SharedArray.attach().copy", "waymo_dataset.WaymoDataset.get_lidar", "utils.common_utils.drop_info_with_name", "waymo_dataset.WaymoDataset.dataset_cfg.get", "input_dict.update", "len", "utils.box_utils.boxes3d_kitti_fakelidar_to_lidar", "waymo_dataset.WaymoDataset.dataset_cfg.get", "SharedArray.attach", "utils.common_utils.drop_info_with_name.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.prepare_data", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.drop_info_with_name", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_kitti_fakelidar_to_lidar"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "index", "=", "index", "%", "len", "(", "self", ".", "infos", ")", "\n", "\n", "", "info", "=", "copy", ".", "deepcopy", "(", "self", ".", "infos", "[", "index", "]", ")", "\n", "pc_info", "=", "info", "[", "'point_cloud'", "]", "\n", "sequence_name", "=", "pc_info", "[", "'lidar_sequence'", "]", "\n", "sample_idx", "=", "pc_info", "[", "'sample_idx'", "]", "\n", "\n", "if", "self", ".", "use_shared_memory", "and", "index", "<", "self", ".", "shared_memory_file_limit", ":", "\n", "            ", "sa_key", "=", "f'{sequence_name}___{sample_idx}'", "\n", "points", "=", "SharedArray", ".", "attach", "(", "f\"shm://{sa_key}\"", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "points", "=", "self", ".", "get_lidar", "(", "sequence_name", ",", "sample_idx", ")", "\n", "\n", "", "input_dict", "=", "{", "\n", "'points'", ":", "points", ",", "\n", "'frame_id'", ":", "info", "[", "'frame_id'", "]", ",", "\n", "}", "\n", "\n", "if", "'annos'", "in", "info", ":", "\n", "            ", "annos", "=", "info", "[", "'annos'", "]", "\n", "annos", "=", "common_utils", ".", "drop_info_with_name", "(", "annos", ",", "name", "=", "'unknown'", ")", "\n", "\n", "if", "self", ".", "dataset_cfg", ".", "get", "(", "'INFO_WITH_FAKELIDAR'", ",", "False", ")", ":", "\n", "                ", "gt_boxes_lidar", "=", "box_utils", ".", "boxes3d_kitti_fakelidar_to_lidar", "(", "annos", "[", "'gt_boxes_lidar'", "]", ")", "\n", "", "else", ":", "\n", "                ", "gt_boxes_lidar", "=", "annos", "[", "'gt_boxes_lidar'", "]", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "dataset_cfg", ".", "get", "(", "'FILTER_EMPTY_BOXES_FOR_TRAIN'", ",", "False", ")", ":", "\n", "                ", "mask", "=", "(", "annos", "[", "'num_points_in_gt'", "]", ">", "0", ")", "# filter empty boxes", "\n", "annos", "[", "'name'", "]", "=", "annos", "[", "'name'", "]", "[", "mask", "]", "\n", "gt_boxes_lidar", "=", "gt_boxes_lidar", "[", "mask", "]", "\n", "annos", "[", "'num_points_in_gt'", "]", "=", "annos", "[", "'num_points_in_gt'", "]", "[", "mask", "]", "\n", "\n", "", "input_dict", ".", "update", "(", "{", "\n", "'gt_names'", ":", "annos", "[", "'name'", "]", ",", "\n", "'gt_boxes'", ":", "gt_boxes_lidar", ",", "\n", "'num_points_in_gt'", ":", "annos", ".", "get", "(", "'num_points_in_gt'", ",", "None", ")", "\n", "}", ")", "\n", "\n", "", "data_dict", "=", "self", ".", "prepare_data", "(", "data_dict", "=", "input_dict", ")", "\n", "data_dict", "[", "'metadata'", "]", "=", "info", ".", "get", "(", "'metadata'", ",", "info", "[", "'frame_id'", "]", ")", "\n", "data_dict", ".", "pop", "(", "'num_points_in_gt'", ",", "None", ")", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.generate_prediction_dicts": [[221, 267], ["enumerate", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "waymo_dataset.WaymoDataset.generate_prediction_dicts.get_template_prediction"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_prediction_dicts", "(", "batch_dict", ",", "pred_dicts", ",", "class_names", ",", "output_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                frame_id:\n            pred_dicts: list of pred_dicts\n                pred_boxes: (N, 7), Tensor\n                pred_scores: (N), Tensor\n                pred_labels: (N), Tensor\n            class_names:\n            output_path:\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "def", "get_template_prediction", "(", "num_samples", ")", ":", "\n", "            ", "ret_dict", "=", "{", "\n", "'name'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "'score'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "\n", "'boxes_lidar'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "7", "]", ")", "\n", "}", "\n", "return", "ret_dict", "\n", "\n", "", "def", "generate_single_sample_dict", "(", "box_dict", ")", ":", "\n", "            ", "pred_scores", "=", "box_dict", "[", "'pred_scores'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_boxes", "=", "box_dict", "[", "'pred_boxes'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_labels", "=", "box_dict", "[", "'pred_labels'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_dict", "=", "get_template_prediction", "(", "pred_scores", ".", "shape", "[", "0", "]", ")", "\n", "if", "pred_scores", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "return", "pred_dict", "\n", "\n", "", "pred_dict", "[", "'name'", "]", "=", "np", ".", "array", "(", "class_names", ")", "[", "pred_labels", "-", "1", "]", "\n", "pred_dict", "[", "'score'", "]", "=", "pred_scores", "\n", "pred_dict", "[", "'boxes_lidar'", "]", "=", "pred_boxes", "\n", "\n", "return", "pred_dict", "\n", "\n", "", "annos", "=", "[", "]", "\n", "for", "index", ",", "box_dict", "in", "enumerate", "(", "pred_dicts", ")", ":", "\n", "            ", "single_pred_dict", "=", "generate_single_sample_dict", "(", "box_dict", ")", "\n", "single_pred_dict", "[", "'frame_id'", "]", "=", "batch_dict", "[", "'frame_id'", "]", "[", "index", "]", "\n", "single_pred_dict", "[", "'metadata'", "]", "=", "batch_dict", "[", "'metadata'", "]", "[", "index", "]", "\n", "annos", ".", "append", "(", "single_pred_dict", ")", "\n", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.evaluation": [[268, 320], ["copy.deepcopy", "waymo_dataset.WaymoDataset.infos[].keys", "kitti_utils.transform_annotations_to_kitti_format", "kitti_utils.transform_annotations_to_kitti_format", "kitti_eval.get_official_eval_result", "OpenPCDetWaymoDetectionMetricsEstimator", "OpenPCDetWaymoDetectionMetricsEstimator.waymo_evaluation", "copy.deepcopy", "waymo_dataset.WaymoDataset.evaluation.kitti_eval"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_utils.transform_annotations_to_kitti_format", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_utils.transform_annotations_to_kitti_format", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_official_eval_result", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.waymo_evaluation", "home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.kitti_eval"], ["", "def", "evaluation", "(", "self", ",", "det_annos", ",", "class_names", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "'annos'", "not", "in", "self", ".", "infos", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "return", "'No ground-truth boxes for evaluation'", ",", "{", "}", "\n", "\n", "", "def", "kitti_eval", "(", "eval_det_annos", ",", "eval_gt_annos", ")", ":", "\n", "            ", "from", ".", ".", "kitti", ".", "kitti_object_eval_python", "import", "eval", "as", "kitti_eval", "\n", "from", ".", ".", "kitti", "import", "kitti_utils", "\n", "\n", "map_name_to_kitti", "=", "{", "\n", "'Vehicle'", ":", "'Car'", ",", "\n", "'Pedestrian'", ":", "'Pedestrian'", ",", "\n", "'Cyclist'", ":", "'Cyclist'", ",", "\n", "'Sign'", ":", "'Sign'", ",", "\n", "'Car'", ":", "'Car'", "\n", "}", "\n", "kitti_utils", ".", "transform_annotations_to_kitti_format", "(", "eval_det_annos", ",", "map_name_to_kitti", "=", "map_name_to_kitti", ")", "\n", "kitti_utils", ".", "transform_annotations_to_kitti_format", "(", "\n", "eval_gt_annos", ",", "map_name_to_kitti", "=", "map_name_to_kitti", ",", "\n", "info_with_fakelidar", "=", "self", ".", "dataset_cfg", ".", "get", "(", "'INFO_WITH_FAKELIDAR'", ",", "False", ")", "\n", ")", "\n", "kitti_class_names", "=", "[", "map_name_to_kitti", "[", "x", "]", "for", "x", "in", "class_names", "]", "\n", "ap_result_str", ",", "ap_dict", "=", "kitti_eval", ".", "get_official_eval_result", "(", "\n", "gt_annos", "=", "eval_gt_annos", ",", "dt_annos", "=", "eval_det_annos", ",", "current_classes", "=", "kitti_class_names", "\n", ")", "\n", "return", "ap_result_str", ",", "ap_dict", "\n", "\n", "", "def", "waymo_eval", "(", "eval_det_annos", ",", "eval_gt_annos", ")", ":", "\n", "            ", "from", ".", "waymo_eval", "import", "OpenPCDetWaymoDetectionMetricsEstimator", "\n", "eval", "=", "OpenPCDetWaymoDetectionMetricsEstimator", "(", ")", "\n", "\n", "ap_dict", "=", "eval", ".", "waymo_evaluation", "(", "\n", "eval_det_annos", ",", "eval_gt_annos", ",", "class_name", "=", "class_names", ",", "\n", "distance_thresh", "=", "1000", ",", "fake_gt_infos", "=", "self", ".", "dataset_cfg", ".", "get", "(", "'INFO_WITH_FAKELIDAR'", ",", "False", ")", "\n", ")", "\n", "ap_result_str", "=", "'\\n'", "\n", "for", "key", "in", "ap_dict", ":", "\n", "                ", "ap_dict", "[", "key", "]", "=", "ap_dict", "[", "key", "]", "[", "0", "]", "\n", "ap_result_str", "+=", "'%s: %.4f \\n'", "%", "(", "key", ",", "ap_dict", "[", "key", "]", ")", "\n", "\n", "", "return", "ap_result_str", ",", "ap_dict", "\n", "\n", "", "eval_det_annos", "=", "copy", ".", "deepcopy", "(", "det_annos", ")", "\n", "eval_gt_annos", "=", "[", "copy", ".", "deepcopy", "(", "info", "[", "'annos'", "]", ")", "for", "info", "in", "self", ".", "infos", "]", "\n", "\n", "if", "kwargs", "[", "'eval_metric'", "]", "==", "'kitti'", ":", "\n", "            ", "ap_result_str", ",", "ap_dict", "=", "kitti_eval", "(", "eval_det_annos", ",", "eval_gt_annos", ")", "\n", "", "elif", "kwargs", "[", "'eval_metric'", "]", "==", "'waymo'", ":", "\n", "            ", "ap_result_str", ",", "ap_dict", "=", "waymo_eval", "(", "eval_det_annos", ",", "eval_gt_annos", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "ap_result_str", ",", "ap_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.WaymoDataset.create_groundtruth_database": [[321, 401], ["database_save_path.mkdir", "range", "all_db_infos.items", "numpy.concatenate", "numpy.save", "open", "pickle.load", "len", "print", "waymo_dataset.WaymoDataset.get_lidar", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze().cpu().numpy", "range", "print", "open", "pickle.dump", "len", "len", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze().cpu", "str", "numpy.concatenate.append", "len", "open", "gt_points.tofile", "filepath.relative_to", "all_db_infos[].append", "len", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu"], ["", "def", "create_groundtruth_database", "(", "self", ",", "info_path", ",", "save_path", ",", "used_classes", "=", "None", ",", "split", "=", "'train'", ",", "sampled_interval", "=", "10", ",", "\n", "processed_data_tag", "=", "None", ")", ":", "\n", "        ", "database_save_path", "=", "save_path", "/", "(", "'%s_gt_database_%s_sampled_%d'", "%", "(", "processed_data_tag", ",", "split", ",", "sampled_interval", ")", ")", "\n", "db_info_save_path", "=", "save_path", "/", "(", "'%s_waymo_dbinfos_%s_sampled_%d.pkl'", "%", "(", "processed_data_tag", ",", "split", ",", "sampled_interval", ")", ")", "\n", "db_data_save_path", "=", "save_path", "/", "(", "'%s_gt_database_%s_sampled_%d_global.npy'", "%", "(", "processed_data_tag", ",", "split", ",", "sampled_interval", ")", ")", "\n", "database_save_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "all_db_infos", "=", "{", "}", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "point_offset_cnt", "=", "0", "\n", "stacked_gt_points", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "infos", ")", ",", "sampled_interval", ")", ":", "\n", "            ", "print", "(", "'gt_database sample: %d/%d'", "%", "(", "k", "+", "1", ",", "len", "(", "infos", ")", ")", ")", "\n", "info", "=", "infos", "[", "k", "]", "\n", "\n", "pc_info", "=", "info", "[", "'point_cloud'", "]", "\n", "sequence_name", "=", "pc_info", "[", "'lidar_sequence'", "]", "\n", "sample_idx", "=", "pc_info", "[", "'sample_idx'", "]", "\n", "points", "=", "self", ".", "get_lidar", "(", "sequence_name", ",", "sample_idx", ")", "\n", "\n", "annos", "=", "info", "[", "'annos'", "]", "\n", "names", "=", "annos", "[", "'name'", "]", "\n", "difficulty", "=", "annos", "[", "'difficulty'", "]", "\n", "gt_boxes", "=", "annos", "[", "'gt_boxes_lidar'", "]", "\n", "\n", "if", "k", "%", "4", "!=", "0", "and", "len", "(", "names", ")", ">", "0", ":", "\n", "                ", "mask", "=", "(", "names", "==", "'Vehicle'", ")", "\n", "names", "=", "names", "[", "~", "mask", "]", "\n", "difficulty", "=", "difficulty", "[", "~", "mask", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "~", "mask", "]", "\n", "\n", "", "if", "k", "%", "2", "!=", "0", "and", "len", "(", "names", ")", ">", "0", ":", "\n", "                ", "mask", "=", "(", "names", "==", "'Pedestrian'", ")", "\n", "names", "=", "names", "[", "~", "mask", "]", "\n", "difficulty", "=", "difficulty", "[", "~", "mask", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "~", "mask", "]", "\n", "\n", "", "num_obj", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "if", "num_obj", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "box_idxs_of_pts", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_gpu", "(", "\n", "torch", ".", "from_numpy", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", ")", ".", "long", "(", ")", ".", "squeeze", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_obj", ")", ":", "\n", "                ", "filename", "=", "'%s_%04d_%s_%d.bin'", "%", "(", "sequence_name", ",", "sample_idx", ",", "names", "[", "i", "]", ",", "i", ")", "\n", "filepath", "=", "database_save_path", "/", "filename", "\n", "gt_points", "=", "points", "[", "box_idxs_of_pts", "==", "i", "]", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "gt_boxes", "[", "i", ",", ":", "3", "]", "\n", "\n", "if", "(", "used_classes", "is", "None", ")", "or", "names", "[", "i", "]", "in", "used_classes", ":", "\n", "                    ", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "                        ", "gt_points", ".", "tofile", "(", "f", ")", "\n", "\n", "", "db_path", "=", "str", "(", "filepath", ".", "relative_to", "(", "self", ".", "root_path", ")", ")", "# gt_database/xxxxx.bin", "\n", "db_info", "=", "{", "'name'", ":", "names", "[", "i", "]", ",", "'path'", ":", "db_path", ",", "'sequence_name'", ":", "sequence_name", ",", "\n", "'sample_idx'", ":", "sample_idx", ",", "'gt_idx'", ":", "i", ",", "'box3d_lidar'", ":", "gt_boxes", "[", "i", "]", ",", "\n", "'num_points_in_gt'", ":", "gt_points", ".", "shape", "[", "0", "]", ",", "'difficulty'", ":", "difficulty", "[", "i", "]", "}", "\n", "\n", "# it will be used if you choose to use shared memory for gt sampling", "\n", "stacked_gt_points", ".", "append", "(", "gt_points", ")", "\n", "db_info", "[", "'global_data_offset'", "]", "=", "[", "point_offset_cnt", ",", "point_offset_cnt", "+", "gt_points", ".", "shape", "[", "0", "]", "]", "\n", "point_offset_cnt", "+=", "gt_points", ".", "shape", "[", "0", "]", "\n", "\n", "if", "names", "[", "i", "]", "in", "all_db_infos", ":", "\n", "                        ", "all_db_infos", "[", "names", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "else", ":", "\n", "                        ", "all_db_infos", "[", "names", "[", "i", "]", "]", "=", "[", "db_info", "]", "\n", "", "", "", "", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Database %s: %d'", "%", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "\n", "", "with", "open", "(", "db_info_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "\n", "\n", "# it will be used if you choose to use shared memory for gt sampling", "\n", "", "stacked_gt_points", "=", "np", ".", "concatenate", "(", "stacked_gt_points", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "db_data_save_path", ",", "stacked_gt_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_dataset.create_waymo_infos": [[403, 446], ["min", "waymo_dataset.WaymoDataset", "print", "waymo_dataset.WaymoDataset.set_split", "waymo_dataset.WaymoDataset.get_infos", "print", "waymo_dataset.WaymoDataset.set_split", "waymo_dataset.WaymoDataset.get_infos", "print", "print", "waymo_dataset.WaymoDataset.set_split", "waymo_dataset.WaymoDataset.create_groundtruth_database", "print", "multiprocessing.cpu_count", "open", "pickle.dump", "open", "pickle.dump", "utils.common_utils.create_logger"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.get_infos", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.get_infos", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.create_groundtruth_database", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.create_logger"], ["", "", "def", "create_waymo_infos", "(", "dataset_cfg", ",", "class_names", ",", "data_path", ",", "save_path", ",", "\n", "raw_data_tag", "=", "'raw_data'", ",", "processed_data_tag", "=", "'waymo_processed_data'", ",", "\n", "workers", "=", "min", "(", "16", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", ")", ":", "\n", "    ", "dataset", "=", "WaymoDataset", "(", "\n", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "root_path", "=", "data_path", ",", "\n", "training", "=", "False", ",", "logger", "=", "common_utils", ".", "create_logger", "(", ")", "\n", ")", "\n", "train_split", ",", "val_split", "=", "'train'", ",", "'val'", "\n", "\n", "train_filename", "=", "save_path", "/", "(", "'%s_infos_%s.pkl'", "%", "(", "processed_data_tag", ",", "train_split", ")", ")", "\n", "val_filename", "=", "save_path", "/", "(", "'%s_infos_%s.pkl'", "%", "(", "processed_data_tag", ",", "val_split", ")", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "\"-1\"", "\n", "print", "(", "'---------------Start to generate data infos---------------'", ")", "\n", "\n", "dataset", ".", "set_split", "(", "train_split", ")", "\n", "waymo_infos_train", "=", "dataset", ".", "get_infos", "(", "\n", "raw_data_path", "=", "data_path", "/", "raw_data_tag", ",", "\n", "save_path", "=", "save_path", "/", "processed_data_tag", ",", "num_workers", "=", "workers", ",", "has_label", "=", "True", ",", "\n", "sampled_interval", "=", "1", "\n", ")", "\n", "with", "open", "(", "train_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "waymo_infos_train", ",", "f", ")", "\n", "", "print", "(", "'----------------Waymo info train file is saved to %s----------------'", "%", "train_filename", ")", "\n", "\n", "dataset", ".", "set_split", "(", "val_split", ")", "\n", "waymo_infos_val", "=", "dataset", ".", "get_infos", "(", "\n", "raw_data_path", "=", "data_path", "/", "raw_data_tag", ",", "\n", "save_path", "=", "save_path", "/", "processed_data_tag", ",", "num_workers", "=", "workers", ",", "has_label", "=", "True", ",", "\n", "sampled_interval", "=", "1", "\n", ")", "\n", "with", "open", "(", "val_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "waymo_infos_val", ",", "f", ")", "\n", "", "print", "(", "'----------------Waymo info val file is saved to %s----------------'", "%", "val_filename", ")", "\n", "\n", "print", "(", "'---------------Start create groundtruth database for data augmentation---------------'", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "\"0\"", "\n", "dataset", ".", "set_split", "(", "train_split", ")", "\n", "dataset", ".", "create_groundtruth_database", "(", "\n", "info_path", "=", "train_filename", ",", "save_path", "=", "save_path", ",", "split", "=", "'train'", ",", "sampled_interval", "=", "1", ",", "\n", "used_classes", "=", "[", "'Vehicle'", ",", "'Pedestrian'", ",", "'Cyclist'", "]", ",", "processed_data_tag", "=", "processed_data_tag", "\n", ")", "\n", "print", "(", "'---------------Data preparation Done---------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.generate_waymo_type_results": [[26, 85], ["enumerate", "numpy.concatenate().reshape().astype", "numpy.concatenate", "numpy.array().reshape", "numpy.concatenate().reshape", "numpy.concatenate().reshape", "numpy.concatenate().reshape().astype", "waymo_eval.limit_period", "numpy.concatenate", "numpy.concatenate().reshape().astype.append", "numpy.concatenate().reshape.append", "numpy.array", "numpy.array.sum", "numpy.concatenate().reshape().astype.append", "numpy.concatenate().reshape.append", "numpy.concatenate.append", "len", "numpy.concatenate().reshape().astype.append", "numpy.concatenate().reshape.append", "numpy.concatenate.append", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.WAYMO_CLASSES.index", "numpy.array", "numpy.zeros", "numpy.concatenate().reshape", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate().reshape", "print", "numpy.ones", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.generate_waymo_type_results.boxes3d_kitti_fakelidar_to_lidar"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.limit_period", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_kitti_fakelidar_to_lidar"], ["def", "generate_waymo_type_results", "(", "self", ",", "infos", ",", "class_names", ",", "is_gt", "=", "False", ",", "fake_gt_infos", "=", "True", ")", ":", "\n", "        ", "def", "boxes3d_kitti_fakelidar_to_lidar", "(", "boxes3d_lidar", ")", ":", "\n", "            ", "\"\"\"\n            Args:\n                boxes3d_fakelidar: (N, 7) [x, y, z, w, l, h, r] in old LiDAR coordinates, z is bottom center\n\n            Returns:\n                boxes3d_lidar: [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n            \"\"\"", "\n", "w", ",", "l", ",", "h", ",", "r", "=", "boxes3d_lidar", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d_lidar", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d_lidar", "[", ":", ",", "5", ":", "6", "]", ",", "boxes3d_lidar", "[", ":", ",", "6", ":", "7", "]", "\n", "boxes3d_lidar", "[", ":", ",", "2", "]", "+=", "h", "[", ":", ",", "0", "]", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "boxes3d_lidar", "[", ":", ",", "0", ":", "3", "]", ",", "l", ",", "w", ",", "h", ",", "-", "(", "r", "+", "np", ".", "pi", "/", "2", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "frame_id", ",", "boxes3d", ",", "obj_type", ",", "score", ",", "overlap_nlz", ",", "difficulty", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "frame_index", ",", "info", "in", "enumerate", "(", "infos", ")", ":", "\n", "            ", "if", "is_gt", ":", "\n", "                ", "box_mask", "=", "np", ".", "array", "(", "[", "n", "in", "class_names", "for", "n", "in", "info", "[", "'name'", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "if", "'num_points_in_gt'", "in", "info", ":", "\n", "                    ", "zero_difficulty_mask", "=", "info", "[", "'difficulty'", "]", "==", "0", "\n", "info", "[", "'difficulty'", "]", "[", "(", "info", "[", "'num_points_in_gt'", "]", ">", "5", ")", "&", "zero_difficulty_mask", "]", "=", "1", "\n", "info", "[", "'difficulty'", "]", "[", "(", "info", "[", "'num_points_in_gt'", "]", "<=", "5", ")", "&", "zero_difficulty_mask", "]", "=", "2", "\n", "nonzero_mask", "=", "info", "[", "'num_points_in_gt'", "]", ">", "0", "\n", "box_mask", "=", "box_mask", "&", "nonzero_mask", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'Please provide the num_points_in_gt for evaluating on Waymo Dataset '", "\n", "'(If you create Waymo Infos before 20201126, please re-create the validation infos '", "\n", "'with version 1.2 Waymo dataset to get this attribute). SSS of OpenPCDet'", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "", "num_boxes", "=", "box_mask", ".", "sum", "(", ")", "\n", "box_name", "=", "info", "[", "'name'", "]", "[", "box_mask", "]", "\n", "\n", "difficulty", ".", "append", "(", "info", "[", "'difficulty'", "]", "[", "box_mask", "]", ")", "\n", "score", ".", "append", "(", "np", ".", "ones", "(", "num_boxes", ")", ")", "\n", "if", "fake_gt_infos", ":", "\n", "                    ", "info", "[", "'gt_boxes_lidar'", "]", "=", "boxes3d_kitti_fakelidar_to_lidar", "(", "info", "[", "'gt_boxes_lidar'", "]", ")", "\n", "\n", "", "boxes3d", ".", "append", "(", "info", "[", "'gt_boxes_lidar'", "]", "[", "box_mask", "]", ")", "\n", "", "else", ":", "\n", "                ", "num_boxes", "=", "len", "(", "info", "[", "'boxes_lidar'", "]", ")", "\n", "difficulty", ".", "append", "(", "[", "0", "]", "*", "num_boxes", ")", "\n", "score", ".", "append", "(", "info", "[", "'score'", "]", ")", "\n", "boxes3d", ".", "append", "(", "np", ".", "array", "(", "info", "[", "'boxes_lidar'", "]", ")", ")", "\n", "box_name", "=", "info", "[", "'name'", "]", "\n", "\n", "", "obj_type", "+=", "[", "self", ".", "WAYMO_CLASSES", ".", "index", "(", "name", ")", "for", "i", ",", "name", "in", "enumerate", "(", "box_name", ")", "]", "\n", "frame_id", ".", "append", "(", "np", ".", "array", "(", "[", "frame_index", "]", "*", "num_boxes", ")", ")", "\n", "overlap_nlz", ".", "append", "(", "np", ".", "zeros", "(", "num_boxes", ")", ")", "# set zero currently", "\n", "\n", "", "frame_id", "=", "np", ".", "concatenate", "(", "frame_id", ")", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "boxes3d", "=", "np", ".", "concatenate", "(", "boxes3d", ",", "axis", "=", "0", ")", "\n", "obj_type", "=", "np", ".", "array", "(", "obj_type", ")", ".", "reshape", "(", "-", "1", ")", "\n", "score", "=", "np", ".", "concatenate", "(", "score", ")", ".", "reshape", "(", "-", "1", ")", "\n", "overlap_nlz", "=", "np", ".", "concatenate", "(", "overlap_nlz", ")", ".", "reshape", "(", "-", "1", ")", "\n", "difficulty", "=", "np", ".", "concatenate", "(", "difficulty", ")", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "int8", ")", "\n", "\n", "boxes3d", "[", ":", ",", "-", "1", "]", "=", "limit_period", "(", "boxes3d", "[", ":", ",", "-", "1", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", ")", "\n", "\n", "return", "frame_id", ",", "boxes3d", ",", "obj_type", ",", "score", ",", "overlap_nlz", ",", "difficulty", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.build_config": [[86, 109], ["waymo_open_dataset.protos.metrics_pb2.Config", "range", "waymo_open_dataset.protos.metrics_pb2.Config.score_cutoffs.append", "google.protobuf.text_format.Merge", "waymo_open_dataset.protos.metrics_pb2.Config.score_cutoffs.append"], "methods", ["None"], ["", "def", "build_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "metrics_pb2", ".", "Config", "(", ")", "\n", "config_text", "=", "\"\"\"\n        breakdown_generator_ids: OBJECT_TYPE\n        difficulties {\n        levels:1\n        levels:2\n        }\n        matcher_type: TYPE_HUNGARIAN\n        iou_thresholds: 0.0\n        iou_thresholds: 0.7\n        iou_thresholds: 0.5\n        iou_thresholds: 0.5\n        iou_thresholds: 0.5\n        box_type: TYPE_3D\n        \"\"\"", "\n", "\n", "for", "x", "in", "range", "(", "0", ",", "100", ")", ":", "\n", "            ", "config", ".", "score_cutoffs", ".", "append", "(", "x", "*", "0.01", ")", "\n", "", "config", ".", "score_cutoffs", ".", "append", "(", "1.0", ")", "\n", "\n", "text_format", ".", "Merge", "(", "config_text", ",", "config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.build_graph": [[110, 135], ["graph.as_default", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "waymo_open_dataset.metrics.python.detection_metrics.get_detection_metric_ops", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.build_config"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.build_config"], ["", "def", "build_graph", "(", "self", ",", "graph", ")", ":", "\n", "        ", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "self", ".", "_pd_frame_id", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int64", ")", "\n", "self", ".", "_pd_bbox", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_pd_type", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "uint8", ")", "\n", "self", ".", "_pd_score", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_pd_overlap_nlz", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ")", "\n", "\n", "self", ".", "_gt_frame_id", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int64", ")", "\n", "self", ".", "_gt_bbox", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_gt_type", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "uint8", ")", "\n", "self", ".", "_gt_difficulty", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "uint8", ")", "\n", "metrics", "=", "detection_metrics", ".", "get_detection_metric_ops", "(", "\n", "config", "=", "self", ".", "build_config", "(", ")", ",", "\n", "prediction_frame_id", "=", "self", ".", "_pd_frame_id", ",", "\n", "prediction_bbox", "=", "self", ".", "_pd_bbox", ",", "\n", "prediction_type", "=", "self", ".", "_pd_type", ",", "\n", "prediction_score", "=", "self", ".", "_pd_score", ",", "\n", "prediction_overlap_nlz", "=", "self", ".", "_pd_overlap_nlz", ",", "\n", "ground_truth_bbox", "=", "self", ".", "_gt_bbox", ",", "\n", "ground_truth_type", "=", "self", ".", "_gt_type", ",", "\n", "ground_truth_frame_id", "=", "self", ".", "_gt_frame_id", ",", "\n", "ground_truth_difficulty", "=", "self", ".", "_gt_difficulty", ",", "\n", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.run_eval_ops": [[136, 163], ["sess.run", "tensorflow.group", "metrics.values"], "methods", ["None"], ["", "", "def", "run_eval_ops", "(", "\n", "self", ",", "\n", "sess", ",", "\n", "graph", ",", "\n", "metrics", ",", "\n", "prediction_frame_id", ",", "\n", "prediction_bbox", ",", "\n", "prediction_type", ",", "\n", "prediction_score", ",", "\n", "prediction_overlap_nlz", ",", "\n", "ground_truth_frame_id", ",", "\n", "ground_truth_bbox", ",", "\n", "ground_truth_type", ",", "\n", "ground_truth_difficulty", ",", "\n", ")", ":", "\n", "        ", "sess", ".", "run", "(", "\n", "[", "tf", ".", "group", "(", "[", "value", "[", "1", "]", "for", "value", "in", "metrics", ".", "values", "(", ")", "]", ")", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "_pd_bbox", ":", "prediction_bbox", ",", "\n", "self", ".", "_pd_frame_id", ":", "prediction_frame_id", ",", "\n", "self", ".", "_pd_type", ":", "prediction_type", ",", "\n", "self", ".", "_pd_score", ":", "prediction_score", ",", "\n", "self", ".", "_pd_overlap_nlz", ":", "prediction_overlap_nlz", ",", "\n", "self", ".", "_gt_bbox", ":", "ground_truth_bbox", ",", "\n", "self", ".", "_gt_type", ":", "ground_truth_type", ",", "\n", "self", ".", "_gt_frame_id", ":", "ground_truth_frame_id", ",", "\n", "self", ".", "_gt_difficulty", ":", "ground_truth_difficulty", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.eval_value_ops": [[166, 168], ["sess.run", "metrics.items"], "methods", ["None"], ["", "def", "eval_value_ops", "(", "self", ",", "sess", ",", "graph", ",", "metrics", ")", ":", "\n", "        ", "return", "{", "item", "[", "0", "]", ":", "sess", ".", "run", "(", "[", "item", "[", "1", "]", "[", "0", "]", "]", ")", "for", "item", "in", "metrics", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.mask_by_distance": [[169, 177], ["tuple", "numpy.linalg.norm", "ret_ans.append"], "methods", ["None"], ["", "def", "mask_by_distance", "(", "self", ",", "distance_thresh", ",", "boxes_3d", ",", "*", "args", ")", ":", "\n", "        ", "mask", "=", "np", ".", "linalg", ".", "norm", "(", "boxes_3d", "[", ":", ",", "0", ":", "2", "]", ",", "axis", "=", "1", ")", "<", "distance_thresh", "+", "0.5", "\n", "boxes_3d", "=", "boxes_3d", "[", "mask", "]", "\n", "ret_ans", "=", "[", "boxes_3d", "]", "\n", "for", "arg", "in", "args", ":", "\n", "            ", "ret_ans", ".", "append", "(", "arg", "[", "mask", "]", ")", "\n", "\n", "", "return", "tuple", "(", "ret_ans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.waymo_evaluation": [[178, 216], ["print", "tensorflow.compat.v1.disable_eager_execution", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.generate_waymo_type_results", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.generate_waymo_type_results", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.mask_by_distance", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.mask_by_distance", "print", "print", "tensorflow.Graph", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.build_graph", "len", "len", "pd_score.max", "print", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.test_session", "sess.run", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.run_eval_ops", "prediction_infos.__len__", "gt_infos.__len__", "tensorflow.compat.v1.initializers.local_variables", "tensorflow.compat.v1.variable_scope", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.eval_value_ops", "len", "len", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.generate_waymo_type_results", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.generate_waymo_type_results", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.mask_by_distance", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.mask_by_distance", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.build_graph", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.run_eval_ops", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.eval_value_ops"], ["", "def", "waymo_evaluation", "(", "self", ",", "prediction_infos", ",", "gt_infos", ",", "class_name", ",", "distance_thresh", "=", "100", ",", "fake_gt_infos", "=", "True", ")", ":", "\n", "        ", "print", "(", "'Start the waymo evaluation...'", ")", "\n", "assert", "len", "(", "prediction_infos", ")", "==", "len", "(", "gt_infos", ")", ",", "'%d vs %d'", "%", "(", "prediction_infos", ".", "__len__", "(", ")", ",", "gt_infos", ".", "__len__", "(", ")", ")", "\n", "\n", "tf", ".", "compat", ".", "v1", ".", "disable_eager_execution", "(", ")", "\n", "pd_frameid", ",", "pd_boxes3d", ",", "pd_type", ",", "pd_score", ",", "pd_overlap_nlz", ",", "_", "=", "self", ".", "generate_waymo_type_results", "(", "\n", "prediction_infos", ",", "class_name", ",", "is_gt", "=", "False", "\n", ")", "\n", "gt_frameid", ",", "gt_boxes3d", ",", "gt_type", ",", "gt_score", ",", "gt_overlap_nlz", ",", "gt_difficulty", "=", "self", ".", "generate_waymo_type_results", "(", "\n", "gt_infos", ",", "class_name", ",", "is_gt", "=", "True", ",", "fake_gt_infos", "=", "fake_gt_infos", "\n", ")", "\n", "\n", "pd_boxes3d", ",", "pd_frameid", ",", "pd_type", ",", "pd_score", ",", "pd_overlap_nlz", "=", "self", ".", "mask_by_distance", "(", "\n", "distance_thresh", ",", "pd_boxes3d", ",", "pd_frameid", ",", "pd_type", ",", "pd_score", ",", "pd_overlap_nlz", "\n", ")", "\n", "gt_boxes3d", ",", "gt_frameid", ",", "gt_type", ",", "gt_score", ",", "gt_difficulty", "=", "self", ".", "mask_by_distance", "(", "\n", "distance_thresh", ",", "gt_boxes3d", ",", "gt_frameid", ",", "gt_type", ",", "gt_score", ",", "gt_difficulty", "\n", ")", "\n", "\n", "print", "(", "'Number: (pd, %d) VS. (gt, %d)'", "%", "(", "len", "(", "pd_boxes3d", ")", ",", "len", "(", "gt_boxes3d", ")", ")", ")", "\n", "print", "(", "'Level 1: %d, Level2: %d)'", "%", "(", "(", "gt_difficulty", "==", "1", ")", ".", "sum", "(", ")", ",", "(", "gt_difficulty", "==", "2", ")", ".", "sum", "(", ")", ")", ")", "\n", "\n", "if", "pd_score", ".", "max", "(", ")", ">", "1", ":", "\n", "# assert pd_score.max() <= 1.0, 'Waymo evaluation only supports normalized scores'", "\n", "            ", "pd_score", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "pd_score", ")", ")", "\n", "print", "(", "'Warning: Waymo evaluation only supports normalized scores'", ")", "\n", "\n", "", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "metrics", "=", "self", ".", "build_graph", "(", "graph", ")", "\n", "with", "self", ".", "test_session", "(", "graph", "=", "graph", ")", "as", "sess", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "compat", ".", "v1", ".", "initializers", ".", "local_variables", "(", ")", ")", "\n", "self", ".", "run_eval_ops", "(", "\n", "sess", ",", "graph", ",", "metrics", ",", "pd_frameid", ",", "pd_boxes3d", ",", "pd_type", ",", "pd_score", ",", "pd_overlap_nlz", ",", "\n", "gt_frameid", ",", "gt_boxes3d", ",", "gt_type", ",", "gt_difficulty", ",", "\n", ")", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "'detection_metrics'", ",", "reuse", "=", "True", ")", ":", "\n", "                ", "aps", "=", "self", ".", "eval_value_ops", "(", "sess", ",", "graph", ",", "metrics", ")", "\n", "", "", "return", "aps", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.limit_period": [[19, 21], ["numpy.floor"], "function", ["None"], ["def", "limit_period", "(", "val", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", ")", ":", "\n", "    ", "return", "val", "-", "np", ".", "floor", "(", "val", "/", "period", "+", "offset", ")", "*", "period", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.main": [[218, 243], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pickle.load", "pickle.load", "print", "waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator", "range", "OpenPCDetWaymoDetectionMetricsEstimator.waymo_evaluation", "print", "open", "open", "len", "gt_infos_dst.append"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.OpenPCDetWaymoDetectionMetricsEstimator.waymo_evaluation"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'arg parser'", ")", "\n", "parser", ".", "add_argument", "(", "'--pred_infos'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'pickle file'", ")", "\n", "parser", ".", "add_argument", "(", "'--gt_infos'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'pickle file'", ")", "\n", "parser", ".", "add_argument", "(", "'--class_names'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "'Vehicle'", ",", "'Pedestrian'", ",", "'Cyclist'", "]", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--sampled_interval'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'sampled interval for GT sequences'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "pred_infos", "=", "pickle", ".", "load", "(", "open", "(", "args", ".", "pred_infos", ",", "'rb'", ")", ")", "\n", "gt_infos", "=", "pickle", ".", "load", "(", "open", "(", "args", ".", "gt_infos", ",", "'rb'", ")", ")", "\n", "\n", "print", "(", "'Start to evaluate the waymo format results...'", ")", "\n", "eval", "=", "OpenPCDetWaymoDetectionMetricsEstimator", "(", ")", "\n", "\n", "gt_infos_dst", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "gt_infos", ")", ",", "args", ".", "sampled_interval", ")", ":", "\n", "        ", "cur_info", "=", "gt_infos", "[", "idx", "]", "[", "'annos'", "]", "\n", "cur_info", "[", "'frame_id'", "]", "=", "gt_infos", "[", "idx", "]", "[", "'frame_id'", "]", "\n", "gt_infos_dst", ".", "append", "(", "cur_info", ")", "\n", "\n", "", "waymo_AP", "=", "eval", ".", "waymo_evaluation", "(", "\n", "pred_infos", ",", "gt_infos_dst", ",", "class_name", "=", "args", ".", "class_names", ",", "distance_thresh", "=", "1000", ",", "fake_gt_infos", "=", "False", "\n", ")", "\n", "\n", "print", "(", "waymo_AP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_utils.generate_labels": [[23, 62], ["range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "utils.common_utils.drop_info_with_name", "len", "heading_angles.append", "obj_name.append", "difficulty.append", "tracking_difficulty.append", "dimensions.append", "locations.append", "obj_ids.append", "num_points_in_gt.append", "annotations[].__len__", "numpy.concatenate", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.drop_info_with_name", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["def", "generate_labels", "(", "frame", ")", ":", "\n", "    ", "obj_name", ",", "difficulty", ",", "dimensions", ",", "locations", ",", "heading_angles", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "tracking_difficulty", ",", "speeds", ",", "accelerations", ",", "obj_ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "num_points_in_gt", "=", "[", "]", "\n", "laser_labels", "=", "frame", ".", "laser_labels", "\n", "for", "i", "in", "range", "(", "len", "(", "laser_labels", ")", ")", ":", "\n", "        ", "box", "=", "laser_labels", "[", "i", "]", ".", "box", "\n", "class_ind", "=", "laser_labels", "[", "i", "]", ".", "type", "\n", "loc", "=", "[", "box", ".", "center_x", ",", "box", ".", "center_y", ",", "box", ".", "center_z", "]", "\n", "heading_angles", ".", "append", "(", "box", ".", "heading", ")", "\n", "obj_name", ".", "append", "(", "WAYMO_CLASSES", "[", "class_ind", "]", ")", "\n", "difficulty", ".", "append", "(", "laser_labels", "[", "i", "]", ".", "detection_difficulty_level", ")", "\n", "tracking_difficulty", ".", "append", "(", "laser_labels", "[", "i", "]", ".", "tracking_difficulty_level", ")", "\n", "dimensions", ".", "append", "(", "[", "box", ".", "length", ",", "box", ".", "width", ",", "box", ".", "height", "]", ")", "# lwh in unified coordinate of OpenPCDet", "\n", "locations", ".", "append", "(", "loc", ")", "\n", "obj_ids", ".", "append", "(", "laser_labels", "[", "i", "]", ".", "id", ")", "\n", "num_points_in_gt", ".", "append", "(", "laser_labels", "[", "i", "]", ".", "num_lidar_points_in_box", ")", "\n", "\n", "", "annotations", "=", "{", "}", "\n", "annotations", "[", "'name'", "]", "=", "np", ".", "array", "(", "obj_name", ")", "\n", "annotations", "[", "'difficulty'", "]", "=", "np", ".", "array", "(", "difficulty", ")", "\n", "annotations", "[", "'dimensions'", "]", "=", "np", ".", "array", "(", "dimensions", ")", "\n", "annotations", "[", "'location'", "]", "=", "np", ".", "array", "(", "locations", ")", "\n", "annotations", "[", "'heading_angles'", "]", "=", "np", ".", "array", "(", "heading_angles", ")", "\n", "\n", "annotations", "[", "'obj_ids'", "]", "=", "np", ".", "array", "(", "obj_ids", ")", "\n", "annotations", "[", "'tracking_difficulty'", "]", "=", "np", ".", "array", "(", "tracking_difficulty", ")", "\n", "annotations", "[", "'num_points_in_gt'", "]", "=", "np", ".", "array", "(", "num_points_in_gt", ")", "\n", "\n", "annotations", "=", "common_utils", ".", "drop_info_with_name", "(", "annotations", ",", "name", "=", "'unknown'", ")", "\n", "if", "annotations", "[", "'name'", "]", ".", "__len__", "(", ")", ">", "0", ":", "\n", "        ", "gt_boxes_lidar", "=", "np", ".", "concatenate", "(", "[", "\n", "annotations", "[", "'location'", "]", ",", "annotations", "[", "'dimensions'", "]", ",", "annotations", "[", "'heading_angles'", "]", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "        ", "gt_boxes_lidar", "=", "np", ".", "zeros", "(", "(", "0", ",", "7", ")", ")", "\n", "", "annotations", "[", "'gt_boxes_lidar'", "]", "=", "gt_boxes_lidar", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_utils.convert_range_image_to_point_cloud": [[64, 158], ["sorted", "tensorflow.convert_to_tensor", "tensorflow.reshape", "waymo_open_dataset.utils.transform_utils.get_rotation_matrix", "waymo_open_dataset.utils.transform_utils.get_transform", "numpy.reshape", "tensorflow.convert_to_tensor", "points.append", "cp_points.append", "points_NLZ.append", "points_intensity.append", "points_elongation.append", "numpy.array", "tensorflow.reverse", "numpy.reshape", "tensorflow.reshape", "waymo_open_dataset.utils.range_image_utils.extract_point_cloud_from_range_image", "tensorflow.squeeze", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.reshape", "tensorflow.gather_nd", "points_single.append", "cp_points_single.append", "points_NLZ_single.append", "points_intensity_single.append", "points_elongation_single.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "waymo_open_dataset.utils.range_image_utils.compute_inclination", "tensorflow.constant", "numpy.array", "tensorflow.convert_to_tensor", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.where", "tensorflow.compat.v1.where", "tensorflow.compat.v1.where", "tensorflow.compat.v1.where", "tensorflow.convert_to_tensor", "tensorflow.where", "tf.gather_nd.numpy", "tf.gather_nd.numpy", "tf.gather_nd.numpy", "tf.gather_nd.numpy", "tf.gather_nd.numpy", "tensorflow.constant", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "def", "convert_range_image_to_point_cloud", "(", "frame", ",", "range_images", ",", "camera_projections", ",", "range_image_top_pose", ",", "ri_index", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "\"\"\"\n    Modified from the codes of Waymo Open Dataset.\n    Convert range images to point cloud.\n    Args:\n        frame: open dataset frame\n        range_images: A dict of {laser_name, [range_image_first_return, range_image_second_return]}.\n        camera_projections: A dict of {laser_name,\n            [camera_projection_from_first_return, camera_projection_from_second_return]}.\n        range_image_top_pose: range image pixel pose for top lidar.\n        ri_index: 0 for the first return, 1 for the second return.\n\n    Returns:\n        points: {[N, 3]} list of 3d lidar points of length 5 (number of lidars).\n        cp_points: {[N, 6]} list of camera projections of length 5 (number of lidars).\n    \"\"\"", "\n", "calibrations", "=", "sorted", "(", "frame", ".", "context", ".", "laser_calibrations", ",", "key", "=", "lambda", "c", ":", "c", ".", "name", ")", "\n", "points", "=", "[", "]", "\n", "cp_points", "=", "[", "]", "\n", "points_NLZ", "=", "[", "]", "\n", "points_intensity", "=", "[", "]", "\n", "points_elongation", "=", "[", "]", "\n", "\n", "frame_pose", "=", "tf", ".", "convert_to_tensor", "(", "np", ".", "reshape", "(", "np", ".", "array", "(", "frame", ".", "pose", ".", "transform", ")", ",", "[", "4", ",", "4", "]", ")", ")", "\n", "# [H, W, 6]", "\n", "range_image_top_pose_tensor", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "convert_to_tensor", "(", "range_image_top_pose", ".", "data", ")", ",", "range_image_top_pose", ".", "shape", ".", "dims", "\n", ")", "\n", "# [H, W, 3, 3]", "\n", "range_image_top_pose_tensor_rotation", "=", "transform_utils", ".", "get_rotation_matrix", "(", "\n", "range_image_top_pose_tensor", "[", "...", ",", "0", "]", ",", "range_image_top_pose_tensor", "[", "...", ",", "1", "]", ",", "\n", "range_image_top_pose_tensor", "[", "...", ",", "2", "]", ")", "\n", "range_image_top_pose_tensor_translation", "=", "range_image_top_pose_tensor", "[", "...", ",", "3", ":", "]", "\n", "range_image_top_pose_tensor", "=", "transform_utils", ".", "get_transform", "(", "\n", "range_image_top_pose_tensor_rotation", ",", "\n", "range_image_top_pose_tensor_translation", ")", "\n", "\n", "for", "c", "in", "calibrations", ":", "\n", "        ", "points_single", ",", "cp_points_single", ",", "points_NLZ_single", ",", "points_intensity_single", ",", "points_elongation_single", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "cur_ri_index", "in", "ri_index", ":", "\n", "            ", "range_image", "=", "range_images", "[", "c", ".", "name", "]", "[", "cur_ri_index", "]", "\n", "if", "len", "(", "c", ".", "beam_inclinations", ")", "==", "0", ":", "# pylint: disable=g-explicit-length-test", "\n", "                ", "beam_inclinations", "=", "range_image_utils", ".", "compute_inclination", "(", "\n", "tf", ".", "constant", "(", "[", "c", ".", "beam_inclination_min", ",", "c", ".", "beam_inclination_max", "]", ")", ",", "\n", "height", "=", "range_image", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "beam_inclinations", "=", "tf", ".", "constant", "(", "c", ".", "beam_inclinations", ")", "\n", "\n", "", "beam_inclinations", "=", "tf", ".", "reverse", "(", "beam_inclinations", ",", "axis", "=", "[", "-", "1", "]", ")", "\n", "extrinsic", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "c", ".", "extrinsic", ".", "transform", ")", ",", "[", "4", ",", "4", "]", ")", "\n", "\n", "range_image_tensor", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "convert_to_tensor", "(", "range_image", ".", "data", ")", ",", "range_image", ".", "shape", ".", "dims", ")", "\n", "pixel_pose_local", "=", "None", "\n", "frame_pose_local", "=", "None", "\n", "if", "c", ".", "name", "==", "dataset_pb2", ".", "LaserName", ".", "TOP", ":", "\n", "                ", "pixel_pose_local", "=", "range_image_top_pose_tensor", "\n", "pixel_pose_local", "=", "tf", ".", "expand_dims", "(", "pixel_pose_local", ",", "axis", "=", "0", ")", "\n", "frame_pose_local", "=", "tf", ".", "expand_dims", "(", "frame_pose", ",", "axis", "=", "0", ")", "\n", "", "range_image_mask", "=", "range_image_tensor", "[", "...", ",", "0", "]", ">", "0", "\n", "range_image_NLZ", "=", "range_image_tensor", "[", "...", ",", "3", "]", "\n", "range_image_intensity", "=", "range_image_tensor", "[", "...", ",", "1", "]", "\n", "range_image_elongation", "=", "range_image_tensor", "[", "...", ",", "2", "]", "\n", "range_image_cartesian", "=", "range_image_utils", ".", "extract_point_cloud_from_range_image", "(", "\n", "tf", ".", "expand_dims", "(", "range_image_tensor", "[", "...", ",", "0", "]", ",", "axis", "=", "0", ")", ",", "\n", "tf", ".", "expand_dims", "(", "extrinsic", ",", "axis", "=", "0", ")", ",", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "convert_to_tensor", "(", "beam_inclinations", ")", ",", "axis", "=", "0", ")", ",", "\n", "pixel_pose", "=", "pixel_pose_local", ",", "\n", "frame_pose", "=", "frame_pose_local", ")", "\n", "\n", "range_image_cartesian", "=", "tf", ".", "squeeze", "(", "range_image_cartesian", ",", "axis", "=", "0", ")", "\n", "points_tensor", "=", "tf", ".", "gather_nd", "(", "range_image_cartesian", ",", "\n", "tf", ".", "where", "(", "range_image_mask", ")", ")", "\n", "points_NLZ_tensor", "=", "tf", ".", "gather_nd", "(", "range_image_NLZ", ",", "tf", ".", "compat", ".", "v1", ".", "where", "(", "range_image_mask", ")", ")", "\n", "points_intensity_tensor", "=", "tf", ".", "gather_nd", "(", "range_image_intensity", ",", "tf", ".", "compat", ".", "v1", ".", "where", "(", "range_image_mask", ")", ")", "\n", "points_elongation_tensor", "=", "tf", ".", "gather_nd", "(", "range_image_elongation", ",", "tf", ".", "compat", ".", "v1", ".", "where", "(", "range_image_mask", ")", ")", "\n", "cp", "=", "camera_projections", "[", "c", ".", "name", "]", "[", "0", "]", "\n", "cp_tensor", "=", "tf", ".", "reshape", "(", "tf", ".", "convert_to_tensor", "(", "cp", ".", "data", ")", ",", "cp", ".", "shape", ".", "dims", ")", "\n", "cp_points_tensor", "=", "tf", ".", "gather_nd", "(", "cp_tensor", ",", "tf", ".", "where", "(", "range_image_mask", ")", ")", "\n", "\n", "points_single", ".", "append", "(", "points_tensor", ".", "numpy", "(", ")", ")", "\n", "cp_points_single", ".", "append", "(", "cp_points_tensor", ".", "numpy", "(", ")", ")", "\n", "points_NLZ_single", ".", "append", "(", "points_NLZ_tensor", ".", "numpy", "(", ")", ")", "\n", "points_intensity_single", ".", "append", "(", "points_intensity_tensor", ".", "numpy", "(", ")", ")", "\n", "points_elongation_single", ".", "append", "(", "points_elongation_tensor", ".", "numpy", "(", ")", ")", "\n", "\n", "", "points", ".", "append", "(", "np", ".", "concatenate", "(", "points_single", ",", "axis", "=", "0", ")", ")", "\n", "cp_points", ".", "append", "(", "np", ".", "concatenate", "(", "cp_points_single", ",", "axis", "=", "0", ")", ")", "\n", "points_NLZ", ".", "append", "(", "np", ".", "concatenate", "(", "points_NLZ_single", ",", "axis", "=", "0", ")", ")", "\n", "points_intensity", ".", "append", "(", "np", ".", "concatenate", "(", "points_intensity_single", ",", "axis", "=", "0", ")", ")", "\n", "points_elongation", ".", "append", "(", "np", ".", "concatenate", "(", "points_elongation_single", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "return", "points", ",", "cp_points", ",", "points_NLZ", ",", "points_intensity", ",", "points_elongation", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_utils.save_lidar_points": [[160, 182], ["waymo_open_dataset.utils.frame_utils.parse_range_image_and_camera_projection", "waymo_utils.convert_range_image_to_point_cloud", "numpy.concatenate", "numpy.concatenate().reshape", "numpy.concatenate().reshape", "numpy.concatenate().reshape", "numpy.concatenate().astype", "numpy.save", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_utils.convert_range_image_to_point_cloud"], ["", "def", "save_lidar_points", "(", "frame", ",", "cur_save_path", ",", "use_two_returns", "=", "True", ")", ":", "\n", "    ", "range_images", ",", "camera_projections", ",", "range_image_top_pose", "=", "frame_utils", ".", "parse_range_image_and_camera_projection", "(", "frame", ")", "\n", "\n", "points", ",", "cp_points", ",", "points_in_NLZ_flag", ",", "points_intensity", ",", "points_elongation", "=", "convert_range_image_to_point_cloud", "(", "\n", "frame", ",", "range_images", ",", "camera_projections", ",", "range_image_top_pose", ",", "ri_index", "=", "(", "0", ",", "1", ")", "if", "use_two_returns", "else", "(", "0", ",", ")", "\n", ")", "\n", "\n", "# 3d points in vehicle frame.", "\n", "points_all", "=", "np", ".", "concatenate", "(", "points", ",", "axis", "=", "0", ")", "\n", "points_in_NLZ_flag", "=", "np", ".", "concatenate", "(", "points_in_NLZ_flag", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "points_intensity", "=", "np", ".", "concatenate", "(", "points_intensity", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "points_elongation", "=", "np", ".", "concatenate", "(", "points_elongation", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "num_points_of_each_lidar", "=", "[", "point", ".", "shape", "[", "0", "]", "for", "point", "in", "points", "]", "\n", "save_points", "=", "np", ".", "concatenate", "(", "[", "\n", "points_all", ",", "points_intensity", ",", "points_elongation", ",", "points_in_NLZ_flag", "\n", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "np", ".", "save", "(", "cur_save_path", ",", "save_points", ")", "\n", "# print('saving to ', cur_save_path)", "\n", "return", "num_points_of_each_lidar", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_utils.process_single_sequence": [[184, 245], ["tensorflow.data.TFRecordDataset", "cur_save_dir.mkdir", "pkl_file.exists", "enumerate", "print", "os.path.splitext", "sequence_file.exists", "print", "str", "pickle.load", "print", "waymo_open_dataset.dataset_pb2.Frame", "dataset_pb2.Frame.ParseFromString", "range", "numpy.array().reshape", "waymo_utils.save_lidar_points", "pickle.load.append", "open", "pickle.dump", "os.path.basename", "open", "bytearray", "image_info.update", "waymo_utils.generate_labels", "data.numpy", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_utils.save_lidar_points", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_utils.generate_labels"], ["", "def", "process_single_sequence", "(", "sequence_file", ",", "save_path", ",", "sampled_interval", ",", "has_label", "=", "True", ",", "use_two_returns", "=", "True", ")", ":", "\n", "    ", "sequence_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "sequence_file", ")", ")", "[", "0", "]", "\n", "\n", "# print('Load record (sampled_interval=%d): %s' % (sampled_interval, sequence_name))", "\n", "if", "not", "sequence_file", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "'NotFoundError: %s'", "%", "sequence_file", ")", "\n", "return", "[", "]", "\n", "\n", "", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "str", "(", "sequence_file", ")", ",", "compression_type", "=", "''", ")", "\n", "cur_save_dir", "=", "save_path", "/", "sequence_name", "\n", "cur_save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "pkl_file", "=", "cur_save_dir", "/", "(", "'%s.pkl'", "%", "sequence_name", ")", "\n", "\n", "sequence_infos", "=", "[", "]", "\n", "if", "pkl_file", ".", "exists", "(", ")", ":", "\n", "        ", "sequence_infos", "=", "pickle", ".", "load", "(", "open", "(", "pkl_file", ",", "'rb'", ")", ")", "\n", "print", "(", "'Skip sequence since it has been processed before: %s'", "%", "pkl_file", ")", "\n", "return", "sequence_infos", "\n", "\n", "", "for", "cnt", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "cnt", "%", "sampled_interval", "!=", "0", ":", "\n", "            ", "continue", "\n", "# print(sequence_name, cnt)", "\n", "", "frame", "=", "dataset_pb2", ".", "Frame", "(", ")", "\n", "frame", ".", "ParseFromString", "(", "bytearray", "(", "data", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "info", "=", "{", "}", "\n", "pc_info", "=", "{", "'num_features'", ":", "5", ",", "'lidar_sequence'", ":", "sequence_name", ",", "'sample_idx'", ":", "cnt", "}", "\n", "info", "[", "'point_cloud'", "]", "=", "pc_info", "\n", "\n", "info", "[", "'frame_id'", "]", "=", "sequence_name", "+", "(", "'_%03d'", "%", "cnt", ")", "\n", "info", "[", "'metadata'", "]", "=", "{", "\n", "'context_name'", ":", "frame", ".", "context", ".", "name", ",", "\n", "'timestamp_micros'", ":", "frame", ".", "timestamp_micros", "\n", "}", "\n", "image_info", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "            ", "width", "=", "frame", ".", "context", ".", "camera_calibrations", "[", "j", "]", ".", "width", "\n", "height", "=", "frame", ".", "context", ".", "camera_calibrations", "[", "j", "]", ".", "height", "\n", "image_info", ".", "update", "(", "{", "'image_shape_%d'", "%", "j", ":", "(", "height", ",", "width", ")", "}", ")", "\n", "", "info", "[", "'image'", "]", "=", "image_info", "\n", "\n", "pose", "=", "np", ".", "array", "(", "frame", ".", "pose", ".", "transform", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "info", "[", "'pose'", "]", "=", "pose", "\n", "\n", "if", "has_label", ":", "\n", "            ", "annotations", "=", "generate_labels", "(", "frame", ")", "\n", "info", "[", "'annos'", "]", "=", "annotations", "\n", "\n", "", "num_points_of_each_lidar", "=", "save_lidar_points", "(", "\n", "frame", ",", "cur_save_dir", "/", "(", "'%04d.npy'", "%", "cnt", ")", ",", "use_two_returns", "=", "use_two_returns", "\n", ")", "\n", "info", "[", "'num_points_of_each_lidar'", "]", "=", "num_points_of_each_lidar", "\n", "\n", "sequence_infos", ".", "append", "(", "info", ")", "\n", "\n", "", "with", "open", "(", "pkl_file", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "sequence_infos", ",", "f", ")", "\n", "\n", "", "print", "(", "'Infos are saved to (sampled_interval=%d): %s'", "%", "(", "sampled_interval", ",", "pkl_file", ")", ")", "\n", "return", "sequence_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_utils.transform_annotations_to_kitti_format": [[5, 50], ["range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "anno.pop", "len", "len", "anno[].copy", "anno[].copy", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "utils.box_utils.boxes3d_kitti_fakelidar_to_lidar", "numpy.arctan2"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_kitti_fakelidar_to_lidar"], ["def", "transform_annotations_to_kitti_format", "(", "annos", ",", "map_name_to_kitti", "=", "None", ",", "info_with_fakelidar", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        annos:\n        map_name_to_kitti: dict, map name to KITTI names (Car, Pedestrian, Cyclist)\n        info_with_fakelidar:\n    Returns:\n\n    \"\"\"", "\n", "for", "anno", "in", "annos", ":", "\n", "# For lyft and nuscenes, different anno key in info", "\n", "        ", "if", "'name'", "not", "in", "anno", ":", "\n", "            ", "anno", "[", "'name'", "]", "=", "anno", "[", "'gt_names'", "]", "\n", "anno", ".", "pop", "(", "'gt_names'", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "anno", "[", "'name'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "anno", "[", "'name'", "]", "[", "k", "]", "=", "map_name_to_kitti", "[", "anno", "[", "'name'", "]", "[", "k", "]", "]", "\n", "\n", "", "anno", "[", "'bbox'", "]", "=", "np", ".", "zeros", "(", "(", "len", "(", "anno", "[", "'name'", "]", ")", ",", "4", ")", ")", "\n", "anno", "[", "'bbox'", "]", "[", ":", ",", "2", ":", "4", "]", "=", "50", "# [0, 0, 50, 50]", "\n", "anno", "[", "'truncated'", "]", "=", "np", ".", "zeros", "(", "len", "(", "anno", "[", "'name'", "]", ")", ")", "\n", "anno", "[", "'occluded'", "]", "=", "np", ".", "zeros", "(", "len", "(", "anno", "[", "'name'", "]", ")", ")", "\n", "if", "'boxes_lidar'", "in", "anno", ":", "\n", "            ", "gt_boxes_lidar", "=", "anno", "[", "'boxes_lidar'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "gt_boxes_lidar", "=", "anno", "[", "'gt_boxes_lidar'", "]", ".", "copy", "(", ")", "\n", "\n", "", "if", "len", "(", "gt_boxes_lidar", ")", ">", "0", ":", "\n", "            ", "if", "info_with_fakelidar", ":", "\n", "                ", "gt_boxes_lidar", "=", "box_utils", ".", "boxes3d_kitti_fakelidar_to_lidar", "(", "gt_boxes_lidar", ")", "\n", "\n", "", "gt_boxes_lidar", "[", ":", ",", "2", "]", "-=", "gt_boxes_lidar", "[", ":", ",", "5", "]", "/", "2", "\n", "anno", "[", "'location'", "]", "=", "np", ".", "zeros", "(", "(", "gt_boxes_lidar", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "anno", "[", "'location'", "]", "[", ":", ",", "0", "]", "=", "-", "gt_boxes_lidar", "[", ":", ",", "1", "]", "# x = -y_lidar", "\n", "anno", "[", "'location'", "]", "[", ":", ",", "1", "]", "=", "-", "gt_boxes_lidar", "[", ":", ",", "2", "]", "# y = -z_lidar", "\n", "anno", "[", "'location'", "]", "[", ":", ",", "2", "]", "=", "gt_boxes_lidar", "[", ":", ",", "0", "]", "# z = x_lidar", "\n", "dxdydz", "=", "gt_boxes_lidar", "[", ":", ",", "3", ":", "6", "]", "\n", "anno", "[", "'dimensions'", "]", "=", "dxdydz", "[", ":", ",", "[", "0", ",", "2", ",", "1", "]", "]", "# lwh ==> lhw", "\n", "anno", "[", "'rotation_y'", "]", "=", "-", "gt_boxes_lidar", "[", ":", ",", "6", "]", "-", "np", ".", "pi", "/", "2.0", "\n", "anno", "[", "'alpha'", "]", "=", "-", "np", ".", "arctan2", "(", "-", "gt_boxes_lidar", "[", ":", ",", "1", "]", ",", "gt_boxes_lidar", "[", ":", ",", "0", "]", ")", "+", "anno", "[", "'rotation_y'", "]", "\n", "", "else", ":", "\n", "            ", "anno", "[", "'location'", "]", "=", "anno", "[", "'dimensions'", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", "\n", "anno", "[", "'rotation_y'", "]", "=", "anno", "[", "'alpha'", "]", "=", "np", ".", "zeros", "(", "0", ")", "\n", "\n", "", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_utils.calib_to_matricies": [[52, 67], ["numpy.vstack", "numpy.hstack", "numpy.vstack", "numpy.array", "numpy.zeros", "numpy.array"], "function", ["None"], ["", "def", "calib_to_matricies", "(", "calib", ")", ":", "\n", "    ", "\"\"\"\n    Converts calibration object to transformation matricies\n    Args:\n        calib: calibration.Calibration, Calibration object\n    Returns\n        V2R: (4, 4), Lidar to rectified camera transformation matrix\n        P2: (3, 4), Camera projection matrix\n    \"\"\"", "\n", "V2C", "=", "np", ".", "vstack", "(", "(", "calib", ".", "V2C", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "# (4, 4)", "\n", "R0", "=", "np", ".", "hstack", "(", "(", "calib", ".", "R0", ",", "np", ".", "zeros", "(", "(", "3", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "# (3, 4)", "\n", "R0", "=", "np", ".", "vstack", "(", "(", "R0", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "# (4, 4)", "\n", "V2R", "=", "R0", "@", "V2C", "\n", "P2", "=", "calib", ".", "P2", "\n", "return", "V2R", ",", "P2", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.__init__": [[14, 34], ["dataset.DatasetTemplate.__init__", "kitti_dataset.KittiDataset.include_kitti_data", "split_dir.exists", "x.strip", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.include_kitti_data"], ["    ", "def", "__init__", "(", "self", ",", "dataset_cfg", ",", "class_names", ",", "training", "=", "True", ",", "root_path", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root_path:\n            dataset_cfg:\n            class_names:\n            training:\n            logger:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "training", "=", "training", ",", "root_path", "=", "root_path", ",", "logger", "=", "logger", "\n", ")", "\n", "self", ".", "split", "=", "self", ".", "dataset_cfg", ".", "DATA_SPLIT", "[", "self", ".", "mode", "]", "\n", "self", ".", "root_split_path", "=", "self", ".", "root_path", "/", "(", "'training'", "if", "self", ".", "split", "!=", "'test'", "else", "'testing'", ")", "\n", "\n", "split_dir", "=", "self", ".", "root_path", "/", "'ImageSets'", "/", "(", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "sample_id_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "split_dir", ")", ".", "readlines", "(", ")", "]", "if", "split_dir", ".", "exists", "(", ")", "else", "None", "\n", "\n", "self", ".", "kitti_infos", "=", "[", "]", "\n", "self", ".", "include_kitti_data", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.include_kitti_data": [[35, 52], ["kitti_dataset.KittiDataset.kitti_infos.extend", "kitti_dataset.KittiDataset.logger.info", "kitti_dataset.KittiDataset.logger.info", "info_path.exists", "open", "pickle.load", "kitti_infos.extend", "len"], "methods", ["None"], ["", "def", "include_kitti_data", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Loading KITTI dataset'", ")", "\n", "", "kitti_infos", "=", "[", "]", "\n", "\n", "for", "info_path", "in", "self", ".", "dataset_cfg", ".", "INFO_PATH", "[", "mode", "]", ":", "\n", "            ", "info_path", "=", "self", ".", "root_path", "/", "info_path", "\n", "if", "not", "info_path", ".", "exists", "(", ")", ":", "\n", "                ", "continue", "\n", "", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "kitti_infos", ".", "extend", "(", "infos", ")", "\n", "\n", "", "", "self", ".", "kitti_infos", ".", "extend", "(", "kitti_infos", ")", "\n", "\n", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Total samples for KITTI dataset: %d'", "%", "(", "len", "(", "kitti_infos", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.set_split": [[53, 62], ["dataset.DatasetTemplate.__init__", "split_dir.exists", "x.strip", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["", "", "def", "set_split", "(", "self", ",", "split", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "self", ".", "dataset_cfg", ",", "class_names", "=", "self", ".", "class_names", ",", "training", "=", "self", ".", "training", ",", "root_path", "=", "self", ".", "root_path", ",", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "root_split_path", "=", "self", ".", "root_path", "/", "(", "'training'", "if", "self", ".", "split", "!=", "'test'", "else", "'testing'", ")", "\n", "\n", "split_dir", "=", "self", ".", "root_path", "/", "'ImageSets'", "/", "(", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "sample_id_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "split_dir", ")", ".", "readlines", "(", ")", "]", "if", "split_dir", ".", "exists", "(", ")", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_lidar": [[63, 67], ["lidar_file.exists", "numpy.fromfile().reshape", "numpy.fromfile", "str"], "methods", ["None"], ["", "def", "get_lidar", "(", "self", ",", "idx", ")", ":", "\n", "        ", "lidar_file", "=", "self", ".", "root_split_path", "/", "'velodyne'", "/", "(", "'%s.bin'", "%", "idx", ")", "\n", "assert", "lidar_file", ".", "exists", "(", ")", "\n", "return", "np", ".", "fromfile", "(", "str", "(", "lidar_file", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_image": [[68, 82], ["img_file.exists", "skimage.io.imread", "image.astype.astype.astype"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Loads image for a sample\n        Args:\n            idx: int, Sample index\n        Returns:\n            image: (H, W, 3), RGB Image\n        \"\"\"", "\n", "img_file", "=", "self", ".", "root_split_path", "/", "'image_2'", "/", "(", "'%s.png'", "%", "idx", ")", "\n", "assert", "img_file", ".", "exists", "(", ")", "\n", "image", "=", "io", ".", "imread", "(", "img_file", ")", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image", "/=", "255.0", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_image_shape": [[83, 87], ["img_file.exists", "numpy.array", "skimage.io.imread"], "methods", ["None"], ["", "def", "get_image_shape", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_file", "=", "self", ".", "root_split_path", "/", "'image_2'", "/", "(", "'%s.png'", "%", "idx", ")", "\n", "assert", "img_file", ".", "exists", "(", ")", "\n", "return", "np", ".", "array", "(", "io", ".", "imread", "(", "img_file", ")", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_label": [[88, 92], ["label_file.exists", "utils.object3d_kitti.get_objects_from_label"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.object3d_kitti.get_objects_from_label"], ["", "def", "get_label", "(", "self", ",", "idx", ")", ":", "\n", "        ", "label_file", "=", "self", ".", "root_split_path", "/", "'label_2'", "/", "(", "'%s.txt'", "%", "idx", ")", "\n", "assert", "label_file", ".", "exists", "(", ")", "\n", "return", "object3d_kitti", ".", "get_objects_from_label", "(", "label_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_depth_map": [[93, 107], ["depth_file.exists", "skimage.io.imread", "depth.astype.astype.astype"], "methods", ["None"], ["", "def", "get_depth_map", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Loads depth map for a sample\n        Args:\n            idx: str, Sample index\n        Returns:\n            depth: (H, W), Depth map\n        \"\"\"", "\n", "depth_file", "=", "self", ".", "root_split_path", "/", "'depth_2'", "/", "(", "'%s.png'", "%", "idx", ")", "\n", "assert", "depth_file", ".", "exists", "(", ")", "\n", "depth", "=", "io", ".", "imread", "(", "depth_file", ")", "\n", "depth", "=", "depth", ".", "astype", "(", "np", ".", "float32", ")", "\n", "depth", "/=", "256.0", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_calib": [[108, 112], ["calib_file.exists", "utils.calibration_kitti.Calibration"], "methods", ["None"], ["", "def", "get_calib", "(", "self", ",", "idx", ")", ":", "\n", "        ", "calib_file", "=", "self", ".", "root_split_path", "/", "'calib'", "/", "(", "'%s.txt'", "%", "idx", ")", "\n", "assert", "calib_file", ".", "exists", "(", ")", "\n", "return", "calibration_kitti", ".", "Calibration", "(", "calib_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_road_plane": [[113, 130], ["numpy.asarray", "numpy.linalg.norm", "plane_file.exists", "open", "f.readlines", "float", "lines[].split"], "methods", ["None"], ["", "def", "get_road_plane", "(", "self", ",", "idx", ")", ":", "\n", "        ", "plane_file", "=", "self", ".", "root_split_path", "/", "'planes'", "/", "(", "'%s.txt'", "%", "idx", ")", "\n", "if", "not", "plane_file", ".", "exists", "(", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "with", "open", "(", "plane_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "float", "(", "i", ")", "for", "i", "in", "lines", "[", "3", "]", ".", "split", "(", ")", "]", "\n", "plane", "=", "np", ".", "asarray", "(", "lines", ")", "\n", "\n", "# Ensure normal is always facing up, this is in the rectified camera coordinate", "\n", "if", "plane", "[", "1", "]", ">", "0", ":", "\n", "            ", "plane", "=", "-", "plane", "\n", "\n", "", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "plane", "[", "0", ":", "3", "]", ")", "\n", "plane", "=", "plane", "/", "norm", "\n", "return", "plane", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_fov_flag": [[131, 149], ["calib.rect_to_img", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.rect_to_img"], ["", "@", "staticmethod", "\n", "def", "get_fov_flag", "(", "pts_rect", ",", "img_shape", ",", "calib", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pts_rect:\n            img_shape:\n            calib:\n\n        Returns:\n\n        \"\"\"", "\n", "pts_img", ",", "pts_rect_depth", "=", "calib", ".", "rect_to_img", "(", "pts_rect", ")", "\n", "val_flag_1", "=", "np", ".", "logical_and", "(", "pts_img", "[", ":", ",", "0", "]", ">=", "0", ",", "pts_img", "[", ":", ",", "0", "]", "<", "img_shape", "[", "1", "]", ")", "\n", "val_flag_2", "=", "np", ".", "logical_and", "(", "pts_img", "[", ":", ",", "1", "]", ">=", "0", ",", "pts_img", "[", ":", ",", "1", "]", "<", "img_shape", "[", "0", "]", ")", "\n", "val_flag_merge", "=", "np", ".", "logical_and", "(", "val_flag_1", ",", "val_flag_2", ")", "\n", "pts_valid_flag", "=", "np", ".", "logical_and", "(", "val_flag_merge", ",", "pts_rect_depth", ">=", "0", ")", "\n", "\n", "return", "pts_valid_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_infos": [[150, 223], ["list", "print", "kitti_dataset.KittiDataset.get_calib", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "futures.ThreadPoolExecutor", "executor.map", "kitti_dataset.KittiDataset.get_image_shape", "kitti_dataset.KittiDataset.get_label", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array", "len", "len", "numpy.array", "kitti_dataset.KittiDataset.rect_to_lidar", "numpy.concatenate", "numpy.array", "numpy.array", "list", "kitti_dataset.KittiDataset.get_lidar", "kitti_dataset.KittiDataset.get_calib", "kitti_dataset.KittiDataset.lidar_to_rect", "kitti_dataset.KittiDataset.get_fov_flag", "utils.box_utils.boxes_to_corners_3d", "range", "obj.box2d.reshape", "obj.loc.reshape", "range", "numpy.ones", "utils.box_utils.in_hull", "utils.box_utils.in_hull.sum"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_calib", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_image_shape", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_label", "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.rect_to_lidar", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_calib", "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_fov_flag", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.in_hull"], ["", "def", "get_infos", "(", "self", ",", "num_workers", "=", "4", ",", "has_label", "=", "True", ",", "count_inside_pts", "=", "True", ",", "sample_id_list", "=", "None", ")", ":", "\n", "        ", "import", "concurrent", ".", "futures", "as", "futures", "\n", "\n", "def", "process_single_scene", "(", "sample_idx", ")", ":", "\n", "            ", "print", "(", "'%s sample_idx: %s'", "%", "(", "self", ".", "split", ",", "sample_idx", ")", ")", "\n", "info", "=", "{", "}", "\n", "pc_info", "=", "{", "'num_features'", ":", "4", ",", "'lidar_idx'", ":", "sample_idx", "}", "\n", "info", "[", "'point_cloud'", "]", "=", "pc_info", "\n", "\n", "image_info", "=", "{", "'image_idx'", ":", "sample_idx", ",", "'image_shape'", ":", "self", ".", "get_image_shape", "(", "sample_idx", ")", "}", "\n", "info", "[", "'image'", "]", "=", "image_info", "\n", "calib", "=", "self", ".", "get_calib", "(", "sample_idx", ")", "\n", "\n", "P2", "=", "np", ".", "concatenate", "(", "[", "calib", ".", "P2", ",", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "R0_4x4", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ",", "dtype", "=", "calib", ".", "R0", ".", "dtype", ")", "\n", "R0_4x4", "[", "3", ",", "3", "]", "=", "1.", "\n", "R0_4x4", "[", ":", "3", ",", ":", "3", "]", "=", "calib", ".", "R0", "\n", "V2C_4x4", "=", "np", ".", "concatenate", "(", "[", "calib", ".", "V2C", ",", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "calib_info", "=", "{", "'P2'", ":", "P2", ",", "'R0_rect'", ":", "R0_4x4", ",", "'Tr_velo_to_cam'", ":", "V2C_4x4", "}", "\n", "\n", "info", "[", "'calib'", "]", "=", "calib_info", "\n", "\n", "if", "has_label", ":", "\n", "                ", "obj_list", "=", "self", ".", "get_label", "(", "sample_idx", ")", "\n", "annotations", "=", "{", "}", "\n", "annotations", "[", "'name'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "cls_type", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'truncated'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "truncation", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'occluded'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "occlusion", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'alpha'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "alpha", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'bbox'", "]", "=", "np", ".", "concatenate", "(", "[", "obj", ".", "box2d", ".", "reshape", "(", "1", ",", "4", ")", "for", "obj", "in", "obj_list", "]", ",", "axis", "=", "0", ")", "\n", "annotations", "[", "'dimensions'", "]", "=", "np", ".", "array", "(", "[", "[", "obj", ".", "l", ",", "obj", ".", "h", ",", "obj", ".", "w", "]", "for", "obj", "in", "obj_list", "]", ")", "# lhw(camera) format", "\n", "annotations", "[", "'location'", "]", "=", "np", ".", "concatenate", "(", "[", "obj", ".", "loc", ".", "reshape", "(", "1", ",", "3", ")", "for", "obj", "in", "obj_list", "]", ",", "axis", "=", "0", ")", "\n", "annotations", "[", "'rotation_y'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "ry", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'score'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "score", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'difficulty'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "level", "for", "obj", "in", "obj_list", "]", ",", "np", ".", "int32", ")", "\n", "\n", "num_objects", "=", "len", "(", "[", "obj", ".", "cls_type", "for", "obj", "in", "obj_list", "if", "obj", ".", "cls_type", "!=", "'DontCare'", "]", ")", "\n", "num_gt", "=", "len", "(", "annotations", "[", "'name'", "]", ")", "\n", "index", "=", "list", "(", "range", "(", "num_objects", ")", ")", "+", "[", "-", "1", "]", "*", "(", "num_gt", "-", "num_objects", ")", "\n", "annotations", "[", "'index'", "]", "=", "np", ".", "array", "(", "index", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "loc", "=", "annotations", "[", "'location'", "]", "[", ":", "num_objects", "]", "\n", "dims", "=", "annotations", "[", "'dimensions'", "]", "[", ":", "num_objects", "]", "\n", "rots", "=", "annotations", "[", "'rotation_y'", "]", "[", ":", "num_objects", "]", "\n", "loc_lidar", "=", "calib", ".", "rect_to_lidar", "(", "loc", ")", "\n", "l", ",", "h", ",", "w", "=", "dims", "[", ":", ",", "0", ":", "1", "]", ",", "dims", "[", ":", ",", "1", ":", "2", "]", ",", "dims", "[", ":", ",", "2", ":", "3", "]", "\n", "loc_lidar", "[", ":", ",", "2", "]", "+=", "h", "[", ":", ",", "0", "]", "/", "2", "\n", "gt_boxes_lidar", "=", "np", ".", "concatenate", "(", "[", "loc_lidar", ",", "l", ",", "w", ",", "h", ",", "-", "(", "np", ".", "pi", "/", "2", "+", "rots", "[", "...", ",", "np", ".", "newaxis", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "annotations", "[", "'gt_boxes_lidar'", "]", "=", "gt_boxes_lidar", "\n", "\n", "info", "[", "'annos'", "]", "=", "annotations", "\n", "\n", "if", "count_inside_pts", ":", "\n", "                    ", "points", "=", "self", ".", "get_lidar", "(", "sample_idx", ")", "\n", "calib", "=", "self", ".", "get_calib", "(", "sample_idx", ")", "\n", "pts_rect", "=", "calib", ".", "lidar_to_rect", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "\n", "fov_flag", "=", "self", ".", "get_fov_flag", "(", "pts_rect", ",", "info", "[", "'image'", "]", "[", "'image_shape'", "]", ",", "calib", ")", "\n", "pts_fov", "=", "points", "[", "fov_flag", "]", "\n", "corners_lidar", "=", "box_utils", ".", "boxes_to_corners_3d", "(", "gt_boxes_lidar", ")", "\n", "num_points_in_gt", "=", "-", "np", ".", "ones", "(", "num_gt", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "k", "in", "range", "(", "num_objects", ")", ":", "\n", "                        ", "flag", "=", "box_utils", ".", "in_hull", "(", "pts_fov", "[", ":", ",", "0", ":", "3", "]", ",", "corners_lidar", "[", "k", "]", ")", "\n", "num_points_in_gt", "[", "k", "]", "=", "flag", ".", "sum", "(", ")", "\n", "", "annotations", "[", "'num_points_in_gt'", "]", "=", "num_points_in_gt", "\n", "\n", "", "", "return", "info", "\n", "\n", "", "sample_id_list", "=", "sample_id_list", "if", "sample_id_list", "is", "not", "None", "else", "self", ".", "sample_id_list", "\n", "with", "futures", ".", "ThreadPoolExecutor", "(", "num_workers", ")", "as", "executor", ":", "\n", "            ", "infos", "=", "executor", ".", "map", "(", "process_single_scene", ",", "sample_id_list", ")", "\n", "", "return", "list", "(", "infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.create_groundtruth_database": [[224, 275], ["database_save_path.mkdir", "range", "all_db_infos.items", "Path", "Path", "open", "pickle.load", "len", "print", "kitti_dataset.KittiDataset.get_lidar", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu().numpy", "range", "print", "open", "pickle.dump", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu", "open", "gt_points.tofile", "str", "len", "torch.from_numpy", "torch.from_numpy", "filepath.relative_to", "all_db_infos[].append", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["", "def", "create_groundtruth_database", "(", "self", ",", "info_path", "=", "None", ",", "used_classes", "=", "None", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "import", "torch", "\n", "\n", "database_save_path", "=", "Path", "(", "self", ".", "root_path", ")", "/", "(", "'gt_database'", "if", "split", "==", "'train'", "else", "(", "'gt_database_%s'", "%", "split", ")", ")", "\n", "db_info_save_path", "=", "Path", "(", "self", ".", "root_path", ")", "/", "(", "'kitti_dbinfos_%s.pkl'", "%", "split", ")", "\n", "\n", "database_save_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "all_db_infos", "=", "{", "}", "\n", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "infos", ")", ")", ":", "\n", "            ", "print", "(", "'gt_database sample: %d/%d'", "%", "(", "k", "+", "1", ",", "len", "(", "infos", ")", ")", ")", "\n", "info", "=", "infos", "[", "k", "]", "\n", "sample_idx", "=", "info", "[", "'point_cloud'", "]", "[", "'lidar_idx'", "]", "\n", "points", "=", "self", ".", "get_lidar", "(", "sample_idx", ")", "\n", "annos", "=", "info", "[", "'annos'", "]", "\n", "names", "=", "annos", "[", "'name'", "]", "\n", "difficulty", "=", "annos", "[", "'difficulty'", "]", "\n", "bbox", "=", "annos", "[", "'bbox'", "]", "\n", "gt_boxes", "=", "annos", "[", "'gt_boxes_lidar'", "]", "\n", "\n", "num_obj", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "point_indices", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_cpu", "(", "\n", "torch", ".", "from_numpy", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", ",", "torch", ".", "from_numpy", "(", "gt_boxes", ")", "\n", ")", ".", "numpy", "(", ")", "# (nboxes, npoints)", "\n", "\n", "for", "i", "in", "range", "(", "num_obj", ")", ":", "\n", "                ", "filename", "=", "'%s_%s_%d.bin'", "%", "(", "sample_idx", ",", "names", "[", "i", "]", ",", "i", ")", "\n", "filepath", "=", "database_save_path", "/", "filename", "\n", "gt_points", "=", "points", "[", "point_indices", "[", "i", "]", ">", "0", "]", "\n", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "gt_boxes", "[", "i", ",", ":", "3", "]", "\n", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "gt_points", ".", "tofile", "(", "f", ")", "\n", "\n", "", "if", "(", "used_classes", "is", "None", ")", "or", "names", "[", "i", "]", "in", "used_classes", ":", "\n", "                    ", "db_path", "=", "str", "(", "filepath", ".", "relative_to", "(", "self", ".", "root_path", ")", ")", "# gt_database/xxxxx.bin", "\n", "db_info", "=", "{", "'name'", ":", "names", "[", "i", "]", ",", "'path'", ":", "db_path", ",", "'image_idx'", ":", "sample_idx", ",", "'gt_idx'", ":", "i", ",", "\n", "'box3d_lidar'", ":", "gt_boxes", "[", "i", "]", ",", "'num_points_in_gt'", ":", "gt_points", ".", "shape", "[", "0", "]", ",", "\n", "'difficulty'", ":", "difficulty", "[", "i", "]", ",", "'bbox'", ":", "bbox", "[", "i", "]", ",", "'score'", ":", "annos", "[", "'score'", "]", "[", "i", "]", "}", "\n", "if", "names", "[", "i", "]", "in", "all_db_infos", ":", "\n", "                        ", "all_db_infos", "[", "names", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "else", ":", "\n", "                        ", "all_db_infos", "[", "names", "[", "i", "]", "]", "=", "[", "db_info", "]", "\n", "", "", "", "", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Database %s: %d'", "%", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "\n", "", "with", "open", "(", "db_info_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.generate_prediction_dicts": [[276, 352], ["enumerate", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "kitti_dataset.KittiDataset.generate_prediction_dicts.get_template_prediction"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "generate_prediction_dicts", "(", "batch_dict", ",", "pred_dicts", ",", "class_names", ",", "output_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                frame_id:\n            pred_dicts: list of pred_dicts\n                pred_boxes: (N, 7), Tensor\n                pred_scores: (N), Tensor\n                pred_labels: (N), Tensor\n            class_names:\n            output_path:\n\n        Returns:\n\n        \"\"\"", "\n", "def", "get_template_prediction", "(", "num_samples", ")", ":", "\n", "            ", "ret_dict", "=", "{", "\n", "'name'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "'truncated'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "\n", "'occluded'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "'alpha'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "\n", "'bbox'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "4", "]", ")", ",", "'dimensions'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "3", "]", ")", ",", "\n", "'location'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "3", "]", ")", ",", "'rotation_y'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "\n", "'score'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "'boxes_lidar'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "7", "]", ")", "\n", "}", "\n", "return", "ret_dict", "\n", "\n", "", "def", "generate_single_sample_dict", "(", "batch_index", ",", "box_dict", ")", ":", "\n", "            ", "pred_scores", "=", "box_dict", "[", "'pred_scores'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_boxes", "=", "box_dict", "[", "'pred_boxes'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_labels", "=", "box_dict", "[", "'pred_labels'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_dict", "=", "get_template_prediction", "(", "pred_scores", ".", "shape", "[", "0", "]", ")", "\n", "if", "pred_scores", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "return", "pred_dict", "\n", "\n", "", "calib", "=", "batch_dict", "[", "'calib'", "]", "[", "batch_index", "]", "\n", "image_shape", "=", "batch_dict", "[", "'image_shape'", "]", "[", "batch_index", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_boxes_camera", "=", "box_utils", ".", "boxes3d_lidar_to_kitti_camera", "(", "pred_boxes", ",", "calib", ")", "\n", "pred_boxes_img", "=", "box_utils", ".", "boxes3d_kitti_camera_to_imageboxes", "(", "\n", "pred_boxes_camera", ",", "calib", ",", "image_shape", "=", "image_shape", "\n", ")", "\n", "\n", "pred_dict", "[", "'name'", "]", "=", "np", ".", "array", "(", "class_names", ")", "[", "pred_labels", "-", "1", "]", "\n", "pred_dict", "[", "'alpha'", "]", "=", "-", "np", ".", "arctan2", "(", "-", "pred_boxes", "[", ":", ",", "1", "]", ",", "pred_boxes", "[", ":", ",", "0", "]", ")", "+", "pred_boxes_camera", "[", ":", ",", "6", "]", "\n", "pred_dict", "[", "'bbox'", "]", "=", "pred_boxes_img", "\n", "pred_dict", "[", "'dimensions'", "]", "=", "pred_boxes_camera", "[", ":", ",", "3", ":", "6", "]", "\n", "pred_dict", "[", "'location'", "]", "=", "pred_boxes_camera", "[", ":", ",", "0", ":", "3", "]", "\n", "pred_dict", "[", "'rotation_y'", "]", "=", "pred_boxes_camera", "[", ":", ",", "6", "]", "\n", "pred_dict", "[", "'score'", "]", "=", "pred_scores", "\n", "pred_dict", "[", "'boxes_lidar'", "]", "=", "pred_boxes", "\n", "\n", "return", "pred_dict", "\n", "\n", "", "annos", "=", "[", "]", "\n", "for", "index", ",", "box_dict", "in", "enumerate", "(", "pred_dicts", ")", ":", "\n", "            ", "frame_id", "=", "batch_dict", "[", "'frame_id'", "]", "[", "index", "]", "\n", "\n", "single_pred_dict", "=", "generate_single_sample_dict", "(", "index", ",", "box_dict", ")", "\n", "single_pred_dict", "[", "'frame_id'", "]", "=", "frame_id", "\n", "annos", ".", "append", "(", "single_pred_dict", ")", "\n", "\n", "if", "output_path", "is", "not", "None", ":", "\n", "                ", "cur_det_file", "=", "output_path", "/", "(", "'%s.txt'", "%", "frame_id", ")", "\n", "with", "open", "(", "cur_det_file", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "bbox", "=", "single_pred_dict", "[", "'bbox'", "]", "\n", "loc", "=", "single_pred_dict", "[", "'location'", "]", "\n", "dims", "=", "single_pred_dict", "[", "'dimensions'", "]", "# lhw -> hwl", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "bbox", ")", ")", ":", "\n", "                        ", "print", "(", "'%s -1 -1 %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f'", "\n", "%", "(", "single_pred_dict", "[", "'name'", "]", "[", "idx", "]", ",", "single_pred_dict", "[", "'alpha'", "]", "[", "idx", "]", ",", "\n", "bbox", "[", "idx", "]", "[", "0", "]", ",", "bbox", "[", "idx", "]", "[", "1", "]", ",", "bbox", "[", "idx", "]", "[", "2", "]", ",", "bbox", "[", "idx", "]", "[", "3", "]", ",", "\n", "dims", "[", "idx", "]", "[", "1", "]", ",", "dims", "[", "idx", "]", "[", "2", "]", ",", "dims", "[", "idx", "]", "[", "0", "]", ",", "loc", "[", "idx", "]", "[", "0", "]", ",", "\n", "loc", "[", "idx", "]", "[", "1", "]", ",", "loc", "[", "idx", "]", "[", "2", "]", ",", "single_pred_dict", "[", "'rotation_y'", "]", "[", "idx", "]", ",", "\n", "single_pred_dict", "[", "'score'", "]", "[", "idx", "]", ")", ",", "file", "=", "f", ")", "\n", "\n", "", "", "", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.evaluation": [[353, 364], ["copy.deepcopy", "kitti_eval.get_official_eval_result", "kitti_dataset.KittiDataset.kitti_infos[].keys", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_official_eval_result"], ["", "def", "evaluation", "(", "self", ",", "det_annos", ",", "class_names", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "'annos'", "not", "in", "self", ".", "kitti_infos", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "return", "None", ",", "{", "}", "\n", "\n", "", "from", ".", "kitti_object_eval_python", "import", "eval", "as", "kitti_eval", "\n", "\n", "eval_det_annos", "=", "copy", ".", "deepcopy", "(", "det_annos", ")", "\n", "eval_gt_annos", "=", "[", "copy", ".", "deepcopy", "(", "info", "[", "'annos'", "]", ")", "for", "info", "in", "self", ".", "kitti_infos", "]", "\n", "ap_result_str", ",", "ap_dict", "=", "kitti_eval", ".", "get_official_eval_result", "(", "eval_gt_annos", ",", "eval_det_annos", ",", "class_names", ")", "\n", "\n", "return", "ap_result_str", ",", "ap_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.__len__": [[365, 370], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "return", "len", "(", "self", ".", "kitti_infos", ")", "*", "self", ".", "total_epochs", "\n", "\n", "", "return", "len", "(", "self", ".", "kitti_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.__getitem__": [[371, 428], ["copy.deepcopy", "kitti_dataset.KittiDataset.get_calib", "kitti_dataset.KittiDataset.dataset_cfg.get", "kitti_dataset.KittiDataset.prepare_data", "utils.common_utils.drop_info_with_name", "numpy.concatenate().astype", "utils.box_utils.boxes3d_kitti_camera_to_lidar", "input_dict.update", "kitti_dataset.KittiDataset.get_road_plane", "kitti_dataset.KittiDataset.get_lidar", "kitti_dataset.KittiDataset.get_image", "kitti_dataset.KittiDataset.get_depth_map", "kitti_utils.calib_to_matricies", "len", "kitti_dataset.KittiDataset.lidar_to_rect", "kitti_dataset.KittiDataset.get_fov_flag", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_calib", "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.prepare_data", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.drop_info_with_name", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_kitti_camera_to_lidar", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_road_plane", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_image", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_depth_map", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_utils.calib_to_matricies", "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.KittiDataset.get_fov_flag"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# index = 4", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "index", "=", "index", "%", "len", "(", "self", ".", "kitti_infos", ")", "\n", "\n", "", "info", "=", "copy", ".", "deepcopy", "(", "self", ".", "kitti_infos", "[", "index", "]", ")", "\n", "\n", "sample_idx", "=", "info", "[", "'point_cloud'", "]", "[", "'lidar_idx'", "]", "\n", "img_shape", "=", "info", "[", "'image'", "]", "[", "'image_shape'", "]", "\n", "calib", "=", "self", ".", "get_calib", "(", "sample_idx", ")", "\n", "get_item_list", "=", "self", ".", "dataset_cfg", ".", "get", "(", "'GET_ITEM_LIST'", ",", "[", "'points'", "]", ")", "\n", "\n", "input_dict", "=", "{", "\n", "'frame_id'", ":", "sample_idx", ",", "\n", "'calib'", ":", "calib", ",", "\n", "}", "\n", "\n", "if", "'annos'", "in", "info", ":", "\n", "            ", "annos", "=", "info", "[", "'annos'", "]", "\n", "annos", "=", "common_utils", ".", "drop_info_with_name", "(", "annos", ",", "name", "=", "'DontCare'", ")", "\n", "loc", ",", "dims", ",", "rots", "=", "annos", "[", "'location'", "]", ",", "annos", "[", "'dimensions'", "]", ",", "annos", "[", "'rotation_y'", "]", "\n", "gt_names", "=", "annos", "[", "'name'", "]", "\n", "gt_boxes_camera", "=", "np", ".", "concatenate", "(", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gt_boxes_lidar", "=", "box_utils", ".", "boxes3d_kitti_camera_to_lidar", "(", "gt_boxes_camera", ",", "calib", ")", "\n", "\n", "input_dict", ".", "update", "(", "{", "\n", "'gt_names'", ":", "gt_names", ",", "\n", "'gt_boxes'", ":", "gt_boxes_lidar", "\n", "}", ")", "\n", "if", "\"gt_boxes2d\"", "in", "get_item_list", ":", "\n", "                ", "input_dict", "[", "'gt_boxes2d'", "]", "=", "annos", "[", "\"bbox\"", "]", "\n", "\n", "", "road_plane", "=", "self", ".", "get_road_plane", "(", "sample_idx", ")", "\n", "if", "road_plane", "is", "not", "None", ":", "\n", "                ", "input_dict", "[", "'road_plane'", "]", "=", "road_plane", "\n", "\n", "", "", "if", "\"points\"", "in", "get_item_list", ":", "\n", "            ", "points", "=", "self", ".", "get_lidar", "(", "sample_idx", ")", "\n", "if", "self", ".", "dataset_cfg", ".", "FOV_POINTS_ONLY", ":", "\n", "                ", "pts_rect", "=", "calib", ".", "lidar_to_rect", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "fov_flag", "=", "self", ".", "get_fov_flag", "(", "pts_rect", ",", "img_shape", ",", "calib", ")", "\n", "points", "=", "points", "[", "fov_flag", "]", "\n", "", "input_dict", "[", "'points'", "]", "=", "points", "\n", "\n", "", "if", "\"images\"", "in", "get_item_list", ":", "\n", "            ", "input_dict", "[", "'images'", "]", "=", "self", ".", "get_image", "(", "sample_idx", ")", "\n", "\n", "", "if", "\"depth_maps\"", "in", "get_item_list", ":", "\n", "            ", "input_dict", "[", "'depth_maps'", "]", "=", "self", ".", "get_depth_map", "(", "sample_idx", ")", "\n", "\n", "", "if", "\"calib_matricies\"", "in", "get_item_list", ":", "\n", "            ", "input_dict", "[", "\"trans_lidar_to_cam\"", "]", ",", "input_dict", "[", "\"trans_cam_to_img\"", "]", "=", "kitti_utils", ".", "calib_to_matricies", "(", "calib", ")", "\n", "\n", "", "data_dict", "=", "self", ".", "prepare_data", "(", "data_dict", "=", "input_dict", ")", "\n", "\n", "data_dict", "[", "'image_shape'", "]", "=", "img_shape", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti.kitti_dataset.create_kitti_infos": [[430, 468], ["kitti_dataset.KittiDataset", "print", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.get_infos", "print", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.get_infos", "print", "print", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.get_infos", "print", "print", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.create_groundtruth_database", "print", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.get_infos", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.get_infos", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.get_infos", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.create_groundtruth_database"], ["", "", "def", "create_kitti_infos", "(", "dataset_cfg", ",", "class_names", ",", "data_path", ",", "save_path", ",", "workers", "=", "4", ")", ":", "\n", "    ", "dataset", "=", "KittiDataset", "(", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "root_path", "=", "data_path", ",", "training", "=", "False", ")", "\n", "train_split", ",", "val_split", "=", "'train'", ",", "'val'", "\n", "\n", "train_filename", "=", "save_path", "/", "(", "'kitti_infos_%s.pkl'", "%", "train_split", ")", "\n", "val_filename", "=", "save_path", "/", "(", "'kitti_infos_%s.pkl'", "%", "val_split", ")", "\n", "trainval_filename", "=", "save_path", "/", "'kitti_infos_trainval.pkl'", "\n", "test_filename", "=", "save_path", "/", "'kitti_infos_test.pkl'", "\n", "\n", "print", "(", "'---------------Start to generate data infos---------------'", ")", "\n", "\n", "dataset", ".", "set_split", "(", "train_split", ")", "\n", "kitti_infos_train", "=", "dataset", ".", "get_infos", "(", "num_workers", "=", "workers", ",", "has_label", "=", "True", ",", "count_inside_pts", "=", "True", ")", "\n", "with", "open", "(", "train_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_train", ",", "f", ")", "\n", "", "print", "(", "'Kitti info train file is saved to %s'", "%", "train_filename", ")", "\n", "\n", "dataset", ".", "set_split", "(", "val_split", ")", "\n", "kitti_infos_val", "=", "dataset", ".", "get_infos", "(", "num_workers", "=", "workers", ",", "has_label", "=", "True", ",", "count_inside_pts", "=", "True", ")", "\n", "with", "open", "(", "val_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_val", ",", "f", ")", "\n", "", "print", "(", "'Kitti info val file is saved to %s'", "%", "val_filename", ")", "\n", "\n", "with", "open", "(", "trainval_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_train", "+", "kitti_infos_val", ",", "f", ")", "\n", "", "print", "(", "'Kitti info trainval file is saved to %s'", "%", "trainval_filename", ")", "\n", "\n", "dataset", ".", "set_split", "(", "'test'", ")", "\n", "kitti_infos_test", "=", "dataset", ".", "get_infos", "(", "num_workers", "=", "workers", ",", "has_label", "=", "False", ",", "count_inside_pts", "=", "False", ")", "\n", "with", "open", "(", "test_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_test", ",", "f", ")", "\n", "", "print", "(", "'Kitti info test file is saved to %s'", "%", "test_filename", ")", "\n", "\n", "print", "(", "'---------------Start create groundtruth database for data augmentation---------------'", ")", "\n", "dataset", ".", "set_split", "(", "train_split", ")", "\n", "dataset", ".", "create_groundtruth_database", "(", "train_filename", ",", "split", "=", "train_split", ")", "\n", "\n", "print", "(", "'---------------Data preparation Done---------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_image_index_str": [[11, 13], ["None"], "function", ["None"], ["def", "get_image_index_str", "(", "img_idx", ")", ":", "\n", "    ", "return", "\"{:06d}\"", ".", "format", "(", "img_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_kitti_info_path": [[15, 34], ["kitti_common.get_image_index_str", "pathlib.Path", "ValueError", "str", "str", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_image_index_str"], ["", "def", "get_kitti_info_path", "(", "idx", ",", "\n", "prefix", ",", "\n", "info_type", "=", "'image_2'", ",", "\n", "file_tail", "=", "'.png'", ",", "\n", "training", "=", "True", ",", "\n", "relative_path", "=", "True", ")", ":", "\n", "    ", "img_idx_str", "=", "get_image_index_str", "(", "idx", ")", "\n", "img_idx_str", "+=", "file_tail", "\n", "prefix", "=", "pathlib", ".", "Path", "(", "prefix", ")", "\n", "if", "training", ":", "\n", "        ", "file_path", "=", "pathlib", ".", "Path", "(", "'training'", ")", "/", "info_type", "/", "img_idx_str", "\n", "", "else", ":", "\n", "        ", "file_path", "=", "pathlib", ".", "Path", "(", "'testing'", ")", "/", "info_type", "/", "img_idx_str", "\n", "", "if", "not", "(", "prefix", "/", "file_path", ")", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"file not exist: {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "", "if", "relative_path", ":", "\n", "        ", "return", "str", "(", "file_path", ")", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "prefix", "/", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_image_path": [[36, 39], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_kitti_info_path"], ["", "", "def", "get_image_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'image_2'", ",", "'.png'", ",", "training", ",", "\n", "relative_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_label_path": [[41, 44], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_kitti_info_path"], ["", "def", "get_label_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'label_2'", ",", "'.txt'", ",", "training", ",", "\n", "relative_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_velodyne_path": [[46, 49], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_kitti_info_path"], ["", "def", "get_velodyne_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'velodyne'", ",", "'.bin'", ",", "training", ",", "\n", "relative_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_calib_path": [[51, 54], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_kitti_info_path"], ["", "def", "get_calib_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'calib'", ",", "'.txt'", ",", "training", ",", "\n", "relative_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common._extend_matrix": [[56, 59], ["numpy.concatenate", "numpy.array"], "function", ["None"], ["", "def", "_extend_matrix", "(", "mat", ")", ":", "\n", "    ", "mat", "=", "np", ".", "concatenate", "(", "[", "mat", ",", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_kitti_image_info": [[61, 150], ["pathlib.Path", "list", "isinstance", "list", "kitti_common.get_image_path", "concurrent.ThreadPoolExecutor", "executor.map", "range", "kitti_common.get_velodyne_path", "numpy.array", "kitti_common.get_label_path", "kitti_common.get_label_anno", "kitti_common.get_calib_path", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "kitti_common.add_difficulty_to_annos", "str", "str", "open", "f.readlines", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "numpy.zeros", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "skimage.io.imread", "float", "float", "float", "float", "float", "float", "float", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_image_path", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_velodyne_path", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_label_path", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_label_anno", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_calib_path", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.add_difficulty_to_annos", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common._extend_matrix"], ["", "def", "get_kitti_image_info", "(", "path", ",", "\n", "training", "=", "True", ",", "\n", "label_info", "=", "True", ",", "\n", "velodyne", "=", "False", ",", "\n", "calib", "=", "False", ",", "\n", "image_ids", "=", "7481", ",", "\n", "extend_matrix", "=", "True", ",", "\n", "num_worker", "=", "8", ",", "\n", "relative_path", "=", "True", ",", "\n", "with_imageshape", "=", "True", ")", ":", "\n", "# image_infos = []", "\n", "    ", "root_path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "if", "not", "isinstance", "(", "image_ids", ",", "list", ")", ":", "\n", "        ", "image_ids", "=", "list", "(", "range", "(", "image_ids", ")", ")", "\n", "\n", "", "def", "map_func", "(", "idx", ")", ":", "\n", "        ", "image_info", "=", "{", "'image_idx'", ":", "idx", "}", "\n", "annotations", "=", "None", "\n", "if", "velodyne", ":", "\n", "            ", "image_info", "[", "'velodyne_path'", "]", "=", "get_velodyne_path", "(", "\n", "idx", ",", "path", ",", "training", ",", "relative_path", ")", "\n", "", "image_info", "[", "'img_path'", "]", "=", "get_image_path", "(", "idx", ",", "path", ",", "training", ",", "\n", "relative_path", ")", "\n", "if", "with_imageshape", ":", "\n", "            ", "img_path", "=", "image_info", "[", "'img_path'", "]", "\n", "if", "relative_path", ":", "\n", "                ", "img_path", "=", "str", "(", "root_path", "/", "img_path", ")", "\n", "", "image_info", "[", "'img_shape'", "]", "=", "np", ".", "array", "(", "\n", "io", ".", "imread", "(", "img_path", ")", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "if", "label_info", ":", "\n", "            ", "label_path", "=", "get_label_path", "(", "idx", ",", "path", ",", "training", ",", "relative_path", ")", "\n", "if", "relative_path", ":", "\n", "                ", "label_path", "=", "str", "(", "root_path", "/", "label_path", ")", "\n", "", "annotations", "=", "get_label_anno", "(", "label_path", ")", "\n", "", "if", "calib", ":", "\n", "            ", "calib_path", "=", "get_calib_path", "(", "\n", "idx", ",", "path", ",", "training", ",", "relative_path", "=", "False", ")", "\n", "with", "open", "(", "calib_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "P0", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "0", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P2", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "2", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P3", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "3", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "P0", "=", "_extend_matrix", "(", "P0", ")", "\n", "P1", "=", "_extend_matrix", "(", "P1", ")", "\n", "P2", "=", "_extend_matrix", "(", "P2", ")", "\n", "P3", "=", "_extend_matrix", "(", "P3", ")", "\n", "", "image_info", "[", "'calib/P0'", "]", "=", "P0", "\n", "image_info", "[", "'calib/P1'", "]", "=", "P1", "\n", "image_info", "[", "'calib/P2'", "]", "=", "P2", "\n", "image_info", "[", "'calib/P3'", "]", "=", "P3", "\n", "R0_rect", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "4", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "10", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "3", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "rect_4x4", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ",", "dtype", "=", "R0_rect", ".", "dtype", ")", "\n", "rect_4x4", "[", "3", ",", "3", "]", "=", "1.", "\n", "rect_4x4", "[", ":", "3", ",", ":", "3", "]", "=", "R0_rect", "\n", "", "else", ":", "\n", "                ", "rect_4x4", "=", "R0_rect", "\n", "", "image_info", "[", "'calib/R0_rect'", "]", "=", "rect_4x4", "\n", "Tr_velo_to_cam", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "5", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "4", "]", ")", "\n", "Tr_imu_to_velo", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "6", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "4", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "Tr_velo_to_cam", "=", "_extend_matrix", "(", "Tr_velo_to_cam", ")", "\n", "Tr_imu_to_velo", "=", "_extend_matrix", "(", "Tr_imu_to_velo", ")", "\n", "", "image_info", "[", "'calib/Tr_velo_to_cam'", "]", "=", "Tr_velo_to_cam", "\n", "image_info", "[", "'calib/Tr_imu_to_velo'", "]", "=", "Tr_imu_to_velo", "\n", "", "if", "annotations", "is", "not", "None", ":", "\n", "            ", "image_info", "[", "'annos'", "]", "=", "annotations", "\n", "add_difficulty_to_annos", "(", "image_info", ")", "\n", "", "return", "image_info", "\n", "\n", "", "with", "futures", ".", "ThreadPoolExecutor", "(", "num_worker", ")", "as", "executor", ":", "\n", "        ", "image_infos", "=", "executor", ".", "map", "(", "map_func", ",", "image_ids", ")", "\n", "", "return", "list", "(", "image_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.filter_kitti_anno": [[152, 190], ["image_anno.keys", "isinstance", "image_anno.keys", "kitti_common.iou", "enumerate", "image_anno.keys", "enumerate", "enumerate", "numpy.amax", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.iou"], ["", "def", "filter_kitti_anno", "(", "image_anno", ",", "\n", "used_classes", ",", "\n", "used_difficulty", "=", "None", ",", "\n", "dontcare_iou", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "used_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "used_classes", "=", "[", "used_classes", "]", "\n", "", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "image_anno", "[", "'name'", "]", ")", "if", "x", "in", "used_classes", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "if", "used_difficulty", "is", "not", "None", ":", "\n", "        ", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "img_filtered_annotations", "[", "'difficulty'", "]", ")", "\n", "if", "x", "in", "used_difficulty", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "img_filtered_annotations", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "\n", "", "", "if", "'DontCare'", "in", "used_classes", "and", "dontcare_iou", "is", "not", "None", ":", "\n", "        ", "dont_care_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "img_filtered_annotations", "[", "'name'", "]", ")", "\n", "if", "x", "==", "'DontCare'", "\n", "]", "\n", "# bounding box format [y_min, x_min, y_max, x_max]", "\n", "all_boxes", "=", "img_filtered_annotations", "[", "'bbox'", "]", "\n", "ious", "=", "iou", "(", "all_boxes", ",", "all_boxes", "[", "dont_care_indices", "]", ")", "\n", "\n", "# Remove all bounding boxes that overlap with a dontcare region.", "\n", "if", "ious", ".", "size", ">", "0", ":", "\n", "            ", "boxes_to_remove", "=", "np", ".", "amax", "(", "ious", ",", "axis", "=", "1", ")", ">", "dontcare_iou", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "                ", "img_filtered_annotations", "[", "key", "]", "=", "(", "img_filtered_annotations", "[", "key", "]", "[", "\n", "np", ".", "logical_not", "(", "boxes_to_remove", ")", "]", ")", "\n", "", "", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.filter_annos_low_score": [[191, 203], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_low_score", "(", "image_annos", ",", "thresh", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "anno", "[", "'score'", "]", ")", "if", "s", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.kitti_result_line": [[204, 247], ["collections.OrderedDict", "collections.OrderedDict", "result_dict.items", "collections.OrderedDict.items", "collections.OrderedDict.items", "ValueError", "res_line.append", "res_line.append", "res_line.append", "str", "prec_float.format", "res_line.append", "res_line.append", "ValueError", "str", "str", "prec_float.format", "collections.OrderedDict.keys"], "function", ["None"], ["", "def", "kitti_result_line", "(", "result_dict", ",", "precision", "=", "4", ")", ":", "\n", "    ", "prec_float", "=", "\"{\"", "+", "\":.{}f\"", ".", "format", "(", "precision", ")", "+", "\"}\"", "\n", "res_line", "=", "[", "]", "\n", "all_field_default", "=", "OrderedDict", "(", "[", "\n", "(", "'name'", ",", "None", ")", ",", "\n", "(", "'truncated'", ",", "-", "1", ")", ",", "\n", "(", "'occluded'", ",", "-", "1", ")", ",", "\n", "(", "'alpha'", ",", "-", "10", ")", ",", "\n", "(", "'bbox'", ",", "None", ")", ",", "\n", "(", "'dimensions'", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "\n", "(", "'location'", ",", "[", "-", "1000", ",", "-", "1000", ",", "-", "1000", "]", ")", ",", "\n", "(", "'rotation_y'", ",", "-", "10", ")", ",", "\n", "(", "'score'", ",", "None", ")", ",", "\n", "]", ")", "\n", "res_dict", "=", "[", "(", "key", ",", "None", ")", "for", "key", ",", "val", "in", "all_field_default", ".", "items", "(", ")", "]", "\n", "res_dict", "=", "OrderedDict", "(", "res_dict", ")", "\n", "for", "key", ",", "val", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "all_field_default", "[", "key", "]", "is", "None", "and", "val", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"you must specify a value for {}\"", ".", "format", "(", "key", ")", ")", "\n", "", "res_dict", "[", "key", "]", "=", "val", "\n", "\n", "", "for", "key", ",", "val", "in", "res_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "==", "'name'", ":", "\n", "            ", "res_line", ".", "append", "(", "val", ")", "\n", "", "elif", "key", "in", "[", "'truncated'", ",", "'alpha'", ",", "'rotation_y'", ",", "'score'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "prec_float", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "==", "'occluded'", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "'{}'", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "in", "[", "'bbox'", ",", "'dimensions'", ",", "'location'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", "+=", "[", "str", "(", "v", ")", "for", "v", "in", "all_field_default", "[", "key", "]", "]", "\n", "", "else", ":", "\n", "                ", "res_line", "+=", "[", "prec_float", ".", "format", "(", "v", ")", "for", "v", "in", "val", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown key. supported key:{}\"", ".", "format", "(", "\n", "res_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "", "return", "' '", ".", "join", "(", "res_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.add_difficulty_to_annos": [[249, 292], ["numpy.ones", "numpy.ones", "numpy.ones", "zip", "numpy.logical_xor", "numpy.logical_xor", "range", "numpy.array", "len", "len", "len", "len", "diff.append", "diff.append", "diff.append", "diff.append"], "function", ["None"], ["", "def", "add_difficulty_to_annos", "(", "info", ")", ":", "\n", "    ", "min_height", "=", "[", "40", ",", "25", ",", "\n", "25", "]", "# minimum height for evaluated groundtruth/detections", "\n", "max_occlusion", "=", "[", "\n", "0", ",", "1", ",", "2", "\n", "]", "# maximum occlusion level of the groundtruth used for eval_utils", "\n", "max_trunc", "=", "[", "\n", "0.15", ",", "0.3", ",", "0.5", "\n", "]", "# maximum truncation level of the groundtruth used for eval_utils", "\n", "annos", "=", "info", "[", "'annos'", "]", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "# lhw format", "\n", "bbox", "=", "annos", "[", "'bbox'", "]", "\n", "height", "=", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "\n", "occlusion", "=", "annos", "[", "'occluded'", "]", "\n", "truncation", "=", "annos", "[", "'truncated'", "]", "\n", "diff", "=", "[", "]", "\n", "easy_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "moderate_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "hard_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "i", "=", "0", "\n", "for", "h", ",", "o", ",", "t", "in", "zip", "(", "height", ",", "occlusion", ",", "truncation", ")", ":", "\n", "        ", "if", "o", ">", "max_occlusion", "[", "0", "]", "or", "h", "<=", "min_height", "[", "0", "]", "or", "t", ">", "max_trunc", "[", "0", "]", ":", "\n", "            ", "easy_mask", "[", "i", "]", "=", "False", "\n", "", "if", "o", ">", "max_occlusion", "[", "1", "]", "or", "h", "<=", "min_height", "[", "1", "]", "or", "t", ">", "max_trunc", "[", "1", "]", ":", "\n", "            ", "moderate_mask", "[", "i", "]", "=", "False", "\n", "", "if", "o", ">", "max_occlusion", "[", "2", "]", "or", "h", "<=", "min_height", "[", "2", "]", "or", "t", ">", "max_trunc", "[", "2", "]", ":", "\n", "            ", "hard_mask", "[", "i", "]", "=", "False", "\n", "", "i", "+=", "1", "\n", "", "is_easy", "=", "easy_mask", "\n", "is_moderate", "=", "np", ".", "logical_xor", "(", "easy_mask", ",", "moderate_mask", ")", "\n", "is_hard", "=", "np", ".", "logical_xor", "(", "hard_mask", ",", "moderate_mask", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", ")", ":", "\n", "        ", "if", "is_easy", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "0", ")", "\n", "", "elif", "is_moderate", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "1", ")", "\n", "", "elif", "is_hard", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "diff", ".", "append", "(", "-", "1", ")", "\n", "", "", "annos", "[", "\"difficulty\"", "]", "=", "np", ".", "array", "(", "diff", ",", "np", ".", "int32", ")", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_label_anno": [[294, 331], ["annotations.update", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "open", "f.readlines", "line.strip().split", "numpy.array().reshape", "numpy.array", "numpy.zeros", "float", "int", "float", "numpy.array", "numpy.array", "numpy.array", "len", "len", "line.strip", "numpy.array", "float", "len", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "get_label_anno", "(", "label_path", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "[", "]", ",", "\n", "'truncated'", ":", "[", "]", ",", "\n", "'occluded'", ":", "[", "]", ",", "\n", "'alpha'", ":", "[", "]", ",", "\n", "'bbox'", ":", "[", "]", ",", "\n", "'dimensions'", ":", "[", "]", ",", "\n", "'location'", ":", "[", "]", ",", "\n", "'rotation_y'", ":", "[", "]", "\n", "}", ")", "\n", "with", "open", "(", "label_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "# if len(lines) == 0 or len(lines[0]) < 15:", "\n", "#     content = []", "\n", "# else:", "\n", "", "content", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "lines", "]", "\n", "annotations", "[", "'name'", "]", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'truncated'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'occluded'", "]", "=", "np", ".", "array", "(", "[", "int", "(", "x", "[", "2", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'alpha'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "3", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'bbox'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "4", ":", "8", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# dimensions will convert hwl format to standard lhw(camera) format.", "\n", "annotations", "[", "'dimensions'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "8", ":", "11", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "\n", "-", "1", ",", "3", ")", "[", ":", ",", "[", "2", ",", "0", ",", "1", "]", "]", "\n", "annotations", "[", "'location'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "11", ":", "14", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "annotations", "[", "'rotation_y'", "]", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "x", "[", "14", "]", ")", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "len", "(", "content", ")", "!=", "0", "and", "len", "(", "content", "[", "0", "]", ")", "==", "16", ":", "# have score", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "15", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "", "else", ":", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "zeros", "(", "[", "len", "(", "annotations", "[", "'bbox'", "]", ")", "]", ")", "\n", "", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_label_annos": [[332, 348], ["pathlib.Path", "pathlib.Path().glob", "re.compile", "filter", "sorted", "isinstance", "list", "kitti_common.get_image_index_str", "annos.append", "int", "range", "kitti_common.get_label_anno", "pathlib.Path", "re.compile.match"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_image_index_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.get_label_anno"], ["", "def", "get_label_annos", "(", "label_folder", ",", "image_ids", "=", "None", ")", ":", "\n", "    ", "if", "image_ids", "is", "None", ":", "\n", "        ", "filepaths", "=", "pathlib", ".", "Path", "(", "label_folder", ")", ".", "glob", "(", "'*.txt'", ")", "\n", "prog", "=", "re", ".", "compile", "(", "r'^\\d{6}.txt$'", ")", "\n", "filepaths", "=", "filter", "(", "lambda", "f", ":", "prog", ".", "match", "(", "f", ".", "name", ")", ",", "filepaths", ")", "\n", "image_ids", "=", "[", "int", "(", "p", ".", "stem", ")", "for", "p", "in", "filepaths", "]", "\n", "image_ids", "=", "sorted", "(", "image_ids", ")", "\n", "", "if", "not", "isinstance", "(", "image_ids", ",", "list", ")", ":", "\n", "        ", "image_ids", "=", "list", "(", "range", "(", "image_ids", ")", ")", "\n", "", "annos", "=", "[", "]", "\n", "label_folder", "=", "pathlib", ".", "Path", "(", "label_folder", ")", "\n", "for", "idx", "in", "image_ids", ":", "\n", "        ", "image_idx", "=", "get_image_index_str", "(", "idx", ")", "\n", "label_filename", "=", "label_folder", "/", "(", "image_idx", "+", "'.txt'", ")", "\n", "annos", ".", "append", "(", "get_label_anno", "(", "label_filename", ")", ")", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.area": [[349, 363], ["None"], "function", ["None"], ["", "def", "area", "(", "boxes", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes area of boxes.\n\n    Args:\n        boxes: Numpy array with shape [N, 4] holding N boxes\n\n    Returns:\n        a numpy array with shape [N*1] representing box areas\n    \"\"\"", "\n", "if", "add1", ":", "\n", "        ", "return", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", ")", "*", "(", "\n", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.intersection": [[365, 394], ["numpy.split", "numpy.split", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.transpose", "numpy.transpose", "numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.zeros"], "function", ["None"], ["", "", "def", "intersection", "(", "boxes1", ",", "boxes2", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute pairwise intersection areas between boxes.\n\n    Args:\n        boxes1: a numpy array with shape [N, 4] holding N boxes\n        boxes2: a numpy array with shape [M, 4] holding M boxes\n\n    Returns:\n        a numpy array with shape [N*M] representing pairwise intersection area\n    \"\"\"", "\n", "[", "y_min1", ",", "x_min1", ",", "y_max1", ",", "x_max1", "]", "=", "np", ".", "split", "(", "boxes1", ",", "4", ",", "axis", "=", "1", ")", "\n", "[", "y_min2", ",", "x_min2", ",", "y_max2", ",", "x_max2", "]", "=", "np", ".", "split", "(", "boxes2", ",", "4", ",", "axis", "=", "1", ")", "\n", "\n", "all_pairs_min_ymax", "=", "np", ".", "minimum", "(", "y_max1", ",", "np", ".", "transpose", "(", "y_max2", ")", ")", "\n", "all_pairs_max_ymin", "=", "np", ".", "maximum", "(", "y_min1", ",", "np", ".", "transpose", "(", "y_min2", ")", ")", "\n", "if", "add1", ":", "\n", "        ", "all_pairs_min_ymax", "+=", "1.0", "\n", "", "intersect_heights", "=", "np", ".", "maximum", "(", "\n", "np", ".", "zeros", "(", "all_pairs_max_ymin", ".", "shape", ")", ",", "\n", "all_pairs_min_ymax", "-", "all_pairs_max_ymin", ")", "\n", "\n", "all_pairs_min_xmax", "=", "np", ".", "minimum", "(", "x_max1", ",", "np", ".", "transpose", "(", "x_max2", ")", ")", "\n", "all_pairs_max_xmin", "=", "np", ".", "maximum", "(", "x_min1", ",", "np", ".", "transpose", "(", "x_min2", ")", ")", "\n", "if", "add1", ":", "\n", "        ", "all_pairs_min_xmax", "+=", "1.0", "\n", "", "intersect_widths", "=", "np", ".", "maximum", "(", "\n", "np", ".", "zeros", "(", "all_pairs_max_xmin", ".", "shape", ")", ",", "\n", "all_pairs_min_xmax", "-", "all_pairs_max_xmin", ")", "\n", "return", "intersect_heights", "*", "intersect_widths", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.iou": [[396, 413], ["kitti_common.intersection", "kitti_common.area", "kitti_common.area", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.kitti_common.intersection", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.area", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.area"], ["", "def", "iou", "(", "boxes1", ",", "boxes2", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes pairwise intersection-over-union between box collections.\n\n    Args:\n        boxes1: a numpy array with shape [N, 4] holding N boxes.\n        boxes2: a numpy array with shape [M, 4] holding N boxes.\n\n    Returns:\n        a numpy array with shape [N, M] representing pairwise iou scores.\n    \"\"\"", "\n", "intersect", "=", "intersection", "(", "boxes1", ",", "boxes2", ",", "add1", ")", "\n", "area1", "=", "area", "(", "boxes1", ",", "add1", ")", "\n", "area2", "=", "area", "(", "boxes2", ",", "add1", ")", "\n", "union", "=", "np", ".", "expand_dims", "(", "\n", "area1", ",", "axis", "=", "1", ")", "+", "np", ".", "expand_dims", "(", "\n", "area2", ",", "axis", "=", "0", ")", "-", "intersect", "\n", "return", "intersect", "/", "union", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_thresholds": [[9, 28], ["scores.sort", "enumerate", "thresholds.append", "len", "len"], "function", ["None"], ["@", "numba", ".", "jit", "\n", "def", "get_thresholds", "(", "scores", ":", "np", ".", "ndarray", ",", "num_gt", ",", "num_sample_pts", "=", "41", ")", ":", "\n", "    ", "scores", ".", "sort", "(", ")", "\n", "scores", "=", "scores", "[", ":", ":", "-", "1", "]", "\n", "current_recall", "=", "0", "\n", "thresholds", "=", "[", "]", "\n", "for", "i", ",", "score", "in", "enumerate", "(", "scores", ")", ":", "\n", "        ", "l_recall", "=", "(", "i", "+", "1", ")", "/", "num_gt", "\n", "if", "i", "<", "(", "len", "(", "scores", ")", "-", "1", ")", ":", "\n", "            ", "r_recall", "=", "(", "i", "+", "2", ")", "/", "num_gt", "\n", "", "else", ":", "\n", "            ", "r_recall", "=", "l_recall", "\n", "", "if", "(", "(", "(", "r_recall", "-", "current_recall", ")", "<", "(", "current_recall", "-", "l_recall", ")", ")", "\n", "and", "(", "i", "<", "(", "len", "(", "scores", ")", "-", "1", ")", ")", ")", ":", "\n", "            ", "continue", "\n", "# recall = l_recall", "\n", "", "thresholds", ".", "append", "(", "score", ")", "\n", "current_recall", "+=", "1", "/", "(", "num_sample_pts", "-", "1.0", ")", "\n", "", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.clean_data": [[30, 84], ["CLASS_NAMES[].lower", "len", "len", "range", "range", "[].lower", "abs", "ignored_gt.append", "dc_bboxes.append", "[].lower", "ignored_dt.append", "ignored_gt.append", "ignored_gt.append", "ignored_dt.append", "ignored_dt.append"], "function", ["None"], ["", "def", "clean_data", "(", "gt_anno", ",", "dt_anno", ",", "current_class", ",", "difficulty", ")", ":", "\n", "    ", "CLASS_NAMES", "=", "[", "'car'", ",", "'pedestrian'", ",", "'cyclist'", ",", "'van'", ",", "'person_sitting'", ",", "'truck'", "]", "\n", "MIN_HEIGHT", "=", "[", "40", ",", "25", ",", "25", "]", "\n", "MAX_OCCLUSION", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "MAX_TRUNCATION", "=", "[", "0.15", ",", "0.3", ",", "0.5", "]", "\n", "dc_bboxes", ",", "ignored_gt", ",", "ignored_dt", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "current_cls_name", "=", "CLASS_NAMES", "[", "current_class", "]", ".", "lower", "(", ")", "\n", "num_gt", "=", "len", "(", "gt_anno", "[", "\"name\"", "]", ")", "\n", "num_dt", "=", "len", "(", "dt_anno", "[", "\"name\"", "]", ")", "\n", "num_valid_gt", "=", "0", "\n", "for", "i", "in", "range", "(", "num_gt", ")", ":", "\n", "        ", "bbox", "=", "gt_anno", "[", "\"bbox\"", "]", "[", "i", "]", "\n", "gt_name", "=", "gt_anno", "[", "\"name\"", "]", "[", "i", "]", ".", "lower", "(", ")", "\n", "height", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "valid_class", "=", "-", "1", "\n", "if", "(", "gt_name", "==", "current_cls_name", ")", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "elif", "(", "current_cls_name", "==", "\"Pedestrian\"", ".", "lower", "(", ")", "\n", "and", "\"Person_sitting\"", ".", "lower", "(", ")", "==", "gt_name", ")", ":", "\n", "            ", "valid_class", "=", "0", "\n", "", "elif", "(", "current_cls_name", "==", "\"Car\"", ".", "lower", "(", ")", "and", "\"Van\"", ".", "lower", "(", ")", "==", "gt_name", ")", ":", "\n", "            ", "valid_class", "=", "0", "\n", "", "else", ":", "\n", "            ", "valid_class", "=", "-", "1", "\n", "", "ignore", "=", "False", "\n", "if", "(", "(", "gt_anno", "[", "\"occluded\"", "]", "[", "i", "]", ">", "MAX_OCCLUSION", "[", "difficulty", "]", ")", "\n", "or", "(", "gt_anno", "[", "\"truncated\"", "]", "[", "i", "]", ">", "MAX_TRUNCATION", "[", "difficulty", "]", ")", "\n", "or", "(", "height", "<=", "MIN_HEIGHT", "[", "difficulty", "]", ")", ")", ":", "\n", "# if gt_anno[\"difficulty\"][i] > difficulty or gt_anno[\"difficulty\"][i] == -1:", "\n", "            ", "ignore", "=", "True", "\n", "", "if", "valid_class", "==", "1", "and", "not", "ignore", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "0", ")", "\n", "num_valid_gt", "+=", "1", "\n", "", "elif", "(", "valid_class", "==", "0", "or", "(", "ignore", "and", "(", "valid_class", "==", "1", ")", ")", ")", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "-", "1", ")", "\n", "# for i in range(num_gt):", "\n", "", "if", "gt_anno", "[", "\"name\"", "]", "[", "i", "]", "==", "\"DontCare\"", ":", "\n", "            ", "dc_bboxes", ".", "append", "(", "gt_anno", "[", "\"bbox\"", "]", "[", "i", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "num_dt", ")", ":", "\n", "        ", "if", "(", "dt_anno", "[", "\"name\"", "]", "[", "i", "]", ".", "lower", "(", ")", "==", "current_cls_name", ")", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "else", ":", "\n", "            ", "valid_class", "=", "-", "1", "\n", "", "height", "=", "abs", "(", "dt_anno", "[", "\"bbox\"", "]", "[", "i", ",", "3", "]", "-", "dt_anno", "[", "\"bbox\"", "]", "[", "i", ",", "1", "]", ")", "\n", "if", "height", "<", "MIN_HEIGHT", "[", "difficulty", "]", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "1", ")", "\n", "", "elif", "valid_class", "==", "1", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "-", "1", ")", "\n", "\n", "", "", "return", "num_valid_gt", ",", "ignored_gt", ",", "ignored_dt", ",", "dc_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.image_box_overlap": [[86, 114], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "image_box_overlap", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "qbox_area", "=", "(", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", ")", "*", "\n", "(", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", "+", "qbox_area", "-", "iw", "*", "ih", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "(", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", ")", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "qbox_area", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.bev_box_overlap": [[116, 119], ["rotate_iou.rotate_iou_gpu_eval"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.rotate_iou_gpu_eval"], ["", "def", "bev_box_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "riou", "=", "rotate_iou_gpu_eval", "(", "boxes", ",", "qboxes", ",", "criterion", ")", "\n", "return", "riou", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.d3_box_overlap_kernel": [[121, 148], ["numba.jit", "range", "range", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "parallel", "=", "True", ")", "\n", "def", "d3_box_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", "=", "-", "1", ")", ":", "\n", "# ONLY support overlap in CAMERA, not lider.", "\n", "    ", "N", ",", "K", "=", "boxes", ".", "shape", "[", "0", "]", ",", "qboxes", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "            ", "if", "rinc", "[", "i", ",", "j", "]", ">", "0", ":", "\n", "# iw = (min(boxes[i, 1] + boxes[i, 4], qboxes[j, 1] +", "\n", "#         qboxes[j, 4]) - max(boxes[i, 1], qboxes[j, 1]))", "\n", "                ", "iw", "=", "(", "min", "(", "boxes", "[", "i", ",", "1", "]", ",", "qboxes", "[", "j", ",", "1", "]", ")", "-", "max", "(", "\n", "boxes", "[", "i", ",", "1", "]", "-", "boxes", "[", "i", ",", "4", "]", ",", "qboxes", "[", "j", ",", "1", "]", "-", "qboxes", "[", "j", ",", "4", "]", ")", ")", "\n", "\n", "if", "iw", ">", "0", ":", "\n", "                    ", "area1", "=", "boxes", "[", "i", ",", "3", "]", "*", "boxes", "[", "i", ",", "4", "]", "*", "boxes", "[", "i", ",", "5", "]", "\n", "area2", "=", "qboxes", "[", "j", ",", "3", "]", "*", "qboxes", "[", "j", ",", "4", "]", "*", "qboxes", "[", "j", ",", "5", "]", "\n", "inc", "=", "iw", "*", "rinc", "[", "i", ",", "j", "]", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "area1", "+", "area2", "-", "inc", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "area2", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "inc", "\n", "", "rinc", "[", "i", ",", "j", "]", "=", "inc", "/", "ua", "\n", "", "else", ":", "\n", "                    ", "rinc", "[", "i", ",", "j", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.d3_box_overlap": [[150, 155], ["rotate_iou.rotate_iou_gpu_eval", "eval.d3_box_overlap_kernel"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.rotate_iou_gpu_eval", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.d3_box_overlap_kernel"], ["", "", "", "", "", "def", "d3_box_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "rinc", "=", "rotate_iou_gpu_eval", "(", "boxes", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", ",", "\n", "qboxes", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", ",", "2", ")", "\n", "d3_box_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", ")", "\n", "return", "rinc", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.compute_statistics_jit": [[157, 276], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "eval.image_box_overlap", "range", "numpy.zeros", "range", "range", "numpy.sum", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.image_box_overlap"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "compute_statistics_jit", "(", "overlaps", ",", "\n", "gt_datas", ",", "\n", "dt_datas", ",", "\n", "ignored_gt", ",", "\n", "ignored_det", ",", "\n", "dc_bboxes", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "thresh", "=", "0", ",", "\n", "compute_fp", "=", "False", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "\n", "    ", "det_size", "=", "dt_datas", ".", "shape", "[", "0", "]", "\n", "gt_size", "=", "gt_datas", ".", "shape", "[", "0", "]", "\n", "dt_scores", "=", "dt_datas", "[", ":", ",", "-", "1", "]", "\n", "dt_alphas", "=", "dt_datas", "[", ":", ",", "4", "]", "\n", "gt_alphas", "=", "gt_datas", "[", ":", ",", "4", "]", "\n", "dt_bboxes", "=", "dt_datas", "[", ":", ",", ":", "4", "]", "\n", "gt_bboxes", "=", "gt_datas", "[", ":", ",", ":", "4", "]", "\n", "\n", "assigned_detection", "=", "[", "False", "]", "*", "det_size", "\n", "ignored_threshold", "=", "[", "False", "]", "*", "det_size", "\n", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "dt_scores", "[", "i", "]", "<", "thresh", ")", ":", "\n", "                ", "ignored_threshold", "[", "i", "]", "=", "True", "\n", "", "", "", "NO_DETECTION", "=", "-", "10000000", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "# thresholds = [0.0]", "\n", "# delta = [0.0]", "\n", "thresholds", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "thresh_idx", "=", "0", "\n", "delta", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "delta_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_size", ")", ":", "\n", "        ", "if", "ignored_gt", "[", "i", "]", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "det_idx", "=", "-", "1", "\n", "valid_detection", "=", "NO_DETECTION", "\n", "max_overlap", "=", "0", "\n", "assigned_ignored_det", "=", "False", "\n", "\n", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "ignored_det", "[", "j", "]", "==", "-", "1", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "assigned_detection", "[", "j", "]", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "ignored_threshold", "[", "j", "]", ")", ":", "\n", "                ", "continue", "\n", "", "overlap", "=", "overlaps", "[", "j", ",", "i", "]", "\n", "dt_score", "=", "dt_scores", "[", "j", "]", "\n", "if", "(", "not", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "dt_score", ">", "valid_detection", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "dt_score", "\n", "", "elif", "(", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "overlap", ">", "max_overlap", "or", "assigned_ignored_det", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "0", ")", ":", "\n", "                ", "max_overlap", "=", "overlap", "\n", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "False", "\n", "", "elif", "(", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "valid_detection", "==", "NO_DETECTION", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "1", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "True", "\n", "\n", "", "", "if", "(", "valid_detection", "==", "NO_DETECTION", ")", "and", "ignored_gt", "[", "i", "]", "==", "0", ":", "\n", "            ", "fn", "+=", "1", "\n", "", "elif", "(", "(", "valid_detection", "!=", "NO_DETECTION", ")", "\n", "and", "(", "ignored_gt", "[", "i", "]", "==", "1", "or", "ignored_det", "[", "det_idx", "]", "==", "1", ")", ")", ":", "\n", "            ", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "elif", "valid_detection", "!=", "NO_DETECTION", ":", "\n", "            ", "tp", "+=", "1", "\n", "# thresholds.append(dt_scores[det_idx])", "\n", "thresholds", "[", "thresh_idx", "]", "=", "dt_scores", "[", "det_idx", "]", "\n", "thresh_idx", "+=", "1", "\n", "if", "compute_aos", ":", "\n", "# delta.append(gt_alphas[i] - dt_alphas[det_idx])", "\n", "                ", "delta", "[", "delta_idx", "]", "=", "gt_alphas", "[", "i", "]", "-", "dt_alphas", "[", "det_idx", "]", "\n", "delta_idx", "+=", "1", "\n", "\n", "", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "not", "(", "assigned_detection", "[", "i", "]", "or", "ignored_det", "[", "i", "]", "==", "-", "1", "\n", "or", "ignored_det", "[", "i", "]", "==", "1", "or", "ignored_threshold", "[", "i", "]", ")", ")", ":", "\n", "                ", "fp", "+=", "1", "\n", "", "", "nstuff", "=", "0", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "overlaps_dt_dc", "=", "image_box_overlap", "(", "dt_bboxes", ",", "dc_bboxes", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "                    ", "if", "(", "assigned_detection", "[", "j", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "ignored_det", "[", "j", "]", "==", "-", "1", "or", "ignored_det", "[", "j", "]", "==", "1", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "ignored_threshold", "[", "j", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "overlaps_dt_dc", "[", "j", ",", "i", "]", ">", "min_overlap", ":", "\n", "                        ", "assigned_detection", "[", "j", "]", "=", "True", "\n", "nstuff", "+=", "1", "\n", "", "", "", "", "fp", "-=", "nstuff", "\n", "if", "compute_aos", ":", "\n", "            ", "tmp", "=", "np", ".", "zeros", "(", "(", "fp", "+", "delta_idx", ",", ")", ")", "\n", "# tmp = [0] * fp", "\n", "for", "i", "in", "range", "(", "delta_idx", ")", ":", "\n", "                ", "tmp", "[", "i", "+", "fp", "]", "=", "(", "1.0", "+", "np", ".", "cos", "(", "delta", "[", "i", "]", ")", ")", "/", "2.0", "\n", "# tmp.append((1.0 + np.cos(delta[i])) / 2.0)", "\n", "# assert len(tmp) == fp + tp", "\n", "# assert len(delta) == tp", "\n", "", "if", "tp", ">", "0", "or", "fp", ">", "0", ":", "\n", "                ", "similarity", "=", "np", ".", "sum", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "similarity", "=", "-", "1", "\n", "", "", "", "return", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "[", ":", "thresh_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_split_parts": [[278, 288], ["None"], "function", ["None"], ["", "def", "get_split_parts", "(", "num", ",", "num_part", ")", ":", "\n", "    ", "same_part", "=", "num", "//", "num_part", "\n", "remain_num", "=", "num", "%", "num_part", "\n", "if", "same_part", "==", "0", ":", "\n", "        ", "return", "[", "num", "]", "\n", "\n", "", "if", "remain_num", "==", "0", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "\n", "", "else", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "+", "[", "remain_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.fused_compute_statistics": [[290, 338], ["numba.jit", "range", "enumerate", "eval.compute_statistics_jit"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.compute_statistics_jit"], ["", "", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "fused_compute_statistics", "(", "overlaps", ",", "\n", "pr", ",", "\n", "gt_nums", ",", "\n", "dt_nums", ",", "\n", "dc_nums", ",", "\n", "gt_datas", ",", "\n", "dt_datas", ",", "\n", "dontcares", ",", "\n", "ignored_gts", ",", "\n", "ignored_dets", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "thresholds", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "    ", "gt_num", "=", "0", "\n", "dt_num", "=", "0", "\n", "dc_num", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_nums", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "t", ",", "thresh", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "overlap", "=", "overlaps", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", ",", "gt_num", ":", "\n", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "\n", "gt_data", "=", "gt_datas", "[", "gt_num", ":", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "dt_data", "=", "dt_datas", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", "]", "\n", "ignored_gt", "=", "ignored_gts", "[", "gt_num", ":", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "ignored_det", "=", "ignored_dets", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", "]", "\n", "dontcare", "=", "dontcares", "[", "dc_num", ":", "dc_num", "+", "dc_nums", "[", "i", "]", "]", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "_", "=", "compute_statistics_jit", "(", "\n", "overlap", ",", "\n", "gt_data", ",", "\n", "dt_data", ",", "\n", "ignored_gt", ",", "\n", "ignored_det", ",", "\n", "dontcare", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "thresh", ",", "\n", "compute_fp", "=", "True", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "pr", "[", "t", ",", "0", "]", "+=", "tp", "\n", "pr", "[", "t", ",", "1", "]", "+=", "fp", "\n", "pr", "[", "t", ",", "2", "]", "+=", "fn", "\n", "if", "similarity", "!=", "-", "1", ":", "\n", "                ", "pr", "[", "t", ",", "3", "]", "+=", "similarity", "\n", "", "", "gt_num", "+=", "gt_nums", "[", "i", "]", "\n", "dt_num", "+=", "dt_nums", "[", "i", "]", "\n", "dc_num", "+=", "dc_nums", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.calculate_iou_partly": [[340, 415], ["numpy.stack", "numpy.stack", "len", "eval.get_split_parts", "enumerate", "len", "len", "parted_overlaps.append", "range", "len", "len", "numpy.concatenate", "numpy.concatenate", "eval.image_box_overlap", "overlaps.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "bev_box_overlap().astype", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "d3_box_overlap().astype", "ValueError", "eval.bev_box_overlap", "eval.d3_box_overlap"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_split_parts", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.image_box_overlap", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.bev_box_overlap", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.d3_box_overlap"], ["", "", "def", "calculate_iou_partly", "(", "gt_annos", ",", "dt_annos", ",", "metric", ",", "num_parts", "=", "50", ")", ":", "\n", "    ", "\"\"\"fast iou algorithm. this function can be used independently to\n    do result analysis. Must be used in CAMERA coordinate system.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        num_parts: int. a parameter for fast calculate algorithm\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "total_dt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "dt_annos", "]", ",", "0", ")", "\n", "total_gt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "gt_annos", "]", ",", "0", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "parted_overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "\n", "for", "num_part", "in", "split_parts", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "overlap_part", "=", "image_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", "\n", "", "elif", "metric", "==", "1", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "bev_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "", "elif", "metric", "==", "2", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "d3_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown metric\"", ")", "\n", "", "parted_overlaps", ".", "append", "(", "overlap_part", ")", "\n", "example_idx", "+=", "num_part", "\n", "", "overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "gt_num_idx", ",", "dt_num_idx", "=", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "num_part", ")", ":", "\n", "            ", "gt_box_num", "=", "total_gt_num", "[", "example_idx", "+", "i", "]", "\n", "dt_box_num", "=", "total_dt_num", "[", "example_idx", "+", "i", "]", "\n", "overlaps", ".", "append", "(", "\n", "parted_overlaps", "[", "j", "]", "[", "gt_num_idx", ":", "gt_num_idx", "+", "gt_box_num", ",", "\n", "dt_num_idx", ":", "dt_num_idx", "+", "dt_box_num", "]", ")", "\n", "gt_num_idx", "+=", "gt_box_num", "\n", "dt_num_idx", "+=", "dt_box_num", "\n", "", "example_idx", "+=", "num_part", "\n", "\n", "", "return", "overlaps", ",", "parted_overlaps", ",", "total_gt_num", ",", "total_dt_num", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval._prepare_data": [[417, 446], ["range", "numpy.stack", "len", "eval.clean_data", "ignored_gts.append", "ignored_dets.append", "np.stack.append", "dontcares.append", "numpy.concatenate", "numpy.concatenate", "gt_datas_list.append", "dt_datas_list.append", "numpy.array", "numpy.array", "len", "numpy.zeros().astype", "numpy.stack().astype", "numpy.zeros", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.clean_data"], ["", "def", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", ":", "\n", "    ", "gt_datas_list", "=", "[", "]", "\n", "dt_datas_list", "=", "[", "]", "\n", "total_dc_num", "=", "[", "]", "\n", "ignored_gts", ",", "ignored_dets", ",", "dontcares", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "total_num_valid_gt", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "        ", "rets", "=", "clean_data", "(", "gt_annos", "[", "i", "]", ",", "dt_annos", "[", "i", "]", ",", "current_class", ",", "difficulty", ")", "\n", "num_valid_gt", ",", "ignored_gt", ",", "ignored_det", ",", "dc_bboxes", "=", "rets", "\n", "ignored_gts", ".", "append", "(", "np", ".", "array", "(", "ignored_gt", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "ignored_dets", ".", "append", "(", "np", ".", "array", "(", "ignored_det", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "if", "len", "(", "dc_bboxes", ")", "==", "0", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "stack", "(", "dc_bboxes", ",", "0", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "total_dc_num", ".", "append", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "dontcares", ".", "append", "(", "dc_bboxes", ")", "\n", "total_num_valid_gt", "+=", "num_valid_gt", "\n", "gt_datas", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "gt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "1", ")", "\n", "dt_datas", "=", "np", ".", "concatenate", "(", "[", "\n", "dt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "dt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", ",", "\n", "dt_annos", "[", "i", "]", "[", "\"score\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "]", ",", "1", ")", "\n", "gt_datas_list", ".", "append", "(", "gt_datas", ")", "\n", "dt_datas_list", ".", "append", "(", "dt_datas", ")", "\n", "", "total_dc_num", "=", "np", ".", "stack", "(", "total_dc_num", ",", "axis", "=", "0", ")", "\n", "return", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "dontcares", ",", "\n", "total_dc_num", ",", "total_num_valid_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.eval_class": [[448, 554], ["len", "eval.get_split_parts", "eval.calculate_iou_partly", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "enumerate", "eval._prepare_data", "enumerate", "range", "numpy.array", "eval.get_thresholds", "numpy.array", "numpy.zeros", "enumerate", "range", "range", "len", "eval.compute_statistics_jit", "np.array.tolist", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "eval.fused_compute_statistics", "len", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_split_parts", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.calculate_iou_partly", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval._prepare_data", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_thresholds", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.compute_statistics_jit", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.fused_compute_statistics"], ["", "def", "eval_class", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_classes", ",", "\n", "difficultys", ",", "\n", "metric", ",", "\n", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ",", "\n", "num_parts", "=", "100", ")", ":", "\n", "    ", "\"\"\"Kitti eval. support 2d/bev/3d/aos eval. support 0.5:0.05:0.95 coco AP.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        current_classes: list of int, 0: car, 1: pedestrian, 2: cyclist\n        difficultys: list of int. eval difficulty, 0: easy, 1: normal, 2: hard\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        min_overlaps: float, min overlap. format: [num_overlap, metric, class].\n        num_parts: int. a parameter for fast calculate algorithm\n\n    Returns:\n        dict of recall, precision and aos\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "\n", "rets", "=", "calculate_iou_partly", "(", "dt_annos", ",", "gt_annos", ",", "metric", ",", "num_parts", ")", "\n", "overlaps", ",", "parted_overlaps", ",", "total_dt_num", ",", "total_gt_num", "=", "rets", "\n", "N_SAMPLE_PTS", "=", "41", "\n", "num_minoverlap", "=", "len", "(", "min_overlaps", ")", "\n", "num_class", "=", "len", "(", "current_classes", ")", "\n", "num_difficulty", "=", "len", "(", "difficultys", ")", "\n", "precision", "=", "np", ".", "zeros", "(", "\n", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "\n", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "aos", "=", "np", ".", "zeros", "(", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "for", "m", ",", "current_class", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "        ", "for", "l", ",", "difficulty", "in", "enumerate", "(", "difficultys", ")", ":", "\n", "            ", "rets", "=", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", "\n", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "\n", "dontcares", ",", "total_dc_num", ",", "total_num_valid_gt", ")", "=", "rets", "\n", "for", "k", ",", "min_overlap", "in", "enumerate", "(", "min_overlaps", "[", ":", ",", "metric", ",", "m", "]", ")", ":", "\n", "                ", "thresholdss", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "                    ", "rets", "=", "compute_statistics_jit", "(", "\n", "overlaps", "[", "i", "]", ",", "\n", "gt_datas_list", "[", "i", "]", ",", "\n", "dt_datas_list", "[", "i", "]", ",", "\n", "ignored_gts", "[", "i", "]", ",", "\n", "ignored_dets", "[", "i", "]", ",", "\n", "dontcares", "[", "i", "]", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "0.0", ",", "\n", "compute_fp", "=", "False", ")", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "=", "rets", "\n", "thresholdss", "+=", "thresholds", ".", "tolist", "(", ")", "\n", "", "thresholdss", "=", "np", ".", "array", "(", "thresholdss", ")", "\n", "thresholds", "=", "get_thresholds", "(", "thresholdss", ",", "total_num_valid_gt", ")", "\n", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "pr", "=", "np", ".", "zeros", "(", "[", "len", "(", "thresholds", ")", ",", "4", "]", ")", "\n", "idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "                    ", "gt_datas_part", "=", "np", ".", "concatenate", "(", "\n", "gt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dt_datas_part", "=", "np", ".", "concatenate", "(", "\n", "dt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dc_datas_part", "=", "np", ".", "concatenate", "(", "\n", "dontcares", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_dets_part", "=", "np", ".", "concatenate", "(", "\n", "ignored_dets", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_gts_part", "=", "np", ".", "concatenate", "(", "\n", "ignored_gts", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "fused_compute_statistics", "(", "\n", "parted_overlaps", "[", "j", "]", ",", "\n", "pr", ",", "\n", "total_gt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dc_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "gt_datas_part", ",", "\n", "dt_datas_part", ",", "\n", "dc_datas_part", ",", "\n", "ignored_gts_part", ",", "\n", "ignored_dets_part", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresholds", "=", "thresholds", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "idx", "+=", "num_part", "\n", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "                    ", "recall", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "2", "]", ")", "\n", "precision", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "if", "compute_aos", ":", "\n", "                        ", "aos", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "3", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "                    ", "precision", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "\n", "precision", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "recall", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "recall", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "compute_aos", ":", "\n", "                        ", "aos", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "aos", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "", "", "", "ret_dict", "=", "{", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"orientation\"", ":", "aos", ",", "\n", "}", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP": [[556, 561], ["range"], "function", ["None"], ["", "def", "get_mAP", "(", "prec", ")", ":", "\n", "    ", "sums", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "prec", ".", "shape", "[", "-", "1", "]", ",", "4", ")", ":", "\n", "        ", "sums", "=", "sums", "+", "prec", "[", "...", ",", "i", "]", "\n", "", "return", "sums", "/", "11", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP_R40": [[563, 568], ["range"], "function", ["None"], ["", "def", "get_mAP_R40", "(", "prec", ")", ":", "\n", "    ", "sums", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "prec", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "sums", "=", "sums", "+", "prec", "[", "...", ",", "i", "]", "\n", "", "return", "sums", "/", "40", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str": [[570, 577], ["sysio.StringIO.truncate", "sysio.StringIO.seek", "print", "sysio.StringIO.getvalue", "io.StringIO"], "function", ["None"], ["", "def", "print_str", "(", "value", ",", "*", "arg", ",", "sstream", "=", "None", ")", ":", "\n", "    ", "if", "sstream", "is", "None", ":", "\n", "        ", "sstream", "=", "sysio", ".", "StringIO", "(", ")", "\n", "", "sstream", ".", "truncate", "(", "0", ")", "\n", "sstream", ".", "seek", "(", "0", ")", "\n", "print", "(", "value", ",", "*", "arg", ",", "file", "=", "sstream", ")", "\n", "return", "sstream", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.do_eval": [[579, 619], ["eval.eval_class", "eval.get_mAP", "eval.get_mAP_R40", "eval.eval_class", "eval.get_mAP", "eval.get_mAP_R40", "eval.eval_class", "eval.get_mAP", "eval.get_mAP_R40", "eval.get_mAP", "eval.get_mAP_R40"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.eval_class", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP_R40", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.eval_class", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP_R40", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.eval_class", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP_R40", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_mAP_R40"], ["", "def", "do_eval", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_classes", ",", "\n", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ",", "\n", "PR_detail_dict", "=", "None", ")", ":", "\n", "# min_overlaps: [num_minoverlap, metric, num_class]", "\n", "    ", "difficultys", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "0", ",", "\n", "min_overlaps", ",", "compute_aos", ")", "\n", "# ret: [num_class, num_diff, num_minoverlap, num_sample_points]", "\n", "mAP_bbox", "=", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "mAP_bbox_R40", "=", "get_mAP_R40", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "\n", "if", "PR_detail_dict", "is", "not", "None", ":", "\n", "        ", "PR_detail_dict", "[", "'bbox'", "]", "=", "ret", "[", "'precision'", "]", "\n", "\n", "", "mAP_aos", "=", "mAP_aos_R40", "=", "None", "\n", "if", "compute_aos", ":", "\n", "        ", "mAP_aos", "=", "get_mAP", "(", "ret", "[", "\"orientation\"", "]", ")", "\n", "mAP_aos_R40", "=", "get_mAP_R40", "(", "ret", "[", "\"orientation\"", "]", ")", "\n", "\n", "if", "PR_detail_dict", "is", "not", "None", ":", "\n", "            ", "PR_detail_dict", "[", "'aos'", "]", "=", "ret", "[", "'orientation'", "]", "\n", "\n", "", "", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "1", ",", "\n", "min_overlaps", ")", "\n", "mAP_bev", "=", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "mAP_bev_R40", "=", "get_mAP_R40", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "\n", "if", "PR_detail_dict", "is", "not", "None", ":", "\n", "        ", "PR_detail_dict", "[", "'bev'", "]", "=", "ret", "[", "'precision'", "]", "\n", "\n", "", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "2", ",", "\n", "min_overlaps", ")", "\n", "mAP_3d", "=", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "mAP_3d_R40", "=", "get_mAP_R40", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "if", "PR_detail_dict", "is", "not", "None", ":", "\n", "        ", "PR_detail_dict", "[", "'3d'", "]", "=", "ret", "[", "'precision'", "]", "\n", "", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", ",", "mAP_bbox_R40", ",", "mAP_bev_R40", ",", "mAP_3d_R40", ",", "mAP_aos_R40", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.do_coco_style_eval": [[621, 637], ["numpy.zeros", "range", "eval.do_eval", "mAP_bbox.mean.mean", "mAP_bev.mean.mean", "mAP_3d.mean.mean", "range", "mAP_aos.mean.mean", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.do_eval"], ["", "def", "do_coco_style_eval", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "overlap_ranges", ",", "\n", "compute_aos", ")", ":", "\n", "# overlap_ranges: [range, metric, num_class]", "\n", "    ", "min_overlaps", "=", "np", ".", "zeros", "(", "[", "10", ",", "*", "overlap_ranges", ".", "shape", "[", "1", ":", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "overlap_ranges", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "overlap_ranges", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "min_overlaps", "[", ":", ",", "i", ",", "j", "]", "=", "np", ".", "linspace", "(", "*", "overlap_ranges", "[", ":", ",", "i", ",", "j", "]", ")", "\n", "", "", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "=", "do_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "min_overlaps", ",", "compute_aos", ")", "\n", "# ret: [num_class, num_diff, num_minoverlap]", "\n", "mAP_bbox", "=", "mAP_bbox", ".", "mean", "(", "-", "1", ")", "\n", "mAP_bev", "=", "mAP_bev", ".", "mean", "(", "-", "1", ")", "\n", "mAP_3d", "=", "mAP_3d", ".", "mean", "(", "-", "1", ")", "\n", "if", "mAP_aos", "is", "not", "None", ":", "\n", "        ", "mAP_aos", "=", "mAP_aos", ".", "mean", "(", "-", "1", ")", "\n", "", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_official_eval_result": [[639, 747], ["numpy.array", "numpy.array", "numpy.stack", "eval.do_eval", "enumerate", "isinstance", "isinstance", "range", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.do_eval", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str"], ["", "def", "get_official_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "PR_detail_dict", "=", "None", ")", ":", "\n", "    ", "overlap_0_7", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.7", "]", ",", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", "]", ",", "\n", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", "]", "]", ")", "\n", "overlap_0_5", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", ",", "0.5", "]", ",", "\n", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", ",", "0.5", "]", "]", ")", "\n", "min_overlaps", "=", "np", ".", "stack", "(", "[", "overlap_0_7", ",", "overlap_0_5", "]", ",", "axis", "=", "0", ")", "# [2, 3, 5]", "\n", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "5", ":", "'Truck'", "\n", "}", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "not", "isinstance", "(", "current_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "current_classes", "=", "[", "current_classes", "]", "\n", "", "current_classes_int", "=", "[", "]", "\n", "for", "curcls", "in", "current_classes", ":", "\n", "        ", "if", "isinstance", "(", "curcls", ",", "str", ")", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "name_to_class", "[", "curcls", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "curcls", ")", "\n", "", "", "current_classes", "=", "current_classes_int", "\n", "min_overlaps", "=", "min_overlaps", "[", ":", ",", ":", ",", "current_classes", "]", "\n", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", ",", "mAPbbox_R40", ",", "mAPbev_R40", ",", "mAP3d_R40", ",", "mAPaos_R40", "=", "do_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "min_overlaps", ",", "compute_aos", ",", "PR_detail_dict", "=", "PR_detail_dict", ")", "\n", "\n", "ret_dict", "=", "{", "}", "\n", "for", "j", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "# mAP threshold array: [num_minoverlap, metric, class]", "\n", "# mAP result: [num_class, num_diff, num_minoverlap]", "\n", "        ", "for", "i", "in", "range", "(", "min_overlaps", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"AP@{:.2f}, {:.2f}, {:.2f}:\"", ".", "format", "(", "*", "min_overlaps", "[", "i", ",", ":", ",", "j", "]", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[j, 0, i]:.4f}, \"", "\n", "f\"{mAPbbox[j, 1, i]:.4f}, \"", "\n", "f\"{mAPbbox[j, 2, i]:.4f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[j, 0, i]:.4f}, \"", "\n", "f\"{mAPbev[j, 1, i]:.4f}, \"", "\n", "f\"{mAPbev[j, 2, i]:.4f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[j, 0, i]:.4f}, \"", "\n", "f\"{mAP3d[j, 1, i]:.4f}, \"", "\n", "f\"{mAP3d[j, 2, i]:.4f}\"", ")", ")", "\n", "\n", "if", "compute_aos", ":", "\n", "                ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[j, 0, i]:.2f}, \"", "\n", "f\"{mAPaos[j, 1, i]:.2f}, \"", "\n", "f\"{mAPaos[j, 2, i]:.2f}\"", ")", ")", "\n", "# if i == 0:", "\n", "# ret_dict['%s_aos/easy' % class_to_name[curcls]] = mAPaos[j, 0, 0]", "\n", "# ret_dict['%s_aos/moderate' % class_to_name[curcls]] = mAPaos[j, 1, 0]", "\n", "# ret_dict['%s_aos/hard' % class_to_name[curcls]] = mAPaos[j, 2, 0]", "\n", "\n", "", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"AP_R40@{:.2f}, {:.2f}, {:.2f}:\"", ".", "format", "(", "*", "min_overlaps", "[", "i", ",", ":", ",", "j", "]", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox_R40[j, 0, i]:.4f}, \"", "\n", "f\"{mAPbbox_R40[j, 1, i]:.4f}, \"", "\n", "f\"{mAPbbox_R40[j, 2, i]:.4f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev_R40[j, 0, i]:.4f}, \"", "\n", "f\"{mAPbev_R40[j, 1, i]:.4f}, \"", "\n", "f\"{mAPbev_R40[j, 2, i]:.4f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d_R40[j, 0, i]:.4f}, \"", "\n", "f\"{mAP3d_R40[j, 1, i]:.4f}, \"", "\n", "f\"{mAP3d_R40[j, 2, i]:.4f}\"", ")", ")", "\n", "if", "compute_aos", ":", "\n", "                ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos_R40[j, 0, i]:.2f}, \"", "\n", "f\"{mAPaos_R40[j, 1, i]:.2f}, \"", "\n", "f\"{mAPaos_R40[j, 2, i]:.2f}\"", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                   ", "ret_dict", "[", "'%s_aos/easy_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPaos_R40", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_aos/moderate_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPaos_R40", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_aos/hard_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPaos_R40", "[", "j", ",", "2", ",", "0", "]", "\n", "\n", "", "", "if", "i", "==", "0", ":", "\n", "# ret_dict['%s_3d/easy' % class_to_name[curcls]] = mAP3d[j, 0, 0]", "\n", "# ret_dict['%s_3d/moderate' % class_to_name[curcls]] = mAP3d[j, 1, 0]", "\n", "# ret_dict['%s_3d/hard' % class_to_name[curcls]] = mAP3d[j, 2, 0]", "\n", "# ret_dict['%s_bev/easy' % class_to_name[curcls]] = mAPbev[j, 0, 0]", "\n", "# ret_dict['%s_bev/moderate' % class_to_name[curcls]] = mAPbev[j, 1, 0]", "\n", "# ret_dict['%s_bev/hard' % class_to_name[curcls]] = mAPbev[j, 2, 0]", "\n", "# ret_dict['%s_image/easy' % class_to_name[curcls]] = mAPbbox[j, 0, 0]", "\n", "# ret_dict['%s_image/moderate' % class_to_name[curcls]] = mAPbbox[j, 1, 0]", "\n", "# ret_dict['%s_image/hard' % class_to_name[curcls]] = mAPbbox[j, 2, 0]", "\n", "\n", "                ", "ret_dict", "[", "'%s_3d/easy_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAP3d_R40", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_3d/moderate_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAP3d_R40", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_3d/hard_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAP3d_R40", "[", "j", ",", "2", ",", "0", "]", "\n", "ret_dict", "[", "'%s_bev/easy_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbev_R40", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_bev/moderate_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbev_R40", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_bev/hard_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbev_R40", "[", "j", ",", "2", ",", "0", "]", "\n", "ret_dict", "[", "'%s_image/easy_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbbox_R40", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_image/moderate_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbbox_R40", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_image/hard_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbbox_R40", "[", "j", ",", "2", ",", "0", "]", "\n", "\n", "", "", "", "return", "result", ",", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.get_coco_eval_result": [[749, 809], ["numpy.zeros", "enumerate", "eval.do_coco_style_eval", "enumerate", "isinstance", "isinstance", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "len", "numpy.array", "numpy.array", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.do_coco_style_eval", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.eval.print_str"], ["", "def", "get_coco_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ")", ":", "\n", "    ", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "}", "\n", "class_to_range", "=", "{", "\n", "0", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "1", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "2", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "3", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "4", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "}", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "not", "isinstance", "(", "current_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "current_classes", "=", "[", "current_classes", "]", "\n", "", "current_classes_int", "=", "[", "]", "\n", "for", "curcls", "in", "current_classes", ":", "\n", "        ", "if", "isinstance", "(", "curcls", ",", "str", ")", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "name_to_class", "[", "curcls", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "curcls", ")", "\n", "", "", "current_classes", "=", "current_classes_int", "\n", "overlap_ranges", "=", "np", ".", "zeros", "(", "[", "3", ",", "3", ",", "len", "(", "current_classes", ")", "]", ")", "\n", "for", "i", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "        ", "overlap_ranges", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "array", "(", "\n", "class_to_range", "[", "curcls", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", "=", "do_coco_style_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "overlap_ranges", ",", "compute_aos", ")", "\n", "for", "j", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "# mAP threshold array: [num_minoverlap, metric, class]", "\n", "# mAP result: [num_class, num_diff, num_minoverlap]", "\n", "        ", "o_range", "=", "np", ".", "array", "(", "class_to_range", "[", "curcls", "]", ")", "[", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "o_range", "[", "1", "]", "=", "(", "o_range", "[", "2", "]", "-", "o_range", "[", "0", "]", ")", "/", "(", "o_range", "[", "1", "]", "-", "1", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"coco AP@{:.2f}:{:.2f}:{:.2f}:\"", ".", "format", "(", "*", "o_range", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[j, 0]:.2f}, \"", "\n", "f\"{mAPbbox[j, 1]:.2f}, \"", "\n", "f\"{mAPbbox[j, 2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[j, 0]:.2f}, \"", "\n", "f\"{mAPbev[j, 1]:.2f}, \"", "\n", "f\"{mAPbev[j, 2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[j, 0]:.2f}, \"", "\n", "f\"{mAP3d[j, 1]:.2f}, \"", "\n", "f\"{mAP3d[j, 2]:.2f}\"", ")", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[j, 0]:.2f}, \"", "\n", "f\"{mAPaos[j, 1]:.2f}, \"", "\n", "f\"{mAPaos[j, 2]:.2f}\"", ")", ")", "\n", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.div_up": [[13, 16], ["numba.jit"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "div_up", "(", "m", ",", "n", ")", ":", "\n", "    ", "return", "m", "//", "n", "+", "(", "m", "%", "n", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.trangle_area": [[17, 21], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "trangle_area", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "(", "(", "a", "[", "0", "]", "-", "c", "[", "0", "]", ")", "*", "(", "b", "[", "1", "]", "-", "c", "[", "1", "]", ")", "-", "(", "a", "[", "1", "]", "-", "c", "[", "1", "]", ")", "*", "\n", "(", "b", "[", "0", "]", "-", "c", "[", "0", "]", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.area": [[23, 31], ["numba.cuda.jit", "range", "abs", "rotate_iou.trangle_area"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "area", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "area_val", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", "-", "2", ")", ":", "\n", "        ", "area_val", "+=", "abs", "(", "\n", "trangle_area", "(", "int_pts", "[", ":", "2", "]", ",", "int_pts", "[", "2", "*", "i", "+", "2", ":", "2", "*", "i", "+", "4", "]", ",", "\n", "int_pts", "[", "2", "*", "i", "+", "4", ":", "2", "*", "i", "+", "6", "]", ")", ")", "\n", "", "return", "area_val", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.sort_vertex_in_convex_polygon": [[33, 71], ["numba.cuda.jit", "numba.cuda.local.array", "range", "numba.cuda.local.array", "numba.cuda.local.array", "range", "range", "math.sqrt"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "sort_vertex_in_convex_polygon", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "if", "num_of_inter", ">", "0", ":", "\n", "        ", "center", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "center", "[", ":", "]", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "center", "[", "0", "]", "+=", "int_pts", "[", "2", "*", "i", "]", "\n", "center", "[", "1", "]", "+=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "", "center", "[", "0", "]", "/=", "num_of_inter", "\n", "center", "[", "1", "]", "/=", "num_of_inter", "\n", "v", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "vs", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "v", "[", "0", "]", "=", "int_pts", "[", "2", "*", "i", "]", "-", "center", "[", "0", "]", "\n", "v", "[", "1", "]", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "-", "center", "[", "1", "]", "\n", "d", "=", "math", ".", "sqrt", "(", "v", "[", "0", "]", "*", "v", "[", "0", "]", "+", "v", "[", "1", "]", "*", "v", "[", "1", "]", ")", "\n", "v", "[", "0", "]", "=", "v", "[", "0", "]", "/", "d", "\n", "v", "[", "1", "]", "=", "v", "[", "1", "]", "/", "d", "\n", "if", "v", "[", "1", "]", "<", "0", ":", "\n", "                ", "v", "[", "0", "]", "=", "-", "2", "-", "v", "[", "0", "]", "\n", "", "vs", "[", "i", "]", "=", "v", "[", "0", "]", "\n", "", "j", "=", "0", "\n", "temp", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "num_of_inter", ")", ":", "\n", "            ", "if", "vs", "[", "i", "-", "1", "]", ">", "vs", "[", "i", "]", ":", "\n", "                ", "temp", "=", "vs", "[", "i", "]", "\n", "tx", "=", "int_pts", "[", "2", "*", "i", "]", "\n", "ty", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "j", "=", "i", "\n", "while", "j", ">", "0", "and", "vs", "[", "j", "-", "1", "]", ">", "temp", ":", "\n", "                    ", "vs", "[", "j", "]", "=", "vs", "[", "j", "-", "1", "]", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "int_pts", "[", "j", "*", "2", "-", "2", "]", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "int_pts", "[", "j", "*", "2", "-", "1", "]", "\n", "j", "-=", "1", "\n", "\n", "", "vs", "[", "j", "]", "=", "temp", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "tx", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "ty", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.line_segment_intersection": [[73, 117], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array"], "function", ["None"], ["", "", "", "", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "A", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "B", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "C", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "D", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "A", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "A", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "B", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "B", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "C", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "C", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "D", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "D", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "BA0", "=", "B", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "BA1", "=", "B", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "DA0", "=", "D", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "CA0", "=", "C", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "DA1", "=", "D", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "CA1", "=", "C", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "acd", "=", "DA1", "*", "CA0", ">", "CA1", "*", "DA0", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "        ", "abc", "=", "CA1", "*", "BA0", ">", "BA1", "*", "CA0", "\n", "abd", "=", "DA1", "*", "BA0", ">", "BA1", "*", "DA0", "\n", "if", "abc", "!=", "abd", ":", "\n", "            ", "DC0", "=", "D", "[", "0", "]", "-", "C", "[", "0", "]", "\n", "DC1", "=", "D", "[", "1", "]", "-", "C", "[", "1", "]", "\n", "ABBA", "=", "A", "[", "0", "]", "*", "B", "[", "1", "]", "-", "B", "[", "0", "]", "*", "A", "[", "1", "]", "\n", "CDDC", "=", "C", "[", "0", "]", "*", "D", "[", "1", "]", "-", "D", "[", "0", "]", "*", "C", "[", "1", "]", "\n", "DH", "=", "BA1", "*", "DC0", "-", "BA0", "*", "DC1", "\n", "Dx", "=", "ABBA", "*", "DC0", "-", "BA0", "*", "CDDC", "\n", "Dy", "=", "ABBA", "*", "DC1", "-", "BA1", "*", "CDDC", "\n", "temp_pts", "[", "0", "]", "=", "Dx", "/", "DH", "\n", "temp_pts", "[", "1", "]", "=", "Dy", "/", "DH", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.line_segment_intersection_v1": [[119, 159], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "rotate_iou.trangle_area", "rotate_iou.trangle_area", "rotate_iou.trangle_area"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.trangle_area", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.trangle_area", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection_v1", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "a", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "b", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "c", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "d", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "a", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "a", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "b", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "b", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "c", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "c", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "d", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "d", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "area_abc", "=", "trangle_area", "(", "a", ",", "b", ",", "c", ")", "\n", "area_abd", "=", "trangle_area", "(", "a", ",", "b", ",", "d", ")", "\n", "\n", "if", "area_abc", "*", "area_abd", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "area_cda", "=", "trangle_area", "(", "c", ",", "d", ",", "a", ")", "\n", "area_cdb", "=", "area_cda", "+", "area_abc", "-", "area_abd", "\n", "\n", "if", "area_cda", "*", "area_cdb", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "", "t", "=", "area_cda", "/", "(", "area_abd", "-", "area_abc", ")", "\n", "\n", "dx", "=", "t", "*", "(", "b", "[", "0", "]", "-", "a", "[", "0", "]", ")", "\n", "dy", "=", "t", "*", "(", "b", "[", "1", "]", "-", "a", "[", "1", "]", ")", "\n", "temp_pts", "[", "0", "]", "=", "a", "[", "0", "]", "+", "dx", "\n", "temp_pts", "[", "1", "]", "=", "a", "[", "1", "]", "+", "dy", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.point_in_quadrilateral": [[161, 178], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32, float32, float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "point_in_quadrilateral", "(", "pt_x", ",", "pt_y", ",", "corners", ")", ":", "\n", "    ", "ab0", "=", "corners", "[", "2", "]", "-", "corners", "[", "0", "]", "\n", "ab1", "=", "corners", "[", "3", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ad0", "=", "corners", "[", "6", "]", "-", "corners", "[", "0", "]", "\n", "ad1", "=", "corners", "[", "7", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ap0", "=", "pt_x", "-", "corners", "[", "0", "]", "\n", "ap1", "=", "pt_y", "-", "corners", "[", "1", "]", "\n", "\n", "abab", "=", "ab0", "*", "ab0", "+", "ab1", "*", "ab1", "\n", "abap", "=", "ab0", "*", "ap0", "+", "ab1", "*", "ap1", "\n", "adad", "=", "ad0", "*", "ad0", "+", "ad1", "*", "ad1", "\n", "adap", "=", "ad0", "*", "ap0", "+", "ad1", "*", "ap1", "\n", "\n", "return", "abab", ">=", "abap", "and", "abap", ">=", "0", "and", "adad", ">=", "adap", "and", "adap", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.quadrilateral_intersection": [[180, 202], ["numba.cuda.jit", "range", "numba.cuda.local.array", "range", "rotate_iou.point_in_quadrilateral", "rotate_iou.point_in_quadrilateral", "range", "rotate_iou.line_segment_intersection"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.point_in_quadrilateral", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.point_in_quadrilateral", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.line_segment_intersection"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "quadrilateral_intersection", "(", "pts1", ",", "pts2", ",", "int_pts", ")", ":", "\n", "    ", "num_of_inter", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "point_in_quadrilateral", "(", "pts1", "[", "2", "*", "i", "]", ",", "pts1", "[", "2", "*", "i", "+", "1", "]", ",", "pts2", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "if", "point_in_quadrilateral", "(", "pts2", "[", "2", "*", "i", "]", ",", "pts2", "[", "2", "*", "i", "+", "1", "]", ",", "pts1", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts2", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts2", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "", "temp_pts", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "has_pts", "=", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", "\n", "if", "has_pts", ":", "\n", "                ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "temp_pts", "[", "0", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "temp_pts", "[", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "\n", "", "", "", "return", "num_of_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.rbbox_to_corners": [[204, 229], ["numba.cuda.jit", "math.cos", "math.sin", "numba.cuda.local.array", "numba.cuda.local.array", "range"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "rbbox_to_corners", "(", "corners", ",", "rbbox", ")", ":", "\n", "# generate clockwise corners and rotate it clockwise", "\n", "    ", "angle", "=", "rbbox", "[", "4", "]", "\n", "a_cos", "=", "math", ".", "cos", "(", "angle", ")", "\n", "a_sin", "=", "math", ".", "sin", "(", "angle", ")", "\n", "center_x", "=", "rbbox", "[", "0", "]", "\n", "center_y", "=", "rbbox", "[", "1", "]", "\n", "x_d", "=", "rbbox", "[", "2", "]", "\n", "y_d", "=", "rbbox", "[", "3", "]", "\n", "corners_x", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_y", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_x", "[", "0", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "1", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "2", "]", "=", "x_d", "/", "2", "\n", "corners_x", "[", "3", "]", "=", "x_d", "/", "2", "\n", "corners_y", "[", "0", "]", "=", "-", "y_d", "/", "2", "\n", "corners_y", "[", "1", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "2", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "3", "]", "=", "-", "y_d", "/", "2", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "corners", "[", "2", "*", "\n", "i", "]", "=", "a_cos", "*", "corners_x", "[", "i", "]", "+", "a_sin", "*", "corners_y", "[", "i", "]", "+", "center_x", "\n", "corners", "[", "2", "*", "i", "\n", "+", "1", "]", "=", "-", "a_sin", "*", "corners_x", "[", "i", "]", "+", "a_cos", "*", "corners_y", "[", "i", "]", "+", "center_y", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.inter": [[231, 246], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "rotate_iou.rbbox_to_corners", "rotate_iou.rbbox_to_corners", "rotate_iou.quadrilateral_intersection", "rotate_iou.sort_vertex_in_convex_polygon", "rotate_iou.area"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.rbbox_to_corners", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.rbbox_to_corners", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.quadrilateral_intersection", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.sort_vertex_in_convex_polygon", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.area"], ["", "", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "inter", "(", "rbbox1", ",", "rbbox2", ")", ":", "\n", "    ", "corners1", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners2", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "intersection_corners", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "rbbox_to_corners", "(", "corners1", ",", "rbbox1", ")", "\n", "rbbox_to_corners", "(", "corners2", ",", "rbbox2", ")", "\n", "\n", "num_intersection", "=", "quadrilateral_intersection", "(", "corners1", ",", "corners2", ",", "\n", "intersection_corners", ")", "\n", "sort_vertex_in_convex_polygon", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "# print(intersection_corners.reshape([-1, 2])[:num_intersection])", "\n", "\n", "return", "area", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.devRotateIoUEval": [[248, 261], ["numba.cuda.jit", "rotate_iou.inter"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.inter"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "devRotateIoUEval", "(", "rbox1", ",", "rbox2", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "area1", "=", "rbox1", "[", "2", "]", "*", "rbox1", "[", "3", "]", "\n", "area2", "=", "rbox2", "[", "2", "]", "*", "rbox2", "[", "3", "]", "\n", "area_inter", "=", "inter", "(", "rbox1", ",", "rbox2", ")", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "        ", "return", "area_inter", "/", "(", "area1", "+", "area2", "-", "area_inter", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "        ", "return", "area_inter", "/", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "        ", "return", "area_inter", "/", "area2", "\n", "", "else", ":", "\n", "        ", "return", "area_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.rotate_iou_kernel_eval": [[262, 293], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "rotate_iou.devRotateIoUEval"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.devRotateIoUEval"], ["", "", "@", "cuda", ".", "jit", "(", "'(int64, int64, float32[:], float32[:], float32[:], int32)'", ",", "fastmath", "=", "False", ")", "\n", "def", "rotate_iou_kernel_eval", "(", "N", ",", "K", ",", "dev_boxes", ",", "dev_query_boxes", ",", "dev_iou", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "N", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "K", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "block_qboxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "dev_query_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_qboxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "0", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "1", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "2", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "3", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "4", "]", "\n", "", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "tx", "<", "row_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "col_size", ")", ":", "\n", "            ", "offset", "=", "row_start", "*", "threadsPerBlock", "*", "K", "+", "col_start", "*", "threadsPerBlock", "+", "tx", "*", "K", "+", "i", "\n", "dev_iou", "[", "offset", "]", "=", "devRotateIoUEval", "(", "block_qboxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "5", "]", ",", "\n", "block_boxes", "[", "tx", "*", "5", ":", "tx", "*", "5", "+", "5", "]", ",", "criterion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.rotate_iou_gpu_eval": [[295, 331], ["boxes.astype.astype", "query_boxes.astype.astype", "numpy.zeros", "numba.cuda.select_device", "numba.cuda.stream", "np.zeros.astype", "rotate_iou.div_up", "rotate_iou.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes.astype.reshape", "query_boxes.astype.reshape", "np.zeros.reshape", "np.zeros.reshape"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.div_up", "home.repos.pwc.inspect_result.dschinagl_occam.kitti_object_eval_python.rotate_iou.div_up"], ["", "", "", "def", "rotate_iou_gpu_eval", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"rotated box iou running in gpu. 500x faster than cpu version\n    (take 5ms in one example with numba.cuda code).\n    convert from [this project](\n        https://github.com/hongzhenwang/RRPN-revise/tree/master/pcdet/rotation).\n    \n    Args:\n        boxes (float tensor: [N, 5]): rbboxes. format: centers, dims, \n            angles(clockwise when positive)\n        query_boxes (float tensor: [K, 5]): [description]\n        device_id (int, optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "box_dtype", "=", "boxes", ".", "dtype", "\n", "boxes", "=", "boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "query_boxes", "=", "query_boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "N", "==", "0", "or", "K", "==", "0", ":", "\n", "        ", "return", "iou", "\n", "", "threadsPerBlock", "=", "8", "*", "8", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "N", ",", "threadsPerBlock", ")", ",", "div_up", "(", "K", ",", "threadsPerBlock", ")", ")", "\n", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "query_boxes_dev", "=", "cuda", ".", "to_device", "(", "query_boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "iou_dev", "=", "cuda", ".", "to_device", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "rotate_iou_kernel_eval", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "N", ",", "K", ",", "boxes_dev", ",", "query_boxes_dev", ",", "iou_dev", ",", "criterion", ")", "\n", "iou_dev", ".", "copy_to_host", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", "=", "stream", ")", "\n", "", "return", "iou", ".", "astype", "(", "boxes", ".", "dtype", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.VoxelGeneratorWrapper.__init__": [[16, 42], ["VoxelGenerator", "VoxelGenerator"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vsize_xyz", ",", "coors_range_xyz", ",", "num_point_features", ",", "max_num_points_per_voxel", ",", "max_num_voxels", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "spconv", ".", "utils", "import", "VoxelGeneratorV2", "as", "VoxelGenerator", "\n", "self", ".", "spconv_ver", "=", "1", "\n", "", "except", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "spconv", ".", "utils", "import", "VoxelGenerator", "\n", "self", ".", "spconv_ver", "=", "1", "\n", "", "except", ":", "\n", "                ", "from", "spconv", ".", "utils", "import", "Point2VoxelCPU3d", "as", "VoxelGenerator", "\n", "self", ".", "spconv_ver", "=", "2", "\n", "\n", "", "", "if", "self", ".", "spconv_ver", "==", "1", ":", "\n", "            ", "self", ".", "_voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "vsize_xyz", ",", "\n", "point_cloud_range", "=", "coors_range_xyz", ",", "\n", "max_num_points", "=", "max_num_points_per_voxel", ",", "\n", "max_voxels", "=", "max_num_voxels", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_voxel_generator", "=", "VoxelGenerator", "(", "\n", "vsize_xyz", "=", "vsize_xyz", ",", "\n", "coors_range_xyz", "=", "coors_range_xyz", ",", "\n", "num_point_features", "=", "num_point_features", ",", "\n", "max_num_points_per_voxel", "=", "max_num_points_per_voxel", ",", "\n", "max_num_voxels", "=", "max_num_voxels", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.VoxelGeneratorWrapper.generate": [[44, 61], ["data_processor.VoxelGeneratorWrapper._voxel_generator.generate", "isinstance", "data_processor.VoxelGeneratorWrapper._voxel_generator.point_to_voxel", "tv_voxels.numpy", "tv_coordinates.numpy", "tv_num_points.numpy", "tv.from_numpy"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.VoxelGeneratorWrapper.generate"], ["", "", "def", "generate", "(", "self", ",", "points", ")", ":", "\n", "        ", "if", "self", ".", "spconv_ver", "==", "1", ":", "\n", "            ", "voxel_output", "=", "self", ".", "_voxel_generator", ".", "generate", "(", "points", ")", "\n", "if", "isinstance", "(", "voxel_output", ",", "dict", ")", ":", "\n", "                ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "[", "'voxels'", "]", ",", "voxel_output", "[", "'coordinates'", "]", ",", "voxel_output", "[", "'num_points_per_voxel'", "]", "\n", "", "else", ":", "\n", "                ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "\n", "", "", "else", ":", "\n", "            ", "assert", "tv", "is", "not", "None", ",", "f\"Unexpected error, library: 'cumm' wasn't imported properly.\"", "\n", "voxel_output", "=", "self", ".", "_voxel_generator", ".", "point_to_voxel", "(", "tv", ".", "from_numpy", "(", "points", ")", ")", "\n", "tv_voxels", ",", "tv_coordinates", ",", "tv_num_points", "=", "voxel_output", "\n", "# make copy with numpy(), since numpy_view() will disappear as soon as the generator is deleted", "\n", "voxels", "=", "tv_voxels", ".", "numpy", "(", ")", "\n", "coordinates", "=", "tv_coordinates", ".", "numpy", "(", ")", "\n", "num_points", "=", "tv_num_points", ".", "numpy", "(", ")", "\n", "", "return", "voxels", ",", "coordinates", ",", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.DataProcessor.__init__": [[64, 77], ["data_processor.DataProcessor.data_processor_queue.append", "getattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "processor_configs", ",", "point_cloud_range", ",", "training", ",", "num_point_features", ")", ":", "\n", "        ", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "num_point_features", "=", "num_point_features", "\n", "self", ".", "mode", "=", "'train'", "if", "training", "else", "'test'", "\n", "self", ".", "grid_size", "=", "self", ".", "voxel_size", "=", "None", "\n", "self", ".", "data_processor_queue", "=", "[", "]", "\n", "\n", "self", ".", "voxel_generator", "=", "None", "\n", "\n", "for", "cur_cfg", "in", "processor_configs", ":", "\n", "            ", "cur_processor", "=", "getattr", "(", "self", ",", "cur_cfg", ".", "NAME", ")", "(", "config", "=", "cur_cfg", ")", "\n", "self", ".", "data_processor_queue", ".", "append", "(", "cur_processor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.DataProcessor.mask_points_and_boxes_outside_range": [[78, 92], ["functools.partial", "data_dict.get", "utils.common_utils.mask_points_by_range", "utils.box_utils.mask_boxes_outside_range_numpy", "data_dict.get", "config.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.mask_points_by_range", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.mask_boxes_outside_range_numpy"], ["", "", "def", "mask_points_and_boxes_outside_range", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "mask_points_and_boxes_outside_range", ",", "config", "=", "config", ")", "\n", "\n", "", "if", "data_dict", ".", "get", "(", "'points'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "mask", "=", "common_utils", ".", "mask_points_by_range", "(", "data_dict", "[", "'points'", "]", ",", "self", ".", "point_cloud_range", ")", "\n", "data_dict", "[", "'points'", "]", "=", "data_dict", "[", "'points'", "]", "[", "mask", "]", "\n", "\n", "", "if", "data_dict", ".", "get", "(", "'gt_boxes'", ",", "None", ")", "is", "not", "None", "and", "config", ".", "REMOVE_OUTSIDE_BOXES", "and", "self", ".", "training", ":", "\n", "            ", "mask", "=", "box_utils", ".", "mask_boxes_outside_range_numpy", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", ",", "self", ".", "point_cloud_range", ",", "min_num_corners", "=", "config", ".", "get", "(", "'min_num_corners'", ",", "1", ")", "\n", ")", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "mask", "]", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.DataProcessor.shuffle_points": [[93, 104], ["functools.partial", "numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle_points", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "shuffle_points", ",", "config", "=", "config", ")", "\n", "\n", "", "if", "config", ".", "SHUFFLE_ENABLED", "[", "self", ".", "mode", "]", ":", "\n", "            ", "points", "=", "data_dict", "[", "'points'", "]", "\n", "shuffle_idx", "=", "np", ".", "random", ".", "permutation", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "points", "=", "points", "[", "shuffle_idx", "]", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.DataProcessor.transform_points_to_voxels_placeholder": [[105, 114], ["numpy.round().astype", "functools.partial", "numpy.array", "numpy.round"], "methods", ["None"], ["", "def", "transform_points_to_voxels_placeholder", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "# just calculate grid size", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "grid_size", "=", "(", "self", ".", "point_cloud_range", "[", "3", ":", "6", "]", "-", "self", ".", "point_cloud_range", "[", "0", ":", "3", "]", ")", "/", "np", ".", "array", "(", "config", ".", "VOXEL_SIZE", ")", "\n", "self", ".", "grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "voxel_size", "=", "config", ".", "VOXEL_SIZE", "\n", "return", "partial", "(", "self", ".", "transform_points_to_voxels_placeholder", ",", "config", "=", "config", ")", "\n", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.DataProcessor.transform_points_to_voxels": [[115, 144], ["data_processor.DataProcessor.voxel_generator.generate", "numpy.round().astype", "functools.partial", "data_processor.VoxelGeneratorWrapper", "numpy.array", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.VoxelGeneratorWrapper.generate"], ["", "def", "transform_points_to_voxels", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "grid_size", "=", "(", "self", ".", "point_cloud_range", "[", "3", ":", "6", "]", "-", "self", ".", "point_cloud_range", "[", "0", ":", "3", "]", ")", "/", "np", ".", "array", "(", "config", ".", "VOXEL_SIZE", ")", "\n", "self", ".", "grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "voxel_size", "=", "config", ".", "VOXEL_SIZE", "\n", "# just bind the config, we will create the VoxelGeneratorWrapper later,", "\n", "# to avoid pickling issues in multiprocess spawn", "\n", "return", "partial", "(", "self", ".", "transform_points_to_voxels", ",", "config", "=", "config", ")", "\n", "\n", "", "if", "self", ".", "voxel_generator", "is", "None", ":", "\n", "            ", "self", ".", "voxel_generator", "=", "VoxelGeneratorWrapper", "(", "\n", "vsize_xyz", "=", "config", ".", "VOXEL_SIZE", ",", "\n", "coors_range_xyz", "=", "self", ".", "point_cloud_range", ",", "\n", "num_point_features", "=", "self", ".", "num_point_features", ",", "\n", "max_num_points_per_voxel", "=", "config", ".", "MAX_POINTS_PER_VOXEL", ",", "\n", "max_num_voxels", "=", "config", ".", "MAX_NUMBER_OF_VOXELS", "[", "self", ".", "mode", "]", ",", "\n", ")", "\n", "\n", "", "points", "=", "data_dict", "[", "'points'", "]", "\n", "voxel_output", "=", "self", ".", "voxel_generator", ".", "generate", "(", "points", ")", "\n", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "\n", "\n", "if", "not", "data_dict", "[", "'use_lead_xyz'", "]", ":", "\n", "            ", "voxels", "=", "voxels", "[", "...", ",", "3", ":", "]", "# remove xyz in voxels(N, 3)", "\n", "\n", "", "data_dict", "[", "'voxels'", "]", "=", "voxels", "\n", "data_dict", "[", "'voxel_coords'", "]", "=", "coordinates", "\n", "data_dict", "[", "'voxel_num_points'", "]", "=", "num_points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.DataProcessor.sample_points": [[145, 176], ["functools.partial", "len", "numpy.linalg.norm", "numpy.random.shuffle", "numpy.arange", "numpy.random.shuffle", "numpy.where", "numpy.where", "len", "numpy.random.choice", "numpy.arange", "numpy.random.choice", "len", "len", "numpy.random.choice", "numpy.concatenate", "numpy.concatenate", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "sample_points", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "sample_points", ",", "config", "=", "config", ")", "\n", "\n", "", "num_points", "=", "config", ".", "NUM_POINTS", "[", "self", ".", "mode", "]", "\n", "if", "num_points", "==", "-", "1", ":", "\n", "            ", "return", "data_dict", "\n", "\n", "", "points", "=", "data_dict", "[", "'points'", "]", "\n", "if", "num_points", "<", "len", "(", "points", ")", ":", "\n", "            ", "pts_depth", "=", "np", ".", "linalg", ".", "norm", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "1", ")", "\n", "pts_near_flag", "=", "pts_depth", "<", "40.0", "\n", "far_idxs_choice", "=", "np", ".", "where", "(", "pts_near_flag", "==", "0", ")", "[", "0", "]", "\n", "near_idxs", "=", "np", ".", "where", "(", "pts_near_flag", "==", "1", ")", "[", "0", "]", "\n", "choice", "=", "[", "]", "\n", "if", "num_points", ">", "len", "(", "far_idxs_choice", ")", ":", "\n", "                ", "near_idxs_choice", "=", "np", ".", "random", ".", "choice", "(", "near_idxs", ",", "num_points", "-", "len", "(", "far_idxs_choice", ")", ",", "replace", "=", "False", ")", "\n", "choice", "=", "np", ".", "concatenate", "(", "(", "near_idxs_choice", ",", "far_idxs_choice", ")", ",", "axis", "=", "0", ")", "if", "len", "(", "far_idxs_choice", ")", ">", "0", "else", "near_idxs_choice", "\n", "", "else", ":", "\n", "                ", "choice", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "points", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "choice", ",", "num_points", ",", "replace", "=", "False", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "choice", ")", "\n", "", "else", ":", "\n", "            ", "choice", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "points", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "num_points", ">", "len", "(", "points", ")", ":", "\n", "                ", "extra_choice", "=", "np", ".", "random", ".", "choice", "(", "choice", ",", "num_points", "-", "len", "(", "points", ")", ",", "replace", "=", "False", ")", "\n", "choice", "=", "np", ".", "concatenate", "(", "(", "choice", ",", "extra_choice", ")", ",", "axis", "=", "0", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "choice", ")", "\n", "", "data_dict", "[", "'points'", "]", "=", "points", "[", "choice", "]", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.DataProcessor.calculate_grid_size": [[177, 184], ["numpy.round().astype", "functools.partial", "numpy.array", "numpy.round"], "methods", ["None"], ["", "def", "calculate_grid_size", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "grid_size", "=", "(", "self", ".", "point_cloud_range", "[", "3", ":", "6", "]", "-", "self", ".", "point_cloud_range", "[", "0", ":", "3", "]", ")", "/", "np", ".", "array", "(", "config", ".", "VOXEL_SIZE", ")", "\n", "self", ".", "grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "voxel_size", "=", "config", ".", "VOXEL_SIZE", "\n", "return", "partial", "(", "self", ".", "calculate_grid_size", ",", "config", "=", "config", ")", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.DataProcessor.downsample_depth_map": [[185, 195], ["skimage.transform.downscale_local_mean", "functools.partial"], "methods", ["None"], ["", "def", "downsample_depth_map", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "self", ".", "depth_downsample_factor", "=", "config", ".", "DOWNSAMPLE_FACTOR", "\n", "return", "partial", "(", "self", ".", "downsample_depth_map", ",", "config", "=", "config", ")", "\n", "\n", "", "data_dict", "[", "'depth_maps'", "]", "=", "transform", ".", "downscale_local_mean", "(", "\n", "image", "=", "data_dict", "[", "'depth_maps'", "]", ",", "\n", "factors", "=", "(", "self", ".", "depth_downsample_factor", ",", "self", ".", "depth_downsample_factor", ")", "\n", ")", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.data_processor.DataProcessor.forward": [[196, 212], ["cur_processor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                points: (N, 3 + C_in)\n                gt_boxes: optional, (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n                gt_names: optional, (N), string\n                ...\n\n        Returns:\n        \"\"\"", "\n", "\n", "for", "cur_processor", "in", "self", ".", "data_processor_queue", ":", "\n", "            ", "data_dict", "=", "cur_processor", "(", "data_dict", "=", "data_dict", ")", "\n", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.point_feature_encoder.PointFeatureEncoder.__init__": [[5, 12], ["object.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "point_cloud_range", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "point_encoding_config", "=", "config", "\n", "assert", "list", "(", "self", ".", "point_encoding_config", ".", "src_feature_list", "[", "0", ":", "3", "]", ")", "==", "[", "'x'", ",", "'y'", ",", "'z'", "]", "\n", "self", ".", "used_feature_list", "=", "self", ".", "point_encoding_config", ".", "used_feature_list", "\n", "self", ".", "src_feature_list", "=", "self", ".", "point_encoding_config", ".", "src_feature_list", "\n", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.point_feature_encoder.PointFeatureEncoder.num_point_features": [[13, 16], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_point_features", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "point_encoding_config", ".", "encoding_type", ")", "(", "points", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.point_feature_encoder.PointFeatureEncoder.forward": [[17, 42], ["getattr", "point_feature_encoder.PointFeatureEncoder.point_encoding_config.get", "point_feature_encoder.PointFeatureEncoder.src_feature_list.index", "numpy.round", "sorted", "numpy.unique", "min", "len", "numpy.unique"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                points: (N, 3 + C_in)\n                ...\n        Returns:\n            data_dict:\n                points: (N, 3 + C_out),\n                use_lead_xyz: whether to use xyz as point-wise features\n                ...\n        \"\"\"", "\n", "data_dict", "[", "'points'", "]", ",", "use_lead_xyz", "=", "getattr", "(", "self", ",", "self", ".", "point_encoding_config", ".", "encoding_type", ")", "(", "\n", "data_dict", "[", "'points'", "]", "\n", ")", "\n", "data_dict", "[", "'use_lead_xyz'", "]", "=", "use_lead_xyz", "\n", "\n", "if", "self", ".", "point_encoding_config", ".", "get", "(", "'filter_sweeps'", ",", "False", ")", "and", "'timestamp'", "in", "self", ".", "src_feature_list", ":", "\n", "            ", "max_sweeps", "=", "self", ".", "point_encoding_config", ".", "max_sweeps", "\n", "idx", "=", "self", ".", "src_feature_list", ".", "index", "(", "'timestamp'", ")", "\n", "dt", "=", "np", ".", "round", "(", "data_dict", "[", "'points'", "]", "[", ":", ",", "idx", "]", ",", "2", ")", "\n", "max_dt", "=", "sorted", "(", "np", ".", "unique", "(", "dt", ")", ")", "[", "min", "(", "len", "(", "np", ".", "unique", "(", "dt", ")", ")", "-", "1", ",", "max_sweeps", "-", "1", ")", "]", "\n", "data_dict", "[", "'points'", "]", "=", "data_dict", "[", "'points'", "]", "[", "dt", "<=", "max_dt", "]", "\n", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.processor.point_feature_encoder.PointFeatureEncoder.absolute_coordinates_encoding": [[43, 57], ["numpy.concatenate", "len", "point_feature_encoder.PointFeatureEncoder.src_feature_list.index", "point_feature_list.append"], "methods", ["None"], ["", "def", "absolute_coordinates_encoding", "(", "self", ",", "points", "=", "None", ")", ":", "\n", "        ", "if", "points", "is", "None", ":", "\n", "            ", "num_output_features", "=", "len", "(", "self", ".", "used_feature_list", ")", "\n", "return", "num_output_features", "\n", "\n", "", "point_feature_list", "=", "[", "points", "[", ":", ",", "0", ":", "3", "]", "]", "\n", "for", "x", "in", "self", ".", "used_feature_list", ":", "\n", "            ", "if", "x", "in", "[", "'x'", ",", "'y'", ",", "'z'", "]", ":", "\n", "                ", "continue", "\n", "", "idx", "=", "self", ".", "src_feature_list", ".", "index", "(", "x", ")", "\n", "point_feature_list", ".", "append", "(", "points", "[", ":", ",", "idx", ":", "idx", "+", "1", "]", ")", "\n", "", "point_features", "=", "np", ".", "concatenate", "(", "point_feature_list", ",", "axis", "=", "1", ")", "\n", "\n", "return", "point_features", ",", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.get_available_scenes": [[157, 183], ["print", "print", "len", "nusc.get", "nusc.get", "nusc.get", "available_scenes.append", "len", "nusc.get_sample_data", "pathlib.Path().exists", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.get_sample_data"], ["def", "get_available_scenes", "(", "nusc", ")", ":", "\n", "    ", "available_scenes", "=", "[", "]", "\n", "print", "(", "'total scene num:'", ",", "len", "(", "nusc", ".", "scene", ")", ")", "\n", "for", "scene", "in", "nusc", ".", "scene", ":", "\n", "        ", "scene_token", "=", "scene", "[", "'token'", "]", "\n", "scene_rec", "=", "nusc", ".", "get", "(", "'scene'", ",", "scene_token", ")", "\n", "sample_rec", "=", "nusc", ".", "get", "(", "'sample'", ",", "scene_rec", "[", "'first_sample_token'", "]", ")", "\n", "sd_rec", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "sample_rec", "[", "'data'", "]", "[", "'LIDAR_TOP'", "]", ")", "\n", "has_more_frames", "=", "True", "\n", "scene_not_exist", "=", "False", "\n", "while", "has_more_frames", ":", "\n", "            ", "lidar_path", ",", "boxes", ",", "_", "=", "nusc", ".", "get_sample_data", "(", "sd_rec", "[", "'token'", "]", ")", "\n", "if", "not", "Path", "(", "lidar_path", ")", ".", "exists", "(", ")", ":", "\n", "                ", "scene_not_exist", "=", "True", "\n", "break", "\n", "", "else", ":", "\n", "                ", "break", "\n", "# if not sd_rec['next'] == '':", "\n", "#     sd_rec = nusc.get('sample_data', sd_rec['next'])", "\n", "# else:", "\n", "#     has_more_frames = False", "\n", "", "", "if", "scene_not_exist", ":", "\n", "            ", "continue", "\n", "", "available_scenes", ".", "append", "(", "scene", ")", "\n", "", "print", "(", "'exist scene num:'", ",", "len", "(", "available_scenes", ")", ")", "\n", "return", "available_scenes", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.get_sample_data": [[185, 232], ["nusc.get", "nusc.get", "nusc.get", "nusc.get", "nusc.get_sample_data_path", "numpy.array", "list", "nusc.get_boxes", "nusc.box_velocity", "box.translate", "box.rotate", "box.translate", "box.rotate", "box_list.append", "map", "numpy.array", "pyquaternion.Quaternion", "numpy.array", "pyquaternion.Quaternion"], "function", ["None"], ["", "def", "get_sample_data", "(", "nusc", ",", "sample_data_token", ",", "selected_anntokens", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Returns the data path as well as all annotations related to that sample_data.\n    Note that the boxes are transformed into the current sensor's coordinate frame.\n    Args:\n        nusc:\n        sample_data_token: Sample_data token.\n        selected_anntokens: If provided only return the selected annotation.\n\n    Returns:\n\n    \"\"\"", "\n", "# Retrieve sensor & pose records", "\n", "sd_record", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "sample_data_token", ")", "\n", "cs_record", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "sd_record", "[", "'calibrated_sensor_token'", "]", ")", "\n", "sensor_record", "=", "nusc", ".", "get", "(", "'sensor'", ",", "cs_record", "[", "'sensor_token'", "]", ")", "\n", "pose_record", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "sd_record", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "data_path", "=", "nusc", ".", "get_sample_data_path", "(", "sample_data_token", ")", "\n", "\n", "if", "sensor_record", "[", "'modality'", "]", "==", "'camera'", ":", "\n", "        ", "cam_intrinsic", "=", "np", ".", "array", "(", "cs_record", "[", "'camera_intrinsic'", "]", ")", "\n", "imsize", "=", "(", "sd_record", "[", "'width'", "]", ",", "sd_record", "[", "'height'", "]", ")", "\n", "", "else", ":", "\n", "        ", "cam_intrinsic", "=", "imsize", "=", "None", "\n", "\n", "# Retrieve all sample annotations and map to sensor coordinate system.", "\n", "", "if", "selected_anntokens", "is", "not", "None", ":", "\n", "        ", "boxes", "=", "list", "(", "map", "(", "nusc", ".", "get_box", ",", "selected_anntokens", ")", ")", "\n", "", "else", ":", "\n", "        ", "boxes", "=", "nusc", ".", "get_boxes", "(", "sample_data_token", ")", "\n", "\n", "# Make list of Box objects including coord system transforms.", "\n", "", "box_list", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "        ", "box", ".", "velocity", "=", "nusc", ".", "box_velocity", "(", "box", ".", "token", ")", "\n", "# Move box to ego vehicle coord system", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "pose_record", "[", "'translation'", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "pose_record", "[", "'rotation'", "]", ")", ".", "inverse", ")", "\n", "\n", "#  Move box to sensor coord system", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "'rotation'", "]", ")", ".", "inverse", ")", "\n", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "\n", "", "return", "data_path", ",", "box_list", ",", "cam_intrinsic", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.quaternion_yaw": [[234, 250], ["numpy.dot", "numpy.arctan2", "numpy.array"], "function", ["None"], ["", "def", "quaternion_yaw", "(", "q", ":", "Quaternion", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Calculate the yaw angle from a quaternion.\n    Note that this only works for a quaternion that represents a box in lidar or global coordinate frame.\n    It does not work for a box in the camera frame.\n    :param q: Quaternion of interest.\n    :return: Yaw angle in radians.\n    \"\"\"", "\n", "\n", "# Project into xy plane.", "\n", "v", "=", "np", ".", "dot", "(", "q", ".", "rotation_matrix", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ")", "\n", "\n", "# Measure yaw using arctan.", "\n", "yaw", "=", "np", ".", "arctan2", "(", "v", "[", "1", "]", ",", "v", "[", "0", "]", ")", "\n", "\n", "return", "yaw", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.fill_trainval_infos": [[252, 381], ["tqdm.tqdm", "enumerate", "tqdm.tqdm.close", "tqdm.tqdm.update", "nusc.get", "nusc.get", "nusc.get", "nuscenes_utils.get_sample_data", "nusc.get_sample_data", "nuscenes.utils.geometry_utils.transform_matrix", "nuscenes.utils.geometry_utils.transform_matrix", "nusc.get", "len", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "pathlib.Path().relative_to().__str__", "pathlib.Path().relative_to().__str__", "len", "len", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array", "numpy.concatenate", "train_nusc_infos.append", "val_nusc_infos.append", "nusc.get", "nusc.get", "nuscenes.utils.geometry_utils.transform_matrix", "nusc.get", "nuscenes.utils.geometry_utils.transform_matrix", "functools.reduce", "nusc.get_sample_data_path", "sweeps.append", "len", "nusc.get", "numpy.array().reshape", "len", "len", "len", "numpy.array", "pathlib.Path().relative_to", "pathlib.Path().relative_to", "len", "sweeps.append", "sweeps.append", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "pathlib.Path().relative_to().__str__", "numpy.array", "numpy.array", "numpy.array", "pathlib.Path().relative_to().__str__", "numpy.array", "pathlib.Path", "pathlib.Path", "pathlib.Path().relative_to", "nuscenes_utils.quaternion_yaw", "pathlib.Path().relative_to", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.get_sample_data", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.get_sample_data", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.quaternion_yaw"], ["", "def", "fill_trainval_infos", "(", "data_path", ",", "nusc", ",", "train_scenes", ",", "val_scenes", ",", "test", "=", "False", ",", "max_sweeps", "=", "10", ")", ":", "\n", "    ", "train_nusc_infos", "=", "[", "]", "\n", "val_nusc_infos", "=", "[", "]", "\n", "progress_bar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "nusc", ".", "sample", ")", ",", "desc", "=", "'create_info'", ",", "dynamic_ncols", "=", "True", ")", "\n", "\n", "ref_chan", "=", "'LIDAR_TOP'", "# The radar channel from which we track back n sweeps to aggregate the point cloud.", "\n", "chan", "=", "'LIDAR_TOP'", "# The reference channel of the current sample_rec that the point clouds are mapped to.", "\n", "\n", "for", "index", ",", "sample", "in", "enumerate", "(", "nusc", ".", "sample", ")", ":", "\n", "        ", "progress_bar", ".", "update", "(", ")", "\n", "\n", "ref_sd_token", "=", "sample", "[", "'data'", "]", "[", "ref_chan", "]", "\n", "ref_sd_rec", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "ref_sd_token", ")", "\n", "ref_cs_rec", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "ref_sd_rec", "[", "'calibrated_sensor_token'", "]", ")", "\n", "ref_pose_rec", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "ref_sd_rec", "[", "'ego_pose_token'", "]", ")", "\n", "ref_time", "=", "1e-6", "*", "ref_sd_rec", "[", "'timestamp'", "]", "\n", "\n", "ref_lidar_path", ",", "ref_boxes", ",", "_", "=", "get_sample_data", "(", "nusc", ",", "ref_sd_token", ")", "\n", "\n", "ref_cam_front_token", "=", "sample", "[", "'data'", "]", "[", "'CAM_FRONT'", "]", "\n", "ref_cam_path", ",", "_", ",", "ref_cam_intrinsic", "=", "nusc", ".", "get_sample_data", "(", "ref_cam_front_token", ")", "\n", "\n", "# Homogeneous transform from ego car frame to reference frame", "\n", "ref_from_car", "=", "transform_matrix", "(", "\n", "ref_cs_rec", "[", "'translation'", "]", ",", "Quaternion", "(", "ref_cs_rec", "[", "'rotation'", "]", ")", ",", "inverse", "=", "True", "\n", ")", "\n", "\n", "# Homogeneous transformation matrix from global to _current_ ego car frame", "\n", "car_from_global", "=", "transform_matrix", "(", "\n", "ref_pose_rec", "[", "'translation'", "]", ",", "Quaternion", "(", "ref_pose_rec", "[", "'rotation'", "]", ")", ",", "inverse", "=", "True", ",", "\n", ")", "\n", "\n", "info", "=", "{", "\n", "'lidar_path'", ":", "Path", "(", "ref_lidar_path", ")", ".", "relative_to", "(", "data_path", ")", ".", "__str__", "(", ")", ",", "\n", "'cam_front_path'", ":", "Path", "(", "ref_cam_path", ")", ".", "relative_to", "(", "data_path", ")", ".", "__str__", "(", ")", ",", "\n", "'cam_intrinsic'", ":", "ref_cam_intrinsic", ",", "\n", "'token'", ":", "sample", "[", "'token'", "]", ",", "\n", "'sweeps'", ":", "[", "]", ",", "\n", "'ref_from_car'", ":", "ref_from_car", ",", "\n", "'car_from_global'", ":", "car_from_global", ",", "\n", "'timestamp'", ":", "ref_time", ",", "\n", "}", "\n", "\n", "sample_data_token", "=", "sample", "[", "'data'", "]", "[", "chan", "]", "\n", "curr_sd_rec", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "sample_data_token", ")", "\n", "sweeps", "=", "[", "]", "\n", "while", "len", "(", "sweeps", ")", "<", "max_sweeps", "-", "1", ":", "\n", "            ", "if", "curr_sd_rec", "[", "'prev'", "]", "==", "''", ":", "\n", "                ", "if", "len", "(", "sweeps", ")", "==", "0", ":", "\n", "                    ", "sweep", "=", "{", "\n", "'lidar_path'", ":", "Path", "(", "ref_lidar_path", ")", ".", "relative_to", "(", "data_path", ")", ".", "__str__", "(", ")", ",", "\n", "'sample_data_token'", ":", "curr_sd_rec", "[", "'token'", "]", ",", "\n", "'transform_matrix'", ":", "None", ",", "\n", "'time_lag'", ":", "curr_sd_rec", "[", "'timestamp'", "]", "*", "0", ",", "\n", "}", "\n", "sweeps", ".", "append", "(", "sweep", ")", "\n", "", "else", ":", "\n", "                    ", "sweeps", ".", "append", "(", "sweeps", "[", "-", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "curr_sd_rec", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "curr_sd_rec", "[", "'prev'", "]", ")", "\n", "\n", "# Get past pose", "\n", "current_pose_rec", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "curr_sd_rec", "[", "'ego_pose_token'", "]", ")", "\n", "global_from_car", "=", "transform_matrix", "(", "\n", "current_pose_rec", "[", "'translation'", "]", ",", "Quaternion", "(", "current_pose_rec", "[", "'rotation'", "]", ")", ",", "inverse", "=", "False", ",", "\n", ")", "\n", "\n", "# Homogeneous transformation matrix from sensor coordinate frame to ego car frame.", "\n", "current_cs_rec", "=", "nusc", ".", "get", "(", "\n", "'calibrated_sensor'", ",", "curr_sd_rec", "[", "'calibrated_sensor_token'", "]", "\n", ")", "\n", "car_from_current", "=", "transform_matrix", "(", "\n", "current_cs_rec", "[", "'translation'", "]", ",", "Quaternion", "(", "current_cs_rec", "[", "'rotation'", "]", ")", ",", "inverse", "=", "False", ",", "\n", ")", "\n", "\n", "tm", "=", "reduce", "(", "np", ".", "dot", ",", "[", "ref_from_car", ",", "car_from_global", ",", "global_from_car", ",", "car_from_current", "]", ")", "\n", "\n", "lidar_path", "=", "nusc", ".", "get_sample_data_path", "(", "curr_sd_rec", "[", "'token'", "]", ")", "\n", "\n", "time_lag", "=", "ref_time", "-", "1e-6", "*", "curr_sd_rec", "[", "'timestamp'", "]", "\n", "\n", "sweep", "=", "{", "\n", "'lidar_path'", ":", "Path", "(", "lidar_path", ")", ".", "relative_to", "(", "data_path", ")", ".", "__str__", "(", ")", ",", "\n", "'sample_data_token'", ":", "curr_sd_rec", "[", "'token'", "]", ",", "\n", "'transform_matrix'", ":", "tm", ",", "\n", "'global_from_car'", ":", "global_from_car", ",", "\n", "'car_from_current'", ":", "car_from_current", ",", "\n", "'time_lag'", ":", "time_lag", ",", "\n", "}", "\n", "sweeps", ".", "append", "(", "sweep", ")", "\n", "\n", "", "", "info", "[", "'sweeps'", "]", "=", "sweeps", "\n", "\n", "assert", "len", "(", "info", "[", "'sweeps'", "]", ")", "==", "max_sweeps", "-", "1", ",", "f\"sweep {curr_sd_rec['token']} only has {len(info['sweeps'])} sweeps, \"", "f\"you should duplicate to sweep num {max_sweeps - 1}\"", "\n", "\n", "if", "not", "test", ":", "\n", "            ", "annotations", "=", "[", "nusc", ".", "get", "(", "'sample_annotation'", ",", "token", ")", "for", "token", "in", "sample", "[", "'anns'", "]", "]", "\n", "\n", "# the filtering gives 0.5~1 map improvement", "\n", "num_lidar_pts", "=", "np", ".", "array", "(", "[", "anno", "[", "'num_lidar_pts'", "]", "for", "anno", "in", "annotations", "]", ")", "\n", "num_radar_pts", "=", "np", ".", "array", "(", "[", "anno", "[", "'num_radar_pts'", "]", "for", "anno", "in", "annotations", "]", ")", "\n", "mask", "=", "(", "num_lidar_pts", "+", "num_radar_pts", ">", "0", ")", "\n", "\n", "locs", "=", "np", ".", "array", "(", "[", "b", ".", "center", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "dims", "=", "np", ".", "array", "(", "[", "b", ".", "wlh", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "# wlh == > dxdydz (lwh)", "\n", "velocity", "=", "np", ".", "array", "(", "[", "b", ".", "velocity", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "rots", "=", "np", ".", "array", "(", "[", "quaternion_yaw", "(", "b", ".", "orientation", ")", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "names", "=", "np", ".", "array", "(", "[", "b", ".", "name", "for", "b", "in", "ref_boxes", "]", ")", "\n", "tokens", "=", "np", ".", "array", "(", "[", "b", ".", "token", "for", "b", "in", "ref_boxes", "]", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "locs", ",", "dims", ",", "rots", ",", "velocity", "[", ":", ",", ":", "2", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "assert", "len", "(", "annotations", ")", "==", "len", "(", "gt_boxes", ")", "==", "len", "(", "velocity", ")", "\n", "\n", "info", "[", "'gt_boxes'", "]", "=", "gt_boxes", "[", "mask", ",", ":", "]", "\n", "info", "[", "'gt_boxes_velocity'", "]", "=", "velocity", "[", "mask", ",", ":", "]", "\n", "info", "[", "'gt_names'", "]", "=", "np", ".", "array", "(", "[", "map_name_from_general_to_detection", "[", "name", "]", "for", "name", "in", "names", "]", ")", "[", "mask", "]", "\n", "info", "[", "'gt_boxes_token'", "]", "=", "tokens", "[", "mask", "]", "\n", "info", "[", "'num_lidar_pts'", "]", "=", "num_lidar_pts", "[", "mask", "]", "\n", "info", "[", "'num_radar_pts'", "]", "=", "num_radar_pts", "[", "mask", "]", "\n", "\n", "", "if", "sample", "[", "'scene_token'", "]", "in", "train_scenes", ":", "\n", "            ", "train_nusc_infos", ".", "append", "(", "info", ")", "\n", "", "else", ":", "\n", "            ", "val_nusc_infos", ".", "append", "(", "info", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "return", "train_nusc_infos", ",", "val_nusc_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.boxes_lidar_to_nusenes": [[383, 399], ["range", "pyquaternion.Quaternion", "nuscenes.utils.data_classes.Box", "box_list.append"], "function", ["None"], ["", "def", "boxes_lidar_to_nusenes", "(", "det_info", ")", ":", "\n", "    ", "boxes3d", "=", "det_info", "[", "'boxes_lidar'", "]", "\n", "scores", "=", "det_info", "[", "'score'", "]", "\n", "labels", "=", "det_info", "[", "'pred_labels'", "]", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "boxes3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "quat", "=", "Quaternion", "(", "axis", "=", "[", "0", ",", "0", ",", "1", "]", ",", "radians", "=", "boxes3d", "[", "k", ",", "6", "]", ")", "\n", "velocity", "=", "(", "*", "boxes3d", "[", "k", ",", "7", ":", "9", "]", ",", "0.0", ")", "if", "boxes3d", ".", "shape", "[", "1", "]", "==", "9", "else", "(", "0.0", ",", "0.0", ",", "0.0", ")", "\n", "box", "=", "Box", "(", "\n", "boxes3d", "[", "k", ",", ":", "3", "]", ",", "\n", "boxes3d", "[", "k", ",", "[", "4", ",", "3", ",", "5", "]", "]", ",", "# wlh", "\n", "quat", ",", "label", "=", "labels", "[", "k", "]", ",", "score", "=", "scores", "[", "k", "]", ",", "velocity", "=", "velocity", ",", "\n", ")", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "", "return", "box_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.lidar_nusc_box_to_global": [[401, 421], ["nusc.get", "nusc.get", "nusc.get", "nusc.get", "nusc.get", "nusc.get_sample_data_path", "box.rotate", "box.translate", "box.rotate", "box.translate", "box_list.append", "pyquaternion.Quaternion", "numpy.array", "pyquaternion.Quaternion", "numpy.array"], "function", ["None"], ["", "def", "lidar_nusc_box_to_global", "(", "nusc", ",", "boxes", ",", "sample_token", ")", ":", "\n", "    ", "s_record", "=", "nusc", ".", "get", "(", "'sample'", ",", "sample_token", ")", "\n", "sample_data_token", "=", "s_record", "[", "'data'", "]", "[", "'LIDAR_TOP'", "]", "\n", "\n", "sd_record", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "sample_data_token", ")", "\n", "cs_record", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "sd_record", "[", "'calibrated_sensor_token'", "]", ")", "\n", "sensor_record", "=", "nusc", ".", "get", "(", "'sensor'", ",", "cs_record", "[", "'sensor_token'", "]", ")", "\n", "pose_record", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "sd_record", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "data_path", "=", "nusc", ".", "get_sample_data_path", "(", "sample_data_token", ")", "\n", "box_list", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "# Move box to ego vehicle coord system", "\n", "        ", "box", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "'rotation'", "]", ")", ")", "\n", "box", ".", "translate", "(", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ")", "\n", "# Move box to global coord system", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "pose_record", "[", "'rotation'", "]", ")", ")", "\n", "box", ".", "translate", "(", "np", ".", "array", "(", "pose_record", "[", "'translation'", "]", ")", ")", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "", "return", "box_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.transform_det_annos_to_nusc_annos": [[423, 469], ["nuscenes_utils.boxes_lidar_to_nusenes", "nuscenes_utils.lidar_nusc_box_to_global", "enumerate", "nusc_annos[].update", "annos.append", "numpy.sqrt", "box.center.tolist", "box.wlh.tolist", "box.orientation.elements.tolist", "box.velocity[].tolist", "max", "cls_attr_dist[].items", "operator.itemgetter"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.boxes_lidar_to_nusenes", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.lidar_nusc_box_to_global", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "transform_det_annos_to_nusc_annos", "(", "det_annos", ",", "nusc", ")", ":", "\n", "    ", "nusc_annos", "=", "{", "\n", "'results'", ":", "{", "}", ",", "\n", "'meta'", ":", "None", ",", "\n", "}", "\n", "\n", "for", "det", "in", "det_annos", ":", "\n", "        ", "annos", "=", "[", "]", "\n", "box_list", "=", "boxes_lidar_to_nusenes", "(", "det", ")", "\n", "box_list", "=", "lidar_nusc_box_to_global", "(", "\n", "nusc", "=", "nusc", ",", "boxes", "=", "box_list", ",", "sample_token", "=", "det", "[", "'metadata'", "]", "[", "'token'", "]", "\n", ")", "\n", "\n", "for", "k", ",", "box", "in", "enumerate", "(", "box_list", ")", ":", "\n", "            ", "name", "=", "det", "[", "'name'", "]", "[", "k", "]", "\n", "if", "np", ".", "sqrt", "(", "box", ".", "velocity", "[", "0", "]", "**", "2", "+", "box", ".", "velocity", "[", "1", "]", "**", "2", ")", ">", "0.2", ":", "\n", "                ", "if", "name", "in", "[", "'car'", ",", "'construction_vehicle'", ",", "'bus'", ",", "'truck'", ",", "'trailer'", "]", ":", "\n", "                    ", "attr", "=", "'vehicle.moving'", "\n", "", "elif", "name", "in", "[", "'bicycle'", ",", "'motorcycle'", "]", ":", "\n", "                    ", "attr", "=", "'cycle.with_rider'", "\n", "", "else", ":", "\n", "                    ", "attr", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "if", "name", "in", "[", "'pedestrian'", "]", ":", "\n", "                    ", "attr", "=", "'pedestrian.standing'", "\n", "", "elif", "name", "in", "[", "'bus'", "]", ":", "\n", "                    ", "attr", "=", "'vehicle.stopped'", "\n", "", "else", ":", "\n", "                    ", "attr", "=", "None", "\n", "", "", "attr", "=", "attr", "if", "attr", "is", "not", "None", "else", "max", "(", "\n", "cls_attr_dist", "[", "name", "]", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "[", "0", "]", "\n", "nusc_anno", "=", "{", "\n", "'sample_token'", ":", "det", "[", "'metadata'", "]", "[", "'token'", "]", ",", "\n", "'translation'", ":", "box", ".", "center", ".", "tolist", "(", ")", ",", "\n", "'size'", ":", "box", ".", "wlh", ".", "tolist", "(", ")", ",", "\n", "'rotation'", ":", "box", ".", "orientation", ".", "elements", ".", "tolist", "(", ")", ",", "\n", "'velocity'", ":", "box", ".", "velocity", "[", ":", "2", "]", ".", "tolist", "(", ")", ",", "\n", "'detection_name'", ":", "name", ",", "\n", "'detection_score'", ":", "box", ".", "score", ",", "\n", "'attribute_name'", ":", "attr", "\n", "}", "\n", "annos", ".", "append", "(", "nusc_anno", ")", "\n", "\n", "", "nusc_annos", "[", "'results'", "]", ".", "update", "(", "{", "det", "[", "\"metadata\"", "]", "[", "\"token\"", "]", ":", "annos", "}", ")", "\n", "\n", "", "return", "nusc_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.format_nuscene_results": [[471, 501], ["metrics[].items", "details.update", "list", "list", "list", "[].values", "[].values", "[].keys", "x.split", "list", "[].keys"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "format_nuscene_results", "(", "metrics", ",", "class_names", ",", "version", "=", "'default'", ")", ":", "\n", "    ", "result", "=", "'----------------Nuscene %s results-----------------\\n'", "%", "version", "\n", "for", "name", "in", "class_names", ":", "\n", "        ", "threshs", "=", "', '", ".", "join", "(", "list", "(", "metrics", "[", "'label_aps'", "]", "[", "name", "]", ".", "keys", "(", ")", ")", ")", "\n", "ap_list", "=", "list", "(", "metrics", "[", "'label_aps'", "]", "[", "name", "]", ".", "values", "(", ")", ")", "\n", "\n", "err_name", "=", "', '", ".", "join", "(", "[", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", "for", "x", "in", "list", "(", "metrics", "[", "'label_tp_errors'", "]", "[", "name", "]", ".", "keys", "(", ")", ")", "]", ")", "\n", "error_list", "=", "list", "(", "metrics", "[", "'label_tp_errors'", "]", "[", "name", "]", ".", "values", "(", ")", ")", "\n", "\n", "result", "+=", "f'***{name} error@{err_name} | AP@{threshs}\\n'", "\n", "result", "+=", "', '", ".", "join", "(", "[", "'%.2f'", "%", "x", "for", "x", "in", "error_list", "]", ")", "+", "' | '", "\n", "result", "+=", "', '", ".", "join", "(", "[", "'%.2f'", "%", "(", "x", "*", "100", ")", "for", "x", "in", "ap_list", "]", ")", "\n", "result", "+=", "f\" | mean AP: {metrics['mean_dist_aps'][name]}\"", "\n", "result", "+=", "'\\n'", "\n", "\n", "", "result", "+=", "'--------------average performance-------------\\n'", "\n", "details", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "metrics", "[", "'tp_errors'", "]", ".", "items", "(", ")", ":", "\n", "        ", "result", "+=", "'%s:\\t %.4f\\n'", "%", "(", "key", ",", "val", ")", "\n", "details", "[", "key", "]", "=", "val", "\n", "\n", "", "result", "+=", "'mAP:\\t %.4f\\n'", "%", "metrics", "[", "'mean_ap'", "]", "\n", "result", "+=", "'NDS:\\t %.4f\\n'", "%", "metrics", "[", "'nd_score'", "]", "\n", "\n", "details", ".", "update", "(", "{", "\n", "'mAP'", ":", "metrics", "[", "'mean_ap'", "]", ",", "\n", "'NDS'", ":", "metrics", "[", "'nd_score'", "]", ",", "\n", "}", ")", "\n", "\n", "return", "result", ",", "details", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.__init__": [[14, 23], ["dataset.DatasetTemplate.__init__", "nuscenes_dataset.NuScenesDataset.include_nuscenes_data", "nuscenes_dataset.NuScenesDataset.dataset_cfg.get", "nuscenes_dataset.NuScenesDataset.balanced_infos_resampling", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.include_nuscenes_data", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.balanced_infos_resampling"], ["    ", "def", "__init__", "(", "self", ",", "dataset_cfg", ",", "class_names", ",", "training", "=", "True", ",", "root_path", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "root_path", "=", "(", "root_path", "if", "root_path", "is", "not", "None", "else", "Path", "(", "dataset_cfg", ".", "DATA_PATH", ")", ")", "/", "dataset_cfg", ".", "VERSION", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "training", "=", "training", ",", "root_path", "=", "root_path", ",", "logger", "=", "logger", "\n", ")", "\n", "self", ".", "infos", "=", "[", "]", "\n", "self", ".", "include_nuscenes_data", "(", "self", ".", "mode", ")", "\n", "if", "self", ".", "training", "and", "self", ".", "dataset_cfg", ".", "get", "(", "'BALANCED_RESAMPLING'", ",", "False", ")", ":", "\n", "            ", "self", ".", "infos", "=", "self", ".", "balanced_infos_resampling", "(", "self", ".", "infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.include_nuscenes_data": [[24, 38], ["nuscenes_dataset.NuScenesDataset.logger.info", "nuscenes_dataset.NuScenesDataset.infos.extend", "nuscenes_dataset.NuScenesDataset.logger.info", "info_path.exists", "open", "pickle.load", "nuscenes_infos.extend", "len"], "methods", ["None"], ["", "", "def", "include_nuscenes_data", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Loading NuScenes dataset'", ")", "\n", "nuscenes_infos", "=", "[", "]", "\n", "\n", "for", "info_path", "in", "self", ".", "dataset_cfg", ".", "INFO_PATH", "[", "mode", "]", ":", "\n", "            ", "info_path", "=", "self", ".", "root_path", "/", "info_path", "\n", "if", "not", "info_path", ".", "exists", "(", ")", ":", "\n", "                ", "continue", "\n", "", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "nuscenes_infos", ".", "extend", "(", "infos", ")", "\n", "\n", "", "", "self", ".", "infos", ".", "extend", "(", "nuscenes_infos", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Total samples for NuScenes dataset: %d'", "%", "(", "len", "(", "nuscenes_infos", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.balanced_infos_resampling": [[39, 75], ["sum", "zip", "nuscenes_dataset.NuScenesDataset.logger.info", "set", "len", "list", "numpy.random.choice().tolist", "set", "len", "len", "cls_infos.items", "cls_dist.values", "cls_infos.values", "len", "len", "len", "cls_infos_new.items", "cls_infos[].append", "cls_infos.items", "numpy.random.choice", "cls_infos_new[].append", "int", "len"], "methods", ["None"], ["", "def", "balanced_infos_resampling", "(", "self", ",", "infos", ")", ":", "\n", "        ", "\"\"\"\n        Class-balanced sampling of nuScenes dataset from https://arxiv.org/abs/1908.09492\n        \"\"\"", "\n", "if", "self", ".", "class_names", "is", "None", ":", "\n", "            ", "return", "infos", "\n", "\n", "", "cls_infos", "=", "{", "name", ":", "[", "]", "for", "name", "in", "self", ".", "class_names", "}", "\n", "for", "info", "in", "infos", ":", "\n", "            ", "for", "name", "in", "set", "(", "info", "[", "'gt_names'", "]", ")", ":", "\n", "                ", "if", "name", "in", "self", ".", "class_names", ":", "\n", "                    ", "cls_infos", "[", "name", "]", ".", "append", "(", "info", ")", "\n", "\n", "", "", "", "duplicated_samples", "=", "sum", "(", "[", "len", "(", "v", ")", "for", "_", ",", "v", "in", "cls_infos", ".", "items", "(", ")", "]", ")", "\n", "cls_dist", "=", "{", "k", ":", "len", "(", "v", ")", "/", "duplicated_samples", "for", "k", ",", "v", "in", "cls_infos", ".", "items", "(", ")", "}", "\n", "\n", "sampled_infos", "=", "[", "]", "\n", "\n", "frac", "=", "1.0", "/", "len", "(", "self", ".", "class_names", ")", "\n", "ratios", "=", "[", "frac", "/", "v", "for", "v", "in", "cls_dist", ".", "values", "(", ")", "]", "\n", "\n", "for", "cur_cls_infos", ",", "ratio", "in", "zip", "(", "list", "(", "cls_infos", ".", "values", "(", ")", ")", ",", "ratios", ")", ":", "\n", "            ", "sampled_infos", "+=", "np", ".", "random", ".", "choice", "(", "\n", "cur_cls_infos", ",", "int", "(", "len", "(", "cur_cls_infos", ")", "*", "ratio", ")", "\n", ")", ".", "tolist", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'Total samples after balanced resampling: %s'", "%", "(", "len", "(", "sampled_infos", ")", ")", ")", "\n", "\n", "cls_infos_new", "=", "{", "name", ":", "[", "]", "for", "name", "in", "self", ".", "class_names", "}", "\n", "for", "info", "in", "sampled_infos", ":", "\n", "            ", "for", "name", "in", "set", "(", "info", "[", "'gt_names'", "]", ")", ":", "\n", "                ", "if", "name", "in", "self", ".", "class_names", ":", "\n", "                    ", "cls_infos_new", "[", "name", "]", ".", "append", "(", "info", ")", "\n", "\n", "", "", "", "cls_dist_new", "=", "{", "k", ":", "len", "(", "v", ")", "/", "len", "(", "sampled_infos", ")", "for", "k", ",", "v", "in", "cls_infos_new", ".", "items", "(", ")", "}", "\n", "\n", "return", "sampled_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.get_sweep": [[76, 91], ["numpy.fromfile().reshape", "nuscenes_dataset.NuScenesDataset.get_sweep.remove_ego_points"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.lyft.lyft_dataset.LyftDataset.remove_ego_points"], ["", "def", "get_sweep", "(", "self", ",", "sweep_info", ")", ":", "\n", "        ", "def", "remove_ego_points", "(", "points", ",", "center_radius", "=", "1.0", ")", ":", "\n", "            ", "mask", "=", "~", "(", "(", "np", ".", "abs", "(", "points", "[", ":", ",", "0", "]", ")", "<", "center_radius", ")", "&", "(", "np", ".", "abs", "(", "points", "[", ":", ",", "1", "]", ")", "<", "center_radius", ")", ")", "\n", "return", "points", "[", "mask", "]", "\n", "\n", "", "lidar_path", "=", "self", ".", "root_path", "/", "sweep_info", "[", "'lidar_path'", "]", "\n", "points_sweep", "=", "np", ".", "fromfile", "(", "str", "(", "lidar_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "5", "]", ")", "[", ":", ",", ":", "4", "]", "\n", "points_sweep", "=", "remove_ego_points", "(", "points_sweep", ")", ".", "T", "\n", "if", "sweep_info", "[", "'transform_matrix'", "]", "is", "not", "None", ":", "\n", "            ", "num_points", "=", "points_sweep", ".", "shape", "[", "1", "]", "\n", "points_sweep", "[", ":", "3", ",", ":", "]", "=", "sweep_info", "[", "'transform_matrix'", "]", ".", "dot", "(", "\n", "np", ".", "vstack", "(", "(", "points_sweep", "[", ":", "3", ",", ":", "]", ",", "np", ".", "ones", "(", "num_points", ")", ")", ")", ")", "[", ":", "3", ",", ":", "]", "\n", "\n", "", "cur_times", "=", "sweep_info", "[", "'time_lag'", "]", "*", "np", ".", "ones", "(", "(", "1", ",", "points_sweep", ".", "shape", "[", "1", "]", ")", ")", "\n", "return", "points_sweep", ".", "T", ",", "cur_times", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.get_lidar_with_sweeps": [[92, 110], ["numpy.random.choice", "numpy.concatenate", "numpy.concatenate().astype", "numpy.concatenate", "numpy.fromfile().reshape", "numpy.zeros", "len", "nuscenes_dataset.NuScenesDataset.get_sweep", "sweep_points_list.append", "sweep_times_list.append", "numpy.concatenate", "numpy.fromfile", "str"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.get_sweep"], ["", "def", "get_lidar_with_sweeps", "(", "self", ",", "index", ",", "max_sweeps", "=", "1", ")", ":", "\n", "        ", "info", "=", "self", ".", "infos", "[", "index", "]", "\n", "lidar_path", "=", "self", ".", "root_path", "/", "info", "[", "'lidar_path'", "]", "\n", "points", "=", "np", ".", "fromfile", "(", "str", "(", "lidar_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "5", "]", ")", "[", ":", ",", ":", "4", "]", "\n", "\n", "sweep_points_list", "=", "[", "points", "]", "\n", "sweep_times_list", "=", "[", "np", ".", "zeros", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", "\n", "\n", "for", "k", "in", "np", ".", "random", ".", "choice", "(", "len", "(", "info", "[", "'sweeps'", "]", ")", ",", "max_sweeps", "-", "1", ",", "replace", "=", "False", ")", ":", "\n", "            ", "points_sweep", ",", "times_sweep", "=", "self", ".", "get_sweep", "(", "info", "[", "'sweeps'", "]", "[", "k", "]", ")", "\n", "sweep_points_list", ".", "append", "(", "points_sweep", ")", "\n", "sweep_times_list", ".", "append", "(", "times_sweep", ")", "\n", "\n", "", "points", "=", "np", ".", "concatenate", "(", "sweep_points_list", ",", "axis", "=", "0", ")", "\n", "times", "=", "np", ".", "concatenate", "(", "sweep_times_list", ",", "axis", "=", "0", ")", ".", "astype", "(", "points", ".", "dtype", ")", "\n", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "points", ",", "times", ")", ",", "axis", "=", "1", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.__len__": [[111, 116], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "return", "len", "(", "self", ".", "infos", ")", "*", "self", ".", "total_epochs", "\n", "\n", "", "return", "len", "(", "self", ".", "infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.__getitem__": [[117, 152], ["copy.deepcopy", "nuscenes_dataset.NuScenesDataset.get_lidar_with_sweeps", "nuscenes_dataset.NuScenesDataset.prepare_data", "nuscenes_dataset.NuScenesDataset.dataset_cfg.get", "nuscenes_dataset.NuScenesDataset.dataset_cfg.get", "input_dict.update", "len", "pathlib.Path", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.get_lidar_with_sweeps", "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.prepare_data", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "index", "=", "index", "%", "len", "(", "self", ".", "infos", ")", "\n", "\n", "", "info", "=", "copy", ".", "deepcopy", "(", "self", ".", "infos", "[", "index", "]", ")", "\n", "points", "=", "self", ".", "get_lidar_with_sweeps", "(", "index", ",", "max_sweeps", "=", "self", ".", "dataset_cfg", ".", "MAX_SWEEPS", ")", "\n", "\n", "input_dict", "=", "{", "\n", "'points'", ":", "points", ",", "\n", "'frame_id'", ":", "Path", "(", "info", "[", "'lidar_path'", "]", ")", ".", "stem", ",", "\n", "'metadata'", ":", "{", "'token'", ":", "info", "[", "'token'", "]", "}", "\n", "}", "\n", "\n", "if", "'gt_boxes'", "in", "info", ":", "\n", "            ", "if", "self", ".", "dataset_cfg", ".", "get", "(", "'FILTER_MIN_POINTS_IN_GT'", ",", "False", ")", ":", "\n", "                ", "mask", "=", "(", "info", "[", "'num_lidar_pts'", "]", ">", "self", ".", "dataset_cfg", ".", "FILTER_MIN_POINTS_IN_GT", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "None", "\n", "\n", "", "input_dict", ".", "update", "(", "{", "\n", "'gt_names'", ":", "info", "[", "'gt_names'", "]", "if", "mask", "is", "None", "else", "info", "[", "'gt_names'", "]", "[", "mask", "]", ",", "\n", "'gt_boxes'", ":", "info", "[", "'gt_boxes'", "]", "if", "mask", "is", "None", "else", "info", "[", "'gt_boxes'", "]", "[", "mask", "]", "\n", "}", ")", "\n", "\n", "", "data_dict", "=", "self", ".", "prepare_data", "(", "data_dict", "=", "input_dict", ")", "\n", "\n", "if", "self", ".", "dataset_cfg", ".", "get", "(", "'SET_NAN_VELOCITY_TO_ZEROS'", ",", "False", ")", ":", "\n", "            ", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "\n", "gt_boxes", "[", "np", ".", "isnan", "(", "gt_boxes", ")", "]", "=", "0", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "\n", "", "if", "not", "self", ".", "dataset_cfg", ".", "PRED_VELOCITY", "and", "'gt_boxes'", "in", "data_dict", ":", "\n", "            ", "data_dict", "[", "'gt_boxes'", "]", "=", "data_dict", "[", "'gt_boxes'", "]", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "-", "1", "]", "]", "\n", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.generate_prediction_dicts": [[153, 197], ["enumerate", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "nuscenes_dataset.NuScenesDataset.generate_prediction_dicts.get_template_prediction"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_prediction_dicts", "(", "batch_dict", ",", "pred_dicts", ",", "class_names", ",", "output_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                frame_id:\n            pred_dicts: list of pred_dicts\n                pred_boxes: (N, 7), Tensor\n                pred_scores: (N), Tensor\n                pred_labels: (N), Tensor\n            class_names:\n            output_path:\n        Returns:\n        \"\"\"", "\n", "def", "get_template_prediction", "(", "num_samples", ")", ":", "\n", "            ", "ret_dict", "=", "{", "\n", "'name'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "'score'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "\n", "'boxes_lidar'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "7", "]", ")", ",", "'pred_labels'", ":", "np", ".", "zeros", "(", "num_samples", ")", "\n", "}", "\n", "return", "ret_dict", "\n", "\n", "", "def", "generate_single_sample_dict", "(", "box_dict", ")", ":", "\n", "            ", "pred_scores", "=", "box_dict", "[", "'pred_scores'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_boxes", "=", "box_dict", "[", "'pred_boxes'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_labels", "=", "box_dict", "[", "'pred_labels'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_dict", "=", "get_template_prediction", "(", "pred_scores", ".", "shape", "[", "0", "]", ")", "\n", "if", "pred_scores", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "return", "pred_dict", "\n", "\n", "", "pred_dict", "[", "'name'", "]", "=", "np", ".", "array", "(", "class_names", ")", "[", "pred_labels", "-", "1", "]", "\n", "pred_dict", "[", "'score'", "]", "=", "pred_scores", "\n", "pred_dict", "[", "'boxes_lidar'", "]", "=", "pred_boxes", "\n", "pred_dict", "[", "'pred_labels'", "]", "=", "pred_labels", "\n", "\n", "return", "pred_dict", "\n", "\n", "", "annos", "=", "[", "]", "\n", "for", "index", ",", "box_dict", "in", "enumerate", "(", "pred_dicts", ")", ":", "\n", "            ", "single_pred_dict", "=", "generate_single_sample_dict", "(", "box_dict", ")", "\n", "single_pred_dict", "[", "'frame_id'", "]", "=", "batch_dict", "[", "'frame_id'", "]", "[", "index", "]", "\n", "single_pred_dict", "[", "'metadata'", "]", "=", "batch_dict", "[", "'metadata'", "]", "[", "index", "]", "\n", "annos", ".", "append", "(", "single_pred_dict", ")", "\n", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.evaluation": [[198, 253], ["NuScenes", "nuscenes_utils.transform_det_annos_to_nusc_annos", "pathlib.Path", "pathlib.Path.mkdir", "str", "nuscenes_dataset.NuScenesDataset.logger.info", "NuScenesEval", "NuScenesEval.main", "nuscenes_utils.format_nuscene_results", "open", "json.dump", "config_factory", "open", "json.load", "str", "config_factory", "str"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.transform_det_annos_to_nusc_annos", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.main", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.format_nuscene_results"], ["", "def", "evaluation", "(", "self", ",", "det_annos", ",", "class_names", ",", "**", "kwargs", ")", ":", "\n", "        ", "import", "json", "\n", "from", "nuscenes", ".", "nuscenes", "import", "NuScenes", "\n", "from", ".", "import", "nuscenes_utils", "\n", "nusc", "=", "NuScenes", "(", "version", "=", "self", ".", "dataset_cfg", ".", "VERSION", ",", "dataroot", "=", "str", "(", "self", ".", "root_path", ")", ",", "verbose", "=", "True", ")", "\n", "nusc_annos", "=", "nuscenes_utils", ".", "transform_det_annos_to_nusc_annos", "(", "det_annos", ",", "nusc", ")", "\n", "nusc_annos", "[", "'meta'", "]", "=", "{", "\n", "'use_camera'", ":", "False", ",", "\n", "'use_lidar'", ":", "True", ",", "\n", "'use_radar'", ":", "False", ",", "\n", "'use_map'", ":", "False", ",", "\n", "'use_external'", ":", "False", ",", "\n", "}", "\n", "\n", "output_path", "=", "Path", "(", "kwargs", "[", "'output_path'", "]", ")", "\n", "output_path", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "res_path", "=", "str", "(", "output_path", "/", "'results_nusc.json'", ")", "\n", "with", "open", "(", "res_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "nusc_annos", ",", "f", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "f'The predictions of NuScenes have been saved to {res_path}'", ")", "\n", "\n", "if", "self", ".", "dataset_cfg", ".", "VERSION", "==", "'v1.0-test'", ":", "\n", "            ", "return", "'No ground-truth annotations for evaluation'", ",", "{", "}", "\n", "\n", "", "from", "nuscenes", ".", "eval", ".", "detection", ".", "config", "import", "config_factory", "\n", "from", "nuscenes", ".", "eval", ".", "detection", ".", "evaluate", "import", "NuScenesEval", "\n", "\n", "eval_set_map", "=", "{", "\n", "'v1.0-mini'", ":", "'mini_val'", ",", "\n", "'v1.0-trainval'", ":", "'val'", ",", "\n", "'v1.0-test'", ":", "'test'", "\n", "}", "\n", "try", ":", "\n", "            ", "eval_version", "=", "'detection_cvpr_2019'", "\n", "eval_config", "=", "config_factory", "(", "eval_version", ")", "\n", "", "except", ":", "\n", "            ", "eval_version", "=", "'cvpr_2019'", "\n", "eval_config", "=", "config_factory", "(", "eval_version", ")", "\n", "\n", "", "nusc_eval", "=", "NuScenesEval", "(", "\n", "nusc", ",", "\n", "config", "=", "eval_config", ",", "\n", "result_path", "=", "res_path", ",", "\n", "eval_set", "=", "eval_set_map", "[", "self", ".", "dataset_cfg", ".", "VERSION", "]", ",", "\n", "output_dir", "=", "str", "(", "output_path", ")", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "metrics_summary", "=", "nusc_eval", ".", "main", "(", "plot_examples", "=", "0", ",", "render_curves", "=", "False", ")", "\n", "\n", "with", "open", "(", "output_path", "/", "'metrics_summary.json'", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "metrics", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "result_str", ",", "result_dict", "=", "nuscenes_utils", ".", "format_nuscene_results", "(", "metrics", ",", "self", ".", "class_names", ",", "version", "=", "eval_version", ")", "\n", "return", "result_str", ",", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.create_groundtruth_database": [[254, 297], ["database_save_path.mkdir", "tqdm.tqdm.tqdm", "all_db_infos.items", "range", "nuscenes_dataset.NuScenesDataset.get_lidar_with_sweeps", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze().cpu().numpy", "range", "print", "open", "pickle.dump", "len", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze().cpu", "open", "gt_points.tofile", "str", "filepath.relative_to", "all_db_infos[].append", "len", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.NuScenesDataset.get_lidar_with_sweeps", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu"], ["", "def", "create_groundtruth_database", "(", "self", ",", "used_classes", "=", "None", ",", "max_sweeps", "=", "10", ")", ":", "\n", "        ", "import", "torch", "\n", "\n", "database_save_path", "=", "self", ".", "root_path", "/", "f'gt_database_{max_sweeps}sweeps_withvelo'", "\n", "db_info_save_path", "=", "self", ".", "root_path", "/", "f'nuscenes_dbinfos_{max_sweeps}sweeps_withvelo.pkl'", "\n", "\n", "database_save_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "all_db_infos", "=", "{", "}", "\n", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "infos", ")", ")", ")", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "info", "=", "self", ".", "infos", "[", "idx", "]", "\n", "points", "=", "self", ".", "get_lidar_with_sweeps", "(", "idx", ",", "max_sweeps", "=", "max_sweeps", ")", "\n", "gt_boxes", "=", "info", "[", "'gt_boxes'", "]", "\n", "gt_names", "=", "info", "[", "'gt_names'", "]", "\n", "\n", "box_idxs_of_pts", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_gpu", "(", "\n", "torch", ".", "from_numpy", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", ")", ".", "long", "(", ")", ".", "squeeze", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "filename", "=", "'%s_%s_%d.bin'", "%", "(", "sample_idx", ",", "gt_names", "[", "i", "]", ",", "i", ")", "\n", "filepath", "=", "database_save_path", "/", "filename", "\n", "gt_points", "=", "points", "[", "box_idxs_of_pts", "==", "i", "]", "\n", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "gt_boxes", "[", "i", ",", ":", "3", "]", "\n", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "gt_points", ".", "tofile", "(", "f", ")", "\n", "\n", "", "if", "(", "used_classes", "is", "None", ")", "or", "gt_names", "[", "i", "]", "in", "used_classes", ":", "\n", "                    ", "db_path", "=", "str", "(", "filepath", ".", "relative_to", "(", "self", ".", "root_path", ")", ")", "# gt_database/xxxxx.bin", "\n", "db_info", "=", "{", "'name'", ":", "gt_names", "[", "i", "]", ",", "'path'", ":", "db_path", ",", "'image_idx'", ":", "sample_idx", ",", "'gt_idx'", ":", "i", ",", "\n", "'box3d_lidar'", ":", "gt_boxes", "[", "i", "]", ",", "'num_points_in_gt'", ":", "gt_points", ".", "shape", "[", "0", "]", "}", "\n", "if", "gt_names", "[", "i", "]", "in", "all_db_infos", ":", "\n", "                        ", "all_db_infos", "[", "gt_names", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "else", ":", "\n", "                        ", "all_db_infos", "[", "gt_names", "[", "i", "]", "]", "=", "[", "db_info", "]", "\n", "", "", "", "", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Database %s: %d'", "%", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "\n", "", "with", "open", "(", "db_info_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_dataset.create_nuscenes_info": [[299, 344], ["NuScenes", "nuscenes_utils.get_available_scenes", "list", "list", "set", "set", "print", "nuscenes_utils.fill_trainval_infos", "filter", "filter", "print", "print", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "len", "len", "len", "len", "len", "available_scene_names.index", "available_scene_names.index"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.get_available_scenes", "home.repos.pwc.inspect_result.dschinagl_occam.nuscenes.nuscenes_utils.fill_trainval_infos"], ["", "", "", "def", "create_nuscenes_info", "(", "version", ",", "data_path", ",", "save_path", ",", "max_sweeps", "=", "10", ")", ":", "\n", "    ", "from", "nuscenes", ".", "nuscenes", "import", "NuScenes", "\n", "from", "nuscenes", ".", "utils", "import", "splits", "\n", "from", ".", "import", "nuscenes_utils", "\n", "data_path", "=", "data_path", "/", "version", "\n", "save_path", "=", "save_path", "/", "version", "\n", "\n", "assert", "version", "in", "[", "'v1.0-trainval'", ",", "'v1.0-test'", ",", "'v1.0-mini'", "]", "\n", "if", "version", "==", "'v1.0-trainval'", ":", "\n", "        ", "train_scenes", "=", "splits", ".", "train", "\n", "val_scenes", "=", "splits", ".", "val", "\n", "", "elif", "version", "==", "'v1.0-test'", ":", "\n", "        ", "train_scenes", "=", "splits", ".", "test", "\n", "val_scenes", "=", "[", "]", "\n", "", "elif", "version", "==", "'v1.0-mini'", ":", "\n", "        ", "train_scenes", "=", "splits", ".", "mini_train", "\n", "val_scenes", "=", "splits", ".", "mini_val", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "nusc", "=", "NuScenes", "(", "version", "=", "version", ",", "dataroot", "=", "data_path", ",", "verbose", "=", "True", ")", "\n", "available_scenes", "=", "nuscenes_utils", ".", "get_available_scenes", "(", "nusc", ")", "\n", "available_scene_names", "=", "[", "s", "[", "'name'", "]", "for", "s", "in", "available_scenes", "]", "\n", "train_scenes", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "available_scene_names", ",", "train_scenes", ")", ")", "\n", "val_scenes", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "available_scene_names", ",", "val_scenes", ")", ")", "\n", "train_scenes", "=", "set", "(", "[", "available_scenes", "[", "available_scene_names", ".", "index", "(", "s", ")", "]", "[", "'token'", "]", "for", "s", "in", "train_scenes", "]", ")", "\n", "val_scenes", "=", "set", "(", "[", "available_scenes", "[", "available_scene_names", ".", "index", "(", "s", ")", "]", "[", "'token'", "]", "for", "s", "in", "val_scenes", "]", ")", "\n", "\n", "print", "(", "'%s: train scene(%d), val scene(%d)'", "%", "(", "version", ",", "len", "(", "train_scenes", ")", ",", "len", "(", "val_scenes", ")", ")", ")", "\n", "\n", "train_nusc_infos", ",", "val_nusc_infos", "=", "nuscenes_utils", ".", "fill_trainval_infos", "(", "\n", "data_path", "=", "data_path", ",", "nusc", "=", "nusc", ",", "train_scenes", "=", "train_scenes", ",", "val_scenes", "=", "val_scenes", ",", "\n", "test", "=", "'test'", "in", "version", ",", "max_sweeps", "=", "max_sweeps", "\n", ")", "\n", "\n", "if", "version", "==", "'v1.0-test'", ":", "\n", "        ", "print", "(", "'test sample: %d'", "%", "len", "(", "train_nusc_infos", ")", ")", "\n", "with", "open", "(", "save_path", "/", "f'nuscenes_infos_{max_sweeps}sweeps_test.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "train_nusc_infos", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'train sample: %d, val sample: %d'", "%", "(", "len", "(", "train_nusc_infos", ")", ",", "len", "(", "val_nusc_infos", ")", ")", ")", "\n", "with", "open", "(", "save_path", "/", "f'nuscenes_infos_{max_sweeps}sweeps_train.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "train_nusc_infos", ",", "f", ")", "\n", "", "with", "open", "(", "save_path", "/", "f'nuscenes_infos_{max_sweeps}sweeps_val.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "val_nusc_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__init__": [[53, 71], ["dataset.DatasetTemplate.__init__", "ps.DataSet", "pandaset_dataset.PandasetDataset.include_pandaset_infos", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.include_pandaset_infos"], ["    ", "def", "__init__", "(", "self", ",", "dataset_cfg", ",", "class_names", ",", "training", "=", "True", ",", "root_path", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root_path:\n            dataset_cfg:\n            class_names:\n            training:\n            logger:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "training", "=", "training", ",", "root_path", "=", "root_path", ",", "logger", "=", "logger", "\n", ")", "\n", "if", "root_path", "is", "None", ":", "\n", "            ", "root_path", "=", "self", ".", "dataset_cfg", ".", "DATA_PATH", "\n", "", "self", ".", "dataset", "=", "ps", ".", "DataSet", "(", "os", ".", "path", ".", "join", "(", "root_path", ",", "'dataset'", ")", ")", "\n", "self", ".", "split", "=", "self", ".", "dataset_cfg", ".", "DATA_SPLIT", "[", "self", ".", "mode", "]", "\n", "self", ".", "pandaset_infos", "=", "[", "]", "\n", "self", ".", "include_pandaset_infos", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.include_pandaset_infos": [[73, 90], ["pandaset_dataset.PandasetDataset.pandaset_infos.extend", "pandaset_dataset.PandasetDataset.logger.info", "os.path.join", "pandaset_dataset.PandasetDataset.logger.info", "os.path.exists", "open", "pickle.load", "pandaset_infos.extend", "len"], "methods", ["None"], ["", "def", "include_pandaset_infos", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Loading PandaSet dataset'", ")", "\n", "", "pandaset_infos", "=", "[", "]", "\n", "\n", "for", "info_path", "in", "self", ".", "dataset_cfg", ".", "INFO_PATH", "[", "mode", "]", ":", "\n", "            ", "info_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "info_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "info_path", ")", ":", "\n", "                ", "continue", "\n", "", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "pandaset_infos", ".", "extend", "(", "infos", ")", "\n", "\n", "", "", "self", ".", "pandaset_infos", ".", "extend", "(", "pandaset_infos", ")", "\n", "\n", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Total samples for PandaSet dataset ({}): {}'", ".", "format", "(", "self", ".", "mode", ",", "len", "(", "pandaset_infos", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split": [[92, 95], ["None"], "methods", ["None"], ["", "", "def", "set_split", "(", "self", ",", "split", ")", ":", "\n", "        ", "self", ".", "sequences", "=", "self", ".", "dataset_cfg", ".", "SEQUENCES", "[", "split", "]", "\n", "self", ".", "split", "=", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__": [[97, 99], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "pandaset_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__getitem__": [[101, 137], ["pandaset_dataset.PandasetDataset._get_pose", "pandaset_dataset.PandasetDataset._get_lidar_points", "pandaset_dataset.PandasetDataset._get_annotations", "pandaset_dataset.pose_dict_to_numpy", "pandaset_dataset.PandasetDataset.prepare_data", "int", "pandaset_dataset.pose_dict_to_numpy"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset._get_pose", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset._get_lidar_points", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset._get_annotations", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.pose_dict_to_numpy", "home.repos.pwc.inspect_result.dschinagl_occam.datasets.dataset.DatasetTemplate.prepare_data", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.pose_dict_to_numpy"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        To support a custom dataset, implement this function to load the raw data (and labels), then transform them to\n        the unified normative coordinate (x pointing forward, z pointing upwards) and call the function self.prepare_data() to process the data and send them\n        to the model.\n\n        Args:\n            index:\n\n        Returns:\n\n        \"\"\"", "\n", "info", "=", "self", ".", "pandaset_infos", "[", "index", "]", "\n", "seq_idx", "=", "info", "[", "'sequence'", "]", "\n", "\n", "pose", "=", "self", ".", "_get_pose", "(", "info", ")", "\n", "points", "=", "self", ".", "_get_lidar_points", "(", "info", ",", "pose", ")", "\n", "boxes", ",", "labels", ",", "zrot_world_to_ego", "=", "self", ".", "_get_annotations", "(", "info", ",", "pose", ")", "\n", "pose_np", "=", "pose_dict_to_numpy", "(", "pose", ")", "\n", "\n", "input_dict", "=", "{", "'points'", ":", "points", ",", "\n", "'gt_boxes'", ":", "boxes", ",", "\n", "'gt_names'", ":", "labels", ",", "\n", "'sequence'", ":", "int", "(", "seq_idx", ")", ",", "\n", "'frame_idx'", ":", "info", "[", "'frame_idx'", "]", ",", "\n", "'zrot_world_to_ego'", ":", "zrot_world_to_ego", ",", "\n", "'pose'", ":", "pose_dict_to_numpy", "(", "pose", ")", "\n", "}", "\n", "# seq_idx is converted to int because strings can't be passed to", "\n", "# the gpu in pytorch", "\n", "# zrot_world_to_ego is propagated in order to be able to transform the", "\n", "# predicted yaws back to world coordinates", "\n", "\n", "data_dict", "=", "self", ".", "prepare_data", "(", "data_dict", "=", "input_dict", ")", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset._get_pose": [[139, 148], ["pandaset_dataset.PandasetDataset.dataset[].lidar._load_poses"], "methods", ["None"], ["", "def", "_get_pose", "(", "self", ",", "info", ")", ":", "\n", "        ", "seq_idx", "=", "info", "[", "'sequence'", "]", "\n", "# get pose for world to ego frame transformation", "\n", "if", "self", ".", "dataset", "[", "seq_idx", "]", ".", "lidar", ".", "poses", "is", "None", ":", "\n", "            ", "self", ".", "dataset", "[", "seq_idx", "]", ".", "lidar", ".", "_load_poses", "(", ")", "\n", "\n", "", "pose", "=", "self", ".", "dataset", "[", "seq_idx", "]", ".", "lidar", ".", "poses", "[", "info", "[", "'frame_idx'", "]", "]", "\n", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset._get_lidar_points": [[150, 185], ["pd.read_pickle", "pandaset_dataset.PandasetDataset.dataset_cfg.get", "pd.read_pickle.to_numpy", "ps.geometry.lidar_points_to_ego", "numpy.append().astype", "numpy.append", "numpy.expand_dims"], "methods", ["None"], ["", "def", "_get_lidar_points", "(", "self", ",", "info", ",", "pose", ")", ":", "\n", "        ", "\"\"\"\n        Get lidar in the unified normative coordinate system for a given frame\n        The intensity is normalized to fit [0-1] range (pandaset intensity is in [0-255] range)\n        \"\"\"", "\n", "# get lidar points", "\n", "lidar_frame", "=", "pd", ".", "read_pickle", "(", "info", "[", "'lidar_path'", "]", ")", "\n", "# get points for the required lidar(s) only", "\n", "device", "=", "self", ".", "dataset_cfg", ".", "get", "(", "'LIDAR_DEVICE'", ",", "0", ")", "\n", "if", "device", "!=", "-", "1", ":", "\n", "            ", "lidar_frame", "=", "lidar_frame", "[", "lidar_frame", ".", "d", "==", "device", "]", "\n", "", "world_points", "=", "lidar_frame", ".", "to_numpy", "(", ")", "\n", "# There seems to be issues with the automatic deletion of pandas datasets sometimes", "\n", "del", "lidar_frame", "\n", "\n", "points_loc", "=", "world_points", "[", ":", ",", ":", "3", "]", "\n", "points_int", "=", "world_points", "[", ":", ",", "3", "]", "\n", "\n", "# nromalize intensity", "\n", "points_int", "=", "points_int", "/", "255", "\n", "\n", "ego_points", "=", "ps", ".", "geometry", ".", "lidar_points_to_ego", "(", "points_loc", ",", "pose", ")", "\n", "# Pandaset ego coordinates are:", "\n", "# - x pointing to the right", "\n", "# - y pointing to the front", "\n", "# - z pointing up", "\n", "# Normative coordinates are:", "\n", "# - x pointing foreward", "\n", "# - y pointings to the left", "\n", "# - z pointing to the top", "\n", "# So a transformation is required to the match the normative coordinates", "\n", "ego_points", "=", "ego_points", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "# switch x and y", "\n", "ego_points", "[", ":", ",", "1", "]", "=", "-", "ego_points", "[", ":", ",", "1", "]", "# revert y axis", "\n", "\n", "return", "np", ".", "append", "(", "ego_points", ",", "np", ".", "expand_dims", "(", "points_int", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset._get_annotations": [[187, 253], ["pd.read_pickle", "pandaset_dataset.PandasetDataset.dataset_cfg.get", "cuboids[].to_numpy", "cuboids[].to_numpy", "cuboids[].to_numpy", "cuboids[].to_numpy", "cuboids[].to_numpy", "cuboids[].to_numpy", "cuboids[].to_numpy", "cuboids[].to_numpy", "numpy.array", "ps.geometry.lidar_points_to_ego", "ps.geometry.lidar_points_to_ego", "numpy.arctan2", "numpy.vstack", "numpy.array", "numpy.vstack", "ego_boxes.astype", "pandaset_dataset.PandasetDataset.dataset_cfg.TRAINING_CATEGORIES.get", "pandaset_dataset.PandasetDataset.logger.warning"], "methods", ["None"], ["", "def", "_get_annotations", "(", "self", ",", "info", ",", "pose", ")", ":", "\n", "        ", "\"\"\"\n        Get box informations in the unified normative coordinate system for a given frame\n        \"\"\"", "\n", "\n", "# get boxes", "\n", "cuboids", "=", "pd", ".", "read_pickle", "(", "info", "[", "\"cuboids_path\"", "]", ")", "\n", "device", "=", "self", ".", "dataset_cfg", ".", "get", "(", "'LIDAR_DEVICE'", ",", "0", ")", "\n", "if", "device", "!=", "-", "1", ":", "\n", "# keep cuboids that are seen by a given device", "\n", "            ", "cuboids", "=", "cuboids", "[", "cuboids", "[", "\"cuboids.sensor_id\"", "]", "!=", "1", "-", "device", "]", "\n", "\n", "", "xs", "=", "cuboids", "[", "'position.x'", "]", ".", "to_numpy", "(", ")", "\n", "ys", "=", "cuboids", "[", "'position.y'", "]", ".", "to_numpy", "(", ")", "\n", "zs", "=", "cuboids", "[", "'position.z'", "]", ".", "to_numpy", "(", ")", "\n", "dxs", "=", "cuboids", "[", "'dimensions.x'", "]", ".", "to_numpy", "(", ")", "\n", "dys", "=", "cuboids", "[", "'dimensions.y'", "]", ".", "to_numpy", "(", ")", "\n", "dzs", "=", "cuboids", "[", "'dimensions.z'", "]", ".", "to_numpy", "(", ")", "\n", "yaws", "=", "cuboids", "[", "'yaw'", "]", ".", "to_numpy", "(", ")", "\n", "labels", "=", "cuboids", "[", "'label'", "]", ".", "to_numpy", "(", ")", "\n", "\n", "del", "cuboids", "# There seem to be issues with the automatic deletion of pandas datasets sometimes", "\n", "\n", "labels", "=", "np", ".", "array", "(", "[", "self", ".", "dataset_cfg", ".", "TRAINING_CATEGORIES", ".", "get", "(", "lab", ",", "lab", ")", "\n", "for", "lab", "in", "labels", "]", ")", "\n", "\n", "# Compute the center points coordinates in ego coordinates", "\n", "centers", "=", "np", ".", "vstack", "(", "[", "xs", ",", "ys", ",", "zs", "]", ")", ".", "T", "\n", "ego_centers", "=", "ps", ".", "geometry", ".", "lidar_points_to_ego", "(", "centers", ",", "pose", ")", "\n", "\n", "# Compute the yaw in ego coordinates", "\n", "# The following implementation supposes that the pitch of the car is", "\n", "# negligible compared to its yaw, in order to be able to express the", "\n", "# bbox coordinates in the ego coordinate system with an {axis aligned", "\n", "# box + yaw} only representation", "\n", "yaxis_points_from_pose", "=", "ps", ".", "geometry", ".", "lidar_points_to_ego", "(", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1.", ",", "0", "]", "]", ")", ",", "pose", ")", "\n", "yaxis_from_pose", "=", "yaxis_points_from_pose", "[", "1", ",", ":", "]", "-", "yaxis_points_from_pose", "[", "0", ",", ":", "]", "\n", "\n", "if", "yaxis_from_pose", "[", "-", "1", "]", ">=", "10", "**", "-", "1", ":", "\n", "            ", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "\"The car's pitch is supposed to be negligible \"", "+", "\n", "\"sin(pitch) is >= 10**-1 ({})\"", ".", "format", "(", "yaxis_from_pose", "[", "-", "1", "]", ")", ")", "\n", "\n", "# rotation angle in rads of the y axis around thz z axis", "\n", "", "", "zrot_world_to_ego", "=", "np", ".", "arctan2", "(", "-", "yaxis_from_pose", "[", "0", "]", ",", "yaxis_from_pose", "[", "1", "]", ")", "\n", "ego_yaws", "=", "yaws", "+", "zrot_world_to_ego", "\n", "\n", "# Pandaset ego coordinates are:", "\n", "# - x pointing to the right", "\n", "# - y pointing to the front", "\n", "# - z pointing up", "\n", "# Normative coordinates are:", "\n", "# - x pointing foreward", "\n", "# - y pointings to the left", "\n", "# - z pointing to the top", "\n", "# So a transformation is required to the match the normative coordinates", "\n", "ego_xs", "=", "ego_centers", "[", ":", ",", "1", "]", "\n", "ego_ys", "=", "-", "ego_centers", "[", ":", ",", "0", "]", "\n", "ego_zs", "=", "ego_centers", "[", ":", ",", "2", "]", "\n", "ego_dxs", "=", "dys", "\n", "ego_dys", "=", "dxs", "# stays >= 0", "\n", "ego_dzs", "=", "dzs", "\n", "\n", "ego_boxes", "=", "np", ".", "vstack", "(", "[", "ego_xs", ",", "ego_ys", ",", "ego_zs", ",", "ego_dxs", ",", "ego_dys", ",", "ego_dzs", ",", "ego_yaws", "]", ")", ".", "T", "\n", "\n", "return", "ego_boxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "labels", ",", "zrot_world_to_ego", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.generate_prediction_dicts": [[255, 356], ["enumerate", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "zrot_world_to_ego.cpu().numpy", "pandaset_dataset.pose_numpy_to_dict", "ps.geometry.ego_to_lidar_points", "pd.DataFrame", "pandaset_dataset.PandasetDataset.generate_prediction_dicts.generate_single_sample_dataframe"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.pose_numpy_to_dict"], ["", "@", "staticmethod", "\n", "def", "generate_prediction_dicts", "(", "batch_dict", ",", "pred_dicts", ",", "class_names", ",", "output_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        To support a custom dataset, implement this function to receive the predicted results from the model, and then\n        transform the unified normative coordinate to your required coordinate, and optionally save them to disk.\n\n        Args:\n            batch_dict: dict of original data from the dataloader\n            pred_dicts: dict of predicted results from the model\n                pred_boxes: (N, 7), Tensor\n                pred_scores: (N), Tensor\n                pred_labels: (N), Tensor\n            class_names:\n            output_path: if it is not None, save the results to this path\n        Returns:\n\n        \"\"\"", "\n", "\n", "def", "generate_single_sample_dataframe", "(", "batch_index", ",", "box_dict", ",", "zrot_world_to_ego", ",", "pose", ")", ":", "\n", "            ", "pred_boxes", "=", "box_dict", "[", "\"pred_boxes\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_scores", "=", "box_dict", "[", "\"pred_scores\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_labels", "=", "box_dict", "[", "\"pred_labels\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "zrot", "=", "zrot_world_to_ego", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pose_dict", "=", "pose_numpy_to_dict", "(", "pose", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "xs", "=", "pred_boxes", "[", ":", ",", "0", "]", "\n", "ys", "=", "pred_boxes", "[", ":", ",", "1", "]", "\n", "zs", "=", "pred_boxes", "[", ":", ",", "2", "]", "\n", "dxs", "=", "pred_boxes", "[", ":", ",", "3", "]", "\n", "dys", "=", "pred_boxes", "[", ":", ",", "4", "]", "\n", "dzs", "=", "pred_boxes", "[", ":", ",", "5", "]", "\n", "yaws", "=", "pred_boxes", "[", ":", ",", "6", "]", "\n", "names", "=", "np", ".", "array", "(", "class_names", ")", "[", "pred_labels", "-", "1", "]", "# Predicted labels start on 1", "\n", "\n", "# convert from normative coordinates to pandaset ego coordinates", "\n", "ego_xs", "=", "-", "ys", "\n", "ego_ys", "=", "xs", "\n", "ego_zs", "=", "zs", "\n", "ego_dxs", "=", "dys", "\n", "ego_dys", "=", "dxs", "\n", "ego_dzs", "=", "dzs", "\n", "ego_yaws", "=", "yaws", "\n", "\n", "# convert from pandaset ego coordinates to world coordinates", "\n", "# for the moment, an simplified estimation of the ego yaw is computed in __getitem__", "\n", "# which sets ego_yaw = world_yaw + zrot_world_to_ego", "\n", "world_yaws", "=", "ego_yaws", "-", "zrot", "\n", "\n", "ego_centers", "=", "np", ".", "vstack", "(", "[", "ego_xs", ",", "ego_ys", ",", "ego_zs", "]", ")", ".", "T", "\n", "world_centers", "=", "ps", ".", "geometry", ".", "ego_to_lidar_points", "(", "ego_centers", ",", "pose_dict", ")", "\n", "world_xs", "=", "world_centers", "[", ":", ",", "0", "]", "\n", "world_ys", "=", "world_centers", "[", ":", ",", "1", "]", "\n", "world_zs", "=", "world_centers", "[", ":", ",", "2", "]", "\n", "# dx, dy, dz remain unchanged as the bbox orientation is handled by", "\n", "# the yaw information", "\n", "\n", "data_dict", "=", "{", "'position.x'", ":", "world_xs", ",", "\n", "'position.y'", ":", "world_ys", ",", "\n", "'position.z'", ":", "world_zs", ",", "\n", "'dimensions.x'", ":", "ego_dxs", ",", "\n", "'dimensions.y'", ":", "ego_dys", ",", "\n", "'dimensions.z'", ":", "ego_dzs", ",", "\n", "'yaw'", ":", "world_yaws", "%", "(", "2", "*", "np", ".", "pi", ")", ",", "\n", "'label'", ":", "names", ",", "\n", "'score'", ":", "pred_scores", "\n", "}", "\n", "\n", "return", "pd", ".", "DataFrame", "(", "data_dict", ")", "\n", "\n", "\n", "", "annos", "=", "[", "]", "\n", "for", "index", ",", "box_dict", "in", "enumerate", "(", "pred_dicts", ")", ":", "\n", "            ", "frame_idx", "=", "batch_dict", "[", "'frame_idx'", "]", "[", "index", "]", "\n", "seq_idx", "=", "batch_dict", "[", "'sequence'", "]", "[", "index", "]", "\n", "zrot", "=", "batch_dict", "[", "'zrot_world_to_ego'", "]", "[", "index", "]", "\n", "pose", "=", "batch_dict", "[", "'pose'", "]", "[", "index", "]", "\n", "\n", "single_pred_df", "=", "generate_single_sample_dataframe", "(", "index", ",", "box_dict", ",", "zrot", ",", "pose", ")", "\n", "\n", "\n", "single_pred_dict", "=", "{", "'preds'", ":", "single_pred_df", ",", "\n", "# 'name 'ensures testing the number of detections in a compatible format as kitti", "\n", "'name'", ":", "single_pred_df", "[", "'label'", "]", ".", "tolist", "(", ")", ",", "\n", "'frame_idx'", ":", "frame_idx", ",", "\n", "'sequence'", ":", "str", "(", "seq_idx", ")", ".", "zfill", "(", "3", ")", "}", "\n", "# seq_idx was converted to int in self.__getitem__` because strings", "\n", "# can't be passed to the gpu in pytorch.", "\n", "# To convert it back to a string, we assume that the sequence is", "\n", "# provided in pandaset format with 3 digits", "\n", "\n", "if", "output_path", "is", "not", "None", ":", "\n", "                ", "frame_id", "=", "str", "(", "int", "(", "frame_idx", ")", ")", ".", "zfill", "(", "2", ")", "\n", "seq_id", "=", "str", "(", "int", "(", "seq_idx", ")", ")", ".", "zfill", "(", "3", ")", "\n", "cur_det_file", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "seq_id", ",", "'predictions'", ",", "\n", "'cuboids'", ",", "(", "\"{}.pkl.gz\"", ".", "format", "(", "frame_id", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "cur_det_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "single_pred_df", ".", "to_pickle", "(", "cur_det_file", ")", "\n", "\n", "", "annos", ".", "append", "(", "single_pred_dict", ")", "\n", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.get_infos": [[358, 384], ["s.load_lidar", "infos.extend", "len", "ValueError", "os.path.join", "os.path.join", "range", "len", "len"], "methods", ["None"], ["", "def", "get_infos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate the dataset infos dict for each sample of the dataset.\n        For each sample, this dict contains:\n            - the sequence index\n            - the frame index\n            - the path to the lidar data\n            - the path to the bounding box annotations\n        \"\"\"", "\n", "infos", "=", "[", "]", "\n", "for", "seq", "in", "self", ".", "sequences", ":", "\n", "            ", "s", "=", "self", ".", "dataset", "[", "seq", "]", "\n", "s", ".", "load_lidar", "(", ")", "\n", "if", "len", "(", "s", ".", "lidar", ".", "data", ")", ">", "100", ":", "\n", "                ", "raise", "ValueError", "(", "\"The implementation for this dataset assumes that each sequence is \"", "+", "\n", "\"no longer than 100 frames. The current sequence has {}\"", ".", "format", "(", "len", "(", "s", ".", "lidar", ".", "data", ")", ")", ")", "\n", "", "info", "=", "[", "{", "'sequence'", ":", "seq", ",", "\n", "'frame_idx'", ":", "ii", ",", "\n", "'lidar_path'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'dataset'", ",", "seq", ",", "'lidar'", ",", "(", "\"{:02d}.pkl.gz\"", ".", "format", "(", "ii", ")", ")", ")", ",", "\n", "'cuboids_path'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'dataset'", ",", "seq", ",", "\n", "'annotations'", ",", "'cuboids'", ",", "(", "\"{:02d}.pkl.gz\"", ".", "format", "(", "ii", ")", ")", ")", "\n", "}", "for", "ii", "in", "range", "(", "len", "(", "s", ".", "lidar", ".", "data", ")", ")", "]", "\n", "infos", ".", "extend", "(", "info", ")", "\n", "del", "self", ".", "dataset", ".", "_sequences", "[", "seq", "]", "\n", "\n", "", "return", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.create_groundtruth_database": [[386, 435], ["os.path.join", "os.path.join", "os.makedirs", "range", "all_db_infos.items", "open", "pickle.load", "len", "print", "pandaset_dataset.PandasetDataset._get_pose", "pandaset_dataset.PandasetDataset._get_lidar_points", "pandaset_dataset.PandasetDataset._get_annotations", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu().numpy", "range", "print", "open", "pickle.dump", "names[].replace().replace", "os.path.join", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu", "open", "gt_points.tofile", "os.path.relpath", "len", "torch.from_numpy", "torch.from_numpy", "names[].replace", "all_db_infos[].append", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset._get_pose", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset._get_lidar_points", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset._get_annotations", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["", "def", "create_groundtruth_database", "(", "self", ",", "info_path", "=", "None", ",", "used_classes", "=", "None", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "database_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "'gt_database'", "if", "split", "==", "'train'", "else", "'gt_database_{}'", ".", "format", "(", "split", ")", ")", "\n", "db_info_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\n", "'pandaset_dbinfos_{}.pkl'", ".", "format", "(", "split", ")", ")", "\n", "\n", "os", ".", "makedirs", "(", "database_save_path", ",", "exist_ok", "=", "True", ")", "\n", "all_db_infos", "=", "{", "}", "\n", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "infos", ")", ")", ":", "\n", "            ", "print", "(", "'gt_database sample: %d/%d'", "%", "(", "k", "+", "1", ",", "len", "(", "infos", ")", ")", ")", "\n", "info", "=", "infos", "[", "k", "]", "\n", "sample_idx", "=", "info", "[", "'frame_idx'", "]", "\n", "pose", "=", "self", ".", "_get_pose", "(", "info", ")", "\n", "points", "=", "self", ".", "_get_lidar_points", "(", "info", ",", "pose", ")", "\n", "gt_boxes", ",", "names", ",", "_", "=", "self", ".", "_get_annotations", "(", "info", ",", "pose", ")", "\n", "\n", "num_obj", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "point_indices", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_cpu", "(", "\n", "torch", ".", "from_numpy", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", ",", "torch", ".", "from_numpy", "(", "gt_boxes", ")", "\n", ")", ".", "numpy", "(", ")", "# (nboxes, npoints)", "\n", "\n", "for", "i", "in", "range", "(", "num_obj", ")", ":", "\n", "                ", "tmp_name", "=", "names", "[", "i", "]", ".", "replace", "(", "\"/\"", ",", "\"\"", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "filename", "=", "'%s_%s_%d.bin'", "%", "(", "sample_idx", ",", "tmp_name", ",", "i", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "database_save_path", ",", "filename", ")", "\n", "gt_points", "=", "points", "[", "point_indices", "[", "i", "]", ">", "0", "]", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "gt_boxes", "[", "i", ",", ":", "3", "]", "\n", "with", "open", "(", "filepath", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "gt_points", ".", "tofile", "(", "f", ")", "\n", "\n", "", "if", "(", "used_classes", "is", "None", ")", "or", "names", "[", "i", "]", "in", "used_classes", ":", "\n", "                    ", "db_path", "=", "os", ".", "path", ".", "relpath", "(", "filepath", ",", "self", ".", "root_path", ")", "# gt_database/xxxxx.bin", "\n", "db_info", "=", "{", "'name'", ":", "names", "[", "i", "]", ",", "'path'", ":", "db_path", ",", "'gt_idx'", ":", "i", ",", "\n", "'box3d_lidar'", ":", "gt_boxes", "[", "i", "]", ",", "'num_points_in_gt'", ":", "gt_points", ".", "shape", "[", "0", "]", ",", "\n", "'difficulty'", ":", "-", "1", "}", "\n", "if", "names", "[", "i", "]", "in", "all_db_infos", ":", "\n", "                        ", "all_db_infos", "[", "names", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "else", ":", "\n", "                        ", "all_db_infos", "[", "names", "[", "i", "]", "]", "=", "[", "db_info", "]", "\n", "", "", "", "", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Database %s: %d'", "%", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "\n", "", "with", "open", "(", "db_info_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.evaluation": [[437, 444], ["pandaset_dataset.PandasetDataset.logger.warning"], "methods", ["None"], ["", "", "def", "evaluation", "(", "self", ",", "det_annos", ",", "class_names", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "warning", "(", "'Evaluation is not implemented for Pandaset as there is no official one. '", "+", "\n", "'Returning an empty evaluation result.'", ")", "\n", "ap_result_str", "=", "''", "\n", "ap_dict", "=", "{", "}", "\n", "\n", "return", "ap_result_str", ",", "ap_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.pose_dict_to_numpy": [[20, 33], ["None"], "function", ["None"], ["def", "pose_dict_to_numpy", "(", "pose", ")", ":", "\n", "    ", "\"\"\"\n        Conert pandaset pose dict to a numpy vector in order to pass it through the network\n    \"\"\"", "\n", "pose_np", "=", "[", "pose", "[", "\"position\"", "]", "[", "\"x\"", "]", ",", "\n", "pose", "[", "\"position\"", "]", "[", "\"y\"", "]", ",", "\n", "pose", "[", "\"position\"", "]", "[", "\"z\"", "]", ",", "\n", "pose", "[", "\"heading\"", "]", "[", "\"w\"", "]", ",", "\n", "pose", "[", "\"heading\"", "]", "[", "\"x\"", "]", ",", "\n", "pose", "[", "\"heading\"", "]", "[", "\"y\"", "]", ",", "\n", "pose", "[", "\"heading\"", "]", "[", "\"z\"", "]", "]", "\n", "\n", "return", "pose_np", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.pose_numpy_to_dict": [[35, 50], ["None"], "function", ["None"], ["", "def", "pose_numpy_to_dict", "(", "pose", ")", ":", "\n", "    ", "\"\"\"\n        Conert pandaset pose dict to a numpy vector in order to pass it through the network\n    \"\"\"", "\n", "pose_dict", "=", "{", "'position'", ":", "\n", "{", "'x'", ":", "pose", "[", "0", "]", ",", "\n", "'y'", ":", "pose", "[", "1", "]", ",", "\n", "'z'", ":", "pose", "[", "2", "]", "}", ",", "\n", "'heading'", ":", "\n", "{", "'w'", ":", "pose", "[", "3", "]", ",", "\n", "'x'", ":", "pose", "[", "4", "]", ",", "\n", "'y'", ":", "pose", "[", "5", "]", ",", "\n", "'z'", ":", "pose", "[", "6", "]", "}", "}", "\n", "\n", "return", "pose_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.create_pandaset_infos": [[446, 470], ["pandaset_dataset.PandasetDataset", "print", "pandaset_dataset.PandasetDataset", "pandaset_dataset.PandasetDataset.set_split", "pandaset_dataset.PandasetDataset.create_groundtruth_database", "print", "print", "pandaset_dataset.PandasetDataset.set_split", "pandaset_dataset.PandasetDataset.get_infos", "os.path.join", "print", "os.path.join", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.create_groundtruth_database", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.set_split", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.get_infos"], ["", "", "def", "create_pandaset_infos", "(", "dataset_cfg", ",", "class_names", ",", "data_path", ",", "save_path", ")", ":", "\n", "    ", "\"\"\"\n    Create dataset_infos files in order not to have it in a preprocessed pickle\n    file with the info for each sample\n    See PandasetDataset.get_infos for further details.\n    \"\"\"", "\n", "dataset", "=", "PandasetDataset", "(", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "root_path", "=", "data_path", ",", "training", "=", "False", ")", "\n", "for", "split", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ":", "\n", "        ", "print", "(", "\"---------------- Start to generate {} data infos ---------------\"", ".", "format", "(", "split", ")", ")", "\n", "dataset", ".", "set_split", "(", "split", ")", "\n", "infos", "=", "dataset", ".", "get_infos", "(", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'pandaset_infos_{}.pkl'", ".", "format", "(", "split", ")", ")", "\n", "with", "open", "(", "file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "infos", ",", "f", ")", "\n", "", "print", "(", "\"Pandaset info {} file is saved to {}\"", ".", "format", "(", "split", ",", "file_path", ")", ")", "\n", "\n", "", "print", "(", "'------------Start create groundtruth database for data augmentation-----------'", ")", "\n", "dataset", "=", "PandasetDataset", "(", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "root_path", "=", "data_path", ",", "training", "=", "False", ")", "\n", "dataset", ".", "set_split", "(", "\"train\"", ")", "\n", "dataset", ".", "create_groundtruth_database", "(", "\n", "os", ".", "path", ".", "join", "(", "save_path", ",", "'pandaset_infos_train.pkl'", ")", ",", "\n", "split", "=", "\"train\"", "\n", ")", "\n", "print", "(", "'---------------Data preparation Done---------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.__init__": [[14, 49], ["sampler_cfg.get", "sampler_cfg.PREPARE.items", "sampler_cfg.get", "database_sampler.DataBaseSampler.load_db_to_shared_memory", "x.split", "database_sampler.DataBaseSampler.root_path.resolve", "open", "pickle.load", "getattr", "len", "numpy.arange", "str", "database_sampler.DataBaseSampler.db_infos[].extend", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.load_db_to_shared_memory"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "sampler_cfg", ",", "class_names", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "sampler_cfg", "=", "sampler_cfg", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "db_infos", "=", "{", "}", "\n", "for", "class_name", "in", "class_names", ":", "\n", "            ", "self", ".", "db_infos", "[", "class_name", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "use_shared_memory", "=", "sampler_cfg", ".", "get", "(", "'USE_SHARED_MEMORY'", ",", "False", ")", "\n", "\n", "for", "db_info_path", "in", "sampler_cfg", ".", "DB_INFO_PATH", ":", "\n", "            ", "db_info_path", "=", "self", ".", "root_path", ".", "resolve", "(", ")", "/", "db_info_path", "\n", "with", "open", "(", "str", "(", "db_info_path", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "[", "self", ".", "db_infos", "[", "cur_class", "]", ".", "extend", "(", "infos", "[", "cur_class", "]", ")", "for", "cur_class", "in", "class_names", "]", "\n", "\n", "", "", "for", "func_name", ",", "val", "in", "sampler_cfg", ".", "PREPARE", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "db_infos", "=", "getattr", "(", "self", ",", "func_name", ")", "(", "self", ".", "db_infos", ",", "val", ")", "\n", "\n", "", "self", ".", "gt_database_data_key", "=", "self", ".", "load_db_to_shared_memory", "(", ")", "if", "self", ".", "use_shared_memory", "else", "None", "\n", "\n", "self", ".", "sample_groups", "=", "{", "}", "\n", "self", ".", "sample_class_num", "=", "{", "}", "\n", "self", ".", "limit_whole_scene", "=", "sampler_cfg", ".", "get", "(", "'LIMIT_WHOLE_SCENE'", ",", "False", ")", "\n", "\n", "for", "x", "in", "sampler_cfg", ".", "SAMPLE_GROUPS", ":", "\n", "            ", "class_name", ",", "sample_num", "=", "x", ".", "split", "(", "':'", ")", "\n", "if", "class_name", "not", "in", "class_names", ":", "\n", "                ", "continue", "\n", "", "self", ".", "sample_class_num", "[", "class_name", "]", "=", "sample_num", "\n", "self", ".", "sample_groups", "[", "class_name", "]", "=", "{", "\n", "'sample_num'", ":", "sample_num", ",", "\n", "'pointer'", ":", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ",", "\n", "'indices'", ":", "np", ".", "arange", "(", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.__getstate__": [[51, 55], ["dict"], "methods", ["None"], ["", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "d", "[", "'logger'", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.__setstate__": [[56, 58], ["database_sampler.DataBaseSampler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.__del__": [[59, 70], ["database_sampler.DataBaseSampler.logger.info", "utils.common_utils.get_dist_info", "database_sampler.DataBaseSampler.logger.info", "os.path.exists", "SharedArray.delete", "torch.barrier"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_dist_info"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_shared_memory", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Deleting GT database from shared memory'", ")", "\n", "cur_rank", ",", "num_gpus", "=", "common_utils", ".", "get_dist_info", "(", ")", "\n", "sa_key", "=", "self", ".", "sampler_cfg", ".", "DB_DATA_PATH", "[", "0", "]", "\n", "if", "cur_rank", "%", "num_gpus", "==", "0", "and", "os", ".", "path", ".", "exists", "(", "f\"/dev/shm/{sa_key}\"", ")", ":", "\n", "                ", "SharedArray", ".", "delete", "(", "f\"shm://{sa_key}\"", ")", "\n", "\n", "", "if", "num_gpus", ">", "1", ":", "\n", "                ", "dist", ".", "barrier", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'GT database has been removed from shared memory'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.load_db_to_shared_memory": [[71, 87], ["database_sampler.DataBaseSampler.logger.info", "utils.common_utils.get_dist_info", "database_sampler.DataBaseSampler.logger.info", "database_sampler.DataBaseSampler.sampler_cfg.DB_DATA_PATH.__len__", "database_sampler.DataBaseSampler.root_path.resolve", "numpy.load", "utils.common_utils.sa_create", "torch.barrier", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_dist_info", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.sa_create"], ["", "", "def", "load_db_to_shared_memory", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Loading GT database to shared memory'", ")", "\n", "cur_rank", ",", "world_size", ",", "num_gpus", "=", "common_utils", ".", "get_dist_info", "(", "return_gpu_per_machine", "=", "True", ")", "\n", "\n", "assert", "self", ".", "sampler_cfg", ".", "DB_DATA_PATH", ".", "__len__", "(", ")", "==", "1", ",", "'Current only support single DB_DATA'", "\n", "db_data_path", "=", "self", ".", "root_path", ".", "resolve", "(", ")", "/", "self", ".", "sampler_cfg", ".", "DB_DATA_PATH", "[", "0", "]", "\n", "sa_key", "=", "self", ".", "sampler_cfg", ".", "DB_DATA_PATH", "[", "0", "]", "\n", "\n", "if", "cur_rank", "%", "num_gpus", "==", "0", "and", "not", "os", ".", "path", ".", "exists", "(", "f\"/dev/shm/{sa_key}\"", ")", ":", "\n", "            ", "gt_database_data", "=", "np", ".", "load", "(", "db_data_path", ")", "\n", "common_utils", ".", "sa_create", "(", "f\"shm://{sa_key}\"", ",", "gt_database_data", ")", "\n", "\n", "", "if", "num_gpus", ">", "1", ":", "\n", "            ", "dist", ".", "barrier", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'GT database has been saved to shared memory'", ")", "\n", "return", "sa_key", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.filter_by_difficulty": [[88, 99], ["db_infos.items", "len", "database_sampler.DataBaseSampler.logger.info", "len"], "methods", ["None"], ["", "def", "filter_by_difficulty", "(", "self", ",", "db_infos", ",", "removed_difficulty", ")", ":", "\n", "        ", "new_db_infos", "=", "{", "}", "\n", "for", "key", ",", "dinfos", "in", "db_infos", ".", "items", "(", ")", ":", "\n", "            ", "pre_len", "=", "len", "(", "dinfos", ")", "\n", "new_db_infos", "[", "key", "]", "=", "[", "\n", "info", "for", "info", "in", "dinfos", "\n", "if", "info", "[", "'difficulty'", "]", "not", "in", "removed_difficulty", "\n", "]", "\n", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Database filter by difficulty %s: %d => %d'", "%", "(", "key", ",", "pre_len", ",", "len", "(", "new_db_infos", "[", "key", "]", ")", ")", ")", "\n", "", "", "return", "new_db_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.filter_by_min_points": [[100, 116], ["name_num.split", "int", "db_infos.keys", "database_sampler.DataBaseSampler.logger.info", "filtered_infos.append", "len", "len"], "methods", ["None"], ["", "def", "filter_by_min_points", "(", "self", ",", "db_infos", ",", "min_gt_points_list", ")", ":", "\n", "        ", "for", "name_num", "in", "min_gt_points_list", ":", "\n", "            ", "name", ",", "min_num", "=", "name_num", ".", "split", "(", "':'", ")", "\n", "min_num", "=", "int", "(", "min_num", ")", "\n", "if", "min_num", ">", "0", "and", "name", "in", "db_infos", ".", "keys", "(", ")", ":", "\n", "                ", "filtered_infos", "=", "[", "]", "\n", "for", "info", "in", "db_infos", "[", "name", "]", ":", "\n", "                    ", "if", "info", "[", "'num_points_in_gt'", "]", ">=", "min_num", ":", "\n", "                        ", "filtered_infos", ".", "append", "(", "info", ")", "\n", "\n", "", "", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "'Database filter by min points %s: %d => %d'", "%", "\n", "(", "name", ",", "len", "(", "db_infos", "[", "name", "]", ")", ",", "len", "(", "filtered_infos", ")", ")", ")", "\n", "", "db_infos", "[", "name", "]", "=", "filtered_infos", "\n", "\n", "", "", "return", "db_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.sample_with_fixed_number": [[117, 135], ["int", "len", "numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "sample_with_fixed_number", "(", "self", ",", "class_name", ",", "sample_group", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            class_name:\n            sample_group:\n        Returns:\n\n        \"\"\"", "\n", "sample_num", ",", "pointer", ",", "indices", "=", "int", "(", "sample_group", "[", "'sample_num'", "]", ")", ",", "sample_group", "[", "'pointer'", "]", ",", "sample_group", "[", "'indices'", "]", "\n", "if", "pointer", ">=", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ")", "\n", "pointer", "=", "0", "\n", "\n", "", "sampled_dict", "=", "[", "self", ".", "db_infos", "[", "class_name", "]", "[", "idx", "]", "for", "idx", "in", "indices", "[", "pointer", ":", "pointer", "+", "sample_num", "]", "]", "\n", "pointer", "+=", "sample_num", "\n", "sample_group", "[", "'pointer'", "]", "=", "pointer", "\n", "sample_group", "[", "'indices'", "]", "=", "indices", "\n", "return", "sampled_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.put_boxes_on_road_planes": [[136, 155], ["calib.lidar_to_rect", "calib.rect_to_lidar"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.rect_to_lidar"], ["", "@", "staticmethod", "\n", "def", "put_boxes_on_road_planes", "(", "gt_boxes", ",", "road_planes", ",", "calib", ")", ":", "\n", "        ", "\"\"\"\n        Only validate in KITTIDataset\n        Args:\n            gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n            road_planes: [a, b, c, d]\n            calib:\n\n        Returns:\n        \"\"\"", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "road_planes", "\n", "center_cam", "=", "calib", ".", "lidar_to_rect", "(", "gt_boxes", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "cur_height_cam", "=", "(", "-", "d", "-", "a", "*", "center_cam", "[", ":", ",", "0", "]", "-", "c", "*", "center_cam", "[", ":", ",", "2", "]", ")", "/", "b", "\n", "center_cam", "[", ":", ",", "1", "]", "=", "cur_height_cam", "\n", "cur_lidar_height", "=", "calib", ".", "rect_to_lidar", "(", "center_cam", ")", "[", ":", ",", "2", "]", "\n", "mv_height", "=", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "5", "]", "/", "2", "-", "cur_lidar_height", "\n", "gt_boxes", "[", ":", ",", "2", "]", "-=", "mv_height", "# lidar view", "\n", "return", "gt_boxes", ",", "mv_height", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.add_sampled_boxes_to_scene": [[156, 206], ["database_sampler.DataBaseSampler.sampler_cfg.get", "enumerate", "numpy.concatenate", "numpy.array", "utils.box_utils.enlarge_box3d", "utils.box_utils.remove_points_in_boxes3d", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "database_sampler.DataBaseSampler.put_boxes_on_road_planes", "data_dict.pop", "data_dict.pop", "SharedArray.attach", "SharedArray.attach.setflags", "database_sampler.DataBaseSampler.sampler_cfg.get", "obj_points_list.append", "copy.deepcopy", "numpy.fromfile().reshape", "numpy.fromfile", "str"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.enlarge_box3d", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.remove_points_in_boxes3d", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.put_boxes_on_road_planes"], ["", "def", "add_sampled_boxes_to_scene", "(", "self", ",", "data_dict", ",", "sampled_gt_boxes", ",", "total_valid_sampled_dict", ")", ":", "\n", "        ", "gt_boxes_mask", "=", "data_dict", "[", "'gt_boxes_mask'", "]", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "gt_boxes_mask", "]", "\n", "gt_names", "=", "data_dict", "[", "'gt_names'", "]", "[", "gt_boxes_mask", "]", "\n", "points", "=", "data_dict", "[", "'points'", "]", "\n", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'USE_ROAD_PLANE'", ",", "False", ")", ":", "\n", "            ", "sampled_gt_boxes", ",", "mv_height", "=", "self", ".", "put_boxes_on_road_planes", "(", "\n", "sampled_gt_boxes", ",", "data_dict", "[", "'road_plane'", "]", ",", "data_dict", "[", "'calib'", "]", "\n", ")", "\n", "data_dict", ".", "pop", "(", "'calib'", ")", "\n", "data_dict", ".", "pop", "(", "'road_plane'", ")", "\n", "\n", "", "obj_points_list", "=", "[", "]", "\n", "if", "self", ".", "use_shared_memory", ":", "\n", "            ", "gt_database_data", "=", "SharedArray", ".", "attach", "(", "f\"shm://{self.gt_database_data_key}\"", ")", "\n", "gt_database_data", ".", "setflags", "(", "write", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "gt_database_data", "=", "None", "\n", "\n", "", "for", "idx", ",", "info", "in", "enumerate", "(", "total_valid_sampled_dict", ")", ":", "\n", "            ", "if", "self", ".", "use_shared_memory", ":", "\n", "                ", "start_offset", ",", "end_offset", "=", "info", "[", "'global_data_offset'", "]", "\n", "obj_points", "=", "copy", ".", "deepcopy", "(", "gt_database_data", "[", "start_offset", ":", "end_offset", "]", ")", "\n", "", "else", ":", "\n", "                ", "file_path", "=", "self", ".", "root_path", "/", "info", "[", "'path'", "]", "\n", "obj_points", "=", "np", ".", "fromfile", "(", "str", "(", "file_path", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "self", ".", "sampler_cfg", ".", "NUM_POINT_FEATURES", "]", ")", "\n", "\n", "", "obj_points", "[", ":", ",", ":", "3", "]", "+=", "info", "[", "'box3d_lidar'", "]", "[", ":", "3", "]", "\n", "\n", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'USE_ROAD_PLANE'", ",", "False", ")", ":", "\n", "# mv height", "\n", "                ", "obj_points", "[", ":", ",", "2", "]", "-=", "mv_height", "[", "idx", "]", "\n", "\n", "", "obj_points_list", ".", "append", "(", "obj_points", ")", "\n", "\n", "", "obj_points", "=", "np", ".", "concatenate", "(", "obj_points_list", ",", "axis", "=", "0", ")", "\n", "sampled_gt_names", "=", "np", ".", "array", "(", "[", "x", "[", "'name'", "]", "for", "x", "in", "total_valid_sampled_dict", "]", ")", "\n", "\n", "large_sampled_gt_boxes", "=", "box_utils", ".", "enlarge_box3d", "(", "\n", "sampled_gt_boxes", "[", ":", ",", "0", ":", "7", "]", ",", "extra_width", "=", "self", ".", "sampler_cfg", ".", "REMOVE_EXTRA_WIDTH", "\n", ")", "\n", "points", "=", "box_utils", ".", "remove_points_in_boxes3d", "(", "points", ",", "large_sampled_gt_boxes", ")", "\n", "points", "=", "np", ".", "concatenate", "(", "[", "obj_points", ",", "points", "]", ",", "axis", "=", "0", ")", "\n", "gt_names", "=", "np", ".", "concatenate", "(", "[", "gt_names", ",", "sampled_gt_names", "]", ",", "axis", "=", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "gt_boxes", ",", "sampled_gt_boxes", "]", ",", "axis", "=", "0", ")", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'gt_names'", "]", "=", "gt_names", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.__call__": [[207, 249], ["data_dict[].astype", "database_sampler.DataBaseSampler.sample_groups.items", "database_sampler.DataBaseSampler.pop", "total_valid_sampled_dict.__len__", "database_sampler.DataBaseSampler.add_sampled_boxes_to_scene", "numpy.sum", "str", "int", "database_sampler.DataBaseSampler.sample_with_fixed_number", "numpy.stack().astype", "database_sampler.DataBaseSampler.sampler_cfg.get", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "numpy.concatenate", "total_valid_sampled_dict.extend", "utils.box_utils.boxes3d_kitti_fakelidar_to_lidar", "int", "numpy.stack", "range", "range", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu.max", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu.max"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.add_sampled_boxes_to_scene", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.database_sampler.DataBaseSampler.sample_with_fixed_number", "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_kitti_fakelidar_to_lidar"], ["", "def", "__call__", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "\n", "gt_names", "=", "data_dict", "[", "'gt_names'", "]", ".", "astype", "(", "str", ")", "\n", "existed_boxes", "=", "gt_boxes", "\n", "total_valid_sampled_dict", "=", "[", "]", "\n", "for", "class_name", ",", "sample_group", "in", "self", ".", "sample_groups", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "limit_whole_scene", ":", "\n", "                ", "num_gt", "=", "np", ".", "sum", "(", "class_name", "==", "gt_names", ")", "\n", "sample_group", "[", "'sample_num'", "]", "=", "str", "(", "int", "(", "self", ".", "sample_class_num", "[", "class_name", "]", ")", "-", "num_gt", ")", "\n", "", "if", "int", "(", "sample_group", "[", "'sample_num'", "]", ")", ">", "0", ":", "\n", "                ", "sampled_dict", "=", "self", ".", "sample_with_fixed_number", "(", "class_name", ",", "sample_group", ")", "\n", "\n", "sampled_boxes", "=", "np", ".", "stack", "(", "[", "x", "[", "'box3d_lidar'", "]", "for", "x", "in", "sampled_dict", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'DATABASE_WITH_FAKELIDAR'", ",", "False", ")", ":", "\n", "                    ", "sampled_boxes", "=", "box_utils", ".", "boxes3d_kitti_fakelidar_to_lidar", "(", "sampled_boxes", ")", "\n", "\n", "", "iou1", "=", "iou3d_nms_utils", ".", "boxes_bev_iou_cpu", "(", "sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ",", "existed_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "iou2", "=", "iou3d_nms_utils", ".", "boxes_bev_iou_cpu", "(", "sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ",", "sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "iou2", "[", "range", "(", "sampled_boxes", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "sampled_boxes", ".", "shape", "[", "0", "]", ")", "]", "=", "0", "\n", "iou1", "=", "iou1", "if", "iou1", ".", "shape", "[", "1", "]", ">", "0", "else", "iou2", "\n", "valid_mask", "=", "(", "(", "iou1", ".", "max", "(", "axis", "=", "1", ")", "+", "iou2", ".", "max", "(", "axis", "=", "1", ")", ")", "==", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "valid_sampled_dict", "=", "[", "sampled_dict", "[", "x", "]", "for", "x", "in", "valid_mask", "]", "\n", "valid_sampled_boxes", "=", "sampled_boxes", "[", "valid_mask", "]", "\n", "\n", "existed_boxes", "=", "np", ".", "concatenate", "(", "(", "existed_boxes", ",", "valid_sampled_boxes", ")", ",", "axis", "=", "0", ")", "\n", "total_valid_sampled_dict", ".", "extend", "(", "valid_sampled_dict", ")", "\n", "\n", "", "", "sampled_gt_boxes", "=", "existed_boxes", "[", "gt_boxes", ".", "shape", "[", "0", "]", ":", ",", ":", "]", "\n", "if", "total_valid_sampled_dict", ".", "__len__", "(", ")", ">", "0", ":", "\n", "            ", "data_dict", "=", "self", ".", "add_sampled_boxes_to_scene", "(", "data_dict", ",", "sampled_gt_boxes", ",", "total_valid_sampled_dict", ")", "\n", "\n", "", "data_dict", ".", "pop", "(", "'gt_boxes_mask'", ")", "\n", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.random_flip_along_x": [[8, 25], ["numpy.random.choice"], "function", ["None"], ["def", "random_flip_along_x", "(", "gt_boxes", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7 + C), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C)\n    Returns:\n    \"\"\"", "\n", "enable", "=", "np", ".", "random", ".", "choice", "(", "[", "False", ",", "True", "]", ",", "replace", "=", "False", ",", "p", "=", "[", "0.5", ",", "0.5", "]", ")", "\n", "if", "enable", ":", "\n", "        ", "gt_boxes", "[", ":", ",", "1", "]", "=", "-", "gt_boxes", "[", ":", ",", "1", "]", "\n", "gt_boxes", "[", ":", ",", "6", "]", "=", "-", "gt_boxes", "[", ":", ",", "6", "]", "\n", "points", "[", ":", ",", "1", "]", "=", "-", "points", "[", ":", ",", "1", "]", "\n", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", ">", "7", ":", "\n", "            ", "gt_boxes", "[", ":", ",", "8", "]", "=", "-", "gt_boxes", "[", ":", ",", "8", "]", "\n", "\n", "", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.random_flip_along_y": [[27, 44], ["numpy.random.choice"], "function", ["None"], ["", "def", "random_flip_along_y", "(", "gt_boxes", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7 + C), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C)\n    Returns:\n    \"\"\"", "\n", "enable", "=", "np", ".", "random", ".", "choice", "(", "[", "False", ",", "True", "]", ",", "replace", "=", "False", ",", "p", "=", "[", "0.5", ",", "0.5", "]", ")", "\n", "if", "enable", ":", "\n", "        ", "gt_boxes", "[", ":", ",", "0", "]", "=", "-", "gt_boxes", "[", ":", ",", "0", "]", "\n", "gt_boxes", "[", ":", ",", "6", "]", "=", "-", "(", "gt_boxes", "[", ":", ",", "6", "]", "+", "np", ".", "pi", ")", "\n", "points", "[", ":", ",", "0", "]", "=", "-", "points", "[", ":", ",", "0", "]", "\n", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", ">", "7", ":", "\n", "            ", "gt_boxes", "[", ":", ",", "7", "]", "=", "-", "gt_boxes", "[", ":", ",", "7", "]", "\n", "\n", "", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.global_rotation": [[46, 65], ["numpy.random.uniform", "utils.common_utils.rotate_points_along_z", "utils.common_utils.rotate_points_along_z", "numpy.array", "numpy.array", "utils.common_utils.rotate_points_along_z", "numpy.array", "numpy.hstack", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "global_rotation", "(", "gt_boxes", ",", "points", ",", "rot_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7 + C), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C),\n        rot_range: [min, max]\n    Returns:\n    \"\"\"", "\n", "noise_rotation", "=", "np", ".", "random", ".", "uniform", "(", "rot_range", "[", "0", "]", ",", "rot_range", "[", "1", "]", ")", "\n", "points", "=", "common_utils", ".", "rotate_points_along_z", "(", "points", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", ")", "[", "0", "]", "\n", "gt_boxes", "[", ":", ",", "0", ":", "3", "]", "=", "common_utils", ".", "rotate_points_along_z", "(", "gt_boxes", "[", "np", ".", "newaxis", ",", ":", ",", "0", ":", "3", "]", ",", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", ")", "[", "0", "]", "\n", "gt_boxes", "[", ":", ",", "6", "]", "+=", "noise_rotation", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", ">", "7", ":", "\n", "        ", "gt_boxes", "[", ":", ",", "7", ":", "9", "]", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "np", ".", "hstack", "(", "(", "gt_boxes", "[", ":", ",", "7", ":", "9", "]", ",", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "\n", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", "\n", ")", "[", "0", "]", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.global_scaling": [[67, 82], ["numpy.random.uniform"], "function", ["None"], ["", "def", "global_scaling", "(", "gt_boxes", ",", "points", ",", "scale_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading]\n        points: (M, 3 + C),\n        scale_range: [min, max]\n    Returns:\n    \"\"\"", "\n", "if", "scale_range", "[", "1", "]", "-", "scale_range", "[", "0", "]", "<", "1e-3", ":", "\n", "        ", "return", "gt_boxes", ",", "points", "\n", "", "noise_scale", "=", "np", ".", "random", ".", "uniform", "(", "scale_range", "[", "0", "]", ",", "scale_range", "[", "1", "]", ")", "\n", "points", "[", ":", ",", ":", "3", "]", "*=", "noise_scale", "\n", "gt_boxes", "[", ":", ",", ":", "6", "]", "*=", "noise_scale", "\n", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.random_image_flip_horizontal": [[84, 122], ["numpy.random.choice", "numpy.fliplr", "numpy.fliplr", "copy.copy", "calib.lidar_to_img", "calib.img_to_rect", "calib.rect_to_lidar"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.lidar_to_img", "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.img_to_rect", "home.repos.pwc.inspect_result.dschinagl_occam.utils.calibration_kitti.Calibration.rect_to_lidar"], ["", "def", "random_image_flip_horizontal", "(", "image", ",", "depth_map", ",", "gt_boxes", ",", "calib", ")", ":", "\n", "    ", "\"\"\"\n    Performs random horizontal flip augmentation\n    Args:\n        image: (H_image, W_image, 3), Image\n        depth_map: (H_depth, W_depth), Depth map\n        gt_boxes: (N, 7), 3D box labels in LiDAR coordinates [x, y, z, w, l, h, ry]\n        calib: calibration.Calibration, Calibration object\n    Returns:\n        aug_image: (H_image, W_image, 3), Augmented image\n        aug_depth_map: (H_depth, W_depth), Augmented depth map\n        aug_gt_boxes: (N, 7), Augmented 3D box labels in LiDAR coordinates [x, y, z, w, l, h, ry]\n    \"\"\"", "\n", "# Randomly augment with 50% chance", "\n", "enable", "=", "np", ".", "random", ".", "choice", "(", "[", "False", ",", "True", "]", ",", "replace", "=", "False", ",", "p", "=", "[", "0.5", ",", "0.5", "]", ")", "\n", "\n", "if", "enable", ":", "\n", "# Flip images", "\n", "        ", "aug_image", "=", "np", ".", "fliplr", "(", "image", ")", "\n", "aug_depth_map", "=", "np", ".", "fliplr", "(", "depth_map", ")", "\n", "\n", "# Flip 3D gt_boxes by flipping the centroids in image space", "\n", "aug_gt_boxes", "=", "copy", ".", "copy", "(", "gt_boxes", ")", "\n", "locations", "=", "aug_gt_boxes", "[", ":", ",", ":", "3", "]", "\n", "img_pts", ",", "img_depth", "=", "calib", ".", "lidar_to_img", "(", "locations", ")", "\n", "W", "=", "image", ".", "shape", "[", "1", "]", "\n", "img_pts", "[", ":", ",", "0", "]", "=", "W", "-", "img_pts", "[", ":", ",", "0", "]", "\n", "pts_rect", "=", "calib", ".", "img_to_rect", "(", "u", "=", "img_pts", "[", ":", ",", "0", "]", ",", "v", "=", "img_pts", "[", ":", ",", "1", "]", ",", "depth_rect", "=", "img_depth", ")", "\n", "pts_lidar", "=", "calib", ".", "rect_to_lidar", "(", "pts_rect", ")", "\n", "aug_gt_boxes", "[", ":", ",", ":", "3", "]", "=", "pts_lidar", "\n", "aug_gt_boxes", "[", ":", ",", "6", "]", "=", "-", "1", "*", "aug_gt_boxes", "[", ":", ",", "6", "]", "\n", "\n", "", "else", ":", "\n", "        ", "aug_image", "=", "image", "\n", "aug_depth_map", "=", "depth_map", "\n", "aug_gt_boxes", "=", "gt_boxes", "\n", "\n", "", "return", "aug_image", ",", "aug_depth_map", ",", "aug_gt_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.random_translation_along_x": [[124, 141], ["numpy.random.normal"], "function", ["None"], ["", "def", "random_translation_along_x", "(", "gt_boxes", ",", "points", ",", "offset_std", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C),\n        offset_std: float\n    Returns:\n    \"\"\"", "\n", "offset", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "offset_std", ",", "1", ")", "\n", "\n", "points", "[", ":", ",", "0", "]", "+=", "offset", "\n", "gt_boxes", "[", ":", ",", "0", "]", "+=", "offset", "\n", "\n", "# if gt_boxes.shape[1] > 7:", "\n", "#     gt_boxes[:, 7] += offset", "\n", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.random_translation_along_y": [[143, 160], ["numpy.random.normal"], "function", ["None"], ["", "def", "random_translation_along_y", "(", "gt_boxes", ",", "points", ",", "offset_std", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C),\n        offset_std: float\n    Returns:\n    \"\"\"", "\n", "offset", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "offset_std", ",", "1", ")", "\n", "\n", "points", "[", ":", ",", "1", "]", "+=", "offset", "\n", "gt_boxes", "[", ":", ",", "1", "]", "+=", "offset", "\n", "\n", "# if gt_boxes.shape[1] > 8:", "\n", "#     gt_boxes[:, 8] += offset", "\n", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.random_translation_along_z": [[162, 176], ["numpy.random.normal"], "function", ["None"], ["", "def", "random_translation_along_z", "(", "gt_boxes", ",", "points", ",", "offset_std", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C),\n        offset_std: float\n    Returns:\n    \"\"\"", "\n", "offset", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "offset_std", ",", "1", ")", "\n", "\n", "points", "[", ":", ",", "2", "]", "+=", "offset", "\n", "gt_boxes", "[", ":", ",", "2", "]", "+=", "offset", "\n", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.random_local_translation_along_x": [[178, 199], ["enumerate", "numpy.random.uniform", "augmentor_utils.get_points_in_box"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box"], ["", "def", "random_local_translation_along_x", "(", "gt_boxes", ",", "points", ",", "offset_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C),\n        offset_range: [min max]]\n    Returns:\n    \"\"\"", "\n", "# augs = {}", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "gt_boxes", ")", ":", "\n", "        ", "offset", "=", "np", ".", "random", ".", "uniform", "(", "offset_range", "[", "0", "]", ",", "offset_range", "[", "1", "]", ")", "\n", "# augs[f'object_{idx}'] = offset", "\n", "points_in_box", ",", "mask", "=", "get_points_in_box", "(", "points", ",", "box", ")", "\n", "points", "[", "mask", ",", "0", "]", "+=", "offset", "\n", "\n", "gt_boxes", "[", "idx", ",", "0", "]", "+=", "offset", "\n", "\n", "# if gt_boxes.shape[1] > 7:", "\n", "#     gt_boxes[idx, 7] += offset", "\n", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.random_local_translation_along_y": [[201, 222], ["enumerate", "numpy.random.uniform", "augmentor_utils.get_points_in_box"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box"], ["", "def", "random_local_translation_along_y", "(", "gt_boxes", ",", "points", ",", "offset_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C),\n        offset_range: [min max]]\n    Returns:\n    \"\"\"", "\n", "# augs = {}", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "gt_boxes", ")", ":", "\n", "        ", "offset", "=", "np", ".", "random", ".", "uniform", "(", "offset_range", "[", "0", "]", ",", "offset_range", "[", "1", "]", ")", "\n", "# augs[f'object_{idx}'] = offset", "\n", "points_in_box", ",", "mask", "=", "get_points_in_box", "(", "points", ",", "box", ")", "\n", "points", "[", "mask", ",", "1", "]", "+=", "offset", "\n", "\n", "gt_boxes", "[", "idx", ",", "1", "]", "+=", "offset", "\n", "\n", "# if gt_boxes.shape[1] > 8:", "\n", "#     gt_boxes[idx, 8] += offset", "\n", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.random_local_translation_along_z": [[224, 242], ["enumerate", "numpy.random.uniform", "augmentor_utils.get_points_in_box"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box"], ["", "def", "random_local_translation_along_z", "(", "gt_boxes", ",", "points", ",", "offset_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C),\n        offset_range: [min max]]\n    Returns:\n    \"\"\"", "\n", "# augs = {}", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "gt_boxes", ")", ":", "\n", "        ", "offset", "=", "np", ".", "random", ".", "uniform", "(", "offset_range", "[", "0", "]", ",", "offset_range", "[", "1", "]", ")", "\n", "# augs[f'object_{idx}'] = offset", "\n", "points_in_box", ",", "mask", "=", "get_points_in_box", "(", "points", ",", "box", ")", "\n", "points", "[", "mask", ",", "2", "]", "+=", "offset", "\n", "\n", "gt_boxes", "[", "idx", ",", "2", "]", "+=", "offset", "\n", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.global_frustum_dropout_top": [[244, 259], ["numpy.random.uniform", "numpy.max", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "global_frustum_dropout_top", "(", "gt_boxes", ",", "points", ",", "intensity_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]],\n        points: (M, 3 + C),\n        intensity: [min, max]\n    Returns:\n    \"\"\"", "\n", "intensity", "=", "np", ".", "random", ".", "uniform", "(", "intensity_range", "[", "0", "]", ",", "intensity_range", "[", "1", "]", ")", "\n", "# threshold = max - length * uniform(0 ~ 0.2)", "\n", "threshold", "=", "np", ".", "max", "(", "points", "[", ":", ",", "2", "]", ")", "-", "intensity", "*", "(", "np", ".", "max", "(", "points", "[", ":", ",", "2", "]", ")", "-", "np", ".", "min", "(", "points", "[", ":", ",", "2", "]", ")", ")", "\n", "\n", "points", "=", "points", "[", "points", "[", ":", ",", "2", "]", "<", "threshold", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "gt_boxes", "[", ":", ",", "2", "]", "<", "threshold", "]", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.global_frustum_dropout_bottom": [[261, 276], ["numpy.random.uniform", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "global_frustum_dropout_bottom", "(", "gt_boxes", ",", "points", ",", "intensity_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]],\n        points: (M, 3 + C),\n        intensity: [min, max]\n    Returns:\n    \"\"\"", "\n", "intensity", "=", "np", ".", "random", ".", "uniform", "(", "intensity_range", "[", "0", "]", ",", "intensity_range", "[", "1", "]", ")", "\n", "\n", "threshold", "=", "np", ".", "min", "(", "points", "[", ":", ",", "2", "]", ")", "+", "intensity", "*", "(", "np", ".", "max", "(", "points", "[", ":", ",", "2", "]", ")", "-", "np", ".", "min", "(", "points", "[", ":", ",", "2", "]", ")", ")", "\n", "points", "=", "points", "[", "points", "[", ":", ",", "2", "]", ">", "threshold", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "gt_boxes", "[", ":", ",", "2", "]", ">", "threshold", "]", "\n", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.global_frustum_dropout_left": [[278, 293], ["numpy.random.uniform", "numpy.max", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "global_frustum_dropout_left", "(", "gt_boxes", ",", "points", ",", "intensity_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]],\n        points: (M, 3 + C),\n        intensity: [min, max]\n    Returns:\n    \"\"\"", "\n", "intensity", "=", "np", ".", "random", ".", "uniform", "(", "intensity_range", "[", "0", "]", ",", "intensity_range", "[", "1", "]", ")", "\n", "\n", "threshold", "=", "np", ".", "max", "(", "points", "[", ":", ",", "1", "]", ")", "-", "intensity", "*", "(", "np", ".", "max", "(", "points", "[", ":", ",", "1", "]", ")", "-", "np", ".", "min", "(", "points", "[", ":", ",", "1", "]", ")", ")", "\n", "points", "=", "points", "[", "points", "[", ":", ",", "1", "]", "<", "threshold", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "gt_boxes", "[", ":", ",", "1", "]", "<", "threshold", "]", "\n", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.global_frustum_dropout_right": [[295, 310], ["numpy.random.uniform", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "global_frustum_dropout_right", "(", "gt_boxes", ",", "points", ",", "intensity_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]],\n        points: (M, 3 + C),\n        intensity: [min, max]\n    Returns:\n    \"\"\"", "\n", "intensity", "=", "np", ".", "random", ".", "uniform", "(", "intensity_range", "[", "0", "]", ",", "intensity_range", "[", "1", "]", ")", "\n", "\n", "threshold", "=", "np", ".", "min", "(", "points", "[", ":", ",", "1", "]", ")", "+", "intensity", "*", "(", "np", ".", "max", "(", "points", "[", ":", ",", "1", "]", ")", "-", "np", ".", "min", "(", "points", "[", ":", ",", "1", "]", ")", ")", "\n", "points", "=", "points", "[", "points", "[", ":", ",", "1", "]", ">", "threshold", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "gt_boxes", "[", ":", ",", "1", "]", ">", "threshold", "]", "\n", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_scaling": [[312, 344], ["enumerate", "numpy.random.uniform", "augmentor_utils.get_points_in_box"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box"], ["", "def", "local_scaling", "(", "gt_boxes", ",", "points", ",", "scale_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading]\n        points: (M, 3 + C),\n        scale_range: [min, max]\n    Returns:\n    \"\"\"", "\n", "if", "scale_range", "[", "1", "]", "-", "scale_range", "[", "0", "]", "<", "1e-3", ":", "\n", "        ", "return", "gt_boxes", ",", "points", "\n", "\n", "# augs = {}", "\n", "", "for", "idx", ",", "box", "in", "enumerate", "(", "gt_boxes", ")", ":", "\n", "        ", "noise_scale", "=", "np", ".", "random", ".", "uniform", "(", "scale_range", "[", "0", "]", ",", "scale_range", "[", "1", "]", ")", "\n", "# augs[f'object_{idx}'] = noise_scale", "\n", "points_in_box", ",", "mask", "=", "get_points_in_box", "(", "points", ",", "box", ")", "\n", "\n", "# tranlation to axis center", "\n", "points", "[", "mask", ",", "0", "]", "-=", "box", "[", "0", "]", "\n", "points", "[", "mask", ",", "1", "]", "-=", "box", "[", "1", "]", "\n", "points", "[", "mask", ",", "2", "]", "-=", "box", "[", "2", "]", "\n", "\n", "# apply scaling", "\n", "points", "[", "mask", ",", ":", "3", "]", "*=", "noise_scale", "\n", "\n", "# tranlation back to original position", "\n", "points", "[", "mask", ",", "0", "]", "+=", "box", "[", "0", "]", "\n", "points", "[", "mask", ",", "1", "]", "+=", "box", "[", "1", "]", "\n", "points", "[", "mask", ",", "2", "]", "+=", "box", "[", "2", "]", "\n", "\n", "gt_boxes", "[", "idx", ",", "3", ":", "6", "]", "*=", "noise_scale", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_rotation": [[346, 392], ["enumerate", "numpy.random.uniform", "augmentor_utils.get_points_in_box", "utils.common_utils.rotate_points_along_z", "numpy.array", "utils.common_utils.rotate_points_along_z", "numpy.array", "utils.common_utils.rotate_points_along_z", "numpy.array", "numpy.hstack", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "local_rotation", "(", "gt_boxes", ",", "points", ",", "rot_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C),\n        rot_range: [min, max]\n    Returns:\n    \"\"\"", "\n", "# augs = {}", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "gt_boxes", ")", ":", "\n", "        ", "noise_rotation", "=", "np", ".", "random", ".", "uniform", "(", "rot_range", "[", "0", "]", ",", "rot_range", "[", "1", "]", ")", "\n", "# augs[f'object_{idx}'] = noise_rotation", "\n", "points_in_box", ",", "mask", "=", "get_points_in_box", "(", "points", ",", "box", ")", "\n", "\n", "centroid_x", "=", "box", "[", "0", "]", "\n", "centroid_y", "=", "box", "[", "1", "]", "\n", "centroid_z", "=", "box", "[", "2", "]", "\n", "\n", "# tranlation to axis center", "\n", "points", "[", "mask", ",", "0", "]", "-=", "centroid_x", "\n", "points", "[", "mask", ",", "1", "]", "-=", "centroid_y", "\n", "points", "[", "mask", ",", "2", "]", "-=", "centroid_z", "\n", "box", "[", "0", "]", "-=", "centroid_x", "\n", "box", "[", "1", "]", "-=", "centroid_y", "\n", "box", "[", "2", "]", "-=", "centroid_z", "\n", "\n", "# apply rotation", "\n", "points", "[", "mask", ",", ":", "]", "=", "common_utils", ".", "rotate_points_along_z", "(", "points", "[", "np", ".", "newaxis", ",", "mask", ",", ":", "]", ",", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", ")", "[", "0", "]", "\n", "box", "[", "0", ":", "3", "]", "=", "common_utils", ".", "rotate_points_along_z", "(", "box", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "0", ":", "3", "]", ",", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "# tranlation back to original position", "\n", "points", "[", "mask", ",", "0", "]", "+=", "centroid_x", "\n", "points", "[", "mask", ",", "1", "]", "+=", "centroid_y", "\n", "points", "[", "mask", ",", "2", "]", "+=", "centroid_z", "\n", "box", "[", "0", "]", "+=", "centroid_x", "\n", "box", "[", "1", "]", "+=", "centroid_y", "\n", "box", "[", "2", "]", "+=", "centroid_z", "\n", "\n", "gt_boxes", "[", "idx", ",", "6", "]", "+=", "noise_rotation", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", ">", "8", ":", "\n", "            ", "gt_boxes", "[", "idx", ",", "7", ":", "9", "]", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "np", ".", "hstack", "(", "(", "gt_boxes", "[", "idx", ",", "7", ":", "9", "]", ",", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "\n", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", "\n", ")", "[", "0", "]", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_frustum_dropout_top": [[394, 412], ["enumerate", "numpy.random.uniform", "augmentor_utils.get_points_in_box", "numpy.logical_not", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box"], ["", "def", "local_frustum_dropout_top", "(", "gt_boxes", ",", "points", ",", "intensity_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]],\n        points: (M, 3 + C),\n        intensity: [min, max]\n    Returns:\n    \"\"\"", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "gt_boxes", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", ",", "dx", ",", "dy", ",", "dz", "=", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "box", "[", "4", "]", ",", "box", "[", "5", "]", "\n", "\n", "intensity", "=", "np", ".", "random", ".", "uniform", "(", "intensity_range", "[", "0", "]", ",", "intensity_range", "[", "1", "]", ")", "\n", "points_in_box", ",", "mask", "=", "get_points_in_box", "(", "points", ",", "box", ")", "\n", "threshold", "=", "(", "z", "+", "dz", "/", "2", ")", "-", "intensity", "*", "dz", "\n", "\n", "points", "=", "points", "[", "np", ".", "logical_not", "(", "np", ".", "logical_and", "(", "mask", ",", "points", "[", ":", ",", "2", "]", ">=", "threshold", ")", ")", "]", "\n", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_frustum_dropout_bottom": [[414, 432], ["enumerate", "numpy.random.uniform", "augmentor_utils.get_points_in_box", "numpy.logical_not", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box"], ["", "def", "local_frustum_dropout_bottom", "(", "gt_boxes", ",", "points", ",", "intensity_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]],\n        points: (M, 3 + C),\n        intensity: [min, max]\n    Returns:\n    \"\"\"", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "gt_boxes", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", ",", "dx", ",", "dy", ",", "dz", "=", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "box", "[", "4", "]", ",", "box", "[", "5", "]", "\n", "\n", "intensity", "=", "np", ".", "random", ".", "uniform", "(", "intensity_range", "[", "0", "]", ",", "intensity_range", "[", "1", "]", ")", "\n", "points_in_box", ",", "mask", "=", "get_points_in_box", "(", "points", ",", "box", ")", "\n", "threshold", "=", "(", "z", "-", "dz", "/", "2", ")", "+", "intensity", "*", "dz", "\n", "\n", "points", "=", "points", "[", "np", ".", "logical_not", "(", "np", ".", "logical_and", "(", "mask", ",", "points", "[", ":", ",", "2", "]", "<=", "threshold", ")", ")", "]", "\n", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_frustum_dropout_left": [[434, 452], ["enumerate", "numpy.random.uniform", "augmentor_utils.get_points_in_box", "numpy.logical_not", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box"], ["", "def", "local_frustum_dropout_left", "(", "gt_boxes", ",", "points", ",", "intensity_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]],\n        points: (M, 3 + C),\n        intensity: [min, max]\n    Returns:\n    \"\"\"", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "gt_boxes", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", ",", "dx", ",", "dy", ",", "dz", "=", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "box", "[", "4", "]", ",", "box", "[", "5", "]", "\n", "\n", "intensity", "=", "np", ".", "random", ".", "uniform", "(", "intensity_range", "[", "0", "]", ",", "intensity_range", "[", "1", "]", ")", "\n", "points_in_box", ",", "mask", "=", "get_points_in_box", "(", "points", ",", "box", ")", "\n", "threshold", "=", "(", "y", "+", "dy", "/", "2", ")", "-", "intensity", "*", "dy", "\n", "\n", "points", "=", "points", "[", "np", ".", "logical_not", "(", "np", ".", "logical_and", "(", "mask", ",", "points", "[", ":", ",", "1", "]", ">=", "threshold", ")", ")", "]", "\n", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_frustum_dropout_right": [[454, 472], ["enumerate", "numpy.random.uniform", "augmentor_utils.get_points_in_box", "numpy.logical_not", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box"], ["", "def", "local_frustum_dropout_right", "(", "gt_boxes", ",", "points", ",", "intensity_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading, [vx], [vy]],\n        points: (M, 3 + C),\n        intensity: [min, max]\n    Returns:\n    \"\"\"", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "gt_boxes", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", ",", "dx", ",", "dy", ",", "dz", "=", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "box", "[", "4", "]", ",", "box", "[", "5", "]", "\n", "\n", "intensity", "=", "np", ".", "random", ".", "uniform", "(", "intensity_range", "[", "0", "]", ",", "intensity_range", "[", "1", "]", ")", "\n", "points_in_box", ",", "mask", "=", "get_points_in_box", "(", "points", ",", "box", ")", "\n", "threshold", "=", "(", "y", "-", "dy", "/", "2", ")", "+", "intensity", "*", "dy", "\n", "\n", "points", "=", "points", "[", "np", ".", "logical_not", "(", "np", ".", "logical_and", "(", "mask", ",", "points", "[", ":", ",", "1", "]", "<=", "threshold", ")", ")", "]", "\n", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_points_in_box": [[474, 492], ["numpy.logical_and", "math.cos", "math.sin", "numpy.logical_and", "abs", "abs", "abs"], "function", ["None"], ["", "def", "get_points_in_box", "(", "points", ",", "gt_box", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", "\n", "cx", ",", "cy", ",", "cz", "=", "gt_box", "[", "0", "]", ",", "gt_box", "[", "1", "]", ",", "gt_box", "[", "2", "]", "\n", "dx", ",", "dy", ",", "dz", ",", "rz", "=", "gt_box", "[", "3", "]", ",", "gt_box", "[", "4", "]", ",", "gt_box", "[", "5", "]", ",", "gt_box", "[", "6", "]", "\n", "shift_x", ",", "shift_y", ",", "shift_z", "=", "x", "-", "cx", ",", "y", "-", "cy", ",", "z", "-", "cz", "\n", "\n", "MARGIN", "=", "1e-1", "\n", "cosa", ",", "sina", "=", "math", ".", "cos", "(", "-", "rz", ")", ",", "math", ".", "sin", "(", "-", "rz", ")", "\n", "local_x", "=", "shift_x", "*", "cosa", "+", "shift_y", "*", "(", "-", "sina", ")", "\n", "local_y", "=", "shift_x", "*", "sina", "+", "shift_y", "*", "cosa", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "abs", "(", "shift_z", ")", "<=", "dz", "/", "2.0", ",", "\n", "np", ".", "logical_and", "(", "abs", "(", "local_x", ")", "<=", "dx", "/", "2.0", "+", "MARGIN", ",", "\n", "abs", "(", "local_y", ")", "<=", "dy", "/", "2.0", "+", "MARGIN", ")", ")", "\n", "\n", "points", "=", "points", "[", "mask", "]", "\n", "\n", "return", "points", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_pyramids": [[494, 517], ["numpy.array", "utils.box_utils.boxes_to_corners_3d().reshape", "numpy.concatenate", "numpy.concatenate", "pyramid_list.append", "utils.box_utils.boxes_to_corners_3d"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes_to_corners_3d"], ["", "def", "get_pyramids", "(", "boxes", ")", ":", "\n", "    ", "pyramid_orders", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "1", ",", "5", ",", "4", "]", ",", "\n", "[", "4", ",", "5", ",", "6", ",", "7", "]", ",", "\n", "[", "7", ",", "6", ",", "2", ",", "3", "]", ",", "\n", "[", "3", ",", "2", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "2", ",", "6", ",", "5", "]", ",", "\n", "[", "0", ",", "4", ",", "7", ",", "3", "]", "\n", "]", ")", "\n", "boxes_corners", "=", "box_utils", ".", "boxes_to_corners_3d", "(", "boxes", ")", ".", "reshape", "(", "-", "1", ",", "24", ")", "\n", "\n", "pyramid_list", "=", "[", "]", "\n", "for", "order", "in", "pyramid_orders", ":", "\n", "# frustum polygon: 5 corners, 5 surfaces", "\n", "        ", "pyramid", "=", "np", ".", "concatenate", "(", "(", "\n", "boxes", "[", ":", ",", "0", ":", "3", "]", ",", "\n", "boxes_corners", "[", ":", ",", "3", "*", "order", "[", "0", "]", ":", "3", "*", "order", "[", "0", "]", "+", "3", "]", ",", "\n", "boxes_corners", "[", ":", ",", "3", "*", "order", "[", "1", "]", ":", "3", "*", "order", "[", "1", "]", "+", "3", "]", ",", "\n", "boxes_corners", "[", ":", ",", "3", "*", "order", "[", "2", "]", ":", "3", "*", "order", "[", "2", "]", "+", "3", "]", ",", "\n", "boxes_corners", "[", ":", ",", "3", "*", "order", "[", "3", "]", ":", "3", "*", "order", "[", "3", "]", "+", "3", "]", ")", ",", "axis", "=", "1", ")", "\n", "pyramid_list", ".", "append", "(", "pyramid", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "", "pyramids", "=", "np", ".", "concatenate", "(", "pyramid_list", ",", "axis", "=", "1", ")", "# [N, 6, 15], 15=5*3", "\n", "return", "pyramids", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.one_hot": [[519, 525], ["numpy.zeros", "len", "range", "len"], "function", ["None"], ["", "def", "one_hot", "(", "x", ",", "num_class", "=", "1", ")", ":", "\n", "    ", "if", "num_class", "is", "None", ":", "\n", "        ", "num_class", "=", "1", "\n", "", "ohx", "=", "np", ".", "zeros", "(", "(", "len", "(", "x", ")", ",", "num_class", ")", ")", "\n", "ohx", "[", "range", "(", "len", "(", "x", ")", ")", ",", "x", "]", "=", "1", "\n", "return", "ohx", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.points_in_pyramids_mask": [[527, 533], ["pyramids.reshape.reshape", "numpy.zeros", "enumerate", "numpy.logical_or", "utils.box_utils.in_hull"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.in_hull"], ["", "def", "points_in_pyramids_mask", "(", "points", ",", "pyramids", ")", ":", "\n", "    ", "pyramids", "=", "pyramids", ".", "reshape", "(", "-", "1", ",", "5", ",", "3", ")", "\n", "flags", "=", "np", ".", "zeros", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "pyramids", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "i", ",", "pyramid", "in", "enumerate", "(", "pyramids", ")", ":", "\n", "        ", "flags", "[", ":", ",", "i", "]", "=", "np", ".", "logical_or", "(", "flags", "[", ":", ",", "i", "]", ",", "box_utils", ".", "in_hull", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "pyramid", ")", ")", "\n", "", "return", "flags", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_pyramid_dropout": [[535, 549], ["numpy.random.randint", "augmentor_utils.one_hot", "get_pyramids().reshape", "numpy.random.uniform", "numpy.sum", "augmentor_utils.points_in_pyramids_mask", "numpy.logical_not", "augmentor_utils.get_pyramids", "numpy.tile", "numpy.logical_not", "points_in_pyramids_mask.any"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.one_hot", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.points_in_pyramids_mask", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_pyramids"], ["", "def", "local_pyramid_dropout", "(", "gt_boxes", ",", "points", ",", "dropout_prob", ",", "pyramids", "=", "None", ")", ":", "\n", "    ", "if", "pyramids", "is", "None", ":", "\n", "        ", "pyramids", "=", "get_pyramids", "(", "gt_boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "6", ",", "5", ",", "3", "]", ")", "# each six surface of boxes: [num_boxes, 6, 15=3*5]", "\n", "", "drop_pyramid_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "6", ",", "(", "pyramids", ".", "shape", "[", "0", "]", ")", ")", "\n", "drop_pyramid_one_hot", "=", "one_hot", "(", "drop_pyramid_indices", ",", "num_class", "=", "6", ")", "\n", "drop_box_mask", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "pyramids", ".", "shape", "[", "0", "]", ")", ")", "<=", "dropout_prob", "\n", "if", "np", ".", "sum", "(", "drop_box_mask", ")", "!=", "0", ":", "\n", "        ", "drop_pyramid_mask", "=", "(", "np", ".", "tile", "(", "drop_box_mask", "[", ":", ",", "None", "]", ",", "[", "1", ",", "6", "]", ")", "*", "drop_pyramid_one_hot", ")", ">", "0", "\n", "drop_pyramids", "=", "pyramids", "[", "drop_pyramid_mask", "]", "\n", "point_masks", "=", "points_in_pyramids_mask", "(", "points", ",", "drop_pyramids", ")", "\n", "points", "=", "points", "[", "np", ".", "logical_not", "(", "point_masks", ".", "any", "(", "-", "1", ")", ")", "]", "\n", "# print(drop_box_mask)", "\n", "", "pyramids", "=", "pyramids", "[", "np", ".", "logical_not", "(", "drop_box_mask", ")", "]", "\n", "return", "gt_boxes", ",", "points", ",", "pyramids", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_pyramid_sparsify": [[551, 583], ["get_pyramids().reshape", "numpy.random.randint", "augmentor_utils.one_hot", "augmentor_utils.points_in_pyramids_mask", "points_in_pyramids_mask.sum", "numpy.random.uniform", "numpy.concatenate", "numpy.concatenate", "augmentor_utils.get_pyramids", "numpy.tile", "numpy.random.choice", "np.concatenate.append", "numpy.logical_not", "numpy.logical_not", "range", "point_masks.any"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.one_hot", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.points_in_pyramids_mask", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_pyramids"], ["", "def", "local_pyramid_sparsify", "(", "gt_boxes", ",", "points", ",", "prob", ",", "max_num_pts", ",", "pyramids", "=", "None", ")", ":", "\n", "    ", "if", "pyramids", "is", "None", ":", "\n", "        ", "pyramids", "=", "get_pyramids", "(", "gt_boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "6", ",", "5", ",", "3", "]", ")", "# each six surface of boxes: [num_boxes, 6, 15=3*5]", "\n", "", "if", "pyramids", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "sparsity_prob", ",", "sparsity_num", "=", "prob", ",", "max_num_pts", "\n", "sparsify_pyramid_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "6", ",", "(", "pyramids", ".", "shape", "[", "0", "]", ")", ")", "\n", "sparsify_pyramid_one_hot", "=", "one_hot", "(", "sparsify_pyramid_indices", ",", "num_class", "=", "6", ")", "\n", "sparsify_box_mask", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "pyramids", ".", "shape", "[", "0", "]", ")", ")", "<=", "sparsity_prob", "\n", "sparsify_pyramid_mask", "=", "(", "np", ".", "tile", "(", "sparsify_box_mask", "[", ":", ",", "None", "]", ",", "[", "1", ",", "6", "]", ")", "*", "sparsify_pyramid_one_hot", ")", ">", "0", "\n", "# print(sparsify_box_mask)", "\n", "\n", "pyramid_sampled", "=", "pyramids", "[", "sparsify_pyramid_mask", "]", "# (-1,6,5,3)[(num_sample,6)]", "\n", "# print(pyramid_sampled.shape)", "\n", "pyramid_sampled_point_masks", "=", "points_in_pyramids_mask", "(", "points", ",", "pyramid_sampled", ")", "\n", "pyramid_sampled_points_num", "=", "pyramid_sampled_point_masks", ".", "sum", "(", "0", ")", "# the number of points in each surface pyramid", "\n", "valid_pyramid_sampled_mask", "=", "pyramid_sampled_points_num", ">", "sparsity_num", "# only much than sparsity_num should be sparse", "\n", "\n", "sparsify_pyramids", "=", "pyramid_sampled", "[", "valid_pyramid_sampled_mask", "]", "\n", "if", "sparsify_pyramids", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "point_masks", "=", "pyramid_sampled_point_masks", "[", ":", ",", "valid_pyramid_sampled_mask", "]", "\n", "remain_points", "=", "points", "[", "\n", "np", ".", "logical_not", "(", "point_masks", ".", "any", "(", "-", "1", ")", ")", "]", "# points which outside the down sampling pyramid", "\n", "to_sparsify_points", "=", "[", "points", "[", "point_masks", "[", ":", ",", "i", "]", "]", "for", "i", "in", "range", "(", "point_masks", ".", "shape", "[", "1", "]", ")", "]", "\n", "\n", "sparsified_points", "=", "[", "]", "\n", "for", "sample", "in", "to_sparsify_points", ":", "\n", "                ", "sampled_indices", "=", "np", ".", "random", ".", "choice", "(", "sample", ".", "shape", "[", "0", "]", ",", "size", "=", "sparsity_num", ",", "replace", "=", "False", ")", "\n", "sparsified_points", ".", "append", "(", "sample", "[", "sampled_indices", "]", ")", "\n", "", "sparsified_points", "=", "np", ".", "concatenate", "(", "sparsified_points", ",", "axis", "=", "0", ")", "\n", "points", "=", "np", ".", "concatenate", "(", "[", "remain_points", ",", "sparsified_points", "]", ",", "axis", "=", "0", ")", "\n", "", "pyramids", "=", "pyramids", "[", "np", ".", "logical_not", "(", "sparsify_box_mask", ")", "]", "\n", "", "return", "gt_boxes", ",", "points", ",", "pyramids", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_pyramid_swap": [[585, 684], ["get_pyramids().reshape", "numpy.random.uniform", "swap_pyramid_mask.sum", "augmentor_utils.points_in_pyramids_mask", "points_in_pyramids_mask.sum().reshape", "numpy.power().sum", "numpy.power().sum", "numpy.power().sum", "selected_pyramids.sum", "numpy.nonzero", "numpy.nonzero", "numpy.array", "numpy.concatenate", "numpy.concatenate", "augmentor_utils.points_in_pyramids_mask", "range", "numpy.concatenate", "numpy.concatenate", "augmentor_utils.get_pyramids", "points_in_pyramids_mask.sum", "augmentor_utils.local_pyramid_swap.get_points_ratio"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.points_in_pyramids_mask", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.points_in_pyramids_mask", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.get_pyramids"], ["", "def", "local_pyramid_swap", "(", "gt_boxes", ",", "points", ",", "prob", ",", "max_num_pts", ",", "pyramids", "=", "None", ")", ":", "\n", "    ", "def", "get_points_ratio", "(", "points", ",", "pyramid", ")", ":", "\n", "        ", "surface_center", "=", "(", "pyramid", "[", "3", ":", "6", "]", "+", "pyramid", "[", "6", ":", "9", "]", "+", "pyramid", "[", "9", ":", "12", "]", "+", "pyramid", "[", "12", ":", "]", ")", "/", "4.0", "\n", "vector_0", ",", "vector_1", ",", "vector_2", "=", "pyramid", "[", "6", ":", "9", "]", "-", "pyramid", "[", "3", ":", "6", "]", ",", "pyramid", "[", "12", ":", "]", "-", "pyramid", "[", "3", ":", "6", "]", ",", "pyramid", "[", "0", ":", "3", "]", "-", "surface_center", "\n", "alphas", "=", "(", "(", "points", "[", ":", ",", "0", ":", "3", "]", "-", "pyramid", "[", "3", ":", "6", "]", ")", "*", "vector_0", ")", ".", "sum", "(", "-", "1", ")", "/", "np", ".", "power", "(", "vector_0", ",", "2", ")", ".", "sum", "(", ")", "\n", "betas", "=", "(", "(", "points", "[", ":", ",", "0", ":", "3", "]", "-", "pyramid", "[", "3", ":", "6", "]", ")", "*", "vector_1", ")", ".", "sum", "(", "-", "1", ")", "/", "np", ".", "power", "(", "vector_1", ",", "2", ")", ".", "sum", "(", ")", "\n", "gammas", "=", "(", "(", "points", "[", ":", ",", "0", ":", "3", "]", "-", "surface_center", ")", "*", "vector_2", ")", ".", "sum", "(", "-", "1", ")", "/", "np", ".", "power", "(", "vector_2", ",", "2", ")", ".", "sum", "(", ")", "\n", "return", "[", "alphas", ",", "betas", ",", "gammas", "]", "\n", "\n", "", "def", "recover_points_by_ratio", "(", "points_ratio", ",", "pyramid", ")", ":", "\n", "        ", "alphas", ",", "betas", ",", "gammas", "=", "points_ratio", "\n", "surface_center", "=", "(", "pyramid", "[", "3", ":", "6", "]", "+", "pyramid", "[", "6", ":", "9", "]", "+", "pyramid", "[", "9", ":", "12", "]", "+", "pyramid", "[", "12", ":", "]", ")", "/", "4.0", "\n", "vector_0", ",", "vector_1", ",", "vector_2", "=", "pyramid", "[", "6", ":", "9", "]", "-", "pyramid", "[", "3", ":", "6", "]", ",", "pyramid", "[", "12", ":", "]", "-", "pyramid", "[", "3", ":", "6", "]", ",", "pyramid", "[", "0", ":", "3", "]", "-", "surface_center", "\n", "points", "=", "(", "alphas", "[", ":", ",", "None", "]", "*", "vector_0", "+", "betas", "[", ":", ",", "None", "]", "*", "vector_1", ")", "+", "pyramid", "[", "3", ":", "6", "]", "+", "gammas", "[", ":", ",", "None", "]", "*", "vector_2", "\n", "return", "points", "\n", "\n", "", "def", "recover_points_intensity_by_ratio", "(", "points_intensity_ratio", ",", "max_intensity", ",", "min_intensity", ")", ":", "\n", "        ", "return", "points_intensity_ratio", "*", "(", "max_intensity", "-", "min_intensity", ")", "+", "min_intensity", "\n", "\n", "# swap partition", "\n", "", "if", "pyramids", "is", "None", ":", "\n", "        ", "pyramids", "=", "get_pyramids", "(", "gt_boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "6", ",", "5", ",", "3", "]", ")", "# each six surface of boxes: [num_boxes, 6, 15=3*5]", "\n", "", "swap_prob", ",", "num_thres", "=", "prob", ",", "max_num_pts", "\n", "swap_pyramid_mask", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "pyramids", ".", "shape", "[", "0", "]", ")", ")", "<=", "swap_prob", "\n", "\n", "if", "swap_pyramid_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "point_masks", "=", "points_in_pyramids_mask", "(", "points", ",", "pyramids", ")", "\n", "point_nums", "=", "point_masks", ".", "sum", "(", "0", ")", ".", "reshape", "(", "pyramids", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# [N, 6]", "\n", "non_zero_pyramids_mask", "=", "point_nums", ">", "num_thres", "# ingore dropout pyramids or highly occluded pyramids", "\n", "selected_pyramids", "=", "non_zero_pyramids_mask", "*", "swap_pyramid_mask", "[", ":", ",", "\n", "None", "]", "# selected boxes and all their valid pyramids", "\n", "# print(selected_pyramids)", "\n", "if", "selected_pyramids", ".", "sum", "(", ")", ">", "0", ":", "\n", "# get to_swap pyramids", "\n", "            ", "index_i", ",", "index_j", "=", "np", ".", "nonzero", "(", "selected_pyramids", ")", "\n", "selected_pyramid_indices", "=", "[", "np", ".", "random", ".", "choice", "(", "index_j", "[", "index_i", "==", "i", "]", ")", "if", "e", "and", "(", "index_i", "==", "i", ")", ".", "any", "(", ")", "else", "0", "for", "i", ",", "e", "in", "\n", "enumerate", "(", "swap_pyramid_mask", ")", "]", "\n", "selected_pyramids_mask", "=", "selected_pyramids", "*", "one_hot", "(", "selected_pyramid_indices", ",", "num_class", "=", "6", ")", "==", "1", "\n", "to_swap_pyramids", "=", "pyramids", "[", "selected_pyramids_mask", "]", "\n", "\n", "# get swapped pyramids", "\n", "index_i", ",", "index_j", "=", "np", ".", "nonzero", "(", "selected_pyramids_mask", ")", "\n", "non_zero_pyramids_mask", "[", "selected_pyramids_mask", "]", "=", "False", "\n", "swapped_index_i", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "choice", "(", "np", ".", "where", "(", "non_zero_pyramids_mask", "[", ":", ",", "j", "]", ")", "[", "0", "]", ")", "if", "np", ".", "where", "(", "non_zero_pyramids_mask", "[", ":", ",", "j", "]", ")", "[", "0", "]", ".", "shape", "[", "0", "]", ">", "0", "else", "\n", "index_i", "[", "i", "]", "for", "i", ",", "j", "in", "enumerate", "(", "index_j", ".", "tolist", "(", ")", ")", "]", ")", "\n", "swapped_indicies", "=", "np", ".", "concatenate", "(", "[", "swapped_index_i", "[", ":", ",", "None", "]", ",", "index_j", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "1", ")", "\n", "swapped_pyramids", "=", "pyramids", "[", "\n", "swapped_indicies", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", ",", "swapped_indicies", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "]", "\n", "\n", "# concat to_swap&swapped pyramids", "\n", "swap_pyramids", "=", "np", ".", "concatenate", "(", "[", "to_swap_pyramids", ",", "swapped_pyramids", "]", ",", "axis", "=", "0", ")", "\n", "swap_point_masks", "=", "points_in_pyramids_mask", "(", "points", ",", "swap_pyramids", ")", "\n", "remain_points", "=", "points", "[", "np", ".", "logical_not", "(", "swap_point_masks", ".", "any", "(", "-", "1", ")", ")", "]", "\n", "\n", "# swap pyramids", "\n", "points_res", "=", "[", "]", "\n", "num_swapped_pyramids", "=", "swapped_pyramids", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num_swapped_pyramids", ")", ":", "\n", "                ", "to_swap_pyramid", "=", "to_swap_pyramids", "[", "i", "]", "\n", "swapped_pyramid", "=", "swapped_pyramids", "[", "i", "]", "\n", "\n", "to_swap_points", "=", "points", "[", "swap_point_masks", "[", ":", ",", "i", "]", "]", "\n", "swapped_points", "=", "points", "[", "swap_point_masks", "[", ":", ",", "i", "+", "num_swapped_pyramids", "]", "]", "\n", "# for intensity transform", "\n", "to_swap_points_intensity_ratio", "=", "(", "to_swap_points", "[", ":", ",", "-", "1", ":", "]", "-", "to_swap_points", "[", ":", ",", "-", "1", ":", "]", ".", "min", "(", ")", ")", "/", "np", ".", "clip", "(", "\n", "(", "to_swap_points", "[", ":", ",", "-", "1", ":", "]", ".", "max", "(", ")", "-", "to_swap_points", "[", ":", ",", "-", "1", ":", "]", ".", "min", "(", ")", ")", ",", "\n", "1e-6", ",", "1", ")", "\n", "swapped_points_intensity_ratio", "=", "(", "swapped_points", "[", ":", ",", "-", "1", ":", "]", "-", "swapped_points", "[", ":", ",", "-", "1", ":", "]", ".", "min", "(", ")", ")", "/", "np", ".", "clip", "(", "\n", "(", "swapped_points", "[", ":", ",", "-", "1", ":", "]", ".", "max", "(", ")", "-", "swapped_points", "[", ":", ",", "-", "1", ":", "]", ".", "min", "(", ")", ")", ",", "\n", "1e-6", ",", "1", ")", "\n", "\n", "to_swap_points_ratio", "=", "get_points_ratio", "(", "to_swap_points", ",", "to_swap_pyramid", ".", "reshape", "(", "15", ")", ")", "\n", "swapped_points_ratio", "=", "get_points_ratio", "(", "swapped_points", ",", "swapped_pyramid", ".", "reshape", "(", "15", ")", ")", "\n", "new_to_swap_points", "=", "recover_points_by_ratio", "(", "swapped_points_ratio", ",", "to_swap_pyramid", ".", "reshape", "(", "15", ")", ")", "\n", "new_swapped_points", "=", "recover_points_by_ratio", "(", "to_swap_points_ratio", ",", "swapped_pyramid", ".", "reshape", "(", "15", ")", ")", "\n", "# for intensity transform", "\n", "new_to_swap_points_intensity", "=", "recover_points_intensity_by_ratio", "(", "\n", "swapped_points_intensity_ratio", ",", "to_swap_points", "[", ":", ",", "-", "1", ":", "]", ".", "max", "(", ")", ",", "\n", "to_swap_points", "[", ":", ",", "-", "1", ":", "]", ".", "min", "(", ")", ")", "\n", "new_swapped_points_intensity", "=", "recover_points_intensity_by_ratio", "(", "\n", "to_swap_points_intensity_ratio", ",", "swapped_points", "[", ":", ",", "-", "1", ":", "]", ".", "max", "(", ")", ",", "\n", "swapped_points", "[", ":", ",", "-", "1", ":", "]", ".", "min", "(", ")", ")", "\n", "\n", "# new_to_swap_points = np.concatenate([new_to_swap_points, swapped_points[:, -1:]], axis=1)", "\n", "# new_swapped_points = np.concatenate([new_swapped_points, to_swap_points[:, -1:]], axis=1)", "\n", "\n", "new_to_swap_points", "=", "np", ".", "concatenate", "(", "[", "new_to_swap_points", ",", "new_to_swap_points_intensity", "]", ",", "axis", "=", "1", ")", "\n", "new_swapped_points", "=", "np", ".", "concatenate", "(", "[", "new_swapped_points", ",", "new_swapped_points_intensity", "]", ",", "axis", "=", "1", ")", "\n", "\n", "points_res", ".", "append", "(", "new_to_swap_points", ")", "\n", "points_res", ".", "append", "(", "new_swapped_points", ")", "\n", "\n", "", "points_res", "=", "np", ".", "concatenate", "(", "points_res", ",", "axis", "=", "0", ")", "\n", "points", "=", "np", ".", "concatenate", "(", "[", "remain_points", ",", "points_res", "]", ",", "axis", "=", "0", ")", "\n", "", "", "return", "gt_boxes", ",", "points", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.__init__": [[10, 25], ["isinstance", "data_augmentor.DataAugmentor.data_augmentor_queue.append", "isinstance", "getattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "augmentor_configs", ",", "class_names", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "data_augmentor_queue", "=", "[", "]", "\n", "aug_config_list", "=", "augmentor_configs", "if", "isinstance", "(", "augmentor_configs", ",", "list", ")", "else", "augmentor_configs", ".", "AUG_CONFIG_LIST", "\n", "\n", "for", "cur_cfg", "in", "aug_config_list", ":", "\n", "            ", "if", "not", "isinstance", "(", "augmentor_configs", ",", "list", ")", ":", "\n", "                ", "if", "cur_cfg", ".", "NAME", "in", "augmentor_configs", ".", "DISABLE_AUG_LIST", ":", "\n", "                    ", "continue", "\n", "", "", "cur_augmentor", "=", "getattr", "(", "self", ",", "cur_cfg", ".", "NAME", ")", "(", "config", "=", "cur_cfg", ")", "\n", "self", ".", "data_augmentor_queue", ".", "append", "(", "cur_augmentor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.gt_sampling": [[26, 34], ["database_sampler.DataBaseSampler"], "methods", ["None"], ["", "", "def", "gt_sampling", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "db_sampler", "=", "database_sampler", ".", "DataBaseSampler", "(", "\n", "root_path", "=", "self", ".", "root_path", ",", "\n", "sampler_cfg", "=", "config", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "return", "db_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.__getstate__": [[35, 39], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "d", "[", "'logger'", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.__setstate__": [[40, 42], ["data_augmentor.DataAugmentor.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_world_flip": [[43, 56], ["functools.partial", "getattr"], "methods", ["None"], ["", "def", "random_world_flip", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_world_flip", ",", "config", "=", "config", ")", "\n", "", "gt_boxes", ",", "points", "=", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", "\n", "for", "cur_axis", "in", "config", "[", "'ALONG_AXIS_LIST'", "]", ":", "\n", "            ", "assert", "cur_axis", "in", "[", "'x'", ",", "'y'", "]", "\n", "gt_boxes", ",", "points", "=", "getattr", "(", "augmentor_utils", ",", "'random_flip_along_%s'", "%", "cur_axis", ")", "(", "\n", "gt_boxes", ",", "points", ",", "\n", ")", "\n", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_world_rotation": [[57, 70], ["augmentor_utils.global_rotation", "functools.partial", "isinstance"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.global_rotation"], ["", "def", "random_world_rotation", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_world_rotation", ",", "config", "=", "config", ")", "\n", "", "rot_range", "=", "config", "[", "'WORLD_ROT_ANGLE'", "]", "\n", "if", "not", "isinstance", "(", "rot_range", ",", "list", ")", ":", "\n", "            ", "rot_range", "=", "[", "-", "rot_range", ",", "rot_range", "]", "\n", "", "gt_boxes", ",", "points", "=", "augmentor_utils", ".", "global_rotation", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", ",", "rot_range", "=", "rot_range", "\n", ")", "\n", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_world_scaling": [[71, 81], ["augmentor_utils.global_scaling", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.global_scaling"], ["", "def", "random_world_scaling", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_world_scaling", ",", "config", "=", "config", ")", "\n", "", "gt_boxes", ",", "points", "=", "augmentor_utils", ".", "global_scaling", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", ",", "config", "[", "'WORLD_SCALE_RANGE'", "]", "\n", ")", "\n", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_image_flip": [[82, 100], ["functools.partial", "getattr"], "methods", ["None"], ["", "def", "random_image_flip", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_image_flip", ",", "config", "=", "config", ")", "\n", "", "images", "=", "data_dict", "[", "\"images\"", "]", "\n", "depth_maps", "=", "data_dict", "[", "\"depth_maps\"", "]", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "\n", "gt_boxes2d", "=", "data_dict", "[", "\"gt_boxes2d\"", "]", "\n", "calib", "=", "data_dict", "[", "\"calib\"", "]", "\n", "for", "cur_axis", "in", "config", "[", "'ALONG_AXIS_LIST'", "]", ":", "\n", "            ", "assert", "cur_axis", "in", "[", "'horizontal'", "]", "\n", "images", ",", "depth_maps", ",", "gt_boxes", "=", "getattr", "(", "augmentor_utils", ",", "'random_image_flip_%s'", "%", "cur_axis", ")", "(", "\n", "images", ",", "depth_maps", ",", "gt_boxes", ",", "calib", ",", "\n", ")", "\n", "\n", "", "data_dict", "[", "'images'", "]", "=", "images", "\n", "data_dict", "[", "'depth_maps'", "]", "=", "depth_maps", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_world_translation": [[101, 117], ["functools.partial", "getattr"], "methods", ["None"], ["", "def", "random_world_translation", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_world_translation", ",", "config", "=", "config", ")", "\n", "", "noise_translate_std", "=", "config", "[", "'NOISE_TRANSLATE_STD'", "]", "\n", "if", "noise_translate_std", "==", "0", ":", "\n", "            ", "return", "data_dict", "\n", "", "gt_boxes", ",", "points", "=", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", "\n", "for", "cur_axis", "in", "config", "[", "'ALONG_AXIS_LIST'", "]", ":", "\n", "            ", "assert", "cur_axis", "in", "[", "'x'", ",", "'y'", ",", "'z'", "]", "\n", "gt_boxes", ",", "points", "=", "getattr", "(", "augmentor_utils", ",", "'random_translation_along_%s'", "%", "cur_axis", ")", "(", "\n", "gt_boxes", ",", "points", ",", "noise_translate_std", ",", "\n", ")", "\n", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_local_translation": [[118, 135], ["functools.partial", "getattr"], "methods", ["None"], ["", "def", "random_local_translation", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Please check the correctness of it before using.\n        \"\"\"", "\n", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_local_translation", ",", "config", "=", "config", ")", "\n", "", "offset_range", "=", "config", "[", "'LOCAL_TRANSLATION_RANGE'", "]", "\n", "gt_boxes", ",", "points", "=", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", "\n", "for", "cur_axis", "in", "config", "[", "'ALONG_AXIS_LIST'", "]", ":", "\n", "            ", "assert", "cur_axis", "in", "[", "'x'", ",", "'y'", ",", "'z'", "]", "\n", "gt_boxes", ",", "points", "=", "getattr", "(", "augmentor_utils", ",", "'random_local_translation_along_%s'", "%", "cur_axis", ")", "(", "\n", "gt_boxes", ",", "points", ",", "offset_range", ",", "\n", ")", "\n", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_local_rotation": [[136, 152], ["augmentor_utils.local_rotation", "functools.partial", "isinstance"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_rotation"], ["", "def", "random_local_rotation", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Please check the correctness of it before using.\n        \"\"\"", "\n", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_local_rotation", ",", "config", "=", "config", ")", "\n", "", "rot_range", "=", "config", "[", "'LOCAL_ROT_ANGLE'", "]", "\n", "if", "not", "isinstance", "(", "rot_range", ",", "list", ")", ":", "\n", "            ", "rot_range", "=", "[", "-", "rot_range", ",", "rot_range", "]", "\n", "", "gt_boxes", ",", "points", "=", "augmentor_utils", ".", "local_rotation", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", ",", "rot_range", "=", "rot_range", "\n", ")", "\n", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_local_scaling": [[153, 166], ["augmentor_utils.local_scaling", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_scaling"], ["", "def", "random_local_scaling", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Please check the correctness of it before using.\n        \"\"\"", "\n", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_local_scaling", ",", "config", "=", "config", ")", "\n", "", "gt_boxes", ",", "points", "=", "augmentor_utils", ".", "local_scaling", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", ",", "config", "[", "'LOCAL_SCALE_RANGE'", "]", "\n", ")", "\n", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_world_frustum_dropout": [[167, 185], ["functools.partial", "getattr"], "methods", ["None"], ["", "def", "random_world_frustum_dropout", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Please check the correctness of it before using.\n        \"\"\"", "\n", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_world_frustum_dropout", ",", "config", "=", "config", ")", "\n", "\n", "", "intensity_range", "=", "config", "[", "'INTENSITY_RANGE'", "]", "\n", "gt_boxes", ",", "points", "=", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", "\n", "for", "direction", "in", "config", "[", "'DIRECTION'", "]", ":", "\n", "            ", "assert", "direction", "in", "[", "'top'", ",", "'bottom'", ",", "'left'", ",", "'right'", "]", "\n", "gt_boxes", ",", "points", "=", "getattr", "(", "augmentor_utils", ",", "'global_frustum_dropout_%s'", "%", "direction", ")", "(", "\n", "gt_boxes", ",", "points", ",", "intensity_range", ",", "\n", ")", "\n", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_local_frustum_dropout": [[186, 204], ["functools.partial", "getattr"], "methods", ["None"], ["", "def", "random_local_frustum_dropout", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Please check the correctness of it before using.\n        \"\"\"", "\n", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_local_frustum_dropout", ",", "config", "=", "config", ")", "\n", "\n", "", "intensity_range", "=", "config", "[", "'INTENSITY_RANGE'", "]", "\n", "gt_boxes", ",", "points", "=", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", "\n", "for", "direction", "in", "config", "[", "'DIRECTION'", "]", ":", "\n", "            ", "assert", "direction", "in", "[", "'top'", ",", "'bottom'", ",", "'left'", ",", "'right'", "]", "\n", "gt_boxes", ",", "points", "=", "getattr", "(", "augmentor_utils", ",", "'local_frustum_dropout_%s'", "%", "direction", ")", "(", "\n", "gt_boxes", ",", "points", ",", "intensity_range", ",", "\n", ")", "\n", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.random_local_pyramid_aug": [[205, 227], ["augmentor_utils.local_pyramid_dropout", "augmentor_utils.local_pyramid_sparsify", "augmentor_utils.local_pyramid_swap", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_pyramid_dropout", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_pyramid_sparsify", "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.augmentor_utils.local_pyramid_swap"], ["", "def", "random_local_pyramid_aug", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Refer to the paper: \n            SE-SSD: Self-Ensembling Single-Stage Object Detector From Point Cloud\n        \"\"\"", "\n", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_local_pyramid_aug", ",", "config", "=", "config", ")", "\n", "\n", "", "gt_boxes", ",", "points", "=", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", "\n", "\n", "gt_boxes", ",", "points", ",", "pyramids", "=", "augmentor_utils", ".", "local_pyramid_dropout", "(", "gt_boxes", ",", "points", ",", "config", "[", "'DROP_PROB'", "]", ")", "\n", "gt_boxes", ",", "points", ",", "pyramids", "=", "augmentor_utils", ".", "local_pyramid_sparsify", "(", "gt_boxes", ",", "points", ",", "\n", "config", "[", "'SPARSIFY_PROB'", "]", ",", "\n", "config", "[", "'SPARSIFY_MAX_NUM'", "]", ",", "\n", "pyramids", ")", "\n", "gt_boxes", ",", "points", "=", "augmentor_utils", ".", "local_pyramid_swap", "(", "gt_boxes", ",", "points", ",", "\n", "config", "[", "'SWAP_PROB'", "]", ",", "\n", "config", "[", "'SWAP_MAX_NUM'", "]", ",", "\n", "pyramids", ")", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.augmentor.data_augmentor.DataAugmentor.forward": [[228, 258], ["utils.common_utils.limit_period", "cur_augmentor", "cur_augmentor.pop", "cur_augmentor.pop", "cur_augmentor.pop"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.limit_period"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                points: (N, 3 + C_in)\n                gt_boxes: optional, (N, 7) [x, y, z, dx, dy, dz, heading]\n                gt_names: optional, (N), string\n                ...\n\n        Returns:\n        \"\"\"", "\n", "for", "cur_augmentor", "in", "self", ".", "data_augmentor_queue", ":", "\n", "            ", "data_dict", "=", "cur_augmentor", "(", "data_dict", "=", "data_dict", ")", "\n", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "[", ":", ",", "6", "]", "=", "common_utils", ".", "limit_period", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", "[", ":", ",", "6", "]", ",", "offset", "=", "0.5", ",", "period", "=", "2", "*", "np", ".", "pi", "\n", ")", "\n", "if", "'calib'", "in", "data_dict", ":", "\n", "            ", "data_dict", ".", "pop", "(", "'calib'", ")", "\n", "", "if", "'road_plane'", "in", "data_dict", ":", "\n", "            ", "data_dict", ".", "pop", "(", "'road_plane'", ")", "\n", "", "if", "'gt_boxes_mask'", "in", "data_dict", ":", "\n", "            ", "gt_boxes_mask", "=", "data_dict", "[", "'gt_boxes_mask'", "]", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "gt_boxes_mask", "]", "\n", "data_dict", "[", "'gt_names'", "]", "=", "data_dict", "[", "'gt_names'", "]", "[", "gt_boxes_mask", "]", "\n", "if", "'gt_boxes2d'", "in", "data_dict", ":", "\n", "                ", "data_dict", "[", "'gt_boxes2d'", "]", "=", "data_dict", "[", "'gt_boxes2d'", "]", "[", "gt_boxes_mask", "]", "\n", "\n", "", "data_dict", ".", "pop", "(", "'gt_boxes_mask'", ")", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu": [[12, 29], ["utils.common_utils.check_numpy_to_torch", "utils.common_utils.check_numpy_to_torch", "boxes_a.new_zeros", "iou3d_nms_cuda.boxes_iou_bev_cpu", "torch.Size", "boxes_a.contiguous", "boxes_b.contiguous", "boxes_a.new_zeros.numpy"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch"], ["def", "boxes_bev_iou_cpu", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (M, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n        ans_iou: (N, M)\n    \"\"\"", "\n", "boxes_a", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes_a", ")", "\n", "boxes_b", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes_b", ")", "\n", "assert", "not", "(", "boxes_a", ".", "is_cuda", "or", "boxes_b", ".", "is_cuda", ")", ",", "'Only support CPU tensors'", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "7", "and", "boxes_b", ".", "shape", "[", "1", "]", "==", "7", "\n", "ans_iou", "=", "boxes_a", ".", "new_zeros", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "iou3d_nms_cuda", ".", "boxes_iou_bev_cpu", "(", "boxes_a", ".", "contiguous", "(", ")", ",", "boxes_b", ".", "contiguous", "(", ")", ",", "ans_iou", ")", "\n", "\n", "return", "ans_iou", ".", "numpy", "(", ")", "if", "is_numpy", "else", "ans_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou_bev": [[31, 46], ["torch.cuda.FloatTensor().zero_", "iou3d_nms_cuda.boxes_iou_bev_gpu", "boxes_a.contiguous", "boxes_b.contiguous", "torch.cuda.FloatTensor", "torch.Size"], "function", ["None"], ["", "def", "boxes_iou_bev", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (M, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n        ans_iou: (N, M)\n    \"\"\"", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "boxes_b", ".", "shape", "[", "1", "]", "==", "7", "\n", "ans_iou", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "iou3d_nms_cuda", ".", "boxes_iou_bev_gpu", "(", "boxes_a", ".", "contiguous", "(", ")", ",", "boxes_b", ".", "contiguous", "(", ")", ",", "ans_iou", ")", "\n", "\n", "return", "ans_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu": [[48, 82], ["torch.cuda.FloatTensor().zero_", "iou3d_nms_cuda.boxes_overlap_bev_gpu", "torch.max", "torch.min", "torch.clamp", "boxes_a.contiguous", "boxes_b.contiguous", "torch.clamp", "torch.cuda.FloatTensor", "torch.Size"], "function", ["None"], ["", "def", "boxes_iou3d_gpu", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (M, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n        ans_iou: (N, M)\n    \"\"\"", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "boxes_b", ".", "shape", "[", "1", "]", "==", "7", "\n", "\n", "# height overlap", "\n", "boxes_a_height_max", "=", "(", "boxes_a", "[", ":", ",", "2", "]", "+", "boxes_a", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "boxes_a_height_min", "=", "(", "boxes_a", "[", ":", ",", "2", "]", "-", "boxes_a", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "boxes_b_height_max", "=", "(", "boxes_b", "[", ":", ",", "2", "]", "+", "boxes_b", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "boxes_b_height_min", "=", "(", "boxes_b", "[", ":", ",", "2", "]", "-", "boxes_b", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# bev overlap", "\n", "overlaps_bev", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "zero_", "(", ")", "# (N, M)", "\n", "iou3d_nms_cuda", ".", "boxes_overlap_bev_gpu", "(", "boxes_a", ".", "contiguous", "(", ")", ",", "boxes_b", ".", "contiguous", "(", ")", ",", "overlaps_bev", ")", "\n", "\n", "max_of_min", "=", "torch", ".", "max", "(", "boxes_a_height_min", ",", "boxes_b_height_min", ")", "\n", "min_of_max", "=", "torch", ".", "min", "(", "boxes_a_height_max", ",", "boxes_b_height_max", ")", "\n", "overlaps_h", "=", "torch", ".", "clamp", "(", "min_of_max", "-", "max_of_min", ",", "min", "=", "0", ")", "\n", "\n", "# 3d iou", "\n", "overlaps_3d", "=", "overlaps_bev", "*", "overlaps_h", "\n", "\n", "vol_a", "=", "(", "boxes_a", "[", ":", ",", "3", "]", "*", "boxes_a", "[", ":", ",", "4", "]", "*", "boxes_a", "[", ":", ",", "5", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "vol_b", "=", "(", "boxes_b", "[", ":", ",", "3", "]", "*", "boxes_b", "[", ":", ",", "4", "]", "*", "boxes_b", "[", ":", ",", "5", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "iou3d", "=", "overlaps_3d", "/", "torch", ".", "clamp", "(", "vol_a", "+", "vol_b", "-", "overlaps_3d", ",", "min", "=", "1e-6", ")", "\n", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.nms_gpu": [[84, 100], ["boxes[].contiguous", "torch.LongTensor", "iou3d_nms_cuda.nms_gpu", "scores.sort", "boxes[].contiguous.size", "order[].contiguous", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.nms_gpu"], ["", "def", "nms_gpu", "(", "boxes", ",", "scores", ",", "thresh", ",", "pre_maxsize", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 7) [x, y, z, dx, dy, dz, heading]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "==", "7", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "if", "pre_maxsize", "is", "not", "None", ":", "\n", "        ", "order", "=", "order", "[", ":", "pre_maxsize", "]", "\n", "\n", "", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_nms_cuda", ".", "nms_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.nms_normal_gpu": [[102, 117], ["boxes[].contiguous", "torch.LongTensor", "iou3d_nms_cuda.nms_normal_gpu", "scores.sort", "boxes[].contiguous.size", "order[].contiguous", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.nms_normal_gpu"], ["", "def", "nms_normal_gpu", "(", "boxes", ",", "scores", ",", "thresh", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 7) [x, y, z, dx, dy, dz, heading]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "==", "7", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "\n", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_nms_cuda", ".", "nms_normal_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", ",", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_modules._PointnetSAModuleBase.__init__": [[12, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "None", "\n", "self", ".", "groupers", "=", "None", "\n", "self", ".", "mlps", "=", "None", "\n", "self", ".", "pool_method", "=", "'max_pool'", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_modules._PointnetSAModuleBase.forward": [[19, 56], ["xyz.transpose().contiguous", "range", "len", "torch.avg_pool2d.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.gather_operation().transpose().contiguous", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pointnet2_utils.gather_operation().transpose", "torch.avg_pool2d.size", "pointnet2_utils.gather_operation", "torch.avg_pool2d.size", "pointnet2_utils.farthest_point_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "new_xyz", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) tensor of the xyz coordinates of the features\n        :param features: (B, N, C) tensor of the descriptors of the the features\n        :param new_xyz:\n        :return:\n            new_xyz: (B, npoint, 3) tensor of the new features' xyz\n            new_features: (B, npoint, \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "new_xyz", "is", "None", ":", "\n", "            ", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "\n", "pointnet2_utils", ".", "farthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "xyz", ",", "new_xyz", ",", "features", ")", "# (B, C, npoint, nsample)", "\n", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "new_features", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "if", "self", ".", "pool_method", "==", "'max_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pool_method", "==", "'avg_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_modules.PointnetSAModuleMSG.__init__": [[61, 100], ["pointnet2_modules._PointnetSAModuleBase.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSG.groupers.append", "range", "pointnet2_modules.PointnetSAModuleMSG.mlps.append", "shared_mlps.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "npoint", ":", "int", ",", "radii", ":", "List", "[", "float", "]", ",", "nsamples", ":", "List", "[", "int", "]", ",", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ")", ":", "\n", "        ", "\"\"\"\n        :param npoint: int\n        :param radii: list of float, list of radii to group with\n        :param nsamples: list of int, number of samples in each ball query\n        :param mlps: list of list of int, spec of the pointnet before the global pooling for each scale\n        :param bn: whether to use batchnorm\n        :param use_xyz:\n        :param pool_method: max_pool / avg_pool\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "shared_mlps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "mlp_spec", ")", "-", "1", ")", ":", "\n", "                ", "shared_mlps", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "mlp_spec", "[", "k", "]", ",", "mlp_spec", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mlp_spec", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "mlps", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "shared_mlps", ")", ")", "\n", "\n", "", "self", ".", "pool_method", "=", "pool_method", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_modules.PointnetSAModule.__init__": [[105, 119], ["pointnet2_modules.PointnetSAModuleMSG.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "npoint", ":", "int", "=", "None", ",", "radius", ":", "float", "=", "None", ",", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ")", ":", "\n", "        ", "\"\"\"\n        :param mlp: list of int, spec of the pointnet before the global max_pool\n        :param npoint: int, number of features\n        :param radius: float, radius of ball\n        :param nsample: int, number of samples in the ball query\n        :param bn: whether to use batchnorm\n        :param use_xyz:\n        :param pool_method: max_pool / avg_pool\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "mlps", "=", "[", "mlp", "]", ",", "npoint", "=", "npoint", ",", "radii", "=", "[", "radius", "]", ",", "nsamples", "=", "[", "nsample", "]", ",", "bn", "=", "bn", ",", "use_xyz", "=", "use_xyz", ",", "\n", "pool_method", "=", "pool_method", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_modules.PointnetFPModule.__init__": [[125, 140], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shared_mlps.extend", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "bn", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param mlp: list of int\n        :param bn: whether to use batchnorm\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "shared_mlps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "mlp", ")", "-", "1", ")", ":", "\n", "            ", "shared_mlps", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "mlp", "[", "k", "]", ",", "mlp", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mlp", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "shared_mlps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_modules.PointnetFPModule.forward": [[141, 171], ["torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetFPModule.mlp", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "known_feats.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unknown.size", "known_feats.size"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ",", "unknow_feats", ":", "torch", ".", "Tensor", ",", "known_feats", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param unknown: (B, n, 3) tensor of the xyz positions of the unknown features\n        :param known: (B, m, 3) tensor of the xyz positions of the known features\n        :param unknow_feats: (B, C1, n) tensor of the features to be propigated to\n        :param known_feats: (B, C2, m) tensor of features to be propigated\n        :return:\n            new_features: (B, mlp[-1], n) tensor of the features of the unknown features\n        \"\"\"", "\n", "if", "known", "is", "not", "None", ":", "\n", "            ", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "known_feats", ",", "idx", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "interpolated_feats", "=", "known_feats", ".", "expand", "(", "*", "known_feats", ".", "size", "(", ")", "[", "0", ":", "2", "]", ",", "unknown", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "if", "unknow_feats", "is", "not", "None", ":", "\n", "            ", "new_features", "=", "torch", ".", "cat", "(", "[", "interpolated_feats", ",", "unknow_feats", "]", ",", "dim", "=", "1", ")", "# (B, C2 + C1, n)", "\n", "", "else", ":", "\n", "            ", "new_features", "=", "interpolated_feats", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "mlp", "(", "new_features", ")", "\n", "\n", "return", "new_features", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.FarthestPointSampling.forward": [[11, 30], ["xyz.is_contiguous", "xyz.size", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "pointnet2_batch_cuda.farthest_point_sampling_wrapper", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz", ":", "torch", ".", "Tensor", ",", "npoint", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Uses iterative farthest point sampling to select a set of npoint features that have the largest\n        minimum distance\n        :param ctx:\n        :param xyz: (B, N, 3) where N > npoint\n        :param npoint: int, number of features in the sampled set\n        :return:\n             output: (B, npoint) tensor containing the set\n        \"\"\"", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ")", "\n", "temp", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ")", ".", "fill_", "(", "1e10", ")", "\n", "\n", "pointnet2", ".", "farthest_point_sampling_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "xyz", ",", "temp", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.FarthestPointSampling.backward": [[31, 34], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "xyz", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.GatherOperation.forward": [[41, 61], ["features.is_contiguous", "idx.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_batch_cuda.gather_points_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N)\n        :param idx: (B, npoint) index tensor of the features to gather\n        :return:\n            output: (B, C, npoint)\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "npoint", ")", "\n", "\n", "pointnet2", ".", "gather_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "C", ",", "N", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.GatherOperation.backward": [[62, 71], ["idx.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_batch_cuda.gather_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "idx", ",", "C", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "gather_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.ThreeNN.forward": [[78, 99], ["unknown.is_contiguous", "known.is_contiguous", "unknown.size", "known.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "pointnet2_batch_cuda.three_nn_wrapper", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Find the three nearest neighbors of unknown in known\n        :param ctx:\n        :param unknown: (B, N, 3)\n        :param known: (B, M, 3)\n        :return:\n            dist: (B, N, 3) l2 distance to the three nearest neighbors\n            idx: (B, N, 3) index of 3 nearest neighbors\n        \"\"\"", "\n", "assert", "unknown", ".", "is_contiguous", "(", ")", "\n", "assert", "known", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "unknown", ".", "size", "(", ")", "\n", "m", "=", "known", ".", "size", "(", "1", ")", "\n", "dist2", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "\n", "pointnet2", ".", "three_nn_wrapper", "(", "B", ",", "N", ",", "m", ",", "unknown", ",", "known", ",", "dist2", ",", "idx", ")", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.ThreeNN.backward": [[100, 103], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.ThreeInterpolate.forward": [[110, 132], ["features.is_contiguous", "idx.is_contiguous", "weight.is_contiguous", "features.size", "idx.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_batch_cuda.three_interpolate_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs weight linear interpolation on 3 features\n        :param ctx:\n        :param features: (B, C, M) Features descriptors to be interpolated from\n        :param idx: (B, n, 3) three nearest neighbors of the target features in features\n        :param weight: (B, n, 3) weights\n        :return:\n            output: (B, C, N) tensor of the interpolated features\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "assert", "weight", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "c", ",", "m", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "1", ")", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "n", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_wrapper", "(", "B", ",", "c", ",", "m", ",", "n", ",", "features", ",", "idx", ",", "weight", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.ThreeInterpolate.backward": [[133, 151], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_batch_cuda.three_interpolate_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, N) tensor with gradients of outputs\n        :return:\n            grad_features: (B, C, M) tensor with gradients of features\n            None:\n            None:\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "B", ",", "c", ",", "n", "=", "grad_out", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "m", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_grad_wrapper", "(", "B", ",", "c", ",", "n", ",", "m", ",", "grad_out_data", ",", "idx", ",", "weight", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.GroupingOperation.forward": [[158, 178], ["features.is_contiguous", "idx.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_batch_cuda.group_points_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N) tensor of features to group\n        :param idx: (B, npoint, nsample) tensor containing the indicies of features to group with\n        :return:\n            output: (B, C, npoint, nsample) tensor\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "nfeatures", ",", "nsample", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "nfeatures", ",", "nsample", ")", "\n", "\n", "pointnet2", ".", "group_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "nfeatures", ",", "nsample", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "N", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.GroupingOperation.backward": [[179, 195], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_batch_cuda.group_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, npoint, nsample) tensor of the gradients of the output from forward\n        :return:\n            grad_features: (B, C, N) gradient of the features\n        \"\"\"", "\n", "idx", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "B", ",", "C", ",", "npoint", ",", "nsample", "=", "grad_out", ".", "size", "(", ")", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "group_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "nsample", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.BallQuery.forward": [[202, 222], ["new_xyz.is_contiguous", "xyz.is_contiguous", "xyz.size", "new_xyz.size", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "pointnet2_batch_cuda.ball_query_wrapper", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param radius: float, radius of the balls\n        :param nsample: int, maximum number of features in the balls\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centers of the ball query\n        :return:\n            idx: (B, npoint, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "assert", "new_xyz", ".", "is_contiguous", "(", ")", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "npoint", "=", "new_xyz", ".", "size", "(", "1", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ",", "nsample", ")", ".", "zero_", "(", ")", "\n", "\n", "pointnet2", ".", "ball_query_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "radius", ",", "nsample", ",", "new_xyz", ",", "xyz", ",", "idx", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.BallQuery.backward": [[223, 226], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.QueryAndGroup.__init__": [[232, 240], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param radius: float, radius of ball\n        :param nsample: int, maximum number of features to gather in the ball\n        :param use_xyz:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", ",", "self", ".", "nsample", ",", "self", ".", "use_xyz", "=", "radius", ",", "nsample", ",", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.QueryAndGroup.forward": [[241, 265], ["ball_query", "xyz.transpose().contiguous", "grouping_operation", "new_xyz.transpose().unsqueeze", "grouping_operation", "xyz.transpose", "new_xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "Tuple", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centroids\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, 3 + C, npoint, nsample)\n        \"\"\"", "\n", "idx", "=", "ball_query", "(", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "grouping_operation", "(", "features", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, C + 3, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "use_xyz", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.GroupAll.__init__": [[268, 271], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_batch.pointnet2_utils.GroupAll.forward": [[272, 291], ["xyz.transpose().unsqueeze", "features.unsqueeze", "xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: ignored\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, C + 3, 1, N)\n        \"\"\"", "\n", "grouped_xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "features", ".", "unsqueeze", "(", "2", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, 3 + C, 1, N)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.StackSAModuleMSG.__init__": [[32, 67], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "pointnet2_modules.StackSAModuleMSG.init_weights", "len", "len", "len", "len", "pointnet2_modules.StackSAModuleMSG.groupers.append", "range", "pointnet2_modules.StackSAModuleMSG.mlps.append", "pointnet2_utils.QueryAndGroup", "shared_mlps.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights"], ["            ", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "\n", "pointnet2_utils", ".", "farthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "xyz", ",", "new_xyz", ",", "features", ")", "# (B, C, npoint, nsample)", "\n", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "new_features", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "if", "self", ".", "pool_method", "==", "'max_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pool_method", "==", "'avg_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "", "", "class", "PointnetSAModuleMSG", "(", "_PointnetSAModuleBase", ")", ":", "\n", "    ", "\"\"\"Pointnet set abstraction layer with multiscale grouping\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "*", ",", "npoint", ":", "int", ",", "radii", ":", "List", "[", "float", "]", ",", "nsamples", ":", "List", "[", "int", "]", ",", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.StackSAModuleMSG.init_weights": [[68, 77], ["pointnet2_modules.StackSAModuleMSG.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.StackSAModuleMSG.forward": [[78, 113], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.avg_pool2d().squeeze.permute().unsqueeze", "torch.avg_pool2d().squeeze.squeeze().permute", "new_features_list.append", "torch.max_pool2d().squeeze", "torch.max_pool2d().squeeze", "torch.max_pool2d().squeeze", "torch.avg_pool2d().squeeze.permute", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze.squeeze", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d().squeeze.size", "torch.avg_pool2d().squeeze.size"], "methods", ["None"], ["self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "shared_mlps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "mlp_spec", ")", "-", "1", ")", ":", "\n", "                ", "shared_mlps", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "mlp_spec", "[", "k", "]", ",", "mlp_spec", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mlp_spec", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "mlps", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "shared_mlps", ")", ")", "\n", "\n", "", "self", ".", "pool_method", "=", "pool_method", "\n", "\n", "\n", "", "", "class", "PointnetSAModule", "(", "PointnetSAModuleMSG", ")", ":", "\n", "    ", "\"\"\"Pointnet set abstraction layer\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "npoint", ":", "int", "=", "None", ",", "radius", ":", "float", "=", "None", ",", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.StackPointnetFPModule.__init__": [[116, 130], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shared_mlps.extend", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["super", "(", ")", ".", "__init__", "(", "\n", "mlps", "=", "[", "mlp", "]", ",", "npoint", "=", "npoint", ",", "radii", "=", "[", "radius", "]", ",", "nsamples", "=", "[", "nsample", "]", ",", "bn", "=", "bn", ",", "use_xyz", "=", "use_xyz", ",", "\n", "pool_method", "=", "pool_method", "\n", ")", "\n", "\n", "\n", "", "", "class", "PointnetFPModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "r\"\"\"Propigates the features of one set to another\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "bn", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param mlp: list of int\n        :param bn: whether to use batchnorm\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.StackPointnetFPModule.forward": [[131, 158], ["pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "pointnet2_modules.StackPointnetFPModule.mlp", "torch.cat.squeeze().squeeze().permute", "torch.cat.squeeze().squeeze().permute", "torch.cat.squeeze().squeeze().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze"], "methods", ["None"], ["\n", "shared_mlps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "mlp", ")", "-", "1", ")", ":", "\n", "            ", "shared_mlps", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "mlp", "[", "k", "]", ",", "mlp", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mlp", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "shared_mlps", ")", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ",", "unknow_feats", ":", "torch", ".", "Tensor", ",", "known_feats", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param unknown: (B, n, 3) tensor of the xyz positions of the unknown features\n        :param known: (B, m, 3) tensor of the xyz positions of the known features\n        :param unknow_feats: (B, C1, n) tensor of the features to be propigated to\n        :param known_feats: (B, C2, m) tensor of features to be propigated\n        :return:\n            new_features: (B, mlp[-1], n) tensor of the features of the unknown features\n        \"\"\"", "\n", "if", "known", "is", "not", "None", ":", "\n", "            ", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "known_feats", ",", "idx", ",", "weight", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolLocalInterpolateModule.__init__": [[161, 199], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shared_mlps.extend", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["\n", "", "if", "unknow_feats", "is", "not", "None", ":", "\n", "            ", "new_features", "=", "torch", ".", "cat", "(", "[", "interpolated_feats", ",", "unknow_feats", "]", ",", "dim", "=", "1", ")", "# (B, C2 + C1, n)", "\n", "", "else", ":", "\n", "            ", "new_features", "=", "interpolated_feats", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "mlp", "(", "new_features", ")", "\n", "\n", "return", "new_features", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "pass", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolLocalInterpolateModule.forward": [[200, 245], ["max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pointnet2_utils.three_nn_for_vector_pool_by_two_step", "num_avg_length_of_neighbor_idxs.item", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "idx.view", "idx.view", "weight.view", "support_xyz[].view", "pointnet2_modules.VectorPoolLocalInterpolateModule.mlp", "new_features.squeeze().squeeze().permute.squeeze().squeeze().permute.squeeze().squeeze().permute", "idx.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_features.squeeze().squeeze().permute.squeeze().squeeze().permute.permute", "new_features.squeeze().squeeze().permute.squeeze().squeeze().permute.squeeze().squeeze", "new_xyz_grid_centers.view", "idx.view().long", "new_features.squeeze().squeeze().permute.squeeze().squeeze().permute.squeeze", "idx.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.__init__": [[248, 298], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pointnet2_modules.VectorPoolAggregationModule.init_weights", "pointnet2_modules.VectorPoolLocalInterpolateModule", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "post_mlp_list.extend", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.init_weights": [[299, 308], ["pointnet2_modules.VectorPoolAggregationModule.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.extra_repr": [[309, 315], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.vector_pool_with_voxel_query": [[316, 335], ["pointnet2_utils.vector_pool_with_voxel_query_op", "max", "new_local_xyz.view.view.view", "torch.cat().view.view", "torch.cat().view.view", "torch.cat().view.view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "num_mean_points_per_grid.item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.get_dense_voxels_by_center": [[336, 360], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_offset.contiguous().view", "y_offset.contiguous().view", "z_offset.contiguous().view", "x_offset.contiguous", "y_offset.contiguous", "z_offset.contiguous"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.vector_pool_with_local_interpolate": [[361, 382], ["pointnet2_modules.VectorPoolAggregationModule.get_dense_voxels_by_center", "pointnet2_modules.VectorPoolAggregationModule.local_interpolate_module.forward", "voxel_features.contiguous().view.contiguous().view.contiguous().view", "voxel_features.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.get_dense_voxels_by_center", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.forward": [[383, 421], ["features.view().sum.view().sum.view().sum", "pointnet2_modules.VectorPoolAggregationModule.separate_local_aggregation_layer", "pointnet2_modules.VectorPoolAggregationModule.post_mlps", "new_features.squeeze().permute.squeeze().permute.squeeze().permute", "pointnet2_modules.VectorPoolAggregationModule.vector_pool_with_voxel_query", "pointnet2_modules.VectorPoolAggregationModule.permute", "features.view().sum.view().sum.view", "pointnet2_modules.VectorPoolAggregationModule.vector_pool_with_local_interpolate", "new_features.squeeze().permute.squeeze().permute.squeeze"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.vector_pool_with_voxel_query", "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModule.vector_pool_with_local_interpolate"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModuleMSG.__init__": [[424, 457], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pointnet2_modules.VectorPoolAggregationModule", "pointnet2_modules.VectorPoolAggregationModuleMSG.__setattr__", "shared_mlps.extend", "pointnet2_modules.VectorPoolAggregationModuleMSG.model_cfg.get", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.VectorPoolAggregationModuleMSG.forward": [[458, 471], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pointnet2_modules.VectorPoolAggregationModuleMSG.msg_post_mlps", "new_features.squeeze().permute.squeeze().permute.squeeze().permute", "features_list.append", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "pointnet2_modules.VectorPoolAggregationModuleMSG.__getattr__", "new_features.squeeze().permute.squeeze().permute.squeeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.build_local_aggregation_module": [[10, 28], ["config.get", "range", "pointnet2_modules.StackSAModuleMSG", "sum", "len", "pointnet2_modules.VectorPoolAggregationModuleMSG"], "function", ["None"], ["class", "_PointnetSAModuleBase", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "None", "\n", "self", ".", "groupers", "=", "None", "\n", "self", ".", "mlps", "=", "None", "\n", "self", ".", "pool_method", "=", "'max_pool'", "\n", "\n", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "new_xyz", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) tensor of the xyz coordinates of the features\n        :param features: (B, N, C) tensor of the descriptors of the the features\n        :param new_xyz:\n        :return:\n            new_xyz: (B, npoint, 3) tensor of the new features' xyz\n            new_features: (B, npoint, \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.voxel_pool_modules.NeighborVoxelSAModuleMSG.__init__": [[10, 59], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ReLU", "torch.ReLU", "torch.ReLU", "voxel_pool_modules.NeighborVoxelSAModuleMSG.init_weights", "len", "len", "len", "len", "voxel_pool_modules.NeighborVoxelSAModuleMSG.groupers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "voxel_pool_modules.NeighborVoxelSAModuleMSG.mlps_in.append", "voxel_pool_modules.NeighborVoxelSAModuleMSG.mlps_pos.append", "voxel_pool_modules.NeighborVoxelSAModuleMSG.mlps_out.append", "voxel_query_utils.VoxelQueryAndGrouping", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "query_ranges", ":", "List", "[", "List", "[", "int", "]", "]", ",", "radii", ":", "List", "[", "float", "]", ",", "\n", "nsamples", ":", "List", "[", "int", "]", ",", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            query_ranges: list of int, list of neighbor ranges to group with\n            nsamples: list of int, number of samples in each ball query\n            mlps: list of list of int, spec of the pointnet before the global pooling for each scale\n            use_xyz:\n            pool_method: max_pool / avg_pool\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "query_ranges", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps_in", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps_pos", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps_out", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "query_ranges", ")", ")", ":", "\n", "            ", "max_range", "=", "query_ranges", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "radius", "=", "radii", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "voxel_query_utils", ".", "VoxelQueryAndGrouping", "(", "max_range", ",", "radius", ",", "nsample", ")", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "\n", "cur_mlp_in", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "mlp_spec", "[", "0", "]", ",", "mlp_spec", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "mlp_spec", "[", "1", "]", ")", "\n", ")", "\n", "\n", "cur_mlp_pos", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "mlp_spec", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mlp_spec", "[", "1", "]", ")", "\n", ")", "\n", "\n", "cur_mlp_out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "mlp_spec", "[", "1", "]", ",", "mlp_spec", "[", "2", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "mlp_spec", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "mlps_in", ".", "append", "(", "cur_mlp_in", ")", "\n", "self", ".", "mlps_pos", ".", "append", "(", "cur_mlp_pos", ")", "\n", "self", ".", "mlps_out", ".", "append", "(", "cur_mlp_out", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool_method", "=", "pool_method", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.voxel_pool_modules.NeighborVoxelSAModuleMSG.init_weights": [[60, 69], ["voxel_pool_modules.NeighborVoxelSAModuleMSG.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.voxel_pool_modules.NeighborVoxelSAModuleMSG.forward": [[70, 131], ["new_coords[].contiguous", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "features.permute().unsqueeze", "features_in.view.view.permute().contiguous", "features_in.view.view.view", "grouped_features.permute().unsqueeze.permute().unsqueeze.permute().unsqueeze", "grouped_xyz.permute().unsqueeze.permute().unsqueeze.permute().unsqueeze", "voxel_pool_modules.NeighborVoxelSAModuleMSG.relu", "torch.avg_pool2d().squeeze.squeeze().permute", "new_features_list.append", "new_xyz.unsqueeze", "torch.max_pool2d().squeeze", "torch.max_pool2d().squeeze", "torch.max_pool2d().squeeze", "features.permute", "features_in.view.view.permute", "grouped_features.permute().unsqueeze.permute().unsqueeze.permute", "grouped_xyz.permute().unsqueeze.permute().unsqueeze.permute", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze.squeeze", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d().squeeze.size", "torch.avg_pool2d().squeeze.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "xyz", ",", "xyz_batch_cnt", ",", "new_xyz", ",", "new_xyz_batch_cnt", ",", "new_coords", ",", "features", ",", "voxel2point_indices", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (N1 + N2 ..., 3) tensor of the xyz coordinates of the features\n        :param xyz_batch_cnt: (batch_size), [N1, N2, ...]\n        :param new_xyz: (M1 + M2 ..., 3)\n        :param new_xyz_batch_cnt: (batch_size), [M1, M2, ...]\n        :param features: (N1 + N2 ..., C) tensor of the descriptors of the the features\n        :param point_indices: (B, Z, Y, X) tensor of point indices\n        :return:\n            new_xyz: (M1 + M2 ..., 3) tensor of the new features' xyz\n            new_features: (M1 + M2 ..., \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "# change the order to [batch_idx, z, y, x]", "\n", "new_coords", "=", "new_coords", "[", ":", ",", "[", "0", ",", "3", ",", "2", ",", "1", "]", "]", ".", "contiguous", "(", ")", "\n", "new_features_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "# features_in: (1, C, M1+M2)", "\n", "            ", "features_in", "=", "features", ".", "permute", "(", "1", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "features_in", "=", "self", ".", "mlps_in", "[", "k", "]", "(", "features_in", ")", "\n", "# features_in: (1, M1+M2, C)", "\n", "features_in", "=", "features_in", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# features_in: (M1+M2, C)", "\n", "features_in", "=", "features_in", ".", "view", "(", "-", "1", ",", "features_in", ".", "shape", "[", "-", "1", "]", ")", "\n", "# grouped_features: (M1+M2, C, nsample)", "\n", "# grouped_xyz: (M1+M2, 3, nsample)", "\n", "grouped_features", ",", "grouped_xyz", ",", "empty_ball_mask", "=", "self", ".", "groupers", "[", "k", "]", "(", "\n", "new_coords", ",", "xyz", ",", "xyz_batch_cnt", ",", "new_xyz", ",", "new_xyz_batch_cnt", ",", "features_in", ",", "voxel2point_indices", "\n", ")", "\n", "grouped_features", "[", "empty_ball_mask", "]", "=", "0", "\n", "\n", "# grouped_features: (1, C, M1+M2, nsample)", "\n", "grouped_features", "=", "grouped_features", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "# grouped_xyz: (M1+M2, 3, nsample)", "\n", "grouped_xyz", "=", "grouped_xyz", "-", "new_xyz", ".", "unsqueeze", "(", "-", "1", ")", "\n", "grouped_xyz", "[", "empty_ball_mask", "]", "=", "0", "\n", "# grouped_xyz: (1, 3, M1+M2, nsample)", "\n", "grouped_xyz", "=", "grouped_xyz", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# grouped_xyz: (1, C, M1+M2, nsample)", "\n", "position_features", "=", "self", ".", "mlps_pos", "[", "k", "]", "(", "grouped_xyz", ")", "\n", "new_features", "=", "grouped_features", "+", "position_features", "\n", "new_features", "=", "self", ".", "relu", "(", "new_features", ")", "\n", "\n", "if", "self", ".", "pool_method", "==", "'max_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "# (1, C, M1 + M2 ...)", "\n", "", "elif", "self", ".", "pool_method", "==", "'avg_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "# (1, C, M1 + M2 ...)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "new_features", "=", "self", ".", "mlps_out", "[", "k", "]", "(", "new_features", ")", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "dim", "=", "0", ")", ".", "permute", "(", "1", ",", "0", ")", "# (M1 + M2 ..., C)", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "# (M1 + M2 ..., C)", "\n", "", "new_features", "=", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.BallQuery.forward": [[10, 39], ["new_xyz.is_contiguous", "new_xyz_batch_cnt.is_contiguous", "xyz.is_contiguous", "xyz_batch_cnt.is_contiguous", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "pointnet2_stack_cuda.ball_query_wrapper", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor"], "methods", ["None"], ["class", "FarthestPointSampling", "(", "Function", ")", ":", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz", ":", "torch", ".", "Tensor", ",", "npoint", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Uses iterative farthest point sampling to select a set of npoint features that have the largest\n        minimum distance\n        :param ctx:\n        :param xyz: (B, N, 3) where N > npoint\n        :param npoint: int, number of features in the sampled set\n        :return:\n             output: (B, npoint) tensor containing the set\n        \"\"\"", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ")", "\n", "temp", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ")", ".", "fill_", "(", "1e10", ")", "\n", "\n", "pointnet2", ".", "farthest_point_sampling_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "xyz", ",", "temp", ",", "output", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "xyz", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "\n", "", "", "farthest_point_sample", "=", "furthest_point_sample", "=", "FarthestPointSampling", ".", "apply", "\n", "\n", "\n", "class", "GatherOperation", "(", "Function", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.BallQuery.backward": [[40, 43], ["None"], "methods", ["None"], ["\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        "]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.GroupingOperation.forward": [[50, 83], ["features.is_contiguous", "features_batch_cnt.is_contiguous", "idx.is_contiguous", "idx_batch_cnt.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_stack_cuda.group_points_wrapper", "features_batch_cnt.sum", "idx_batch_cnt.sum", "str", "str", "str", "str"], "methods", ["None"], ["assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "npoint", ")", "\n", "\n", "pointnet2", ".", "gather_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "C", ",", "N", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "idx", ",", "C", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "gather_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n", "\n", "", "", "gather_operation", "=", "GatherOperation", ".", "apply", "\n", "\n", "\n", "class", "ThreeNN", "(", "Function", ")", ":", "\n", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        "]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.GroupingOperation.backward": [[84, 103], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_stack_cuda.group_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["\n", "assert", "unknown", ".", "is_contiguous", "(", ")", "\n", "assert", "known", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "unknown", ".", "size", "(", ")", "\n", "m", "=", "known", ".", "size", "(", "1", ")", "\n", "dist2", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "\n", "pointnet2", ".", "three_nn_wrapper", "(", "B", ",", "N", ",", "m", ",", "unknown", ",", "known", ",", "dist2", ",", "idx", ")", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.QueryAndGroup.__init__": [[109, 118], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        "]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.QueryAndGroup.forward": [[119, 156], ["ball_query", "grouping_operation", "new_xyz.unsqueeze", "xyz_batch_cnt.sum", "new_xyz_batch_cnt.sum", "grouping_operation", "str", "str", "str", "str", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "assert", "weight", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "c", ",", "m", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "1", ")", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "n", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_wrapper", "(", "B", ",", "c", ",", "m", ",", "n", ",", "features", ",", "idx", ",", "weight", ",", "output", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, N) tensor with gradients of outputs\n        :return:\n            grad_features: (B, C, M) tensor with gradients of features\n            None:\n            None:\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "B", ",", "c", ",", "n", "=", "grad_out", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "m", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_grad_wrapper", "(", "B", ",", "c", ",", "n", ",", "m", ",", "grad_out_data", ",", "idx", ",", "weight", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "three_interpolate", "=", "ThreeInterpolate", ".", "apply", "\n", "\n", "\n", "class", "GroupingOperation", "(", "Function", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.FarthestPointSampling.forward": [[159, 178], ["xyz.is_contiguous", "xyz.size", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "pointnet2_stack_cuda.farthest_point_sampling_wrapper", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N) tensor of features to group\n        :param idx: (B, npoint, nsample) tensor containing the indicies of features to group with\n        :return:\n            output: (B, C, npoint, nsample) tensor\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "nfeatures", ",", "nsample", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "nfeatures", ",", "nsample", ")", "\n", "\n", "pointnet2", ".", "group_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "nfeatures", ",", "nsample", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "N", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.FarthestPointSampling.backward": [[179, 182], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        "]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.StackFarthestPointSampling.forward": [[188, 215], ["xyz_batch_cnt.__len__", "xyz.size", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "pointnet2_stack_cuda.stack_farthest_point_sampling_wrapper", "xyz.is_contiguous", "isinstance", "torch.tensor().int", "torch.tensor().int", "torch.tensor().int", "torch.tensor().int", "torch.tensor().int.sum().item", "torch.tensor().int.sum().item", "isinstance", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().int.sum", "torch.tensor().int.sum", "range"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["\n", "B", ",", "C", ",", "npoint", ",", "nsample", "=", "grad_out", ".", "size", "(", ")", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "group_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "nsample", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n", "\n", "", "", "grouping_operation", "=", "GroupingOperation", ".", "apply", "\n", "\n", "\n", "class", "BallQuery", "(", "Function", ")", ":", "\n", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param radius: float, radius of the balls\n        :param nsample: int, maximum number of features in the balls\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centers of the ball query\n        :return:\n            idx: (B, npoint, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "assert", "new_xyz", ".", "is_contiguous", "(", ")", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.StackFarthestPointSampling.backward": [[216, 219], ["None"], "methods", ["None"], ["B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "npoint", "=", "new_xyz", ".", "size", "(", "1", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ",", "nsample", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.ThreeNN.forward": [[225, 251], ["unknown.new_zeros", "unknown_batch_cnt.new_zeros().int", "pointnet2_stack_cuda.three_nn_wrapper", "unknown_batch_cnt.__len__", "known_batch_cnt.__len__", "unknown.contiguous", "unknown_batch_cnt.contiguous", "known.contiguous", "known_batch_cnt.contiguous", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "unknown.shape.__len__", "known.shape.__len__", "unknown_batch_cnt.new_zeros"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "ball_query", "=", "BallQuery", ".", "apply", "\n", "\n", "\n", "class", "QueryAndGroup", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param radius: float, radius of ball\n        :param nsample: int, maximum number of features to gather in the ball\n        :param use_xyz:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", ",", "self", ".", "nsample", ",", "self", ".", "use_xyz", "=", "radius", ",", "nsample", ",", "use_xyz", "\n", "\n", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "Tuple", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centroids\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, 3 + C, npoint, nsample)\n        \"\"\"", "\n", "idx", "=", "ball_query", "(", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.ThreeNN.backward": [[252, 255], ["None"], "methods", ["None"], ["grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "grouping_operation", "(", "features", ",", "idx", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.ThreeInterpolate.forward": [[262, 280], ["features.new_zeros", "pointnet2_stack_cuda.three_interpolate_wrapper", "features.contiguous", "idx.contiguous", "weight.contiguous"], "methods", ["None"], ["new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "\n", "\n", "", "", "class", "GroupAll", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "\n", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: ignored\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, C + 3, 1, N)\n        \"\"\"", "\n", "grouped_xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.ThreeInterpolate.backward": [[281, 297], ["grad_out.new_zeros", "pointnet2_stack_cuda.three_interpolate_grad_wrapper", "grad_out.contiguous", "idx.contiguous", "weight.contiguous"], "methods", ["None"], ["if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "features", ".", "unsqueeze", "(", "2", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, 3 + C, 1, N)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.ThreeNNForVectorPoolByTwoStep.forward": [[303, 352], ["new_xyz_grid_centers.new_zeros", "new_xyz_grid_centers.new_zeros().int().fill_", "pointnet2_stack_cuda.query_three_nn_by_stacked_local_idxs_wrapper_stack", "new_xyz_grid_centers.new_zeros().int().fill_.new_zeros", "new_xyz_grid_centers.new_zeros().int().fill_.new_zeros().int", "new_xyz_grid_centers.new_zeros().int().fill_.new_zeros", "pointnet2_stack_cuda.query_stacked_local_neighbor_idxs_wrapper_stack", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "new_xyz_grid_centers.new_zeros().int", "support_xyz.contiguous", "xyz_batch_cnt.contiguous", "new_xyz.contiguous", "new_xyz_batch_cnt.contiguous", "new_xyz_grid_centers.new_zeros().int().fill_.new_zeros.contiguous", "new_xyz_grid_centers.new_zeros().int().fill_.new_zeros().int.contiguous", "int", "new_xyz_grid_centers.new_zeros().int().fill_.new_zeros", "cumsum[].item", "new_xyz_grid_centers.new_zeros", "cumsum[].item"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.VectorPoolWithVoxelQuery.forward": [[358, 426], ["support_xyz.is_contiguous", "support_features.is_contiguous", "xyz_batch_cnt.is_contiguous", "new_xyz.is_contiguous", "new_xyz_batch_cnt.is_contiguous", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.Tensor().int", "torch.Tensor().int", "torch.Tensor().int", "torch.Tensor().int", "torch.Tensor().int", "torch.Tensor().int", "torch.Tensor().int", "torch.Tensor().int", "ctx.mark_non_differentiable", "support_features.new_zeros", "support_features.new_zeros", "xyz_batch_cnt.new_zeros", "xyz_batch_cnt.new_zeros", "pointnet2_stack_cuda.vector_pool_wrapper", "point_cnt_of_grid[].float", "int", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "support_features.new_zeros.view", "support_features.new_zeros.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_utils.VectorPoolWithVoxelQuery.backward": [[427, 446], ["grad_new_features.new_zeros", "pointnet2_stack_cuda.vector_pool_grad_wrapper", "grad_new_features.contiguous"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.voxel_query_utils.VoxelQuery.forward": [[12, 43], ["new_xyz.is_contiguous", "xyz.is_contiguous", "new_coords.is_contiguous", "point_indices.is_contiguous", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "pointnet2_stack_cuda.voxel_query_wrapper", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "max_range", ":", "int", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "new_coords", ":", "torch", ".", "Tensor", ",", "point_indices", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            ctx:\n            max_range: int, max range of voxels to be grouped\n            nsample: int, maximum number of features in the balls\n            new_coords: (M1 + M2, 4), [batch_id, z, y, x] cooridnates of keypoints\n            new_xyz_batch_cnt: (batch_size), [M1, M2, ...]\n            point_indices: (batch_size, Z, Y, X) 4-D tensor recording the point indices of voxels\n        Returns:\n            idx: (M1 + M2, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "assert", "new_xyz", ".", "is_contiguous", "(", ")", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "assert", "new_coords", ".", "is_contiguous", "(", ")", "\n", "assert", "point_indices", ".", "is_contiguous", "(", ")", "\n", "\n", "M", "=", "new_coords", ".", "shape", "[", "0", "]", "\n", "B", ",", "Z", ",", "Y", ",", "X", "=", "point_indices", ".", "shape", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "M", ",", "nsample", ")", ".", "zero_", "(", ")", "\n", "\n", "z_range", ",", "y_range", ",", "x_range", "=", "max_range", "\n", "pointnet2", ".", "voxel_query_wrapper", "(", "M", ",", "Z", ",", "Y", ",", "X", ",", "nsample", ",", "radius", ",", "z_range", ",", "y_range", ",", "x_range", ",", "new_xyz", ",", "xyz", ",", "new_coords", ",", "point_indices", ",", "idx", ")", "\n", "\n", "empty_ball_mask", "=", "(", "idx", "[", ":", ",", "0", "]", "==", "-", "1", ")", "\n", "idx", "[", "empty_ball_mask", "]", "=", "0", "\n", "\n", "return", "idx", ",", "empty_ball_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.voxel_query_utils.VoxelQuery.backward": [[44, 47], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.voxel_query_utils.VoxelQueryAndGrouping.__init__": [[52, 60], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_range", ":", "int", ",", "radius", ":", "float", ",", "nsample", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            radius: float, radius of ball\n            nsample: int, maximum number of features to gather in the ball\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_range", ",", "self", ".", "radius", ",", "self", ".", "nsample", "=", "max_range", ",", "radius", ",", "nsample", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.voxel_query_utils.VoxelQueryAndGrouping.forward": [[61, 101], ["voxel_query", "idx1.view.view.view", "range", "idx1.view.view.view", "pointnet2_utils.grouping_operation", "pointnet2_utils.grouping_operation", "xyz_batch_cnt.sum", "new_xyz_batch_cnt.sum", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "new_coords", ":", "torch", ".", "Tensor", ",", "xyz", ":", "torch", ".", "Tensor", ",", "xyz_batch_cnt", ":", "torch", ".", "Tensor", ",", "\n", "new_xyz", ":", "torch", ".", "Tensor", ",", "new_xyz_batch_cnt", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", ",", "voxel2point_indices", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            new_coords: (M1 + M2 ..., 3) centers voxel indices of the ball query\n            xyz: (N1 + N2 ..., 3) xyz coordinates of the features\n            xyz_batch_cnt: (batch_size), [N1, N2, ...]\n            new_xyz: (M1 + M2 ..., 3) centers of the ball query\n            new_xyz_batch_cnt: (batch_size), [M1, M2, ...]\n            features: (N1 + N2 ..., C) tensor of features to group\n            voxel2point_indices: (B, Z, Y, X) tensor of points indices of voxels\n\n        Returns:\n            new_features: (M1 + M2, C, nsample) tensor\n        \"\"\"", "\n", "assert", "xyz", ".", "shape", "[", "0", "]", "==", "xyz_batch_cnt", ".", "sum", "(", ")", ",", "'xyz: %s, xyz_batch_cnt: %s'", "%", "(", "str", "(", "xyz", ".", "shape", ")", ",", "str", "(", "new_xyz_batch_cnt", ")", ")", "\n", "assert", "new_coords", ".", "shape", "[", "0", "]", "==", "new_xyz_batch_cnt", ".", "sum", "(", ")", ",", "'new_coords: %s, new_xyz_batch_cnt: %s'", "%", "(", "str", "(", "new_coords", ".", "shape", ")", ",", "str", "(", "new_xyz_batch_cnt", ")", ")", "\n", "batch_size", "=", "xyz_batch_cnt", ".", "shape", "[", "0", "]", "\n", "\n", "# idx: (M1 + M2 ..., nsample), empty_ball_mask: (M1 + M2 ...)", "\n", "idx1", ",", "empty_ball_mask1", "=", "voxel_query", "(", "self", ".", "max_range", ",", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ",", "new_coords", ",", "voxel2point_indices", ")", "\n", "\n", "idx1", "=", "idx1", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "nsample", ")", "\n", "count", "=", "0", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "idx1", "[", "bs_idx", "]", "-=", "count", "\n", "count", "+=", "xyz_batch_cnt", "[", "bs_idx", "]", "\n", "", "idx1", "=", "idx1", ".", "view", "(", "-", "1", ",", "self", ".", "nsample", ")", "\n", "idx1", "[", "empty_ball_mask1", "]", "=", "0", "\n", "\n", "idx", "=", "idx1", "\n", "empty_ball_mask", "=", "empty_ball_mask1", "\n", "\n", "grouped_xyz", "=", "pointnet2_utils", ".", "grouping_operation", "(", "xyz", ",", "xyz_batch_cnt", ",", "idx", ",", "new_xyz_batch_cnt", ")", "\n", "# grouped_features: (M1 + M2, C, nsample)", "\n", "grouped_features", "=", "pointnet2_utils", ".", "grouping_operation", "(", "features", ",", "xyz_batch_cnt", ",", "idx", ",", "new_xyz_batch_cnt", ")", "\n", "\n", "return", "grouped_features", ",", "grouped_xyz", ",", "empty_ball_mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.RoIAwarePool3d.__init__": [[45, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "max_pts_each_voxel", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "max_pts_each_voxel", "=", "max_pts_each_voxel", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.RoIAwarePool3d.forward": [[50, 53], ["RoIAwarePool3dFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "rois", ",", "pts", ",", "pts_feature", ",", "pool_method", "=", "'max'", ")", ":", "\n", "        ", "assert", "pool_method", "in", "[", "'max'", ",", "'avg'", "]", "\n", "return", "RoIAwarePool3dFunction", ".", "apply", "(", "rois", ",", "pts", ",", "pts_feature", ",", "self", ".", "out_size", ",", "self", ".", "max_pts_each_voxel", ",", "pool_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.RoIAwarePool3dFunction.forward": [[56, 94], ["isinstance", "pts_feature.new_zeros", "pts_feature.new_zeros", "pts_feature.new_zeros", "roiaware_pool3d_cuda.forward", "range", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "rois", ",", "pts", ",", "pts_feature", ",", "out_size", ",", "max_pts_each_voxel", ",", "pool_method", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            ctx:\n            rois: (N, 7) [x, y, z, dx, dy, dz, heading] (x, y, z) is the box center\n            pts: (npoints, 3)\n            pts_feature: (npoints, C)\n            out_size: int or tuple, like 7 or (7, 7, 7)\n            max_pts_each_voxel:\n            pool_method: 'max' or 'avg'\n\n        Returns:\n            pooled_features: (N, out_x, out_y, out_z, C)\n        \"\"\"", "\n", "assert", "rois", ".", "shape", "[", "1", "]", "==", "7", "and", "pts", ".", "shape", "[", "1", "]", "==", "3", "\n", "if", "isinstance", "(", "out_size", ",", "int", ")", ":", "\n", "            ", "out_x", "=", "out_y", "=", "out_z", "=", "out_size", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "out_size", ")", "==", "3", "\n", "for", "k", "in", "range", "(", "3", ")", ":", "\n", "                ", "assert", "isinstance", "(", "out_size", "[", "k", "]", ",", "int", ")", "\n", "", "out_x", ",", "out_y", ",", "out_z", "=", "out_size", "\n", "\n", "", "num_rois", "=", "rois", ".", "shape", "[", "0", "]", "\n", "num_channels", "=", "pts_feature", ".", "shape", "[", "-", "1", "]", "\n", "num_pts", "=", "pts", ".", "shape", "[", "0", "]", "\n", "\n", "pooled_features", "=", "pts_feature", ".", "new_zeros", "(", "(", "num_rois", ",", "out_x", ",", "out_y", ",", "out_z", ",", "num_channels", ")", ")", "\n", "argmax", "=", "pts_feature", ".", "new_zeros", "(", "(", "num_rois", ",", "out_x", ",", "out_y", ",", "out_z", ",", "num_channels", ")", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "pts_idx_of_voxels", "=", "pts_feature", ".", "new_zeros", "(", "(", "num_rois", ",", "out_x", ",", "out_y", ",", "out_z", ",", "max_pts_each_voxel", ")", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "pool_method_map", "=", "{", "'max'", ":", "0", ",", "'avg'", ":", "1", "}", "\n", "pool_method", "=", "pool_method_map", "[", "pool_method", "]", "\n", "roiaware_pool3d_cuda", ".", "forward", "(", "rois", ",", "pts", ",", "pts_feature", ",", "argmax", ",", "pts_idx_of_voxels", ",", "pooled_features", ",", "pool_method", ")", "\n", "\n", "ctx", ".", "roiaware_pool3d_for_backward", "=", "(", "pts_idx_of_voxels", ",", "argmax", ",", "pool_method", ",", "num_pts", ",", "num_channels", ")", "\n", "return", "pooled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.RoIAwarePool3dFunction.backward": [[95, 108], ["grad_out.new_zeros", "roiaware_pool3d_cuda.backward", "grad_out.contiguous"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3dFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "\"\"\"\n        :param grad_out: (N, out_x, out_y, out_z, C)\n        :return:\n            grad_in: (npoints, C)\n        \"\"\"", "\n", "pts_idx_of_voxels", ",", "argmax", ",", "pool_method", ",", "num_pts", ",", "num_channels", "=", "ctx", ".", "roiaware_pool3d_for_backward", "\n", "\n", "grad_in", "=", "grad_out", ".", "new_zeros", "(", "(", "num_pts", ",", "num_channels", ")", ")", "\n", "roiaware_pool3d_cuda", ".", "backward", "(", "pts_idx_of_voxels", ",", "argmax", ",", "grad_out", ".", "contiguous", "(", ")", ",", "grad_in", ",", "pool_method", ")", "\n", "\n", "return", "None", ",", "None", ",", "grad_in", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu": [[9, 26], ["utils.common_utils.check_numpy_to_torch", "utils.common_utils.check_numpy_to_torch", "points.new_zeros", "roiaware_pool3d_cuda.points_in_boxes_cpu", "boxes.float().contiguous", "points.float().contiguous", "points.new_zeros.numpy", "boxes.float", "points.float"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["def", "points_in_boxes_cpu", "(", "points", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (num_points, 3)\n        boxes: [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center, each box DO NOT overlaps\n    Returns:\n        point_indices: (N, num_points)\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "==", "7", "\n", "assert", "points", ".", "shape", "[", "1", "]", "==", "3", "\n", "points", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "points", ")", "\n", "boxes", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes", ")", "\n", "\n", "point_indices", "=", "points", ".", "new_zeros", "(", "(", "boxes", ".", "shape", "[", "0", "]", ",", "points", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "roiaware_pool3d_cuda", ".", "points_in_boxes_cpu", "(", "boxes", ".", "float", "(", ")", ".", "contiguous", "(", ")", ",", "points", ".", "float", "(", ")", ".", "contiguous", "(", ")", ",", "point_indices", ")", "\n", "\n", "return", "point_indices", ".", "numpy", "(", ")", "if", "is_numpy", "else", "point_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu": [[28, 42], ["points.new_zeros().fill_", "roiaware_pool3d_cuda.points_in_boxes_gpu", "boxes.contiguous", "points.contiguous", "points.new_zeros"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu"], ["", "def", "points_in_boxes_gpu", "(", "points", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"\n    :param points: (B, M, 3)\n    :param boxes: (B, T, 7), num_valid_boxes <= T\n    :return box_idxs_of_pts: (B, M), default background = -1\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "0", "]", "==", "points", ".", "shape", "[", "0", "]", "\n", "assert", "boxes", ".", "shape", "[", "2", "]", "==", "7", "and", "points", ".", "shape", "[", "2", "]", "==", "3", "\n", "batch_size", ",", "num_points", ",", "_", "=", "points", ".", "shape", "\n", "\n", "box_idxs_of_pts", "=", "points", ".", "new_zeros", "(", "(", "batch_size", ",", "num_points", ")", ",", "dtype", "=", "torch", ".", "int", ")", ".", "fill_", "(", "-", "1", ")", "\n", "roiaware_pool3d_cuda", ".", "points_in_boxes_gpu", "(", "boxes", ".", "contiguous", "(", ")", ",", "points", ".", "contiguous", "(", ")", ",", "box_idxs_of_pts", ")", "\n", "\n", "return", "box_idxs_of_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3d.__init__": [[10, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_sampled_points", "=", "512", ",", "pool_extra_width", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_sampled_points", "=", "num_sampled_points", "\n", "self", ".", "pool_extra_width", "=", "pool_extra_width", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3d.forward": [[15, 28], ["RoIPointPool3dFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "points", ",", "point_features", ",", "boxes3d", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            points: (B, N, 3)\n            point_features: (B, N, C)\n            boxes3d: (B, M, 7), [x, y, z, dx, dy, dz, heading]\n\n        Returns:\n            pooled_features: (B, M, 512, 3 + C)\n            pooled_empty_flag: (B, M)\n        \"\"\"", "\n", "return", "RoIPointPool3dFunction", ".", "apply", "(", "\n", "points", ",", "point_features", ",", "boxes3d", ",", "self", ".", "pool_extra_width", ",", "self", ".", "num_sampled_points", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3dFunction.forward": [[32, 60], ["utils.box_utils.enlarge_box3d().view", "point_features.new_zeros", "point_features.new_zeros().int", "roipoint_pool3d_cuda.forward", "points.contiguous", "utils.box_utils.enlarge_box3d().view.contiguous", "point_features.contiguous", "points.shape.__len__", "utils.box_utils.enlarge_box3d", "point_features.new_zeros", "boxes3d.view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.enlarge_box3d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "points", ",", "point_features", ",", "boxes3d", ",", "pool_extra_width", ",", "num_sampled_points", "=", "512", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            ctx:\n            points: (B, N, 3)\n            point_features: (B, N, C)\n            boxes3d: (B, num_boxes, 7), [x, y, z, dx, dy, dz, heading]\n            pool_extra_width:\n            num_sampled_points:\n\n        Returns:\n            pooled_features: (B, num_boxes, 512, 3 + C)\n            pooled_empty_flag: (B, num_boxes)\n        \"\"\"", "\n", "assert", "points", ".", "shape", ".", "__len__", "(", ")", "==", "3", "and", "points", ".", "shape", "[", "2", "]", "==", "3", "\n", "batch_size", ",", "boxes_num", ",", "feature_len", "=", "points", ".", "shape", "[", "0", "]", ",", "boxes3d", ".", "shape", "[", "1", "]", ",", "point_features", ".", "shape", "[", "2", "]", "\n", "pooled_boxes3d", "=", "box_utils", ".", "enlarge_box3d", "(", "boxes3d", ".", "view", "(", "-", "1", ",", "7", ")", ",", "pool_extra_width", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "\n", "pooled_features", "=", "point_features", ".", "new_zeros", "(", "(", "batch_size", ",", "boxes_num", ",", "num_sampled_points", ",", "3", "+", "feature_len", ")", ")", "\n", "pooled_empty_flag", "=", "point_features", ".", "new_zeros", "(", "(", "batch_size", ",", "boxes_num", ")", ")", ".", "int", "(", ")", "\n", "\n", "roipoint_pool3d_cuda", ".", "forward", "(", "\n", "points", ".", "contiguous", "(", ")", ",", "pooled_boxes3d", ".", "contiguous", "(", ")", ",", "\n", "point_features", ".", "contiguous", "(", ")", ",", "pooled_features", ",", "pooled_empty_flag", "\n", ")", "\n", "\n", "return", "pooled_features", ",", "pooled_empty_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3dFunction.backward": [[61, 64], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.models.__init__.build_network": [[16, 21], ["detectors.build_detector"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.__init__.build_detector"], ["git_commit_number", "=", "cmd_out", ".", "stdout", ".", "decode", "(", "'utf-8'", ")", "[", ":", "7", "]", "\n", "return", "git_commit_number", "\n", "\n", "\n", "", "script_version", "=", "get_git_commit_number", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.models.__init__.load_data_to_gpu": [[23, 35], ["batch_dict.items", "isinstance", "kornia.image_to_tensor().float().cuda().contiguous", "torch.from_numpy().int().cuda", "torch.from_numpy().float().cuda", "kornia.image_to_tensor().float().cuda", "torch.from_numpy().int", "torch.from_numpy().float", "kornia.image_to_tensor().float", "torch.from_numpy", "torch.from_numpy", "kornia.image_to_tensor"], "function", ["None"], ["if", "script_version", "not", "in", "__version__", ":", "\n", "    ", "__version__", "=", "__version__", "+", "'+py%s'", "%", "script_version", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.models.__init__.model_fn_decorator": [[37, 53], ["collections.namedtuple", "__init__.load_data_to_gpu", "model", "ret_dict[].mean", "hasattr", "collections.namedtuple.", "model.update_global_step", "model.module.update_global_step"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.models.__init__.load_data_to_gpu", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.update_global_step", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.update_global_step"], []], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_2d.base_bev_backbone.BaseBEVBackbone.__init__": [[7, 80], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "sum", "base_bev_backbone.BaseBEVBackbone.model_cfg.get", "base_bev_backbone.BaseBEVBackbone.model_cfg.get", "range", "base_bev_backbone.BaseBEVBackbone.blocks.append", "len", "base_bev_backbone.BaseBEVBackbone.deblocks.append", "len", "len", "len", "len", "len", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cur_layers.extend", "torch.Sequential", "torch.Sequential", "len", "torch.Sequential", "torch.Sequential", "base_bev_backbone.BaseBEVBackbone.deblocks.append", "numpy.round().astype", "base_bev_backbone.BaseBEVBackbone.deblocks.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "numpy.round", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'LAYER_NUMS'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "model_cfg", ".", "LAYER_NUMS", ")", "==", "len", "(", "self", ".", "model_cfg", ".", "LAYER_STRIDES", ")", "==", "len", "(", "self", ".", "model_cfg", ".", "NUM_FILTERS", ")", "\n", "layer_nums", "=", "self", ".", "model_cfg", ".", "LAYER_NUMS", "\n", "layer_strides", "=", "self", ".", "model_cfg", ".", "LAYER_STRIDES", "\n", "num_filters", "=", "self", ".", "model_cfg", ".", "NUM_FILTERS", "\n", "", "else", ":", "\n", "            ", "layer_nums", "=", "layer_strides", "=", "num_filters", "=", "[", "]", "\n", "\n", "", "if", "self", ".", "model_cfg", ".", "get", "(", "'UPSAMPLE_STRIDES'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "model_cfg", ".", "UPSAMPLE_STRIDES", ")", "==", "len", "(", "self", ".", "model_cfg", ".", "NUM_UPSAMPLE_FILTERS", ")", "\n", "num_upsample_filters", "=", "self", ".", "model_cfg", ".", "NUM_UPSAMPLE_FILTERS", "\n", "upsample_strides", "=", "self", ".", "model_cfg", ".", "UPSAMPLE_STRIDES", "\n", "", "else", ":", "\n", "            ", "upsample_strides", "=", "num_upsample_filters", "=", "[", "]", "\n", "\n", "", "num_levels", "=", "len", "(", "layer_nums", ")", "\n", "c_in_list", "=", "[", "input_channels", ",", "*", "num_filters", "[", ":", "-", "1", "]", "]", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "deblocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "idx", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "cur_layers", "=", "[", "\n", "nn", ".", "ZeroPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "c_in_list", "[", "idx", "]", ",", "num_filters", "[", "idx", "]", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "layer_strides", "[", "idx", "]", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "[", "idx", "]", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "\n", "for", "k", "in", "range", "(", "layer_nums", "[", "idx", "]", ")", ":", "\n", "                ", "cur_layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "num_filters", "[", "idx", "]", ",", "num_filters", "[", "idx", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "[", "idx", "]", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "cur_layers", ")", ")", "\n", "if", "len", "(", "upsample_strides", ")", ">", "0", ":", "\n", "                ", "stride", "=", "upsample_strides", "[", "idx", "]", "\n", "if", "stride", ">=", "1", ":", "\n", "                    ", "self", ".", "deblocks", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "num_filters", "[", "idx", "]", ",", "num_upsample_filters", "[", "idx", "]", ",", "\n", "upsample_strides", "[", "idx", "]", ",", "\n", "stride", "=", "upsample_strides", "[", "idx", "]", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_upsample_filters", "[", "idx", "]", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                    ", "stride", "=", "np", ".", "round", "(", "1", "/", "stride", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "self", ".", "deblocks", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_filters", "[", "idx", "]", ",", "num_upsample_filters", "[", "idx", "]", ",", "\n", "stride", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_upsample_filters", "[", "idx", "]", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", ")", "\n", "\n", "", "", "", "c_in", "=", "sum", "(", "num_upsample_filters", ")", "\n", "if", "len", "(", "upsample_strides", ")", ">", "num_levels", ":", "\n", "            ", "self", ".", "deblocks", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "c_in", ",", "c_in", ",", "upsample_strides", "[", "-", "1", "]", ",", "stride", "=", "upsample_strides", "[", "-", "1", "]", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c_in", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", ")", "\n", "\n", "", "self", ".", "num_bev_features", "=", "c_in", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_2d.base_bev_backbone.BaseBEVBackbone.forward": [[81, 113], ["range", "len", "int", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "len", "ups.append", "ups.append", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                spatial_features\n        Returns:\n        \"\"\"", "\n", "spatial_features", "=", "data_dict", "[", "'spatial_features'", "]", "\n", "ups", "=", "[", "]", "\n", "ret_dict", "=", "{", "}", "\n", "x", "=", "spatial_features", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "[", "i", "]", "(", "x", ")", "\n", "\n", "stride", "=", "int", "(", "spatial_features", ".", "shape", "[", "2", "]", "/", "x", ".", "shape", "[", "2", "]", ")", "\n", "ret_dict", "[", "'spatial_features_%dx'", "%", "stride", "]", "=", "x", "\n", "if", "len", "(", "self", ".", "deblocks", ")", ">", "0", ":", "\n", "                ", "ups", ".", "append", "(", "self", ".", "deblocks", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "ups", ".", "append", "(", "x", ")", "\n", "\n", "", "", "if", "len", "(", "ups", ")", ">", "1", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "ups", ",", "dim", "=", "1", ")", "\n", "", "elif", "len", "(", "ups", ")", "==", "1", ":", "\n", "            ", "x", "=", "ups", "[", "0", "]", "\n", "\n", "", "if", "len", "(", "self", ".", "deblocks", ")", ">", "len", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "self", ".", "deblocks", "[", "-", "1", "]", "(", "x", ")", "\n", "\n", "", "data_dict", "[", "'spatial_features_2d'", "]", "=", "x", "\n", "\n", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.map_to_bev.conv2d_collapse.Conv2DCollapse.__init__": [[9, 23], ["torch.Module.__init__", "pcdet.models.model_utils.basic_block_2d.BasicBlock2D"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "grid_size", ")", ":", "\n", "        ", "\"\"\"\n        Initializes 2D convolution collapse module\n        Args:\n            model_cfg: EasyDict, Model configuration\n            grid_size: (X, Y, Z) Voxel grid size\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_heights", "=", "grid_size", "[", "-", "1", "]", "\n", "self", ".", "num_bev_features", "=", "self", ".", "model_cfg", ".", "NUM_BEV_FEATURES", "\n", "self", ".", "block", "=", "BasicBlock2D", "(", "in_channels", "=", "self", ".", "num_bev_features", "*", "self", ".", "num_heights", ",", "\n", "out_channels", "=", "self", ".", "num_bev_features", ",", "\n", "**", "self", ".", "model_cfg", ".", "ARGS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.map_to_bev.conv2d_collapse.Conv2DCollapse.forward": [[24, 39], ["voxel_features.flatten", "conv2d_collapse.Conv2DCollapse.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Collapses voxel features to BEV via concatenation and channel reduction\n        Args:\n            batch_dict:\n                voxel_features: (B, C, Z, Y, X), Voxel feature representation\n        Returns:\n            batch_dict:\n                spatial_features: (B, C, Y, X), BEV feature representation\n        \"\"\"", "\n", "voxel_features", "=", "batch_dict", "[", "\"voxel_features\"", "]", "\n", "bev_features", "=", "voxel_features", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "2", ")", "# (B, C, Z, Y, X) -> (B, C*Z, Y, X)", "\n", "bev_features", "=", "self", ".", "block", "(", "bev_features", ")", "# (B, C*Z, Y, X) -> (B, C, Y, X)", "\n", "batch_dict", "[", "\"spatial_features\"", "]", "=", "bev_features", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.map_to_bev.pointpillar_scatter.PointPillarScatter.__init__": [[6, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "grid_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_bev_features", "=", "self", ".", "model_cfg", ".", "NUM_BEV_FEATURES", "\n", "self", ".", "nx", ",", "self", ".", "ny", ",", "self", ".", "nz", "=", "grid_size", "\n", "assert", "self", ".", "nz", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.map_to_bev.pointpillar_scatter.PointPillarScatter.forward": [[14, 38], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "batch_spatial_features.view.view.view", "coords[].max().int().item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "indices.type.type.type", "pillars.t.t.t", "batch_spatial_features.view.view.append", "coords[].max().int", "coords[].max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "pillar_features", ",", "coords", "=", "batch_dict", "[", "'pillar_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "batch_spatial_features", "=", "[", "]", "\n", "batch_size", "=", "coords", "[", ":", ",", "0", "]", ".", "max", "(", ")", ".", "int", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "spatial_feature", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "num_bev_features", ",", "\n", "self", ".", "nz", "*", "self", ".", "nx", "*", "self", ".", "ny", ",", "\n", "dtype", "=", "pillar_features", ".", "dtype", ",", "\n", "device", "=", "pillar_features", ".", "device", ")", "\n", "\n", "batch_mask", "=", "coords", "[", ":", ",", "0", "]", "==", "batch_idx", "\n", "this_coords", "=", "coords", "[", "batch_mask", ",", ":", "]", "\n", "indices", "=", "this_coords", "[", ":", ",", "1", "]", "+", "this_coords", "[", ":", ",", "2", "]", "*", "self", ".", "nx", "+", "this_coords", "[", ":", ",", "3", "]", "\n", "indices", "=", "indices", ".", "type", "(", "torch", ".", "long", ")", "\n", "pillars", "=", "pillar_features", "[", "batch_mask", ",", ":", "]", "\n", "pillars", "=", "pillars", ".", "t", "(", ")", "\n", "spatial_feature", "[", ":", ",", "indices", "]", "=", "pillars", "\n", "batch_spatial_features", ".", "append", "(", "spatial_feature", ")", "\n", "\n", "", "batch_spatial_features", "=", "torch", ".", "stack", "(", "batch_spatial_features", ",", "0", ")", "\n", "batch_spatial_features", "=", "batch_spatial_features", ".", "view", "(", "batch_size", ",", "self", ".", "num_bev_features", "*", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", ")", "\n", "batch_dict", "[", "'spatial_features'", "]", "=", "batch_spatial_features", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.map_to_bev.height_compression.HeightCompression.__init__": [[5, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_bev_features", "=", "self", ".", "model_cfg", ".", "NUM_BEV_FEATURES", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.map_to_bev.height_compression.HeightCompression.forward": [[10, 27], ["encoded_spconv_tensor.dense", "spatial_features.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        Returns:\n            batch_dict:\n                spatial_features:\n\n        \"\"\"", "\n", "encoded_spconv_tensor", "=", "batch_dict", "[", "'encoded_spconv_tensor'", "]", "\n", "spatial_features", "=", "encoded_spconv_tensor", ".", "dense", "(", ")", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "spatial_features", ".", "shape", "\n", "spatial_features", "=", "spatial_features", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "batch_dict", "[", "'spatial_features'", "]", "=", "spatial_features", "\n", "batch_dict", "[", "'spatial_features_stride'", "]", "=", "batch_dict", "[", "'encoded_spconv_tensor_stride'", "]", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.SparseBasicBlock.__init__": [[14, 27], ["utils.spconv_utils.spconv.SparseModule.__init__", "utils.spconv_utils.spconv.SubMConv3d", "norm_fn", "torch.ReLU", "torch.ReLU", "utils.spconv_utils.spconv.SubMConv3d", "norm_fn"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "indice_key", "=", "None", ",", "norm_fn", "=", "None", ")", ":", "\n", "        ", "super", "(", "SparseBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "spconv", ".", "SubMConv3d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_fn", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "spconv", ".", "SubMConv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", "\n", ")", "\n", "self", ".", "bn2", "=", "norm_fn", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.SparseBasicBlock.forward": [[28, 47], ["spconv_unet.SparseBasicBlock.conv1", "utils.spconv_utils.replace_feature", "utils.spconv_utils.replace_feature", "spconv_unet.SparseBasicBlock.conv2", "utils.spconv_utils.replace_feature", "utils.spconv_utils.replace_feature", "utils.spconv_utils.replace_feature", "x.features.dim", "x.features.dim", "spconv_unet.SparseBasicBlock.bn1", "spconv_unet.SparseBasicBlock.relu", "spconv_unet.SparseBasicBlock.bn2", "spconv_unet.SparseBasicBlock.downsample", "spconv_unet.SparseBasicBlock.relu"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", ".", "features", "\n", "\n", "assert", "x", ".", "features", ".", "dim", "(", ")", "==", "2", ",", "'x.features.dim()=%d'", "%", "x", ".", "features", ".", "dim", "(", ")", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "replace_feature", "(", "out", ",", "self", ".", "bn1", "(", "out", ".", "features", ")", ")", "\n", "out", "=", "replace_feature", "(", "out", ",", "self", ".", "relu", "(", "out", ".", "features", ")", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "replace_feature", "(", "out", ",", "self", ".", "bn2", "(", "out", ".", "features", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "replace_feature", "(", "out", ",", "out", ".", "features", "+", "identity", ")", "\n", "out", "=", "replace_feature", "(", "out", ",", "self", ".", "relu", "(", "out", ".", "features", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.UNetV2.__init__": [[56, 134], ["torch.Module.__init__", "functools.partial", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "spconv_unet.UNetV2.model_cfg.get", "spconv_unet.SparseBasicBlock", "block", "block", "spconv_unet.SparseBasicBlock", "block", "block", "spconv_unet.SparseBasicBlock", "block", "block", "spconv_unet.SparseBasicBlock", "block", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SubMConv3d", "functools.partial.", "torch.ReLU", "torch.ReLU", "block", "block", "block", "block", "block", "block", "block", "block", "block", "block", "spconv_unet.UNetV2.model_cfg.get", "utils.spconv_utils.spconv.SparseSequential", "block", "utils.spconv_utils.spconv.SparseConv3d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "grid_size", ",", "voxel_size", ",", "point_cloud_range", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "sparse_shape", "=", "grid_size", "[", ":", ":", "-", "1", "]", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "self", ".", "voxel_size", "=", "voxel_size", "\n", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "\n", "norm_fn", "=", "partial", "(", "nn", ".", "BatchNorm1d", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "self", ".", "conv_input", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "input_channels", ",", "16", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", "norm_fn", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "block", "=", "post_act_block", "\n", "\n", "self", ".", "conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "16", ",", "16", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "16", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "32", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", "block", "(", "32", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "32", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", ",", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", ",", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'RETURN_ENCODED_TENSOR'", ",", "True", ")", ":", "\n", "            ", "last_pad", "=", "self", ".", "model_cfg", ".", "get", "(", "'last_pad'", ",", "0", ")", "\n", "\n", "self", ".", "conv_out", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [200, 150, 5] -> [200, 150, 2]", "\n", "spconv", ".", "SparseConv3d", "(", "64", ",", "128", ",", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "last_pad", ",", "\n", "bias", "=", "False", ",", "indice_key", "=", "'spconv_down2'", ")", ",", "\n", "norm_fn", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_out", "=", "None", "\n", "\n", "# decoder", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "", "self", ".", "conv_up_t4", "=", "SparseBasicBlock", "(", "64", ",", "64", ",", "indice_key", "=", "'subm4'", ",", "norm_fn", "=", "norm_fn", ")", "\n", "self", ".", "conv_up_m4", "=", "block", "(", "128", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", "\n", "self", ".", "inv_conv4", "=", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'inverseconv'", ")", "\n", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "self", ".", "conv_up_t3", "=", "SparseBasicBlock", "(", "64", ",", "64", ",", "indice_key", "=", "'subm3'", ",", "norm_fn", "=", "norm_fn", ")", "\n", "self", ".", "conv_up_m3", "=", "block", "(", "128", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", "\n", "self", ".", "inv_conv3", "=", "block", "(", "64", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'inverseconv'", ")", "\n", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "self", ".", "conv_up_t2", "=", "SparseBasicBlock", "(", "32", ",", "32", ",", "indice_key", "=", "'subm2'", ",", "norm_fn", "=", "norm_fn", ")", "\n", "self", ".", "conv_up_m2", "=", "block", "(", "64", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'subm2'", ")", "\n", "self", ".", "inv_conv2", "=", "block", "(", "32", ",", "16", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'inverseconv'", ")", "\n", "\n", "# [1600, 1408, 41] <- [1600, 1408, 41]", "\n", "self", ".", "conv_up_t1", "=", "SparseBasicBlock", "(", "16", ",", "16", ",", "indice_key", "=", "'subm1'", ",", "norm_fn", "=", "norm_fn", ")", "\n", "self", ".", "conv_up_m1", "=", "block", "(", "32", ",", "16", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'subm1'", ")", "\n", "\n", "self", ".", "conv5", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "16", ",", "16", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm1'", ")", "\n", ")", "\n", "self", ".", "num_point_features", "=", "16", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.UNetV2.UR_block_forward": [[135, 144], ["conv_t", "utils.spconv_utils.replace_feature", "conv_m", "spconv_unet.UNetV2.channel_reduction", "utils.spconv_utils.replace_feature", "conv_inv", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature", "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.UNetV2.channel_reduction", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature"], ["", "def", "UR_block_forward", "(", "self", ",", "x_lateral", ",", "x_bottom", ",", "conv_t", ",", "conv_m", ",", "conv_inv", ")", ":", "\n", "        ", "x_trans", "=", "conv_t", "(", "x_lateral", ")", "\n", "x", "=", "x_trans", "\n", "x", "=", "replace_feature", "(", "x", ",", "torch", ".", "cat", "(", "(", "x_bottom", ".", "features", ",", "x_trans", ".", "features", ")", ",", "dim", "=", "1", ")", ")", "\n", "x_m", "=", "conv_m", "(", "x", ")", "\n", "x", "=", "self", ".", "channel_reduction", "(", "x", ",", "x_m", ".", "features", ".", "shape", "[", "1", "]", ")", "\n", "x", "=", "replace_feature", "(", "x", ",", "x_m", ".", "features", "+", "x", ".", "features", ")", "\n", "x", "=", "conv_inv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.UNetV2.channel_reduction": [[145, 161], ["utils.spconv_utils.replace_feature", "features.view().sum", "features.view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature"], ["", "@", "staticmethod", "\n", "def", "channel_reduction", "(", "x", ",", "out_channels", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: x.features (N, C1)\n            out_channels: C2\n\n        Returns:\n\n        \"\"\"", "\n", "features", "=", "x", ".", "features", "\n", "n", ",", "in_channels", "=", "features", ".", "shape", "\n", "assert", "(", "in_channels", "%", "out_channels", "==", "0", ")", "and", "(", "in_channels", ">=", "out_channels", ")", "\n", "\n", "x", "=", "replace_feature", "(", "x", ",", "features", ".", "view", "(", "n", ",", "out_channels", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "2", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.UNetV2.forward": [[162, 213], ["utils.spconv_utils.spconv.SparseConvTensor", "spconv_unet.UNetV2.conv_input", "spconv_unet.UNetV2.conv1", "spconv_unet.UNetV2.conv2", "spconv_unet.UNetV2.conv3", "spconv_unet.UNetV2.conv4", "spconv_unet.UNetV2.UR_block_forward", "spconv_unet.UNetV2.UR_block_forward", "spconv_unet.UNetV2.UR_block_forward", "spconv_unet.UNetV2.UR_block_forward", "utils.common_utils.get_voxel_centers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spconv_unet.UNetV2.conv_out", "voxel_coords.int", "spconv_unet.UNetV2.indices[].float"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.UNetV2.UR_block_forward", "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.UNetV2.UR_block_forward", "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.UNetV2.UR_block_forward", "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_unet.UNetV2.UR_block_forward", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_voxel_centers"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                voxel_coords: (num_voxels, 4), [batch_idx, z_idx, y_idx, x_idx]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n                point_features: (N, C)\n        \"\"\"", "\n", "voxel_features", ",", "voxel_coords", "=", "batch_dict", "[", "'voxel_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "voxel_features", ",", "\n", "indices", "=", "voxel_coords", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "self", ".", "sparse_shape", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "x", "=", "self", ".", "conv_input", "(", "input_sp_tensor", ")", "\n", "\n", "x_conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x_conv2", "=", "self", ".", "conv2", "(", "x_conv1", ")", "\n", "x_conv3", "=", "self", ".", "conv3", "(", "x_conv2", ")", "\n", "x_conv4", "=", "self", ".", "conv4", "(", "x_conv3", ")", "\n", "\n", "if", "self", ".", "conv_out", "is", "not", "None", ":", "\n", "# for detection head", "\n", "# [200, 176, 5] -> [200, 176, 2]", "\n", "            ", "out", "=", "self", ".", "conv_out", "(", "x_conv4", ")", "\n", "batch_dict", "[", "'encoded_spconv_tensor'", "]", "=", "out", "\n", "batch_dict", "[", "'encoded_spconv_tensor_stride'", "]", "=", "8", "\n", "\n", "# for segmentation head", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "", "x_up4", "=", "self", ".", "UR_block_forward", "(", "x_conv4", ",", "x_conv4", ",", "self", ".", "conv_up_t4", ",", "self", ".", "conv_up_m4", ",", "self", ".", "inv_conv4", ")", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "x_up3", "=", "self", ".", "UR_block_forward", "(", "x_conv3", ",", "x_up4", ",", "self", ".", "conv_up_t3", ",", "self", ".", "conv_up_m3", ",", "self", ".", "inv_conv3", ")", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "x_up2", "=", "self", ".", "UR_block_forward", "(", "x_conv2", ",", "x_up3", ",", "self", ".", "conv_up_t2", ",", "self", ".", "conv_up_m2", ",", "self", ".", "inv_conv2", ")", "\n", "# [1600, 1408, 41] <- [1600, 1408, 41]", "\n", "x_up1", "=", "self", ".", "UR_block_forward", "(", "x_conv1", ",", "x_up2", ",", "self", ".", "conv_up_t1", ",", "self", ".", "conv_up_m1", ",", "self", ".", "conv5", ")", "\n", "\n", "batch_dict", "[", "'point_features'", "]", "=", "x_up1", ".", "features", "\n", "point_coords", "=", "common_utils", ".", "get_voxel_centers", "(", "\n", "x_up1", ".", "indices", "[", ":", ",", "1", ":", "]", ",", "downsample_times", "=", "1", ",", "voxel_size", "=", "self", ".", "voxel_size", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", "\n", ")", "\n", "batch_dict", "[", "'point_coords'", "]", "=", "torch", ".", "cat", "(", "(", "x_up1", ".", "indices", "[", ":", ",", "0", ":", "1", "]", ".", "float", "(", ")", ",", "point_coords", ")", ",", "dim", "=", "1", ")", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.pointnet2_backbone.PointNet2MSG.__init__": [[10, 49], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "pointnet2_backbone.PointNet2MSG.model_cfg.SA_CONFIG.NPOINTS.__len__", "pointnet2_backbone.PointNet2MSG.model_cfg.SA_CONFIG.MLPS[].copy", "range", "pointnet2_backbone.PointNet2MSG.SA_modules.append", "skip_channel_list.append", "pointnet2_backbone.PointNet2MSG.model_cfg.FP_MLPS.__len__", "pointnet2_backbone.PointNet2MSG.FP_modules.append", "pointnet2_backbone.PointNet2MSG.__len__", "ops.pointnet2.pointnet2_batch.pointnet2_modules.PointnetSAModuleMSG", "ops.pointnet2.pointnet2_batch.pointnet2_modules.PointnetFPModule", "len", "pointnet2_backbone.PointNet2MSG.model_cfg.SA_CONFIG.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "\n", "self", ".", "SA_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "channel_in", "=", "input_channels", "-", "3", "\n", "\n", "self", ".", "num_points_each_layer", "=", "[", "]", "\n", "skip_channel_list", "=", "[", "input_channels", "-", "3", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NPOINTS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "mlps", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "MLPS", "[", "k", "]", ".", "copy", "(", ")", "\n", "channel_out", "=", "0", "\n", "for", "idx", "in", "range", "(", "mlps", ".", "__len__", "(", ")", ")", ":", "\n", "                ", "mlps", "[", "idx", "]", "=", "[", "channel_in", "]", "+", "mlps", "[", "idx", "]", "\n", "channel_out", "+=", "mlps", "[", "idx", "]", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "SA_modules", ".", "append", "(", "\n", "pointnet2_modules", ".", "PointnetSAModuleMSG", "(", "\n", "npoint", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NPOINTS", "[", "k", "]", ",", "\n", "radii", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "RADIUS", "[", "k", "]", ",", "\n", "nsamples", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NSAMPLE", "[", "k", "]", ",", "\n", "mlps", "=", "mlps", ",", "\n", "use_xyz", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "get", "(", "'USE_XYZ'", ",", "True", ")", ",", "\n", ")", "\n", ")", "\n", "skip_channel_list", ".", "append", "(", "channel_out", ")", "\n", "channel_in", "=", "channel_out", "\n", "\n", "", "self", ".", "FP_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "model_cfg", ".", "FP_MLPS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "pre_channel", "=", "self", ".", "model_cfg", ".", "FP_MLPS", "[", "k", "+", "1", "]", "[", "-", "1", "]", "if", "k", "+", "1", "<", "len", "(", "self", ".", "model_cfg", ".", "FP_MLPS", ")", "else", "channel_out", "\n", "self", ".", "FP_modules", ".", "append", "(", "\n", "pointnet2_modules", ".", "PointnetFPModule", "(", "\n", "mlp", "=", "[", "pre_channel", "+", "skip_channel_list", "[", "k", "]", "]", "+", "self", ".", "model_cfg", ".", "FP_MLPS", "[", "k", "]", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "num_point_features", "=", "self", ".", "model_cfg", ".", "FP_MLPS", "[", "0", "]", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.pointnet2_backbone.PointNet2MSG.break_up_pc": [[50, 55], ["pc[].contiguous", "pc[].contiguous", "pc.size"], "methods", ["None"], ["", "def", "break_up_pc", "(", "self", ",", "pc", ")", ":", "\n", "        ", "batch_idx", "=", "pc", "[", ":", ",", "0", "]", "\n", "xyz", "=", "pc", "[", ":", ",", "1", ":", "4", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "pc", "[", ":", ",", "4", ":", "]", ".", "contiguous", "(", ")", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "4", "else", "None", ")", "\n", "return", "batch_idx", ",", "xyz", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.pointnet2_backbone.PointNet2MSG.forward": [[56, 95], ["pointnet2_backbone.PointNet2MSG.break_up_pc", "xyz.view.view.new_zeros().int", "range", "xyz.view.view.view", "range", "range", "l_features[].permute().contiguous", "l_features[].permute().contiguous.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.view.new_zeros().int.min", "xyz.view.new_zeros().int.max", "features.view().permute().contiguous", "len", "l_xyz.append", "l_features.append", "xyz.view.view.new_zeros", "l_features[].permute", "batch_idx[].float", "l_xyz[].view", "features.view().permute", "len", "features.view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.pointnet2_backbone.PointNet2Backbone.break_up_pc"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                points: (num_points, 4 + C), [batch_idx, x, y, z, ...]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n                point_features: (N, C)\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "points", "=", "batch_dict", "[", "'points'", "]", "\n", "batch_idx", ",", "xyz", ",", "features", "=", "self", ".", "break_up_pc", "(", "points", ")", "\n", "\n", "xyz_batch_cnt", "=", "xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "xyz_batch_cnt", "[", "bs_idx", "]", "=", "(", "batch_idx", "==", "bs_idx", ")", ".", "sum", "(", ")", "\n", "\n", "", "assert", "xyz_batch_cnt", ".", "min", "(", ")", "==", "xyz_batch_cnt", ".", "max", "(", ")", "\n", "xyz", "=", "xyz", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "features", "=", "features", ".", "view", "(", "batch_size", ",", "-", "1", ",", "features", ".", "shape", "[", "-", "1", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "if", "features", "is", "not", "None", "else", "None", "\n", "\n", "l_xyz", ",", "l_features", "=", "[", "xyz", "]", ",", "[", "features", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "SA_modules", ")", ")", ":", "\n", "            ", "li_xyz", ",", "li_features", "=", "self", ".", "SA_modules", "[", "i", "]", "(", "l_xyz", "[", "i", "]", ",", "l_features", "[", "i", "]", ")", "\n", "l_xyz", ".", "append", "(", "li_xyz", ")", "\n", "l_features", ".", "append", "(", "li_features", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "-", "1", ",", "-", "(", "len", "(", "self", ".", "FP_modules", ")", "+", "1", ")", ",", "-", "1", ")", ":", "\n", "            ", "l_features", "[", "i", "-", "1", "]", "=", "self", ".", "FP_modules", "[", "i", "]", "(", "\n", "l_xyz", "[", "i", "-", "1", "]", ",", "l_xyz", "[", "i", "]", ",", "l_features", "[", "i", "-", "1", "]", ",", "l_features", "[", "i", "]", "\n", ")", "# (B, C, N)", "\n", "\n", "", "point_features", "=", "l_features", "[", "0", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (B, N, C)", "\n", "batch_dict", "[", "'point_features'", "]", "=", "point_features", ".", "view", "(", "-", "1", ",", "point_features", ".", "shape", "[", "-", "1", "]", ")", "\n", "batch_dict", "[", "'point_coords'", "]", "=", "torch", ".", "cat", "(", "(", "batch_idx", "[", ":", ",", "None", "]", ".", "float", "(", ")", ",", "l_xyz", "[", "0", "]", ".", "view", "(", "-", "1", ",", "3", ")", ")", ",", "dim", "=", "1", ")", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.pointnet2_backbone.PointNet2Backbone.__init__": [[101, 141], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "pointnet2_backbone.PointNet2Backbone.model_cfg.SA_CONFIG.NPOINTS.__len__", "pointnet2_backbone.PointNet2Backbone.num_points_each_layer.append", "pointnet2_backbone.PointNet2Backbone.model_cfg.SA_CONFIG.MLPS[].copy", "range", "pointnet2_backbone.PointNet2Backbone.SA_modules.append", "skip_channel_list.append", "pointnet2_backbone.PointNet2Backbone.model_cfg.FP_MLPS.__len__", "pointnet2_backbone.PointNet2Backbone.FP_modules.append", "pointnet2_backbone.PointNet2Backbone.__len__", "ops.pointnet2.pointnet2_stack.pointnet2_modules.StackSAModuleMSG", "ops.pointnet2.pointnet2_stack.pointnet2_modules.StackPointnetFPModule", "len", "pointnet2_backbone.PointNet2Backbone.model_cfg.SA_CONFIG.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "False", ",", "'DO NOT USE THIS CURRENTLY SINCE IT MAY HAVE POTENTIAL BUGS, 20200723'", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "\n", "self", ".", "SA_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "channel_in", "=", "input_channels", "-", "3", "\n", "\n", "self", ".", "num_points_each_layer", "=", "[", "]", "\n", "skip_channel_list", "=", "[", "input_channels", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NPOINTS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "num_points_each_layer", ".", "append", "(", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NPOINTS", "[", "k", "]", ")", "\n", "mlps", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "MLPS", "[", "k", "]", ".", "copy", "(", ")", "\n", "channel_out", "=", "0", "\n", "for", "idx", "in", "range", "(", "mlps", ".", "__len__", "(", ")", ")", ":", "\n", "                ", "mlps", "[", "idx", "]", "=", "[", "channel_in", "]", "+", "mlps", "[", "idx", "]", "\n", "channel_out", "+=", "mlps", "[", "idx", "]", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "SA_modules", ".", "append", "(", "\n", "pointnet2_modules_stack", ".", "StackSAModuleMSG", "(", "\n", "radii", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "RADIUS", "[", "k", "]", ",", "\n", "nsamples", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NSAMPLE", "[", "k", "]", ",", "\n", "mlps", "=", "mlps", ",", "\n", "use_xyz", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "get", "(", "'USE_XYZ'", ",", "True", ")", ",", "\n", ")", "\n", ")", "\n", "skip_channel_list", ".", "append", "(", "channel_out", ")", "\n", "channel_in", "=", "channel_out", "\n", "\n", "", "self", ".", "FP_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "model_cfg", ".", "FP_MLPS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "pre_channel", "=", "self", ".", "model_cfg", ".", "FP_MLPS", "[", "k", "+", "1", "]", "[", "-", "1", "]", "if", "k", "+", "1", "<", "len", "(", "self", ".", "model_cfg", ".", "FP_MLPS", ")", "else", "channel_out", "\n", "self", ".", "FP_modules", ".", "append", "(", "\n", "pointnet2_modules_stack", ".", "StackPointnetFPModule", "(", "\n", "mlp", "=", "[", "pre_channel", "+", "skip_channel_list", "[", "k", "]", "]", "+", "self", ".", "model_cfg", ".", "FP_MLPS", "[", "k", "]", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "num_point_features", "=", "self", ".", "model_cfg", ".", "FP_MLPS", "[", "0", "]", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.pointnet2_backbone.PointNet2Backbone.break_up_pc": [[142, 147], ["pc[].contiguous", "pc[].contiguous", "pc.size"], "methods", ["None"], ["", "def", "break_up_pc", "(", "self", ",", "pc", ")", ":", "\n", "        ", "batch_idx", "=", "pc", "[", ":", ",", "0", "]", "\n", "xyz", "=", "pc", "[", ":", ",", "1", ":", "4", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "pc", "[", ":", ",", "4", ":", "]", ".", "contiguous", "(", ")", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "4", "else", "None", ")", "\n", "return", "batch_idx", ",", "xyz", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.pointnet2_backbone.PointNet2Backbone.forward": [[148, 207], ["pointnet2_backbone.PointNet2Backbone.break_up_pc", "xyz.new_zeros().int", "range", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.new_zeros().int().fill_", "l_xyz.append", "l_features.append", "l_batch_cnt.append", "xyz.new_zeros", "new_xyz_list.append", "batch_idx[].float", "len", "ops.pointnet2.pointnet2_stack.pointnet2_utils.farthest_point_sample().long", "xyz.new_zeros().int", "len", "ops.pointnet2.pointnet2_stack.pointnet2_utils.farthest_point_sample", "xyz.new_zeros", "cur_xyz[].contiguous"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.pointnet2_backbone.PointNet2Backbone.break_up_pc"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                points: (num_points, 4 + C), [batch_idx, x, y, z, ...]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n                point_features: (N, C)\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "points", "=", "batch_dict", "[", "'points'", "]", "\n", "batch_idx", ",", "xyz", ",", "features", "=", "self", ".", "break_up_pc", "(", "points", ")", "\n", "\n", "xyz_batch_cnt", "=", "xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "xyz_batch_cnt", "[", "bs_idx", "]", "=", "(", "batch_idx", "==", "bs_idx", ")", ".", "sum", "(", ")", "\n", "\n", "", "l_xyz", ",", "l_features", ",", "l_batch_cnt", "=", "[", "xyz", "]", ",", "[", "features", "]", ",", "[", "xyz_batch_cnt", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "SA_modules", ")", ")", ":", "\n", "            ", "new_xyz_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "if", "len", "(", "l_xyz", ")", "==", "1", ":", "\n", "                    ", "cur_xyz", "=", "l_xyz", "[", "0", "]", "[", "batch_idx", "==", "k", "]", "\n", "", "else", ":", "\n", "                    ", "last_num_points", "=", "self", ".", "num_points_each_layer", "[", "i", "-", "1", "]", "\n", "cur_xyz", "=", "l_xyz", "[", "-", "1", "]", "[", "k", "*", "last_num_points", ":", "(", "k", "+", "1", ")", "*", "last_num_points", "]", "\n", "", "cur_pt_idxs", "=", "pointnet2_utils_stack", ".", "farthest_point_sample", "(", "\n", "cur_xyz", "[", "None", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ",", "self", ".", "num_points_each_layer", "[", "i", "]", "\n", ")", ".", "long", "(", ")", "[", "0", "]", "\n", "if", "cur_xyz", ".", "shape", "[", "0", "]", "<", "self", ".", "num_points_each_layer", "[", "i", "]", ":", "\n", "                    ", "empty_num", "=", "self", ".", "num_points_each_layer", "[", "i", "]", "-", "cur_xyz", ".", "shape", "[", "1", "]", "\n", "cur_pt_idxs", "[", "0", ",", "-", "empty_num", ":", "]", "=", "cur_pt_idxs", "[", "0", ",", ":", "empty_num", "]", "\n", "", "new_xyz_list", ".", "append", "(", "cur_xyz", "[", "cur_pt_idxs", "]", ")", "\n", "", "new_xyz", "=", "torch", ".", "cat", "(", "new_xyz_list", ",", "dim", "=", "0", ")", "\n", "\n", "new_xyz_batch_cnt", "=", "xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", ".", "fill_", "(", "self", ".", "num_points_each_layer", "[", "i", "]", ")", "\n", "li_xyz", ",", "li_features", "=", "self", ".", "SA_modules", "[", "i", "]", "(", "\n", "xyz", "=", "l_xyz", "[", "i", "]", ",", "features", "=", "l_features", "[", "i", "]", ",", "xyz_batch_cnt", "=", "l_batch_cnt", "[", "i", "]", ",", "\n", "new_xyz", "=", "new_xyz", ",", "new_xyz_batch_cnt", "=", "new_xyz_batch_cnt", "\n", ")", "\n", "\n", "l_xyz", ".", "append", "(", "li_xyz", ")", "\n", "l_features", ".", "append", "(", "li_features", ")", "\n", "l_batch_cnt", ".", "append", "(", "new_xyz_batch_cnt", ")", "\n", "\n", "", "l_features", "[", "0", "]", "=", "points", "[", ":", ",", "1", ":", "]", "\n", "for", "i", "in", "range", "(", "-", "1", ",", "-", "(", "len", "(", "self", ".", "FP_modules", ")", "+", "1", ")", ",", "-", "1", ")", ":", "\n", "            ", "l_features", "[", "i", "-", "1", "]", "=", "self", ".", "FP_modules", "[", "i", "]", "(", "\n", "unknown", "=", "l_xyz", "[", "i", "-", "1", "]", ",", "unknown_batch_cnt", "=", "l_batch_cnt", "[", "i", "-", "1", "]", ",", "\n", "known", "=", "l_xyz", "[", "i", "]", ",", "known_batch_cnt", "=", "l_batch_cnt", "[", "i", "]", ",", "\n", "unknown_feats", "=", "l_features", "[", "i", "-", "1", "]", ",", "known_feats", "=", "l_features", "[", "i", "]", "\n", ")", "\n", "\n", "", "batch_dict", "[", "'point_features'", "]", "=", "l_features", "[", "0", "]", "\n", "batch_dict", "[", "'point_coords'", "]", "=", "torch", ".", "cat", "(", "(", "batch_idx", "[", ":", ",", "None", "]", ".", "float", "(", ")", ",", "l_xyz", "[", "0", "]", ")", ",", "dim", "=", "1", ")", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_backbone.SparseBasicBlock.__init__": [[33, 49], ["utils.spconv_utils.spconv.SparseModule.__init__", "utils.spconv_utils.spconv.SubMConv3d", "norm_fn", "torch.ReLU", "utils.spconv_utils.spconv.SubMConv3d", "norm_fn"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "norm_fn", "=", "None", ",", "downsample", "=", "None", ",", "indice_key", "=", "None", ")", ":", "\n", "        ", "super", "(", "SparseBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "norm_fn", "is", "not", "None", "\n", "bias", "=", "norm_fn", "is", "not", "None", "\n", "self", ".", "conv1", "=", "spconv", ".", "SubMConv3d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "bias", ",", "indice_key", "=", "indice_key", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_fn", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "spconv", ".", "SubMConv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "bias", ",", "indice_key", "=", "indice_key", "\n", ")", "\n", "self", ".", "bn2", "=", "norm_fn", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_backbone.SparseBasicBlock.forward": [[50, 67], ["spconv_backbone.SparseBasicBlock.conv1", "utils.spconv_utils.replace_feature", "utils.spconv_utils.replace_feature", "spconv_backbone.SparseBasicBlock.conv2", "utils.spconv_utils.replace_feature", "utils.spconv_utils.replace_feature", "utils.spconv_utils.replace_feature", "spconv_backbone.SparseBasicBlock.bn1", "spconv_backbone.SparseBasicBlock.relu", "spconv_backbone.SparseBasicBlock.bn2", "spconv_backbone.SparseBasicBlock.downsample", "spconv_backbone.SparseBasicBlock.relu"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature", "home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.replace_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "replace_feature", "(", "out", ",", "self", ".", "bn1", "(", "out", ".", "features", ")", ")", "\n", "out", "=", "replace_feature", "(", "out", ",", "self", ".", "relu", "(", "out", ".", "features", ")", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "replace_feature", "(", "out", ",", "self", ".", "bn2", "(", "out", ".", "features", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "replace_feature", "(", "out", ",", "out", ".", "features", "+", "identity", ".", "features", ")", "\n", "out", "=", "replace_feature", "(", "out", ",", "self", ".", "relu", "(", "out", ".", "features", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_backbone.VoxelBackBone8x.__init__": [[70, 124], ["torch.Module.__init__", "functools.partial", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "spconv_backbone.VoxelBackBone8x.model_cfg.get", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SubMConv3d", "functools.partial.", "torch.ReLU", "block", "block", "block", "block", "block", "block", "block", "block", "block", "block", "utils.spconv_utils.spconv.SparseConv3d", "functools.partial.", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "grid_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "norm_fn", "=", "partial", "(", "nn", ".", "BatchNorm1d", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "self", ".", "sparse_shape", "=", "grid_size", "[", ":", ":", "-", "1", "]", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "\n", "self", ".", "conv_input", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "input_channels", ",", "16", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", "norm_fn", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "block", "=", "post_act_block", "\n", "\n", "self", ".", "conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "16", ",", "16", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "16", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "32", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", "block", "(", "32", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "32", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", ",", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", ",", "\n", "block", "(", "64", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", ",", "\n", ")", "\n", "\n", "last_pad", "=", "0", "\n", "last_pad", "=", "self", ".", "model_cfg", ".", "get", "(", "'last_pad'", ",", "last_pad", ")", "\n", "self", ".", "conv_out", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [200, 150, 5] -> [200, 150, 2]", "\n", "spconv", ".", "SparseConv3d", "(", "64", ",", "128", ",", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "last_pad", ",", "\n", "bias", "=", "False", ",", "indice_key", "=", "'spconv_down2'", ")", ",", "\n", "norm_fn", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "num_point_features", "=", "128", "\n", "self", ".", "backbone_channels", "=", "{", "\n", "'x_conv1'", ":", "16", ",", "\n", "'x_conv2'", ":", "32", ",", "\n", "'x_conv3'", ":", "64", ",", "\n", "'x_conv4'", ":", "64", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_backbone.VoxelBackBone8x.forward": [[128, 181], ["utils.spconv_utils.spconv.SparseConvTensor", "spconv_backbone.VoxelBackBone8x.conv_input", "spconv_backbone.VoxelBackBone8x.conv1", "spconv_backbone.VoxelBackBone8x.conv2", "spconv_backbone.VoxelBackBone8x.conv3", "spconv_backbone.VoxelBackBone8x.conv4", "spconv_backbone.VoxelBackBone8x.conv_out", "batch_dict.update", "batch_dict.update", "batch_dict.update", "voxel_coords.int"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                voxel_coords: (num_voxels, 4), [batch_idx, z_idx, y_idx, x_idx]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        \"\"\"", "\n", "voxel_features", ",", "voxel_coords", "=", "batch_dict", "[", "'voxel_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "voxel_features", ",", "\n", "indices", "=", "voxel_coords", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "self", ".", "sparse_shape", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "\n", "x", "=", "self", ".", "conv_input", "(", "input_sp_tensor", ")", "\n", "\n", "x_conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x_conv2", "=", "self", ".", "conv2", "(", "x_conv1", ")", "\n", "x_conv3", "=", "self", ".", "conv3", "(", "x_conv2", ")", "\n", "x_conv4", "=", "self", ".", "conv4", "(", "x_conv3", ")", "\n", "\n", "# for detection head", "\n", "# [200, 176, 5] -> [200, 176, 2]", "\n", "out", "=", "self", ".", "conv_out", "(", "x_conv4", ")", "\n", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'encoded_spconv_tensor'", ":", "out", ",", "\n", "'encoded_spconv_tensor_stride'", ":", "8", "\n", "}", ")", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'multi_scale_3d_features'", ":", "{", "\n", "'x_conv1'", ":", "x_conv1", ",", "\n", "'x_conv2'", ":", "x_conv2", ",", "\n", "'x_conv3'", ":", "x_conv3", ",", "\n", "'x_conv4'", ":", "x_conv4", ",", "\n", "}", "\n", "}", ")", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'multi_scale_3d_strides'", ":", "{", "\n", "'x_conv1'", ":", "1", ",", "\n", "'x_conv2'", ":", "2", ",", "\n", "'x_conv3'", ":", "4", ",", "\n", "'x_conv4'", ":", "8", ",", "\n", "}", "\n", "}", ")", "\n", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_backbone.VoxelResBackBone8x.__init__": [[184, 239], ["torch.Module.__init__", "functools.partial", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "spconv_backbone.VoxelResBackBone8x.model_cfg.get", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SubMConv3d", "functools.partial.", "torch.ReLU", "spconv_backbone.SparseBasicBlock", "spconv_backbone.SparseBasicBlock", "block", "spconv_backbone.SparseBasicBlock", "spconv_backbone.SparseBasicBlock", "block", "spconv_backbone.SparseBasicBlock", "spconv_backbone.SparseBasicBlock", "block", "spconv_backbone.SparseBasicBlock", "spconv_backbone.SparseBasicBlock", "utils.spconv_utils.spconv.SparseConv3d", "functools.partial.", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "grid_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "norm_fn", "=", "partial", "(", "nn", ".", "BatchNorm1d", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "self", ".", "sparse_shape", "=", "grid_size", "[", ":", ":", "-", "1", "]", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "\n", "self", ".", "conv_input", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "input_channels", ",", "16", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", "norm_fn", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "block", "=", "post_act_block", "\n", "\n", "self", ".", "conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "SparseBasicBlock", "(", "16", ",", "16", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res1'", ")", ",", "\n", "SparseBasicBlock", "(", "16", ",", "16", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res1'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "16", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res2'", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res2'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "32", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res3'", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res3'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "64", ",", "128", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "SparseBasicBlock", "(", "128", ",", "128", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res4'", ")", ",", "\n", "SparseBasicBlock", "(", "128", ",", "128", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res4'", ")", ",", "\n", ")", "\n", "\n", "last_pad", "=", "0", "\n", "last_pad", "=", "self", ".", "model_cfg", ".", "get", "(", "'last_pad'", ",", "last_pad", ")", "\n", "self", ".", "conv_out", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [200, 150, 5] -> [200, 150, 2]", "\n", "spconv", ".", "SparseConv3d", "(", "128", ",", "128", ",", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "last_pad", ",", "\n", "bias", "=", "False", ",", "indice_key", "=", "'spconv_down2'", ")", ",", "\n", "norm_fn", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "num_point_features", "=", "128", "\n", "self", ".", "backbone_channels", "=", "{", "\n", "'x_conv1'", ":", "16", ",", "\n", "'x_conv2'", ":", "32", ",", "\n", "'x_conv3'", ":", "64", ",", "\n", "'x_conv4'", ":", "128", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_backbone.VoxelResBackBone8x.forward": [[241, 294], ["utils.spconv_utils.spconv.SparseConvTensor", "spconv_backbone.VoxelResBackBone8x.conv_input", "spconv_backbone.VoxelResBackBone8x.conv1", "spconv_backbone.VoxelResBackBone8x.conv2", "spconv_backbone.VoxelResBackBone8x.conv3", "spconv_backbone.VoxelResBackBone8x.conv4", "spconv_backbone.VoxelResBackBone8x.conv_out", "batch_dict.update", "batch_dict.update", "batch_dict.update", "voxel_coords.int"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                voxel_coords: (num_voxels, 4), [batch_idx, z_idx, y_idx, x_idx]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        \"\"\"", "\n", "voxel_features", ",", "voxel_coords", "=", "batch_dict", "[", "'voxel_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "voxel_features", ",", "\n", "indices", "=", "voxel_coords", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "self", ".", "sparse_shape", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "x", "=", "self", ".", "conv_input", "(", "input_sp_tensor", ")", "\n", "\n", "x_conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x_conv2", "=", "self", ".", "conv2", "(", "x_conv1", ")", "\n", "x_conv3", "=", "self", ".", "conv3", "(", "x_conv2", ")", "\n", "x_conv4", "=", "self", ".", "conv4", "(", "x_conv3", ")", "\n", "\n", "# for detection head", "\n", "# [200, 176, 5] -> [200, 176, 2]", "\n", "out", "=", "self", ".", "conv_out", "(", "x_conv4", ")", "\n", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'encoded_spconv_tensor'", ":", "out", ",", "\n", "'encoded_spconv_tensor_stride'", ":", "8", "\n", "}", ")", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'multi_scale_3d_features'", ":", "{", "\n", "'x_conv1'", ":", "x_conv1", ",", "\n", "'x_conv2'", ":", "x_conv2", ",", "\n", "'x_conv3'", ":", "x_conv3", ",", "\n", "'x_conv4'", ":", "x_conv4", ",", "\n", "}", "\n", "}", ")", "\n", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'multi_scale_3d_strides'", ":", "{", "\n", "'x_conv1'", ":", "1", ",", "\n", "'x_conv2'", ":", "2", ",", "\n", "'x_conv3'", ":", "4", ",", "\n", "'x_conv4'", ":", "8", ",", "\n", "}", "\n", "}", ")", "\n", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.backbones_3d.spconv_backbone.post_act_block": [[8, 28], ["utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SubMConv3d", "norm_fn", "torch.ReLU", "utils.spconv_utils.spconv.SparseConv3d", "utils.spconv_utils.spconv.SparseInverseConv3d"], "function", ["None"], ["def", "post_act_block", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "indice_key", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "conv_type", "=", "'subm'", ",", "norm_fn", "=", "None", ")", ":", "\n", "\n", "    ", "if", "conv_type", "==", "'subm'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SubMConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", "\n", "", "elif", "conv_type", "==", "'spconv'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SparseConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", "\n", "", "elif", "conv_type", "==", "'inverseconv'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SparseInverseConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "indice_key", "=", "indice_key", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "m", "=", "spconv", ".", "SparseSequential", "(", "\n", "conv", ",", "\n", "norm_fn", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.dynamic_pillar_vfe.PFNLayerV2.__init__": [[15, 34], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "use_norm", "=", "True", ",", "\n", "last_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "last_vfe", "=", "last_layer", "\n", "self", ".", "use_norm", "=", "use_norm", "\n", "if", "not", "self", ".", "last_vfe", ":", "\n", "            ", "out_channels", "=", "out_channels", "//", "2", "\n", "\n", "", "if", "self", ".", "use_norm", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "True", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.dynamic_pillar_vfe.PFNLayerV2.forward": [[35, 47], ["dynamic_pillar_vfe.PFNLayerV2.linear", "dynamic_pillar_vfe.PFNLayerV2.relu", "dynamic_pillar_vfe.PFNLayerV2.norm", "torch_scatter.scatter_max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "unq_inv", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "if", "self", ".", "use_norm", "else", "x", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x_max", "=", "torch_scatter", ".", "scatter_max", "(", "x", ",", "unq_inv", ",", "dim", "=", "0", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "last_vfe", ":", "\n", "            ", "return", "x_max", "\n", "", "else", ":", "\n", "            ", "x_concatenated", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_max", "[", "unq_inv", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "return", "x_concatenated", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.dynamic_pillar_vfe.DynamicPillarVFE.__init__": [[50, 86], ["vfe_template.VFETemplate.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "len", "list", "pfn_layers.append", "len", "dynamic_pillar_vfe.PFNLayerV2", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_point_features", ",", "voxel_size", ",", "grid_size", ",", "point_cloud_range", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ")", "\n", "\n", "self", ".", "use_norm", "=", "self", ".", "model_cfg", ".", "USE_NORM", "\n", "self", ".", "with_distance", "=", "self", ".", "model_cfg", ".", "WITH_DISTANCE", "\n", "self", ".", "use_absolute_xyz", "=", "self", ".", "model_cfg", ".", "USE_ABSLOTE_XYZ", "\n", "num_point_features", "+=", "6", "if", "self", ".", "use_absolute_xyz", "else", "3", "\n", "if", "self", ".", "with_distance", ":", "\n", "            ", "num_point_features", "+=", "1", "\n", "\n", "", "self", ".", "num_filters", "=", "self", ".", "model_cfg", ".", "NUM_FILTERS", "\n", "assert", "len", "(", "self", ".", "num_filters", ")", ">", "0", "\n", "num_filters", "=", "[", "num_point_features", "]", "+", "list", "(", "self", ".", "num_filters", ")", "\n", "\n", "pfn_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_filters", ")", "-", "1", ")", ":", "\n", "            ", "in_filters", "=", "num_filters", "[", "i", "]", "\n", "out_filters", "=", "num_filters", "[", "i", "+", "1", "]", "\n", "pfn_layers", ".", "append", "(", "\n", "PFNLayerV2", "(", "in_filters", ",", "out_filters", ",", "self", ".", "use_norm", ",", "last_layer", "=", "(", "i", ">=", "len", "(", "num_filters", ")", "-", "2", ")", ")", "\n", ")", "\n", "", "self", ".", "pfn_layers", "=", "nn", ".", "ModuleList", "(", "pfn_layers", ")", "\n", "\n", "self", ".", "voxel_x", "=", "voxel_size", "[", "0", "]", "\n", "self", ".", "voxel_y", "=", "voxel_size", "[", "1", "]", "\n", "self", ".", "voxel_z", "=", "voxel_size", "[", "2", "]", "\n", "self", ".", "x_offset", "=", "self", ".", "voxel_x", "/", "2", "+", "point_cloud_range", "[", "0", "]", "\n", "self", ".", "y_offset", "=", "self", ".", "voxel_y", "/", "2", "+", "point_cloud_range", "[", "1", "]", "\n", "self", ".", "z_offset", "=", "self", ".", "voxel_z", "/", "2", "+", "point_cloud_range", "[", "2", "]", "\n", "\n", "self", ".", "scale_xy", "=", "grid_size", "[", "0", "]", "*", "grid_size", "[", "1", "]", "\n", "self", ".", "scale_y", "=", "grid_size", "[", "1", "]", "\n", "\n", "self", ".", "grid_size", "=", "torch", ".", "tensor", "(", "grid_size", ")", ".", "cuda", "(", ")", "\n", "self", ".", "voxel_size", "=", "torch", ".", "tensor", "(", "voxel_size", ")", ".", "cuda", "(", ")", "\n", "self", ".", "point_cloud_range", "=", "torch", ".", "tensor", "(", "point_cloud_range", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.dynamic_pillar_vfe.DynamicPillarVFE.get_output_feature_dim": [[87, 89], ["None"], "methods", ["None"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_filters", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.dynamic_pillar_vfe.DynamicPillarVFE.forward": [[90, 143], ["torch.floor().int", "torch.floor().int", "torch.floor().int", "torch.floor().int", "torch.floor().int", "torch.floor().int", "torch.floor().int", "torch.floor().int", "torch.floor().int", "points[].contiguous", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch_scatter.scatter_mean", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unq_coords.int.int.int", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "pfn.append", "pfn", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.zeros().to().int", "torch.zeros().to().int", "torch.zeros().to().int", "torch.zeros().to().int", "torch.zeros().to().int", "torch.zeros().to().int", "torch.zeros().to().int", "torch.zeros().to().int", "torch.zeros().to().int", "points[].int", "points_coords[].to", "points_coords[].to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "points", "=", "batch_dict", "[", "'points'", "]", "# (batch_idx, x, y, z, i, e)", "\n", "\n", "points_coords", "=", "torch", ".", "floor", "(", "(", "points", "[", ":", ",", "[", "1", ",", "2", "]", "]", "-", "self", ".", "point_cloud_range", "[", "[", "0", ",", "1", "]", "]", ")", "/", "self", ".", "voxel_size", "[", "[", "0", ",", "1", "]", "]", ")", ".", "int", "(", ")", "\n", "mask", "=", "(", "(", "points_coords", ">=", "0", ")", "&", "(", "points_coords", "<", "self", ".", "grid_size", "[", "[", "0", ",", "1", "]", "]", ")", ")", ".", "all", "(", "dim", "=", "1", ")", "\n", "points", "=", "points", "[", "mask", "]", "\n", "points_coords", "=", "points_coords", "[", "mask", "]", "\n", "points_xyz", "=", "points", "[", ":", ",", "[", "1", ",", "2", ",", "3", "]", "]", ".", "contiguous", "(", ")", "\n", "\n", "merge_coords", "=", "points", "[", ":", ",", "0", "]", ".", "int", "(", ")", "*", "self", ".", "scale_xy", "+", "points_coords", "[", ":", ",", "0", "]", "*", "self", ".", "scale_y", "+", "points_coords", "[", ":", ",", "1", "]", "\n", "\n", "unq_coords", ",", "unq_inv", ",", "unq_cnt", "=", "torch", ".", "unique", "(", "merge_coords", ",", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ",", "dim", "=", "0", ")", "\n", "\n", "points_mean", "=", "torch_scatter", ".", "scatter_mean", "(", "points_xyz", ",", "unq_inv", ",", "dim", "=", "0", ")", "\n", "f_cluster", "=", "points_xyz", "-", "points_mean", "[", "unq_inv", ",", ":", "]", "\n", "\n", "f_center", "=", "torch", ".", "zeros_like", "(", "points_xyz", ")", "\n", "f_center", "[", ":", ",", "0", "]", "=", "points_xyz", "[", ":", ",", "0", "]", "-", "(", "points_coords", "[", ":", ",", "0", "]", ".", "to", "(", "points_xyz", ".", "dtype", ")", "*", "self", ".", "voxel_x", "+", "self", ".", "x_offset", ")", "\n", "f_center", "[", ":", ",", "1", "]", "=", "points_xyz", "[", ":", ",", "1", "]", "-", "(", "points_coords", "[", ":", ",", "1", "]", ".", "to", "(", "points_xyz", ".", "dtype", ")", "*", "self", ".", "voxel_y", "+", "self", ".", "y_offset", ")", "\n", "f_center", "[", ":", ",", "2", "]", "=", "points_xyz", "[", ":", ",", "2", "]", "-", "self", ".", "z_offset", "\n", "\n", "if", "self", ".", "use_absolute_xyz", ":", "\n", "            ", "features", "=", "[", "points", "[", ":", ",", "1", ":", "]", ",", "f_cluster", ",", "f_center", "]", "\n", "", "else", ":", "\n", "            ", "features", "=", "[", "points", "[", ":", ",", "4", ":", "]", ",", "f_cluster", ",", "f_center", "]", "\n", "\n", "", "if", "self", ".", "with_distance", ":", "\n", "            ", "points_dist", "=", "torch", ".", "norm", "(", "points", "[", ":", ",", "1", ":", "4", "]", ",", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "features", ".", "append", "(", "points_dist", ")", "\n", "", "features", "=", "torch", ".", "cat", "(", "features", ",", "dim", "=", "-", "1", ")", "\n", "\n", "for", "pfn", "in", "self", ".", "pfn_layers", ":", "\n", "            ", "features", "=", "pfn", "(", "features", ",", "unq_inv", ")", "\n", "# features = self.linear1(features)", "\n", "# features_max = torch_scatter.scatter_max(features, unq_inv, dim=0)[0]", "\n", "# features = torch.cat([features, features_max[unq_inv, :]], dim=1)", "\n", "# features = self.linear2(features)", "\n", "# features = torch_scatter.scatter_max(features, unq_inv, dim=0)[0]", "\n", "\n", "# generate voxel coordinates", "\n", "", "unq_coords", "=", "unq_coords", ".", "int", "(", ")", "\n", "voxel_coords", "=", "torch", ".", "stack", "(", "(", "unq_coords", "//", "self", ".", "scale_xy", ",", "\n", "(", "unq_coords", "%", "self", ".", "scale_xy", ")", "//", "self", ".", "scale_y", ",", "\n", "unq_coords", "%", "self", ".", "scale_y", ",", "\n", "torch", ".", "zeros", "(", "unq_coords", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "unq_coords", ".", "device", ")", ".", "int", "(", ")", "\n", ")", ",", "dim", "=", "1", ")", "\n", "voxel_coords", "=", "voxel_coords", "[", ":", ",", "[", "0", ",", "3", ",", "2", ",", "1", "]", "]", "\n", "\n", "batch_dict", "[", "'pillar_features'", "]", "=", "features", "\n", "batch_dict", "[", "'voxel_coords'", "]", "=", "voxel_coords", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.mean_vfe.MeanVFE.__init__": [[7, 10], ["vfe_template.VFETemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_point_features", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "num_point_features", "=", "num_point_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.mean_vfe.MeanVFE.get_output_feature_dim": [[11, 13], ["None"], "methods", ["None"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_point_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.mean_vfe.MeanVFE.forward": [[14, 32], ["voxel_features[].sum", "torch.clamp_min().type_as", "voxel_features[].sum.contiguous", "torch.clamp_min", "voxel_num_points.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                voxels: (num_voxels, max_points_per_voxel, C)\n                voxel_num_points: optional (num_voxels)\n            **kwargs:\n\n        Returns:\n            vfe_features: (num_voxels, C)\n        \"\"\"", "\n", "voxel_features", ",", "voxel_num_points", "=", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", "\n", "points_mean", "=", "voxel_features", "[", ":", ",", ":", ",", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "\n", "normalizer", "=", "torch", ".", "clamp_min", "(", "voxel_num_points", ".", "view", "(", "-", "1", ",", "1", ")", ",", "min", "=", "1.0", ")", ".", "type_as", "(", "voxel_features", ")", "\n", "points_mean", "=", "points_mean", "/", "normalizer", "\n", "batch_dict", "[", "'voxel_features'", "]", "=", "points_mean", ".", "contiguous", "(", ")", "\n", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.pillar_vfe.PFNLayer.__init__": [[9, 28], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "use_norm", "=", "True", ",", "\n", "last_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "last_vfe", "=", "last_layer", "\n", "self", ".", "use_norm", "=", "use_norm", "\n", "if", "not", "self", ".", "last_vfe", ":", "\n", "            ", "out_channels", "=", "out_channels", "//", "2", "\n", "\n", "", "if", "self", ".", "use_norm", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "True", ")", "\n", "\n", "", "self", ".", "part", "=", "50000", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.pillar_vfe.PFNLayer.forward": [[29, 50], ["torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pillar_vfe.PFNLayer.linear", "pillar_vfe.PFNLayer.norm().permute", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x_max.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pillar_vfe.PFNLayer.linear", "range", "pillar_vfe.PFNLayer.norm", "pillar_vfe.PFNLayer.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "inputs", ".", "shape", "[", "0", "]", ">", "self", ".", "part", ":", "\n", "# nn.Linear performs randomly when batch size is too large", "\n", "            ", "num_parts", "=", "inputs", ".", "shape", "[", "0", "]", "//", "self", ".", "part", "\n", "part_linear_out", "=", "[", "self", ".", "linear", "(", "inputs", "[", "num_part", "*", "self", ".", "part", ":", "(", "num_part", "+", "1", ")", "*", "self", ".", "part", "]", ")", "\n", "for", "num_part", "in", "range", "(", "num_parts", "+", "1", ")", "]", "\n", "x", "=", "torch", ".", "cat", "(", "part_linear_out", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "if", "self", ".", "use_norm", "else", "x", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x_max", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "last_vfe", ":", "\n", "            ", "return", "x_max", "\n", "", "else", ":", "\n", "            ", "x_repeat", "=", "x_max", ".", "repeat", "(", "1", ",", "inputs", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "x_concatenated", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_repeat", "]", ",", "dim", "=", "2", ")", "\n", "return", "x_concatenated", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.pillar_vfe.PillarVFE.__init__": [[53, 82], ["vfe_template.VFETemplate.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "list", "pfn_layers.append", "len", "pillar_vfe.PFNLayer", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_point_features", ",", "voxel_size", ",", "point_cloud_range", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ")", "\n", "\n", "self", ".", "use_norm", "=", "self", ".", "model_cfg", ".", "USE_NORM", "\n", "self", ".", "with_distance", "=", "self", ".", "model_cfg", ".", "WITH_DISTANCE", "\n", "self", ".", "use_absolute_xyz", "=", "self", ".", "model_cfg", ".", "USE_ABSLOTE_XYZ", "\n", "num_point_features", "+=", "6", "if", "self", ".", "use_absolute_xyz", "else", "3", "\n", "if", "self", ".", "with_distance", ":", "\n", "            ", "num_point_features", "+=", "1", "\n", "\n", "", "self", ".", "num_filters", "=", "self", ".", "model_cfg", ".", "NUM_FILTERS", "\n", "assert", "len", "(", "self", ".", "num_filters", ")", ">", "0", "\n", "num_filters", "=", "[", "num_point_features", "]", "+", "list", "(", "self", ".", "num_filters", ")", "\n", "\n", "pfn_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_filters", ")", "-", "1", ")", ":", "\n", "            ", "in_filters", "=", "num_filters", "[", "i", "]", "\n", "out_filters", "=", "num_filters", "[", "i", "+", "1", "]", "\n", "pfn_layers", ".", "append", "(", "\n", "PFNLayer", "(", "in_filters", ",", "out_filters", ",", "self", ".", "use_norm", ",", "last_layer", "=", "(", "i", ">=", "len", "(", "num_filters", ")", "-", "2", ")", ")", "\n", ")", "\n", "", "self", ".", "pfn_layers", "=", "nn", ".", "ModuleList", "(", "pfn_layers", ")", "\n", "\n", "self", ".", "voxel_x", "=", "voxel_size", "[", "0", "]", "\n", "self", ".", "voxel_y", "=", "voxel_size", "[", "1", "]", "\n", "self", ".", "voxel_z", "=", "voxel_size", "[", "2", "]", "\n", "self", ".", "x_offset", "=", "self", ".", "voxel_x", "/", "2", "+", "point_cloud_range", "[", "0", "]", "\n", "self", ".", "y_offset", "=", "self", ".", "voxel_y", "/", "2", "+", "point_cloud_range", "[", "1", "]", "\n", "self", ".", "z_offset", "=", "self", ".", "voxel_z", "/", "2", "+", "point_cloud_range", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.pillar_vfe.PillarVFE.get_output_feature_dim": [[83, 85], ["None"], "methods", ["None"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_filters", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.pillar_vfe.PillarVFE.get_paddings_indicator": [[86, 93], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "len", "torch.unsqueeze.int", "torch.unsqueeze.int", "torch.unsqueeze.int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "get_paddings_indicator", "(", "self", ",", "actual_num", ",", "max_num", ",", "axis", "=", "0", ")", ":", "\n", "        ", "actual_num", "=", "torch", ".", "unsqueeze", "(", "actual_num", ",", "axis", "+", "1", ")", "\n", "max_num_shape", "=", "[", "1", "]", "*", "len", "(", "actual_num", ".", "shape", ")", "\n", "max_num_shape", "[", "axis", "+", "1", "]", "=", "-", "1", "\n", "max_num", "=", "torch", ".", "arange", "(", "max_num", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "actual_num", ".", "device", ")", ".", "view", "(", "max_num_shape", ")", "\n", "paddings_indicator", "=", "actual_num", ".", "int", "(", ")", ">", "max_num", "\n", "return", "paddings_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.pillar_vfe.PillarVFE.forward": [[94, 124], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pillar_vfe.PillarVFE.get_paddings_indicator", "torch.unsqueeze().type_as", "torch.unsqueeze().type_as", "torch.unsqueeze().type_as", "torch.unsqueeze().type_as", "torch.unsqueeze().type_as", "torch.unsqueeze().type_as", "torch.unsqueeze().type_as", "torch.unsqueeze().type_as", "torch.unsqueeze().type_as", "pfn.squeeze", "voxel_features[].sum", "voxel_num_points.type_as().view", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "pfn.append", "pfn", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "voxel_num_points.type_as", "coords[].to().unsqueeze", "coords[].to().unsqueeze", "coords[].to().unsqueeze", "coords[].to", "coords[].to", "coords[].to"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.vfe.pillar_vfe.PillarVFE.get_paddings_indicator"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "voxel_features", ",", "voxel_num_points", ",", "coords", "=", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "points_mean", "=", "voxel_features", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "voxel_num_points", ".", "type_as", "(", "voxel_features", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "f_cluster", "=", "voxel_features", "[", ":", ",", ":", ",", ":", "3", "]", "-", "points_mean", "\n", "\n", "f_center", "=", "torch", ".", "zeros_like", "(", "voxel_features", "[", ":", ",", ":", ",", ":", "3", "]", ")", "\n", "f_center", "[", ":", ",", ":", ",", "0", "]", "=", "voxel_features", "[", ":", ",", ":", ",", "0", "]", "-", "(", "coords", "[", ":", ",", "3", "]", ".", "to", "(", "voxel_features", ".", "dtype", ")", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "voxel_x", "+", "self", ".", "x_offset", ")", "\n", "f_center", "[", ":", ",", ":", ",", "1", "]", "=", "voxel_features", "[", ":", ",", ":", ",", "1", "]", "-", "(", "coords", "[", ":", ",", "2", "]", ".", "to", "(", "voxel_features", ".", "dtype", ")", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "voxel_y", "+", "self", ".", "y_offset", ")", "\n", "f_center", "[", ":", ",", ":", ",", "2", "]", "=", "voxel_features", "[", ":", ",", ":", ",", "2", "]", "-", "(", "coords", "[", ":", ",", "1", "]", ".", "to", "(", "voxel_features", ".", "dtype", ")", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "voxel_z", "+", "self", ".", "z_offset", ")", "\n", "\n", "if", "self", ".", "use_absolute_xyz", ":", "\n", "            ", "features", "=", "[", "voxel_features", ",", "f_cluster", ",", "f_center", "]", "\n", "", "else", ":", "\n", "            ", "features", "=", "[", "voxel_features", "[", "...", ",", "3", ":", "]", ",", "f_cluster", ",", "f_center", "]", "\n", "\n", "", "if", "self", ".", "with_distance", ":", "\n", "            ", "points_dist", "=", "torch", ".", "norm", "(", "voxel_features", "[", ":", ",", ":", ",", ":", "3", "]", ",", "2", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "features", ".", "append", "(", "points_dist", ")", "\n", "", "features", "=", "torch", ".", "cat", "(", "features", ",", "dim", "=", "-", "1", ")", "\n", "\n", "voxel_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "mask", "=", "self", ".", "get_paddings_indicator", "(", "voxel_num_points", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "mask", ",", "-", "1", ")", ".", "type_as", "(", "voxel_features", ")", "\n", "features", "*=", "mask", "\n", "for", "pfn", "in", "self", ".", "pfn_layers", ":", "\n", "            ", "features", "=", "pfn", "(", "features", ")", "\n", "", "features", "=", "features", ".", "squeeze", "(", ")", "\n", "batch_dict", "[", "'pillar_features'", "]", "=", "features", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.dynamic_mean_vfe.DynamicMeanVFE.__init__": [[15, 33], ["vfe_template.VFETemplate.__init__", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_point_features", ",", "voxel_size", ",", "grid_size", ",", "point_cloud_range", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "num_point_features", "=", "num_point_features", "\n", "\n", "self", ".", "grid_size", "=", "torch", ".", "tensor", "(", "grid_size", ")", ".", "cuda", "(", ")", "\n", "self", ".", "voxel_size", "=", "torch", ".", "tensor", "(", "voxel_size", ")", ".", "cuda", "(", ")", "\n", "self", ".", "point_cloud_range", "=", "torch", ".", "tensor", "(", "point_cloud_range", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "voxel_x", "=", "voxel_size", "[", "0", "]", "\n", "self", ".", "voxel_y", "=", "voxel_size", "[", "1", "]", "\n", "self", ".", "voxel_z", "=", "voxel_size", "[", "2", "]", "\n", "self", ".", "x_offset", "=", "self", ".", "voxel_x", "/", "2", "+", "point_cloud_range", "[", "0", "]", "\n", "self", ".", "y_offset", "=", "self", ".", "voxel_y", "/", "2", "+", "point_cloud_range", "[", "1", "]", "\n", "self", ".", "z_offset", "=", "self", ".", "voxel_z", "/", "2", "+", "point_cloud_range", "[", "2", "]", "\n", "\n", "self", ".", "scale_xyz", "=", "grid_size", "[", "0", "]", "*", "grid_size", "[", "1", "]", "*", "grid_size", "[", "2", "]", "\n", "self", ".", "scale_yz", "=", "grid_size", "[", "1", "]", "*", "grid_size", "[", "2", "]", "\n", "self", ".", "scale_z", "=", "grid_size", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.dynamic_mean_vfe.DynamicMeanVFE.get_output_feature_dim": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_point_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.dynamic_mean_vfe.DynamicMeanVFE.forward": [[37, 77], ["torch.no_grad", "torch.floor().int", "points[].contiguous", "torch.unique", "torch_scatter.scatter_mean", "unq_coords.int.int.int", "torch.stack", "torch_scatter.scatter_mean.contiguous", "torch.stack.contiguous", "torch.floor", "points[].int"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                voxels: (num_voxels, max_points_per_voxel, C)\n                voxel_num_points: optional (num_voxels)\n            **kwargs:\n\n        Returns:\n            vfe_features: (num_voxels, C)\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "points", "=", "batch_dict", "[", "'points'", "]", "# (batch_idx, x, y, z, i, e)", "\n", "\n", "# # debug", "\n", "point_coords", "=", "torch", ".", "floor", "(", "(", "points", "[", ":", ",", "1", ":", "4", "]", "-", "self", ".", "point_cloud_range", "[", "0", ":", "3", "]", ")", "/", "self", ".", "voxel_size", ")", ".", "int", "(", ")", "\n", "mask", "=", "(", "(", "point_coords", ">=", "0", ")", "&", "(", "point_coords", "<", "self", ".", "grid_size", ")", ")", ".", "all", "(", "dim", "=", "1", ")", "\n", "points", "=", "points", "[", "mask", "]", "\n", "point_coords", "=", "point_coords", "[", "mask", "]", "\n", "merge_coords", "=", "points", "[", ":", ",", "0", "]", ".", "int", "(", ")", "*", "self", ".", "scale_xyz", "+", "point_coords", "[", ":", ",", "0", "]", "*", "self", ".", "scale_yz", "+", "point_coords", "[", ":", ",", "1", "]", "*", "self", ".", "scale_z", "+", "point_coords", "[", ":", ",", "2", "]", "\n", "points_data", "=", "points", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "unq_coords", ",", "unq_inv", ",", "unq_cnt", "=", "torch", ".", "unique", "(", "merge_coords", ",", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "\n", "points_mean", "=", "torch_scatter", ".", "scatter_mean", "(", "points_data", ",", "unq_inv", ",", "dim", "=", "0", ")", "\n", "\n", "unq_coords", "=", "unq_coords", ".", "int", "(", ")", "\n", "voxel_coords", "=", "torch", ".", "stack", "(", "(", "unq_coords", "//", "self", ".", "scale_xyz", ",", "\n", "(", "unq_coords", "%", "self", ".", "scale_xyz", ")", "//", "self", ".", "scale_yz", ",", "\n", "(", "unq_coords", "%", "self", ".", "scale_yz", ")", "//", "self", ".", "scale_z", ",", "\n", "unq_coords", "%", "self", ".", "scale_z", ")", ",", "dim", "=", "1", ")", "\n", "voxel_coords", "=", "voxel_coords", "[", ":", ",", "[", "0", ",", "3", ",", "2", ",", "1", "]", "]", "\n", "\n", "batch_dict", "[", "'voxel_features'", "]", "=", "points_mean", ".", "contiguous", "(", ")", "\n", "batch_dict", "[", "'voxel_coords'", "]", "=", "voxel_coords", ".", "contiguous", "(", ")", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.vfe_template.VFETemplate.__init__": [[5, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.vfe_template.VFETemplate.get_output_feature_dim": [[9, 11], ["None"], "methods", ["None"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.vfe_template.VFETemplate.forward": [[12, 23], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            **kwargs:\n\n        Returns:\n            batch_dict:\n                ...\n                vfe_features: (num_voxels, C)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.image_vfe.ImageVFE.__init__": [[8, 17], ["vfe_template.VFETemplate.__init__", "image_vfe.ImageVFE.build_modules"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.vfe.image_vfe.ImageVFE.build_modules"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "grid_size", ",", "point_cloud_range", ",", "depth_downsample_factor", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "pc_range", "=", "point_cloud_range", "\n", "self", ".", "downsample_factor", "=", "depth_downsample_factor", "\n", "self", ".", "module_topology", "=", "[", "\n", "'ffn'", ",", "'f2v'", "\n", "]", "\n", "self", ".", "build_modules", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.image_vfe.ImageVFE.build_modules": [[18, 25], ["image_vfe.ImageVFE.add_module", "getattr"], "methods", ["None"], ["", "def", "build_modules", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Builds modules\n        \"\"\"", "\n", "for", "module_name", "in", "self", ".", "module_topology", ":", "\n", "            ", "module", "=", "getattr", "(", "self", ",", "'build_%s'", "%", "module_name", ")", "(", ")", "\n", "self", ".", "add_module", "(", "module_name", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.image_vfe.ImageVFE.build_ffn": [[26, 38], ["None"], "methods", ["None"], ["", "", "def", "build_ffn", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Builds frustum feature network\n        Returns:\n            ffn_module: nn.Module, Frustum feature network\n        \"\"\"", "\n", "ffn_module", "=", "ffn", ".", "__all__", "[", "self", ".", "model_cfg", ".", "FFN", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "FFN", ",", "\n", "downsample_factor", "=", "self", ".", "downsample_factor", "\n", ")", "\n", "self", ".", "disc_cfg", "=", "ffn_module", ".", "disc_cfg", "\n", "return", "ffn_module", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.image_vfe.ImageVFE.build_f2v": [[39, 52], ["None"], "methods", ["None"], ["", "def", "build_f2v", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Builds frustum to voxel transformation\n        Returns:\n            f2v_module: nn.Module, Frustum to voxel transformation\n        \"\"\"", "\n", "f2v_module", "=", "f2v", ".", "__all__", "[", "self", ".", "model_cfg", ".", "F2V", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "F2V", ",", "\n", "grid_size", "=", "self", ".", "grid_size", ",", "\n", "pc_range", "=", "self", ".", "pc_range", ",", "\n", "disc_cfg", "=", "self", ".", "disc_cfg", "\n", ")", "\n", "return", "f2v_module", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.image_vfe.ImageVFE.get_output_feature_dim": [[53, 61], ["image_vfe.ImageVFE.ffn.get_output_feature_dim"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.ffn.depth_ffn.DepthFFN.get_output_feature_dim"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Gets number of output channels\n        Returns:\n            out_feature_dim: int, Number of output channels\n        \"\"\"", "\n", "out_feature_dim", "=", "self", ".", "ffn", ".", "get_output_feature_dim", "(", ")", "\n", "return", "out_feature_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.image_vfe.ImageVFE.forward": [[62, 75], ["image_vfe.ImageVFE.ffn", "image_vfe.ImageVFE.f2v"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                images: (N, 3, H_in, W_in), Input images\n            **kwargs:\n        Returns:\n            batch_dict:\n                voxel_features: (B, C, Z, Y, X), Image voxel features\n        \"\"\"", "\n", "batch_dict", "=", "self", ".", "ffn", "(", "batch_dict", ")", "\n", "batch_dict", "=", "self", ".", "f2v", "(", "batch_dict", ")", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.vfe.image_vfe.ImageVFE.get_loss": [[76, 86], ["image_vfe.ImageVFE.ffn.get_loss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Gets DDN loss\n        Returns:\n            loss: (1), Depth distribution network loss\n            tb_dict: dict[float], All losses to log in tensorboard\n        \"\"\"", "\n", "\n", "loss", ",", "tb_dict", "=", "self", ".", "ffn", ".", "get_loss", "(", ")", "\n", "return", "loss", ",", "tb_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.f2v.frustum_to_voxel.FrustumToVoxel.__init__": [[10, 28], ["torch.Module.__init__", "frustum_grid_generator.FrustumGridGenerator", "sampler.Sampler"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "grid_size", ",", "pc_range", ",", "disc_cfg", ")", ":", "\n", "        ", "\"\"\"\n        Initializes module to transform frustum features to voxel features via 3D transformation and sampling\n        Args:\n            model_cfg: EasyDict, Module configuration\n            grid_size: [X, Y, Z], Voxel grid size\n            pc_range: [x_min, y_min, z_min, x_max, y_max, z_max], Voxelization point cloud range (m)\n            disc_cfg: EasyDict, Depth discretiziation configuration\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "pc_range", "=", "pc_range", "\n", "self", ".", "disc_cfg", "=", "disc_cfg", "\n", "self", ".", "grid_generator", "=", "FrustumGridGenerator", "(", "grid_size", "=", "grid_size", ",", "\n", "pc_range", "=", "pc_range", ",", "\n", "disc_cfg", "=", "disc_cfg", ")", "\n", "self", ".", "sampler", "=", "Sampler", "(", "**", "model_cfg", ".", "SAMPLER", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.f2v.frustum_to_voxel.FrustumToVoxel.forward": [[29, 55], ["frustum_to_voxel.FrustumToVoxel.grid_generator", "frustum_to_voxel.FrustumToVoxel.sampler", "voxel_features.permute.permute.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Generates voxel features via 3D transformation and sampling\n        Args:\n            batch_dict:\n                frustum_features: (B, C, D, H_image, W_image), Image frustum features\n                lidar_to_cam: (B, 4, 4), LiDAR to camera frame transformation\n                cam_to_img: (B, 3, 4), Camera projection matrix\n                image_shape: (B, 2), Image shape [H, W]\n        Returns:\n            batch_dict:\n                voxel_features: (B, C, Z, Y, X), Image voxel features\n        \"\"\"", "\n", "# Generate sampling grid for frustum volume", "\n", "grid", "=", "self", ".", "grid_generator", "(", "lidar_to_cam", "=", "batch_dict", "[", "\"trans_lidar_to_cam\"", "]", ",", "\n", "cam_to_img", "=", "batch_dict", "[", "\"trans_cam_to_img\"", "]", ",", "\n", "image_shape", "=", "batch_dict", "[", "\"image_shape\"", "]", ")", "# (B, X, Y, Z, 3)", "\n", "\n", "# Sample frustum volume to generate voxel volume", "\n", "voxel_features", "=", "self", ".", "sampler", "(", "input_features", "=", "batch_dict", "[", "\"frustum_features\"", "]", ",", "\n", "grid", "=", "grid", ")", "# (B, C, X, Y, Z)", "\n", "\n", "# (B, C, X, Y, Z) -> (B, C, Z, Y, X)", "\n", "voxel_features", "=", "voxel_features", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "3", ",", "2", ")", "\n", "batch_dict", "[", "\"voxel_features\"", "]", "=", "voxel_features", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.f2v.frustum_grid_generator.FrustumGridGenerator.__init__": [[17, 59], ["torch.Module.__init__", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "frustum_grid_generator.FrustumGridGenerator.grid_size.int", "create_meshgrid3d", "frustum_grid_generator.FrustumGridGenerator.voxel_grid.permute", "frustum_grid_generator.FrustumGridGenerator.grid_to_lidar_unproject", "print", "exit", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.f2v.frustum_grid_generator.FrustumGridGenerator.grid_to_lidar_unproject"], ["    ", "def", "__init__", "(", "self", ",", "grid_size", ",", "pc_range", ",", "disc_cfg", ")", ":", "\n", "        ", "\"\"\"\n        Initializes Grid Generator for frustum features\n        Args:\n            grid_size: [X, Y, Z], Voxel grid size\n            pc_range: [x_min, y_min, z_min, x_max, y_max, z_max], Voxelization point cloud range (m)\n            disc_cfg: EasyDict, Depth discretiziation configuration\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "try", ":", "\n", "            ", "import", "kornia", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# Note: Kornia team will fix this import issue to try to allow the usage of lower torch versions.", "\n", "            ", "print", "(", "'Error: kornia is not installed correctly, please ignore this warning if you do not use CaDDN. '", "\n", "'Otherwise, it is recommended to use torch version greater than 1.2 to use kornia properly.'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "self", ".", "dtype", "=", "torch", ".", "float32", "\n", "self", ".", "grid_size", "=", "torch", ".", "as_tensor", "(", "grid_size", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "self", ".", "pc_range", "=", "pc_range", "\n", "self", ".", "out_of_bounds_val", "=", "-", "2", "\n", "self", ".", "disc_cfg", "=", "disc_cfg", "\n", "\n", "# Calculate voxel size", "\n", "pc_range", "=", "torch", ".", "as_tensor", "(", "pc_range", ")", ".", "reshape", "(", "2", ",", "3", ")", "\n", "self", ".", "pc_min", "=", "pc_range", "[", "0", "]", "\n", "self", ".", "pc_max", "=", "pc_range", "[", "1", "]", "\n", "self", ".", "voxel_size", "=", "(", "self", ".", "pc_max", "-", "self", ".", "pc_min", ")", "/", "self", ".", "grid_size", "\n", "\n", "# Create voxel grid", "\n", "self", ".", "depth", ",", "self", ".", "width", ",", "self", ".", "height", "=", "self", ".", "grid_size", ".", "int", "(", ")", "\n", "self", ".", "voxel_grid", "=", "create_meshgrid3d", "(", "depth", "=", "self", ".", "depth", ",", "\n", "height", "=", "self", ".", "height", ",", "\n", "width", "=", "self", ".", "width", ",", "\n", "normalized_coordinates", "=", "False", ")", "\n", "\n", "self", ".", "voxel_grid", "=", "self", ".", "voxel_grid", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", "# XZY-> XYZ", "\n", "\n", "# Add offsets to center of voxel", "\n", "self", ".", "voxel_grid", "+=", "0.5", "\n", "self", ".", "grid_to_lidar", "=", "self", ".", "grid_to_lidar_unproject", "(", "pc_min", "=", "self", ".", "pc_min", ",", "\n", "voxel_size", "=", "self", ".", "voxel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.f2v.frustum_grid_generator.FrustumGridGenerator.grid_to_lidar_unproject": [[60, 78], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "grid_to_lidar_unproject", "(", "self", ",", "pc_min", ",", "voxel_size", ")", ":", "\n", "        ", "\"\"\"\n        Calculate grid to LiDAR unprojection for each plane\n        Args:\n            pc_min: [x_min, y_min, z_min], Minimum of point cloud range (m)\n            voxel_size: [x, y, z], Size of each voxel (m)\n        Returns:\n            unproject: (4, 4), Voxel grid to LiDAR unprojection matrix\n        \"\"\"", "\n", "x_size", ",", "y_size", ",", "z_size", "=", "voxel_size", "\n", "x_min", ",", "y_min", ",", "z_min", "=", "pc_min", "\n", "unproject", "=", "torch", ".", "tensor", "(", "[", "[", "x_size", ",", "0", ",", "0", ",", "x_min", "]", ",", "\n", "[", "0", ",", "y_size", ",", "0", ",", "y_min", "]", ",", "\n", "[", "0", ",", "0", ",", "z_size", ",", "z_min", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "# (4, 4)", "\n", "\n", "return", "unproject", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.f2v.frustum_grid_generator.FrustumGridGenerator.transform_grid": [[79, 116], ["trans.reshape.reshape.reshape", "voxel_grid.repeat_interleave.repeat_interleave.repeat_interleave", "transform_points", "I_C.reshape.reshape.reshape", "pcdet.utils.transform_utils.project_to_image", "pcdet.utils.transform_utils.bin_depths", "image_depths.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.transform_utils.project_to_image", "home.repos.pwc.inspect_result.dschinagl_occam.utils.transform_utils.bin_depths"], ["", "def", "transform_grid", "(", "self", ",", "voxel_grid", ",", "grid_to_lidar", ",", "lidar_to_cam", ",", "cam_to_img", ")", ":", "\n", "        ", "\"\"\"\n        Transforms voxel sampling grid into frustum sampling grid\n        Args:\n            grid: (B, X, Y, Z, 3), Voxel sampling grid\n            grid_to_lidar: (4, 4), Voxel grid to LiDAR unprojection matrix\n            lidar_to_cam: (B, 4, 4), LiDAR to camera frame transformation\n            cam_to_img: (B, 3, 4), Camera projection matrix\n        Returns:\n            frustum_grid: (B, X, Y, Z, 3), Frustum sampling grid\n        \"\"\"", "\n", "B", "=", "lidar_to_cam", ".", "shape", "[", "0", "]", "\n", "\n", "# Create transformation matricies", "\n", "V_G", "=", "grid_to_lidar", "# Voxel Grid -> LiDAR (4, 4)", "\n", "C_V", "=", "lidar_to_cam", "# LiDAR -> Camera (B, 4, 4)", "\n", "I_C", "=", "cam_to_img", "# Camera -> Image (B, 3, 4)", "\n", "trans", "=", "C_V", "@", "V_G", "\n", "\n", "# Reshape to match dimensions", "\n", "trans", "=", "trans", ".", "reshape", "(", "B", ",", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "voxel_grid", "=", "voxel_grid", ".", "repeat_interleave", "(", "repeats", "=", "B", ",", "dim", "=", "0", ")", "\n", "\n", "# Transform to camera frame", "\n", "camera_grid", "=", "transform_points", "(", "trans_01", "=", "trans", ",", "points_1", "=", "voxel_grid", ")", "\n", "\n", "# Project to image", "\n", "I_C", "=", "I_C", ".", "reshape", "(", "B", ",", "1", ",", "1", ",", "3", ",", "4", ")", "\n", "image_grid", ",", "image_depths", "=", "transform_utils", ".", "project_to_image", "(", "project", "=", "I_C", ",", "points", "=", "camera_grid", ")", "\n", "\n", "# Convert depths to depth bins", "\n", "image_depths", "=", "transform_utils", ".", "bin_depths", "(", "depth_map", "=", "image_depths", ",", "**", "self", ".", "disc_cfg", ")", "\n", "\n", "# Stack to form frustum grid", "\n", "image_depths", "=", "image_depths", ".", "unsqueeze", "(", "-", "1", ")", "\n", "frustum_grid", "=", "torch", ".", "cat", "(", "(", "image_grid", ",", "image_depths", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "frustum_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.f2v.frustum_grid_generator.FrustumGridGenerator.forward": [[117, 146], ["frustum_grid_generator.FrustumGridGenerator.transform_grid", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pcdet.utils.transform_utils.normalize_coords", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "frustum_grid_generator.FrustumGridGenerator.voxel_grid.to", "frustum_grid_generator.FrustumGridGenerator.grid_to_lidar.to"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.f2v.frustum_grid_generator.FrustumGridGenerator.transform_grid", "home.repos.pwc.inspect_result.dschinagl_occam.utils.transform_utils.normalize_coords"], ["", "def", "forward", "(", "self", ",", "lidar_to_cam", ",", "cam_to_img", ",", "image_shape", ")", ":", "\n", "        ", "\"\"\"\n        Generates sampling grid for frustum features\n        Args:\n            lidar_to_cam: (B, 4, 4), LiDAR to camera frame transformation\n            cam_to_img: (B, 3, 4), Camera projection matrix\n            image_shape: (B, 2), Image shape [H, W]\n        Returns:\n            frustum_grid (B, X, Y, Z, 3), Sampling grids for frustum features\n        \"\"\"", "\n", "\n", "frustum_grid", "=", "self", ".", "transform_grid", "(", "voxel_grid", "=", "self", ".", "voxel_grid", ".", "to", "(", "lidar_to_cam", ".", "device", ")", ",", "\n", "grid_to_lidar", "=", "self", ".", "grid_to_lidar", ".", "to", "(", "lidar_to_cam", ".", "device", ")", ",", "\n", "lidar_to_cam", "=", "lidar_to_cam", ",", "\n", "cam_to_img", "=", "cam_to_img", ")", "\n", "\n", "# Normalize grid", "\n", "image_shape", ",", "_", "=", "torch", ".", "max", "(", "image_shape", ",", "dim", "=", "0", ")", "\n", "image_depth", "=", "torch", ".", "tensor", "(", "[", "self", ".", "disc_cfg", "[", "\"num_bins\"", "]", "]", ",", "\n", "device", "=", "image_shape", ".", "device", ",", "\n", "dtype", "=", "image_shape", ".", "dtype", ")", "\n", "frustum_shape", "=", "torch", ".", "cat", "(", "(", "image_depth", ",", "image_shape", ")", ")", "\n", "frustum_grid", "=", "transform_utils", ".", "normalize_coords", "(", "coords", "=", "frustum_grid", ",", "shape", "=", "frustum_shape", ")", "\n", "\n", "# Replace any NaNs or infinites with out of bounds", "\n", "mask", "=", "~", "torch", ".", "isfinite", "(", "frustum_grid", ")", "\n", "frustum_grid", "[", "mask", "]", "=", "self", ".", "out_of_bounds_val", "\n", "\n", "return", "frustum_grid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.f2v.sampler.Sampler.__init__": [[8, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "\"bilinear\"", ",", "padding_mode", "=", "\"zeros\"", ")", ":", "\n", "        ", "\"\"\"\n        Initializes module\n        Args:\n            mode: string, Sampling mode [bilinear/nearest]\n            padding_mode: string, Padding mode for outside grid values [zeros/border/reflection]\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.f2v.sampler.Sampler.forward": [[19, 31], ["torch.grid_sample", "torch.grid_sample", "torch.grid_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_features", ",", "grid", ")", ":", "\n", "        ", "\"\"\"\n        Samples input using sampling grid\n        Args:\n            input_features: (B, C, D, H, W), Input frustum features\n            grid: (B, X, Y, Z, 3), Sampling grids for input features\n        Returns\n            output_features: (B, C, X, Y, Z) Output voxel features\n        \"\"\"", "\n", "# Sample from grid", "\n", "output", "=", "F", ".", "grid_sample", "(", "input", "=", "input_features", ",", "grid", "=", "grid", ",", "mode", "=", "self", ".", "mode", ",", "padding_mode", "=", "self", ".", "padding_mode", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.ffn.depth_ffn.DepthFFN.__init__": [[10, 35], ["torch.Module.__init__", "pcdet.models.model_utils.basic_block_2d.BasicBlock2D"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "downsample_factor", ")", ":", "\n", "        ", "\"\"\"\n        Initialize frustum feature network via depth distribution estimation\n        Args:\n            model_cfg: EasyDict, Depth classification network config\n            downsample_factor: int, Depth map downsample factor\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "disc_cfg", "=", "model_cfg", ".", "DISCRETIZE", "\n", "self", ".", "downsample_factor", "=", "downsample_factor", "\n", "\n", "# Create modules", "\n", "self", ".", "ddn", "=", "ddn", ".", "__all__", "[", "model_cfg", ".", "DDN", ".", "NAME", "]", "(", "\n", "num_classes", "=", "self", ".", "disc_cfg", "[", "\"num_bins\"", "]", "+", "1", ",", "\n", "backbone_name", "=", "model_cfg", ".", "DDN", ".", "BACKBONE_NAME", ",", "\n", "**", "model_cfg", ".", "DDN", ".", "ARGS", "\n", ")", "\n", "self", ".", "channel_reduce", "=", "BasicBlock2D", "(", "**", "model_cfg", ".", "CHANNEL_REDUCE", ")", "\n", "self", ".", "ddn_loss", "=", "ddn_loss", ".", "__all__", "[", "model_cfg", ".", "LOSS", ".", "NAME", "]", "(", "\n", "disc_cfg", "=", "self", ".", "disc_cfg", ",", "\n", "downsample_factor", "=", "downsample_factor", ",", "\n", "**", "model_cfg", ".", "LOSS", ".", "ARGS", "\n", ")", "\n", "self", ".", "forward_ret_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ffn.depth_ffn.DepthFFN.get_output_feature_dim": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "channel_reduce", ".", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ffn.depth_ffn.DepthFFN.forward": [[39, 69], ["depth_ffn.DepthFFN.ddn", "depth_ffn.DepthFFN.create_frustum_features", "depth_ffn.DepthFFN.channel_reduce"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.ffn.depth_ffn.DepthFFN.create_frustum_features"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Predicts depths and creates image depth feature volume using depth distributions\n        Args:\n            batch_dict:\n                images: (N, 3, H_in, W_in), Input images\n        Returns:\n            batch_dict:\n                frustum_features: (N, C, D, H_out, W_out), Image depth features\n        \"\"\"", "\n", "# Pixel-wise depth classification", "\n", "images", "=", "batch_dict", "[", "\"images\"", "]", "\n", "ddn_result", "=", "self", ".", "ddn", "(", "images", ")", "\n", "image_features", "=", "ddn_result", "[", "\"features\"", "]", "\n", "depth_logits", "=", "ddn_result", "[", "\"logits\"", "]", "\n", "\n", "# Channel reduce", "\n", "if", "self", ".", "channel_reduce", "is", "not", "None", ":", "\n", "            ", "image_features", "=", "self", ".", "channel_reduce", "(", "image_features", ")", "\n", "\n", "# Create image feature plane-sweep volume", "\n", "", "frustum_features", "=", "self", ".", "create_frustum_features", "(", "image_features", "=", "image_features", ",", "\n", "depth_logits", "=", "depth_logits", ")", "\n", "batch_dict", "[", "\"frustum_features\"", "]", "=", "frustum_features", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "forward_ret_dict", "[", "\"depth_maps\"", "]", "=", "batch_dict", "[", "\"depth_maps\"", "]", "\n", "self", ".", "forward_ret_dict", "[", "\"gt_boxes2d\"", "]", "=", "batch_dict", "[", "\"gt_boxes2d\"", "]", "\n", "self", ".", "forward_ret_dict", "[", "\"depth_logits\"", "]", "=", "depth_logits", "\n", "", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ffn.depth_ffn.DepthFFN.create_frustum_features": [[70, 93], ["image_features.unsqueeze.unsqueeze.unsqueeze", "depth_logits.unsqueeze.unsqueeze.unsqueeze", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "create_frustum_features", "(", "self", ",", "image_features", ",", "depth_logits", ")", ":", "\n", "        ", "\"\"\"\n        Create image depth feature volume by multiplying image features with depth distributions\n        Args:\n            image_features: (N, C, H, W), Image features\n            depth_logits: (N, D+1, H, W), Depth classification logits\n        Returns:\n            frustum_features: (N, C, D, H, W), Image features\n        \"\"\"", "\n", "channel_dim", "=", "1", "\n", "depth_dim", "=", "2", "\n", "\n", "# Resize to match dimensions", "\n", "image_features", "=", "image_features", ".", "unsqueeze", "(", "depth_dim", ")", "\n", "depth_logits", "=", "depth_logits", ".", "unsqueeze", "(", "channel_dim", ")", "\n", "\n", "# Apply softmax along depth axis and remove last depth category (> Max Range)", "\n", "depth_probs", "=", "F", ".", "softmax", "(", "depth_logits", ",", "dim", "=", "depth_dim", ")", "\n", "depth_probs", "=", "depth_probs", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "\n", "# Multiply to form image depth feature volume", "\n", "frustum_features", "=", "depth_probs", "*", "image_features", "\n", "return", "frustum_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ffn.depth_ffn.DepthFFN.get_loss": [[94, 104], ["depth_ffn.DepthFFN.ddn_loss"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Gets DDN loss\n        Args:\n        Returns:\n            loss: (1), Depth distribution network loss\n            tb_dict: dict[float], All losses to log in tensorboard\n        \"\"\"", "\n", "loss", ",", "tb_dict", "=", "self", ".", "ddn_loss", "(", "**", "self", ".", "forward_ret_dict", ")", "\n", "return", "loss", ",", "tb_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn.ddn_template.DDNTemplate.__init__": [[18, 45], ["torch.Module.__init__", "ddn_template.DDNTemplate.get_model", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.ddn.ddn_template.DDNTemplate.get_model"], ["    ", "def", "__init__", "(", "self", ",", "constructor", ",", "feat_extract_layer", ",", "num_classes", ",", "pretrained_path", "=", "None", ",", "aux_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes depth distribution network.\n        Args:\n            constructor: function, Model constructor\n            feat_extract_layer: string, Layer to extract features from\n            num_classes: int, Number of classes\n            pretrained_path: string, (Optional) Path of the model to load weights from\n            aux_loss: bool, Flag to include auxillary loss\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "pretrained_path", "=", "pretrained_path", "\n", "self", ".", "pretrained", "=", "pretrained_path", "is", "not", "None", "\n", "self", ".", "aux_loss", "=", "aux_loss", "\n", "\n", "if", "self", ".", "pretrained", ":", "\n", "# Preprocess Module", "\n", "            ", "self", ".", "norm_mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "self", ".", "norm_std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "# Model", "\n", "", "self", ".", "model", "=", "self", ".", "get_model", "(", "constructor", "=", "constructor", ")", "\n", "self", ".", "feat_extract_layer", "=", "feat_extract_layer", "\n", "self", ".", "model", ".", "backbone", ".", "return_layers", "=", "{", "\n", "feat_extract_layer", ":", "'features'", ",", "\n", "**", "self", ".", "model", ".", "backbone", ".", "return_layers", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn.ddn_template.DDNTemplate.get_model": [[47, 84], ["constructor", "constructor.state_dict", "pathlib.Path", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "ddn_template.DDNTemplate.filter_pretrained_dict", "constructor.state_dict.update", "constructor.load_state_dict", "pathlib.Path.exists", "save_dir.mkdir", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.ddn.ddn_template.DDNTemplate.filter_pretrained_dict", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "get_model", "(", "self", ",", "constructor", ")", ":", "\n", "        ", "\"\"\"\n        Get model\n        Args:\n            constructor: function, Model constructor\n        Returns:\n            model: nn.Module, Model\n        \"\"\"", "\n", "# Get model", "\n", "model", "=", "constructor", "(", "pretrained", "=", "False", ",", "\n", "pretrained_backbone", "=", "False", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "aux_loss", "=", "self", ".", "aux_loss", ")", "\n", "\n", "# Update weights", "\n", "if", "self", ".", "pretrained_path", "is", "not", "None", ":", "\n", "            ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# Download pretrained model if not available yet", "\n", "checkpoint_path", "=", "Path", "(", "self", ".", "pretrained_path", ")", "\n", "if", "not", "checkpoint_path", ".", "exists", "(", ")", ":", "\n", "                ", "checkpoint", "=", "checkpoint_path", ".", "name", "\n", "save_dir", "=", "checkpoint_path", ".", "parent", "\n", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "url", "=", "f'https://download.pytorch.org/models/{checkpoint}'", "\n", "hub", ".", "load_state_dict_from_url", "(", "url", ",", "save_dir", ")", "\n", "\n", "# Get pretrained state dict", "\n", "", "pretrained_dict", "=", "torch", ".", "load", "(", "self", ".", "pretrained_path", ")", "\n", "pretrained_dict", "=", "self", ".", "filter_pretrained_dict", "(", "model_dict", "=", "model_dict", ",", "\n", "pretrained_dict", "=", "pretrained_dict", ")", "\n", "\n", "# Update current model state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn.ddn_template.DDNTemplate.filter_pretrained_dict": [[85, 107], ["pretrained_dict.pop", "pretrained_dict.pop", "pretrained_dict.items"], "methods", ["None"], ["", "def", "filter_pretrained_dict", "(", "self", ",", "model_dict", ",", "pretrained_dict", ")", ":", "\n", "        ", "\"\"\"\n        Removes layers from pretrained state dict that are not used or changed in model\n        Args:\n            model_dict: dict, Default model state dictionary\n            pretrained_dict: dict, Pretrained model state dictionary\n        Returns:\n            pretrained_dict: dict, Pretrained model state dictionary with removed weights\n        \"\"\"", "\n", "# Removes aux classifier weights if not used", "\n", "if", "\"aux_classifier.0.weight\"", "in", "pretrained_dict", "and", "\"aux_classifier.0.weight\"", "not", "in", "model_dict", ":", "\n", "            ", "pretrained_dict", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "\"aux_classifier\"", "not", "in", "key", "}", "\n", "\n", "# Removes final conv layer from weights if number of classes are different", "\n", "", "model_num_classes", "=", "model_dict", "[", "\"classifier.4.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "pretrained_num_classes", "=", "pretrained_dict", "[", "\"classifier.4.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "if", "model_num_classes", "!=", "pretrained_num_classes", ":", "\n", "            ", "pretrained_dict", ".", "pop", "(", "\"classifier.4.weight\"", ")", "\n", "pretrained_dict", ".", "pop", "(", "\"classifier.4.bias\"", ")", "\n", "\n", "", "return", "pretrained_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn.ddn_template.DDNTemplate.forward": [[108, 142], ["ddn_template.DDNTemplate.preprocess", "collections.OrderedDict", "ddn_template.DDNTemplate.model.backbone", "ddn_template.DDNTemplate.model.classifier", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ddn_template.DDNTemplate.model.aux_classifier", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.ddn.ddn_template.DDNTemplate.preprocess"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass\n        Args:\n            images: (N, 3, H_in, W_in), Input images\n        Returns\n            result: dict[torch.Tensor], Depth distribution result\n                features: (N, C, H_out, W_out), Image features\n                logits: (N, num_classes, H_out, W_out), Classification logits\n                aux: (N, num_classes, H_out, W_out), Auxillary classification logits\n        \"\"\"", "\n", "# Preprocess images", "\n", "x", "=", "self", ".", "preprocess", "(", "images", ")", "\n", "\n", "# Extract features", "\n", "result", "=", "OrderedDict", "(", ")", "\n", "features", "=", "self", ".", "model", ".", "backbone", "(", "x", ")", "\n", "result", "[", "'features'", "]", "=", "features", "[", "'features'", "]", "\n", "feat_shape", "=", "features", "[", "'features'", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "# Prediction classification logits", "\n", "x", "=", "features", "[", "\"out\"", "]", "\n", "x", "=", "self", ".", "model", ".", "classifier", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "feat_shape", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "result", "[", "\"logits\"", "]", "=", "x", "\n", "\n", "# Prediction auxillary classification logits", "\n", "if", "self", ".", "model", ".", "aux_classifier", "is", "not", "None", ":", "\n", "            ", "x", "=", "features", "[", "\"aux\"", "]", "\n", "x", "=", "self", ".", "model", ".", "aux_classifier", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "feat_shape", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "result", "[", "\"aux\"", "]", "=", "x", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn.ddn_template.DDNTemplate.preprocess": [[143, 163], ["torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "normalize"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "images", ")", ":", "\n", "        ", "\"\"\"\n        Preprocess images\n        Args:\n            images: (N, 3, H, W), Input images\n        Return\n            x: (N, 3, H, W), Preprocessed images\n        \"\"\"", "\n", "x", "=", "images", "\n", "if", "self", ".", "pretrained", ":", "\n", "# Create a mask for padded pixels", "\n", "            ", "mask", "=", "torch", ".", "isnan", "(", "x", ")", "\n", "\n", "# Match ResNet pretrained preprocessing", "\n", "x", "=", "normalize", "(", "x", ",", "mean", "=", "self", ".", "norm_mean", ",", "std", "=", "self", ".", "norm_std", ")", "\n", "\n", "# Make padded pixels = 0", "\n", "x", "[", "mask", "]", "=", "0", "\n", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn.ddn_deeplabv3.DDNDeepLabV3.__init__": [[11, 25], ["ddn_template.DDNTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone_name", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Initializes DDNDeepLabV3 model\n        Args:\n            backbone_name: string, ResNet Backbone Name [ResNet50/ResNet101]\n        \"\"\"", "\n", "if", "backbone_name", "==", "\"ResNet50\"", ":", "\n", "            ", "constructor", "=", "torchvision", ".", "models", ".", "segmentation", ".", "deeplabv3_resnet50", "\n", "", "elif", "backbone_name", "==", "\"ResNet101\"", ":", "\n", "            ", "constructor", "=", "torchvision", ".", "models", ".", "segmentation", ".", "deeplabv3_resnet101", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "constructor", "=", "constructor", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn_loss.ddn_loss.DDNLoss.__init__": [[17, 48], ["torch.Module.__init__", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "balancer.Balancer", "FocalLoss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "weight", ",", "\n", "alpha", ",", "\n", "gamma", ",", "\n", "disc_cfg", ",", "\n", "fg_weight", ",", "\n", "bg_weight", ",", "\n", "downsample_factor", ")", ":", "\n", "        ", "\"\"\"\n        Initializes DDNLoss module\n        Args:\n            weight: float, Loss function weight\n            alpha: float, Alpha value for Focal Loss\n            gamma: float, Gamma value for Focal Loss\n            disc_cfg: dict, Depth discretiziation configuration\n            fg_weight: float, Foreground loss weight\n            bg_weight: float, Background loss weight\n            downsample_factor: int, Depth map downsample factor\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "self", ".", "disc_cfg", "=", "disc_cfg", "\n", "self", ".", "balancer", "=", "Balancer", "(", "downsample_factor", "=", "downsample_factor", ",", "\n", "fg_weight", "=", "fg_weight", ",", "\n", "bg_weight", "=", "bg_weight", ")", "\n", "\n", "# Set loss function", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "loss_func", "=", "FocalLoss", "(", "alpha", "=", "self", ".", "alpha", ",", "gamma", "=", "self", ".", "gamma", ",", "reduction", "=", "\"none\"", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn_loss.ddn_loss.DDNLoss.forward": [[49, 76], ["pcdet.utils.transform_utils.bin_depths", "ddn_loss.DDNLoss.loss_func", "ddn_loss.DDNLoss.balancer", "tb_dict.update", "ddn_loss.DDNLoss.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.transform_utils.bin_depths", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "forward", "(", "self", ",", "depth_logits", ",", "depth_maps", ",", "gt_boxes2d", ")", ":", "\n", "        ", "\"\"\"\n        Gets DDN loss\n        Args:\n            depth_logits: (B, D+1, H, W), Predicted depth logits\n            depth_maps: (B, H, W), Depth map [m]\n            gt_boxes2d: torch.Tensor (B, N, 4), 2D box labels for foreground/background balancing\n        Returns:\n            loss: (1), Depth distribution network loss\n            tb_dict: dict[float], All losses to log in tensorboard\n        \"\"\"", "\n", "tb_dict", "=", "{", "}", "\n", "\n", "# Bin depth map to create target", "\n", "depth_target", "=", "transform_utils", ".", "bin_depths", "(", "depth_maps", ",", "**", "self", ".", "disc_cfg", ",", "target", "=", "True", ")", "\n", "\n", "# Compute loss", "\n", "loss", "=", "self", ".", "loss_func", "(", "depth_logits", ",", "depth_target", ")", "\n", "\n", "# Compute foreground/background balancing", "\n", "loss", ",", "tb_dict", "=", "self", ".", "balancer", "(", "loss", "=", "loss", ",", "gt_boxes2d", "=", "gt_boxes2d", ")", "\n", "\n", "# Final loss", "\n", "loss", "*=", "self", ".", "weight", "\n", "tb_dict", ".", "update", "(", "{", "\"ddn_loss\"", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "return", "loss", ",", "tb_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn_loss.balancer.Balancer.__init__": [[8, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fg_weight", ",", "bg_weight", ",", "downsample_factor", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Initialize fixed foreground/background loss balancer\n        Args:\n            fg_weight: float, Foreground loss weight\n            bg_weight: float, Background loss weight\n            downsample_factor: int, Depth map downsample factor\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fg_weight", "=", "fg_weight", "\n", "self", ".", "bg_weight", "=", "bg_weight", "\n", "self", ".", "downsample_factor", "=", "downsample_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.ddn_loss.balancer.Balancer.forward": [[21, 51], ["pcdet.utils.loss_utils.compute_fg_mask", "pcdet.utils.loss_utils.compute_fg_mask.sum", "bg_mask.sum", "loss[].sum", "loss[].sum", "loss.item", "fg_loss.item", "bg_loss.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.compute_fg_mask"], ["", "def", "forward", "(", "self", ",", "loss", ",", "gt_boxes2d", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass\n        Args:\n            loss: (B, H, W), Pixel-wise loss\n            gt_boxes2d: (B, N, 4), 2D box labels for foreground/background balancing\n        Returns:\n            loss: (1), Total loss after foreground/background balancing\n            tb_dict: dict[float], All losses to log in tensorboard\n        \"\"\"", "\n", "# Compute masks", "\n", "fg_mask", "=", "loss_utils", ".", "compute_fg_mask", "(", "gt_boxes2d", "=", "gt_boxes2d", ",", "\n", "shape", "=", "loss", ".", "shape", ",", "\n", "downsample_factor", "=", "self", ".", "downsample_factor", ",", "\n", "device", "=", "loss", ".", "device", ")", "\n", "bg_mask", "=", "~", "fg_mask", "\n", "\n", "# Compute balancing weights", "\n", "weights", "=", "self", ".", "fg_weight", "*", "fg_mask", "+", "self", ".", "bg_weight", "*", "bg_mask", "\n", "num_pixels", "=", "fg_mask", ".", "sum", "(", ")", "+", "bg_mask", ".", "sum", "(", ")", "\n", "\n", "# Compute losses", "\n", "loss", "*=", "weights", "\n", "fg_loss", "=", "loss", "[", "fg_mask", "]", ".", "sum", "(", ")", "/", "num_pixels", "\n", "bg_loss", "=", "loss", "[", "bg_mask", "]", ".", "sum", "(", ")", "/", "num_pixels", "\n", "\n", "# Get total loss", "\n", "loss", "=", "fg_loss", "+", "bg_loss", "\n", "tb_dict", "=", "{", "\"balancer_loss\"", ":", "loss", ".", "item", "(", ")", ",", "\"fg_loss\"", ":", "fg_loss", ".", "item", "(", ")", ",", "\"bg_loss\"", ":", "bg_loss", ".", "item", "(", ")", "}", "\n", "return", "loss", ",", "tb_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.__init__": [[125, 175], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "ops.pointnet2.pointnet2_stack.pointnet2_modules.build_local_aggregation_module", "voxel_set_abstraction.VoxelSetAbstraction.SA_layers.append", "voxel_set_abstraction.VoxelSetAbstraction.SA_layer_names.append", "ops.pointnet2.pointnet2_stack.pointnet2_modules.build_local_aggregation_module", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "SA_cfg[].get", "isinstance"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.build_local_aggregation_module", "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.build_local_aggregation_module"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "voxel_size", ",", "point_cloud_range", ",", "num_bev_features", "=", "None", ",", "\n", "num_rawpoint_features", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "voxel_size", "=", "voxel_size", "\n", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "\n", "SA_cfg", "=", "self", ".", "model_cfg", ".", "SA_LAYER", "\n", "\n", "self", ".", "SA_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "SA_layer_names", "=", "[", "]", "\n", "self", ".", "downsample_times_map", "=", "{", "}", "\n", "c_in", "=", "0", "\n", "for", "src_name", "in", "self", ".", "model_cfg", ".", "FEATURES_SOURCE", ":", "\n", "            ", "if", "src_name", "in", "[", "'bev'", ",", "'raw_points'", "]", ":", "\n", "                ", "continue", "\n", "", "self", ".", "downsample_times_map", "[", "src_name", "]", "=", "SA_cfg", "[", "src_name", "]", ".", "DOWNSAMPLE_FACTOR", "\n", "\n", "if", "SA_cfg", "[", "src_name", "]", ".", "get", "(", "'INPUT_CHANNELS'", ",", "None", ")", "is", "None", ":", "\n", "                ", "input_channels", "=", "SA_cfg", "[", "src_name", "]", ".", "MLPS", "[", "0", "]", "[", "0", "]", "if", "isinstance", "(", "SA_cfg", "[", "src_name", "]", ".", "MLPS", "[", "0", "]", ",", "list", ")", "else", "SA_cfg", "[", "src_name", "]", ".", "MLPS", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "input_channels", "=", "SA_cfg", "[", "src_name", "]", "[", "'INPUT_CHANNELS'", "]", "\n", "\n", "", "cur_layer", ",", "cur_num_c_out", "=", "pointnet2_stack_modules", ".", "build_local_aggregation_module", "(", "\n", "input_channels", "=", "input_channels", ",", "config", "=", "SA_cfg", "[", "src_name", "]", "\n", ")", "\n", "self", ".", "SA_layers", ".", "append", "(", "cur_layer", ")", "\n", "self", ".", "SA_layer_names", ".", "append", "(", "src_name", ")", "\n", "\n", "c_in", "+=", "cur_num_c_out", "\n", "\n", "", "if", "'bev'", "in", "self", ".", "model_cfg", ".", "FEATURES_SOURCE", ":", "\n", "            ", "c_bev", "=", "num_bev_features", "\n", "c_in", "+=", "c_bev", "\n", "\n", "", "if", "'raw_points'", "in", "self", ".", "model_cfg", ".", "FEATURES_SOURCE", ":", "\n", "            ", "self", ".", "SA_rawpoints", ",", "cur_num_c_out", "=", "pointnet2_stack_modules", ".", "build_local_aggregation_module", "(", "\n", "input_channels", "=", "num_rawpoint_features", "-", "3", ",", "config", "=", "SA_cfg", "[", "'raw_points'", "]", "\n", ")", "\n", "\n", "c_in", "+=", "cur_num_c_out", "\n", "\n", "", "self", ".", "vsa_point_feature_fusion", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "c_in", ",", "self", ".", "model_cfg", ".", "NUM_OUTPUT_FEATURES", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "NUM_OUTPUT_FEATURES", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "num_point_features", "=", "self", ".", "model_cfg", ".", "NUM_OUTPUT_FEATURES", "\n", "self", ".", "num_point_features_before_fusion", "=", "c_in", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.interpolate_from_bev_features": [[176, 205], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bev_features[].permute", "voxel_set_abstraction.bilinear_interpolate_torch", "point_bev_features_list.append"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.bilinear_interpolate_torch"], ["", "def", "interpolate_from_bev_features", "(", "self", ",", "keypoints", ",", "bev_features", ",", "batch_size", ",", "bev_stride", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            keypoints: (N1 + N2 + ..., 4)\n            bev_features: (B, C, H, W)\n            batch_size:\n            bev_stride:\n\n        Returns:\n            point_bev_features: (N1 + N2 + ..., C)\n        \"\"\"", "\n", "x_idxs", "=", "(", "keypoints", "[", ":", ",", "1", "]", "-", "self", ".", "point_cloud_range", "[", "0", "]", ")", "/", "self", ".", "voxel_size", "[", "0", "]", "\n", "y_idxs", "=", "(", "keypoints", "[", ":", ",", "2", "]", "-", "self", ".", "point_cloud_range", "[", "1", "]", ")", "/", "self", ".", "voxel_size", "[", "1", "]", "\n", "\n", "x_idxs", "=", "x_idxs", "/", "bev_stride", "\n", "y_idxs", "=", "y_idxs", "/", "bev_stride", "\n", "\n", "point_bev_features_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "bs_mask", "=", "(", "keypoints", "[", ":", ",", "0", "]", "==", "k", ")", "\n", "\n", "cur_x_idxs", "=", "x_idxs", "[", "bs_mask", "]", "\n", "cur_y_idxs", "=", "y_idxs", "[", "bs_mask", "]", "\n", "cur_bev_features", "=", "bev_features", "[", "k", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "# (H, W, C)", "\n", "point_bev_features", "=", "bilinear_interpolate_torch", "(", "cur_bev_features", ",", "cur_x_idxs", ",", "cur_y_idxs", ")", "\n", "point_bev_features_list", ".", "append", "(", "point_bev_features", ")", "\n", "\n", "", "point_bev_features", "=", "torch", ".", "cat", "(", "point_bev_features_list", ",", "dim", "=", "0", ")", "# (N1 + N2 + ..., C)", "\n", "return", "point_bev_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.sectorized_proposal_centric_sampling": [[206, 226], ["voxel_set_abstraction.sample_points_with_roi", "voxel_set_abstraction.sector_fps", "voxel_set_abstraction.VoxelSetAbstraction.model_cfg.SPC_SAMPLING.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.sample_points_with_roi", "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.sector_fps"], ["", "def", "sectorized_proposal_centric_sampling", "(", "self", ",", "roi_boxes", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            roi_boxes: (M, 7 + C)\n            points: (N, 3)\n\n        Returns:\n            sampled_points: (N_out, 3)\n        \"\"\"", "\n", "\n", "sampled_points", ",", "_", "=", "sample_points_with_roi", "(", "\n", "rois", "=", "roi_boxes", ",", "points", "=", "points", ",", "\n", "sample_radius_with_roi", "=", "self", ".", "model_cfg", ".", "SPC_SAMPLING", ".", "SAMPLE_RADIUS_WITH_ROI", ",", "\n", "num_max_points_of_part", "=", "self", ".", "model_cfg", ".", "SPC_SAMPLING", ".", "get", "(", "'NUM_POINTS_OF_EACH_SAMPLE_PART'", ",", "200000", ")", "\n", ")", "\n", "sampled_points", "=", "sector_fps", "(", "\n", "points", "=", "sampled_points", ",", "num_sampled_points", "=", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", ",", "\n", "num_sectors", "=", "self", ".", "model_cfg", ".", "SPC_SAMPLING", ".", "NUM_SECTORS", "\n", ")", "\n", "return", "sampled_points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.get_sampled_points": [[227, 282], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].long", "src_points[].unsqueeze", "keypoints_list.append", "len", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.common_utils.get_voxel_centers", "[].long", "ops.pointnet2.pointnet2_stack.pointnet2_utils.farthest_point_sample().long", "[].unsqueeze", "voxel_set_abstraction.VoxelSetAbstraction.sectorized_proposal_centric_sampling", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat().view.float", "torch.arange().view().repeat().view.float", "torch.cat.view", "torch.cat.view", "ops.pointnet2.pointnet2_stack.pointnet2_utils.farthest_point_sample", "int", "non_empty.repeat", "voxel_set_abstraction.VoxelSetAbstraction.new_ones", "sampled_points[].contiguous", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_voxel_centers", "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.sectorized_proposal_centric_sampling"], ["", "def", "get_sampled_points", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n\n        Returns:\n            keypoints: (N1 + N2 + ..., 4), where 4 indicates [bs_idx, x, y, z]\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "if", "self", ".", "model_cfg", ".", "POINT_SOURCE", "==", "'raw_points'", ":", "\n", "            ", "src_points", "=", "batch_dict", "[", "'points'", "]", "[", ":", ",", "1", ":", "4", "]", "\n", "batch_indices", "=", "batch_dict", "[", "'points'", "]", "[", ":", ",", "0", "]", ".", "long", "(", ")", "\n", "", "elif", "self", ".", "model_cfg", ".", "POINT_SOURCE", "==", "'voxel_centers'", ":", "\n", "            ", "src_points", "=", "common_utils", ".", "get_voxel_centers", "(", "\n", "batch_dict", "[", "'voxel_coords'", "]", "[", ":", ",", "1", ":", "4", "]", ",", "\n", "downsample_times", "=", "1", ",", "\n", "voxel_size", "=", "self", ".", "voxel_size", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", "\n", ")", "\n", "batch_indices", "=", "batch_dict", "[", "'voxel_coords'", "]", "[", ":", ",", "0", "]", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "keypoints_list", "=", "[", "]", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "bs_mask", "=", "(", "batch_indices", "==", "bs_idx", ")", "\n", "sampled_points", "=", "src_points", "[", "bs_mask", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", "# (1, N, 3)", "\n", "if", "self", ".", "model_cfg", ".", "SAMPLE_METHOD", "==", "'FPS'", ":", "\n", "                ", "cur_pt_idxs", "=", "pointnet2_stack_utils", ".", "farthest_point_sample", "(", "\n", "sampled_points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", ",", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "\n", ")", ".", "long", "(", ")", "\n", "\n", "if", "sampled_points", ".", "shape", "[", "1", "]", "<", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", ":", "\n", "                    ", "times", "=", "int", "(", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "/", "sampled_points", ".", "shape", "[", "1", "]", ")", "+", "1", "\n", "non_empty", "=", "cur_pt_idxs", "[", "0", ",", ":", "sampled_points", ".", "shape", "[", "1", "]", "]", "\n", "cur_pt_idxs", "[", "0", "]", "=", "non_empty", ".", "repeat", "(", "times", ")", "[", ":", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "]", "\n", "\n", "", "keypoints", "=", "sampled_points", "[", "0", "]", "[", "cur_pt_idxs", "[", "0", "]", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "", "elif", "self", ".", "model_cfg", ".", "SAMPLE_METHOD", "==", "'SPC'", ":", "\n", "                ", "cur_keypoints", "=", "self", ".", "sectorized_proposal_centric_sampling", "(", "\n", "roi_boxes", "=", "batch_dict", "[", "'rois'", "]", "[", "bs_idx", "]", ",", "points", "=", "sampled_points", "[", "0", "]", "\n", ")", "\n", "bs_idxs", "=", "cur_keypoints", ".", "new_ones", "(", "cur_keypoints", ".", "shape", "[", "0", "]", ")", "*", "bs_idx", "\n", "keypoints", "=", "torch", ".", "cat", "(", "(", "bs_idxs", "[", ":", ",", "None", "]", ",", "cur_keypoints", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "keypoints_list", ".", "append", "(", "keypoints", ")", "\n", "\n", "", "keypoints", "=", "torch", ".", "cat", "(", "keypoints_list", ",", "dim", "=", "0", ")", "# (B, M, 3) or (N1 + N2 + ..., 4)", "\n", "if", "len", "(", "keypoints", ".", "shape", ")", "==", "3", ":", "\n", "            ", "batch_idx", "=", "torch", ".", "arange", "(", "batch_size", ",", "device", "=", "keypoints", ".", "device", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "keypoints", ".", "shape", "[", "1", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "keypoints", "=", "torch", ".", "cat", "(", "(", "batch_idx", ".", "float", "(", ")", ",", "keypoints", ".", "view", "(", "-", "1", ",", "3", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.aggregate_keypoint_features_from_one_source": [[283, 333], ["xyz.new_zeros().int", "aggregate_func", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "xyz.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "voxel_set_abstraction.sample_points_with_roi", "point_features_list.append", "valid_mask.sum", "xyz.contiguous", "xyz_features.contiguous"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.sample_points_with_roi"], ["", "@", "staticmethod", "\n", "def", "aggregate_keypoint_features_from_one_source", "(", "\n", "batch_size", ",", "aggregate_func", ",", "xyz", ",", "xyz_features", ",", "xyz_bs_idxs", ",", "new_xyz", ",", "new_xyz_batch_cnt", ",", "\n", "filter_neighbors_with_roi", "=", "False", ",", "radius_of_neighbor", "=", "None", ",", "num_max_points_of_part", "=", "200000", ",", "rois", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            aggregate_func:\n            xyz: (N, 3)\n            xyz_features: (N, C)\n            xyz_bs_idxs: (N)\n            new_xyz: (M, 3)\n            new_xyz_batch_cnt: (batch_size), [N1, N2, ...]\n\n            filter_neighbors_with_roi: True/False\n            radius_of_neighbor: float\n            num_max_points_of_part: int\n            rois: (batch_size, num_rois, 7 + C)\n        Returns:\n\n        \"\"\"", "\n", "xyz_batch_cnt", "=", "xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", "\n", "if", "filter_neighbors_with_roi", ":", "\n", "            ", "point_features", "=", "torch", ".", "cat", "(", "(", "xyz", ",", "xyz_features", ")", ",", "dim", "=", "-", "1", ")", "if", "xyz_features", "is", "not", "None", "else", "xyz", "\n", "point_features_list", "=", "[", "]", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "bs_mask", "=", "(", "xyz_bs_idxs", "==", "bs_idx", ")", "\n", "_", ",", "valid_mask", "=", "sample_points_with_roi", "(", "\n", "rois", "=", "rois", "[", "bs_idx", "]", ",", "points", "=", "xyz", "[", "bs_mask", "]", ",", "\n", "sample_radius_with_roi", "=", "radius_of_neighbor", ",", "num_max_points_of_part", "=", "num_max_points_of_part", ",", "\n", ")", "\n", "point_features_list", ".", "append", "(", "point_features", "[", "bs_mask", "]", "[", "valid_mask", "]", ")", "\n", "xyz_batch_cnt", "[", "bs_idx", "]", "=", "valid_mask", ".", "sum", "(", ")", "\n", "\n", "", "valid_point_features", "=", "torch", ".", "cat", "(", "point_features_list", ",", "dim", "=", "0", ")", "\n", "xyz", "=", "valid_point_features", "[", ":", ",", "0", ":", "3", "]", "\n", "xyz_features", "=", "valid_point_features", "[", ":", ",", "3", ":", "]", "if", "xyz_features", "is", "not", "None", "else", "None", "\n", "", "else", ":", "\n", "            ", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "xyz_batch_cnt", "[", "bs_idx", "]", "=", "(", "xyz_bs_idxs", "==", "bs_idx", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "pooled_points", ",", "pooled_features", "=", "aggregate_func", "(", "\n", "xyz", "=", "xyz", ".", "contiguous", "(", ")", ",", "\n", "xyz_batch_cnt", "=", "xyz_batch_cnt", ",", "\n", "new_xyz", "=", "new_xyz", ",", "\n", "new_xyz_batch_cnt", "=", "new_xyz_batch_cnt", ",", "\n", "features", "=", "xyz_features", ".", "contiguous", "(", ")", ",", "\n", ")", "\n", "return", "pooled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.forward": [[334, 412], ["voxel_set_abstraction.VoxelSetAbstraction.get_sampled_points", "keypoints[].contiguous", "keypoints[].contiguous.new_zeros().int", "range", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "voxel_set_abstraction.VoxelSetAbstraction.view", "voxel_set_abstraction.VoxelSetAbstraction.vsa_point_feature_fusion", "voxel_set_abstraction.VoxelSetAbstraction.interpolate_from_bev_features", "point_features_list.append", "voxel_set_abstraction.VoxelSetAbstraction.aggregate_keypoint_features_from_one_source", "point_features_list.append", "[].features.contiguous", "utils.common_utils.get_voxel_centers", "voxel_set_abstraction.VoxelSetAbstraction.aggregate_keypoint_features_from_one_source", "point_features_list.append", "voxel_set_abstraction.VoxelSetAbstraction.view", "keypoints[].contiguous.new_zeros", "voxel_set_abstraction.VoxelSetAbstraction.model_cfg.SA_LAYER[].get", "voxel_set_abstraction.VoxelSetAbstraction.model_cfg.SA_LAYER[].get", "batch_dict.get", "utils.common_utils.get_voxel_centers.contiguous", "voxel_set_abstraction.VoxelSetAbstraction.model_cfg.SA_LAYER[].get", "voxel_set_abstraction.VoxelSetAbstraction.model_cfg.SA_LAYER[].get", "batch_dict.get", "raw_points[].contiguous"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.get_sampled_points", "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.interpolate_from_bev_features", "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.aggregate_keypoint_features_from_one_source", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_voxel_centers", "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.VoxelSetAbstraction.aggregate_keypoint_features_from_one_source"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                keypoints: (B, num_keypoints, 3)\n                multi_scale_3d_features: {\n                        'x_conv4': ...\n                    }\n                points: optional (N, 1 + 3 + C) [bs_idx, x, y, z, ...]\n                spatial_features: optional\n                spatial_features_stride: optional\n\n        Returns:\n            point_features: (N, C)\n            point_coords: (N, 4)\n\n        \"\"\"", "\n", "keypoints", "=", "self", ".", "get_sampled_points", "(", "batch_dict", ")", "\n", "\n", "point_features_list", "=", "[", "]", "\n", "if", "'bev'", "in", "self", ".", "model_cfg", ".", "FEATURES_SOURCE", ":", "\n", "            ", "point_bev_features", "=", "self", ".", "interpolate_from_bev_features", "(", "\n", "keypoints", ",", "batch_dict", "[", "'spatial_features'", "]", ",", "batch_dict", "[", "'batch_size'", "]", ",", "\n", "bev_stride", "=", "batch_dict", "[", "'spatial_features_stride'", "]", "\n", ")", "\n", "point_features_list", ".", "append", "(", "point_bev_features", ")", "\n", "\n", "", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "\n", "new_xyz", "=", "keypoints", "[", ":", ",", "1", ":", "4", "]", ".", "contiguous", "(", ")", "\n", "new_xyz_batch_cnt", "=", "new_xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "new_xyz_batch_cnt", "[", "k", "]", "=", "(", "keypoints", "[", ":", ",", "0", "]", "==", "k", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "'raw_points'", "in", "self", ".", "model_cfg", ".", "FEATURES_SOURCE", ":", "\n", "            ", "raw_points", "=", "batch_dict", "[", "'points'", "]", "\n", "\n", "pooled_features", "=", "self", ".", "aggregate_keypoint_features_from_one_source", "(", "\n", "batch_size", "=", "batch_size", ",", "aggregate_func", "=", "self", ".", "SA_rawpoints", ",", "\n", "xyz", "=", "raw_points", "[", ":", ",", "1", ":", "4", "]", ",", "\n", "xyz_features", "=", "raw_points", "[", ":", ",", "4", ":", "]", ".", "contiguous", "(", ")", "if", "raw_points", ".", "shape", "[", "1", "]", ">", "4", "else", "None", ",", "\n", "xyz_bs_idxs", "=", "raw_points", "[", ":", ",", "0", "]", ",", "\n", "new_xyz", "=", "new_xyz", ",", "new_xyz_batch_cnt", "=", "new_xyz_batch_cnt", ",", "\n", "filter_neighbors_with_roi", "=", "self", ".", "model_cfg", ".", "SA_LAYER", "[", "'raw_points'", "]", ".", "get", "(", "'FILTER_NEIGHBOR_WITH_ROI'", ",", "False", ")", ",", "\n", "radius_of_neighbor", "=", "self", ".", "model_cfg", ".", "SA_LAYER", "[", "'raw_points'", "]", ".", "get", "(", "'RADIUS_OF_NEIGHBOR_WITH_ROI'", ",", "None", ")", ",", "\n", "rois", "=", "batch_dict", ".", "get", "(", "'rois'", ",", "None", ")", "\n", ")", "\n", "point_features_list", ".", "append", "(", "pooled_features", ")", "\n", "\n", "", "for", "k", ",", "src_name", "in", "enumerate", "(", "self", ".", "SA_layer_names", ")", ":", "\n", "            ", "cur_coords", "=", "batch_dict", "[", "'multi_scale_3d_features'", "]", "[", "src_name", "]", ".", "indices", "\n", "cur_features", "=", "batch_dict", "[", "'multi_scale_3d_features'", "]", "[", "src_name", "]", ".", "features", ".", "contiguous", "(", ")", "\n", "\n", "xyz", "=", "common_utils", ".", "get_voxel_centers", "(", "\n", "cur_coords", "[", ":", ",", "1", ":", "4", "]", ",", "downsample_times", "=", "self", ".", "downsample_times_map", "[", "src_name", "]", ",", "\n", "voxel_size", "=", "self", ".", "voxel_size", ",", "point_cloud_range", "=", "self", ".", "point_cloud_range", "\n", ")", "\n", "\n", "pooled_features", "=", "self", ".", "aggregate_keypoint_features_from_one_source", "(", "\n", "batch_size", "=", "batch_size", ",", "aggregate_func", "=", "self", ".", "SA_layers", "[", "k", "]", ",", "\n", "xyz", "=", "xyz", ".", "contiguous", "(", ")", ",", "xyz_features", "=", "cur_features", ",", "xyz_bs_idxs", "=", "cur_coords", "[", ":", ",", "0", "]", ",", "\n", "new_xyz", "=", "new_xyz", ",", "new_xyz_batch_cnt", "=", "new_xyz_batch_cnt", ",", "\n", "filter_neighbors_with_roi", "=", "self", ".", "model_cfg", ".", "SA_LAYER", "[", "src_name", "]", ".", "get", "(", "'FILTER_NEIGHBOR_WITH_ROI'", ",", "False", ")", ",", "\n", "radius_of_neighbor", "=", "self", ".", "model_cfg", ".", "SA_LAYER", "[", "src_name", "]", ".", "get", "(", "'RADIUS_OF_NEIGHBOR_WITH_ROI'", ",", "None", ")", ",", "\n", "rois", "=", "batch_dict", ".", "get", "(", "'rois'", ",", "None", ")", "\n", ")", "\n", "\n", "point_features_list", ".", "append", "(", "pooled_features", ")", "\n", "\n", "", "point_features", "=", "torch", ".", "cat", "(", "point_features_list", ",", "dim", "=", "-", "1", ")", "\n", "\n", "batch_dict", "[", "'point_features_before_fusion'", "]", "=", "point_features", ".", "view", "(", "-", "1", ",", "point_features", ".", "shape", "[", "-", "1", "]", ")", "\n", "point_features", "=", "self", ".", "vsa_point_feature_fusion", "(", "point_features", ".", "view", "(", "-", "1", ",", "point_features", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "batch_dict", "[", "'point_features'", "]", "=", "point_features", "# (BxN, C)", "\n", "batch_dict", "[", "'point_coords'", "]", "=", "keypoints", "# (BxN, 4)", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.bilinear_interpolate_torch": [[11, 43], ["torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.t", "torch.t", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t"], "function", ["None"], ["def", "bilinear_interpolate_torch", "(", "im", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        im: (H, W, C) [y, x]\n        x: (N)\n        y: (N)\n\n    Returns:\n\n    \"\"\"", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", ".", "long", "(", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", ".", "long", "(", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "x0", "=", "torch", ".", "clamp", "(", "x0", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "x1", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "y0", "=", "torch", ".", "clamp", "(", "y0", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "y1", "=", "torch", ".", "clamp", "(", "y1", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "Ia", "=", "im", "[", "y0", ",", "x0", "]", "\n", "Ib", "=", "im", "[", "y1", ",", "x0", "]", "\n", "Ic", "=", "im", "[", "y0", ",", "x1", "]", "\n", "Id", "=", "im", "[", "y1", ",", "x1", "]", "\n", "\n", "wa", "=", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "\n", "wb", "=", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "*", "(", "y", "-", "y0", ".", "type_as", "(", "y", ")", ")", "\n", "wc", "=", "(", "x", "-", "x0", ".", "type_as", "(", "x", ")", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "\n", "wd", "=", "(", "x", "-", "x0", ".", "type_as", "(", "x", ")", ")", "*", "(", "y", "-", "y0", ".", "type_as", "(", "y", ")", ")", "\n", "ans", "=", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "Ia", ")", "*", "wa", ")", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Ib", ")", "*", "wb", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Ic", ")", "*", "wc", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Id", ")", "*", "wd", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.sample_points_with_roi": [[45, 76], ["distance.min", "torch.cat", "torch.cat", "distance.min", "point_mask_list.append", "torch.cat.sum"], "function", ["None"], ["", "def", "sample_points_with_roi", "(", "rois", ",", "points", ",", "sample_radius_with_roi", ",", "num_max_points_of_part", "=", "200000", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        rois: (M, 7 + C)\n        points: (N, 3)\n        sample_radius_with_roi:\n        num_max_points_of_part:\n\n    Returns:\n        sampled_points: (N_out, 3)\n    \"\"\"", "\n", "if", "points", ".", "shape", "[", "0", "]", "<", "num_max_points_of_part", ":", "\n", "        ", "distance", "=", "(", "points", "[", ":", ",", "None", ",", ":", "]", "-", "rois", "[", "None", ",", ":", ",", "0", ":", "3", "]", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "min_dis", ",", "min_dis_roi_idx", "=", "distance", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "roi_max_dim", "=", "(", "rois", "[", "min_dis_roi_idx", ",", "3", ":", "6", "]", "/", "2", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "point_mask", "=", "min_dis", "<", "roi_max_dim", "+", "sample_radius_with_roi", "\n", "", "else", ":", "\n", "        ", "start_idx", "=", "0", "\n", "point_mask_list", "=", "[", "]", "\n", "while", "start_idx", "<", "points", ".", "shape", "[", "0", "]", ":", "\n", "            ", "distance", "=", "(", "points", "[", "start_idx", ":", "start_idx", "+", "num_max_points_of_part", ",", "None", ",", ":", "]", "-", "rois", "[", "None", ",", ":", ",", "0", ":", "3", "]", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "min_dis", ",", "min_dis_roi_idx", "=", "distance", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "roi_max_dim", "=", "(", "rois", "[", "min_dis_roi_idx", ",", "3", ":", "6", "]", "/", "2", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "cur_point_mask", "=", "min_dis", "<", "roi_max_dim", "+", "sample_radius_with_roi", "\n", "point_mask_list", ".", "append", "(", "cur_point_mask", ")", "\n", "start_idx", "+=", "num_max_points_of_part", "\n", "", "point_mask", "=", "torch", ".", "cat", "(", "point_mask_list", ",", "dim", "=", "0", ")", "\n", "\n", "", "sampled_points", "=", "points", "[", ":", "1", "]", "if", "point_mask", ".", "sum", "(", ")", "==", "0", "else", "points", "[", "point_mask", ",", ":", "]", "\n", "\n", "return", "sampled_points", ",", "point_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.pfe.voxel_set_abstraction.sector_fps": [[78, 122], ["range", "torch.cat", "torch.cat", "torch.tensor().int", "torch.tensor().int", "torch.tensor().int", "torch.tensor().int", "ops.pointnet2.pointnet2_stack.pointnet2_utils.stack_farthest_point_sample().long", "torch.atan2", "torch.atan2", "mask.sum().item", "len", "xyz_points_list.append", "torch.tensor().int.append", "num_sampled_points_list.append", "print", "xyz_points_list.append", "torch.tensor().int.append", "num_sampled_points_list.append", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ops.pointnet2.pointnet2_stack.pointnet2_utils.stack_farthest_point_sample", "mask.sum", "min", "torch.cat.contiguous", "math.ceil"], "function", ["None"], ["", "def", "sector_fps", "(", "points", ",", "num_sampled_points", ",", "num_sectors", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (N, 3)\n        num_sampled_points: int\n        num_sectors: int\n\n    Returns:\n        sampled_points: (N_out, 3)\n    \"\"\"", "\n", "sector_size", "=", "np", ".", "pi", "*", "2", "/", "num_sectors", "\n", "point_angles", "=", "torch", ".", "atan2", "(", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "0", "]", ")", "+", "np", ".", "pi", "\n", "sector_idx", "=", "(", "point_angles", "/", "sector_size", ")", ".", "floor", "(", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "num_sectors", ")", "\n", "xyz_points_list", "=", "[", "]", "\n", "xyz_batch_cnt", "=", "[", "]", "\n", "num_sampled_points_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_sectors", ")", ":", "\n", "        ", "mask", "=", "(", "sector_idx", "==", "k", ")", "\n", "cur_num_points", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "cur_num_points", ">", "0", ":", "\n", "            ", "xyz_points_list", ".", "append", "(", "points", "[", "mask", "]", ")", "\n", "xyz_batch_cnt", ".", "append", "(", "cur_num_points", ")", "\n", "ratio", "=", "cur_num_points", "/", "points", ".", "shape", "[", "0", "]", "\n", "num_sampled_points_list", ".", "append", "(", "\n", "min", "(", "cur_num_points", ",", "math", ".", "ceil", "(", "ratio", "*", "num_sampled_points", ")", ")", "\n", ")", "\n", "\n", "", "", "if", "len", "(", "xyz_batch_cnt", ")", "==", "0", ":", "\n", "        ", "xyz_points_list", ".", "append", "(", "points", ")", "\n", "xyz_batch_cnt", ".", "append", "(", "len", "(", "points", ")", ")", "\n", "num_sampled_points_list", ".", "append", "(", "num_sampled_points", ")", "\n", "print", "(", "f'Warning: empty sector points detected in SectorFPS: points.shape={points.shape}'", ")", "\n", "\n", "", "xyz", "=", "torch", ".", "cat", "(", "xyz_points_list", ",", "dim", "=", "0", ")", "\n", "xyz_batch_cnt", "=", "torch", ".", "tensor", "(", "xyz_batch_cnt", ",", "device", "=", "points", ".", "device", ")", ".", "int", "(", ")", "\n", "sampled_points_batch_cnt", "=", "torch", ".", "tensor", "(", "num_sampled_points_list", ",", "device", "=", "points", ".", "device", ")", ".", "int", "(", ")", "\n", "\n", "sampled_pt_idxs", "=", "pointnet2_stack_utils", ".", "stack_farthest_point_sample", "(", "\n", "xyz", ".", "contiguous", "(", ")", ",", "xyz_batch_cnt", ",", "sampled_points_batch_cnt", "\n", ")", ".", "long", "(", ")", "\n", "\n", "sampled_points", "=", "xyz", "[", "sampled_pt_idxs", "]", "\n", "\n", "return", "sampled_points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.pv_rcnn_plusplus.PVRCNNPlusPlus.__init__": [[5, 8], ["detector3d_template.Detector3DTemplate.__init__", "pv_rcnn_plusplus.PVRCNNPlusPlus.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.pv_rcnn_plusplus.PVRCNNPlusPlus.forward": [[9, 42], ["pv_rcnn_plusplus.PVRCNNPlusPlus.vfe", "pv_rcnn_plusplus.PVRCNNPlusPlus.backbone_3d", "pv_rcnn_plusplus.PVRCNNPlusPlus.map_to_bev_module", "pv_rcnn_plusplus.PVRCNNPlusPlus.backbone_2d", "pv_rcnn_plusplus.PVRCNNPlusPlus.dense_head", "pv_rcnn_plusplus.PVRCNNPlusPlus.roi_head.proposal_layer", "pv_rcnn_plusplus.PVRCNNPlusPlus.pfe", "pv_rcnn_plusplus.PVRCNNPlusPlus.point_head", "pv_rcnn_plusplus.PVRCNNPlusPlus.roi_head", "pv_rcnn_plusplus.PVRCNNPlusPlus.roi_head.assign_targets", "pv_rcnn_plusplus.PVRCNNPlusPlus.get_training_loss", "pv_rcnn_plusplus.PVRCNNPlusPlus.post_processing", "range"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.proposal_layer", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "batch_dict", "=", "self", ".", "vfe", "(", "batch_dict", ")", "\n", "batch_dict", "=", "self", ".", "backbone_3d", "(", "batch_dict", ")", "\n", "batch_dict", "=", "self", ".", "map_to_bev_module", "(", "batch_dict", ")", "\n", "batch_dict", "=", "self", ".", "backbone_2d", "(", "batch_dict", ")", "\n", "batch_dict", "=", "self", ".", "dense_head", "(", "batch_dict", ")", "\n", "\n", "batch_dict", "=", "self", ".", "roi_head", ".", "proposal_layer", "(", "\n", "batch_dict", ",", "nms_config", "=", "self", ".", "roi_head", ".", "model_cfg", ".", "NMS_CONFIG", "[", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "]", "\n", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "roi_head", ".", "assign_targets", "(", "batch_dict", ")", "\n", "batch_dict", "[", "'rois'", "]", "=", "targets_dict", "[", "'rois'", "]", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "targets_dict", "[", "'roi_labels'", "]", "\n", "batch_dict", "[", "'roi_targets_dict'", "]", "=", "targets_dict", "\n", "num_rois_per_scene", "=", "targets_dict", "[", "'rois'", "]", ".", "shape", "[", "1", "]", "\n", "if", "'roi_valid_num'", "in", "batch_dict", ":", "\n", "                ", "batch_dict", "[", "'roi_valid_num'", "]", "=", "[", "num_rois_per_scene", "for", "_", "in", "range", "(", "batch_dict", "[", "'batch_size'", "]", ")", "]", "\n", "\n", "", "", "batch_dict", "=", "self", ".", "pfe", "(", "batch_dict", ")", "\n", "batch_dict", "=", "self", ".", "point_head", "(", "batch_dict", ")", "\n", "batch_dict", "=", "self", ".", "roi_head", "(", "batch_dict", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.pv_rcnn_plusplus.PVRCNNPlusPlus.get_training_loss": [[43, 54], ["pv_rcnn_plusplus.PVRCNNPlusPlus.dense_head.get_loss", "pv_rcnn_plusplus.PVRCNNPlusPlus.roi_head.get_loss", "pv_rcnn_plusplus.PVRCNNPlusPlus.point_head.get_loss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "loss_rpn", ",", "tb_dict", "=", "self", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "if", "self", ".", "point_head", "is", "not", "None", ":", "\n", "            ", "loss_point", ",", "tb_dict", "=", "self", ".", "point_head", ".", "get_loss", "(", "tb_dict", ")", "\n", "", "else", ":", "\n", "            ", "loss_point", "=", "0", "\n", "", "loss_rcnn", ",", "tb_dict", "=", "self", ".", "roi_head", ".", "get_loss", "(", "tb_dict", ")", "\n", "\n", "loss", "=", "loss_rpn", "+", "loss_point", "+", "loss_rcnn", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net.SECONDNet.__init__": [[5, 8], ["detector3d_template.Detector3DTemplate.__init__", "second_net.SECONDNet.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net.SECONDNet.forward": [[9, 23], ["cur_module", "second_net.SECONDNet.get_training_loss", "second_net.SECONDNet.post_processing"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "for", "cur_module", "in", "self", ".", "module_list", ":", "\n", "            ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net.SECONDNet.get_training_loss": [[24, 35], ["second_net.SECONDNet.dense_head.get_loss", "loss_rpn.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "\n", "loss_rpn", ",", "tb_dict", "=", "self", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "tb_dict", "=", "{", "\n", "'loss_rpn'", ":", "loss_rpn", ".", "item", "(", ")", ",", "\n", "**", "tb_dict", "\n", "}", "\n", "\n", "loss", "=", "loss_rpn", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.__init__": [[15, 26], ["torch.Module.__init__", "detector3d_template.Detector3DTemplate.register_buffer", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "class_names", "=", "dataset", ".", "class_names", "\n", "self", ".", "register_buffer", "(", "'global_step'", ",", "torch", ".", "LongTensor", "(", "1", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "self", ".", "module_topology", "=", "[", "\n", "'vfe'", ",", "'backbone_3d'", ",", "'map_to_bev_module'", ",", "'pfe'", ",", "\n", "'backbone_2d'", ",", "'dense_head'", ",", "'point_head'", ",", "'roi_head'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.mode": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.update_global_step": [[32, 34], ["None"], "methods", ["None"], ["", "def", "update_global_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks": [[35, 51], ["detector3d_template.Detector3DTemplate.add_module", "getattr"], "methods", ["None"], ["", "def", "build_networks", "(", "self", ")", ":", "\n", "        ", "model_info_dict", "=", "{", "\n", "'module_list'", ":", "[", "]", ",", "\n", "'num_rawpoint_features'", ":", "self", ".", "dataset", ".", "point_feature_encoder", ".", "num_point_features", ",", "\n", "'num_point_features'", ":", "self", ".", "dataset", ".", "point_feature_encoder", ".", "num_point_features", ",", "\n", "'grid_size'", ":", "self", ".", "dataset", ".", "grid_size", ",", "\n", "'point_cloud_range'", ":", "self", ".", "dataset", ".", "point_cloud_range", ",", "\n", "'voxel_size'", ":", "self", ".", "dataset", ".", "voxel_size", ",", "\n", "'depth_downsample_factor'", ":", "self", ".", "dataset", ".", "depth_downsample_factor", "\n", "}", "\n", "for", "module_name", "in", "self", ".", "module_topology", ":", "\n", "            ", "module", ",", "model_info_dict", "=", "getattr", "(", "self", ",", "'build_%s'", "%", "module_name", ")", "(", "\n", "model_info_dict", "=", "model_info_dict", "\n", ")", "\n", "self", ".", "add_module", "(", "module_name", ",", "module", ")", "\n", "", "return", "model_info_dict", "[", "'module_list'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_vfe": [[52, 67], ["vfe_module.get_output_feature_dim", "model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.ffn.depth_ffn.DepthFFN.get_output_feature_dim"], ["", "def", "build_vfe", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'VFE'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "vfe_module", "=", "vfe", ".", "__all__", "[", "self", ".", "model_cfg", ".", "VFE", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "VFE", ",", "\n", "num_point_features", "=", "model_info_dict", "[", "'num_rawpoint_features'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "voxel_size", "=", "model_info_dict", "[", "'voxel_size'", "]", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'grid_size'", "]", ",", "\n", "depth_downsample_factor", "=", "model_info_dict", "[", "'depth_downsample_factor'", "]", "\n", ")", "\n", "model_info_dict", "[", "'num_point_features'", "]", "=", "vfe_module", ".", "get_output_feature_dim", "(", ")", "\n", "model_info_dict", "[", "'module_list'", "]", ".", "append", "(", "vfe_module", ")", "\n", "return", "vfe_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_backbone_3d": [[68, 84], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get", "hasattr"], "methods", ["None"], ["", "def", "build_backbone_3d", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'BACKBONE_3D'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "backbone_3d_module", "=", "backbones_3d", ".", "__all__", "[", "self", ".", "model_cfg", ".", "BACKBONE_3D", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "BACKBONE_3D", ",", "\n", "input_channels", "=", "model_info_dict", "[", "'num_point_features'", "]", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'grid_size'", "]", ",", "\n", "voxel_size", "=", "model_info_dict", "[", "'voxel_size'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", "\n", ")", "\n", "model_info_dict", "[", "'module_list'", "]", ".", "append", "(", "backbone_3d_module", ")", "\n", "model_info_dict", "[", "'num_point_features'", "]", "=", "backbone_3d_module", ".", "num_point_features", "\n", "model_info_dict", "[", "'backbone_channels'", "]", "=", "backbone_3d_module", ".", "backbone_channels", "if", "hasattr", "(", "backbone_3d_module", ",", "'backbone_channels'", ")", "else", "None", "\n", "return", "backbone_3d_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_map_to_bev_module": [[85, 96], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_map_to_bev_module", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'MAP_TO_BEV'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "map_to_bev_module", "=", "map_to_bev", ".", "__all__", "[", "self", ".", "model_cfg", ".", "MAP_TO_BEV", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "MAP_TO_BEV", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'grid_size'", "]", "\n", ")", "\n", "model_info_dict", "[", "'module_list'", "]", ".", "append", "(", "map_to_bev_module", ")", "\n", "model_info_dict", "[", "'num_bev_features'", "]", "=", "map_to_bev_module", ".", "num_bev_features", "\n", "return", "map_to_bev_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_backbone_2d": [[97, 108], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_backbone_2d", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'BACKBONE_2D'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "backbone_2d_module", "=", "backbones_2d", ".", "__all__", "[", "self", ".", "model_cfg", ".", "BACKBONE_2D", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "BACKBONE_2D", ",", "\n", "input_channels", "=", "model_info_dict", "[", "'num_bev_features'", "]", "\n", ")", "\n", "model_info_dict", "[", "'module_list'", "]", ".", "append", "(", "backbone_2d_module", ")", "\n", "model_info_dict", "[", "'num_bev_features'", "]", "=", "backbone_2d_module", ".", "num_bev_features", "\n", "return", "backbone_2d_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_pfe": [[109, 124], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_pfe", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'PFE'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "pfe_module", "=", "pfe", ".", "__all__", "[", "self", ".", "model_cfg", ".", "PFE", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "PFE", ",", "\n", "voxel_size", "=", "model_info_dict", "[", "'voxel_size'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "num_bev_features", "=", "model_info_dict", "[", "'num_bev_features'", "]", ",", "\n", "num_rawpoint_features", "=", "model_info_dict", "[", "'num_rawpoint_features'", "]", "\n", ")", "\n", "model_info_dict", "[", "'module_list'", "]", ".", "append", "(", "pfe_module", ")", "\n", "model_info_dict", "[", "'num_point_features'", "]", "=", "pfe_module", ".", "num_point_features", "\n", "model_info_dict", "[", "'num_point_features_before_fusion'", "]", "=", "pfe_module", ".", "num_point_features_before_fusion", "\n", "return", "pfe_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_dense_head": [[125, 140], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get", "detector3d_template.Detector3DTemplate.model_cfg.get", "model_info_dict.get"], "methods", ["None"], ["", "def", "build_dense_head", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'DENSE_HEAD'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "", "dense_head_module", "=", "dense_heads", ".", "__all__", "[", "self", ".", "model_cfg", ".", "DENSE_HEAD", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "DENSE_HEAD", ",", "\n", "input_channels", "=", "model_info_dict", "[", "'num_bev_features'", "]", ",", "\n", "num_class", "=", "self", ".", "num_class", "if", "not", "self", ".", "model_cfg", ".", "DENSE_HEAD", ".", "CLASS_AGNOSTIC", "else", "1", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'grid_size'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "predict_boxes_when_training", "=", "self", ".", "model_cfg", ".", "get", "(", "'ROI_HEAD'", ",", "False", ")", ",", "\n", "voxel_size", "=", "model_info_dict", ".", "get", "(", "'voxel_size'", ",", "False", ")", "\n", ")", "\n", "model_info_dict", "[", "'module_list'", "]", ".", "append", "(", "dense_head_module", ")", "\n", "return", "dense_head_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_point_head": [[141, 159], ["detector3d_template.Detector3DTemplate.model_cfg.POINT_HEAD.get", "model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_point_head", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'POINT_HEAD'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "if", "self", ".", "model_cfg", ".", "POINT_HEAD", ".", "get", "(", "'USE_POINT_FEATURES_BEFORE_FUSION'", ",", "False", ")", ":", "\n", "            ", "num_point_features", "=", "model_info_dict", "[", "'num_point_features_before_fusion'", "]", "\n", "", "else", ":", "\n", "            ", "num_point_features", "=", "model_info_dict", "[", "'num_point_features'", "]", "\n", "\n", "", "point_head_module", "=", "dense_heads", ".", "__all__", "[", "self", ".", "model_cfg", ".", "POINT_HEAD", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "POINT_HEAD", ",", "\n", "input_channels", "=", "num_point_features", ",", "\n", "num_class", "=", "self", ".", "num_class", "if", "not", "self", ".", "model_cfg", ".", "POINT_HEAD", ".", "CLASS_AGNOSTIC", "else", "1", ",", "\n", "predict_boxes_when_training", "=", "self", ".", "model_cfg", ".", "get", "(", "'ROI_HEAD'", ",", "False", ")", "\n", ")", "\n", "\n", "model_info_dict", "[", "'module_list'", "]", ".", "append", "(", "point_head_module", ")", "\n", "return", "point_head_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_roi_head": [[160, 174], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_roi_head", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'ROI_HEAD'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "", "point_head_module", "=", "roi_heads", ".", "__all__", "[", "self", ".", "model_cfg", ".", "ROI_HEAD", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "ROI_HEAD", ",", "\n", "input_channels", "=", "model_info_dict", "[", "'num_point_features'", "]", ",", "\n", "backbone_channels", "=", "model_info_dict", "[", "'backbone_channels'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "voxel_size", "=", "model_info_dict", "[", "'voxel_size'", "]", ",", "\n", "num_class", "=", "self", ".", "num_class", "if", "not", "self", ".", "model_cfg", ".", "ROI_HEAD", ".", "CLASS_AGNOSTIC", "else", "1", ",", "\n", ")", "\n", "\n", "model_info_dict", "[", "'module_list'", "]", ".", "append", "(", "point_head_module", ")", "\n", "return", "point_head_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.forward": [[175, 177], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.post_processing": [[178, 285], ["range", "detector3d_template.Detector3DTemplate.generate_recall_record", "pred_dicts.append", "batch_dict.get", "isinstance", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "batch_dict.get", "model_utils.model_nms_utils.class_agnostic_nms", "batch_dict[].shape.__len__", "batch_dict[].shape.__len__", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "isinstance", "model_utils.model_nms_utils.multi_classes_nms", "pred_scores.append", "pred_labels.append", "pred_boxes.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.generate_recall_record", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.model_nms_utils.class_agnostic_nms", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.model_nms_utils.multi_classes_nms", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid"], ["", "def", "post_processing", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                batch_cls_preds: (B, num_boxes, num_classes | 1) or (N1+N2+..., num_classes | 1)\n                                or [(B, num_boxes, num_class1), (B, num_boxes, num_class2) ...]\n                multihead_label_mapping: [(num_class1), (num_class2), ...]\n                batch_box_preds: (B, num_boxes, 7+C) or (N1+N2+..., 7+C)\n                cls_preds_normalized: indicate whether batch_cls_preds is normalized\n                batch_index: optional (N1+N2+...)\n                has_class_labels: True/False\n                roi_labels: (B, num_rois)  1 .. num_classes\n                batch_pred_labels: (B, num_boxes, 1)\n        Returns:\n\n        \"\"\"", "\n", "post_process_cfg", "=", "self", ".", "model_cfg", ".", "POST_PROCESSING", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "recall_dict", "=", "{", "}", "\n", "pred_dicts", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "batch_dict", ".", "get", "(", "'batch_index'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "assert", "batch_dict", "[", "'batch_box_preds'", "]", ".", "shape", ".", "__len__", "(", ")", "==", "2", "\n", "batch_mask", "=", "(", "batch_dict", "[", "'batch_index'", "]", "==", "index", ")", "\n", "", "else", ":", "\n", "                ", "assert", "batch_dict", "[", "'batch_box_preds'", "]", ".", "shape", ".", "__len__", "(", ")", "==", "3", "\n", "batch_mask", "=", "index", "\n", "\n", "", "box_preds", "=", "batch_dict", "[", "'batch_box_preds'", "]", "[", "batch_mask", "]", "\n", "src_box_preds", "=", "box_preds", "\n", "\n", "if", "not", "isinstance", "(", "batch_dict", "[", "'batch_cls_preds'", "]", ",", "list", ")", ":", "\n", "                ", "cls_preds", "=", "batch_dict", "[", "'batch_cls_preds'", "]", "[", "batch_mask", "]", "\n", "\n", "src_cls_preds", "=", "cls_preds", "\n", "assert", "cls_preds", ".", "shape", "[", "1", "]", "in", "[", "1", ",", "self", ".", "num_class", "]", "\n", "\n", "if", "not", "batch_dict", "[", "'cls_preds_normalized'", "]", ":", "\n", "                    ", "cls_preds", "=", "torch", ".", "sigmoid", "(", "cls_preds", ")", "\n", "", "", "else", ":", "\n", "                ", "cls_preds", "=", "[", "x", "[", "batch_mask", "]", "for", "x", "in", "batch_dict", "[", "'batch_cls_preds'", "]", "]", "\n", "src_cls_preds", "=", "cls_preds", "\n", "if", "not", "batch_dict", "[", "'cls_preds_normalized'", "]", ":", "\n", "                    ", "cls_preds", "=", "[", "torch", ".", "sigmoid", "(", "x", ")", "for", "x", "in", "cls_preds", "]", "\n", "\n", "", "", "if", "post_process_cfg", ".", "NMS_CONFIG", ".", "MULTI_CLASSES_NMS", ":", "\n", "                ", "if", "not", "isinstance", "(", "cls_preds", ",", "list", ")", ":", "\n", "                    ", "cls_preds", "=", "[", "cls_preds", "]", "\n", "multihead_label_mapping", "=", "[", "torch", ".", "arange", "(", "1", ",", "self", ".", "num_class", ",", "device", "=", "cls_preds", "[", "0", "]", ".", "device", ")", "]", "\n", "", "else", ":", "\n", "                    ", "multihead_label_mapping", "=", "batch_dict", "[", "'multihead_label_mapping'", "]", "\n", "\n", "", "cur_start_idx", "=", "0", "\n", "pred_scores", ",", "pred_labels", ",", "pred_boxes", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "cur_cls_preds", ",", "cur_label_mapping", "in", "zip", "(", "cls_preds", ",", "multihead_label_mapping", ")", ":", "\n", "                    ", "assert", "cur_cls_preds", ".", "shape", "[", "1", "]", "==", "len", "(", "cur_label_mapping", ")", "\n", "cur_box_preds", "=", "box_preds", "[", "cur_start_idx", ":", "cur_start_idx", "+", "cur_cls_preds", ".", "shape", "[", "0", "]", "]", "\n", "cur_pred_scores", ",", "cur_pred_labels", ",", "cur_pred_boxes", "=", "model_nms_utils", ".", "multi_classes_nms", "(", "\n", "cls_scores", "=", "cur_cls_preds", ",", "box_preds", "=", "cur_box_preds", ",", "\n", "nms_config", "=", "post_process_cfg", ".", "NMS_CONFIG", ",", "\n", "score_thresh", "=", "post_process_cfg", ".", "SCORE_THRESH", "\n", ")", "\n", "cur_pred_labels", "=", "cur_label_mapping", "[", "cur_pred_labels", "]", "\n", "pred_scores", ".", "append", "(", "cur_pred_scores", ")", "\n", "pred_labels", ".", "append", "(", "cur_pred_labels", ")", "\n", "pred_boxes", ".", "append", "(", "cur_pred_boxes", ")", "\n", "cur_start_idx", "+=", "cur_cls_preds", ".", "shape", "[", "0", "]", "\n", "\n", "", "final_scores", "=", "torch", ".", "cat", "(", "pred_scores", ",", "dim", "=", "0", ")", "\n", "final_labels", "=", "torch", ".", "cat", "(", "pred_labels", ",", "dim", "=", "0", ")", "\n", "final_boxes", "=", "torch", ".", "cat", "(", "pred_boxes", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cls_preds", ",", "label_preds", "=", "torch", ".", "max", "(", "cls_preds", ",", "dim", "=", "-", "1", ")", "\n", "if", "batch_dict", ".", "get", "(", "'has_class_labels'", ",", "False", ")", ":", "\n", "                    ", "label_key", "=", "'roi_labels'", "if", "'roi_labels'", "in", "batch_dict", "else", "'batch_pred_labels'", "\n", "label_preds", "=", "batch_dict", "[", "label_key", "]", "[", "index", "]", "\n", "", "else", ":", "\n", "                    ", "label_preds", "=", "label_preds", "+", "1", "\n", "", "selected", ",", "selected_scores", "=", "model_nms_utils", ".", "class_agnostic_nms", "(", "\n", "box_scores", "=", "cls_preds", ",", "box_preds", "=", "box_preds", ",", "\n", "nms_config", "=", "post_process_cfg", ".", "NMS_CONFIG", ",", "\n", "score_thresh", "=", "post_process_cfg", ".", "SCORE_THRESH", "\n", ")", "\n", "\n", "if", "post_process_cfg", ".", "OUTPUT_RAW_SCORE", ":", "\n", "                    ", "max_cls_preds", ",", "_", "=", "torch", ".", "max", "(", "src_cls_preds", ",", "dim", "=", "-", "1", ")", "\n", "selected_scores", "=", "max_cls_preds", "[", "selected", "]", "\n", "\n", "", "final_scores", "=", "selected_scores", "\n", "final_labels", "=", "label_preds", "[", "selected", "]", "\n", "final_boxes", "=", "box_preds", "[", "selected", "]", "\n", "\n", "", "recall_dict", "=", "self", ".", "generate_recall_record", "(", "\n", "box_preds", "=", "final_boxes", "if", "'rois'", "not", "in", "batch_dict", "else", "src_box_preds", ",", "\n", "recall_dict", "=", "recall_dict", ",", "batch_index", "=", "index", ",", "data_dict", "=", "batch_dict", ",", "\n", "thresh_list", "=", "post_process_cfg", ".", "RECALL_THRESH_LIST", "\n", ")", "\n", "\n", "record_dict", "=", "{", "\n", "'pred_boxes'", ":", "final_boxes", ",", "\n", "'pred_scores'", ":", "final_scores", ",", "\n", "'pred_labels'", ":", "final_labels", "\n", "}", "\n", "pred_dicts", ".", "append", "(", "record_dict", ")", "\n", "\n", "", "return", "pred_dicts", ",", "recall_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.generate_recall_record": [[286, 329], ["recall_dict.__len__", "cur_gt.__len__", "box_preds.new_zeros", "cur_gt[].sum", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "str", "str", "str", "str", "str", "torch.zeros.max", "torch.zeros.max", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu.max"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "@", "staticmethod", "\n", "def", "generate_recall_record", "(", "box_preds", ",", "recall_dict", ",", "batch_index", ",", "data_dict", "=", "None", ",", "thresh_list", "=", "None", ")", ":", "\n", "        ", "if", "'gt_boxes'", "not", "in", "data_dict", ":", "\n", "            ", "return", "recall_dict", "\n", "\n", "", "rois", "=", "data_dict", "[", "'rois'", "]", "[", "batch_index", "]", "if", "'rois'", "in", "data_dict", "else", "None", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "batch_index", "]", "\n", "\n", "if", "recall_dict", ".", "__len__", "(", ")", "==", "0", ":", "\n", "            ", "recall_dict", "=", "{", "'gt'", ":", "0", "}", "\n", "for", "cur_thresh", "in", "thresh_list", ":", "\n", "                ", "recall_dict", "[", "'roi_%s'", "%", "(", "str", "(", "cur_thresh", ")", ")", "]", "=", "0", "\n", "recall_dict", "[", "'rcnn_%s'", "%", "(", "str", "(", "cur_thresh", ")", ")", "]", "=", "0", "\n", "\n", "", "", "cur_gt", "=", "gt_boxes", "\n", "k", "=", "cur_gt", ".", "__len__", "(", ")", "-", "1", "\n", "while", "k", ">", "0", "and", "cur_gt", "[", "k", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "k", "-=", "1", "\n", "", "cur_gt", "=", "cur_gt", "[", ":", "k", "+", "1", "]", "\n", "\n", "if", "cur_gt", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "if", "box_preds", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "iou3d_rcnn", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "box_preds", "[", ":", ",", "0", ":", "7", "]", ",", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "", "else", ":", "\n", "                ", "iou3d_rcnn", "=", "torch", ".", "zeros", "(", "(", "0", ",", "cur_gt", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "if", "rois", "is", "not", "None", ":", "\n", "                ", "iou3d_roi", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "rois", "[", ":", ",", "0", ":", "7", "]", ",", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "\n", "", "for", "cur_thresh", "in", "thresh_list", ":", "\n", "                ", "if", "iou3d_rcnn", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "recall_dict", "[", "'rcnn_%s'", "%", "str", "(", "cur_thresh", ")", "]", "+=", "0", "\n", "", "else", ":", "\n", "                    ", "rcnn_recalled", "=", "(", "iou3d_rcnn", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ">", "cur_thresh", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "recall_dict", "[", "'rcnn_%s'", "%", "str", "(", "cur_thresh", ")", "]", "+=", "rcnn_recalled", "\n", "", "if", "rois", "is", "not", "None", ":", "\n", "                    ", "roi_recalled", "=", "(", "iou3d_roi", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ">", "cur_thresh", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "recall_dict", "[", "'roi_%s'", "%", "str", "(", "cur_thresh", ")", "]", "+=", "roi_recalled", "\n", "\n", "", "", "recall_dict", "[", "'gt'", "]", "+=", "cur_gt", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "gt_iou", "=", "box_preds", ".", "new_zeros", "(", "box_preds", ".", "shape", "[", "0", "]", ")", "\n", "", "return", "recall_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate._load_state_dict": [[330, 360], ["detector3d_template.Detector3DTemplate.state_dict", "utils.spconv_utils.find_all_spconv_keys", "model_state_disk.items", "detector3d_template.Detector3DTemplate.load_state_dict", "detector3d_template.Detector3DTemplate.update", "detector3d_template.Detector3DTemplate.load_state_dict", "val.permute.contiguous.transpose", "val_implicit.contiguous.transpose.contiguous", "val.permute.contiguous.permute", "val.permute.contiguous.shape.__len__", "val_implicit.contiguous.permute.contiguous"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.spconv_utils.find_all_spconv_keys", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["", "def", "_load_state_dict", "(", "self", ",", "model_state_disk", ",", "*", ",", "strict", "=", "True", ")", ":", "\n", "        ", "state_dict", "=", "self", ".", "state_dict", "(", ")", "# local cache of state_dict", "\n", "\n", "spconv_keys", "=", "find_all_spconv_keys", "(", "self", ")", "\n", "\n", "update_model_state", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "model_state_disk", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "spconv_keys", "and", "key", "in", "state_dict", "and", "state_dict", "[", "key", "]", ".", "shape", "!=", "val", ".", "shape", ":", "\n", "# with different spconv versions, we need to adapt weight shapes for spconv blocks", "\n", "# adapt spconv weights from version 1.x to version 2.x if you used weights from spconv 1.x", "\n", "\n", "                ", "val_native", "=", "val", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "# (k1, k2, k3, c_in, c_out) to (k1, k2, k3, c_out, c_in)", "\n", "if", "val_native", ".", "shape", "==", "state_dict", "[", "key", "]", ".", "shape", ":", "\n", "                    ", "val", "=", "val_native", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "val", ".", "shape", ".", "__len__", "(", ")", "==", "5", ",", "'currently only spconv 3D is supported'", "\n", "val_implicit", "=", "val", ".", "permute", "(", "4", ",", "0", ",", "1", ",", "2", ",", "3", ")", "# (k1, k2, k3, c_in, c_out) to (c_out, k1, k2, k3, c_in)", "\n", "if", "val_implicit", ".", "shape", "==", "state_dict", "[", "key", "]", ".", "shape", ":", "\n", "                        ", "val", "=", "val_implicit", ".", "contiguous", "(", ")", "\n", "\n", "", "", "", "if", "key", "in", "state_dict", "and", "state_dict", "[", "key", "]", ".", "shape", "==", "val", ".", "shape", ":", "\n", "                ", "update_model_state", "[", "key", "]", "=", "val", "\n", "# logger.info('Update weight %s: %s' % (key, str(val.shape)))", "\n", "\n", "", "", "if", "strict", ":", "\n", "            ", "self", ".", "load_state_dict", "(", "update_model_state", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", ".", "update", "(", "update_model_state", ")", "\n", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "state_dict", ",", "update_model_state", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.load_params_from_file": [[361, 381], ["logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.get", "torch.load.get", "detector3d_template.Detector3DTemplate._load_state_dict", "logger.info", "os.path.isfile", "torch.device", "torch.device", "torch.device", "torch.device", "logger.info", "logger.info", "len", "len", "str"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate._load_state_dict"], ["", "def", "load_params_from_file", "(", "self", ",", "filename", ",", "logger", ",", "to_cpu", "=", "False", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "\n", "\n", "", "logger", ".", "info", "(", "'==> Loading parameters from checkpoint %s to %s'", "%", "(", "filename", ",", "'CPU'", "if", "to_cpu", "else", "'GPU'", ")", ")", "\n", "loc_type", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "to_cpu", "else", "None", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "loc_type", ")", "\n", "model_state_disk", "=", "checkpoint", "[", "'model_state'", "]", "\n", "\n", "version", "=", "checkpoint", ".", "get", "(", "\"version\"", ",", "None", ")", "\n", "if", "version", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'==> Checkpoint trained from version: %s'", "%", "version", ")", "\n", "\n", "", "state_dict", ",", "update_model_state", "=", "self", ".", "_load_state_dict", "(", "model_state_disk", ",", "strict", "=", "False", ")", "\n", "\n", "for", "key", "in", "state_dict", ":", "\n", "            ", "if", "key", "not", "in", "update_model_state", ":", "\n", "                ", "logger", ".", "info", "(", "'Not updated weight %s: %s'", "%", "(", "key", ",", "str", "(", "state_dict", "[", "key", "]", ".", "shape", ")", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'==> Done (loaded %d/%d)'", "%", "(", "len", "(", "update_model_state", ")", ",", "len", "(", "state_dict", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.load_params_with_optimizer": [[382, 412], ["logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.get", "torch.load.get", "torch.load.get", "torch.load.get", "detector3d_template.Detector3DTemplate._load_state_dict", "logger.info", "os.path.isfile", "torch.device", "torch.device", "torch.device", "torch.device", "print", "logger.info", "optimizer.load_state_dict", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate._load_state_dict"], ["", "def", "load_params_with_optimizer", "(", "self", ",", "filename", ",", "to_cpu", "=", "False", ",", "optimizer", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "\n", "\n", "", "logger", ".", "info", "(", "'==> Loading parameters from checkpoint %s to %s'", "%", "(", "filename", ",", "'CPU'", "if", "to_cpu", "else", "'GPU'", ")", ")", "\n", "loc_type", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "to_cpu", "else", "None", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "loc_type", ")", "\n", "epoch", "=", "checkpoint", ".", "get", "(", "'epoch'", ",", "-", "1", ")", "\n", "it", "=", "checkpoint", ".", "get", "(", "'it'", ",", "0.0", ")", "\n", "\n", "self", ".", "_load_state_dict", "(", "checkpoint", "[", "'model_state'", "]", ",", "strict", "=", "True", ")", "\n", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "if", "'optimizer_state'", "in", "checkpoint", "and", "checkpoint", "[", "'optimizer_state'", "]", "is", "not", "None", ":", "\n", "                ", "logger", ".", "info", "(", "'==> Loading optimizer parameters from checkpoint %s to %s'", "\n", "%", "(", "filename", ",", "'CPU'", "if", "to_cpu", "else", "'GPU'", ")", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state'", "]", ")", "\n", "", "else", ":", "\n", "                ", "assert", "filename", "[", "-", "4", "]", "==", "'.'", ",", "filename", "\n", "src_file", ",", "ext", "=", "filename", "[", ":", "-", "4", "]", ",", "filename", "[", "-", "3", ":", "]", "\n", "optimizer_filename", "=", "'%s_optim.%s'", "%", "(", "src_file", ",", "ext", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "optimizer_filename", ")", ":", "\n", "                    ", "optimizer_ckpt", "=", "torch", ".", "load", "(", "optimizer_filename", ",", "map_location", "=", "loc_type", ")", "\n", "optimizer", ".", "load_state_dict", "(", "optimizer_ckpt", "[", "'optimizer_state'", "]", ")", "\n", "\n", "", "", "", "if", "'version'", "in", "checkpoint", ":", "\n", "            ", "print", "(", "'==> Checkpoint trained from version: %s'", "%", "checkpoint", "[", "'version'", "]", ")", "\n", "", "logger", ".", "info", "(", "'==> Done'", ")", "\n", "\n", "return", "it", ",", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.pointpillar.PointPillar.__init__": [[5, 8], ["detector3d_template.Detector3DTemplate.__init__", "pointpillar.PointPillar.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.pointpillar.PointPillar.forward": [[9, 23], ["cur_module", "pointpillar.PointPillar.get_training_loss", "pointpillar.PointPillar.post_processing"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "for", "cur_module", "in", "self", ".", "module_list", ":", "\n", "            ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.pointpillar.PointPillar.get_training_loss": [[24, 35], ["pointpillar.PointPillar.dense_head.get_loss", "loss_rpn.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "\n", "loss_rpn", ",", "tb_dict", "=", "self", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "tb_dict", "=", "{", "\n", "'loss_rpn'", ":", "loss_rpn", ".", "item", "(", ")", ",", "\n", "**", "tb_dict", "\n", "}", "\n", "\n", "loss", "=", "loss_rpn", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.caddn.CaDDN.__init__": [[5, 8], ["detector3d_template.Detector3DTemplate.__init__", "caddn.CaDDN.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.caddn.CaDDN.forward": [[9, 23], ["cur_module", "caddn.CaDDN.get_training_loss", "caddn.CaDDN.post_processing"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "for", "cur_module", "in", "self", ".", "module_list", ":", "\n", "            ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.caddn.CaDDN.get_training_loss": [[24, 39], ["caddn.CaDDN.dense_head.get_loss", "caddn.CaDDN.vfe.get_loss", "loss_rpn.item", "loss_depth.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "\n", "loss_rpn", ",", "tb_dict_rpn", "=", "self", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "loss_depth", ",", "tb_dict_depth", "=", "self", ".", "vfe", ".", "get_loss", "(", ")", "\n", "\n", "tb_dict", "=", "{", "\n", "'loss_rpn'", ":", "loss_rpn", ".", "item", "(", ")", ",", "\n", "'loss_depth'", ":", "loss_depth", ".", "item", "(", ")", ",", "\n", "**", "tb_dict_rpn", ",", "\n", "**", "tb_dict_depth", "\n", "}", "\n", "\n", "loss", "=", "loss_rpn", "+", "loss_depth", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.pv_rcnn.PVRCNN.__init__": [[5, 8], ["detector3d_template.Detector3DTemplate.__init__", "pv_rcnn.PVRCNN.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.pv_rcnn.PVRCNN.forward": [[9, 23], ["cur_module", "pv_rcnn.PVRCNN.get_training_loss", "pv_rcnn.PVRCNN.post_processing"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "for", "cur_module", "in", "self", ".", "module_list", ":", "\n", "            ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.pv_rcnn.PVRCNN.get_training_loss": [[24, 32], ["pv_rcnn.PVRCNN.dense_head.get_loss", "pv_rcnn.PVRCNN.point_head.get_loss", "pv_rcnn.PVRCNN.roi_head.get_loss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "loss_rpn", ",", "tb_dict", "=", "self", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "loss_point", ",", "tb_dict", "=", "self", ".", "point_head", ".", "get_loss", "(", "tb_dict", ")", "\n", "loss_rcnn", ",", "tb_dict", "=", "self", ".", "roi_head", ".", "get_loss", "(", "tb_dict", ")", "\n", "\n", "loss", "=", "loss_rpn", "+", "loss_point", "+", "loss_rcnn", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.point_rcnn.PointRCNN.__init__": [[5, 8], ["detector3d_template.Detector3DTemplate.__init__", "point_rcnn.PointRCNN.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.point_rcnn.PointRCNN.forward": [[9, 23], ["cur_module", "point_rcnn.PointRCNN.get_training_loss", "point_rcnn.PointRCNN.post_processing"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "for", "cur_module", "in", "self", ".", "module_list", ":", "\n", "            ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.point_rcnn.PointRCNN.get_training_loss": [[24, 31], ["point_rcnn.PointRCNN.point_head.get_loss", "point_rcnn.PointRCNN.roi_head.get_loss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "loss_point", ",", "tb_dict", "=", "self", ".", "point_head", ".", "get_loss", "(", ")", "\n", "loss_rcnn", ",", "tb_dict", "=", "self", ".", "roi_head", ".", "get_loss", "(", "tb_dict", ")", "\n", "\n", "loss", "=", "loss_point", "+", "loss_rcnn", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.PartA2_net.PartA2Net.__init__": [[5, 8], ["detector3d_template.Detector3DTemplate.__init__", "PartA2_net.PartA2Net.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.PartA2_net.PartA2Net.forward": [[9, 23], ["cur_module", "PartA2_net.PartA2Net.get_training_loss", "PartA2_net.PartA2Net.post_processing"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "for", "cur_module", "in", "self", ".", "module_list", ":", "\n", "            ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.PartA2_net.PartA2Net.get_training_loss": [[24, 32], ["PartA2_net.PartA2Net.dense_head.get_loss", "PartA2_net.PartA2Net.point_head.get_loss", "PartA2_net.PartA2Net.roi_head.get_loss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "loss_rpn", ",", "tb_dict", "=", "self", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "loss_point", ",", "tb_dict", "=", "self", ".", "point_head", ".", "get_loss", "(", "tb_dict", ")", "\n", "loss_rcnn", ",", "tb_dict", "=", "self", ".", "roi_head", ".", "get_loss", "(", "tb_dict", ")", "\n", "\n", "loss", "=", "loss_rpn", "+", "loss_point", "+", "loss_rcnn", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net_iou.SECONDNetIoU.__init__": [[8, 11], ["detector3d_template.Detector3DTemplate.__init__", "second_net_iou.SECONDNetIoU.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net_iou.SECONDNetIoU.forward": [[12, 27], ["cur_module", "second_net_iou.SECONDNetIoU.get_training_loss", "second_net_iou.SECONDNetIoU.post_processing"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "batch_dict", "[", "'dataset_cfg'", "]", "=", "self", ".", "dataset", ".", "dataset_cfg", "\n", "for", "cur_module", "in", "self", ".", "module_list", ":", "\n", "            ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net_iou.SECONDNetIoU.get_training_loss": [[28, 36], ["second_net_iou.SECONDNetIoU.dense_head.get_loss", "second_net_iou.SECONDNetIoU.roi_head.get_loss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "\n", "loss_rpn", ",", "tb_dict", "=", "self", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "loss_rcnn", ",", "tb_dict", "=", "self", ".", "roi_head", ".", "get_loss", "(", "tb_dict", ")", "\n", "\n", "loss", "=", "loss_rpn", "+", "loss_rcnn", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net_iou.SECONDNetIoU.cal_scores_by_npoints": [[37, 58], ["torch.zeros().cuda", "torch.zeros"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cal_scores_by_npoints", "(", "cls_scores", ",", "iou_scores", ",", "num_points_in_gt", ",", "cls_thresh", "=", "10", ",", "iou_thresh", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            cls_scores: (N)\n            iou_scores: (N)\n            num_points_in_gt: (N, 7+c)\n            cls_thresh: scalar\n            iou_thresh: scalar\n        \"\"\"", "\n", "assert", "iou_thresh", ">=", "cls_thresh", "\n", "alpha", "=", "torch", ".", "zeros", "(", "cls_scores", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "alpha", "[", "num_points_in_gt", "<=", "cls_thresh", "]", "=", "0", "\n", "alpha", "[", "num_points_in_gt", ">=", "iou_thresh", "]", "=", "1", "\n", "\n", "mask", "=", "(", "(", "num_points_in_gt", ">", "cls_thresh", ")", "&", "(", "num_points_in_gt", "<", "iou_thresh", ")", ")", "\n", "alpha", "[", "mask", "]", "=", "(", "num_points_in_gt", "[", "mask", "]", "-", "10", ")", "/", "(", "iou_thresh", "-", "cls_thresh", ")", "\n", "\n", "scores", "=", "(", "1", "-", "alpha", ")", "*", "cls_scores", "+", "alpha", "*", "iou_scores", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net_iou.SECONDNetIoU.set_nms_score_by_class": [[59, 74], ["torch.zeros().cuda", "range", "torch.unique", "torch.zeros"], "methods", ["None"], ["", "def", "set_nms_score_by_class", "(", "self", ",", "iou_preds", ",", "cls_preds", ",", "label_preds", ",", "score_by_class", ")", ":", "\n", "        ", "n_classes", "=", "torch", ".", "unique", "(", "label_preds", ")", ".", "shape", "[", "0", "]", "\n", "nms_scores", "=", "torch", ".", "zeros", "(", "iou_preds", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "mask", "=", "label_preds", "==", "(", "i", "+", "1", ")", "\n", "class_name", "=", "self", ".", "class_names", "[", "i", "]", "\n", "score_type", "=", "score_by_class", "[", "class_name", "]", "\n", "if", "score_type", "==", "'iou'", ":", "\n", "                ", "nms_scores", "[", "mask", "]", "=", "iou_preds", "[", "mask", "]", "\n", "", "elif", "score_type", "==", "'cls'", ":", "\n", "                ", "nms_scores", "[", "mask", "]", "=", "cls_preds", "[", "mask", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "nms_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net_iou.SECONDNetIoU.post_processing": [[75, 178], ["range", "second_net_iou.SECONDNetIoU.generate_recall_record", "pred_dicts.append", "batch_dict.get", "torch.sigmoid", "torch.sigmoid", "torch.max", "model_utils.model_nms_utils.class_agnostic_nms", "batch_dict[].shape.__len__", "batch_dict[].shape.__len__", "batch_dict.get", "post_process_cfg.NMS_CONFIG.get", "second_net_iou.SECONDNetIoU.set_nms_score_by_class", "post_process_cfg.NMS_CONFIG.get", "post_process_cfg.NMS_CONFIG.get", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu().sum().float().cuda", "second_net_iou.SECONDNetIoU.cal_scores_by_npoints", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu().sum().float", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu().sum", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu", "batch_points.cpu", "box_preds[].cpu"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.generate_recall_record", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.model_nms_utils.class_agnostic_nms", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net_iou.SECONDNetIoU.set_nms_score_by_class", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.second_net_iou.SECONDNetIoU.cal_scores_by_npoints", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["", "def", "post_processing", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                batch_cls_preds: (B, num_boxes, num_classes | 1) or (N1+N2+..., num_classes | 1)\n                batch_box_preds: (B, num_boxes, 7+C) or (N1+N2+..., 7+C)\n                cls_preds_normalized: indicate whether batch_cls_preds is normalized\n                batch_index: optional (N1+N2+...)\n                roi_labels: (B, num_rois)  1 .. num_classes\n        Returns:\n\n        \"\"\"", "\n", "post_process_cfg", "=", "self", ".", "model_cfg", ".", "POST_PROCESSING", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "recall_dict", "=", "{", "}", "\n", "pred_dicts", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "batch_dict", ".", "get", "(", "'batch_index'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "assert", "batch_dict", "[", "'batch_cls_preds'", "]", ".", "shape", ".", "__len__", "(", ")", "==", "2", "\n", "batch_mask", "=", "(", "batch_dict", "[", "'batch_index'", "]", "==", "index", ")", "\n", "", "else", ":", "\n", "                ", "assert", "batch_dict", "[", "'batch_cls_preds'", "]", ".", "shape", ".", "__len__", "(", ")", "==", "3", "\n", "batch_mask", "=", "index", "\n", "\n", "", "box_preds", "=", "batch_dict", "[", "'batch_box_preds'", "]", "[", "batch_mask", "]", "\n", "iou_preds", "=", "batch_dict", "[", "'batch_cls_preds'", "]", "[", "batch_mask", "]", "\n", "cls_preds", "=", "batch_dict", "[", "'roi_scores'", "]", "[", "batch_mask", "]", "\n", "\n", "src_iou_preds", "=", "iou_preds", "\n", "src_box_preds", "=", "box_preds", "\n", "src_cls_preds", "=", "cls_preds", "\n", "assert", "iou_preds", ".", "shape", "[", "1", "]", "in", "[", "1", ",", "self", ".", "num_class", "]", "\n", "\n", "if", "not", "batch_dict", "[", "'cls_preds_normalized'", "]", ":", "\n", "                ", "iou_preds", "=", "torch", ".", "sigmoid", "(", "iou_preds", ")", "\n", "cls_preds", "=", "torch", ".", "sigmoid", "(", "cls_preds", ")", "\n", "\n", "", "if", "post_process_cfg", ".", "NMS_CONFIG", ".", "MULTI_CLASSES_NMS", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "iou_preds", ",", "label_preds", "=", "torch", ".", "max", "(", "iou_preds", ",", "dim", "=", "-", "1", ")", "\n", "label_preds", "=", "batch_dict", "[", "'roi_labels'", "]", "[", "index", "]", "if", "batch_dict", ".", "get", "(", "'has_class_labels'", ",", "False", ")", "else", "label_preds", "+", "1", "\n", "\n", "if", "post_process_cfg", ".", "NMS_CONFIG", ".", "get", "(", "'SCORE_BY_CLASS'", ",", "None", ")", "and", "post_process_cfg", ".", "NMS_CONFIG", ".", "SCORE_TYPE", "==", "'score_by_class'", ":", "\n", "                    ", "nms_scores", "=", "self", ".", "set_nms_score_by_class", "(", "\n", "iou_preds", ",", "cls_preds", ",", "label_preds", ",", "post_process_cfg", ".", "NMS_CONFIG", ".", "SCORE_BY_CLASS", "\n", ")", "\n", "", "elif", "post_process_cfg", ".", "NMS_CONFIG", ".", "get", "(", "'SCORE_TYPE'", ",", "None", ")", "==", "'iou'", "or", "post_process_cfg", ".", "NMS_CONFIG", ".", "get", "(", "'SCORE_TYPE'", ",", "None", ")", "is", "None", ":", "\n", "                    ", "nms_scores", "=", "iou_preds", "\n", "", "elif", "post_process_cfg", ".", "NMS_CONFIG", ".", "SCORE_TYPE", "==", "'cls'", ":", "\n", "                    ", "nms_scores", "=", "cls_preds", "\n", "", "elif", "post_process_cfg", ".", "NMS_CONFIG", ".", "SCORE_TYPE", "==", "'weighted_iou_cls'", ":", "\n", "                    ", "nms_scores", "=", "post_process_cfg", ".", "NMS_CONFIG", ".", "SCORE_WEIGHTS", ".", "iou", "*", "iou_preds", "+", "post_process_cfg", ".", "NMS_CONFIG", ".", "SCORE_WEIGHTS", ".", "cls", "*", "cls_preds", "\n", "", "elif", "post_process_cfg", ".", "NMS_CONFIG", ".", "SCORE_TYPE", "==", "'num_pts_iou_cls'", ":", "\n", "                    ", "point_mask", "=", "(", "batch_dict", "[", "'points'", "]", "[", ":", ",", "0", "]", "==", "batch_mask", ")", "\n", "batch_points", "=", "batch_dict", "[", "'points'", "]", "[", "point_mask", "]", "[", ":", ",", "1", ":", "4", "]", "\n", "\n", "num_pts_in_gt", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_cpu", "(", "\n", "batch_points", ".", "cpu", "(", ")", ",", "box_preds", "[", ":", ",", "0", ":", "7", "]", ".", "cpu", "(", ")", "\n", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "score_thresh_cfg", "=", "post_process_cfg", ".", "NMS_CONFIG", ".", "SCORE_THRESH", "\n", "nms_scores", "=", "self", ".", "cal_scores_by_npoints", "(", "\n", "cls_preds", ",", "iou_preds", ",", "num_pts_in_gt", ",", "\n", "score_thresh_cfg", ".", "cls", ",", "score_thresh_cfg", ".", "iou", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "selected", ",", "selected_scores", "=", "class_agnostic_nms", "(", "\n", "box_scores", "=", "nms_scores", ",", "box_preds", "=", "box_preds", ",", "\n", "nms_config", "=", "post_process_cfg", ".", "NMS_CONFIG", ",", "\n", "score_thresh", "=", "post_process_cfg", ".", "SCORE_THRESH", "\n", ")", "\n", "\n", "if", "post_process_cfg", ".", "OUTPUT_RAW_SCORE", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "final_scores", "=", "selected_scores", "\n", "final_labels", "=", "label_preds", "[", "selected", "]", "\n", "final_boxes", "=", "box_preds", "[", "selected", "]", "\n", "\n", "", "recall_dict", "=", "self", ".", "generate_recall_record", "(", "\n", "box_preds", "=", "final_boxes", "if", "'rois'", "not", "in", "batch_dict", "else", "src_box_preds", ",", "\n", "recall_dict", "=", "recall_dict", ",", "batch_index", "=", "index", ",", "data_dict", "=", "batch_dict", ",", "\n", "thresh_list", "=", "post_process_cfg", ".", "RECALL_THRESH_LIST", "\n", ")", "\n", "\n", "record_dict", "=", "{", "\n", "'pred_boxes'", ":", "final_boxes", ",", "\n", "'pred_scores'", ":", "final_scores", ",", "\n", "'pred_labels'", ":", "final_labels", ",", "\n", "'pred_cls_scores'", ":", "cls_preds", "[", "selected", "]", ",", "\n", "'pred_iou_scores'", ":", "iou_preds", "[", "selected", "]", "\n", "}", "\n", "\n", "pred_dicts", ".", "append", "(", "record_dict", ")", "\n", "\n", "", "return", "pred_dicts", ",", "recall_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.voxel_rcnn.VoxelRCNN.__init__": [[5, 8], ["detector3d_template.Detector3DTemplate.__init__", "voxel_rcnn.VoxelRCNN.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.voxel_rcnn.VoxelRCNN.forward": [[9, 23], ["cur_module", "voxel_rcnn.VoxelRCNN.get_training_loss", "voxel_rcnn.VoxelRCNN.post_processing"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "for", "cur_module", "in", "self", ".", "module_list", ":", "\n", "            ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.voxel_rcnn.VoxelRCNN.get_training_loss": [[24, 33], ["voxel_rcnn.VoxelRCNN.dense_head.get_loss", "voxel_rcnn.VoxelRCNN.roi_head.get_loss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "loss", "=", "0", "\n", "\n", "loss_rpn", ",", "tb_dict", "=", "self", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "loss_rcnn", ",", "tb_dict", "=", "self", ".", "roi_head", ".", "get_loss", "(", "tb_dict", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_rpn", "+", "loss_rcnn", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.__init__.build_detector": [[28, 34], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.__init__": [[5, 8], ["detector3d_template.Detector3DTemplate.__init__", "centerpoint.CenterPoint.build_networks"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ")", "\n", "self", ".", "module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.forward": [[9, 23], ["cur_module", "centerpoint.CenterPoint.get_training_loss", "centerpoint.CenterPoint.post_processing"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss", "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "for", "cur_module", "in", "self", ".", "module_list", ":", "\n", "            ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", "\n", "", "else", ":", "\n", "            ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "return", "pred_dicts", ",", "recall_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.get_training_loss": [[24, 35], ["centerpoint.CenterPoint.dense_head.get_loss", "loss_rpn.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss"], ["", "", "def", "get_training_loss", "(", "self", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "\n", "loss_rpn", ",", "tb_dict", "=", "self", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "tb_dict", "=", "{", "\n", "'loss_rpn'", ":", "loss_rpn", ".", "item", "(", ")", ",", "\n", "**", "tb_dict", "\n", "}", "\n", "\n", "loss", "=", "loss_rpn", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.detectors.centerpoint.CenterPoint.post_processing": [[36, 51], ["range", "centerpoint.CenterPoint.generate_recall_record"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.detectors.detector3d_template.Detector3DTemplate.generate_recall_record"], ["", "def", "post_processing", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "post_process_cfg", "=", "self", ".", "model_cfg", ".", "POST_PROCESSING", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "final_pred_dict", "=", "batch_dict", "[", "'final_box_dicts'", "]", "\n", "recall_dict", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "pred_boxes", "=", "final_pred_dict", "[", "index", "]", "[", "'pred_boxes'", "]", "\n", "\n", "recall_dict", "=", "self", ".", "generate_recall_record", "(", "\n", "box_preds", "=", "pred_boxes", ",", "\n", "recall_dict", "=", "recall_dict", ",", "batch_index", "=", "index", ",", "data_dict", "=", "batch_dict", ",", "\n", "thresh_list", "=", "post_process_cfg", ".", "RECALL_THRESH_LIST", "\n", ")", "\n", "\n", "", "return", "final_pred_dict", ",", "recall_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pvrcnn_head.PVRCNNHead.__init__": [[9, 43], ["roi_head_template.RoIHeadTemplate.__init__", "ops.pointnet2.pointnet2_stack.pointnet2_modules.build_local_aggregation_module", "range", "torch.Sequential", "pvrcnn_head.PVRCNNHead.make_fc_layers", "pvrcnn_head.PVRCNNHead.make_fc_layers", "pvrcnn_head.PVRCNNHead.init_weights", "pvrcnn_head.PVRCNNHead.model_cfg.SHARED_FC.__len__", "shared_fc_list.extend", "shared_fc_list.append", "torch.Conv1d", "torch.BatchNorm1d", "torch.ReLU", "torch.Dropout", "pvrcnn_head.PVRCNNHead.model_cfg.SHARED_FC.__len__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.pointnet2_stack.pointnet2_modules.build_local_aggregation_module", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "model_cfg", ",", "num_class", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_class", "=", "num_class", ",", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "\n", "self", ".", "roi_grid_pool_layer", ",", "num_c_out", "=", "pointnet2_stack_modules", ".", "build_local_aggregation_module", "(", "\n", "input_channels", "=", "input_channels", ",", "config", "=", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", "\n", ")", "\n", "\n", "GRID_SIZE", "=", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", ".", "GRID_SIZE", "\n", "pre_channel", "=", "GRID_SIZE", "*", "GRID_SIZE", "*", "GRID_SIZE", "*", "num_c_out", "\n", "\n", "shared_fc_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "shared_fc_list", ".", "extend", "(", "[", "\n", "nn", ".", "Conv1d", "(", "pre_channel", ",", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", "\n", "\n", "if", "k", "!=", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", "-", "1", "and", "self", ".", "model_cfg", ".", "DP_RATIO", ">", "0", ":", "\n", "                ", "shared_fc_list", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "\n", "", "", "self", ".", "shared_fc_layer", "=", "nn", ".", "Sequential", "(", "*", "shared_fc_list", ")", "\n", "\n", "self", ".", "cls_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "pre_channel", ",", "output_channels", "=", "self", ".", "num_class", ",", "fc_list", "=", "self", ".", "model_cfg", ".", "CLS_FC", "\n", ")", "\n", "self", ".", "reg_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "pre_channel", ",", "\n", "output_channels", "=", "self", ".", "box_coder", ".", "code_size", "*", "self", ".", "num_class", ",", "\n", "fc_list", "=", "self", ".", "model_cfg", ".", "REG_FC", "\n", ")", "\n", "self", ".", "init_weights", "(", "weight_init", "=", "'xavier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pvrcnn_head.PVRCNNHead.init_weights": [[44, 63], ["pvrcnn_head.PVRCNNHead.modules", "torch.init.normal_", "isinstance", "isinstance", "init_func", "init_func", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "weight_init", "=", "'xavier'", ")", ":", "\n", "        ", "if", "weight_init", "==", "'kaiming'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "kaiming_normal_", "\n", "", "elif", "weight_init", "==", "'xavier'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "xavier_normal_", "\n", "", "elif", "weight_init", "==", "'normal'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "normal_", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "if", "weight_init", "==", "'normal'", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "", "else", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "reg_layers", "[", "-", "1", "]", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pvrcnn_head.PVRCNNHead.roi_grid_pool": [[64, 110], ["pvrcnn_head.PVRCNNHead.get_global_grid_points_of_roi", "global_roi_grid_points.view.view.view", "xyz.new_zeros().int", "range", "global_roi_grid_points.view.view.view", "xyz.new_zeros().int().fill_", "pvrcnn_head.PVRCNNHead.roi_grid_pool_layer", "pooled_features.view.view.view", "batch_dict[].view", "xyz.new_zeros", "xyz.new_zeros().int", "xyz.contiguous", "point_features.contiguous", "xyz.new_zeros"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.get_global_grid_points_of_roi"], ["", "def", "roi_grid_pool", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                point_coords: (num_points, 4)  [bs_idx, x, y, z]\n                point_features: (num_points, C)\n                point_cls_scores: (N1 + N2 + N3 + ..., 1)\n                point_part_offset: (N1 + N2 + N3 + ..., 3)\n        Returns:\n\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "rois", "=", "batch_dict", "[", "'rois'", "]", "\n", "point_coords", "=", "batch_dict", "[", "'point_coords'", "]", "\n", "point_features", "=", "batch_dict", "[", "'point_features'", "]", "\n", "\n", "point_features", "=", "point_features", "*", "batch_dict", "[", "'point_cls_scores'", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "global_roi_grid_points", ",", "local_roi_grid_points", "=", "self", ".", "get_global_grid_points_of_roi", "(", "\n", "rois", ",", "grid_size", "=", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", ".", "GRID_SIZE", "\n", ")", "# (BxN, 6x6x6, 3)", "\n", "global_roi_grid_points", "=", "global_roi_grid_points", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", "# (B, Nx6x6x6, 3)", "\n", "\n", "xyz", "=", "point_coords", "[", ":", ",", "1", ":", "4", "]", "\n", "xyz_batch_cnt", "=", "xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", "\n", "batch_idx", "=", "point_coords", "[", ":", ",", "0", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "xyz_batch_cnt", "[", "k", "]", "=", "(", "batch_idx", "==", "k", ")", ".", "sum", "(", ")", "\n", "\n", "", "new_xyz", "=", "global_roi_grid_points", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "new_xyz_batch_cnt", "=", "xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", ".", "fill_", "(", "global_roi_grid_points", ".", "shape", "[", "1", "]", ")", "\n", "pooled_points", ",", "pooled_features", "=", "self", ".", "roi_grid_pool_layer", "(", "\n", "xyz", "=", "xyz", ".", "contiguous", "(", ")", ",", "\n", "xyz_batch_cnt", "=", "xyz_batch_cnt", ",", "\n", "new_xyz", "=", "new_xyz", ",", "\n", "new_xyz_batch_cnt", "=", "new_xyz_batch_cnt", ",", "\n", "features", "=", "point_features", ".", "contiguous", "(", ")", ",", "\n", ")", "# (M1 + M2 ..., C)", "\n", "\n", "pooled_features", "=", "pooled_features", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", ".", "GRID_SIZE", "**", "3", ",", "\n", "pooled_features", ".", "shape", "[", "-", "1", "]", "\n", ")", "# (BxN, 6x6x6, C)", "\n", "return", "pooled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pvrcnn_head.PVRCNNHead.get_global_grid_points_of_roi": [[111, 122], ["rois.view.view.view", "pvrcnn_head.PVRCNNHead.get_dense_grid_points", "utils.common_utils.rotate_points_along_z().squeeze", "rois[].clone", "rois[].clone.unsqueeze", "utils.common_utils.rotate_points_along_z", "pvrcnn_head.PVRCNNHead.clone"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.get_dense_grid_points", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "get_global_grid_points_of_roi", "(", "self", ",", "rois", ",", "grid_size", ")", ":", "\n", "        ", "rois", "=", "rois", ".", "view", "(", "-", "1", ",", "rois", ".", "shape", "[", "-", "1", "]", ")", "\n", "batch_size_rcnn", "=", "rois", ".", "shape", "[", "0", "]", "\n", "\n", "local_roi_grid_points", "=", "self", ".", "get_dense_grid_points", "(", "rois", ",", "batch_size_rcnn", ",", "grid_size", ")", "# (B, 6x6x6, 3)", "\n", "global_roi_grid_points", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "local_roi_grid_points", ".", "clone", "(", ")", ",", "rois", "[", ":", ",", "6", "]", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "global_center", "=", "rois", "[", ":", ",", "0", ":", "3", "]", ".", "clone", "(", ")", "\n", "global_roi_grid_points", "+=", "global_center", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "return", "global_roi_grid_points", ",", "local_roi_grid_points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pvrcnn_head.PVRCNNHead.get_dense_grid_points": [[123, 133], ["rois.new_ones", "rois.new_ones.nonzero", "dense_idx.repeat().float.repeat().float.repeat().float", "rois.view", "dense_idx.repeat().float.repeat().float.repeat", "local_roi_size.unsqueeze", "local_roi_size.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_dense_grid_points", "(", "rois", ",", "batch_size_rcnn", ",", "grid_size", ")", ":", "\n", "        ", "faked_features", "=", "rois", ".", "new_ones", "(", "(", "grid_size", ",", "grid_size", ",", "grid_size", ")", ")", "\n", "dense_idx", "=", "faked_features", ".", "nonzero", "(", ")", "# (N, 3) [x_idx, y_idx, z_idx]", "\n", "dense_idx", "=", "dense_idx", ".", "repeat", "(", "batch_size_rcnn", ",", "1", ",", "1", ")", ".", "float", "(", ")", "# (B, 6x6x6, 3)", "\n", "\n", "local_roi_size", "=", "rois", ".", "view", "(", "batch_size_rcnn", ",", "-", "1", ")", "[", ":", ",", "3", ":", "6", "]", "\n", "roi_grid_points", "=", "(", "dense_idx", "+", "0.5", ")", "/", "grid_size", "*", "local_roi_size", ".", "unsqueeze", "(", "dim", "=", "1", ")", "-", "(", "local_roi_size", ".", "unsqueeze", "(", "dim", "=", "1", ")", "/", "2", ")", "# (B, 6x6x6, 3)", "\n", "return", "roi_grid_points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pvrcnn_head.PVRCNNHead.forward": [[134, 176], ["pvrcnn_head.PVRCNNHead.proposal_layer", "pvrcnn_head.PVRCNNHead.roi_grid_pool", "pooled_features.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "pvrcnn_head.PVRCNNHead.shared_fc_layer", "pvrcnn_head.PVRCNNHead.cls_layers().transpose().contiguous().squeeze", "pvrcnn_head.PVRCNNHead.reg_layers().transpose().contiguous().squeeze", "batch_dict.get", "pooled_features.permute().contiguous().view.permute().contiguous().view.view", "pvrcnn_head.PVRCNNHead.generate_predicted_boxes", "pvrcnn_head.PVRCNNHead.assign_targets", "pooled_features.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "pvrcnn_head.PVRCNNHead.cls_layers().transpose().contiguous", "pvrcnn_head.PVRCNNHead.reg_layers().transpose().contiguous", "pooled_features.permute().contiguous().view.permute().contiguous().view.permute", "pvrcnn_head.PVRCNNHead.cls_layers().transpose", "pvrcnn_head.PVRCNNHead.reg_layers().transpose", "pvrcnn_head.PVRCNNHead.cls_layers", "pvrcnn_head.PVRCNNHead.reg_layers"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.proposal_layer", "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.roi_grid_pool", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param input_data: input dict\n        :return:\n        \"\"\"", "\n", "\n", "targets_dict", "=", "self", ".", "proposal_layer", "(", "\n", "batch_dict", ",", "nms_config", "=", "self", ".", "model_cfg", ".", "NMS_CONFIG", "[", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "]", "\n", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "batch_dict", ".", "get", "(", "'roi_targets_dict'", ",", "None", ")", "\n", "if", "targets_dict", "is", "None", ":", "\n", "                ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "batch_dict", "[", "'rois'", "]", "=", "targets_dict", "[", "'rois'", "]", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "targets_dict", "[", "'roi_labels'", "]", "\n", "\n", "# RoI aware pooling", "\n", "", "", "pooled_features", "=", "self", ".", "roi_grid_pool", "(", "batch_dict", ")", "# (BxN, 6x6x6, C)", "\n", "\n", "grid_size", "=", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", ".", "GRID_SIZE", "\n", "batch_size_rcnn", "=", "pooled_features", ".", "shape", "[", "0", "]", "\n", "pooled_features", "=", "pooled_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size_rcnn", ",", "-", "1", ",", "grid_size", ",", "grid_size", ",", "grid_size", ")", "# (BxN, C, 6, 6, 6)", "\n", "\n", "shared_features", "=", "self", ".", "shared_fc_layer", "(", "pooled_features", ".", "view", "(", "batch_size_rcnn", ",", "-", "1", ",", "1", ")", ")", "\n", "rcnn_cls", "=", "self", ".", "cls_layers", "(", "shared_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, 1 or 2)", "\n", "rcnn_reg", "=", "self", ".", "reg_layers", "(", "shared_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, C)", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "batch_cls_preds", ",", "batch_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", ",", "rois", "=", "batch_dict", "[", "'rois'", "]", ",", "cls_preds", "=", "rcnn_cls", ",", "box_preds", "=", "rcnn_reg", "\n", ")", "\n", "batch_dict", "[", "'batch_cls_preds'", "]", "=", "batch_cls_preds", "\n", "batch_dict", "[", "'batch_box_preds'", "]", "=", "batch_box_preds", "\n", "batch_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "targets_dict", "[", "'rcnn_cls'", "]", "=", "rcnn_cls", "\n", "targets_dict", "[", "'rcnn_reg'", "]", "=", "rcnn_reg", "\n", "\n", "self", ".", "forward_ret_dict", "=", "targets_dict", "\n", "\n", "", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.__init__": [[12, 22], ["torch.Module.__init__", "target_assigner.proposal_target_layer.ProposalTargetLayer", "roi_head_template.RoIHeadTemplate.build_losses", "getattr", "roi_head_template.RoIHeadTemplate.model_cfg.TARGET_CONFIG.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.build_losses"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "model_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "box_coder", "=", "getattr", "(", "box_coder_utils", ",", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ".", "BOX_CODER", ")", "(", "\n", "**", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ".", "get", "(", "'BOX_CODER_CONFIG'", ",", "{", "}", ")", "\n", ")", "\n", "self", ".", "proposal_target_layer", "=", "ProposalTargetLayer", "(", "roi_sampler_cfg", "=", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ")", "\n", "self", ".", "build_losses", "(", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ")", "\n", "self", ".", "forward_ret_dict", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.build_losses": [[23, 27], ["roi_head_template.RoIHeadTemplate.add_module", "utils.loss_utils.WeightedSmoothL1Loss"], "methods", ["None"], ["", "def", "build_losses", "(", "self", ",", "losses_cfg", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "'reg_loss_func'", ",", "\n", "loss_utils", ".", "WeightedSmoothL1Loss", "(", "code_weights", "=", "losses_cfg", ".", "LOSS_WEIGHTS", "[", "'code_weights'", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.make_fc_layers": [[29, 44], ["range", "torch.Sequential.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fc_list.__len__", "torch.Sequential.extend", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sequential.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["", "def", "make_fc_layers", "(", "self", ",", "input_channels", ",", "output_channels", ",", "fc_list", ")", ":", "\n", "        ", "fc_layers", "=", "[", "]", "\n", "pre_channel", "=", "input_channels", "\n", "for", "k", "in", "range", "(", "0", ",", "fc_list", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "fc_layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv1d", "(", "pre_channel", ",", "fc_list", "[", "k", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_list", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "fc_list", "[", "k", "]", "\n", "if", "self", ".", "model_cfg", ".", "DP_RATIO", ">=", "0", "and", "k", "==", "0", ":", "\n", "                ", "fc_layers", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "", "", "fc_layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "pre_channel", ",", "output_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "fc_layers", "=", "nn", ".", "Sequential", "(", "*", "fc_layers", ")", "\n", "return", "fc_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.proposal_layer": [[45, 103], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "batch_box_preds.new_zeros", "batch_box_preds.new_zeros", "batch_box_preds.new_zeros", "range", "batch_dict.pop", "batch_dict.get", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "batch_dict.get", "model_utils.model_nms_utils.class_agnostic_nms", "batch_cls_preds.shape.__len__", "batch_dict[].shape.__len__", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.model_nms_utils.class_agnostic_nms", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "proposal_layer", "(", "self", ",", "batch_dict", ",", "nms_config", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                batch_cls_preds: (B, num_boxes, num_classes | 1) or (N1+N2+..., num_classes | 1)\n                batch_box_preds: (B, num_boxes, 7+C) or (N1+N2+..., 7+C)\n                cls_preds_normalized: indicate whether batch_cls_preds is normalized\n                batch_index: optional (N1+N2+...)\n            nms_config:\n\n        Returns:\n            batch_dict:\n                rois: (B, num_rois, 7+C)\n                roi_scores: (B, num_rois)\n                roi_labels: (B, num_rois)\n\n        \"\"\"", "\n", "if", "batch_dict", ".", "get", "(", "'rois'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "return", "batch_dict", "\n", "\n", "", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "batch_box_preds", "=", "batch_dict", "[", "'batch_box_preds'", "]", "\n", "batch_cls_preds", "=", "batch_dict", "[", "'batch_cls_preds'", "]", "\n", "rois", "=", "batch_box_preds", ".", "new_zeros", "(", "(", "batch_size", ",", "nms_config", ".", "NMS_POST_MAXSIZE", ",", "batch_box_preds", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "roi_scores", "=", "batch_box_preds", ".", "new_zeros", "(", "(", "batch_size", ",", "nms_config", ".", "NMS_POST_MAXSIZE", ")", ")", "\n", "roi_labels", "=", "batch_box_preds", ".", "new_zeros", "(", "(", "batch_size", ",", "nms_config", ".", "NMS_POST_MAXSIZE", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "batch_dict", ".", "get", "(", "'batch_index'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "assert", "batch_cls_preds", ".", "shape", ".", "__len__", "(", ")", "==", "2", "\n", "batch_mask", "=", "(", "batch_dict", "[", "'batch_index'", "]", "==", "index", ")", "\n", "", "else", ":", "\n", "                ", "assert", "batch_dict", "[", "'batch_cls_preds'", "]", ".", "shape", ".", "__len__", "(", ")", "==", "3", "\n", "batch_mask", "=", "index", "\n", "", "box_preds", "=", "batch_box_preds", "[", "batch_mask", "]", "\n", "cls_preds", "=", "batch_cls_preds", "[", "batch_mask", "]", "\n", "\n", "cur_roi_scores", ",", "cur_roi_labels", "=", "torch", ".", "max", "(", "cls_preds", ",", "dim", "=", "1", ")", "\n", "\n", "if", "nms_config", ".", "MULTI_CLASSES_NMS", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "selected", ",", "selected_scores", "=", "class_agnostic_nms", "(", "\n", "box_scores", "=", "cur_roi_scores", ",", "box_preds", "=", "box_preds", ",", "nms_config", "=", "nms_config", "\n", ")", "\n", "\n", "", "rois", "[", "index", ",", ":", "len", "(", "selected", ")", ",", ":", "]", "=", "box_preds", "[", "selected", "]", "\n", "roi_scores", "[", "index", ",", ":", "len", "(", "selected", ")", "]", "=", "cur_roi_scores", "[", "selected", "]", "\n", "roi_labels", "[", "index", ",", ":", "len", "(", "selected", ")", "]", "=", "cur_roi_labels", "[", "selected", "]", "\n", "\n", "", "batch_dict", "[", "'rois'", "]", "=", "rois", "\n", "batch_dict", "[", "'roi_scores'", "]", "=", "roi_scores", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "roi_labels", "+", "1", "\n", "batch_dict", "[", "'has_class_labels'", "]", "=", "True", "if", "batch_cls_preds", ".", "shape", "[", "-", "1", "]", ">", "1", "else", "False", "\n", "batch_dict", ".", "pop", "(", "'batch_index'", ",", "None", ")", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.assign_targets": [[104, 135], ["utils.common_utils.rotate_points_along_z().view.clone().detach", "utils.common_utils.rotate_points_along_z().view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "roi_head_template.RoIHeadTemplate.proposal_target_layer.forward", "utils.common_utils.rotate_points_along_z().view.clone", "utils.common_utils.rotate_points_along_z", "utils.common_utils.rotate_points_along_z().view.view", "roi_ry.view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "assign_targets", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "targets_dict", "=", "self", ".", "proposal_target_layer", ".", "forward", "(", "batch_dict", ")", "\n", "\n", "", "rois", "=", "targets_dict", "[", "'rois'", "]", "# (B, N, 7 + C)", "\n", "gt_of_rois", "=", "targets_dict", "[", "'gt_of_rois'", "]", "# (B, N, 7 + C + 1)", "\n", "targets_dict", "[", "'gt_of_rois_src'", "]", "=", "gt_of_rois", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "# canonical transformation", "\n", "roi_center", "=", "rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "roi_ry", "=", "rois", "[", ":", ",", ":", ",", "6", "]", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "gt_of_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "-", "roi_center", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "=", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "-", "roi_ry", "\n", "\n", "# transfer LiDAR coords to local coords", "\n", "gt_of_rois", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "points", "=", "gt_of_rois", ".", "view", "(", "-", "1", ",", "1", ",", "gt_of_rois", ".", "shape", "[", "-", "1", "]", ")", ",", "angle", "=", "-", "roi_ry", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "gt_of_rois", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# flip orientation if rois have opposite orientation", "\n", "heading_label", "=", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "%", "(", "2", "*", "np", ".", "pi", ")", "# 0 ~ 2pi", "\n", "opposite_flag", "=", "(", "heading_label", ">", "np", ".", "pi", "*", "0.5", ")", "&", "(", "heading_label", "<", "np", ".", "pi", "*", "1.5", ")", "\n", "heading_label", "[", "opposite_flag", "]", "=", "(", "heading_label", "[", "opposite_flag", "]", "+", "np", ".", "pi", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "# (0 ~ pi/2, 3pi/2 ~ 2pi)", "\n", "flag", "=", "heading_label", ">", "np", ".", "pi", "\n", "heading_label", "[", "flag", "]", "=", "heading_label", "[", "flag", "]", "-", "np", ".", "pi", "*", "2", "# (-pi/2, pi/2)", "\n", "heading_label", "=", "torch", ".", "clamp", "(", "heading_label", ",", "min", "=", "-", "np", ".", "pi", "/", "2", ",", "max", "=", "np", ".", "pi", "/", "2", ")", "\n", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "=", "heading_label", "\n", "targets_dict", "[", "'gt_of_rois'", "]", "=", "gt_of_rois", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.get_box_reg_layer_loss": [[136, 199], ["forward_ret_dict[].view", "[].view", "fg_mask.long().sum().item", "roi_boxes3d.clone().detach().view", "roi_head_template.RoIHeadTemplate.box_coder.encode_torch", "roi_head_template.RoIHeadTemplate.reg_loss_func", "roi_head_template.RoIHeadTemplate.item", "gt_boxes3d_ct.view", "fg_mask.long().sum", "gt_boxes3d_ct.view", "rcnn_reg.view().unsqueeze", "roi_head_template.RoIHeadTemplate.unsqueeze", "max", "fg_roi_boxes3d.view.view.view", "fg_roi_boxes3d.view.view.clone().detach", "fg_roi_boxes3d[].view", "fg_roi_boxes3d[].view", "roi_head_template.RoIHeadTemplate.box_coder.decode_torch().view", "utils.common_utils.rotate_points_along_z().squeeze", "utils.loss_utils.get_corner_loss_lidar", "loss_corner.mean.mean.mean", "loss_corner.mean.mean.item", "roi_boxes3d.clone().detach", "rcnn_reg.view", "roi_boxes3d.view", "fg_mask.long", "rcnn_reg.view", "fg_roi_boxes3d.view.view.clone", "roi_head_template.RoIHeadTemplate.box_coder.decode_torch", "utils.common_utils.rotate_points_along_z", "roi_boxes3d.clone", "roi_head_template.RoIHeadTemplate.view", "fg_mask.unsqueeze().float", "fg_rcnn_reg.view", "utils.common_utils.rotate_points_along_z().squeeze.unsqueeze", "fg_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.encode_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.get_corner_loss_lidar", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.decode_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "get_box_reg_layer_loss", "(", "self", ",", "forward_ret_dict", ")", ":", "\n", "        ", "loss_cfgs", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", "\n", "code_size", "=", "self", ".", "box_coder", ".", "code_size", "\n", "reg_valid_mask", "=", "forward_ret_dict", "[", "'reg_valid_mask'", "]", ".", "view", "(", "-", "1", ")", "\n", "gt_boxes3d_ct", "=", "forward_ret_dict", "[", "'gt_of_rois'", "]", "[", "...", ",", "0", ":", "code_size", "]", "\n", "gt_of_rois_src", "=", "forward_ret_dict", "[", "'gt_of_rois_src'", "]", "[", "...", ",", "0", ":", "code_size", "]", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "rcnn_reg", "=", "forward_ret_dict", "[", "'rcnn_reg'", "]", "# (rcnn_batch_size, C)", "\n", "roi_boxes3d", "=", "forward_ret_dict", "[", "'rois'", "]", "\n", "rcnn_batch_size", "=", "gt_boxes3d_ct", ".", "view", "(", "-", "1", ",", "code_size", ")", ".", "shape", "[", "0", "]", "\n", "\n", "fg_mask", "=", "(", "reg_valid_mask", ">", "0", ")", "\n", "fg_sum", "=", "fg_mask", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "tb_dict", "=", "{", "}", "\n", "\n", "if", "loss_cfgs", ".", "REG_LOSS", "==", "'smooth-l1'", ":", "\n", "            ", "rois_anchor", "=", "roi_boxes3d", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "rois_anchor", "[", ":", ",", "0", ":", "3", "]", "=", "0", "\n", "rois_anchor", "[", ":", ",", "6", "]", "=", "0", "\n", "reg_targets", "=", "self", ".", "box_coder", ".", "encode_torch", "(", "\n", "gt_boxes3d_ct", ".", "view", "(", "rcnn_batch_size", ",", "code_size", ")", ",", "rois_anchor", "\n", ")", "\n", "\n", "rcnn_loss_reg", "=", "self", ".", "reg_loss_func", "(", "\n", "rcnn_reg", ".", "view", "(", "rcnn_batch_size", ",", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "reg_targets", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", ")", "# [B, M, 7]", "\n", "rcnn_loss_reg", "=", "(", "rcnn_loss_reg", ".", "view", "(", "rcnn_batch_size", ",", "-", "1", ")", "*", "fg_mask", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "/", "max", "(", "fg_sum", ",", "1", ")", "\n", "rcnn_loss_reg", "=", "rcnn_loss_reg", "*", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'rcnn_reg_weight'", "]", "\n", "tb_dict", "[", "'rcnn_loss_reg'", "]", "=", "rcnn_loss_reg", ".", "item", "(", ")", "\n", "\n", "if", "loss_cfgs", ".", "CORNER_LOSS_REGULARIZATION", "and", "fg_sum", ">", "0", ":", "\n", "# TODO: NEED to BE CHECK", "\n", "                ", "fg_rcnn_reg", "=", "rcnn_reg", ".", "view", "(", "rcnn_batch_size", ",", "-", "1", ")", "[", "fg_mask", "]", "\n", "fg_roi_boxes3d", "=", "roi_boxes3d", ".", "view", "(", "-", "1", ",", "code_size", ")", "[", "fg_mask", "]", "\n", "\n", "fg_roi_boxes3d", "=", "fg_roi_boxes3d", ".", "view", "(", "1", ",", "-", "1", ",", "code_size", ")", "\n", "batch_anchors", "=", "fg_roi_boxes3d", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "roi_ry", "=", "fg_roi_boxes3d", "[", ":", ",", ":", ",", "6", "]", ".", "view", "(", "-", "1", ")", "\n", "roi_xyz", "=", "fg_roi_boxes3d", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "batch_anchors", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "0", "\n", "rcnn_boxes3d", "=", "self", ".", "box_coder", ".", "decode_torch", "(", "\n", "fg_rcnn_reg", ".", "view", "(", "batch_anchors", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "code_size", ")", ",", "batch_anchors", "\n", ")", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "\n", "rcnn_boxes3d", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "rcnn_boxes3d", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "roi_ry", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "rcnn_boxes3d", "[", ":", ",", "0", ":", "3", "]", "+=", "roi_xyz", "\n", "\n", "loss_corner", "=", "loss_utils", ".", "get_corner_loss_lidar", "(", "\n", "rcnn_boxes3d", "[", ":", ",", "0", ":", "7", "]", ",", "\n", "gt_of_rois_src", "[", "fg_mask", "]", "[", ":", ",", "0", ":", "7", "]", "\n", ")", "\n", "loss_corner", "=", "loss_corner", ".", "mean", "(", ")", "\n", "loss_corner", "=", "loss_corner", "*", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'rcnn_corner_weight'", "]", "\n", "\n", "rcnn_loss_reg", "+=", "loss_corner", "\n", "tb_dict", "[", "'rcnn_loss_corner'", "]", "=", "loss_corner", ".", "item", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "rcnn_loss_reg", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.get_box_cls_layer_loss": [[200, 219], ["forward_ret_dict[].view", "rcnn_cls.view", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "rcnn_loss_cls.item", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "forward_ret_dict[].view.float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "cls_valid_mask.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "cls_valid_mask.sum"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid"], ["", "def", "get_box_cls_layer_loss", "(", "self", ",", "forward_ret_dict", ")", ":", "\n", "        ", "loss_cfgs", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", "\n", "rcnn_cls", "=", "forward_ret_dict", "[", "'rcnn_cls'", "]", "\n", "rcnn_cls_labels", "=", "forward_ret_dict", "[", "'rcnn_cls_labels'", "]", ".", "view", "(", "-", "1", ")", "\n", "if", "loss_cfgs", ".", "CLS_LOSS", "==", "'BinaryCrossEntropy'", ":", "\n", "            ", "rcnn_cls_flat", "=", "rcnn_cls", ".", "view", "(", "-", "1", ")", "\n", "batch_loss_cls", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "rcnn_cls_flat", ")", ",", "rcnn_cls_labels", ".", "float", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "cls_valid_mask", "=", "(", "rcnn_cls_labels", ">=", "0", ")", ".", "float", "(", ")", "\n", "rcnn_loss_cls", "=", "(", "batch_loss_cls", "*", "cls_valid_mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "cls_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "", "elif", "loss_cfgs", ".", "CLS_LOSS", "==", "'CrossEntropy'", ":", "\n", "            ", "batch_loss_cls", "=", "F", ".", "cross_entropy", "(", "rcnn_cls", ",", "rcnn_cls_labels", ",", "reduction", "=", "'none'", ",", "ignore_index", "=", "-", "1", ")", "\n", "cls_valid_mask", "=", "(", "rcnn_cls_labels", ">=", "0", ")", ".", "float", "(", ")", "\n", "rcnn_loss_cls", "=", "(", "batch_loss_cls", "*", "cls_valid_mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "cls_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "rcnn_loss_cls", "=", "rcnn_loss_cls", "*", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'rcnn_cls_weight'", "]", "\n", "tb_dict", "=", "{", "'rcnn_loss_cls'", ":", "rcnn_loss_cls", ".", "item", "(", ")", "}", "\n", "return", "rcnn_loss_cls", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.get_loss": [[220, 232], ["roi_head_template.RoIHeadTemplate.get_box_cls_layer_loss", "tb_dict.update", "roi_head_template.RoIHeadTemplate.get_box_reg_layer_loss", "tb_dict.update", "rcnn_loss.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.get_box_cls_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.get_box_reg_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "get_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "tb_dict", "=", "{", "}", "if", "tb_dict", "is", "None", "else", "tb_dict", "\n", "rcnn_loss", "=", "0", "\n", "rcnn_loss_cls", ",", "cls_tb_dict", "=", "self", ".", "get_box_cls_layer_loss", "(", "self", ".", "forward_ret_dict", ")", "\n", "rcnn_loss", "+=", "rcnn_loss_cls", "\n", "tb_dict", ".", "update", "(", "cls_tb_dict", ")", "\n", "\n", "rcnn_loss_reg", ",", "reg_tb_dict", "=", "self", ".", "get_box_reg_layer_loss", "(", "self", ".", "forward_ret_dict", ")", "\n", "rcnn_loss", "+=", "rcnn_loss_reg", "\n", "tb_dict", ".", "update", "(", "reg_tb_dict", ")", "\n", "tb_dict", "[", "'rcnn_loss'", "]", "=", "rcnn_loss", ".", "item", "(", ")", "\n", "return", "rcnn_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.generate_predicted_boxes": [[233, 262], ["cls_preds.view", "box_preds.view", "rois[].view", "rois[].view", "rois.clone().detach", "roi_head_template.RoIHeadTemplate.box_coder.decode_torch().view", "utils.common_utils.rotate_points_along_z().squeeze", "batch_box_preds.view.view.view", "rois.clone", "roi_head_template.RoIHeadTemplate.box_coder.decode_torch", "utils.common_utils.rotate_points_along_z", "batch_box_preds.view.view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.decode_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "generate_predicted_boxes", "(", "self", ",", "batch_size", ",", "rois", ",", "cls_preds", ",", "box_preds", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_size:\n            rois: (B, N, 7)\n            cls_preds: (BN, num_class)\n            box_preds: (BN, code_size)\n\n        Returns:\n\n        \"\"\"", "\n", "code_size", "=", "self", ".", "box_coder", ".", "code_size", "\n", "# batch_cls_preds: (B, N, num_class or 1)", "\n", "batch_cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "cls_preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "batch_box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "code_size", ")", "\n", "\n", "roi_ry", "=", "rois", "[", ":", ",", ":", ",", "6", "]", ".", "view", "(", "-", "1", ")", "\n", "roi_xyz", "=", "rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "local_rois", "=", "rois", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "local_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "0", "\n", "\n", "batch_box_preds", "=", "self", ".", "box_coder", ".", "decode_torch", "(", "batch_box_preds", ",", "local_rois", ")", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "\n", "batch_box_preds", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "batch_box_preds", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "roi_ry", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "batch_box_preds", "[", ":", ",", "0", ":", "3", "]", "+=", "roi_xyz", "\n", "batch_box_preds", "=", "batch_box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "code_size", ")", "\n", "return", "batch_cls_preds", ",", "batch_box_preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.partA2_head.PartA2FCHead.__init__": [[11, 58], ["roi_head_template.RoIHeadTemplate.__init__", "torch.ModuleList", "torch.ModuleList", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseSequential", "range", "torch.Sequential", "torch.Sequential", "partA2_head.PartA2FCHead.make_fc_layers", "partA2_head.PartA2FCHead.make_fc_layers", "ops.roiaware_pool3d.roiaware_pool3d_utils.RoIAwarePool3d", "partA2_head.PartA2FCHead.init_weights", "block", "block", "block", "block", "partA2_head.PartA2FCHead.model_cfg.SHARED_FC.__len__", "shared_fc_list.extend", "shared_fc_list.append", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "partA2_head.PartA2FCHead.model_cfg.SHARED_FC.__len__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "model_cfg", ",", "num_class", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_class", "=", "num_class", ",", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "\n", "self", ".", "SA_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "block", "=", "self", ".", "post_act_block", "\n", "\n", "c0", "=", "self", ".", "model_cfg", ".", "ROI_AWARE_POOL", ".", "NUM_FEATURES", "//", "2", "\n", "self", ".", "conv_part", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "4", ",", "64", ",", "3", ",", "padding", "=", "1", ",", "indice_key", "=", "'rcnn_subm1'", ")", ",", "\n", "block", "(", "64", ",", "c0", ",", "3", ",", "padding", "=", "1", ",", "indice_key", "=", "'rcnn_subm1_1'", ")", ",", "\n", ")", "\n", "self", ".", "conv_rpn", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "input_channels", ",", "64", ",", "3", ",", "padding", "=", "1", ",", "indice_key", "=", "'rcnn_subm2'", ")", ",", "\n", "block", "(", "64", ",", "c0", ",", "3", ",", "padding", "=", "1", ",", "indice_key", "=", "'rcnn_subm1_2'", ")", ",", "\n", ")", "\n", "\n", "shared_fc_list", "=", "[", "]", "\n", "pool_size", "=", "self", ".", "model_cfg", ".", "ROI_AWARE_POOL", ".", "POOL_SIZE", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "ROI_AWARE_POOL", ".", "NUM_FEATURES", "*", "pool_size", "*", "pool_size", "*", "pool_size", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "shared_fc_list", ".", "extend", "(", "[", "\n", "nn", ".", "Conv1d", "(", "pre_channel", ",", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", "\n", "\n", "if", "k", "!=", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", "-", "1", "and", "self", ".", "model_cfg", ".", "DP_RATIO", ">", "0", ":", "\n", "                ", "shared_fc_list", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "\n", "", "", "self", ".", "shared_fc_layer", "=", "nn", ".", "Sequential", "(", "*", "shared_fc_list", ")", "\n", "\n", "self", ".", "cls_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "pre_channel", ",", "output_channels", "=", "self", ".", "num_class", ",", "fc_list", "=", "self", ".", "model_cfg", ".", "CLS_FC", "\n", ")", "\n", "self", ".", "reg_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "pre_channel", ",", "\n", "output_channels", "=", "self", ".", "box_coder", ".", "code_size", "*", "self", ".", "num_class", ",", "\n", "fc_list", "=", "self", ".", "model_cfg", ".", "REG_FC", "\n", ")", "\n", "\n", "self", ".", "roiaware_pool3d_layer", "=", "roiaware_pool3d_utils", ".", "RoIAwarePool3d", "(", "\n", "out_size", "=", "self", ".", "model_cfg", ".", "ROI_AWARE_POOL", ".", "POOL_SIZE", ",", "\n", "max_pts_each_voxel", "=", "self", ".", "model_cfg", ".", "ROI_AWARE_POOL", ".", "MAX_POINTS_PER_VOXEL", "\n", ")", "\n", "self", ".", "init_weights", "(", "weight_init", "=", "'xavier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.partA2_head.PartA2FCHead.init_weights": [[59, 78], ["partA2_head.PartA2FCHead.modules", "torch.init.normal_", "torch.init.normal_", "isinstance", "isinstance", "init_func", "init_func", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "weight_init", "=", "'xavier'", ")", ":", "\n", "        ", "if", "weight_init", "==", "'kaiming'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "kaiming_normal_", "\n", "", "elif", "weight_init", "==", "'xavier'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "xavier_normal_", "\n", "", "elif", "weight_init", "==", "'normal'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "normal_", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "if", "weight_init", "==", "'normal'", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "", "else", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "reg_layers", "[", "-", "1", "]", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.partA2_head.PartA2FCHead.post_act_block": [[79, 103], ["utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SubMConv3d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseConv3d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "utils.spconv_utils.spconv.SparseSequential", "utils.spconv_utils.spconv.SparseInverseConv3d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "post_act_block", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "indice_key", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "conv_type", "=", "'subm'", ")", ":", "\n", "        ", "if", "conv_type", "==", "'subm'", ":", "\n", "            ", "m", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "elif", "conv_type", "==", "'spconv'", ":", "\n", "            ", "m", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SparseConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "elif", "conv_type", "==", "'inverseconv'", ":", "\n", "            ", "m", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SparseInverseConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "indice_key", "=", "indice_key", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.partA2_head.PartA2FCHead.roiaware_pool": [[104, 152], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].contiguous", "partA2_head.PartA2FCHead.roiaware_pool3d_layer.forward", "partA2_head.PartA2FCHead.roiaware_pool3d_layer.forward", "pooled_part_features_list.append", "pooled_rpn_features_list.append", "batch_dict[].view().detach", "partA2_head.PartA2FCHead.model_cfg.get", "batch_dict[].view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward"], ["", "def", "roiaware_pool", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                point_coords: (num_points, 4)  [bs_idx, x, y, z]\n                point_features: (num_points, C)\n                point_cls_scores: (N1 + N2 + N3 + ..., 1)\n                point_part_offset: (N1 + N2 + N3 + ..., 3)\n        Returns:\n\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "batch_idx", "=", "batch_dict", "[", "'point_coords'", "]", "[", ":", ",", "0", "]", "\n", "point_coords", "=", "batch_dict", "[", "'point_coords'", "]", "[", ":", ",", "1", ":", "4", "]", "\n", "point_features", "=", "batch_dict", "[", "'point_features'", "]", "\n", "part_features", "=", "torch", ".", "cat", "(", "(", "\n", "batch_dict", "[", "'point_part_offset'", "]", "if", "not", "self", ".", "model_cfg", ".", "get", "(", "'DISABLE_PART'", ",", "False", ")", "else", "point_coords", ",", "\n", "batch_dict", "[", "'point_cls_scores'", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "detach", "(", ")", "\n", ")", ",", "dim", "=", "1", ")", "\n", "part_features", "[", "part_features", "[", ":", ",", "-", "1", "]", "<", "self", ".", "model_cfg", ".", "SEG_MASK_SCORE_THRESH", ",", "0", ":", "3", "]", "=", "0", "\n", "\n", "rois", "=", "batch_dict", "[", "'rois'", "]", "\n", "\n", "pooled_part_features_list", ",", "pooled_rpn_features_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "bs_mask", "=", "(", "batch_idx", "==", "bs_idx", ")", "\n", "cur_point_coords", "=", "point_coords", "[", "bs_mask", "]", "\n", "cur_part_features", "=", "part_features", "[", "bs_mask", "]", "\n", "cur_rpn_features", "=", "point_features", "[", "bs_mask", "]", "\n", "cur_roi", "=", "rois", "[", "bs_idx", "]", "[", ":", ",", "0", ":", "7", "]", ".", "contiguous", "(", ")", "# (N, 7)", "\n", "\n", "pooled_part_features", "=", "self", ".", "roiaware_pool3d_layer", ".", "forward", "(", "\n", "cur_roi", ",", "cur_point_coords", ",", "cur_part_features", ",", "pool_method", "=", "'avg'", "\n", ")", "# (N, out_x, out_y, out_z, 4)", "\n", "pooled_rpn_features", "=", "self", ".", "roiaware_pool3d_layer", ".", "forward", "(", "\n", "cur_roi", ",", "cur_point_coords", ",", "cur_rpn_features", ",", "pool_method", "=", "'max'", "\n", ")", "# (N, out_x, out_y, out_z, C)", "\n", "\n", "pooled_part_features_list", ".", "append", "(", "pooled_part_features", ")", "\n", "pooled_rpn_features_list", ".", "append", "(", "pooled_rpn_features", ")", "\n", "\n", "", "pooled_part_features", "=", "torch", ".", "cat", "(", "pooled_part_features_list", ",", "dim", "=", "0", ")", "# (B * N, out_x, out_y, out_z, 4)", "\n", "pooled_rpn_features", "=", "torch", ".", "cat", "(", "pooled_rpn_features_list", ",", "dim", "=", "0", ")", "# (B * N, out_x, out_y, out_z, C)", "\n", "\n", "return", "pooled_part_features", ",", "pooled_rpn_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.partA2_head.PartA2FCHead.fake_sparse_idx": [[153, 162], ["print", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.arange().type_as().view", "torch.arange().type_as().view", "torch.arange().type_as().view", "torch.arange().type_as().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fake_sparse_idx", "(", "sparse_idx", ",", "batch_size_rcnn", ")", ":", "\n", "        ", "print", "(", "'Warning: Sparse_Idx_Shape(%s) \\r'", "%", "(", "str", "(", "sparse_idx", ".", "shape", ")", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "# at most one sample is non-empty, then fake the first voxels of each sample(BN needs at least", "\n", "# two values each channel) as non-empty for the below calculation", "\n", "sparse_idx", "=", "sparse_idx", ".", "new_zeros", "(", "(", "batch_size_rcnn", ",", "3", ")", ")", "\n", "bs_idxs", "=", "torch", ".", "arange", "(", "batch_size_rcnn", ")", ".", "type_as", "(", "sparse_idx", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "sparse_idx", "=", "torch", ".", "cat", "(", "(", "bs_idxs", ",", "sparse_idx", ")", ",", "dim", "=", "1", ")", "\n", "return", "sparse_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.partA2_head.PartA2FCHead.forward": [[163, 225], ["partA2_head.PartA2FCHead.proposal_layer", "partA2_head.PartA2FCHead.roiaware_pool", "numpy.array", "pooled_part_features.sum().nonzero", "partA2_head.PartA2FCHead.int().contiguous", "utils.spconv_utils.spconv.SparseConvTensor", "utils.spconv_utils.spconv.SparseConvTensor", "partA2_head.PartA2FCHead.conv_part", "partA2_head.PartA2FCHead.conv_rpn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.spconv_utils.spconv.SparseConvTensor", "partA2_head.PartA2FCHead.dense().view", "partA2_head.PartA2FCHead.shared_fc_layer", "partA2_head.PartA2FCHead.cls_layers().transpose().contiguous().squeeze", "partA2_head.PartA2FCHead.reg_layers().transpose().contiguous().squeeze", "partA2_head.PartA2FCHead.assign_targets", "partA2_head.PartA2FCHead.fake_sparse_idx", "partA2_head.PartA2FCHead.generate_predicted_boxes", "pooled_part_features.sum", "targets_dict[].fill_", "targets_dict[].fill_", "partA2_head.PartA2FCHead.int", "partA2_head.PartA2FCHead.dense", "partA2_head.PartA2FCHead.cls_layers().transpose().contiguous", "partA2_head.PartA2FCHead.reg_layers().transpose().contiguous", "partA2_head.PartA2FCHead.cls_layers().transpose", "partA2_head.PartA2FCHead.reg_layers().transpose", "partA2_head.PartA2FCHead.cls_layers", "partA2_head.PartA2FCHead.reg_layers"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.proposal_layer", "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.partA2_head.PartA2FCHead.roiaware_pool", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.partA2_head.PartA2FCHead.fake_sparse_idx", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n\n        Returns:\n\n        \"\"\"", "\n", "targets_dict", "=", "self", ".", "proposal_layer", "(", "\n", "batch_dict", ",", "nms_config", "=", "self", ".", "model_cfg", ".", "NMS_CONFIG", "[", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "]", "\n", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "batch_dict", "[", "'rois'", "]", "=", "targets_dict", "[", "'rois'", "]", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "targets_dict", "[", "'roi_labels'", "]", "\n", "\n", "# RoI aware pooling", "\n", "", "pooled_part_features", ",", "pooled_rpn_features", "=", "self", ".", "roiaware_pool", "(", "batch_dict", ")", "\n", "batch_size_rcnn", "=", "pooled_part_features", ".", "shape", "[", "0", "]", "# (B * N, out_x, out_y, out_z, 4)", "\n", "\n", "# transform to sparse tensors", "\n", "sparse_shape", "=", "np", ".", "array", "(", "pooled_part_features", ".", "shape", "[", "1", ":", "4", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "sparse_idx", "=", "pooled_part_features", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "nonzero", "(", ")", "# (non_empty_num, 4) ==> [bs_idx, x_idx, y_idx, z_idx]", "\n", "if", "sparse_idx", ".", "shape", "[", "0", "]", "<", "3", ":", "\n", "            ", "sparse_idx", "=", "self", ".", "fake_sparse_idx", "(", "sparse_idx", ",", "batch_size_rcnn", ")", "\n", "if", "self", ".", "training", ":", "\n", "# these are invalid samples", "\n", "                ", "targets_dict", "[", "'rcnn_cls_labels'", "]", ".", "fill_", "(", "-", "1", ")", "\n", "targets_dict", "[", "'reg_valid_mask'", "]", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "", "", "part_features", "=", "pooled_part_features", "[", "sparse_idx", "[", ":", ",", "0", "]", ",", "sparse_idx", "[", ":", ",", "1", "]", ",", "sparse_idx", "[", ":", ",", "2", "]", ",", "sparse_idx", "[", ":", ",", "3", "]", "]", "\n", "rpn_features", "=", "pooled_rpn_features", "[", "sparse_idx", "[", ":", ",", "0", "]", ",", "sparse_idx", "[", ":", ",", "1", "]", ",", "sparse_idx", "[", ":", ",", "2", "]", ",", "sparse_idx", "[", ":", ",", "3", "]", "]", "\n", "coords", "=", "sparse_idx", ".", "int", "(", ")", ".", "contiguous", "(", ")", "\n", "part_features", "=", "spconv", ".", "SparseConvTensor", "(", "part_features", ",", "coords", ",", "sparse_shape", ",", "batch_size_rcnn", ")", "\n", "rpn_features", "=", "spconv", ".", "SparseConvTensor", "(", "rpn_features", ",", "coords", ",", "sparse_shape", ",", "batch_size_rcnn", ")", "\n", "\n", "# forward rcnn network", "\n", "x_part", "=", "self", ".", "conv_part", "(", "part_features", ")", "\n", "x_rpn", "=", "self", ".", "conv_rpn", "(", "rpn_features", ")", "\n", "\n", "merged_feature", "=", "torch", ".", "cat", "(", "(", "x_rpn", ".", "features", ",", "x_part", ".", "features", ")", ",", "dim", "=", "1", ")", "# (N, C)", "\n", "shared_feature", "=", "spconv", ".", "SparseConvTensor", "(", "merged_feature", ",", "coords", ",", "sparse_shape", ",", "batch_size_rcnn", ")", "\n", "shared_feature", "=", "shared_feature", ".", "dense", "(", ")", ".", "view", "(", "batch_size_rcnn", ",", "-", "1", ",", "1", ")", "\n", "\n", "shared_feature", "=", "self", ".", "shared_fc_layer", "(", "shared_feature", ")", "\n", "\n", "rcnn_cls", "=", "self", ".", "cls_layers", "(", "shared_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, 1 or 2)", "\n", "rcnn_reg", "=", "self", ".", "reg_layers", "(", "shared_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, C)", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "batch_cls_preds", ",", "batch_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", ",", "rois", "=", "batch_dict", "[", "'rois'", "]", ",", "cls_preds", "=", "rcnn_cls", ",", "box_preds", "=", "rcnn_reg", "\n", ")", "\n", "batch_dict", "[", "'batch_cls_preds'", "]", "=", "batch_cls_preds", "\n", "batch_dict", "[", "'batch_box_preds'", "]", "=", "batch_box_preds", "\n", "batch_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "targets_dict", "[", "'rcnn_cls'", "]", "=", "rcnn_cls", "\n", "targets_dict", "[", "'rcnn_reg'", "]", "=", "rcnn_reg", "\n", "\n", "self", ".", "forward_ret_dict", "=", "targets_dict", "\n", "", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pointrcnn_head.PointRCNNHead.__init__": [[11, 64], ["roi_head_template.RoIHeadTemplate.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "pointrcnn_head.PointRCNNHead.make_fc_layers", "pointrcnn_head.PointRCNNHead.make_fc_layers", "ops.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3d", "pointrcnn_head.PointRCNNHead.init_weights", "shared_mlps.append", "shared_mlps.append", "torch.Conv2d", "torch.Conv2d", "pointrcnn_head.PointRCNNHead.model_cfg.SA_CONFIG.NPOINTS.__len__", "pointrcnn_head.PointRCNNHead.SA_modules.append", "len", "torch.Conv2d", "torch.Conv2d", "shared_mlps.append", "torch.ReLU", "torch.ReLU", "ops.pointnet2.pointnet2_batch.pointnet2_modules.PointnetSAModule", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "model_cfg", ",", "num_class", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_class", "=", "num_class", ",", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "use_bn", "=", "self", ".", "model_cfg", ".", "USE_BN", "\n", "self", ".", "SA_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "channel_in", "=", "input_channels", "\n", "\n", "self", ".", "num_prefix_channels", "=", "3", "+", "2", "# xyz + point_scores + point_depth", "\n", "xyz_mlps", "=", "[", "self", ".", "num_prefix_channels", "]", "+", "self", ".", "model_cfg", ".", "XYZ_UP_LAYER", "\n", "shared_mlps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "xyz_mlps", ")", "-", "1", ")", ":", "\n", "            ", "shared_mlps", ".", "append", "(", "nn", ".", "Conv2d", "(", "xyz_mlps", "[", "k", "]", ",", "xyz_mlps", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "not", "use_bn", ")", ")", "\n", "if", "use_bn", ":", "\n", "                ", "shared_mlps", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "xyz_mlps", "[", "k", "+", "1", "]", ")", ")", "\n", "", "shared_mlps", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "xyz_up_layer", "=", "nn", ".", "Sequential", "(", "*", "shared_mlps", ")", "\n", "\n", "c_out", "=", "self", ".", "model_cfg", ".", "XYZ_UP_LAYER", "[", "-", "1", "]", "\n", "self", ".", "merge_down_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "c_out", "*", "2", ",", "c_out", ",", "kernel_size", "=", "1", ",", "bias", "=", "not", "use_bn", ")", ",", "\n", "*", "[", "nn", ".", "BatchNorm2d", "(", "c_out", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "if", "use_bn", "else", "[", "nn", ".", "ReLU", "(", ")", "]", "\n", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NPOINTS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "mlps", "=", "[", "channel_in", "]", "+", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "MLPS", "[", "k", "]", "\n", "\n", "npoint", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NPOINTS", "[", "k", "]", "if", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NPOINTS", "[", "k", "]", "!=", "-", "1", "else", "None", "\n", "self", ".", "SA_modules", ".", "append", "(", "\n", "pointnet2_modules", ".", "PointnetSAModule", "(", "\n", "npoint", "=", "npoint", ",", "\n", "radius", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "RADIUS", "[", "k", "]", ",", "\n", "nsample", "=", "self", ".", "model_cfg", ".", "SA_CONFIG", ".", "NSAMPLE", "[", "k", "]", ",", "\n", "mlp", "=", "mlps", ",", "\n", "use_xyz", "=", "True", ",", "\n", "bn", "=", "use_bn", "\n", ")", "\n", ")", "\n", "channel_in", "=", "mlps", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "cls_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "channel_in", ",", "output_channels", "=", "self", ".", "num_class", ",", "fc_list", "=", "self", ".", "model_cfg", ".", "CLS_FC", "\n", ")", "\n", "self", ".", "reg_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "channel_in", ",", "\n", "output_channels", "=", "self", ".", "box_coder", ".", "code_size", "*", "self", ".", "num_class", ",", "\n", "fc_list", "=", "self", ".", "model_cfg", ".", "REG_FC", "\n", ")", "\n", "\n", "self", ".", "roipoint_pool3d_layer", "=", "roipoint_pool3d_utils", ".", "RoIPointPool3d", "(", "\n", "num_sampled_points", "=", "self", ".", "model_cfg", ".", "ROI_POINT_POOL", ".", "NUM_SAMPLED_POINTS", ",", "\n", "pool_extra_width", "=", "self", ".", "model_cfg", ".", "ROI_POINT_POOL", ".", "POOL_EXTRA_WIDTH", "\n", ")", "\n", "self", ".", "init_weights", "(", "weight_init", "=", "'xavier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pointrcnn_head.PointRCNNHead.init_weights": [[65, 84], ["pointrcnn_head.PointRCNNHead.modules", "torch.init.normal_", "torch.init.normal_", "isinstance", "isinstance", "init_func", "init_func", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "weight_init", "=", "'xavier'", ")", ":", "\n", "        ", "if", "weight_init", "==", "'kaiming'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "kaiming_normal_", "\n", "", "elif", "weight_init", "==", "'xavier'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "xavier_normal_", "\n", "", "elif", "weight_init", "==", "'normal'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "normal_", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "if", "weight_init", "==", "'normal'", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "", "else", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "reg_layers", "[", "-", "1", "]", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pointrcnn_head.PointRCNNHead.roipool3d_gpu": [[85, 131], ["point_coords.new_zeros().int", "range", "batch_dict[].detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "point_coords.view", "torch.cat.view", "torch.cat.view", "point_coords.new_zeros().int.min", "point_coords.new_zeros().int.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pointrcnn_head.PointRCNNHead.roipoint_pool3d_layer", "roi_center.unsqueeze", "pooled_features.view.view.view", "utils.common_utils.rotate_points_along_z", "point_coords.new_zeros", "point_coords.norm", "rois.view", "pooled_empty_flag.view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "roipool3d_gpu", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                point_coords: (num_points, 4)  [bs_idx, x, y, z]\n                point_features: (num_points, C)\n                point_cls_scores: (N1 + N2 + N3 + ..., 1)\n                point_part_offset: (N1 + N2 + N3 + ..., 3)\n        Returns:\n\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "batch_idx", "=", "batch_dict", "[", "'point_coords'", "]", "[", ":", ",", "0", "]", "\n", "point_coords", "=", "batch_dict", "[", "'point_coords'", "]", "[", ":", ",", "1", ":", "4", "]", "\n", "point_features", "=", "batch_dict", "[", "'point_features'", "]", "\n", "rois", "=", "batch_dict", "[", "'rois'", "]", "# (B, num_rois, 7 + C)", "\n", "batch_cnt", "=", "point_coords", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "batch_cnt", "[", "bs_idx", "]", "=", "(", "batch_idx", "==", "bs_idx", ")", ".", "sum", "(", ")", "\n", "\n", "", "assert", "batch_cnt", ".", "min", "(", ")", "==", "batch_cnt", ".", "max", "(", ")", "\n", "\n", "point_scores", "=", "batch_dict", "[", "'point_cls_scores'", "]", ".", "detach", "(", ")", "\n", "point_depths", "=", "point_coords", ".", "norm", "(", "dim", "=", "1", ")", "/", "self", ".", "model_cfg", ".", "ROI_POINT_POOL", ".", "DEPTH_NORMALIZER", "-", "0.5", "\n", "point_features_list", "=", "[", "point_scores", "[", ":", ",", "None", "]", ",", "point_depths", "[", ":", ",", "None", "]", ",", "point_features", "]", "\n", "point_features_all", "=", "torch", ".", "cat", "(", "point_features_list", ",", "dim", "=", "1", ")", "\n", "batch_points", "=", "point_coords", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "batch_point_features", "=", "point_features_all", ".", "view", "(", "batch_size", ",", "-", "1", ",", "point_features_all", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pooled_features", ",", "pooled_empty_flag", "=", "self", ".", "roipoint_pool3d_layer", "(", "\n", "batch_points", ",", "batch_point_features", ",", "rois", "\n", ")", "# pooled_features: (B, num_rois, num_sampled_points, 3 + C), pooled_empty_flag: (B, num_rois)", "\n", "\n", "# canonical transformation", "\n", "roi_center", "=", "rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "pooled_features", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "-=", "roi_center", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "\n", "pooled_features", "=", "pooled_features", ".", "view", "(", "-", "1", ",", "pooled_features", ".", "shape", "[", "-", "2", "]", ",", "pooled_features", ".", "shape", "[", "-", "1", "]", ")", "\n", "pooled_features", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "pooled_features", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "-", "rois", ".", "view", "(", "-", "1", ",", "rois", ".", "shape", "[", "-", "1", "]", ")", "[", ":", ",", "6", "]", "\n", ")", "\n", "pooled_features", "[", "pooled_empty_flag", ".", "view", "(", "-", "1", ")", ">", "0", "]", "=", "0", "\n", "", "return", "pooled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pointrcnn_head.PointRCNNHead.forward": [[132, 180], ["pointrcnn_head.PointRCNNHead.proposal_layer", "pointrcnn_head.PointRCNNHead.roipool3d_gpu", "pooled_features[].transpose().unsqueeze().contiguous", "pointrcnn_head.PointRCNNHead.xyz_up_layer", "pooled_features[].transpose().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pointrcnn_head.PointRCNNHead.merge_down_layer", "range", "pointrcnn_head.PointRCNNHead.cls_layers().transpose().contiguous().squeeze", "pointrcnn_head.PointRCNNHead.reg_layers().transpose().contiguous().squeeze", "pointrcnn_head.PointRCNNHead.assign_targets", "len", "l_xyz.append", "l_features.append", "pointrcnn_head.PointRCNNHead.generate_predicted_boxes", "pooled_features[].transpose().unsqueeze", "pooled_features[].transpose", "pooled_features[].contiguous", "pointrcnn_head.PointRCNNHead.squeeze().contiguous", "pointrcnn_head.PointRCNNHead.cls_layers().transpose().contiguous", "pointrcnn_head.PointRCNNHead.reg_layers().transpose().contiguous", "pooled_features[].transpose", "pointrcnn_head.PointRCNNHead.squeeze", "pointrcnn_head.PointRCNNHead.cls_layers().transpose", "pointrcnn_head.PointRCNNHead.reg_layers().transpose", "pointrcnn_head.PointRCNNHead.cls_layers", "pointrcnn_head.PointRCNNHead.reg_layers"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.proposal_layer", "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.pointrcnn_head.PointRCNNHead.roipool3d_gpu", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n\n        Returns:\n\n        \"\"\"", "\n", "targets_dict", "=", "self", ".", "proposal_layer", "(", "\n", "batch_dict", ",", "nms_config", "=", "self", ".", "model_cfg", ".", "NMS_CONFIG", "[", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "]", "\n", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "batch_dict", "[", "'rois'", "]", "=", "targets_dict", "[", "'rois'", "]", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "targets_dict", "[", "'roi_labels'", "]", "\n", "\n", "", "pooled_features", "=", "self", ".", "roipool3d_gpu", "(", "batch_dict", ")", "# (total_rois, num_sampled_points, 3 + C)", "\n", "\n", "xyz_input", "=", "pooled_features", "[", "...", ",", "0", ":", "self", ".", "num_prefix_channels", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "dim", "=", "3", ")", ".", "contiguous", "(", ")", "\n", "xyz_features", "=", "self", ".", "xyz_up_layer", "(", "xyz_input", ")", "\n", "point_features", "=", "pooled_features", "[", "...", ",", "self", ".", "num_prefix_channels", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "dim", "=", "3", ")", "\n", "merged_features", "=", "torch", ".", "cat", "(", "(", "xyz_features", ",", "point_features", ")", ",", "dim", "=", "1", ")", "\n", "merged_features", "=", "self", ".", "merge_down_layer", "(", "merged_features", ")", "\n", "\n", "l_xyz", ",", "l_features", "=", "[", "pooled_features", "[", "...", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", "]", ",", "[", "merged_features", ".", "squeeze", "(", "dim", "=", "3", ")", ".", "contiguous", "(", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "SA_modules", ")", ")", ":", "\n", "            ", "li_xyz", ",", "li_features", "=", "self", ".", "SA_modules", "[", "i", "]", "(", "l_xyz", "[", "i", "]", ",", "l_features", "[", "i", "]", ")", "\n", "l_xyz", ".", "append", "(", "li_xyz", ")", "\n", "l_features", ".", "append", "(", "li_features", ")", "\n", "\n", "", "shared_features", "=", "l_features", "[", "-", "1", "]", "# (total_rois, num_features, 1)", "\n", "rcnn_cls", "=", "self", ".", "cls_layers", "(", "shared_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, 1 or 2)", "\n", "rcnn_reg", "=", "self", ".", "reg_layers", "(", "shared_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, C)", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "batch_cls_preds", ",", "batch_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", ",", "rois", "=", "batch_dict", "[", "'rois'", "]", ",", "cls_preds", "=", "rcnn_cls", ",", "box_preds", "=", "rcnn_reg", "\n", ")", "\n", "batch_dict", "[", "'batch_cls_preds'", "]", "=", "batch_cls_preds", "\n", "batch_dict", "[", "'batch_box_preds'", "]", "=", "batch_box_preds", "\n", "batch_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "targets_dict", "[", "'rcnn_cls'", "]", "=", "rcnn_cls", "\n", "targets_dict", "[", "'rcnn_reg'", "]", "=", "rcnn_reg", "\n", "\n", "self", ".", "forward_ret_dict", "=", "targets_dict", "\n", "", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.__init__": [[9, 82], ["roi_head_template.RoIHeadTemplate.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "range", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "voxelrcnn_head.VoxelRCNNHead.init_weights", "range", "ops.pointnet2.pointnet2_stack.voxel_pool_modules.NeighborVoxelSAModuleMSG", "voxelrcnn_head.VoxelRCNNHead.roi_grid_pool_layers.append", "sum", "voxelrcnn_head.VoxelRCNNHead.model_cfg.SHARED_FC.__len__", "shared_fc_list.extend", "voxelrcnn_head.VoxelRCNNHead.model_cfg.CLS_FC.__len__", "cls_fc_list.extend", "voxelrcnn_head.VoxelRCNNHead.model_cfg.REG_FC.__len__", "reg_fc_list.extend", "len", "shared_fc_list.append", "cls_fc_list.append", "reg_fc_list.append", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "voxelrcnn_head.VoxelRCNNHead.model_cfg.SHARED_FC.__len__", "voxelrcnn_head.VoxelRCNNHead.model_cfg.CLS_FC.__len__", "voxelrcnn_head.VoxelRCNNHead.model_cfg.REG_FC.__len__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "backbone_channels", ",", "model_cfg", ",", "point_cloud_range", ",", "voxel_size", ",", "num_class", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_class", "=", "num_class", ",", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "pool_cfg", "=", "model_cfg", ".", "ROI_GRID_POOL", "\n", "LAYER_cfg", "=", "self", ".", "pool_cfg", ".", "POOL_LAYERS", "\n", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "self", ".", "voxel_size", "=", "voxel_size", "\n", "\n", "c_out", "=", "0", "\n", "self", ".", "roi_grid_pool_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "src_name", "in", "self", ".", "pool_cfg", ".", "FEATURES_SOURCE", ":", "\n", "            ", "mlps", "=", "LAYER_cfg", "[", "src_name", "]", ".", "MLPS", "\n", "for", "k", "in", "range", "(", "len", "(", "mlps", ")", ")", ":", "\n", "                ", "mlps", "[", "k", "]", "=", "[", "backbone_channels", "[", "src_name", "]", "]", "+", "mlps", "[", "k", "]", "\n", "", "pool_layer", "=", "voxelpool_stack_modules", ".", "NeighborVoxelSAModuleMSG", "(", "\n", "query_ranges", "=", "LAYER_cfg", "[", "src_name", "]", ".", "QUERY_RANGES", ",", "\n", "nsamples", "=", "LAYER_cfg", "[", "src_name", "]", ".", "NSAMPLE", ",", "\n", "radii", "=", "LAYER_cfg", "[", "src_name", "]", ".", "POOL_RADIUS", ",", "\n", "mlps", "=", "mlps", ",", "\n", "pool_method", "=", "LAYER_cfg", "[", "src_name", "]", ".", "POOL_METHOD", ",", "\n", ")", "\n", "\n", "self", ".", "roi_grid_pool_layers", ".", "append", "(", "pool_layer", ")", "\n", "\n", "c_out", "+=", "sum", "(", "[", "x", "[", "-", "1", "]", "for", "x", "in", "mlps", "]", ")", "\n", "\n", "\n", "", "GRID_SIZE", "=", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", ".", "GRID_SIZE", "\n", "# c_out = sum([x[-1] for x in mlps])", "\n", "pre_channel", "=", "GRID_SIZE", "*", "GRID_SIZE", "*", "GRID_SIZE", "*", "c_out", "\n", "\n", "shared_fc_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "shared_fc_list", ".", "extend", "(", "[", "\n", "nn", ".", "Linear", "(", "pre_channel", ",", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "]", ")", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", "\n", "\n", "if", "k", "!=", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", "-", "1", "and", "self", ".", "model_cfg", ".", "DP_RATIO", ">", "0", ":", "\n", "                ", "shared_fc_list", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "", "", "self", ".", "shared_fc_layer", "=", "nn", ".", "Sequential", "(", "*", "shared_fc_list", ")", "\n", "\n", "cls_fc_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "model_cfg", ".", "CLS_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "cls_fc_list", ".", "extend", "(", "[", "\n", "nn", ".", "Linear", "(", "pre_channel", ",", "self", ".", "model_cfg", ".", "CLS_FC", "[", "k", "]", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "CLS_FC", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "CLS_FC", "[", "k", "]", "\n", "\n", "if", "k", "!=", "self", ".", "model_cfg", ".", "CLS_FC", ".", "__len__", "(", ")", "-", "1", "and", "self", ".", "model_cfg", ".", "DP_RATIO", ">", "0", ":", "\n", "                ", "cls_fc_list", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "", "", "self", ".", "cls_fc_layers", "=", "nn", ".", "Sequential", "(", "*", "cls_fc_list", ")", "\n", "self", ".", "cls_pred_layer", "=", "nn", ".", "Linear", "(", "pre_channel", ",", "self", ".", "num_class", ",", "bias", "=", "True", ")", "\n", "\n", "reg_fc_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "model_cfg", ".", "REG_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "reg_fc_list", ".", "extend", "(", "[", "\n", "nn", ".", "Linear", "(", "pre_channel", ",", "self", ".", "model_cfg", ".", "REG_FC", "[", "k", "]", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "REG_FC", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "REG_FC", "[", "k", "]", "\n", "\n", "if", "k", "!=", "self", ".", "model_cfg", ".", "REG_FC", ".", "__len__", "(", ")", "-", "1", "and", "self", ".", "model_cfg", ".", "DP_RATIO", ">", "0", ":", "\n", "                ", "reg_fc_list", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "", "", "self", ".", "reg_fc_layers", "=", "nn", ".", "Sequential", "(", "*", "reg_fc_list", ")", "\n", "self", ".", "reg_pred_layer", "=", "nn", ".", "Linear", "(", "pre_channel", ",", "self", ".", "box_coder", ".", "code_size", "*", "self", ".", "num_class", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.init_weights": [[83, 96], ["torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "module_list.modules", "isinstance", "init_func", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "init_func", "=", "nn", ".", "init", ".", "xavier_normal_", "\n", "for", "module_list", "in", "[", "self", ".", "shared_fc_layer", ",", "self", ".", "cls_fc_layers", ",", "self", ".", "reg_fc_layers", "]", ":", "\n", "            ", "for", "m", "in", "module_list", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "cls_pred_layer", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_pred_layer", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "reg_pred_layer", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "reg_pred_layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.roi_grid_pool": [[106, 192], ["batch_dict.get", "voxelrcnn_head.VoxelRCNNHead.get_global_grid_points_of_roi", "roi_grid_xyz.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rois.new_zeros", "range", "rois.new_zeros().int().fill_", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.common_utils.get_voxel_centers", "utils.common_utils.get_voxel_centers.new_zeros().int", "range", "utils.common_utils.generate_voxel2pinds", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cur_roi_grid_coords.int.int.int", "pool_layer", "pooled_features.view.view.view", "pooled_features_list.append", "rois.new_zeros().int", "utils.common_utils.get_voxel_centers.new_zeros", "utils.common_utils.get_voxel_centers.contiguous", "roi_grid_xyz.view.view.contiguous().view", "cur_roi_grid_coords.int.int.contiguous().view", "cur_sp_tensors.features.contiguous", "rois.new_zeros", "roi_grid_xyz.view.view.contiguous", "cur_roi_grid_coords.int.int.contiguous"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.get_global_grid_points_of_roi", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.get_voxel_centers", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.generate_voxel2pinds"], ["", "def", "roi_grid_pool", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                point_coords: (num_points, 4)  [bs_idx, x, y, z]\n                point_features: (num_points, C)\n                point_cls_scores: (N1 + N2 + N3 + ..., 1)\n                point_part_offset: (N1 + N2 + N3 + ..., 3)\n        Returns:\n\n        \"\"\"", "\n", "rois", "=", "batch_dict", "[", "'rois'", "]", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "with_vf_transform", "=", "batch_dict", ".", "get", "(", "'with_voxel_feature_transform'", ",", "False", ")", "\n", "\n", "roi_grid_xyz", ",", "_", "=", "self", ".", "get_global_grid_points_of_roi", "(", "\n", "rois", ",", "grid_size", "=", "self", ".", "pool_cfg", ".", "GRID_SIZE", "\n", ")", "# (BxN, 6x6x6, 3)", "\n", "# roi_grid_xyz: (B, Nx6x6x6, 3)", "\n", "roi_grid_xyz", "=", "roi_grid_xyz", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "\n", "# compute the voxel coordinates of grid points", "\n", "roi_grid_coords_x", "=", "(", "roi_grid_xyz", "[", ":", ",", ":", ",", "0", ":", "1", "]", "-", "self", ".", "point_cloud_range", "[", "0", "]", ")", "//", "self", ".", "voxel_size", "[", "0", "]", "\n", "roi_grid_coords_y", "=", "(", "roi_grid_xyz", "[", ":", ",", ":", ",", "1", ":", "2", "]", "-", "self", ".", "point_cloud_range", "[", "1", "]", ")", "//", "self", ".", "voxel_size", "[", "1", "]", "\n", "roi_grid_coords_z", "=", "(", "roi_grid_xyz", "[", ":", ",", ":", ",", "2", ":", "3", "]", "-", "self", ".", "point_cloud_range", "[", "2", "]", ")", "//", "self", ".", "voxel_size", "[", "2", "]", "\n", "# roi_grid_coords: (B, Nx6x6x6, 3)", "\n", "roi_grid_coords", "=", "torch", ".", "cat", "(", "[", "roi_grid_coords_x", ",", "roi_grid_coords_y", ",", "roi_grid_coords_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "batch_idx", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "roi_grid_coords", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "batch_idx", "[", "bs_idx", ",", ":", ",", "0", "]", "=", "bs_idx", "\n", "# roi_grid_coords: (B, Nx6x6x6, 4)", "\n", "# roi_grid_coords = torch.cat([batch_idx, roi_grid_coords], dim=-1)", "\n", "# roi_grid_coords = roi_grid_coords.int()", "\n", "", "roi_grid_batch_cnt", "=", "rois", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", ".", "fill_", "(", "roi_grid_coords", ".", "shape", "[", "1", "]", ")", "\n", "\n", "pooled_features_list", "=", "[", "]", "\n", "for", "k", ",", "src_name", "in", "enumerate", "(", "self", ".", "pool_cfg", ".", "FEATURES_SOURCE", ")", ":", "\n", "            ", "pool_layer", "=", "self", ".", "roi_grid_pool_layers", "[", "k", "]", "\n", "cur_stride", "=", "batch_dict", "[", "'multi_scale_3d_strides'", "]", "[", "src_name", "]", "\n", "cur_sp_tensors", "=", "batch_dict", "[", "'multi_scale_3d_features'", "]", "[", "src_name", "]", "\n", "\n", "if", "with_vf_transform", ":", "\n", "                ", "cur_sp_tensors", "=", "batch_dict", "[", "'multi_scale_3d_features_post'", "]", "[", "src_name", "]", "\n", "", "else", ":", "\n", "                ", "cur_sp_tensors", "=", "batch_dict", "[", "'multi_scale_3d_features'", "]", "[", "src_name", "]", "\n", "\n", "# compute voxel center xyz and batch_cnt", "\n", "", "cur_coords", "=", "cur_sp_tensors", ".", "indices", "\n", "cur_voxel_xyz", "=", "common_utils", ".", "get_voxel_centers", "(", "\n", "cur_coords", "[", ":", ",", "1", ":", "4", "]", ",", "\n", "downsample_times", "=", "cur_stride", ",", "\n", "voxel_size", "=", "self", ".", "voxel_size", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", "\n", ")", "\n", "cur_voxel_xyz_batch_cnt", "=", "cur_voxel_xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "cur_voxel_xyz_batch_cnt", "[", "bs_idx", "]", "=", "(", "cur_coords", "[", ":", ",", "0", "]", "==", "bs_idx", ")", ".", "sum", "(", ")", "\n", "# get voxel2point tensor", "\n", "", "v2p_ind_tensor", "=", "common_utils", ".", "generate_voxel2pinds", "(", "cur_sp_tensors", ")", "\n", "# compute the grid coordinates in this scale, in [batch_idx, x y z] order", "\n", "cur_roi_grid_coords", "=", "roi_grid_coords", "//", "cur_stride", "\n", "cur_roi_grid_coords", "=", "torch", ".", "cat", "(", "[", "batch_idx", ",", "cur_roi_grid_coords", "]", ",", "dim", "=", "-", "1", ")", "\n", "cur_roi_grid_coords", "=", "cur_roi_grid_coords", ".", "int", "(", ")", "\n", "# voxel neighbor aggregation", "\n", "pooled_features", "=", "pool_layer", "(", "\n", "xyz", "=", "cur_voxel_xyz", ".", "contiguous", "(", ")", ",", "\n", "xyz_batch_cnt", "=", "cur_voxel_xyz_batch_cnt", ",", "\n", "new_xyz", "=", "roi_grid_xyz", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3", ")", ",", "\n", "new_xyz_batch_cnt", "=", "roi_grid_batch_cnt", ",", "\n", "new_coords", "=", "cur_roi_grid_coords", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", ",", "\n", "features", "=", "cur_sp_tensors", ".", "features", ".", "contiguous", "(", ")", ",", "\n", "voxel2point_indices", "=", "v2p_ind_tensor", "\n", ")", "\n", "\n", "pooled_features", "=", "pooled_features", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "pool_cfg", ".", "GRID_SIZE", "**", "3", ",", "\n", "pooled_features", ".", "shape", "[", "-", "1", "]", "\n", ")", "# (BxN, 6x6x6, C)", "\n", "pooled_features_list", ".", "append", "(", "pooled_features", ")", "\n", "\n", "", "ms_pooled_features", "=", "torch", ".", "cat", "(", "pooled_features_list", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "ms_pooled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.get_global_grid_points_of_roi": [[194, 205], ["rois.view.view.view", "voxelrcnn_head.VoxelRCNNHead.get_dense_grid_points", "utils.common_utils.rotate_points_along_z().squeeze", "rois[].clone", "rois[].clone.unsqueeze", "utils.common_utils.rotate_points_along_z", "voxelrcnn_head.VoxelRCNNHead.clone"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.get_dense_grid_points", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "get_global_grid_points_of_roi", "(", "self", ",", "rois", ",", "grid_size", ")", ":", "\n", "        ", "rois", "=", "rois", ".", "view", "(", "-", "1", ",", "rois", ".", "shape", "[", "-", "1", "]", ")", "\n", "batch_size_rcnn", "=", "rois", ".", "shape", "[", "0", "]", "\n", "\n", "local_roi_grid_points", "=", "self", ".", "get_dense_grid_points", "(", "rois", ",", "batch_size_rcnn", ",", "grid_size", ")", "# (B, 6x6x6, 3)", "\n", "global_roi_grid_points", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "local_roi_grid_points", ".", "clone", "(", ")", ",", "rois", "[", ":", ",", "6", "]", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "global_center", "=", "rois", "[", ":", ",", "0", ":", "3", "]", ".", "clone", "(", ")", "\n", "global_roi_grid_points", "+=", "global_center", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "return", "global_roi_grid_points", ",", "local_roi_grid_points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.get_dense_grid_points": [[206, 216], ["rois.new_ones", "rois.new_ones.nonzero", "dense_idx.repeat().float.repeat().float.repeat().float", "rois.view", "dense_idx.repeat().float.repeat().float.repeat", "local_roi_size.unsqueeze", "local_roi_size.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_dense_grid_points", "(", "rois", ",", "batch_size_rcnn", ",", "grid_size", ")", ":", "\n", "        ", "faked_features", "=", "rois", ".", "new_ones", "(", "(", "grid_size", ",", "grid_size", ",", "grid_size", ")", ")", "\n", "dense_idx", "=", "faked_features", ".", "nonzero", "(", ")", "# (N, 3) [x_idx, y_idx, z_idx]", "\n", "dense_idx", "=", "dense_idx", ".", "repeat", "(", "batch_size_rcnn", ",", "1", ",", "1", ")", ".", "float", "(", ")", "# (B, 6x6x6, 3)", "\n", "\n", "local_roi_size", "=", "rois", ".", "view", "(", "batch_size_rcnn", ",", "-", "1", ")", "[", ":", ",", "3", ":", "6", "]", "\n", "roi_grid_points", "=", "(", "dense_idx", "+", "0.5", ")", "/", "grid_size", "*", "local_roi_size", ".", "unsqueeze", "(", "dim", "=", "1", ")", "-", "(", "local_roi_size", ".", "unsqueeze", "(", "dim", "=", "1", ")", "/", "2", ")", "# (B, 6x6x6, 3)", "\n", "return", "roi_grid_points", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.voxelrcnn_head.VoxelRCNNHead.forward": [[217, 263], ["voxelrcnn_head.VoxelRCNNHead.proposal_layer", "voxelrcnn_head.VoxelRCNNHead.roi_grid_pool", "pooled_features.view.view.view", "voxelrcnn_head.VoxelRCNNHead.shared_fc_layer", "voxelrcnn_head.VoxelRCNNHead.cls_pred_layer", "voxelrcnn_head.VoxelRCNNHead.reg_pred_layer", "voxelrcnn_head.VoxelRCNNHead.assign_targets", "pooled_features.view.view.size", "voxelrcnn_head.VoxelRCNNHead.cls_fc_layers", "voxelrcnn_head.VoxelRCNNHead.reg_fc_layers", "voxelrcnn_head.VoxelRCNNHead.generate_predicted_boxes"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.proposal_layer", "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.roi_grid_pool", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param input_data: input dict\n        :return:\n        \"\"\"", "\n", "\n", "targets_dict", "=", "self", ".", "proposal_layer", "(", "\n", "batch_dict", ",", "nms_config", "=", "self", ".", "model_cfg", ".", "NMS_CONFIG", "[", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "]", "\n", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "batch_dict", "[", "'rois'", "]", "=", "targets_dict", "[", "'rois'", "]", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "targets_dict", "[", "'roi_labels'", "]", "\n", "\n", "# RoI aware pooling", "\n", "", "pooled_features", "=", "self", ".", "roi_grid_pool", "(", "batch_dict", ")", "# (BxN, 6x6x6, C)", "\n", "\n", "# Box Refinement", "\n", "pooled_features", "=", "pooled_features", ".", "view", "(", "pooled_features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "shared_features", "=", "self", ".", "shared_fc_layer", "(", "pooled_features", ")", "\n", "rcnn_cls", "=", "self", ".", "cls_pred_layer", "(", "self", ".", "cls_fc_layers", "(", "shared_features", ")", ")", "\n", "rcnn_reg", "=", "self", ".", "reg_pred_layer", "(", "self", ".", "reg_fc_layers", "(", "shared_features", ")", ")", "\n", "\n", "# grid_size = self.model_cfg.ROI_GRID_POOL.GRID_SIZE", "\n", "# batch_size_rcnn = pooled_features.shape[0]", "\n", "# pooled_features = pooled_features.permute(0, 2, 1).\\", "\n", "#     contiguous().view(batch_size_rcnn, -1, grid_size, grid_size, grid_size)  # (BxN, C, 6, 6, 6)", "\n", "\n", "# shared_features = self.shared_fc_layer(pooled_features.view(batch_size_rcnn, -1, 1))", "\n", "# rcnn_cls = self.cls_layers(shared_features).transpose(1, 2).contiguous().squeeze(dim=1)  # (B, 1 or 2)", "\n", "# rcnn_reg = self.reg_layers(shared_features).transpose(1, 2).contiguous().squeeze(dim=1)  # (B, C)", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "batch_cls_preds", ",", "batch_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", ",", "rois", "=", "batch_dict", "[", "'rois'", "]", ",", "cls_preds", "=", "rcnn_cls", ",", "box_preds", "=", "rcnn_reg", "\n", ")", "\n", "batch_dict", "[", "'batch_cls_preds'", "]", "=", "batch_cls_preds", "\n", "batch_dict", "[", "'batch_box_preds'", "]", "=", "batch_box_preds", "\n", "batch_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "targets_dict", "[", "'rcnn_cls'", "]", "=", "rcnn_cls", "\n", "targets_dict", "[", "'rcnn_reg'", "]", "=", "rcnn_reg", "\n", "\n", "self", ".", "forward_ret_dict", "=", "targets_dict", "\n", "\n", "", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.__init__": [[8, 33], ["roi_head_template.RoIHeadTemplate.__init__", "range", "torch.Sequential", "torch.Sequential", "second_head.SECONDHead.make_fc_layers", "second_head.SECONDHead.init_weights", "second_head.SECONDHead.model_cfg.SHARED_FC.__len__", "shared_fc_list.extend", "shared_fc_list.append", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "second_head.SECONDHead.model_cfg.SHARED_FC.__len__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "model_cfg", ",", "num_class", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_class", "=", "num_class", ",", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "\n", "GRID_SIZE", "=", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", ".", "GRID_SIZE", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", ".", "IN_CHANNEL", "*", "GRID_SIZE", "*", "GRID_SIZE", "\n", "\n", "shared_fc_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "shared_fc_list", ".", "extend", "(", "[", "\n", "nn", ".", "Conv1d", "(", "pre_channel", ",", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", "\n", "\n", "if", "k", "!=", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", "-", "1", "and", "self", ".", "model_cfg", ".", "DP_RATIO", ">", "0", ":", "\n", "                ", "shared_fc_list", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "\n", "", "", "self", ".", "shared_fc_layer", "=", "nn", ".", "Sequential", "(", "*", "shared_fc_list", ")", "\n", "\n", "self", ".", "iou_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "pre_channel", ",", "output_channels", "=", "1", ",", "fc_list", "=", "self", ".", "model_cfg", ".", "IOU_FC", "\n", ")", "\n", "self", ".", "init_weights", "(", "weight_init", "=", "'xavier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.init_weights": [[34, 52], ["second_head.SECONDHead.modules", "isinstance", "isinstance", "init_func", "init_func", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "weight_init", "=", "'xavier'", ")", ":", "\n", "        ", "if", "weight_init", "==", "'kaiming'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "kaiming_normal_", "\n", "", "elif", "weight_init", "==", "'xavier'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "xavier_normal_", "\n", "", "elif", "weight_init", "==", "'normal'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "normal_", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "if", "weight_init", "==", "'normal'", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "", "else", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.roi_grid_pool": [[53, 111], ["batch_dict[].detach", "batch_dict[].detach", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batch_dict[].detach.size", "batch_dict[].detach.size", "utils.common_utils.check_numpy_to_torch", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.stack().view().float", "torch.stack().view().float", "torch.stack().view().float", "torch.stack().view().float", "torch.functional.affine_grid", "torch.functional.affine_grid", "torch.functional.grid_sample", "torch.functional.grid_sample", "pooled_features_list.append", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "spatial_features_2d[].unsqueeze().expand", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "batch_dict[].detach.size", "batch_dict[].detach.size", "batch_dict[].detach.size", "batch_dict[].detach.size", "spatial_features_2d[].unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.check_numpy_to_torch"], ["", "", "", "", "def", "roi_grid_pool", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                spatial_features_2d: (B, C, H, W)\n        Returns:\n\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "rois", "=", "batch_dict", "[", "'rois'", "]", ".", "detach", "(", ")", "\n", "spatial_features_2d", "=", "batch_dict", "[", "'spatial_features_2d'", "]", ".", "detach", "(", ")", "\n", "height", ",", "width", "=", "spatial_features_2d", ".", "size", "(", "2", ")", ",", "spatial_features_2d", ".", "size", "(", "3", ")", "\n", "\n", "dataset_cfg", "=", "batch_dict", "[", "'dataset_cfg'", "]", "\n", "min_x", "=", "dataset_cfg", ".", "POINT_CLOUD_RANGE", "[", "0", "]", "\n", "min_y", "=", "dataset_cfg", ".", "POINT_CLOUD_RANGE", "[", "1", "]", "\n", "voxel_size_x", "=", "dataset_cfg", ".", "DATA_PROCESSOR", "[", "-", "1", "]", ".", "VOXEL_SIZE", "[", "0", "]", "\n", "voxel_size_y", "=", "dataset_cfg", ".", "DATA_PROCESSOR", "[", "-", "1", "]", ".", "VOXEL_SIZE", "[", "1", "]", "\n", "down_sample_ratio", "=", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", ".", "DOWNSAMPLE_RATIO", "\n", "\n", "pooled_features_list", "=", "[", "]", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "for", "b_id", "in", "range", "(", "batch_size", ")", ":", "\n", "# Map global boxes coordinates to feature map coordinates", "\n", "            ", "x1", "=", "(", "rois", "[", "b_id", ",", ":", ",", "0", "]", "-", "rois", "[", "b_id", ",", ":", ",", "3", "]", "/", "2", "-", "min_x", ")", "/", "(", "voxel_size_x", "*", "down_sample_ratio", ")", "\n", "x2", "=", "(", "rois", "[", "b_id", ",", ":", ",", "0", "]", "+", "rois", "[", "b_id", ",", ":", ",", "3", "]", "/", "2", "-", "min_x", ")", "/", "(", "voxel_size_x", "*", "down_sample_ratio", ")", "\n", "y1", "=", "(", "rois", "[", "b_id", ",", ":", ",", "1", "]", "-", "rois", "[", "b_id", ",", ":", ",", "4", "]", "/", "2", "-", "min_y", ")", "/", "(", "voxel_size_y", "*", "down_sample_ratio", ")", "\n", "y2", "=", "(", "rois", "[", "b_id", ",", ":", ",", "1", "]", "+", "rois", "[", "b_id", ",", ":", ",", "4", "]", "/", "2", "-", "min_y", ")", "/", "(", "voxel_size_y", "*", "down_sample_ratio", ")", "\n", "\n", "angle", ",", "_", "=", "common_utils", ".", "check_numpy_to_torch", "(", "rois", "[", "b_id", ",", ":", ",", "6", "]", ")", "\n", "\n", "cosa", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sina", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "\n", "theta", "=", "torch", ".", "stack", "(", "(", "\n", "(", "x2", "-", "x1", ")", "/", "(", "width", "-", "1", ")", "*", "cosa", ",", "(", "x2", "-", "x1", ")", "/", "(", "width", "-", "1", ")", "*", "(", "-", "sina", ")", ",", "(", "x1", "+", "x2", "-", "width", "+", "1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "(", "y2", "-", "y1", ")", "/", "(", "height", "-", "1", ")", "*", "sina", ",", "(", "y2", "-", "y1", ")", "/", "(", "height", "-", "1", ")", "*", "cosa", ",", "(", "y1", "+", "y2", "-", "height", "+", "1", ")", "/", "(", "height", "-", "1", ")", "\n", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", ".", "float", "(", ")", "\n", "\n", "grid_size", "=", "self", ".", "model_cfg", ".", "ROI_GRID_POOL", ".", "GRID_SIZE", "\n", "grid", "=", "nn", ".", "functional", ".", "affine_grid", "(", "\n", "theta", ",", "\n", "torch", ".", "Size", "(", "(", "rois", ".", "size", "(", "1", ")", ",", "spatial_features_2d", ".", "size", "(", "1", ")", ",", "grid_size", ",", "grid_size", ")", ")", "\n", ")", "\n", "\n", "pooled_features", "=", "nn", ".", "functional", ".", "grid_sample", "(", "\n", "spatial_features_2d", "[", "b_id", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "rois", ".", "size", "(", "1", ")", ",", "spatial_features_2d", ".", "size", "(", "1", ")", ",", "height", ",", "width", ")", ",", "\n", "grid", "\n", ")", "\n", "\n", "pooled_features_list", ".", "append", "(", "pooled_features", ")", "\n", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "pooled_features", "=", "torch", ".", "cat", "(", "pooled_features_list", ",", "dim", "=", "0", ")", "\n", "\n", "return", "pooled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.forward": [[112, 142], ["second_head.SECONDHead.proposal_layer", "second_head.SECONDHead.roi_grid_pool", "second_head.SECONDHead.shared_fc_layer", "second_head.SECONDHead.iou_layers().transpose().contiguous().squeeze", "second_head.SECONDHead.assign_targets", "second_head.SECONDHead.view", "second_head.SECONDHead.view", "second_head.SECONDHead.iou_layers().transpose().contiguous", "second_head.SECONDHead.iou_layers().transpose", "second_head.SECONDHead.iou_layers"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.roi_head_template.RoIHeadTemplate.proposal_layer", "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.roi_grid_pool", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param input_data: input dict\n        :return:\n        \"\"\"", "\n", "targets_dict", "=", "self", ".", "proposal_layer", "(", "\n", "batch_dict", ",", "nms_config", "=", "self", ".", "model_cfg", ".", "NMS_CONFIG", "[", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "]", "\n", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "batch_dict", "[", "'rois'", "]", "=", "targets_dict", "[", "'rois'", "]", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "targets_dict", "[", "'roi_labels'", "]", "\n", "\n", "# RoI aware pooling", "\n", "", "pooled_features", "=", "self", ".", "roi_grid_pool", "(", "batch_dict", ")", "# (BxN, C, 7, 7)", "\n", "batch_size_rcnn", "=", "pooled_features", ".", "shape", "[", "0", "]", "\n", "\n", "shared_features", "=", "self", ".", "shared_fc_layer", "(", "pooled_features", ".", "view", "(", "batch_size_rcnn", ",", "-", "1", ",", "1", ")", ")", "\n", "rcnn_iou", "=", "self", ".", "iou_layers", "(", "shared_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B*N, 1)", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "batch_dict", "[", "'batch_cls_preds'", "]", "=", "rcnn_iou", ".", "view", "(", "batch_dict", "[", "'batch_size'", "]", ",", "-", "1", ",", "rcnn_iou", ".", "shape", "[", "-", "1", "]", ")", "\n", "batch_dict", "[", "'batch_box_preds'", "]", "=", "batch_dict", "[", "'rois'", "]", "\n", "batch_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "targets_dict", "[", "'rcnn_iou'", "]", "=", "rcnn_iou", "\n", "\n", "self", ".", "forward_ret_dict", "=", "targets_dict", "\n", "\n", "", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.get_loss": [[143, 152], ["second_head.SECONDHead.get_box_iou_layer_loss", "tb_dict.update", "rcnn_loss.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.get_box_iou_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "get_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "tb_dict", "=", "{", "}", "if", "tb_dict", "is", "None", "else", "tb_dict", "\n", "rcnn_loss", "=", "0", "\n", "rcnn_loss_cls", ",", "cls_tb_dict", "=", "self", ".", "get_box_iou_layer_loss", "(", "self", ".", "forward_ret_dict", ")", "\n", "rcnn_loss", "+=", "rcnn_loss_cls", "\n", "tb_dict", ".", "update", "(", "cls_tb_dict", ")", "\n", "\n", "tb_dict", "[", "'rcnn_loss'", "]", "=", "rcnn_loss", ".", "item", "(", ")", "\n", "return", "rcnn_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.roi_heads.second_head.SECONDHead.get_box_iou_layer_loss": [[153, 179], ["forward_ret_dict[].view", "rcnn_iou.view", "torch.functional.binary_cross_entropy_with_logits", "torch.functional.binary_cross_entropy_with_logits", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "rcnn_loss_iou.item", "forward_ret_dict[].view.float", "torch.functional.mse_loss", "torch.functional.mse_loss", "iou_valid_mask.sum", "utils.loss_utils.WeightedSmoothL1Loss.smooth_l1_loss", "utils.loss_utils.sigmoid_focal_cls_loss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.loss_utils.WeightedSmoothL1Loss.smooth_l1_loss"], ["", "def", "get_box_iou_layer_loss", "(", "self", ",", "forward_ret_dict", ")", ":", "\n", "        ", "loss_cfgs", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", "\n", "rcnn_iou", "=", "forward_ret_dict", "[", "'rcnn_iou'", "]", "\n", "rcnn_iou_labels", "=", "forward_ret_dict", "[", "'rcnn_cls_labels'", "]", ".", "view", "(", "-", "1", ")", "\n", "rcnn_iou_flat", "=", "rcnn_iou", ".", "view", "(", "-", "1", ")", "\n", "if", "loss_cfgs", ".", "IOU_LOSS", "==", "'BinaryCrossEntropy'", ":", "\n", "            ", "batch_loss_iou", "=", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "\n", "rcnn_iou_flat", ",", "\n", "rcnn_iou_labels", ".", "float", "(", ")", ",", "reduction", "=", "'none'", "\n", ")", "\n", "", "elif", "loss_cfgs", ".", "IOU_LOSS", "==", "'L2'", ":", "\n", "            ", "batch_loss_iou", "=", "nn", ".", "functional", ".", "mse_loss", "(", "rcnn_iou_flat", ",", "rcnn_iou_labels", ",", "reduction", "=", "'none'", ")", "\n", "", "elif", "loss_cfgs", ".", "IOU_LOSS", "==", "'smoothL1'", ":", "\n", "            ", "diff", "=", "rcnn_iou_flat", "-", "rcnn_iou_labels", "\n", "batch_loss_iou", "=", "loss_utils", ".", "WeightedSmoothL1Loss", ".", "smooth_l1_loss", "(", "diff", ",", "1.0", "/", "9.0", ")", "\n", "", "elif", "loss_cfgs", ".", "IOU_LOSS", "==", "'focalbce'", ":", "\n", "            ", "batch_loss_iou", "=", "loss_utils", ".", "sigmoid_focal_cls_loss", "(", "rcnn_iou_flat", ",", "rcnn_iou_labels", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "iou_valid_mask", "=", "(", "rcnn_iou_labels", ">=", "0", ")", ".", "float", "(", ")", "\n", "rcnn_loss_iou", "=", "(", "batch_loss_iou", "*", "iou_valid_mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "iou_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "\n", "rcnn_loss_iou", "=", "rcnn_loss_iou", "*", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'rcnn_iou_weight'", "]", "\n", "tb_dict", "=", "{", "'rcnn_loss_iou'", ":", "rcnn_loss_iou", ".", "item", "(", ")", "}", "\n", "return", "rcnn_loss_iou", ",", "tb_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "roi_sampler_cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "roi_sampler_cfg", "=", "roi_sampler_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.forward": [[13, 63], ["proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                roi_scores: (B, num_rois)\n                gt_boxes: (B, N, 7 + C + 1)\n                roi_labels: (B, num_rois)\n        Returns:\n            batch_dict:\n                rois: (B, M, 7 + C)\n                gt_of_rois: (B, M, 7 + C)\n                gt_iou_of_rois: (B, M)\n                roi_scores: (B, M)\n                roi_labels: (B, M)\n                reg_valid_mask: (B, M)\n                rcnn_cls_labels: (B, M)\n        \"\"\"", "\n", "batch_rois", ",", "batch_gt_of_rois", ",", "batch_roi_ious", ",", "batch_roi_scores", ",", "batch_roi_labels", "=", "self", ".", "sample_rois_for_rcnn", "(", "\n", "batch_dict", "=", "batch_dict", "\n", ")", "\n", "# regression valid mask", "\n", "reg_valid_mask", "=", "(", "batch_roi_ious", ">", "self", ".", "roi_sampler_cfg", ".", "REG_FG_THRESH", ")", ".", "long", "(", ")", "\n", "\n", "# classification label", "\n", "if", "self", ".", "roi_sampler_cfg", ".", "CLS_SCORE_TYPE", "==", "'cls'", ":", "\n", "            ", "batch_cls_labels", "=", "(", "batch_roi_ious", ">", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", ")", ".", "long", "(", ")", "\n", "ignore_mask", "=", "(", "batch_roi_ious", ">", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH", ")", "&", "(", "batch_roi_ious", "<", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", ")", "\n", "batch_cls_labels", "[", "ignore_mask", ">", "0", "]", "=", "-", "1", "\n", "", "elif", "self", ".", "roi_sampler_cfg", ".", "CLS_SCORE_TYPE", "==", "'roi_iou'", ":", "\n", "            ", "iou_bg_thresh", "=", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH", "\n", "iou_fg_thresh", "=", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", "\n", "fg_mask", "=", "batch_roi_ious", ">", "iou_fg_thresh", "\n", "bg_mask", "=", "batch_roi_ious", "<", "iou_bg_thresh", "\n", "interval_mask", "=", "(", "fg_mask", "==", "0", ")", "&", "(", "bg_mask", "==", "0", ")", "\n", "\n", "batch_cls_labels", "=", "(", "fg_mask", ">", "0", ")", ".", "float", "(", ")", "\n", "batch_cls_labels", "[", "interval_mask", "]", "=", "(", "batch_roi_ious", "[", "interval_mask", "]", "-", "iou_bg_thresh", ")", "/", "(", "iou_fg_thresh", "-", "iou_bg_thresh", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "targets_dict", "=", "{", "'rois'", ":", "batch_rois", ",", "'gt_of_rois'", ":", "batch_gt_of_rois", ",", "'gt_iou_of_rois'", ":", "batch_roi_ious", ",", "\n", "'roi_scores'", ":", "batch_roi_scores", ",", "'roi_labels'", ":", "batch_roi_labels", ",", "\n", "'reg_valid_mask'", ":", "reg_valid_mask", ",", "\n", "'rcnn_cls_labels'", ":", "batch_cls_labels", "}", "\n", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn": [[64, 116], ["rois.new_zeros", "rois.new_zeros", "rois.new_zeros", "rois.new_zeros", "rois.new_zeros", "range", "proposal_target_layer.ProposalTargetLayer.roi_sampler_cfg.get", "proposal_target_layer.ProposalTargetLayer.subsample_rois", "cur_gt.__len__", "cur_gt.new_zeros", "proposal_target_layer.ProposalTargetLayer.get_max_iou_with_same_class", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "torch.max", "torch.max", "torch.max", "torch.max", "cur_gt[].sum", "len", "cur_gt[].long"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.subsample_rois", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.get_max_iou_with_same_class", "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "def", "sample_rois_for_rcnn", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                roi_scores: (B, num_rois)\n                gt_boxes: (B, N, 7 + C + 1)\n                roi_labels: (B, num_rois)\n        Returns:\n\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "rois", "=", "batch_dict", "[", "'rois'", "]", "\n", "roi_scores", "=", "batch_dict", "[", "'roi_scores'", "]", "\n", "roi_labels", "=", "batch_dict", "[", "'roi_labels'", "]", "\n", "gt_boxes", "=", "batch_dict", "[", "'gt_boxes'", "]", "\n", "\n", "code_size", "=", "rois", ".", "shape", "[", "-", "1", "]", "\n", "batch_rois", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ",", "code_size", ")", "\n", "batch_gt_of_rois", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ",", "code_size", "+", "1", ")", "\n", "batch_roi_ious", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", "\n", "batch_roi_scores", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", "\n", "batch_roi_labels", "=", "rois", ".", "new_zeros", "(", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_roi", ",", "cur_gt", ",", "cur_roi_labels", ",", "cur_roi_scores", "=", "rois", "[", "index", "]", ",", "gt_boxes", "[", "index", "]", ",", "roi_labels", "[", "index", "]", ",", "roi_scores", "[", "index", "]", "\n", "k", "=", "cur_gt", ".", "__len__", "(", ")", "-", "1", "\n", "while", "k", ">", "0", "and", "cur_gt", "[", "k", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "k", "-=", "1", "\n", "", "cur_gt", "=", "cur_gt", "[", ":", "k", "+", "1", "]", "\n", "cur_gt", "=", "cur_gt", ".", "new_zeros", "(", "(", "1", ",", "cur_gt", ".", "shape", "[", "1", "]", ")", ")", "if", "len", "(", "cur_gt", ")", "==", "0", "else", "cur_gt", "\n", "\n", "if", "self", ".", "roi_sampler_cfg", ".", "get", "(", "'SAMPLE_ROI_BY_EACH_CLASS'", ",", "False", ")", ":", "\n", "                ", "max_overlaps", ",", "gt_assignment", "=", "self", ".", "get_max_iou_with_same_class", "(", "\n", "rois", "=", "cur_roi", ",", "roi_labels", "=", "cur_roi_labels", ",", "\n", "gt_boxes", "=", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ",", "gt_labels", "=", "cur_gt", "[", ":", ",", "-", "1", "]", ".", "long", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "iou3d", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "cur_roi", ",", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ")", "# (M, N)", "\n", "max_overlaps", ",", "gt_assignment", "=", "torch", ".", "max", "(", "iou3d", ",", "dim", "=", "1", ")", "\n", "\n", "", "sampled_inds", "=", "self", ".", "subsample_rois", "(", "max_overlaps", "=", "max_overlaps", ")", "\n", "\n", "batch_rois", "[", "index", "]", "=", "cur_roi", "[", "sampled_inds", "]", "\n", "batch_roi_labels", "[", "index", "]", "=", "cur_roi_labels", "[", "sampled_inds", "]", "\n", "batch_roi_ious", "[", "index", "]", "=", "max_overlaps", "[", "sampled_inds", "]", "\n", "batch_roi_scores", "[", "index", "]", "=", "cur_roi_scores", "[", "sampled_inds", "]", "\n", "batch_gt_of_rois", "[", "index", "]", "=", "cur_gt", "[", "gt_assignment", "[", "sampled_inds", "]", "]", "\n", "\n", "", "return", "batch_rois", ",", "batch_gt_of_rois", ",", "batch_roi_ious", ",", "batch_roi_scores", ",", "batch_roi_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.subsample_rois": [[117, 163], ["int", "min", "fg_inds.numel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.round", "hard_bg_inds.numel", "easy_bg_inds.numel", "min", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "print", "print", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.permutation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "max_overlaps.min().item", "max_overlaps.max().item", "max_overlaps.min", "max_overlaps.max"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_bg_inds"], ["", "def", "subsample_rois", "(", "self", ",", "max_overlaps", ")", ":", "\n", "# sample fg, easy_bg, hard_bg", "\n", "        ", "fg_rois_per_image", "=", "int", "(", "np", ".", "round", "(", "self", ".", "roi_sampler_cfg", ".", "FG_RATIO", "*", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", ")", "\n", "fg_thresh", "=", "min", "(", "self", ".", "roi_sampler_cfg", ".", "REG_FG_THRESH", ",", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", ")", "\n", "\n", "fg_inds", "=", "(", "(", "max_overlaps", ">=", "fg_thresh", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "easy_bg_inds", "=", "(", "(", "max_overlaps", "<", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH_LO", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "hard_bg_inds", "=", "(", "(", "max_overlaps", "<", "self", ".", "roi_sampler_cfg", ".", "REG_FG_THRESH", ")", "&", "\n", "(", "max_overlaps", ">=", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH_LO", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "fg_num_rois", "=", "fg_inds", ".", "numel", "(", ")", "\n", "bg_num_rois", "=", "hard_bg_inds", ".", "numel", "(", ")", "+", "easy_bg_inds", ".", "numel", "(", ")", "\n", "\n", "if", "fg_num_rois", ">", "0", "and", "bg_num_rois", ">", "0", ":", "\n", "# sampling fg", "\n", "            ", "fg_rois_per_this_image", "=", "min", "(", "fg_rois_per_image", ",", "fg_num_rois", ")", "\n", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "fg_num_rois", ")", ")", ".", "type_as", "(", "max_overlaps", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "[", ":", "fg_rois_per_this_image", "]", "]", "\n", "\n", "# sampling bg", "\n", "bg_rois_per_this_image", "=", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", "-", "fg_rois_per_this_image", "\n", "bg_inds", "=", "self", ".", "sample_bg_inds", "(", "\n", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ",", "self", ".", "roi_sampler_cfg", ".", "HARD_BG_RATIO", "\n", ")", "\n", "\n", "", "elif", "fg_num_rois", ">", "0", "and", "bg_num_rois", "==", "0", ":", "\n", "# sampling fg", "\n", "            ", "rand_num", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", "*", "fg_num_rois", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "max_overlaps", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "]", "\n", "bg_inds", "=", "[", "]", "\n", "\n", "", "elif", "bg_num_rois", ">", "0", "and", "fg_num_rois", "==", "0", ":", "\n", "# sampling bg", "\n", "            ", "bg_rois_per_this_image", "=", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", "\n", "bg_inds", "=", "self", ".", "sample_bg_inds", "(", "\n", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ",", "self", ".", "roi_sampler_cfg", ".", "HARD_BG_RATIO", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'maxoverlaps:(min=%f, max=%f)'", "%", "(", "max_overlaps", ".", "min", "(", ")", ".", "item", "(", ")", ",", "max_overlaps", ".", "max", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "'ERROR: FG=%d, BG=%d'", "%", "(", "fg_num_rois", ",", "bg_num_rois", ")", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "", "sampled_inds", "=", "torch", ".", "cat", "(", "(", "fg_inds", ",", "bg_inds", ")", ",", "dim", "=", "0", ")", "\n", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_bg_inds": [[164, 193], ["min", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hard_bg_inds.numel", "easy_bg_inds.numel", "int", "len", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel", "hard_bg_inds.numel", "easy_bg_inds.numel", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sample_bg_inds", "(", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ",", "hard_bg_ratio", ")", ":", "\n", "        ", "if", "hard_bg_inds", ".", "numel", "(", ")", ">", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "hard_bg_rois_num", "=", "min", "(", "int", "(", "bg_rois_per_this_image", "*", "hard_bg_ratio", ")", ",", "len", "(", "hard_bg_inds", ")", ")", "\n", "easy_bg_rois_num", "=", "bg_rois_per_this_image", "-", "hard_bg_rois_num", "\n", "\n", "# sampling hard bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "hard_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "hard_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "hard_bg_inds", "=", "hard_bg_inds", "[", "rand_idx", "]", "\n", "\n", "# sampling easy bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "easy_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "easy_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "easy_bg_inds", "=", "easy_bg_inds", "[", "rand_idx", "]", "\n", "\n", "bg_inds", "=", "torch", ".", "cat", "(", "[", "hard_bg_inds", ",", "easy_bg_inds", "]", ",", "dim", "=", "0", ")", "\n", "", "elif", "hard_bg_inds", ".", "numel", "(", ")", ">", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "hard_bg_rois_num", "=", "bg_rois_per_this_image", "\n", "# sampling hard bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "hard_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "hard_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "hard_bg_inds", "[", "rand_idx", "]", "\n", "", "elif", "hard_bg_inds", ".", "numel", "(", ")", "==", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "easy_bg_rois_num", "=", "bg_rois_per_this_image", "\n", "# sampling easy bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "easy_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "easy_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "easy_bg_inds", "[", "rand_idx", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "bg_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.proposal_target_layer.ProposalTargetLayer.get_max_iou_with_same_class": [[194, 229], ["rois.new_zeros", "roi_labels.new_zeros", "range", "gt_labels.min().item", "gt_labels.max().item", "gt_mask.nonzero().view", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "torch.max", "torch.max", "torch.max", "torch.max", "gt_labels.min", "roi_mask.sum", "gt_mask.sum", "gt_labels.max", "gt_mask.nonzero"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "@", "staticmethod", "\n", "def", "get_max_iou_with_same_class", "(", "rois", ",", "roi_labels", ",", "gt_boxes", ",", "gt_labels", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            rois: (N, 7)\n            roi_labels: (N)\n            gt_boxes: (N, )\n            gt_labels:\n\n        Returns:\n\n        \"\"\"", "\n", "\"\"\"\n        :param rois: (N, 7)\n        :param roi_labels: (N)\n        :param gt_boxes: (N, 8)\n        :return:\n        \"\"\"", "\n", "max_overlaps", "=", "rois", ".", "new_zeros", "(", "rois", ".", "shape", "[", "0", "]", ")", "\n", "gt_assignment", "=", "roi_labels", ".", "new_zeros", "(", "roi_labels", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "gt_labels", ".", "min", "(", ")", ".", "item", "(", ")", ",", "gt_labels", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ")", ":", "\n", "            ", "roi_mask", "=", "(", "roi_labels", "==", "k", ")", "\n", "gt_mask", "=", "(", "gt_labels", "==", "k", ")", "\n", "if", "roi_mask", ".", "sum", "(", ")", ">", "0", "and", "gt_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "cur_roi", "=", "rois", "[", "roi_mask", "]", "\n", "cur_gt", "=", "gt_boxes", "[", "gt_mask", "]", "\n", "original_gt_assignment", "=", "gt_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "iou3d", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "cur_roi", ",", "cur_gt", ")", "# (M, N)", "\n", "cur_max_overlaps", ",", "cur_gt_assignment", "=", "torch", ".", "max", "(", "iou3d", ",", "dim", "=", "1", ")", "\n", "max_overlaps", "[", "roi_mask", "]", "=", "cur_max_overlaps", "\n", "gt_assignment", "[", "roi_mask", "]", "=", "original_gt_assignment", "[", "cur_gt_assignment", "]", "\n", "\n", "", "", "return", "max_overlaps", ",", "gt_assignment", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.atss_target_assigner.ATSSTargetAssigner.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "topk", ",", "box_coder", ",", "match_height", "=", "False", ")", ":", "\n", "        ", "self", ".", "topk", "=", "topk", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "match_height", "=", "match_height", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.atss_target_assigner.ATSSTargetAssigner.assign_targets": [[16, 74], ["isinstance", "range", "torch.stack", "torch.stack", "torch.stack", "cls_labels_list.append", "reg_targets_list.append", "reg_weights_list.append", "len", "anchors.view.view.permute().contiguous().view", "anchors.view.view.view", "atss_target_assigner.ATSSTargetAssigner.assign_targets_single", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.cat", "torch.cat", "torch.cat", "cur_gt.__len__", "anchors.view.view.permute().contiguous", "cur_gt[].sum", "anchors.view.view.permute"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets_single", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["", "def", "assign_targets", "(", "self", ",", "anchors_list", ",", "gt_boxes_with_classes", ",", "use_multihead", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            anchors: [(N, 7), ...]\n            gt_boxes: (B, M, 8)\n        Returns:\n\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "anchors_list", ",", "list", ")", ":", "\n", "            ", "anchors_list", "=", "[", "anchors_list", "]", "\n", "single_set_of_anchor", "=", "True", "\n", "", "else", ":", "\n", "            ", "single_set_of_anchor", "=", "len", "(", "anchors_list", ")", "==", "1", "\n", "", "cls_labels_list", ",", "reg_targets_list", ",", "reg_weights_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "anchors", "in", "anchors_list", ":", "\n", "            ", "batch_size", "=", "gt_boxes_with_classes", ".", "shape", "[", "0", "]", "\n", "gt_classes", "=", "gt_boxes_with_classes", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "gt_boxes", "=", "gt_boxes_with_classes", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "if", "use_multihead", ":", "\n", "                ", "anchors", "=", "anchors", ".", "permute", "(", "3", ",", "4", ",", "0", ",", "1", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "anchors", "=", "anchors", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "cls_labels", ",", "reg_targets", ",", "reg_weights", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "cur_gt", "=", "gt_boxes", "[", "k", "]", "\n", "cnt", "=", "cur_gt", ".", "__len__", "(", ")", "-", "1", "\n", "while", "cnt", ">", "0", "and", "cur_gt", "[", "cnt", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "cnt", "-=", "1", "\n", "", "cur_gt", "=", "cur_gt", "[", ":", "cnt", "+", "1", "]", "\n", "\n", "cur_gt_classes", "=", "gt_classes", "[", "k", "]", "[", ":", "cnt", "+", "1", "]", "\n", "cur_cls_labels", ",", "cur_reg_targets", ",", "cur_reg_weights", "=", "self", ".", "assign_targets_single", "(", "\n", "anchors", ",", "cur_gt", ",", "cur_gt_classes", "\n", ")", "\n", "cls_labels", ".", "append", "(", "cur_cls_labels", ")", "\n", "reg_targets", ".", "append", "(", "cur_reg_targets", ")", "\n", "reg_weights", ".", "append", "(", "cur_reg_weights", ")", "\n", "\n", "", "cls_labels", "=", "torch", ".", "stack", "(", "cls_labels", ",", "dim", "=", "0", ")", "\n", "reg_targets", "=", "torch", ".", "stack", "(", "reg_targets", ",", "dim", "=", "0", ")", "\n", "reg_weights", "=", "torch", ".", "stack", "(", "reg_weights", ",", "dim", "=", "0", ")", "\n", "cls_labels_list", ".", "append", "(", "cls_labels", ")", "\n", "reg_targets_list", ".", "append", "(", "reg_targets", ")", "\n", "reg_weights_list", ".", "append", "(", "reg_weights", ")", "\n", "\n", "", "if", "single_set_of_anchor", ":", "\n", "            ", "ret_dict", "=", "{", "\n", "'box_cls_labels'", ":", "cls_labels_list", "[", "0", "]", ",", "\n", "'box_reg_targets'", ":", "reg_targets_list", "[", "0", "]", ",", "\n", "'reg_weights'", ":", "reg_weights_list", "[", "0", "]", "\n", "}", "\n", "", "else", ":", "\n", "            ", "ret_dict", "=", "{", "\n", "'box_cls_labels'", ":", "torch", ".", "cat", "(", "cls_labels_list", ",", "dim", "=", "1", ")", ",", "\n", "'box_reg_targets'", ":", "torch", ".", "cat", "(", "reg_targets_list", ",", "dim", "=", "1", ")", ",", "\n", "'reg_weights'", ":", "torch", ".", "cat", "(", "reg_weights_list", ",", "dim", "=", "1", ")", "\n", "}", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.atss_target_assigner.ATSSTargetAssigner.assign_targets_single": [[75, 142], ["distance.topk", "candidate_ious.mean", "candidate_ious.std", "gt_boxes[].repeat", "utils.common_utils.rotate_points_along_z().squeeze", "range", "torch.full_like().t().contiguous().view", "ious_inf.view().t.view().t.view().t", "ious_inf.view().t.view().t.max", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev.max", "torch.arange", "matched_gts.new_zeros", "matched_gts.new_zeros", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev", "topk_idxs.view", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev.t().contiguous().view", "pos_mask.sum", "atss_target_assigner.ATSSTargetAssigner.box_coder.encode_torch", "topk_idxs.view", "utils.common_utils.rotate_points_along_z", "torch.full_like().t().contiguous", "is_pos.view", "ious_inf.view().t.view().t.view", "torch.arange", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev.t().contiguous", "torch.full_like().t", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev.t", "torch.full_like"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou_bev", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.encode_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z"], ["", "def", "assign_targets_single", "(", "self", ",", "anchors", ",", "gt_boxes", ",", "gt_classes", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            anchors: (N, 7) [x, y, z, dx, dy, dz, heading]\n            gt_boxes: (M, 7) [x, y, z, dx, dy, dz, heading]\n            gt_classes: (M)\n        Returns:\n\n        \"\"\"", "\n", "num_anchor", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "# select topk anchors for each gt_boxes", "\n", "if", "self", ".", "match_height", ":", "\n", "            ", "ious", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "anchors", "[", ":", ",", "0", ":", "7", "]", ",", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "# (N, M)", "\n", "", "else", ":", "\n", "            ", "ious", "=", "iou3d_nms_utils", ".", "boxes_iou_bev", "(", "anchors", "[", ":", ",", "0", ":", "7", "]", ",", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "\n", "", "distance", "=", "(", "anchors", "[", ":", ",", "None", ",", "0", ":", "3", "]", "-", "gt_boxes", "[", "None", ",", ":", ",", "0", ":", "3", "]", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "# (N, M)", "\n", "_", ",", "topk_idxs", "=", "distance", ".", "topk", "(", "self", ".", "topk", ",", "dim", "=", "0", ",", "largest", "=", "False", ")", "# (K, M)", "\n", "candidate_ious", "=", "ious", "[", "topk_idxs", ",", "torch", ".", "arange", "(", "num_gt", ")", "]", "# (K, M)", "\n", "iou_mean_per_gt", "=", "candidate_ious", ".", "mean", "(", "dim", "=", "0", ")", "\n", "iou_std_per_gt", "=", "candidate_ious", ".", "std", "(", "dim", "=", "0", ")", "\n", "iou_thresh_per_gt", "=", "iou_mean_per_gt", "+", "iou_std_per_gt", "+", "1e-6", "\n", "is_pos", "=", "candidate_ious", ">=", "iou_thresh_per_gt", "[", "None", ",", ":", "]", "# (K, M)", "\n", "\n", "# check whether anchor_center in gt_boxes, only check BEV x-y axes", "\n", "candidate_anchors", "=", "anchors", "[", "topk_idxs", ".", "view", "(", "-", "1", ")", "]", "# (KxM, 7)", "\n", "gt_boxes_of_each_anchor", "=", "gt_boxes", "[", ":", ",", ":", "]", ".", "repeat", "(", "self", ".", "topk", ",", "1", ")", "# (KxM, 7)", "\n", "xyz_local", "=", "candidate_anchors", "[", ":", ",", "0", ":", "3", "]", "-", "gt_boxes_of_each_anchor", "[", ":", ",", "0", ":", "3", "]", "\n", "xyz_local", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "xyz_local", "[", ":", ",", "None", ",", ":", "]", ",", "-", "gt_boxes_of_each_anchor", "[", ":", ",", "6", "]", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "xy_local", "=", "xyz_local", "[", ":", ",", "0", ":", "2", "]", "\n", "lw", "=", "gt_boxes_of_each_anchor", "[", ":", ",", "3", ":", "5", "]", "[", ":", ",", "[", "1", ",", "0", "]", "]", "# bugfixed: w ==> y, l ==> x in local coords", "\n", "is_in_gt", "=", "(", "(", "xy_local", "<=", "lw", "/", "2", ")", "&", "(", "xy_local", ">=", "-", "lw", "/", "2", ")", ")", ".", "all", "(", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ",", "num_gt", ")", "# (K, M)", "\n", "is_pos", "=", "is_pos", "&", "is_in_gt", "# (K, M)", "\n", "\n", "for", "ng", "in", "range", "(", "num_gt", ")", ":", "\n", "            ", "topk_idxs", "[", ":", ",", "ng", "]", "+=", "ng", "*", "num_anchor", "\n", "\n", "# select the highest IoU if an anchor box is assigned with multiple gt_boxes", "\n", "", "INF", "=", "-", "0x7FFFFFFF", "\n", "ious_inf", "=", "torch", ".", "full_like", "(", "ious", ",", "INF", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "# (MxN)", "\n", "index", "=", "topk_idxs", ".", "view", "(", "-", "1", ")", "[", "is_pos", ".", "view", "(", "-", "1", ")", "]", "\n", "ious_inf", "[", "index", "]", "=", "ious", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "[", "index", "]", "\n", "ious_inf", "=", "ious_inf", ".", "view", "(", "num_gt", ",", "-", "1", ")", ".", "t", "(", ")", "# (N, M)", "\n", "\n", "anchors_to_gt_values", ",", "anchors_to_gt_indexs", "=", "ious_inf", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "# match the gt_boxes to the anchors which have maximum iou with them", "\n", "max_iou_of_each_gt", ",", "argmax_iou_of_each_gt", "=", "ious", ".", "max", "(", "dim", "=", "0", ")", "\n", "anchors_to_gt_indexs", "[", "argmax_iou_of_each_gt", "]", "=", "torch", ".", "arange", "(", "0", ",", "num_gt", ",", "device", "=", "ious", ".", "device", ")", "\n", "anchors_to_gt_values", "[", "argmax_iou_of_each_gt", "]", "=", "max_iou_of_each_gt", "\n", "\n", "cls_labels", "=", "gt_classes", "[", "anchors_to_gt_indexs", "]", "\n", "cls_labels", "[", "anchors_to_gt_values", "==", "INF", "]", "=", "0", "\n", "matched_gts", "=", "gt_boxes", "[", "anchors_to_gt_indexs", "]", "\n", "\n", "pos_mask", "=", "cls_labels", ">", "0", "\n", "reg_targets", "=", "matched_gts", ".", "new_zeros", "(", "(", "num_anchor", ",", "self", ".", "box_coder", ".", "code_size", ")", ")", "\n", "reg_weights", "=", "matched_gts", ".", "new_zeros", "(", "num_anchor", ")", "\n", "if", "pos_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "reg_targets", "[", "pos_mask", ">", "0", "]", "=", "self", ".", "box_coder", ".", "encode_torch", "(", "matched_gts", "[", "pos_mask", ">", "0", "]", ",", "anchors", "[", "pos_mask", ">", "0", "]", ")", "\n", "reg_weights", "[", "pos_mask", "]", "=", "1.0", "\n", "\n", "", "return", "cls_labels", ",", "reg_targets", ",", "reg_weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.anchor_generator.AnchorGenerator.__init__": [[5, 16], ["object.__init__", "len", "config.get", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "anchor_range", ",", "anchor_generator_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "anchor_generator_cfg", "=", "anchor_generator_config", "\n", "self", ".", "anchor_range", "=", "anchor_range", "\n", "self", ".", "anchor_sizes", "=", "[", "config", "[", "'anchor_sizes'", "]", "for", "config", "in", "anchor_generator_config", "]", "\n", "self", ".", "anchor_rotations", "=", "[", "config", "[", "'anchor_rotations'", "]", "for", "config", "in", "anchor_generator_config", "]", "\n", "self", ".", "anchor_heights", "=", "[", "config", "[", "'anchor_bottom_heights'", "]", "for", "config", "in", "anchor_generator_config", "]", "\n", "self", ".", "align_center", "=", "[", "config", ".", "get", "(", "'align_center'", ",", "False", ")", "for", "config", "in", "anchor_generator_config", "]", "\n", "\n", "assert", "len", "(", "self", ".", "anchor_sizes", ")", "==", "len", "(", "self", ".", "anchor_rotations", ")", "==", "len", "(", "self", ".", "anchor_heights", ")", "\n", "self", ".", "num_of_anchor_sets", "=", "len", "(", "self", ".", "anchor_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.anchor_generator.AnchorGenerator.generate_anchors": [[17, 61], ["zip", "len", "num_anchors_per_location.append", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda.new_tensor", "torch.arange().cuda.new_tensor", "torch.arange().cuda.new_tensor", "torch.meshgrid", "torch.stack", "anchors[].repeat", "anchor_size.view().repeat.view().repeat.view().repeat", "torch.cat", "anchors[].repeat", "anchor_rotation.view().repeat.view().repeat.view().repeat", "torch.cat", "anchors.permute().contiguous.permute().contiguous.permute().contiguous", "all_anchors.append", "anchor_size.view().repeat.view().repeat.__len__", "anchor_rotation.view().repeat.view().repeat.__len__", "len", "torch.arange", "torch.arange", "anchor_size.view().repeat.view().repeat.view", "anchor_rotation.view().repeat.view().repeat.view", "anchors.permute().contiguous.permute().contiguous.permute", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["", "def", "generate_anchors", "(", "self", ",", "grid_sizes", ")", ":", "\n", "        ", "assert", "len", "(", "grid_sizes", ")", "==", "self", ".", "num_of_anchor_sets", "\n", "all_anchors", "=", "[", "]", "\n", "num_anchors_per_location", "=", "[", "]", "\n", "for", "grid_size", ",", "anchor_size", ",", "anchor_rotation", ",", "anchor_height", ",", "align_center", "in", "zip", "(", "\n", "grid_sizes", ",", "self", ".", "anchor_sizes", ",", "self", ".", "anchor_rotations", ",", "self", ".", "anchor_heights", ",", "self", ".", "align_center", ")", ":", "\n", "\n", "            ", "num_anchors_per_location", ".", "append", "(", "len", "(", "anchor_rotation", ")", "*", "len", "(", "anchor_size", ")", "*", "len", "(", "anchor_height", ")", ")", "\n", "if", "align_center", ":", "\n", "                ", "x_stride", "=", "(", "self", ".", "anchor_range", "[", "3", "]", "-", "self", ".", "anchor_range", "[", "0", "]", ")", "/", "grid_size", "[", "0", "]", "\n", "y_stride", "=", "(", "self", ".", "anchor_range", "[", "4", "]", "-", "self", ".", "anchor_range", "[", "1", "]", ")", "/", "grid_size", "[", "1", "]", "\n", "x_offset", ",", "y_offset", "=", "x_stride", "/", "2", ",", "y_stride", "/", "2", "\n", "", "else", ":", "\n", "                ", "x_stride", "=", "(", "self", ".", "anchor_range", "[", "3", "]", "-", "self", ".", "anchor_range", "[", "0", "]", ")", "/", "(", "grid_size", "[", "0", "]", "-", "1", ")", "\n", "y_stride", "=", "(", "self", ".", "anchor_range", "[", "4", "]", "-", "self", ".", "anchor_range", "[", "1", "]", ")", "/", "(", "grid_size", "[", "1", "]", "-", "1", ")", "\n", "x_offset", ",", "y_offset", "=", "0", ",", "0", "\n", "\n", "", "x_shifts", "=", "torch", ".", "arange", "(", "\n", "self", ".", "anchor_range", "[", "0", "]", "+", "x_offset", ",", "self", ".", "anchor_range", "[", "3", "]", "+", "1e-5", ",", "step", "=", "x_stride", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "y_shifts", "=", "torch", ".", "arange", "(", "\n", "self", ".", "anchor_range", "[", "1", "]", "+", "y_offset", ",", "self", ".", "anchor_range", "[", "4", "]", "+", "1e-5", ",", "step", "=", "y_stride", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "z_shifts", "=", "x_shifts", ".", "new_tensor", "(", "anchor_height", ")", "\n", "\n", "num_anchor_size", ",", "num_anchor_rotation", "=", "anchor_size", ".", "__len__", "(", ")", ",", "anchor_rotation", ".", "__len__", "(", ")", "\n", "anchor_rotation", "=", "x_shifts", ".", "new_tensor", "(", "anchor_rotation", ")", "\n", "anchor_size", "=", "x_shifts", ".", "new_tensor", "(", "anchor_size", ")", "\n", "x_shifts", ",", "y_shifts", ",", "z_shifts", "=", "torch", ".", "meshgrid", "(", "[", "\n", "x_shifts", ",", "y_shifts", ",", "z_shifts", "\n", "]", ")", "# [x_grid, y_grid, z_grid]", "\n", "anchors", "=", "torch", ".", "stack", "(", "(", "x_shifts", ",", "y_shifts", ",", "z_shifts", ")", ",", "dim", "=", "-", "1", ")", "# [x, y, z, 3]", "\n", "anchors", "=", "anchors", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "anchor_size", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "anchor_size", "=", "anchor_size", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ",", "3", ")", ".", "repeat", "(", "[", "*", "anchors", ".", "shape", "[", "0", ":", "3", "]", ",", "1", ",", "1", "]", ")", "\n", "anchors", "=", "torch", ".", "cat", "(", "(", "anchors", ",", "anchor_size", ")", ",", "dim", "=", "-", "1", ")", "\n", "anchors", "=", "anchors", "[", ":", ",", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ",", "num_anchor_rotation", ",", "1", ")", "\n", "anchor_rotation", "=", "anchor_rotation", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ",", "-", "1", ",", "1", ")", ".", "repeat", "(", "[", "*", "anchors", ".", "shape", "[", "0", ":", "3", "]", ",", "num_anchor_size", ",", "1", ",", "1", "]", ")", "\n", "anchors", "=", "torch", ".", "cat", "(", "(", "anchors", ",", "anchor_rotation", ")", ",", "dim", "=", "-", "1", ")", "# [x, y, z, num_size, num_rot, 7]", "\n", "\n", "anchors", "=", "anchors", ".", "permute", "(", "2", ",", "1", ",", "0", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "#anchors = anchors.view(-1, anchors.shape[-1])", "\n", "anchors", "[", "...", ",", "2", "]", "+=", "anchors", "[", "...", ",", "5", "]", "/", "2", "# shift to box centers", "\n", "all_anchors", ".", "append", "(", "anchors", ")", "\n", "", "return", "all_anchors", ",", "num_anchors_per_location", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.__init__": [[9, 28], ["object.__init__", "numpy.array", "model_cfg.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "class_names", ",", "box_coder", ",", "match_height", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "anchor_generator_cfg", "=", "model_cfg", ".", "ANCHOR_GENERATOR_CONFIG", "\n", "anchor_target_cfg", "=", "model_cfg", ".", "TARGET_ASSIGNER_CONFIG", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "match_height", "=", "match_height", "\n", "self", ".", "class_names", "=", "np", ".", "array", "(", "class_names", ")", "\n", "self", ".", "anchor_class_names", "=", "[", "config", "[", "'class_name'", "]", "for", "config", "in", "anchor_generator_cfg", "]", "\n", "self", ".", "pos_fraction", "=", "anchor_target_cfg", ".", "POS_FRACTION", "if", "anchor_target_cfg", ".", "POS_FRACTION", ">=", "0", "else", "None", "\n", "self", ".", "sample_size", "=", "anchor_target_cfg", ".", "SAMPLE_SIZE", "\n", "self", ".", "norm_by_num_examples", "=", "anchor_target_cfg", ".", "NORM_BY_NUM_EXAMPLES", "\n", "self", ".", "matched_thresholds", "=", "{", "}", "\n", "self", ".", "unmatched_thresholds", "=", "{", "}", "\n", "for", "config", "in", "anchor_generator_cfg", ":", "\n", "            ", "self", ".", "matched_thresholds", "[", "config", "[", "'class_name'", "]", "]", "=", "config", "[", "'matched_threshold'", "]", "\n", "self", ".", "unmatched_thresholds", "[", "config", "[", "'class_name'", "]", "]", "=", "config", "[", "'unmatched_threshold'", "]", "\n", "\n", "", "self", ".", "use_multihead", "=", "model_cfg", ".", "get", "(", "'USE_MULTIHEAD'", ",", "False", ")", "\n", "# self.separate_multihead = model_cfg.get('SEPARATE_MULTIHEAD', False)", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets": [[36, 131], ["range", "torch.stack", "torch.stack", "torch.stack", "[].int", "zip", "torch.stack.append", "torch.stack.append", "torch.stack.append", "cur_gt.__len__", "axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets_single", "target_list.append", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "cur_gt[].sum", "torch.from_numpy", "torch.tensor", "anchors.view.view.permute().contiguous().view", "anchors.view.view.view", "t[].view", "t[].view", "t[].view", "torch.cat", "torch.cat", "t[].view", "t[].view", "t[].view", "torch.cat", "torch.cat", "torch.cat", "anchors.view.view.permute().contiguous", "anchors.view.view.permute", "[].int.cpu"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets_single"], ["", "def", "assign_targets", "(", "self", ",", "all_anchors", ",", "gt_boxes_with_classes", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            all_anchors: [(N, 7), ...]\n            gt_boxes: (B, M, 8)\n        Returns:\n\n        \"\"\"", "\n", "\n", "bbox_targets", "=", "[", "]", "\n", "cls_labels", "=", "[", "]", "\n", "reg_weights", "=", "[", "]", "\n", "\n", "batch_size", "=", "gt_boxes_with_classes", ".", "shape", "[", "0", "]", "\n", "gt_classes", "=", "gt_boxes_with_classes", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "gt_boxes", "=", "gt_boxes_with_classes", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_gt", "=", "gt_boxes", "[", "k", "]", "\n", "cnt", "=", "cur_gt", ".", "__len__", "(", ")", "-", "1", "\n", "while", "cnt", ">", "0", "and", "cur_gt", "[", "cnt", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "cnt", "-=", "1", "\n", "", "cur_gt", "=", "cur_gt", "[", ":", "cnt", "+", "1", "]", "\n", "cur_gt_classes", "=", "gt_classes", "[", "k", "]", "[", ":", "cnt", "+", "1", "]", ".", "int", "(", ")", "\n", "\n", "target_list", "=", "[", "]", "\n", "for", "anchor_class_name", ",", "anchors", "in", "zip", "(", "self", ".", "anchor_class_names", ",", "all_anchors", ")", ":", "\n", "                ", "if", "cur_gt_classes", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                    ", "mask", "=", "torch", ".", "from_numpy", "(", "self", ".", "class_names", "[", "cur_gt_classes", ".", "cpu", "(", ")", "-", "1", "]", "==", "anchor_class_name", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "torch", ".", "tensor", "(", "[", "self", ".", "class_names", "[", "c", "-", "1", "]", "==", "anchor_class_name", "\n", "for", "c", "in", "cur_gt_classes", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "", "if", "self", ".", "use_multihead", ":", "\n", "                    ", "anchors", "=", "anchors", ".", "permute", "(", "3", ",", "4", ",", "0", ",", "1", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "# if self.seperate_multihead:", "\n", "#     selected_classes = cur_gt_classes[mask].clone()", "\n", "#     if len(selected_classes) > 0:", "\n", "#         new_cls_id = self.gt_remapping[anchor_class_name]", "\n", "#         selected_classes[:] = new_cls_id", "\n", "# else:", "\n", "#     selected_classes = cur_gt_classes[mask]", "\n", "selected_classes", "=", "cur_gt_classes", "[", "mask", "]", "\n", "", "else", ":", "\n", "                    ", "feature_map_size", "=", "anchors", ".", "shape", "[", ":", "3", "]", "\n", "anchors", "=", "anchors", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "selected_classes", "=", "cur_gt_classes", "[", "mask", "]", "\n", "\n", "", "single_target", "=", "self", ".", "assign_targets_single", "(", "\n", "anchors", ",", "\n", "cur_gt", "[", "mask", "]", ",", "\n", "gt_classes", "=", "selected_classes", ",", "\n", "matched_threshold", "=", "self", ".", "matched_thresholds", "[", "anchor_class_name", "]", ",", "\n", "unmatched_threshold", "=", "self", ".", "unmatched_thresholds", "[", "anchor_class_name", "]", "\n", ")", "\n", "target_list", ".", "append", "(", "single_target", ")", "\n", "\n", "", "if", "self", ".", "use_multihead", ":", "\n", "                ", "target_dict", "=", "{", "\n", "'box_cls_labels'", ":", "[", "t", "[", "'box_cls_labels'", "]", ".", "view", "(", "-", "1", ")", "for", "t", "in", "target_list", "]", ",", "\n", "'box_reg_targets'", ":", "[", "t", "[", "'box_reg_targets'", "]", ".", "view", "(", "-", "1", ",", "self", ".", "box_coder", ".", "code_size", ")", "for", "t", "in", "target_list", "]", ",", "\n", "'reg_weights'", ":", "[", "t", "[", "'reg_weights'", "]", ".", "view", "(", "-", "1", ")", "for", "t", "in", "target_list", "]", "\n", "}", "\n", "\n", "target_dict", "[", "'box_reg_targets'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'box_reg_targets'", "]", ",", "dim", "=", "0", ")", "\n", "target_dict", "[", "'box_cls_labels'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'box_cls_labels'", "]", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "target_dict", "[", "'reg_weights'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'reg_weights'", "]", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "target_dict", "=", "{", "\n", "'box_cls_labels'", ":", "[", "t", "[", "'box_cls_labels'", "]", ".", "view", "(", "*", "feature_map_size", ",", "-", "1", ")", "for", "t", "in", "target_list", "]", ",", "\n", "'box_reg_targets'", ":", "[", "t", "[", "'box_reg_targets'", "]", ".", "view", "(", "*", "feature_map_size", ",", "-", "1", ",", "self", ".", "box_coder", ".", "code_size", ")", "\n", "for", "t", "in", "target_list", "]", ",", "\n", "'reg_weights'", ":", "[", "t", "[", "'reg_weights'", "]", ".", "view", "(", "*", "feature_map_size", ",", "-", "1", ")", "for", "t", "in", "target_list", "]", "\n", "}", "\n", "target_dict", "[", "'box_reg_targets'", "]", "=", "torch", ".", "cat", "(", "\n", "target_dict", "[", "'box_reg_targets'", "]", ",", "dim", "=", "-", "2", "\n", ")", ".", "view", "(", "-", "1", ",", "self", ".", "box_coder", ".", "code_size", ")", "\n", "\n", "target_dict", "[", "'box_cls_labels'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'box_cls_labels'", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "target_dict", "[", "'reg_weights'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'reg_weights'", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "bbox_targets", ".", "append", "(", "target_dict", "[", "'box_reg_targets'", "]", ")", "\n", "cls_labels", ".", "append", "(", "target_dict", "[", "'box_cls_labels'", "]", ")", "\n", "reg_weights", ".", "append", "(", "target_dict", "[", "'reg_weights'", "]", ")", "\n", "\n", "", "bbox_targets", "=", "torch", ".", "stack", "(", "bbox_targets", ",", "dim", "=", "0", ")", "\n", "\n", "cls_labels", "=", "torch", ".", "stack", "(", "cls_labels", ",", "dim", "=", "0", ")", "\n", "reg_weights", "=", "torch", ".", "stack", "(", "reg_weights", ",", "dim", "=", "0", ")", "\n", "all_targets_dict", "=", "{", "\n", "'box_cls_labels'", ":", "cls_labels", ",", "\n", "'box_reg_targets'", ":", "bbox_targets", ",", "\n", "'reg_weights'", ":", "reg_weights", "\n", "\n", "}", "\n", "return", "all_targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets_single": [[132, 211], ["anchors.new_zeros", "anchors.new_zeros", "torch.ones", "torch.ones", "anchor_by_gt_overlap.argmax", "anchor_by_gt_overlap.argmax", "gt_inds_force.int", "gt_inds_over_thresh.int", "torch.arange", "int", "axis_aligned_target_assigner.AxisAlignedTargetAssigner.box_coder.encode_torch", "len", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "utils.box_utils.boxes3d_nearest_bev_iou", "len", "len", "len", "len", "torch.randperm", "len", "torch.arange", "torch.arange", "len", "torch.randint", "len"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.encode_torch", "home.repos.pwc.inspect_result.dschinagl_occam.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.boxes3d_nearest_bev_iou"], ["", "def", "assign_targets_single", "(", "self", ",", "anchors", ",", "gt_boxes", ",", "gt_classes", ",", "matched_threshold", "=", "0.6", ",", "unmatched_threshold", "=", "0.45", ")", ":", "\n", "\n", "        ", "num_anchors", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "labels", "=", "torch", ".", "ones", "(", "(", "num_anchors", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "anchors", ".", "device", ")", "*", "-", "1", "\n", "gt_ids", "=", "torch", ".", "ones", "(", "(", "num_anchors", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "anchors", ".", "device", ")", "*", "-", "1", "\n", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "anchor_by_gt_overlap", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "anchors", "[", ":", ",", "0", ":", "7", "]", ",", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "if", "self", ".", "match_height", "else", "box_utils", ".", "boxes3d_nearest_bev_iou", "(", "anchors", "[", ":", ",", "0", ":", "7", "]", ",", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "\n", "# NOTE: The speed of these two versions depends the environment and the number of anchors", "\n", "# anchor_to_gt_argmax = torch.from_numpy(anchor_by_gt_overlap.cpu().numpy().argmax(axis=1)).cuda()", "\n", "anchor_to_gt_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "anchor_to_gt_max", "=", "anchor_by_gt_overlap", "[", "torch", ".", "arange", "(", "num_anchors", ",", "device", "=", "anchors", ".", "device", ")", ",", "anchor_to_gt_argmax", "]", "\n", "\n", "# gt_to_anchor_argmax = torch.from_numpy(anchor_by_gt_overlap.cpu().numpy().argmax(axis=0)).cuda()", "\n", "gt_to_anchor_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "dim", "=", "0", ")", "\n", "gt_to_anchor_max", "=", "anchor_by_gt_overlap", "[", "gt_to_anchor_argmax", ",", "torch", ".", "arange", "(", "num_gt", ",", "device", "=", "anchors", ".", "device", ")", "]", "\n", "empty_gt_mask", "=", "gt_to_anchor_max", "==", "0", "\n", "gt_to_anchor_max", "[", "empty_gt_mask", "]", "=", "-", "1", "\n", "\n", "anchors_with_max_overlap", "=", "(", "anchor_by_gt_overlap", "==", "gt_to_anchor_max", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "gt_inds_force", "=", "anchor_to_gt_argmax", "[", "anchors_with_max_overlap", "]", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "gt_ids", "[", "anchors_with_max_overlap", "]", "=", "gt_inds_force", ".", "int", "(", ")", "\n", "\n", "pos_inds", "=", "anchor_to_gt_max", ">=", "matched_threshold", "\n", "gt_inds_over_thresh", "=", "anchor_to_gt_argmax", "[", "pos_inds", "]", "\n", "labels", "[", "pos_inds", "]", "=", "gt_classes", "[", "gt_inds_over_thresh", "]", "\n", "gt_ids", "[", "pos_inds", "]", "=", "gt_inds_over_thresh", ".", "int", "(", ")", "\n", "bg_inds", "=", "(", "anchor_to_gt_max", "<", "unmatched_threshold", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "bg_inds", "=", "torch", ".", "arange", "(", "num_anchors", ",", "device", "=", "anchors", ".", "device", ")", "\n", "\n", "", "fg_inds", "=", "(", "labels", ">", "0", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "\n", "if", "self", ".", "pos_fraction", "is", "not", "None", ":", "\n", "            ", "num_fg", "=", "int", "(", "self", ".", "pos_fraction", "*", "self", ".", "sample_size", ")", "\n", "if", "len", "(", "fg_inds", ")", ">", "num_fg", ":", "\n", "                ", "num_disabled", "=", "len", "(", "fg_inds", ")", "-", "num_fg", "\n", "disable_inds", "=", "torch", ".", "randperm", "(", "len", "(", "fg_inds", ")", ")", "[", ":", "num_disabled", "]", "\n", "labels", "[", "disable_inds", "]", "=", "-", "1", "\n", "fg_inds", "=", "(", "labels", ">", "0", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "\n", "", "num_bg", "=", "self", ".", "sample_size", "-", "(", "labels", ">", "0", ")", ".", "sum", "(", ")", "\n", "if", "len", "(", "bg_inds", ")", ">", "num_bg", ":", "\n", "                ", "enable_inds", "=", "bg_inds", "[", "torch", ".", "randint", "(", "0", ",", "len", "(", "bg_inds", ")", ",", "size", "=", "(", "num_bg", ",", ")", ")", "]", "\n", "labels", "[", "enable_inds", "]", "=", "0", "\n", "# bg_inds = torch.nonzero(labels == 0)[:, 0]", "\n", "", "", "else", ":", "\n", "            ", "if", "len", "(", "gt_boxes", ")", "==", "0", "or", "anchors", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "labels", "[", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "labels", "[", "bg_inds", "]", "=", "0", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "\n", "", "", "bbox_targets", "=", "anchors", ".", "new_zeros", "(", "(", "num_anchors", ",", "self", ".", "box_coder", ".", "code_size", ")", ")", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "fg_gt_boxes", "=", "gt_boxes", "[", "anchor_to_gt_argmax", "[", "fg_inds", "]", ",", ":", "]", "\n", "fg_anchors", "=", "anchors", "[", "fg_inds", ",", ":", "]", "\n", "bbox_targets", "[", "fg_inds", ",", ":", "]", "=", "self", ".", "box_coder", ".", "encode_torch", "(", "fg_gt_boxes", ",", "fg_anchors", ")", "\n", "\n", "", "reg_weights", "=", "anchors", ".", "new_zeros", "(", "(", "num_anchors", ",", ")", ")", "\n", "\n", "if", "self", ".", "norm_by_num_examples", ":", "\n", "            ", "num_examples", "=", "(", "labels", ">=", "0", ")", ".", "sum", "(", ")", "\n", "num_examples", "=", "num_examples", "if", "num_examples", ">", "1.0", "else", "1.0", "\n", "reg_weights", "[", "labels", ">", "0", "]", "=", "1.0", "/", "num_examples", "\n", "", "else", ":", "\n", "            ", "reg_weights", "[", "labels", ">", "0", "]", "=", "1.0", "\n", "\n", "", "ret_dict", "=", "{", "\n", "'box_cls_labels'", ":", "labels", ",", "\n", "'box_reg_targets'", ":", "bbox_targets", ",", "\n", "'reg_weights'", ":", "reg_weights", ",", "\n", "}", "\n", "return", "ret_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.SeparateHead.__init__": [[12, 39], ["torch.Module.__init__", "range", "fc_list.append", "torch.Sequential", "torch.Sequential", "center_head.SeparateHead.__setattr__", "fc_list.append", "torch.Conv2d", "torch.Conv2d", "fc[].bias.data.fill_", "torch.Sequential.modules", "torch.Sequential", "torch.Sequential", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "hasattr", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "sep_head_dict", ",", "init_bias", "=", "-", "2.19", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sep_head_dict", "=", "sep_head_dict", "\n", "\n", "for", "cur_name", "in", "self", ".", "sep_head_dict", ":", "\n", "            ", "output_channels", "=", "self", ".", "sep_head_dict", "[", "cur_name", "]", "[", "'out_channels'", "]", "\n", "num_conv", "=", "self", ".", "sep_head_dict", "[", "cur_name", "]", "[", "'num_conv'", "]", "\n", "\n", "fc_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_conv", "-", "1", ")", ":", "\n", "                ", "fc_list", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "input_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "input_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", ")", "\n", "", "fc_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "fc", "=", "nn", ".", "Sequential", "(", "*", "fc_list", ")", "\n", "if", "'hm'", "in", "cur_name", ":", "\n", "                ", "fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "init_bias", ")", "\n", "", "else", ":", "\n", "                ", "for", "m", "in", "fc", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                        ", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "self", ".", "__setattr__", "(", "cur_name", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.SeparateHead.forward": [[40, 46], ["center_head.SeparateHead.__getattr__"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ret_dict", "=", "{", "}", "\n", "for", "cur_name", "in", "self", ".", "sep_head_dict", ":", "\n", "            ", "ret_dict", "[", "cur_name", "]", "=", "self", ".", "__getattr__", "(", "cur_name", ")", "(", "x", ")", "\n", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.__init__": [[49, 98], ["torch.Module.__init__", "center_head.CenterHead.model_cfg.TARGET_ASSIGNER_CONFIG.get", "sum", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "center_head.CenterHead.build_losses", "center_head.CenterHead.class_names_each_head.append", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "center_head.CenterHead.class_id_mapping_each_head.append", "len", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "copy.deepcopy", "dict", "center_head.CenterHead.heads_list.append", "len", "center_head.SeparateHead", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "center_head.CenterHead.model_cfg.get", "len", "numpy.array", "center_head.CenterHead.model_cfg.get", "center_head.CenterHead.class_names.index"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.build_losses"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "num_class", ",", "class_names", ",", "grid_size", ",", "point_cloud_range", ",", "voxel_size", ",", "\n", "predict_boxes_when_training", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "self", ".", "voxel_size", "=", "voxel_size", "\n", "self", ".", "feature_map_stride", "=", "self", ".", "model_cfg", ".", "TARGET_ASSIGNER_CONFIG", ".", "get", "(", "'FEATURE_MAP_STRIDE'", ",", "None", ")", "\n", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "class_names_each_head", "=", "[", "]", "\n", "self", ".", "class_id_mapping_each_head", "=", "[", "]", "\n", "\n", "for", "cur_class_names", "in", "self", ".", "model_cfg", ".", "CLASS_NAMES_EACH_HEAD", ":", "\n", "            ", "self", ".", "class_names_each_head", ".", "append", "(", "[", "x", "for", "x", "in", "cur_class_names", "if", "x", "in", "class_names", "]", ")", "\n", "cur_class_id_mapping", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "\n", "[", "self", ".", "class_names", ".", "index", "(", "x", ")", "for", "x", "in", "cur_class_names", "if", "x", "in", "class_names", "]", "\n", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "class_id_mapping_each_head", ".", "append", "(", "cur_class_id_mapping", ")", "\n", "\n", "", "total_classes", "=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "class_names_each_head", "]", ")", "\n", "assert", "total_classes", "==", "len", "(", "self", ".", "class_names", ")", ",", "f'class_names_each_head={self.class_names_each_head}'", "\n", "\n", "self", ".", "shared_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "self", ".", "model_cfg", ".", "SHARED_CONV_CHANNEL", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "self", ".", "model_cfg", ".", "get", "(", "'USE_BIAS_BEFORE_NORM'", ",", "False", ")", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "model_cfg", ".", "SHARED_CONV_CHANNEL", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "heads_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "separate_head_cfg", "=", "self", ".", "model_cfg", ".", "SEPARATE_HEAD_CFG", "\n", "for", "idx", ",", "cur_class_names", "in", "enumerate", "(", "self", ".", "class_names_each_head", ")", ":", "\n", "            ", "cur_head_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "separate_head_cfg", ".", "HEAD_DICT", ")", "\n", "cur_head_dict", "[", "'hm'", "]", "=", "dict", "(", "out_channels", "=", "len", "(", "cur_class_names", ")", ",", "num_conv", "=", "self", ".", "model_cfg", ".", "NUM_HM_CONV", ")", "\n", "self", ".", "heads_list", ".", "append", "(", "\n", "SeparateHead", "(", "\n", "input_channels", "=", "self", ".", "model_cfg", ".", "SHARED_CONV_CHANNEL", ",", "\n", "sep_head_dict", "=", "cur_head_dict", ",", "\n", "init_bias", "=", "-", "2.19", ",", "\n", "use_bias", "=", "self", ".", "model_cfg", ".", "get", "(", "'USE_BIAS_BEFORE_NORM'", ",", "False", ")", "\n", ")", "\n", ")", "\n", "", "self", ".", "predict_boxes_when_training", "=", "predict_boxes_when_training", "\n", "self", ".", "forward_ret_dict", "=", "{", "}", "\n", "self", ".", "build_losses", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.build_losses": [[99, 102], ["center_head.CenterHead.add_module", "center_head.CenterHead.add_module", "utils.loss_utils.FocalLossCenterNet", "utils.loss_utils.RegLossCenterNet"], "methods", ["None"], ["", "def", "build_losses", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "'hm_loss_func'", ",", "loss_utils", ".", "FocalLossCenterNet", "(", ")", ")", "\n", "self", ".", "add_module", "(", "'reg_loss_func'", ",", "loss_utils", ".", "RegLossCenterNet", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.assign_target_of_single_head": [[103, 158], ["gt_boxes.new_zeros", "gt_boxes.new_zeros", "gt_boxes.new_zeros().long", "gt_boxes.new_zeros().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.int", "torch.cat.int", "torch.cat.int.float", "model_utils.centernet_utils.gaussian_radius", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "range", "torch.clamp_min.int", "torch.clamp_min.int", "min", "model_utils.centernet_utils.draw_gaussian_to_heatmap", "gt_boxes[].log", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "gt_boxes.new_zeros", "gt_boxes.new_zeros", "radius[].item", "center_int_float[].float"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.gaussian_radius", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.draw_gaussian_to_heatmap"], ["", "def", "assign_target_of_single_head", "(", "\n", "self", ",", "num_classes", ",", "gt_boxes", ",", "feature_map_size", ",", "feature_map_stride", ",", "num_max_objs", "=", "500", ",", "\n", "gaussian_overlap", "=", "0.1", ",", "min_radius", "=", "2", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gt_boxes: (N, 8)\n            feature_map_size: (2), [x, y]\n\n        Returns:\n\n        \"\"\"", "\n", "heatmap", "=", "gt_boxes", ".", "new_zeros", "(", "num_classes", ",", "feature_map_size", "[", "1", "]", ",", "feature_map_size", "[", "0", "]", ")", "\n", "ret_boxes", "=", "gt_boxes", ".", "new_zeros", "(", "(", "num_max_objs", ",", "gt_boxes", ".", "shape", "[", "-", "1", "]", "-", "1", "+", "1", ")", ")", "\n", "inds", "=", "gt_boxes", ".", "new_zeros", "(", "num_max_objs", ")", ".", "long", "(", ")", "\n", "mask", "=", "gt_boxes", ".", "new_zeros", "(", "num_max_objs", ")", ".", "long", "(", ")", "\n", "\n", "x", ",", "y", ",", "z", "=", "gt_boxes", "[", ":", ",", "0", "]", ",", "gt_boxes", "[", ":", ",", "1", "]", ",", "gt_boxes", "[", ":", ",", "2", "]", "\n", "coord_x", "=", "(", "x", "-", "self", ".", "point_cloud_range", "[", "0", "]", ")", "/", "self", ".", "voxel_size", "[", "0", "]", "/", "feature_map_stride", "\n", "coord_y", "=", "(", "y", "-", "self", ".", "point_cloud_range", "[", "1", "]", ")", "/", "self", ".", "voxel_size", "[", "1", "]", "/", "feature_map_stride", "\n", "coord_x", "=", "torch", ".", "clamp", "(", "coord_x", ",", "min", "=", "0", ",", "max", "=", "feature_map_size", "[", "0", "]", "-", "0.5", ")", "# bugfixed: 1e-6 does not work for center.int()", "\n", "coord_y", "=", "torch", ".", "clamp", "(", "coord_y", ",", "min", "=", "0", ",", "max", "=", "feature_map_size", "[", "1", "]", "-", "0.5", ")", "#", "\n", "center", "=", "torch", ".", "cat", "(", "(", "coord_x", "[", ":", ",", "None", "]", ",", "coord_y", "[", ":", ",", "None", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "center_int", "=", "center", ".", "int", "(", ")", "\n", "center_int_float", "=", "center_int", ".", "float", "(", ")", "\n", "\n", "dx", ",", "dy", ",", "dz", "=", "gt_boxes", "[", ":", ",", "3", "]", ",", "gt_boxes", "[", ":", ",", "4", "]", ",", "gt_boxes", "[", ":", ",", "5", "]", "\n", "dx", "=", "dx", "/", "self", ".", "voxel_size", "[", "0", "]", "/", "feature_map_stride", "\n", "dy", "=", "dy", "/", "self", ".", "voxel_size", "[", "1", "]", "/", "feature_map_stride", "\n", "\n", "radius", "=", "centernet_utils", ".", "gaussian_radius", "(", "dx", ",", "dy", ",", "min_overlap", "=", "gaussian_overlap", ")", "\n", "radius", "=", "torch", ".", "clamp_min", "(", "radius", ".", "int", "(", ")", ",", "min", "=", "min_radius", ")", "\n", "\n", "for", "k", "in", "range", "(", "min", "(", "num_max_objs", ",", "gt_boxes", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "dx", "[", "k", "]", "<=", "0", "or", "dy", "[", "k", "]", "<=", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "not", "(", "0", "<=", "center_int", "[", "k", "]", "[", "0", "]", "<=", "feature_map_size", "[", "0", "]", "and", "0", "<=", "center_int", "[", "k", "]", "[", "1", "]", "<=", "feature_map_size", "[", "1", "]", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "cur_class_id", "=", "(", "gt_boxes", "[", "k", ",", "-", "1", "]", "-", "1", ")", ".", "long", "(", ")", "\n", "centernet_utils", ".", "draw_gaussian_to_heatmap", "(", "heatmap", "[", "cur_class_id", "]", ",", "center", "[", "k", "]", ",", "radius", "[", "k", "]", ".", "item", "(", ")", ")", "\n", "\n", "inds", "[", "k", "]", "=", "center_int", "[", "k", ",", "1", "]", "*", "feature_map_size", "[", "0", "]", "+", "center_int", "[", "k", ",", "0", "]", "\n", "mask", "[", "k", "]", "=", "1", "\n", "\n", "ret_boxes", "[", "k", ",", "0", ":", "2", "]", "=", "center", "[", "k", "]", "-", "center_int_float", "[", "k", "]", ".", "float", "(", ")", "\n", "ret_boxes", "[", "k", ",", "2", "]", "=", "z", "[", "k", "]", "\n", "ret_boxes", "[", "k", ",", "3", ":", "6", "]", "=", "gt_boxes", "[", "k", ",", "3", ":", "6", "]", ".", "log", "(", ")", "\n", "ret_boxes", "[", "k", ",", "6", "]", "=", "torch", ".", "cos", "(", "gt_boxes", "[", "k", ",", "6", "]", ")", "\n", "ret_boxes", "[", "k", ",", "7", "]", "=", "torch", ".", "sin", "(", "gt_boxes", "[", "k", ",", "6", "]", ")", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", ">", "8", ":", "\n", "                ", "ret_boxes", "[", "k", ",", "8", ":", "]", "=", "gt_boxes", "[", "k", ",", "7", ":", "-", "1", "]", "\n", "\n", "", "", "return", "heatmap", ",", "ret_boxes", ",", "inds", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.assign_targets": [[159, 220], ["numpy.array", "enumerate", "range", "ret_dict[].append", "ret_dict[].append", "ret_dict[].append", "ret_dict[].append", "enumerate", "center_head.CenterHead.assign_target_of_single_head", "heatmap_list.append", "target_boxes_list.append", "inds_list.append", "masks_list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.append", "torch.cat.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "heatmap.to", "ret_boxes.to", "inds.to", "mask.to", "cur_gt_boxes[].cpu().long().numpy", "cur_class_names.index", "len", "torch.cat.cpu", "torch.cat.cpu", "cur_gt_boxes[].cpu().long", "cur_gt_boxes[].cpu"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.assign_target_of_single_head"], ["", "def", "assign_targets", "(", "self", ",", "gt_boxes", ",", "feature_map_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gt_boxes: (B, M, 8)\n            range_image_polar: (B, 3, H, W)\n            feature_map_size: (2) [H, W]\n            spatial_cartesian: (B, 4, H, W)\n        Returns:\n\n        \"\"\"", "\n", "feature_map_size", "=", "feature_map_size", "[", ":", ":", "-", "1", "]", "# [H, W] ==> [x, y]", "\n", "target_assigner_cfg", "=", "self", ".", "model_cfg", ".", "TARGET_ASSIGNER_CONFIG", "\n", "# feature_map_size = self.grid_size[:2] // target_assigner_cfg.FEATURE_MAP_STRIDE", "\n", "\n", "batch_size", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "ret_dict", "=", "{", "\n", "'heatmaps'", ":", "[", "]", ",", "\n", "'target_boxes'", ":", "[", "]", ",", "\n", "'inds'", ":", "[", "]", ",", "\n", "'masks'", ":", "[", "]", ",", "\n", "'heatmap_masks'", ":", "[", "]", "\n", "}", "\n", "\n", "all_names", "=", "np", ".", "array", "(", "[", "'bg'", ",", "*", "self", ".", "class_names", "]", ")", "\n", "for", "idx", ",", "cur_class_names", "in", "enumerate", "(", "self", ".", "class_names_each_head", ")", ":", "\n", "            ", "heatmap_list", ",", "target_boxes_list", ",", "inds_list", ",", "masks_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "cur_gt_boxes", "=", "gt_boxes", "[", "bs_idx", "]", "\n", "gt_class_names", "=", "all_names", "[", "cur_gt_boxes", "[", ":", ",", "-", "1", "]", ".", "cpu", "(", ")", ".", "long", "(", ")", ".", "numpy", "(", ")", "]", "\n", "\n", "gt_boxes_single_head", "=", "[", "]", "\n", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "gt_class_names", ")", ":", "\n", "                    ", "if", "name", "not", "in", "cur_class_names", ":", "\n", "                        ", "continue", "\n", "", "temp_box", "=", "cur_gt_boxes", "[", "idx", "]", "\n", "temp_box", "[", "-", "1", "]", "=", "cur_class_names", ".", "index", "(", "name", ")", "+", "1", "\n", "gt_boxes_single_head", ".", "append", "(", "temp_box", "[", "None", ",", ":", "]", ")", "\n", "\n", "", "if", "len", "(", "gt_boxes_single_head", ")", "==", "0", ":", "\n", "                    ", "gt_boxes_single_head", "=", "cur_gt_boxes", "[", ":", "0", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "gt_boxes_single_head", "=", "torch", ".", "cat", "(", "gt_boxes_single_head", ",", "dim", "=", "0", ")", "\n", "\n", "", "heatmap", ",", "ret_boxes", ",", "inds", ",", "mask", "=", "self", ".", "assign_target_of_single_head", "(", "\n", "num_classes", "=", "len", "(", "cur_class_names", ")", ",", "gt_boxes", "=", "gt_boxes_single_head", ".", "cpu", "(", ")", ",", "\n", "feature_map_size", "=", "feature_map_size", ",", "feature_map_stride", "=", "target_assigner_cfg", ".", "FEATURE_MAP_STRIDE", ",", "\n", "num_max_objs", "=", "target_assigner_cfg", ".", "NUM_MAX_OBJS", ",", "\n", "gaussian_overlap", "=", "target_assigner_cfg", ".", "GAUSSIAN_OVERLAP", ",", "\n", "min_radius", "=", "target_assigner_cfg", ".", "MIN_RADIUS", ",", "\n", ")", "\n", "heatmap_list", ".", "append", "(", "heatmap", ".", "to", "(", "gt_boxes_single_head", ".", "device", ")", ")", "\n", "target_boxes_list", ".", "append", "(", "ret_boxes", ".", "to", "(", "gt_boxes_single_head", ".", "device", ")", ")", "\n", "inds_list", ".", "append", "(", "inds", ".", "to", "(", "gt_boxes_single_head", ".", "device", ")", ")", "\n", "masks_list", ".", "append", "(", "mask", ".", "to", "(", "gt_boxes_single_head", ".", "device", ")", ")", "\n", "\n", "", "ret_dict", "[", "'heatmaps'", "]", ".", "append", "(", "torch", ".", "stack", "(", "heatmap_list", ",", "dim", "=", "0", ")", ")", "\n", "ret_dict", "[", "'target_boxes'", "]", ".", "append", "(", "torch", ".", "stack", "(", "target_boxes_list", ",", "dim", "=", "0", ")", ")", "\n", "ret_dict", "[", "'inds'", "]", ".", "append", "(", "torch", ".", "stack", "(", "inds_list", ",", "dim", "=", "0", ")", ")", "\n", "ret_dict", "[", "'masks'", "]", ".", "append", "(", "torch", ".", "stack", "(", "masks_list", ",", "dim", "=", "0", ")", ")", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid": [[221, 224], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "x.sigmoid"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid"], ["", "def", "sigmoid", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "torch", ".", "clamp", "(", "x", ".", "sigmoid", "(", ")", ",", "min", "=", "1e-4", ",", "max", "=", "1", "-", "1e-4", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.get_loss": [[225, 252], ["enumerate", "loss.item", "center_head.CenterHead.sigmoid", "center_head.CenterHead.hm_loss_func", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "center_head.CenterHead.reg_loss_func", "center_head.CenterHead.item", "loc_loss.item", "center_head.CenterHead.new_tensor"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "pred_dicts", "=", "self", ".", "forward_ret_dict", "[", "'pred_dicts'", "]", "\n", "target_dicts", "=", "self", ".", "forward_ret_dict", "[", "'target_dicts'", "]", "\n", "\n", "tb_dict", "=", "{", "}", "\n", "loss", "=", "0", "\n", "\n", "for", "idx", ",", "pred_dict", "in", "enumerate", "(", "pred_dicts", ")", ":", "\n", "            ", "pred_dict", "[", "'hm'", "]", "=", "self", ".", "sigmoid", "(", "pred_dict", "[", "'hm'", "]", ")", "\n", "hm_loss", "=", "self", ".", "hm_loss_func", "(", "pred_dict", "[", "'hm'", "]", ",", "target_dicts", "[", "'heatmaps'", "]", "[", "idx", "]", ")", "\n", "hm_loss", "*=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'cls_weight'", "]", "\n", "\n", "target_boxes", "=", "target_dicts", "[", "'target_boxes'", "]", "[", "idx", "]", "\n", "pred_boxes", "=", "torch", ".", "cat", "(", "[", "pred_dict", "[", "head_name", "]", "for", "head_name", "in", "self", ".", "separate_head_cfg", ".", "HEAD_ORDER", "]", ",", "dim", "=", "1", ")", "\n", "\n", "reg_loss", "=", "self", ".", "reg_loss_func", "(", "\n", "pred_boxes", ",", "target_dicts", "[", "'masks'", "]", "[", "idx", "]", ",", "target_dicts", "[", "'inds'", "]", "[", "idx", "]", ",", "target_boxes", "\n", ")", "\n", "loc_loss", "=", "(", "reg_loss", "*", "reg_loss", ".", "new_tensor", "(", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'code_weights'", "]", ")", ")", ".", "sum", "(", ")", "\n", "loc_loss", "=", "loc_loss", "*", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'loc_weight'", "]", "\n", "\n", "loss", "+=", "hm_loss", "+", "loc_loss", "\n", "tb_dict", "[", "'hm_loss_head_%d'", "%", "idx", "]", "=", "hm_loss", ".", "item", "(", ")", "\n", "tb_dict", "[", "'loc_loss_head_%d'", "%", "idx", "]", "=", "loc_loss", ".", "item", "(", ")", "\n", "\n", "", "tb_dict", "[", "'rpn_loss'", "]", "=", "loss", ".", "item", "(", ")", "\n", "return", "loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.generate_predicted_boxes": [[253, 305], ["torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "enumerate", "range", "pred_dict[].sigmoid", "pred_dict[].exp", "[].unsqueeze", "[].unsqueeze", "model_utils.centernet_utils.decode_bbox_from_heatmap", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "range", "[].append", "[].append", "[].append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_utils.model_nms_utils.class_agnostic_nms", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "final_dict[].long"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.decode_bbox_from_heatmap", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.model_nms_utils.class_agnostic_nms"], ["", "def", "generate_predicted_boxes", "(", "self", ",", "batch_size", ",", "pred_dicts", ")", ":", "\n", "        ", "post_process_cfg", "=", "self", ".", "model_cfg", ".", "POST_PROCESSING", "\n", "post_center_limit_range", "=", "torch", ".", "tensor", "(", "post_process_cfg", ".", "POST_CENTER_LIMIT_RANGE", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "ret_dict", "=", "[", "{", "\n", "'pred_boxes'", ":", "[", "]", ",", "\n", "'pred_scores'", ":", "[", "]", ",", "\n", "'pred_labels'", ":", "[", "]", ",", "\n", "}", "for", "k", "in", "range", "(", "batch_size", ")", "]", "\n", "for", "idx", ",", "pred_dict", "in", "enumerate", "(", "pred_dicts", ")", ":", "\n", "            ", "batch_hm", "=", "pred_dict", "[", "'hm'", "]", ".", "sigmoid", "(", ")", "\n", "batch_center", "=", "pred_dict", "[", "'center'", "]", "\n", "batch_center_z", "=", "pred_dict", "[", "'center_z'", "]", "\n", "batch_dim", "=", "pred_dict", "[", "'dim'", "]", ".", "exp", "(", ")", "\n", "batch_rot_cos", "=", "pred_dict", "[", "'rot'", "]", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "batch_rot_sin", "=", "pred_dict", "[", "'rot'", "]", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "batch_vel", "=", "pred_dict", "[", "'vel'", "]", "if", "'vel'", "in", "self", ".", "separate_head_cfg", ".", "HEAD_ORDER", "else", "None", "\n", "\n", "final_pred_dicts", "=", "centernet_utils", ".", "decode_bbox_from_heatmap", "(", "\n", "heatmap", "=", "batch_hm", ",", "rot_cos", "=", "batch_rot_cos", ",", "rot_sin", "=", "batch_rot_sin", ",", "\n", "center", "=", "batch_center", ",", "center_z", "=", "batch_center_z", ",", "dim", "=", "batch_dim", ",", "vel", "=", "batch_vel", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", ",", "voxel_size", "=", "self", ".", "voxel_size", ",", "\n", "feature_map_stride", "=", "self", ".", "feature_map_stride", ",", "\n", "K", "=", "post_process_cfg", ".", "MAX_OBJ_PER_SAMPLE", ",", "\n", "circle_nms", "=", "(", "post_process_cfg", ".", "NMS_CONFIG", ".", "NMS_TYPE", "==", "'circle_nms'", ")", ",", "\n", "score_thresh", "=", "post_process_cfg", ".", "SCORE_THRESH", ",", "\n", "post_center_limit_range", "=", "post_center_limit_range", "\n", ")", "\n", "\n", "for", "k", ",", "final_dict", "in", "enumerate", "(", "final_pred_dicts", ")", ":", "\n", "                ", "final_dict", "[", "'pred_labels'", "]", "=", "self", ".", "class_id_mapping_each_head", "[", "idx", "]", "[", "final_dict", "[", "'pred_labels'", "]", ".", "long", "(", ")", "]", "\n", "if", "post_process_cfg", ".", "NMS_CONFIG", ".", "NMS_TYPE", "!=", "'circle_nms'", ":", "\n", "                    ", "selected", ",", "selected_scores", "=", "model_nms_utils", ".", "class_agnostic_nms", "(", "\n", "box_scores", "=", "final_dict", "[", "'pred_scores'", "]", ",", "box_preds", "=", "final_dict", "[", "'pred_boxes'", "]", ",", "\n", "nms_config", "=", "post_process_cfg", ".", "NMS_CONFIG", ",", "\n", "score_thresh", "=", "None", "\n", ")", "\n", "\n", "final_dict", "[", "'pred_boxes'", "]", "=", "final_dict", "[", "'pred_boxes'", "]", "[", "selected", "]", "\n", "final_dict", "[", "'pred_scores'", "]", "=", "selected_scores", "\n", "final_dict", "[", "'pred_labels'", "]", "=", "final_dict", "[", "'pred_labels'", "]", "[", "selected", "]", "\n", "\n", "", "ret_dict", "[", "k", "]", "[", "'pred_boxes'", "]", ".", "append", "(", "final_dict", "[", "'pred_boxes'", "]", ")", "\n", "ret_dict", "[", "k", "]", "[", "'pred_scores'", "]", ".", "append", "(", "final_dict", "[", "'pred_scores'", "]", ")", "\n", "ret_dict", "[", "k", "]", "[", "'pred_labels'", "]", ".", "append", "(", "final_dict", "[", "'pred_labels'", "]", ")", "\n", "\n", "", "", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "ret_dict", "[", "k", "]", "[", "'pred_boxes'", "]", "=", "torch", ".", "cat", "(", "ret_dict", "[", "k", "]", "[", "'pred_boxes'", "]", ",", "dim", "=", "0", ")", "\n", "ret_dict", "[", "k", "]", "[", "'pred_scores'", "]", "=", "torch", ".", "cat", "(", "ret_dict", "[", "k", "]", "[", "'pred_scores'", "]", ",", "dim", "=", "0", ")", "\n", "ret_dict", "[", "k", "]", "[", "'pred_labels'", "]", "=", "torch", ".", "cat", "(", "ret_dict", "[", "k", "]", "[", "'pred_labels'", "]", ",", "dim", "=", "0", ")", "+", "1", "\n", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.reorder_rois_for_refining": [[306, 323], ["max", "max", "pred_boxes.new_zeros", "pred_boxes.new_zeros", "pred_boxes.new_zeros().long", "range", "len", "len", "pred_boxes.new_zeros"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "reorder_rois_for_refining", "(", "batch_size", ",", "pred_dicts", ")", ":", "\n", "        ", "num_max_rois", "=", "max", "(", "[", "len", "(", "cur_dict", "[", "'pred_boxes'", "]", ")", "for", "cur_dict", "in", "pred_dicts", "]", ")", "\n", "num_max_rois", "=", "max", "(", "1", ",", "num_max_rois", ")", "# at least one faked rois to avoid error", "\n", "pred_boxes", "=", "pred_dicts", "[", "0", "]", "[", "'pred_boxes'", "]", "\n", "\n", "rois", "=", "pred_boxes", ".", "new_zeros", "(", "(", "batch_size", ",", "num_max_rois", ",", "pred_boxes", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "roi_scores", "=", "pred_boxes", ".", "new_zeros", "(", "(", "batch_size", ",", "num_max_rois", ")", ")", "\n", "roi_labels", "=", "pred_boxes", ".", "new_zeros", "(", "(", "batch_size", ",", "num_max_rois", ")", ")", ".", "long", "(", ")", "\n", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "num_boxes", "=", "len", "(", "pred_dicts", "[", "bs_idx", "]", "[", "'pred_boxes'", "]", ")", "\n", "\n", "rois", "[", "bs_idx", ",", ":", "num_boxes", ",", ":", "]", "=", "pred_dicts", "[", "bs_idx", "]", "[", "'pred_boxes'", "]", "\n", "roi_scores", "[", "bs_idx", ",", ":", "num_boxes", "]", "=", "pred_dicts", "[", "bs_idx", "]", "[", "'pred_scores'", "]", "\n", "roi_labels", "[", "bs_idx", ",", ":", "num_boxes", "]", "=", "pred_dicts", "[", "bs_idx", "]", "[", "'pred_labels'", "]", "\n", "", "return", "rois", ",", "roi_scores", ",", "roi_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.forward": [[324, 356], ["center_head.CenterHead.shared_conv", "center_head.CenterHead.append", "center_head.CenterHead.assign_targets", "center_head.CenterHead.generate_predicted_boxes", "head", "center_head.CenterHead.reorder_rois_for_refining", "data_dict.get", "spatial_features_2d.size"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.reorder_rois_for_refining"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "spatial_features_2d", "=", "data_dict", "[", "'spatial_features_2d'", "]", "\n", "x", "=", "self", ".", "shared_conv", "(", "spatial_features_2d", ")", "\n", "\n", "pred_dicts", "=", "[", "]", "\n", "for", "head", "in", "self", ".", "heads_list", ":", "\n", "            ", "pred_dicts", ".", "append", "(", "head", "(", "x", ")", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "target_dict", "=", "self", ".", "assign_targets", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", ",", "feature_map_size", "=", "spatial_features_2d", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "feature_map_stride", "=", "data_dict", ".", "get", "(", "'spatial_features_2d_strides'", ",", "None", ")", "\n", ")", "\n", "self", ".", "forward_ret_dict", "[", "'target_dicts'", "]", "=", "target_dict", "\n", "\n", "", "self", ".", "forward_ret_dict", "[", "'pred_dicts'", "]", "=", "pred_dicts", "\n", "\n", "if", "not", "self", ".", "training", "or", "self", ".", "predict_boxes_when_training", ":", "\n", "            ", "pred_dicts", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "data_dict", "[", "'batch_size'", "]", ",", "pred_dicts", "\n", ")", "\n", "\n", "if", "self", ".", "predict_boxes_when_training", ":", "\n", "                ", "rois", ",", "roi_scores", ",", "roi_labels", "=", "self", ".", "reorder_rois_for_refining", "(", "data_dict", "[", "'batch_size'", "]", ",", "pred_dicts", ")", "\n", "data_dict", "[", "'rois'", "]", "=", "rois", "\n", "data_dict", "[", "'roi_scores'", "]", "=", "roi_scores", "\n", "data_dict", "[", "'roi_labels'", "]", "=", "roi_labels", "\n", "data_dict", "[", "'has_class_labels'", "]", "=", "True", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "'final_box_dicts'", "]", "=", "pred_dicts", "\n", "\n", "", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_simple.PointHeadSimple.__init__": [[13, 19], ["point_head_template.PointHeadTemplate.__init__", "point_head_simple.PointHeadSimple.make_fc_layers"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers"], ["def", "__init__", "(", "self", ",", "num_class", ",", "input_channels", ",", "model_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ")", "\n", "self", ".", "cls_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "fc_cfg", "=", "self", ".", "model_cfg", ".", "CLS_FC", ",", "\n", "input_channels", "=", "input_channels", ",", "\n", "output_channels", "=", "num_class", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_simple.PointHeadSimple.assign_targets": [[21, 49], ["utils.box_utils.enlarge_box3d().view", "point_head_simple.PointHeadSimple.assign_stack_targets", "gt_boxes.shape.__len__", "str", "point_coords.shape.__len__", "str", "utils.box_utils.enlarge_box3d", "gt_boxes.view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.assign_stack_targets", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.enlarge_box3d"], ["", "def", "assign_targets", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_dict:\n                point_features: (N1 + N2 + N3 + ..., C)\n                batch_size:\n                point_coords: (N1 + N2 + N3 + ..., 4) [bs_idx, x, y, z]\n                gt_boxes (optional): (B, M, 8)\n        Returns:\n            point_cls_labels: (N1 + N2 + N3 + ...), long type, 0:background, -1:ignored\n            point_part_labels: (N1 + N2 + N3 + ..., 3)\n        \"\"\"", "\n", "point_coords", "=", "input_dict", "[", "'point_coords'", "]", "\n", "gt_boxes", "=", "input_dict", "[", "'gt_boxes'", "]", "\n", "assert", "gt_boxes", ".", "shape", ".", "__len__", "(", ")", "==", "3", ",", "'gt_boxes.shape=%s'", "%", "str", "(", "gt_boxes", ".", "shape", ")", "\n", "assert", "point_coords", ".", "shape", ".", "__len__", "(", ")", "in", "[", "2", "]", ",", "'points.shape=%s'", "%", "str", "(", "point_coords", ".", "shape", ")", "\n", "\n", "batch_size", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "extend_gt_boxes", "=", "box_utils", ".", "enlarge_box3d", "(", "\n", "gt_boxes", ".", "view", "(", "-", "1", ",", "gt_boxes", ".", "shape", "[", "-", "1", "]", ")", ",", "extra_width", "=", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ".", "GT_EXTRA_WIDTH", "\n", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "gt_boxes", ".", "shape", "[", "-", "1", "]", ")", "\n", "targets_dict", "=", "self", ".", "assign_stack_targets", "(", "\n", "points", "=", "point_coords", ",", "gt_boxes", "=", "gt_boxes", ",", "extend_gt_boxes", "=", "extend_gt_boxes", ",", "\n", "set_ignore_flag", "=", "True", ",", "use_ball_constraint", "=", "False", ",", "\n", "ret_part_labels", "=", "False", "\n", ")", "\n", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_simple.PointHeadSimple.get_loss": [[50, 57], ["point_head_simple.PointHeadSimple.get_cls_layer_loss", "tb_dict.update"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.get_cls_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "get_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "tb_dict", "=", "{", "}", "if", "tb_dict", "is", "None", "else", "tb_dict", "\n", "point_loss_cls", ",", "tb_dict_1", "=", "self", ".", "get_cls_layer_loss", "(", ")", "\n", "\n", "point_loss", "=", "point_loss_cls", "\n", "tb_dict", ".", "update", "(", "tb_dict_1", ")", "\n", "return", "point_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_simple.PointHeadSimple.forward": [[58, 92], ["point_head_simple.PointHeadSimple.model_cfg.get", "point_head_simple.PointHeadSimple.cls_layers", "torch.sigmoid", "torch.sigmoid.max", "point_head_simple.PointHeadSimple.assign_targets"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                point_features: (N1 + N2 + N3 + ..., C) or (B, N, C)\n                point_features_before_fusion: (N1 + N2 + N3 + ..., C)\n                point_coords: (N1 + N2 + N3 + ..., 4) [bs_idx, x, y, z]\n                point_labels (optional): (N1 + N2 + N3 + ...)\n                gt_boxes (optional): (B, M, 8)\n        Returns:\n            batch_dict:\n                point_cls_scores: (N1 + N2 + N3 + ..., 1)\n                point_part_offset: (N1 + N2 + N3 + ..., 3)\n        \"\"\"", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'USE_POINT_FEATURES_BEFORE_FUSION'", ",", "False", ")", ":", "\n", "            ", "point_features", "=", "batch_dict", "[", "'point_features_before_fusion'", "]", "\n", "", "else", ":", "\n", "            ", "point_features", "=", "batch_dict", "[", "'point_features'", "]", "\n", "", "point_cls_preds", "=", "self", ".", "cls_layers", "(", "point_features", ")", "# (total_points, num_class)", "\n", "\n", "ret_dict", "=", "{", "\n", "'point_cls_preds'", ":", "point_cls_preds", ",", "\n", "}", "\n", "\n", "point_cls_scores", "=", "torch", ".", "sigmoid", "(", "point_cls_preds", ")", "\n", "batch_dict", "[", "'point_cls_scores'", "]", ",", "_", "=", "point_cls_scores", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "ret_dict", "[", "'point_cls_labels'", "]", "=", "targets_dict", "[", "'point_cls_labels'", "]", "\n", "", "self", ".", "forward_ret_dict", "=", "ret_dict", "\n", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_single.AnchorHeadSingle.__init__": [[8, 35], ["anchor_head_template.AnchorHeadTemplate.__init__", "sum", "torch.Conv2d", "torch.Conv2d", "anchor_head_single.AnchorHeadSingle.init_weights", "anchor_head_single.AnchorHeadSingle.model_cfg.get", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "num_class", ",", "class_names", ",", "grid_size", ",", "point_cloud_range", ",", "\n", "predict_boxes_when_training", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "class_names", "=", "class_names", ",", "grid_size", "=", "grid_size", ",", "point_cloud_range", "=", "point_cloud_range", ",", "\n", "predict_boxes_when_training", "=", "predict_boxes_when_training", "\n", ")", "\n", "\n", "self", ".", "num_anchors_per_location", "=", "sum", "(", "self", ".", "num_anchors_per_location", ")", "\n", "\n", "self", ".", "conv_cls", "=", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "self", ".", "num_anchors_per_location", "*", "self", ".", "num_class", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "self", ".", "conv_box", "=", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "self", ".", "num_anchors_per_location", "*", "self", ".", "box_coder", ".", "code_size", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'USE_DIRECTION_CLASSIFIER'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "\n", "self", ".", "num_anchors_per_location", "*", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "None", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_single.AnchorHeadSingle.init_weights": [[36, 40], ["torch.init.constant_", "torch.init.normal_", "numpy.log"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pi", "=", "0.01", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_cls", ".", "bias", ",", "-", "np", ".", "log", "(", "(", "1", "-", "pi", ")", "/", "pi", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "conv_box", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_single.AnchorHeadSingle.forward": [[41, 76], ["anchor_head_single.AnchorHeadSingle.conv_cls", "anchor_head_single.AnchorHeadSingle.conv_box", "cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "box_preds.permute().contiguous.permute().contiguous.permute().contiguous", "anchor_head_single.AnchorHeadSingle.conv_dir_cls", "dir_cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "anchor_head_single.AnchorHeadSingle.assign_targets", "anchor_head_single.AnchorHeadSingle.forward_ret_dict.update", "anchor_head_single.AnchorHeadSingle.generate_predicted_boxes", "cls_preds.permute().contiguous.permute().contiguous.permute", "box_preds.permute().contiguous.permute().contiguous.permute", "dir_cls_preds.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "spatial_features_2d", "=", "data_dict", "[", "'spatial_features_2d'", "]", "\n", "\n", "cls_preds", "=", "self", ".", "conv_cls", "(", "spatial_features_2d", ")", "\n", "box_preds", "=", "self", ".", "conv_box", "(", "spatial_features_2d", ")", "\n", "\n", "cls_preds", "=", "cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "# [N, H, W, C]", "\n", "box_preds", "=", "box_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "# [N, H, W, C]", "\n", "\n", "self", ".", "forward_ret_dict", "[", "'cls_preds'", "]", "=", "cls_preds", "\n", "self", ".", "forward_ret_dict", "[", "'box_preds'", "]", "=", "box_preds", "\n", "\n", "if", "self", ".", "conv_dir_cls", "is", "not", "None", ":", "\n", "            ", "dir_cls_preds", "=", "self", ".", "conv_dir_cls", "(", "spatial_features_2d", ")", "\n", "dir_cls_preds", "=", "dir_cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "forward_ret_dict", "[", "'dir_cls_preds'", "]", "=", "dir_cls_preds", "\n", "", "else", ":", "\n", "            ", "dir_cls_preds", "=", "None", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "\n", ")", "\n", "self", ".", "forward_ret_dict", ".", "update", "(", "targets_dict", ")", "\n", "\n", "", "if", "not", "self", ".", "training", "or", "self", ".", "predict_boxes_when_training", ":", "\n", "            ", "batch_cls_preds", ",", "batch_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "batch_size", "=", "data_dict", "[", "'batch_size'", "]", ",", "\n", "cls_preds", "=", "cls_preds", ",", "box_preds", "=", "box_preds", ",", "dir_cls_preds", "=", "dir_cls_preds", "\n", ")", "\n", "data_dict", "[", "'batch_cls_preds'", "]", "=", "batch_cls_preds", "\n", "data_dict", "[", "'batch_box_preds'", "]", "=", "batch_box_preds", "\n", "data_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.__init__": [[10, 17], ["torch.Module.__init__", "point_head_template.PointHeadTemplate.build_losses"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.build_losses"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "\n", "self", ".", "build_losses", "(", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ")", "\n", "self", ".", "forward_ret_dict", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.build_losses": [[18, 34], ["point_head_template.PointHeadTemplate.add_module", "losses_cfg.get", "utils.loss_utils.SigmoidFocalClassificationLoss", "utils.loss_utils.WeightedSmoothL1Loss", "losses_cfg.LOSS_WEIGHTS.get"], "methods", ["None"], ["", "def", "build_losses", "(", "self", ",", "losses_cfg", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "'cls_loss_func'", ",", "\n", "loss_utils", ".", "SigmoidFocalClassificationLoss", "(", "alpha", "=", "0.25", ",", "gamma", "=", "2.0", ")", "\n", ")", "\n", "reg_loss_type", "=", "losses_cfg", ".", "get", "(", "'LOSS_REG'", ",", "None", ")", "\n", "if", "reg_loss_type", "==", "'smooth-l1'", ":", "\n", "            ", "self", ".", "reg_loss_func", "=", "F", ".", "smooth_l1_loss", "\n", "", "elif", "reg_loss_type", "==", "'l1'", ":", "\n", "            ", "self", ".", "reg_loss_func", "=", "F", ".", "l1_loss", "\n", "", "elif", "reg_loss_type", "==", "'WeightedSmoothL1Loss'", ":", "\n", "            ", "self", ".", "reg_loss_func", "=", "loss_utils", ".", "WeightedSmoothL1Loss", "(", "\n", "code_weights", "=", "losses_cfg", ".", "LOSS_WEIGHTS", ".", "get", "(", "'code_weights'", ",", "None", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reg_loss_func", "=", "F", ".", "smooth_l1_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers": [[35, 48], ["range", "fc_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fc_cfg.__len__", "fc_layers.extend", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__"], ["", "", "@", "staticmethod", "\n", "def", "make_fc_layers", "(", "fc_cfg", ",", "input_channels", ",", "output_channels", ")", ":", "\n", "        ", "fc_layers", "=", "[", "]", "\n", "c_in", "=", "input_channels", "\n", "for", "k", "in", "range", "(", "0", ",", "fc_cfg", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "fc_layers", ".", "extend", "(", "[", "\n", "nn", ".", "Linear", "(", "c_in", ",", "fc_cfg", "[", "k", "]", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_cfg", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "]", ")", "\n", "c_in", "=", "fc_cfg", "[", "k", "]", "\n", "", "fc_layers", ".", "append", "(", "nn", ".", "Linear", "(", "c_in", ",", "output_channels", ",", "bias", "=", "True", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "fc_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.assign_stack_targets": [[49, 130], ["points.new_zeros().long", "range", "str", "str", "str", "gt_boxes.new_zeros", "gt_boxes.new_zeros", "points.new_zeros().long.new_zeros", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze", "len", "len", "points.new_zeros", "bs_mask.sum", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long().squeeze", "gt_box_of_fg_points[].long", "point_box_labels.new_zeros", "point_head_template.PointHeadTemplate.box_coder.encode_torch", "point_part_labels.new_zeros", "utils.common_utils.rotate_points_along_z().view", "torch.tensor().view().type_as", "torch.tensor().view().type_as", "torch.tensor().view().type_as", "torch.tensor().view().type_as", "torch.tensor().view().type_as", "torch.tensor().view().type_as", "torch.tensor().view().type_as", "torch.tensor().view().type_as", "torch.tensor().view().type_as", "len", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long", "[].clone", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu().long", "bs_mask.sum", "gt_box_of_fg_points[].long", "bs_mask.sum", "utils.common_utils.rotate_points_along_z", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu", "utils.common_utils.rotate_points_along_z().view.view", "points_single.unsqueeze", "gt_boxes[].contiguous", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "points_single.unsqueeze", "extend_gt_boxes[].contiguous"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.encode_torch", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.rotate_points_along_z", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu", "home.repos.pwc.inspect_result.dschinagl_occam.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu"], ["", "def", "assign_stack_targets", "(", "self", ",", "points", ",", "gt_boxes", ",", "extend_gt_boxes", "=", "None", ",", "\n", "ret_box_labels", "=", "False", ",", "ret_part_labels", "=", "False", ",", "\n", "set_ignore_flag", "=", "True", ",", "use_ball_constraint", "=", "False", ",", "central_radius", "=", "2.0", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            points: (N1 + N2 + N3 + ..., 4) [bs_idx, x, y, z]\n            gt_boxes: (B, M, 8)\n            extend_gt_boxes: [B, M, 8]\n            ret_box_labels:\n            ret_part_labels:\n            set_ignore_flag:\n            use_ball_constraint:\n            central_radius:\n\n        Returns:\n            point_cls_labels: (N1 + N2 + N3 + ...), long type, 0:background, -1:ignored\n            point_box_labels: (N1 + N2 + N3 + ..., code_size)\n\n        \"\"\"", "\n", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", "and", "points", ".", "shape", "[", "1", "]", "==", "4", ",", "'points.shape=%s'", "%", "str", "(", "points", ".", "shape", ")", "\n", "assert", "len", "(", "gt_boxes", ".", "shape", ")", "==", "3", "and", "gt_boxes", ".", "shape", "[", "2", "]", "==", "8", ",", "'gt_boxes.shape=%s'", "%", "str", "(", "gt_boxes", ".", "shape", ")", "\n", "assert", "extend_gt_boxes", "is", "None", "or", "len", "(", "extend_gt_boxes", ".", "shape", ")", "==", "3", "and", "extend_gt_boxes", ".", "shape", "[", "2", "]", "==", "8", ",", "'extend_gt_boxes.shape=%s'", "%", "str", "(", "extend_gt_boxes", ".", "shape", ")", "\n", "assert", "set_ignore_flag", "!=", "use_ball_constraint", ",", "'Choose one only!'", "\n", "batch_size", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "bs_idx", "=", "points", "[", ":", ",", "0", "]", "\n", "point_cls_labels", "=", "points", ".", "new_zeros", "(", "points", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "point_box_labels", "=", "gt_boxes", ".", "new_zeros", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "8", ")", ")", "if", "ret_box_labels", "else", "None", "\n", "point_part_labels", "=", "gt_boxes", ".", "new_zeros", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "if", "ret_part_labels", "else", "None", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "bs_mask", "=", "(", "bs_idx", "==", "k", ")", "\n", "points_single", "=", "points", "[", "bs_mask", "]", "[", ":", ",", "1", ":", "4", "]", "\n", "point_cls_labels_single", "=", "point_cls_labels", ".", "new_zeros", "(", "bs_mask", ".", "sum", "(", ")", ")", "\n", "box_idxs_of_pts", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_gpu", "(", "\n", "points_single", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "gt_boxes", "[", "k", ":", "k", "+", "1", ",", ":", ",", "0", ":", "7", "]", ".", "contiguous", "(", ")", "\n", ")", ".", "long", "(", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "box_fg_flag", "=", "(", "box_idxs_of_pts", ">=", "0", ")", "\n", "if", "set_ignore_flag", ":", "\n", "                ", "extend_box_idxs_of_pts", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_gpu", "(", "\n", "points_single", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "extend_gt_boxes", "[", "k", ":", "k", "+", "1", ",", ":", ",", "0", ":", "7", "]", ".", "contiguous", "(", ")", "\n", ")", ".", "long", "(", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "fg_flag", "=", "box_fg_flag", "\n", "ignore_flag", "=", "fg_flag", "^", "(", "extend_box_idxs_of_pts", ">=", "0", ")", "\n", "point_cls_labels_single", "[", "ignore_flag", "]", "=", "-", "1", "\n", "", "elif", "use_ball_constraint", ":", "\n", "                ", "box_centers", "=", "gt_boxes", "[", "k", "]", "[", "box_idxs_of_pts", "]", "[", ":", ",", "0", ":", "3", "]", ".", "clone", "(", ")", "\n", "box_centers", "[", ":", ",", "2", "]", "+=", "gt_boxes", "[", "k", "]", "[", "box_idxs_of_pts", "]", "[", ":", ",", "5", "]", "/", "2", "\n", "ball_flag", "=", "(", "(", "box_centers", "-", "points_single", ")", ".", "norm", "(", "dim", "=", "1", ")", "<", "central_radius", ")", "\n", "fg_flag", "=", "box_fg_flag", "&", "ball_flag", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "gt_box_of_fg_points", "=", "gt_boxes", "[", "k", "]", "[", "box_idxs_of_pts", "[", "fg_flag", "]", "]", "\n", "point_cls_labels_single", "[", "fg_flag", "]", "=", "1", "if", "self", ".", "num_class", "==", "1", "else", "gt_box_of_fg_points", "[", ":", ",", "-", "1", "]", ".", "long", "(", ")", "\n", "point_cls_labels", "[", "bs_mask", "]", "=", "point_cls_labels_single", "\n", "\n", "if", "ret_box_labels", "and", "gt_box_of_fg_points", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "point_box_labels_single", "=", "point_box_labels", ".", "new_zeros", "(", "(", "bs_mask", ".", "sum", "(", ")", ",", "8", ")", ")", "\n", "fg_point_box_labels", "=", "self", ".", "box_coder", ".", "encode_torch", "(", "\n", "gt_boxes", "=", "gt_box_of_fg_points", "[", ":", ",", ":", "-", "1", "]", ",", "points", "=", "points_single", "[", "fg_flag", "]", ",", "\n", "gt_classes", "=", "gt_box_of_fg_points", "[", ":", ",", "-", "1", "]", ".", "long", "(", ")", "\n", ")", "\n", "point_box_labels_single", "[", "fg_flag", "]", "=", "fg_point_box_labels", "\n", "point_box_labels", "[", "bs_mask", "]", "=", "point_box_labels_single", "\n", "\n", "", "if", "ret_part_labels", ":", "\n", "                ", "point_part_labels_single", "=", "point_part_labels", ".", "new_zeros", "(", "(", "bs_mask", ".", "sum", "(", ")", ",", "3", ")", ")", "\n", "transformed_points", "=", "points_single", "[", "fg_flag", "]", "-", "gt_box_of_fg_points", "[", ":", ",", "0", ":", "3", "]", "\n", "transformed_points", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "transformed_points", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", ",", "-", "gt_box_of_fg_points", "[", ":", ",", "6", "]", "\n", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "offset", "=", "torch", ".", "tensor", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "view", "(", "1", ",", "3", ")", ".", "type_as", "(", "transformed_points", ")", "\n", "point_part_labels_single", "[", "fg_flag", "]", "=", "(", "transformed_points", "/", "gt_box_of_fg_points", "[", ":", ",", "3", ":", "6", "]", ")", "+", "offset", "\n", "point_part_labels", "[", "bs_mask", "]", "=", "point_part_labels_single", "\n", "\n", "", "", "targets_dict", "=", "{", "\n", "'point_cls_labels'", ":", "point_cls_labels", ",", "\n", "'point_box_labels'", ":", "point_box_labels", ",", "\n", "'point_part_labels'", ":", "point_part_labels", "\n", "}", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.get_cls_layer_loss": [[131, 156], ["point_head_template.PointHeadTemplate.forward_ret_dict[].view", "point_head_template.PointHeadTemplate.forward_ret_dict[].view", "positives.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "point_head_template.PointHeadTemplate.new_zeros", "point_head_template.PointHeadTemplate.new_zeros.scatter_", "point_head_template.PointHeadTemplate.cls_loss_func", "point_head_template.PointHeadTemplate.sum", "tb_dict.update", "positives.sum", "list", "point_head_template.PointHeadTemplate.sum.item", "positives.sum().float.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "get_cls_layer_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "point_cls_labels", "=", "self", ".", "forward_ret_dict", "[", "'point_cls_labels'", "]", ".", "view", "(", "-", "1", ")", "\n", "point_cls_preds", "=", "self", ".", "forward_ret_dict", "[", "'point_cls_preds'", "]", ".", "view", "(", "-", "1", ",", "self", ".", "num_class", ")", "\n", "\n", "positives", "=", "(", "point_cls_labels", ">", "0", ")", "\n", "negative_cls_weights", "=", "(", "point_cls_labels", "==", "0", ")", "*", "1.0", "\n", "cls_weights", "=", "(", "negative_cls_weights", "+", "1.0", "*", "positives", ")", ".", "float", "(", ")", "\n", "pos_normalizer", "=", "positives", ".", "sum", "(", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "cls_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "\n", "one_hot_targets", "=", "point_cls_preds", ".", "new_zeros", "(", "*", "list", "(", "point_cls_labels", ".", "shape", ")", ",", "self", ".", "num_class", "+", "1", ")", "\n", "one_hot_targets", ".", "scatter_", "(", "-", "1", ",", "(", "point_cls_labels", "*", "(", "point_cls_labels", ">=", "0", ")", ".", "long", "(", ")", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "long", "(", ")", ",", "1.0", ")", "\n", "one_hot_targets", "=", "one_hot_targets", "[", "...", ",", "1", ":", "]", "\n", "cls_loss_src", "=", "self", ".", "cls_loss_func", "(", "point_cls_preds", ",", "one_hot_targets", ",", "weights", "=", "cls_weights", ")", "\n", "point_loss_cls", "=", "cls_loss_src", ".", "sum", "(", ")", "\n", "\n", "loss_weights_dict", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "\n", "point_loss_cls", "=", "point_loss_cls", "*", "loss_weights_dict", "[", "'point_cls_weight'", "]", "\n", "if", "tb_dict", "is", "None", ":", "\n", "            ", "tb_dict", "=", "{", "}", "\n", "", "tb_dict", ".", "update", "(", "{", "\n", "'point_loss_cls'", ":", "point_loss_cls", ".", "item", "(", ")", ",", "\n", "'point_pos_num'", ":", "pos_normalizer", ".", "item", "(", ")", "\n", "}", ")", "\n", "return", "point_loss_cls", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.get_part_layer_loss": [[157, 171], ["max", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "tb_dict.update", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.binary_cross_entropy.item", "torch.binary_cross_entropy.sum", "pos_mask.float"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid"], ["", "def", "get_part_layer_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "pos_mask", "=", "self", ".", "forward_ret_dict", "[", "'point_cls_labels'", "]", ">", "0", "\n", "pos_normalizer", "=", "max", "(", "1", ",", "(", "pos_mask", ">", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "point_part_labels", "=", "self", ".", "forward_ret_dict", "[", "'point_part_labels'", "]", "\n", "point_part_preds", "=", "self", ".", "forward_ret_dict", "[", "'point_part_preds'", "]", "\n", "point_loss_part", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "point_part_preds", ")", ",", "point_part_labels", ",", "reduction", "=", "'none'", ")", "\n", "point_loss_part", "=", "(", "point_loss_part", ".", "sum", "(", "dim", "=", "-", "1", ")", "*", "pos_mask", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "/", "(", "3", "*", "pos_normalizer", ")", "\n", "\n", "loss_weights_dict", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "\n", "point_loss_part", "=", "point_loss_part", "*", "loss_weights_dict", "[", "'point_part_weight'", "]", "\n", "if", "tb_dict", "is", "None", ":", "\n", "            ", "tb_dict", "=", "{", "}", "\n", "", "tb_dict", ".", "update", "(", "{", "'point_loss_part'", ":", "point_loss_part", ".", "item", "(", ")", "}", ")", "\n", "return", "point_loss_part", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.get_box_layer_loss": [[172, 192], ["pos_mask.float", "pos_mask.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "point_head_template.PointHeadTemplate.reg_loss_func", "point_head_template.PointHeadTemplate.sum", "tb_dict.update", "pos_mask.sum", "point_head_template.PointHeadTemplate.sum.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "get_box_layer_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "pos_mask", "=", "self", ".", "forward_ret_dict", "[", "'point_cls_labels'", "]", ">", "0", "\n", "point_box_labels", "=", "self", ".", "forward_ret_dict", "[", "'point_box_labels'", "]", "\n", "point_box_preds", "=", "self", ".", "forward_ret_dict", "[", "'point_box_preds'", "]", "\n", "\n", "reg_weights", "=", "pos_mask", ".", "float", "(", ")", "\n", "pos_normalizer", "=", "pos_mask", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "\n", "point_loss_box_src", "=", "self", ".", "reg_loss_func", "(", "\n", "point_box_preds", "[", "None", ",", "...", "]", ",", "point_box_labels", "[", "None", ",", "...", "]", ",", "weights", "=", "reg_weights", "[", "None", ",", "...", "]", "\n", ")", "\n", "point_loss_box", "=", "point_loss_box_src", ".", "sum", "(", ")", "\n", "\n", "loss_weights_dict", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "\n", "point_loss_box", "=", "point_loss_box", "*", "loss_weights_dict", "[", "'point_box_weight'", "]", "\n", "if", "tb_dict", "is", "None", ":", "\n", "            ", "tb_dict", "=", "{", "}", "\n", "", "tb_dict", ".", "update", "(", "{", "'point_loss_box'", ":", "point_loss_box", ".", "item", "(", ")", "}", ")", "\n", "return", "point_loss_box", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.generate_predicted_boxes": [[193, 208], ["point_cls_preds.max", "point_head_template.PointHeadTemplate.box_coder.decode_torch"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.decode_torch"], ["", "def", "generate_predicted_boxes", "(", "self", ",", "points", ",", "point_cls_preds", ",", "point_box_preds", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            points: (N, 3)\n            point_cls_preds: (N, num_class)\n            point_box_preds: (N, box_code_size)\n        Returns:\n            point_cls_preds: (N, num_class)\n            point_box_preds: (N, box_code_size)\n\n        \"\"\"", "\n", "_", ",", "pred_classes", "=", "point_cls_preds", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "point_box_preds", "=", "self", ".", "box_coder", ".", "decode_torch", "(", "point_box_preds", ",", "points", ",", "pred_classes", "+", "1", ")", "\n", "\n", "return", "point_cls_preds", ",", "point_box_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.forward": [[209, 211], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_box.PointHeadBox.__init__": [[13, 30], ["point_head_template.PointHeadTemplate.__init__", "point_head_box.PointHeadBox.make_fc_layers", "point_head_box.PointHeadBox.make_fc_layers", "getattr"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers"], ["def", "__init__", "(", "self", ",", "num_class", ",", "input_channels", ",", "model_cfg", ",", "predict_boxes_when_training", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ")", "\n", "self", ".", "predict_boxes_when_training", "=", "predict_boxes_when_training", "\n", "self", ".", "cls_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "fc_cfg", "=", "self", ".", "model_cfg", ".", "CLS_FC", ",", "\n", "input_channels", "=", "input_channels", ",", "\n", "output_channels", "=", "num_class", "\n", ")", "\n", "\n", "target_cfg", "=", "self", ".", "model_cfg", ".", "TARGET_CONFIG", "\n", "self", ".", "box_coder", "=", "getattr", "(", "box_coder_utils", ",", "target_cfg", ".", "BOX_CODER", ")", "(", "\n", "**", "target_cfg", ".", "BOX_CODER_CONFIG", "\n", ")", "\n", "self", ".", "box_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "fc_cfg", "=", "self", ".", "model_cfg", ".", "REG_FC", ",", "\n", "input_channels", "=", "input_channels", ",", "\n", "output_channels", "=", "self", ".", "box_coder", ".", "code_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_box.PointHeadBox.assign_targets": [[32, 60], ["utils.box_utils.enlarge_box3d().view", "point_head_box.PointHeadBox.assign_stack_targets", "gt_boxes.shape.__len__", "str", "point_coords.shape.__len__", "str", "utils.box_utils.enlarge_box3d", "gt_boxes.view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.assign_stack_targets", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.enlarge_box3d"], ["", "def", "assign_targets", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_dict:\n                point_features: (N1 + N2 + N3 + ..., C)\n                batch_size:\n                point_coords: (N1 + N2 + N3 + ..., 4) [bs_idx, x, y, z]\n                gt_boxes (optional): (B, M, 8)\n        Returns:\n            point_cls_labels: (N1 + N2 + N3 + ...), long type, 0:background, -1:ignored\n            point_part_labels: (N1 + N2 + N3 + ..., 3)\n        \"\"\"", "\n", "point_coords", "=", "input_dict", "[", "'point_coords'", "]", "\n", "gt_boxes", "=", "input_dict", "[", "'gt_boxes'", "]", "\n", "assert", "gt_boxes", ".", "shape", ".", "__len__", "(", ")", "==", "3", ",", "'gt_boxes.shape=%s'", "%", "str", "(", "gt_boxes", ".", "shape", ")", "\n", "assert", "point_coords", ".", "shape", ".", "__len__", "(", ")", "in", "[", "2", "]", ",", "'points.shape=%s'", "%", "str", "(", "point_coords", ".", "shape", ")", "\n", "\n", "batch_size", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "extend_gt_boxes", "=", "box_utils", ".", "enlarge_box3d", "(", "\n", "gt_boxes", ".", "view", "(", "-", "1", ",", "gt_boxes", ".", "shape", "[", "-", "1", "]", ")", ",", "extra_width", "=", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ".", "GT_EXTRA_WIDTH", "\n", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "gt_boxes", ".", "shape", "[", "-", "1", "]", ")", "\n", "targets_dict", "=", "self", ".", "assign_stack_targets", "(", "\n", "points", "=", "point_coords", ",", "gt_boxes", "=", "gt_boxes", ",", "extend_gt_boxes", "=", "extend_gt_boxes", ",", "\n", "set_ignore_flag", "=", "True", ",", "use_ball_constraint", "=", "False", ",", "\n", "ret_part_labels", "=", "False", ",", "ret_box_labels", "=", "True", "\n", ")", "\n", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_box.PointHeadBox.get_loss": [[61, 70], ["point_head_box.PointHeadBox.get_cls_layer_loss", "point_head_box.PointHeadBox.get_box_layer_loss", "tb_dict.update", "tb_dict.update"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.get_cls_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.get_box_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "get_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "tb_dict", "=", "{", "}", "if", "tb_dict", "is", "None", "else", "tb_dict", "\n", "point_loss_cls", ",", "tb_dict_1", "=", "self", ".", "get_cls_layer_loss", "(", ")", "\n", "point_loss_box", ",", "tb_dict_2", "=", "self", ".", "get_box_layer_loss", "(", ")", "\n", "\n", "point_loss", "=", "point_loss_cls", "+", "point_loss_box", "\n", "tb_dict", ".", "update", "(", "tb_dict_1", ")", "\n", "tb_dict", ".", "update", "(", "tb_dict_2", ")", "\n", "return", "point_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_box.PointHeadBox.forward": [[71, 116], ["point_head_box.PointHeadBox.model_cfg.get", "point_head_box.PointHeadBox.cls_layers", "point_head_box.PointHeadBox.box_layers", "point_head_box.PointHeadBox.max", "torch.sigmoid", "point_head_box.PointHeadBox.assign_targets", "point_head_box.PointHeadBox.generate_predicted_boxes"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                point_features: (N1 + N2 + N3 + ..., C) or (B, N, C)\n                point_features_before_fusion: (N1 + N2 + N3 + ..., C)\n                point_coords: (N1 + N2 + N3 + ..., 4) [bs_idx, x, y, z]\n                point_labels (optional): (N1 + N2 + N3 + ...)\n                gt_boxes (optional): (B, M, 8)\n        Returns:\n            batch_dict:\n                point_cls_scores: (N1 + N2 + N3 + ..., 1)\n                point_part_offset: (N1 + N2 + N3 + ..., 3)\n        \"\"\"", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'USE_POINT_FEATURES_BEFORE_FUSION'", ",", "False", ")", ":", "\n", "            ", "point_features", "=", "batch_dict", "[", "'point_features_before_fusion'", "]", "\n", "", "else", ":", "\n", "            ", "point_features", "=", "batch_dict", "[", "'point_features'", "]", "\n", "", "point_cls_preds", "=", "self", ".", "cls_layers", "(", "point_features", ")", "# (total_points, num_class)", "\n", "point_box_preds", "=", "self", ".", "box_layers", "(", "point_features", ")", "# (total_points, box_code_size)", "\n", "\n", "point_cls_preds_max", ",", "_", "=", "point_cls_preds", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "batch_dict", "[", "'point_cls_scores'", "]", "=", "torch", ".", "sigmoid", "(", "point_cls_preds_max", ")", "\n", "\n", "ret_dict", "=", "{", "'point_cls_preds'", ":", "point_cls_preds", ",", "\n", "'point_box_preds'", ":", "point_box_preds", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "ret_dict", "[", "'point_cls_labels'", "]", "=", "targets_dict", "[", "'point_cls_labels'", "]", "\n", "ret_dict", "[", "'point_box_labels'", "]", "=", "targets_dict", "[", "'point_box_labels'", "]", "\n", "\n", "", "if", "not", "self", ".", "training", "or", "self", ".", "predict_boxes_when_training", ":", "\n", "            ", "point_cls_preds", ",", "point_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "points", "=", "batch_dict", "[", "'point_coords'", "]", "[", ":", ",", "1", ":", "4", "]", ",", "\n", "point_cls_preds", "=", "point_cls_preds", ",", "point_box_preds", "=", "point_box_preds", "\n", ")", "\n", "batch_dict", "[", "'batch_cls_preds'", "]", "=", "point_cls_preds", "\n", "batch_dict", "[", "'batch_box_preds'", "]", "=", "point_box_preds", "\n", "batch_dict", "[", "'batch_index'", "]", "=", "batch_dict", "[", "'point_coords'", "]", "[", ":", ",", "0", "]", "\n", "batch_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "\n", "", "self", ".", "forward_ret_dict", "=", "ret_dict", "\n", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.__init__": [[12, 36], ["torch.Module.__init__", "anchor_head_template.AnchorHeadTemplate.model_cfg.get", "anchor_head_template.AnchorHeadTemplate.generate_anchors", "anchor_head_template.AnchorHeadTemplate.get_target_assigner", "anchor_head_template.AnchorHeadTemplate.build_losses", "getattr", "x.cuda", "anchor_target_cfg.get", "anchor_target_cfg.get"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_anchors", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.get_target_assigner", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.build_losses"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "class_names", ",", "grid_size", ",", "point_cloud_range", ",", "predict_boxes_when_training", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "predict_boxes_when_training", "=", "predict_boxes_when_training", "\n", "self", ".", "use_multihead", "=", "self", ".", "model_cfg", ".", "get", "(", "'USE_MULTIHEAD'", ",", "False", ")", "\n", "\n", "anchor_target_cfg", "=", "self", ".", "model_cfg", ".", "TARGET_ASSIGNER_CONFIG", "\n", "self", ".", "box_coder", "=", "getattr", "(", "box_coder_utils", ",", "anchor_target_cfg", ".", "BOX_CODER", ")", "(", "\n", "num_dir_bins", "=", "anchor_target_cfg", ".", "get", "(", "'NUM_DIR_BINS'", ",", "6", ")", ",", "\n", "**", "anchor_target_cfg", ".", "get", "(", "'BOX_CODER_CONFIG'", ",", "{", "}", ")", "\n", ")", "\n", "\n", "anchor_generator_cfg", "=", "self", ".", "model_cfg", ".", "ANCHOR_GENERATOR_CONFIG", "\n", "anchors", ",", "self", ".", "num_anchors_per_location", "=", "self", ".", "generate_anchors", "(", "\n", "anchor_generator_cfg", ",", "grid_size", "=", "grid_size", ",", "point_cloud_range", "=", "point_cloud_range", ",", "\n", "anchor_ndim", "=", "self", ".", "box_coder", ".", "code_size", "\n", ")", "\n", "self", ".", "anchors", "=", "[", "x", ".", "cuda", "(", ")", "for", "x", "in", "anchors", "]", "\n", "self", ".", "target_assigner", "=", "self", ".", "get_target_assigner", "(", "anchor_target_cfg", ")", "\n", "\n", "self", ".", "forward_ret_dict", "=", "{", "}", "\n", "self", ".", "build_losses", "(", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_anchors": [[37, 53], ["target_assigner.anchor_generator.AnchorGenerator", "target_assigner.anchor_generator.AnchorGenerator.generate_anchors", "enumerate", "anchors.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_anchors"], ["", "@", "staticmethod", "\n", "def", "generate_anchors", "(", "anchor_generator_cfg", ",", "grid_size", ",", "point_cloud_range", ",", "anchor_ndim", "=", "7", ")", ":", "\n", "        ", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "anchor_range", "=", "point_cloud_range", ",", "\n", "anchor_generator_config", "=", "anchor_generator_cfg", "\n", ")", "\n", "feature_map_size", "=", "[", "grid_size", "[", ":", "2", "]", "//", "config", "[", "'feature_map_stride'", "]", "for", "config", "in", "anchor_generator_cfg", "]", "\n", "anchors_list", ",", "num_anchors_per_location_list", "=", "anchor_generator", ".", "generate_anchors", "(", "feature_map_size", ")", "\n", "\n", "if", "anchor_ndim", "!=", "7", ":", "\n", "            ", "for", "idx", ",", "anchors", "in", "enumerate", "(", "anchors_list", ")", ":", "\n", "                ", "pad_zeros", "=", "anchors", ".", "new_zeros", "(", "[", "*", "anchors", ".", "shape", "[", "0", ":", "-", "1", "]", ",", "anchor_ndim", "-", "7", "]", ")", "\n", "new_anchors", "=", "torch", ".", "cat", "(", "(", "anchors", ",", "pad_zeros", ")", ",", "dim", "=", "-", "1", ")", "\n", "anchors_list", "[", "idx", "]", "=", "new_anchors", "\n", "\n", "", "", "return", "anchors_list", ",", "num_anchors_per_location_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.get_target_assigner": [[54, 72], ["target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.atss_target_assigner.ATSSTargetAssigner", "target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner"], "methods", ["None"], ["", "def", "get_target_assigner", "(", "self", ",", "anchor_target_cfg", ")", ":", "\n", "        ", "if", "anchor_target_cfg", ".", "NAME", "==", "'ATSS'", ":", "\n", "            ", "target_assigner", "=", "ATSSTargetAssigner", "(", "\n", "topk", "=", "anchor_target_cfg", ".", "TOPK", ",", "\n", "box_coder", "=", "self", ".", "box_coder", ",", "\n", "use_multihead", "=", "self", ".", "use_multihead", ",", "\n", "match_height", "=", "anchor_target_cfg", ".", "MATCH_HEIGHT", "\n", ")", "\n", "", "elif", "anchor_target_cfg", ".", "NAME", "==", "'AxisAlignedTargetAssigner'", ":", "\n", "            ", "target_assigner", "=", "AxisAlignedTargetAssigner", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "box_coder", "=", "self", ".", "box_coder", ",", "\n", "match_height", "=", "anchor_target_cfg", ".", "MATCH_HEIGHT", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "target_assigner", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.build_losses": [[73, 87], ["anchor_head_template.AnchorHeadTemplate.add_module", "anchor_head_template.AnchorHeadTemplate.add_module", "anchor_head_template.AnchorHeadTemplate.add_module", "utils.loss_utils.SigmoidFocalClassificationLoss", "utils.loss_utils.WeightedCrossEntropyLoss", "losses_cfg.get", "getattr"], "methods", ["None"], ["", "def", "build_losses", "(", "self", ",", "losses_cfg", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "'cls_loss_func'", ",", "\n", "loss_utils", ".", "SigmoidFocalClassificationLoss", "(", "alpha", "=", "0.25", ",", "gamma", "=", "2.0", ")", "\n", ")", "\n", "reg_loss_name", "=", "'WeightedSmoothL1Loss'", "if", "losses_cfg", ".", "get", "(", "'REG_LOSS_TYPE'", ",", "None", ")", "is", "None", "else", "losses_cfg", ".", "REG_LOSS_TYPE", "\n", "self", ".", "add_module", "(", "\n", "'reg_loss_func'", ",", "\n", "getattr", "(", "loss_utils", ",", "reg_loss_name", ")", "(", "code_weights", "=", "losses_cfg", ".", "LOSS_WEIGHTS", "[", "'code_weights'", "]", ")", "\n", ")", "\n", "self", ".", "add_module", "(", "\n", "'dir_loss_func'", ",", "\n", "loss_utils", ".", "WeightedCrossEntropyLoss", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.assign_targets": [[89, 100], ["anchor_head_template.AnchorHeadTemplate.target_assigner.assign_targets"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets"], ["", "def", "assign_targets", "(", "self", ",", "gt_boxes", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gt_boxes: (B, M, 8)\n        Returns:\n\n        \"\"\"", "\n", "targets_dict", "=", "self", ".", "target_assigner", ".", "assign_targets", "(", "\n", "self", ".", "anchors", ",", "gt_boxes", "\n", ")", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.get_cls_layer_loss": [[101, 136], ["int", "positives.float", "positives.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "cls_targets.squeeze.squeeze.unsqueeze", "cls_targets.squeeze.squeeze.squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "cls_preds.view.view.view", "anchor_head_template.AnchorHeadTemplate.cls_loss_func", "cared.type_as", "cls_targets.squeeze.squeeze.unsqueeze().long", "anchor_head_template.AnchorHeadTemplate.sum", "cls_loss.item", "positives.sum", "list", "cls_targets.squeeze.squeeze.unsqueeze"], "methods", ["None"], ["", "def", "get_cls_layer_loss", "(", "self", ")", ":", "\n", "        ", "cls_preds", "=", "self", ".", "forward_ret_dict", "[", "'cls_preds'", "]", "\n", "box_cls_labels", "=", "self", ".", "forward_ret_dict", "[", "'box_cls_labels'", "]", "\n", "batch_size", "=", "int", "(", "cls_preds", ".", "shape", "[", "0", "]", ")", "\n", "cared", "=", "box_cls_labels", ">=", "0", "# [N, num_anchors]", "\n", "positives", "=", "box_cls_labels", ">", "0", "\n", "negatives", "=", "box_cls_labels", "==", "0", "\n", "negative_cls_weights", "=", "negatives", "*", "1.0", "\n", "cls_weights", "=", "(", "negative_cls_weights", "+", "1.0", "*", "positives", ")", ".", "float", "(", ")", "\n", "reg_weights", "=", "positives", ".", "float", "(", ")", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "# class agnostic", "\n", "            ", "box_cls_labels", "[", "positives", "]", "=", "1", "\n", "\n", "", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "cls_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "cls_targets", "=", "box_cls_labels", "*", "cared", ".", "type_as", "(", "box_cls_labels", ")", "\n", "cls_targets", "=", "cls_targets", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "\n", "cls_targets", "=", "cls_targets", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "one_hot_targets", "=", "torch", ".", "zeros", "(", "\n", "*", "list", "(", "cls_targets", ".", "shape", ")", ",", "self", ".", "num_class", "+", "1", ",", "dtype", "=", "cls_preds", ".", "dtype", ",", "device", "=", "cls_targets", ".", "device", "\n", ")", "\n", "one_hot_targets", ".", "scatter_", "(", "-", "1", ",", "cls_targets", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "long", "(", ")", ",", "1.0", ")", "\n", "cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_class", ")", "\n", "one_hot_targets", "=", "one_hot_targets", "[", "...", ",", "1", ":", "]", "\n", "cls_loss_src", "=", "self", ".", "cls_loss_func", "(", "cls_preds", ",", "one_hot_targets", ",", "weights", "=", "cls_weights", ")", "# [N, M]", "\n", "cls_loss", "=", "cls_loss_src", ".", "sum", "(", ")", "/", "batch_size", "\n", "\n", "cls_loss", "=", "cls_loss", "*", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'cls_weight'", "]", "\n", "tb_dict", "=", "{", "\n", "'rpn_loss_cls'", ":", "cls_loss", ".", "item", "(", ")", "\n", "}", "\n", "return", "cls_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.add_sin_difference": [[137, 145], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_sin_difference", "(", "boxes1", ",", "boxes2", ",", "dim", "=", "6", ")", ":", "\n", "        ", "assert", "dim", "!=", "-", "1", "\n", "rad_pred_encoding", "=", "torch", ".", "sin", "(", "boxes1", "[", "...", ",", "dim", ":", "dim", "+", "1", "]", ")", "*", "torch", ".", "cos", "(", "boxes2", "[", "...", ",", "dim", ":", "dim", "+", "1", "]", ")", "\n", "rad_tg_encoding", "=", "torch", ".", "cos", "(", "boxes1", "[", "...", ",", "dim", ":", "dim", "+", "1", "]", ")", "*", "torch", ".", "sin", "(", "boxes2", "[", "...", ",", "dim", ":", "dim", "+", "1", "]", ")", "\n", "boxes1", "=", "torch", ".", "cat", "(", "[", "boxes1", "[", "...", ",", ":", "dim", "]", ",", "rad_pred_encoding", ",", "boxes1", "[", "...", ",", "dim", "+", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "boxes2", "=", "torch", ".", "cat", "(", "[", "boxes2", "[", "...", ",", ":", "dim", "]", ",", "rad_tg_encoding", ",", "boxes2", "[", "...", ",", "dim", "+", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "boxes1", ",", "boxes2", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.get_direction_target": [[146, 161], ["anchors.view.view.view", "utils.common_utils.limit_period", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp.unsqueeze().long", "torch.clamp.unsqueeze().long", "list", "torch.clamp.unsqueeze", "torch.clamp.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.limit_period"], ["", "@", "staticmethod", "\n", "def", "get_direction_target", "(", "anchors", ",", "reg_targets", ",", "one_hot", "=", "True", ",", "dir_offset", "=", "0", ",", "num_bins", "=", "2", ")", ":", "\n", "        ", "batch_size", "=", "reg_targets", ".", "shape", "[", "0", "]", "\n", "anchors", "=", "anchors", ".", "view", "(", "batch_size", ",", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "rot_gt", "=", "reg_targets", "[", "...", ",", "6", "]", "+", "anchors", "[", "...", ",", "6", "]", "\n", "offset_rot", "=", "common_utils", ".", "limit_period", "(", "rot_gt", "-", "dir_offset", ",", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "dir_cls_targets", "=", "torch", ".", "floor", "(", "offset_rot", "/", "(", "2", "*", "np", ".", "pi", "/", "num_bins", ")", ")", ".", "long", "(", ")", "\n", "dir_cls_targets", "=", "torch", ".", "clamp", "(", "dir_cls_targets", ",", "min", "=", "0", ",", "max", "=", "num_bins", "-", "1", ")", "\n", "\n", "if", "one_hot", ":", "\n", "            ", "dir_targets", "=", "torch", ".", "zeros", "(", "*", "list", "(", "dir_cls_targets", ".", "shape", ")", ",", "num_bins", ",", "dtype", "=", "anchors", ".", "dtype", ",", "\n", "device", "=", "dir_cls_targets", ".", "device", ")", "\n", "dir_targets", ".", "scatter_", "(", "-", "1", ",", "dir_cls_targets", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "long", "(", ")", ",", "1.0", ")", "\n", "dir_cls_targets", "=", "dir_targets", "\n", "", "return", "dir_cls_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.get_box_reg_layer_loss": [[162, 215], ["anchor_head_template.AnchorHeadTemplate.forward_ret_dict.get", "int", "positives.float", "positives.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "isinstance", "torch.cat.view().repeat", "torch.cat.view().repeat", "box_preds.view.view.view", "anchor_head_template.AnchorHeadTemplate.add_sin_difference", "anchor_head_template.AnchorHeadTemplate.reg_loss_func", "anchor_head_template.AnchorHeadTemplate.sum", "loc_loss.item", "anchor_head_template.AnchorHeadTemplate.get_direction_target", "anchor_head_template.AnchorHeadTemplate.view", "positives.type_as", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "anchor_head_template.AnchorHeadTemplate.dir_loss_func", "anchor_head_template.AnchorHeadTemplate.item", "positives.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "positives.type_as.sum", "anchor_head_template.AnchorHeadTemplate.sum", "anchor.permute().contiguous().view", "anchor.permute().contiguous", "anchor.permute"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.add_sin_difference", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.get_direction_target"], ["", "def", "get_box_reg_layer_loss", "(", "self", ")", ":", "\n", "        ", "box_preds", "=", "self", ".", "forward_ret_dict", "[", "'box_preds'", "]", "\n", "box_dir_cls_preds", "=", "self", ".", "forward_ret_dict", ".", "get", "(", "'dir_cls_preds'", ",", "None", ")", "\n", "box_reg_targets", "=", "self", ".", "forward_ret_dict", "[", "'box_reg_targets'", "]", "\n", "box_cls_labels", "=", "self", ".", "forward_ret_dict", "[", "'box_cls_labels'", "]", "\n", "batch_size", "=", "int", "(", "box_preds", ".", "shape", "[", "0", "]", ")", "\n", "\n", "positives", "=", "box_cls_labels", ">", "0", "\n", "reg_weights", "=", "positives", ".", "float", "(", ")", "\n", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "anchors", ",", "list", ")", ":", "\n", "            ", "if", "self", ".", "use_multihead", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "\n", "[", "anchor", ".", "permute", "(", "3", ",", "4", ",", "0", ",", "1", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "anchor", ".", "shape", "[", "-", "1", "]", ")", "for", "anchor", "in", "\n", "self", ".", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "self", ".", "anchors", ",", "dim", "=", "-", "3", ")", "\n", "", "", "else", ":", "\n", "            ", "anchors", "=", "self", ".", "anchors", "\n", "", "anchors", "=", "anchors", ".", "view", "(", "1", ",", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "\n", "box_preds", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "num_anchors_per_location", "if", "not", "self", ".", "use_multihead", "else", "\n", "box_preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "# sin(a - b) = sinacosb-cosasinb", "\n", "box_preds_sin", ",", "reg_targets_sin", "=", "self", ".", "add_sin_difference", "(", "box_preds", ",", "box_reg_targets", ")", "\n", "loc_loss_src", "=", "self", ".", "reg_loss_func", "(", "box_preds_sin", ",", "reg_targets_sin", ",", "weights", "=", "reg_weights", ")", "# [N, M]", "\n", "loc_loss", "=", "loc_loss_src", ".", "sum", "(", ")", "/", "batch_size", "\n", "\n", "loc_loss", "=", "loc_loss", "*", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'loc_weight'", "]", "\n", "box_loss", "=", "loc_loss", "\n", "tb_dict", "=", "{", "\n", "'rpn_loss_loc'", ":", "loc_loss", ".", "item", "(", ")", "\n", "}", "\n", "\n", "if", "box_dir_cls_preds", "is", "not", "None", ":", "\n", "            ", "dir_targets", "=", "self", ".", "get_direction_target", "(", "\n", "anchors", ",", "box_reg_targets", ",", "\n", "dir_offset", "=", "self", ".", "model_cfg", ".", "DIR_OFFSET", ",", "\n", "num_bins", "=", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", "\n", ")", "\n", "\n", "dir_logits", "=", "box_dir_cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ")", "\n", "weights", "=", "positives", ".", "type_as", "(", "dir_logits", ")", "\n", "weights", "/=", "torch", ".", "clamp", "(", "weights", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1.0", ")", "\n", "dir_loss", "=", "self", ".", "dir_loss_func", "(", "dir_logits", ",", "dir_targets", ",", "weights", "=", "weights", ")", "\n", "dir_loss", "=", "dir_loss", ".", "sum", "(", ")", "/", "batch_size", "\n", "dir_loss", "=", "dir_loss", "*", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'dir_weight'", "]", "\n", "box_loss", "+=", "dir_loss", "\n", "tb_dict", "[", "'rpn_loss_dir'", "]", "=", "dir_loss", ".", "item", "(", ")", "\n", "\n", "", "return", "box_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.get_loss": [[216, 224], ["anchor_head_template.AnchorHeadTemplate.get_cls_layer_loss", "anchor_head_template.AnchorHeadTemplate.get_box_reg_layer_loss", "tb_dict.update", "rpn_loss.item"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.get_cls_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.get_box_reg_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "cls_loss", ",", "tb_dict", "=", "self", ".", "get_cls_layer_loss", "(", ")", "\n", "box_loss", ",", "tb_dict_box", "=", "self", ".", "get_box_reg_layer_loss", "(", ")", "\n", "tb_dict", ".", "update", "(", "tb_dict_box", ")", "\n", "rpn_loss", "=", "cls_loss", "+", "box_loss", "\n", "\n", "tb_dict", "[", "'rpn_loss'", "]", "=", "rpn_loss", ".", "item", "(", ")", "\n", "return", "rpn_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes": [[225, 273], ["isinstance", "torch.cat.view().repeat", "torch.cat.view().repeat", "anchor_head_template.AnchorHeadTemplate.box_coder.decode_torch", "isinstance", "cls_preds.view().float", "box_preds.view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "utils.common_utils.limit_period", "utils.common_utils.limit_period", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "isinstance", "isinstance", "dir_cls_preds.view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.max", "torch.max", "torch.max", "torch.max", "cls_preds.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "dir_labels.to", "anchor.permute().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "anchor.permute().contiguous", "anchor.permute"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.box_coder_utils.PointResidualCoder.decode_torch", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.limit_period", "home.repos.pwc.inspect_result.dschinagl_occam.waymo.waymo_eval.limit_period"], ["", "def", "generate_predicted_boxes", "(", "self", ",", "batch_size", ",", "cls_preds", ",", "box_preds", ",", "dir_cls_preds", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_size:\n            cls_preds: (N, H, W, C1)\n            box_preds: (N, H, W, C2)\n            dir_cls_preds: (N, H, W, C3)\n\n        Returns:\n            batch_cls_preds: (B, num_boxes, num_classes)\n            batch_box_preds: (B, num_boxes, 7+C)\n\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "anchors", ",", "list", ")", ":", "\n", "            ", "if", "self", ".", "use_multihead", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "[", "anchor", ".", "permute", "(", "3", ",", "4", ",", "0", ",", "1", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "anchor", ".", "shape", "[", "-", "1", "]", ")", "\n", "for", "anchor", "in", "self", ".", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "self", ".", "anchors", ",", "dim", "=", "-", "3", ")", "\n", "", "", "else", ":", "\n", "            ", "anchors", "=", "self", ".", "anchors", "\n", "", "num_anchors", "=", "anchors", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", ".", "shape", "[", "0", "]", "\n", "batch_anchors", "=", "anchors", ".", "view", "(", "1", ",", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "batch_cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", ".", "float", "(", ")", "if", "not", "isinstance", "(", "cls_preds", ",", "list", ")", "else", "cls_preds", "\n", "batch_box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", "if", "not", "isinstance", "(", "box_preds", ",", "list", ")", "else", "torch", ".", "cat", "(", "box_preds", ",", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", "\n", "batch_box_preds", "=", "self", ".", "box_coder", ".", "decode_torch", "(", "batch_box_preds", ",", "batch_anchors", ")", "\n", "\n", "if", "dir_cls_preds", "is", "not", "None", ":", "\n", "            ", "dir_offset", "=", "self", ".", "model_cfg", ".", "DIR_OFFSET", "\n", "dir_limit_offset", "=", "self", ".", "model_cfg", ".", "DIR_LIMIT_OFFSET", "\n", "dir_cls_preds", "=", "dir_cls_preds", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", "if", "not", "isinstance", "(", "dir_cls_preds", ",", "list", ")", "else", "torch", ".", "cat", "(", "dir_cls_preds", ",", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", "\n", "dir_labels", "=", "torch", ".", "max", "(", "dir_cls_preds", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "\n", "period", "=", "(", "2", "*", "np", ".", "pi", "/", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ")", "\n", "dir_rot", "=", "common_utils", ".", "limit_period", "(", "\n", "batch_box_preds", "[", "...", ",", "6", "]", "-", "dir_offset", ",", "dir_limit_offset", ",", "period", "\n", ")", "\n", "batch_box_preds", "[", "...", ",", "6", "]", "=", "dir_rot", "+", "dir_offset", "+", "period", "*", "dir_labels", ".", "to", "(", "batch_box_preds", ".", "dtype", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "box_coder", ",", "box_coder_utils", ".", "PreviousResidualDecoder", ")", ":", "\n", "            ", "batch_box_preds", "[", "...", ",", "6", "]", "=", "common_utils", ".", "limit_period", "(", "\n", "-", "(", "batch_box_preds", "[", "...", ",", "6", "]", "+", "np", ".", "pi", "/", "2", ")", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "\n", "", "return", "batch_cls_preds", ",", "batch_box_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.forward": [[274, 276], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.__init__": [[10, 96], ["backbones_2d.BaseBEVBackbone.__init__", "anchor_head_multi.SingleHead.register_buffer", "anchor_head_multi.SingleHead.model_cfg.get", "anchor_head_multi.SingleHead.init_weights", "torch.ModuleDict", "torch.ModuleDict", "range", "conv_cls_list.append", "torch.Sequential", "torch.Sequential", "anchor_head_multi.SingleHead.conv_box.modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "anchor_head_multi.SingleHead.model_cfg.get", "torch.Conv2d", "torch.Conv2d", "conv_cls_list.extend", "torch.Conv2d", "torch.Conv2d", "reg_config.split", "int", "range", "cur_conv_list.append", "torch.Sequential", "torch.Sequential", "anchor_head_multi.SingleHead.conv_box_names.append", "isinstance", "cur_conv_list.extend", "torch.Conv2d", "torch.Conv2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "num_class", ",", "num_anchors_per_location", ",", "code_size", ",", "rpn_head_cfg", "=", "None", ",", "\n", "head_label_indices", "=", "None", ",", "separate_reg_config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "rpn_head_cfg", ",", "input_channels", ")", "\n", "\n", "self", ".", "num_anchors_per_location", "=", "num_anchors_per_location", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "code_size", "=", "code_size", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "separate_reg_config", "=", "separate_reg_config", "\n", "self", ".", "register_buffer", "(", "'head_label_indices'", ",", "head_label_indices", ")", "\n", "\n", "if", "self", ".", "separate_reg_config", "is", "not", "None", ":", "\n", "            ", "code_size_cnt", "=", "0", "\n", "self", ".", "conv_box", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "conv_box_names", "=", "[", "]", "\n", "num_middle_conv", "=", "self", ".", "separate_reg_config", ".", "NUM_MIDDLE_CONV", "\n", "num_middle_filter", "=", "self", ".", "separate_reg_config", ".", "NUM_MIDDLE_FILTER", "\n", "conv_cls_list", "=", "[", "]", "\n", "c_in", "=", "input_channels", "\n", "for", "k", "in", "range", "(", "num_middle_conv", ")", ":", "\n", "                ", "conv_cls_list", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "\n", "c_in", ",", "num_middle_filter", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_middle_filter", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "c_in", "=", "num_middle_filter", "\n", "", "conv_cls_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "\n", "c_in", ",", "self", ".", "num_anchors_per_location", "*", "self", ".", "num_class", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", ")", "\n", "self", ".", "conv_cls", "=", "nn", ".", "Sequential", "(", "*", "conv_cls_list", ")", "\n", "\n", "for", "reg_config", "in", "self", ".", "separate_reg_config", ".", "REG_LIST", ":", "\n", "                ", "reg_name", ",", "reg_channel", "=", "reg_config", ".", "split", "(", "':'", ")", "\n", "reg_channel", "=", "int", "(", "reg_channel", ")", "\n", "cur_conv_list", "=", "[", "]", "\n", "c_in", "=", "input_channels", "\n", "for", "k", "in", "range", "(", "num_middle_conv", ")", ":", "\n", "                    ", "cur_conv_list", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "\n", "c_in", ",", "num_middle_filter", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_middle_filter", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "c_in", "=", "num_middle_filter", "\n", "\n", "", "cur_conv_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "\n", "c_in", ",", "self", ".", "num_anchors_per_location", "*", "int", "(", "reg_channel", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", "\n", ")", ")", "\n", "code_size_cnt", "+=", "reg_channel", "\n", "self", ".", "conv_box", "[", "f'conv_{reg_name}'", "]", "=", "nn", ".", "Sequential", "(", "*", "cur_conv_list", ")", "\n", "self", ".", "conv_box_names", ".", "append", "(", "f'conv_{reg_name}'", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv_box", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "assert", "code_size_cnt", "==", "code_size", ",", "f'Code size does not match: {code_size_cnt}:{code_size}'", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_cls", "=", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "self", ".", "num_anchors_per_location", "*", "self", ".", "num_class", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "self", ".", "conv_box", "=", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "self", ".", "num_anchors_per_location", "*", "self", ".", "code_size", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "\n", "", "if", "self", ".", "model_cfg", ".", "get", "(", "'USE_DIRECTION_CLASSIFIER'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "\n", "self", ".", "num_anchors_per_location", "*", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "None", "\n", "", "self", ".", "use_multihead", "=", "self", ".", "model_cfg", ".", "get", "(", "'USE_MULTIHEAD'", ",", "False", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.init_weights": [[97, 103], ["isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pi", "=", "0.01", "\n", "if", "isinstance", "(", "self", ".", "conv_cls", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_cls", ".", "bias", ",", "-", "np", ".", "log", "(", "(", "1", "-", "pi", ")", "/", "pi", ")", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_cls", "[", "-", "1", "]", ".", "bias", ",", "-", "np", ".", "log", "(", "(", "1", "-", "pi", ")", "/", "pi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.SingleHead.forward": [[104, 149], ["anchor_head_multi.SingleHead.conv_cls", "super().forward", "anchor_head_multi.SingleHead.conv_box", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "box_preds.view.view.permute().contiguous", "cls_preds.view.view.permute().contiguous", "box_preds.view.view.view().permute().contiguous", "cls_preds.view.view.view().permute().contiguous", "box_preds.view.view.view", "cls_preds.view.view.view", "anchor_head_multi.SingleHead.conv_dir_cls", "box_preds_list.append", "dir_cls_preds.permute().contiguous.permute().contiguous.view().permute().contiguous", "dir_cls_preds.permute().contiguous.permute().contiguous.view", "dir_cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "box_preds.view.view.permute", "cls_preds.view.view.permute", "box_preds.view.view.view().permute", "cls_preds.view.view.view().permute", "dir_cls_preds.permute().contiguous.permute().contiguous.view().permute", "dir_cls_preds.permute().contiguous.permute().contiguous.permute", "box_preds.view.view.view", "cls_preds.view.view.view", "dir_cls_preds.permute().contiguous.permute().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward"], ["", "", "def", "forward", "(", "self", ",", "spatial_features_2d", ")", ":", "\n", "        ", "ret_dict", "=", "{", "}", "\n", "spatial_features_2d", "=", "super", "(", ")", ".", "forward", "(", "{", "'spatial_features'", ":", "spatial_features_2d", "}", ")", "[", "'spatial_features_2d'", "]", "\n", "\n", "cls_preds", "=", "self", ".", "conv_cls", "(", "spatial_features_2d", ")", "\n", "\n", "if", "self", ".", "separate_reg_config", "is", "None", ":", "\n", "            ", "box_preds", "=", "self", ".", "conv_box", "(", "spatial_features_2d", ")", "\n", "", "else", ":", "\n", "            ", "box_preds_list", "=", "[", "]", "\n", "for", "reg_name", "in", "self", ".", "conv_box_names", ":", "\n", "                ", "box_preds_list", ".", "append", "(", "self", ".", "conv_box", "[", "reg_name", "]", "(", "spatial_features_2d", ")", ")", "\n", "", "box_preds", "=", "torch", ".", "cat", "(", "box_preds_list", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "not", "self", ".", "use_multihead", ":", "\n", "            ", "box_preds", "=", "box_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "cls_preds", "=", "cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "H", ",", "W", "=", "box_preds", ".", "shape", "[", "2", ":", "]", "\n", "batch_size", "=", "box_preds", ".", "shape", "[", "0", "]", "\n", "box_preds", "=", "box_preds", ".", "view", "(", "-", "1", ",", "self", ".", "num_anchors_per_location", ",", "\n", "self", ".", "code_size", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "cls_preds", "=", "cls_preds", ".", "view", "(", "-", "1", ",", "self", ".", "num_anchors_per_location", ",", "\n", "self", ".", "num_class", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "code_size", ")", "\n", "cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_class", ")", "\n", "\n", "", "if", "self", ".", "conv_dir_cls", "is", "not", "None", ":", "\n", "            ", "dir_cls_preds", "=", "self", ".", "conv_dir_cls", "(", "spatial_features_2d", ")", "\n", "if", "self", ".", "use_multihead", ":", "\n", "                ", "dir_cls_preds", "=", "dir_cls_preds", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_anchors_per_location", ",", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "\n", "2", ")", ".", "contiguous", "(", ")", "\n", "dir_cls_preds", "=", "dir_cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ")", "\n", "", "else", ":", "\n", "                ", "dir_cls_preds", "=", "dir_cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "dir_cls_preds", "=", "None", "\n", "\n", "", "ret_dict", "[", "'cls_preds'", "]", "=", "cls_preds", "\n", "ret_dict", "[", "'box_preds'", "]", "=", "box_preds", "\n", "ret_dict", "[", "'dir_cls_preds'", "]", "=", "dir_cls_preds", "\n", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.__init__": [[152, 173], ["anchor_head_template.AnchorHeadTemplate.__init__", "anchor_head_multi.AnchorHeadMulti.model_cfg.get", "anchor_head_multi.AnchorHeadMulti.make_multihead", "anchor_head_multi.AnchorHeadMulti.model_cfg.get", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.make_multihead"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "num_class", ",", "class_names", ",", "grid_size", ",", "point_cloud_range", ",", "\n", "predict_boxes_when_training", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "class_names", "=", "class_names", ",", "grid_size", "=", "grid_size", ",", "\n", "point_cloud_range", "=", "point_cloud_range", ",", "predict_boxes_when_training", "=", "predict_boxes_when_training", "\n", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "separate_multihead", "=", "self", ".", "model_cfg", ".", "get", "(", "'SEPARATE_MULTIHEAD'", ",", "False", ")", "\n", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'SHARED_CONV_NUM_FILTER'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "shared_conv_num_filter", "=", "self", ".", "model_cfg", ".", "SHARED_CONV_NUM_FILTER", "\n", "self", ".", "shared_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "shared_conv_num_filter", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "shared_conv_num_filter", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shared_conv", "=", "None", "\n", "shared_conv_num_filter", "=", "input_channels", "\n", "", "self", ".", "rpn_heads", "=", "None", "\n", "self", ".", "make_multihead", "(", "shared_conv_num_filter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.make_multihead": [[174, 197], ["torch.ModuleList", "torch.ModuleList", "class_names.extend", "sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "anchor_head_multi.SingleHead", "rpn_heads.append", "numpy.array", "len", "anchor_head_multi.AnchorHeadMulti.model_cfg.get", "class_names.index", "anchor_head_multi.AnchorHeadMulti.class_names.index"], "methods", ["None"], ["", "def", "make_multihead", "(", "self", ",", "input_channels", ")", ":", "\n", "        ", "rpn_head_cfgs", "=", "self", ".", "model_cfg", ".", "RPN_HEAD_CFGS", "\n", "rpn_heads", "=", "[", "]", "\n", "class_names", "=", "[", "]", "\n", "for", "rpn_head_cfg", "in", "rpn_head_cfgs", ":", "\n", "            ", "class_names", ".", "extend", "(", "rpn_head_cfg", "[", "'HEAD_CLS_NAME'", "]", ")", "\n", "\n", "", "for", "rpn_head_cfg", "in", "rpn_head_cfgs", ":", "\n", "            ", "num_anchors_per_location", "=", "sum", "(", "[", "self", ".", "num_anchors_per_location", "[", "class_names", ".", "index", "(", "head_cls", ")", "]", "\n", "for", "head_cls", "in", "rpn_head_cfg", "[", "'HEAD_CLS_NAME'", "]", "]", ")", "\n", "head_label_indices", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "\n", "self", ".", "class_names", ".", "index", "(", "cur_name", ")", "+", "1", "for", "cur_name", "in", "rpn_head_cfg", "[", "'HEAD_CLS_NAME'", "]", "\n", "]", ")", ")", "\n", "\n", "rpn_head", "=", "SingleHead", "(", "\n", "self", ".", "model_cfg", ",", "input_channels", ",", "\n", "len", "(", "rpn_head_cfg", "[", "'HEAD_CLS_NAME'", "]", ")", "if", "self", ".", "separate_multihead", "else", "self", ".", "num_class", ",", "\n", "num_anchors_per_location", ",", "self", ".", "box_coder", ".", "code_size", ",", "rpn_head_cfg", ",", "\n", "head_label_indices", "=", "head_label_indices", ",", "\n", "separate_reg_config", "=", "self", ".", "model_cfg", ".", "get", "(", "'SEPARATE_REG_CONFIG'", ",", "None", ")", "\n", ")", "\n", "rpn_heads", ".", "append", "(", "rpn_head", ")", "\n", "", "self", ".", "rpn_heads", "=", "nn", ".", "ModuleList", "(", "rpn_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.forward": [[198, 244], ["anchor_head_multi.AnchorHeadMulti.model_cfg.get", "anchor_head_multi.AnchorHeadMulti.forward_ret_dict.update", "anchor_head_multi.AnchorHeadMulti.shared_conv", "ret_dicts.append", "anchor_head_multi.AnchorHeadMulti.assign_targets", "anchor_head_multi.AnchorHeadMulti.forward_ret_dict.update", "anchor_head_multi.AnchorHeadMulti.generate_predicted_boxes", "isinstance", "rpn_head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "ret.get", "len", "multihead_label_mapping.append"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "home.repos.pwc.inspect_result.dschinagl_occam.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "spatial_features_2d", "=", "data_dict", "[", "'spatial_features_2d'", "]", "\n", "if", "self", ".", "shared_conv", "is", "not", "None", ":", "\n", "            ", "spatial_features_2d", "=", "self", ".", "shared_conv", "(", "spatial_features_2d", ")", "\n", "\n", "", "ret_dicts", "=", "[", "]", "\n", "for", "rpn_head", "in", "self", ".", "rpn_heads", ":", "\n", "            ", "ret_dicts", ".", "append", "(", "rpn_head", "(", "spatial_features_2d", ")", ")", "\n", "\n", "", "cls_preds", "=", "[", "ret_dict", "[", "'cls_preds'", "]", "for", "ret_dict", "in", "ret_dicts", "]", "\n", "box_preds", "=", "[", "ret_dict", "[", "'box_preds'", "]", "for", "ret_dict", "in", "ret_dicts", "]", "\n", "ret", "=", "{", "\n", "'cls_preds'", ":", "cls_preds", "if", "self", ".", "separate_multihead", "else", "torch", ".", "cat", "(", "cls_preds", ",", "dim", "=", "1", ")", ",", "\n", "'box_preds'", ":", "box_preds", "if", "self", ".", "separate_multihead", "else", "torch", ".", "cat", "(", "box_preds", ",", "dim", "=", "1", ")", ",", "\n", "}", "\n", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'USE_DIRECTION_CLASSIFIER'", ",", "False", ")", ":", "\n", "            ", "dir_cls_preds", "=", "[", "ret_dict", "[", "'dir_cls_preds'", "]", "for", "ret_dict", "in", "ret_dicts", "]", "\n", "ret", "[", "'dir_cls_preds'", "]", "=", "dir_cls_preds", "if", "self", ".", "separate_multihead", "else", "torch", ".", "cat", "(", "dir_cls_preds", ",", "dim", "=", "1", ")", "\n", "\n", "", "self", ".", "forward_ret_dict", ".", "update", "(", "ret", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "\n", ")", "\n", "self", ".", "forward_ret_dict", ".", "update", "(", "targets_dict", ")", "\n", "\n", "", "if", "not", "self", ".", "training", "or", "self", ".", "predict_boxes_when_training", ":", "\n", "            ", "batch_cls_preds", ",", "batch_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "batch_size", "=", "data_dict", "[", "'batch_size'", "]", ",", "\n", "cls_preds", "=", "ret", "[", "'cls_preds'", "]", ",", "box_preds", "=", "ret", "[", "'box_preds'", "]", ",", "dir_cls_preds", "=", "ret", ".", "get", "(", "'dir_cls_preds'", ",", "None", ")", "\n", ")", "\n", "\n", "if", "isinstance", "(", "batch_cls_preds", ",", "list", ")", ":", "\n", "                ", "multihead_label_mapping", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "batch_cls_preds", ")", ")", ":", "\n", "                    ", "multihead_label_mapping", ".", "append", "(", "self", ".", "rpn_heads", "[", "idx", "]", ".", "head_label_indices", ")", "\n", "\n", "", "data_dict", "[", "'multihead_label_mapping'", "]", "=", "multihead_label_mapping", "\n", "\n", "", "data_dict", "[", "'batch_cls_preds'", "]", "=", "batch_cls_preds", "\n", "data_dict", "[", "'batch_box_preds'", "]", "=", "batch_box_preds", "\n", "data_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.get_cls_layer_loss": [[245, 302], ["int", "positives.float", "positives.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "enumerate", "isinstance", "cared.type_as", "cls_targets.unsqueeze().long", "cls_pred.view.view.view", "anchor_head_multi.AnchorHeadMulti.cls_loss_func", "cls_losses.item", "positives.sum", "list", "anchor_head_multi.AnchorHeadMulti.sum", "cls_targets.unsqueeze"], "methods", ["None"], ["", "def", "get_cls_layer_loss", "(", "self", ")", ":", "\n", "        ", "loss_weights", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "\n", "if", "'pos_cls_weight'", "in", "loss_weights", ":", "\n", "            ", "pos_cls_weight", "=", "loss_weights", "[", "'pos_cls_weight'", "]", "\n", "neg_cls_weight", "=", "loss_weights", "[", "'neg_cls_weight'", "]", "\n", "", "else", ":", "\n", "            ", "pos_cls_weight", "=", "neg_cls_weight", "=", "1.0", "\n", "\n", "", "cls_preds", "=", "self", ".", "forward_ret_dict", "[", "'cls_preds'", "]", "\n", "box_cls_labels", "=", "self", ".", "forward_ret_dict", "[", "'box_cls_labels'", "]", "\n", "if", "not", "isinstance", "(", "cls_preds", ",", "list", ")", ":", "\n", "            ", "cls_preds", "=", "[", "cls_preds", "]", "\n", "", "batch_size", "=", "int", "(", "cls_preds", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", "cared", "=", "box_cls_labels", ">=", "0", "# [N, num_anchors]", "\n", "positives", "=", "box_cls_labels", ">", "0", "\n", "negatives", "=", "box_cls_labels", "==", "0", "\n", "negative_cls_weights", "=", "negatives", "*", "1.0", "*", "neg_cls_weight", "\n", "\n", "cls_weights", "=", "(", "negative_cls_weights", "+", "pos_cls_weight", "*", "positives", ")", ".", "float", "(", ")", "\n", "\n", "reg_weights", "=", "positives", ".", "float", "(", ")", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "# class agnostic", "\n", "            ", "box_cls_labels", "[", "positives", "]", "=", "1", "\n", "", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "cls_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "cls_targets", "=", "box_cls_labels", "*", "cared", ".", "type_as", "(", "box_cls_labels", ")", "\n", "one_hot_targets", "=", "torch", ".", "zeros", "(", "\n", "*", "list", "(", "cls_targets", ".", "shape", ")", ",", "self", ".", "num_class", "+", "1", ",", "dtype", "=", "cls_preds", "[", "0", "]", ".", "dtype", ",", "device", "=", "cls_targets", ".", "device", "\n", ")", "\n", "one_hot_targets", ".", "scatter_", "(", "-", "1", ",", "cls_targets", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "long", "(", ")", ",", "1.0", ")", "\n", "one_hot_targets", "=", "one_hot_targets", "[", "...", ",", "1", ":", "]", "\n", "start_idx", "=", "c_idx", "=", "0", "\n", "cls_losses", "=", "0", "\n", "\n", "for", "idx", ",", "cls_pred", "in", "enumerate", "(", "cls_preds", ")", ":", "\n", "            ", "cur_num_class", "=", "self", ".", "rpn_heads", "[", "idx", "]", ".", "num_class", "\n", "cls_pred", "=", "cls_pred", ".", "view", "(", "batch_size", ",", "-", "1", ",", "cur_num_class", ")", "\n", "if", "self", ".", "separate_multihead", ":", "\n", "                ", "one_hot_target", "=", "one_hot_targets", "[", ":", ",", "start_idx", ":", "start_idx", "+", "cls_pred", ".", "shape", "[", "1", "]", ",", "\n", "c_idx", ":", "c_idx", "+", "cur_num_class", "]", "\n", "c_idx", "+=", "cur_num_class", "\n", "", "else", ":", "\n", "                ", "one_hot_target", "=", "one_hot_targets", "[", ":", ",", "start_idx", ":", "start_idx", "+", "cls_pred", ".", "shape", "[", "1", "]", "]", "\n", "", "cls_weight", "=", "cls_weights", "[", ":", ",", "start_idx", ":", "start_idx", "+", "cls_pred", ".", "shape", "[", "1", "]", "]", "\n", "cls_loss_src", "=", "self", ".", "cls_loss_func", "(", "cls_pred", ",", "one_hot_target", ",", "weights", "=", "cls_weight", ")", "# [N, M]", "\n", "cls_loss", "=", "cls_loss_src", ".", "sum", "(", ")", "/", "batch_size", "\n", "cls_loss", "=", "cls_loss", "*", "loss_weights", "[", "'cls_weight'", "]", "\n", "cls_losses", "+=", "cls_loss", "\n", "start_idx", "+=", "cls_pred", ".", "shape", "[", "1", "]", "\n", "", "assert", "start_idx", "==", "one_hot_targets", ".", "shape", "[", "1", "]", "\n", "tb_dict", "=", "{", "\n", "'rpn_loss_cls'", ":", "cls_losses", ".", "item", "(", ")", "\n", "}", "\n", "return", "cls_losses", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.get_box_reg_layer_loss": [[303, 374], ["anchor_head_multi.AnchorHeadMulti.forward_ret_dict.get", "positives.float", "positives.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "int", "isinstance", "torch.cat.view().repeat", "torch.cat.view().repeat", "enumerate", "isinstance", "box_pred.view.view.view", "positives.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "anchor_head_multi.AnchorHeadMulti.add_sin_difference", "anchor_head_multi.AnchorHeadMulti.reg_loss_func", "anchor_head_multi.AnchorHeadMulti.reg_loss_func", "anchor_head_multi.AnchorHeadMulti.sum", "tb_dict.get", "loc_loss.item", "anchor_head_multi.AnchorHeadMulti.get_direction_target", "box_dir_cls_pred.view", "positives.type_as", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "anchor_head_multi.AnchorHeadMulti.dir_loss_func", "isinstance", "positives.type_as.sum", "anchor_head_multi.AnchorHeadMulti.sum", "tb_dict.get", "anchor_head_multi.AnchorHeadMulti.item", "anchor.permute().contiguous().view", "anchor.permute().contiguous", "anchor.permute"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.add_sin_difference", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.get_direction_target"], ["", "def", "get_box_reg_layer_loss", "(", "self", ")", ":", "\n", "        ", "box_preds", "=", "self", ".", "forward_ret_dict", "[", "'box_preds'", "]", "\n", "box_dir_cls_preds", "=", "self", ".", "forward_ret_dict", ".", "get", "(", "'dir_cls_preds'", ",", "None", ")", "\n", "box_reg_targets", "=", "self", ".", "forward_ret_dict", "[", "'box_reg_targets'", "]", "\n", "box_cls_labels", "=", "self", ".", "forward_ret_dict", "[", "'box_cls_labels'", "]", "\n", "\n", "positives", "=", "box_cls_labels", ">", "0", "\n", "reg_weights", "=", "positives", ".", "float", "(", ")", "\n", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "\n", "if", "not", "isinstance", "(", "box_preds", ",", "list", ")", ":", "\n", "            ", "box_preds", "=", "[", "box_preds", "]", "\n", "", "batch_size", "=", "int", "(", "box_preds", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "anchors", ",", "list", ")", ":", "\n", "            ", "if", "self", ".", "use_multihead", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "\n", "[", "anchor", ".", "permute", "(", "3", ",", "4", ",", "0", ",", "1", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "anchor", ".", "shape", "[", "-", "1", "]", ")", "\n", "for", "anchor", "in", "self", ".", "anchors", "]", ",", "dim", "=", "0", "\n", ")", "\n", "", "else", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "self", ".", "anchors", ",", "dim", "=", "-", "3", ")", "\n", "", "", "else", ":", "\n", "            ", "anchors", "=", "self", ".", "anchors", "\n", "", "anchors", "=", "anchors", ".", "view", "(", "1", ",", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "start_idx", "=", "0", "\n", "box_losses", "=", "0", "\n", "tb_dict", "=", "{", "}", "\n", "for", "idx", ",", "box_pred", "in", "enumerate", "(", "box_preds", ")", ":", "\n", "            ", "box_pred", "=", "box_pred", ".", "view", "(", "\n", "batch_size", ",", "-", "1", ",", "\n", "box_pred", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "num_anchors_per_location", "if", "not", "self", ".", "use_multihead", "else", "box_pred", ".", "shape", "[", "-", "1", "]", "\n", ")", "\n", "box_reg_target", "=", "box_reg_targets", "[", ":", ",", "start_idx", ":", "start_idx", "+", "box_pred", ".", "shape", "[", "1", "]", "]", "\n", "reg_weight", "=", "reg_weights", "[", ":", ",", "start_idx", ":", "start_idx", "+", "box_pred", ".", "shape", "[", "1", "]", "]", "\n", "# sin(a - b) = sinacosb-cosasinb", "\n", "if", "box_dir_cls_preds", "is", "not", "None", ":", "\n", "                ", "box_pred_sin", ",", "reg_target_sin", "=", "self", ".", "add_sin_difference", "(", "box_pred", ",", "box_reg_target", ")", "\n", "loc_loss_src", "=", "self", ".", "reg_loss_func", "(", "box_pred_sin", ",", "reg_target_sin", ",", "weights", "=", "reg_weight", ")", "# [N, M]", "\n", "", "else", ":", "\n", "                ", "loc_loss_src", "=", "self", ".", "reg_loss_func", "(", "box_pred", ",", "box_reg_target", ",", "weights", "=", "reg_weight", ")", "# [N, M]", "\n", "", "loc_loss", "=", "loc_loss_src", ".", "sum", "(", ")", "/", "batch_size", "\n", "\n", "loc_loss", "=", "loc_loss", "*", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'loc_weight'", "]", "\n", "box_losses", "+=", "loc_loss", "\n", "tb_dict", "[", "'rpn_loss_loc'", "]", "=", "tb_dict", ".", "get", "(", "'rpn_loss_loc'", ",", "0", ")", "+", "loc_loss", ".", "item", "(", ")", "\n", "\n", "if", "box_dir_cls_preds", "is", "not", "None", ":", "\n", "                ", "if", "not", "isinstance", "(", "box_dir_cls_preds", ",", "list", ")", ":", "\n", "                    ", "box_dir_cls_preds", "=", "[", "box_dir_cls_preds", "]", "\n", "", "dir_targets", "=", "self", ".", "get_direction_target", "(", "\n", "anchors", ",", "box_reg_targets", ",", "\n", "dir_offset", "=", "self", ".", "model_cfg", ".", "DIR_OFFSET", ",", "\n", "num_bins", "=", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", "\n", ")", "\n", "box_dir_cls_pred", "=", "box_dir_cls_preds", "[", "idx", "]", "\n", "dir_logit", "=", "box_dir_cls_pred", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ")", "\n", "weights", "=", "positives", ".", "type_as", "(", "dir_logit", ")", "\n", "weights", "/=", "torch", ".", "clamp", "(", "weights", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1.0", ")", "\n", "\n", "weight", "=", "weights", "[", ":", ",", "start_idx", ":", "start_idx", "+", "box_pred", ".", "shape", "[", "1", "]", "]", "\n", "dir_target", "=", "dir_targets", "[", ":", ",", "start_idx", ":", "start_idx", "+", "box_pred", ".", "shape", "[", "1", "]", "]", "\n", "dir_loss", "=", "self", ".", "dir_loss_func", "(", "dir_logit", ",", "dir_target", ",", "weights", "=", "weight", ")", "\n", "dir_loss", "=", "dir_loss", ".", "sum", "(", ")", "/", "batch_size", "\n", "dir_loss", "=", "dir_loss", "*", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'dir_weight'", "]", "\n", "box_losses", "+=", "dir_loss", "\n", "tb_dict", "[", "'rpn_loss_dir'", "]", "=", "tb_dict", ".", "get", "(", "'rpn_loss_dir'", ",", "0", ")", "+", "dir_loss", ".", "item", "(", ")", "\n", "", "start_idx", "+=", "box_pred", ".", "shape", "[", "1", "]", "\n", "", "return", "box_losses", ",", "tb_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.__init__": [[13, 38], ["point_head_template.PointHeadTemplate.__init__", "point_intra_part_head.PointIntraPartOffsetHead.make_fc_layers", "point_intra_part_head.PointIntraPartOffsetHead.make_fc_layers", "target_cfg.get", "point_intra_part_head.PointIntraPartOffsetHead.make_fc_layers", "getattr"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.make_fc_layers"], ["def", "__init__", "(", "self", ",", "num_class", ",", "input_channels", ",", "model_cfg", ",", "predict_boxes_when_training", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ")", "\n", "self", ".", "predict_boxes_when_training", "=", "predict_boxes_when_training", "\n", "self", ".", "cls_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "fc_cfg", "=", "self", ".", "model_cfg", ".", "CLS_FC", ",", "\n", "input_channels", "=", "input_channels", ",", "\n", "output_channels", "=", "num_class", "\n", ")", "\n", "self", ".", "part_reg_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "fc_cfg", "=", "self", ".", "model_cfg", ".", "PART_FC", ",", "\n", "input_channels", "=", "input_channels", ",", "\n", "output_channels", "=", "3", "\n", ")", "\n", "target_cfg", "=", "self", ".", "model_cfg", ".", "TARGET_CONFIG", "\n", "if", "target_cfg", ".", "get", "(", "'BOX_CODER'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "box_coder", "=", "getattr", "(", "box_coder_utils", ",", "target_cfg", ".", "BOX_CODER", ")", "(", "\n", "**", "target_cfg", ".", "BOX_CODER_CONFIG", "\n", ")", "\n", "self", ".", "box_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "fc_cfg", "=", "self", ".", "model_cfg", ".", "REG_FC", ",", "\n", "input_channels", "=", "input_channels", ",", "\n", "output_channels", "=", "self", ".", "box_coder", ".", "code_size", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "box_layers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets": [[39, 67], ["utils.box_utils.enlarge_box3d().view", "point_intra_part_head.PointIntraPartOffsetHead.assign_stack_targets", "gt_boxes.shape.__len__", "str", "point_coords.shape.__len__", "str", "utils.box_utils.enlarge_box3d", "gt_boxes.view"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.assign_stack_targets", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.pandaset.pandaset_dataset.PandasetDataset.__len__", "home.repos.pwc.inspect_result.dschinagl_occam.utils.box_utils.enlarge_box3d"], ["", "", "def", "assign_targets", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_dict:\n                point_features: (N1 + N2 + N3 + ..., C)\n                batch_size:\n                point_coords: (N1 + N2 + N3 + ..., 4) [bs_idx, x, y, z]\n                gt_boxes (optional): (B, M, 8)\n        Returns:\n            point_cls_labels: (N1 + N2 + N3 + ...), long type, 0:background, -1:ignored\n            point_part_labels: (N1 + N2 + N3 + ..., 3)\n        \"\"\"", "\n", "point_coords", "=", "input_dict", "[", "'point_coords'", "]", "\n", "gt_boxes", "=", "input_dict", "[", "'gt_boxes'", "]", "\n", "assert", "gt_boxes", ".", "shape", ".", "__len__", "(", ")", "==", "3", ",", "'gt_boxes.shape=%s'", "%", "str", "(", "gt_boxes", ".", "shape", ")", "\n", "assert", "point_coords", ".", "shape", ".", "__len__", "(", ")", "in", "[", "2", "]", ",", "'points.shape=%s'", "%", "str", "(", "point_coords", ".", "shape", ")", "\n", "\n", "batch_size", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "extend_gt_boxes", "=", "box_utils", ".", "enlarge_box3d", "(", "\n", "gt_boxes", ".", "view", "(", "-", "1", ",", "gt_boxes", ".", "shape", "[", "-", "1", "]", ")", ",", "extra_width", "=", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ".", "GT_EXTRA_WIDTH", "\n", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "gt_boxes", ".", "shape", "[", "-", "1", "]", ")", "\n", "targets_dict", "=", "self", ".", "assign_stack_targets", "(", "\n", "points", "=", "point_coords", ",", "gt_boxes", "=", "gt_boxes", ",", "extend_gt_boxes", "=", "extend_gt_boxes", ",", "\n", "set_ignore_flag", "=", "True", ",", "use_ball_constraint", "=", "False", ",", "\n", "ret_part_labels", "=", "True", ",", "ret_box_labels", "=", "(", "self", ".", "box_layers", "is", "not", "None", ")", "\n", ")", "\n", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.get_loss": [[68, 78], ["point_intra_part_head.PointIntraPartOffsetHead.get_cls_layer_loss", "point_intra_part_head.PointIntraPartOffsetHead.get_part_layer_loss", "point_intra_part_head.PointIntraPartOffsetHead.get_box_layer_loss"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_multi.AnchorHeadMulti.get_cls_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.get_part_layer_loss", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_head_template.PointHeadTemplate.get_box_layer_loss"], ["", "def", "get_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "tb_dict", "=", "{", "}", "if", "tb_dict", "is", "None", "else", "tb_dict", "\n", "point_loss_cls", ",", "tb_dict", "=", "self", ".", "get_cls_layer_loss", "(", "tb_dict", ")", "\n", "point_loss_part", ",", "tb_dict", "=", "self", ".", "get_part_layer_loss", "(", "tb_dict", ")", "\n", "point_loss", "=", "point_loss_cls", "+", "point_loss_part", "\n", "\n", "if", "self", ".", "box_layers", "is", "not", "None", ":", "\n", "            ", "point_loss_box", ",", "tb_dict", "=", "self", ".", "get_box_layer_loss", "(", "tb_dict", ")", "\n", "point_loss", "+=", "point_loss_box", "\n", "", "return", "point_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.forward": [[79, 128], ["point_intra_part_head.PointIntraPartOffsetHead.cls_layers", "point_intra_part_head.PointIntraPartOffsetHead.part_reg_layers", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.max", "point_intra_part_head.PointIntraPartOffsetHead.box_layers", "point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "point_intra_part_head.PointIntraPartOffsetHead.get", "point_intra_part_head.PointIntraPartOffsetHead.get", "point_intra_part_head.PointIntraPartOffsetHead.generate_predicted_boxes"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.center_head.CenterHead.sigmoid", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.point_intra_part_head.PointIntraPartOffsetHead.assign_targets", "home.repos.pwc.inspect_result.dschinagl_occam.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                point_features: (N1 + N2 + N3 + ..., C) or (B, N, C)\n                point_coords: (N1 + N2 + N3 + ..., 4) [bs_idx, x, y, z]\n                point_labels (optional): (N1 + N2 + N3 + ...)\n                gt_boxes (optional): (B, M, 8)\n        Returns:\n            batch_dict:\n                point_cls_scores: (N1 + N2 + N3 + ..., 1)\n                point_part_offset: (N1 + N2 + N3 + ..., 3)\n        \"\"\"", "\n", "point_features", "=", "batch_dict", "[", "'point_features'", "]", "\n", "point_cls_preds", "=", "self", ".", "cls_layers", "(", "point_features", ")", "# (total_points, num_class)", "\n", "point_part_preds", "=", "self", ".", "part_reg_layers", "(", "point_features", ")", "\n", "\n", "ret_dict", "=", "{", "\n", "'point_cls_preds'", ":", "point_cls_preds", ",", "\n", "'point_part_preds'", ":", "point_part_preds", ",", "\n", "}", "\n", "if", "self", ".", "box_layers", "is", "not", "None", ":", "\n", "            ", "point_box_preds", "=", "self", ".", "box_layers", "(", "point_features", ")", "\n", "ret_dict", "[", "'point_box_preds'", "]", "=", "point_box_preds", "\n", "\n", "", "point_cls_scores", "=", "torch", ".", "sigmoid", "(", "point_cls_preds", ")", "\n", "point_part_offset", "=", "torch", ".", "sigmoid", "(", "point_part_preds", ")", "\n", "batch_dict", "[", "'point_cls_scores'", "]", ",", "_", "=", "point_cls_scores", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "batch_dict", "[", "'point_part_offset'", "]", "=", "point_part_offset", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "ret_dict", "[", "'point_cls_labels'", "]", "=", "targets_dict", "[", "'point_cls_labels'", "]", "\n", "ret_dict", "[", "'point_part_labels'", "]", "=", "targets_dict", ".", "get", "(", "'point_part_labels'", ")", "\n", "ret_dict", "[", "'point_box_labels'", "]", "=", "targets_dict", ".", "get", "(", "'point_box_labels'", ")", "\n", "\n", "", "if", "self", ".", "box_layers", "is", "not", "None", "and", "(", "not", "self", ".", "training", "or", "self", ".", "predict_boxes_when_training", ")", ":", "\n", "            ", "point_cls_preds", ",", "point_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "points", "=", "batch_dict", "[", "'point_coords'", "]", "[", ":", ",", "1", ":", "4", "]", ",", "\n", "point_cls_preds", "=", "point_cls_preds", ",", "point_box_preds", "=", "ret_dict", "[", "'point_box_preds'", "]", "\n", ")", "\n", "batch_dict", "[", "'batch_cls_preds'", "]", "=", "point_cls_preds", "\n", "batch_dict", "[", "'batch_box_preds'", "]", "=", "point_box_preds", "\n", "batch_dict", "[", "'batch_index'", "]", "=", "batch_dict", "[", "'point_coords'", "]", "[", ":", ",", "0", "]", "\n", "batch_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "\n", "", "self", ".", "forward_ret_dict", "=", "ret_dict", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__": [[6, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Initializes convolutional block\n        Args:\n            in_channels: int, Number of input channels\n            out_channels: int, Number of output channels\n            **kwargs: Dict, Extra arguments for nn.Conv2d\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.basic_block_2d.BasicBlock2D.forward": [[23, 35], ["basic_block_2d.BasicBlock2D.conv", "basic_block_2d.BasicBlock2D.bn", "basic_block_2d.BasicBlock2D.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        Applies convolutional block\n        Args:\n            features: (B, C_in, H, W), Input features\n        Returns:\n            x: (B, C_out, H, W), Output features\n        \"\"\"", "\n", "x", "=", "self", ".", "conv", "(", "features", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.gaussian_radius": [[9, 36], ["torch.min", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["def", "gaussian_radius", "(", "height", ",", "width", ",", "min_overlap", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        height: (N)\n        width: (N)\n        min_overlap:\n    Returns:\n    \"\"\"", "\n", "a1", "=", "1", "\n", "b1", "=", "(", "height", "+", "width", ")", "\n", "c1", "=", "width", "*", "height", "*", "(", "1", "-", "min_overlap", ")", "/", "(", "1", "+", "min_overlap", ")", "\n", "sq1", "=", "(", "b1", "**", "2", "-", "4", "*", "a1", "*", "c1", ")", ".", "sqrt", "(", ")", "\n", "r1", "=", "(", "b1", "+", "sq1", ")", "/", "2", "\n", "\n", "a2", "=", "4", "\n", "b2", "=", "2", "*", "(", "height", "+", "width", ")", "\n", "c2", "=", "(", "1", "-", "min_overlap", ")", "*", "width", "*", "height", "\n", "sq2", "=", "(", "b2", "**", "2", "-", "4", "*", "a2", "*", "c2", ")", ".", "sqrt", "(", ")", "\n", "r2", "=", "(", "b2", "+", "sq2", ")", "/", "2", "\n", "\n", "a3", "=", "4", "*", "min_overlap", "\n", "b3", "=", "-", "2", "*", "min_overlap", "*", "(", "height", "+", "width", ")", "\n", "c3", "=", "(", "min_overlap", "-", "1", ")", "*", "width", "*", "height", "\n", "sq3", "=", "(", "b3", "**", "2", "-", "4", "*", "a3", "*", "c3", ")", ".", "sqrt", "(", ")", "\n", "r3", "=", "(", "b3", "+", "sq3", ")", "/", "2", "\n", "ret", "=", "torch", ".", "min", "(", "torch", ".", "min", "(", "r1", ",", "r2", ")", ",", "r3", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.gaussian2D": [[38, 45], ["numpy.exp", "np.exp.max", "numpy.finfo"], "function", ["None"], ["", "def", "gaussian2D", "(", "shape", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "m", ",", "n", "=", "[", "(", "ss", "-", "1.", ")", "/", "2.", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "m", ":", "m", "+", "1", ",", "-", "n", ":", "n", "+", "1", "]", "\n", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "\n", "h", "[", "h", "<", "np", ".", "finfo", "(", "h", ".", "dtype", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.draw_gaussian_to_heatmap": [[47, 70], ["centernet_utils.gaussian2D", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "int", "int", "min", "min", "min", "min", "torch.max", "torch.max", "torch.from_numpy().to", "torch.from_numpy().to", "min", "min", "cur_valid_mask.float", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.gaussian2D"], ["", "def", "draw_gaussian_to_heatmap", "(", "heatmap", ",", "center", ",", "radius", ",", "k", "=", "1", ",", "valid_mask", "=", "None", ")", ":", "\n", "    ", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "gaussian", "=", "gaussian2D", "(", "(", "diameter", ",", "diameter", ")", ",", "sigma", "=", "diameter", "/", "6", ")", "\n", "\n", "x", ",", "y", "=", "int", "(", "center", "[", "0", "]", ")", ",", "int", "(", "center", "[", "1", "]", ")", "\n", "\n", "height", ",", "width", "=", "heatmap", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "left", ",", "right", "=", "min", "(", "x", ",", "radius", ")", ",", "min", "(", "width", "-", "x", ",", "radius", "+", "1", ")", "\n", "top", ",", "bottom", "=", "min", "(", "y", ",", "radius", ")", ",", "min", "(", "height", "-", "y", ",", "radius", "+", "1", ")", "\n", "\n", "masked_heatmap", "=", "heatmap", "[", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "torch", ".", "from_numpy", "(", "\n", "gaussian", "[", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", ")", ".", "to", "(", "heatmap", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "if", "min", "(", "masked_gaussian", ".", "shape", ")", ">", "0", "and", "min", "(", "masked_heatmap", ".", "shape", ")", ">", "0", ":", "# TODO debug", "\n", "        ", "if", "valid_mask", "is", "not", "None", ":", "\n", "            ", "cur_valid_mask", "=", "valid_mask", "[", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "masked_gaussian", "*", "cur_valid_mask", ".", "float", "(", ")", "\n", "\n", "", "torch", ".", "max", "(", "masked_heatmap", ",", "masked_gaussian", "*", "k", ",", "out", "=", "masked_heatmap", ")", "\n", "", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._nms": [[72, 78], ["torch.max_pool2d"], "function", ["None"], ["", "def", "_nms", "(", "heat", ",", "kernel", "=", "3", ")", ":", "\n", "    ", "pad", "=", "(", "kernel", "-", "1", ")", "//", "2", "\n", "\n", "hmax", "=", "F", ".", "max_pool2d", "(", "heat", ",", "(", "kernel", ",", "kernel", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ")", "\n", "keep", "=", "(", "hmax", "==", "heat", ")", ".", "float", "(", ")", "\n", "return", "heat", "*", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.circle_nms": [[80, 105], ["numba.jit", "[].astype", "numpy.zeros", "range", "keep.append", "range", "scores.argsort"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "circle_nms", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "scores", "=", "dets", "[", ":", ",", "2", "]", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "# highest->lowest", "\n", "ndets", "=", "dets", ".", "shape", "[", "0", "]", "\n", "suppressed", "=", "np", ".", "zeros", "(", "(", "ndets", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "keep", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "ndets", ")", ":", "\n", "        ", "i", "=", "order", "[", "_i", "]", "# start with highest score box", "\n", "if", "suppressed", "[", "i", "]", "==", "1", ":", "# if any box have enough iou with this, remove it", "\n", "            ", "continue", "\n", "", "keep", ".", "append", "(", "i", ")", "\n", "for", "_j", "in", "range", "(", "_i", "+", "1", ",", "ndets", ")", ":", "\n", "            ", "j", "=", "order", "[", "_j", "]", "\n", "if", "suppressed", "[", "j", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "# calculate center distance between i and j box", "\n", "", "dist", "=", "(", "x1", "[", "i", "]", "-", "x1", "[", "j", "]", ")", "**", "2", "+", "(", "y1", "[", "i", "]", "-", "y1", "[", "j", "]", ")", "**", "2", "\n", "\n", "# ovr = inter / areas[j]", "\n", "if", "dist", "<=", "thresh", ":", "\n", "                ", "suppressed", "[", "j", "]", "=", "1", "\n", "", "", "", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._circle_nms": [[107, 116], ["torch.from_numpy().long().to", "torch.from_numpy().long().to", "numpy.array", "centernet_utils.circle_nms", "torch.from_numpy().long", "torch.from_numpy().long", "boxes.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "boxes.cpu"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.circle_nms"], ["", "def", "_circle_nms", "(", "boxes", ",", "min_radius", ",", "post_max_size", "=", "83", ")", ":", "\n", "    ", "\"\"\"\n    NMS according to center distance\n    \"\"\"", "\n", "keep", "=", "np", ".", "array", "(", "circle_nms", "(", "boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "thresh", "=", "min_radius", ")", ")", "[", ":", "post_max_size", "]", "\n", "\n", "keep", "=", "torch", ".", "from_numpy", "(", "keep", ")", ".", "long", "(", ")", ".", "to", "(", "boxes", ".", "device", ")", "\n", "\n", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._gather_feat": [[118, 127], ["feat.view.size", "ind.unsqueeze().expand.unsqueeze().expand", "feat.view.gather", "ind.unsqueeze().expand.size", "ind.unsqueeze().expand.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "feat.view.view", "ind.unsqueeze().expand.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["None"], ["", "def", "_gather_feat", "(", "feat", ",", "ind", ",", "mask", "=", "None", ")", ":", "\n", "    ", "dim", "=", "feat", ".", "size", "(", "2", ")", "\n", "ind", "=", "ind", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "ind", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "1", ")", ",", "dim", ")", "\n", "feat", "=", "feat", ".", "gather", "(", "1", ",", "ind", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "feat", ")", "\n", "feat", "=", "feat", "[", "mask", "]", "\n", "feat", "=", "feat", ".", "view", "(", "-", "1", ",", "dim", ")", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._transpose_and_gather_feat": [[129, 134], ["_gather_feat.permute().contiguous", "_gather_feat.view", "centernet_utils._gather_feat", "_gather_feat.size", "_gather_feat.size", "_gather_feat.permute"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._gather_feat"], ["", "def", "_transpose_and_gather_feat", "(", "feat", ",", "ind", ")", ":", "\n", "    ", "feat", "=", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ",", "feat", ".", "size", "(", "3", ")", ")", "\n", "feat", "=", "_gather_feat", "(", "feat", ",", "ind", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._topk": [[136, 152], ["scores.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "_gather_feat().view", "_gather_feat().view", "_gather_feat().view", "scores.flatten", "topk_scores.view", "centernet_utils._gather_feat", "centernet_utils._gather_feat", "centernet_utils._gather_feat", "_gather_feat().view.view", "_gather_feat().view.view", "_gather_feat().view.view"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._gather_feat", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._gather_feat", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._gather_feat"], ["", "def", "_topk", "(", "scores", ",", "K", "=", "40", ")", ":", "\n", "    ", "batch", ",", "num_class", ",", "height", ",", "width", "=", "scores", ".", "size", "(", ")", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "scores", ".", "flatten", "(", "2", ",", "3", ")", ",", "K", ")", "\n", "\n", "topk_inds", "=", "topk_inds", "%", "(", "height", "*", "width", ")", "\n", "topk_ys", "=", "(", "topk_inds", "//", "width", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "width", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "\n", "topk_score", ",", "topk_ind", "=", "torch", ".", "topk", "(", "topk_scores", ".", "view", "(", "batch", ",", "-", "1", ")", ",", "K", ")", "\n", "topk_classes", "=", "(", "topk_ind", "//", "K", ")", ".", "int", "(", ")", "\n", "topk_inds", "=", "_gather_feat", "(", "topk_inds", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_ys", "=", "_gather_feat", "(", "topk_ys", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "topk_xs", "=", "_gather_feat", "(", "topk_xs", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "batch", ",", "K", ")", "\n", "\n", "return", "topk_score", ",", "topk_inds", ",", "topk_classes", ",", "topk_ys", ",", "topk_xs", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils.decode_bbox_from_heatmap": [[154, 217], ["_nms.size", "centernet_utils._topk", "_transpose_and_gather_feat().view", "_transpose_and_gather_feat().view", "_transpose_and_gather_feat().view", "_transpose_and_gather_feat().view", "_transpose_and_gather_feat().view", "torch.atan2", "torch.atan2", "torch.cat", "torch.cat", "scores.view", "class_ids.view", "range", "centernet_utils._nms", "xs.view", "ys.view", "_transpose_and_gather_feat().view", "box_part_list.append", "ret_pred_dicts.append", "centernet_utils._transpose_and_gather_feat", "centernet_utils._transpose_and_gather_feat", "centernet_utils._transpose_and_gather_feat", "centernet_utils._transpose_and_gather_feat", "centernet_utils._transpose_and_gather_feat", "torch.cat", "torch.cat", "centernet_utils._circle_nms", "centernet_utils._transpose_and_gather_feat", "scores.view"], "function", ["home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._topk", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._nms", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._circle_nms", "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.centernet_utils._transpose_and_gather_feat"], ["", "def", "decode_bbox_from_heatmap", "(", "heatmap", ",", "rot_cos", ",", "rot_sin", ",", "center", ",", "center_z", ",", "dim", ",", "\n", "point_cloud_range", "=", "None", ",", "voxel_size", "=", "None", ",", "feature_map_stride", "=", "None", ",", "vel", "=", "None", ",", "K", "=", "100", ",", "\n", "circle_nms", "=", "False", ",", "score_thresh", "=", "None", ",", "post_center_limit_range", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "num_class", ",", "_", ",", "_", "=", "heatmap", ".", "size", "(", ")", "\n", "\n", "if", "circle_nms", ":", "\n", "# TODO: not checked yet", "\n", "        ", "assert", "False", ",", "'not checked yet'", "\n", "heatmap", "=", "_nms", "(", "heatmap", ")", "\n", "\n", "", "scores", ",", "inds", ",", "class_ids", ",", "ys", ",", "xs", "=", "_topk", "(", "heatmap", ",", "K", "=", "K", ")", "\n", "center", "=", "_transpose_and_gather_feat", "(", "center", ",", "inds", ")", ".", "view", "(", "batch_size", ",", "K", ",", "2", ")", "\n", "rot_sin", "=", "_transpose_and_gather_feat", "(", "rot_sin", ",", "inds", ")", ".", "view", "(", "batch_size", ",", "K", ",", "1", ")", "\n", "rot_cos", "=", "_transpose_and_gather_feat", "(", "rot_cos", ",", "inds", ")", ".", "view", "(", "batch_size", ",", "K", ",", "1", ")", "\n", "center_z", "=", "_transpose_and_gather_feat", "(", "center_z", ",", "inds", ")", ".", "view", "(", "batch_size", ",", "K", ",", "1", ")", "\n", "dim", "=", "_transpose_and_gather_feat", "(", "dim", ",", "inds", ")", ".", "view", "(", "batch_size", ",", "K", ",", "3", ")", "\n", "\n", "angle", "=", "torch", ".", "atan2", "(", "rot_sin", ",", "rot_cos", ")", "\n", "xs", "=", "xs", ".", "view", "(", "batch_size", ",", "K", ",", "1", ")", "+", "center", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "ys", "=", "ys", ".", "view", "(", "batch_size", ",", "K", ",", "1", ")", "+", "center", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "\n", "xs", "=", "xs", "*", "feature_map_stride", "*", "voxel_size", "[", "0", "]", "+", "point_cloud_range", "[", "0", "]", "\n", "ys", "=", "ys", "*", "feature_map_stride", "*", "voxel_size", "[", "1", "]", "+", "point_cloud_range", "[", "1", "]", "\n", "\n", "box_part_list", "=", "[", "xs", ",", "ys", ",", "center_z", ",", "dim", ",", "angle", "]", "\n", "if", "vel", "is", "not", "None", ":", "\n", "        ", "vel", "=", "_transpose_and_gather_feat", "(", "vel", ",", "inds", ")", ".", "view", "(", "batch_size", ",", "K", ",", "2", ")", "\n", "box_part_list", ".", "append", "(", "vel", ")", "\n", "\n", "", "final_box_preds", "=", "torch", ".", "cat", "(", "(", "box_part_list", ")", ",", "dim", "=", "-", "1", ")", "\n", "final_scores", "=", "scores", ".", "view", "(", "batch_size", ",", "K", ")", "\n", "final_class_ids", "=", "class_ids", ".", "view", "(", "batch_size", ",", "K", ")", "\n", "\n", "assert", "post_center_limit_range", "is", "not", "None", "\n", "mask", "=", "(", "final_box_preds", "[", "...", ",", ":", "3", "]", ">=", "post_center_limit_range", "[", ":", "3", "]", ")", ".", "all", "(", "2", ")", "\n", "mask", "&=", "(", "final_box_preds", "[", "...", ",", ":", "3", "]", "<=", "post_center_limit_range", "[", "3", ":", "]", ")", ".", "all", "(", "2", ")", "\n", "\n", "if", "score_thresh", "is", "not", "None", ":", "\n", "        ", "mask", "&=", "(", "final_scores", ">", "score_thresh", ")", "\n", "\n", "", "ret_pred_dicts", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "cur_mask", "=", "mask", "[", "k", "]", "\n", "cur_boxes", "=", "final_box_preds", "[", "k", ",", "cur_mask", "]", "\n", "cur_scores", "=", "final_scores", "[", "k", ",", "cur_mask", "]", "\n", "cur_labels", "=", "final_class_ids", "[", "k", ",", "cur_mask", "]", "\n", "\n", "if", "circle_nms", ":", "\n", "            ", "assert", "False", ",", "'not checked yet'", "\n", "centers", "=", "cur_boxes", "[", ":", ",", "[", "0", ",", "1", "]", "]", "\n", "boxes", "=", "torch", ".", "cat", "(", "(", "centers", ",", "scores", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "keep", "=", "_circle_nms", "(", "boxes", ",", "min_radius", "=", "min_radius", ",", "post_max_size", "=", "nms_post_max_size", ")", "\n", "\n", "cur_boxes", "=", "cur_boxes", "[", "keep", "]", "\n", "cur_scores", "=", "cur_scores", "[", "keep", "]", "\n", "cur_labels", "=", "cur_labels", "[", "keep", "]", "\n", "\n", "", "ret_pred_dicts", ".", "append", "(", "{", "\n", "'pred_boxes'", ":", "cur_boxes", ",", "\n", "'pred_scores'", ":", "cur_scores", ",", "\n", "'pred_labels'", ":", "cur_labels", "\n", "}", ")", "\n", "", "return", "ret_pred_dicts", "\n", "", ""]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.model_nms_utils.class_agnostic_nms": [[6, 26], ["torch.topk", "scores_mask.nonzero().view", "getattr", "min", "scores_mask.nonzero"], "function", ["None"], ["def", "class_agnostic_nms", "(", "box_scores", ",", "box_preds", ",", "nms_config", ",", "score_thresh", "=", "None", ")", ":", "\n", "    ", "src_box_scores", "=", "box_scores", "\n", "if", "score_thresh", "is", "not", "None", ":", "\n", "        ", "scores_mask", "=", "(", "box_scores", ">=", "score_thresh", ")", "\n", "box_scores", "=", "box_scores", "[", "scores_mask", "]", "\n", "box_preds", "=", "box_preds", "[", "scores_mask", "]", "\n", "\n", "", "selected", "=", "[", "]", "\n", "if", "box_scores", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "box_scores_nms", ",", "indices", "=", "torch", ".", "topk", "(", "box_scores", ",", "k", "=", "min", "(", "nms_config", ".", "NMS_PRE_MAXSIZE", ",", "box_scores", ".", "shape", "[", "0", "]", ")", ")", "\n", "boxes_for_nms", "=", "box_preds", "[", "indices", "]", "\n", "keep_idx", ",", "selected_scores", "=", "getattr", "(", "iou3d_nms_utils", ",", "nms_config", ".", "NMS_TYPE", ")", "(", "\n", "boxes_for_nms", "[", ":", ",", "0", ":", "7", "]", ",", "box_scores_nms", ",", "nms_config", ".", "NMS_THRESH", ",", "**", "nms_config", "\n", ")", "\n", "selected", "=", "indices", "[", "keep_idx", "[", ":", "nms_config", ".", "NMS_POST_MAXSIZE", "]", "]", "\n", "\n", "", "if", "score_thresh", "is", "not", "None", ":", "\n", "        ", "original_idxs", "=", "scores_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "selected", "=", "original_idxs", "[", "selected", "]", "\n", "", "return", "selected", ",", "src_box_scores", "[", "selected", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dschinagl_occam.model_utils.model_nms_utils.multi_classes_nms": [[28, 67], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.topk", "getattr", "box_scores.new_ones().long", "min", "box_scores.new_ones", "len"], "function", ["None"], ["", "def", "multi_classes_nms", "(", "cls_scores", ",", "box_preds", ",", "nms_config", ",", "score_thresh", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        cls_scores: (N, num_class)\n        box_preds: (N, 7 + C)\n        nms_config:\n        score_thresh:\n\n    Returns:\n\n    \"\"\"", "\n", "pred_scores", ",", "pred_labels", ",", "pred_boxes", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "k", "in", "range", "(", "cls_scores", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "score_thresh", "is", "not", "None", ":", "\n", "            ", "scores_mask", "=", "(", "cls_scores", "[", ":", ",", "k", "]", ">=", "score_thresh", ")", "\n", "box_scores", "=", "cls_scores", "[", "scores_mask", ",", "k", "]", "\n", "cur_box_preds", "=", "box_preds", "[", "scores_mask", "]", "\n", "", "else", ":", "\n", "            ", "box_scores", "=", "cls_scores", "[", ":", ",", "k", "]", "\n", "cur_box_preds", "=", "box_preds", "\n", "\n", "", "selected", "=", "[", "]", "\n", "if", "box_scores", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "box_scores_nms", ",", "indices", "=", "torch", ".", "topk", "(", "box_scores", ",", "k", "=", "min", "(", "nms_config", ".", "NMS_PRE_MAXSIZE", ",", "box_scores", ".", "shape", "[", "0", "]", ")", ")", "\n", "boxes_for_nms", "=", "cur_box_preds", "[", "indices", "]", "\n", "keep_idx", ",", "selected_scores", "=", "getattr", "(", "iou3d_nms_utils", ",", "nms_config", ".", "NMS_TYPE", ")", "(", "\n", "boxes_for_nms", "[", ":", ",", "0", ":", "7", "]", ",", "box_scores_nms", ",", "nms_config", ".", "NMS_THRESH", ",", "**", "nms_config", "\n", ")", "\n", "selected", "=", "indices", "[", "keep_idx", "[", ":", "nms_config", ".", "NMS_POST_MAXSIZE", "]", "]", "\n", "\n", "", "pred_scores", ".", "append", "(", "box_scores", "[", "selected", "]", ")", "\n", "pred_labels", ".", "append", "(", "box_scores", ".", "new_ones", "(", "len", "(", "selected", ")", ")", ".", "long", "(", ")", "*", "k", ")", "\n", "pred_boxes", ".", "append", "(", "cur_box_preds", "[", "selected", "]", ")", "\n", "\n", "", "pred_scores", "=", "torch", ".", "cat", "(", "pred_scores", ",", "dim", "=", "0", ")", "\n", "pred_labels", "=", "torch", ".", "cat", "(", "pred_labels", ",", "dim", "=", "0", ")", "\n", "pred_boxes", "=", "torch", ".", "cat", "(", "pred_boxes", ",", "dim", "=", "0", ")", "\n", "\n", "return", "pred_scores", ",", "pred_labels", ",", "pred_boxes", "\n", "", ""]]}