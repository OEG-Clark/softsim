{"home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLP.__init__": [[20, 28], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "modules.MLP.init_weights"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights"], ["def", "__init__", "(", "self", ",", "n_in", ",", "n_hid", ",", "n_out", ",", "do_prob", "=", "0.", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "n_in", ",", "n_hid", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_out", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "n_out", ")", "\n", "self", ".", "dropout_prob", "=", "do_prob", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLP.init_weights": [[29, 37], ["modules.MLP.modules", "isinstance", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "m.bias.data.fill_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLP.batch_norm": [[38, 42], ["inputs.view", "modules.MLP.bn", "modules.MLP.view", "inputs.size", "inputs.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "", "", "def", "batch_norm", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", "*", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLP.forward": [[43, 49], ["torch.elu", "torch.elu", "torch.elu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.elu", "torch.elu", "torch.elu", "modules.MLP.batch_norm", "modules.MLP.fc1", "modules.MLP.fc2"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLP.batch_norm"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# Input shape: [num_sims, num_things, num_features]", "\n", "        ", "x", "=", "F", ".", "elu", "(", "self", ".", "fc1", "(", "inputs", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout_prob", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "return", "self", ".", "batch_norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNN.__init__": [[52, 67], ["torch.Module.__init__", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "modules.CNN.init_weights"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_hid", ",", "n_out", ",", "do_prob", "=", "0.", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "2", ",", "stride", "=", "None", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "return_indices", "=", "False", ",", "\n", "ceil_mode", "=", "False", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "n_in", ",", "n_hid", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "n_hid", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "n_hid", ",", "n_hid", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "n_hid", ")", "\n", "self", ".", "conv_predict", "=", "nn", ".", "Conv1d", "(", "n_hid", ",", "n_out", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv_attention", "=", "nn", ".", "Conv1d", "(", "n_hid", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "dropout_prob", "=", "do_prob", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNN.init_weights": [[68, 77], ["modules.CNN.modules", "isinstance", "m.weight.data.normal_", "m.bias.data.fill_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNN.forward": [[78, 92], ["torch.relu", "torch.relu", "torch.relu", "modules.CNN.bn1", "torch.dropout", "torch.dropout", "torch.dropout", "modules.CNN.pool", "torch.relu", "torch.relu", "torch.relu", "modules.CNN.bn2", "modules.CNN.conv_predict", "utils.my_softmax", "modules.CNN.conv1", "modules.CNN.conv2", "modules.CNN.conv_attention"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# Input shape: [num_sims * num_edges, num_dims, num_timesteps]", "\n", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "inputs", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout_prob", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "pred", "=", "self", ".", "conv_predict", "(", "x", ")", "\n", "attention", "=", "my_softmax", "(", "self", ".", "conv_attention", "(", "x", ")", ",", "axis", "=", "2", ")", "\n", "\n", "edge_prob", "=", "(", "pred", "*", "attention", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "return", "edge_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder.__init__": [[95, 111], ["torch.Module.__init__", "modules.MLP", "modules.MLP", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "modules.MLPEncoder.init_weights", "modules.MLP", "print", "modules.MLP", "print"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_hid", ",", "n_out", ",", "do_prob", "=", "0.", ",", "factor", "=", "True", ")", ":", "\n", "        ", "super", "(", "MLPEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "factor", "=", "factor", "\n", "# n_hid = num edge types", "\n", "self", ".", "mlp1", "=", "MLP", "(", "n_in", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp2", "=", "MLP", "(", "n_hid", "*", "2", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp3", "=", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "if", "self", ".", "factor", ":", "\n", "            ", "self", ".", "mlp4", "=", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "print", "(", "\"Using factor graph MLP encoder.\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlp4", "=", "MLP", "(", "n_hid", "*", "2", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "print", "(", "\"Using MLP encoder.\"", ")", "\n", "", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_out", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder.init_weights": [[112, 117], ["modules.MLPEncoder.modules", "isinstance", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder.edge2node": [[118, 122], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rel_rec.t", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size"], "methods", ["None"], ["", "", "", "def", "edge2node", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "incoming", "=", "torch", ".", "matmul", "(", "rel_rec", ".", "t", "(", ")", ",", "x", ")", "\n", "return", "incoming", "/", "incoming", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder.node2edge": [[123, 129], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "node2edge", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "x", ")", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "x", ")", "\n", "edges", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "2", ")", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder.forward": [[130, 153], ["inputs.view", "modules.MLPEncoder.mlp1", "modules.MLPEncoder.node2edge", "modules.MLPEncoder.mlp2", "modules.MLPEncoder.fc_out", "inputs.size", "inputs.size", "modules.MLPEncoder.edge2node", "modules.MLPEncoder.mlp3", "modules.MLPEncoder.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.MLPEncoder.mlp4", "modules.MLPEncoder.mlp3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.MLPEncoder.mlp4"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.edge2node", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# Input shape: [num_sims, num_atoms, num_timesteps, num_dims]", "\n", "        ", "x", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "# New shape: [num_sims, num_atoms, num_timesteps*num_dims]", "\n", "\n", "x", "=", "self", ".", "mlp1", "(", "x", ")", "# 2-layer ELU net per node", "\n", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "self", ".", "mlp2", "(", "x", ")", "\n", "x_skip", "=", "x", "\n", "\n", "if", "self", ".", "factor", ":", "\n", "            ", "x", "=", "self", ".", "edge2node", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "self", ".", "mlp3", "(", "x", ")", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "x", "=", "self", ".", "mlp4", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "mlp3", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "x", "=", "self", ".", "mlp4", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "fc_out", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_multi.__init__": [[155, 187], ["torch.Module.__init__", "modules.MLP", "modules.MLP", "modules.MLPEncoder_multi.init_weights", "ValueError", "modules.MLP", "modules.MLP", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modules.MLP", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ValueError", "sum", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "modules.MLP", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_hid", ",", "edge_types_list", ",", "do_prob", "=", "0.", ",", "split_point", "=", "1", ",", "\n", "init_type", "=", "'xavier_normal'", ",", "bias_init", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "MLPEncoder_multi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "edge_types_list", "=", "edge_types_list", "\n", "self", ".", "mlp1", "=", "MLP", "(", "n_in", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "#print(self.mlp1.fc1.weight[0][0:5])", "\n", "self", ".", "mlp2", "=", "MLP", "(", "n_hid", "*", "2", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "\n", "self", ".", "init_type", "=", "init_type", "\n", "if", "self", ".", "init_type", "not", "in", "[", "'xavier_normal'", ",", "'orthogonal'", ",", "'sparse'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'This initialization type has not been coded'", ")", "\n", "#print('Using '+self.init_type+' for encoder weight initialization')", "\n", "", "self", ".", "bias_init", "=", "bias_init", "\n", "\n", "self", ".", "split_point", "=", "split_point", "\n", "if", "split_point", "==", "0", ":", "\n", "            ", "self", ".", "mlp3", "=", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp4", "=", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "n_hid", ",", "sum", "(", "edge_types_list", ")", ")", "]", ")", "\n", "", "elif", "split_point", "==", "1", ":", "\n", "            ", "self", ".", "mlp3", "=", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp4", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "for", "_", "in", "edge_types_list", "]", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "n_hid", ",", "K", ")", "for", "K", "in", "edge_types_list", "]", ")", "\n", "", "elif", "split_point", "==", "2", ":", "\n", "            ", "self", ".", "mlp3", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "for", "_", "in", "edge_types_list", "]", ")", "\n", "self", ".", "mlp4", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "for", "_", "in", "edge_types_list", "]", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "n_hid", ",", "K", ")", "for", "K", "in", "edge_types_list", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Split point is not valid, must be 0, 1, or 2'", ")", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_multi.init_weights": [[189, 201], ["modules.MLPEncoder_multi.modules", "isinstance", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "math.isclose", "m.bias.data.fill_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.sparse_", "torch.init.sparse_", "torch.init.sparse_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "self", ".", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "self", ".", "init_type", "==", "'xavier_normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "self", ".", "init_type", "==", "'sparse'", ":", "\n", "                    ", "nn", ".", "init", ".", "sparse_", "(", "m", ".", "weight", ".", "data", ",", "sparsity", "=", "0.1", ")", "\n", "\n", "", "if", "not", "math", ".", "isclose", "(", "self", ".", "bias_init", ",", "0", ",", "rel_tol", "=", "1e-9", ")", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "self", ".", "bias_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_multi.edge2node": [[202, 206], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rel_rec.t", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size"], "methods", ["None"], ["", "", "", "", "def", "edge2node", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "incoming", "=", "torch", ".", "matmul", "(", "rel_rec", ".", "t", "(", ")", ",", "x", ")", "\n", "return", "incoming", "/", "incoming", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_multi.node2edge": [[207, 213], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "node2edge", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "x", ")", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "x", ")", "\n", "edges", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "2", ")", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_multi.forward": [[214, 250], ["inputs.view", "modules.MLPEncoder_multi.mlp1", "modules.MLPEncoder_multi.node2edge", "modules.MLPEncoder_multi.mlp2", "modules.MLPEncoder_multi.edge2node", "inputs.size", "inputs.size", "modules.MLPEncoder_multi.mlp3", "modules.MLPEncoder_multi.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.MLPEncoder_multi.mlp4", "modules.MLPEncoder_multi.mlp3", "modules.MLPEncoder_multi.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "y_list.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "modules.MLPEncoder_multi.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "y_list.append"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.edge2node", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# Input shape: [num_sims, num_atoms, num_timesteps, num_dims]", "\n", "        ", "x", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "# New shape: [num_sims, num_atoms, num_timesteps*num_dims]", "\n", "\n", "x", "=", "self", ".", "mlp1", "(", "x", ")", "# 2-layer ELU net per node", "\n", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "self", ".", "mlp2", "(", "x", ")", "\n", "x_skip", "=", "x", "\n", "\n", "x", "=", "self", ".", "edge2node", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "if", "self", ".", "split_point", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "mlp3", "(", "x", ")", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "x", "=", "self", ".", "mlp4", "(", "x", ")", "\n", "return", "self", ".", "fc_out", "[", "0", "]", "(", "x", ")", "\n", "", "elif", "self", ".", "split_point", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "mlp3", "(", "x", ")", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "y_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "edge_types_list", ")", ")", ":", "\n", "                ", "y", "=", "self", ".", "mlp4", "[", "i", "]", "(", "x", ")", "\n", "y_list", ".", "append", "(", "self", ".", "fc_out", "[", "i", "]", "(", "y", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "split_point", "==", "2", ":", "\n", "            ", "y_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "edge_types_list", ")", ")", ":", "\n", "                ", "y", "=", "self", ".", "mlp3", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "self", ".", "node2edge", "(", "y", ",", "rel_rec", ",", "rel_send", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "y", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "y", "=", "self", ".", "mlp4", "[", "i", "]", "(", "y", ")", "\n", "y_list", ".", "append", "(", "self", ".", "fc_out", "[", "i", "]", "(", "y", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_sigmoid.__init__": [[252, 275], ["torch.Module.__init__", "modules.MLP", "modules.MLP", "modules.MLP", "modules.MLPEncoder_sigmoid.init_weights", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ValueError", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "modules.MLP", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_hid", ",", "num_factors", ",", "do_prob", "=", "0.", ",", "split_point", "=", "1", ")", ":", "\n", "        ", "super", "(", "MLPEncoder_sigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_factors", "=", "num_factors", "\n", "self", ".", "mlp1", "=", "MLP", "(", "n_in", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp2", "=", "MLP", "(", "n_hid", "*", "2", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp3", "=", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "\n", "self", ".", "split_point", "=", "split_point", "\n", "if", "split_point", "==", "0", ":", "\n", "            ", "self", ".", "mlp4", "=", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "n_hid", ",", "num_factors", ")", "\n", "", "elif", "split_point", "==", "1", ":", "\n", "            ", "self", ".", "mlp4", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "for", "_", "in", "range", "(", "num_factors", ")", "]", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "n_hid", ",", "1", ")", "for", "i", "in", "range", "(", "num_factors", ")", "]", ")", "\n", "", "elif", "split_point", "==", "2", ":", "\n", "            ", "self", ".", "mlp3", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "for", "_", "in", "range", "(", "num_factors", ")", "]", ")", "\n", "self", ".", "mlp4", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "for", "_", "in", "range", "(", "num_factors", ")", "]", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "n_hid", ",", "1", ")", "for", "i", "in", "range", "(", "num_factors", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Split point is not valid, must be 0, 1, or 2'", ")", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_sigmoid.init_weights": [[276, 281], ["modules.MLPEncoder_sigmoid.modules", "isinstance", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_sigmoid.edge2node": [[282, 286], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rel_rec.t", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size"], "methods", ["None"], ["", "", "", "def", "edge2node", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "incoming", "=", "torch", ".", "matmul", "(", "rel_rec", ".", "t", "(", ")", ",", "x", ")", "\n", "return", "incoming", "/", "incoming", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_sigmoid.node2edge": [[287, 293], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "node2edge", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "x", ")", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "x", ")", "\n", "edges", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "2", ")", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPEncoder_sigmoid.forward": [[294, 330], ["inputs.view", "modules.MLPEncoder_sigmoid.mlp1", "modules.MLPEncoder_sigmoid.node2edge", "modules.MLPEncoder_sigmoid.mlp2", "modules.MLPEncoder_sigmoid.edge2node", "inputs.size", "inputs.size", "modules.MLPEncoder_sigmoid.mlp3", "modules.MLPEncoder_sigmoid.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.MLPEncoder_sigmoid.mlp4", "modules.MLPEncoder_sigmoid.fc_out", "modules.MLPEncoder_sigmoid.mlp3", "modules.MLPEncoder_sigmoid.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "y_list.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.MLPEncoder_sigmoid.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "y_list.append"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.edge2node", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# Input shape: [num_sims, num_atoms, num_timesteps, num_dims]", "\n", "        ", "x", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "# New shape: [num_sims, num_atoms, num_timesteps*num_dims]", "\n", "\n", "x", "=", "self", ".", "mlp1", "(", "x", ")", "# 2-layer ELU net per node", "\n", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "self", ".", "mlp2", "(", "x", ")", "\n", "x_skip", "=", "x", "\n", "\n", "x", "=", "self", ".", "edge2node", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "if", "self", ".", "split_point", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "mlp3", "(", "x", ")", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "x", "=", "self", ".", "mlp4", "(", "x", ")", "\n", "return", "self", ".", "fc_out", "(", "x", ")", "\n", "", "elif", "self", ".", "split_point", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "mlp3", "(", "x", ")", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "y_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_factors", ")", ":", "\n", "                ", "y", "=", "self", ".", "mlp4", "[", "i", "]", "(", "x", ")", "\n", "y_list", ".", "append", "(", "self", ".", "fc_out", "[", "i", "]", "(", "y", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "split_point", "==", "2", ":", "\n", "            ", "y_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_factors", ")", ":", "\n", "                ", "y", "=", "self", ".", "mlp3", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "self", ".", "node2edge", "(", "y", ",", "rel_rec", ",", "rel_send", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "y", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "y", "=", "self", ".", "mlp4", "[", "i", "]", "(", "y", ")", "\n", "y_list", ".", "append", "(", "self", ".", "fc_out", "[", "i", "]", "(", "y", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.RandomEncoder.__init__": [[334, 340], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__"], ["def", "__init__", "(", "self", ",", "edge_types_list", ",", "cuda_on", ")", ":", "\n", "        ", "super", "(", "RandomEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "edge_types_list", "=", "edge_types_list", "\n", "self", ".", "cuda_on", "=", "cuda_on", "\n", "print", "(", "'Using a random encoder.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.RandomEncoder.forward": [[341, 347], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "output.cuda.cuda.cuda", "sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "        ", "n", "=", "inputs", ".", "shape", "[", "1", "]", "\n", "output", "=", "Variable", "(", "torch", ".", "randn", "(", "inputs", ".", "shape", "[", "0", "]", ",", "n", "**", "2", "-", "n", ",", "sum", "(", "self", ".", "edge_types_list", ")", ")", ")", "\n", "if", "self", ".", "cuda_on", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.OnesEncoder.__init__": [[351, 357], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__"], ["def", "__init__", "(", "self", ",", "edge_types_list", ",", "cuda_on", ")", ":", "\n", "        ", "super", "(", "OnesEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "edge_types_list", "=", "edge_types_list", "\n", "self", ".", "cuda_on", "=", "cuda_on", "\n", "print", "(", "'Using a \"ones\" encoder.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.OnesEncoder.forward": [[358, 364], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "output.cuda.cuda.cuda", "sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "        ", "n", "=", "inputs", ".", "shape", "[", "1", "]", "\n", "output", "=", "Variable", "(", "torch", ".", "ones", "(", "inputs", ".", "shape", "[", "0", "]", ",", "n", "**", "2", "-", "n", ",", "sum", "(", "self", ".", "edge_types_list", ")", ")", ")", "\n", "if", "self", ".", "cuda_on", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder.__init__": [[367, 385], ["torch.Module.__init__", "modules.CNN", "modules.MLP", "modules.MLP", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "modules.CNNEncoder.init_weights", "print", "print"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_hid", ",", "n_out", ",", "do_prob", "=", "0.", ",", "factor", "=", "True", ")", ":", "\n", "        ", "super", "(", "CNNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout_prob", "=", "do_prob", "\n", "\n", "self", ".", "factor", "=", "factor", "\n", "\n", "self", ".", "cnn", "=", "CNN", "(", "n_in", "*", "2", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp1", "=", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp2", "=", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp3", "=", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_out", ")", "\n", "\n", "if", "self", ".", "factor", ":", "\n", "            ", "print", "(", "\"Using factor graph CNN encoder.\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Using CNN encoder.\"", ")", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder.init_weights": [[386, 391], ["modules.CNNEncoder.modules", "isinstance", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.init.xavier_normal", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder.node2edge_temporal": [[392, 412], ["inputs.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "receivers.transpose.transpose.view", "receivers.transpose.transpose.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "senders.transpose.transpose.view", "senders.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.size", "inputs.size", "inputs.size", "inputs.size", "inputs.size", "inputs.size", "inputs.size", "receivers.transpose.transpose.size", "inputs.size", "senders.transpose.transpose.size"], "methods", ["None"], ["", "", "", "def", "node2edge_temporal", "(", "self", ",", "inputs", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "\n", "        ", "x", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "x", ")", "\n", "receivers", "=", "receivers", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", "*", "receivers", ".", "size", "(", "1", ")", ",", "\n", "inputs", ".", "size", "(", "2", ")", ",", "inputs", ".", "size", "(", "3", ")", ")", "\n", "receivers", "=", "receivers", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "x", ")", "\n", "senders", "=", "senders", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", "*", "senders", ".", "size", "(", "1", ")", ",", "\n", "inputs", ".", "size", "(", "2", ")", ",", "\n", "inputs", ".", "size", "(", "3", ")", ")", "\n", "senders", "=", "senders", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "# receivers and senders have shape:", "\n", "# [num_sims * num_edges, num_dims, num_timesteps]", "\n", "edges", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "1", ")", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder.edge2node": [[413, 417], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rel_rec.t", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size"], "methods", ["None"], ["", "def", "edge2node", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "incoming", "=", "torch", ".", "matmul", "(", "rel_rec", ".", "t", "(", ")", ",", "x", ")", "\n", "return", "incoming", "/", "incoming", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder.node2edge": [[418, 424], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "node2edge", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "x", ")", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "x", ")", "\n", "edges", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "2", ")", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder.forward": [[425, 443], ["modules.CNNEncoder.node2edge_temporal", "modules.CNNEncoder.cnn", "modules.CNNEncoder.view", "modules.CNNEncoder.mlp1", "modules.CNNEncoder.fc_out", "inputs.size", "modules.CNNEncoder.edge2node", "modules.CNNEncoder.mlp2", "modules.CNNEncoder.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.CNNEncoder.mlp3", "inputs.size", "inputs.size"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge_temporal", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.edge2node", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "\n", "# Input has shape: [num_sims, num_atoms, num_timesteps, num_dims]", "\n", "        ", "edges", "=", "self", ".", "node2edge_temporal", "(", "inputs", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "self", ".", "cnn", "(", "edges", ")", "\n", "x", "=", "x", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "(", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", "*", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "mlp1", "(", "x", ")", "\n", "x_skip", "=", "x", "\n", "\n", "if", "self", ".", "factor", ":", "\n", "            ", "x", "=", "self", ".", "edge2node", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "self", ".", "mlp2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "x", "=", "self", ".", "mlp3", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "fc_out", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.__init__": [[445, 476], ["torch.Module.__init__", "print", "modules.CNN", "modules.MLP", "modules.CNNEncoder_multi.init_weights", "ValueError", "modules.MLP", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "sum", "modules.MLP", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ValueError", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "modules.MLP", "modules.MLP", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_hid", ",", "edge_types_list", ",", "do_prob", "=", "0.", ",", "split_point", "=", "0", ",", "init_type", "=", "'xavier_normal'", ")", ":", "\n", "        ", "super", "(", "CNNEncoder_multi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout_prob", "=", "do_prob", "\n", "\n", "self", ".", "edge_types_list", "=", "edge_types_list", "\n", "\n", "self", ".", "init_type", "=", "init_type", "\n", "if", "self", ".", "init_type", "not", "in", "[", "'xavier_normal'", ",", "'orthogonal'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'This initialization type has not been coded'", ")", "\n", "", "print", "(", "'Using '", "+", "self", ".", "init_type", "+", "' for encoder weight initialization'", ")", "\n", "\n", "self", ".", "cnn", "=", "CNN", "(", "n_in", "*", "2", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp1", "=", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "\n", "self", ".", "split_point", "=", "split_point", "\n", "if", "split_point", "==", "0", ":", "\n", "            ", "self", ".", "mlp2", "=", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp3", "=", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "n_hid", ",", "sum", "(", "edge_types_list", ")", ")", "\n", "", "elif", "split_point", "==", "1", ":", "\n", "            ", "self", ".", "mlp2", "=", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "\n", "self", ".", "mlp3", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "for", "_", "in", "edge_types_list", "]", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "n_hid", ",", "K", ")", "for", "K", "in", "edge_types_list", "]", ")", "\n", "", "elif", "split_point", "==", "2", ":", "\n", "            ", "self", ".", "mlp2", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "n_hid", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "for", "_", "in", "edge_types_list", "]", ")", "\n", "self", ".", "mlp3", "=", "nn", ".", "ModuleList", "(", "[", "MLP", "(", "n_hid", "*", "3", ",", "n_hid", ",", "n_hid", ",", "do_prob", ")", "for", "_", "in", "edge_types_list", "]", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "n_hid", ",", "K", ")", "for", "K", "in", "edge_types_list", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Split point is not valid, must be 0, 1, or 2'", ")", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.init_weights": [[477, 485], ["modules.CNNEncoder_multi.modules", "isinstance", "m.bias.data.fill_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "self", ".", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "self", ".", "init_type", "==", "'xavier_normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge_temporal": [[486, 506], ["inputs.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "receivers.transpose.transpose.view", "receivers.transpose.transpose.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "senders.transpose.transpose.view", "senders.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.size", "inputs.size", "inputs.size", "inputs.size", "inputs.size", "inputs.size", "inputs.size", "receivers.transpose.transpose.size", "inputs.size", "senders.transpose.transpose.size"], "methods", ["None"], ["", "", "", "def", "node2edge_temporal", "(", "self", ",", "inputs", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "\n", "        ", "x", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "x", ")", "\n", "receivers", "=", "receivers", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", "*", "receivers", ".", "size", "(", "1", ")", ",", "\n", "inputs", ".", "size", "(", "2", ")", ",", "inputs", ".", "size", "(", "3", ")", ")", "\n", "receivers", "=", "receivers", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "x", ")", "\n", "senders", "=", "senders", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", "*", "senders", ".", "size", "(", "1", ")", ",", "\n", "inputs", ".", "size", "(", "2", ")", ",", "\n", "inputs", ".", "size", "(", "3", ")", ")", "\n", "senders", "=", "senders", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "# receivers and senders have shape:", "\n", "# [num_sims * num_edges, num_dims, num_timesteps]", "\n", "edges", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "1", ")", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.edge2node": [[507, 511], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rel_rec.t", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size"], "methods", ["None"], ["", "def", "edge2node", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "incoming", "=", "torch", ".", "matmul", "(", "rel_rec", ".", "t", "(", ")", ",", "x", ")", "\n", "return", "incoming", "/", "incoming", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge": [[512, 518], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "node2edge", "(", "self", ",", "x", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "        ", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "x", ")", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "x", ")", "\n", "edges", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "2", ")", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.forward": [[519, 553], ["modules.CNNEncoder_multi.node2edge_temporal", "modules.CNNEncoder_multi.cnn", "torch.cat.view", "torch.cat.view", "torch.cat.view", "modules.CNNEncoder_multi.mlp1", "modules.CNNEncoder_multi.edge2node", "inputs.size", "modules.CNNEncoder_multi.mlp2", "modules.CNNEncoder_multi.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.CNNEncoder_multi.mlp3", "modules.CNNEncoder_multi.fc_out", "inputs.size", "modules.CNNEncoder_multi.mlp2", "modules.CNNEncoder_multi.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.size", "len", "y_list.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "modules.CNNEncoder_multi.node2edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "y_list.append"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge_temporal", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.edge2node", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.CNNEncoder_multi.node2edge"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_rec", ",", "rel_send", ")", ":", "\n", "\n", "# Input has shape: [num_sims, num_atoms, num_timesteps, num_dims]", "\n", "        ", "edges", "=", "self", ".", "node2edge_temporal", "(", "inputs", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "self", ".", "cnn", "(", "edges", ")", "\n", "x", "=", "x", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "(", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", "*", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "mlp1", "(", "x", ")", "\n", "x_skip", "=", "x", "\n", "x", "=", "self", ".", "edge2node", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "\n", "if", "self", ".", "split_point", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "mlp2", "(", "x", ")", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "x", "=", "self", ".", "mlp3", "(", "x", ")", "\n", "return", "self", ".", "fc_out", "(", "x", ")", "\n", "", "elif", "self", ".", "split_point", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "mlp2", "(", "x", ")", "\n", "x", "=", "self", ".", "node2edge", "(", "x", ",", "rel_rec", ",", "rel_send", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "y_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "edge_types_list", ")", ")", ":", "\n", "                ", "y", "=", "self", ".", "mlp3", "[", "i", "]", "(", "x", ")", "\n", "y_list", ".", "append", "(", "self", ".", "fc_out", "[", "i", "]", "(", "y", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "split_point", "==", "2", ":", "\n", "            ", "y_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "edge_types_list", ")", ")", ":", "\n", "                ", "y", "=", "self", ".", "mlp2", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "self", ".", "node2edge", "(", "y", ",", "rel_rec", ",", "rel_send", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "y", ",", "x_skip", ")", ",", "dim", "=", "2", ")", "# Skip connection", "\n", "y", "=", "self", ".", "mlp3", "[", "i", "]", "(", "y", ")", "\n", "y_list", ".", "append", "(", "self", ".", "fc_out", "[", "i", "]", "(", "y", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder.__init__": [[558, 575], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "print", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__"], ["def", "__init__", "(", "self", ",", "n_in_node", ",", "edge_types", ",", "msg_hid", ",", "msg_out", ",", "n_hid", ",", "\n", "do_prob", "=", "0.", ",", "skip_first", "=", "False", ")", ":", "\n", "        ", "super", "(", "MLPDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "msg_fc1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "2", "*", "n_in_node", ",", "msg_hid", ")", "for", "_", "in", "range", "(", "edge_types", ")", "]", ")", "\n", "self", ".", "msg_fc2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "msg_hid", ",", "msg_out", ")", "for", "_", "in", "range", "(", "edge_types", ")", "]", ")", "\n", "self", ".", "msg_out_shape", "=", "msg_out", "\n", "self", ".", "skip_first_edge_type", "=", "skip_first", "\n", "\n", "self", ".", "out_fc1", "=", "nn", ".", "Linear", "(", "n_in_node", "+", "msg_out", ",", "n_hid", ")", "\n", "self", ".", "out_fc2", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_hid", ")", "\n", "self", ".", "out_fc3", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_in_node", ")", "\n", "\n", "print", "(", "'Using learned interaction net decoder.'", ")", "\n", "\n", "self", ".", "dropout_prob", "=", "do_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder.single_step_forward": [[576, 623], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "all_msgs.cuda.cuda.transpose().matmul().transpose", "agg_msgs.contiguous.contiguous.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "modules.MLPDecoder.out_fc3", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "all_msgs.cuda.cuda.cuda", "len", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "all_msgs.cuda.cuda.transpose().matmul", "modules.MLPDecoder.out_fc1", "modules.MLPDecoder.out_fc2", "all_msgs.cuda.cuda.transpose"], "methods", ["None"], ["", "def", "single_step_forward", "(", "self", ",", "single_timestep_inputs", ",", "rel_rec", ",", "rel_send", ",", "\n", "single_timestep_rel_type", ")", ":", "\n", "\n", "# single_timestep_inputs has shape", "\n", "# [batch_size, num_timesteps, num_atoms, num_dims]", "\n", "\n", "# single_timestep_rel_type has shape:", "\n", "# [batch_size, num_timesteps, num_atoms*(num_atoms-1), num_edge_types]", "\n", "\n", "# Node2edge", "\n", "        ", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "single_timestep_inputs", ")", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "single_timestep_inputs", ")", "\n", "pre_msg", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "all_msgs", "=", "Variable", "(", "torch", ".", "zeros", "(", "pre_msg", ".", "size", "(", "0", ")", ",", "pre_msg", ".", "size", "(", "1", ")", ",", "\n", "pre_msg", ".", "size", "(", "2", ")", ",", "self", ".", "msg_out_shape", ")", ")", "\n", "if", "single_timestep_inputs", ".", "is_cuda", ":", "\n", "            ", "all_msgs", "=", "all_msgs", ".", "cuda", "(", ")", "\n", "\n", "", "if", "self", ".", "skip_first_edge_type", ":", "\n", "            ", "start_idx", "=", "1", "\n", "", "else", ":", "\n", "            ", "start_idx", "=", "0", "\n", "\n", "# Run separate MLP for every edge type", "\n", "# NOTE: To exlude one edge type, simply offset range by 1", "\n", "", "for", "i", "in", "range", "(", "start_idx", ",", "len", "(", "self", ".", "msg_fc2", ")", ")", ":", "\n", "            ", "msg", "=", "F", ".", "relu", "(", "self", ".", "msg_fc1", "[", "i", "]", "(", "pre_msg", ")", ")", "\n", "msg", "=", "F", ".", "dropout", "(", "msg", ",", "p", "=", "self", ".", "dropout_prob", ")", "\n", "msg", "=", "F", ".", "relu", "(", "self", ".", "msg_fc2", "[", "i", "]", "(", "msg", ")", ")", "\n", "msg", "=", "msg", "*", "single_timestep_rel_type", "[", ":", ",", ":", ",", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "all_msgs", "+=", "msg", "\n", "\n", "# Aggregate all msgs to receiver", "\n", "", "agg_msgs", "=", "all_msgs", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ".", "matmul", "(", "rel_rec", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "agg_msgs", "=", "agg_msgs", ".", "contiguous", "(", ")", "\n", "\n", "# Skip connection", "\n", "aug_inputs", "=", "torch", ".", "cat", "(", "[", "single_timestep_inputs", ",", "agg_msgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Output MLP", "\n", "pred", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "out_fc1", "(", "aug_inputs", ")", ")", ",", "p", "=", "self", ".", "dropout_prob", ")", "\n", "pred", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "out_fc2", "(", "pred", ")", ")", ",", "p", "=", "self", ".", "dropout_prob", ")", "\n", "pred", "=", "self", ".", "out_fc3", "(", "pred", ")", "\n", "\n", "# Predict position/velocity difference", "\n", "return", "single_timestep_inputs", "+", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder.forward": [[624, 662], ["inputs.transpose().contiguous.transpose().contiguous.transpose().contiguous", "rel_type.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "inputs.transpose().contiguous.transpose().contiguous.size", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "pred_all.transpose().contiguous", "rel_type.unsqueeze().expand.unsqueeze().expand.size", "inputs.transpose().contiguous.transpose().contiguous.size", "rel_type.unsqueeze().expand.unsqueeze().expand.size", "rel_type.unsqueeze().expand.unsqueeze().expand.size", "modules.MLPDecoder.single_step_forward", "preds.append", "preds[].size", "preds[].size", "preds[].size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "output.cuda.cuda.cuda", "len", "inputs.transpose().contiguous.transpose().contiguous.transpose", "rel_type.unsqueeze().expand.unsqueeze().expand.unsqueeze", "preds[].size", "pred_all.transpose", "inputs.transpose().contiguous.transpose().contiguous.size"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.single_step_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_type", ",", "rel_rec", ",", "rel_send", ",", "pred_steps", "=", "1", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "\n", "        ", "inputs", "=", "inputs", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "sizes", "=", "[", "rel_type", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "rel_type", ".", "size", "(", "1", ")", ",", "\n", "rel_type", ".", "size", "(", "2", ")", "]", "\n", "rel_type", "=", "rel_type", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "sizes", ")", "\n", "\n", "time_steps", "=", "inputs", ".", "size", "(", "1", ")", "\n", "assert", "(", "pred_steps", "<=", "time_steps", ")", "\n", "preds", "=", "[", "]", "\n", "\n", "# Only take n-th timesteps as starting points (n: pred_steps)", "\n", "last_pred", "=", "inputs", "[", ":", ",", "0", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "\n", "curr_rel_type", "=", "rel_type", "[", ":", ",", "0", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "\n", "# NOTE: Assumes rel_type is constant (i.e. same across all time steps).", "\n", "\n", "# Run n prediction steps", "\n", "for", "step", "in", "range", "(", "0", ",", "pred_steps", ")", ":", "\n", "            ", "last_pred", "=", "self", ".", "single_step_forward", "(", "last_pred", ",", "rel_rec", ",", "rel_send", ",", "\n", "curr_rel_type", ")", "\n", "preds", ".", "append", "(", "last_pred", ")", "\n", "\n", "", "sizes", "=", "[", "preds", "[", "0", "]", ".", "size", "(", "0", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "1", ")", "*", "pred_steps", ",", "\n", "preds", "[", "0", "]", ".", "size", "(", "2", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "3", ")", "]", "\n", "\n", "output", "=", "Variable", "(", "torch", ".", "zeros", "(", "sizes", ")", ")", "\n", "if", "inputs", ".", "is_cuda", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", ")", "\n", "\n", "# Re-assemble correct timeline", "\n", "", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "            ", "output", "[", ":", ",", "i", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "=", "preds", "[", "i", "]", "\n", "\n", "", "pred_all", "=", "output", "[", ":", ",", ":", "(", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", ",", ":", ",", ":", "]", "\n", "\n", "return", "pred_all", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_multi.__init__": [[667, 694], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "print", "ValueError", "modules.MLPDecoder_multi.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights"], ["def", "__init__", "(", "self", ",", "n_in_node", ",", "edge_types", ",", "edge_types_list", ",", "msg_hid", ",", "msg_out", ",", "n_hid", ",", "\n", "do_prob", "=", "0.", ",", "skip_first", "=", "False", ",", "init_type", "=", "'default'", ")", ":", "\n", "        ", "super", "(", "MLPDecoder_multi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "msg_fc1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "2", "*", "n_in_node", ",", "msg_hid", ")", "for", "_", "in", "range", "(", "edge_types", ")", "]", ")", "\n", "self", ".", "msg_fc2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "msg_hid", ",", "msg_out", ")", "for", "_", "in", "range", "(", "edge_types", ")", "]", ")", "\n", "self", ".", "msg_out_shape", "=", "msg_out", "\n", "self", ".", "skip_first", "=", "skip_first", "\n", "self", ".", "edge_types", "=", "edge_types", "\n", "self", ".", "edge_types_list", "=", "edge_types_list", "\n", "\n", "self", ".", "out_fc1", "=", "nn", ".", "Linear", "(", "n_in_node", "+", "msg_out", ",", "n_hid", ")", "\n", "self", ".", "out_fc2", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_hid", ")", "\n", "self", ".", "out_fc3", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_in_node", ")", "\n", "\n", "print", "(", "'Using learned interaction net decoder.'", ")", "\n", "\n", "self", ".", "dropout_prob", "=", "do_prob", "\n", "\n", "self", ".", "init_type", "=", "init_type", "\n", "if", "self", ".", "init_type", "not", "in", "[", "'xavier_normal'", ",", "'orthogonal'", ",", "'default'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'This initialization type has not been coded'", ")", "\n", "#print('Using '+self.init_type+' for decoder weight initialization')", "\n", "\n", "", "if", "self", ".", "init_type", "!=", "'default'", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_multi.init_weights": [[695, 702], ["modules.MLPDecoder_multi.modules", "isinstance", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "self", ".", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "0.000001", ")", "\n", "", "elif", "self", ".", "init_type", "==", "'xavier_normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "0.000001", ")", "\n", "#m.bias.data.fill_(0.1)", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_multi.single_step_forward": [[704, 755], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "list", "all_msgs.cuda.cuda.transpose().matmul().transpose", "agg_msgs.contiguous.contiguous.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "modules.MLPDecoder_multi.out_fc3", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "all_msgs.cuda.cuda.cuda", "range", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "list.remove", "all_msgs.cuda.cuda.transpose().matmul", "modules.MLPDecoder_multi.out_fc1", "modules.MLPDecoder_multi.out_fc2", "all_msgs.cuda.cuda.transpose"], "methods", ["None"], ["", "", "", "", "def", "single_step_forward", "(", "self", ",", "single_timestep_inputs", ",", "rel_rec", ",", "rel_send", ",", "\n", "single_timestep_rel_type", ")", ":", "\n", "\n", "# single_timestep_inputs has shape", "\n", "# [batch_size, num_timesteps, num_atoms, num_dims]", "\n", "\n", "# single_timestep_rel_type has shape:", "\n", "# [batch_size, num_timesteps, num_atoms*(num_atoms-1), num_edge_types]", "\n", "\n", "# Node2edge", "\n", "        ", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "single_timestep_inputs", ")", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "single_timestep_inputs", ")", "\n", "pre_msg", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "all_msgs", "=", "Variable", "(", "torch", ".", "zeros", "(", "pre_msg", ".", "size", "(", "0", ")", ",", "pre_msg", ".", "size", "(", "1", ")", ",", "\n", "pre_msg", ".", "size", "(", "2", ")", ",", "self", ".", "msg_out_shape", ")", ")", "\n", "if", "single_timestep_inputs", ".", "is_cuda", ":", "\n", "            ", "all_msgs", "=", "all_msgs", ".", "cuda", "(", ")", "\n", "\n", "# non_null_idxs = list of indexs of edge types which as non null (i.e. edges over which messages can be passed)", "\n", "", "non_null_idxs", "=", "list", "(", "range", "(", "self", ".", "edge_types", ")", ")", "\n", "if", "self", ".", "skip_first", ":", "\n", "# if skip_first is True, the first edge type in each factor block is null", "\n", "            ", "edge", "=", "0", "\n", "for", "k", "in", "self", ".", "edge_types_list", ":", "\n", "                ", "non_null_idxs", ".", "remove", "(", "edge", ")", "\n", "edge", "+=", "k", "\n", "\n", "# Run separate MLP for every edge type", "\n", "# NOTE: To exlude one edge type, simply offset range by 1", "\n", "", "", "for", "i", "in", "non_null_idxs", ":", "\n", "            ", "msg", "=", "F", ".", "relu", "(", "self", ".", "msg_fc1", "[", "i", "]", "(", "pre_msg", ")", ")", "\n", "msg", "=", "F", ".", "dropout", "(", "msg", ",", "p", "=", "self", ".", "dropout_prob", ")", "\n", "msg", "=", "F", ".", "relu", "(", "self", ".", "msg_fc2", "[", "i", "]", "(", "msg", ")", ")", "\n", "msg", "=", "msg", "*", "single_timestep_rel_type", "[", ":", ",", ":", ",", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "all_msgs", "+=", "msg", "\n", "\n", "# Aggregate all msgs to receiver", "\n", "", "agg_msgs", "=", "all_msgs", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ".", "matmul", "(", "rel_rec", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "agg_msgs", "=", "agg_msgs", ".", "contiguous", "(", ")", "\n", "\n", "# Skip connection", "\n", "aug_inputs", "=", "torch", ".", "cat", "(", "[", "single_timestep_inputs", ",", "agg_msgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Output MLP", "\n", "pred", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "out_fc1", "(", "aug_inputs", ")", ")", ",", "p", "=", "self", ".", "dropout_prob", ")", "\n", "pred", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "out_fc2", "(", "pred", ")", ")", ",", "p", "=", "self", ".", "dropout_prob", ")", "\n", "pred", "=", "self", ".", "out_fc3", "(", "pred", ")", "\n", "\n", "# Predict position/velocity difference", "\n", "return", "single_timestep_inputs", "+", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_multi.forward": [[756, 794], ["inputs.transpose().contiguous.transpose().contiguous.transpose().contiguous", "rel_type.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "inputs.transpose().contiguous.transpose().contiguous.size", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "pred_all.transpose().contiguous", "rel_type.unsqueeze().expand.unsqueeze().expand.size", "inputs.transpose().contiguous.transpose().contiguous.size", "rel_type.unsqueeze().expand.unsqueeze().expand.size", "rel_type.unsqueeze().expand.unsqueeze().expand.size", "modules.MLPDecoder_multi.single_step_forward", "preds.append", "preds[].size", "preds[].size", "preds[].size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "output.cuda.cuda.cuda", "len", "inputs.transpose().contiguous.transpose().contiguous.transpose", "rel_type.unsqueeze().expand.unsqueeze().expand.unsqueeze", "preds[].size", "pred_all.transpose", "inputs.transpose().contiguous.transpose().contiguous.size"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.single_step_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_type", ",", "rel_rec", ",", "rel_send", ",", "pred_steps", "=", "1", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "\n", "        ", "inputs", "=", "inputs", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "sizes", "=", "[", "rel_type", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "rel_type", ".", "size", "(", "1", ")", ",", "\n", "rel_type", ".", "size", "(", "2", ")", "]", "\n", "rel_type", "=", "rel_type", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "sizes", ")", "\n", "\n", "time_steps", "=", "inputs", ".", "size", "(", "1", ")", "\n", "assert", "(", "pred_steps", "<=", "time_steps", ")", "\n", "preds", "=", "[", "]", "\n", "\n", "# Only take n-th timesteps as starting points (n: pred_steps)", "\n", "last_pred", "=", "inputs", "[", ":", ",", "0", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "\n", "curr_rel_type", "=", "rel_type", "[", ":", ",", "0", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "\n", "# NOTE: Assumes rel_type is constant (i.e. same across all time steps).", "\n", "\n", "# Run n prediction steps", "\n", "for", "step", "in", "range", "(", "0", ",", "pred_steps", ")", ":", "\n", "            ", "last_pred", "=", "self", ".", "single_step_forward", "(", "last_pred", ",", "rel_rec", ",", "rel_send", ",", "\n", "curr_rel_type", ")", "\n", "preds", ".", "append", "(", "last_pred", ")", "\n", "\n", "", "sizes", "=", "[", "preds", "[", "0", "]", ".", "size", "(", "0", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "1", ")", "*", "pred_steps", ",", "\n", "preds", "[", "0", "]", ".", "size", "(", "2", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "3", ")", "]", "\n", "\n", "output", "=", "Variable", "(", "torch", ".", "zeros", "(", "sizes", ")", ")", "\n", "if", "inputs", ".", "is_cuda", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", ")", "\n", "\n", "# Re-assemble correct timeline", "\n", "", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "            ", "output", "[", ":", ",", "i", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "=", "preds", "[", "i", "]", "\n", "\n", "", "pred_all", "=", "output", "[", ":", ",", ":", "(", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", ",", ":", ",", ":", "]", "\n", "\n", "return", "pred_all", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.__init__": [[798, 823], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "print", "ValueError", "modules.MLPDecoder_sigmoid.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights"], ["def", "__init__", "(", "self", ",", "n_in_node", ",", "num_factors", ",", "msg_hid", ",", "msg_out", ",", "n_hid", ",", "\n", "do_prob", "=", "0.", ",", "skip_first", "=", "False", ",", "init_type", "=", "'default'", ")", ":", "\n", "        ", "super", "(", "MLPDecoder_sigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "msg_fc1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "2", "*", "n_in_node", ",", "msg_hid", ")", "for", "_", "in", "range", "(", "num_factors", ")", "]", ")", "\n", "self", ".", "msg_fc2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "msg_hid", ",", "msg_out", ")", "for", "_", "in", "range", "(", "num_factors", ")", "]", ")", "\n", "self", ".", "msg_out_shape", "=", "msg_out", "\n", "self", ".", "num_factors", "=", "num_factors", "\n", "\n", "self", ".", "out_fc1", "=", "nn", ".", "Linear", "(", "n_in_node", "+", "msg_out", ",", "n_hid", ")", "\n", "self", ".", "out_fc2", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_hid", ")", "\n", "self", ".", "out_fc3", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_in_node", ")", "\n", "\n", "print", "(", "'Using learned interaction net decoder.'", ")", "\n", "\n", "self", ".", "dropout_prob", "=", "do_prob", "\n", "\n", "self", ".", "init_type", "=", "init_type", "\n", "if", "self", ".", "init_type", "not", "in", "[", "'xavier_normal'", ",", "'orthogonal'", ",", "'default'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'This initialization type has not been coded'", ")", "\n", "#print('Using '+self.init_type+' for decoder weight initialization')", "\n", "\n", "", "if", "self", ".", "init_type", "!=", "'default'", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.init_weights": [[824, 831], ["modules.MLPDecoder_sigmoid.modules", "isinstance", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "self", ".", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "0.000001", ")", "\n", "", "elif", "self", ".", "init_type", "==", "'xavier_normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "0.000001", ")", "\n", "#m.bias.data.fill_(0.1)", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.single_step_forward": [[833, 876], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "all_msgs.cuda.cuda.transpose().matmul().transpose", "agg_msgs.contiguous.contiguous.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "modules.MLPDecoder_sigmoid.out_fc3", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "all_msgs.cuda.cuda.cuda", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "all_msgs.cuda.cuda.transpose().matmul", "modules.MLPDecoder_sigmoid.out_fc1", "modules.MLPDecoder_sigmoid.out_fc2", "all_msgs.cuda.cuda.transpose"], "methods", ["None"], ["", "", "", "", "def", "single_step_forward", "(", "self", ",", "single_timestep_inputs", ",", "rel_rec", ",", "rel_send", ",", "\n", "single_timestep_rel_type", ")", ":", "\n", "\n", "# single_timestep_inputs has shape", "\n", "# [batch_size, num_timesteps, num_atoms, num_dims]", "\n", "\n", "# single_timestep_rel_type has shape:", "\n", "# [batch_size, num_timesteps, num_atoms*(num_atoms-1), num_edge_types]", "\n", "\n", "# Node2edge", "\n", "        ", "receivers", "=", "torch", ".", "matmul", "(", "rel_rec", ",", "single_timestep_inputs", ")", "\n", "senders", "=", "torch", ".", "matmul", "(", "rel_send", ",", "single_timestep_inputs", ")", "\n", "pre_msg", "=", "torch", ".", "cat", "(", "[", "receivers", ",", "senders", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "all_msgs", "=", "Variable", "(", "torch", ".", "zeros", "(", "pre_msg", ".", "size", "(", "0", ")", ",", "pre_msg", ".", "size", "(", "1", ")", ",", "\n", "pre_msg", ".", "size", "(", "2", ")", ",", "self", ".", "msg_out_shape", ")", ")", "\n", "if", "single_timestep_inputs", ".", "is_cuda", ":", "\n", "            ", "all_msgs", "=", "all_msgs", ".", "cuda", "(", ")", "\n", "\n", "\n", "# Run separate MLP for every edge type", "\n", "# NOTE: To exlude one edge type, simply offset range by 1", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_factors", ")", ":", "\n", "            ", "msg", "=", "F", ".", "relu", "(", "self", ".", "msg_fc1", "[", "i", "]", "(", "pre_msg", ")", ")", "\n", "msg", "=", "F", ".", "dropout", "(", "msg", ",", "p", "=", "self", ".", "dropout_prob", ")", "\n", "msg", "=", "F", ".", "relu", "(", "self", ".", "msg_fc2", "[", "i", "]", "(", "msg", ")", ")", "\n", "msg", "=", "msg", "*", "single_timestep_rel_type", "[", ":", ",", ":", ",", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "all_msgs", "+=", "msg", "\n", "\n", "# Aggregate all msgs to receiver", "\n", "", "agg_msgs", "=", "all_msgs", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ".", "matmul", "(", "rel_rec", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "agg_msgs", "=", "agg_msgs", ".", "contiguous", "(", ")", "\n", "\n", "# Skip connection", "\n", "aug_inputs", "=", "torch", ".", "cat", "(", "[", "single_timestep_inputs", ",", "agg_msgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Output MLP", "\n", "pred", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "out_fc1", "(", "aug_inputs", ")", ")", ",", "p", "=", "self", ".", "dropout_prob", ")", "\n", "pred", "=", "F", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "out_fc2", "(", "pred", ")", ")", ",", "p", "=", "self", ".", "dropout_prob", ")", "\n", "pred", "=", "self", ".", "out_fc3", "(", "pred", ")", "\n", "\n", "# Predict position/velocity difference", "\n", "return", "single_timestep_inputs", "+", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.forward": [[877, 915], ["inputs.transpose().contiguous.transpose().contiguous.transpose().contiguous", "rel_type.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "inputs.transpose().contiguous.transpose().contiguous.size", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "pred_all.transpose().contiguous", "rel_type.unsqueeze().expand.unsqueeze().expand.size", "inputs.transpose().contiguous.transpose().contiguous.size", "rel_type.unsqueeze().expand.unsqueeze().expand.size", "rel_type.unsqueeze().expand.unsqueeze().expand.size", "modules.MLPDecoder_sigmoid.single_step_forward", "preds.append", "preds[].size", "preds[].size", "preds[].size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "output.cuda.cuda.cuda", "len", "inputs.transpose().contiguous.transpose().contiguous.transpose", "rel_type.unsqueeze().expand.unsqueeze().expand.unsqueeze", "preds[].size", "pred_all.transpose", "inputs.transpose().contiguous.transpose().contiguous.size"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.MLPDecoder_sigmoid.single_step_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_type", ",", "rel_rec", ",", "rel_send", ",", "pred_steps", "=", "1", ")", ":", "\n", "# NOTE: Assumes that we have the same graph across all samples.", "\n", "\n", "        ", "inputs", "=", "inputs", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "sizes", "=", "[", "rel_type", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "rel_type", ".", "size", "(", "1", ")", ",", "\n", "rel_type", ".", "size", "(", "2", ")", "]", "\n", "rel_type", "=", "rel_type", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "sizes", ")", "\n", "\n", "time_steps", "=", "inputs", ".", "size", "(", "1", ")", "\n", "assert", "(", "pred_steps", "<=", "time_steps", ")", "\n", "preds", "=", "[", "]", "\n", "\n", "# Only take n-th timesteps as starting points (n: pred_steps)", "\n", "last_pred", "=", "inputs", "[", ":", ",", "0", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "\n", "curr_rel_type", "=", "rel_type", "[", ":", ",", "0", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "\n", "# NOTE: Assumes rel_type is constant (i.e. same across all time steps).", "\n", "\n", "# Run n prediction steps", "\n", "for", "step", "in", "range", "(", "0", ",", "pred_steps", ")", ":", "\n", "            ", "last_pred", "=", "self", ".", "single_step_forward", "(", "last_pred", ",", "rel_rec", ",", "rel_send", ",", "\n", "curr_rel_type", ")", "\n", "preds", ".", "append", "(", "last_pred", ")", "\n", "\n", "", "sizes", "=", "[", "preds", "[", "0", "]", ".", "size", "(", "0", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "1", ")", "*", "pred_steps", ",", "\n", "preds", "[", "0", "]", ".", "size", "(", "2", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "3", ")", "]", "\n", "\n", "output", "=", "Variable", "(", "torch", ".", "zeros", "(", "sizes", ")", ")", "\n", "if", "inputs", ".", "is_cuda", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", ")", "\n", "\n", "# Re-assemble correct timeline", "\n", "", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "            ", "output", "[", ":", ",", "i", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "=", "preds", "[", "i", "]", "\n", "\n", "", "pred_all", "=", "output", "[", ":", ",", ":", "(", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", ",", ":", ",", ":", "]", "\n", "\n", "return", "pred_all", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.StationaryDecoder.__init__": [[920, 924], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StationaryDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "'Using stationary decoder.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.StationaryDecoder.forward": [[925, 954], ["inputs.transpose().contiguous.transpose().contiguous.transpose().contiguous", "inputs.transpose().contiguous.transpose().contiguous.size", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "pred_all.transpose().contiguous", "preds.append", "preds[].size", "preds[].size", "preds[].size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "output.cuda.cuda.cuda", "len", "inputs.transpose().contiguous.transpose().contiguous.transpose", "preds[].size", "pred_all.transpose", "inputs.transpose().contiguous.transpose().contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_type", ",", "rel_rec", ",", "rel_send", ",", "pred_steps", "=", "1", ")", ":", "\n", "\n", "        ", "inputs", "=", "inputs", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "time_steps", "=", "inputs", ".", "size", "(", "1", ")", "\n", "assert", "(", "pred_steps", "<=", "time_steps", ")", "\n", "preds", "=", "[", "]", "\n", "\n", "# Only take n-th timesteps as starting points (n: pred_steps)", "\n", "last_pred", "=", "inputs", "[", ":", ",", "0", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "\n", "\n", "# Run n prediction steps", "\n", "for", "step", "in", "range", "(", "0", ",", "pred_steps", ")", ":", "\n", "            ", "preds", ".", "append", "(", "last_pred", ")", "\n", "\n", "", "sizes", "=", "[", "preds", "[", "0", "]", ".", "size", "(", "0", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "1", ")", "*", "pred_steps", ",", "\n", "preds", "[", "0", "]", ".", "size", "(", "2", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "3", ")", "]", "\n", "\n", "output", "=", "Variable", "(", "torch", ".", "zeros", "(", "sizes", ")", ")", "\n", "if", "inputs", ".", "is_cuda", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", ")", "\n", "\n", "# Re-assemble correct timeline", "\n", "", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "            ", "output", "[", ":", ",", "i", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "=", "preds", "[", "i", "]", "\n", "\n", "", "pred_all", "=", "output", "[", ":", ",", ":", "(", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", ",", ":", ",", ":", "]", "\n", "\n", "return", "pred_all", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.VelocityStepDecoder.__init__": [[959, 964], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__"], ["def", "__init__", "(", "self", ",", "delta_T", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "VelocityStepDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "delta_T", "=", "delta_T", "\n", "\n", "print", "(", "'Using velocity step decoder.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.modules.VelocityStepDecoder.forward": [[965, 997], ["inputs.transpose().contiguous.transpose().contiguous.transpose().contiguous", "inputs.transpose().contiguous.transpose().contiguous.size", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "pred_all.transpose().contiguous", "preds.append", "preds[].size", "preds[].size", "preds[].size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "output.cuda.cuda.cuda", "len", "inputs.transpose().contiguous.transpose().contiguous.transpose", "preds[].size", "pred_all.transpose", "inputs.transpose().contiguous.transpose().contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rel_type", ",", "rel_rec", ",", "rel_send", ",", "pred_steps", "=", "1", ")", ":", "\n", "\n", "# input dimensions ofinputs are [batch, particle, time, state]", "\n", "\n", "        ", "inputs", "=", "inputs", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "time_steps", "=", "inputs", ".", "size", "(", "1", ")", "\n", "assert", "(", "pred_steps", "<=", "time_steps", ")", "\n", "preds", "=", "[", "]", "\n", "\n", "# Only take n-th timesteps as starting points (n: pred_steps)", "\n", "last_pred", "=", "inputs", "[", ":", ",", "0", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "\n", "\n", "# Run n prediction steps", "\n", "for", "step", "in", "range", "(", "0", ",", "pred_steps", ")", ":", "\n", "            ", "last_pred", "[", ":", ",", ":", ",", ":", ",", "0", ":", "2", "]", "=", "last_pred", "[", ":", ",", ":", ",", ":", ",", "0", ":", "2", "]", "+", "self", ".", "delta_T", "*", "last_pred", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", "\n", "preds", ".", "append", "(", "last_pred", ")", "\n", "\n", "", "sizes", "=", "[", "preds", "[", "0", "]", ".", "size", "(", "0", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "1", ")", "*", "pred_steps", ",", "\n", "preds", "[", "0", "]", ".", "size", "(", "2", ")", ",", "preds", "[", "0", "]", ".", "size", "(", "3", ")", "]", "\n", "\n", "output", "=", "Variable", "(", "torch", ".", "zeros", "(", "sizes", ")", ")", "\n", "if", "inputs", ".", "is_cuda", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", ")", "\n", "\n", "# Re-assemble correct timeline", "\n", "", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "            ", "output", "[", ":", ",", "i", ":", ":", "pred_steps", ",", ":", ",", ":", "]", "=", "preds", "[", "i", "]", "\n", "\n", "", "pred_all", "=", "output", "[", ":", ",", ":", "(", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", ",", ":", ",", ":", "]", "\n", "\n", "return", "pred_all", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train.train": [[280, 638], ["time.time", "encoder.train", "decoder.train", "scheduler.step", "encoder.eval", "decoder.eval", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "csv_writer.writerow", "perm_writer.writerow", "log.flush", "np.mean", "enumerate", "csv_writer.writerow", "perm_writer.writerow", "torch.save", "torch.save", "print", "optimizer.zero_grad", "encoder", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "perm_train.append", "acc_train.append", "acc_blocks_train.append", "acc_var_train.append", "acc_var_blocks_train.append", "F.mse_loss.backward", "optimizer.step", "mse_train.append", "nll_train.append", "kl_train.append", "kl_list_train.append", "nll_var_train.append", "kl_var_list_train.append", "torch.no_grad", "encoder", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "perm_val.append", "acc_val.append", "acc_blocks_val.append", "acc_var_val.append", "acc_var_blocks_val.append", "mse_val.append", "nll_val.append", "nll_var_val.append", "kl_val.append", "kl_list_val.append", "kl_var_list_val.append", "nll_M_val.append", "nll_M_var_val.append", "str", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "str", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "list", "list", "list", "np.mean", "encoder.state_dict", "decoder.state_dict", "Variable", "Variable", "data[].contiguous", "data[].contiguous", "utils.gumbel_softmax", "utils.my_softmax", "utils.kl_categorical_uniform", "KLb_train.append", "KLb_blocks_train.append", "torch.split", "tuple", "torch.cat", "utils.KL_between_blocks", "KLb_train.append", "KLb_blocks_train.append", "F.mse_loss", "F.mse_loss().data.item", "utils.nll_gaussian.data.item", "sum.data.item", "utils.nll_gaussian_var.data.item", "data[].contiguous", "data[].contiguous", "utils.gumbel_softmax", "utils.my_softmax", "utils.kl_categorical_uniform", "KLb_val.append", "KLb_blocks_val.append", "torch.split", "tuple", "torch.cat", "utils.KL_between_blocks", "KLb_val.append", "KLb_blocks_val.append", "decoder", "range", "F.mse_loss().data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "sum.data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "np.around", "time.time", "np.around", "np.around", "np.around", "np.around", "np.around", "time.time", "np.around", "np.around", "np.around", "np.around", "range", "range", "range", "range", "range", "str", "range", "str", "range", "np.mean", "np.mean", "np.mean", "data.cuda", "relations.cuda", "data[].contiguous", "data[].contiguous", "data[].contiguous", "utils.kl_categorical_uniform_var", "utils.edge_accuracy_perm_NRI", "utils.my_softmax", "sum", "sum", "utils.edge_accuracy_perm_fNRI", "sum().data.item", "math.isclose", "kl.data.item", "kl_var.data.item", "data.cuda", "relations.cuda", "data[].contiguous", "data[].contiguous", "data[].contiguous", "utils.kl_categorical_uniform_var", "utils.edge_accuracy_perm_NRI", "utils.my_softmax", "sum", "sum", "utils.edge_accuracy_perm_fNRI", "sum().data.item", "utils.edge_accuracy_perm_NRI_batch", "utils.edge_accuracy_perm_fNRI_batch", "plt.figure", "plt.figure.add_axes", "draw_lines", "draw_lines", "fig.add_axes.set_xlim", "fig.add_axes.set_ylim", "fig.add_axes.set_xticks", "fig.add_axes.set_yticks", "plt.text", "plt.show", "kl_loss.data.item", "kl_var.data.item", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "range", "str", "len", "str", "len", "range", "str", "len", "str", "len", "str", "len", "range", "len", "len", "list", "np.mean", "np.array", "np.array", "np.array", "np.array", "np.zeros", "np.zeros", "utils.gumbel_softmax", "utils.kl_categorical", "utils.kl_categorical_uniform", "utils.kl_categorical_uniform_var", "np.array", "np.zeros", "np.zeros", "KL.data.item", "np.array", "np.zeros", "np.zeros", "utils.gumbel_softmax", "utils.kl_categorical", "utils.kl_categorical_uniform", "utils.kl_categorical_uniform_var", "np.array", "np.zeros", "np.zeros", "KL.data.item", "decoder.detach().numpy", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "str", "len", "str", "len", "str", "len", "list", "np.mean", "data.size", "len", "len", "range", "range", "range", "len", "len", "F.mse_loss", "data.size", "len", "len", "range", "range", "range", "len", "len", "min", "max", "min", "max", "str", "range", "range", "F.mse_loss", "np.mean", "np.array", "len", "len", "len", "sum", "len", "len", "len", "sum", "decoder.detach", "len", "list", "np.mean", "np.mean", "np.array", "np.mean", "list", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.array", "np.mean", "list", "np.mean", "np.array", "list", "np.mean", "np.mean", "np.array", "list", "np.mean", "np.array", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.array"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_enc.train", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_enc.train", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.gumbel_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.KL_between_blocks", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.gumbel_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.KL_between_blocks", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_NRI", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_NRI", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_NRI_batch", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI_batch", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.gumbel_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.gumbel_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var"], ["def", "train", "(", "epoch", ",", "best_val_loss", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "nll_train", "=", "[", "]", "\n", "nll_var_train", "=", "[", "]", "\n", "mse_train", "=", "[", "]", "\n", "\n", "kl_train", "=", "[", "]", "\n", "kl_list_train", "=", "[", "]", "\n", "kl_var_list_train", "=", "[", "]", "\n", "\n", "acc_train", "=", "[", "]", "\n", "acc_var_train", "=", "[", "]", "\n", "perm_train", "=", "[", "]", "\n", "acc_var_blocks_train", "=", "[", "]", "\n", "acc_blocks_train", "=", "[", "]", "\n", "\n", "KLb_train", "=", "[", "]", "\n", "KLb_blocks_train", "=", "[", "]", "\n", "\n", "encoder", ".", "train", "(", ")", "\n", "decoder", ".", "train", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "not", "args", ".", "plot", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "train_loader", ")", ":", "# relations are the ground truth interactions graphs", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "data", ",", "relations", "=", "data", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "", "data", ",", "relations", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "relations", ")", "\n", "\n", "if", "args", ".", "dont_split_data", ":", "\n", "                ", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "", "elif", "args", ".", "split_enc_only", ":", "\n", "                ", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "\n", "", "else", ":", "\n", "                ", "assert", "(", "data", ".", "size", "(", "2", ")", "-", "args", ".", "timesteps", ")", ">=", "args", ".", "timesteps", "\n", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", "-", "args", ".", "timesteps", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "encoder", "(", "data_encoder", ",", "rel_rec", ",", "rel_send", ")", "\n", "\n", "if", "args", ".", "NRI", ":", "\n", "# dim of logits, edges and prob are [batchsize, N^2-N, edgetypes] where N = no. of particles", "\n", "                ", "edges", "=", "gumbel_softmax", "(", "logits", ",", "tau", "=", "args", ".", "temp", ",", "hard", "=", "args", ".", "hard", ")", "\n", "prob", "=", "my_softmax", "(", "logits", ",", "-", "1", ")", "\n", "\n", "loss_kl", "=", "kl_categorical_uniform", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "\n", "loss_kl_split", "=", "[", "loss_kl", "]", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "]", "\n", "\n", "KLb_train", ".", "append", "(", "0", ")", "\n", "KLb_blocks_train", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "if", "args", ".", "no_edge_acc", ":", "\n", "                    ", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "0", ",", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ",", "0", ",", "np", ".", "zeros", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "\n", "", "else", ":", "\n", "                    ", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "edge_accuracy_perm_NRI", "(", "logits", ",", "relations", ",", "args", ".", "edge_types_list", ")", "\n", "\n", "", "", "else", ":", "\n", "# dim of logits, edges and prob are [batchsize, N^2-N, sum(edge_types_list)] where N = no. of particles", "\n", "                ", "logits_split", "=", "torch", ".", "split", "(", "logits", ",", "args", ".", "edge_types_list", ",", "dim", "=", "-", "1", ")", "\n", "edges_split", "=", "tuple", "(", "[", "gumbel_softmax", "(", "logits_i", ",", "tau", "=", "args", ".", "temp", ",", "hard", "=", "args", ".", "hard", ")", "\n", "for", "logits_i", "in", "logits_split", "]", ")", "\n", "edges", "=", "torch", ".", "cat", "(", "edges_split", ",", "dim", "=", "-", "1", ")", "\n", "prob_split", "=", "[", "my_softmax", "(", "logits_i", ",", "-", "1", ")", "for", "logits_i", "in", "logits_split", "]", "\n", "\n", "if", "args", ".", "prior", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical", "(", "prob_split", "[", "type_idx", "]", ",", "log_prior", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "", "else", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical_uniform", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "\n", "", "if", "args", ".", "no_edge_acc", ":", "\n", "                    ", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "0", ",", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ",", "0", ",", "np", ".", "zeros", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "\n", "", "else", ":", "\n", "                    ", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "edge_accuracy_perm_fNRI", "(", "logits_split", ",", "relations", ",", "\n", "args", ".", "edge_types_list", ",", "args", ".", "skip_first", ")", "\n", "\n", "", "KLb_blocks", "=", "KL_between_blocks", "(", "prob_split", ",", "args", ".", "num_atoms", ")", "\n", "KLb_train", ".", "append", "(", "sum", "(", "KLb_blocks", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "KLb_blocks_train", ".", "append", "(", "[", "KL", ".", "data", ".", "item", "(", ")", "for", "KL", "in", "KLb_blocks", "]", ")", "\n", "\n", "", "target", "=", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "# dimensions are [batch, particle, time, state]", "\n", "output", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "args", ".", "prediction_steps", ")", "\n", "\n", "loss_nll", "=", "nll_gaussian", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_var", "=", "nll_gaussian_var", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "\n", "if", "args", ".", "mse_loss", ":", "\n", "                ", "loss", "=", "F", ".", "mse_loss", "(", "output", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_nll", "\n", "if", "not", "math", ".", "isclose", "(", "args", ".", "beta", ",", "0", ",", "rel_tol", "=", "1e-6", ")", ":", "\n", "                    ", "loss", "+=", "args", ".", "beta", "*", "loss_kl", "\n", "\n", "", "", "perm_train", ".", "append", "(", "perm", ")", "\n", "acc_train", ".", "append", "(", "acc_perm", ")", "\n", "acc_blocks_train", ".", "append", "(", "acc_blocks", ")", "\n", "acc_var_train", ".", "append", "(", "acc_var", ")", "\n", "acc_var_blocks_train", ".", "append", "(", "acc_var_blocks", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "mse_train", ".", "append", "(", "F", ".", "mse_loss", "(", "output", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_train", ".", "append", "(", "loss_nll", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_train", ".", "append", "(", "loss_kl", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_list_train", ".", "append", "(", "[", "kl", ".", "data", ".", "item", "(", ")", "for", "kl", "in", "loss_kl_split", "]", ")", "\n", "\n", "nll_var_train", ".", "append", "(", "loss_nll_var", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_var_list_train", ".", "append", "(", "[", "kl_var", ".", "data", ".", "item", "(", ")", "for", "kl_var", "in", "loss_kl_var_split", "]", ")", "\n", "\n", "\n", "", "", "nll_val", "=", "[", "]", "\n", "nll_var_val", "=", "[", "]", "\n", "mse_val", "=", "[", "]", "\n", "\n", "kl_val", "=", "[", "]", "\n", "kl_list_val", "=", "[", "]", "\n", "kl_var_list_val", "=", "[", "]", "\n", "\n", "acc_val", "=", "[", "]", "\n", "acc_var_val", "=", "[", "]", "\n", "acc_blocks_val", "=", "[", "]", "\n", "acc_var_blocks_val", "=", "[", "]", "\n", "perm_val", "=", "[", "]", "\n", "\n", "KLb_val", "=", "[", "]", "\n", "KLb_blocks_val", "=", "[", "]", "# KL between blocks list", "\n", "\n", "nll_M_val", "=", "[", "]", "\n", "nll_M_var_val", "=", "[", "]", "\n", "\n", "encoder", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "data", ",", "relations", "=", "data", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "dont_split_data", ":", "\n", "                ", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "", "elif", "args", ".", "split_enc_only", ":", "\n", "                ", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "\n", "", "else", ":", "\n", "                ", "assert", "(", "data", ".", "size", "(", "2", ")", "-", "args", ".", "timesteps", ")", ">=", "args", ".", "timesteps", "\n", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", "-", "args", ".", "timesteps", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "# dim of logits, edges and prob are [batchsize, N^2-N, sum(edge_types_list)] where N = no. of particles", "\n", "", "logits", "=", "encoder", "(", "data_encoder", ",", "rel_rec", ",", "rel_send", ")", "\n", "\n", "if", "args", ".", "NRI", ":", "\n", "# dim of logits, edges and prob are [batchsize, N^2-N, edgetypes] where N = no. of particles", "\n", "                ", "edges", "=", "gumbel_softmax", "(", "logits", ",", "tau", "=", "args", ".", "temp", ",", "hard", "=", "args", ".", "hard", ")", "# uses concrete distribution (for hard=False) to sample edge types", "\n", "prob", "=", "my_softmax", "(", "logits", ",", "-", "1", ")", "# my_softmax returns the softmax over the edgetype dim", "\n", "\n", "loss_kl", "=", "kl_categorical_uniform", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "\n", "loss_kl_split", "=", "[", "loss_kl", "]", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "]", "\n", "\n", "KLb_val", ".", "append", "(", "0", ")", "\n", "KLb_blocks_val", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "if", "args", ".", "no_edge_acc", ":", "\n", "                    ", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "0", ",", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ",", "0", ",", "np", ".", "zeros", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "\n", "", "else", ":", "\n", "                    ", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "edge_accuracy_perm_NRI", "(", "logits", ",", "relations", ",", "args", ".", "edge_types_list", ")", "\n", "\n", "", "", "else", ":", "\n", "# dim of logits, edges and prob are [batchsize, N^2-N, sum(edge_types_list)] where N = no. of particles", "\n", "                ", "logits_split", "=", "torch", ".", "split", "(", "logits", ",", "args", ".", "edge_types_list", ",", "dim", "=", "-", "1", ")", "\n", "edges_split", "=", "tuple", "(", "[", "gumbel_softmax", "(", "logits_i", ",", "tau", "=", "args", ".", "temp", ",", "hard", "=", "args", ".", "hard", ")", "\n", "for", "logits_i", "in", "logits_split", "]", ")", "\n", "edges", "=", "torch", ".", "cat", "(", "edges_split", ",", "dim", "=", "-", "1", ")", "\n", "prob_split", "=", "[", "my_softmax", "(", "logits_i", ",", "-", "1", ")", "for", "logits_i", "in", "logits_split", "]", "\n", "\n", "if", "args", ".", "prior", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical", "(", "prob_split", "[", "type_idx", "]", ",", "log_prior", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "", "else", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical_uniform", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "\n", "", "if", "args", ".", "no_edge_acc", ":", "\n", "                    ", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "0", ",", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "zeros", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ",", "0", ",", "np", ".", "zeros", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "\n", "", "else", ":", "\n", "                    ", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "edge_accuracy_perm_fNRI", "(", "logits_split", ",", "relations", ",", "\n", "args", ".", "edge_types_list", ",", "args", ".", "skip_first", ")", "\n", "\n", "", "KLb_blocks", "=", "KL_between_blocks", "(", "prob_split", ",", "args", ".", "num_atoms", ")", "\n", "KLb_val", ".", "append", "(", "sum", "(", "KLb_blocks", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "KLb_blocks_val", ".", "append", "(", "[", "KL", ".", "data", ".", "item", "(", ")", "for", "KL", "in", "KLb_blocks", "]", ")", "\n", "\n", "", "target", "=", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "# dimensions are [batch, particle, time, state]", "\n", "output", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "1", ")", "\n", "\n", "if", "args", ".", "plot", ":", "\n", "                ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "output_plot", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "49", ")", "\n", "\n", "if", "args", ".", "NRI", ":", "\n", "                    ", "acc_batch", ",", "perm", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_NRI_batch", "(", "logits", ",", "relations", ",", "\n", "args", ".", "edge_types_list", ")", "\n", "", "else", ":", "\n", "                    ", "acc_batch", ",", "perm", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_fNRI_batch", "(", "logits_split", ",", "relations", ",", "\n", "args", ".", "edge_types_list", ")", "\n", "\n", "", "from", "trajectory_plot", "import", "draw_lines", "\n", "for", "i", "in", "range", "(", "args", ".", "batch_size", ")", ":", "\n", "                    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "7", ")", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "xmin_t", ",", "ymin_t", ",", "xmax_t", ",", "ymax_t", "=", "draw_lines", "(", "target", ",", "i", ",", "linestyle", "=", "':'", ",", "alpha", "=", "0.6", ")", "\n", "xmin_o", ",", "ymin_o", ",", "xmax_o", ",", "ymax_o", "=", "draw_lines", "(", "output_plot", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "linestyle", "=", "'-'", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "[", "min", "(", "xmin_t", ",", "xmin_o", ")", ",", "max", "(", "xmax_t", ",", "xmax_o", ")", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "min", "(", "ymin_t", ",", "ymin_o", ")", ",", "max", "(", "ymax_t", ",", "ymax_o", ")", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "block_names", "=", "[", "'layer '", "+", "str", "(", "j", ")", "for", "j", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "#block_names = [ 'springs', 'charges' ]", "\n", "acc_text", "=", "[", "block_names", "[", "j", "]", "+", "' acc: {:02.0f}%'", ".", "format", "(", "100", "*", "acc_blocks_batch", "[", "i", ",", "j", "]", ")", "\n", "for", "j", "in", "range", "(", "acc_blocks_batch", ".", "shape", "[", "1", "]", ")", "]", "\n", "acc_text", "=", "', '", ".", "join", "(", "acc_text", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.95", ",", "acc_text", ",", "horizontalalignment", "=", "'center'", ",", "transform", "=", "ax", ".", "transAxes", ")", "\n", "#plt.savefig(os.path.join(args.load_folder,str(i)+'_pred_and_true.png'), dpi=300)", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "", "loss_nll", "=", "nll_gaussian", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_var", "=", "nll_gaussian_var", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "output_M", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "args", ".", "prediction_steps", ")", "\n", "loss_nll_M", "=", "nll_gaussian", "(", "output_M", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_M_var", "=", "nll_gaussian_var", "(", "output_M", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "perm_val", ".", "append", "(", "perm", ")", "\n", "acc_val", ".", "append", "(", "acc_perm", ")", "\n", "acc_blocks_val", ".", "append", "(", "acc_blocks", ")", "\n", "acc_var_val", ".", "append", "(", "acc_var", ")", "\n", "acc_var_blocks_val", ".", "append", "(", "acc_var_blocks", ")", "\n", "\n", "mse_val", ".", "append", "(", "F", ".", "mse_loss", "(", "output_M", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_val", ".", "append", "(", "loss_nll", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_var_val", ".", "append", "(", "loss_nll_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "kl_val", ".", "append", "(", "loss_kl", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_list_val", ".", "append", "(", "[", "kl_loss", ".", "data", ".", "item", "(", ")", "for", "kl_loss", "in", "loss_kl_split", "]", ")", "\n", "kl_var_list_val", ".", "append", "(", "[", "kl_var", ".", "data", ".", "item", "(", ")", "for", "kl_var", "in", "loss_kl_var_split", "]", ")", "\n", "\n", "nll_M_val", ".", "append", "(", "loss_nll_M", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_M_var_val", ".", "append", "(", "loss_nll_M_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "", "", "print", "(", "'Epoch: {:03d}'", ".", "format", "(", "epoch", ")", ",", "\n", "'perm_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "perm_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "print", "(", "'nll_trn: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_train", ")", ")", ",", "\n", "'kl_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_train", ")", ")", ",", "\n", "'mse_trn: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_train", ")", ")", ",", "\n", "'acc_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_train", ")", ")", ",", "\n", "'KLb_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_train", ")", ")", "\n", ")", "\n", "print", "(", "'acc_b_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", "\n", ")", "\n", "print", "(", "'nll_val: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_val", ")", ")", ",", "\n", "'kl_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_val", ")", ")", ",", "\n", "'mse_val: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_val", ")", ")", ",", "\n", "'acc_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_val", ")", ")", ",", "\n", "'KLb_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_val", ")", ")", "\n", ")", "\n", "print", "(", "'acc_b_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", "\n", ")", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", ")", ",", "\n", "'perm_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "perm_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "file", "=", "log", ")", "\n", "print", "(", "'nll_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_train", ")", ")", ",", "\n", "'kl_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_train", ")", ")", ",", "\n", "'mse_trn: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_train", ")", ")", ",", "\n", "'acc_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_train", ")", ")", ",", "\n", "'KLb_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_train", ")", ")", ",", "\n", "'acc_b_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "print", "(", "'nll_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_val", ")", ")", ",", "\n", "'kl_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_val", ")", ")", ",", "\n", "'mse_val: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_val", ")", ")", ",", "\n", "'acc_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_val", ")", ")", ",", "\n", "'KLb_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_val", ")", ")", ",", "\n", "'acc_b_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "labels", "=", "[", "'epoch'", ",", "'nll trn'", ",", "'kl trn'", ",", "'mse train'", ",", "'KLb trn'", ",", "'acc trn'", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc trn'", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "+", "[", "'nll var trn'", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' kl trn'", "for", "i", "in", "range", "(", "len", "(", "kl_list_train", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' kl var trn'", "for", "i", "in", "range", "(", "len", "(", "kl_list_train", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'acc var trn'", "]", "+", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc var trn'", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "labels", "+=", "[", "'nll val'", ",", "'nll_M_val'", ",", "'kl val'", ",", "'mse val'", ",", "'KLb val'", ",", "'acc val'", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc val'", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "labels", "+=", "[", "'nll var val'", ",", "'nll_M var val'", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' kl val'", "for", "i", "in", "range", "(", "len", "(", "kl_list_val", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' kl var val'", "for", "i", "in", "range", "(", "len", "(", "kl_list_val", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'acc var val'", "]", "+", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc var val'", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "csv_writer", ".", "writerow", "(", "labels", ")", "\n", "\n", "labels", "=", "[", "'trn '", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "perm_train", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'val '", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "perm_val", "[", "0", "]", ")", ")", "]", "\n", "perm_writer", ".", "writerow", "(", "labels", ")", "\n", "\n", "", "csv_writer", ".", "writerow", "(", "[", "epoch", ",", "np", ".", "mean", "(", "nll_train", ")", ",", "np", ".", "mean", "(", "kl_train", ")", ",", "\n", "np", ".", "mean", "(", "mse_train", ")", ",", "np", ".", "mean", "(", "KLb_train", ")", ",", "np", ".", "mean", "(", "acc_train", ")", "]", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "[", "np", ".", "mean", "(", "nll_var_train", ")", "]", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_var_list_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "#list(np.mean(np.array(KLb_blocks_train),axis=0)) +", "\n", "[", "np", ".", "mean", "(", "acc_var_train", ")", "]", "+", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "[", "np", ".", "mean", "(", "nll_val", ")", ",", "np", ".", "mean", "(", "nll_M_val", ")", ",", "np", ".", "mean", "(", "kl_val", ")", ",", "np", ".", "mean", "(", "mse_val", ")", ",", "\n", "np", ".", "mean", "(", "KLb_val", ")", ",", "np", ".", "mean", "(", "acc_val", ")", "]", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_val", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "[", "np", ".", "mean", "(", "nll_var_val", ")", ",", "np", ".", "mean", "(", "nll_M_var_val", ")", "]", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_val", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_var_list_val", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "#list(np.mean(np.array(KLb_blocks_val),axis=0))", "\n", "[", "np", ".", "mean", "(", "acc_var_val", ")", "]", "+", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_val", ")", ",", "axis", "=", "0", ")", ")", "\n", ")", "\n", "perm_writer", ".", "writerow", "(", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "perm_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "perm_val", ")", ",", "axis", "=", "0", ")", ")", "\n", ")", "\n", "\n", "log", ".", "flush", "(", ")", "\n", "if", "args", ".", "save_folder", "and", "np", ".", "mean", "(", "nll_M_val", ")", "<", "best_val_loss", ":", "\n", "        ", "torch", ".", "save", "(", "encoder", ".", "state_dict", "(", ")", ",", "encoder_file", ")", "\n", "torch", ".", "save", "(", "decoder", ".", "state_dict", "(", ")", ",", "decoder_file", ")", "\n", "print", "(", "'Best model so far, saving...'", ")", "\n", "", "return", "np", ".", "mean", "(", "nll_M_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train.test": [[640, 828], ["time.time", "encoder.eval", "decoder.eval", "enumerate", "print", "print", "print", "print", "print", "encoder.load_state_dict", "decoder.load_state_dict", "encoder.load_state_dict", "decoder.load_state_dict", "print", "print", "print", "print", "print", "log.flush", "torch.load", "torch.load", "torch.load", "torch.load", "torch.no_grad", "data[].contiguous", "data[].contiguous", "encoder", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "perm_test.append", "acc_test.append", "acc_blocks_test.append", "acc_var_test.append", "acc_var_blocks_test.append", "decoder", "decoder", "mse_1_test.append", "mse_10_test.append", "mse_20_test.append", "nll_test.append", "kl_test.append", "kl_list_test.append", "nll_var_test.append", "kl_var_list_test.append", "nll_M_test.append", "nll_M_var_test.append", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "str", "utils.gumbel_softmax", "utils.my_softmax", "utils.kl_categorical_uniform", "KLb_test.append", "KLb_blocks_test.append", "utils.edge_accuracy_perm_NRI", "torch.split", "tuple", "torch.cat", "utils.edge_accuracy_perm_fNRI", "utils.KL_between_blocks", "KLb_test.append", "KLb_blocks_test.append", "decoder", "decoder", "range", "F.mse_loss().data.item", "F.mse_loss().data.item", "F.mse_loss().data.item", "utils.nll_gaussian.data.item", "sum.data.item", "utils.nll_gaussian_var.data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "time.time", "np.around", "np.around", "np.around", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "str", "data.cuda", "relations.cuda", "data.size", "utils.kl_categorical_uniform_var", "utils.my_softmax", "sum", "sum", "sum().data.item", "utils.edge_accuracy_perm_NRI_batch", "utils.edge_accuracy_perm_fNRI_batch", "plt.figure", "plt.figure.add_axes", "draw_lines", "draw_lines", "fig.add_axes.set_xlim", "fig.add_axes.set_ylim", "fig.add_axes.set_xticks", "fig.add_axes.set_yticks", "plt.text", "plt.show", "kl_loss.data.item", "kl_var.data.item", "np.mean", "np.mean", "np.mean", "time.time", "np.around", "np.around", "np.around", "utils.gumbel_softmax", "utils.kl_categorical", "utils.kl_categorical_uniform", "utils.kl_categorical_uniform_var", "KL.data.item", "decoder.detach().numpy", "str", "np.array", "np.array", "np.array", "np.mean", "np.mean", "np.mean", "range", "range", "range", "min", "max", "min", "max", "range", "range", "F.mse_loss", "F.mse_loss", "F.mse_loss", "np.array", "np.array", "np.array", "len", "len", "len", "sum", "decoder.detach", "len"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.gumbel_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_NRI", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.KL_between_blocks", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_NRI_batch", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI_batch", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.gumbel_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var"], ["", "def", "test", "(", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "nll_test", "=", "[", "]", "\n", "nll_var_test", "=", "[", "]", "\n", "\n", "mse_1_test", "=", "[", "]", "\n", "mse_10_test", "=", "[", "]", "\n", "mse_20_test", "=", "[", "]", "\n", "\n", "kl_test", "=", "[", "]", "\n", "kl_list_test", "=", "[", "]", "\n", "kl_var_list_test", "=", "[", "]", "\n", "\n", "acc_test", "=", "[", "]", "\n", "acc_var_test", "=", "[", "]", "\n", "acc_blocks_test", "=", "[", "]", "\n", "acc_var_blocks_test", "=", "[", "]", "\n", "perm_test", "=", "[", "]", "\n", "\n", "KLb_test", "=", "[", "]", "\n", "KLb_blocks_test", "=", "[", "]", "# KL between blocks list", "\n", "\n", "nll_M_test", "=", "[", "]", "\n", "nll_M_var_test", "=", "[", "]", "\n", "\n", "encoder", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "if", "not", "args", ".", "cuda", ":", "\n", "        ", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "encoder_file", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "decoder_file", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "        ", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "encoder_file", ")", ")", "\n", "decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "decoder_file", ")", ")", "\n", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "data", ",", "relations", "=", "data", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "\n", "", "assert", "(", "data", ".", "size", "(", "2", ")", "-", "args", ".", "timesteps", ")", ">=", "args", ".", "timesteps", "\n", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", "-", "args", ".", "timesteps", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "# dim of logits, edges and prob are [batchsize, N^2-N, sum(edge_types_list)] where N = no. of particles", "\n", "logits", "=", "encoder", "(", "data_encoder", ",", "rel_rec", ",", "rel_send", ")", "\n", "\n", "if", "args", ".", "NRI", ":", "\n", "                ", "edges", "=", "gumbel_softmax", "(", "logits", ",", "tau", "=", "args", ".", "temp", ",", "hard", "=", "args", ".", "hard", ")", "\n", "prob", "=", "my_softmax", "(", "logits", ",", "-", "1", ")", "\n", "\n", "loss_kl", "=", "kl_categorical_uniform", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "\n", "loss_kl_split", "=", "[", "loss_kl", "]", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "]", "\n", "\n", "KLb_test", ".", "append", "(", "0", ")", "\n", "KLb_blocks_test", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "edge_accuracy_perm_NRI", "(", "logits", ",", "relations", ",", "args", ".", "edge_types_list", ")", "\n", "\n", "", "else", ":", "\n", "                ", "logits_split", "=", "torch", ".", "split", "(", "logits", ",", "args", ".", "edge_types_list", ",", "dim", "=", "-", "1", ")", "\n", "edges_split", "=", "tuple", "(", "[", "gumbel_softmax", "(", "logits_i", ",", "tau", "=", "args", ".", "temp", ",", "hard", "=", "args", ".", "hard", ")", "for", "logits_i", "in", "logits_split", "]", ")", "\n", "edges", "=", "torch", ".", "cat", "(", "edges_split", ",", "dim", "=", "-", "1", ")", "\n", "prob_split", "=", "[", "my_softmax", "(", "logits_i", ",", "-", "1", ")", "for", "logits_i", "in", "logits_split", "]", "\n", "\n", "if", "args", ".", "prior", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical", "(", "prob_split", "[", "type_idx", "]", ",", "log_prior", "[", "type_idx", "]", ",", "\n", "args", ".", "num_atoms", ")", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "", "else", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical_uniform", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "\n", "", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "edge_accuracy_perm_fNRI", "(", "logits_split", ",", "relations", ",", "\n", "args", ".", "edge_types_list", ",", "args", ".", "skip_first", ")", "\n", "\n", "KLb_blocks", "=", "KL_between_blocks", "(", "prob_split", ",", "args", ".", "num_atoms", ")", "\n", "KLb_test", ".", "append", "(", "sum", "(", "KLb_blocks", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "KLb_blocks_test", ".", "append", "(", "[", "KL", ".", "data", ".", "item", "(", ")", "for", "KL", "in", "KLb_blocks", "]", ")", "\n", "\n", "", "target", "=", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "# dimensions are [batch, particle, time, state]", "\n", "output", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "1", ")", "\n", "\n", "\n", "if", "args", ".", "plot", ":", "\n", "                ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "output_plot", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "49", ")", "\n", "\n", "output_plot_en", "=", "decoder", "(", "data_encoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "49", ")", "\n", "from", "trajectory_plot", "import", "draw_lines", "\n", "\n", "if", "args", ".", "NRI", ":", "\n", "                    ", "acc_batch", ",", "perm", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_NRI_batch", "(", "logits", ",", "relations", ",", "\n", "args", ".", "edge_types_list", ")", "\n", "", "else", ":", "\n", "                    ", "acc_batch", ",", "perm", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_fNRI_batch", "(", "logits_split", ",", "relations", ",", "\n", "args", ".", "edge_types_list", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "batch_size", ")", ":", "\n", "                    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "7", ")", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "xmin_t", ",", "ymin_t", ",", "xmax_t", ",", "ymax_t", "=", "draw_lines", "(", "target", ",", "i", ",", "linestyle", "=", "':'", ",", "alpha", "=", "0.6", ")", "\n", "xmin_o", ",", "ymin_o", ",", "xmax_o", ",", "ymax_o", "=", "draw_lines", "(", "output_plot", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "linestyle", "=", "'-'", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "[", "min", "(", "xmin_t", ",", "xmin_o", ")", ",", "max", "(", "xmax_t", ",", "xmax_o", ")", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "min", "(", "ymin_t", ",", "ymin_o", ")", ",", "max", "(", "ymax_t", ",", "ymax_o", ")", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "block_names", "=", "[", "str", "(", "j", ")", "for", "j", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "acc_text", "=", "[", "'layer '", "+", "block_names", "[", "j", "]", "+", "' acc: {:02.0f}%'", ".", "format", "(", "100", "*", "acc_blocks_batch", "[", "i", ",", "j", "]", ")", "\n", "for", "j", "in", "range", "(", "acc_blocks_batch", ".", "shape", "[", "1", "]", ")", "]", "\n", "acc_text", "=", "', '", ".", "join", "(", "acc_text", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.95", ",", "acc_text", ",", "horizontalalignment", "=", "'center'", ",", "transform", "=", "ax", ".", "transAxes", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "", "loss_nll", "=", "nll_gaussian", "(", "output", ",", "target", ",", "args", ".", "var", ")", "# compute the reconstruction loss. nll_gaussian is from utils.py", "\n", "loss_nll_var", "=", "nll_gaussian_var", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "output_M", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "args", ".", "prediction_steps", ")", "\n", "loss_nll_M", "=", "nll_gaussian", "(", "output_M", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_M_var", "=", "nll_gaussian_var", "(", "output_M", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "perm_test", ".", "append", "(", "perm", ")", "\n", "acc_test", ".", "append", "(", "acc_perm", ")", "\n", "acc_blocks_test", ".", "append", "(", "acc_blocks", ")", "\n", "acc_var_test", ".", "append", "(", "acc_var", ")", "\n", "acc_var_blocks_test", ".", "append", "(", "acc_var_blocks", ")", "\n", "\n", "output_10", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "10", ")", "\n", "output_20", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "20", ")", "\n", "mse_1_test", ".", "append", "(", "F", ".", "mse_loss", "(", "output", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "mse_10_test", ".", "append", "(", "F", ".", "mse_loss", "(", "output_10", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "mse_20_test", ".", "append", "(", "F", ".", "mse_loss", "(", "output_20", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "nll_test", ".", "append", "(", "loss_nll", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_test", ".", "append", "(", "loss_kl", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_list_test", ".", "append", "(", "[", "kl_loss", ".", "data", ".", "item", "(", ")", "for", "kl_loss", "in", "loss_kl_split", "]", ")", "\n", "\n", "nll_var_test", ".", "append", "(", "loss_nll_var", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_var_list_test", ".", "append", "(", "[", "kl_var", ".", "data", ".", "item", "(", ")", "for", "kl_var", "in", "loss_kl_var_split", "]", ")", "\n", "\n", "nll_M_test", ".", "append", "(", "loss_nll_M", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_M_var_test", ".", "append", "(", "loss_nll_M_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "\n", "", "", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'------------Testing-------------'", ")", "\n", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'nll_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_test", ")", ")", ",", "\n", "'nll_M_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_test", ")", ")", ",", "\n", "'kl_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_test", ")", ")", ",", "\n", "'mse_1_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_1_test", ")", ")", ",", "\n", "'mse_10_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_10_test", ")", ")", ",", "\n", "'mse_20_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_20_test", ")", ")", ",", "\n", "'acc_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_test", ")", ")", ",", "\n", "'acc_var_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_var_test", ")", ")", ",", "\n", "'KLb_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_test", ")", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "print", "(", "'acc_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'acc_var_b: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", "\n", ")", "\n", "if", "args", ".", "save_folder", ":", "\n", "        ", "print", "(", "'--------------------------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'------------Testing-------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'--------------------------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'nll_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_test", ")", ")", ",", "\n", "'nll_M_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_test", ")", ")", ",", "\n", "'kl_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_test", ")", ")", ",", "\n", "'mse_1_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_1_test", ")", ")", ",", "\n", "'mse_10_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_10_test", ")", ")", ",", "\n", "'mse_20_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_20_test", ")", ")", ",", "\n", "'acc_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_test", ")", ")", ",", "\n", "'acc_var_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_var_test", ")", ")", ",", "\n", "'KLb_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_test", ")", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "file", "=", "log", ")", "\n", "print", "(", "'acc_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'acc_var_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_sigmoid.train": [[218, 456], ["time.time", "encoder.train", "decoder.train", "scheduler.step", "encoder.eval", "decoder.eval", "enumerate", "print", "print", "print", "print", "print", "print", "csv_writer.writerow", "perm_writer.writerow", "log.flush", "np.mean", "enumerate", "csv_writer.writerow", "perm_writer.writerow", "torch.save", "torch.save", "print", "optimizer.zero_grad", "encoder", "utils.my_sigmoid", "KLb_train.append", "KLb_blocks_train.append", "utils.edge_accuracy_perm_sigmoid", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "F.mse_loss", "perm_train.append", "acc_train.append", "acc_blocks_train.append", "acc_var_train.append", "acc_var_blocks_train.append", "F.mse_loss.backward", "optimizer.step", "mse_train.append", "nll_train.append", "nll_var_train.append", "torch.no_grad", "encoder", "utils.my_sigmoid", "KLb_train.append", "KLb_blocks_train.append", "utils.edge_accuracy_perm_sigmoid", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "perm_val.append", "acc_val.append", "acc_blocks_val.append", "acc_var_val.append", "acc_var_blocks_val.append", "mse_val.append", "nll_val.append", "nll_var_val.append", "nll_M_val.append", "nll_M_var_val.append", "str", "np.mean", "np.mean", "np.mean", "str", "np.mean", "np.mean", "np.mean", "str", "str", "np.mean", "np.mean", "np.mean", "str", "np.mean", "np.mean", "np.mean", "np.mean", "str", "list", "list", "list", "np.mean", "encoder.state_dict", "decoder.state_dict", "Variable", "Variable", "data[].contiguous", "data[].contiguous", "F.mse_loss.data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "data[].contiguous", "data[].contiguous", "decoder", "utils.edge_accuracy_perm_sigmoid_batch", "range", "F.mse_loss().data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "np.around", "time.time", "np.around", "np.around", "np.around", "time.time", "np.around", "np.around", "range", "range", "str", "range", "str", "range", "np.mean", "np.mean", "np.mean", "data.cuda", "relations.cuda", "data[].contiguous", "data[].contiguous", "data[].contiguous", "data.cuda", "relations.cuda", "data[].contiguous", "data[].contiguous", "data[].contiguous", "plt.figure", "plt.figure.add_axes", "draw_lines", "draw_lines", "fig.add_axes.set_xlim", "fig.add_axes.set_ylim", "fig.add_axes.set_xticks", "fig.add_axes.set_yticks", "plt.text", "plt.show", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "range", "str", "range", "len", "len", "np.mean", "np.array", "np.array", "np.array", "decoder.detach().numpy", "str", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "str", "str", "list", "np.mean", "np.mean", "data.size", "data.size", "min", "max", "min", "max", "range", "range", "F.mse_loss", "np.mean", "decoder.detach", "list", "np.mean", "np.mean", "np.mean", "np.mean", "np.array", "np.mean", "list", "np.mean", "np.array", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.array"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_enc.train", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_enc.train", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_sigmoid", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_sigmoid", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_sigmoid", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_sigmoid", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_sigmoid_batch", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines"], ["def", "train", "(", "epoch", ",", "best_val_loss", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "nll_train", "=", "[", "]", "\n", "nll_var_train", "=", "[", "]", "\n", "mse_train", "=", "[", "]", "\n", "\n", "kl_train", "=", "[", "]", "\n", "kl_list_train", "=", "[", "]", "\n", "kl_var_list_train", "=", "[", "]", "\n", "\n", "acc_train", "=", "[", "]", "\n", "perm_train", "=", "[", "]", "\n", "acc_blocks_train", "=", "[", "]", "\n", "acc_var_train", "=", "[", "]", "\n", "acc_var_blocks_train", "=", "[", "]", "\n", "\n", "KLb_train", "=", "[", "]", "\n", "KLb_blocks_train", "=", "[", "]", "\n", "\n", "encoder", ".", "train", "(", ")", "\n", "decoder", ".", "train", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "not", "args", ".", "plot", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "train_loader", ")", ":", "# relations are the ground truth interactions graphs", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "data", ",", "relations", "=", "data", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "", "data", ",", "relations", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "relations", ")", "\n", "\n", "if", "args", ".", "dont_split_data", ":", "\n", "                ", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "", "elif", "args", ".", "split_enc_only", ":", "\n", "                ", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "\n", "", "else", ":", "\n", "                ", "assert", "(", "data", ".", "size", "(", "2", ")", "-", "args", ".", "timesteps", ")", ">=", "args", ".", "timesteps", "\n", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", "-", "args", ".", "timesteps", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "encoder", "(", "data_encoder", ",", "rel_rec", ",", "rel_send", ")", "\n", "\n", "# dim of logits, edges and prob are [batchsize, N^2-N, edgetypes] where N = no. of particles", "\n", "\n", "edges", "=", "my_sigmoid", "(", "logits", ",", "hard", "=", "args", ".", "hard", ",", "sharpness", "=", "args", ".", "sigmoid_sharpness", ")", "\n", "\n", "loss_kl", "=", "0", "\n", "loss_kl_split", "=", "[", "0", "]", "\n", "loss_kl_var_split", "=", "[", "0", "]", "\n", "\n", "KLb_train", ".", "append", "(", "0", ")", "\n", "KLb_blocks_train", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "edge_accuracy_perm_sigmoid", "(", "edges", ",", "relations", ")", "\n", "\n", "target", "=", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "# dimensions are [batch, particle, time, state]", "\n", "output", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "args", ".", "prediction_steps", ")", "\n", "\n", "loss_nll", "=", "nll_gaussian", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_var", "=", "nll_gaussian_var", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "loss", "=", "F", ".", "mse_loss", "(", "output", ",", "target", ")", "\n", "\n", "perm_train", ".", "append", "(", "perm", ")", "\n", "acc_train", ".", "append", "(", "acc_perm", ")", "\n", "acc_blocks_train", ".", "append", "(", "acc_blocks", ")", "\n", "acc_var_train", ".", "append", "(", "acc_var", ")", "\n", "acc_var_blocks_train", ".", "append", "(", "acc_var_blocks", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "mse_train", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_train", ".", "append", "(", "loss_nll", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_var_train", ".", "append", "(", "loss_nll_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "\n", "", "", "nll_val", "=", "[", "]", "\n", "nll_var_val", "=", "[", "]", "\n", "mse_val", "=", "[", "]", "\n", "\n", "kl_val", "=", "[", "]", "\n", "kl_list_val", "=", "[", "]", "\n", "kl_var_list_val", "=", "[", "]", "\n", "\n", "acc_val", "=", "[", "]", "\n", "acc_blocks_val", "=", "[", "]", "\n", "acc_var_val", "=", "[", "]", "\n", "acc_var_blocks_val", "=", "[", "]", "\n", "perm_val", "=", "[", "]", "\n", "\n", "KLb_val", "=", "[", "]", "\n", "KLb_blocks_val", "=", "[", "]", "# KL between blocks list", "\n", "\n", "nll_M_val", "=", "[", "]", "\n", "nll_M_var_val", "=", "[", "]", "\n", "\n", "encoder", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "data", ",", "relations", "=", "data", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "dont_split_data", ":", "\n", "                ", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "", "elif", "args", ".", "split_enc_only", ":", "\n", "                ", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "\n", "", "else", ":", "\n", "                ", "assert", "(", "data", ".", "size", "(", "2", ")", "-", "args", ".", "timesteps", ")", ">=", "args", ".", "timesteps", "\n", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", "-", "args", ".", "timesteps", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "# dim of logits, edges are [batchsize, N^2-N, sum(edge_types_list)] where N = no. of particles", "\n", "", "logits", "=", "encoder", "(", "data_encoder", ",", "rel_rec", ",", "rel_send", ")", "\n", "\n", "edges", "=", "my_sigmoid", "(", "logits", ",", "hard", "=", "args", ".", "hard", ",", "sharpness", "=", "args", ".", "sigmoid_sharpness", ")", "\n", "\n", "loss_kl", "=", "0", "\n", "loss_kl_split", "=", "[", "0", "]", "\n", "loss_kl_var_split", "=", "[", "0", "]", "\n", "\n", "KLb_train", ".", "append", "(", "0", ")", "\n", "KLb_blocks_train", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "edge_accuracy_perm_sigmoid", "(", "edges", ",", "relations", ")", "\n", "\n", "target", "=", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "# dimensions are [batch, particle, time, state]", "\n", "output", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "1", ")", "\n", "\n", "if", "args", ".", "plot", ":", "\n", "                ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "output_plot", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "49", ")", "\n", "\n", "acc_batch", ",", "perm", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_sigmoid_batch", "(", "edges", ",", "relations", ")", "\n", "\n", "from", "trajectory_plot", "import", "draw_lines", "\n", "for", "i", "in", "range", "(", "args", ".", "batch_size", ")", ":", "\n", "                    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "7", ")", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "xmin_t", ",", "ymin_t", ",", "xmax_t", ",", "ymax_t", "=", "draw_lines", "(", "target", ",", "i", ",", "linestyle", "=", "':'", ",", "alpha", "=", "0.6", ")", "\n", "xmin_o", ",", "ymin_o", ",", "xmax_o", ",", "ymax_o", "=", "draw_lines", "(", "output_plot", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "linestyle", "=", "'-'", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "[", "min", "(", "xmin_t", ",", "xmin_o", ")", ",", "max", "(", "xmax_t", ",", "xmax_o", ")", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "min", "(", "ymin_t", ",", "ymin_o", ")", ",", "max", "(", "ymax_t", ",", "ymax_o", ")", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "block_names", "=", "[", "str", "(", "j", ")", "for", "j", "in", "range", "(", "args", ".", "num_factors", ")", "]", "\n", "acc_text", "=", "[", "'layer '", "+", "block_names", "[", "j", "]", "+", "' acc: {:02.0f}%'", ".", "format", "(", "100", "*", "acc_blocks_batch", "[", "i", ",", "j", "]", ")", "\n", "for", "j", "in", "range", "(", "acc_blocks_batch", ".", "shape", "[", "1", "]", ")", "]", "\n", "acc_text", "=", "', '", ".", "join", "(", "acc_text", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.95", ",", "acc_text", ",", "horizontalalignment", "=", "'center'", ",", "transform", "=", "ax", ".", "transAxes", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "", "", "loss_nll", "=", "nll_gaussian", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_var", "=", "nll_gaussian_var", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "output_M", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "args", ".", "prediction_steps", ")", "\n", "loss_nll_M", "=", "nll_gaussian", "(", "output_M", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_M_var", "=", "nll_gaussian_var", "(", "output_M", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "perm_val", ".", "append", "(", "perm", ")", "\n", "acc_val", ".", "append", "(", "acc_perm", ")", "\n", "acc_blocks_val", ".", "append", "(", "acc_blocks", ")", "\n", "acc_var_val", ".", "append", "(", "acc_var", ")", "\n", "acc_var_blocks_val", ".", "append", "(", "acc_var_blocks", ")", "\n", "\n", "mse_val", ".", "append", "(", "F", ".", "mse_loss", "(", "output_M", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_val", ".", "append", "(", "loss_nll", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_var_val", ".", "append", "(", "loss_nll_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "nll_M_val", ".", "append", "(", "loss_nll_M", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_M_var_val", ".", "append", "(", "loss_nll_M_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "", "", "print", "(", "'Epoch: {:03d}'", ".", "format", "(", "epoch", ")", ",", "\n", "'perm_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "perm_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "print", "(", "'nll_trn: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_train", ")", ")", ",", "\n", "'mse_trn: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_train", ")", ")", ",", "\n", "'acc_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_train", ")", ")", ",", "\n", "'acc_b_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", "\n", ")", "\n", "print", "(", "'nll_val: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_val", ")", ")", ",", "\n", "'mse_val: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_val", ")", ")", ",", "\n", "'acc_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_val", ")", ")", ",", "\n", "'acc_b_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", "\n", ")", "\n", "print", "(", "'Epoch: {:03d}'", ".", "format", "(", "epoch", ")", ",", "\n", "'perm_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "perm_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "file", "=", "log", ")", "\n", "print", "(", "'nll_trn: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_train", ")", ")", ",", "\n", "'mse_trn: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_train", ")", ")", ",", "\n", "'acc_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_train", ")", ")", ",", "\n", "'acc_b_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "print", "(", "'nll_val: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_val", ")", ")", ",", "\n", "'nll_M_val: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_val", ")", ")", ",", "\n", "'mse_val: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_val", ")", ")", ",", "\n", "'acc_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_val", ")", ")", ",", "\n", "'acc_b_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "labels", "=", "[", "'epoch'", ",", "'nll trn'", ",", "'mse train'", ",", "'nll var trn'", ",", "'acc trn'", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc trn'", "for", "i", "in", "range", "(", "args", ".", "num_factors", ")", "]", "\n", "labels", "+=", "[", "'acc var trn'", "]", "+", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc var trn'", "for", "i", "in", "range", "(", "args", ".", "num_factors", ")", "]", "\n", "labels", "+=", "[", "'nll val'", ",", "'nll M val'", ",", "'mse val'", ",", "'acc val'", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc val'", "for", "i", "in", "range", "(", "args", ".", "num_factors", ")", "]", "\n", "labels", "+=", "[", "'nll var val'", ",", "'nll M var val'", "]", "\n", "labels", "+=", "[", "'acc var val'", "]", "+", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc var val'", "for", "i", "in", "range", "(", "args", ".", "num_factors", ")", "]", "\n", "csv_writer", ".", "writerow", "(", "labels", ")", "\n", "\n", "labels", "=", "[", "'trn '", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "perm_train", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'val '", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "perm_val", "[", "0", "]", ")", ")", "]", "\n", "perm_writer", ".", "writerow", "(", "labels", ")", "\n", "\n", "", "csv_writer", ".", "writerow", "(", "[", "epoch", ",", "np", ".", "mean", "(", "nll_train", ")", ",", "np", ".", "mean", "(", "mse_train", ")", ",", "np", ".", "mean", "(", "nll_var_train", ")", ",", "np", ".", "mean", "(", "acc_train", ")", "]", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "[", "np", ".", "mean", "(", "acc_var_train", ")", "]", "+", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "[", "np", ".", "mean", "(", "nll_val", ")", ",", "np", ".", "mean", "(", "nll_M_val", ")", ",", "np", ".", "mean", "(", "mse_val", ")", ",", "np", ".", "mean", "(", "acc_val", ")", "]", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_val", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "[", "np", ".", "mean", "(", "nll_var_val", ")", ",", "np", ".", "mean", "(", "nll_M_var_val", ")", "]", "+", "\n", "[", "np", ".", "mean", "(", "acc_var_val", ")", "]", "+", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_val", ")", ",", "axis", "=", "0", ")", ")", "\n", ")", "\n", "perm_writer", ".", "writerow", "(", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "perm_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "perm_val", ")", ",", "axis", "=", "0", ")", ")", "\n", ")", "\n", "\n", "log", ".", "flush", "(", ")", "\n", "if", "args", ".", "save_folder", "and", "np", ".", "mean", "(", "nll_M_val", ")", "<", "best_val_loss", ":", "\n", "        ", "torch", ".", "save", "(", "encoder", ".", "state_dict", "(", ")", ",", "encoder_file", ")", "\n", "torch", ".", "save", "(", "decoder", ".", "state_dict", "(", ")", ",", "decoder_file", ")", "\n", "print", "(", "'Best model so far, saving...'", ")", "\n", "", "return", "np", ".", "mean", "(", "nll_M_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_sigmoid.test": [[458, 581], ["encoder.eval", "decoder.eval", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "log.flush", "encoder.load_state_dict", "decoder.load_state_dict", "encoder.load_state_dict", "decoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.no_grad", "data[].contiguous", "data[].contiguous", "encoder", "utils.my_sigmoid", "utils.edge_accuracy_perm_sigmoid", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "decoder", "decoder", "mse_1_test.append", "mse_10_test.append", "mse_20_test.append", "utils.nll_gaussian", "utils.nll_gaussian_var", "perm_test.append", "acc_test.append", "acc_blocks_test.append", "acc_var_test.append", "acc_var_blocks_test.append", "nll_test.append", "nll_var_test.append", "nll_M_test.append", "nll_M_var_test.append", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "decoder", "decoder", "utils.edge_accuracy_perm_sigmoid_batch", "range", "F.mse_loss().data.item", "F.mse_loss().data.item", "F.mse_loss().data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "np.around", "np.around", "np.around", "np.around", "data.cuda", "relations.cuda", "data.size", "plt.figure", "plt.figure.add_axes", "draw_lines", "draw_lines", "fig.add_axes.set_xlim", "fig.add_axes.set_ylim", "fig.add_axes.set_xticks", "fig.add_axes.set_yticks", "plt.text", "plt.show", "np.mean", "np.mean", "np.mean", "np.mean", "decoder.detach().numpy", "str", "np.array", "np.array", "np.array", "np.array", "min", "max", "min", "max", "range", "range", "F.mse_loss", "F.mse_loss", "F.mse_loss", "decoder.detach"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_sigmoid", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_sigmoid", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_sigmoid_batch", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines"], ["", "def", "test", "(", ")", ":", "\n", "    ", "nll_test", "=", "[", "]", "\n", "nll_var_test", "=", "[", "]", "\n", "\n", "acc_test", "=", "[", "]", "\n", "acc_blocks_test", "=", "[", "]", "\n", "acc_var_test", "=", "[", "]", "\n", "acc_var_blocks_test", "=", "[", "]", "\n", "perm_test", "=", "[", "]", "\n", "\n", "mse_1_test", "=", "[", "]", "\n", "mse_10_test", "=", "[", "]", "\n", "mse_20_test", "=", "[", "]", "\n", "\n", "nll_M_test", "=", "[", "]", "\n", "nll_M_var_test", "=", "[", "]", "\n", "\n", "encoder", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "if", "not", "args", ".", "cuda", ":", "\n", "        ", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "encoder_file", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "decoder_file", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "        ", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "encoder_file", ")", ")", "\n", "decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "decoder_file", ")", ")", "\n", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "data", ",", "relations", "=", "data", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "\n", "", "assert", "(", "data", ".", "size", "(", "2", ")", "-", "args", ".", "timesteps", ")", ">=", "args", ".", "timesteps", "\n", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", "-", "args", ".", "timesteps", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "# dim of logits, edges and prob are [batchsize, N^2-N, sum(edge_types_list)] where N = no. of particles", "\n", "logits", "=", "encoder", "(", "data_encoder", ",", "rel_rec", ",", "rel_send", ")", "\n", "edges", "=", "edges", "=", "my_sigmoid", "(", "logits", ",", "hard", "=", "args", ".", "hard", ",", "sharpness", "=", "args", ".", "sigmoid_sharpness", ")", "\n", "\n", "acc_perm", ",", "perm", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "=", "edge_accuracy_perm_sigmoid", "(", "edges", ",", "relations", ")", "\n", "\n", "target", "=", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "# dimensions are [batch, particle, time, state]", "\n", "output", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "1", ")", "\n", "\n", "if", "args", ".", "plot", ":", "\n", "                ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "output_plot", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "49", ")", "\n", "\n", "output_plot_en", "=", "decoder", "(", "data_encoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "49", ")", "\n", "from", "trajectory_plot", "import", "draw_lines", "\n", "\n", "acc_batch", ",", "perm", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_sigmoid_batch", "(", "edges", ",", "relations", ")", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "batch_size", ")", ":", "\n", "                    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "7", ")", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "xmin_t", ",", "ymin_t", ",", "xmax_t", ",", "ymax_t", "=", "draw_lines", "(", "target", ",", "i", ",", "linestyle", "=", "':'", ",", "alpha", "=", "0.6", ")", "\n", "xmin_o", ",", "ymin_o", ",", "xmax_o", ",", "ymax_o", "=", "draw_lines", "(", "output_plot", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "linestyle", "=", "'-'", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "[", "min", "(", "xmin_t", ",", "xmin_o", ")", ",", "max", "(", "xmax_t", ",", "xmax_o", ")", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "min", "(", "ymin_t", ",", "ymin_o", ")", ",", "max", "(", "ymax_t", ",", "ymax_o", ")", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "block_names", "=", "[", "str", "(", "j", ")", "for", "j", "in", "range", "(", "args", ".", "num_factors", ")", "]", "\n", "acc_text", "=", "[", "'layer '", "+", "block_names", "[", "j", "]", "+", "' acc: {:02.0f}%'", ".", "format", "(", "100", "*", "acc_blocks_batch", "[", "i", ",", "j", "]", ")", "\n", "for", "j", "in", "range", "(", "acc_blocks_batch", ".", "shape", "[", "1", "]", ")", "]", "\n", "acc_text", "=", "', '", ".", "join", "(", "acc_text", ")", "\n", "plt", ".", "text", "(", "0.5", ",", "0.95", ",", "acc_text", ",", "horizontalalignment", "=", "'center'", ",", "transform", "=", "ax", ".", "transAxes", ")", "\n", "#plt.savefig(os.path.join(args.load_folder,str(i)+'_pred_and_true_.png'), dpi=300)", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "", "", "loss_nll", "=", "nll_gaussian", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_var", "=", "nll_gaussian_var", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "output_10", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "10", ")", "\n", "output_20", "=", "decoder", "(", "data_decoder", ",", "edges", ",", "rel_rec", ",", "rel_send", ",", "20", ")", "\n", "mse_1_test", ".", "append", "(", "F", ".", "mse_loss", "(", "output", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "mse_10_test", ".", "append", "(", "F", ".", "mse_loss", "(", "output_10", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "mse_20_test", ".", "append", "(", "F", ".", "mse_loss", "(", "output_20", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "loss_nll_M", "=", "nll_gaussian", "(", "output_10", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_M_var", "=", "nll_gaussian_var", "(", "output_10", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "perm_test", ".", "append", "(", "perm", ")", "\n", "acc_test", ".", "append", "(", "acc_perm", ")", "\n", "acc_blocks_test", ".", "append", "(", "acc_blocks", ")", "\n", "acc_var_test", ".", "append", "(", "acc_var", ")", "\n", "acc_var_blocks_test", ".", "append", "(", "acc_var_blocks", ")", "\n", "\n", "nll_test", ".", "append", "(", "loss_nll", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_var_test", ".", "append", "(", "loss_nll_var", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_M_test", ".", "append", "(", "loss_nll_M", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_M_var_test", ".", "append", "(", "loss_nll_M_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "\n", "", "", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'------------Testing-------------'", ")", "\n", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'nll_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_test", ")", ")", ",", "\n", "'nll_M_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_test", ")", ")", ",", "\n", "'mse_1_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_1_test", ")", ")", ",", "\n", "'mse_10_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_10_test", ")", ")", ",", "\n", "'mse_20_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_20_test", ")", ")", ",", "\n", "'acc_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_test", ")", ")", ",", "\n", "'acc_var_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_var_test", ")", ")", ",", "\n", "'acc_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'acc_var_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", "\n", ")", "\n", "print", "(", "'--------------------------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'------------Testing-------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'--------------------------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'nll_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_test", ")", ")", ",", "\n", "'nll_M_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_test", ")", ")", ",", "\n", "'mse_1_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_1_test", ")", ")", ",", "\n", "'mse_10_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_10_test", ")", ")", ",", "\n", "'mse_20_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_20_test", ")", ")", ",", "\n", "'acc_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_test", ")", ")", ",", "\n", "'acc_var_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_var_test", ")", ")", ",", "\n", "'acc_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'acc_var_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_dec.train": [[221, 411], ["time.time", "decoder.train", "scheduler.step", "decoder.eval", "enumerate", "print", "print", "csv_writer.writerow", "log.flush", "np.mean", "enumerate", "csv_writer.writerow", "torch.save", "print", "optimizer.zero_grad", "data_decoder.contiguous.contiguous", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "utils.nll_gaussian.backward", "optimizer.step", "mse_train.append", "nll_train.append", "nll_var_train.append", "torch.no_grad", "data_decoder.contiguous.contiguous", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "mse_val.append", "nll_val.append", "nll_var_val.append", "nll_M_val.append", "nll_M_var_val.append", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "decoder.state_dict", "torch.zeros", "torch.ones", "Variable", "Variable", "F.mse_loss().data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "torch.zeros", "torch.ones", "Variable", "Variable", "decoder", "range", "F.mse_loss().data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "time.time", "time.time", "np.mean", "np.mean", "torch.stack", "torch.FloatTensor", "torch.cat.zero_", "torch.cat.scatter_", "data_decoder.contiguous.cuda", "torch.cat.cuda", "torch.stack", "torch.FloatTensor", "torch.cat.zero_", "torch.cat.scatter_", "data_decoder.contiguous.cuda", "torch.cat.cuda", "plt.figure", "plt.figure.add_axes", "draw_lines", "draw_lines", "fig.add_axes.set_xlim", "fig.add_axes.set_ylim", "fig.add_axes.set_xticks", "fig.add_axes.set_yticks", "plt.show", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "data.size", "rel_rec.size", "data.size", "rel_rec.size", "torch.stack", "range", "torch.stack", "data.size", "rel_rec.size", "relations.view", "relations.transpose().type", "torch.cat", "data.size", "rel_rec.size", "data.size", "rel_rec.size", "torch.stack", "range", "torch.stack", "data.size", "rel_rec.size", "relations.view", "relations.transpose().type", "torch.cat", "decoder.detach().numpy", "len", "data.size", "torch.FloatTensor", "rel.zero_", "rel_type_onehot[].scatter_", "data.size", "F.mse_loss", "len", "data.size", "torch.FloatTensor", "rel.zero_", "rel_type_onehot[].scatter_", "data.size", "min", "max", "min", "max", "F.mse_loss", "range", "range", "relations.transpose", "data.size", "rel_rec.size", "relations[].view", "range", "range", "range", "relations.transpose", "data.size", "rel_rec.size", "relations[].view", "range", "decoder.detach", "data.size", "len", "data.size", "len", "range", "range"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_enc.train", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines"], ["def", "train", "(", "epoch", ",", "best_val_loss", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "nll_train", "=", "[", "]", "\n", "nll_var_train", "=", "[", "]", "\n", "mse_train", "=", "[", "]", "\n", "\n", "decoder", ".", "train", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "not", "args", ".", "plot", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "train_loader", ")", ":", "# relations are the ground truth interactions graphs", "\n", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "full_graph", ":", "\n", "                ", "zeros", "=", "torch", ".", "zeros", "(", "[", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", "]", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "[", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", "]", ")", "\n", "if", "args", ".", "NRI", ":", "\n", "                    ", "stack", "=", "[", "ones", "]", "+", "[", "zeros", "for", "_", "in", "range", "(", "edge_types", "-", "1", ")", "]", "\n", "rel_type_onehot", "=", "torch", ".", "stack", "(", "stack", ",", "-", "1", ")", "\n", "", "elif", "args", ".", "sigmoid", ":", "\n", "                    ", "stack", "=", "[", "ones", "for", "_", "in", "range", "(", "args", ".", "num_factors", ")", "]", "\n", "rel_type_onehot", "=", "torch", ".", "stack", "(", "stack", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "stack", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ":", "\n", "                        ", "stack", "+=", "[", "ones", "]", "+", "[", "zeros", "for", "_", "in", "range", "(", "args", ".", "edge_types_list", "[", "i", "]", "-", "1", ")", "]", "\n", "", "rel_type_onehot", "=", "torch", ".", "stack", "(", "stack", ",", "-", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "args", ".", "NRI", ":", "\n", "                    ", "rel_type_onehot", "=", "torch", ".", "FloatTensor", "(", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", ",", "edge_types", ")", "\n", "rel_type_onehot", ".", "zero_", "(", ")", "\n", "rel_type_onehot", ".", "scatter_", "(", "2", ",", "relations", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "", "elif", "args", ".", "sigmoid", ":", "\n", "                    ", "rel_type_onehot", "=", "relations", ".", "transpose", "(", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "", "else", ":", "\n", "                    ", "rel_type_onehot", "=", "[", "torch", ".", "FloatTensor", "(", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", ",", "types", ")", "for", "types", "in", "args", ".", "edge_types_list", "]", "\n", "rel_type_onehot", "=", "[", "rel", ".", "zero_", "(", ")", "for", "rel", "in", "rel_type_onehot", "]", "\n", "rel_type_onehot", "=", "[", "rel_type_onehot", "[", "i", "]", ".", "scatter_", "(", "2", ",", "relations", "[", ":", ",", "i", ",", ":", "]", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ")", ",", "1", ")", "for", "i", "in", "range", "(", "len", "(", "rel_type_onehot", ")", ")", "]", "\n", "rel_type_onehot", "=", "torch", ".", "cat", "(", "rel_type_onehot", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "if", "args", ".", "dont_split_data", ":", "\n", "                ", "data_decoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", "\n", "", "elif", "args", ".", "split_enc_only", ":", "\n", "                ", "data_decoder", "=", "data", "\n", "", "else", ":", "\n", "                ", "assert", "(", "data", ".", "size", "(", "2", ")", "-", "args", ".", "timesteps", ")", ">=", "args", ".", "timesteps", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", "-", "args", ".", "timesteps", ":", ",", ":", "]", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "                ", "data_decoder", ",", "rel_type_onehot", "=", "data_decoder", ".", "cuda", "(", ")", ",", "rel_type_onehot", ".", "cuda", "(", ")", "\n", "", "data_decoder", "=", "data_decoder", ".", "contiguous", "(", ")", "\n", "\n", "data_decoder", ",", "rel_type_onehot", "=", "Variable", "(", "data_decoder", ")", ",", "Variable", "(", "rel_type_onehot", ")", "\n", "\n", "target", "=", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "# dimensions are [batch, particle, time, state]", "\n", "output", "=", "decoder", "(", "data_decoder", ",", "rel_type_onehot", ",", "rel_rec", ",", "rel_send", ",", "args", ".", "prediction_steps", ")", "\n", "\n", "loss_nll", "=", "nll_gaussian", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_var", "=", "nll_gaussian_var", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "\n", "loss_nll", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "mse_train", ".", "append", "(", "F", ".", "mse_loss", "(", "output", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_train", ".", "append", "(", "loss_nll", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_var_train", ".", "append", "(", "loss_nll_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "\n", "", "", "nll_val", "=", "[", "]", "\n", "nll_var_val", "=", "[", "]", "\n", "mse_val", "=", "[", "]", "\n", "\n", "nll_M_val", "=", "[", "]", "\n", "nll_M_var_val", "=", "[", "]", "\n", "\n", "decoder", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "if", "args", ".", "full_graph", ":", "\n", "                ", "zeros", "=", "torch", ".", "zeros", "(", "[", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", "]", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "[", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", "]", ")", "\n", "if", "args", ".", "NRI", ":", "\n", "                    ", "stack", "=", "[", "ones", "]", "+", "[", "zeros", "for", "_", "in", "range", "(", "edge_types", "-", "1", ")", "]", "\n", "rel_type_onehot", "=", "torch", ".", "stack", "(", "stack", ",", "-", "1", ")", "\n", "", "elif", "args", ".", "sigmoid", ":", "\n", "                    ", "stack", "=", "[", "ones", "for", "_", "in", "range", "(", "args", ".", "num_factors", ")", "]", "\n", "rel_type_onehot", "=", "torch", ".", "stack", "(", "stack", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "stack", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ":", "\n", "                        ", "stack", "+=", "[", "ones", "]", "+", "[", "zeros", "for", "_", "in", "range", "(", "args", ".", "edge_types_list", "[", "i", "]", "-", "1", ")", "]", "\n", "", "rel_type_onehot", "=", "torch", ".", "stack", "(", "stack", ",", "-", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "args", ".", "NRI", ":", "\n", "                    ", "rel_type_onehot", "=", "torch", ".", "FloatTensor", "(", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", ",", "edge_types", ")", "\n", "rel_type_onehot", ".", "zero_", "(", ")", "\n", "rel_type_onehot", ".", "scatter_", "(", "2", ",", "relations", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "", "elif", "args", ".", "sigmoid", ":", "\n", "                    ", "rel_type_onehot", "=", "relations", ".", "transpose", "(", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "", "else", ":", "\n", "                    ", "rel_type_onehot", "=", "[", "torch", ".", "FloatTensor", "(", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", ",", "types", ")", "for", "types", "in", "args", ".", "edge_types_list", "]", "\n", "rel_type_onehot", "=", "[", "rel", ".", "zero_", "(", ")", "for", "rel", "in", "rel_type_onehot", "]", "\n", "rel_type_onehot", "=", "[", "rel_type_onehot", "[", "i", "]", ".", "scatter_", "(", "2", ",", "relations", "[", ":", ",", "i", ",", ":", "]", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ")", ",", "1", ")", "for", "i", "in", "range", "(", "len", "(", "rel_type_onehot", ")", ")", "]", "\n", "rel_type_onehot", "=", "torch", ".", "cat", "(", "rel_type_onehot", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "if", "args", ".", "dont_split_data", ":", "\n", "                ", "data_decoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", "\n", "", "elif", "args", ".", "split_enc_only", ":", "\n", "                ", "data_decoder", "=", "data", "\n", "", "else", ":", "\n", "                ", "assert", "(", "data", ".", "size", "(", "2", ")", "-", "args", ".", "timesteps", ")", ">=", "args", ".", "timesteps", "\n", "data_decoder", "=", "data", "[", ":", ",", ":", ",", "-", "args", ".", "timesteps", ":", ",", ":", "]", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "                ", "data_decoder", ",", "rel_type_onehot", "=", "data_decoder", ".", "cuda", "(", ")", ",", "rel_type_onehot", ".", "cuda", "(", ")", "\n", "", "data_decoder", "=", "data_decoder", ".", "contiguous", "(", ")", "\n", "\n", "data_decoder", ",", "rel_type_onehot", "=", "Variable", "(", "data_decoder", ")", ",", "Variable", "(", "rel_type_onehot", ")", "\n", "\n", "target", "=", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "# dimensions are [batch, particle, time, state]", "\n", "output", "=", "decoder", "(", "data_decoder", ",", "rel_type_onehot", ",", "rel_rec", ",", "rel_send", ",", "1", ")", "\n", "\n", "if", "args", ".", "plot", ":", "\n", "                ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "output_plot", "=", "decoder", "(", "data_decoder", ",", "rel_type_onehot", ",", "rel_rec", ",", "rel_send", ",", "49", ")", "\n", "\n", "from", "trajectory_plot", "import", "draw_lines", "\n", "for", "i", "in", "range", "(", "args", ".", "batch_size", ")", ":", "\n", "                    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "7", ")", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "xmin_t", ",", "ymin_t", ",", "xmax_t", ",", "ymax_t", "=", "draw_lines", "(", "target", ",", "i", ",", "linestyle", "=", "':'", ",", "alpha", "=", "0.6", ")", "\n", "xmin_o", ",", "ymin_o", ",", "xmax_o", ",", "ymax_o", "=", "draw_lines", "(", "output_plot", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "linestyle", "=", "'-'", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "[", "min", "(", "xmin_t", ",", "xmin_o", ")", ",", "max", "(", "xmax_t", ",", "xmax_o", ")", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "min", "(", "ymin_t", ",", "ymin_o", ")", ",", "max", "(", "ymax_t", ",", "ymax_o", ")", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "", "", "loss_nll", "=", "nll_gaussian", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_var", "=", "nll_gaussian_var", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "output_M", "=", "decoder", "(", "data_decoder", ",", "rel_type_onehot", ",", "rel_rec", ",", "rel_send", ",", "args", ".", "prediction_steps", ")", "\n", "loss_nll_M", "=", "nll_gaussian", "(", "output_M", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_M_var", "=", "nll_gaussian_var", "(", "output_M", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "mse_val", ".", "append", "(", "F", ".", "mse_loss", "(", "output_M", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_val", ".", "append", "(", "loss_nll", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_var_val", ".", "append", "(", "loss_nll_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "nll_M_val", ".", "append", "(", "loss_nll_M", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_M_var_val", ".", "append", "(", "loss_nll_M_var", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "\n", "", "", "print", "(", "'Epoch: {:03d}'", ".", "format", "(", "epoch", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "'nll_trn: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_train", ")", ")", ",", "\n", "'mse_trn: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_train", ")", ")", ",", "\n", "'nll_val: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_val", ")", ")", ",", "\n", "'mse_val: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_val", ")", ")", "\n", ")", "\n", "\n", "print", "(", "'Epoch: {:03d}'", ".", "format", "(", "epoch", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "'nll_trn: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_train", ")", ")", ",", "\n", "'mse_trn: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_train", ")", ")", ",", "\n", "'nll_val: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_val", ")", ")", ",", "\n", "'mse_val: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_val", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "labels", "=", "[", "'epoch'", ",", "'nll trn'", ",", "'mse train'", ",", "'nll var trn'", "]", "\n", "labels", "+=", "[", "'nll val'", ",", "'nll M val'", ",", "'mse val'", ",", "'nll var val'", ",", "'nll M var val'", "]", "\n", "csv_writer", ".", "writerow", "(", "labels", ")", "\n", "\n", "", "csv_writer", ".", "writerow", "(", "[", "epoch", ",", "np", ".", "mean", "(", "nll_train", ")", ",", "np", ".", "mean", "(", "mse_train", ")", ",", "np", ".", "mean", "(", "nll_var_train", ")", "]", "+", "\n", "[", "np", ".", "mean", "(", "nll_val", ")", ",", "np", ".", "mean", "(", "nll_M_val", ")", ",", "np", ".", "mean", "(", "mse_val", ")", "]", "+", "\n", "[", "np", ".", "mean", "(", "nll_var_val", ")", ",", "np", ".", "mean", "(", "nll_M_var_val", ")", "]", "\n", ")", "\n", "\n", "log", ".", "flush", "(", ")", "\n", "if", "args", ".", "save_folder", "and", "np", ".", "mean", "(", "nll_M_val", ")", "<", "best_val_loss", ":", "\n", "        ", "torch", ".", "save", "(", "decoder", ".", "state_dict", "(", ")", ",", "decoder_file", ")", "\n", "print", "(", "'Best model so far, saving...'", ")", "\n", "", "return", "np", ".", "mean", "(", "nll_M_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_dec.test": [[413, 534], ["time.time", "decoder.eval", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "log.flush", "decoder.load_state_dict", "decoder.load_state_dict", "torch.load", "torch.load", "torch.no_grad", "data_decoder.contiguous.contiguous", "decoder", "utils.nll_gaussian", "utils.nll_gaussian_var", "decoder", "utils.nll_gaussian", "decoder", "decoder", "mse_1_test.append", "mse_10_test.append", "mse_20_test.append", "F.mse_loss", "mse_static.append", "nll_test.append", "nll_var_test.append", "nll_M_test.append", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "torch.zeros", "torch.ones", "Variable", "Variable", "decoder", "range", "F.mse_loss().data.item", "F.mse_loss().data.item", "F.mse_loss().data.item", "F.mse_loss.data.item", "utils.nll_gaussian.data.item", "utils.nll_gaussian_var.data.item", "utils.nll_gaussian.data.item", "time.time", "time.time", "torch.stack", "torch.FloatTensor", "torch.cat.zero_", "torch.cat.scatter_", "data_decoder.contiguous.cuda", "torch.cat.cuda", "plt.figure", "plt.figure.add_axes", "draw_lines", "draw_lines", "fig.add_axes.set_xlim", "fig.add_axes.set_ylim", "fig.add_axes.set_xticks", "fig.add_axes.set_yticks", "plt.show", "data.size", "rel_rec.size", "data.size", "rel_rec.size", "torch.stack", "range", "torch.stack", "data.size", "rel_rec.size", "relations.view", "relations.transpose().type", "torch.cat", "decoder.detach().numpy", "len", "data.size", "torch.FloatTensor", "rel.zero_", "rel_type_onehot[].scatter_", "min", "max", "min", "max", "F.mse_loss", "F.mse_loss", "F.mse_loss", "range", "range", "relations.transpose", "data.size", "rel_rec.size", "relations[].view", "range", "decoder.detach", "data.size", "len", "range"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines"], ["", "def", "test", "(", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "nll_test", "=", "[", "]", "\n", "nll_var_test", "=", "[", "]", "\n", "mse_1_test", "=", "[", "]", "\n", "mse_10_test", "=", "[", "]", "\n", "mse_20_test", "=", "[", "]", "\n", "mse_static", "=", "[", "]", "\n", "\n", "nll_M_test", "=", "[", "]", "\n", "nll_M_var_test", "=", "[", "]", "\n", "\n", "decoder", ".", "eval", "(", ")", "\n", "if", "not", "args", ".", "cuda", ":", "\n", "        ", "decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "decoder_file", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "        ", "decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "decoder_file", ")", ")", "\n", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "if", "args", ".", "full_graph", ":", "\n", "                ", "zeros", "=", "torch", ".", "zeros", "(", "[", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", "]", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "[", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", "]", ")", "\n", "if", "args", ".", "NRI", ":", "\n", "                    ", "stack", "=", "[", "ones", "]", "+", "[", "zeros", "for", "_", "in", "range", "(", "edge_types", "-", "1", ")", "]", "\n", "rel_type_onehot", "=", "torch", ".", "stack", "(", "stack", ",", "-", "1", ")", "\n", "", "elif", "args", ".", "sigmoid", ":", "\n", "                    ", "stack", "=", "[", "ones", "for", "_", "in", "range", "(", "args", ".", "num_factors", ")", "]", "\n", "rel_type_onehot", "=", "torch", ".", "stack", "(", "stack", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "stack", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ":", "\n", "                        ", "stack", "+=", "[", "ones", "]", "+", "[", "zeros", "for", "_", "in", "range", "(", "args", ".", "edge_types_list", "[", "i", "]", "-", "1", ")", "]", "\n", "", "rel_type_onehot", "=", "torch", ".", "stack", "(", "stack", ",", "-", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "args", ".", "NRI", ":", "\n", "                    ", "rel_type_onehot", "=", "torch", ".", "FloatTensor", "(", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", ",", "edge_types", ")", "\n", "rel_type_onehot", ".", "zero_", "(", ")", "\n", "rel_type_onehot", ".", "scatter_", "(", "2", ",", "relations", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "", "elif", "args", ".", "sigmoid", ":", "\n", "                    ", "rel_type_onehot", "=", "relations", ".", "transpose", "(", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "", "else", ":", "\n", "                    ", "rel_type_onehot", "=", "[", "torch", ".", "FloatTensor", "(", "data", ".", "size", "(", "0", ")", ",", "rel_rec", ".", "size", "(", "0", ")", ",", "types", ")", "for", "types", "in", "args", ".", "edge_types_list", "]", "\n", "rel_type_onehot", "=", "[", "rel", ".", "zero_", "(", ")", "for", "rel", "in", "rel_type_onehot", "]", "\n", "rel_type_onehot", "=", "[", "rel_type_onehot", "[", "i", "]", ".", "scatter_", "(", "2", ",", "relations", "[", ":", ",", "i", ",", ":", "]", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ")", ",", "1", ")", "for", "i", "in", "range", "(", "len", "(", "rel_type_onehot", ")", ")", "]", "\n", "rel_type_onehot", "=", "torch", ".", "cat", "(", "rel_type_onehot", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "data_decoder", "=", "data", "[", ":", ",", ":", ",", "-", "args", ".", "timesteps", ":", ",", ":", "]", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "                ", "data_decoder", ",", "rel_type_onehot", "=", "data_decoder", ".", "cuda", "(", ")", ",", "rel_type_onehot", ".", "cuda", "(", ")", "\n", "", "data_decoder", "=", "data_decoder", ".", "contiguous", "(", ")", "\n", "\n", "data_decoder", ",", "rel_type_onehot", "=", "Variable", "(", "data_decoder", ")", ",", "Variable", "(", "rel_type_onehot", ")", "\n", "\n", "target", "=", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "# dimensions are [batch, particle, time, state]", "\n", "output", "=", "decoder", "(", "data_decoder", ",", "rel_type_onehot", ",", "rel_rec", ",", "rel_send", ",", "1", ")", "\n", "\n", "\n", "if", "args", ".", "plot", ":", "\n", "                ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "output_plot", "=", "decoder", "(", "data_decoder", ",", "rel_type_onehot", ",", "rel_rec", ",", "rel_send", ",", "49", ")", "\n", "from", "trajectory_plot", "import", "draw_lines", "\n", "for", "i", "in", "range", "(", "args", ".", "batch_size", ")", ":", "\n", "                    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "7", ")", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "xmin_t", ",", "ymin_t", ",", "xmax_t", ",", "ymax_t", "=", "draw_lines", "(", "target", ",", "i", ",", "linestyle", "=", "':'", ",", "alpha", "=", "0.6", ")", "\n", "xmin_o", ",", "ymin_o", ",", "xmax_o", ",", "ymax_o", "=", "draw_lines", "(", "output_plot", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "linestyle", "=", "'-'", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "[", "min", "(", "xmin_t", ",", "xmin_o", ")", ",", "max", "(", "xmax_t", ",", "xmax_o", ")", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "min", "(", "ymin_t", ",", "ymin_o", ")", ",", "max", "(", "ymax_t", ",", "ymax_o", ")", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "#plt.savefig(os.path.join(args.load_folder,str(i)+'_pred_and_true_.png'), dpi=300)", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "", "", "loss_nll", "=", "nll_gaussian", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "loss_nll_var", "=", "nll_gaussian_var", "(", "output", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "output_M", "=", "decoder", "(", "data_decoder", ",", "rel_type_onehot", ",", "rel_rec", ",", "rel_send", ",", "args", ".", "prediction_steps", ")", "\n", "loss_nll_M", "=", "nll_gaussian", "(", "output_M", ",", "target", ",", "args", ".", "var", ")", "\n", "\n", "output_10", "=", "decoder", "(", "data_decoder", ",", "rel_type_onehot", ",", "rel_rec", ",", "rel_send", ",", "10", ")", "\n", "output_20", "=", "decoder", "(", "data_decoder", ",", "rel_type_onehot", ",", "rel_rec", ",", "rel_send", ",", "20", ")", "\n", "mse_1_test", ".", "append", "(", "F", ".", "mse_loss", "(", "output", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "mse_10_test", ".", "append", "(", "F", ".", "mse_loss", "(", "output_10", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "mse_20_test", ".", "append", "(", "F", ".", "mse_loss", "(", "output_20", ",", "target", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "static", "=", "F", ".", "mse_loss", "(", "data_decoder", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ",", "data_decoder", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", "\n", "mse_static", ".", "append", "(", "static", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "nll_test", ".", "append", "(", "loss_nll", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_var_test", ".", "append", "(", "loss_nll_var", ".", "data", ".", "item", "(", ")", ")", "\n", "nll_M_test", ".", "append", "(", "loss_nll_M", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "\n", "", "", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'------------Testing-------------'", ")", "\n", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'nll_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_test", ")", ")", ",", "\n", "'nll_M_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_test", ")", ")", ",", "\n", "'mse_1_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_1_test", ")", ")", ",", "\n", "'mse_10_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_10_test", ")", ")", ",", "\n", "'mse_20_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_20_test", ")", ")", ",", "\n", "'mse_static: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_static", ")", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "print", "(", "'--------------------------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'------------Testing-------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'--------------------------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'nll_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_test", ")", ")", ",", "\n", "'nll_M_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "nll_M_test", ")", ")", ",", "\n", "'mse_1_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_1_test", ")", ")", ",", "\n", "'mse_10_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_10_test", ")", ")", ",", "\n", "'mse_20_test: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_20_test", ")", ")", ",", "\n", "'mse_static: {:.10f}'", ".", "format", "(", "np", ".", "mean", "(", "mse_static", ")", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "file", "=", "log", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax": [[18, 22], ["input.transpose().contiguous", "torch.softmax", "F.softmax.transpose", "input.transpose"], "function", ["None"], ["def", "my_softmax", "(", "input", ",", "axis", "=", "1", ")", ":", "\n", "    ", "trans_input", "=", "input", ".", "transpose", "(", "axis", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "soft_max_1d", "=", "F", ".", "softmax", "(", "trans_input", ",", "dim", "=", "0", ")", "# added dim=0 as implicit choice is deprecated, dim 0 is edgetype due to transpose", "\n", "return", "soft_max_1d", ".", "transpose", "(", "axis", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.binary_concrete": [[24, 32], ["utils.binary_concrete_sample", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.binary_concrete_sample"], ["", "def", "binary_concrete", "(", "logits", ",", "tau", "=", "1", ",", "hard", "=", "False", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "y_soft", "=", "binary_concrete_sample", "(", "logits", ",", "tau", "=", "tau", ",", "eps", "=", "eps", ")", "\n", "if", "hard", ":", "\n", "        ", "y_hard", "=", "(", "y_soft", ">", "0.5", ")", ".", "float", "(", ")", "\n", "y", "=", "Variable", "(", "y_hard", ".", "data", "-", "y_soft", ".", "data", ")", "+", "y_soft", "\n", "", "else", ":", "\n", "        ", "y", "=", "y_soft", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.binary_concrete_sample": [[34, 40], ["utils.sample_logistic", "torch.sigmoid", "logits.size", "logistic_noise.cuda.cuda", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.sample_logistic"], ["", "def", "binary_concrete_sample", "(", "logits", ",", "tau", "=", "1", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "logistic_noise", "=", "sample_logistic", "(", "logits", ".", "size", "(", ")", ",", "eps", "=", "eps", ")", "\n", "if", "logits", ".", "is_cuda", ":", "\n", "        ", "logistic_noise", "=", "logistic_noise", ".", "cuda", "(", ")", "\n", "", "y", "=", "logits", "+", "Variable", "(", "logistic_noise", ")", "\n", "return", "F", ".", "sigmoid", "(", "y", "/", "tau", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.sample_logistic": [[42, 45], ["torch.rand().float", "torch.rand().float", "torch.log", "torch.log", "torch.log", "torch.log", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "sample_logistic", "(", "shape", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "uniform", "=", "torch", ".", "rand", "(", "shape", ")", ".", "float", "(", ")", "\n", "return", "torch", ".", "log", "(", "uniform", "+", "eps", ")", "-", "torch", ".", "log", "(", "1", "-", "uniform", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.sample_gumbel": [[47, 59], ["torch.rand().float", "torch.rand().float", "torch.log", "torch.log", "torch.rand", "torch.rand", "torch.log", "torch.log"], "function", ["None"], ["", "def", "sample_gumbel", "(", "shape", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"\n    NOTE: Stolen from https://github.com/pytorch/pytorch/pull/3341/commits/327fcfed4c44c62b208f750058d14d4dc1b9a9d3\n\n    Sample from Gumbel(0, 1)\n\n    based on\n    https://github.com/ericjang/gumbel-softmax/blob/3c8584924603869e90ca74ac20a6a03d99a91ef9/Categorical%20VAE.ipynb ,\n    (MIT license)\n    \"\"\"", "\n", "U", "=", "torch", ".", "rand", "(", "shape", ")", ".", "float", "(", ")", "\n", "return", "-", "torch", ".", "log", "(", "eps", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.gumbel_softmax_sample": [[61, 76], ["utils.sample_gumbel", "utils.my_softmax", "logits.size", "gumbel_noise.cuda.cuda", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.sample_gumbel", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax"], ["", "def", "gumbel_softmax_sample", "(", "logits", ",", "tau", "=", "1", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"\n    NOTE: Stolen from https://github.com/pytorch/pytorch/pull/3341/commits/327fcfed4c44c62b208f750058d14d4dc1b9a9d3\n\n    Draw a sample from the Gumbel-Softmax distribution\n\n    based on\n    https://github.com/ericjang/gumbel-softmax/blob/3c8584924603869e90ca74ac20a6a03d99a91ef9/Categorical%20VAE.ipynb\n    (MIT license)\n    \"\"\"", "\n", "gumbel_noise", "=", "sample_gumbel", "(", "logits", ".", "size", "(", ")", ",", "eps", "=", "eps", ")", "\n", "if", "logits", ".", "is_cuda", ":", "\n", "        ", "gumbel_noise", "=", "gumbel_noise", ".", "cuda", "(", ")", "\n", "", "y", "=", "logits", "+", "Variable", "(", "gumbel_noise", ")", "\n", "return", "my_softmax", "(", "y", "/", "tau", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.gumbel_softmax": [[78, 118], ["utils.gumbel_softmax_sample", "logits.size", "gumbel_softmax_sample.data.max", "torch.zeros", "torch.zeros", "y_hard.cuda.zero_().scatter_", "y_hard.cuda.cuda", "k.view", "torch.autograd.Variable", "y_hard.cuda.zero_"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.gumbel_softmax_sample"], ["", "def", "gumbel_softmax", "(", "logits", ",", "tau", "=", "1", ",", "hard", "=", "False", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"\n    NOTE: Stolen from https://github.com/pytorch/pytorch/pull/3341/commits/327fcfed4c44c62b208f750058d14d4dc1b9a9d3\n\n    Sample from the Gumbel-Softmax distribution and optionally discretize.\n    Args:\n      logits: [batch_size, n_class] unnormalized log-probs\n      tau: non-negative scalar temperature\n      hard: if True, take argmax, but differentiate w.r.t. soft sample y\n    Returns:\n      [batch_size, n_class] sample from the Gumbel-Softmax distribution.\n      If hard=True, then the returned sample will be one-hot, otherwise it will\n      be a probability distribution that sums to 1 across classes\n\n    Constraints:\n    - this implementation only works on batch_size x num_features tensor for now\n\n    based on\n    https://github.com/ericjang/gumbel-softmax/blob/3c8584924603869e90ca74ac20a6a03d99a91ef9/Categorical%20VAE.ipynb ,\n    (MIT license)\n    \"\"\"", "\n", "y_soft", "=", "gumbel_softmax_sample", "(", "logits", ",", "tau", "=", "tau", ",", "eps", "=", "eps", ")", "\n", "if", "hard", ":", "\n", "        ", "shape", "=", "logits", ".", "size", "(", ")", "\n", "_", ",", "k", "=", "y_soft", ".", "data", ".", "max", "(", "-", "1", ")", "\n", "# this bit is based on", "\n", "# https://discuss.pytorch.org/t/stop-gradients-for-st-gumbel-softmax/530/5", "\n", "y_hard", "=", "torch", ".", "zeros", "(", "*", "shape", ")", "\n", "if", "y_soft", ".", "is_cuda", ":", "\n", "            ", "y_hard", "=", "y_hard", ".", "cuda", "(", ")", "\n", "", "y_hard", "=", "y_hard", ".", "zero_", "(", ")", ".", "scatter_", "(", "-", "1", ",", "k", ".", "view", "(", "shape", "[", ":", "-", "1", "]", "+", "(", "1", ",", ")", ")", ",", "1.0", ")", "\n", "# this cool bit of code achieves two things:", "\n", "# - makes the output value exactly one-hot (since we add then", "\n", "#   subtract y_soft value)", "\n", "# - makes the gradient equal to y_soft gradient (since we strip", "\n", "#   all other gradients)", "\n", "y", "=", "Variable", "(", "y_hard", "-", "y_soft", ".", "data", ")", "+", "y_soft", "\n", "", "else", ":", "\n", "        ", "y", "=", "y_soft", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_sigmoid": [[119, 137], ["torch.round", "torch.round", "torch.exp", "torch.exp", "edges_hard.cuda.cuda", "torch.autograd.Variable"], "function", ["None"], ["", "def", "my_sigmoid", "(", "logits", ",", "hard", "=", "True", ",", "sharpness", "=", "1.0", ")", ":", "\n", "\n", "    ", "edges_soft", "=", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "sharpness", "*", "logits", ")", ")", "\n", "if", "hard", ":", "\n", "        ", "edges_hard", "=", "torch", ".", "round", "(", "edges_soft", ")", "\n", "# this bit is based on", "\n", "# https://discuss.pytorch.org/t/stop-gradients-for-st-gumbel-softmax/530/5", "\n", "if", "edges_soft", ".", "is_cuda", ":", "\n", "            ", "edges_hard", "=", "edges_hard", ".", "cuda", "(", ")", "\n", "# this cool bit of code achieves two things:", "\n", "# - makes the output value exactly one-hot (since we add then", "\n", "#   subtract y_soft value)", "\n", "# - makes the gradient equal to y_soft gradient (since we strip", "\n", "#   all other gradients)", "\n", "", "edges", "=", "Variable", "(", "edges_hard", "-", "edges_soft", ".", "data", ")", "+", "edges_soft", "\n", "", "else", ":", "\n", "        ", "edges", "=", "edges_soft", "\n", "", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.binary_accuracy": [[138, 143], ["preds.type_as().eq().double", "correct.sum.sum", "len", "preds.type_as().eq", "preds.type_as"], "function", ["None"], ["", "def", "binary_accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ">", "0.5", "\n", "correct", "=", "preds", ".", "type_as", "(", "labels", ")", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_type_encode": [[144, 150], ["numpy.unique", "numpy.zeros", "range", "numpy.where"], "function", ["None"], ["", "def", "edge_type_encode", "(", "edges", ")", ":", "# this is used to gives each 'interaction strength' a unique integer = 0, 1, 2 ..", "\n", "    ", "unique", "=", "np", ".", "unique", "(", "edges", ")", "\n", "encode", "=", "np", ".", "zeros", "(", "edges", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "unique", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "encode", "+=", "np", ".", "where", "(", "edges", "==", "unique", "[", "i", "]", ",", "i", ",", "0", ")", "\n", "", "return", "encode", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_edges_encode": [[151, 159], ["numpy.reshape", "numpy.array", "numpy.ravel_multi_index", "utils.edge_type_encode", "numpy.where", "numpy.ones", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_type_encode"], ["", "def", "loader_edges_encode", "(", "edges", ",", "num_atoms", ")", ":", "\n", "    ", "edges", "=", "np", ".", "reshape", "(", "edges", ",", "[", "edges", ".", "shape", "[", "0", "]", ",", "edges", ".", "shape", "[", "1", "]", ",", "num_atoms", "**", "2", "]", ")", "\n", "edges", "=", "np", ".", "array", "(", "edge_type_encode", "(", "edges", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "off_diag_idx", "=", "np", ".", "ravel_multi_index", "(", "\n", "np", ".", "where", "(", "np", ".", "ones", "(", "(", "num_atoms", ",", "num_atoms", ")", ")", "-", "np", ".", "eye", "(", "num_atoms", ")", ")", ",", "\n", "[", "num_atoms", ",", "num_atoms", "]", ")", "\n", "edges", "=", "edges", "[", ":", ",", ":", ",", "off_diag_idx", "]", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_combine_edges": [[160, 169], ["numpy.zeros", "reversed", "np.zeros.astype", "range", "int", "range", "sorted", "numpy.max"], "function", ["None"], ["", "def", "loader_combine_edges", "(", "edges", ")", ":", "\n", "    ", "edge_types_list", "=", "[", "int", "(", "np", ".", "max", "(", "edges", "[", ":", ",", "i", ",", ":", "]", ")", ")", "+", "1", "for", "i", "in", "range", "(", "edges", ".", "shape", "[", "1", "]", ")", "]", "\n", "assert", "(", "edge_types_list", "==", "sorted", "(", "edge_types_list", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "encoded_target", "=", "np", ".", "zeros", "(", "edges", "[", ":", ",", "0", ",", ":", "]", ".", "shape", ")", "\n", "base", "=", "1", "\n", "for", "i", "in", "reversed", "(", "range", "(", "edges", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "encoded_target", "+=", "base", "*", "edges", "[", ":", ",", "i", ",", ":", "]", "\n", "base", "*=", "edge_types_list", "[", "i", "]", "\n", "", "return", "encoded_target", ".", "astype", "(", "'int'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.load_data_NRI": [[170, 239], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "np.transpose.max", "np.transpose.min", "np.transpose.max", "np.transpose.min", "numpy.transpose", "numpy.transpose", "numpy.concatenate", "numpy.transpose", "numpy.transpose", "numpy.concatenate", "numpy.transpose", "numpy.transpose", "numpy.concatenate", "utils.loader_edges_encode", "utils.loader_edges_encode", "utils.loader_edges_encode", "utils.loader_combine_edges", "utils.loader_combine_edges", "utils.loader_combine_edges", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.utils.data.dataset.TensorDataset", "torch.utils.data.dataset.TensorDataset", "torch.utils.data.dataset.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_edges_encode", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_edges_encode", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_edges_encode", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_combine_edges", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_combine_edges", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_combine_edges"], ["", "def", "load_data_NRI", "(", "batch_size", "=", "1", ",", "sim_folder", "=", "''", ",", "shuffle", "=", "True", ",", "data_folder", "=", "'data'", ")", ":", "\n", "# the edges numpy arrays below are [ num_sims, N, N ]", "\n", "    ", "loc_train", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'loc_train.npy'", ")", ")", "\n", "vel_train", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'vel_train.npy'", ")", ")", "\n", "edges_train", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'edges_train.npy'", ")", ")", "\n", "\n", "loc_valid", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'loc_valid.npy'", ")", ")", "\n", "vel_valid", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'vel_valid.npy'", ")", ")", "\n", "edges_valid", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'edges_valid.npy'", ")", ")", "\n", "\n", "loc_test", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'loc_test.npy'", ")", ")", "\n", "vel_test", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'vel_test.npy'", ")", ")", "\n", "edges_test", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'edges_test.npy'", ")", ")", "\n", "\n", "# [num_samples, num_timesteps, num_dims, num_atoms]", "\n", "num_atoms", "=", "loc_train", ".", "shape", "[", "3", "]", "\n", "\n", "loc_max", "=", "loc_train", ".", "max", "(", ")", "\n", "loc_min", "=", "loc_train", ".", "min", "(", ")", "\n", "vel_max", "=", "vel_train", ".", "max", "(", ")", "\n", "vel_min", "=", "vel_train", ".", "min", "(", ")", "\n", "\n", "# Normalize to [-1, 1]", "\n", "loc_train", "=", "(", "loc_train", "-", "loc_min", ")", "*", "2", "/", "(", "loc_max", "-", "loc_min", ")", "-", "1", "\n", "vel_train", "=", "(", "vel_train", "-", "vel_min", ")", "*", "2", "/", "(", "vel_max", "-", "vel_min", ")", "-", "1", "\n", "\n", "loc_valid", "=", "(", "loc_valid", "-", "loc_min", ")", "*", "2", "/", "(", "loc_max", "-", "loc_min", ")", "-", "1", "\n", "vel_valid", "=", "(", "vel_valid", "-", "vel_min", ")", "*", "2", "/", "(", "vel_max", "-", "vel_min", ")", "-", "1", "\n", "\n", "loc_test", "=", "(", "loc_test", "-", "loc_min", ")", "*", "2", "/", "(", "loc_max", "-", "loc_min", ")", "-", "1", "\n", "vel_test", "=", "(", "vel_test", "-", "vel_min", ")", "*", "2", "/", "(", "vel_max", "-", "vel_min", ")", "-", "1", "\n", "\n", "# Reshape to: [num_sims, num_atoms, num_timesteps, num_dims]", "\n", "loc_train", "=", "np", ".", "transpose", "(", "loc_train", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "vel_train", "=", "np", ".", "transpose", "(", "vel_train", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "feat_train", "=", "np", ".", "concatenate", "(", "[", "loc_train", ",", "vel_train", "]", ",", "axis", "=", "3", ")", "\n", "\n", "loc_valid", "=", "np", ".", "transpose", "(", "loc_valid", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "vel_valid", "=", "np", ".", "transpose", "(", "vel_valid", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "feat_valid", "=", "np", ".", "concatenate", "(", "[", "loc_valid", ",", "vel_valid", "]", ",", "axis", "=", "3", ")", "\n", "\n", "loc_test", "=", "np", ".", "transpose", "(", "loc_test", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "vel_test", "=", "np", ".", "transpose", "(", "vel_test", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "feat_test", "=", "np", ".", "concatenate", "(", "[", "loc_test", ",", "vel_test", "]", ",", "axis", "=", "3", ")", "\n", "\n", "edges_train", "=", "loader_edges_encode", "(", "edges_train", ",", "num_atoms", ")", "\n", "edges_valid", "=", "loader_edges_encode", "(", "edges_valid", ",", "num_atoms", ")", "\n", "edges_test", "=", "loader_edges_encode", "(", "edges_test", ",", "num_atoms", ")", "\n", "\n", "edges_train", "=", "loader_combine_edges", "(", "edges_train", ")", "\n", "edges_valid", "=", "loader_combine_edges", "(", "edges_valid", ")", "\n", "edges_test", "=", "loader_combine_edges", "(", "edges_test", ")", "\n", "\n", "feat_train", "=", "torch", ".", "FloatTensor", "(", "feat_train", ")", "\n", "edges_train", "=", "torch", ".", "LongTensor", "(", "edges_train", ")", "\n", "feat_valid", "=", "torch", ".", "FloatTensor", "(", "feat_valid", ")", "\n", "edges_valid", "=", "torch", ".", "LongTensor", "(", "edges_valid", ")", "\n", "feat_test", "=", "torch", ".", "FloatTensor", "(", "feat_test", ")", "\n", "edges_test", "=", "torch", ".", "LongTensor", "(", "edges_test", ")", "\n", "\n", "train_data", "=", "TensorDataset", "(", "feat_train", ",", "edges_train", ")", "\n", "valid_data", "=", "TensorDataset", "(", "feat_valid", ",", "edges_valid", ")", "\n", "test_data", "=", "TensorDataset", "(", "feat_test", ",", "edges_test", ")", "\n", "\n", "train_data_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ")", "\n", "valid_data_loader", "=", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "batch_size", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "return", "train_data_loader", ",", "valid_data_loader", ",", "test_data_loader", ",", "loc_max", ",", "loc_min", ",", "vel_max", ",", "vel_min", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.load_data_fNRI": [[241, 307], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "np.transpose.max", "np.transpose.min", "np.transpose.max", "np.transpose.min", "numpy.transpose", "numpy.transpose", "numpy.concatenate", "numpy.transpose", "numpy.transpose", "numpy.concatenate", "numpy.transpose", "numpy.transpose", "numpy.concatenate", "utils.loader_edges_encode", "utils.loader_edges_encode", "utils.loader_edges_encode", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.utils.data.dataset.TensorDataset", "torch.utils.data.dataset.TensorDataset", "torch.utils.data.dataset.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_edges_encode", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_edges_encode", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.loader_edges_encode"], ["", "def", "load_data_fNRI", "(", "batch_size", "=", "1", ",", "sim_folder", "=", "''", ",", "shuffle", "=", "True", ",", "data_folder", "=", "'data'", ")", ":", "\n", "# the edges numpy arrays below are [ num_sims, N, N ]", "\n", "    ", "loc_train", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'loc_train.npy'", ")", ")", "\n", "vel_train", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'vel_train.npy'", ")", ")", "\n", "edges_train", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'edges_train.npy'", ")", ")", "\n", "\n", "loc_valid", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'loc_valid.npy'", ")", ")", "\n", "vel_valid", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'vel_valid.npy'", ")", ")", "\n", "edges_valid", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'edges_valid.npy'", ")", ")", "\n", "\n", "loc_test", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'loc_test.npy'", ")", ")", "\n", "vel_test", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'vel_test.npy'", ")", ")", "\n", "edges_test", "=", "np", ".", "load", "(", "path", ".", "join", "(", "data_folder", ",", "sim_folder", ",", "'edges_test.npy'", ")", ")", "\n", "\n", "# [num_samples, num_timesteps, num_dims, num_atoms]", "\n", "num_atoms", "=", "loc_train", ".", "shape", "[", "3", "]", "\n", "\n", "loc_max", "=", "loc_train", ".", "max", "(", ")", "\n", "loc_min", "=", "loc_train", ".", "min", "(", ")", "\n", "vel_max", "=", "vel_train", ".", "max", "(", ")", "\n", "vel_min", "=", "vel_train", ".", "min", "(", ")", "\n", "\n", "# Normalize to [-1, 1]", "\n", "loc_train", "=", "(", "loc_train", "-", "loc_min", ")", "*", "2", "/", "(", "loc_max", "-", "loc_min", ")", "-", "1", "\n", "vel_train", "=", "(", "vel_train", "-", "vel_min", ")", "*", "2", "/", "(", "vel_max", "-", "vel_min", ")", "-", "1", "\n", "\n", "loc_valid", "=", "(", "loc_valid", "-", "loc_min", ")", "*", "2", "/", "(", "loc_max", "-", "loc_min", ")", "-", "1", "\n", "vel_valid", "=", "(", "vel_valid", "-", "vel_min", ")", "*", "2", "/", "(", "vel_max", "-", "vel_min", ")", "-", "1", "\n", "\n", "loc_test", "=", "(", "loc_test", "-", "loc_min", ")", "*", "2", "/", "(", "loc_max", "-", "loc_min", ")", "-", "1", "\n", "vel_test", "=", "(", "vel_test", "-", "vel_min", ")", "*", "2", "/", "(", "vel_max", "-", "vel_min", ")", "-", "1", "\n", "\n", "# Reshape to: [num_sims, num_atoms, num_timesteps, num_dims]", "\n", "loc_train", "=", "np", ".", "transpose", "(", "loc_train", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "vel_train", "=", "np", ".", "transpose", "(", "vel_train", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "feat_train", "=", "np", ".", "concatenate", "(", "[", "loc_train", ",", "vel_train", "]", ",", "axis", "=", "3", ")", "\n", "\n", "loc_valid", "=", "np", ".", "transpose", "(", "loc_valid", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "vel_valid", "=", "np", ".", "transpose", "(", "vel_valid", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "feat_valid", "=", "np", ".", "concatenate", "(", "[", "loc_valid", ",", "vel_valid", "]", ",", "axis", "=", "3", ")", "\n", "\n", "loc_test", "=", "np", ".", "transpose", "(", "loc_test", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "vel_test", "=", "np", ".", "transpose", "(", "vel_test", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "feat_test", "=", "np", ".", "concatenate", "(", "[", "loc_test", ",", "vel_test", "]", ",", "axis", "=", "3", ")", "\n", "\n", "edges_train", "=", "loader_edges_encode", "(", "edges_train", ",", "num_atoms", ")", "\n", "edges_valid", "=", "loader_edges_encode", "(", "edges_valid", ",", "num_atoms", ")", "\n", "edges_test", "=", "loader_edges_encode", "(", "edges_test", ",", "num_atoms", ")", "\n", "\n", "edges_train", "=", "torch", ".", "LongTensor", "(", "edges_train", ")", "\n", "edges_valid", "=", "torch", ".", "LongTensor", "(", "edges_valid", ")", "\n", "edges_test", "=", "torch", ".", "LongTensor", "(", "edges_test", ")", "\n", "\n", "feat_train", "=", "torch", ".", "FloatTensor", "(", "feat_train", ")", "\n", "feat_valid", "=", "torch", ".", "FloatTensor", "(", "feat_valid", ")", "\n", "feat_test", "=", "torch", ".", "FloatTensor", "(", "feat_test", ")", "\n", "\n", "train_data", "=", "TensorDataset", "(", "feat_train", ",", "edges_train", ")", "\n", "valid_data", "=", "TensorDataset", "(", "feat_valid", ",", "edges_valid", ")", "\n", "test_data", "=", "TensorDataset", "(", "feat_test", ",", "edges_test", ")", "\n", "\n", "train_data_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ")", "\n", "valid_data_loader", "=", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "batch_size", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "return", "train_data_loader", ",", "valid_data_loader", ",", "test_data_loader", ",", "loc_max", ",", "loc_min", ",", "vel_max", ",", "vel_min", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.to_2d_idx": [[309, 314], ["numpy.array", "numpy.array", "numpy.floor", "float"], "function", ["None"], ["", "def", "to_2d_idx", "(", "idx", ",", "num_cols", ")", ":", "\n", "    ", "idx", "=", "np", ".", "array", "(", "idx", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "y_idx", "=", "np", ".", "array", "(", "np", ".", "floor", "(", "idx", "/", "float", "(", "num_cols", ")", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "x_idx", "=", "idx", "%", "num_cols", "\n", "return", "x_idx", ",", "y_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.encode_onehot": [[316, 323], ["set", "numpy.array", "list", "numpy.identity", "enumerate", "map", "len"], "function", ["None"], ["", "def", "encode_onehot", "(", "labels", ")", ":", "\n", "    ", "classes", "=", "set", "(", "labels", ")", "\n", "classes_dict", "=", "{", "c", ":", "np", ".", "identity", "(", "len", "(", "classes", ")", ")", "[", "i", ",", ":", "]", "for", "i", ",", "c", "in", "\n", "enumerate", "(", "classes", ")", "}", "\n", "labels_onehot", "=", "np", ".", "array", "(", "list", "(", "map", "(", "classes_dict", ".", "get", ",", "labels", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "labels_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_triu_indices": [[325, 332], ["torch.ones", "torch.ones", "torch.eye", "torch.eye", "torch.ones.triu"], "function", ["None"], ["", "def", "get_triu_indices", "(", "num_nodes", ")", ":", "\n", "    ", "\"\"\"Linear triu (upper triangular) indices.\"\"\"", "\n", "ones", "=", "torch", ".", "ones", "(", "num_nodes", ",", "num_nodes", ")", "\n", "eye", "=", "torch", ".", "eye", "(", "num_nodes", ",", "num_nodes", ")", "\n", "triu_indices", "=", "(", "ones", ".", "triu", "(", ")", "-", "eye", ")", ".", "nonzero", "(", ")", ".", "t", "(", ")", "\n", "triu_indices", "=", "triu_indices", "[", "0", "]", "*", "num_nodes", "+", "triu_indices", "[", "1", "]", "\n", "return", "triu_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_tril_indices": [[334, 341], ["torch.ones", "torch.ones", "torch.eye", "torch.eye", "torch.ones.tril"], "function", ["None"], ["", "def", "get_tril_indices", "(", "num_nodes", ")", ":", "\n", "    ", "\"\"\"Linear tril (lower triangular) indices.\"\"\"", "\n", "ones", "=", "torch", ".", "ones", "(", "num_nodes", ",", "num_nodes", ")", "\n", "eye", "=", "torch", ".", "eye", "(", "num_nodes", ",", "num_nodes", ")", "\n", "tril_indices", "=", "(", "ones", ".", "tril", "(", ")", "-", "eye", ")", ".", "nonzero", "(", ")", ".", "t", "(", ")", "\n", "tril_indices", "=", "tril_indices", "[", "0", "]", "*", "num_nodes", "+", "tril_indices", "[", "1", "]", "\n", "return", "tril_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_offdiag_indices": [[343, 350], ["torch.ones", "torch.ones", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "get_offdiag_indices", "(", "num_nodes", ")", ":", "\n", "    ", "\"\"\"Linear off-diagonal indices.\"\"\"", "\n", "ones", "=", "torch", ".", "ones", "(", "num_nodes", ",", "num_nodes", ")", "\n", "eye", "=", "torch", ".", "eye", "(", "num_nodes", ",", "num_nodes", ")", "\n", "offdiag_indices", "=", "(", "ones", "-", "eye", ")", ".", "nonzero", "(", ")", ".", "t", "(", ")", "\n", "offdiag_indices", "=", "offdiag_indices", "[", "0", "]", "*", "num_nodes", "+", "offdiag_indices", "[", "1", "]", "\n", "return", "offdiag_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_triu_offdiag_indices": [[352, 358], ["torch.zeros", "torch.zeros", "torch.zeros.nonzero", "utils.get_triu_indices", "utils.get_offdiag_indices"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_triu_indices", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_offdiag_indices"], ["", "def", "get_triu_offdiag_indices", "(", "num_nodes", ")", ":", "\n", "    ", "\"\"\"Linear triu (upper) indices w.r.t. vector of off-diagonal elements.\"\"\"", "\n", "triu_idx", "=", "torch", ".", "zeros", "(", "num_nodes", "*", "num_nodes", ")", "\n", "triu_idx", "[", "get_triu_indices", "(", "num_nodes", ")", "]", "=", "1.", "\n", "triu_idx", "=", "triu_idx", "[", "get_offdiag_indices", "(", "num_nodes", ")", "]", "\n", "return", "triu_idx", ".", "nonzero", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_tril_offdiag_indices": [[360, 366], ["torch.zeros", "torch.zeros", "torch.zeros.nonzero", "utils.get_tril_indices", "utils.get_offdiag_indices"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_tril_indices", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_offdiag_indices"], ["", "def", "get_tril_offdiag_indices", "(", "num_nodes", ")", ":", "\n", "    ", "\"\"\"Linear tril (lower) indices w.r.t. vector of off-diagonal elements.\"\"\"", "\n", "tril_idx", "=", "torch", ".", "zeros", "(", "num_nodes", "*", "num_nodes", ")", "\n", "tril_idx", "[", "get_tril_indices", "(", "num_nodes", ")", "]", "=", "1.", "\n", "tril_idx", "=", "tril_idx", "[", "get_offdiag_indices", "(", "num_nodes", ")", "]", "\n", "return", "tril_idx", ".", "nonzero", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_minimum_distance": [[368, 376], ["data[].transpose", "dist.min", "min_dist.view", "min_dist.size", "data_norm.transpose", "torch.matmul", "torch.matmul", "data[].transpose.transpose"], "function", ["None"], ["", "def", "get_minimum_distance", "(", "data", ")", ":", "\n", "    ", "data", "=", "data", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "data_norm", "=", "(", "data", "**", "2", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "dist", "=", "data_norm", "+", "data_norm", ".", "transpose", "(", "2", ",", "3", ")", "-", "2", "*", "torch", ".", "matmul", "(", "data", ",", "data", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "min_dist", ",", "_", "=", "dist", ".", "min", "(", "1", ")", "\n", "return", "min_dist", ".", "view", "(", "min_dist", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_buckets": [[378, 396], ["dist.cpu().data.numpy.cpu().data.numpy", "numpy.min", "numpy.max", "range", "numpy.arange", "bucket_idx.append", "dist.cpu().data.numpy.cpu", "numpy.where", "numpy.where", "numpy.all", "numpy.vstack"], "function", ["None"], ["", "def", "get_buckets", "(", "dist", ",", "num_buckets", ")", ":", "\n", "    ", "dist", "=", "dist", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "min_dist", "=", "np", ".", "min", "(", "dist", ")", "\n", "max_dist", "=", "np", ".", "max", "(", "dist", ")", "\n", "bucket_size", "=", "(", "max_dist", "-", "min_dist", ")", "/", "num_buckets", "\n", "thresholds", "=", "bucket_size", "*", "np", ".", "arange", "(", "num_buckets", ")", "\n", "\n", "bucket_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_buckets", ")", ":", "\n", "        ", "if", "i", "<", "num_buckets", "-", "1", ":", "\n", "            ", "idx", "=", "np", ".", "where", "(", "np", ".", "all", "(", "np", ".", "vstack", "(", "(", "dist", ">", "thresholds", "[", "i", "]", ",", "\n", "dist", "<=", "thresholds", "[", "i", "+", "1", "]", ")", ")", ",", "0", ")", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "where", "(", "dist", ">", "thresholds", "[", "i", "]", ")", "[", "0", "]", "\n", "", "bucket_idx", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "bucket_idx", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_correct_per_bucket": [[398, 410], ["target.cpu().data.numpy.cpu().data.numpy", "range", "pred.cpu().numpy", "len", "numpy.sum", "correct_per_bucket.append", "pred.cpu", "target.cpu().data.numpy.cpu"], "function", ["None"], ["", "def", "get_correct_per_bucket", "(", "bucket_idx", ",", "pred", ",", "target", ")", ":", "\n", "    ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", "]", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "correct_per_bucket", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bucket_idx", ")", ")", ":", "\n", "        ", "preds_bucket", "=", "pred", "[", "bucket_idx", "[", "i", "]", "]", "\n", "target_bucket", "=", "target", "[", "bucket_idx", "[", "i", "]", "]", "\n", "correct_bucket", "=", "np", ".", "sum", "(", "preds_bucket", "==", "target_bucket", ")", "\n", "correct_per_bucket", ".", "append", "(", "correct_bucket", ")", "\n", "\n", "", "return", "correct_per_bucket", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.get_correct_per_bucket_": [[412, 424], ["pred.cpu().numpy.cpu().numpy", "target.cpu().data.numpy.cpu().data.numpy", "range", "len", "numpy.sum", "correct_per_bucket.append", "pred.cpu().numpy.cpu", "target.cpu().data.numpy.cpu"], "function", ["None"], ["", "def", "get_correct_per_bucket_", "(", "bucket_idx", ",", "pred", ",", "target", ")", ":", "\n", "    ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "correct_per_bucket", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bucket_idx", ")", ")", ":", "\n", "        ", "preds_bucket", "=", "pred", "[", "bucket_idx", "[", "i", "]", "]", "\n", "target_bucket", "=", "target", "[", "bucket_idx", "[", "i", "]", "]", "\n", "correct_bucket", "=", "np", ".", "sum", "(", "preds_bucket", "==", "target_bucket", ")", "\n", "correct_per_bucket", ".", "append", "(", "correct_bucket", ")", "\n", "\n", "", "return", "correct_per_bucket", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical": [[426, 429], ["kl_div.sum", "torch.log", "torch.log", "preds.size"], "function", ["None"], ["", "def", "kl_categorical", "(", "preds", ",", "log_prior", ",", "num_atoms", ",", "eps", "=", "1e-16", ")", ":", "\n", "    ", "kl_div", "=", "preds", "*", "(", "torch", ".", "log", "(", "preds", "+", "eps", ")", "-", "log_prior", ")", "\n", "return", "kl_div", ".", "sum", "(", ")", "/", "(", "num_atoms", "*", "preds", ".", "size", "(", "0", ")", ")", "# normalisation here is (batch * num atoms)", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform": [[431, 438], ["torch.log", "torch.log", "numpy.log", "kl_div.sum", "preds.size"], "function", ["None"], ["", "def", "kl_categorical_uniform", "(", "preds", ",", "num_atoms", ",", "num_edge_types", ",", "add_const", "=", "False", ",", "\n", "eps", "=", "1e-16", ")", ":", "\n", "    ", "kl_div", "=", "preds", "*", "torch", ".", "log", "(", "preds", "+", "eps", ")", "\n", "if", "add_const", ":", "\n", "        ", "const", "=", "np", ".", "log", "(", "num_edge_types", ")", "\n", "kl_div", "+=", "const", "\n", "", "return", "kl_div", ".", "sum", "(", ")", "/", "(", "num_atoms", "*", "preds", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var": [[439, 446], ["torch.log", "torch.log", "numpy.log", "kl_div.sum"], "function", ["None"], ["", "def", "kl_categorical_uniform_var", "(", "preds", ",", "num_atoms", ",", "num_edge_types", ",", "add_const", "=", "False", ",", "\n", "eps", "=", "1e-16", ")", ":", "\n", "    ", "kl_div", "=", "preds", "*", "torch", ".", "log", "(", "preds", "+", "eps", ")", "\n", "if", "add_const", ":", "\n", "        ", "const", "=", "np", ".", "log", "(", "num_edge_types", ")", "\n", "kl_div", "+=", "const", "\n", "", "return", "(", "kl_div", ".", "sum", "(", "dim", "=", "1", ")", "/", "num_atoms", ")", ".", "var", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian": [[448, 454], ["neg_log_p.sum", "numpy.log", "target.size", "target.size"], "function", ["None"], ["", "def", "nll_gaussian", "(", "preds", ",", "target", ",", "variance", ",", "add_const", "=", "False", ")", ":", "\n", "    ", "neg_log_p", "=", "(", "(", "preds", "-", "target", ")", "**", "2", "/", "(", "2", "*", "variance", ")", ")", "\n", "if", "add_const", ":", "\n", "        ", "const", "=", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "variance", ")", "\n", "neg_log_p", "+=", "const", "\n", "", "return", "neg_log_p", ".", "sum", "(", ")", "/", "(", "target", ".", "size", "(", "0", ")", "*", "target", ".", "size", "(", "1", ")", ")", "# normalisation here is (batch * num atoms)", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.nll_gaussian_var": [[455, 462], ["numpy.log", "neg_log_p.sum", "target.size"], "function", ["None"], ["", "def", "nll_gaussian_var", "(", "preds", ",", "target", ",", "variance", ",", "add_const", "=", "False", ")", ":", "\n", "# returns the variance over the batch of the reconstruction loss", "\n", "    ", "neg_log_p", "=", "(", "(", "preds", "-", "target", ")", "**", "2", "/", "(", "2", "*", "variance", ")", ")", "\n", "if", "add_const", ":", "\n", "        ", "const", "=", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "variance", ")", "\n", "neg_log_p", "+=", "const", "\n", "", "return", "(", "neg_log_p", ".", "sum", "(", "dim", "=", "1", ")", "/", "target", ".", "size", "(", "1", ")", ")", ".", "var", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.true_flip": [[465, 470], ["torch.arange", "torch.arange", "x.dim", "slice", "x.size", "tuple"], "function", ["None"], ["", "def", "true_flip", "(", "x", ",", "dim", ")", ":", "\n", "    ", "indices", "=", "[", "slice", "(", "None", ")", "]", "*", "x", ".", "dim", "(", ")", "\n", "indices", "[", "dim", "]", "=", "torch", ".", "arange", "(", "x", ".", "size", "(", "dim", ")", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "x", "[", "tuple", "(", "indices", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.KL_between_blocks": [[471, 482], ["range", "len", "range", "len", "KL_list.append", "KL_list.append", "torch.log", "torch.log", "torch.log", "torch.log", "KL.sum", "torch.log", "torch.log", "torch.log", "torch.log", "KL.sum", "prob_list[].size", "prob_list[].size", "utils.true_flip"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.true_flip"], ["", "def", "KL_between_blocks", "(", "prob_list", ",", "num_atoms", ",", "eps", "=", "1e-16", ")", ":", "\n", "# Return a list of the mutual information between every block pair", "\n", "    ", "KL_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "prob_list", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "prob_list", ")", ")", ":", "\n", "            ", "if", "i", "!=", "j", ":", "\n", "                ", "KL", "=", "prob_list", "[", "i", "]", "*", "(", "torch", ".", "log", "(", "prob_list", "[", "i", "]", "+", "eps", ")", "-", "torch", ".", "log", "(", "prob_list", "[", "j", "]", "+", "eps", ")", ")", "\n", "KL_list", ".", "append", "(", "KL", ".", "sum", "(", ")", "/", "(", "num_atoms", "*", "prob_list", "[", "i", "]", ".", "size", "(", "0", ")", ")", ")", "\n", "KL", "=", "prob_list", "[", "i", "]", "*", "(", "torch", ".", "log", "(", "prob_list", "[", "i", "]", "+", "eps", ")", "-", "torch", ".", "log", "(", "true_flip", "(", "prob_list", "[", "j", "]", ",", "-", "1", ")", "+", "eps", ")", ")", "\n", "KL_list", ".", "append", "(", "KL", ".", "sum", "(", ")", "/", "(", "num_atoms", "*", "prob_list", "[", "i", "]", ".", "size", "(", "0", ")", ")", ")", "\n", "", "", "", "return", "KL_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target": [[484, 492], ["numpy.prod", "range", "len", "target_list.append"], "function", ["None"], ["", "def", "decode_target", "(", "target", ",", "num_edge_types_list", ")", ":", "\n", "    ", "target_list", "=", "[", "]", "\n", "base", "=", "np", ".", "prod", "(", "num_edge_types_list", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "num_edge_types_list", ")", ")", ":", "\n", "        ", "base", "/=", "num_edge_types_list", "[", "i", "]", "\n", "target_list", ".", "append", "(", "target", "//", "base", ")", "\n", "target", "=", "target", "%", "base", "\n", "", "return", "target_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.encode_target_list": [[493, 500], ["numpy.zeros", "reversed", "np.zeros.astype", "range", "len", "numpy.array"], "function", ["None"], ["", "def", "encode_target_list", "(", "target_list", ",", "edge_types_list", ")", ":", "\n", "    ", "encoded_target", "=", "np", ".", "zeros", "(", "target_list", "[", "0", "]", ".", "shape", ")", "\n", "base", "=", "1", "\n", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "target_list", ")", ")", ")", ":", "\n", "        ", "encoded_target", "+=", "base", "*", "np", ".", "array", "(", "target_list", "[", "i", "]", ")", "\n", "base", "*=", "edge_types_list", "[", "i", "]", "\n", "", "return", "encoded_target", ".", "astype", "(", "'int'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_NRI_batch": [[501, 530], ["preds.max", "numpy.prod", "numpy.array", "numpy.array", "numpy.argmax", "utils.decode_target", "utils.decode_target", "numpy.mean", "numpy.swapaxes", "numpy.eye", "np.array.cpu", "numpy.amax", "numpy.argmax", "numpy.mean", "numpy.equal", "numpy.array", "numpy.eye", "numpy.array", "itertools.permutations", "numpy.mean", "numpy.equal", "range", "len", "numpy.array", "preds.cpu", "range", "numpy.equal", "len", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target"], ["", "def", "edge_accuracy_perm_NRI_batch", "(", "preds", ",", "target", ",", "num_edge_types_list", ")", ":", "\n", "# permutation edge accuracy calculator for the standard NRI model", "\n", "# return the maximum accuracy of the batch over the permutations of the edge labels", "\n", "# also returns a one-hot encoding of the number which represents this permutation", "\n", "# also returns the accuracies for the individual factor graphs ", "\n", "\n", "    ", "_", ",", "preds", "=", "preds", ".", "max", "(", "-", "1", ")", "# returns index of max in each z_ij to reduce dim by 1", "\n", "\n", "num_edge_types", "=", "np", ".", "prod", "(", "num_edge_types_list", ")", "\n", "preds", "=", "np", ".", "eye", "(", "num_edge_types", ")", "[", "np", ".", "array", "(", "preds", ".", "cpu", "(", ")", ")", "]", "# this is nice way to turn integers into one-hot vectors", "\n", "target", "=", "np", ".", "array", "(", "target", ".", "cpu", "(", ")", ")", "\n", "\n", "perms", "=", "[", "p", "for", "p", "in", "permutations", "(", "range", "(", "num_edge_types", ")", ")", "]", "# list of edge type permutations", "\n", "# in the below, for each permutation of edge-types, permute preds, then take argmax to go from one-hot to integers", "\n", "# then compare to target, compute accuracy", "\n", "acc", "=", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "np", ".", "equal", "(", "target", ",", "np", ".", "argmax", "(", "preds", "[", ":", ",", ":", ",", "p", "]", ",", "axis", "=", "-", "1", ")", ",", "dtype", "=", "object", ")", ")", "for", "p", "in", "perms", "]", ")", "\n", "max_acc", ",", "idx", "=", "np", ".", "amax", "(", "acc", ")", ",", "np", ".", "argmax", "(", "acc", ")", "\n", "preds_deperm", "=", "np", ".", "argmax", "(", "preds", "[", ":", ",", ":", ",", "perms", "[", "idx", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "target_list", "=", "decode_target", "(", "target", ",", "num_edge_types_list", ")", "\n", "preds_deperm_list", "=", "decode_target", "(", "preds_deperm", ",", "num_edge_types_list", ")", "\n", "\n", "blocks_acc", "=", "[", "np", ".", "mean", "(", "np", ".", "equal", "(", "target_list", "[", "i", "]", ",", "preds_deperm_list", "[", "i", "]", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "target_list", ")", ")", "]", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "target", ",", "preds_deperm", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "\n", "blocks_acc", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "blocks_acc", ")", ",", "0", ",", "1", ")", "\n", "\n", "idx_onehot", "=", "np", ".", "eye", "(", "len", "(", "perms", ")", ")", "[", "np", ".", "array", "(", "idx", ")", "]", "\n", "return", "acc", ",", "idx_onehot", ",", "blocks_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_NRI": [[531, 540], ["utils.edge_accuracy_perm_NRI_batch", "numpy.mean", "numpy.var", "numpy.mean", "numpy.var"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_NRI_batch"], ["", "def", "edge_accuracy_perm_NRI", "(", "preds", ",", "targets", ",", "num_edge_types_list", ")", ":", "\n", "    ", "acc_batch", ",", "perm_code_onehot", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_NRI_batch", "(", "preds", ",", "targets", ",", "num_edge_types_list", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "acc_batch", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "acc_batch", ")", "\n", "acc_blocks", "=", "np", ".", "mean", "(", "acc_blocks_batch", ",", "axis", "=", "0", ")", "\n", "acc_var_blocks", "=", "np", ".", "var", "(", "acc_blocks_batch", ",", "axis", "=", "0", ")", "\n", "\n", "return", "acc", ",", "perm_code_onehot", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI_batch": [[542, 576], ["utils.encode_target_list", "utils.encode_target_list", "numpy.prod", "numpy.array", "numpy.argmax", "utils.decode_target", "numpy.mean", "numpy.swapaxes", "numpy.array", "targets[].cpu", "[].cpu", "numpy.array().astype", "numpy.eye", "numpy.amax", "numpy.argmax", "numpy.mean", "numpy.equal", "numpy.array", "range", "itertools.permutations", "numpy.mean", "numpy.equal", "range", "numpy.array", "range", "numpy.equal", "len", "pred.max", "t.cpu", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.encode_target_list", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.encode_target_list", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target"], ["", "def", "edge_accuracy_perm_fNRI_batch", "(", "preds_list", ",", "targets", ",", "num_edge_types_list", ")", ":", "\n", "# permutation edge accuracy calculator for the fNRI model", "\n", "# return the maximum accuracy of the batch over the permutations of the edge labels", "\n", "# also returns a one-hot encoding of the number which represents this permutation", "\n", "# also returns the accuracies for the individual factor graphs", "\n", "\n", "    ", "target_list", "=", "[", "targets", "[", ":", ",", "i", ",", ":", "]", ".", "cpu", "(", ")", "for", "i", "in", "range", "(", "targets", ".", "shape", "[", "1", "]", ")", "]", "\n", "preds_list", "=", "[", "pred", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", "for", "pred", "in", "preds_list", "]", "\n", "preds", "=", "encode_target_list", "(", "preds_list", ",", "num_edge_types_list", ")", "\n", "target", "=", "encode_target_list", "(", "target_list", ",", "num_edge_types_list", ")", "\n", "\n", "target_list", "=", "[", "np", ".", "array", "(", "t", ".", "cpu", "(", ")", ")", ".", "astype", "(", "'int'", ")", "for", "t", "in", "target_list", "]", "\n", "\n", "num_edge_types", "=", "np", ".", "prod", "(", "num_edge_types_list", ")", "\n", "preds", "=", "np", ".", "eye", "(", "num_edge_types", ")", "[", "preds", "]", "# this is nice way to turn integers into one-hot vectors", "\n", "\n", "perms", "=", "[", "p", "for", "p", "in", "permutations", "(", "range", "(", "num_edge_types", ")", ")", "]", "# list of edge type permutations", "\n", "\n", "# in the below, for each permutation of edge-types, permute preds, then take argmax to go from one-hot to integers", "\n", "# then compare to target to compute accuracy", "\n", "acc", "=", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "np", ".", "equal", "(", "target", ",", "np", ".", "argmax", "(", "preds", "[", ":", ",", ":", ",", "p", "]", ",", "axis", "=", "-", "1", ")", ",", "dtype", "=", "object", ")", ")", "for", "p", "in", "perms", "]", ")", "\n", "max_acc", ",", "idx", "=", "np", ".", "amax", "(", "acc", ")", ",", "np", ".", "argmax", "(", "acc", ")", "\n", "\n", "preds_deperm", "=", "np", ".", "argmax", "(", "preds", "[", ":", ",", ":", ",", "perms", "[", "idx", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "preds_deperm_list", "=", "decode_target", "(", "preds_deperm", ",", "num_edge_types_list", ")", "\n", "\n", "blocks_acc", "=", "[", "np", ".", "mean", "(", "np", ".", "equal", "(", "target_list", "[", "i", "]", ",", "preds_deperm_list", "[", "i", "]", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "target_list", ")", ")", "]", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "target", ",", "preds_deperm", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "\n", "blocks_acc", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "blocks_acc", ")", ",", "0", ",", "1", ")", "\n", "\n", "idx_onehot", "=", "np", ".", "array", "(", "[", "0", "]", ")", "#np.eye(len(perms))[np.array(idx)]", "\n", "\n", "return", "acc", ",", "idx_onehot", ",", "blocks_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI_batch_skipfirst": [[577, 599], ["numpy.swapaxes", "torch.cat", "torch.cat", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "numpy.array", "np.array.cpu", "numpy.amax", "numpy.argmax", "numpy.equal", "numpy.eye", "np.swapaxes.cpu", "torch.unsqueeze", "torch.unsqueeze", "itertools.permutations", "numpy.mean", "numpy.sum", "len", "numpy.array", "range", "numpy.equal", "pred.max", "numpy.sum", "numpy.equal"], "function", ["None"], ["", "def", "edge_accuracy_perm_fNRI_batch_skipfirst", "(", "preds_list", ",", "targets", ",", "num_factors", ")", ":", "\n", "# permutation edge accuracy calculator for the fNRI model when using skip-first argument ", "\n", "# and all factor graphs have two edge types", "\n", "# return the maximum accuracy of the batch over the permutations of the edge labels", "\n", "# also returns a one-hot encoding of the number which represents this permutation", "\n", "# also returns the accuracies for the individual factor graphs", "\n", "\n", "    ", "targets", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "targets", ".", "cpu", "(", ")", ")", ",", "1", ",", "2", ")", "\n", "preds", "=", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "pred", ".", "max", "(", "-", "1", ")", "[", "1", "]", ",", "-", "1", ")", "for", "pred", "in", "preds_list", "]", ",", "-", "1", ")", "\n", "preds", "=", "np", ".", "array", "(", "preds", ".", "cpu", "(", ")", ")", "\n", "perms", "=", "[", "p", "for", "p", "in", "permutations", "(", "range", "(", "num_factors", ")", ")", "]", "\n", "\n", "acc", "=", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", "[", ":", ",", ":", ",", "p", "]", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "num_factors", ")", "for", "p", "in", "perms", "]", ")", "\n", "max_acc", ",", "idx", "=", "np", ".", "amax", "(", "acc", ")", ",", "np", ".", "argmax", "(", "acc", ")", "\n", "\n", "preds_deperm", "=", "preds", "[", ":", ",", ":", ",", "perms", "[", "idx", "]", "]", "\n", "blocks_acc", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds_deperm", ",", "dtype", "=", "object", ")", ",", "axis", "=", "1", ")", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds_deperm", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "num_factors", ",", "axis", "=", "-", "1", ")", "\n", "\n", "idx_onehot", "=", "np", ".", "eye", "(", "len", "(", "perms", ")", ")", "[", "np", ".", "array", "(", "idx", ")", "]", "\n", "\n", "return", "acc", ",", "idx_onehot", ",", "blocks_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI": [[601, 614], ["numpy.mean", "numpy.var", "numpy.mean", "numpy.var", "all", "utils.edge_accuracy_perm_fNRI_batch_skipfirst", "utils.edge_accuracy_perm_fNRI_batch", "len"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI_batch_skipfirst", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_fNRI_batch"], ["", "def", "edge_accuracy_perm_fNRI", "(", "preds_list", ",", "targets", ",", "num_edge_types_list", ",", "skip_first", "=", "False", ")", ":", "\n", "\n", "    ", "if", "skip_first", "and", "all", "(", "e", "==", "2", "for", "e", "in", "num_edge_types_list", ")", ":", "\n", "        ", "acc_batch", ",", "perm_code_onehot", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_fNRI_batch_skipfirst", "(", "preds_list", ",", "targets", ",", "len", "(", "num_edge_types_list", ")", ")", "\n", "", "else", ":", "\n", "        ", "acc_batch", ",", "perm_code_onehot", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_fNRI_batch", "(", "preds_list", ",", "targets", ",", "num_edge_types_list", ")", "\n", "\n", "", "acc", "=", "np", ".", "mean", "(", "acc_batch", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "acc_batch", ")", "\n", "acc_blocks", "=", "np", ".", "mean", "(", "acc_blocks_batch", ",", "axis", "=", "0", ")", "\n", "acc_var_blocks", "=", "np", ".", "var", "(", "acc_blocks_batch", ",", "axis", "=", "0", ")", "\n", "\n", "return", "acc", ",", "perm_code_onehot", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_sigmoid_batch": [[615, 638], ["numpy.swapaxes", "numpy.array", "numpy.rint().astype", "numpy.array", "numpy.mean", "numpy.mean", "numpy.array", "np.rint().astype.cpu().detach", "numpy.amax", "numpy.argmax", "numpy.equal", "numpy.eye", "np.swapaxes.cpu", "numpy.rint", "itertools.permutations", "numpy.mean", "numpy.sum", "len", "numpy.array", "np.rint().astype.cpu", "range", "numpy.equal", "numpy.sum", "numpy.equal"], "function", ["None"], ["", "def", "edge_accuracy_perm_sigmoid_batch", "(", "preds", ",", "targets", ")", ":", "\n", "# permutation edge accuracy calculator for the sigmoid model", "\n", "# return the maximum accuracy of the batch over the permutations of the edge labels", "\n", "# also returns a one-hot encoding of the number which represents this permutation", "\n", "# also returns the accuracies for the individual factor graph_list", "\n", "\n", "    ", "targets", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "targets", ".", "cpu", "(", ")", ")", ",", "1", ",", "2", ")", "\n", "preds", "=", "np", ".", "array", "(", "preds", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "preds", "=", "np", ".", "rint", "(", "preds", ")", ".", "astype", "(", "'int'", ")", "\n", "num_factors", "=", "targets", ".", "shape", "[", "-", "1", "]", "\n", "perms", "=", "[", "p", "for", "p", "in", "permutations", "(", "range", "(", "num_factors", ")", ")", "]", "# list of edge type permutations", "\n", "\n", "# in the below, for each permutation of edge-types, permute preds, then take argmax to go from one-hot to integers", "\n", "# then compare to target to compute accuracy", "\n", "acc", "=", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", "[", ":", ",", ":", ",", "p", "]", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "num_factors", ")", "for", "p", "in", "perms", "]", ")", "\n", "max_acc", ",", "idx", "=", "np", ".", "amax", "(", "acc", ")", ",", "np", ".", "argmax", "(", "acc", ")", "\n", "\n", "preds_deperm", "=", "preds", "[", ":", ",", ":", ",", "perms", "[", "idx", "]", "]", "\n", "blocks_acc", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds_deperm", ",", "dtype", "=", "object", ")", ",", "axis", "=", "1", ")", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds_deperm", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "num_factors", ",", "axis", "=", "-", "1", ")", "\n", "\n", "idx_onehot", "=", "np", ".", "eye", "(", "len", "(", "perms", ")", ")", "[", "np", ".", "array", "(", "idx", ")", "]", "\n", "return", "acc", ",", "idx_onehot", ",", "blocks_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_sigmoid": [[640, 649], ["utils.edge_accuracy_perm_sigmoid_batch", "numpy.mean", "numpy.var", "numpy.mean", "numpy.var"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.edge_accuracy_perm_sigmoid_batch"], ["", "def", "edge_accuracy_perm_sigmoid", "(", "preds", ",", "targets", ")", ":", "\n", "    ", "acc_batch", ",", "perm_code_onehot", ",", "acc_blocks_batch", "=", "edge_accuracy_perm_sigmoid_batch", "(", "preds", ",", "targets", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "acc_batch", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "acc_batch", ")", "\n", "acc_blocks", "=", "np", ".", "mean", "(", "acc_blocks_batch", ",", "axis", "=", "0", ")", "\n", "acc_var_blocks", "=", "np", ".", "var", "(", "acc_blocks_batch", ",", "axis", "=", "0", ")", "\n", "\n", "return", "acc", ",", "perm_code_onehot", ",", "acc_blocks", ",", "acc_var", ",", "acc_var_blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.draw_lines": [[9, 38], ["numpy.array", "numpy.transpose", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "max", "range", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.colors.ListedColormap", "trajectory_plot.colorline", "cmap", "matplotlib.colors.ListedColormap", "numpy.linspace", "cmap", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.colorline"], ["def", "draw_lines", "(", "output", ",", "output_i", ",", "linestyle", "=", "'-'", ",", "alpha", "=", "1", ",", "darker", "=", "False", ",", "linewidth", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    http://nbviewer.ipython.org/github/dpsanders/matplotlib-examples/blob/master/colorline.ipynb\n    http://matplotlib.org/examples/pylab_examples/multicolored_line.html\n    \"\"\"", "\n", "loc", "=", "np", ".", "array", "(", "output", "[", "output_i", ",", ":", ",", ":", ",", "0", ":", "2", "]", ")", "\n", "loc", "=", "np", ".", "transpose", "(", "loc", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "\n", "x", "=", "loc", "[", ":", ",", "0", ",", ":", "]", "\n", "y", "=", "loc", "[", ":", ",", "1", ",", ":", "]", "\n", "x_min", "=", "np", ".", "min", "(", "x", ")", "\n", "x_max", "=", "np", ".", "max", "(", "x", ")", "\n", "y_min", "=", "np", ".", "min", "(", "y", ")", "\n", "y_max", "=", "np", ".", "max", "(", "y", ")", "\n", "max_range", "=", "max", "(", "y_max", "-", "y_min", ",", "x_max", "-", "x_min", ")", "\n", "xmin", "=", "(", "x_min", "+", "x_max", ")", "/", "2", "-", "max_range", "/", "2", "-", "0.1", "\n", "xmax", "=", "(", "x_min", "+", "x_max", ")", "/", "2", "+", "max_range", "/", "2", "+", "0.1", "\n", "ymin", "=", "(", "y_min", "+", "y_max", ")", "/", "2", "-", "max_range", "/", "2", "-", "0.1", "\n", "ymax", "=", "(", "y_min", "+", "y_max", ")", "/", "2", "+", "max_range", "/", "2", "+", "0.1", "\n", "\n", "cmaps", "=", "[", "'Purples'", ",", "'Greens'", ",", "'Blues'", ",", "'Oranges'", ",", "'Reds'", ",", "'Purples'", ",", "'Greens'", ",", "'Blues'", ",", "'Oranges'", ",", "'Reds'", "]", "\n", "cmaps", "=", "[", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmap", ",", "512", ")", "for", "cmap", "in", "cmaps", "]", "\n", "cmaps", "=", "[", "ListedColormap", "(", "cmap", "(", "np", ".", "linspace", "(", "0.", ",", "0.8", ",", "256", ")", ")", ")", "for", "cmap", "in", "cmaps", "]", "\n", "if", "darker", ":", "\n", "        ", "cmaps", "=", "[", "ListedColormap", "(", "cmap", "(", "np", ".", "linspace", "(", "0.2", ",", "0.8", ",", "256", ")", ")", ")", "for", "cmap", "in", "cmaps", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "loc", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "lc", "=", "colorline", "(", "loc", "[", ":", ",", "0", ",", "i", "]", ",", "loc", "[", ":", ",", "1", ",", "i", "]", ",", "cmap", "=", "cmaps", "[", "i", "]", ",", "linestyle", "=", "linestyle", ",", "alpha", "=", "alpha", ",", "linewidth", "=", "linewidth", ")", "\n", "", "return", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.colorline": [[39, 59], ["matplotlib.Normalize", "numpy.asarray", "trajectory_plot.make_segments", "matplotlib.LineCollection", "matplotlib.gca", "plt.gca.add_collection", "numpy.linspace", "hasattr", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.make_segments"], ["", "def", "colorline", "(", "\n", "x", ",", "y", ",", "z", "=", "None", ",", "cmap", "=", "'copper'", ",", "norm", "=", "plt", ".", "Normalize", "(", "0.0", ",", "1.0", ")", ",", "\n", "linewidth", "=", "2", ",", "alpha", "=", "0.8", ",", "linestyle", "=", "'-'", ")", ":", "\n", "    ", "\"\"\"\n    http://nbviewer.ipython.org/github/dpsanders/matplotlib-examples/blob/master/colorline.ipynb\n    http://matplotlib.org/examples/pylab_examples/multicolored_line.html\n    \"\"\"", "\n", "# Default colors equally spaced on [0,1]:", "\n", "if", "z", "is", "None", ":", "\n", "        ", "z", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "len", "(", "x", ")", ")", "\n", "", "if", "not", "hasattr", "(", "z", ",", "\"__iter__\"", ")", ":", "\n", "        ", "z", "=", "np", ".", "array", "(", "[", "z", "]", ")", "\n", "", "z", "=", "np", ".", "asarray", "(", "z", ")", "\n", "segments", "=", "make_segments", "(", "x", ",", "y", ")", "\n", "\n", "lc", "=", "mcoll", ".", "LineCollection", "(", "segments", ",", "array", "=", "z", ",", "cmap", "=", "cmap", ",", "norm", "=", "norm", ",", "\n", "linewidth", "=", "linewidth", ",", "alpha", "=", "alpha", ",", "linestyle", "=", "linestyle", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "add_collection", "(", "lc", ")", "\n", "return", "lc", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.trajectory_plot.make_segments": [[60, 64], ["numpy.array().T.reshape", "numpy.concatenate", "numpy.array"], "function", ["None"], ["", "def", "make_segments", "(", "x", ",", "y", ")", ":", "\n", "    ", "points", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", ".", "T", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "segments", "=", "np", ".", "concatenate", "(", "[", "points", "[", ":", "-", "1", "]", ",", "points", "[", "1", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_enc.train": [[232, 564], ["time.time", "encoder.train", "scheduler.step", "enumerate", "encoder.eval", "enumerate", "print", "print", "print", "print", "print", "print", "csv_writer.writerow", "log.flush", "np.mean", "data[].contiguous", "optimizer.zero_grad", "encoder", "F.binary_cross_entropy.backward", "optimizer.step", "acc_train.append", "acc_blocks_train.append", "acc_var_train.append", "acc_var_blocks_train.append", "ce_train.append", "csv_writer.writerow", "torch.save", "print", "Variable", "Variable", "utils.my_softmax", "utils.kl_categorical_uniform", "kl_train.append", "kl_list_train.append", "kl_var_list_train.append", "KLb_train.append", "KLb_blocks_train.append", "np.array", "np.array", "utils.decode_target", "utils.decode_target", "np.mean", "np.array", "np.var", "np.array", "logits.view.view", "relations.cuda.view", "F.cross_entropy", "F.binary_cross_entropy.data.item", "torch.no_grad", "data[].contiguous", "encoder", "acc_val.append", "acc_blocks_val.append", "acc_var_val.append", "acc_var_blocks_val.append", "ce_val.append", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "list", "np.mean", "encoder.state_dict", "data.cuda", "relations.cuda.cuda", "utils.kl_categorical_uniform_var", "sum.data.item", "[].cpu", "relations.cuda.cpu", "np.equal", "np.mean", "np.swapaxes", "np.array", "np.rint().astype", "np.mean", "np.mean", "np.var", "np.var", "edges.view.view", "relations.cuda.transpose().type().contiguous().view", "F.binary_cross_entropy", "kl_train.append", "kl_list_train.append", "kl_var_list_train.append", "KLb_train.append", "KLb_blocks_train.append", "torch.split", "kl_train.append", "kl_list_train.append", "kl_var_list_train.append", "utils.KL_between_blocks", "KLb_train.append", "KLb_blocks_train.append", "np.swapaxes", "torch.cat", "np.array", "np.mean", "np.mean", "np.var", "np.var", "range", "utils.my_softmax", "utils.kl_categorical_uniform", "kl_val.append", "kl_list_val.append", "kl_var_list_val.append", "KLb_val.append", "KLb_blocks_val.append", "np.array", "np.array", "utils.decode_target", "utils.decode_target", "np.mean", "np.array", "np.var", "np.array", "logits.view.view", "relations.cuda.view", "F.cross_entropy", "F.binary_cross_entropy.data.item", "time.time", "np.around", "np.around", "np.around", "np.around", "time.time", "np.around", "np.around", "np.around", "np.around", "range", "range", "range", "range", "range", "range", "np.mean", "kl.data.item", "kl_var.data.item", "np.mean", "np.equal", "np.var", "np.array", "edges.view.cpu().detach", "np.equal", "np.mean", "np.mean", "relations.cuda.cuda", "utils.my_softmax", "sum", "sum", "sum.data.item", "sum().data.item", "np.array", "np.array.cpu", "np.equal", "np.mean", "np.mean", "len", "logits_split[].view", "relations[].contiguous().view", "F.cross_entropy", "data.cuda", "relations.cuda.cuda", "utils.kl_categorical_uniform_var", "sum.data.item", "[].cpu", "relations.cuda.cpu", "np.equal", "np.mean", "np.swapaxes", "np.array", "np.rint().astype", "np.mean", "np.mean", "np.var", "np.var", "edges.view.view", "relations.cuda.transpose().type().contiguous().view", "F.binary_cross_entropy", "kl_val.append", "kl_list_val.append", "kl_var_list_val.append", "KLb_val.append", "KLb_blocks_val.append", "torch.split", "kl_val.append", "kl_list_val.append", "kl_var_list_val.append", "np.swapaxes", "torch.cat", "np.array", "np.mean", "np.mean", "np.var", "np.var", "range", "utils.KL_between_blocks", "KLb_val.append", "KLb_blocks_val.append", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "len", "str", "len", "str", "len", "range", "str", "len", "str", "len", "str", "len", "range", "list", "np.mean", "np.array", "np.equal", "range", "np.mean", "range", "torch.exp", "relations.cuda.cpu", "np.rint", "np.sum", "np.equal", "relations.cuda.transpose().type().contiguous", "utils.kl_categorical", "utils.kl_categorical_uniform", "utils.kl_categorical_uniform_var", "kl.data.item", "kl_var.data.item", "KL.data.item", "relations.cuda.cpu", "torch.unsqueeze", "np.sum", "len", "np.equal", "kl.data.item", "kl_var.data.item", "np.mean", "np.equal", "np.var", "np.array", "edges.view.cpu().detach", "np.equal", "np.mean", "np.mean", "relations.cuda.cuda", "utils.my_softmax", "sum", "sum", "sum.data.item", "np.array", "np.array.cpu", "np.equal", "np.mean", "np.mean", "len", "logits_split[].view", "relations[].contiguous().view", "F.cross_entropy", "sum().data.item", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "str", "len", "str", "len", "list", "np.mean", "logits.view.max", "len", "np.equal", "len", "edges.view.cpu", "np.equal", "np.sum", "range", "range", "range", "np.equal", "np.sum", "len", "relations[].contiguous", "np.equal", "range", "np.mean", "range", "torch.exp", "relations.cuda.cpu", "np.rint", "np.sum", "np.equal", "relations.cuda.transpose().type().contiguous", "utils.kl_categorical", "utils.kl_categorical_uniform", "utils.kl_categorical_uniform_var", "kl.data.item", "kl_var.data.item", "relations.cuda.cpu", "torch.unsqueeze", "np.sum", "len", "np.equal", "KL.data.item", "list", "np.mean", "np.array", "np.equal", "relations.cuda.transpose().type", "len", "len", "len", "sum", "pred.max", "np.equal", "logits.view.max", "len", "np.equal", "len", "edges.view.cpu", "np.equal", "np.sum", "range", "range", "range", "np.equal", "np.sum", "len", "relations[].contiguous", "np.mean", "np.array", "np.equal", "relations.cuda.transpose().type", "len", "len", "len", "pred.max", "np.equal", "sum", "list", "np.mean", "np.mean", "np.mean", "np.mean", "np.array", "relations.cuda.transpose", "np.mean", "relations.cuda.transpose", "list", "np.mean", "np.array", "list", "np.mean", "list", "np.mean", "np.array", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "np.array", "np.array"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_enc.train", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.KL_between_blocks", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.KL_between_blocks", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var"], ["def", "train", "(", "epoch", ",", "best_val_loss", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "\n", "kl_train", "=", "[", "]", "\n", "kl_list_train", "=", "[", "]", "\n", "kl_var_list_train", "=", "[", "]", "\n", "\n", "acc_train", "=", "[", "]", "\n", "acc_blocks_train", "=", "[", "]", "\n", "acc_var_train", "=", "[", "]", "\n", "acc_var_blocks_train", "=", "[", "]", "\n", "\n", "KLb_train", "=", "[", "]", "\n", "KLb_blocks_train", "=", "[", "]", "\n", "\n", "ce_train", "=", "[", "]", "\n", "\n", "encoder", ".", "train", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "train_loader", ")", ":", "# relations are the ground truth interactions graphs", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "relations", "=", "data", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "", "data", ",", "relations", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "relations", ")", "\n", "\n", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "encoder", "(", "data_encoder", ",", "rel_rec", ",", "rel_send", ")", "\n", "\n", "if", "args", ".", "NRI", ":", "\n", "            ", "prob", "=", "my_softmax", "(", "logits", ",", "-", "1", ")", "\n", "\n", "loss_kl", "=", "kl_categorical_uniform", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "\n", "loss_kl_split", "=", "[", "loss_kl", "]", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "]", "\n", "kl_train", ".", "append", "(", "loss_kl", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_list_train", ".", "append", "(", "[", "kl", ".", "data", ".", "item", "(", ")", "for", "kl", "in", "loss_kl_split", "]", ")", "\n", "kl_var_list_train", ".", "append", "(", "[", "kl_var", ".", "data", ".", "item", "(", ")", "for", "kl_var", "in", "loss_kl_var_split", "]", ")", "\n", "\n", "KLb_train", ".", "append", "(", "0", ")", "\n", "KLb_blocks_train", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "preds", "=", "np", ".", "array", "(", "logits", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ")", "\n", "targets", "=", "np", ".", "array", "(", "relations", ".", "cpu", "(", ")", ")", "\n", "preds_list", "=", "decode_target", "(", "preds", ",", "args", ".", "edge_types_list", ")", "\n", "target_list", "=", "decode_target", "(", "targets", ",", "args", ".", "edge_types_list", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ")", "\n", "acc_blocks", "=", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "np", ".", "equal", "(", "target_list", "[", "i", "]", ",", "preds_list", "[", "i", "]", ",", "dtype", "=", "object", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "target_list", ")", ")", "]", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "acc_var_blocks", "=", "np", ".", "array", "(", "[", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "target_list", "[", "i", "]", ",", "preds_list", "[", "i", "]", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "target_list", ")", ")", "]", ")", "\n", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "edge_types", ")", "\n", "relations", "=", "relations", ".", "view", "(", "-", "1", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "relations", ")", "\n", "\n", "", "elif", "args", ".", "sigmoid", ":", "\n", "            ", "edges", "=", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "args", ".", "sigmoid_sharpness", "*", "logits", ")", ")", "\n", "\n", "targets", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "relations", ".", "cpu", "(", ")", ")", ",", "1", ",", "2", ")", "\n", "preds", "=", "np", ".", "array", "(", "edges", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "preds", "=", "np", ".", "rint", "(", "preds", ")", ".", "astype", "(", "'int'", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "args", ".", "num_factors", ")", "\n", "acc_blocks", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "args", ".", "num_factors", ",", "axis", "=", "1", ")", ")", "\n", "acc_var_blocks", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "edges", "=", "edges", ".", "view", "(", "-", "1", ")", "\n", "relations", "=", "relations", ".", "transpose", "(", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "                ", "relations", "=", "relations", ".", "cuda", "(", ")", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy", "(", "edges", ",", "relations", ")", "\n", "\n", "kl_train", ".", "append", "(", "0", ")", "\n", "kl_list_train", ".", "append", "(", "[", "0", "]", ")", "\n", "kl_var_list_train", ".", "append", "(", "[", "0", "]", ")", "\n", "KLb_train", ".", "append", "(", "0", ")", "\n", "KLb_blocks_train", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "", "else", ":", "\n", "# dim of logits, edges and prob are [batchsize, N^2-N, sum(edge_types_list)] where N = no. of particles", "\n", "            ", "logits_split", "=", "torch", ".", "split", "(", "logits", ",", "args", ".", "edge_types_list", ",", "dim", "=", "-", "1", ")", "\n", "\n", "prob_split", "=", "[", "my_softmax", "(", "logits_i", ",", "-", "1", ")", "for", "logits_i", "in", "logits_split", "]", "\n", "\n", "if", "args", ".", "prior", ":", "\n", "                ", "loss_kl_split", "=", "[", "kl_categorical", "(", "prob_split", "[", "type_idx", "]", ",", "log_prior", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "", "else", ":", "\n", "                ", "loss_kl_split", "=", "[", "kl_categorical_uniform", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "\n", "", "kl_train", ".", "append", "(", "loss_kl", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_list_train", ".", "append", "(", "[", "kl", ".", "data", ".", "item", "(", ")", "for", "kl", "in", "loss_kl_split", "]", ")", "\n", "kl_var_list_train", ".", "append", "(", "[", "kl_var", ".", "data", ".", "item", "(", ")", "for", "kl_var", "in", "loss_kl_var_split", "]", ")", "\n", "KLb_blocks", "=", "KL_between_blocks", "(", "prob_split", ",", "args", ".", "num_atoms", ")", "\n", "KLb_train", ".", "append", "(", "sum", "(", "KLb_blocks", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "KLb_blocks_train", ".", "append", "(", "[", "KL", ".", "data", ".", "item", "(", ")", "for", "KL", "in", "KLb_blocks", "]", ")", "\n", "\n", "targets", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "relations", ".", "cpu", "(", ")", ")", ",", "1", ",", "2", ")", "\n", "preds", "=", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "pred", ".", "max", "(", "-", "1", ")", "[", "1", "]", ",", "-", "1", ")", "for", "pred", "in", "logits_split", "]", ",", "-", "1", ")", "\n", "preds", "=", "np", ".", "array", "(", "preds", ".", "cpu", "(", ")", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "len", "(", "args", ".", "edge_types_list", ")", ")", "\n", "acc_blocks", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "len", "(", "args", ".", "edge_types_list", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "acc_var_blocks", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ":", "\n", "                ", "logits_i", "=", "logits_split", "[", "i", "]", ".", "view", "(", "-", "1", ",", "args", ".", "edge_types_list", "[", "i", "]", ")", "\n", "relations_i", "=", "relations", "[", ":", ",", "i", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "+=", "F", ".", "cross_entropy", "(", "logits_i", ",", "relations_i", ")", "\n", "\n", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "acc_train", ".", "append", "(", "acc", ")", "\n", "acc_blocks_train", ".", "append", "(", "acc_blocks", ")", "\n", "acc_var_train", ".", "append", "(", "acc_var", ")", "\n", "acc_var_blocks_train", ".", "append", "(", "acc_var_blocks", ")", "\n", "\n", "ce_train", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "\n", "\n", "", "kl_val", "=", "[", "]", "\n", "kl_list_val", "=", "[", "]", "\n", "kl_var_list_val", "=", "[", "]", "\n", "\n", "acc_val", "=", "[", "]", "\n", "acc_blocks_val", "=", "[", "]", "\n", "acc_var_val", "=", "[", "]", "\n", "acc_var_blocks_val", "=", "[", "]", "\n", "\n", "KLb_val", "=", "[", "]", "\n", "KLb_blocks_val", "=", "[", "]", "# KL between blocks list", "\n", "\n", "ce_val", "=", "[", "]", "\n", "\n", "encoder", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "data", ",", "relations", "=", "data", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "\n", "", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "logits", "=", "encoder", "(", "data_encoder", ",", "rel_rec", ",", "rel_send", ")", "\n", "\n", "if", "args", ".", "NRI", ":", "\n", "                ", "prob", "=", "my_softmax", "(", "logits", ",", "-", "1", ")", "\n", "\n", "loss_kl", "=", "kl_categorical_uniform", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "\n", "loss_kl_split", "=", "[", "loss_kl", "]", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "]", "\n", "kl_val", ".", "append", "(", "loss_kl", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_list_val", ".", "append", "(", "[", "kl", ".", "data", ".", "item", "(", ")", "for", "kl", "in", "loss_kl_split", "]", ")", "\n", "kl_var_list_val", ".", "append", "(", "[", "kl_var", ".", "data", ".", "item", "(", ")", "for", "kl_var", "in", "loss_kl_var_split", "]", ")", "\n", "\n", "KLb_val", ".", "append", "(", "0", ")", "\n", "KLb_blocks_val", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "preds", "=", "np", ".", "array", "(", "logits", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ")", "\n", "targets", "=", "np", ".", "array", "(", "relations", ".", "cpu", "(", ")", ")", "\n", "preds_list", "=", "decode_target", "(", "preds", ",", "args", ".", "edge_types_list", ")", "\n", "target_list", "=", "decode_target", "(", "targets", ",", "args", ".", "edge_types_list", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ")", "\n", "acc_blocks", "=", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "np", ".", "equal", "(", "target_list", "[", "i", "]", ",", "preds_list", "[", "i", "]", ",", "dtype", "=", "object", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "target_list", ")", ")", "]", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "acc_var_blocks", "=", "np", ".", "array", "(", "[", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "target_list", "[", "i", "]", ",", "preds_list", "[", "i", "]", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "target_list", ")", ")", "]", ")", "\n", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "edge_types", ")", "\n", "relations", "=", "relations", ".", "view", "(", "-", "1", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "relations", ")", "\n", "\n", "", "elif", "args", ".", "sigmoid", ":", "\n", "                ", "edges", "=", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "args", ".", "sigmoid_sharpness", "*", "logits", ")", ")", "\n", "\n", "targets", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "relations", ".", "cpu", "(", ")", ")", ",", "1", ",", "2", ")", "\n", "preds", "=", "np", ".", "array", "(", "edges", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "preds", "=", "np", ".", "rint", "(", "preds", ")", ".", "astype", "(", "'int'", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "args", ".", "num_factors", ")", "\n", "acc_blocks", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "args", ".", "num_factors", ",", "axis", "=", "1", ")", ")", "\n", "acc_var_blocks", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "edges", "=", "edges", ".", "view", "(", "-", "1", ")", "\n", "relations", "=", "relations", ".", "transpose", "(", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "                    ", "relations", "=", "relations", ".", "cuda", "(", ")", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy", "(", "edges", ",", "relations", ")", "\n", "\n", "kl_val", ".", "append", "(", "0", ")", "\n", "kl_list_val", ".", "append", "(", "[", "0", "]", ")", "\n", "kl_var_list_val", ".", "append", "(", "[", "0", "]", ")", "\n", "KLb_val", ".", "append", "(", "0", ")", "\n", "KLb_blocks_val", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "", "else", ":", "\n", "                ", "logits_split", "=", "torch", ".", "split", "(", "logits", ",", "args", ".", "edge_types_list", ",", "dim", "=", "-", "1", ")", "\n", "prob_split", "=", "[", "my_softmax", "(", "logits_i", ",", "-", "1", ")", "for", "logits_i", "in", "logits_split", "]", "\n", "\n", "if", "args", ".", "prior", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical", "(", "prob_split", "[", "type_idx", "]", ",", "log_prior", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "", "else", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical_uniform", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "\n", "", "kl_val", ".", "append", "(", "loss_kl", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_list_val", ".", "append", "(", "[", "kl", ".", "data", ".", "item", "(", ")", "for", "kl", "in", "loss_kl_split", "]", ")", "\n", "kl_var_list_val", ".", "append", "(", "[", "kl_var", ".", "data", ".", "item", "(", ")", "for", "kl_var", "in", "loss_kl_var_split", "]", ")", "\n", "\n", "targets", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "relations", ".", "cpu", "(", ")", ")", ",", "1", ",", "2", ")", "\n", "preds", "=", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "pred", ".", "max", "(", "-", "1", ")", "[", "1", "]", ",", "-", "1", ")", "for", "pred", "in", "logits_split", "]", ",", "-", "1", ")", "\n", "preds", "=", "np", ".", "array", "(", "preds", ".", "cpu", "(", ")", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "len", "(", "args", ".", "edge_types_list", ")", ")", "\n", "acc_blocks", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "len", "(", "args", ".", "edge_types_list", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "acc_var_blocks", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ":", "\n", "                    ", "logits_i", "=", "logits_split", "[", "i", "]", ".", "view", "(", "-", "1", ",", "args", ".", "edge_types_list", "[", "i", "]", ")", "\n", "relations_i", "=", "relations", "[", ":", ",", "i", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "+=", "F", ".", "cross_entropy", "(", "logits_i", ",", "relations_i", ")", "\n", "\n", "", "KLb_blocks", "=", "KL_between_blocks", "(", "prob_split", ",", "args", ".", "num_atoms", ")", "\n", "KLb_val", ".", "append", "(", "sum", "(", "KLb_blocks", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "KLb_blocks_val", ".", "append", "(", "[", "KL", ".", "data", ".", "item", "(", ")", "for", "KL", "in", "KLb_blocks", "]", ")", "\n", "\n", "\n", "", "acc_val", ".", "append", "(", "acc", ")", "\n", "acc_blocks_val", ".", "append", "(", "acc_blocks", ")", "\n", "acc_var_val", ".", "append", "(", "acc_var", ")", "\n", "acc_var_blocks_val", ".", "append", "(", "acc_var_blocks", ")", "\n", "\n", "ce_val", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "\n", "", "", "print", "(", "'Epoch: {:03d}'", ".", "format", "(", "epoch", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "print", "(", "'ce_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "ce_train", ")", ")", ",", "\n", "'kl_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_train", ")", ")", ",", "\n", "'acc_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_train", ")", ")", ",", "\n", "'KLb_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_train", ")", ")", ",", "\n", "'acc_b_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", "\n", ")", "\n", "print", "(", "'ce_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "ce_val", ")", ")", ",", "\n", "'kl_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_val", ")", ")", ",", "\n", "'acc_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_val", ")", ")", ",", "\n", "'KLb_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_val", ")", ")", ",", "\n", "'acc_b_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", ")", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", ")", ",", "\n", "'time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "file", "=", "log", ")", "\n", "print", "(", "'ce_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "ce_train", ")", ")", ",", "\n", "'kl_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_train", ")", ")", ",", "\n", "'acc_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_train", ")", ")", ",", "\n", "'KLb_trn: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_train", ")", ")", ",", "\n", "'acc_b_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_trn: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_train", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "print", "(", "'ce_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "ce_val", ")", ")", ",", "\n", "'kl_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_val", ")", ")", ",", "\n", "'acc_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_val", ")", ")", ",", "\n", "'KLb_val: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_val", ")", ")", ",", "\n", "'acc_b_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_val: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_val", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "labels", "=", "[", "'epoch'", ",", "'ce trn'", ",", "'kl trn'", ",", "'KLb trn'", ",", "'acc trn'", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc trn'", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' kl trn'", "for", "i", "in", "range", "(", "len", "(", "kl_list_train", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' kl var trn'", "for", "i", "in", "range", "(", "len", "(", "kl_list_train", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'acc var trn'", "]", "+", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc var trn'", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "labels", "+=", "[", "'ce val'", ",", "'kl val'", ",", "'KLb val'", ",", "'acc val'", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc val'", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' kl val'", "for", "i", "in", "range", "(", "len", "(", "kl_list_val", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'b'", "+", "str", "(", "i", ")", "+", "' kl var val'", "for", "i", "in", "range", "(", "len", "(", "kl_list_val", "[", "0", "]", ")", ")", "]", "\n", "labels", "+=", "[", "'acc var val'", "]", "+", "[", "'b'", "+", "str", "(", "i", ")", "+", "' acc var val'", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "csv_writer", ".", "writerow", "(", "labels", ")", "\n", "\n", "\n", "", "csv_writer", ".", "writerow", "(", "[", "epoch", ",", "np", ".", "mean", "(", "ce_train", ")", ",", "np", ".", "mean", "(", "kl_train", ")", ",", "np", ".", "mean", "(", "KLb_train", ")", ",", "np", ".", "mean", "(", "acc_train", ")", "]", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_var_list_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "[", "np", ".", "mean", "(", "acc_var_train", ")", "]", "+", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_train", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "[", "np", ".", "mean", "(", "ce_val", ")", ",", "np", ".", "mean", "(", "kl_val", ")", ",", "np", ".", "mean", "(", "KLb_val", ")", ",", "np", ".", "mean", "(", "acc_val", ")", "]", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_val", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_val", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_var_list_val", ")", ",", "axis", "=", "0", ")", ")", "+", "\n", "[", "np", ".", "mean", "(", "acc_var_val", ")", "]", "+", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_val", ")", ",", "axis", "=", "0", ")", ")", "\n", ")", "\n", "\n", "log", ".", "flush", "(", ")", "\n", "if", "args", ".", "save_folder", "and", "np", ".", "mean", "(", "acc_val", ")", ">", "best_val_loss", ":", "\n", "        ", "torch", ".", "save", "(", "encoder", ".", "state_dict", "(", ")", ",", "encoder_file", ")", "\n", "print", "(", "'Best model so far, saving...'", ")", "\n", "", "return", "np", ".", "mean", "(", "acc_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.None.train_enc.test": [[566, 729], ["time.time", "encoder.eval", "enumerate", "print", "print", "print", "print", "print", "encoder.load_state_dict", "encoder.load_state_dict", "print", "print", "print", "print", "print", "log.flush", "torch.load", "torch.load", "torch.no_grad", "data[].contiguous", "encoder", "ce_test.append", "acc_test.append", "acc_blocks_test.append", "acc_var_test.append", "acc_var_blocks_test.append", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "str", "utils.my_softmax", "utils.kl_categorical_uniform", "kl_test.append", "kl_list_test.append", "kl_var_list_test.append", "KLb_test.append", "KLb_blocks_test.append", "np.array", "np.array", "utils.decode_target", "utils.decode_target", "np.mean", "np.array", "np.var", "np.array", "logits.view.view", "relations.cuda.view", "F.cross_entropy", "F.binary_cross_entropy.data.item", "time.time", "np.around", "np.around", "np.around", "np.mean", "np.mean", "np.mean", "np.mean", "np.mean", "str", "str", "str", "data.cuda", "relations.cuda.cuda", "utils.kl_categorical_uniform_var", "sum.data.item", "[].cpu", "relations.cuda.cpu", "np.equal", "np.mean", "np.swapaxes", "np.array", "np.rint().astype", "np.mean", "np.mean", "np.var", "np.var", "edges.view.view", "relations.cuda.transpose().type().contiguous().view", "F.binary_cross_entropy", "kl_test.append", "kl_list_test.append", "kl_var_list_test.append", "KLb_test.append", "KLb_blocks_test.append", "torch.split", "kl_test.append", "kl_list_test.append", "kl_var_list_test.append", "np.swapaxes", "torch.cat", "np.array", "np.mean", "np.mean", "np.var", "np.var", "range", "utils.KL_between_blocks", "KLb_test.append", "KLb_blocks_test.append", "np.mean", "np.mean", "np.mean", "time.time", "np.around", "np.around", "np.around", "kl.data.item", "kl_var.data.item", "np.mean", "np.equal", "np.var", "np.array", "edges.view.cpu().detach", "np.equal", "np.mean", "np.mean", "relations.cuda.cuda", "utils.my_softmax", "sum", "sum", "sum.data.item", "np.array", "np.array.cpu", "np.equal", "np.mean", "np.mean", "len", "logits_split[].view", "relations[].contiguous().view", "F.cross_entropy", "sum().data.item", "np.array", "np.array", "np.array", "np.mean", "np.mean", "np.mean", "np.equal", "range", "np.mean", "range", "torch.exp", "relations.cuda.cpu", "np.rint", "np.sum", "np.equal", "relations.cuda.transpose().type().contiguous", "utils.kl_categorical", "utils.kl_categorical_uniform", "utils.kl_categorical_uniform_var", "kl.data.item", "kl_var.data.item", "relations.cuda.cpu", "torch.unsqueeze", "np.sum", "len", "np.equal", "KL.data.item", "np.array", "np.array", "np.array", "logits.view.max", "len", "np.equal", "len", "edges.view.cpu", "np.equal", "np.sum", "range", "range", "range", "np.equal", "np.sum", "len", "relations[].contiguous", "np.equal", "relations.cuda.transpose().type", "len", "len", "len", "pred.max", "np.equal", "sum", "relations.cuda.transpose"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.decode_target", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.KL_between_blocks", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.my_softmax", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform", "home.repos.pwc.inspect_result.ekwebb_fNRI.None.utils.kl_categorical_uniform_var"], ["", "def", "test", "(", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "\n", "ce_test", "=", "[", "]", "\n", "\n", "kl_test", "=", "[", "]", "\n", "kl_list_test", "=", "[", "]", "\n", "kl_var_list_test", "=", "[", "]", "\n", "\n", "acc_test", "=", "[", "]", "\n", "acc_blocks_test", "=", "[", "]", "\n", "acc_var_test", "=", "[", "]", "\n", "acc_var_blocks_test", "=", "[", "]", "\n", "\n", "KLb_test", "=", "[", "]", "\n", "KLb_blocks_test", "=", "[", "]", "# KL between blocks list", "\n", "\n", "encoder", ".", "eval", "(", ")", "\n", "if", "not", "args", ".", "cuda", ":", "\n", "        ", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "encoder_file", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "        ", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "encoder_file", ")", ")", "\n", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "relations", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "data", ",", "relations", "=", "data", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "\n", "", "data_encoder", "=", "data", "[", ":", ",", ":", ",", ":", "args", ".", "timesteps", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "logits", "=", "encoder", "(", "data_encoder", ",", "rel_rec", ",", "rel_send", ")", "\n", "\n", "if", "args", ".", "NRI", ":", "\n", "                ", "prob", "=", "my_softmax", "(", "logits", ",", "-", "1", ")", "\n", "\n", "loss_kl", "=", "kl_categorical_uniform", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "\n", "loss_kl_split", "=", "[", "loss_kl", "]", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob", ",", "args", ".", "num_atoms", ",", "edge_types", ")", "]", "\n", "kl_test", ".", "append", "(", "loss_kl", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_list_test", ".", "append", "(", "[", "kl", ".", "data", ".", "item", "(", ")", "for", "kl", "in", "loss_kl_split", "]", ")", "\n", "kl_var_list_test", ".", "append", "(", "[", "kl_var", ".", "data", ".", "item", "(", ")", "for", "kl_var", "in", "loss_kl_var_split", "]", ")", "\n", "\n", "KLb_test", ".", "append", "(", "0", ")", "\n", "KLb_blocks_test", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "preds", "=", "np", ".", "array", "(", "logits", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ")", "\n", "targets", "=", "np", ".", "array", "(", "relations", ".", "cpu", "(", ")", ")", "\n", "preds_list", "=", "decode_target", "(", "preds", ",", "args", ".", "edge_types_list", ")", "\n", "target_list", "=", "decode_target", "(", "targets", ",", "args", ".", "edge_types_list", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ")", "\n", "acc_blocks", "=", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "np", ".", "equal", "(", "target_list", "[", "i", "]", ",", "preds_list", "[", "i", "]", ",", "dtype", "=", "object", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "target_list", ")", ")", "]", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "acc_var_blocks", "=", "np", ".", "array", "(", "[", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "target_list", "[", "i", "]", ",", "preds_list", "[", "i", "]", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "target_list", ")", ")", "]", ")", "\n", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "edge_types", ")", "\n", "relations", "=", "relations", ".", "view", "(", "-", "1", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "relations", ")", "\n", "\n", "", "elif", "args", ".", "sigmoid", ":", "\n", "                ", "edges", "=", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "args", ".", "sigmoid_sharpness", "*", "logits", ")", ")", "\n", "\n", "targets", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "relations", ".", "cpu", "(", ")", ")", ",", "1", ",", "2", ")", "\n", "preds", "=", "np", ".", "array", "(", "edges", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "preds", "=", "np", ".", "rint", "(", "preds", ")", ".", "astype", "(", "'int'", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "args", ".", "num_factors", ")", "\n", "acc_blocks", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "args", ".", "num_factors", ",", "axis", "=", "1", ")", ")", "\n", "acc_var_blocks", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "edges", "=", "edges", ".", "view", "(", "-", "1", ")", "\n", "relations", "=", "relations", ".", "transpose", "(", "1", ",", "2", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "                    ", "relations", "=", "relations", ".", "cuda", "(", ")", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy", "(", "edges", ",", "relations", ")", "\n", "\n", "kl_test", ".", "append", "(", "0", ")", "\n", "kl_list_test", ".", "append", "(", "[", "0", "]", ")", "\n", "kl_var_list_test", ".", "append", "(", "[", "0", "]", ")", "\n", "KLb_test", ".", "append", "(", "0", ")", "\n", "KLb_blocks_test", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "", "else", ":", "\n", "                ", "logits_split", "=", "torch", ".", "split", "(", "logits", ",", "args", ".", "edge_types_list", ",", "dim", "=", "-", "1", ")", "\n", "\n", "prob_split", "=", "[", "my_softmax", "(", "logits_i", ",", "-", "1", ")", "for", "logits_i", "in", "logits_split", "]", "\n", "\n", "if", "args", ".", "prior", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical", "(", "prob_split", "[", "type_idx", "]", ",", "log_prior", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "", "else", ":", "\n", "                    ", "loss_kl_split", "=", "[", "kl_categorical_uniform", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "loss_kl", "=", "sum", "(", "loss_kl_split", ")", "\n", "\n", "loss_kl_var_split", "=", "[", "kl_categorical_uniform_var", "(", "prob_split", "[", "type_idx", "]", ",", "args", ".", "num_atoms", ",", "\n", "args", ".", "edge_types_list", "[", "type_idx", "]", ")", "\n", "for", "type_idx", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", "]", "\n", "\n", "", "kl_test", ".", "append", "(", "loss_kl", ".", "data", ".", "item", "(", ")", ")", "\n", "kl_list_test", ".", "append", "(", "[", "kl", ".", "data", ".", "item", "(", ")", "for", "kl", "in", "loss_kl_split", "]", ")", "\n", "kl_var_list_test", ".", "append", "(", "[", "kl_var", ".", "data", ".", "item", "(", ")", "for", "kl_var", "in", "loss_kl_var_split", "]", ")", "\n", "\n", "targets", "=", "np", ".", "swapaxes", "(", "np", ".", "array", "(", "relations", ".", "cpu", "(", ")", ")", ",", "1", ",", "2", ")", "\n", "preds", "=", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "pred", ".", "max", "(", "-", "1", ")", "[", "1", "]", ",", "-", "1", ")", "for", "pred", "in", "logits_split", "]", ",", "-", "1", ")", "\n", "preds", "=", "np", ".", "array", "(", "preds", ".", "cpu", "(", ")", ")", "\n", "\n", "acc", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "len", "(", "args", ".", "edge_types_list", ")", ")", "\n", "acc_blocks", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "acc_var", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "-", "1", ")", "==", "len", "(", "args", ".", "edge_types_list", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "acc_var_blocks", "=", "np", ".", "var", "(", "np", ".", "mean", "(", "np", ".", "equal", "(", "targets", ",", "preds", ",", "dtype", "=", "object", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ".", "edge_types_list", ")", ")", ":", "\n", "                    ", "logits_i", "=", "logits_split", "[", "i", "]", ".", "view", "(", "-", "1", ",", "args", ".", "edge_types_list", "[", "i", "]", ")", "\n", "relations_i", "=", "relations", "[", ":", ",", "i", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "+=", "F", ".", "cross_entropy", "(", "logits_i", ",", "relations_i", ")", "\n", "\n", "", "KLb_blocks", "=", "KL_between_blocks", "(", "prob_split", ",", "args", ".", "num_atoms", ")", "\n", "KLb_test", ".", "append", "(", "sum", "(", "KLb_blocks", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "KLb_blocks_test", ".", "append", "(", "[", "KL", ".", "data", ".", "item", "(", ")", "for", "KL", "in", "KLb_blocks", "]", ")", "\n", "\n", "", "ce_test", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "acc_test", ".", "append", "(", "acc", ")", "\n", "acc_blocks_test", ".", "append", "(", "acc_blocks", ")", "\n", "acc_var_test", ".", "append", "(", "acc_var", ")", "\n", "acc_var_blocks_test", ".", "append", "(", "acc_var_blocks", ")", "\n", "\n", "\n", "", "", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'------------Testing-------------'", ")", "\n", "print", "(", "'--------------------------------'", ")", "\n", "print", "(", "'ce_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "ce_test", ")", ")", ",", "\n", "'kl_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_test", ")", ")", ",", "\n", "'acc_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_test", ")", ")", ",", "\n", "'acc_var_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_var_test", ")", ")", ",", "\n", "'KLb_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_test", ")", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "print", "(", "'acc_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'acc_var_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ")", "\n", "if", "args", ".", "save_folder", ":", "\n", "        ", "print", "(", "'--------------------------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'------------Testing-------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'--------------------------------'", ",", "file", "=", "log", ")", "\n", "print", "(", "'ce_test: {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "ce_test", ")", ")", ",", "\n", "'kl_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "kl_test", ")", ")", ",", "\n", "'acc_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_test", ")", ")", ",", "\n", "'acc_var_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_var_test", ")", ")", ",", "\n", "'KLb_test: {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "KLb_test", ")", ")", ",", "\n", "'time: {:.1f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "file", "=", "log", ")", "\n", "print", "(", "'acc_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'acc_var_b_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "acc_var_blocks_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "'kl_test: '", "+", "str", "(", "np", ".", "around", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "kl_list_test", ")", ",", "axis", "=", "0", ")", ",", "4", ")", ")", ",", "\n", "file", "=", "log", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringSim.__init__": [[11, 23], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_balls", "=", "5", ",", "box_size", "=", "5.", ",", "loc_std", "=", ".5", ",", "vel_norm", "=", ".5", ",", "\n", "interaction_strength", "=", ".1", ",", "noise_var", "=", "0.", ")", ":", "\n", "        ", "self", ".", "n_balls", "=", "n_balls", "\n", "self", ".", "box_size", "=", "box_size", "\n", "self", ".", "loc_std", "=", "loc_std", "\n", "self", ".", "vel_norm", "=", "vel_norm", "\n", "self", ".", "interaction_strength", "=", "interaction_strength", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "\n", "self", ".", "_spring_types", "=", "np", ".", "array", "(", "[", "0.", ",", "0.5", ",", "1.", "]", ")", "\n", "self", ".", "_delta_T", "=", "0.001", "\n", "self", ".", "_max_F", "=", "0.1", "/", "self", ".", "_delta_T", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringSim._energy": [[24, 38], ["numpy.errstate", "range", "range", "numpy.sqrt"], "methods", ["None"], ["", "def", "_energy", "(", "self", ",", "loc", ",", "vel", ",", "edges", ")", ":", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "        ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "K", "=", "0.5", "*", "(", "vel", "**", "2", ")", ".", "sum", "(", ")", "\n", "U", "=", "0", "\n", "for", "i", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "if", "i", "!=", "j", ":", "\n", "                        ", "r", "=", "loc", "[", ":", ",", "i", "]", "-", "loc", "[", ":", ",", "j", "]", "\n", "dist", "=", "np", ".", "sqrt", "(", "(", "r", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "U", "+=", "0.5", "*", "self", ".", "interaction_strength", "*", "edges", "[", "\n", "i", ",", "j", "]", "*", "(", "dist", "**", "2", ")", "/", "2", "\n", "", "", "", "return", "U", "+", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringSim._clamp": [[39, 63], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "", "def", "_clamp", "(", "self", ",", "loc", ",", "vel", ")", ":", "\n", "        ", "'''\n        :param loc: 2xN location at one time stamp\n        :param vel: 2xN velocity at one time stamp\n        :return: location and velocity after hiting walls and returning after\n            elastically colliding with walls\n        '''", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<", "self", ".", "box_size", "*", "3", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">", "-", "self", ".", "box_size", "*", "3", ")", ")", "\n", "\n", "over", "=", "loc", ">", "self", ".", "box_size", "\n", "loc", "[", "over", "]", "=", "2", "*", "self", ".", "box_size", "-", "loc", "[", "over", "]", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<=", "self", ".", "box_size", ")", ")", "\n", "\n", "# assert(np.all(vel[over]>0))", "\n", "vel", "[", "over", "]", "=", "-", "np", ".", "abs", "(", "vel", "[", "over", "]", ")", "\n", "\n", "under", "=", "loc", "<", "-", "self", ".", "box_size", "\n", "loc", "[", "under", "]", "=", "-", "2", "*", "self", ".", "box_size", "-", "loc", "[", "under", "]", "\n", "# assert (np.all(vel[under] < 0))", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">=", "-", "self", ".", "box_size", ")", ")", "\n", "vel", "[", "under", "]", "=", "np", ".", "abs", "(", "vel", "[", "under", "]", ")", "\n", "\n", "return", "loc", ",", "vel", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringSim._l2": [[64, 76], ["A.dot", "B.transpose"], "methods", ["None"], ["", "def", "_l2", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "        ", "\"\"\"\n        Input: A is a Nxd matrix\n               B is a Mxd matirx\n        Output: dist is a NxM matrix where dist[i,j] is the square norm\n            between A[i,:] and B[j,:]\n        i.e. dist[i,j] = ||A[i,:]-B[j,:]||^2\n        \"\"\"", "\n", "A_norm", "=", "(", "A", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "A", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "B_norm", "=", "(", "B", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "B", ".", "shape", "[", "0", "]", ")", "\n", "dist", "=", "A_norm", "+", "B_norm", "-", "2", "*", "A", ".", "dot", "(", "B", ".", "transpose", "(", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringSim.sample_trajectory": [[77, 148], ["int", "numpy.ones", "numpy.fill_diagonal", "numpy.random.choice", "numpy.fill_diagonal", "numpy.zeros", "numpy.zeros", "numpy.random.randn", "numpy.sqrt().reshape", "synthetic_sim.SpringSim._clamp", "numpy.tril", "numpy.random.randn", "numpy.errstate", "numpy.fill_diagonal", "range", "numpy.tril", "numpy.sqrt", "synthetic_sim.SpringSim._clamp", "numpy.fill_diagonal", "numpy.random.randn", "numpy.random.randn", "forces_size.reshape", "numpy.concatenate", "forces_size.reshape", "numpy.concatenate", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp"], ["", "def", "sample_trajectory", "(", "self", ",", "T", "=", "10000", ",", "sample_freq", "=", "10", ",", "\n", "spring_prob", "=", "[", "1.", "/", "3", ",", "1.", "/", "3", ",", "1.", "/", "3", "]", ")", ":", "#### spring_prob=[1. / 2, 0, 1. / 2]", "\n", "        ", "n", "=", "self", ".", "n_balls", "\n", "assert", "(", "T", "%", "sample_freq", "==", "0", ")", "\n", "T_save", "=", "int", "(", "T", "/", "sample_freq", "-", "1", ")", "\n", "diag_mask", "=", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ",", "dtype", "=", "bool", ")", "\n", "np", ".", "fill_diagonal", "(", "diag_mask", ",", "0", ")", "\n", "counter", "=", "0", "\n", "\n", "# Sample edges", "\n", "edges", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_spring_types", ",", "# self._spring_types is an array of relative spring strengths eg. [0., 0.5, 1.]", "\n", "size", "=", "(", "self", ".", "n_balls", ",", "self", ".", "n_balls", ")", ",", "\n", "p", "=", "spring_prob", ")", "# prob. of each spring type", "\n", "# ^ this edges returns an NxN matrix of relative spring strengths", "\n", "edges", "=", "np", ".", "tril", "(", "edges", ")", "+", "np", ".", "tril", "(", "edges", ",", "-", "1", ")", ".", "T", "# this makes the edges matrix symmetric", "\n", "np", ".", "fill_diagonal", "(", "edges", ",", "0", ")", "# remove self loops", "\n", "\n", "# Initialize location and velocity", "\n", "loc", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "vel", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "loc_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "*", "self", ".", "loc_std", "# randn samples from a unit normal dist.", "\n", "vel_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "\n", "v_norm", "=", "np", ".", "sqrt", "(", "(", "vel_next", "**", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "vel_next", "=", "vel_next", "*", "self", ".", "vel_norm", "/", "v_norm", "\n", "loc", "[", "0", ",", ":", ",", ":", "]", ",", "vel", "[", "0", ",", ":", ",", ":", "]", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "forces_size", "=", "-", "self", ".", "interaction_strength", "*", "edges", "\n", "np", ".", "fill_diagonal", "(", "forces_size", ",", "\n", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "F", "=", "(", "forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "# run leapfrog", "\n", "for", "i", "in", "range", "(", "1", ",", "T", ")", ":", "\n", "                ", "loc_next", "+=", "self", ".", "_delta_T", "*", "vel_next", "\n", "loc_next", ",", "vel_next", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "if", "i", "%", "sample_freq", "==", "0", ":", "\n", "                    ", "loc", "[", "counter", ",", ":", ",", ":", "]", ",", "vel", "[", "counter", ",", ":", ",", ":", "]", "=", "loc_next", ",", "vel_next", "\n", "counter", "+=", "1", "\n", "\n", "", "forces_size", "=", "-", "self", ".", "interaction_strength", "*", "edges", "\n", "np", ".", "fill_diagonal", "(", "forces_size", ",", "0", ")", "\n", "# assert (np.abs(forces_size[diag_mask]).min() > 1e-10)", "\n", "\n", "F", "=", "(", "forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "\n", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "# Add noise to observations", "\n", "", "loc", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "vel", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "return", "loc", ",", "vel", ",", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.ChargedParticlesSim.__init__": [[151, 163], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_balls", "=", "5", ",", "box_size", "=", "5.", ",", "loc_std", "=", "1.", ",", "vel_norm", "=", "0.5", ",", "\n", "interaction_strength", "=", "1.", ",", "noise_var", "=", "0.", ")", ":", "\n", "        ", "self", ".", "n_balls", "=", "n_balls", "\n", "self", ".", "box_size", "=", "box_size", "\n", "self", ".", "loc_std", "=", "loc_std", "\n", "self", ".", "vel_norm", "=", "vel_norm", "\n", "self", ".", "interaction_strength", "=", "interaction_strength", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "\n", "self", ".", "_charge_types", "=", "np", ".", "array", "(", "[", "-", "1.", ",", "0.", ",", "1.", "]", ")", "\n", "self", ".", "_delta_T", "=", "0.001", "\n", "self", ".", "_max_F", "=", "0.1", "/", "self", ".", "_delta_T", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.ChargedParticlesSim._l2": [[164, 176], ["A.dot", "B.transpose"], "methods", ["None"], ["", "def", "_l2", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "        ", "\"\"\"\n        Input: A is a Nxd matrix\n               B is a Mxd matirx\n        Output: dist is a NxM matrix where dist[i,j] is the square norm\n            between A[i,:] and B[j,:]\n        i.e. dist[i,j] = ||A[i,:]-B[j,:]||^2\n        \"\"\"", "\n", "A_norm", "=", "(", "A", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "A", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "B_norm", "=", "(", "B", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "B", ".", "shape", "[", "0", "]", ")", "\n", "dist", "=", "A_norm", "+", "B_norm", "-", "2", "*", "A", ".", "dot", "(", "B", ".", "transpose", "(", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.ChargedParticlesSim._energy": [[177, 192], ["numpy.errstate", "range", "range", "numpy.sqrt"], "methods", ["None"], ["", "def", "_energy", "(", "self", ",", "loc", ",", "vel", ",", "edges", ")", ":", "\n", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "        ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "K", "=", "0.5", "*", "(", "vel", "**", "2", ")", ".", "sum", "(", ")", "\n", "U", "=", "0", "\n", "for", "i", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "if", "i", "!=", "j", ":", "\n", "                        ", "r", "=", "loc", "[", ":", ",", "i", "]", "-", "loc", "[", ":", ",", "j", "]", "\n", "dist", "=", "np", ".", "sqrt", "(", "(", "r", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "U", "+=", "0.5", "*", "self", ".", "interaction_strength", "*", "edges", "[", "\n", "i", ",", "j", "]", "/", "dist", "\n", "", "", "", "return", "U", "+", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.ChargedParticlesSim._clamp": [[193, 217], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "", "def", "_clamp", "(", "self", ",", "loc", ",", "vel", ")", ":", "\n", "        ", "'''\n        :param loc: 2xN location at one time stamp\n        :param vel: 2xN velocity at one time stamp\n        :return: location and velocity after hiting walls and returning after\n            elastically colliding with walls\n        '''", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<", "self", ".", "box_size", "*", "3", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">", "-", "self", ".", "box_size", "*", "3", ")", ")", "\n", "\n", "over", "=", "loc", ">", "self", ".", "box_size", "\n", "loc", "[", "over", "]", "=", "2", "*", "self", ".", "box_size", "-", "loc", "[", "over", "]", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<=", "self", ".", "box_size", ")", ")", "\n", "\n", "# assert(np.all(vel[over]>0))", "\n", "vel", "[", "over", "]", "=", "-", "np", ".", "abs", "(", "vel", "[", "over", "]", ")", "\n", "\n", "under", "=", "loc", "<", "-", "self", ".", "box_size", "\n", "loc", "[", "under", "]", "=", "-", "2", "*", "self", ".", "box_size", "-", "loc", "[", "under", "]", "\n", "# assert (np.all(vel[under] < 0))", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">=", "-", "self", ".", "box_size", ")", ")", "\n", "vel", "[", "under", "]", "=", "np", ".", "abs", "(", "vel", "[", "under", "]", ")", "\n", "\n", "return", "loc", ",", "vel", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.ChargedParticlesSim.sample_trajectory": [[218, 293], ["int", "numpy.ones", "numpy.fill_diagonal", "numpy.random.choice", "numpy.random.choice.dot", "numpy.zeros", "numpy.zeros", "numpy.random.randn", "numpy.sqrt().reshape", "synthetic_sim.ChargedParticlesSim._clamp", "numpy.random.choice.transpose", "numpy.random.randn", "numpy.errstate", "numpy.power", "numpy.fill_diagonal", "range", "numpy.sqrt", "synthetic_sim.ChargedParticlesSim._l2", "numpy.abs().min", "synthetic_sim.ChargedParticlesSim._clamp", "numpy.power", "numpy.fill_diagonal", "numpy.random.randn", "numpy.random.randn", "loc_next.transpose", "loc_next.transpose", "synthetic_sim.ChargedParticlesSim._l2", "numpy.abs", "forces_size.reshape", "numpy.concatenate", "loc_next.transpose", "loc_next.transpose", "forces_size.reshape", "numpy.concatenate", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2"], ["", "def", "sample_trajectory", "(", "self", ",", "T", "=", "10000", ",", "sample_freq", "=", "10", ",", "\n", "charge_prob", "=", "[", "1.", "/", "2", ",", "0", ",", "1.", "/", "2", "]", ")", ":", "\n", "        ", "n", "=", "self", ".", "n_balls", "\n", "assert", "(", "T", "%", "sample_freq", "==", "0", ")", "\n", "T_save", "=", "int", "(", "T", "/", "sample_freq", "-", "1", ")", "\n", "diag_mask", "=", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ",", "dtype", "=", "bool", ")", "\n", "np", ".", "fill_diagonal", "(", "diag_mask", ",", "0", ")", "\n", "counter", "=", "0", "\n", "# Sample edges", "\n", "charges", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_charge_types", ",", "size", "=", "(", "self", ".", "n_balls", ",", "1", ")", ",", "\n", "p", "=", "charge_prob", ")", "\n", "edges", "=", "charges", ".", "dot", "(", "charges", ".", "transpose", "(", ")", ")", "\n", "# Initialize location and velocity", "\n", "loc", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "vel", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "loc_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "*", "self", ".", "loc_std", "\n", "vel_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "\n", "v_norm", "=", "np", ".", "sqrt", "(", "(", "vel_next", "**", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "vel_next", "=", "vel_next", "*", "self", ".", "vel_norm", "/", "v_norm", "\n", "loc", "[", "0", ",", ":", ",", ":", "]", ",", "vel", "[", "0", ",", ":", ",", ":", "]", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "# half step leapfrog", "\n", "            ", "l2_dist_power3", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "3.", "/", "2.", ")", "\n", "\n", "# size of forces up to a 1/|r| factor", "\n", "# since I later multiply by an unnormalized r vector", "\n", "forces_size", "=", "self", ".", "interaction_strength", "*", "edges", "/", "l2_dist_power3", "\n", "np", ".", "fill_diagonal", "(", "forces_size", ",", "\n", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "assert", "(", "np", ".", "abs", "(", "forces_size", "[", "diag_mask", "]", ")", ".", "min", "(", ")", ">", "1e-10", ")", "\n", "F", "=", "(", "forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "# run leapfrog", "\n", "for", "i", "in", "range", "(", "1", ",", "T", ")", ":", "\n", "                ", "loc_next", "+=", "self", ".", "_delta_T", "*", "vel_next", "\n", "loc_next", ",", "vel_next", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "if", "i", "%", "sample_freq", "==", "0", ":", "\n", "                    ", "loc", "[", "counter", ",", ":", ",", ":", "]", ",", "vel", "[", "counter", ",", ":", ",", ":", "]", "=", "loc_next", ",", "vel_next", "\n", "counter", "+=", "1", "\n", "\n", "", "l2_dist_power3", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "\n", "3.", "/", "2.", ")", "\n", "forces_size", "=", "self", ".", "interaction_strength", "*", "edges", "/", "l2_dist_power3", "\n", "np", ".", "fill_diagonal", "(", "forces_size", ",", "0", ")", "\n", "# assert (np.abs(forces_size[diag_mask]).min() > 1e-10)", "\n", "\n", "F", "=", "(", "forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "\n", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "# Add noise to observations", "\n", "", "loc", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "vel", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "return", "loc", ",", "vel", ",", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeSim.__init__": [[295, 321], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_balls", "=", "5", ",", "box_size", "=", "5.", ",", "loc_std", "=", ".5", ",", "vel_norm", "=", ".5", ",", "noise_var", "=", "0.", ",", "\n", "spring_interaction_strength", "=", ".1", ",", "\n", "charge_interaction_strength", "=", ".2", ",", "\n", "spring_types", "=", "[", "0.", ",", "0.5", ",", "1.", "]", ",", "\n", "charge_types", "=", "[", "-", "1.", ",", "0.", ",", "1.", "]", ",", "\n", "spring_prob", "=", "[", "1.", "/", "2", ",", "0", ",", "1.", "/", "2", "]", ",", "\n", "charge_prob", "=", "[", "0", ",", "0.5", ",", "0.5", "]", ",", "\n", "uniform_draw", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "n_balls", "=", "n_balls", "\n", "self", ".", "box_size", "=", "box_size", "\n", "self", ".", "loc_std", "=", "loc_std", "\n", "self", ".", "vel_norm", "=", "vel_norm", "\n", "self", ".", "spring_interaction_strength", "=", "spring_interaction_strength", "\n", "self", ".", "charge_interaction_strength", "=", "charge_interaction_strength", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "\n", "self", ".", "spring_types", "=", "np", ".", "array", "(", "spring_types", ")", "\n", "self", ".", "charge_types", "=", "np", ".", "array", "(", "charge_types", ")", "\n", "self", ".", "spring_prob", "=", "spring_prob", "\n", "self", ".", "charge_prob", "=", "charge_prob", "\n", "\n", "self", ".", "uniform_draw", "=", "uniform_draw", "\n", "\n", "self", ".", "_delta_T", "=", "0.001", "\n", "self", ".", "_max_F", "=", "0.1", "/", "self", ".", "_delta_T", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeSim._energy": [[322, 338], ["numpy.errstate", "range", "range", "numpy.sqrt"], "methods", ["None"], ["", "def", "_energy", "(", "self", ",", "loc", ",", "vel", ",", "edges_spring", ",", "edges_charge", ")", ":", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "        ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "K", "=", "0.5", "*", "(", "vel", "**", "2", ")", ".", "sum", "(", ")", "\n", "U", "=", "0", "\n", "for", "i", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "if", "i", "!=", "j", ":", "\n", "                        ", "r", "=", "loc", "[", ":", ",", "i", "]", "-", "loc", "[", ":", ",", "j", "]", "\n", "dist", "=", "np", ".", "sqrt", "(", "(", "r", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "U", "+=", "0.5", "*", "self", ".", "spring_interaction_strength", "*", "edges_spring", "[", "\n", "i", ",", "j", "]", "*", "(", "dist", "**", "2", ")", "/", "2", "\n", "U", "+=", "0.5", "*", "self", ".", "charge_interaction_strength", "*", "edges_charge", "[", "\n", "i", ",", "j", "]", "/", "dist", "\n", "", "", "", "return", "U", "+", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeSim._clamp": [[340, 364], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "", "def", "_clamp", "(", "self", ",", "loc", ",", "vel", ")", ":", "\n", "        ", "'''\n        :param loc: 2xN location at one time stamp\n        :param vel: 2xN velocity at one time stamp\n        :return: location and velocity after hiting walls and returning after\n            elastically colliding with walls\n        '''", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<", "self", ".", "box_size", "*", "3", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">", "-", "self", ".", "box_size", "*", "3", ")", ")", "\n", "\n", "over", "=", "loc", ">", "self", ".", "box_size", "\n", "loc", "[", "over", "]", "=", "2", "*", "self", ".", "box_size", "-", "loc", "[", "over", "]", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<=", "self", ".", "box_size", ")", ")", "\n", "\n", "# assert(np.all(vel[over]>0))", "\n", "vel", "[", "over", "]", "=", "-", "np", ".", "abs", "(", "vel", "[", "over", "]", ")", "\n", "\n", "under", "=", "loc", "<", "-", "self", ".", "box_size", "\n", "loc", "[", "under", "]", "=", "-", "2", "*", "self", ".", "box_size", "-", "loc", "[", "under", "]", "\n", "# assert (np.all(vel[under] < 0))", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">=", "-", "self", ".", "box_size", ")", ")", "\n", "vel", "[", "under", "]", "=", "np", ".", "abs", "(", "vel", "[", "under", "]", ")", "\n", "\n", "return", "loc", ",", "vel", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeSim._l2": [[365, 377], ["A.dot", "B.transpose"], "methods", ["None"], ["", "def", "_l2", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "        ", "\"\"\"\n        Input: A is a Nxd matrix\n               B is a Mxd matirx\n        Output: dist is a NxM matrix where dist[i,j] is the square norm\n            between A[i,:] and B[j,:]\n        i.e. dist[i,j] = ||A[i,:]-B[j,:]||^2\n        \"\"\"", "\n", "A_norm", "=", "(", "A", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "A", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "B_norm", "=", "(", "B", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "B", ".", "shape", "[", "0", "]", ")", "\n", "dist", "=", "A_norm", "+", "B_norm", "-", "2", "*", "A", ".", "dot", "(", "B", ".", "transpose", "(", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeSim._edge_type_encode": [[378, 384], ["numpy.unique", "numpy.zeros", "range", "numpy.where"], "methods", ["None"], ["", "def", "_edge_type_encode", "(", "edges", ")", ":", "# this is used to gives each 'interaction strength' a unique integer = 0, 1, 2 ..", "\n", "        ", "unique", "=", "np", ".", "unique", "(", "edges", ")", "\n", "encode", "=", "np", ".", "zeros", "(", "edges", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "unique", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "encode", "+=", "np", ".", "where", "(", "edges", "==", "unique", "[", "i", "]", ",", "i", ",", "0", ")", "\n", "", "return", "encode", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeSim.sample_trajectory": [[385, 516], ["int", "numpy.ones", "numpy.fill_diagonal", "numpy.zeros", "numpy.zeros", "numpy.random.randn", "numpy.sqrt().reshape", "synthetic_sim.SpringChargeSim._clamp", "int", "random.randint", "range", "random.shuffle", "numpy.zeros", "numpy.array", "numpy.array", "random.randint", "range", "random.shuffle", "numpy.expand_dims", "numpy.random.choice.dot().astype", "numpy.random.choice", "numpy.fill_diagonal", "numpy.random.choice", "numpy.random.choice.dot", "numpy.random.randn", "numpy.errstate", "numpy.power", "numpy.fill_diagonal", "range", "numpy.fill_diagonal", "numpy.concatenate", "numpy.array", "numpy.tril", "numpy.random.choice.transpose", "numpy.sqrt", "synthetic_sim.SpringChargeSim._l2", "synthetic_sim.SpringChargeSim._clamp", "numpy.power", "numpy.fill_diagonal", "numpy.random.randn", "numpy.random.randn", "range", "numpy.triu_indices", "numpy.triu_indices", "range", "numpy.random.choice.dot", "numpy.tril", "loc_next.transpose", "loc_next.transpose", "synthetic_sim.SpringChargeSim._l2", "numpy.expand_dims", "numpy.expand_dims", "numpy.random.choice.transpose", "spring_forces_size.reshape", "numpy.concatenate", "charge_forces_size.reshape", "numpy.concatenate", "loc_next.transpose", "loc_next.transpose", "spring_forces_size.reshape", "numpy.concatenate", "charge_forces_size.reshape", "numpy.concatenate", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer", "numpy.subtract.outer"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2"], ["", "def", "sample_trajectory", "(", "self", ",", "T", "=", "10000", ",", "sample_freq", "=", "10", ")", ":", "\n", "        ", "n", "=", "self", ".", "n_balls", "\n", "assert", "(", "T", "%", "sample_freq", "==", "0", ")", "\n", "T_save", "=", "int", "(", "T", "/", "sample_freq", "-", "1", ")", "\n", "diag_mask", "=", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ",", "dtype", "=", "bool", ")", "\n", "np", ".", "fill_diagonal", "(", "diag_mask", ",", "0", ")", "\n", "counter", "=", "0", "\n", "\n", "if", "self", ".", "uniform_draw", ":", "\n", "\n", "            ", "total_num_edges", "=", "int", "(", "0.5", "*", "self", ".", "n_balls", "*", "(", "self", ".", "n_balls", "-", "1", ")", ")", "\n", "\n", "num_edges", "=", "random", ".", "randint", "(", "0", ",", "total_num_edges", ")", "\n", "edges", "=", "[", "0", "for", "i", "in", "range", "(", "total_num_edges", ")", "]", "\n", "for", "i", "in", "range", "(", "num_edges", ")", ":", "\n", "                ", "edges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "edges", ")", "\n", "spring_edges", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_balls", ",", "self", ".", "n_balls", ")", ")", "\n", "spring_edges", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "spring_edges", ".", "T", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "\n", "charges", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "n_balls", ")", "]", "\n", "n_c", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "n_balls", ")", "# choose a random number of charges, 1 to 5", "\n", "for", "i", "in", "range", "(", "n_c", ")", ":", "\n", "                ", "charges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "charges", ")", "\n", "charges", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "charges", ")", ",", "-", "1", ")", "\n", "charge_edges", "=", "charges", ".", "dot", "(", "charges", ".", "transpose", "(", ")", ")", ".", "astype", "(", "'float'", ")", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "spring_edges", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "spring_types", ",", "# self.spring_types is an array of relative spring strengths eg. [0., 0.5, 1.]", "\n", "size", "=", "(", "self", ".", "n_balls", ",", "self", ".", "n_balls", ")", ",", "\n", "p", "=", "self", ".", "spring_prob", ")", "# prob. of each spring type", "\n", "spring_edges", "=", "np", ".", "tril", "(", "spring_edges", ")", "+", "np", ".", "tril", "(", "spring_edges", ",", "-", "1", ")", ".", "T", "# this makes the edges matrix symmetric", "\n", "np", ".", "fill_diagonal", "(", "spring_edges", ",", "0", ")", "# remove self loops", "\n", "\n", "# Sample charge edges", "\n", "charges", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "charge_types", ",", "size", "=", "(", "self", ".", "n_balls", ",", "1", ")", ",", "p", "=", "self", ".", "charge_prob", ")", "\n", "charge_edges", "=", "charges", ".", "dot", "(", "charges", ".", "transpose", "(", ")", ")", "\n", "#np.fill_diagonal(charge_edges, 0)                    # remove self loops", "\n", "\n", "\n", "# Initialize location and velocity", "\n", "", "loc", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "vel", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "loc_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "*", "self", ".", "loc_std", "# randn samples from a unit normal dist.", "\n", "vel_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "\n", "v_norm", "=", "np", ".", "sqrt", "(", "(", "vel_next", "**", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "vel_next", "=", "vel_next", "*", "self", ".", "vel_norm", "/", "v_norm", "\n", "loc", "[", "0", ",", ":", ",", ":", "]", ",", "vel", "[", "0", ",", ":", ",", ":", "]", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "spring_forces_size", "=", "-", "self", ".", "spring_interaction_strength", "*", "spring_edges", "\n", "#np.fill_diagonal(spring_forces_size, 0)  # self forces are zero (fixes division by zero)", "\n", "\n", "l2_dist_power3", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "3.", "/", "2.", ")", "\n", "# size of forces up to a 1/|r| factor", "\n", "# since I later multiply by an unnormalized r vector", "\n", "charge_forces_size", "=", "-", "self", ".", "charge_interaction_strength", "*", "charge_edges", "/", "l2_dist_power3", "\n", "np", ".", "fill_diagonal", "(", "charge_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "#assert (np.abs(charge_forces_size[diag_mask]).min() > 1e-10)", "\n", "\n", "F_s", "=", "(", "spring_forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "#assert (np.abs(charge_forces_size[diag_mask]).min() > 1e-10)", "\n", "F_c", "=", "(", "charge_forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "F", "=", "F_s", "+", "F_c", "\n", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "T", ")", ":", "\n", "                ", "loc_next", "+=", "self", ".", "_delta_T", "*", "vel_next", "\n", "loc_next", ",", "vel_next", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "if", "i", "%", "sample_freq", "==", "0", ":", "\n", "                    ", "loc", "[", "counter", ",", ":", ",", ":", "]", ",", "vel", "[", "counter", ",", ":", ",", ":", "]", "=", "loc_next", ",", "vel_next", "\n", "counter", "+=", "1", "\n", "\n", "", "l2_dist_power3", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "3.", "/", "2.", ")", "\n", "# size of forces up to a 1/|r| factor", "\n", "# since I later multiply by an unnormalized r vector", "\n", "charge_forces_size", "=", "self", ".", "charge_interaction_strength", "*", "charge_edges", "/", "l2_dist_power3", "\n", "np", ".", "fill_diagonal", "(", "charge_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "\n", "F_s", "=", "(", "spring_forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "#assert (np.abs(charge_forces_size[diag_mask]).min() > 1e-10)", "\n", "F_c", "=", "(", "charge_forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "F", "=", "F_s", "+", "F_c", "\n", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "\n", "# Add noise to observations", "\n", "", "loc", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "vel", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "np", ".", "fill_diagonal", "(", "charge_edges", ",", "0", ")", "\n", "edges", "=", "np", ".", "concatenate", "(", "(", "np", ".", "expand_dims", "(", "spring_edges", ",", "0", ")", ",", "np", ".", "expand_dims", "(", "charge_edges", ",", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "loc", ",", "vel", ",", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeQuadSim.__init__": [[518, 534], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_balls", "=", "5", ",", "box_size", "=", "5.", ",", "loc_std", "=", ".5", ",", "vel_norm", "=", ".5", ",", "noise_var", "=", "0.", ",", "\n", "spring_interaction_strength", "=", ".1", ",", "\n", "charge_interaction_strength", "=", ".2", ",", "\n", "quad_interaction_strength", "=", ".1", ")", ":", "\n", "\n", "        ", "self", ".", "n_balls", "=", "n_balls", "\n", "self", ".", "box_size", "=", "box_size", "\n", "self", ".", "loc_std", "=", "loc_std", "\n", "self", ".", "vel_norm", "=", "vel_norm", "\n", "self", ".", "spring_interaction_strength", "=", "spring_interaction_strength", "\n", "self", ".", "charge_interaction_strength", "=", "charge_interaction_strength", "\n", "self", ".", "quad_interaction_strength", "=", "quad_interaction_strength", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "\n", "self", ".", "_delta_T", "=", "0.001", "\n", "self", ".", "_max_F", "=", "0.1", "/", "self", ".", "_delta_T", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeQuadSim._energy": [[535, 551], ["numpy.errstate", "range", "range", "numpy.sqrt"], "methods", ["None"], ["", "def", "_energy", "(", "self", ",", "loc", ",", "vel", ",", "edges_spring", ",", "edges_charge", ")", ":", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "        ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "K", "=", "0.5", "*", "(", "vel", "**", "2", ")", ".", "sum", "(", ")", "\n", "U", "=", "0", "\n", "for", "i", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "if", "i", "!=", "j", ":", "\n", "                        ", "r", "=", "loc", "[", ":", ",", "i", "]", "-", "loc", "[", ":", ",", "j", "]", "\n", "dist", "=", "np", ".", "sqrt", "(", "(", "r", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "U", "+=", "0.5", "*", "self", ".", "spring_interaction_strength", "*", "edges_spring", "[", "\n", "i", ",", "j", "]", "*", "(", "dist", "**", "2", ")", "/", "2", "\n", "U", "+=", "0.5", "*", "self", ".", "charge_interaction_strength", "*", "edges_charge", "[", "\n", "i", ",", "j", "]", "/", "dist", "\n", "", "", "", "return", "U", "+", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeQuadSim._clamp": [[553, 577], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "", "def", "_clamp", "(", "self", ",", "loc", ",", "vel", ")", ":", "\n", "        ", "'''\n        :param loc: 2xN location at one time stamp\n        :param vel: 2xN velocity at one time stamp\n        :return: location and velocity after hiting walls and returning after\n            elastically colliding with walls\n        '''", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<", "self", ".", "box_size", "*", "3", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">", "-", "self", ".", "box_size", "*", "3", ")", ")", "\n", "\n", "over", "=", "loc", ">", "self", ".", "box_size", "\n", "loc", "[", "over", "]", "=", "2", "*", "self", ".", "box_size", "-", "loc", "[", "over", "]", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<=", "self", ".", "box_size", ")", ")", "\n", "\n", "# assert(np.all(vel[over]>0))", "\n", "vel", "[", "over", "]", "=", "-", "np", ".", "abs", "(", "vel", "[", "over", "]", ")", "\n", "\n", "under", "=", "loc", "<", "-", "self", ".", "box_size", "\n", "loc", "[", "under", "]", "=", "-", "2", "*", "self", ".", "box_size", "-", "loc", "[", "under", "]", "\n", "# assert (np.all(vel[under] < 0))", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">=", "-", "self", ".", "box_size", ")", ")", "\n", "vel", "[", "under", "]", "=", "np", ".", "abs", "(", "vel", "[", "under", "]", ")", "\n", "\n", "return", "loc", ",", "vel", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeQuadSim._l2": [[578, 590], ["A.dot", "B.transpose"], "methods", ["None"], ["", "def", "_l2", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "        ", "\"\"\"\n        Input: A is a Nxd matrix\n               B is a Mxd matirx\n        Output: dist is a NxM matrix where dist[i,j] is the square norm\n            between A[i,:] and B[j,:]\n        i.e. dist[i,j] = ||A[i,:]-B[j,:]||^2\n        \"\"\"", "\n", "A_norm", "=", "(", "A", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "A", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "B_norm", "=", "(", "B", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "B", ".", "shape", "[", "0", "]", ")", "\n", "dist", "=", "A_norm", "+", "B_norm", "-", "2", "*", "A", ".", "dot", "(", "B", ".", "transpose", "(", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeQuadSim._edge_type_encode": [[591, 597], ["numpy.unique", "numpy.zeros", "range", "numpy.where"], "methods", ["None"], ["", "def", "_edge_type_encode", "(", "edges", ")", ":", "# this is used to gives each 'interaction strength' a unique integer = 0, 1, 2 ..", "\n", "        ", "unique", "=", "np", ".", "unique", "(", "edges", ")", "\n", "encode", "=", "np", ".", "zeros", "(", "edges", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "unique", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "encode", "+=", "np", ".", "where", "(", "edges", "==", "unique", "[", "i", "]", ",", "i", ",", "0", ")", "\n", "", "return", "encode", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeQuadSim._get_force": [[598, 608], ["forces_size.reshape", "numpy.concatenate", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer", "numpy.subtract.outer"], "methods", ["None"], ["", "def", "_get_force", "(", "self", ",", "forces_size", ",", "loc_next", ")", ":", "\n", "        ", "n", "=", "self", ".", "n_balls", "\n", "F", "=", "(", "forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeQuadSim.sample_trajectory": [[610, 724], ["int", "numpy.ones", "numpy.fill_diagonal", "int", "random.randint", "range", "random.shuffle", "numpy.zeros", "numpy.array", "numpy.array", "random.randint", "range", "random.shuffle", "numpy.expand_dims", "numpy.expand_dims.dot().astype", "random.randint", "range", "random.shuffle", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.random.randn", "numpy.sqrt().reshape", "synthetic_sim.SpringChargeQuadSim._clamp", "numpy.array", "numpy.random.randn", "numpy.errstate", "numpy.power", "numpy.fill_diagonal", "numpy.power", "numpy.fill_diagonal", "synthetic_sim.SpringChargeQuadSim._get_force", "synthetic_sim.SpringChargeQuadSim._get_force", "synthetic_sim.SpringChargeQuadSim._get_force", "range", "numpy.fill_diagonal", "numpy.concatenate", "range", "numpy.triu_indices", "numpy.triu_indices", "range", "numpy.expand_dims.dot", "range", "numpy.triu_indices", "numpy.triu_indices", "numpy.sqrt", "synthetic_sim.SpringChargeQuadSim._l2", "synthetic_sim.SpringChargeQuadSim._l2", "synthetic_sim.SpringChargeQuadSim._clamp", "numpy.power", "numpy.fill_diagonal", "numpy.power", "numpy.fill_diagonal", "synthetic_sim.SpringChargeQuadSim._get_force", "synthetic_sim.SpringChargeQuadSim._get_force", "synthetic_sim.SpringChargeQuadSim._get_force", "numpy.random.randn", "numpy.random.randn", "numpy.expand_dims.transpose", "loc_next.transpose", "loc_next.transpose", "loc_next.transpose", "loc_next.transpose", "synthetic_sim.SpringChargeQuadSim._l2", "synthetic_sim.SpringChargeQuadSim._l2", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "loc_next.transpose", "loc_next.transpose", "loc_next.transpose", "loc_next.transpose"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2"], ["", "def", "sample_trajectory", "(", "self", ",", "T", "=", "10000", ",", "sample_freq", "=", "10", ")", ":", "\n", "        ", "n", "=", "self", ".", "n_balls", "\n", "assert", "(", "T", "%", "sample_freq", "==", "0", ")", "\n", "T_save", "=", "int", "(", "T", "/", "sample_freq", "-", "1", ")", "\n", "diag_mask", "=", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ",", "dtype", "=", "bool", ")", "\n", "np", ".", "fill_diagonal", "(", "diag_mask", ",", "0", ")", "\n", "counter", "=", "0", "\n", "\n", "\n", "total_num_edges", "=", "int", "(", "0.5", "*", "self", ".", "n_balls", "*", "(", "self", ".", "n_balls", "-", "1", ")", ")", "\n", "\n", "num_spring_edges", "=", "random", ".", "randint", "(", "0", ",", "total_num_edges", ")", "\n", "edges", "=", "[", "0", "for", "i", "in", "range", "(", "total_num_edges", ")", "]", "\n", "for", "i", "in", "range", "(", "num_spring_edges", ")", ":", "\n", "            ", "edges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "edges", ")", "\n", "spring_edges", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_balls", ",", "self", ".", "n_balls", ")", ")", "\n", "spring_edges", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "spring_edges", ".", "T", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "\n", "charges", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "n_balls", ")", "]", "\n", "n_c", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "n_balls", ")", "# choose a random number of charges, 1 to 5", "\n", "for", "i", "in", "range", "(", "n_c", ")", ":", "\n", "            ", "charges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "charges", ")", "\n", "charges", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "charges", ")", ",", "-", "1", ")", "\n", "charge_edges", "=", "charges", ".", "dot", "(", "charges", ".", "transpose", "(", ")", ")", ".", "astype", "(", "'float'", ")", "\n", "\n", "num_quad_edges", "=", "random", ".", "randint", "(", "0", ",", "total_num_edges", ")", "\n", "edges", "=", "[", "0", "for", "i", "in", "range", "(", "total_num_edges", ")", "]", "\n", "for", "i", "in", "range", "(", "num_quad_edges", ")", ":", "\n", "            ", "edges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "edges", ")", "\n", "quad_edges", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_balls", ",", "self", ".", "n_balls", ")", ")", "\n", "quad_edges", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "quad_edges", ".", "T", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "\n", "# Initialize location and velocity", "\n", "loc", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "vel", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "loc_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "*", "self", ".", "loc_std", "# randn samples from a unit normal dist.", "\n", "vel_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "\n", "v_norm", "=", "np", ".", "sqrt", "(", "(", "vel_next", "**", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "vel_next", "=", "vel_next", "*", "self", ".", "vel_norm", "/", "v_norm", "\n", "loc", "[", "0", ",", ":", ",", ":", "]", ",", "vel", "[", "0", ",", ":", ",", ":", "]", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "spring_forces_size", "=", "-", "self", ".", "spring_interaction_strength", "*", "spring_edges", "\n", "#np.fill_diagonal(spring_forces_size, 0)  # self forces are zero (fixes division by zero)", "\n", "\n", "l2_dist_power3", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "3.", "/", "2.", ")", "\n", "# size of forces up to a 1/|r| factor", "\n", "# since I later multiply by an unnormalized r vector", "\n", "charge_forces_size", "=", "-", "self", ".", "charge_interaction_strength", "*", "charge_edges", "/", "l2_dist_power3", "\n", "np", ".", "fill_diagonal", "(", "charge_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "#assert (np.abs(charge_forces_size[diag_mask]).min() > 1e-10)", "\n", "\n", "l2_dist_powerhalf", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "1.", "/", "2.", ")", "\n", "quad_forces_size", "=", "-", "self", ".", "quad_interaction_strength", "*", "quad_edges", "*", "l2_dist_powerhalf", "\n", "np", ".", "fill_diagonal", "(", "quad_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "\n", "\n", "F_s", "=", "self", ".", "_get_force", "(", "spring_forces_size", ",", "loc_next", ")", "\n", "F_c", "=", "self", ".", "_get_force", "(", "charge_forces_size", ",", "loc_next", ")", "\n", "F_q", "=", "self", ".", "_get_force", "(", "quad_forces_size", ",", "loc_next", ")", "\n", "F", "=", "F_s", "+", "F_c", "+", "F_q", "\n", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "T", ")", ":", "\n", "                ", "loc_next", "+=", "self", ".", "_delta_T", "*", "vel_next", "\n", "loc_next", ",", "vel_next", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "if", "i", "%", "sample_freq", "==", "0", ":", "\n", "                    ", "loc", "[", "counter", ",", ":", ",", ":", "]", ",", "vel", "[", "counter", ",", ":", ",", ":", "]", "=", "loc_next", ",", "vel_next", "\n", "counter", "+=", "1", "\n", "\n", "", "l2_dist_power3", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "3.", "/", "2.", ")", "\n", "# size of forces up to a 1/|r| factor", "\n", "# since I later multiply by an unnormalized r vector", "\n", "charge_forces_size", "=", "self", ".", "charge_interaction_strength", "*", "charge_edges", "/", "l2_dist_power3", "\n", "np", ".", "fill_diagonal", "(", "charge_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "\n", "l2_dist_powerhalf", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "1.", "/", "2.", ")", "\n", "quad_forces_size", "=", "-", "self", ".", "quad_interaction_strength", "*", "quad_edges", "*", "l2_dist_powerhalf", "\n", "np", ".", "fill_diagonal", "(", "quad_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "\n", "F_s", "=", "self", ".", "_get_force", "(", "spring_forces_size", ",", "loc_next", ")", "\n", "F_c", "=", "self", ".", "_get_force", "(", "charge_forces_size", ",", "loc_next", ")", "\n", "F_q", "=", "self", ".", "_get_force", "(", "quad_forces_size", ",", "loc_next", ")", "\n", "F", "=", "F_s", "+", "F_c", "+", "F_q", "\n", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "\n", "# Add noise to observations", "\n", "", "loc", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "vel", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "np", ".", "fill_diagonal", "(", "charge_edges", ",", "0", ")", "\n", "edges", "=", "np", ".", "concatenate", "(", "(", "np", ".", "expand_dims", "(", "spring_edges", ",", "0", ")", ",", "\n", "np", ".", "expand_dims", "(", "charge_edges", ",", "0", ")", ",", "\n", "np", ".", "expand_dims", "(", "quad_edges", ",", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "loc", ",", "vel", ",", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringQuadSim.__init__": [[726, 740], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_balls", "=", "5", ",", "box_size", "=", "5.", ",", "loc_std", "=", ".5", ",", "vel_norm", "=", ".5", ",", "noise_var", "=", "0.", ",", "\n", "spring_interaction_strength", "=", ".1", ",", "\n", "quad_interaction_strength", "=", ".1", ")", ":", "\n", "\n", "        ", "self", ".", "n_balls", "=", "n_balls", "\n", "self", ".", "box_size", "=", "box_size", "\n", "self", ".", "loc_std", "=", "loc_std", "\n", "self", ".", "vel_norm", "=", "vel_norm", "\n", "self", ".", "spring_interaction_strength", "=", "spring_interaction_strength", "\n", "self", ".", "quad_interaction_strength", "=", "quad_interaction_strength", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "\n", "self", ".", "_delta_T", "=", "0.001", "\n", "self", ".", "_max_F", "=", "0.1", "/", "self", ".", "_delta_T", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringQuadSim._energy": [[741, 757], ["numpy.errstate", "range", "range", "numpy.sqrt"], "methods", ["None"], ["", "def", "_energy", "(", "self", ",", "loc", ",", "vel", ",", "edges_spring", ",", "edges_charge", ")", ":", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "        ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "K", "=", "0.5", "*", "(", "vel", "**", "2", ")", ".", "sum", "(", ")", "\n", "U", "=", "0", "\n", "for", "i", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "loc", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "if", "i", "!=", "j", ":", "\n", "                        ", "r", "=", "loc", "[", ":", ",", "i", "]", "-", "loc", "[", ":", ",", "j", "]", "\n", "dist", "=", "np", ".", "sqrt", "(", "(", "r", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "U", "+=", "0.5", "*", "self", ".", "spring_interaction_strength", "*", "edges_spring", "[", "\n", "i", ",", "j", "]", "*", "(", "dist", "**", "2", ")", "/", "2", "\n", "U", "+=", "0.5", "*", "self", ".", "charge_interaction_strength", "*", "edges_charge", "[", "\n", "i", ",", "j", "]", "/", "dist", "\n", "", "", "", "return", "U", "+", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringQuadSim._clamp": [[759, 783], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "", "def", "_clamp", "(", "self", ",", "loc", ",", "vel", ")", ":", "\n", "        ", "'''\n        :param loc: 2xN location at one time stamp\n        :param vel: 2xN velocity at one time stamp\n        :return: location and velocity after hiting walls and returning after\n            elastically colliding with walls\n        '''", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<", "self", ".", "box_size", "*", "3", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">", "-", "self", ".", "box_size", "*", "3", ")", ")", "\n", "\n", "over", "=", "loc", ">", "self", ".", "box_size", "\n", "loc", "[", "over", "]", "=", "2", "*", "self", ".", "box_size", "-", "loc", "[", "over", "]", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<=", "self", ".", "box_size", ")", ")", "\n", "\n", "# assert(np.all(vel[over]>0))", "\n", "vel", "[", "over", "]", "=", "-", "np", ".", "abs", "(", "vel", "[", "over", "]", ")", "\n", "\n", "under", "=", "loc", "<", "-", "self", ".", "box_size", "\n", "loc", "[", "under", "]", "=", "-", "2", "*", "self", ".", "box_size", "-", "loc", "[", "under", "]", "\n", "# assert (np.all(vel[under] < 0))", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">=", "-", "self", ".", "box_size", ")", ")", "\n", "vel", "[", "under", "]", "=", "np", ".", "abs", "(", "vel", "[", "under", "]", ")", "\n", "\n", "return", "loc", ",", "vel", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringQuadSim._l2": [[784, 796], ["A.dot", "B.transpose"], "methods", ["None"], ["", "def", "_l2", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "        ", "\"\"\"\n        Input: A is a Nxd matrix\n               B is a Mxd matirx\n        Output: dist is a NxM matrix where dist[i,j] is the square norm\n            between A[i,:] and B[j,:]\n        i.e. dist[i,j] = ||A[i,:]-B[j,:]||^2\n        \"\"\"", "\n", "A_norm", "=", "(", "A", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "A", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "B_norm", "=", "(", "B", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "B", ".", "shape", "[", "0", "]", ")", "\n", "dist", "=", "A_norm", "+", "B_norm", "-", "2", "*", "A", ".", "dot", "(", "B", ".", "transpose", "(", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringQuadSim._edge_type_encode": [[797, 803], ["numpy.unique", "numpy.zeros", "range", "numpy.where"], "methods", ["None"], ["", "def", "_edge_type_encode", "(", "edges", ")", ":", "# this is used to gives each 'interaction strength' a unique integer = 0, 1, 2 ..", "\n", "        ", "unique", "=", "np", ".", "unique", "(", "edges", ")", "\n", "encode", "=", "np", ".", "zeros", "(", "edges", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "unique", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "encode", "+=", "np", ".", "where", "(", "edges", "==", "unique", "[", "i", "]", ",", "i", ",", "0", ")", "\n", "", "return", "encode", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringQuadSim._get_force": [[804, 814], ["forces_size.reshape", "numpy.concatenate", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer", "numpy.subtract.outer"], "methods", ["None"], ["", "def", "_get_force", "(", "self", ",", "forces_size", ",", "loc_next", ")", ":", "\n", "        ", "n", "=", "self", ".", "n_balls", "\n", "F", "=", "(", "forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringQuadSim.sample_trajectory": [[816, 904], ["int", "numpy.ones", "numpy.fill_diagonal", "int", "random.randint", "range", "random.shuffle", "numpy.zeros", "numpy.array", "numpy.array", "random.randint", "range", "random.shuffle", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.random.randn", "numpy.sqrt().reshape", "synthetic_sim.SpringQuadSim._clamp", "numpy.random.randn", "numpy.errstate", "numpy.power", "numpy.fill_diagonal", "synthetic_sim.SpringQuadSim._get_force", "synthetic_sim.SpringQuadSim._get_force", "range", "numpy.fill_diagonal", "numpy.concatenate", "range", "numpy.triu_indices", "numpy.triu_indices", "range", "numpy.triu_indices", "numpy.triu_indices", "numpy.sqrt", "synthetic_sim.SpringQuadSim._l2", "synthetic_sim.SpringQuadSim._clamp", "numpy.power", "numpy.fill_diagonal", "synthetic_sim.SpringQuadSim._get_force", "synthetic_sim.SpringQuadSim._get_force", "numpy.random.randn", "numpy.random.randn", "loc_next.transpose", "loc_next.transpose", "synthetic_sim.SpringQuadSim._l2", "numpy.expand_dims", "numpy.expand_dims", "loc_next.transpose", "loc_next.transpose"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2"], ["", "def", "sample_trajectory", "(", "self", ",", "T", "=", "10000", ",", "sample_freq", "=", "10", ")", ":", "\n", "        ", "n", "=", "self", ".", "n_balls", "\n", "assert", "(", "T", "%", "sample_freq", "==", "0", ")", "\n", "T_save", "=", "int", "(", "T", "/", "sample_freq", "-", "1", ")", "\n", "diag_mask", "=", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ",", "dtype", "=", "bool", ")", "\n", "np", ".", "fill_diagonal", "(", "diag_mask", ",", "0", ")", "\n", "counter", "=", "0", "\n", "\n", "\n", "total_num_edges", "=", "int", "(", "0.5", "*", "self", ".", "n_balls", "*", "(", "self", ".", "n_balls", "-", "1", ")", ")", "\n", "\n", "num_spring_edges", "=", "random", ".", "randint", "(", "0", ",", "total_num_edges", ")", "\n", "edges", "=", "[", "0", "for", "i", "in", "range", "(", "total_num_edges", ")", "]", "\n", "for", "i", "in", "range", "(", "num_spring_edges", ")", ":", "\n", "            ", "edges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "edges", ")", "\n", "spring_edges", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_balls", ",", "self", ".", "n_balls", ")", ")", "\n", "spring_edges", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "spring_edges", ".", "T", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "\n", "num_quad_edges", "=", "random", ".", "randint", "(", "0", ",", "total_num_edges", ")", "\n", "edges", "=", "[", "0", "for", "i", "in", "range", "(", "total_num_edges", ")", "]", "\n", "for", "i", "in", "range", "(", "num_quad_edges", ")", ":", "\n", "            ", "edges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "edges", ")", "\n", "quad_edges", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_balls", ",", "self", ".", "n_balls", ")", ")", "\n", "quad_edges", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "quad_edges", ".", "T", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "\n", "# Initialize location and velocity", "\n", "loc", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "vel", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "loc_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "*", "self", ".", "loc_std", "# randn samples from a unit normal dist.", "\n", "vel_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "\n", "v_norm", "=", "np", ".", "sqrt", "(", "(", "vel_next", "**", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "vel_next", "=", "vel_next", "*", "self", ".", "vel_norm", "/", "v_norm", "\n", "loc", "[", "0", ",", ":", ",", ":", "]", ",", "vel", "[", "0", ",", ":", ",", ":", "]", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "spring_forces_size", "=", "-", "self", ".", "spring_interaction_strength", "*", "spring_edges", "\n", "#np.fill_diagonal(spring_forces_size, 0)  # self forces are zero (fixes division by zero)", "\n", "\n", "l2_dist_powerhalf", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "1.", "/", "2.", ")", "\n", "quad_forces_size", "=", "-", "self", ".", "quad_interaction_strength", "*", "quad_edges", "*", "l2_dist_powerhalf", "\n", "np", ".", "fill_diagonal", "(", "quad_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "\n", "\n", "F_s", "=", "self", ".", "_get_force", "(", "spring_forces_size", ",", "loc_next", ")", "\n", "F_q", "=", "self", ".", "_get_force", "(", "quad_forces_size", ",", "loc_next", ")", "\n", "F", "=", "F_s", "+", "F_q", "\n", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "T", ")", ":", "\n", "                ", "loc_next", "+=", "self", ".", "_delta_T", "*", "vel_next", "\n", "loc_next", ",", "vel_next", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "if", "i", "%", "sample_freq", "==", "0", ":", "\n", "                    ", "loc", "[", "counter", ",", ":", ",", ":", "]", ",", "vel", "[", "counter", ",", ":", ",", ":", "]", "=", "loc_next", ",", "vel_next", "\n", "counter", "+=", "1", "\n", "\n", "", "l2_dist_powerhalf", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "1.", "/", "2.", ")", "\n", "quad_forces_size", "=", "-", "self", ".", "quad_interaction_strength", "*", "quad_edges", "*", "l2_dist_powerhalf", "\n", "np", ".", "fill_diagonal", "(", "quad_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "\n", "F_s", "=", "self", ".", "_get_force", "(", "spring_forces_size", ",", "loc_next", ")", "\n", "F_q", "=", "self", ".", "_get_force", "(", "quad_forces_size", ",", "loc_next", ")", "\n", "F", "=", "F_s", "+", "F_q", "\n", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "\n", "# Add noise to observations", "\n", "", "loc", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "vel", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "np", ".", "fill_diagonal", "(", "quad_edges", ",", "0", ")", "\n", "edges", "=", "np", ".", "concatenate", "(", "(", "np", ".", "expand_dims", "(", "spring_edges", ",", "0", ")", ",", "\n", "np", ".", "expand_dims", "(", "quad_edges", ",", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "loc", ",", "vel", ",", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.__init__": [[906, 924], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_balls", "=", "5", ",", "box_size", "=", "5.", ",", "loc_std", "=", ".5", ",", "vel_norm", "=", ".5", ",", "noise_var", "=", "0.", ",", "\n", "spring_interaction_strength", "=", ".1", ",", "\n", "charge_interaction_strength", "=", ".2", ",", "\n", "fspring_interaction_strength", "=", ".1", ",", "\n", "fspring_length", "=", "1.", ")", ":", "\n", "\n", "        ", "self", ".", "n_balls", "=", "n_balls", "\n", "self", ".", "box_size", "=", "box_size", "\n", "self", ".", "loc_std", "=", "loc_std", "\n", "self", ".", "vel_norm", "=", "vel_norm", "\n", "self", ".", "spring_interaction_strength", "=", "spring_interaction_strength", "\n", "self", ".", "charge_interaction_strength", "=", "charge_interaction_strength", "\n", "self", ".", "fspring_interaction_strength", "=", "fspring_interaction_strength", "\n", "self", ".", "fspring_length", "=", "fspring_length", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "\n", "self", ".", "_delta_T", "=", "0.001", "\n", "self", ".", "_max_F", "=", "0.1", "/", "self", ".", "_delta_T", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp": [[925, 949], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "_clamp", "(", "self", ",", "loc", ",", "vel", ")", ":", "\n", "        ", "'''\n        :param loc: 2xN location at one time stamp\n        :param vel: 2xN velocity at one time stamp\n        :return: location and velocity after hiting walls and returning after\n            elastically colliding with walls\n        '''", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<", "self", ".", "box_size", "*", "3", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">", "-", "self", ".", "box_size", "*", "3", ")", ")", "\n", "\n", "over", "=", "loc", ">", "self", ".", "box_size", "\n", "loc", "[", "over", "]", "=", "2", "*", "self", ".", "box_size", "-", "loc", "[", "over", "]", "\n", "assert", "(", "np", ".", "all", "(", "loc", "<=", "self", ".", "box_size", ")", ")", "\n", "\n", "# assert(np.all(vel[over]>0))", "\n", "vel", "[", "over", "]", "=", "-", "np", ".", "abs", "(", "vel", "[", "over", "]", ")", "\n", "\n", "under", "=", "loc", "<", "-", "self", ".", "box_size", "\n", "loc", "[", "under", "]", "=", "-", "2", "*", "self", ".", "box_size", "-", "loc", "[", "under", "]", "\n", "# assert (np.all(vel[under] < 0))", "\n", "assert", "(", "np", ".", "all", "(", "loc", ">=", "-", "self", ".", "box_size", ")", ")", "\n", "vel", "[", "under", "]", "=", "np", ".", "abs", "(", "vel", "[", "under", "]", ")", "\n", "\n", "return", "loc", ",", "vel", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2": [[950, 962], ["A.dot", "B.transpose"], "methods", ["None"], ["", "def", "_l2", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "        ", "\"\"\"\n        Input: A is a Nxd matrix\n               B is a Mxd matirx\n        Output: dist is a NxM matrix where dist[i,j] is the square norm\n            between A[i,:] and B[j,:]\n        i.e. dist[i,j] = ||A[i,:]-B[j,:]||^2\n        \"\"\"", "\n", "A_norm", "=", "(", "A", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "A", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "B_norm", "=", "(", "B", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "B", ".", "shape", "[", "0", "]", ")", "\n", "dist", "=", "A_norm", "+", "B_norm", "-", "2", "*", "A", ".", "dot", "(", "B", ".", "transpose", "(", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._edge_type_encode": [[963, 969], ["numpy.unique", "numpy.zeros", "range", "numpy.where"], "methods", ["None"], ["", "def", "_edge_type_encode", "(", "edges", ")", ":", "# this is used to gives each 'interaction strength' a unique integer = 0, 1, 2 ..", "\n", "        ", "unique", "=", "np", ".", "unique", "(", "edges", ")", "\n", "encode", "=", "np", ".", "zeros", "(", "edges", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "unique", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "encode", "+=", "np", ".", "where", "(", "edges", "==", "unique", "[", "i", "]", ",", "i", ",", "0", ")", "\n", "", "return", "encode", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force": [[970, 980], ["forces_size.reshape", "numpy.concatenate", "numpy.subtract.outer().reshape", "numpy.subtract.outer().reshape", "numpy.subtract.outer", "numpy.subtract.outer"], "methods", ["None"], ["", "def", "_get_force", "(", "self", ",", "forces_size", ",", "loc_next", ")", ":", "\n", "        ", "n", "=", "self", ".", "n_balls", "\n", "F", "=", "(", "forces_size", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", "*", "\n", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "0", ",", ":", "]", ",", "\n", "loc_next", "[", "0", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ",", "\n", "np", ".", "subtract", ".", "outer", "(", "loc_next", "[", "1", ",", ":", "]", ",", "\n", "loc_next", "[", "1", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "n", ",", "n", ")", ")", ")", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.sample_trajectory": [[982, 1098], ["int", "numpy.ones", "numpy.fill_diagonal", "int", "random.randint", "range", "random.shuffle", "numpy.zeros", "numpy.array", "numpy.array", "random.randint", "range", "random.shuffle", "numpy.expand_dims", "numpy.expand_dims.dot().astype", "random.randint", "range", "random.shuffle", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.random.randn", "numpy.sqrt().reshape", "synthetic_sim.SpringChargeFspringSim._clamp", "numpy.array", "numpy.random.randn", "numpy.errstate", "numpy.power", "numpy.fill_diagonal", "numpy.power", "numpy.fill_diagonal", "synthetic_sim.SpringChargeFspringSim._get_force", "synthetic_sim.SpringChargeFspringSim._get_force", "synthetic_sim.SpringChargeFspringSim._get_force", "range", "numpy.fill_diagonal", "numpy.concatenate", "range", "numpy.triu_indices", "numpy.triu_indices", "range", "numpy.expand_dims.dot", "range", "numpy.triu_indices", "numpy.triu_indices", "numpy.sqrt", "synthetic_sim.SpringChargeFspringSim._l2", "synthetic_sim.SpringChargeFspringSim._l2", "synthetic_sim.SpringChargeFspringSim._clamp", "numpy.power", "numpy.fill_diagonal", "numpy.power", "numpy.fill_diagonal", "synthetic_sim.SpringChargeFspringSim._get_force", "synthetic_sim.SpringChargeFspringSim._get_force", "synthetic_sim.SpringChargeFspringSim._get_force", "numpy.random.randn", "numpy.random.randn", "numpy.expand_dims.transpose", "loc_next.transpose", "loc_next.transpose", "loc_next.transpose", "loc_next.transpose", "synthetic_sim.SpringChargeFspringSim._l2", "synthetic_sim.SpringChargeFspringSim._l2", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "loc_next.transpose", "loc_next.transpose", "loc_next.transpose", "loc_next.transpose"], "methods", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._clamp", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._get_force", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2", "home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim._l2"], ["", "def", "sample_trajectory", "(", "self", ",", "T", "=", "10000", ",", "sample_freq", "=", "10", ")", ":", "\n", "        ", "n", "=", "self", ".", "n_balls", "\n", "assert", "(", "T", "%", "sample_freq", "==", "0", ")", "\n", "T_save", "=", "int", "(", "T", "/", "sample_freq", "-", "1", ")", "\n", "diag_mask", "=", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ",", "dtype", "=", "bool", ")", "\n", "np", ".", "fill_diagonal", "(", "diag_mask", ",", "0", ")", "\n", "counter", "=", "0", "\n", "\n", "\n", "total_num_edges", "=", "int", "(", "0.5", "*", "self", ".", "n_balls", "*", "(", "self", ".", "n_balls", "-", "1", ")", ")", "\n", "\n", "num_spring_edges", "=", "random", ".", "randint", "(", "0", ",", "total_num_edges", ")", "\n", "edges", "=", "[", "0", "for", "i", "in", "range", "(", "total_num_edges", ")", "]", "\n", "for", "i", "in", "range", "(", "num_spring_edges", ")", ":", "\n", "            ", "edges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "edges", ")", "\n", "spring_edges", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_balls", ",", "self", ".", "n_balls", ")", ")", "\n", "spring_edges", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "spring_edges", ".", "T", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "\n", "charges", "=", "[", "0", "for", "i", "in", "range", "(", "self", ".", "n_balls", ")", "]", "\n", "n_c", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "n_balls", ")", "# choose a random number of charges, 1 to 5", "\n", "for", "i", "in", "range", "(", "n_c", ")", ":", "\n", "            ", "charges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "charges", ")", "\n", "charges", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "charges", ")", ",", "-", "1", ")", "\n", "charge_edges", "=", "charges", ".", "dot", "(", "charges", ".", "transpose", "(", ")", ")", ".", "astype", "(", "'float'", ")", "\n", "\n", "num_fspring_edges", "=", "random", ".", "randint", "(", "0", ",", "total_num_edges", ")", "\n", "edges", "=", "[", "0", "for", "i", "in", "range", "(", "total_num_edges", ")", "]", "\n", "for", "i", "in", "range", "(", "num_fspring_edges", ")", ":", "\n", "            ", "edges", "[", "i", "]", "=", "1", "\n", "", "random", ".", "shuffle", "(", "edges", ")", "\n", "fspring_edges", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_balls", ",", "self", ".", "n_balls", ")", ")", "\n", "fspring_edges", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "fspring_edges", ".", "T", "[", "np", ".", "triu_indices", "(", "self", ".", "n_balls", ",", "1", ")", "]", "=", "np", ".", "array", "(", "edges", ")", "\n", "\n", "# Initialize location and velocity", "\n", "loc", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "vel", "=", "np", ".", "zeros", "(", "(", "T_save", ",", "2", ",", "n", ")", ")", "\n", "loc_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "*", "self", ".", "loc_std", "# randn samples from a unit normal dist.", "\n", "vel_next", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "n", ")", "\n", "v_norm", "=", "np", ".", "sqrt", "(", "(", "vel_next", "**", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "vel_next", "=", "vel_next", "*", "self", ".", "vel_norm", "/", "v_norm", "\n", "loc", "[", "0", ",", ":", ",", ":", "]", ",", "vel", "[", "0", ",", ":", ",", ":", "]", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "# disables division by zero warning, since I fix it with fill_diagonal", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "\n", "            ", "spring_forces_size", "=", "-", "self", ".", "spring_interaction_strength", "*", "spring_edges", "\n", "#np.fill_diagonal(spring_forces_size, 0)  # self forces are zero (fixes division by zero)", "\n", "\n", "l2_dist_power3", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "3.", "/", "2.", ")", "\n", "# size of forces up to a 1/|r| factor", "\n", "# since I later multiply by an unnormalized r vector", "\n", "charge_forces_size", "=", "-", "self", ".", "charge_interaction_strength", "*", "charge_edges", "/", "l2_dist_power3", "\n", "np", ".", "fill_diagonal", "(", "charge_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "#assert (np.abs(charge_forces_size[diag_mask]).min() > 1e-10)", "\n", "\n", "l2_dist_powerhalf", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "1.", "/", "2.", ")", "\n", "fspring_forces_size", "=", "-", "self", ".", "fspring_interaction_strength", "*", "fspring_edges", "*", "(", "1", "-", "self", ".", "fspring_length", "/", "l2_dist_powerhalf", ")", "\n", "np", ".", "fill_diagonal", "(", "fspring_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "\n", "\n", "F_s", "=", "self", ".", "_get_force", "(", "spring_forces_size", ",", "loc_next", ")", "\n", "F_c", "=", "self", ".", "_get_force", "(", "charge_forces_size", ",", "loc_next", ")", "\n", "F_f", "=", "self", ".", "_get_force", "(", "fspring_forces_size", ",", "loc_next", ")", "\n", "F", "=", "F_s", "+", "F_c", "+", "F_f", "\n", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "T", ")", ":", "\n", "                ", "loc_next", "+=", "self", ".", "_delta_T", "*", "vel_next", "\n", "loc_next", ",", "vel_next", "=", "self", ".", "_clamp", "(", "loc_next", ",", "vel_next", ")", "\n", "\n", "if", "i", "%", "sample_freq", "==", "0", ":", "\n", "                    ", "loc", "[", "counter", ",", ":", ",", ":", "]", ",", "vel", "[", "counter", ",", ":", ",", ":", "]", "=", "loc_next", ",", "vel_next", "\n", "counter", "+=", "1", "\n", "\n", "", "l2_dist_power3", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "3.", "/", "2.", ")", "\n", "# size of forces up to a 1/|r| factor", "\n", "# since I later multiply by an unnormalized r vector", "\n", "charge_forces_size", "=", "self", ".", "charge_interaction_strength", "*", "charge_edges", "/", "l2_dist_power3", "\n", "np", ".", "fill_diagonal", "(", "charge_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "\n", "l2_dist_powerhalf", "=", "np", ".", "power", "(", "\n", "self", ".", "_l2", "(", "loc_next", ".", "transpose", "(", ")", ",", "loc_next", ".", "transpose", "(", ")", ")", ",", "1.", "/", "2.", ")", "\n", "fspring_forces_size", "=", "-", "self", ".", "fspring_interaction_strength", "*", "fspring_edges", "*", "(", "1", "-", "self", ".", "fspring_length", "/", "l2_dist_powerhalf", ")", "\n", "np", ".", "fill_diagonal", "(", "fspring_forces_size", ",", "0", ")", "# self forces are zero (fixes division by zero)", "\n", "\n", "F_s", "=", "self", ".", "_get_force", "(", "spring_forces_size", ",", "loc_next", ")", "\n", "F_c", "=", "self", ".", "_get_force", "(", "charge_forces_size", ",", "loc_next", ")", "\n", "F_f", "=", "self", ".", "_get_force", "(", "fspring_forces_size", ",", "loc_next", ")", "\n", "F", "=", "F_s", "+", "F_c", "+", "F_f", "\n", "\n", "F", "[", "F", ">", "self", ".", "_max_F", "]", "=", "self", ".", "_max_F", "\n", "F", "[", "F", "<", "-", "self", ".", "_max_F", "]", "=", "-", "self", ".", "_max_F", "\n", "vel_next", "+=", "self", ".", "_delta_T", "*", "F", "\n", "\n", "# Add noise to observations", "\n", "", "loc", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "vel", "+=", "np", ".", "random", ".", "randn", "(", "T_save", ",", "2", ",", "self", ".", "n_balls", ")", "*", "self", ".", "noise_var", "\n", "np", ".", "fill_diagonal", "(", "charge_edges", ",", "0", ")", "\n", "edges", "=", "np", ".", "concatenate", "(", "(", "np", ".", "expand_dims", "(", "spring_edges", ",", "0", ")", ",", "\n", "np", ".", "expand_dims", "(", "charge_edges", ",", "0", ")", ",", "\n", "np", ".", "expand_dims", "(", "fspring_edges", ",", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "loc", ",", "vel", ",", "edges", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ekwebb_fNRI.data.generate_dataset.generate_dataset": [[54, 73], ["list", "list", "list", "range", "numpy.stack", "numpy.stack", "numpy.stack", "time.time", "sim.sample_trajectory", "np.stack.append", "np.stack.append", "np.stack.append", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.ekwebb_fNRI.data.synthetic_sim.SpringChargeFspringSim.sample_trajectory"], ["def", "generate_dataset", "(", "num_sims", ",", "length", ",", "sample_freq", ")", ":", "\n", "    ", "loc_all", "=", "list", "(", ")", "\n", "vel_all", "=", "list", "(", ")", "\n", "edges_all", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_sims", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "loc", ",", "vel", ",", "edges", "=", "sim", ".", "sample_trajectory", "(", "T", "=", "length", ",", "sample_freq", "=", "sample_freq", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\"Iter: {}, Simulation time: {}\"", ".", "format", "(", "i", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "loc_all", ".", "append", "(", "loc", ")", "\n", "vel_all", ".", "append", "(", "vel", ")", "\n", "edges_all", ".", "append", "(", "edges", ")", "\n", "\n", "", "loc_all", "=", "np", ".", "stack", "(", "loc_all", ")", "\n", "vel_all", "=", "np", ".", "stack", "(", "vel_all", ")", "\n", "edges_all", "=", "np", ".", "stack", "(", "edges_all", ")", "\n", "\n", "return", "loc_all", ",", "vel_all", ",", "edges_all", "\n", "\n"]]}