{"home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_selection.get_gt": [[36, 41], ["numpy.unique", "numpy.argsort"], "function", ["None"], ["def", "get_gt", "(", "segment_indices", ",", "gt", ")", ":", "\n", "    ", "cls", ",", "cls_counts", "=", "np", ".", "unique", "(", "\n", "gt", "[", "segment_indices", "[", ":", ",", "0", "]", ",", "segment_indices", "[", ":", ",", "1", "]", "]", ",", "return_counts", "=", "True", "\n", ")", "\n", "return", "cls", "[", "np", ".", "argsort", "(", "cls_counts", ")", "[", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_selection.return_and_update_instances": [[43, 57], ["numpy.unique", "numpy.unique", "numpy.isin", "numpy.isin"], "function", ["None"], ["", "def", "return_and_update_instances", "(", "components_gt", ",", "box", ")", ":", "\n", "    ", "found_instances", ",", "instance_size", "=", "np", ".", "unique", "(", "\n", "components_gt", "[", "box", "[", "1", "]", ":", "box", "[", "3", "]", ",", "box", "[", "0", "]", ":", "box", "[", "2", "]", "]", ",", "return_counts", "=", "True", "\n", ")", "\n", "rel_instance_size", "=", "(", "\n", "instance_size", "\n", "/", "np", ".", "unique", "(", "\n", "components_gt", "[", "np", ".", "isin", "(", "components_gt", ",", "found_instances", ")", "]", ",", "return_counts", "=", "True", "\n", ")", "[", "1", "]", "\n", ")", "\n", "found_instances", "=", "found_instances", "[", "rel_instance_size", ">=", "0.5", "]", "\n", "found_instances", "=", "found_instances", "[", "found_instances", ">", "0", "]", "\n", "components_gt", "[", "np", ".", "isin", "(", "components_gt", ",", "found_instances", ")", "]", "=", "0", "\n", "return", "components_gt", ",", "found_instances", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_selection.config": [[59, 80], ["dict", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.abspath"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "args", "=", "dict", "(", "\n", "embeddings_file", "=", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\"embeddings_128_128_densenet201.p\"", "\n", ")", ",", "\n", "file_total_count", "=", "\"total_count_eval_128_128_a2d2.py\"", ",", "\n", "save_file_filtered", "=", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\"filtering_count_eval_128_128_a2d2.p\"", "\n", ")", ",", "\n", "save_file_total", "=", "join", "(", "CONFIG", ".", "metaseg_io_path", ",", "\"total_count_eval_128_128_a2d2.p\"", ")", ",", "\n", "plot_dir", "=", "join", "(", "\".\"", ",", "\"plots\"", ")", ",", "\n", "dpi", "=", "500", ",", "\n", "only_plot", "=", "False", ",", "\n", "min_height", "=", "128", ",", "\n", "min_width", "=", "128", ",", "\n", "plot_filetype", "=", "\"png\"", ",", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", "[", "\"plot_dir\"", "]", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"plot_dir\"", "]", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_selection.main": [[82, 246], ["src.log_utils.log_config", "_log.info", "pkl.load.items", "pkl.load.items", "matplotlib.figure", "math.ceil", "matplotlib.get_cmap", "enumerate", "plt.figure.tight_layout", "matplotlib.savefig", "_log.info", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "src.MetaSeg.functions.in_out.get_indices", "tqdm.tqdm", "_log.info", "_log.info", "int", "math.sqrt", "os.path.join", "open", "pickle.load", "os.path.join", "src.MetaSeg.functions.in_out.probs_gt_load", "numpy.unique", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.load", "src.datasets.a2d2.trainid_to_name.keys", "src.datasets.a2d2.trainid_to_name.keys", "len", "plt.figure.add_subplot", "fig.add_subplot.text", "fig.add_subplot.pie", "fig.add_subplot.set", "os.path.join", "open", "pickle.load", "src.datasets.a2d2.id_to_trainid.keys", "os.path.join", "scipy.ndimage.label", "open", "pickle.dump", "numpy.sum", "src.datasets.a2d2.id_to_trainid.keys", "range", "num_instances.items", "dict", "plt.get_cmap.", "dict", "dict", "numpy.argwhere", "np.argwhere.min", "np.argwhere.max", "eval_selection.return_and_update_instances", "num_instances.values", "numpy.array", "eval_selection.main.label_autopct"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.log_utils.log_config", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_selection.return_and_update_instances"], ["", "", "@", "ex", ".", "automain", "\n", "def", "main", "(", "args", ",", "_run", ",", "_log", ")", ":", "\n", "    ", "log_config", "(", "_run", ",", "_log", ")", "\n", "\n", "if", "not", "args", "[", "\"only_plot\"", "]", ":", "\n", "        ", "with", "open", "(", "args", "[", "\"embeddings_file\"", "]", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "image_indices", "=", "np", ".", "array", "(", "data", "[", "\"image_index\"", "]", ")", "\n", "image_level_index", "=", "np", ".", "array", "(", "data", "[", "\"image_level_index\"", "]", ")", "\n", "gt_segments", "=", "np", ".", "array", "(", "data", "[", "\"gt\"", "]", ")", "\n", "boxes", "=", "np", ".", "array", "(", "data", "[", "\"box\"", "]", ")", "\n", "\n", "inds", "=", "get_indices", "(", "\n", "join", "(", "CONFIG", ".", "metaseg_io_path", ",", "\"input\"", ",", "\"deeplabv3plus\"", ",", "\"a2d2\"", ")", "\n", ")", "\n", "\n", "if", "args", "[", "\"file_total_count\"", "]", "is", "None", ":", "\n", "            ", "total_num_instances", "=", "{", "cl", ":", "0", "for", "cl", "in", "id_to_trainid", ".", "keys", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "args", "[", "\"file_total_count\"", "]", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "total_num_instances", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "", "filtered_num_instances", "=", "{", "cl", ":", "0", "for", "cl", "in", "id_to_trainid", ".", "keys", "(", ")", "}", "\n", "\n", "for", "ind", "in", "tqdm", ".", "tqdm", "(", "inds", ")", ":", "\n", "            ", "pred", ",", "gt", ",", "img_path", "=", "probs_gt_load", "(", "\n", "ind", ",", "\n", "join", "(", "CONFIG", ".", "metaseg_io_path", ",", "\"input\"", ",", "\"deeplabv3plus\"", ",", "\"a2d2\"", ")", ",", "\n", "preds", "=", "True", ",", "\n", ")", "\n", "\n", "# count number of instances of each class of the minimum size in", "\n", "# ground truth and prediction", "\n", "for", "cl", "in", "np", ".", "unique", "(", "gt", ")", ":", "\n", "                ", "components_gt", ",", "counts_gt", "=", "label", "(", "gt", "==", "cl", ")", "\n", "if", "args", "[", "\"file_total_count\"", "]", "is", "None", ":", "\n", "                    ", "for", "c", "in", "range", "(", "1", ",", "counts_gt", "+", "1", ")", ":", "\n", "                        ", "segment_indices", "=", "np", ".", "argwhere", "(", "components_gt", "==", "c", ")", "\n", "top", ",", "left", "=", "segment_indices", ".", "min", "(", "0", ")", "\n", "bottom", ",", "right", "=", "segment_indices", ".", "max", "(", "0", ")", "\n", "if", "(", "bottom", "-", "top", ")", "<", "args", "[", "\"min_height\"", "]", "or", "(", "right", "-", "left", ")", "<", "args", "[", "\n", "\"min_width\"", "\n", "]", ":", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "total_num_instances", "[", "cl", "]", "+=", "1", "\n", "\n", "", "", "", "if", "ind", "in", "image_indices", ":", "\n", "                    ", "for", "b", "in", "boxes", "[", "\n", "(", "gt_segments", "==", "cl", ")", "\n", "&", "(", "\n", "image_level_index", "\n", "==", "np", ".", "argwhere", "(", "image_indices", "==", "ind", ")", ".", "squeeze", "(", ")", "\n", ")", ",", "\n", ":", ",", "\n", "]", ":", "\n", "                        ", "components_gt", ",", "instance_counts", "=", "return_and_update_instances", "(", "\n", "components_gt", ",", "b", "\n", ")", "\n", "filtered_num_instances", "[", "cl", "]", "+=", "instance_counts", "\n", "\n", "", "", "", "", "_log", ".", "info", "(", "\"Saving file with total counts...\"", ")", "\n", "if", "args", "[", "\"file_total_count\"", "]", "is", "None", ":", "\n", "            ", "with", "open", "(", "args", "[", "\"save_file_total\"", "]", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pkl", ".", "dump", "(", "total_num_instances", ",", "f", ")", "\n", "\n", "", "", "_log", ".", "info", "(", "\"Saving file with filtered counts...\"", ")", "\n", "with", "open", "(", "args", "[", "\"save_file_filtered\"", "]", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "filtered_num_instances", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "args", "[", "\"save_file_total\"", "]", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "total_num_instances", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", "[", "\"save_file_filtered\"", "]", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "filtered_num_instances", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "", "_log", ".", "info", "(", "\"Start plotting\"", ")", "\n", "\n", "# aggregate over training ids:", "\n", "num_instances", "=", "{", "k", ":", "0", "for", "k", "in", "trainid_to_name", ".", "keys", "(", ")", "}", "\n", "f_num_instances", "=", "{", "k", ":", "0", "for", "k", "in", "trainid_to_name", ".", "keys", "(", ")", "}", "\n", "for", "k", ",", "v", "in", "total_num_instances", ".", "items", "(", ")", ":", "\n", "        ", "num_instances", "[", "id_to_trainid", "[", "k", "]", "]", "+=", "v", "\n", "", "for", "k", ",", "v", "in", "filtered_num_instances", ".", "items", "(", ")", ":", "\n", "        ", "f_num_instances", "[", "id_to_trainid", "[", "k", "]", "]", "+=", "v", "\n", "\n", "", "sel_classes", "=", "None", "\n", "# sel_classes = [31, 22, 12, 34, 3, 35]  # classes with many extracted instances", "\n", "# sel_classes = [1, 4, 17, 24, 16, 18]  # classes with few extracted instances", "\n", "# start_angles = [45, 0, 10, 0, 0, 0]", "\n", "start_angles", "=", "[", "0", "]", "*", "6", "\n", "fontsize", "=", "8", "# noqa: F841", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "\n", "\"Class occurances filtered and not filtered\"", ",", "\n", "figsize", "=", "(", "3.3", ",", "2.5", ")", "if", "sel_classes", "is", "not", "None", "else", "(", "10", ",", "10", ")", ",", "\n", "dpi", "=", "args", "[", "\"dpi\"", "]", ",", "\n", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "plt", ".", "rcParams", "[", "\"font.serif\"", "]", "=", "[", "\"Times New Roman\"", "]", "+", "plt", ".", "rcParams", "[", "\"font.serif\"", "]", "\n", "plt", ".", "rcParams", "[", "\"font.size\"", "]", "=", "6.0", "\n", "\n", "def", "label_autopct", "(", "pct", ",", "allvals", ")", ":", "\n", "        ", "absolute", "=", "int", "(", "pct", "/", "100.0", "*", "np", ".", "sum", "(", "allvals", ")", ")", "\n", "return", "\"{:.1f}%\\n({:d})\"", ".", "format", "(", "pct", ",", "absolute", ")", "if", "pct", ">", "10", "else", "\"\"", "\n", "\n", "", "n", "=", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "len", "(", "[", "1", "for", "v", "in", "num_instances", ".", "values", "(", ")", "if", "v", ">", "0", "]", ")", ")", ")", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "\"tab20c\"", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "\n", "[", "key", "for", "key", ",", "v", "in", "num_instances", ".", "items", "(", ")", "if", "v", ">", "0", "]", "\n", "if", "sel_classes", "is", "None", "\n", "else", "sel_classes", "\n", ")", ":", "\n", "        ", "if", "num_instances", "[", "k", "]", ">", "0", ":", "\n", "            ", "ax", "=", "fig", ".", "add_subplot", "(", "\n", "n", "if", "sel_classes", "is", "None", "else", "2", ",", "n", "if", "sel_classes", "is", "None", "else", "3", ",", "i", "+", "1", "\n", ")", "\n", "ax", ".", "text", "(", "\n", "0.5", ",", "\n", "1.0", ",", "\n", "\"{}\"", ".", "format", "(", "\n", "trainid_to_name", "[", "k", "]", "\n", "if", "not", "trainid_to_name", "[", "k", "]", "[", "-", "1", "]", ".", "isdigit", "(", ")", "\n", "else", "trainid_to_name", "[", "k", "]", "[", ":", "-", "2", "]", "\n", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "transform", "=", "ax", ".", "transAxes", ",", "\n", "fontdict", "=", "dict", "(", "size", "=", "8", ")", ",", "\n", ")", "\n", "ax", ".", "pie", "(", "\n", "[", "num_instances", "[", "k", "]", "-", "f_num_instances", "[", "k", "]", ",", "f_num_instances", "[", "k", "]", "]", ",", "\n", "radius", "=", "1.2", ",", "\n", "colors", "=", "cmap", "(", "np", ".", "array", "(", "[", "10", ",", "5", "]", ")", ")", ",", "\n", "startangle", "=", "start_angles", "[", "i", "]", "if", "sel_classes", "is", "not", "None", "else", "0", ",", "\n", "# autopct=lambda pct: '{:1.0f}%'.format(pct) if pct > 10 else '',", "\n", "autopct", "=", "lambda", "pct", ":", "label_autopct", "(", "\n", "pct", ",", "[", "num_instances", "[", "k", "]", "-", "f_num_instances", "[", "k", "]", ",", "f_num_instances", "[", "k", "]", "]", "\n", ")", ",", "\n", "pctdistance", "=", "0.65", ",", "\n", "wedgeprops", "=", "dict", "(", "\n", "width", "=", "1.0", ",", "\n", "edgecolor", "=", "\"w\"", ",", "\n", "linewidth", "=", "2", ",", "\n", ")", ",", "\n", "textprops", "=", "dict", "(", "\n", "# size=fontsize,", "\n", ")", ",", "\n", ")", "\n", "ax", ".", "set", "(", "aspect", "=", "\"equal\"", ")", "\n", "", "", "fig", ".", "tight_layout", "(", "pad", "=", "0.0", ",", "h_pad", "=", "0.0", ",", "w_pad", "=", "0.6", ",", "rect", "=", "(", "0.0", ",", "0.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "plt", ".", "savefig", "(", "\n", "join", "(", "\n", "args", "[", "\"plot_dir\"", "]", ",", "\n", "\"instance_counts{}.{}\"", ".", "format", "(", "\n", "\"\"", "if", "sel_classes", "is", "None", "else", "\"_selected\"", ",", "args", "[", "\"plot_filetype\"", "]", "\n", ")", ",", "\n", ")", ",", "\n", "dpi", "=", "args", "[", "\"dpi\"", "]", ",", "\n", ")", "\n", "_log", ".", "info", "(", "\n", "\"Saved instance counts plot to '{}'\"", ".", "format", "(", "\n", "join", "(", "\n", "args", "[", "\"plot_dir\"", "]", ",", "\n", "\"instance_counts{}.{}\"", ".", "format", "(", "\n", "\"\"", "if", "sel_classes", "is", "None", "else", "\"_selected\"", ",", "args", "[", "\"plot_filetype\"", "]", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.pred": [[36, 44], ["image.cuda.cuda", "net.data.cpu", "torch.softmax", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net"], "function", ["None"], ["@", "ex", ".", "capture", "\n", "def", "pred", "(", "net", ",", "image", ",", "args", ")", ":", "\n", "    ", "image", "=", "image", ".", "cuda", "(", "args", "[", "\"gpu\"", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "out", "=", "net", "(", "image", ")", "\n", "", "out", "=", "out", ".", "data", ".", "cpu", "(", ")", "\n", "out", "=", "f", ".", "softmax", "(", "out", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.save": [[46, 54], ["h5py.File", "file.create_dataset", "file.create_dataset", "file.create_dataset", "file.create_dataset", "os.path.join", "out.squeeze().permute().numpy", "out.argmax().squeeze().numpy", "lbl.squeeze().numpy", "image_path[].encode", "out.squeeze().permute", "out.argmax().squeeze", "lbl.squeeze", "out.squeeze", "out.argmax"], "function", ["None"], ["", "def", "save", "(", "out", ",", "lbl", ",", "image_path", ",", "ind", ",", "input_dir", ")", ":", "\n", "    ", "with", "h5py", ".", "File", "(", "join", "(", "input_dir", ",", "\"input{}.hdf5\"", ".", "format", "(", "ind", ")", ")", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "file", ".", "create_dataset", "(", "\n", "\"probabilities\"", ",", "data", "=", "out", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "file", ".", "create_dataset", "(", "\"prediction\"", ",", "data", "=", "out", ".", "argmax", "(", "1", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ")", "\n", "file", ".", "create_dataset", "(", "\"ground_truths\"", ",", "data", "=", "lbl", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ")", "\n", "file", ".", "create_dataset", "(", "\"image_path\"", ",", "data", "=", "[", "image_path", "[", "0", "]", ".", "encode", "(", "\"utf8\"", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.load_net_weights": [[56, 82], ["net.load_state_dict", "len", "RuntimeError", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "FileNotFoundError", "len", "_log.warning"], "function", ["None"], ["", "", "@", "ex", ".", "capture", "\n", "def", "load_net_weights", "(", "net", ":", "nn", ".", "Module", ",", "filepath", ":", "str", ",", "_log", ")", "->", "None", ":", "\n", "    ", "try", ":", "\n", "        ", "model_checkpoint", "=", "torch", ".", "load", "(", "filepath", ")", "[", "\"state_dict\"", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "model_checkpoint", "=", "torch", ".", "load", "(", "filepath", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\n", "\"The specified model weight file '{}' could not be found!\"", ".", "format", "(", "filepath", ")", "\n", ")", "from", "e", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "raise", "e", "\n", "\n", "", "key_errors", "=", "net", ".", "load_state_dict", "(", "model_checkpoint", ",", "strict", "=", "False", ")", "\n", "if", "len", "(", "key_errors", ".", "missing_keys", ")", "==", "0", ":", "\n", "        ", "if", "len", "(", "key_errors", ".", "unexpected_keys", ")", "!=", "0", ":", "\n", "            ", "_log", ".", "warning", "(", "\n", "(", "\n", "\"The following unexpected parameters were not \"", "\n", "\"loaded into the model: \"", "\n", "\"{}\"", ".", "format", "(", "key_errors", ".", "unexpected_keys", ")", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Missing keys in state dict:\\n{}\"", ".", "format", "(", "key_errors", ".", "missing_keys", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.load_net_and_data": [[85, 164], ["torch.DataParallel", "_log.info", "net.cuda.eval", "net.cuda.cuda", "importlib.import_module", "src.imageaugmentations.Compose", "torch.utils.data.DataLoader", "pred_images.load_net_weights", "getattr", "getattr", "getattr", "torch.utils.data.Subset", "getattr", "_log.debug", "pred_images.load_net_weights", "AttributeError", "AttributeError", "src.imageaugmentations.ToTensor", "src.imageaugmentations.Normalize", "importlib.import_module", "open", "pickle.load", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "list", "importlib.import_module", "getattr", "open", "pickle.load", "range", "importlib.import_module", "len"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.load_net_weights", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.load_net_weights"], ["", "", "@", "ex", ".", "capture", "\n", "def", "load_net_and_data", "(", "args", ",", "_log", ")", ":", "\n", "    ", "\"\"\"This functions loads the image data and the semantic segmentation network\"\"\"", "\n", "\n", "# DataParallel is needed due to weight loading!", "\n", "net", "=", "nn", ".", "DataParallel", "(", "\n", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "models", "[", "args", "[", "\"model_name\"", "]", "]", ".", "module_name", ")", ",", "\n", "models", "[", "args", "[", "\"model_name\"", "]", "]", ".", "class_name", ",", "\n", ")", "(", "**", "models", "[", "args", "[", "\"model_name\"", "]", "]", ".", "kwargs", ")", ",", "\n", "device_ids", "=", "[", "args", "[", "\"gpu\"", "]", "]", ",", "\n", ")", "\n", "try", ":", "\n", "# try to load the weights into the DataParallel Module", "\n", "        ", "load_net_weights", "(", "net", ",", "models", "[", "args", "[", "\"model_name\"", "]", "]", ".", "model_weights", ")", "\n", "", "except", "RuntimeError", ":", "\n", "# If model weights were not saved while being in the DataParallel Module we can", "\n", "# try to load the weights directly into the network", "\n", "        ", "_log", ".", "debug", "(", "\n", "\"Model weights could not be loaded into the DataParallel Module. \"", "\n", "\"Trying to load them into the network directly.\"", "\n", ")", "\n", "net", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "models", "[", "args", "[", "\"model_name\"", "]", "]", ".", "module_name", ")", ",", "\n", "models", "[", "args", "[", "\"model_name\"", "]", "]", ".", "class_name", ",", "\n", ")", "(", "**", "models", "[", "args", "[", "\"model_name\"", "]", "]", ".", "kwargs", ")", "\n", "load_net_weights", "(", "net", ",", "models", "[", "args", "[", "\"model_name\"", "]", "]", ".", "model_weights", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "raise", "e", "\n", "\n", "", "_log", ".", "info", "(", "\"Loading of model weights successful\"", ")", "\n", "net", ".", "eval", "(", ")", "\n", "net", "=", "net", ".", "cuda", "(", "args", "[", "\"gpu\"", "]", ")", "\n", "\n", "traindat_module", "=", "importlib", ".", "import_module", "(", "CONFIG", ".", "TRAIN_DATASET", ".", "module_name", ")", "\n", "try", ":", "\n", "        ", "mean", "=", "getattr", "(", "traindat_module", ",", "\"mean\"", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "        ", "raise", "AttributeError", "(", "\n", "\"Could not find a data mean for normalization in your dataset module.\"", "\n", ")", "from", "err", "\n", "\n", "", "try", ":", "\n", "        ", "std", "=", "getattr", "(", "traindat_module", ",", "\"std\"", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "        ", "raise", "AttributeError", "(", "\n", "(", "\n", "\"Could not find a data standard deviation for normalization \"", "\n", "\"in your dataset module.\"", "\n", ")", "\n", ")", "from", "err", "\n", "\n", "", "trans", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "dat", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "datasets", "[", "args", "[", "\"dataset\"", "]", "]", ".", "module_name", ")", ",", "\n", "datasets", "[", "args", "[", "\"dataset\"", "]", "]", ".", "class_name", ",", "\n", ")", "(", "\n", "transform", "=", "trans", ",", "\n", "**", "datasets", "[", "args", "[", "\"dataset\"", "]", "]", ".", "kwargs", ",", "\n", ")", "\n", "\n", "if", "args", "[", "\"classindex\"", "]", "is", "not", "None", "and", "args", "[", "\"dataset\"", "]", "==", "\"a2d2\"", ":", "\n", "# get indices of the images with that specific class and subsample the dataset", "\n", "        ", "with", "open", "(", "args", "[", "\"a2d2_dataset_overview\"", "]", ",", "\"rb\"", ")", "as", "file", ":", "\n", "            ", "img_inds", "=", "pkl", ".", "load", "(", "file", ")", "\n", "\n", "", "img_inds", "=", "img_inds", "[", "args", ".", "classindex", "]", "\n", "dat", "=", "Subset", "(", "dat", ",", "img_inds", ")", "\n", "", "elif", "args", "[", "\"dataset\"", "]", "==", "\"a2d2\"", ":", "\n", "# only load a subset of a2d2. This subset is saved in a file for later reloading", "\n", "        ", "with", "open", "(", "\"a2d2_random_selection.p\"", ",", "\"rb\"", ")", "as", "file", ":", "\n", "            ", "img_inds", "=", "pkl", ".", "load", "(", "file", ")", "\n", "", "dat", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dat", ",", "img_inds", ")", "\n", "", "else", ":", "\n", "        ", "img_inds", "=", "list", "(", "range", "(", "len", "(", "dat", ")", ")", ")", "\n", "\n", "", "datloader", "=", "DataLoader", "(", "dat", ",", "batch_size", "=", "1", ",", "num_workers", "=", "args", "[", "\"num_cores\"", "]", ")", "\n", "\n", "return", "net", ",", "datloader", ",", "img_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.config": [[166, 182], ["dict", "os.makedirs"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "args", "=", "dict", "(", "\n", "dataset", "=", "CONFIG", ".", "DATASET", ".", "name", ",", "\n", "input_dir", "=", "CONFIG", ".", "INPUT_DIR", ",", "\n", "model_name", "=", "CONFIG", ".", "MODEL_NAME", ",", "\n", "classindex", "=", "CONFIG", ".", "CLASSINDEX", ",", "\n", "pretrained_model", "=", "models", "[", "CONFIG", ".", "MODEL_NAME", "]", ".", "model_weights", ",", "\n", "num_cores", "=", "CONFIG", ".", "NUM_CORES", ",", "\n", "gpu", "=", "CONFIG", ".", "GPU_ID", ",", "\n", ")", "\n", "\n", "os", ".", "makedirs", "(", "args", "[", "\"input_dir\"", "]", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "args", "[", "\"dataset\"", "]", "==", "\"a2d2\"", ":", "\n", "        ", "args", "[", "\"a2d2_dataset_overview\"", "]", "=", "\"a2d2_dataset_overview.p\"", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.main": [[184, 208], ["src.log_utils.log_config", "log.info", "pred_images.load_net_and_data", "log.info", "len", "log.debug", "enumerate", "log.info", "pred_images.pred", "pred_images.save", "log.info", "len"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.log_utils.log_config", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.load_net_and_data", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.pred", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.save"], ["", "", "@", "ex", ".", "automain", "\n", "def", "main", "(", "args", ",", "_run", ",", "_log", ")", ":", "\n", "    ", "log_config", "(", "_run", ",", "_log", ")", "\n", "# load model and data:", "\n", "log", ".", "info", "(", "\"Loading network and dataset\"", ")", "\n", "net", ",", "datloader", ",", "img_inds", "=", "load_net_and_data", "(", "args", ")", "\n", "\n", "if", "args", "[", "\"classindex\"", "]", "is", "not", "None", ":", "\n", "        ", "log", ".", "info", "(", "\n", "\"Specified class: {} // Number of images containing this class: {}\"", ".", "format", "(", "\n", "args", "[", "\"classindex\"", "]", ",", "len", "(", "img_inds", ")", "\n", ")", "\n", ")", "\n", "\n", "# predict all images and save outputs together with filename and", "\n", "# annotation to hdf5 file:", "\n", "", "log", ".", "info", "(", "\"Predicting images...\"", ")", "\n", "n", "=", "len", "(", "datloader", ")", "\n", "log", ".", "debug", "(", "\"Total number of batches to process: {}\"", ".", "format", "(", "n", ")", ")", "\n", "for", "i", ",", "(", "img", ",", "lbl", ",", "image_path", ")", "in", "enumerate", "(", "datloader", ")", ":", "\n", "        ", "out", "=", "pred", "(", "net", ",", "img", ")", "\n", "save", "(", "out", ",", "lbl", ",", "image_path", ",", "img_inds", "[", "i", "]", ",", "input_dir", "=", "args", "[", "\"input_dir\"", "]", ")", "\n", "if", "(", "(", "i", "+", "1", ")", "%", "1", ")", "==", "0", ":", "\n", "            ", "log", ".", "info", "(", "\"\\t\\t Image {}/{}\"", ".", "format", "(", "i", "+", "1", ",", "n", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.discover_embedding_space.config": [[28, 54], ["dict", "os.path.abspath", "dict", "dict", "os.path.join", "os.path.join", "os.path.splitext", "os.path.basename"], "function", ["None"], ["@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "args", "=", "dict", "(", "\n", "embeddings_file", "=", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\"embeddings_128_128_densenet201.p\"", "\n", ")", ",", "\n", "distance_metric", "=", "\"euclid\"", ",", "\n", "embedding_size", "=", "2", ",", "\n", "overwrite_embeddings", "=", "False", ",", "\n", "method", "=", "\"TSNE\"", ",", "\n", "n_jobs", "=", "CONFIG", ".", "NUM_CORES", ",", "\n", ")", "\n", "args", "[", "\"save_dir\"", "]", "=", "abspath", "(", "\n", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\n", "\"vis_\"", "+", "splitext", "(", "basename", "(", "args", "[", "\"embeddings_file\"", "]", ")", ")", "[", "0", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "mainplot", "=", "dict", "(", "legend", "=", "False", ")", "# noqa: F841", "\n", "\n", "tsne", "=", "dict", "(", "# noqa: F841", "\n", "perplexity", "=", "30", ",", "\n", "learning_rate", "=", "200.0", ",", "\n", "early_exaggeration", "=", "12.0", ",", "\n", "verbose", "=", "3", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.discover_embedding_space.main": [[57, 61], ["src.log_utils.log_config", "src.discover.Discovery"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.log_utils.log_config"], ["", "@", "ex", ".", "automain", "\n", "def", "main", "(", "args", ",", "mainplot", ",", "tsne", ",", "_run", ",", "_log", ")", ":", "\n", "    ", "log_config", "(", "_run", ",", "_log", ")", "\n", "Discovery", "(", "**", "args", ",", "main_plot_args", "=", "mainplot", ",", "tsne_args", "=", "tsne", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.train_meta_nn.config": [[34, 48], ["dict", "os.path.abspath", "os.path.join"], "function", ["None"], ["@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "args", "=", "dict", "(", "# noqa: F841", "\n", "dataset", "=", "\"cityscapes\"", ",", "\n", "dataset_val", "=", "\"cityscapes_val\"", ",", "\n", "meta_model_name", "=", "CONFIG", ".", "META_MODEL_NAME", ",", "\n", "epochs", "=", "50", ",", "\n", "learning_rate", "=", "1e-4", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", "batch_size", "=", "256", ",", "\n", "n_jobs", "=", "CONFIG", ".", "NUM_CORES", ",", "\n", "gpu", "=", "CONFIG", ".", "GPU_ID", ",", "\n", "save_folder", "=", "abspath", "(", "join", "(", "\".\"", ",", "\"src\"", ")", ")", ",", "\n", "net_name", "=", "\"meta_nn.pth\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.train_meta_nn.train": [[51, 141], ["src.log_utils.log_config", "os.makedirs", "_log.info", "src.MetaSeg.functions.helper.load_data", "src.MetaSeg.functions.helper.load_data", "src.MetaSeg.functions.meta_nn.MetricDataset", "src.MetaSeg.functions.meta_nn.MetricDataset", "_log.info", "_log.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "_log.info", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.BCEWithLogitsLoss().cuda", "torch.BCEWithLogitsLoss", "float", "range", "os.path.dirname", "net.parameters", "_log.info", "_log.info", "net.train", "_run.log_scalar", "_log.info", "net.eval", "torch.cat().mean().item", "torch.cat().mean().item", "_run.log_scalar", "torch.optim.lr_scheduler.MultiStepLR.step", "len", "len", "torch.BCEWithLogitsLoss", "torch.optim.Adam.zero_grad", "net", "nn.BCEWithLogitsLoss().cuda.", "crit.backward", "torch.optim.Adam.step", "avg_loss.append", "sum", "len", "torch.no_grad", "torch.no_grad", "_log.info", "torch.save", "torch.save", "getattr", "x.cuda.cuda", "y.cuda", "crit.item", "x.cuda.cuda", "net().data.cpu", "torch.cat().mean().item.append", "torch.cat().mean", "torch.cat().mean", "os.path.join", "importlib.import_module", "nn.BCEWithLogitsLoss.", "net.state_dict", "torch.cat", "torch.cat", "net"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.log_utils.log_config", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.load_data", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.load_data", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.train_meta_nn.train", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.save", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.save"], ["", "@", "ex", ".", "automain", "\n", "def", "train", "(", "args", ",", "_run", ",", "_log", ")", ":", "\n", "    ", "log_config", "(", "_run", ",", "_log", ")", "\n", "os", ".", "makedirs", "(", "dirname", "(", "args", "[", "\"save_folder\"", "]", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "_log", ".", "info", "(", "\"Loading data...\"", ")", "\n", "xa", ",", "ya", ",", "_", ",", "_", ",", "xa_mean", ",", "xa_std", ",", "classes_mean", ",", "classes_std", ",", "*", "_", "=", "load_data", "(", "\n", "args", "[", "\"dataset\"", "]", "\n", ")", "\n", "xa_val", ",", "ya_val", ",", "*", "_", "=", "load_data", "(", "\n", "args", "[", "\"dataset_val\"", "]", ",", "\n", "xa_mean", "=", "xa_mean", ",", "\n", "xa_std", "=", "xa_std", ",", "\n", "classes_mean", "=", "classes_mean", ",", "\n", "classes_std", "=", "classes_std", ",", "\n", ")", "\n", "\n", "dat", "=", "MetricDataset", "(", "[", "xa", ",", "ya", "]", ")", "\n", "dat_val", "=", "MetricDataset", "(", "[", "xa_val", ",", "ya_val", "]", ")", "\n", "\n", "_log", ".", "info", "(", "\"Training dataset size: {}\"", ".", "format", "(", "len", "(", "dat", ")", ")", ")", "\n", "_log", ".", "info", "(", "\"Validation dataset size: {}\"", ".", "format", "(", "len", "(", "dat_val", ")", ")", ")", "\n", "\n", "datloader", "=", "DataLoader", "(", "\n", "dat", ",", "args", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", "[", "\"n_jobs\"", "]", "\n", ")", "\n", "valloader", "=", "DataLoader", "(", "\n", "dat_val", ",", "args", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", "[", "\"n_jobs\"", "]", "\n", ")", "\n", "\n", "_log", ".", "info", "(", "\"Initializing network...\"", ")", "\n", "net", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "meta_models", "[", "args", "[", "\"meta_model_name\"", "]", "]", ".", "module_name", ")", ",", "\n", "meta_models", "[", "args", "[", "\"meta_model_name\"", "]", "]", ".", "class_name", ",", "\n", ")", "(", "xa", ".", "shape", "[", "1", "]", ",", "**", "meta_models", "[", "args", "[", "\"meta_model_name\"", "]", "]", ".", "kwargs", ")", ".", "cuda", "(", "args", "[", "\"gpu\"", "]", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "\"learning_rate\"", "]", ",", "weight_decay", "=", "args", "[", "\"weight_decay\"", "]", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "[", "20", ",", "40", "]", ",", "gamma", "=", "0.1", "\n", ")", "\n", "crit", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", ".", "cuda", "(", "args", "[", "\"gpu\"", "]", ")", "\n", "crit_val", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "\n", "min_loss", "=", "float", "(", "\"inf\"", ")", "\n", "for", "e", "in", "range", "(", "args", "[", "\"epochs\"", "]", ")", ":", "\n", "        ", "_log", ".", "info", "(", "\"Epoch {}/{}\"", ".", "format", "(", "e", "+", "1", ",", "args", "[", "\"epochs\"", "]", ")", ")", "\n", "\n", "_log", ".", "info", "(", "\"Training phase...\"", ")", "\n", "net", ".", "train", "(", ")", "\n", "avg_loss", "=", "[", "]", "\n", "for", "x", ",", "y", "in", "datloader", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "x", ",", "y", "=", "x", ".", "cuda", "(", "args", "[", "\"gpu\"", "]", ")", ",", "y", ".", "cuda", "(", "args", "[", "\"gpu\"", "]", ")", "\n", "out", "=", "net", "(", "x", ")", "\n", "\n", "loss", "=", "crit", "(", "out", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "avg_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "# _run.log_scalar('batch_loss', loss.item())", "\n", "", "avg_loss", "=", "sum", "(", "avg_loss", ")", "/", "len", "(", "avg_loss", ")", "\n", "_run", ".", "log_scalar", "(", "\"train_loss\"", ",", "avg_loss", ")", "\n", "\n", "_log", ".", "info", "(", "\"Validation phase...\"", ")", "\n", "net", ".", "eval", "(", ")", "\n", "avg_val_loss", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "x", ",", "y", "in", "valloader", ":", "\n", "                ", "x", "=", "x", ".", "cuda", "(", "args", "[", "\"gpu\"", "]", ")", "\n", "out", "=", "net", "(", "x", ")", ".", "data", ".", "cpu", "(", ")", "\n", "avg_val_loss", ".", "append", "(", "crit_val", "(", "out", ",", "y", ")", ")", "\n", "", "", "avg_val_loss", "=", "torch", ".", "cat", "(", "avg_val_loss", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "_run", ".", "log_scalar", "(", "\"val_loss\"", ",", "avg_val_loss", ")", "\n", "if", "avg_val_loss", "<", "min_loss", ":", "\n", "            ", "min_loss", "=", "avg_val_loss", "\n", "_log", ".", "info", "(", "\"Average validation loss decreased, saved model.\"", ")", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "\"state_dict\"", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "\"train_xa_mean\"", ":", "xa_mean", ",", "\n", "\"train_xa_std\"", ":", "xa_std", ",", "\n", "\"train_classes_mean\"", ":", "classes_mean", ",", "\n", "\"train_classes_std\"", ":", "classes_std", ",", "\n", "}", ",", "\n", "join", "(", "args", "[", "\"save_folder\"", "]", ",", "args", "[", "\"net_name\"", "]", ")", ",", "\n", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_iou.pool_wrapper": [[44, 46], ["eval_iou.get_ious_for_image"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_iou.get_ious_for_image"], ["def", "pool_wrapper", "(", "inputs", ")", ":", "\n", "    ", "return", "get_ious_for_image", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_iou.get_ious_for_image": [[48, 104], ["src.MetaSeg.functions.in_out.probs_gt_load", "src.MetaSeg.functions.in_out.components_load", "numpy.absolute", "numpy.zeros", "numpy.zeros", "numpy.vectorize", "numpy.vectorize", "os.path.join", "os.path.join", "src.eval_utils.iou_numpy"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.eval_utils.iou_numpy"], ["", "@", "ex", ".", "capture", "\n", "def", "get_ious_for_image", "(", "image_index", ",", "iou_pred", ",", "thresholds", ",", "args", ")", ":", "\n", "    ", "confusion_matrices_pos", "=", "{", "\n", "t", ":", "np", ".", "zeros", "(", "(", "num_categories", ",", "num_categories", ")", ")", "for", "t", "in", "thresholds", "\n", "}", "\n", "confusion_matrices_neg", "=", "{", "\n", "t", ":", "np", ".", "zeros", "(", "(", "num_categories", ",", "num_categories", ")", ")", "for", "t", "in", "thresholds", "\n", "}", "\n", "\n", "pred", ",", "gt", ",", "_", "=", "probs_gt_load", "(", "\n", "image_index", ",", "\n", "input_dir", "=", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\"input\"", ",", "\"deeplabv3plus\"", ",", "args", "[", "\"dataset\"", "]", "\n", ")", ",", "\n", "preds", "=", "True", ",", "\n", ")", "\n", "\n", "# transform a2d2 labels to cityscapes category ids", "\n", "gt", "=", "np", ".", "vectorize", "(", "label_mappings", "[", "args", "[", "\"dataset\"", "]", "]", ".", "get", ")", "(", "gt", ")", "\n", "\n", "# transform predictions to cityscapes category ids", "\n", "pred", "=", "np", ".", "vectorize", "(", "trainid_to_catid", ".", "get", ")", "(", "pred", ")", "\n", "\n", "# load components for constructing the iou mask based on different IoU thresholds", "\n", "components", "=", "components_load", "(", "\n", "image_index", ",", "\n", "components_dir", "=", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\"components\"", ",", "\"deeplabv3plus\"", ",", "args", "[", "\"dataset\"", "]", "\n", ")", ",", "\n", ")", "\n", "\n", "# border of components have been labeled with the negative index of the", "\n", "# main component itself we want however to include the border of the segment in", "\n", "# the evaluation which is why we have to make it also positive", "\n", "components", "=", "np", ".", "absolute", "(", "components", ")", "\n", "\n", "# -1 because component indices start with 1", "\n", "components", "=", "iou_pred", "[", "components", "-", "1", "]", "\n", "\n", "for", "t", "in", "thresholds", ":", "\n", "# confusion_matrices_pos[t] = iou(pred,", "\n", "#                                 gt,", "\n", "#                                 n_classes=num_categories,", "\n", "#                                 update_matrix=confusion_matrices_pos[t],", "\n", "#                                 ignore_index=0,", "\n", "#                                 mask=(components >= t))[1]", "\n", "        ", "confusion_matrices_neg", "[", "t", "]", "=", "iou", "(", "\n", "pred", ",", "\n", "gt", ",", "\n", "n_classes", "=", "num_categories", ",", "\n", "update_matrix", "=", "confusion_matrices_neg", "[", "t", "]", ",", "\n", "ignore_index", "=", "0", ",", "\n", "mask", "=", "(", "components", "<", "t", ")", ",", "\n", ")", "[", "1", "]", "\n", "\n", "", "return", "confusion_matrices_pos", ",", "confusion_matrices_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_iou.config": [[106, 123], ["dict", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.abspath"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "args", "=", "dict", "(", "\n", "meta_nn_path", "=", "join", "(", "\".\"", ",", "\"src\"", ",", "\"meta_nn.pth\"", ")", ",", "\n", "save_dir", "=", "CONFIG", ".", "metaseg_io_path", ",", "\n", "load_file", "=", "None", ",", "\n", "plot_dir", "=", "join", "(", "\".\"", ",", "\"plots\"", ")", ",", "\n", "steps", "=", "51", ",", "\n", "gpu", "=", "CONFIG", ".", "GPU_ID", ",", "\n", "dpi", "=", "400", ",", "\n", "n_workers", "=", "CONFIG", ".", "NUM_CORES", ",", "\n", "max_t", "=", "0.75", ",", "\n", "dataset", "=", "\"a2d2\"", ",", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", "[", "\"plot_dir\"", "]", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"plot_dir\"", "]", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_iou.iou_wrapper": [[125, 127], ["src.eval_utils.iou_numpy"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.eval_utils.iou_numpy"], ["", "", "def", "iou_wrapper", "(", "inputs", ")", ":", "\n", "    ", "return", "iou", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_iou.main": [[129, 249], ["src.log_utils.log_config", "_log.info", "confusion_matrices[].items", "ious_pos.sort", "confusion_matrices[].items", "ious_neg.sort", "matplotlib.get_cmap", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.set_axisbelow", "fig.add_subplot.grid", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.tick_params", "fig.add_subplot.twinx", "ax.twinx.set_ylabel", "ax.twinx.tick_params", "fig.add_subplot.plot", "ax.twinx.plot", "matplotlib.savefig", "_log.info", "_log.info", "_log.info", "src.MetaSeg.functions.helper.load_data", "_log.info", "src.MetaSeg.functions.helper.load_data", "src.MetaSeg.functions.calculate.meta_nn_predict", "src.MetaSeg.functions.in_out.get_indices", "numpy.linspace", "dict", "_log.info", "numpy.linspace", "ious_pos.append", "ious_neg.append", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "open", "pickle.load", "multiprocessing.Pool", "list", "open", "pickle.dump", "open", "pickle.load", "numpy.diag", "numpy.diag", "plt.get_cmap.", "plt.get_cmap.", "plt.get_cmap.", "plt.get_cmap.", "plt.get_cmap.", "plt.get_cmap.", "os.path.join", "enumerate", "tqdm.tqdm", "r[].items", "os.path.join", "v.sum", "v.sum", "v.sum", "v.sum", "numpy.zeros", "numpy.zeros", "p.imap", "len"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.log_utils.log_config", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.load_data", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.load_data", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.meta_nn_predict", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices"], ["", "@", "ex", ".", "automain", "\n", "def", "main", "(", "args", ",", "_run", ",", "_log", ")", ":", "\n", "    ", "log_config", "(", "_run", ",", "_log", ")", "\n", "\n", "if", "args", "[", "\"load_file\"", "]", "is", "None", ":", "\n", "        ", "_log", ".", "info", "(", "\"Loading data...\"", ")", "\n", "_log", ".", "info", "(", "\"Cityscapes...\"", ")", "\n", "\n", "# load cityscapes train data for normalization of out of domain data", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "xa_mean", ",", "xa_std", ",", "classes_mean", ",", "classes_std", ",", "*", "_", "=", "load_data", "(", "\n", "\"cityscapes\"", "\n", ")", "\n", "\n", "_log", ".", "info", "(", "\"{}...\"", ".", "format", "(", "args", "[", "\"dataset\"", "]", ")", ")", "\n", "xa", ",", "*", "_", ",", "start", ",", "_", "=", "load_data", "(", "\n", "args", "[", "\"dataset\"", "]", ",", "\n", "xa_mean", "=", "xa_mean", ",", "\n", "xa_std", "=", "xa_std", ",", "\n", "classes_mean", "=", "classes_mean", ",", "\n", "classes_std", "=", "classes_std", ",", "\n", ")", "\n", "\n", "# predict iou using MetaSeg metrics", "\n", "iou_pred", "=", "meta_nn_predict", "(", "args", "[", "\"meta_nn_path\"", "]", ",", "xa", ",", "gpu", "=", "args", "[", "\"gpu\"", "]", ")", "\n", "\n", "# get all available input file IDs", "\n", "inds", "=", "get_indices", "(", "\n", "join", "(", "CONFIG", ".", "metaseg_io_path", ",", "\"metrics\"", ",", "\"deeplabv3plus\"", ",", "args", "[", "\"dataset\"", "]", ")", "\n", ")", "\n", "\n", "# construct thresholds and dictionary for saving", "\n", "thresholds", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "args", "[", "\"steps\"", "]", ")", "\n", "confusion_matrices", "=", "dict", "(", "\n", "pos", "=", "{", "t", ":", "np", ".", "zeros", "(", "(", "num_categories", ",", "num_categories", ")", ")", "for", "t", "in", "thresholds", "}", ",", "\n", "neg", "=", "{", "t", ":", "np", ".", "zeros", "(", "(", "num_categories", ",", "num_categories", ")", ")", "for", "t", "in", "thresholds", "}", ",", "\n", ")", "\n", "\n", "with", "open", "(", "\"/data/poberdie/metaseg/confusion_matrices.p\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "confusion_matrices", "[", "\"pos\"", "]", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Calculating IoUs...\"", ")", "\n", "inputs", "=", "[", "\n", "(", "ind", ",", "iou_pred", "[", "start", "[", "i", "]", ":", "start", "[", "i", "+", "1", "]", "]", ",", "thresholds", ")", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "inds", ")", "\n", "]", "\n", "with", "Pool", "(", "args", "[", "\"n_workers\"", "]", ")", "as", "p", ":", "\n", "            ", "res", "=", "list", "(", "tqdm", ".", "tqdm", "(", "p", ".", "imap", "(", "pool_wrapper", ",", "inputs", ")", ",", "total", "=", "len", "(", "inputs", ")", ")", ")", "\n", "for", "r", "in", "res", ":", "\n", "# for t, v in r[0].items():", "\n", "#     confusion_matrices['pos'][t] += v", "\n", "                ", "for", "t", ",", "v", "in", "r", "[", "1", "]", ".", "items", "(", ")", ":", "\n", "                    ", "confusion_matrices", "[", "\"neg\"", "]", "[", "t", "]", "+=", "v", "\n", "\n", "", "", "", "with", "open", "(", "\n", "join", "(", "args", "[", "\"save_dir\"", "]", ",", "\"confusion_matrices_{}.p\"", ".", "format", "(", "args", "[", "\"dataset\"", "]", ")", ")", ",", "\n", "\"wb\"", ",", "\n", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "confusion_matrices", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "thresholds", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "args", "[", "\"steps\"", "]", ")", "\n", "with", "open", "(", "args", "[", "\"load_file\"", "]", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "confusion_matrices", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "", "_log", ".", "info", "(", "\"Start plotting\"", ")", "\n", "ious_pos", "=", "[", "]", "\n", "for", "t", ",", "v", "in", "confusion_matrices", "[", "\"pos\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "tp", "=", "np", ".", "diag", "(", "v", ")", "[", "1", ":", "]", "\n", "fn", "=", "v", ".", "sum", "(", "0", ")", "[", "1", ":", "]", "-", "tp", "\n", "fp", "=", "v", ".", "sum", "(", "1", ")", "[", "1", ":", "]", "-", "tp", "\n", "ious_pos", ".", "append", "(", "(", "t", ",", "(", "tp", "/", "(", "tp", "+", "fp", "+", "fn", "+", "1e-6", ")", ")", ".", "mean", "(", ")", "*", "100", ")", ")", "\n", "\n", "", "ious_pos", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "ious_pos", "=", "[", "i", "[", "1", "]", "for", "i", "in", "ious_pos", "if", "i", "[", "0", "]", "<", "args", "[", "\"max_t\"", "]", "]", "\n", "\n", "ious_neg", "=", "[", "]", "\n", "for", "t", ",", "v", "in", "confusion_matrices", "[", "\"neg\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "tp", "=", "np", ".", "diag", "(", "v", ")", "[", "1", ":", "]", "\n", "fn", "=", "v", ".", "sum", "(", "0", ")", "[", "1", ":", "]", "-", "tp", "\n", "fp", "=", "v", ".", "sum", "(", "1", ")", "[", "1", ":", "]", "-", "tp", "\n", "ious_neg", ".", "append", "(", "(", "t", ",", "(", "tp", "/", "(", "tp", "+", "fp", "+", "fn", "+", "1e-6", ")", ")", ".", "mean", "(", ")", "*", "100", ")", ")", "\n", "\n", "", "ious_neg", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "ious_neg", "=", "[", "i", "[", "1", "]", "for", "i", "in", "ious_neg", "if", "i", "[", "0", "]", "<", "args", "[", "\"max_t\"", "]", "]", "\n", "\n", "colmap", "=", "plt", ".", "get_cmap", "(", "\"tab20c\"", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "\"IoU under different thresholds\"", ",", "dpi", "=", "args", "[", "\"dpi\"", "]", ")", "\n", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "ax", ".", "set_axisbelow", "(", "True", ")", "\n", "ax", ".", "grid", "(", "linestyle", "=", "\"--\"", ")", "\n", "ax", ".", "set_xlabel", "(", "\"Threshold t on predicted IoU\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"mIoU in % for segments below t\"", ",", "color", "=", "colmap", "(", "4", ")", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "\"y\"", ",", "labelcolor", "=", "colmap", "(", "4", ")", ")", "\n", "\n", "ax2", "=", "ax", ".", "twinx", "(", ")", "\n", "ax2", ".", "set_ylabel", "(", "\"mIoU in % for segments above t\"", ",", "color", "=", "colmap", "(", "8", ")", ")", "\n", "ax2", ".", "tick_params", "(", "axis", "=", "\"y\"", ",", "labelcolor", "=", "colmap", "(", "8", ")", ")", "\n", "\n", "ax", ".", "plot", "(", "\n", "thresholds", "[", "thresholds", "<", "args", "[", "\"max_t\"", "]", "]", ",", "\n", "np", ".", "array", "(", "ious_neg", ")", ",", "\n", "color", "=", "colmap", "(", "4", ")", ",", "\n", "linestyle", "=", "\"-\"", ",", "\n", ")", "\n", "ax2", ".", "plot", "(", "\n", "thresholds", "[", "thresholds", "<", "args", "[", "\"max_t\"", "]", "]", ",", "\n", "np", ".", "array", "(", "ious_pos", ")", ",", "\n", "color", "=", "colmap", "(", "8", ")", ",", "\n", "linestyle", "=", "\"-\"", ",", "\n", ")", "\n", "\n", "plt", ".", "savefig", "(", "\n", "join", "(", "args", "[", "\"plot_dir\"", "]", ",", "\"iou_plot_{}.png\"", ".", "format", "(", "args", "[", "\"dataset\"", "]", ")", ")", ",", "\n", "dpi", "=", "args", "[", "\"dpi\"", "]", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", ")", "\n", "_log", ".", "info", "(", "\n", "\"Saved plot to '{}'\"", ".", "format", "(", "\n", "join", "(", "args", "[", "\"plot_dir\"", "]", ",", "\"iou_plot_{}.png\"", ".", "format", "(", "args", "[", "\"dataset\"", "]", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.wrapper_cutout_components": [[51, 54], ["compute_embeddings.cutout_components"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.cutout_components"], ["def", "wrapper_cutout_components", "(", "args", ")", ":", "\n", "    ", "\"\"\"Wrapper for the multiprocessing pool.\"\"\"", "\n", "return", "cutout_components", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.cutout_components": [[57, 153], ["src.MetaSeg.functions.in_out.components_load", "numpy.argwhere", "os.path.join", "np.argwhere.min", "np.argwhere.max", "crops[].append", "crops[].append", "crops[].append", "IndexError", "IndexError"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_load"], ["", "def", "cutout_components", "(", "\n", "component_indices", ",", "\n", "image_index", ",", "\n", "iou_pred", ",", "\n", "dataset", "=", "\"a2d2\"", ",", "\n", "min_height", "=", "64", ",", "\n", "min_width", "=", "64", ",", "\n", "min_crop_height", "=", "128", ",", "\n", "min_crop_width", "=", "128", ",", "\n", "model_name", "=", "\"deeplabv3plus\"", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Cuts out all components of the image if they match the minimum size requirements.\n\n    Args:\n        component_indices (sequence): Sequence of local component numbers.\n        image_index (int): Index of the image to process.\n        iou_pred (numpy array): Array of iou predictions for each component\n        dataset (str): Name of the dataset to process.\n        min_height (int): Minimum height of the component to be processed. Useful if\n            you want to pass the crop to a neural network.\n        min_width (int): Minimum height of the component to be processed. Useful if you\n            want to pass the crop to a neural network .\n        min_crop_width (int): Minimum width the resulting bounding box should have.\n            If the segment satisfies the min_width but is smaller then min_crop_width\n            the bounding box is getting enlarged until the min_crop_width is satisfied.\n        min_crop_height: Minimum height the resulting bounding box should have. If the\n            segment satisfies the min_height but is smaller then min_crop_height the\n            bounding box is getting enlarged until the min_crop_height is satisfied.\n        model_name (str): Name of the model used.\n\n    Returns: Dictionary with\n        'dataset': Name of the dataset the image belongs to.\n        'model_name': Name of the model used for the prediction\n        'data': List of raw image crops containing the matching components\n        'addresses':\n            List of addresses where to find the crop (path to the image file\n            and corner coordinates of the box (top, left, bottom, right)\n    \"\"\"", "\n", "components", "=", "components_load", "(", "\n", "image_index", ",", "\n", "components_dir", "=", "join", "(", "CONFIG", ".", "metaseg_io_path", ",", "\"components\"", ",", "model_name", ",", "dataset", ")", ",", "\n", ")", "\n", "crops", "=", "{", "\n", "\"dataset\"", ":", "dataset", ",", "\n", "\"model_name\"", ":", "model_name", ",", "\n", "\"embeddings\"", ":", "[", "]", ",", "\n", "\"boxes\"", ":", "[", "]", ",", "\n", "\"image_index\"", ":", "image_index", ",", "\n", "\"iou_pred\"", ":", "iou_pred", ",", "\n", "\"component_indices\"", ":", "[", "]", ",", "\n", "\"segment_indices\"", ":", "[", "]", ",", "\n", "\"img_crops\"", ":", "[", "]", ",", "\n", "}", "\n", "for", "cindex", "in", "component_indices", ":", "\n", "        ", "segment_indices", "=", "np", ".", "argwhere", "(", "components", "==", "cindex", ")", "\n", "if", "segment_indices", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "upper", ",", "left", "=", "segment_indices", ".", "min", "(", "0", ")", "\n", "lower", ",", "right", "=", "segment_indices", ".", "max", "(", "0", ")", "\n", "if", "(", "lower", "-", "upper", ")", "<", "min_height", "or", "(", "right", "-", "left", ")", "<", "min_width", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "(", "right", "-", "left", ")", "<", "min_crop_width", ":", "\n", "                ", "margin", "=", "min_crop_width", "-", "(", "right", "-", "left", ")", "\n", "if", "left", "-", "(", "margin", "//", "2", ")", "<", "0", ":", "\n", "                    ", "left", "=", "0", "\n", "right", "=", "left", "+", "min_crop_width", "\n", "", "elif", "right", "+", "(", "margin", "//", "2", ")", ">", "components", ".", "shape", "[", "1", "]", ":", "\n", "                    ", "right", "=", "components", ".", "shape", "[", "1", "]", "\n", "left", "=", "right", "-", "min_crop_width", "\n", "\n", "", "if", "right", ">", "components", ".", "shape", "[", "1", "]", "or", "left", "<", "0", ":", "\n", "                    ", "raise", "IndexError", "(", "\n", "\"Image with shape {} is too small for a {} x {} crop\"", ".", "format", "(", "\n", "components", ".", "shape", ",", "min_crop_height", ",", "min_crop_width", "\n", ")", "\n", ")", "\n", "", "", "if", "(", "lower", "-", "upper", ")", "<", "min_crop_height", ":", "\n", "                ", "margin", "=", "min_crop_height", "-", "(", "lower", "-", "upper", ")", "\n", "if", "upper", "-", "(", "margin", "//", "2", ")", "<", "0", ":", "\n", "                    ", "upper", "=", "0", "\n", "lower", "=", "upper", "+", "min_crop_height", "\n", "", "elif", "lower", "+", "(", "margin", "//", "2", ")", ">", "components", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "lower", "=", "components", ".", "shape", "[", "0", "]", "\n", "upper", "=", "lower", "-", "min_crop_height", "\n", "\n", "", "if", "lower", ">", "components", ".", "shape", "[", "0", "]", "or", "upper", "<", "0", ":", "\n", "                    ", "raise", "IndexError", "(", "\n", "\"Image with shape {} is too small for a {} x {} crop\"", ".", "format", "(", "\n", "components", ".", "shape", ",", "min_crop_height", ",", "min_crop_width", "\n", ")", "\n", ")", "\n", "\n", "", "", "crops", "[", "\"boxes\"", "]", ".", "append", "(", "(", "left", ",", "upper", ",", "right", ",", "lower", ")", ")", "\n", "crops", "[", "\"component_indices\"", "]", ".", "append", "(", "cindex", ")", "\n", "crops", "[", "\"segment_indices\"", "]", ".", "append", "(", "segment_indices", ")", "\n", "", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.get_image_index_to_components": [[155, 173], ["range", "len", "numpy.logical_and"], "function", ["None"], ["", "def", "get_image_index_to_components", "(", "component_indices", ",", "start", ")", ":", "\n", "    ", "\"\"\"Maps global component indices and start values to their local component indices\n    and image index.\n\n    Args:\n        component_indices (sequence): Sequence of component indices.\n        start (sequence): Sequence of indices where components of each image start\n    \"\"\"", "\n", "out", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "start", ")", "-", "1", ")", ":", "\n", "        ", "index", "=", "component_indices", "[", "\n", "np", ".", "logical_and", "(", "\n", "start", "[", "i", "]", "<=", "component_indices", ",", "component_indices", "<", "start", "[", "i", "+", "1", "]", "\n", ")", "\n", "]", "\n", "out", "[", "i", "]", "=", "[", "j", "-", "start", "[", "i", "]", "+", "1", "for", "j", "in", "index", "]", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.get_embedding": [[175, 192], ["image.cuda.cuda", "net.data.cpu().squeeze().numpy", "torch.no_grad", "net", "net.data.cpu().squeeze", "net.data.cpu"], "function", ["None"], ["", "@", "ex", ".", "capture", "\n", "def", "get_embedding", "(", "image", ",", "net", ",", "args", ")", ":", "\n", "    ", "\"\"\"Computes the output of the supplied neural network with respect to the supplied\n    image.\n\n    Args:\n        image (tensor): Image tensor to be processed by the neural network.\n        net (nn.Module): Neural Network to use.\n        args: Arguments provided by sacred.\n\n    Returns: Output tensor of the neural network moved to the cpu\n\n    \"\"\"", "\n", "image", "=", "image", ".", "cuda", "(", "args", "[", "\"gpu\"", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "out", "=", "net", "(", "image", ")", "\n", "", "return", "out", ".", "data", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.get_component_gt": [[194, 201], ["numpy.unique", "numpy.argsort"], "function", ["None"], ["", "def", "get_component_gt", "(", "gt", ",", "segment_indices", ")", ":", "\n", "    ", "\"\"\"Computes the ground truth for the supplied gt labels and segment indices.\"\"\"", "\n", "cls", ",", "cls_counts", "=", "np", ".", "unique", "(", "\n", "gt", "[", "segment_indices", "[", ":", ",", "0", "]", ",", "segment_indices", "[", ":", ",", "1", "]", "]", ",", "return_counts", "=", "True", "\n", ")", "\n", "# cls, cls_counts = np.unique(gt[box[1]:box[3], box[0]:box[2]], return_counts=True)", "\n", "return", "cls", "[", "np", ".", "argsort", "(", "cls_counts", ")", "[", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.get_component_pred": [[203, 207], ["None"], "function", ["None"], ["", "def", "get_component_pred", "(", "pred", ",", "segment_indices", ")", ":", "\n", "    ", "\"\"\"Computes the prediction of a segment based on the supplied predictions and\n    segment indices.\"\"\"", "\n", "return", "pred", "[", "segment_indices", "[", "0", ",", "0", "]", ",", "segment_indices", "[", "0", ",", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.config": [[209, 241], ["dict", "os.path.join"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "args", "=", "dict", "(", "\n", "net", "=", "\"densenet201\"", ",", "# Network architecture used for computing visual features", "\n", "datasets", "=", "(", "CONFIG", ".", "TRAIN_DATASET", ".", "name", ",", "CONFIG", ".", "DATASET", ".", "name", ")", ",", "\n", "# First specified dataset will always be used as source domain", "\n", "load_file", "=", "None", ",", "# File in which segments got already extracted. If specified", "\n", "# the file get's loaded and", "\n", "# the embeddings in there are overwritten.", "\n", "gpu", "=", "CONFIG", ".", "GPU_ID", ",", "# GPU id to use for computation of features for the", "\n", "# embedding space", "\n", "n_jobs", "=", "CONFIG", ".", "NUM_CORES", ",", "# Number of processes to use for the extraction of", "\n", "# all bounding boxes", "\n", "min_height", "=", "128", ",", "# Minimum height of a predicted segment", "\n", "min_width", "=", "128", ",", "# Minimum width of a predicted segment", "\n", "min_crop_height", "=", "128", ",", "# Minimum height of the resulting bounding box, can be", "\n", "# larger than min_height", "\n", "min_crop_width", "=", "128", ",", "# Minimum width of the resulting bounding box, can be", "\n", "# larger than min_width", "\n", "meta_nn_path", "=", "\"./src/meta_nn.pth\"", ",", "# Path to the meta segmentation model", "\n", "iou_threshold", "=", "0.5", ",", "# Threshold to use for extracting segments based on", "\n", "# predicted IoU", "\n", "meta_model", "=", "CONFIG", ".", "META_MODEL_TYPE", ",", "# Model type to use for meta segmentation", "\n", ")", "\n", "\n", "if", "args", "[", "\"meta_model\"", "]", "==", "\"neural\"", ":", "\n", "        ", "args", "[", "\"meta_nn_path\"", "]", "=", "\"./src/meta_nn.pth\"", "\n", "\n", "", "args", "[", "\"save_file\"", "]", "=", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\n", "\"embeddings_{}_{}_{}.p\"", ".", "format", "(", "\n", "args", "[", "\"min_height\"", "]", ",", "args", "[", "\"min_width\"", "]", ",", "args", "[", "\"net\"", "]", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.main": [[245, 505], ["src.log_utils.log_config", "_log.info", "src.embedding_networks.feature_densenet201.cuda", "src.embedding_networks.feature_densenet201.eval", "src.embedding_networks.feature_vgg16", "_log.info", "enumerate", "numpy.concatenate().squeeze", "numpy.concatenate().squeeze", "numpy.array().squeeze", "numpy.array().squeeze", "_log.debug", "_log.info", "_log.info", "numpy.zeros().astype", "numpy.logical_or", "hasattr", "_log.info", "_log.info", "numpy.unique().flatten", "numpy.argwhere().flatten", "compute_embeddings.get_image_index_to_components", "_log.info", "_log.info", "tqdm.tqdm", "_log.info", "_log.info", "numpy.array().squeeze", "numpy.array().squeeze", "tqdm.tqdm", "_log.info", "src.embedding_networks.feature_resnet18", "all", "_log.info", "torch.load", "_log.info", "src.MetaSeg.functions.helper.load_data", "_log.info", "src.MetaSeg.functions.in_out.get_indices", "src.MetaSeg.functions.helper.load_data", "np.concatenate().squeeze.append", "np.concatenate().squeeze.append", "start_others.append", "src.MetaSeg.functions.calculate.meta_nn_predict", "importlib.import_module", "getattr", "numpy.logical_and", "getattr", "_log.info", "multiprocessing.Pool", "list", "src.MetaSeg.functions.in_out.probs_gt_load", "crops[].append", "crops[].append", "crops[].append", "crops[].append", "crops[].append", "PIL.open().convert", "enumerate", "open", "pickle.dump", "open", "pickle.load", "enumerate", "PIL.open().convert", "numpy.argwhere().flatten", "open", "pickle.dump", "src.embedding_networks.feature_resnet101", "os.path.join", "len", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "src.MetaSeg.functions.calculate.regression_fit_and_predict", "ValueError", "numpy.zeros", "importlib.import_module", "numpy.isin", "importlib.import_module", "numpy.unique", "numpy.argwhere", "get_image_index_to_components.items", "tqdm.tqdm", "crops[].append", "crops[].append", "crops[].append", "crops[].append", "crops[].append", "crops[].append", "numpy.array", "numpy.array", "len", "crops[].append", "src.embedding_networks.feature_resnet152", "max", "inds[].sum", "p.imap", "len", "os.path.join", "PIL.open", "torchvision.ToTensor", "Image.open().convert.crop", "torchvision.Normalize", "compute_embeddings.get_embedding", "compute_embeddings.get_component_gt", "compute_embeddings.get_component_pred", "PIL.open", "numpy.argwhere", "torchvision.ToTensor", "Image.open().convert.crop", "torchvision.Normalize", "compute_embeddings.get_embedding", "src.embedding_networks.feature_wide_resnet101", "torch.load().keys", "max", "len", "img.unsqueeze", "len", "img.unsqueeze", "src.embedding_networks.feature_densenet201", "torch.load", "len", "len", "train_dat.pred_mapping.values", "len", "len", "train_dat.pred_mapping.values"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.log_utils.log_config", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_vgg16", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.get_image_index_to_components", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_resnet18", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.load_data", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.load_data", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.meta_nn_predict", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_resnet101", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.regression_fit_and_predict", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_resnet152", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.get_embedding", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.get_component_gt", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.get_component_pred", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.compute_embeddings.get_embedding", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_wide_resnet101", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_densenet201"], ["", "@", "ex", ".", "automain", "\n", "def", "main", "(", "args", ",", "_run", ",", "_log", ")", ":", "\n", "    ", "log_config", "(", "_run", ",", "_log", ")", "\n", "# load a network architecture", "\n", "_log", ".", "info", "(", "\"Loading {}...\"", ".", "format", "(", "args", "[", "\"net\"", "]", ")", ")", "\n", "if", "args", "[", "\"net\"", "]", "==", "\"vgg16\"", ":", "\n", "        ", "net", "=", "feature_vgg16", "(", ")", "\n", "", "elif", "args", "[", "\"net\"", "]", "==", "\"resnet18\"", ":", "\n", "        ", "net", "=", "feature_resnet18", "(", ")", "\n", "", "elif", "args", "[", "\"net\"", "]", "==", "\"resnet101\"", ":", "\n", "        ", "net", "=", "feature_resnet101", "(", ")", "\n", "", "elif", "args", "[", "\"net\"", "]", "==", "\"resnet152\"", ":", "\n", "        ", "net", "=", "feature_resnet152", "(", ")", "\n", "", "elif", "args", "[", "\"net\"", "]", "==", "\"wide_resnet101\"", ":", "\n", "        ", "net", "=", "feature_wide_resnet101", "(", ")", "\n", "", "elif", "args", "[", "\"net\"", "]", "==", "\"densenet201\"", ":", "\n", "        ", "net", "=", "feature_densenet201", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "", "net", "=", "net", ".", "cuda", "(", "args", "[", "\"gpu\"", "]", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "# if no precomputed segments have been supplied, they have to be computed", "\n", "if", "args", "[", "\"load_file\"", "]", "is", "None", ":", "\n", "        ", "_log", ".", "info", "(", "\"Loading Metrics...\"", ")", "\n", "xa_all", "=", "[", "]", "\n", "start_others", "=", "[", "]", "\n", "pred_test", "=", "[", "]", "\n", "dataset_assignments", "=", "[", "]", "\n", "image_indices", "=", "[", "]", "\n", "\n", "# the first dataset of the 'datasets' configuration serves as source domain", "\n", "# dataset. Metric statistics of this dataset are used to normalize the target", "\n", "# domain metric statistics. This is why it has to get loaded too.", "\n", "if", "args", "[", "\"meta_model\"", "]", "==", "\"neural\"", "and", "all", "(", "\n", "i", "in", "torch", ".", "load", "(", "args", "[", "\"meta_nn_path\"", "]", ")", ".", "keys", "(", ")", "\n", "for", "i", "in", "[", "\n", "\"train_xa_mean\"", ",", "\n", "\"train_xa_std\"", ",", "\n", "\"train_classes_mean\"", ",", "\n", "\"train_classes_std\"", ",", "\n", "]", "\n", ")", ":", "\n", "            ", "_log", ".", "info", "(", "\n", "\"Loading values for normalization from saved model file '{}'\"", ".", "format", "(", "\n", "args", "[", "\"meta_nn_path\"", "]", "\n", ")", "\n", ")", "\n", "model_dict", "=", "torch", ".", "load", "(", "args", "[", "\"meta_nn_path\"", "]", ")", "\n", "xa_mean", "=", "model_dict", "[", "\"train_xa_mean\"", "]", "\n", "xa_std", "=", "model_dict", "[", "\"train_xa_std\"", "]", "\n", "classes_mean", "=", "model_dict", "[", "\"train_classes_mean\"", "]", "\n", "classes_std", "=", "model_dict", "[", "\"train_classes_std\"", "]", "\n", "", "else", ":", "\n", "            ", "_log", ".", "info", "(", "\"{}...\"", ".", "format", "(", "args", "[", "\"datasets\"", "]", "[", "0", "]", ")", ")", "\n", "(", "\n", "xa", ",", "\n", "ya", ",", "\n", "x_names", ",", "\n", "class_names", ",", "\n", "xa_mean", ",", "\n", "xa_std", ",", "\n", "classes_mean", ",", "\n", "classes_std", ",", "\n", "*", "_", ",", "\n", "start", ",", "\n", "pred", ",", "\n", ")", "=", "load_data", "(", "args", "[", "\"datasets\"", "]", "[", "0", "]", ")", "\n", "\n", "# Now load all other metric statistics and normalize them using the source", "\n", "# domain mean and standard deviation", "\n", "", "for", "i", ",", "d", "in", "enumerate", "(", "args", "[", "\"datasets\"", "]", "[", "1", ":", "]", ",", "start", "=", "1", ")", ":", "\n", "            ", "_log", ".", "info", "(", "\"{} ...\"", ".", "format", "(", "d", ")", ")", "\n", "num_imgs", "=", "get_indices", "(", "\n", "join", "(", "CONFIG", ".", "metaseg_io_path", ",", "\"metrics\"", ",", "\"deeplabv3plus\"", ",", "d", ")", "\n", ")", "\n", "xa_tmp", ",", "*", "_", ",", "start_tmp", ",", "pred_tmp", "=", "load_data", "(", "\n", "d", ",", "\n", "num_imgs", "=", "num_imgs", ",", "\n", "xa_mean", "=", "xa_mean", ",", "\n", "xa_std", "=", "xa_std", ",", "\n", "classes_mean", "=", "classes_mean", ",", "\n", "classes_std", "=", "classes_std", ",", "\n", ")", "\n", "xa_all", ".", "append", "(", "xa_tmp", ")", "\n", "pred_test", ".", "append", "(", "pred_tmp", ")", "\n", "dataset_assignments", "+=", "[", "i", "]", "*", "len", "(", "num_imgs", ")", "\n", "image_indices", "+=", "num_imgs", "\n", "start_others", ".", "append", "(", "start_tmp", ")", "\n", "\n", "# combine them into single arrays", "\n", "", "xa_all", "=", "np", ".", "concatenate", "(", "xa_all", ")", ".", "squeeze", "(", ")", "\n", "pred_test", "=", "np", ".", "concatenate", "(", "pred_test", ")", ".", "squeeze", "(", ")", "\n", "dataset_assignments", "=", "np", ".", "array", "(", "dataset_assignments", ")", ".", "squeeze", "(", ")", "\n", "image_indices", "=", "np", ".", "array", "(", "image_indices", ")", ".", "squeeze", "(", ")", "\n", "\n", "for", "starts", "in", "start_others", "[", "1", ":", "]", ":", "\n", "            ", "start_others", "[", "0", "]", "+=", "[", "s", "+", "start_others", "[", "0", "]", "[", "-", "1", "]", "for", "s", "in", "starts", "[", "1", ":", "]", "]", "\n", "", "start_all", "=", "start_others", "[", "0", "]", "\n", "del", "xa_tmp", ",", "start_tmp", ",", "pred_tmp", ",", "start_others", "\n", "\n", "_log", ".", "debug", "(", "\"Shape of metrics array: {}\"", ".", "format", "(", "xa_all", ".", "shape", ")", ")", "\n", "\n", "# Using the normalized metric statistics use a meta segmentation network", "\n", "# pretrained on the source domain to predict IoU", "\n", "_log", ".", "info", "(", "\"Predicting IoU...\"", ")", "\n", "if", "args", "[", "\"meta_model\"", "]", "==", "\"neural\"", ":", "\n", "            ", "ya_pred_test", "=", "meta_nn_predict", "(", "\n", "pretrained_model_path", "=", "args", "[", "\"meta_nn_path\"", "]", ",", "\n", "x_test", "=", "xa_all", ",", "\n", "gpu", "=", "args", "[", "\"gpu\"", "]", ",", "\n", ")", "\n", "", "elif", "args", "[", "\"meta_model\"", "]", "==", "\"linear\"", ":", "\n", "            ", "ya_pred_test", ",", "_", "=", "regression_fit_and_predict", "(", "\n", "x_train", "=", "xa", ",", "y_train", "=", "ya", ",", "x_test", "=", "xa_all", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Meta model {} not supported.\"", ".", "format", "(", "args", "[", "\"meta_model\"", "]", ")", ")", "\n", "\n", "# Now the different filters are getting applied to the segments", "\n", "", "_log", ".", "info", "(", "\"Filtering segments...\"", ")", "\n", "inds", "=", "np", ".", "zeros", "(", "pred_test", ".", "shape", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "# Filter for the predicted IoU to be less than the supplied threshold", "\n", "inds", "=", "np", ".", "logical_or", "(", "inds", ",", "(", "ya_pred_test", "<", "args", "[", "\"iou_threshold\"", "]", ")", ")", "\n", "\n", "# Filter for extracting segments with predefined class predictions", "\n", "if", "hasattr", "(", "\n", "importlib", ".", "import_module", "(", "CONFIG", ".", "TRAIN_DATASET", ".", "module_name", ")", ",", "\n", "\"pred_class_selection\"", ",", "\n", ")", ":", "\n", "            ", "pred_class_selection", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "CONFIG", ".", "TRAIN_DATASET", ".", "module_name", ")", ",", "\n", "\"pred_class_selection\"", ",", "\n", ")", "\n", "inds", "=", "np", ".", "logical_and", "(", "inds", ",", "np", ".", "isin", "(", "pred_test", ",", "pred_class_selection", ")", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Filtered components (not checked for minimum size):\"", ")", "\n", "train_dat", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "CONFIG", ".", "TRAIN_DATASET", ".", "module_name", ")", ",", "\n", "CONFIG", ".", "TRAIN_DATASET", ".", "class_name", ",", "\n", ")", "(", "**", "CONFIG", ".", "TRAIN_DATASET", ".", "kwargs", ")", "\n", "_log", ".", "info", "(", "\n", "\"\\t{:^{width}s} | Filtered | Total\"", ".", "format", "(", "\n", "\"Class name\"", ",", "\n", "width", "=", "max", "(", "\n", "[", "len", "(", "v", "[", "0", "]", ")", "for", "v", "in", "train_dat", ".", "pred_mapping", ".", "values", "(", ")", "]", "\n", "+", "[", "len", "(", "\"Class name\"", ")", "]", "\n", ")", ",", "\n", ")", "\n", ")", "\n", "for", "cl", "in", "np", ".", "unique", "(", "pred_test", ")", ".", "flatten", "(", ")", ":", "\n", "            ", "_log", ".", "info", "(", "\n", "\"\\t{:^{width}s} | {:>8d} | {:<8d}\"", ".", "format", "(", "\n", "train_dat", ".", "pred_mapping", "[", "cl", "]", "[", "0", "]", ",", "\n", "inds", "[", "pred_test", "==", "cl", "]", ".", "sum", "(", ")", ",", "\n", "(", "pred_test", "==", "cl", ")", ".", "sum", "(", ")", ",", "\n", "width", "=", "max", "(", "\n", "[", "len", "(", "v", "[", "0", "]", ")", "for", "v", "in", "train_dat", ".", "pred_mapping", ".", "values", "(", ")", "]", "\n", "+", "[", "len", "(", "\"Class name\"", ")", "]", "\n", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "# Aggregating arguments for extraction of component information.", "\n", "", "inds", "=", "np", ".", "argwhere", "(", "inds", ")", ".", "flatten", "(", ")", "\n", "component_image_mapping", "=", "get_image_index_to_components", "(", "inds", ",", "start_all", ")", "\n", "p_args", "=", "[", "\n", "(", "\n", "v", ",", "\n", "image_indices", "[", "k", "]", ",", "\n", "ya_pred_test", "[", "start_all", "[", "k", "]", ":", "start_all", "[", "k", "+", "1", "]", "]", ",", "\n", "args", "[", "\"datasets\"", "]", "[", "dataset_assignments", "[", "k", "]", "]", ",", "\n", "args", "[", "\"min_height\"", "]", ",", "\n", "args", "[", "\"min_width\"", "]", ",", "\n", "args", "[", "\"min_crop_height\"", "]", ",", "\n", "args", "[", "\"min_crop_width\"", "]", ",", "\n", "\"deeplabv3plus\"", ",", "\n", ")", "\n", "for", "k", ",", "v", "in", "component_image_mapping", ".", "items", "(", ")", "\n", "]", "\n", "\n", "# Extracting component information can be parallelized in a multiprocessing pool", "\n", "_log", ".", "info", "(", "\"Extracting component information...\"", ")", "\n", "with", "Pool", "(", "args", "[", "\"n_jobs\"", "]", ")", "as", "p", ":", "\n", "            ", "r", "=", "list", "(", "\n", "tqdm", ".", "tqdm", "(", "p", ".", "imap", "(", "wrapper_cutout_components", ",", "p_args", ")", ",", "total", "=", "len", "(", "p_args", ")", ")", "\n", ")", "\n", "", "r", "=", "[", "c", "for", "c", "in", "r", "if", "len", "(", "c", "[", "\"component_indices\"", "]", ")", ">", "0", "]", "\n", "\n", "_log", ".", "info", "(", "\"Computing embeddings...\"", ")", "\n", "crops", "=", "{", "\n", "\"embeddings\"", ":", "[", "]", ",", "\n", "\"image_path\"", ":", "[", "]", ",", "\n", "\"image_index\"", ":", "[", "]", ",", "\n", "\"component_index\"", ":", "[", "]", ",", "\n", "\"box\"", ":", "[", "]", ",", "\n", "\"gt\"", ":", "[", "]", ",", "\n", "\"pred\"", ":", "[", "]", ",", "\n", "\"dataset\"", ":", "[", "]", ",", "\n", "\"model_name\"", ":", "[", "]", ",", "\n", "\"image_level_index\"", ":", "[", "]", ",", "\n", "\"iou_pred\"", ":", "[", "]", ",", "\n", "}", "\n", "# process all extracted crops and compute feature embeddings", "\n", "for", "c", "in", "tqdm", ".", "tqdm", "(", "r", ")", ":", "\n", "# load image", "\n", "            ", "preds", ",", "gt", ",", "image_path", "=", "probs_gt_load", "(", "\n", "c", "[", "\"image_index\"", "]", ",", "\n", "input_dir", "=", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\"input\"", ",", "c", "[", "\"model_name\"", "]", ",", "c", "[", "\"dataset\"", "]", "\n", ")", ",", "\n", "preds", "=", "True", ",", "\n", ")", "\n", "\n", "crops", "[", "\"image_path\"", "]", ".", "append", "(", "image_path", ")", "\n", "crops", "[", "\"model_name\"", "]", ".", "append", "(", "c", "[", "\"model_name\"", "]", ")", "\n", "crops", "[", "\"dataset\"", "]", ".", "append", "(", "c", "[", "\"dataset\"", "]", ")", "\n", "crops", "[", "\"image_index\"", "]", ".", "append", "(", "c", "[", "\"image_index\"", "]", ")", "\n", "crops", "[", "\"iou_pred\"", "]", ".", "append", "(", "c", "[", "\"iou_pred\"", "]", ")", "\n", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "c", "[", "\"boxes\"", "]", ")", ":", "\n", "                ", "img", "=", "trans", ".", "ToTensor", "(", ")", "(", "image", ".", "crop", "(", "b", ")", ")", "\n", "img", "=", "trans", ".", "Normalize", "(", "mean", "=", "imagenet_mean", ",", "std", "=", "imagenet_std", ")", "(", "img", ")", "\n", "crops", "[", "\"embeddings\"", "]", ".", "append", "(", "get_embedding", "(", "img", ".", "unsqueeze", "(", "0", ")", ",", "net", ")", ")", "\n", "crops", "[", "\"box\"", "]", ".", "append", "(", "b", ")", "\n", "crops", "[", "\"component_index\"", "]", ".", "append", "(", "c", "[", "\"component_indices\"", "]", "[", "i", "]", ")", "\n", "crops", "[", "\"image_level_index\"", "]", ".", "append", "(", "len", "(", "crops", "[", "\"image_path\"", "]", ")", "-", "1", ")", "\n", "crops", "[", "\"gt\"", "]", ".", "append", "(", "get_component_gt", "(", "gt", ",", "c", "[", "\"segment_indices\"", "]", "[", "i", "]", ")", ")", "\n", "crops", "[", "\"pred\"", "]", ".", "append", "(", "get_component_pred", "(", "preds", ",", "c", "[", "\"segment_indices\"", "]", "[", "i", "]", ")", ")", "\n", "\n", "", "", "_log", ".", "info", "(", "\"Saving data...\"", ")", "\n", "with", "open", "(", "args", "[", "\"save_file\"", "]", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "crops", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "args", "[", "\"load_file\"", "]", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "crops", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Computing embeddings...\"", ")", "\n", "boxes", "=", "np", ".", "array", "(", "crops", "[", "\"box\"", "]", ")", ".", "squeeze", "(", ")", "\n", "image_level_index", "=", "np", ".", "array", "(", "crops", "[", "\"image_level_index\"", "]", ")", ".", "squeeze", "(", ")", "\n", "crops", "[", "\"embeddings\"", "]", "=", "[", "]", "\n", "for", "i", ",", "image_path", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "crops", "[", "\"image_path\"", "]", ")", ",", "total", "=", "len", "(", "crops", "[", "\"image_path\"", "]", ")", "\n", ")", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "for", "j", "in", "np", ".", "argwhere", "(", "image_level_index", "==", "i", ")", ".", "flatten", "(", ")", ":", "\n", "                ", "img", "=", "trans", ".", "ToTensor", "(", ")", "(", "image", ".", "crop", "(", "boxes", "[", "j", "]", ")", ")", "\n", "img", "=", "trans", ".", "Normalize", "(", "mean", "=", "imagenet_mean", ",", "std", "=", "imagenet_std", ")", "(", "img", ")", "\n", "crops", "[", "\"embeddings\"", "]", ".", "append", "(", "get_embedding", "(", "img", ".", "unsqueeze", "(", "0", ")", ",", "net", ")", ")", "\n", "\n", "", "", "if", "\"plot_embeddings\"", "in", "crops", ":", "\n", "            ", "del", "crops", "[", "\"plot_embeddings\"", "]", "\n", "", "if", "\"nn_embeddings\"", "in", "crops", ":", "\n", "            ", "del", "crops", "[", "\"nn_embeddings\"", "]", "\n", "\n", "", "_log", ".", "info", "(", "\"Saving data...\"", ")", "\n", "with", "open", "(", "args", "[", "\"save_file\"", "]", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "crops", ",", "f", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_retrieval.lp_dist": [[35, 37], ["None"], "function", ["None"], ["def", "lp_dist", "(", "point", ",", "all_points", ",", "d", "=", "2", ")", ":", "\n", "    ", "return", "(", "(", "all_points", "-", "point", ")", "**", "d", ")", ".", "sum", "(", "1", ")", "**", "(", "1.0", "/", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_retrieval.cos_dist": [[39, 41], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cos_dist", "(", "point", ",", "all_points", ")", ":", "\n", "    ", "return", "1", "-", "(", "(", "point", "*", "all_points", ")", ".", "sum", "(", "1", ")", "/", "(", "norm", "(", "point", ")", "*", "norm", "(", "all_points", ",", "axis", "=", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_retrieval.ap_wrapper": [[43, 45], ["eval_retrieval.ap"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_retrieval.ap"], ["", "def", "ap_wrapper", "(", "arguments", ")", ":", "\n", "    ", "return", "ap", "(", "*", "arguments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_retrieval.ap": [[47, 53], ["range", "relevant.sum", "relevant[].mean"], "function", ["None"], ["", "def", "ap", "(", "gt", ",", "retrieval_list", ")", ":", "\n", "    ", "result", "=", "0", "\n", "relevant", "=", "retrieval_list", "==", "gt", "\n", "for", "k", "in", "range", "(", "retrieval_list", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "result", "+=", "relevant", "[", ":", "(", "k", "+", "1", ")", "]", ".", "mean", "(", ")", "*", "relevant", "[", "k", "]", "\n", "", "return", "result", "/", "relevant", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_retrieval.meanaverageprecision": [[55, 80], ["multiprocessing.Pool", "list", "sum", "len", "p.imap", "numpy.argsort", "eval_retrieval.lp_dist", "numpy.argsort", "eval_retrieval.cos_dist"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.lp_dist", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.cos_dist"], ["", "def", "meanaverageprecision", "(", "\n", "query_indices", ",", "\n", "gt", ",", "\n", "embeddings", ",", "\n", "distance_metric", "=", "\"euclid\"", ",", "\n", "gt_annotation", "=", "None", ",", "\n", "void", "=", "-", "1", ",", "\n", "n_jobs", "=", "4", ",", "\n", ")", ":", "\n", "    ", "if", "gt_annotation", "is", "not", "None", ":", "\n", "        ", "gt", "[", "gt_annotation", "==", "0", "]", "=", "void", "\n", "", "if", "distance_metric", "==", "\"euclid\"", ":", "\n", "        ", "args", "=", "[", "\n", "(", "gt", "[", "q", "]", ",", "gt", "[", "np", ".", "argsort", "(", "lp_dist", "(", "embeddings", "[", "q", "]", ",", "embeddings", ")", ")", "]", "[", "1", ":", "]", ")", "\n", "for", "q", "in", "query_indices", "\n", "]", "\n", "", "elif", "distance_metric", "==", "\"cos\"", ":", "\n", "        ", "args", "=", "[", "\n", "(", "gt", "[", "q", "]", ",", "gt", "[", "np", ".", "argsort", "(", "cos_dist", "(", "embeddings", "[", "q", "]", ",", "embeddings", ")", ")", "]", "[", "1", ":", "]", ")", "\n", "for", "q", "in", "query_indices", "\n", "]", "\n", "", "with", "Pool", "(", "n_jobs", ")", "as", "p", ":", "\n", "        ", "average_precisions", "=", "list", "(", "p", ".", "imap", "(", "ap_wrapper", ",", "args", ")", ")", "\n", "\n", "", "return", "sum", "(", "average_precisions", ")", "/", "len", "(", "average_precisions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_retrieval.config": [[82, 102], ["dict", "dict", "os.path.join"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "args", "=", "dict", "(", "# noqa: F841", "\n", "embeddings_file", "=", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\"embeddings_128_128_densenet201.p\"", "\n", ")", ",", "\n", "embedding_size", "=", "2", ",", "\n", "overwrite_embeddings", "=", "False", ",", "\n", "plot_dir", "=", "None", ",", "\n", "method", "=", "\"TSNE\"", ",", "\n", "distance_metric", "=", "\"euclid\"", ",", "\n", "n_jobs", "=", "10", ",", "\n", "min_query_count", "=", "2", ",", "\n", ")", "\n", "\n", "tsne", "=", "dict", "(", "# noqa: F841", "\n", "perplexity", "=", "30", ",", "\n", "learning_rate", "=", "200.0", ",", "\n", "early_exaggeration", "=", "12.0", ",", "\n", "verbose", "=", "3", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_retrieval.main": [[105, 269], ["src.log_utils.log_config", "numpy.array().squeeze", "_log.debug", "list", "_log.info", "_log.info", "open", "pickle.load", "numpy.vectorize", "numpy.stack", "_log.info", "range", "numpy.argwhere().flatten", "_log.info", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.bar", "fig.add_subplot.set_xticks", "fig.add_subplot.set_xticklabels", "fig.add_subplot.spines[].set_visible", "fig.add_subplot.spines[].set_visible", "fig.add_subplot.spines[].set_visible", "fig.add_subplot.yaxis.grid", "fig.add_subplot.xaxis.set_tick_params", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_axisbelow", "matplotlib.savefig", "_log.info", "numpy.array", "_log.info", "_log.debug", "_log.info", "numpy.array", "len", "eval_retrieval.meanaverageprecision", "_log.info", "numpy.arange", "rect.get_height", "fig.add_subplot.annotate", "os.path.join", "pkl.load.keys", "_log.info", "sklearn.decomposition.PCA().fit_transform", "sklearn.manifold.TSNE().fit_transform", "open", "pickle.dump", "numpy.argwhere", "len", "sum", "len", "sum", "sum", "numpy.arange", "os.path.join", "_log.info", "sklearn.decomposition.PCA().fit_transform", "sklearn.manifold.Isomap().fit_transform", "len", "results.values", "results.values", "n_queries.values", "len", "sklearn.decomposition.PCA", "sklearn.manifold.TSNE", "_log.info", "sklearn.decomposition.PCA().fit_transform", "max", "len", "sklearn.decomposition.PCA", "sklearn.manifold.Isomap", "results.items", "rect.get_x", "sklearn.decomposition.PCA", "len", "results.items", "sum", "sum", "results.keys", "rect.get_width", "str", "src.datasets.a2d2.trainid_to_name.values", "sum", "len", "n_queries.values", "results.values", "results.values", "results.items"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.log_utils.log_config", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.eval_retrieval.meanaverageprecision"], ["", "@", "ex", ".", "automain", "\n", "def", "main", "(", "args", ",", "tsne", ",", "_run", ",", "_log", ")", ":", "\n", "    ", "log_config", "(", "_run", ",", "_log", ")", "\n", "with", "open", "(", "args", "[", "\"embeddings_file\"", "]", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "data", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "gt", "=", "np", ".", "array", "(", "data", "[", "\"gt\"", "]", ")", ".", "squeeze", "(", ")", "\n", "_log", ".", "debug", "(", "\"Number of segments: {}\"", ".", "format", "(", "gt", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "gt", "=", "np", ".", "vectorize", "(", "id_to_trainid", ".", "get", ")", "(", "gt", ")", "\n", "\n", "if", "(", "\n", "data", "[", "\"nn_embeddings\"", "]", ".", "shape", "[", "1", "]", "!=", "args", "[", "\"embedding_size\"", "]", "\n", "if", "\"nn_embeddings\"", "in", "data", ".", "keys", "(", ")", "\n", "else", "True", "\n", ")", "or", "args", "[", "\"overwrite_embeddings\"", "]", ":", "\n", "        ", "embeddings", "=", "np", ".", "stack", "(", "data", "[", "\"embeddings\"", "]", ")", "\n", "\n", "# _log.info('Standardizing embeddings...')", "\n", "# embeddings = (embeddings - embeddings.mean()) / embeddings.std()", "\n", "\n", "if", "(", "\n", "args", "[", "\"embedding_size\"", "]", "<", "embeddings", ".", "shape", "[", "1", "]", "\n", "if", "args", "[", "\"embedding_size\"", "]", "is", "not", "None", "\n", "else", "False", "\n", ")", ":", "\n", "            ", "_log", ".", "info", "(", "\"Computing embeddings for nearest neighbor search...\"", ")", "\n", "if", "args", "[", "\"method\"", "]", "==", "\"TSNE\"", ":", "\n", "                ", "_log", ".", "info", "(", "\n", "\"Using t-SNE with method '{}' and dimensionality {}\"", ".", "format", "(", "\n", "\"barnes_hut\"", "if", "args", "[", "\"embedding_size\"", "]", "<", "4", "else", "\"exact\"", ",", "\n", "args", "[", "\"embedding_size\"", "]", ",", "\n", ")", "\n", ")", "\n", "embeddings", "=", "PCA", "(", "\n", "n_components", "=", "50", "if", "args", "[", "\"embedding_size\"", "]", "<", "50", "else", "100", "\n", ")", ".", "fit_transform", "(", "embeddings", ")", "\n", "embeddings", "=", "TSNE", "(", "\n", "n_components", "=", "args", "[", "\"embedding_size\"", "]", ",", "\n", "n_jobs", "=", "args", "[", "\"n_jobs\"", "]", ",", "\n", "method", "=", "\"barnes_hut\"", "if", "args", "[", "\"embedding_size\"", "]", "<", "4", "else", "\"exact\"", ",", "\n", "**", "tsne", "\n", ")", ".", "fit_transform", "(", "embeddings", ")", "\n", "", "elif", "args", "[", "\"method\"", "]", "==", "\"Isomap\"", ":", "\n", "                ", "_log", ".", "info", "(", "\"Using Isomap method.\"", ")", "\n", "embeddings", "=", "PCA", "(", "\n", "n_components", "=", "50", "if", "args", "[", "\"embedding_size\"", "]", "<", "50", "else", "100", "\n", ")", ".", "fit_transform", "(", "embeddings", ")", "\n", "embeddings", "=", "Isomap", "(", "\n", "n_components", "=", "args", "[", "\"embedding_size\"", "]", ",", "\n", "n_jobs", "=", "args", "[", "\"n_jobs\"", "]", ",", "\n", ")", ".", "fit_transform", "(", "embeddings", ")", "\n", "", "elif", "args", "[", "\"method\"", "]", "==", "\"PCA\"", ":", "\n", "                ", "_log", ".", "info", "(", "\"Using PCA method.\"", ")", "\n", "embeddings", "=", "PCA", "(", "n_components", "=", "args", "[", "\"embedding_size\"", "]", ")", ".", "fit_transform", "(", "\n", "embeddings", "\n", ")", "\n", "\n", "", "data", "[", "\"nn_embeddings\"", "]", "=", "embeddings", "\n", "_log", ".", "debug", "(", "\"Saving computed manifold to embeddings file.\"", ")", "\n", "with", "open", "(", "args", "[", "\"embeddings_file\"", "]", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pkl", ".", "dump", "(", "data", ",", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "_log", ".", "info", "(", "\"Leaving data as it is.\"", ")", "\n", "", "", "else", ":", "\n", "        ", "embeddings", "=", "data", "[", "\"nn_embeddings\"", "]", "\n", "_log", ".", "info", "(", "\n", "(", "\n", "\"Using precomputed embeddings \"", "\n", "\"({} dimensions) for nearest neighbor search...\"", ".", "format", "(", "\n", "embeddings", ".", "shape", "[", "1", "]", "\n", ")", "\n", ")", "\n", ")", "\n", "\n", "", "embeddings", "=", "embeddings", "[", "gt", "!=", "255", "]", "\n", "gt", "=", "gt", "[", "gt", "!=", "255", "]", "\n", "\n", "if", "\"annotated\"", "in", "data", ":", "\n", "        ", "annotated_gt", "=", "data", "[", "\"annotated\"", "]", "\n", "\n", "", "results", "=", "{", "}", "\n", "n_queries", "=", "{", "}", "\n", "# sel_classes = [12, 22, 3, 34]", "\n", "sel_classes", "=", "list", "(", "range", "(", "37", ")", ")", "\n", "for", "cl", "in", "sel_classes", ":", "\n", "        ", "query_list", "=", "np", ".", "argwhere", "(", "gt", "==", "cl", ")", ".", "flatten", "(", ")", "\n", "if", "\"annotated\"", "in", "data", "and", "query_list", ".", "size", ">=", "args", "[", "\"min_query_count\"", "]", ":", "\n", "            ", "query_list", "=", "np", ".", "array", "(", "[", "q", "for", "q", "in", "query_list", "if", "annotated_gt", "[", "q", "]", "!=", "0", "]", ")", "\n", "", "n_queries", "[", "cl", "]", "=", "(", "\n", "len", "(", "query_list", ")", "if", "len", "(", "query_list", ")", ">=", "args", "[", "\"min_query_count\"", "]", "else", "0", "\n", ")", "\n", "if", "query_list", ".", "size", ">=", "args", "[", "\"min_query_count\"", "]", ":", "\n", "            ", "results", "[", "cl", "]", "=", "meanaverageprecision", "(", "\n", "query_list", ",", "\n", "gt", ",", "\n", "embeddings", ",", "\n", "distance_metric", "=", "args", "[", "\"distance_metric\"", "]", ",", "\n", "gt_annotation", "=", "annotated_gt", "if", "\"annotated\"", "in", "data", "else", "None", ",", "\n", "n_jobs", "=", "args", "[", "\"n_jobs\"", "]", ",", "\n", ")", "\n", "_log", ".", "info", "(", "\n", "\"{:>{width}s} ({:>4d}): {:>7.2%}\"", ".", "format", "(", "\n", "trainid_to_name", "[", "cl", "]", ",", "\n", "len", "(", "query_list", ")", ",", "\n", "results", "[", "cl", "]", ",", "\n", "width", "=", "max", "(", "[", "len", "(", "str", "(", "v", ")", ")", "for", "v", "in", "trainid_to_name", ".", "values", "(", ")", "]", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "_log", ".", "info", "(", "\"Average: {:.2%}\"", ".", "format", "(", "sum", "(", "results", ".", "values", "(", ")", ")", "/", "len", "(", "results", ".", "values", "(", ")", ")", ")", ")", "\n", "_log", ".", "info", "(", "\n", "\"Weighted Average: {:.2%}\"", ".", "format", "(", "\n", "sum", "(", "[", "v", "*", "n_queries", "[", "k", "]", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "]", ")", "\n", "/", "sum", "(", "n_queries", ".", "values", "(", ")", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "args", "[", "\"plot_dir\"", "]", "is", "not", "None", ":", "\n", "        ", "_log", ".", "info", "(", "\"Start plotting...\"", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "\"mAP values in % for retrieval in the embedding space\"", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "rects", "=", "ax", ".", "bar", "(", "\n", "x", "=", "np", ".", "arange", "(", "len", "(", "results", ")", "+", "2", ")", ",", "\n", "height", "=", "(", "\n", "[", "v", "*", "100", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "]", "\n", "+", "[", "sum", "(", "results", ".", "values", "(", ")", ")", "/", "len", "(", "results", ".", "values", "(", ")", ")", "*", "100", "]", "\n", "+", "[", "\n", "sum", "(", "[", "v", "*", "n_queries", "[", "k", "]", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "]", ")", "\n", "/", "sum", "(", "n_queries", ".", "values", "(", ")", ")", "\n", "*", "100", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "len", "(", "results", ")", "+", "2", ")", ")", "\n", "ax", ".", "set_xticklabels", "(", "\n", "labels", "=", "[", "trainid_to_name", "[", "k", "]", "for", "k", "in", "results", ".", "keys", "(", ")", "]", "\n", "+", "[", "\"Average\"", "]", "\n", "+", "[", "\"Weighted Average\"", "]", "\n", ")", "\n", "for", "rect", "in", "rects", ":", "\n", "            ", "height", "=", "rect", ".", "get_height", "(", ")", "\n", "ax", ".", "annotate", "(", "\n", "\"{:.1f}\"", ".", "format", "(", "height", ")", ",", "\n", "xy", "=", "(", "rect", ".", "get_x", "(", ")", "+", "rect", ".", "get_width", "(", ")", "/", "2", ",", "height", ")", ",", "\n", "xytext", "=", "(", "0", ",", "3", ")", ",", "# 3 points vertical offset", "\n", "textcoords", "=", "\"offset points\"", ",", "\n", "ha", "=", "\"center\"", ",", "\n", "va", "=", "\"bottom\"", ",", "\n", ")", "\n", "# ax.title.set_text('Retrieval results in the embedding space')", "\n", "", "ax", ".", "spines", "[", "\"top\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"right\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"bottom\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "yaxis", ".", "grid", "(", "True", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "rotation", "=", "50", ")", "\n", "ax", ".", "set_ylabel", "(", "\"mAP in %\"", ")", "\n", "ax", ".", "set_axisbelow", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "\n", "join", "(", "args", "[", "\"plot_dir\"", "]", ",", "\"map_plot.eps\"", ")", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "\"tight\"", "\n", ")", "\n", "_log", ".", "info", "(", "\n", "\"Saved plot of mAP results to '{}'\"", ".", "format", "(", "\n", "join", "(", "args", "[", "\"plot_dir\"", "]", ",", "\"map_plot.eps\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.__init__": [[34, 275], ["os.path.join", "logging.getLogger", "os.makedirs", "collections.OrderedDict", "discover.Discovery.log.info", "numpy.array().flatten", "numpy.array().flatten", "discover.Discovery.log.info", "dict", "numpy.unique().flatten", "numpy.stack", "discover.Discovery.plot_main", "discover.Discovery.distance_metrics.index", "open", "pickle.load", "len", "numpy.array().reshape", "getattr", "numpy.array", "numpy.array", "discover.Discovery.log.info", "sklearn.decomposition.PCA().fit_transform", "discover.Discovery.log.info", "sklearn.manifold.TSNE().fit_transform", "numpy.stack().reshape", "discover.Discovery.log.debug", "numpy.unique", "importlib.import_module", "numpy.array", "min", "numpy.stack().reshape", "discover.Discovery.data.keys", "discover.Discovery.log.info", "open", "pickle.dump", "range", "discover.Discovery.data.keys", "discover.Discovery.data.keys", "min", "len", "sklearn.decomposition.PCA", "sklearn.manifold.TSNE", "numpy.stack", "ValueError", "getattr", "len", "numpy.stack", "discover.Discovery.data.keys", "discover.Discovery.log.info", "sklearn.manifold.Isomap().fit_transform", "importlib.import_module", "discover.Discovery.log.info", "discover.Discovery.log.info", "sklearn.manifold.TSNE().fit_transform", "discover.Discovery.data.keys", "sklearn.manifold.Isomap", "sklearn.manifold.TSNE"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.plot_main"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "embeddings_file", "=", "\"embeddings.p\"", ",", "\n", "distance_metric", "=", "\"euclid\"", ",", "\n", "method", "=", "\"TSNE\"", ",", "\n", "embedding_size", "=", "2", ",", "\n", "overwrite_embeddings", "=", "False", ",", "\n", "n_jobs", "=", "10", ",", "\n", "dpi", "=", "300", ",", "\n", "main_plot_args", "=", "{", "}", ",", "\n", "tsne_args", "=", "{", "}", ",", "\n", "save_dir", "=", "join", "(", "CONFIG", ".", "metaseg_io_path", ",", "\"vis_embeddings\"", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Loads the embedding files, computes the dimensionality reductions and calls\n        the initilization of the main plot.\n\n        Args:\n            embeddings_file (str): Path to the file where all data of segments\n                including feature embeddings is saved.\n            distance_metric (str): Distance metric to use for nearest neighbor\n                computation.\n            method (str): Method to use for dimensionality reduction of nearest\n                neighbor embeddings. For plotting the points are always reduced in\n                dimensionality using PCA to 50 dimensions followed by t-SNE to two\n                dimensions.\n            embedding_size (int): Dimensionality of the feature embeddings used for\n                nearest neighbor search.\n            overwrite_embeddings (bool): If True, precomputed nearest neighbor and\n                plotting embeddings from previous runs are overwritten with freshly\n                computed ones. Otherwise precomputed embeddings are used if requested\n                embedding_size is matching.\n            n_jobs (int): Number of processes to use for t-SNE computation.\n            dpi (int): Dots per inch for graphics that are saved to disk.\n            main_plot_args (dict): Keyword arguments for the creation of the main plot.\n            tsne_args (dict): Keyword arguments for the t-SNE algorithm.\n            save_dir (str): Path to the directory where saved images are placed in.\n        \"\"\"", "\n", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "\"Discovery\"", ")", "\n", "self", ".", "embeddings_file", "=", "embeddings_file", "\n", "self", ".", "distance_metrics", "=", "[", "\"euclid\"", ",", "\"cos\"", "]", "\n", "self", ".", "dm", "=", "(", "\n", "0", "\n", "if", "distance_metric", "not", "in", "self", ".", "distance_metrics", "\n", "else", "self", ".", "distance_metrics", ".", "index", "(", "distance_metric", ")", "\n", ")", "\n", "\n", "self", ".", "dpi", "=", "dpi", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "os", ".", "makedirs", "(", "self", ".", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "cluster_methods", "=", "OrderedDict", "(", ")", "\n", "self", ".", "cluster_methods", "[", "\"kmeans\"", "]", "=", "{", "\"main\"", ":", "KMeans", ",", "\"kwargs\"", ":", "{", "}", "}", "\n", "self", ".", "cluster_methods", "[", "\"spectral\"", "]", "=", "{", "\"main\"", ":", "SpectralClustering", ",", "\"kwargs\"", ":", "{", "}", "}", "\n", "self", ".", "cluster_methods", "[", "\"agglo\"", "]", "=", "{", "\n", "\"main\"", ":", "AgglomerativeClustering", ",", "\n", "\"kwargs\"", ":", "{", "\"linkage\"", ":", "\"ward\"", "}", ",", "\n", "}", "\n", "\n", "self", ".", "methods_with_ncluster_param", "=", "[", "\"kmeans\"", ",", "\"spectral\"", ",", "\"agglo\"", "]", "\n", "self", ".", "cme", "=", "0", "\n", "self", ".", "clustering", "=", "None", "\n", "self", ".", "n_clusters", "=", "25", "\n", "\n", "# colors:", "\n", "self", ".", "standard_color", "=", "(", "0", ",", "0", ",", "1", ",", "1", ")", "\n", "self", ".", "current_color", "=", "(", "1", ",", "0", ",", "0", ",", "1", ")", "\n", "self", ".", "nn_color", "=", "(", "1", ",", "0", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "log", ".", "info", "(", "\"Loading data...\"", ")", "\n", "with", "open", "(", "self", ".", "embeddings_file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "data", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "iou_preds", "=", "self", ".", "data", "[", "\"iou_pred\"", "]", "\n", "self", ".", "gt", "=", "np", ".", "array", "(", "self", ".", "data", "[", "\"gt\"", "]", ")", ".", "flatten", "(", ")", "\n", "self", ".", "pred", "=", "np", ".", "array", "(", "self", ".", "data", "[", "\"pred\"", "]", ")", ".", "flatten", "(", ")", "\n", "self", ".", "gi", "=", "self", ".", "data", "[", "\n", "\"image_level_index\"", "\n", "]", "# global indices (on image level and not on component level)", "\n", "\n", "self", ".", "log", ".", "info", "(", "\"Loaded {} segment embeddings.\"", ".", "format", "(", "self", ".", "pred", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "self", ".", "nearest_neighbors", "=", "None", "\n", "\n", "if", "len", "(", "self", ".", "data", "[", "\"embeddings\"", "]", ")", "==", "1", ":", "\n", "            ", "self", ".", "data", "[", "\"plot_embeddings\"", "]", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "data", "[", "\"embeddings\"", "]", "[", "0", "]", "[", "0", "]", ",", "self", ".", "data", "[", "\"embeddings\"", "]", "[", "0", "]", "[", "1", "]", "]", "\n", ")", ".", "reshape", "(", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "data", "[", "\"nn_embeddings\"", "]", "=", "self", ".", "data", "[", "\"plot_embeddings\"", "]", "\n", "", "else", ":", "\n", "            ", "if", "(", "\n", "\"nn_embeddings\"", "not", "in", "self", ".", "data", ".", "keys", "(", ")", "\n", "or", "overwrite_embeddings", "\n", "or", "\"plot_embeddings\"", "not", "in", "self", ".", "data", ".", "keys", "(", ")", "\n", ")", "and", "embedding_size", "<", "self", ".", "data", "[", "\"embeddings\"", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ":", "\n", "                ", "self", ".", "log", ".", "info", "(", "\"Computing PCA...\"", ")", "\n", "n_comp", "=", "(", "\n", "50", "\n", "if", "50", "\n", "<", "min", "(", "\n", "len", "(", "self", ".", "data", "[", "\"embeddings\"", "]", ")", ",", "\n", "self", ".", "data", "[", "\"embeddings\"", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", ")", "\n", "else", "min", "(", "\n", "len", "(", "self", ".", "data", "[", "\"embeddings\"", "]", ")", ",", "\n", "self", ".", "data", "[", "\"embeddings\"", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", ")", "\n", ")", "\n", "embeddings", "=", "PCA", "(", "n_components", "=", "n_comp", ")", ".", "fit_transform", "(", "\n", "np", ".", "stack", "(", "self", ".", "data", "[", "\"embeddings\"", "]", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", "self", ".", "data", "[", "\"embeddings\"", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", ")", "\n", ")", "\n", "rewrite", "=", "True", "\n", "", "else", ":", "\n", "                ", "rewrite", "=", "False", "\n", "\n", "", "if", "\"plot_embeddings\"", "not", "in", "self", ".", "data", ".", "keys", "(", ")", "or", "overwrite_embeddings", ":", "\n", "                ", "self", ".", "log", ".", "info", "(", "\"Computing t-SNE for plotting\"", ")", "\n", "self", ".", "data", "[", "\"plot_embeddings\"", "]", "=", "TSNE", "(", "\n", "n_components", "=", "2", ",", "**", "tsne_args", "\n", ")", ".", "fit_transform", "(", "embeddings", ")", "\n", "new_plot_embeddings", "=", "True", "\n", "", "else", ":", "\n", "                ", "new_plot_embeddings", "=", "False", "\n", "\n", "", "if", "(", "\n", "embedding_size", ">=", "self", ".", "data", "[", "\"embeddings\"", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "or", "embedding_size", "is", "None", "\n", ")", ":", "\n", "                ", "self", ".", "embeddings", "=", "np", ".", "stack", "(", "self", ".", "data", "[", "\"embeddings\"", "]", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", "self", ".", "data", "[", "\"embeddings\"", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", ")", "\n", "self", ".", "log", ".", "debug", "(", "\n", "(", "\n", "\"Requested embedding size of {} was greater or equal \"", "\n", "\"to data dimensionality of {}. \"", "\n", "\"Data has thus not been reduced in dimensionality.\"", "\n", ")", ".", "format", "(", "embedding_size", ",", "self", ".", "data", "[", "\"embeddings\"", "]", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "", "elif", "(", "\n", "self", ".", "data", "[", "\"nn_embeddings\"", "]", ".", "shape", "[", "1", "]", "==", "embedding_size", "\n", "if", "\"nn_embeddings\"", "in", "self", ".", "data", ".", "keys", "(", ")", "\n", "else", "False", "\n", ")", "and", "not", "overwrite_embeddings", ":", "\n", "                ", "self", ".", "embeddings", "=", "self", ".", "data", "[", "\"nn_embeddings\"", "]", "\n", "self", ".", "log", ".", "info", "(", "\n", "(", "\n", "\"Loaded reduced embeddings \"", "\n", "\"({} dimensions) from precomputed file \"", "\n", "+", "\"for nearest neighbor search.\"", "\n", ")", ".", "format", "(", "self", ".", "embeddings", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "", "elif", "rewrite", ":", "\n", "                ", "if", "method", "==", "\"TSNE\"", ":", "\n", "                    ", "if", "(", "\n", "\"plot_embeddings\"", "in", "self", ".", "data", ".", "keys", "(", ")", "\n", "and", "embedding_size", "==", "2", "\n", "and", "new_plot_embeddings", "\n", ")", ":", "\n", "                        ", "self", ".", "embeddings", "=", "self", ".", "data", "[", "\"plot_embeddings\"", "]", "\n", "self", ".", "log", ".", "info", "(", "\n", "(", "\n", "\"Reused the precomputed manifold for plotting for \"", "\n", "\"nearest neighbor search.\"", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "log", ".", "info", "(", "\n", "(", "\n", "\"Computing t-SNE of dimension \"", "\n", "\"{} for nearest neighbor search...\"", "\n", ")", ".", "format", "(", "embedding_size", ")", "\n", ")", "\n", "self", ".", "embeddings", "=", "TSNE", "(", "\n", "n_components", "=", "embedding_size", ",", "n_jobs", "=", "n_jobs", ",", "**", "tsne_args", "\n", ")", ".", "fit_transform", "(", "embeddings", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "log", ".", "info", "(", "\n", "(", "\n", "\"Computing Isomap of dimension \"", "\n", "\"{} for nearest neighbor search...\"", "\n", ")", ".", "format", "(", "embedding_size", ")", "\n", ")", "\n", "self", ".", "embeddings", "=", "Isomap", "(", "\n", "n_components", "=", "embedding_size", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", ")", ".", "fit_transform", "(", "embeddings", ")", "\n", "", "self", ".", "data", "[", "\"nn_embeddings\"", "]", "=", "self", ".", "embeddings", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "(", "\n", "\"Please specify a valid combination of arguments.\\n\"", "\n", "\"Loading fails if 'overwrite_embeddings' is False and \"", "\n", "\"saved 'embedding_size' does not match the requested one.\"", "\n", ")", "\n", ")", "\n", "\n", "# Write added data into pickle file", "\n", "", "if", "rewrite", ":", "\n", "                ", "with", "open", "(", "self", ".", "embeddings_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "pkl", ".", "dump", "(", "self", ".", "data", ",", "f", ")", "\n", "\n", "", "", "", "self", ".", "x", "=", "self", ".", "data", "[", "\"plot_embeddings\"", "]", "[", ":", ",", "0", "]", "\n", "self", ".", "y", "=", "self", ".", "data", "[", "\"plot_embeddings\"", "]", "[", ":", ",", "1", "]", "\n", "\n", "self", ".", "label_mapping", "=", "dict", "(", ")", "\n", "for", "d", "in", "np", ".", "unique", "(", "self", ".", "data", "[", "\"dataset\"", "]", ")", ".", "flatten", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "label_mapping", "[", "d", "]", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "datasets", "[", "d", "]", ".", "module_name", ")", ",", "\n", "datasets", "[", "d", "]", ".", "class_name", ",", "\n", ")", "(", "\n", "**", "datasets", "[", "d", "]", ".", "kwargs", ",", "\n", ")", ".", "label_mapping", "\n", "", "except", "AttributeError", ":", "\n", "                ", "self", ".", "label_mapping", "[", "d", "]", "=", "None", "\n", "\n", "", "", "train_dat", "=", "self", ".", "label_mapping", "[", "CONFIG", ".", "TRAIN_DATASET", ".", "name", "]", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "CONFIG", ".", "TRAIN_DATASET", ".", "module_name", ")", ",", "\n", "CONFIG", ".", "TRAIN_DATASET", ".", "class_name", ",", "\n", ")", "(", "\n", "**", "CONFIG", ".", "TRAIN_DATASET", ".", "kwargs", ",", "\n", ")", "\n", "self", ".", "pred_mapping", "=", "train_dat", ".", "pred_mapping", "\n", "if", "CONFIG", ".", "TRAIN_DATASET", ".", "name", "not", "in", "self", ".", "label_mapping", ":", "\n", "            ", "self", ".", "label_mapping", "[", "CONFIG", ".", "TRAIN_DATASET", ".", "name", "]", "=", "train_dat", ".", "label_mapping", "\n", "\n", "", "self", ".", "tnsize", "=", "(", "50", ",", "50", ")", "\n", "self", ".", "fig_nn", "=", "None", "\n", "self", ".", "fig_main", "=", "None", "\n", "self", ".", "line_main", "=", "None", "\n", "self", ".", "im", "=", "None", "\n", "self", ".", "xybox", "=", "None", "\n", "self", ".", "ab", "=", "None", "\n", "self", ".", "basecolors", "=", "np", ".", "stack", "(", "\n", "[", "self", ".", "standard_color", "for", "_", "in", "range", "(", "self", ".", "x", ".", "shape", "[", "0", "]", ")", "]", "\n", ")", "\n", "self", ".", "n_neighbors", "=", "49", "\n", "self", ".", "current_pressed_key", "=", "None", "\n", "\n", "self", ".", "plot_main", "(", "**", "main_plot_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.plot_main": [[276, 360], ["matplotlib.figure", "matplotlib.figure", "discover.Discovery.fig_main.canvas.set_window_title", "discover.Discovery.fig_main.add_subplot", "discover.Discovery.set_axis_off", "discover.Discovery.scatter", "discover.Discovery.line_main.set_picker", "discover.Discovery.line_main.get_facecolor", "PIL.Image.open().convert().crop", "PIL.Image.open().convert().crop.thumbnail", "matplotlib.offsetbox.OffsetImage", "matplotlib.offsetbox.OffsetImage", "matplotlib.offsetbox.AnnotationBbox", "matplotlib.offsetbox.AnnotationBbox", "discover.Discovery.add_artist", "discover.Discovery.ab.set_visible", "discover.Discovery.get_position", "discover.Discovery.set_position", "numpy.unique().flatten", "discover.Discovery.legend", "matplotlib.savefig", "matplotlib.savefig", "discover.Discovery.fig_main.canvas.mpl_connect", "discover.Discovery.fig_main.canvas.mpl_connect", "discover.Discovery.fig_main.canvas.mpl_connect", "discover.Discovery.fig_main.canvas.mpl_connect", "discover.Discovery.fig_main.canvas.mpl_connect", "matplotlib.show", "matplotlib.show", "all", "numpy.unique", "list", "numpy.array", "numpy.array", "PIL.Image.open().convert", "dict", "os.path.expanduser", "numpy.unique", "matplotlib.patches.Patch", "matplotlib.patches.Patch", "range", "PIL.Image.open", "discover.Discovery.label_mapping.values", "tuple", "numpy.array", "[].isdigit", "names[].rfind"], "methods", ["None"], ["", "def", "plot_main", "(", "self", ",", "**", "plot_args", ")", ":", "\n", "        ", "\"\"\"Initializes the main plot.\n\n        Only 'legend' (bool) is currently supported as keyword argument.\n        \"\"\"", "\n", "self", ".", "fig_main", "=", "plt", ".", "figure", "(", "num", "=", "1", ")", "\n", "self", ".", "fig_main", ".", "canvas", ".", "set_window_title", "(", "\"Embedding space\"", ")", "\n", "ax", "=", "self", ".", "fig_main", ".", "add_subplot", "(", "111", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "self", ".", "line_main", "=", "ax", ".", "scatter", "(", "\n", "self", ".", "x", ",", "self", ".", "y", ",", "marker", "=", "\"o\"", ",", "color", "=", "self", ".", "basecolors", ",", "zorder", "=", "2", "\n", ")", "\n", "self", ".", "line_main", ".", "set_picker", "(", "True", ")", "\n", "\n", "if", "(", "\n", "(", "\n", "plot_args", "[", "\"legend\"", "]", "\n", "and", "all", "(", "lm", "is", "not", "None", "for", "lm", "in", "self", ".", "label_mapping", ".", "values", "(", ")", ")", "\n", ")", "\n", "if", "\"legend\"", "in", "plot_args", "\n", "else", "False", "\n", ")", ":", "\n", "            ", "box", "=", "ax", ".", "get_position", "(", ")", "\n", "ax", ".", "set_position", "(", "[", "box", ".", "x0", ",", "box", ".", "y0", ",", "box", ".", "width", ",", "box", ".", "height", "*", "0.8", "]", ")", "\n", "legend_elements", "=", "[", "]", "\n", "for", "d", "in", "np", ".", "unique", "(", "self", ".", "data", "[", "\"dataset\"", "]", ")", ".", "flatten", "(", ")", ":", "\n", "                ", "cls", "=", "np", ".", "unique", "(", "self", ".", "gt", "[", "np", ".", "array", "(", "self", ".", "data", "[", "\"dataset\"", "]", ")", "[", "self", ".", "gi", "]", "==", "d", "]", ")", "\n", "cls", "=", "list", "(", "\n", "{", "\n", "(", "self", ".", "label_mapping", "[", "d", "]", "[", "cl", "]", "[", "0", "]", ",", "self", ".", "label_mapping", "[", "d", "]", "[", "cl", "]", "[", "1", "]", ")", "\n", "for", "cl", "in", "cls", "\n", "}", "\n", ")", "\n", "names", "=", "np", ".", "array", "(", "[", "i", "[", "0", "]", "for", "i", "in", "cls", "]", ")", "\n", "cols", "=", "np", ".", "array", "(", "[", "i", "[", "1", "]", "for", "i", "in", "cls", "]", ")", "\n", "legend_elements", "+=", "[", "\n", "Patch", "(", "\n", "color", "=", "tuple", "(", "i", "/", "255.0", "for", "i", "in", "cols", "[", "i", "]", ")", "+", "(", "1.0", ",", ")", ",", "\n", "label", "=", "names", "[", "i", "]", "\n", "if", "not", "names", "[", "i", "]", "[", "-", "1", "]", ".", "isdigit", "(", ")", "\n", "else", "names", "[", "i", "]", "[", ":", "names", "[", "i", "]", ".", "rfind", "(", "\" \"", ")", "]", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "names", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", "", "ax", ".", "legend", "(", "\n", "loc", "=", "\"upper left\"", ",", "\n", "handles", "=", "legend_elements", ",", "\n", "ncol", "=", "8", ",", "\n", "bbox_to_anchor", "=", "(", "0", ",", "1.2", ")", ",", "\n", ")", "\n", "", "self", ".", "basecolors", "=", "self", ".", "line_main", ".", "get_facecolor", "(", ")", "\n", "\n", "tmp", "=", "(", "\n", "Image", ".", "open", "(", "self", ".", "data", "[", "\"image_path\"", "]", "[", "self", ".", "gi", "[", "0", "]", "]", ")", "\n", ".", "convert", "(", "\"RGB\"", ")", "\n", ".", "crop", "(", "self", ".", "data", "[", "\"box\"", "]", "[", "0", "]", ")", "\n", ")", "\n", "tmp", ".", "thumbnail", "(", "self", ".", "tnsize", ",", "Image", ".", "ANTIALIAS", ")", "\n", "self", ".", "im", "=", "OffsetImage", "(", "tmp", ",", "zoom", "=", "2", ")", "\n", "self", ".", "xybox", "=", "(", "50.0", ",", "50.0", ")", "\n", "self", ".", "ab", "=", "AnnotationBbox", "(", "\n", "self", ".", "im", ",", "\n", "(", "0", ",", "0", ")", ",", "\n", "xybox", "=", "self", ".", "xybox", ",", "\n", "xycoords", "=", "\"data\"", ",", "\n", "boxcoords", "=", "\"offset points\"", ",", "\n", "pad", "=", "0.3", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"->\"", ")", ",", "\n", ")", "\n", "ax", ".", "add_artist", "(", "self", ".", "ab", ")", "\n", "self", ".", "ab", ".", "set_visible", "(", "False", ")", "\n", "\n", "if", "plot_args", "[", "\"save_path\"", "]", "is", "not", "None", "if", "\"save_path\"", "in", "plot_args", "else", "False", ":", "\n", "            ", "plt", ".", "savefig", "(", "\n", "expanduser", "(", "plot_args", "[", "\"save_path\"", "]", ")", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "\"tight\"", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "fig_main", ".", "canvas", ".", "mpl_connect", "(", "\"motion_notify_event\"", ",", "self", ".", "hover_main", ")", "\n", "self", ".", "fig_main", ".", "canvas", ".", "mpl_connect", "(", "\"button_press_event\"", ",", "self", ".", "click_main", ")", "\n", "self", ".", "fig_main", ".", "canvas", ".", "mpl_connect", "(", "\"scroll_event\"", ",", "self", ".", "scroll", ")", "\n", "self", ".", "fig_main", ".", "canvas", ".", "mpl_connect", "(", "\"key_press_event\"", ",", "self", ".", "key_press", ")", "\n", "self", ".", "fig_main", ".", "canvas", ".", "mpl_connect", "(", "\"key_release_event\"", ",", "self", ".", "key_release", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.hover_main": [[361, 400], ["discover.Discovery.fig_main.canvas.draw_idle", "discover.Discovery.line_main.contains", "discover.Discovery.ab.set_visible", "PIL.Image.open().convert().crop", "PIL.Image.open().convert().crop.thumbnail", "discover.Discovery.im.set_data", "PIL.Image.open().convert().crop.close", "discover.Discovery.ab.set_visible", "discover.Discovery.fig_main.get_size_inches", "discover.Discovery.line_main.contains", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "", "def", "hover_main", "(", "self", ",", "event", ")", ":", "\n", "        ", "\"\"\"Action handler for the main plot.\n\n        This function shows a thumbnail of the underlying image when a scatter point\n        is hovered with the mouse.\n        \"\"\"", "\n", "# if the mouse is over the scatter points", "\n", "if", "self", ".", "line_main", ".", "contains", "(", "event", ")", "[", "0", "]", ":", "\n", "# find out the index within the array from the event", "\n", "            ", "ind", ",", "*", "_", "=", "self", ".", "line_main", ".", "contains", "(", "event", ")", "[", "1", "]", "[", "\"ind\"", "]", "\n", "\n", "# get the figure size", "\n", "w", ",", "h", "=", "self", ".", "fig_main", ".", "get_size_inches", "(", ")", "*", "self", ".", "fig_main", ".", "dpi", "\n", "ws", "=", "(", "event", ".", "x", ">", "w", "/", "2.0", ")", "*", "-", "1", "+", "(", "event", ".", "x", "<=", "w", "/", "2.0", ")", "\n", "hs", "=", "(", "event", ".", "y", ">", "h", "/", "2.0", ")", "*", "-", "1", "+", "(", "event", ".", "y", "<=", "h", "/", "2.0", ")", "\n", "\n", "# if event occurs in the top or right quadrant of the figure,", "\n", "# change the annotation box position relative to mouse.", "\n", "self", ".", "ab", ".", "xybox", "=", "(", "self", ".", "xybox", "[", "0", "]", "*", "ws", ",", "self", ".", "xybox", "[", "1", "]", "*", "hs", ")", "\n", "\n", "# make annotation box visible", "\n", "self", ".", "ab", ".", "set_visible", "(", "True", ")", "\n", "\n", "# place it at the position of the hovered scatter point", "\n", "self", ".", "ab", ".", "xy", "=", "(", "self", ".", "x", "[", "ind", "]", ",", "self", ".", "y", "[", "ind", "]", ")", "\n", "\n", "# set the image corresponding to that point", "\n", "tmp", "=", "(", "\n", "Image", ".", "open", "(", "self", ".", "data", "[", "\"image_path\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", ")", "\n", ".", "convert", "(", "\"RGB\"", ")", "\n", ".", "crop", "(", "self", ".", "data", "[", "\"box\"", "]", "[", "ind", "]", ")", "\n", ")", "\n", "tmp", ".", "thumbnail", "(", "self", ".", "tnsize", ",", "Image", ".", "ANTIALIAS", ")", "\n", "self", ".", "im", ".", "set_data", "(", "tmp", ")", "\n", "tmp", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "# if the mouse is not over a scatter point", "\n", "            ", "self", ".", "ab", ".", "set_visible", "(", "False", ")", "\n", "", "self", ".", "fig_main", ".", "canvas", ".", "draw_idle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.click_main": [[401, 464], ["discover.Discovery.line_main.contains", "discover.Discovery.set_color", "discover.Discovery.flush_colors", "discover.Discovery.store_thumbnail", "discover.Discovery.line_main.contains", "discover.Discovery.show_single_image", "discover.Discovery.show_full_image", "discover.Discovery.show_single_image", "discover.Discovery.show_full_image", "matplotlib.fignum_exists", "matplotlib.fignum_exists", "discover.Discovery.log.info", "discover.Discovery.get_nearest_neighbors", "math.ceil", "math.ceil", "matplotlib.figure", "matplotlib.figure", "discover.Discovery.fig_nn.canvas.set_window_title", "range", "discover.Discovery.fig_nn.canvas.mpl_connect", "discover.Discovery.fig_nn.canvas.mpl_connect", "discover.Discovery.fig_nn.canvas.mpl_connect", "discover.Discovery.fig_nn.canvas.mpl_connect", "discover.Discovery.fig_nn.show", "discover.Discovery.update_nearest_neighbors", "thumbnails.append", "math.sqrt", "discover.Discovery.fig_nn.add_subplot", "discover.Discovery.set_axis_off", "PIL.Image.open().crop", "len", "discover.Discovery.imshow", "numpy.asarray", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.set_color", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.flush_colors", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.store_thumbnail", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_single_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_full_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_single_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_full_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.get_nearest_neighbors", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.update_nearest_neighbors"], ["", "def", "click_main", "(", "self", ",", "event", ")", ":", "\n", "        ", "\"\"\"Action handler for the main plot.\n\n        This function shows a single or full image or displays nearest neighbors based\n        on the button that has been pressed and which scatter point was pressed.\n        \"\"\"", "\n", "if", "self", ".", "line_main", ".", "contains", "(", "event", ")", "[", "0", "]", ":", "\n", "            ", "ind", ",", "*", "_", "=", "self", ".", "line_main", ".", "contains", "(", "event", ")", "[", "1", "]", "[", "\"ind\"", "]", "\n", "\n", "if", "self", ".", "current_pressed_key", "==", "\"t\"", "and", "event", ".", "button", "==", "1", ":", "\n", "                ", "self", ".", "store_thumbnail", "(", "ind", ")", "\n", "", "elif", "self", ".", "current_pressed_key", "==", "\"control\"", "and", "event", ".", "button", "==", "1", ":", "\n", "                ", "self", ".", "show_single_image", "(", "ind", ",", "save", "=", "True", ")", "\n", "", "elif", "self", ".", "current_pressed_key", "==", "\"control\"", "and", "event", ".", "button", "==", "2", ":", "\n", "                ", "self", ".", "show_full_image", "(", "ind", ",", "save", "=", "True", ")", "\n", "", "elif", "event", ".", "button", "==", "1", ":", "# left mouse button", "\n", "                ", "self", ".", "show_single_image", "(", "ind", ")", "\n", "", "elif", "event", ".", "button", "==", "2", ":", "# middle mouse button", "\n", "                ", "self", ".", "show_full_image", "(", "ind", ")", "\n", "", "elif", "event", ".", "button", "==", "3", ":", "# right mouse button", "\n", "                ", "if", "not", "plt", ".", "fignum_exists", "(", "2", ")", ":", "\n", "# nearest neighbor figure is not open anymore or has not been", "\n", "# opened yet", "\n", "                    ", "self", ".", "log", ".", "info", "(", "\"Loading nearest neighbors...\"", ")", "\n", "self", ".", "nearest_neighbors", "=", "self", ".", "get_nearest_neighbors", "(", "\n", "ind", ",", "metric", "=", "self", ".", "distance_metrics", "[", "self", ".", "dm", "]", "\n", ")", "\n", "thumbnails", "=", "[", "]", "\n", "for", "neighbor_ind", "in", "self", ".", "nearest_neighbors", ":", "\n", "                        ", "thumbnails", ".", "append", "(", "\n", "Image", ".", "open", "(", "\n", "self", ".", "data", "[", "\"image_path\"", "]", "[", "self", ".", "gi", "[", "neighbor_ind", "]", "]", "\n", ")", ".", "crop", "(", "self", ".", "data", "[", "\"box\"", "]", "[", "neighbor_ind", "]", ")", "\n", ")", "\n", "", "columns", "=", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "self", ".", "n_neighbors", ")", ")", "\n", "rows", "=", "math", ".", "ceil", "(", "self", ".", "n_neighbors", "/", "columns", ")", "\n", "\n", "self", ".", "fig_nn", "=", "plt", ".", "figure", "(", "num", "=", "2", ",", "dpi", "=", "self", ".", "dpi", ")", "\n", "self", ".", "fig_nn", ".", "canvas", ".", "set_window_title", "(", "\n", "\"{} nearest neighbors to selected image\"", ".", "format", "(", "\n", "self", ".", "n_neighbors", "\n", ")", "\n", ")", "\n", "for", "p", "in", "range", "(", "columns", "*", "rows", ")", ":", "\n", "                        ", "ax", "=", "self", ".", "fig_nn", ".", "add_subplot", "(", "rows", ",", "columns", ",", "p", "+", "1", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "if", "p", "<", "len", "(", "thumbnails", ")", ":", "\n", "                            ", "ax", ".", "imshow", "(", "np", ".", "asarray", "(", "thumbnails", "[", "p", "]", ")", ")", "\n", "", "", "self", ".", "fig_nn", ".", "canvas", ".", "mpl_connect", "(", "\"button_press_event\"", ",", "self", ".", "click_nn", ")", "\n", "self", ".", "fig_nn", ".", "canvas", ".", "mpl_connect", "(", "\"key_press_event\"", ",", "self", ".", "key_press", ")", "\n", "self", ".", "fig_nn", ".", "canvas", ".", "mpl_connect", "(", "\n", "\"key_release_event\"", ",", "self", ".", "key_release", "\n", ")", "\n", "self", ".", "fig_nn", ".", "canvas", ".", "mpl_connect", "(", "\"scroll_event\"", ",", "self", ".", "scroll", ")", "\n", "self", ".", "fig_nn", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "# nearest neighbor figure is already open. Update the figure with", "\n", "# new nearest neighbor", "\n", "                    ", "self", ".", "update_nearest_neighbors", "(", "ind", ")", "\n", "return", "\n", "\n", "", "", "self", ".", "set_color", "(", "ind", ",", "self", ".", "current_color", ")", "\n", "self", ".", "flush_colors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.click_nn": [[465, 486], ["discover.Discovery.get_ind_nn", "discover.Discovery.store_thumbnail", "discover.Discovery.show_single_image", "discover.Discovery.show_full_image", "discover.Discovery.show_single_image", "discover.Discovery.show_full_image", "discover.Discovery.update_nearest_neighbors"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.get_ind_nn", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.store_thumbnail", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_single_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_full_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_single_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_full_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.update_nearest_neighbors"], ["", "", "def", "click_nn", "(", "self", ",", "event", ")", ":", "\n", "        ", "\"\"\"Action handler for the nearest neighbor window.\n\n        When clicking a cropped segment in the nearest neighbor window the same actions\n        are taken as in the click handler for the main plot.\n        \"\"\"", "\n", "if", "event", ".", "inaxes", "in", "self", ".", "fig_nn", ".", "axes", ":", "\n", "            ", "ind", "=", "self", ".", "get_ind_nn", "(", "event", ")", "\n", "\n", "if", "self", ".", "current_pressed_key", "==", "\"t\"", "and", "event", ".", "button", "==", "1", ":", "\n", "                ", "self", ".", "store_thumbnail", "(", "self", ".", "nearest_neighbors", "[", "ind", "]", ")", "\n", "", "elif", "self", ".", "current_pressed_key", "==", "\"control\"", "and", "event", ".", "button", "==", "1", ":", "\n", "                ", "self", ".", "show_single_image", "(", "self", ".", "nearest_neighbors", "[", "ind", "]", ",", "save", "=", "True", ")", "\n", "", "elif", "self", ".", "current_pressed_key", "==", "\"control\"", "and", "event", ".", "button", "==", "2", ":", "\n", "                ", "self", ".", "show_full_image", "(", "self", ".", "nearest_neighbors", "[", "ind", "]", ",", "save", "=", "True", ")", "\n", "", "elif", "event", ".", "button", "==", "1", ":", "# left mouse button", "\n", "                ", "self", ".", "show_single_image", "(", "self", ".", "nearest_neighbors", "[", "ind", "]", ")", "\n", "", "elif", "event", ".", "button", "==", "2", ":", "# middle mouse button", "\n", "                ", "self", ".", "show_full_image", "(", "self", ".", "nearest_neighbors", "[", "ind", "]", ")", "\n", "", "elif", "event", ".", "button", "==", "3", ":", "# right mouse button", "\n", "                ", "self", ".", "update_nearest_neighbors", "(", "self", ".", "nearest_neighbors", "[", "ind", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.key_press": [[487, 530], ["discover.Discovery.log.debug", "discover.Discovery.log.info", "len", "discover.Discovery.log.info", "len", "discover.Discovery.log.info", "discover.Discovery.cluster", "discover.Discovery.flush_colors", "discover.Discovery.fig_main.axes[].get_legend", "discover.Discovery.fig_main.axes[].get_legend().remove", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "discover.Discovery.color_gt", "list", "discover.Discovery.color_pred", "discover.Discovery.cluster_methods.keys", "list", "list", "discover.Discovery.fig_main.axes[].get_legend", "max", "discover.Discovery.set_color", "discover.Discovery.flush_colors", "discover.Discovery.cluster_methods.keys", "discover.Discovery.cluster_methods.keys", "list", "discover.Discovery.fig_main.axes[].get_legend", "discover.Discovery.fig_main.axes[].get_legend().remove", "discover.Discovery.show_density", "range", "discover.Discovery.fig_main.axes[].get_legend"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.cluster", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.flush_colors", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.color_gt", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.color_pred", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.set_color", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.flush_colors", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_density"], ["", "", "", "def", "key_press", "(", "self", ",", "event", ")", ":", "\n", "        ", "\"\"\"Performs different actions based on pressed keys.\"\"\"", "\n", "self", ".", "log", ".", "debug", "(", "\"Key '{}' pressed.\"", ".", "format", "(", "event", ".", "key", ")", ")", "\n", "if", "event", ".", "key", "==", "\"m\"", ":", "\n", "            ", "self", ".", "dm", "+=", "1", "\n", "self", ".", "dm", "=", "self", ".", "dm", "%", "len", "(", "self", ".", "distance_metrics", ")", "\n", "self", ".", "log", ".", "info", "(", "\n", "\"Changed distance metric to {}\"", ".", "format", "(", "self", ".", "distance_metrics", "[", "self", ".", "dm", "]", ")", "\n", ")", "\n", "", "elif", "event", ".", "key", "==", "\"#\"", ":", "\n", "            ", "self", ".", "cme", "+=", "1", "\n", "self", ".", "cme", "=", "self", ".", "cme", "%", "len", "(", "self", ".", "cluster_methods", ")", "\n", "self", ".", "log", ".", "info", "(", "\n", "\"Changed clustering method to {}\"", ".", "format", "(", "\n", "list", "(", "self", ".", "cluster_methods", ".", "keys", "(", ")", ")", "[", "self", ".", "cme", "]", "\n", ")", "\n", ")", "\n", "", "elif", "event", ".", "key", "==", "\"c\"", ":", "\n", "            ", "self", ".", "log", ".", "info", "(", "\n", "\"Started clustering with {}...\"", ".", "format", "(", "\n", "list", "(", "self", ".", "cluster_methods", ".", "keys", "(", ")", ")", "[", "self", ".", "cme", "]", "\n", ")", "\n", ")", "\n", "self", ".", "cluster", "(", "method", "=", "list", "(", "self", ".", "cluster_methods", ".", "keys", "(", ")", ")", "[", "self", ".", "cme", "]", ")", "\n", "if", "self", ".", "fig_main", ".", "axes", "[", "0", "]", ".", "get_legend", "(", ")", "is", "not", "None", ":", "\n", "                ", "self", ".", "fig_main", ".", "axes", "[", "0", "]", ".", "get_legend", "(", ")", ".", "remove", "(", ")", "\n", "", "self", ".", "basecolors", "=", "cm", ".", "get_cmap", "(", "\"viridis\"", ",", "(", "max", "(", "self", ".", "clustering", ")", "+", "1", ")", ")", "(", "\n", "self", ".", "clustering", "\n", ")", "\n", "self", ".", "flush_colors", "(", ")", "\n", "", "elif", "event", ".", "key", "==", "\"g\"", ":", "\n", "            ", "self", ".", "color_gt", "(", ")", "\n", "", "elif", "event", ".", "key", "==", "\"h\"", ":", "\n", "            ", "self", ".", "color_pred", "(", ")", "\n", "", "elif", "event", ".", "key", "==", "\"b\"", ":", "\n", "            ", "self", ".", "set_color", "(", "list", "(", "range", "(", "self", ".", "basecolors", ".", "shape", "[", "0", "]", ")", ")", ",", "self", ".", "standard_color", ")", "\n", "if", "self", ".", "fig_main", ".", "axes", "[", "0", "]", ".", "get_legend", "(", ")", "is", "not", "None", ":", "\n", "                ", "self", ".", "fig_main", ".", "axes", "[", "0", "]", ".", "get_legend", "(", ")", ".", "remove", "(", ")", "\n", "", "self", ".", "flush_colors", "(", ")", "\n", "", "elif", "event", ".", "key", "==", "\"d\"", ":", "\n", "            ", "self", ".", "show_density", "(", ")", "\n", "\n", "", "self", ".", "current_pressed_key", "=", "event", ".", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.key_release": [[531, 535], ["discover.Discovery.log.debug"], "methods", ["None"], ["", "def", "key_release", "(", "self", ",", "event", ")", ":", "\n", "        ", "\"\"\"Clears the variable where the last pressed key is saved.\"\"\"", "\n", "self", ".", "current_pressed_key", "=", "None", "\n", "self", ".", "log", ".", "debug", "(", "\"Key '{}' released.\"", ".", "format", "(", "event", ".", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.scroll": [[536, 550], ["discover.Discovery.log.info", "discover.Discovery.log.info"], "methods", ["None"], ["", "def", "scroll", "(", "self", ",", "event", ")", ":", "\n", "        ", "\"\"\"Increases or decreases number of nearest neighbors when scrolling on\n        the main or nearest neighbor plot.\"\"\"", "\n", "if", "event", ".", "button", "==", "\"up\"", ":", "\n", "            ", "self", ".", "n_neighbors", "+=", "1", "\n", "self", ".", "log", ".", "info", "(", "\n", "\"Increased number of nearest neighbors to {}\"", ".", "format", "(", "self", ".", "n_neighbors", ")", "\n", ")", "\n", "", "elif", "event", ".", "button", "==", "\"down\"", ":", "\n", "            ", "if", "self", ".", "n_neighbors", ">", "0", ":", "\n", "                ", "self", ".", "n_neighbors", "-=", "1", "\n", "self", ".", "log", ".", "info", "(", "\n", "\"Decreased number of nearest neighbors to {}\"", ".", "format", "(", "\n", "self", ".", "n_neighbors", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_single_image": [[553, 588], ["discover.Discovery.log.info", "discover.Discovery.draw_box_on_image", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.set_axis_off", "plt.figure.add_subplot.imshow", "max", "numpy.asarray", "matplotlib.figure.subplots_adjust", "plt.figure.add_subplot.margins", "matplotlib.figure.gca().xaxis.set_major_locator", "matplotlib.figure.gca().yaxis.set_major_locator", "matplotlib.figure.savefig", "discover.Discovery.log.debug", "matplotlib.figure.canvas.set_window_title", "matplotlib.figure.tight_layout", "matplotlib.figure.show", "matplotlib.NullLocator", "matplotlib.NullLocator", "matplotlib.NullLocator", "matplotlib.NullLocator", "os.path.join", "max", "os.path.join", "matplotlib.get_fignums", "matplotlib.get_fignums", "matplotlib.figure.gca", "matplotlib.figure.gca"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.draw_box_on_image"], ["", "", "", "def", "show_single_image", "(", "self", ",", "ind", ",", "save", "=", "False", ")", ":", "\n", "        ", "\"\"\"Displays the full image belonging to a segment. The segment is marked with\n        a red bounding box.\"\"\"", "\n", "self", ".", "log", ".", "info", "(", "\"{} image...\"", ".", "format", "(", "\"Saving\"", "if", "save", "else", "\"Loading\"", ")", ")", "\n", "img_box", "=", "self", ".", "draw_box_on_image", "(", "ind", ")", "\n", "fig_tmp", "=", "plt", ".", "figure", "(", "max", "(", "3", ",", "max", "(", "plt", ".", "get_fignums", "(", ")", ")", "+", "1", ")", ",", "dpi", "=", "self", ".", "dpi", ")", "\n", "ax", "=", "fig_tmp", ".", "add_subplot", "(", "111", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "ax", ".", "imshow", "(", "np", ".", "asarray", "(", "img_box", ")", ",", "interpolation", "=", "\"nearest\"", ")", "\n", "if", "save", ":", "\n", "            ", "fig_tmp", ".", "subplots_adjust", "(", "\n", "bottom", "=", "0", ",", "left", "=", "0", ",", "right", "=", "1", ",", "top", "=", "1", ",", "hspace", "=", "0", ",", "wspace", "=", "0", "\n", ")", "\n", "ax", ".", "margins", "(", "0.05", ",", "0.05", ")", "\n", "fig_tmp", ".", "gca", "(", ")", ".", "xaxis", ".", "set_major_locator", "(", "plt", ".", "NullLocator", "(", ")", ")", "\n", "fig_tmp", ".", "gca", "(", ")", ".", "yaxis", ".", "set_major_locator", "(", "plt", ".", "NullLocator", "(", ")", ")", "\n", "fig_tmp", ".", "savefig", "(", "\n", "join", "(", "self", ".", "save_dir", ",", "\"image_{}.jpg\"", ".", "format", "(", "ind", ")", ")", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "pad_inches", "=", "0.0", ",", "\n", ")", "\n", "self", ".", "log", ".", "debug", "(", "\n", "\"Saved image to {}\"", ".", "format", "(", "\n", "join", "(", "self", ".", "save_dir", ",", "\"image_{}.jpg\"", ".", "format", "(", "ind", ")", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "fig_tmp", ".", "canvas", ".", "set_window_title", "(", "\n", "\"Dataset: {}, Image index: {}\"", ".", "format", "(", "\n", "self", ".", "data", "[", "\"dataset\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", ",", "\n", "self", ".", "data", "[", "\"image_index\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", ",", "\n", ")", "\n", ")", "\n", "fig_tmp", ".", "tight_layout", "(", "pad", "=", "0.0", ")", "\n", "fig_tmp", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_full_image": [[589, 699], ["discover.Discovery.log.info", "numpy.asarray", "src.MetaSeg.functions.in_out.probs_gt_load", "src.MetaSeg.functions.in_out.components_load", "src.MetaSeg.functions.metrics.entropy", "pred.argmax.argmax.argmax", "numpy.asarray().reshape", "PIL.Image.fromarray", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.canvas.set_window_title", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.set_axis_off", "plt.figure.add_subplot.imshow", "PIL.Image.open().convert", "numpy.asarray().reshape", "numpy.zeros_like", "PIL.Image.fromarray", "discover.Discovery.visualize_segments", "max", "max", "min", "min", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.rectangle", "len", "numpy.asarray().astype", "max", "matplotlib.figure.subplots_adjust", "plt.figure.add_subplot.margins", "matplotlib.figure.gca().xaxis.set_major_locator", "matplotlib.figure.gca().yaxis.set_major_locator", "matplotlib.figure.savefig", "discover.Discovery.log.debug", "matplotlib.figure.tight_layout", "matplotlib.figure.show", "os.path.join", "os.path.join", "numpy.asarray", "numpy.uint8", "enumerate", "matplotlib.NullLocator", "matplotlib.NullLocator", "matplotlib.NullLocator", "matplotlib.NullLocator", "os.path.join", "PIL.Image.open", "numpy.asarray", "numpy.asarray", "max", "os.path.join", "matplotlib.get_fignums", "matplotlib.get_fignums", "matplotlib.figure.gca", "matplotlib.figure.gca", "range", "range", "range", "range", "matplotlib.cm.jet", "matplotlib.cm.jet"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.visualize_segments"], ["", "", "def", "show_full_image", "(", "self", ",", "ind", ",", "save", "=", "False", ")", ":", "\n", "        ", "\"\"\"Displays four panels of the full image belonging to a segment.\n\n        Top left: Entropy heatmap of prediction.\n        Top right: Predicted IoU of each segment.\n        Bottom left: Source image with ground truth overlay.\n        Bottom right: Predicted semantic segmentation.\n        \"\"\"", "\n", "self", ".", "log", ".", "info", "(", "\"{} detailed image...\"", ".", "format", "(", "\"Saving\"", "if", "save", "else", "\"Loading\"", ")", ")", "\n", "box", "=", "self", ".", "data", "[", "\"box\"", "]", "[", "ind", "]", "\n", "image", "=", "np", ".", "asarray", "(", "\n", "Image", ".", "open", "(", "self", ".", "data", "[", "\"image_path\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", ")", "\n", "image_index", "=", "self", ".", "data", "[", "\"image_index\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", "\n", "iou_pred", "=", "self", ".", "data", "[", "\"iou_pred\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", "\n", "dataset", "=", "self", ".", "data", "[", "\"dataset\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", "\n", "model_name", "=", "self", ".", "data", "[", "\"model_name\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", "\n", "\n", "pred", ",", "gt", ",", "image_path", "=", "probs_gt_load", "(", "\n", "image_index", ",", "\n", "input_dir", "=", "join", "(", "CONFIG", ".", "metaseg_io_path", ",", "\"input\"", ",", "model_name", ",", "dataset", ")", ",", "\n", ")", "\n", "components", "=", "components_load", "(", "\n", "image_index", ",", "\n", "components_dir", "=", "join", "(", "\n", "CONFIG", ".", "metaseg_io_path", ",", "\"components\"", ",", "model_name", ",", "dataset", "\n", ")", ",", "\n", ")", "\n", "e", "=", "entropy", "(", "pred", ")", "\n", "pred", "=", "pred", ".", "argmax", "(", "2", ")", "\n", "predc", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "self", ".", "pred_mapping", "[", "pred", "[", "ind_i", ",", "ind_j", "]", "]", "[", "1", "]", "\n", "for", "ind_i", "in", "range", "(", "pred", ".", "shape", "[", "0", "]", ")", "\n", "for", "ind_j", "in", "range", "(", "pred", ".", "shape", "[", "1", "]", ")", "\n", "]", "\n", ")", ".", "reshape", "(", "image", ".", "shape", ")", "\n", "overlay_factor", "=", "[", "1.0", ",", "0.5", ",", "1.0", "]", "\n", "\n", "if", "self", ".", "label_mapping", "[", "dataset", "]", "is", "not", "None", ":", "\n", "            ", "gtc", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "self", ".", "label_mapping", "[", "dataset", "]", "[", "gt", "[", "ind_i", ",", "ind_j", "]", "]", "[", "1", "]", "\n", "for", "ind_i", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", "\n", "for", "ind_j", "in", "range", "(", "gt", ".", "shape", "[", "1", "]", ")", "\n", "]", "\n", ")", ".", "reshape", "(", "image", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "gtc", "=", "np", ".", "zeros_like", "(", "image", ")", "\n", "overlay_factor", "[", "1", "]", "=", "0.0", "\n", "\n", "", "img_predc", ",", "img_gtc", ",", "img_entropy", "=", "[", "\n", "Image", ".", "fromarray", "(", "\n", "np", ".", "uint8", "(", "arr", "*", "overlay_factor", "[", "i", "]", "+", "image", "*", "(", "1", "-", "overlay_factor", "[", "i", "]", ")", ")", "\n", ")", "\n", "for", "i", ",", "arr", "in", "enumerate", "(", "[", "predc", ",", "gtc", ",", "cm", ".", "jet", "(", "e", ")", "[", ":", ",", ":", ",", ":", "3", "]", "*", "255.0", "]", ")", "\n", "]", "\n", "\n", "img_ioupred", "=", "Image", ".", "fromarray", "(", "self", ".", "visualize_segments", "(", "components", ",", "iou_pred", ")", ")", "\n", "\n", "images", "=", "[", "img_gtc", ",", "img_predc", ",", "img_entropy", ",", "img_ioupred", "]", "\n", "\n", "box_line_width", "=", "5", "\n", "left", ",", "upper", "=", "max", "(", "0", ",", "box", "[", "0", "]", "-", "box_line_width", ")", ",", "max", "(", "0", ",", "box", "[", "1", "]", "-", "box_line_width", ")", "\n", "right", ",", "lower", "=", "min", "(", "pred", ".", "shape", "[", "1", "]", ",", "box", "[", "2", "]", "+", "box_line_width", ")", ",", "min", "(", "\n", "pred", ".", "shape", "[", "0", "]", ",", "box", "[", "3", "]", "+", "box_line_width", "\n", ")", "\n", "\n", "for", "k", "in", "images", ":", "\n", "            ", "draw", "=", "ImageDraw", ".", "Draw", "(", "k", ")", "\n", "draw", ".", "rectangle", "(", "\n", "[", "left", ",", "upper", ",", "right", ",", "lower", "]", ",", "outline", "=", "(", "255", ",", "0", ",", "0", ")", ",", "width", "=", "box_line_width", "\n", ")", "\n", "del", "draw", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "            ", "images", "[", "k", "]", "=", "np", ".", "asarray", "(", "images", "[", "k", "]", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "\n", "", "img_top", "=", "np", ".", "concatenate", "(", "images", "[", "2", ":", "]", ",", "axis", "=", "1", ")", "\n", "img_bottom", "=", "np", ".", "concatenate", "(", "images", "[", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "\n", "img_total", "=", "np", ".", "concatenate", "(", "(", "img_top", ",", "img_bottom", ")", ",", "axis", "=", "0", ")", "\n", "fig_tmp", "=", "plt", ".", "figure", "(", "max", "(", "3", ",", "max", "(", "plt", ".", "get_fignums", "(", ")", ")", "+", "1", ")", ",", "dpi", "=", "self", ".", "dpi", ")", "\n", "fig_tmp", ".", "canvas", ".", "set_window_title", "(", "\n", "\"Dataset: {}, Image index: {}\"", ".", "format", "(", "dataset", ",", "image_index", ")", "\n", ")", "\n", "ax", "=", "fig_tmp", ".", "add_subplot", "(", "111", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "ax", ".", "imshow", "(", "img_total", ",", "interpolation", "=", "\"nearest\"", ")", "\n", "\n", "if", "save", ":", "\n", "            ", "fig_tmp", ".", "subplots_adjust", "(", "\n", "bottom", "=", "0", ",", "left", "=", "0", ",", "right", "=", "1", ",", "top", "=", "1", ",", "hspace", "=", "0", ",", "wspace", "=", "0", "\n", ")", "\n", "ax", ".", "margins", "(", "0.05", ",", "0.05", ")", "\n", "fig_tmp", ".", "gca", "(", ")", ".", "xaxis", ".", "set_major_locator", "(", "plt", ".", "NullLocator", "(", ")", ")", "\n", "fig_tmp", ".", "gca", "(", ")", ".", "yaxis", ".", "set_major_locator", "(", "plt", ".", "NullLocator", "(", ")", ")", "\n", "fig_tmp", ".", "savefig", "(", "\n", "join", "(", "self", ".", "save_dir", ",", "\"detailed_image_{}.jpg\"", ".", "format", "(", "ind", ")", ")", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "pad_inches", "=", "0.0", ",", "\n", ")", "\n", "self", ".", "log", ".", "debug", "(", "\n", "\"Saved image to {}\"", ".", "format", "(", "\n", "join", "(", "self", ".", "save_dir", ",", "\"detailed_image_{}.jpg\"", ".", "format", "(", "ind", ")", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "fig_tmp", ".", "tight_layout", "(", "pad", "=", "0.0", ")", "\n", "fig_tmp", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.store_thumbnail": [[700, 731], ["PIL.Image.open().convert", "image.crop.crop.crop", "name[].isdigit", "name.replace.replace.replace", "image.crop.crop.save", "discover.Discovery.log.debug", "os.path.join", "PIL.Image.open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.save"], ["", "", "def", "store_thumbnail", "(", "self", ",", "ind", ")", ":", "\n", "        ", "\"\"\"Stores a thumbnail of a segment if requested. Thus is not saving the whole\n        image but only the cropped part.\"\"\"", "\n", "image", "=", "Image", ".", "open", "(", "self", ".", "data", "[", "\"image_path\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "image", "=", "image", ".", "crop", "(", "self", ".", "data", "[", "\"box\"", "]", "[", "ind", "]", ")", "\n", "\n", "if", "self", ".", "label_mapping", "[", "self", ".", "data", "[", "\"dataset\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", "]", "is", "None", ":", "\n", "            ", "name", "=", "\"None\"", "\n", "", "else", ":", "\n", "            ", "name", "=", "self", ".", "label_mapping", "[", "self", ".", "data", "[", "\"dataset\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", "]", "[", "self", ".", "gt", "[", "ind", "]", "]", "[", "\n", "0", "\n", "]", "\n", "", "if", "name", "[", "-", "1", "]", ".", "isdigit", "(", ")", ":", "\n", "            ", "name", "=", "name", "[", ":", "-", "2", "]", "\n", "\n", "", "name", "=", "name", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "\n", "image", ".", "save", "(", "\n", "join", "(", "\n", "self", ".", "save_dir", ",", "\n", "\"thumbnail_{}_{:0>2.1f}_{:0>2.1f}.jpg\"", ".", "format", "(", "\n", "name", ",", "self", ".", "x", "[", "ind", "]", ",", "self", ".", "y", "[", "ind", "]", "\n", ")", ",", "\n", ")", "\n", ")", "\n", "self", ".", "log", ".", "debug", "(", "\n", "\"Saved thumbnail to {}\"", ".", "format", "(", "\n", "join", "(", "\n", "self", ".", "save_dir", ",", "\n", "\"thumbnail_{}_{:0>2.1f}_{:0>2.1f}.jpg\"", ".", "format", "(", "\n", "name", ",", "self", ".", "x", "[", "ind", "]", ",", "self", ".", "y", "[", "ind", "]", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.get_nearest_neighbors": [[736, 744], ["discover.Discovery.lp_dist", "discover.Discovery.cos_dist", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.lp_dist", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.cos_dist"], ["", "def", "get_nearest_neighbors", "(", "self", ",", "ind", ",", "metric", "=", "\"cos\"", ")", ":", "\n", "        ", "\"\"\"Computes nearest neighbors to the specified index in the collection of\n        segment crops.\"\"\"", "\n", "if", "metric", "==", "\"euclid\"", ":", "\n", "            ", "dists", "=", "self", ".", "lp_dist", "(", "self", ".", "embeddings", "[", "ind", "]", ",", "self", ".", "embeddings", ",", "d", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "dists", "=", "self", ".", "cos_dist", "(", "self", ".", "embeddings", "[", "ind", "]", ",", "self", ".", "embeddings", ")", "\n", "", "return", "np", ".", "argsort", "(", "dists", ")", "[", "1", ":", "(", "self", ".", "n_neighbors", "+", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.update_nearest_neighbors": [[745, 778], ["discover.Discovery.log.info", "discover.Discovery.get_nearest_neighbors", "math.ceil", "range", "discover.Discovery.fig_nn.canvas.draw", "discover.Discovery.set_color", "discover.Discovery.flush_colors", "thumbnails.append", "math.sqrt", "len", "discover.Discovery.rearrange_axes", "len", "discover.Discovery.fig_nn.axes[].imshow", "discover.Discovery.fig_nn.axes[].clear", "discover.Discovery.fig_nn.axes[].set_axis_off", "matplotlib.imread", "matplotlib.imread"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.get_nearest_neighbors", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.set_color", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.flush_colors", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.rearrange_axes"], ["", "def", "update_nearest_neighbors", "(", "self", ",", "ind", ")", ":", "\n", "        ", "\"\"\"If requesting nearest neighbors of a segment within the nearest neighbor\n        plot window the nearest neighbors are updated according to the newly\n        selected segment.\n        \"\"\"", "\n", "self", ".", "log", ".", "info", "(", "\"Loading nearest neighbors...\"", ")", "\n", "self", ".", "nearest_neighbors", "=", "self", ".", "get_nearest_neighbors", "(", "\n", "ind", ",", "metric", "=", "self", ".", "distance_metrics", "[", "self", ".", "dm", "]", "\n", ")", "\n", "thumbnails", "=", "[", "]", "\n", "for", "neighbor_ind", "in", "self", ".", "nearest_neighbors", ":", "\n", "            ", "b", "=", "self", ".", "data", "[", "\"box\"", "]", "[", "neighbor_ind", "]", "\n", "thumbnails", ".", "append", "(", "\n", "plt", ".", "imread", "(", "self", ".", "data", "[", "\"image_path\"", "]", "[", "self", ".", "gi", "[", "neighbor_ind", "]", "]", ")", "[", "\n", "b", "[", "1", "]", ":", "b", "[", "3", "]", ",", "b", "[", "0", "]", ":", "b", "[", "2", "]", ",", ":", "\n", "]", "\n", ")", "\n", "", "n", "=", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "len", "(", "self", ".", "nearest_neighbors", ")", ")", ")", "\n", "if", "len", "(", "self", ".", "fig_nn", ".", "axes", ")", "!=", "(", "n", "**", "2", ")", ":", "\n", "# number of nearest neighbors has been changed", "\n", "# redefine number of subplots in fig_nn", "\n", "            ", "self", ".", "rearrange_axes", "(", "n", ",", "n", ")", "\n", "\n", "", "for", "p", "in", "range", "(", "n", "**", "2", ")", ":", "\n", "            ", "if", "p", "<", "self", ".", "n_neighbors", ":", "\n", "                ", "self", ".", "fig_nn", ".", "axes", "[", "p", "]", ".", "imshow", "(", "thumbnails", "[", "p", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fig_nn", ".", "axes", "[", "p", "]", ".", "clear", "(", ")", "\n", "self", ".", "fig_nn", ".", "axes", "[", "p", "]", ".", "set_axis_off", "(", ")", "\n", "\n", "", "", "self", ".", "fig_nn", ".", "canvas", ".", "draw", "(", ")", "\n", "self", ".", "set_color", "(", "ind", ",", "self", ".", "current_color", ")", "\n", "self", ".", "flush_colors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.cluster": [[779, 788], ["discover.Discovery.n_cluster_prompt", "discover.Discovery.elbow"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.n_cluster_prompt", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.elbow"], ["", "def", "cluster", "(", "self", ",", "method", "=", "\"kmeans\"", ")", ":", "\n", "        ", "if", "method", "in", "self", ".", "methods_with_ncluster_param", ":", "\n", "            ", "n_clusters", "=", "self", ".", "n_cluster_prompt", "(", ")", "\n", "if", "n_clusters", "==", "\"elbow\"", "and", "method", "==", "\"kmeans\"", ":", "\n", "                ", "n_clusters", "=", "self", ".", "elbow", "(", ")", "\n", "\n", "", "self", ".", "clustering", "=", "self", ".", "cluster_methods", "[", "method", "]", "[", "\"main\"", "]", "(", "\n", "n_clusters", "=", "n_clusters", ",", "**", "self", ".", "cluster_methods", "[", "method", "]", "[", "\"kwargs\"", "]", "\n", ")", ".", "fit_predict", "(", "self", ".", "embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.elbow": [[789, 802], ["int", "int", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.plot", "matplotlib.figure.show", "int", "input", "input", "sklearn.cluster.KMeans", "k.fit", "max", "range", "input", "range", "tqdm.tqdm.tqdm", "max", "len", "matplotlib.get_fignums", "matplotlib.get_fignums"], "methods", ["None"], ["", "", "def", "elbow", "(", "self", ")", ":", "\n", "        ", "low", "=", "int", "(", "input", "(", "\"Enter the minimum number of clusters: \"", ")", ")", "\n", "high", "=", "int", "(", "input", "(", "\"Enter the maximum number of clusters: \"", ")", ")", "\n", "km", "=", "[", "KMeans", "(", "n_clusters", "=", "i", ")", "for", "i", "in", "range", "(", "low", ",", "high", "+", "1", ")", "]", "\n", "\n", "km", "=", "[", "k", ".", "fit", "(", "self", ".", "embeddings", ")", "for", "k", "in", "tqdm", "(", "km", ",", "total", "=", "len", "(", "km", ")", ")", "]", "\n", "score", "=", "[", "k", ".", "inertia_", "for", "k", "in", "km", "]", "\n", "\n", "fig_elbow", "=", "plt", ".", "figure", "(", "max", "(", "3", ",", "max", "(", "plt", ".", "get_fignums", "(", ")", ")", "+", "1", ")", ")", "\n", "ax", "=", "fig_elbow", ".", "add_subplot", "(", "111", ")", "\n", "ax", ".", "plot", "(", "range", "(", "low", ",", "high", "+", "1", ")", ",", "score", ")", "\n", "fig_elbow", ".", "show", "(", ")", "\n", "return", "int", "(", "input", "(", "\"Enter number of clusters: \"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.n_cluster_prompt": [[803, 819], ["input", "int", "ValueError", "discover.Discovery.log.error"], "methods", ["None"], ["", "def", "n_cluster_prompt", "(", "self", ")", ":", "\n", "        ", "inp", "=", "input", "(", "\"Enter the number of clusters: \"", ")", "\n", "if", "inp", "==", "\"elbow\"", ":", "\n", "            ", "return", "inp", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "inp", "=", "int", "(", "inp", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "self", ".", "log", ".", "error", "(", "\n", "\"Input should be an int or 'elbow' but received {}!\"", ".", "format", "(", "inp", ")", "\n", ")", "\n", "return", "\"error\"", "\n", "", "if", "inp", "<=", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\"Number of clusters should be greater than 1!\"", ")", "\n", "", "else", ":", "\n", "                ", "return", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.rearrange_axes": [[820, 839], ["len", "enumerate", "range", "range", "enumerate", "discover.Discovery.change_geometry", "discover.Discovery.fig_nn.add_subplot", "discover.Discovery.set_axis_off", "discover.Discovery.fig_nn.delaxes", "discover.Discovery.change_geometry"], "methods", ["None"], ["", "", "", "def", "rearrange_axes", "(", "self", ",", "nrows", ",", "ncols", ")", ":", "\n", "        ", "\"\"\"Helper function for the nearest neighbor plot window. If number of nearest\n        neighbors has been changed and a new query segment has been chosen the\n        arrangement of subplots within the window has to be changed.\n        \"\"\"", "\n", "n", "=", "len", "(", "self", ".", "fig_nn", ".", "axes", ")", "\n", "if", "n", "<=", "(", "nrows", "*", "ncols", ")", ":", "\n", "# we need to add more axes", "\n", "            ", "for", "i", ",", "ax", "in", "enumerate", "(", "self", ".", "fig_nn", ".", "axes", ")", ":", "\n", "                ", "ax", ".", "change_geometry", "(", "nrows", ",", "ncols", ",", "i", "+", "1", ")", "\n", "", "for", "p", "in", "range", "(", "n", ",", "nrows", "*", "ncols", ")", ":", "\n", "                ", "ax", "=", "self", ".", "fig_nn", ".", "add_subplot", "(", "nrows", ",", "ncols", ",", "p", "+", "1", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "", "", "else", ":", "\n", "# we need to remove some axes", "\n", "            ", "for", "p", "in", "range", "(", "n", "-", "1", ",", "(", "nrows", "*", "ncols", ")", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "self", ".", "fig_nn", ".", "delaxes", "(", "self", ".", "fig_nn", ".", "axes", "[", "p", "]", ")", "\n", "", "for", "i", ",", "ax", "in", "enumerate", "(", "self", ".", "fig_nn", ".", "axes", ")", ":", "\n", "                ", "ax", ".", "change_geometry", "(", "nrows", ",", "ncols", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.draw_box_on_image": [[840, 855], ["PIL.Image.open().convert", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.rectangle", "max", "max", "min", "min", "PIL.Image.open"], "methods", ["None"], ["", "", "", "def", "draw_box_on_image", "(", "self", ",", "ind", ")", ":", "\n", "        ", "\"\"\"Draws the red bounding of a selected segment onto the source image.\"\"\"", "\n", "box_line_width", "=", "5", "\n", "img_box", "=", "Image", ".", "open", "(", "self", ".", "data", "[", "\"image_path\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "img_box", ")", "\n", "left", ",", "upper", ",", "right", ",", "lower", "=", "self", ".", "data", "[", "\"box\"", "]", "[", "ind", "]", "\n", "left", ",", "upper", "=", "max", "(", "0", ",", "left", "-", "box_line_width", ")", ",", "max", "(", "0", ",", "upper", "-", "box_line_width", ")", "\n", "right", ",", "lower", "=", "min", "(", "img_box", ".", "size", "[", "0", "]", ",", "right", "+", "box_line_width", ")", ",", "min", "(", "\n", "img_box", ".", "size", "[", "1", "]", ",", "lower", "+", "box_line_width", "\n", ")", "\n", "draw", ".", "rectangle", "(", "\n", "[", "left", ",", "upper", ",", "right", ",", "lower", "]", ",", "outline", "=", "(", "255", ",", "0", ",", "0", ")", ",", "width", "=", "box_line_width", "\n", ")", "\n", "del", "draw", "\n", "return", "img_box", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.visualize_segments": [[856, 885], ["numpy.asarray", "numpy.asarray", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.asarray", "len", "numpy.zeros", "numpy.meshgrid", "x.reshape.reshape.reshape", "y.reshape.reshape.reshape", "numpy.asarray().astype", "comp.copy", "len", "numpy.arange", "numpy.arange", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "visualize_segments", "(", "comp", ",", "metric", ")", ":", "\n", "        ", "\"\"\"Helper function for generation of the four panels in the detailed\n        image function.\"\"\"", "\n", "r", "=", "np", ".", "asarray", "(", "metric", ")", "\n", "r", "=", "1", "-", "0.5", "*", "r", "\n", "g", "=", "np", ".", "asarray", "(", "metric", ")", "\n", "b", "=", "0.3", "+", "0.35", "*", "np", ".", "asarray", "(", "metric", ")", "\n", "\n", "r", "=", "np", ".", "concatenate", "(", "(", "r", ",", "np", ".", "asarray", "(", "[", "0", ",", "1", "]", ")", ")", ")", "\n", "g", "=", "np", ".", "concatenate", "(", "(", "g", ",", "np", ".", "asarray", "(", "[", "0", ",", "1", "]", ")", ")", ")", "\n", "b", "=", "np", ".", "concatenate", "(", "(", "b", ",", "np", ".", "asarray", "(", "[", "0", ",", "1", "]", ")", ")", ")", "\n", "\n", "components", "=", "np", ".", "asarray", "(", "comp", ".", "copy", "(", ")", ",", "dtype", "=", "\"int16\"", ")", "\n", "components", "[", "components", "<", "0", "]", "=", "len", "(", "r", ")", "-", "1", "\n", "components", "[", "components", "==", "0", "]", "=", "len", "(", "r", ")", "\n", "\n", "img", "=", "np", ".", "zeros", "(", "components", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "img", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "img", ".", "shape", "[", "1", "]", ")", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ")", "\n", "y", "=", "y", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "img", "[", "x", ",", "y", ",", "0", "]", "=", "r", "[", "components", "[", "x", ",", "y", "]", "-", "1", "]", "\n", "img", "[", "x", ",", "y", ",", "1", "]", "=", "g", "[", "components", "[", "x", ",", "y", "]", "-", "1", "]", "\n", "img", "[", "x", ",", "y", ",", "2", "]", "=", "b", "[", "components", "[", "x", ",", "y", "]", "-", "1", "]", "\n", "\n", "img", "=", "np", ".", "asarray", "(", "255", "*", "img", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.lp_dist": [[886, 891], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "lp_dist", "(", "point", ",", "all_points", ",", "d", "=", "2", ")", ":", "\n", "        ", "\"\"\"Calculates the L_p distance from a point to a collection of points.\n        Used for retrieval.\"\"\"", "\n", "return", "(", "(", "all_points", "-", "point", ")", "**", "d", ")", ".", "sum", "(", "1", ")", "**", "(", "1.0", "/", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.cos_dist": [[892, 898], ["numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cos_dist", "(", "point", ",", "all_points", ")", ":", "\n", "        ", "\"\"\"Calculates the cosine distance from a point to a collection of points.\n        Used for retrieval.\"\"\"", "\n", "return", "1", "-", "(", "\n", "(", "point", "*", "all_points", ")", ".", "sum", "(", "1", ")", "/", "(", "norm", "(", "point", ")", "*", "norm", "(", "all_points", ",", "axis", "=", "1", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.get_gridsize": [[900, 904], ["fig.axes[].get_subplotspec().get_gridspec().get_geometry", "fig.axes[].get_subplotspec().get_gridspec", "fig.axes[].get_subplotspec"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_gridsize", "(", "fig", ")", ":", "\n", "        ", "\"\"\"Helper function for the nearest neighbor plot.\"\"\"", "\n", "return", "fig", ".", "axes", "[", "0", "]", ".", "get_subplotspec", "(", ")", ".", "get_gridspec", "(", ")", ".", "get_geometry", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.get_ind_nn": [[905, 911], ["discover.Discovery.get_gridsize"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.get_gridsize"], ["", "def", "get_ind_nn", "(", "self", ",", "event", ")", ":", "\n", "        ", "\"\"\"Helper function for the nearest neighbor plot.\"\"\"", "\n", "_", ",", "ncols", "=", "self", ".", "get_gridsize", "(", "self", ".", "fig_nn", ")", "\n", "eventrow", "=", "event", ".", "inaxes", ".", "rowNum", "\n", "eventcol", "=", "event", ".", "inaxes", ".", "colNum", "\n", "return", "(", "eventrow", "*", "ncols", ")", "+", "eventcol", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.color_gt": [[912, 958], ["all", "numpy.stack", "numpy.unique().flatten", "discover.Discovery.fig_main.axes[].legend", "discover.Discovery.flush_colors", "numpy.unique", "list", "numpy.array", "numpy.array", "range", "numpy.unique", "matplotlib.patches.Patch", "matplotlib.patches.Patch", "tuple", "range", "range", "tuple", "numpy.array", "[].isdigit", "names[].rfind"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.flush_colors"], ["", "def", "color_gt", "(", "self", ")", ":", "\n", "        ", "\"\"\"When called colors the scatter in the main plot according to the ground\n        truth colors.\"\"\"", "\n", "if", "all", "(", "\n", "self", ".", "label_mapping", "[", "self", ".", "data", "[", "\"dataset\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", "]", "is", "not", "None", "\n", "for", "ind", "in", "range", "(", "self", ".", "basecolors", ".", "shape", "[", "0", "]", ")", "\n", ")", ":", "\n", "            ", "self", ".", "basecolors", "=", "np", ".", "stack", "(", "\n", "[", "\n", "tuple", "(", "\n", "i", "/", "255.0", "\n", "for", "i", "in", "self", ".", "label_mapping", "[", "self", ".", "data", "[", "\"dataset\"", "]", "[", "self", ".", "gi", "[", "ind", "]", "]", "]", "[", "\n", "self", ".", "gt", "[", "ind", "]", "\n", "]", "[", "1", "]", "\n", ")", "\n", "+", "(", "1.0", ",", ")", "\n", "for", "ind", "in", "range", "(", "self", ".", "basecolors", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "legend_elements", "=", "[", "]", "\n", "for", "d", "in", "np", ".", "unique", "(", "self", ".", "data", "[", "\"dataset\"", "]", ")", ".", "flatten", "(", ")", ":", "\n", "                ", "cls", "=", "np", ".", "unique", "(", "self", ".", "gt", "[", "np", ".", "array", "(", "self", ".", "data", "[", "\"dataset\"", "]", ")", "[", "self", ".", "gi", "]", "==", "d", "]", ")", "\n", "cls", "=", "list", "(", "\n", "{", "\n", "(", "self", ".", "label_mapping", "[", "d", "]", "[", "cl", "]", "[", "0", "]", ",", "self", ".", "label_mapping", "[", "d", "]", "[", "cl", "]", "[", "1", "]", ")", "\n", "for", "cl", "in", "cls", "\n", "}", "\n", ")", "\n", "names", "=", "np", ".", "array", "(", "[", "i", "[", "0", "]", "for", "i", "in", "cls", "]", ")", "\n", "cols", "=", "np", ".", "array", "(", "[", "i", "[", "1", "]", "for", "i", "in", "cls", "]", ")", "\n", "legend_elements", "+=", "[", "\n", "Patch", "(", "\n", "color", "=", "tuple", "(", "i", "/", "255.0", "for", "i", "in", "cols", "[", "i", "]", ")", "+", "(", "1.0", ",", ")", ",", "\n", "label", "=", "names", "[", "i", "]", "\n", "if", "not", "names", "[", "i", "]", "[", "-", "1", "]", ".", "isdigit", "(", ")", "\n", "else", "names", "[", "i", "]", "[", ":", "names", "[", "i", "]", ".", "rfind", "(", "\" \"", ")", "]", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "names", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", "", "self", ".", "fig_main", ".", "axes", "[", "0", "]", ".", "legend", "(", "\n", "loc", "=", "\"upper left\"", ",", "\n", "handles", "=", "legend_elements", ",", "\n", "ncol", "=", "8", ",", "\n", "bbox_to_anchor", "=", "(", "0", ",", "1.1", ")", ",", "\n", ")", "\n", "self", ".", "flush_colors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.color_pred": [[959, 979], ["numpy.stack", "discover.Discovery.fig_main.axes[].legend", "discover.Discovery.flush_colors", "matplotlib.patches.Patch", "matplotlib.patches.Patch", "numpy.unique().flatten", "tuple", "range", "tuple", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.flush_colors"], ["", "", "def", "color_pred", "(", "self", ")", ":", "\n", "        ", "\"\"\"When called colors the scatter in the main plot according to the predicted\n        class color.\"\"\"", "\n", "self", ".", "basecolors", "=", "np", ".", "stack", "(", "\n", "[", "\n", "tuple", "(", "i", "/", "255.0", "for", "i", "in", "self", ".", "pred_mapping", "[", "self", ".", "pred", "[", "ind", "]", "]", "[", "1", "]", ")", "+", "(", "1.0", ",", ")", "\n", "for", "ind", "in", "range", "(", "self", ".", "basecolors", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "legend_elements", "=", "[", "\n", "Patch", "(", "\n", "color", "=", "tuple", "(", "i", "/", "255.0", "for", "i", "in", "self", ".", "pred_mapping", "[", "cl", "]", "[", "1", "]", ")", "+", "(", "1.0", ",", ")", ",", "\n", "label", "=", "self", ".", "pred_mapping", "[", "cl", "]", "[", "0", "]", ",", "\n", ")", "\n", "for", "cl", "in", "np", ".", "unique", "(", "self", ".", "pred", ")", ".", "flatten", "(", ")", "\n", "]", "\n", "self", ".", "fig_main", ".", "axes", "[", "0", "]", ".", "legend", "(", "\n", "loc", "=", "\"upper left\"", ",", "handles", "=", "legend_elements", ",", "ncol", "=", "8", ",", "bbox_to_anchor", "=", "(", "0", ",", "1.1", ")", "\n", ")", "\n", "self", ".", "flush_colors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.show_density": [[980, 1010], ["src.MetaSeg.functions.utils.estimate_kernel_density", "discover.Discovery.x.min", "discover.Discovery.x.max", "discover.Discovery.y.min", "discover.Discovery.y.max", "src.MetaSeg.functions.utils.estimate_kernel_density.", "matplotlib.get_cmap", "matplotlib.get_cmap", "matplotlib.LinearSegmentedColormap.from_list", "matplotlib.LinearSegmentedColormap.from_list", "matplotlib.LinearSegmentedColormap.from_list.set_bad", "discover.Discovery.fig_main.axes[].pcolormesh", "discover.Discovery.flush_colors", "numpy.vstack", "matplotlib.LinearSegmentedColormap.from_list.", "src.MetaSeg.functions.utils.estimate_kernel_density.reshape", "numpy.linspace", "grid_x.flatten", "grid_y.flatten", "numpy.quantile"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.utils.estimate_kernel_density", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.flush_colors"], ["", "def", "show_density", "(", "self", ")", ":", "\n", "        ", "embedding_kde", "=", "estimate_kernel_density", "(", "self", ".", "data", "[", "\"plot_embeddings\"", "]", ")", "\n", "xmin", "=", "self", ".", "x", ".", "min", "(", ")", "\n", "xmin", "=", "xmin", "*", "1.3", "if", "xmin", "<", "0", "else", "xmin", "*", "0.8", "\n", "xmax", "=", "self", ".", "x", ".", "max", "(", ")", "\n", "xmax", "=", "xmax", "*", "1.3", "if", "xmax", ">", "0", "else", "xmax", "*", "0.8", "\n", "\n", "ymin", "=", "self", ".", "y", ".", "min", "(", ")", "\n", "ymin", "=", "ymin", "*", "1.3", "if", "ymin", "<", "0", "else", "ymin", "*", "0.8", "\n", "ymax", "=", "self", ".", "y", ".", "max", "(", ")", "\n", "ymax", "=", "ymax", "*", "1.3", "if", "ymax", ">", "0", "else", "ymax", "*", "0.8", "\n", "\n", "grid_x", ",", "grid_y", "=", "np", ".", "mgrid", "[", "xmin", ":", "xmax", ",", "ymin", ":", "ymax", "]", "\n", "grid_z", "=", "embedding_kde", "(", "np", ".", "vstack", "(", "[", "grid_x", ".", "flatten", "(", ")", ",", "grid_y", ".", "flatten", "(", ")", "]", ")", ")", "\n", "colmap", "=", "plt", ".", "get_cmap", "(", "\"Greys\"", ")", "\n", "colmap", "=", "colors", ".", "LinearSegmentedColormap", ".", "from_list", "(", "\n", "\"trunc({n},{a:.2f},{b:.2f})\"", ".", "format", "(", "n", "=", "colmap", ".", "name", ",", "a", "=", "0.0", ",", "b", "=", "0.75", ")", ",", "\n", "colmap", "(", "np", ".", "linspace", "(", "0.0", ",", "0.75", ",", "256", ")", ")", ",", "\n", ")", "\n", "grid_z", "[", "grid_z", "<", "np", ".", "quantile", "(", "grid_z", ",", "0.55", ")", "]", "=", "np", ".", "NaN", "\n", "colmap", ".", "set_bad", "(", "\"white\"", ")", "\n", "self", ".", "fig_main", ".", "axes", "[", "0", "]", ".", "pcolormesh", "(", "\n", "grid_x", ",", "\n", "grid_y", ",", "\n", "grid_z", ".", "reshape", "(", "grid_x", ".", "shape", ")", ",", "\n", "cmap", "=", "colmap", ",", "\n", "shading", "=", "\"gouraud\"", ",", "\n", "zorder", "=", "1", ",", "\n", ")", "\n", "self", ".", "flush_colors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.set_color": [[1011, 1014], ["None"], "methods", ["None"], ["", "def", "set_color", "(", "self", ",", "ind", ",", "color", ")", ":", "\n", "        ", "\"\"\"Helper function to set a color of a segment with index ind.\"\"\"", "\n", "self", ".", "basecolors", "[", "ind", ",", ":", "]", "=", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.change_color": [[1015, 1018], ["None"], "methods", ["None"], ["", "def", "change_color", "(", "self", ",", "old_color", ",", "new_color", ")", ":", "\n", "        ", "\"\"\"Helper function to change a specific color to a different one.\"\"\"", "\n", "self", ".", "basecolors", "[", "(", "self", ".", "basecolors", "==", "old_color", ")", ".", "all", "(", "axis", "=", "1", ")", "]", "=", "new_color", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.flush_colors": [[1019, 1023], ["discover.Discovery.line_main.set_color", "discover.Discovery.fig_main.canvas.draw"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.discover.Discovery.set_color"], ["", "def", "flush_colors", "(", "self", ")", ":", "\n", "        ", "\"\"\"Flushes all color changes onto the main scatter plot.\"\"\"", "\n", "self", ".", "line_main", ".", "set_color", "(", "self", ".", "basecolors", ")", "\n", "self", ".", "fig_main", ".", "canvas", ".", "draw", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.FeatureVGG.__init__": [[16, 18], ["torchvision.models.vgg.VGG.__init__"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "1000", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "FeatureVGG", ",", "self", ")", ".", "__init__", "(", "features", ",", "num_classes", ",", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.FeatureVGG.forward": [[19, 23], ["embedding_networks.FeatureVGG.features", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SENet.features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.FeatureResNet.__init__": [[40, 42], ["torchvision.models.resnet.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FeatureResNet", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "num_classes", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.FeatureResNet.forward": [[43, 56], ["embedding_networks.FeatureResNet.conv1", "embedding_networks.FeatureResNet.bn1", "embedding_networks.FeatureResNet.relu", "embedding_networks.FeatureResNet.maxpool", "embedding_networks.FeatureResNet.layer1", "embedding_networks.FeatureResNet.layer2", "embedding_networks.FeatureResNet.layer3", "embedding_networks.FeatureResNet.layer4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "f", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.FeatureDenseNet.__init__": [[92, 108], ["torchvision.models.densenet.DenseNet.__init__"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "\n", "bn_size", "=", "4", ",", "\n", "drop_rate", "=", "0", ",", "\n", "num_classes", "=", "1000", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FeatureDenseNet", ",", "self", ")", ".", "__init__", "(", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "block_config", "=", "block_config", ",", "\n", "num_init_features", "=", "num_init_features", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.FeatureDenseNet.forward": [[110, 115], ["embedding_networks.FeatureDenseNet.features", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SENet.features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "f", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_vgg16": [[25, 37], ["embedding_networks.FeatureVGG", "torchvision.models.vgg.make_layers", "FeatureVGG.load_state_dict", "torchvision.vgg16().state_dict", "torchvision.vgg16"], "function", ["None"], ["", "", "def", "feature_vgg16", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "\"init_weights\"", "]", "=", "False", "\n", "", "model", "=", "FeatureVGG", "(", "make_layers", "(", "cfgs", "[", "\"D\"", "]", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", ".", "state_dict", "(", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_resnet18": [[58, 63], ["embedding_networks.FeatureResNet", "FeatureResNet.load_state_dict", "torchvision.resnet18().state_dict", "torchvision.resnet18"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet18"], ["", "", "def", "feature_resnet18", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "FeatureResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", ".", "state_dict", "(", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_resnet101": [[65, 70], ["embedding_networks.FeatureResNet", "FeatureResNet.load_state_dict", "torchvision.resnet101().state_dict", "torchvision.resnet101"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet101"], ["", "def", "feature_resnet101", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "FeatureResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "models", ".", "resnet101", "(", "pretrained", "=", "True", ")", ".", "state_dict", "(", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_resnet152": [[72, 77], ["embedding_networks.FeatureResNet", "FeatureResNet.load_state_dict", "torchvision.resnet152().state_dict", "torchvision.resnet152"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet152"], ["", "def", "feature_resnet152", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "FeatureResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "models", ".", "resnet152", "(", "pretrained", "=", "True", ")", ".", "state_dict", "(", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_wide_resnet101": [[79, 85], ["embedding_networks.FeatureResNet", "FeatureResNet.load_state_dict", "torchvision.wide_resnet101_2().state_dict", "torchvision.wide_resnet101_2"], "function", ["None"], ["", "def", "feature_wide_resnet101", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "kwargs", "[", "\"width_per_group\"", "]", "=", "64", "*", "2", "\n", "model", "=", "FeatureResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "models", ".", "wide_resnet101_2", "(", "pretrained", "=", "True", ")", ".", "state_dict", "(", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.extract_densenet_features": [[87, 89], ["x.view().mean", "x.view"], "function", ["None"], ["", "def", "extract_densenet_features", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "mean", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_densenet121": [[117, 141], ["embedding_networks.FeatureDenseNet", "re.compile", "torch.load_url", "list", "FeatureDenseNet.load_state_dict", "model_zoo.load_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["", "", "def", "feature_densenet121", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "FeatureDenseNet", "(", "\n", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "# '.'s are no longer allowed in module names, but pervious _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "\n", "(", "\n", "r\"^(.*denselayer\\d+\\.(?:norm|relu|conv))\"", "\n", "r\"\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$\"", "\n", ")", "\n", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "densenet_urls", "[", "\"densenet121\"", "]", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "                ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_densenet169": [[143, 167], ["embedding_networks.FeatureDenseNet", "re.compile", "torch.load_url", "list", "FeatureDenseNet.load_state_dict", "model_zoo.load_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["", "def", "feature_densenet169", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "FeatureDenseNet", "(", "\n", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "# '.'s are no longer allowed in module names, but pervious _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "\n", "(", "\n", "r\"^(.*denselayer\\d+\\.(?:norm|relu|conv))\"", "\n", "r\"\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$\"", "\n", ")", "\n", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "densenet_urls", "[", "\"densenet169\"", "]", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "                ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.embedding_networks.feature_densenet201": [[169, 193], ["embedding_networks.FeatureDenseNet", "re.compile", "torch.load_url", "list", "FeatureDenseNet.load_state_dict", "model_zoo.load_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["", "def", "feature_densenet201", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "FeatureDenseNet", "(", "\n", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "# '.'s are no longer allowed in module names, but pervious _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "\n", "(", "\n", "r\"^(.*denselayer\\d+\\.(?:norm|relu|conv))\"", "\n", "r\"\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$\"", "\n", ")", "\n", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "densenet_urls", "[", "\"densenet201\"", "]", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "                ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.log_utils.log_config": [[4, 8], ["_log.info", "sacred.commands._format_config"], "function", ["None"], ["def", "log_config", "(", "_run", ",", "_log", ")", ":", "\n", "    ", "final_config", "=", "_run", ".", "config", "\n", "config_mods", "=", "_run", ".", "config_modifications", "\n", "_log", ".", "info", "(", "_format_config", "(", "final_config", ",", "config_mods", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.Compose.__init__": [[29, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "augmentations", ")", ":", "\n", "        ", "\"\"\"Initializes the composer with the given augmentations.\"\"\"", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.Compose.__call__": [[33, 39], ["a"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ")", ":", "\n", "        ", "\"\"\"Returns images that are augmented with the given augmentations.\"\"\"", "\n", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "a", "in", "self", ".", "augmentations", ":", "\n", "            ", "img", ",", "mask", "=", "a", "(", "img", ",", "mask", ")", "\n", "", "return", "(", "img", ",", "mask", ",", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomCrop.__init__": [[49, 55], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomCrop.__call__": [[56, 80], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Returns randomly cropped image.\"\"\"", "\n", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "tw", "or", "h", "<", "th", ":", "\n", "            ", "return", "(", "\n", "img", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.CenterCrop.__init__": [[93, 98], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.CenterCrop.__call__": [[99, 109], ["int", "int", "round", "round", "img.crop", "mask.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.0", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.0", ")", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomHorizontalFlip.__init__": [[119, 123], ["isinstance", "TypeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "prob", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"'prob' needs to be a number.\"", ")", "\n", "", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomHorizontalFlip.__call__": [[124, 132], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n", "", "return", "(", "img", ",", "mask", ",", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.FreeScale.__init__": [[135, 137], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.FreeScale.__call__": [[138, 144], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "(", "\n", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.Scale.__init__": [[148, 150], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.Scale.__call__": [[151, 171], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "(", "img", ",", "mask", ",", "*", "inputs", ")", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomSizedCrop.__init__": [[175, 177], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomSizedCrop.__call__": [[178, 209], ["range", "imageaugmentations.Scale", "imageaugmentations.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "img", ".", "size", "==", "(", "w", ",", "h", ")", "\n", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ",", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomRotate.__init__": [[212, 216], ["isinstance", "TypeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "degree", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"'degree' needs to be a number.\"", ")", "\n", "", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomRotate.__call__": [[217, 223], ["img.rotate", "mask.rotate", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "(", "\n", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "NEAREST", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomSized.__init__": [[227, 233], ["imageaugmentations.Scale", "imageaugmentations.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "min_scale", "=", "0.5", ",", "max_scale", "=", "2", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "self", ".", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomSized.__call__": [[234, 245], ["int", "int", "imageaugmentations.RandomSized.crop", "img.resize", "mask.resize", "random.uniform", "random.uniform", "imageaugmentations.RandomSized.scale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", "=", "int", "(", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "\n", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "\n", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", "\n", ")", "\n", "\n", "return", "self", ".", "crop", "(", "*", "self", ".", "scale", "(", "img", ",", "mask", ",", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomOcclusion.__init__": [[248, 268], ["logging.getLogger", "imageaugmentations.RandomOcclusion.log.error", "ValueError", "imageaugmentations.RandomOcclusion.log.error", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "build_prob", "=", "0.5", ",", "\n", "secondary_build_prob", "=", "0.99", ",", "\n", "occlusion_class", "=", "-", "1", ",", "\n", "start_points", "=", "5", ",", "\n", "min_size", "=", "100", ",", "\n", ")", ":", "\n", "        ", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "if", "build_prob", ">", "1", "or", "build_prob", "<", "0", ":", "\n", "            ", "self", ".", "log", ".", "error", "(", "\"build_prob has to be between 0 and 1!\"", ")", "\n", "raise", "ValueError", "(", "\"build_prob has to be between 0 and 1!\"", ")", "\n", "", "if", "secondary_build_prob", ">", "1", "or", "secondary_build_prob", "<", "0", ":", "\n", "            ", "self", ".", "log", ".", "error", "(", "\"secondary_build_prob has to be between 0 and 1!\"", ")", "\n", "raise", "ValueError", "(", "\"secondary_build_prob has to be between 0 and 1!\"", ")", "\n", "", "self", ".", "build_prob", "=", "build_prob", "\n", "self", ".", "secondary_build_prob", "=", "secondary_build_prob", "\n", "self", ".", "occlusion_class", "=", "occlusion_class", "\n", "self", ".", "start_points", "=", "start_points", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomOcclusion.__call__": [[269, 296], ["torch.full_like().byte", "torch.full_like().byte", "range", "random.randint", "random.randint", "imageaugmentations.RandomOcclusion.queue.append", "len", "imageaugmentations.RandomOcclusion.queue.pop", "imageaugmentations.RandomOcclusion._scan_neighborhood", "imageaugmentations.RandomOcclusion.occlusion_map.sum().item", "range", "torch.full_like", "torch.full_like", "imageaugmentations.RandomOcclusion.occlusion_map.sum"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomOcclusion._scan_neighborhood"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "while", "(", "mask", "==", "self", ".", "occlusion_class", ")", ".", "sum", "(", ")", "<", "self", ".", "min_size", ":", "\n", "            ", "self", ".", "queue", "=", "[", "]", "\n", "self", ".", "flags", "=", "torch", ".", "full_like", "(", "mask", ",", "0", ")", ".", "byte", "(", ")", "\n", "self", ".", "occlusion_map", "=", "torch", ".", "full_like", "(", "mask", ",", "0", ")", ".", "byte", "(", ")", "\n", "self", ".", "img_height", "=", "img", ".", "shape", "[", "-", "2", "]", "\n", "self", ".", "img_width", "=", "img", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# add first elements", "\n", "for", "_", "in", "range", "(", "self", ".", "start_points", ")", ":", "\n", "                ", "x", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "img_height", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "img_width", ")", "\n", "self", ".", "queue", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "", "while", "len", "(", "self", ".", "queue", ")", ">", "0", ":", "\n", "                ", "i", ",", "j", "=", "self", ".", "queue", ".", "pop", "(", "0", ")", "\n", "self", ".", "_scan_neighborhood", "(", "i", ",", "j", ")", "\n", "\n", "", "if", "self", ".", "occlusion_map", ".", "sum", "(", ")", ".", "item", "(", ")", ">=", "self", ".", "min_size", ":", "\n", "                ", "for", "c", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "img", "[", "c", "]", "[", "self", ".", "occlusion_map", "]", "=", "0", "\n", "#                 img[0][self.occlusion_map]=1", "\n", "#                 img[1][self.occlusion_map]=0", "\n", "#                 img[2][self.occlusion_map]=0", "\n", "\n", "", "mask", "[", "self", ".", "occlusion_map", "]", "=", "self", ".", "occlusion_class", "\n", "\n", "", "", "return", "(", "img", ",", "mask", ",", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomOcclusion._scan_neighborhood": [[297, 322], ["random.random", "imageaugmentations.RandomOcclusion.queue.append", "random.random"], "methods", ["None"], ["", "def", "_scan_neighborhood", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "grid", "=", "[", "\n", "(", "i", "-", "1", ",", "j", "-", "1", ")", ",", "\n", "(", "i", "-", "1", ",", "j", ")", ",", "\n", "(", "i", "-", "1", ",", "j", "+", "1", ")", ",", "\n", "(", "i", ",", "j", "-", "1", ")", ",", "\n", "(", "i", ",", "j", "+", "1", ")", ",", "\n", "(", "i", "+", "1", ",", "j", "-", "1", ")", ",", "\n", "(", "i", "+", "1", ",", "j", ")", ",", "\n", "(", "i", "+", "1", ",", "j", "+", "1", ")", ",", "\n", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "build_prob", ":", "\n", "            ", "for", "ind", "in", "grid", ":", "\n", "                ", "if", "0", "<=", "ind", "[", "0", "]", "<", "self", ".", "img_height", "and", "0", "<=", "ind", "[", "1", "]", "<", "self", ".", "img_width", ":", "\n", "                    ", "if", "(", "\n", "self", ".", "flags", "[", "ind", "]", "==", "0", "\n", "and", "random", ".", "random", "(", ")", "<", "self", ".", "secondary_build_prob", "\n", ")", ":", "\n", "                        ", "self", ".", "queue", ".", "append", "(", "ind", ")", "\n", "self", ".", "occlusion_map", "[", "ind", "]", "=", "1", "\n", "", "self", ".", "flags", "[", "ind", "]", "=", "1", "\n", "", "", "", "else", ":", "\n", "            ", "for", "ind", "in", "grid", ":", "\n", "                ", "if", "0", "<=", "ind", "[", "0", "]", "<", "self", ".", "img_height", "and", "0", "<=", "ind", "[", "1", "]", "<", "self", ".", "img_width", ":", "\n", "                    ", "self", ".", "flags", "[", "ind", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomNoise.__init__": [[325, 328], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "ratio", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomNoise.__call__": [[329, 333], ["random.random", "torch.rand_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "(", "1", "-", "self", ".", "ratio", ")", "*", "image", "+", "self", ".", "ratio", "*", "torch", ".", "rand_like", "(", "image", ")", "\n", "", "return", "(", "image", ",", "mask", ",", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomNoiseImage.__init__": [[336, 339], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.05", ",", "class_index", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "class_index", "=", "class_index", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.RandomNoiseImage.__call__": [[340, 345], ["random.random", "torch.rand_like", "torch.full_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "torch", ".", "rand_like", "(", "image", ")", "\n", "mask", "=", "torch", ".", "full_like", "(", "mask", ",", "self", ".", "class_index", ")", "\n", "", "return", "(", "image", ",", "mask", ",", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.ToTensor.__call__": [[348, 354], ["torchvision.ToTensor", "torchvision.ToTensor.", "torch.tensor", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "t", "=", "trans", ".", "ToTensor", "(", ")", "\n", "return", "(", "\n", "t", "(", "image", ")", ",", "\n", "torch", ".", "tensor", "(", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "*", "inputs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.ToTensor.__repr__": [[356, 358], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "\"()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.Normalize.__init__": [[361, 365], ["torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "t", "=", "trans", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.Normalize.__call__": [[366, 368], ["imageaugmentations.Normalize.t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "(", "self", ".", "t", "(", "tensor", ")", ",", "mask", ",", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.DeNormalize.__init__": [[371, 374], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.DeNormalize.__call__": [[375, 379], ["range", "tensor[].mul().add", "tensor[].mul"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "tensor", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "tensor", "[", "i", "]", "=", "tensor", "[", "i", "]", ".", "mul", "(", "self", ".", "std", "[", "i", "]", ")", ".", "add", "(", "self", ".", "mean", "[", "i", "]", ")", "\n", "", "return", "(", "tensor", ",", "mask", ",", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.Lambda.__init__": [[382, 385], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "assert", "isinstance", "(", "lambd", ",", "types", ".", "LambdaType", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.Lambda.__call__": [[386, 388], ["imageaugmentations.Lambda.lambd"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "img", ",", "mask", ",", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.imageaugmentations.Lambda.__repr__": [[389, 391], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "\"()\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.src.eval_utils.iou_numpy": [[6, 54], ["logging.getLogger", "logging.getLogger.debug", "logging.getLogger.debug", "logging.getLogger.debug", "numpy.zeros", "zip", "numpy.diag", "numpy.zeros", "np.zeros.sum", "np.zeros.sum", "numpy.ones", "mask.astype"], "function", ["None"], ["def", "iou_numpy", "(", "\n", "pred", ":", "np", ".", "ndarray", ",", "\n", "target", ":", "np", ".", "ndarray", ",", "\n", "n_classes", ":", "int", ",", "\n", "update_matrix", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "ignore_index", ":", "int", "=", "255", ",", "\n", "mask", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "average", ":", "bool", "=", "True", ",", "\n", "eps", ":", "float", "=", "1e-6", ",", "\n", ")", ":", "\n", "    ", "log", "=", "logging", ".", "getLogger", "(", "\"iou_numpy\"", ")", "\n", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "target", "!=", "ignore_index", "\n", "", "else", ":", "\n", "        ", "mask", "=", "mask", ".", "astype", "(", "np", ".", "bool", ")", "&", "(", "target", "!=", "ignore_index", ")", "&", "(", "pred", "!=", "ignore_index", ")", "\n", "\n", "", "log", ".", "debug", "(", "\"mask shape: {}\"", ".", "format", "(", "mask", ".", "shape", ")", ")", "\n", "pred", "=", "pred", "[", "mask", "]", "\n", "target", "=", "target", "[", "mask", "]", "\n", "\n", "log", ".", "debug", "(", "\"pred shape: {}\"", ".", "format", "(", "pred", ".", "shape", ")", ")", "\n", "log", ".", "debug", "(", "\"target shape: {}\"", ".", "format", "(", "target", ".", "shape", ")", ")", "\n", "\n", "if", "target", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "\n", "for", "i", ",", "j", "in", "zip", "(", "pred", ",", "target", ")", ":", "\n", "            ", "confusion_matrix", "[", "i", ",", "j", "]", "+=", "1", "\n", "\n", "", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "fn", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "-", "tp", "\n", "fp", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "-", "tp", "\n", "\n", "if", "average", ":", "\n", "            ", "iou_value", "=", "(", "tp", "/", "(", "tp", "+", "fp", "+", "fn", "+", "eps", ")", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "iou_value", "=", "tp", "/", "(", "tp", "+", "fp", "+", "fn", "+", "eps", ")", "\n", "", "", "else", ":", "\n", "        ", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "if", "average", ":", "\n", "            ", "iou_value", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "iou_value", "=", "np", ".", "ones", "(", "n_classes", ")", "\n", "\n", "", "", "if", "update_matrix", "is", "not", "None", ":", "\n", "        ", "return", "iou_value", ",", "update_matrix", "+", "confusion_matrix", "\n", "", "else", ":", "\n", "        ", "return", "iou_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.custom.CustomDataset.__init__": [[13, 33], ["logging.getLogger", "os.listdir", "os.path.exists", "custom.CustomDataset.log.error", "ValueError", "os.path.isfile", "custom.CustomDataset.filenames.append", "os.path.join", "os.path.join", "os.path.splitext"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", "=", "\"/path/to/your/image/directory\"", ",", "\n", "image_file_extension", "=", "\".png\"", ",", "\n", "transform", "=", "None", ",", "\n", "label_mapping", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "\"CustomDataset\"", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "label_mapping", "=", "label_mapping", "\n", "self", ".", "filenames", "=", "[", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "self", ".", "log", ".", "error", "(", "\"'{}' does not exist!\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "raise", "ValueError", "(", "\"'{}' does not exist!\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "root", ")", ":", "\n", "            ", "if", "isfile", "(", "join", "(", "self", ".", "root", ",", "f", ")", ")", "and", "splitext", "(", "f", ")", "[", "-", "1", "]", "==", "image_file_extension", ":", "\n", "                ", "self", ".", "filenames", ".", "append", "(", "join", "(", "self", ".", "root", ",", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.custom.CustomDataset.__getitem__": [[34, 42], ["PIL.Image.open().convert", "PIL.Image.fromarray", "numpy.zeros", "custom.CustomDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "self", ".", "filenames", "[", "index", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "target", "=", "Image", ".", "fromarray", "(", "np", ".", "zeros", "(", "(", "image", ".", "size", "[", "1", "]", ",", "image", ".", "size", "[", "0", "]", ")", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", ",", "target", "=", "self", ".", "transform", "(", "image", ",", "target", ")", "\n", "\n", "", "return", "image", ",", "target", ",", "self", ".", "filenames", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.custom.CustomDataset.__len__": [[43, 45], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.Label.__init__": [[11, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "name", ",", "id", ",", "trainid", ",", "category", ",", "catid", ",", "hasinstances", ",", "ignoreineval", ",", "color", "\n", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "trainid", "=", "trainid", "\n", "self", ".", "category", "=", "category", "\n", "self", ".", "catid", "=", "catid", "\n", "self", ".", "hasinstances", "=", "hasinstances", "\n", "self", ".", "ignoreineval", "=", "ignoreineval", "\n", "self", ".", "color", "=", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.Label.__call__": [[23, 36], ["print", "str"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "print", "(", "\n", "\"name: %s\\nid: %d\\ntrainid: %d\\ncategory: %s\\ncatid:\\\n         %d\\nhasinstances: %d\\nignoreineval: %d\\ncolor:%s\"", "\n", "%", "(", "\n", "self", ".", "name", ",", "\n", "self", ".", "id", ",", "\n", "self", ".", "trainid", ",", "\n", "self", ".", "category", ",", "\n", "self", ".", "catid", ",", "\n", "self", ".", "hasinstances", ",", "\n", "self", ".", "ignoreineval", ",", "\n", "str", "(", "self", ".", "color", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.Cityscapes.__init__": [[287, 324], ["torch.utils.data.Dataset.__init__", "os.walk", "os.path.join", "cityscapes.Cityscapes.images.append", "os.path.splitext", "os.path.join", "os.path.join", "cityscapes.Cityscapes.targets.append", "filename.split", "os.path.basename", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "split", "=", "\"train\"", ",", "\n", "root", "=", "\"/data/datasets/semseg/Cityscapes\"", ",", "\n", "map_fun", "=", "fulltotrain", ",", "\n", "transform", "=", "None", ",", "\n", "label_mapping", "=", "discover_mapping", ",", "\n", "pred_mapping", "=", "pred_mapping", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Load all filenames.\"\"\"", "\n", "super", "(", "Cityscapes", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "label_mapping", "=", "label_mapping", "\n", "self", ".", "pred_mapping", "=", "pred_mapping", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "map_fun", "=", "map_fun", "\n", "\n", "for", "root", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit\"", ",", "self", ".", "split", ")", "\n", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "1", "]", "==", "\".png\"", ":", "\n", "                    ", "filename_base", "=", "\"_\"", ".", "join", "(", "filename", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "images", ".", "append", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "filename_base", "+", "\"_leftImg8bit.png\"", ")", "\n", ")", "\n", "\n", "if", "self", ".", "split", "in", "[", "\"train\"", ",", "\"val\"", "]", ":", "\n", "                        ", "target_root", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "\"gtFine\"", ",", "self", ".", "split", ",", "os", ".", "path", ".", "basename", "(", "root", ")", "\n", ")", "\n", "self", ".", "targets", ".", "append", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "target_root", ",", "filename_base", "+", "\"_gtFine_labelIds.png\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.Cityscapes.__len__": [[327, 330], ["len"], "methods", ["None"], ["", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return number of images in the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.Cityscapes.__getitem__": [[331, 351], ["PIL.Image.open().convert", "isinstance", "PIL.Image.open().convert", "PIL.Image.fromarray", "cityscapes.Cityscapes.transform", "torch.tensor", "cityscapes.Cityscapes.map_fun", "PIL.Image.open", "numpy.full().astype", "numpy.array", "PIL.Image.open", "numpy.full"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "# Load images and perform augmentations with PIL", "\n", "        ", "image", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "i", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "if", "self", ".", "split", "in", "[", "\"train\"", ",", "\"val\"", "]", ":", "\n", "            ", "target", "=", "Image", ".", "open", "(", "self", ".", "targets", "[", "i", "]", ")", ".", "convert", "(", "\"L\"", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "Image", ".", "fromarray", "(", "\n", "np", ".", "full", "(", "image", ".", "size", "[", ":", "-", "1", "]", ",", "void_ind", ")", ".", "astype", "(", "\"uint8\"", ")", ",", "mode", "=", "\"L\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", ",", "target", "=", "self", ".", "transform", "(", "image", ",", "target", ")", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "target", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "target", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "if", "self", ".", "map_fun", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "map_fun", "(", "target", ")", "\n", "\n", "", "return", "image", ",", "target", ",", "self", ".", "images", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.fulltotrain": [[221, 227], ["target.clone", "id_to_trainid.items"], "function", ["None"], ["def", "fulltotrain", "(", "target", ")", ":", "\n", "    ", "\"\"\"Transforms labels from full cityscapes labelset to training label set.\"\"\"", "\n", "remapped_target", "=", "target", ".", "clone", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "        ", "remapped_target", "[", "target", "==", "k", "]", "=", "v", "\n", "", "return", "remapped_target", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.traintofull": [[229, 235], ["target.clone", "trainid_to_id.items"], "function", ["None"], ["", "def", "traintofull", "(", "target", ")", ":", "\n", "    ", "\"\"\"Transforms labels from training label set to the full label set.\"\"\"", "\n", "remapped_target", "=", "target", ".", "clone", "(", ")", "\n", "for", "k", ",", "v", "in", "trainid_to_id", ".", "items", "(", ")", ":", "\n", "        ", "remapped_target", "[", "target", "==", "k", "]", "=", "v", "\n", "", "return", "remapped_target", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.traintocolor": [[237, 239], ["cityscapes.fulltocolor", "cityscapes.traintofull"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes_laf.fulltocolor", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.traintofull"], ["", "def", "traintocolor", "(", "target", ")", ":", "\n", "    ", "return", "fulltocolor", "(", "traintofull", "(", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.fulltocolor": [[241, 265], ["np.array.sort", "numpy.array", "target.reshape.numpy", "target.reshape.reshape", "numpy.concatenate", "torch.from_numpy", "len", "len", "numpy.expand_dims", "colors[].reshape().transpose", "colors[].reshape"], "function", ["None"], ["", "def", "fulltocolor", "(", "target", ")", ":", "\n", "    ", "\"\"\"Maps labels to their RGB colors in cityscapes.\"\"\"", "\n", "colors", "=", "[", "(", "label", ".", "id", ",", "label", ".", "color", ")", "for", "label", "in", "labels", "if", "label", ".", "id", "!=", "-", "1", "]", "\n", "colors", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "colors", "=", "np", ".", "array", "(", "[", "x", "[", "1", "]", "for", "x", "in", "colors", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "target", "=", "target", ".", "numpy", "(", ")", "\n", "if", "len", "(", "target", ".", "shape", ")", "==", "2", ":", "\n", "        ", "b", "=", "1", "\n", "h", "=", "target", ".", "shape", "[", "0", "]", "\n", "w", "=", "target", ".", "shape", "[", "1", "]", "\n", "", "elif", "len", "(", "target", ".", "shape", ")", "==", "3", ":", "\n", "        ", "b", ",", "h", ",", "w", "=", "target", ".", "shape", "\n", "", "else", ":", "\n", "        ", "b", ",", "_", ",", "h", ",", "w", "=", "target", ".", "shape", "\n", "", "target", "=", "target", ".", "reshape", "(", "b", ",", "-", "1", ")", "\n", "\n", "rgb_target", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "np", ".", "expand_dims", "(", "colors", "[", "t", "]", ".", "reshape", "(", "h", ",", "w", ",", "3", ")", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "0", ")", "\n", "for", "t", "in", "target", "\n", "]", "\n", ")", "\n", "return", "torch", ".", "from_numpy", "(", "rgb_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes.onehot": [[267, 284], ["len", "target.size", "torch.zeros", "range", "target.size", "torch.zeros", "range", "target.size"], "function", ["None"], ["", "def", "onehot", "(", "target", ",", "n_classes", "=", "num_classes", ")", ":", "\n", "    ", "\"\"\"Transforms labels to one hot encoded.\"\"\"", "\n", "if", "len", "(", "target", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "# When no batch dimension is given", "\n", "        ", "h", ",", "w", "=", "target", ".", "size", "(", ")", "\n", "onehot_target", "=", "torch", ".", "zeros", "(", "n_classes", ",", "h", ",", "w", ")", "\n", "\n", "for", "c", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "onehot_target", "[", "c", "]", "[", "target", "==", "c", "]", "=", "1", "\n", "", "", "else", ":", "\n", "# when batch dimension is given", "\n", "        ", "b", ",", "h", ",", "w", "=", "target", ".", "size", "(", ")", "\n", "onehot_target", "=", "torch", ".", "zeros", "(", "b", ",", "n_classes", ",", "h", ",", "w", ")", "\n", "\n", "for", "c", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "onehot_target", "[", ":", ",", "c", ",", ":", ",", ":", "]", "[", "target", "==", "c", "]", "=", "1", "\n", "", "", "return", "onehot_target", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes_laf.CityscapesLAF.__init__": [[165, 206], ["torch.utils.data.Dataset.__init__", "os.walk", "ValueError", "os.path.join", "cityscapes_laf.CityscapesLAF.images.append", "os.path.splitext", "os.path.join", "os.path.join", "cityscapes_laf.CityscapesLAF.targets.append", "filename.split", "os.path.basename", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "split", "=", "\"train\"", ",", "\n", "root", "=", "\"/data/datasets/semseg/Cityscapes_lost_and_found\"", ",", "\n", "map_fun", "=", "None", ",", "\n", "transform", "=", "None", ",", "\n", "label_mapping", "=", "discover_mapping", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Load all filenames.\"\"\"", "\n", "super", "(", "CityscapesLAF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "if", "self", ".", "split", "not", "in", "[", "\"train\"", ",", "\"test\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"'split' should be one of [train, test] but received {}!\"", ".", "format", "(", "\n", "self", ".", "split", "\n", ")", "\n", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "label_mapping", "=", "label_mapping", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "map_fun", "=", "map_fun", "\n", "\n", "for", "root", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit\"", ",", "split", ")", "\n", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "1", "]", "==", "\".png\"", ":", "\n", "                    ", "filename_base", "=", "\"_\"", ".", "join", "(", "filename", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "images", ".", "append", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "filename_base", "+", "\"_leftImg8bit.png\"", ")", "\n", ")", "\n", "\n", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "                        ", "target_root", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "\"gtCoarse\"", ",", "split", ",", "os", ".", "path", ".", "basename", "(", "root", ")", "\n", ")", "\n", "self", ".", "targets", ".", "append", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "target_root", ",", "filename_base", "+", "\"_gtCoarse_labelIds.png\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes_laf.CityscapesLAF.__len__": [[209, 212], ["len"], "methods", ["None"], ["", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return number of images in the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes_laf.CityscapesLAF.__getitem__": [[213, 231], ["PIL.Image.open().convert", "isinstance", "PIL.Image.open().convert", "PIL.Image.fromarray", "cityscapes_laf.CityscapesLAF.transform", "torch.tensor", "cityscapes_laf.CityscapesLAF.map_fun", "PIL.Image.open", "numpy.zeros", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "# Load images and perform augmentations with PIL", "\n", "        ", "image", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "i", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "target", "=", "Image", ".", "open", "(", "self", ".", "targets", "[", "i", "]", ")", ".", "convert", "(", "\"L\"", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "Image", ".", "fromarray", "(", "np", ".", "zeros", "(", "image", ".", "size", "[", ":", ":", "-", "1", "]", ")", ",", "mode", "=", "\"L\"", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", ",", "target", "=", "self", ".", "transform", "(", "image", ",", "target", ")", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "target", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "target", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "if", "self", ".", "map_fun", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "map_fun", "(", "target", ")", "\n", "\n", "", "return", "image", ",", "target", ",", "self", ".", "images", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes_laf.fulltotrain": [[105, 108], ["numpy.vectorize"], "function", ["None"], ["def", "fulltotrain", "(", "target", ")", ":", "\n", "    ", "\"\"\"Transforms labels from full cityscapes labelset to training label set.\"\"\"", "\n", "return", "np", ".", "vectorize", "(", "id_to_trainid", ".", "get", ")", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes_laf.trainidtocolor": [[110, 120], ["numpy.empty", "numpy.array().reshape", "isinstance", "numpy.array", "numpy.array", "np.array.flatten"], "function", ["None"], ["", "def", "trainidtocolor", "(", "target", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "target", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "target", "=", "np", ".", "array", "(", "target", ")", "\n", "", "target_col", "=", "np", ".", "empty", "(", "(", "target", ".", "shape", "[", "0", "]", ",", "3", ",", "target", ".", "shape", "[", "1", "]", ",", "target", ".", "shape", "[", "2", "]", ")", ")", "\n", "cols", "=", "np", ".", "array", "(", "[", "trainid_to_color", "[", "c", "]", "for", "c", "in", "target", ".", "flatten", "(", ")", "]", ")", ".", "reshape", "(", "\n", "(", "target", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ")", "\n", "\n", "target_col", "[", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", "]", "=", "cols", "\n", "return", "target_col", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes_laf.fulltocolor": [[122, 143], ["np.array.sort", "numpy.array", "target.reshape.numpy", "target.reshape.reshape", "numpy.concatenate", "torch.from_numpy", "len", "len", "numpy.expand_dims", "colors[].reshape"], "function", ["None"], ["", "def", "fulltocolor", "(", "target", ")", ":", "\n", "    ", "\"\"\"Maps labels to their RGB colors in cityscapes.\"\"\"", "\n", "colors", "=", "[", "(", "label", ".", "id", ",", "label", ".", "color", ")", "for", "label", "in", "labels", "if", "label", ".", "id", "!=", "-", "1", "]", "\n", "colors", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "colors", "=", "np", ".", "array", "(", "[", "x", "[", "1", "]", "for", "x", "in", "colors", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "target", "=", "target", ".", "numpy", "(", ")", "\n", "if", "len", "(", "target", ".", "shape", ")", "==", "2", ":", "\n", "        ", "b", "=", "1", "\n", "h", "=", "target", ".", "shape", "[", "0", "]", "\n", "w", "=", "target", ".", "shape", "[", "1", "]", "\n", "", "elif", "len", "(", "target", ".", "shape", ")", "==", "3", ":", "\n", "        ", "b", ",", "h", ",", "w", "=", "target", ".", "shape", "\n", "", "else", ":", "\n", "        ", "b", ",", "_", ",", "h", ",", "w", "=", "target", ".", "shape", "\n", "", "target", "=", "target", ".", "reshape", "(", "b", ",", "-", "1", ")", "\n", "\n", "rgb_target", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "expand_dims", "(", "colors", "[", "t", "]", ".", "reshape", "(", "3", ",", "h", ",", "w", ")", ",", "0", ")", "for", "t", "in", "target", "]", "\n", ")", "\n", "return", "torch", ".", "from_numpy", "(", "rgb_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.cityscapes_laf.onehot": [[145, 162], ["len", "target.size", "torch.zeros", "range", "target.size", "torch.zeros", "range", "target.size"], "function", ["None"], ["", "def", "onehot", "(", "target", ",", "n_classes", "=", "num_classes", ")", ":", "\n", "    ", "\"\"\"Transforms labels to one hot encoded.\"\"\"", "\n", "if", "len", "(", "target", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "# When no batch dimension is given", "\n", "        ", "h", ",", "w", "=", "target", ".", "size", "(", ")", "\n", "onehot_target", "=", "torch", ".", "zeros", "(", "n_classes", ",", "h", ",", "w", ")", "\n", "\n", "for", "c", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "onehot_target", "[", "c", "]", "[", "target", "==", "c", "]", "=", "1", "\n", "", "", "else", ":", "\n", "# when batch dimension is given", "\n", "        ", "b", ",", "h", ",", "w", "=", "target", ".", "size", "(", ")", "\n", "onehot_target", "=", "torch", ".", "zeros", "(", "b", ",", "n_classes", ",", "h", ",", "w", ")", "\n", "\n", "for", "c", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "onehot_target", "[", ":", ",", "c", ",", ":", ",", ":", "]", "[", "target", "==", "c", "]", "=", "1", "\n", "", "", "return", "onehot_target", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.Label.__init__": [[15, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "id", ",", "trainid", ",", "hex_color", ",", "color", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "trainid", "=", "trainid", "\n", "self", ".", "hex_color", "=", "hex_color", "\n", "self", ".", "color", "=", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.Label.__call__": [[22, 26], ["print", "str"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "print", "(", "\n", "\"name: {}\\nid: {}\\ntrainid: {}\\nhex_color:{}\\ncolor:{}\"", ".", "format", "(", "\n", "self", ".", "name", ",", "self", ".", "id", ",", "self", ".", "trainid", ",", "self", ".", "hex_color", ",", "str", "(", "self", ".", "color", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.A2D2.__init__": [[187, 258], ["torch.Dataset.__init__", "logging.getLogger", "a2d2.A2D2._get_image_filenames", "numpy.array", "numpy.zeros", "numpy.array", "os.path.isdir", "a2d2.A2D2.log.error", "ValueError", "all", "a2d2.A2D2.log.error", "ValueError"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.A2D2._get_image_filenames"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", "=", "\"/data/datasets/semseg/A2D2\"", ",", "\n", "cam_positions", "=", "(", "\"front_center\"", ",", ")", ",", "\n", "transform", "=", "None", ",", "\n", "label_map_fun", "=", "None", ",", "\n", "pre_computed_labels", "=", "False", ",", "\n", "label_mapping", "=", "discover_mapping", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "__name__", "+", "\".A2D2\"", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "root", ")", ":", "\n", "            ", "self", ".", "log", ".", "error", "(", "'\"{}\" does not exist!'", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "raise", "ValueError", "(", "'\"{}\" does not exist!'", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "\n", "", "if", "not", "all", "(", "\n", "[", "\n", "i", "\n", "in", "[", "\n", "\"front_center\"", ",", "\n", "\"front_left\"", ",", "\n", "\"front_right\"", ",", "\n", "\"side_left\"", ",", "\n", "\"side_right\"", ",", "\n", "\"rear_center\"", ",", "\n", "]", "\n", "for", "i", "in", "cam_positions", "\n", "]", "\n", ")", ":", "\n", "            ", "self", ".", "log", ".", "error", "(", "\n", "'\"cam_positions\" should be a part of {} but received {}'", ".", "format", "(", "\n", "[", "\n", "\"front_center\"", ",", "\n", "\"front_left\"", ",", "\n", "\"front_right\"", ",", "\n", "\"side_left\"", ",", "\n", "\"side_right\"", ",", "\n", "\"rear_center\"", ",", "\n", "]", ",", "\n", "cam_positions", ",", "\n", ")", "\n", ")", "\n", "raise", "ValueError", "(", "\n", "'\"cam_positions\" should be a part of {} but received {}'", ".", "format", "(", "\n", "[", "\n", "\"front_center\"", ",", "\n", "\"front_left\"", ",", "\n", "\"front_right\"", ",", "\n", "\"side_left\"", ",", "\n", "\"side_right\"", ",", "\n", "\"rear_center\"", ",", "\n", "]", ",", "\n", "cam_positions", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "cam_positions", "=", "cam_positions", "\n", "\n", "self", ".", "label_map_fun", "=", "label_map_fun", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "pre_computed_labels", "=", "pre_computed_labels", "\n", "self", ".", "label_mapping", "=", "label_mapping", "\n", "\n", "self", ".", "_get_image_filenames", "(", ")", "\n", "\n", "# create color matrix for indexing the class ids", "\n", "colors", "=", "np", ".", "array", "(", "[", "label", ".", "color", "for", "label", "in", "labels", "]", ")", "\n", "self", ".", "color_mat", "=", "np", ".", "zeros", "(", "(", "256", ",", "256", ",", "256", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "color_mat", "[", "colors", "[", ":", ",", "0", "]", ",", "colors", "[", ":", ",", "1", "]", ",", "colors", "[", ":", ",", "2", "]", "]", "=", "np", ".", "array", "(", "\n", "[", "label", ".", "id", "for", "label", "in", "labels", "]", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.A2D2.__getitem__": [[260, 278], ["PIL.Image.open().convert", "isinstance", "PIL.Image.open().convert", "a2d2.A2D2.load_target", "a2d2.A2D2.transform", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "a2d2.A2D2.label_map_fun", "PIL.Image.open", "numpy.array", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.A2D2.load_target"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "self", ".", "filenames", "[", "index", "]", "[", "0", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "if", "self", ".", "pre_computed_labels", ":", "\n", "            ", "target", "=", "Image", ".", "open", "(", "self", ".", "filenames", "[", "index", "]", "[", "1", "]", ")", ".", "convert", "(", "\"L\"", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "self", ".", "load_target", "(", "self", ".", "filenames", "[", "index", "]", "[", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", ",", "target", "=", "self", ".", "transform", "(", "image", ",", "target", ")", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "target", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "target", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "if", "self", ".", "label_map_fun", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "label_map_fun", "(", "target", ")", "\n", "\n", "", "return", "image", ",", "target", ",", "self", ".", "filenames", "[", "index", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.A2D2._get_image_filenames": [[279, 340], ["os.listdir", "os.path.join", "os.path.isdir", "os.path.join", "os.listdir", "os.path.join", "list", "list.sort", "os.listdir", "a2d2.A2D2.filenames.append", "os.path.join", "os.path.isfile", "a2d2.A2D2.log.debug", "os.path.join", "os.path.join", "os.path.join", "os.path.splitext", "f.replace", "f.replace"], "methods", ["None"], ["", "def", "_get_image_filenames", "(", "self", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "for", "folder", "in", "os", ".", "listdir", "(", "join", "(", "self", ".", "root", ",", "\"camera_lidar_semantic\"", ")", ")", ":", "\n", "            ", "if", "isdir", "(", "join", "(", "self", ".", "root", ",", "\"camera_lidar_semantic\"", ",", "folder", ")", ")", ":", "\n", "                ", "for", "cam_pos", "in", "os", ".", "listdir", "(", "\n", "join", "(", "self", ".", "root", ",", "\"camera_lidar_semantic\"", ",", "folder", ",", "\"camera\"", ")", "\n", ")", ":", "\n", "                    ", "if", "cam_pos", "[", "4", ":", "]", "in", "self", ".", "cam_positions", ":", "\n", "                        ", "files", "=", "list", "(", "\n", "os", ".", "listdir", "(", "\n", "join", "(", "\n", "self", ".", "root", ",", "\n", "\"camera_lidar_semantic\"", ",", "\n", "folder", ",", "\n", "\"camera\"", ",", "\n", "cam_pos", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "files", "=", "[", "i", "for", "i", "in", "files", "if", "splitext", "(", "i", ")", "[", "-", "1", "]", "==", "\".png\"", "]", "\n", "files", ".", "sort", "(", ")", "\n", "for", "f", "in", "files", ":", "\n", "                            ", "if", "self", ".", "pre_computed_labels", ":", "\n", "                                ", "label_folder_string", "=", "\"class_label\"", "\n", "", "else", ":", "\n", "                                ", "label_folder_string", "=", "\"label\"", "\n", "", "if", "not", "isfile", "(", "\n", "join", "(", "\n", "self", ".", "root", ",", "\n", "\"camera_lidar_semantic\"", ",", "\n", "folder", ",", "\n", "label_folder_string", ",", "\n", "cam_pos", ",", "\n", "f", ".", "replace", "(", "\"camera\"", ",", "label_folder_string", ")", ",", "\n", ")", "\n", ")", ":", "\n", "                                ", "self", ".", "log", ".", "debug", "(", "\n", "(", "\n", "\"File {} has no associated class_label image. \"", "\n", "\"Skipping this one.\"", "\n", ")", ".", "format", "(", "f", ")", "\n", ")", "\n", "continue", "\n", "\n", "", "self", ".", "filenames", ".", "append", "(", "\n", "(", "\n", "join", "(", "\n", "self", ".", "root", ",", "\n", "\"camera_lidar_semantic\"", ",", "\n", "folder", ",", "\n", "\"camera\"", ",", "\n", "cam_pos", ",", "\n", "f", ",", "\n", ")", ",", "\n", "join", "(", "\n", "self", ".", "root", ",", "\n", "\"camera_lidar_semantic\"", ",", "\n", "folder", ",", "\n", "label_folder_string", ",", "\n", "cam_pos", ",", "\n", "f", ".", "replace", "(", "\"camera\"", ",", "label_folder_string", ")", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.A2D2.load_target": [[344, 352], ["cv2.imread", "a2d2.A2D2.reshape", "a2d2.A2D2.color_mat[].reshape", "PIL.Image.fromarray", "a2d2.A2D2.transpose", "numpy.arange"], "methods", ["None"], ["", "", "", "", "", "", "def", "load_target", "(", "self", ",", "filename", ")", ":", "\n", "        ", "target", "=", "cv2", ".", "imread", "(", "filename", ")", "\n", "target", "=", "target", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "[", "np", ".", "arange", "(", "2", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "h", "=", "target", ".", "shape", "[", "1", "]", "\n", "w", "=", "target", ".", "shape", "[", "2", "]", "\n", "target", "=", "target", ".", "reshape", "(", "3", ",", "-", "1", ")", "\n", "target", "=", "self", ".", "color_mat", "[", "target", "[", "0", "]", ",", "target", "[", "1", "]", ",", "target", "[", "2", "]", "]", ".", "reshape", "(", "h", ",", "w", ")", "\n", "return", "Image", ".", "fromarray", "(", "target", ",", "mode", "=", "\"L\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.A2D2.display_image": [[353, 361], ["cv2.imread", "cv2.cvtColor", "matplotlib.figure", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.show", "os.path.basename"], "methods", ["None"], ["", "def", "display_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "self", ".", "filenames", "[", "index", "]", "[", "0", "]", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "15", ")", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "title", "(", "basename", "(", "self", ".", "filenames", "[", "index", "]", "[", "0", "]", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.A2D2.__len__": [[362, 364], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.hex_to_rgb": [[172, 176], ["hex_value.lstrip.lstrip", "len", "tuple", "int", "range"], "function", ["None"], ["def", "hex_to_rgb", "(", "hex_value", ")", ":", "\n", "    ", "hex_value", "=", "hex_value", ".", "lstrip", "(", "\"#\"", ")", "\n", "lv", "=", "len", "(", "hex_value", ")", "\n", "return", "tuple", "(", "int", "(", "hex_value", "[", "i", ":", "i", "+", "lv", "//", "3", "]", ",", "16", ")", "for", "i", "in", "range", "(", "0", ",", "lv", ",", "lv", "//", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.datasets.a2d2.fulltotrain": [[178, 184], ["target.clone", "id_to_trainid.items"], "function", ["None"], ["", "def", "fulltotrain", "(", "target", ")", ":", "\n", "    ", "\"\"\"Transforms labels from full A2D2 labelset to training label set.\"\"\"", "\n", "remapped_target", "=", "target", ".", "clone", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "        ", "remapped_target", "[", "target", "==", "k", "]", "=", "v", "\n", "", "return", "remapped_target", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d": [[7, 12], ["torch.BatchNorm2d"], "function", ["None"], ["def", "Norm2d", "(", "in_channels", ")", ":", "\n", "    ", "\"\"\"\n    Custom Norm Function to allow flexible switching\n    \"\"\"", "\n", "return", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.initialize_weights": [[14, 27], ["model.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_"], "function", ["None"], ["", "def", "initialize_weights", "(", "*", "models", ")", ":", "\n", "    ", "\"\"\"\n    Initialize Model Weights\n    \"\"\"", "\n", "for", "model", "in", "models", ":", "\n", "        ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Upsample": [[29, 34], ["torch.functional.interpolate"], "function", ["None"], ["", "", "", "", "def", "Upsample", "(", "x", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper Around the Upsample Call\n    \"\"\"", "\n", "return", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.deepv3._AtrousSpatialPyramidPoolingModule.__init__": [[48, 94], ["torch.nn.Module.__init__", "deepv3._AtrousSpatialPyramidPoolingModule.features.append", "torch.nn.ModuleList", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "deepv3._AtrousSpatialPyramidPoolingModule.features.append", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "reduction_dim", "=", "256", ",", "output_stride", "=", "16", ",", "rates", "=", "(", "6", ",", "12", ",", "18", ")", ")", ":", "\n", "        ", "super", "(", "_AtrousSpatialPyramidPoolingModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Check if we are using distributed BN and use the nn from encoding.nn", "\n", "# library rather than using standard pytorch.nn", "\n", "\n", "if", "output_stride", "==", "8", ":", "\n", "            ", "rates", "=", "[", "2", "*", "r", "for", "r", "in", "rates", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\"output stride of {} not supported\"", ".", "format", "(", "output_stride", ")", "\n", "\n", "", "self", ".", "features", "=", "[", "]", "\n", "# 1x1", "\n", "self", ".", "features", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "reduction_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", ")", "\n", "# other rates", "\n", "for", "r", "in", "rates", ":", "\n", "            ", "self", ".", "features", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_dim", ",", "\n", "reduction_dim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "dilation", "=", "r", ",", "\n", "padding", "=", "r", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "Norm2d", "(", "reduction_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "features", "=", "torch", ".", "nn", ".", "ModuleList", "(", "self", ".", "features", ")", "\n", "\n", "# img level features", "\n", "self", ".", "img_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "img_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "reduction_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.deepv3._AtrousSpatialPyramidPoolingModule.forward": [[96, 108], ["x.size", "deepv3._AtrousSpatialPyramidPoolingModule.img_pooling", "deepv3._AtrousSpatialPyramidPoolingModule.img_conv", "mynn.Upsample", "f", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Upsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_size", "=", "x", ".", "size", "(", ")", "\n", "\n", "img_features", "=", "self", ".", "img_pooling", "(", "x", ")", "\n", "img_features", "=", "self", ".", "img_conv", "(", "img_features", ")", "\n", "img_features", "=", "Upsample", "(", "img_features", ",", "x_size", "[", "2", ":", "]", ")", "\n", "out", "=", "img_features", "\n", "\n", "for", "f", "in", "self", ".", "features", ":", "\n", "            ", "y", "=", "f", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "y", ")", ",", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.deepv3.DeepV3Plus.__init__": [[118, 204], ["torch.nn.NLLLoss", "torch.nn.Module.__init__", "deepv3._AtrousSpatialPyramidPoolingModule", "torch.nn.Conv2d", "torch.nn.Sequential", "mynn.initialize_weights", "mynn.initialize_weights", "mynn.initialize_weights", "mynn.initialize_weights", "SEresnext.se_resnext50_32x4d", "deepv3.DeepV3Plus.layer3.named_modules", "deepv3.DeepV3Plus.layer4.named_modules", "torch.nn.Conv2d", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "SEresnext.se_resnext101_32x4d", "deepv3.DeepV3Plus.layer4.named_modules", "print", "torch.nn.Conv2d", "Exception", "Resnet.resnet50", "torch.nn.Sequential", "Resnet.resnet101", "torch.nn.Sequential", "ValueError"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.initialize_weights", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.initialize_weights", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.initialize_weights", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.initialize_weights", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.se_resnext50_32x4d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.se_resnext101_32x4d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet50", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet101"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ",", "\n", "trunk", "=", "\"seresnext-50\"", ",", "\n", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ",", "\n", "variant", "=", "\"D\"", ",", "\n", "skip", "=", "\"m1\"", ",", "\n", "skip_num", "=", "48", ",", "\n", ")", ":", "\n", "        ", "super", "(", "DeepV3Plus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "variant", "=", "variant", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "skip_num", "=", "skip_num", "\n", "\n", "if", "trunk", "==", "\"seresnext-50\"", ":", "\n", "            ", "resnet", "=", "SEresnext", ".", "se_resnext50_32x4d", "(", ")", "\n", "", "elif", "trunk", "==", "\"seresnext-101\"", ":", "\n", "            ", "resnet", "=", "SEresnext", ".", "se_resnext101_32x4d", "(", ")", "\n", "", "elif", "trunk", "==", "\"resnet-50\"", ":", "\n", "            ", "resnet", "=", "Resnet", ".", "resnet50", "(", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", "\n", ")", "\n", "", "elif", "trunk", "==", "\"resnet-101\"", ":", "\n", "            ", "resnet", "=", "Resnet", ".", "resnet101", "(", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not a valid network arch\"", ")", "\n", "\n", "", "self", ".", "layer0", "=", "resnet", ".", "layer0", "\n", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "=", "(", "\n", "resnet", ".", "layer1", ",", "\n", "resnet", ".", "layer2", ",", "\n", "resnet", ".", "layer3", ",", "\n", "resnet", ".", "layer4", ",", "\n", ")", "\n", "\n", "if", "self", ".", "variant", "==", "\"D\"", ":", "\n", "            ", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "\"conv2\"", "in", "n", ":", "\n", "                    ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "\"downsample.0\"", "in", "n", ":", "\n", "                    ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "\"conv2\"", "in", "n", ":", "\n", "                    ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "\"downsample.0\"", "in", "n", ":", "\n", "                    ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "", "elif", "self", ".", "variant", "==", "\"D16\"", ":", "\n", "            ", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "\"conv2\"", "in", "n", ":", "\n", "                    ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "\"downsample.0\"", "in", "n", ":", "\n", "                    ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "# raise 'unknown deepv3 variant: {}'.format(self.variant)", "\n", "            ", "print", "(", "\"Not using Dilation \"", ")", "\n", "\n", "", "self", ".", "aspp", "=", "_AtrousSpatialPyramidPoolingModule", "(", "2048", ",", "256", ",", "output_stride", "=", "8", ")", "\n", "\n", "if", "self", ".", "skip", "==", "\"m1\"", ":", "\n", "            ", "self", ".", "bot_fine", "=", "nn", ".", "Conv2d", "(", "256", ",", "self", ".", "skip_num", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "skip", "==", "\"m2\"", ":", "\n", "            ", "self", ".", "bot_fine", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "skip_num", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Not a valid skip\"", ")", "\n", "\n", "", "self", ".", "bot_aspp", "=", "nn", ".", "Conv2d", "(", "1280", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "final", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "self", ".", "skip_num", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "initialize_weights", "(", "self", ".", "aspp", ")", "\n", "initialize_weights", "(", "self", ".", "bot_aspp", ")", "\n", "initialize_weights", "(", "self", ".", "bot_fine", ")", "\n", "initialize_weights", "(", "self", ".", "final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.deepv3.DeepV3Plus.forward": [[205, 232], ["x.size", "deepv3.DeepV3Plus.layer0", "deepv3.DeepV3Plus.layer1", "deepv3.DeepV3Plus.layer2", "deepv3.DeepV3Plus.layer3", "deepv3.DeepV3Plus.layer4", "deepv3.DeepV3Plus.aspp", "deepv3.DeepV3Plus.bot_aspp", "torch.cat", "deepv3.DeepV3Plus.final", "mynn.Upsample", "deepv3.DeepV3Plus.bot_fine", "mynn.Upsample", "deepv3.DeepV3Plus.bot_fine", "mynn.Upsample", "deepv3.DeepV3Plus.criterion", "deepv3.DeepV3Plus.size", "deepv3.DeepV3Plus.size"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Upsample", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Upsample", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Upsample"], ["", "def", "forward", "(", "self", ",", "x", ",", "gts", "=", "None", ")", ":", "\n", "\n", "        ", "x_size", "=", "x", ".", "size", "(", ")", "# 800", "\n", "x0", "=", "self", ".", "layer0", "(", "x", ")", "# 400", "\n", "x1", "=", "self", ".", "layer1", "(", "x0", ")", "# 400", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "# 100", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "# 100", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "# 100", "\n", "xp", "=", "self", ".", "aspp", "(", "x4", ")", "\n", "\n", "dec0_up", "=", "self", ".", "bot_aspp", "(", "xp", ")", "\n", "if", "self", ".", "skip", "==", "\"m1\"", ":", "\n", "            ", "dec0_fine", "=", "self", ".", "bot_fine", "(", "x1", ")", "\n", "dec0_up", "=", "Upsample", "(", "dec0_up", ",", "x1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "dec0_fine", "=", "self", ".", "bot_fine", "(", "x2", ")", "\n", "dec0_up", "=", "Upsample", "(", "dec0_up", ",", "x2", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "", "dec0", "=", "[", "dec0_fine", ",", "dec0_up", "]", "\n", "dec0", "=", "torch", ".", "cat", "(", "dec0", ",", "1", ")", "\n", "dec1", "=", "self", ".", "final", "(", "dec0", ")", "\n", "main_out", "=", "Upsample", "(", "dec1", ",", "x_size", "[", "2", ":", "]", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "criterion", "(", "main_out", ",", "gts", ")", "\n", "\n", "", "return", "main_out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.deepv3.DeepWV3Plus.__init__": [[248, 284], ["torch.nn.NLLLoss", "torch.nn.Module.__init__", "logging.debug", "wider_resnet.wider_resnet38_a2", "torch.nn.DataParallel", "deepv3._AtrousSpatialPyramidPoolingModule", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "mynn.initialize_weights", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.initialize_weights", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "trunk", "=", "\"WideResnet38\"", ",", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ")", ":", "\n", "        ", "super", "(", "DeepWV3Plus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "logging", ".", "debug", "(", "\"Trunk: %s\"", ",", "trunk", ")", "\n", "wide_resnet", "=", "wider_resnet38_a2", "(", "classes", "=", "1000", ",", "dilation", "=", "True", ")", "\n", "wide_resnet", "=", "torch", ".", "nn", ".", "DataParallel", "(", "wide_resnet", ")", "\n", "\n", "wide_resnet", "=", "wide_resnet", ".", "module", "\n", "\n", "self", ".", "mod1", "=", "wide_resnet", ".", "mod1", "\n", "self", ".", "mod2", "=", "wide_resnet", ".", "mod2", "\n", "self", ".", "mod3", "=", "wide_resnet", ".", "mod3", "\n", "self", ".", "mod4", "=", "wide_resnet", ".", "mod4", "\n", "self", ".", "mod5", "=", "wide_resnet", ".", "mod5", "\n", "self", ".", "mod6", "=", "wide_resnet", ".", "mod6", "\n", "self", ".", "mod7", "=", "wide_resnet", ".", "mod7", "\n", "self", ".", "pool2", "=", "wide_resnet", ".", "pool2", "\n", "self", ".", "pool3", "=", "wide_resnet", ".", "pool3", "\n", "del", "wide_resnet", "\n", "\n", "self", ".", "aspp", "=", "_AtrousSpatialPyramidPoolingModule", "(", "4096", ",", "256", ",", "output_stride", "=", "8", ")", "\n", "\n", "self", ".", "bot_fine", "=", "nn", ".", "Conv2d", "(", "128", ",", "48", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bot_aspp", "=", "nn", ".", "Conv2d", "(", "1280", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "final", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "48", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "initialize_weights", "(", "self", ".", "final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.deepv3.DeepWV3Plus.forward": [[285, 306], ["inp.size", "deepv3.DeepWV3Plus.mod1", "deepv3.DeepWV3Plus.mod2", "deepv3.DeepWV3Plus.mod3", "deepv3.DeepWV3Plus.mod4", "deepv3.DeepWV3Plus.mod5", "deepv3.DeepWV3Plus.mod6", "deepv3.DeepWV3Plus.mod7", "deepv3.DeepWV3Plus.aspp", "deepv3.DeepWV3Plus.bot_aspp", "deepv3.DeepWV3Plus.bot_fine", "mynn.Upsample", "torch.cat", "deepv3.DeepWV3Plus.final", "mynn.Upsample", "deepv3.DeepWV3Plus.pool2", "deepv3.DeepWV3Plus.pool3", "deepv3.DeepWV3Plus.size"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Upsample", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Upsample"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x_size", "=", "inp", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "mod1", "(", "inp", ")", "\n", "m2", "=", "self", ".", "mod2", "(", "self", ".", "pool2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "mod3", "(", "self", ".", "pool3", "(", "m2", ")", ")", "\n", "x", "=", "self", ".", "mod4", "(", "x", ")", "\n", "x", "=", "self", ".", "mod5", "(", "x", ")", "\n", "x", "=", "self", ".", "mod6", "(", "x", ")", "\n", "x", "=", "self", ".", "mod7", "(", "x", ")", "\n", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "dec0_up", "=", "self", ".", "bot_aspp", "(", "x", ")", "\n", "\n", "dec0_fine", "=", "self", ".", "bot_fine", "(", "m2", ")", "\n", "dec0_up", "=", "Upsample", "(", "dec0_up", ",", "m2", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "dec0", "=", "[", "dec0_fine", ",", "dec0_up", "]", "\n", "dec0", "=", "torch", ".", "cat", "(", "dec0", ",", "1", ")", "\n", "\n", "dec1", "=", "self", ".", "final", "(", "dec0", ")", "\n", "out", "=", "Upsample", "(", "dec1", ",", "x_size", "[", "2", ":", "]", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.deepv3.DeepSRNX50V3PlusD_m1": [[308, 314], ["deepv3.DeepV3Plus"], "function", ["None"], ["", "", "def", "DeepSRNX50V3PlusD_m1", "(", "num_classes", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    SEResnet 50 Based Network\n    \"\"\"", "\n", "return", "DeepV3Plus", "(", "\n", "num_classes", ",", "trunk", "=", "\"seresnext-50\"", ",", "criterion", "=", "criterion", ",", "variant", "=", "\"D\"", ",", "skip", "=", "\"m1\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.deepv3.DeepR50V3PlusD_m1": [[317, 323], ["deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepR50V3PlusD_m1", "(", "num_classes", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    Resnet 50 Based Network\n    \"\"\"", "\n", "return", "DeepV3Plus", "(", "\n", "num_classes", ",", "trunk", "=", "\"resnet-50\"", ",", "criterion", "=", "criterion", ",", "variant", "=", "\"D\"", ",", "skip", "=", "\"m1\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.deepv3.DeepSRNX101V3PlusD_m1": [[326, 332], ["deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepSRNX101V3PlusD_m1", "(", "num_classes", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    SeResnext 101 Based Network\n    \"\"\"", "\n", "return", "DeepV3Plus", "(", "\n", "num_classes", ",", "trunk", "=", "\"seresnext-101\"", ",", "criterion", "=", "criterion", ",", "variant", "=", "\"D\"", ",", "skip", "=", "\"m1\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SEModule.__init__": [[82, 89], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SEModule.forward": [[90, 98], ["SEresnext.SEModule.avg_pool", "SEresnext.SEModule.fc1", "SEresnext.SEModule.relu", "SEresnext.SEModule.fc2", "SEresnext.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.Bottleneck.forward": [[105, 126], ["SEresnext.Bottleneck.conv1", "SEresnext.Bottleneck.bn1", "SEresnext.Bottleneck.relu", "SEresnext.Bottleneck.conv2", "SEresnext.Bottleneck.bn2", "SEresnext.Bottleneck.relu", "SEresnext.Bottleneck.conv3", "SEresnext.Bottleneck.bn3", "SEresnext.Bottleneck.relu", "SEresnext.Bottleneck.downsample", "SEresnext.Bottleneck.se_module"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "se_module", "(", "out", ")", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SEBottleneck.__init__": [[135, 155], ["torch.Module.__init__", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "SEresnext.SEModule"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "2", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", "*", "2", ",", "\n", "planes", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SEResNetBottleneck.__init__": [[166, 182], ["torch.Module.__init__", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "SEresnext.SEModule"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "stride", "=", "stride", "\n", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SEResNeXtBottleneck.__init__": [[191, 221], ["torch.Module.__init__", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "SEresnext.SEModule", "math.floor"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "groups", ",", "\n", "reduction", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "base_width", "=", "4", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SEResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "math", ".", "floor", "(", "planes", "*", "(", "base_width", "/", "64", ")", ")", "*", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SENet.__init__": [[228, 355], ["torch.Module.__init__", "layer0_modules.append", "torch.Sequential", "SEresnext.SENet._make_layer", "SEresnext.SENet._make_layer", "SEresnext.SENet._make_layer", "SEresnext.SENet._make_layer", "torch.AvgPool2d", "torch.Linear", "collections.OrderedDict", "torch.Dropout", "torch.MaxPool2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "groups", ",", "\n", "reduction", ",", "\n", "dropout_p", "=", "0.2", ",", "\n", "inplanes", "=", "128", ",", "\n", "input_3x3", "=", "True", ",", "\n", "downsample_kernel_size", "=", "3", ",", "\n", "downsample_padding", "=", "1", ",", "\n", "num_classes", "=", "1000", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        block (nn.Module): Bottleneck class.\n            - For SENet154: SEBottleneck\n            - For SE-ResNet models: SEResNetBottleneck\n            - For SE-ResNeXt models:  SEResNeXtBottleneck\n        layers (list of ints): Number of residual blocks for 4 layers of the\n            network (layer1...layer4).\n        groups (int): Number of groups for the 3x3 convolution in each\n            bottleneck block.\n            - For SENet154: 64\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models:  32\n        reduction (int): Reduction ratio for Squeeze-and-Excitation modules.\n            - For all models: 16\n        dropout_p (float or None): Drop probability for the Dropout layer.\n            If `None` the Dropout layer is not used.\n            - For SENet154: 0.2\n            - For SE-ResNet models: None\n            - For SE-ResNeXt models: None\n        inplanes (int):  Number of input channels for layer1.\n            - For SENet154: 128\n            - For SE-ResNet models: 64\n            - For SE-ResNeXt models: 64\n        input_3x3 (bool): If `True`, use three 3x3 convolutions instead of\n            a single 7x7 convolution in layer0.\n            - For SENet154: True\n            - For SE-ResNet models: False\n            - For SE-ResNeXt models: False\n        downsample_kernel_size (int): Kernel size for downsampling convolutions\n            in layer2, layer3 and layer4.\n            - For SENet154: 3\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models: 1\n        downsample_padding (int): Padding for downsampling convolutions in\n            layer2, layer3 and layer4.\n            - For SENet154: 1\n            - For SE-ResNet models: 0\n            - For SE-ResNeXt models: 0\n        num_classes (int): Number of outputs in `last_linear` layer.\n            - For all models: 1000\n        \"\"\"", "\n", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "if", "input_3x3", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"bn1\"", ",", "mynn", ".", "Norm2d", "(", "64", ")", ")", ",", "\n", "(", "\"relu1\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"bn2\"", ",", "mynn", ".", "Norm2d", "(", "64", ")", ")", ",", "\n", "(", "\"relu2\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"conv3\"", ",", "nn", ".", "Conv2d", "(", "64", ",", "inplanes", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"bn3\"", ",", "mynn", ".", "Norm2d", "(", "inplanes", ")", ")", ",", "\n", "(", "\"relu3\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "\n", "\"conv1\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "3", ",", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", ",", "\n", ")", ",", "\n", "(", "\"bn1\"", ",", "mynn", ".", "Norm2d", "(", "inplanes", ")", ")", ",", "\n", "(", "\"relu1\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", "# To preserve compatibility with Caffe weights `ceil_mode=True`", "\n", "# is used instead of `padding=1`.", "\n", "", "layer0_modules", ".", "append", "(", "(", "\"pool\"", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", ")", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layer0_modules", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "64", ",", "\n", "blocks", "=", "layers", "[", "0", "]", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "128", ",", "\n", "blocks", "=", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "256", ",", "\n", "blocks", "=", "layers", "[", "2", "]", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "512", ",", "\n", "blocks", "=", "layers", "[", "3", "]", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", ",", "\n", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_p", ")", "if", "dropout_p", "is", "not", "None", "else", "None", "\n", "self", ".", "last_linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SENet._make_layer": [[356, 390], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "mynn.Norm2d", "block"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "groups", ",", "\n", "reduction", ",", "\n", "stride", "=", "1", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", ",", "\n", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "downsample_kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "downsample_padding", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "mynn", ".", "Norm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", ",", "downsample", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SENet.features": [[391, 401], ["SEresnext.SENet.layer0", "SEresnext.SENet.layer1", "SEresnext.SENet.layer2", "SEresnext.SENet.layer3", "SEresnext.SENet.layer4"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward Pass through the each layer of SE network\n        \"\"\"", "\n", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SENet.logits": [[402, 412], ["SEresnext.SENet.avg_pool", "SEresnext.SENet.view", "SEresnext.SENet.last_linear", "SEresnext.SENet.dropout", "SEresnext.SENet.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        AvgPool and Linear Layer\n        \"\"\"", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SENet.forward": [[413, 417], ["SEresnext.SENet.features", "SEresnext.SENet.logits"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SENet.features", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.SENet.logits"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.initialize_pretrained_model": [[419, 436], ["torch.utils.model_zoo.load_url", "model.load_state_dict"], "function", ["None"], ["", "", "def", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", ":", "\n", "    ", "\"\"\"\n    Initialize Pretrain Model Information,\n    Dowload weights, load weights, set variables\n    \"\"\"", "\n", "assert", "(", "\n", "num_classes", "==", "settings", "[", "\"num_classes\"", "]", "\n", ")", ",", "\"num_classes should be {}, but is {}\"", ".", "format", "(", "\n", "settings", "[", "\"num_classes\"", "]", ",", "num_classes", "\n", ")", "\n", "weights", "=", "model_zoo", ".", "load_url", "(", "settings", "[", "\"url\"", "]", ")", "\n", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "model", ".", "input_space", "=", "settings", "[", "\"input_space\"", "]", "\n", "model", ".", "input_size", "=", "settings", "[", "\"input_size\"", "]", "\n", "model", ".", "input_range", "=", "settings", "[", "\"input_range\"", "]", "\n", "model", ".", "mean", "=", "settings", "[", "\"mean\"", "]", "\n", "model", ".", "std", "=", "settings", "[", "\"std\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.se_resnext50_32x4d": [[438, 457], ["SEresnext.SENet", "SEresnext.initialize_pretrained_model"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.initialize_pretrained_model"], ["", "def", "se_resnext50_32x4d", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Defination For SE Resnext50\n    \"\"\"", "\n", "model", "=", "SENet", "(", "\n", "SEResNeXtBottleneck", ",", "\n", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "groups", "=", "32", ",", "\n", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "\n", "inplanes", "=", "64", ",", "\n", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", ")", "\n", "settings", "=", "pretrained_settings", "[", "\"se_resnext50_32x4d\"", "]", "[", "\"imagenet\"", "]", "\n", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.se_resnext101_32x4d": [[459, 479], ["SEresnext.SENet", "SEresnext.initialize_pretrained_model"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.SEresnext.initialize_pretrained_model"], ["", "def", "se_resnext101_32x4d", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Defination For SE Resnext101\n    \"\"\"", "\n", "\n", "model", "=", "SENet", "(", "\n", "SEResNeXtBottleneck", ",", "\n", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "groups", "=", "32", ",", "\n", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "\n", "inplanes", "=", "64", ",", "\n", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", ")", "\n", "settings", "=", "pretrained_settings", "[", "\"se_resnext101_32x4d\"", "]", "[", "\"imagenet\"", "]", "\n", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.wider_resnet.GlobalAvgPool2d.__init__": [[58, 61], ["torch.Module.__init__", "logging.debug"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "logging", ".", "debug", "(", "\"Global Average Pooling Initialized\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.wider_resnet.GlobalAvgPool2d.forward": [[62, 65], ["inputs.size", "inputs.view().mean", "inputs.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "in_size", "=", "inputs", ".", "size", "(", ")", "\n", "return", "inputs", ".", "view", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.wider_resnet.IdentityResidualBlock.__init__": [[72, 198], ["torch.Module.__init__", "norm_act", "torch.Sequential", "torch.Sequential", "ValueError", "ValueError", "len", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "len", "len", "len", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "dropout", "dropout"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "norm_act", "=", "bnrelu", ",", "\n", "dropout", "=", "None", ",", "\n", "dist_bn", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Configurable identity-mapping residual block\n\n        Parameters\n        ----------\n        in_channels : int\n            Number of input channels.\n        channels : list of int\n            Number of channels in the internal feature maps.\n            Can either have two or three elements: if three construct\n            a residual block with two `3 x 3` convolutions,\n            otherwise construct a bottleneck block with `1 x 1`, then\n            `3 x 3` then `1 x 1` convolutions.\n        stride : int\n            Stride of the first `3 x 3` convolution\n        dilation : int\n            Dilation to apply to the `3 x 3` convolutions.\n        groups : int\n            Number of convolution groups.\n            This is used to create ResNeXt-style blocks and is only compatible with\n            bottleneck blocks.\n        norm_act : callable\n            Function to create normalization / activation Module.\n        dropout: callable\n            Function to create Dropout Module.\n        dist_bn: Boolean\n            A variable to enable or disable use of distributed BN\n        \"\"\"", "\n", "super", "(", "IdentityResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dist_bn", "=", "dist_bn", "\n", "\n", "# Check if we are using distributed BN and use the nn from encoding.nn", "\n", "# library rather than using standard pytorch.nn", "\n", "\n", "# Check parameters for inconsistencies", "\n", "if", "len", "(", "channels", ")", "!=", "2", "and", "len", "(", "channels", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"channels must contain either two or three values\"", ")", "\n", "", "if", "len", "(", "channels", ")", "==", "2", "and", "groups", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"groups > 1 are only valid if len(channels) == 3\"", ")", "\n", "\n", "", "is_bottleneck", "=", "len", "(", "channels", ")", "==", "3", "\n", "need_proj_conv", "=", "stride", "!=", "1", "or", "in_channels", "!=", "channels", "[", "-", "1", "]", "\n", "\n", "self", ".", "bn1", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "not", "is_bottleneck", ":", "\n", "            ", "layers", "=", "[", "\n", "(", "\n", "\"conv1\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "channels", "[", "0", "]", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", ",", "\n", ")", ",", "\n", "(", "\"bn2\"", ",", "norm_act", "(", "channels", "[", "0", "]", ")", ")", ",", "\n", "(", "\n", "\"conv2\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "channels", "[", "0", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", ",", "\n", ")", ",", "\n", "]", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "                ", "layers", "=", "layers", "[", "0", ":", "2", "]", "+", "[", "(", "\"dropout\"", ",", "dropout", "(", ")", ")", "]", "+", "layers", "[", "2", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "layers", "=", "[", "\n", "(", "\n", "\"conv1\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "channels", "[", "0", "]", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", ",", "\n", "(", "\"bn2\"", ",", "norm_act", "(", "channels", "[", "0", "]", ")", ")", ",", "\n", "(", "\n", "\"conv2\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "channels", "[", "0", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", ",", "\n", ")", ",", "\n", "(", "\"bn3\"", ",", "norm_act", "(", "channels", "[", "1", "]", ")", ")", ",", "\n", "(", "\n", "\"conv3\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", ")", ",", "\n", "]", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "                ", "layers", "=", "layers", "[", "0", ":", "4", "]", "+", "[", "(", "\"dropout\"", ",", "dropout", "(", ")", ")", "]", "+", "layers", "[", "4", ":", "]", "\n", "", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "\n", "if", "need_proj_conv", ":", "\n", "            ", "self", ".", "proj_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.wider_resnet.IdentityResidualBlock.forward": [[200, 214], ["hasattr", "wider_resnet.IdentityResidualBlock.convs", "wider_resnet.IdentityResidualBlock.add_", "wider_resnet.IdentityResidualBlock.bn1", "wider_resnet.IdentityResidualBlock.proj_conv", "x.clone", "wider_resnet.IdentityResidualBlock.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        This is the standard forward function for non-distributed batch norm\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"proj_conv\"", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "shortcut", "=", "self", ".", "proj_conv", "(", "bn1", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", ".", "clone", "(", ")", "\n", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "convs", "(", "bn1", ")", "\n", "out", ".", "add_", "(", "shortcut", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.wider_resnet.WiderResNet.__init__": [[221, 289], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "enumerate", "norm_act", "len", "ValueError", "collections.OrderedDict", "range", "wider_resnet.WiderResNet.add_module", "torch.Sequential", "torch.Sequential", "blocks.append", "wider_resnet.WiderResNet.add_module", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.MaxPool2d", "torch.MaxPool2d", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "wider_resnet.IdentityResidualBlock", "wider_resnet.GlobalAvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["def", "__init__", "(", "self", ",", "structure", ",", "norm_act", "=", "bnrelu", ",", "classes", "=", "0", ")", ":", "\n", "        ", "\"\"\"Wider ResNet with pre-activation (identity mapping) blocks\n\n        Parameters\n        ----------\n        structure : list of int\n            Number of residual blocks in each of the six modules of the network.\n        norm_act : callable\n            Function to create normalization / activation Module.\n        classes : int\n            If not `0` also include global average pooling and \\\n            a fully-connected layer with `classes` outputs at the end\n            of the network.\n        \"\"\"", "\n", "super", "(", "WiderResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "structure", "=", "structure", "\n", "\n", "if", "len", "(", "structure", ")", "!=", "6", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected a structure with six values\"", ")", "\n", "\n", "# Initial layers", "\n", "", "self", ".", "mod1", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "]", "\n", ")", "\n", ")", "\n", "\n", "# Groups of residual blocks", "\n", "in_channels", "=", "64", "\n", "channels", "=", "[", "\n", "(", "128", ",", "128", ")", ",", "\n", "(", "256", ",", "256", ")", ",", "\n", "(", "512", ",", "512", ")", ",", "\n", "(", "512", ",", "1024", ")", ",", "\n", "(", "512", ",", "1024", ",", "2048", ")", ",", "\n", "(", "1024", ",", "2048", ",", "4096", ")", ",", "\n", "]", "\n", "for", "mod_id", ",", "num", "in", "enumerate", "(", "structure", ")", ":", "\n", "# Create blocks for module", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "block_id", "in", "range", "(", "num", ")", ":", "\n", "                ", "blocks", ".", "append", "(", "\n", "(", "\n", "\"block%d\"", "%", "(", "block_id", "+", "1", ")", ",", "\n", "IdentityResidualBlock", "(", "\n", "in_channels", ",", "channels", "[", "mod_id", "]", ",", "norm_act", "=", "norm_act", "\n", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "# Update channels and p_keep", "\n", "in_channels", "=", "channels", "[", "mod_id", "]", "[", "-", "1", "]", "\n", "\n", "# Create module", "\n", "", "if", "mod_id", "<=", "4", ":", "\n", "                ", "self", ".", "add_module", "(", "\n", "\"pool%d\"", "%", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", ")", "\n", "", "self", ".", "add_module", "(", "\"mod%d\"", "%", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "blocks", ")", ")", ")", "\n", "\n", "# Pooling and predictor", "\n", "", "self", ".", "bn_out", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "classes", "!=", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\"avg_pool\"", ",", "GlobalAvgPool2d", "(", ")", ")", ",", "\n", "(", "\"fc\"", ",", "nn", ".", "Linear", "(", "in_channels", ",", "classes", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.wider_resnet.WiderResNet.forward": [[293, 307], ["wider_resnet.WiderResNet.mod1", "wider_resnet.WiderResNet.mod2", "wider_resnet.WiderResNet.mod3", "wider_resnet.WiderResNet.mod4", "wider_resnet.WiderResNet.mod5", "wider_resnet.WiderResNet.mod6", "wider_resnet.WiderResNet.mod7", "wider_resnet.WiderResNet.bn_out", "hasattr", "wider_resnet.WiderResNet.pool2", "wider_resnet.WiderResNet.pool3", "wider_resnet.WiderResNet.pool4", "wider_resnet.WiderResNet.pool5", "wider_resnet.WiderResNet.pool6", "wider_resnet.WiderResNet.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "self", ".", "mod1", "(", "img", ")", "\n", "out", "=", "self", ".", "mod2", "(", "self", ".", "pool2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod3", "(", "self", ".", "pool3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod4", "(", "self", ".", "pool4", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod5", "(", "self", ".", "pool5", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod6", "(", "self", ".", "pool6", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod7", "(", "out", ")", "\n", "out", "=", "self", ".", "bn_out", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"classifier\"", ")", ":", "\n", "            ", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.wider_resnet.WiderResNetA2.__init__": [[331, 420], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "enumerate", "norm_act", "len", "ValueError", "collections.OrderedDict", "range", "wider_resnet.WiderResNetA2.add_module", "torch.Sequential", "torch.Sequential", "blocks.append", "wider_resnet.WiderResNetA2.add_module", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "functools.partial", "torch.MaxPool2d", "torch.MaxPool2d", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "functools.partial", "wider_resnet.IdentityResidualBlock", "wider_resnet.GlobalAvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["def", "__init__", "(", "\n", "self", ",", "structure", ",", "norm_act", "=", "bnrelu", ",", "classes", "=", "0", ",", "dilation", "=", "False", ",", "dist_bn", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "WiderResNetA2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dist_bn", "=", "dist_bn", "\n", "\n", "# If using distributed batch norm, use the encoding.nn as oppose to torch.nn", "\n", "\n", "nn", ".", "Dropout", "=", "nn", ".", "Dropout2d", "\n", "norm_act", "=", "bnrelu", "\n", "self", ".", "structure", "=", "structure", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n", "if", "len", "(", "structure", ")", "!=", "6", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected a structure with six values\"", ")", "\n", "\n", "# Initial layers", "\n", "", "self", ".", "mod1", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "]", "\n", ")", "\n", ")", "\n", "\n", "# Groups of residual blocks", "\n", "in_channels", "=", "64", "\n", "channels", "=", "[", "\n", "(", "128", ",", "128", ")", ",", "\n", "(", "256", ",", "256", ")", ",", "\n", "(", "512", ",", "512", ")", ",", "\n", "(", "512", ",", "1024", ")", ",", "\n", "(", "512", ",", "1024", ",", "2048", ")", ",", "\n", "(", "1024", ",", "2048", ",", "4096", ")", ",", "\n", "]", "\n", "for", "mod_id", ",", "num", "in", "enumerate", "(", "structure", ")", ":", "\n", "# Create blocks for module", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "block_id", "in", "range", "(", "num", ")", ":", "\n", "                ", "if", "not", "dilation", ":", "\n", "                    ", "dil", "=", "1", "\n", "stride", "=", "2", "if", "block_id", "==", "0", "and", "2", "<=", "mod_id", "<=", "4", "else", "1", "\n", "", "else", ":", "\n", "                    ", "if", "mod_id", "==", "3", ":", "\n", "                        ", "dil", "=", "2", "\n", "", "elif", "mod_id", ">", "3", ":", "\n", "                        ", "dil", "=", "4", "\n", "", "else", ":", "\n", "                        ", "dil", "=", "1", "\n", "", "stride", "=", "2", "if", "block_id", "==", "0", "and", "mod_id", "==", "2", "else", "1", "\n", "\n", "", "if", "mod_id", "==", "4", ":", "\n", "                    ", "drop", "=", "partial", "(", "nn", ".", "Dropout", ",", "p", "=", "0.3", ")", "\n", "", "elif", "mod_id", "==", "5", ":", "\n", "                    ", "drop", "=", "partial", "(", "nn", ".", "Dropout", ",", "p", "=", "0.5", ")", "\n", "", "else", ":", "\n", "                    ", "drop", "=", "None", "\n", "\n", "", "blocks", ".", "append", "(", "\n", "(", "\n", "\"block%d\"", "%", "(", "block_id", "+", "1", ")", ",", "\n", "IdentityResidualBlock", "(", "\n", "in_channels", ",", "\n", "channels", "[", "mod_id", "]", ",", "\n", "norm_act", "=", "norm_act", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dil", ",", "\n", "dropout", "=", "drop", ",", "\n", "dist_bn", "=", "self", ".", "dist_bn", ",", "\n", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "# Update channels and p_keep", "\n", "in_channels", "=", "channels", "[", "mod_id", "]", "[", "-", "1", "]", "\n", "\n", "# Create module", "\n", "", "if", "mod_id", "<", "2", ":", "\n", "                ", "self", ".", "add_module", "(", "\n", "\"pool%d\"", "%", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", ")", "\n", "", "self", ".", "add_module", "(", "\"mod%d\"", "%", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "blocks", ")", ")", ")", "\n", "\n", "# Pooling and predictor", "\n", "", "self", ".", "bn_out", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "classes", "!=", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\"avg_pool\"", ",", "GlobalAvgPool2d", "(", ")", ")", ",", "\n", "(", "\"fc\"", ",", "nn", ".", "Linear", "(", "in_channels", ",", "classes", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.wider_resnet.WiderResNetA2.forward": [[424, 437], ["wider_resnet.WiderResNetA2.mod1", "wider_resnet.WiderResNetA2.mod2", "wider_resnet.WiderResNetA2.mod3", "wider_resnet.WiderResNetA2.mod4", "wider_resnet.WiderResNetA2.mod5", "wider_resnet.WiderResNetA2.mod6", "wider_resnet.WiderResNetA2.mod7", "wider_resnet.WiderResNetA2.bn_out", "hasattr", "wider_resnet.WiderResNetA2.pool2", "wider_resnet.WiderResNetA2.pool3", "wider_resnet.WiderResNetA2.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "self", ".", "mod1", "(", "img", ")", "\n", "out", "=", "self", ".", "mod2", "(", "self", ".", "pool2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod3", "(", "self", ".", "pool3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod4", "(", "out", ")", "\n", "out", "=", "self", ".", "mod5", "(", "out", ")", "\n", "out", "=", "self", ".", "mod6", "(", "out", ")", "\n", "out", "=", "self", ".", "mod7", "(", "out", ")", "\n", "out", "=", "self", ".", "bn_out", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"classifier\"", ")", ":", "\n", "            ", "return", "self", ".", "classifier", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.wider_resnet.bnrelu": [[46, 51], ["torch.Sequential", "mynn.Norm2d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["def", "bnrelu", "(", "channels", ")", ":", "\n", "    ", "\"\"\"\n    Single Layer BN and Relui\n    \"\"\"", "\n", "return", "nn", ".", "Sequential", "(", "mynn", ".", "Norm2d", "(", "channels", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.BasicBlock.__init__": [[66, 75], ["torch.Module.__init__", "Resnet.conv3x3", "mynn.Norm2d", "torch.ReLU", "torch.ReLU", "Resnet.conv3x3", "mynn.Norm2d"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.conv3x3", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.conv3x3", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.BasicBlock.forward": [[76, 93], ["Resnet.BasicBlock.conv1", "Resnet.BasicBlock.bn1", "Resnet.BasicBlock.relu", "Resnet.BasicBlock.conv2", "Resnet.BasicBlock.bn2", "Resnet.BasicBlock.relu", "Resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.Bottleneck.__init__": [[102, 117], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.Bottleneck.forward": [[118, 139], ["Resnet.Bottleneck.conv1", "Resnet.Bottleneck.bn1", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv2", "Resnet.Bottleneck.bn2", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv3", "Resnet.Bottleneck.bn3", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet.__init__": [[146, 166], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "Resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet._make_layer": [[167, 188], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "mynn.Norm2d", "block"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.mynn.Norm2d"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "mynn", ".", "Norm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.ResNet.forward": [[189, 205], ["Resnet.ResNet.conv1", "Resnet.ResNet.bn1", "Resnet.ResNet.relu", "Resnet.ResNet.maxpool", "Resnet.ResNet.layer1", "Resnet.ResNet.layer2", "Resnet.ResNet.layer3", "Resnet.ResNet.layer4", "Resnet.ResNet.avgpool", "Resnet.ResNet.view", "Resnet.ResNet.fc", "Resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.conv3x3": [[52, 56], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet18": [[207, 217], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet34": [[219, 229], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet50": [[231, 241], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet101": [[243, 253], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.model.Resnet.resnet152": [[255, 265], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.MetaSeg.main.main": [[18, 72], ["print", "src.MetaSeg.functions.main_functions.ComputeMetrics", "src.MetaSeg.functions.main_functions.AnalyzeMetrics.compute_metrics_per_image", "src.MetaSeg.functions.main_functions.VisualizeMetaPrediction", "src.MetaSeg.functions.main_functions.AnalyzeMetrics.visualize_regression_per_image", "src.MetaSeg.functions.main_functions.AnalyzeMetrics", "src.MetaSeg.functions.main_functions.AnalyzeMetrics.prepare_analysis", "open", "pickle.load", "os.path.join", "len", "os.path.dirname", "inspect.getmodule"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.ComputeMetrics.compute_metrics_per_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.VisualizeMetaPrediction.visualize_regression_per_image", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.prepare_analysis"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "CONFIG", ".", "CLASSINDEX", "is", "not", "None", "and", "CONFIG", ".", "DATASET", ".", "name", "==", "\"a2d2\"", ":", "\n", "        ", "with", "open", "(", "\n", "join", "(", "\n", "dirname", "(", "inspect", ".", "getmodule", "(", "CONFIG", ")", ".", "__file__", ")", ",", "\"a2d2_dataset_overview.p\"", "\n", ")", ",", "\n", "\"rb\"", ",", "\n", ")", "as", "f", ":", "\n", "            ", "found_images", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "found_images", "=", "found_images", "[", "CONFIG", ".", "CLASSINDEX", "]", "\n", "additional_arguments", "=", "{", "\"num_imgs\"", ":", "found_images", "}", "\n", "print", "(", "\n", "\"CLASSINDEX {} will be processed. Number of total images: {}\"", ".", "format", "(", "\n", "CONFIG", ".", "CLASSINDEX", ",", "len", "(", "found_images", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "additional_arguments", "=", "{", "}", "\n", "\n", "", "\"\"\" COMMENT:\n    From this line on, it is assumed that the INPUT_DIR defined in \"global_defs.py\"\n    contains hdf5 files for each image.\n    These hdf5 files should contain following data:\n\n        - 3D np array with softmax output in the form (height, width, channels)\n        - 2D np array with ground truth class indices\n        - full path to corresponding raw image\n\n    Resulting metrics files are stored in METRICS_DIR and connected components\n    (marked segments) files in COMPONENTS_DIR as pickle (*.p) files.\n    \"\"\"", "\n", "if", "CONFIG", ".", "COMPUTE_METRICS", ":", "\n", "        ", "run", "=", "ComputeMetrics", "(", "**", "additional_arguments", ")", "\n", "run", ".", "compute_metrics_per_image", "(", ")", "\n", "\n", "", "\"\"\" COMMENT:\n    For visualizing the rating by MetaSeg, the underlying metrics for the meta model\n    need to be computed and saved in METRICS_DIR defined in \"global_defs.py\".\n    In IOU_SEG_VIS_DIR the resulting visualization images (*.png) are stored.\n    Refer to paper for interpretation.\n    \"\"\"", "\n", "if", "CONFIG", ".", "VISUALIZE_RATING", ":", "\n", "        ", "run", "=", "VisualizeMetaPrediction", "(", "**", "additional_arguments", ")", "\n", "run", ".", "visualize_regression_per_image", "(", ")", "\n", "\n", "", "\"\"\" COMMENT:\n    For analyzing MetaSeg performance based on the derived metrics, the underlying\n    metrics for the meta model need to be computed and saved in METRICS_DIR defined in\n    \"global_defs.py\". Results for viewing are saved in RESULTS_DIR. The calculation\n    results file is saved in STATS_DIR.\n    \"\"\"", "\n", "if", "CONFIG", ".", "ANALYZE_METRICS", ":", "\n", "        ", "run", "=", "AnalyzeMetrics", "(", ")", "\n", "run", ".", "prepare_analysis", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.meta_nn.MetricDataset.__init__": [[7, 11], ["torch.utils.data.Dataset.__init__", "data[].squeeze", "data[].squeeze"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "super", "(", "MetricDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "self", ".", "targets", "=", "data", "[", "1", "]", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.meta_nn.MetricDataset.__getitem__": [[12, 16], ["torch.from_numpy().float().flatten", "torch.from_numpy().float().flatten", "torch.from_numpy().float().flatten", "torch.from_numpy().float().flatten", "torch.tensor().float().flatten", "torch.tensor().float().flatten", "torch.tensor().float().flatten", "torch.tensor().float().flatten", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "(", "\n", "torch", ".", "from_numpy", "(", "self", ".", "data", "[", "index", "]", ")", ".", "float", "(", ")", ".", "flatten", "(", ")", ",", "\n", "torch", ".", "tensor", "(", "self", ".", "targets", "[", "index", "]", ")", ".", "float", "(", ")", ".", "flatten", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.meta_nn.MetricDataset.__len__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.meta_nn.MetaNN.__init__": [[23, 38], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ")", ":", "\n", "        ", "super", "(", "MetaNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_size", ",", "50", ")", ",", "\n", "self", ".", "act", ",", "\n", "nn", ".", "Linear", "(", "50", ",", "40", ")", ",", "\n", "self", ".", "act", ",", "\n", "nn", ".", "Linear", "(", "40", ",", "30", ")", ",", "\n", "self", ".", "act", ",", "\n", "nn", ".", "Linear", "(", "30", ",", "20", ")", ",", "\n", "self", ".", "act", ",", "\n", "nn", ".", "Linear", "(", "20", ",", "10", ")", ",", "\n", "self", ".", "act", ",", "\n", "nn", ".", "Linear", "(", "10", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.meta_nn.MetaNN.forward": [[40, 42], ["meta_nn.MetaNN.layers().view", "meta_nn.MetaNN.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.regression_fit_and_predict": [[17, 23], ["sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "numpy.clip", "numpy.clip", "linear_model.LinearRegression.predict", "linear_model.LinearRegression.predict"], "function", ["None"], ["def", "regression_fit_and_predict", "(", "x_train", ",", "y_train", ",", "x_test", ")", ":", "\n", "    ", "model", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "model", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "y_test_pred", "=", "np", ".", "clip", "(", "model", ".", "predict", "(", "x_test", ")", ",", "0", ",", "1", ")", "\n", "y_train_pred", "=", "np", ".", "clip", "(", "model", ".", "predict", "(", "x_train", ")", ",", "0", ",", "1", ")", "\n", "return", "y_test_pred", ",", "y_train_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.classification_l1_fit_and_predict": [[25, 34], ["linear_model.LogisticRegression.fit", "linear_model.LogisticRegression.predict_proba", "linear_model.LogisticRegression.predict_proba", "sklearn.linear_model.LogisticRegression", "numpy.asarray"], "function", ["None"], ["", "def", "classification_l1_fit_and_predict", "(", "x_train", ",", "y_train", ",", "lambdas", ",", "x_test", ")", ":", "\n", "    ", "if", "CONFIG", ".", "META_MODEL_TYPE", "==", "\"linear\"", ":", "\n", "        ", "model", "=", "linear_model", ".", "LogisticRegression", "(", "\n", "C", "=", "lambdas", ",", "penalty", "=", "\"l1\"", ",", "solver", "=", "\"saga\"", ",", "max_iter", "=", "1000", ",", "tol", "=", "1e-3", "\n", ")", "\n", "", "model", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "y_test_pred", "=", "model", ".", "predict_proba", "(", "x_test", ")", "\n", "y_train_pred", "=", "model", ".", "predict_proba", "(", "x_train", ")", "\n", "return", "y_test_pred", ",", "y_train_pred", ",", "np", ".", "asarray", "(", "model", ".", "coef_", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.classification_fit_and_predict": [[36, 50], ["linear_model.LogisticRegression.fit", "linear_model.LogisticRegression.predict_proba", "linear_model.LogisticRegression.predict_proba", "sklearn.linear_model.LogisticRegression", "ValueError"], "function", ["None"], ["", "def", "classification_fit_and_predict", "(", "x_train", ",", "y_train", ",", "x_test", ")", ":", "\n", "    ", "if", "CONFIG", ".", "META_MODEL_TYPE", "==", "\"linear\"", ":", "\n", "        ", "model", "=", "linear_model", ".", "LogisticRegression", "(", "solver", "=", "\"saga\"", ",", "max_iter", "=", "1000", ",", "tol", "=", "1e-3", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"meta segmentation model '{}' not supported by this function.\"", ".", "format", "(", "\n", "CONFIG", ".", "META_MODEL_TYPE", "\n", ")", "\n", ")", "\n", "", "model", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "y_test_pred", "=", "model", ".", "predict_proba", "(", "x_test", ")", "\n", "y_train_pred", "=", "model", ".", "predict_proba", "(", "x_train", ")", "\n", "\n", "return", "y_test_pred", ",", "y_train_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.meta_nn_predict": [[52, 66], ["net.load_state_dict", "net.eval", "torch.cat().squeeze().numpy", "torch.no_grad", "torch.split", "torch.load", "torch.from_numpy().float", "b.cuda.cuda", "out.append", "torch.cat().squeeze", "getattr", "torch.sigmoid", "importlib.import_module", "torch.from_numpy", "net().data.cpu", "torch.cat", "net"], "function", ["None"], ["", "def", "meta_nn_predict", "(", "pretrained_model_path", ",", "x_test", ",", "gpu", "=", "0", ",", "batch_size", "=", "64", ")", ":", "\n", "    ", "net", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "meta_models", "[", "CONFIG", ".", "META_MODEL_NAME", "]", ".", "module_name", ")", ",", "\n", "meta_models", "[", "CONFIG", ".", "META_MODEL_NAME", "]", ".", "class_name", ",", "\n", ")", "(", "x_test", ".", "shape", "[", "1", "]", ",", "**", "meta_models", "[", "CONFIG", ".", "META_MODEL_NAME", "]", ".", "kwargs", ")", ".", "cuda", "(", "gpu", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained_model_path", ")", "[", "\"state_dict\"", "]", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "b", "in", "torch", ".", "split", "(", "torch", ".", "from_numpy", "(", "x_test", ")", ".", "float", "(", ")", ",", "batch_size", ")", ":", "\n", "            ", "b", "=", "b", ".", "cuda", "(", "gpu", ")", "\n", "out", ".", "append", "(", "torch", ".", "sigmoid", "(", "net", "(", "b", ")", ".", "data", ".", "cpu", "(", ")", ")", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "out", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.compute_correlations": [[68, 75], ["pandas.DataFrame", "df_full.copy().drop.copy().drop", "df_full.copy().drop.copy", "df_full.copy().drop.copy", "df_full.copy().drop.copy", "df_full[].nonzero"], "function", ["None"], ["", "def", "compute_correlations", "(", "metrics", ")", ":", "\n", "    ", "pd", ".", "options", ".", "display", ".", "float_format", "=", "\"{:,.5f}\"", ".", "format", "\n", "df_full", "=", "pd", ".", "DataFrame", "(", "data", "=", "metrics", ")", "\n", "df_full", "=", "df_full", ".", "copy", "(", ")", ".", "drop", "(", "[", "\"class\"", ",", "\"iou0\"", "]", ",", "axis", "=", "1", ")", "\n", "df_all", "=", "df_full", ".", "copy", "(", ")", "\n", "df_full", "=", "df_full", ".", "copy", "(", ")", ".", "loc", "[", "df_full", "[", "\"S_in\"", "]", ".", "nonzero", "(", ")", "[", "0", "]", "]", "\n", "return", "df_all", ",", "df_full", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.compute_metrics_from_heatmap": [[77, 86], ["numpy.count_nonzero", "numpy.count_nonzero", "numpy.sum", "numpy.sum", "numpy.sum", "abs"], "function", ["None"], ["", "def", "compute_metrics_from_heatmap", "(", "heatmap", ",", "components", ",", "comp_id", ")", ":", "\n", "    ", "n_in", "=", "np", ".", "count_nonzero", "(", "components", "==", "comp_id", ")", "\n", "n_bd", "=", "np", ".", "count_nonzero", "(", "components", "==", "-", "comp_id", ")", "\n", "value", "=", "np", ".", "sum", "(", "heatmap", "[", "abs", "(", "components", ")", "==", "comp_id", "]", ")", "/", "(", "n_in", "+", "n_bd", ")", "\n", "value_in", "=", "np", ".", "sum", "(", "heatmap", "[", "components", "==", "comp_id", "]", ")", "/", "n_in", "if", "n_in", ">", "0", "else", "0", "\n", "value_bd", "=", "np", ".", "sum", "(", "heatmap", "[", "components", "==", "-", "comp_id", "]", ")", "/", "n_bd", "\n", "value_rel", "=", "value", "*", "(", "n_in", "+", "n_bd", ")", "/", "n_bd", "\n", "value_rel_in", "=", "value_in", "*", "n_in", "/", "n_bd", "\n", "return", "[", "value", ",", "value_in", ",", "value_bd", ",", "value_rel", ",", "value_rel_in", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.filtering.QuantileFilter.__init__": [[7, 29], ["logging.getLogger", "numpy.quantile"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "quantile", ",", "lower", "=", "False", ",", "values", "=", "None", ")", ":", "\n", "        ", "\"\"\"When called returns a boolean array that can be used to filter an array.\n\n        Bool values are calculated based on the specified quantile. If 'values' is not\n        None, the quantile is calculated based on these. Otherwise the quantile is\n        calculated on the fly in the call method.\n\n        Args:\n            quantile (float): Quantile value to use for filtering the ious. Should be\n                in the interval (0,1)\n            lower (bool): If True takes the quantile from the lower end of the\n                distribution. Else from the upper end. Default: False\n            values (numpy array): Values to compute the quantile from.\n        \"\"\"", "\n", "self", ".", "quantile", "=", "quantile", "\n", "self", ".", "lower", "=", "lower", "\n", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "__name__", "+", "\".QuantileFilter\"", ")", "\n", "\n", "if", "values", "is", "not", "None", ":", "\n", "            ", "self", ".", "q", "=", "np", ".", "quantile", "(", "values", ",", "self", ".", "quantile", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "q", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.filtering.QuantileFilter.__call__": [[30, 37], ["filtering.QuantileFilter.log.debug", "numpy.quantile"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "log", ".", "debug", "(", "\"Applying QuantileFilter\"", ")", "\n", "if", "self", ".", "q", "is", "None", ":", "\n", "            ", "q", "=", "np", ".", "quantile", "(", "values", ",", "self", ".", "quantile", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "self", ".", "q", "\n", "", "return", "values", "<=", "q", "if", "self", ".", "lower", "else", "values", ">=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.filtering.PredFilter.__init__": [[40, 51], ["logging.getLogger"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "valid_classes", ")", ":", "\n", "        ", "\"\"\"When called returns a boolean array that can be used to filter an array.\n\n        Bool values are calculated based on the specified valid classes.\n\n        Args:\n            valid_classes (sequence of ints): Sequence of classes that are used\n                for filtering.\n        \"\"\"", "\n", "self", ".", "valid_classes", "=", "valid_classes", "\n", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "__name__", "+", "\".PredFilter\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.filtering.PredFilter.__call__": [[52, 55], ["filtering.PredFilter.log.debug", "numpy.isin"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pred", ")", ":", "\n", "        ", "self", ".", "log", ".", "debug", "(", "\"Applying PredFilter\"", ")", "\n", "return", "np", ".", "isin", "(", "pred", ",", "self", ".", "valid_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.filtering.ValueFilter.__init__": [[58, 62], ["logging.getLogger"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ",", "lower", "=", "True", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "self", ".", "lower", "=", "lower", "\n", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "__name__", "+", "\".ValueFilter\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.filtering.ValueFilter.__call__": [[63, 66], ["filtering.ValueFilter.log.debug"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "log", ".", "debug", "(", "\"Applying ValueFilter\"", ")", "\n", "return", "values", "<", "self", ".", "value", "if", "self", ".", "lower", "else", "values", ">=", "self", ".", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.ComputeMetrics.__init__": [[64, 93], ["len", "isinstance", "os.listdir", "hasattr", "src.MetaSeg.functions.in_out.get_indices", "isinstance", "ValueError", "hasattr", "src.MetaSeg.functions.in_out.get_indices", "src.MetaSeg.functions.in_out.get_indices", "type"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_cores", "=", "1", ",", "num_imgs", "=", "len", "(", "os", ".", "listdir", "(", "CONFIG", ".", "INPUT_DIR", ")", ")", ",", "rewrite", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"\n        object initialization\n        :param num_cores: (int) number of cores used for parallelization\n        :param num_imgs:  (int) number of images to be processed\n        :param rewrite:   (boolean) overwrite existing files if True\n        \"\"\"", "\n", "self", ".", "num_cores", "=", "(", "\n", "num_cores", "if", "not", "hasattr", "(", "CONFIG", ",", "\"NUM_CORES\"", ")", "else", "CONFIG", ".", "NUM_CORES", "\n", ")", "\n", "self", ".", "rewrite", "=", "rewrite", "\n", "if", "isinstance", "(", "num_imgs", ",", "int", ")", ":", "\n", "            ", "num_imgs", "=", "(", "\n", "get_indices", "(", "CONFIG", ".", "INPUT_DIR", ")", "\n", "if", "num_imgs", "==", "0", "\n", "else", "get_indices", "(", "CONFIG", ".", "INPUT_DIR", ")", "[", ":", "num_imgs", "]", "\n", ")", "\n", "", "elif", "not", "isinstance", "(", "num_imgs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"num_imgs should be of type int, list or tuple but received {}\"", ".", "format", "(", "\n", "type", "(", "num_imgs", ")", "\n", ")", "\n", ")", "\n", "", "self", ".", "num_imgs", "=", "(", "\n", "num_imgs", "\n", "if", "not", "hasattr", "(", "CONFIG", ",", "\"NUM_IMAGES\"", ")", "\n", "else", "get_indices", "(", "CONFIG", ".", "INPUT_DIR", ")", "[", ":", "CONFIG", ".", "NUM_IMAGES", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.ComputeMetrics.compute_metrics_per_image": [[95, 109], ["print", "multiprocessing.Pool", "p.map", "functools.partial"], "methods", ["None"], ["", "def", "compute_metrics_per_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        perform metrics computation\n        \"\"\"", "\n", "print", "(", "\"Calculating metrics for '{}'\"", ".", "format", "(", "CONFIG", ".", "DATASET", ".", "name", ")", ")", "\n", "with", "Pool", "(", "self", ".", "num_cores", ")", "as", "p", ":", "\n", "            ", "p", ".", "map", "(", "\n", "partial", "(", "\n", "self", ".", "compute_metrics_i", ",", "\n", "input_dir", "=", "CONFIG", ".", "INPUT_DIR", ",", "\n", "metrics_dir", "=", "CONFIG", ".", "METRICS_DIR", ",", "\n", "components_dir", "=", "CONFIG", ".", "COMPONENTS_DIR", ",", "\n", ")", ",", "\n", "self", ".", "num_imgs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.ComputeMetrics.compute_metrics_i": [[111, 126], ["os.path.isfile", "time.time", "src.MetaSeg.functions.in_out.probs_gt_load", "src.MetaSeg.functions.metrics.compute_metrics_components", "src.MetaSeg.functions.in_out.metrics_dump", "src.MetaSeg.functions.in_out.components_dump", "print", "src.MetaSeg.functions.in_out.get_save_path_input_i", "round", "time.time"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_dump", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_dump", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_input_i"], ["", "", "def", "compute_metrics_i", "(", "self", ",", "i", ",", "input_dir", ",", "metrics_dir", ",", "components_dir", ")", ":", "\n", "        ", "\"\"\"\n        perform metrics computation for one image\n        :param i: (int) id of the image to be processed\n        \"\"\"", "\n", "if", "(", "\n", "os", ".", "path", ".", "isfile", "(", "get_save_path_input_i", "(", "i", ",", "input_dir", "=", "input_dir", ")", ")", "\n", "and", "self", ".", "rewrite", "\n", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "probs", ",", "gt", ",", "_", "=", "probs_gt_load", "(", "i", ",", "input_dir", "=", "input_dir", ")", "\n", "metrics", ",", "components", "=", "compute_metrics_components", "(", "probs", ",", "gt", ")", "\n", "metrics_dump", "(", "metrics", ",", "i", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "components_dump", "(", "components", ",", "i", ",", "components_dir", "=", "components_dir", ")", "\n", "print", "(", "\"image {} processed in {}s\"", ".", "format", "(", "i", ",", "round", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.ComputeMetrics.add_heatmaps_as_metric": [[127, 137], ["print", "multiprocessing.Pool", "p.starmap"], "methods", ["None"], ["", "", "def", "add_heatmaps_as_metric", "(", "self", ",", "heat_dir", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        add another dispersion heatmap as metric/input for meta model\n        :param heat_dir:  (str) directory with heatmaps as numpy arrays\n        :param key:       (str) new key to access added metric\n        \"\"\"", "\n", "print", "(", "\"Add {} to metrics\"", ".", "format", "(", "key", ")", ")", "\n", "p_args", "=", "[", "(", "heat_dir", ",", "key", ",", "k", ")", "for", "k", "in", "self", ".", "num_imgs", "]", "\n", "with", "Pool", "(", "self", ".", "num_cores", ")", "as", "p", ":", "\n", "            ", "p", ".", "starmap", "(", "self", ".", "add_heatmap_as_metric_i", ",", "p_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.ComputeMetrics.add_heatmap_as_metric_i": [[138, 159], ["src.MetaSeg.functions.in_out.probs_gt_load", "numpy.load", "src.MetaSeg.functions.in_out.metrics_load", "src.MetaSeg.functions.in_out.components_load", "range", "src.MetaSeg.functions.in_out.metrics_load.update", "src.MetaSeg.functions.in_out.metrics_dump", "src.MetaSeg.functions.calculate.compute_metrics_from_heatmap", "enumerate", "os.path.basename", "abs", "heat_metric[].append", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_dump", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.compute_metrics_from_heatmap"], ["", "", "@", "staticmethod", "\n", "def", "add_heatmap_as_metric_i", "(", "heat_dir", ",", "key", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        derive aggregated metrics per image and add to metrics dictionary\n        :param heat_dir:  (str) directory with heatmaps as numpy arrays\n        :param key:       (str) new key to access added metric\n        :param i:         (int) id of the image to be processed\n        \"\"\"", "\n", "_", ",", "_", ",", "path", "=", "probs_gt_load", "(", "i", ")", "\n", "heat_name", "=", "os", ".", "path", ".", "basename", "(", "path", ")", "[", ":", "-", "4", "]", "+", "\".npy\"", "\n", "heatmap", "=", "np", ".", "load", "(", "heat_dir", "+", "heat_name", ")", "\n", "metrics", "=", "metrics_load", "(", "i", ",", "metrics_dir", "=", "CONFIG", ".", "METRICS_DIR", ")", "\n", "components", "=", "components_load", "(", "i", ",", "components_dir", "=", "CONFIG", ".", "COMPONENTS_DIR", ")", "\n", "keys", "=", "[", "key", ",", "key", "+", "\"_in\"", ",", "key", "+", "\"_bd\"", ",", "key", "+", "\"_rel\"", ",", "key", "+", "\"_rel_in\"", "]", "\n", "heat_metric", "=", "{", "k", ":", "[", "]", "for", "k", "in", "keys", "}", "\n", "for", "comp_id", "in", "range", "(", "1", ",", "abs", "(", "np", ".", "min", "(", "components", ")", ")", "+", "1", ")", ":", "\n", "            ", "values", "=", "compute_metrics_from_heatmap", "(", "heatmap", ",", "components", ",", "comp_id", ")", "\n", "for", "j", ",", "k", "in", "enumerate", "(", "keys", ")", ":", "\n", "                ", "heat_metric", "[", "k", "]", ".", "append", "(", "values", "[", "j", "]", ")", "\n", "", "", "metrics", ".", "update", "(", "heat_metric", ")", "\n", "metrics_dump", "(", "metrics", ",", "i", ",", "metrics_dir", "=", "CONFIG", ".", "METRICS_DIR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.VisualizeMetaPrediction.__init__": [[162, 190], ["len", "isinstance", "os.listdir", "hasattr", "src.MetaSeg.functions.in_out.get_indices", "isinstance", "ValueError", "hasattr", "src.MetaSeg.functions.in_out.get_indices", "src.MetaSeg.functions.in_out.get_indices", "type"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_cores", "=", "1", ",", "num_imgs", "=", "len", "(", "os", ".", "listdir", "(", "CONFIG", ".", "INPUT_DIR", ")", ")", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        object initialization\n        :param num_cores: (int) number of cores used for parallelization\n        :param num_imgs:  (int) number of images to be processed\n        \"\"\"", "\n", "self", ".", "num_cores", "=", "(", "\n", "num_cores", "if", "not", "hasattr", "(", "CONFIG", ",", "\"NUM_CORES\"", ")", "else", "CONFIG", ".", "NUM_CORES", "\n", ")", "\n", "\n", "if", "isinstance", "(", "num_imgs", ",", "int", ")", ":", "\n", "            ", "num_imgs", "=", "(", "\n", "get_indices", "(", "CONFIG", ".", "INPUT_DIR", ")", "\n", "if", "num_imgs", "==", "0", "\n", "else", "get_indices", "(", "CONFIG", ".", "INPUT_DIR", ")", "[", ":", "num_imgs", "]", "\n", ")", "\n", "", "elif", "not", "isinstance", "(", "num_imgs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"num_imgs should be of type int, list or tuple but received {}\"", ".", "format", "(", "\n", "type", "(", "num_imgs", ")", "\n", ")", "\n", ")", "\n", "", "self", ".", "num_imgs", "=", "(", "\n", "num_imgs", "\n", "if", "not", "hasattr", "(", "CONFIG", ",", "\"NUM_IMAGES\"", ")", "\n", "else", "get_indices", "(", "CONFIG", ".", "INPUT_DIR", ")", "[", ":", "CONFIG", ".", "NUM_IMAGES", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.VisualizeMetaPrediction.visualize_regression_per_image": [[192, 231], ["print", "src.MetaSeg.functions.helper.concatenate_metrics", "src.MetaSeg.functions.helper.metrics_to_dataset", "numpy.concatenate", "print", "numpy.max", "src.MetaSeg.functions.calculate.meta_nn_predict", "multiprocessing.Pool", "p.starmap", "src.MetaSeg.functions.calculate.regression_fit_and_predict", "ValueError", "sklearn.metrics.r2_score", "enumerate"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.concatenate_metrics", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_dataset", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.meta_nn_predict", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.regression_fit_and_predict"], ["", "def", "visualize_regression_per_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        perform metrics visualization\n        \"\"\"", "\n", "print", "(", "\"Visualization for {} running\"", ".", "format", "(", "CONFIG", ".", "DATASET", ".", "name", ")", ")", "\n", "metrics", ",", "start", "=", "concatenate_metrics", "(", "\n", "self", ".", "num_imgs", ",", "save", "=", "False", ",", "metrics_dir", "=", "CONFIG", ".", "METRICS_DIR", "\n", ")", "\n", "nclasses", "=", "np", ".", "max", "(", "metrics", "[", "\"class\"", "]", ")", "+", "1", "\n", "\n", "(", "\n", "xa", ",", "\n", "classes", ",", "\n", "ya", ",", "\n", "_", ",", "\n", "_", ",", "\n", "_", ",", "\n", "xa_mean", ",", "\n", "xa_std", ",", "\n", "classes_mean", ",", "\n", "classes_std", ",", "\n", ")", "=", "metrics_to_dataset", "(", "metrics", ",", "nclasses", ",", "non_empty", "=", "False", ")", "\n", "xa", "=", "np", ".", "concatenate", "(", "(", "xa", ",", "classes", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "CONFIG", ".", "META_MODEL_TYPE", "==", "\"neural\"", ":", "\n", "            ", "ya_pred", "=", "meta_nn_predict", "(", "\n", "meta_models", "[", "CONFIG", ".", "META_MODEL_NAME", "]", ".", "model_weights", ",", "xa", ",", "CONFIG", ".", "GPU_ID", "\n", ")", "\n", "", "elif", "CONFIG", ".", "META_MODEL_TYPE", "==", "\"linear\"", ":", "\n", "            ", "ya_pred", ",", "_", "=", "regression_fit_and_predict", "(", "xa", ",", "ya", ",", "xa", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown meta model '{}'\"", ".", "format", "(", "CONFIG", ".", "META_MODEL_TYPE", ")", ")", "\n", "", "print", "(", "\"Model R2 score: {:.2%}\\n\"", ".", "format", "(", "r2_score", "(", "ya", ",", "ya_pred", ")", ")", ")", "\n", "p_args", "=", "[", "\n", "(", "ya_pred", "[", "start", "[", "i", "]", ":", "start", "[", "i", "+", "1", "]", "]", ",", "j", ")", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "num_imgs", ")", "\n", "]", "\n", "\n", "with", "Pool", "(", "self", ".", "num_cores", ")", "as", "p", ":", "\n", "            ", "p", ".", "starmap", "(", "visualize_regression_prediction_i", ",", "p_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.__init__": [[234, 269], ["len", "isinstance", "os.listdir", "isinstance", "list", "hasattr", "list", "list", "ValueError", "hasattr", "range", "range", "range", "len", "type", "os.listdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_cores", "=", "1", ",", "\n", "num_imgs", "=", "len", "(", "os", ".", "listdir", "(", "CONFIG", ".", "INPUT_DIR", ")", ")", ",", "\n", "n_av", "=", "CONFIG", ".", "NUM_AVERAGES", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        object initialization\n        :param num_cores: (int) number of cores used for parallelization\n        :param num_imgs:  (int) number of images to be processed\n        :param n_av:      (int) number of model fitting runs with random data splits\n        \"\"\"", "\n", "self", ".", "num_cores", "=", "(", "\n", "num_cores", "if", "not", "hasattr", "(", "CONFIG", ",", "\"NUM_CORES\"", ")", "else", "CONFIG", ".", "NUM_CORES", "\n", ")", "\n", "if", "isinstance", "(", "num_imgs", ",", "int", ")", ":", "\n", "            ", "num_imgs", "=", "(", "\n", "list", "(", "range", "(", "len", "(", "os", ".", "listdir", "(", "CONFIG", ".", "INPUT_DIR", ")", ")", ")", ")", "\n", "if", "num_imgs", "==", "0", "\n", "else", "list", "(", "range", "(", "num_imgs", ")", ")", "\n", ")", "\n", "", "elif", "isinstance", "(", "num_imgs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"num_imgs should be of type int, list or tuple but received {}\"", ".", "format", "(", "\n", "type", "(", "num_imgs", ")", "\n", ")", "\n", ")", "\n", "", "self", ".", "num_imgs", "=", "(", "\n", "num_imgs", "\n", "if", "not", "hasattr", "(", "CONFIG", ",", "\"NUM_IMAGES\"", ")", "\n", "else", "list", "(", "range", "(", "CONFIG", ".", "NUM_IMAGES", ")", ")", "\n", ")", "\n", "self", ".", "n_av", "=", "n_av", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.prepare_analysis": [[270, 303], ["src.MetaSeg.functions.helper.concatenate_metrics", "src.MetaSeg.functions.helper.metrics_to_dataset", "numpy.concatenate", "src.MetaSeg.functions.helper.get_lambdas", "main_functions.AnalyzeMetrics.init_stats", "main_functions.AnalyzeMetrics.init_stats", "src.MetaSeg.functions.calculate.compute_correlations", "src.MetaSeg.functions.plot.plot_scatter", "src.MetaSeg.functions.helper.metrics_to_nparray", "print", "print", "main_functions.AnalyzeMetrics.merge_stats", "src.MetaSeg.functions.in_out.stats_dump", "src.MetaSeg.functions.plot.plot_classif", "numpy.max", "multiprocessing.Pool", "p.starmap", "range", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.concatenate_metrics", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_dataset", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.get_lambdas", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.init_stats", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.init_stats", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.compute_correlations", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_scatter", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_nparray", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.merge_stats", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.stats_dump", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_classif"], ["", "def", "prepare_analysis", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        prepare metrics analysis\n        create dataframes storing results of meta model per run\n        :return:\n        \"\"\"", "\n", "metrics", ",", "start", "=", "concatenate_metrics", "(", "self", ".", "num_imgs", ",", "save", "=", "False", ")", "\n", "nclasses", "=", "np", ".", "max", "(", "metrics", "[", "\"class\"", "]", ")", "+", "1", "\n", "\n", "xa", ",", "classes", ",", "ya", ",", "y0a", ",", "x_names", ",", "class_names", "=", "metrics_to_dataset", "(", "\n", "metrics", ",", "nclasses", "\n", ")", "\n", "xa", "=", "np", ".", "concatenate", "(", "(", "xa", ",", "classes", ")", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "X_names", "=", "x_names", "+", "class_names", "\n", "\n", "self", ".", "lambdas", "=", "get_lambdas", "(", "CONFIG", ".", "NUM_LASSO_LAMBDAS", ",", "min_pow", "=", "-", "4.2", ",", "max_pow", "=", "0.8", ")", "\n", "stats", "=", "self", ".", "init_stats", "(", ")", "\n", "single_run_stats", "=", "self", ".", "init_stats", "(", ")", "\n", "\n", "p_args", "=", "[", "(", "xa", ",", "ya", ",", "y0a", ",", "single_run_stats", ",", "run", ")", "for", "run", "in", "range", "(", "self", ".", "n_av", ")", "]", "\n", "with", "Pool", "(", "self", ".", "num_cores", ")", "as", "p", ":", "\n", "            ", "single_run_stats", "=", "p", ".", "starmap", "(", "self", ".", "fit_model_run", ",", "p_args", ")", "\n", "\n", "# single_run_stats = self.fit_model_run( Xa, ya, y0a, single_run_stats, 0 )", "\n", "", "df_all", ",", "df_full", "=", "compute_correlations", "(", "metrics", ")", "\n", "plot_scatter", "(", "df_full", ")", "\n", "y0a", "=", "metrics_to_nparray", "(", "metrics", ",", "[", "\"iou0\"", "]", ",", "normalize", "=", "False", ",", "non_empty", "=", "True", ")", "\n", "print", "(", "\"IoU=0: {} of {}\"", ".", "format", "(", "np", ".", "sum", "(", "y0a", "==", "1", ")", ",", "y0a", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"IoU>0: {} of {}\"", ".", "format", "(", "np", ".", "sum", "(", "y0a", "==", "0", ")", ",", "y0a", ".", "shape", "[", "0", "]", ")", ")", "\n", "stats", "=", "self", ".", "merge_stats", "(", "stats", ",", "single_run_stats", ")", "\n", "\n", "mean_stats", ",", "_", "=", "stats_dump", "(", "stats", ",", "df_all", ",", "y0a", ")", "\n", "plot_classif", "(", "stats", ",", "mean_stats", ",", "x_names", ",", "class_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.init_stats": [[304, 352], ["dict", "numpy.zeros", "len", "numpy.zeros", "numpy.ones", "len", "len", "len"], "methods", ["None"], ["", "def", "init_stats", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        initialize dataframe for storing results\n        \"\"\"", "\n", "stats", "=", "dict", "(", "{", "}", ")", "\n", "per_alphas_av_stats", "=", "[", "\n", "\"penalized_val_acc\"", ",", "\n", "\"penalized_val_auroc\"", ",", "\n", "\"penalized_train_acc\"", ",", "\n", "\"penalized_train_auroc\"", ",", "\n", "\"plain_val_acc\"", ",", "\n", "\"plain_val_auroc\"", ",", "\n", "\"plain_train_acc\"", ",", "\n", "\"plain_train_auroc\"", ",", "\n", "\"coefs\"", ",", "\n", "]", "\n", "per_av_stats", "=", "[", "\n", "\"entropy_val_acc\"", ",", "\n", "\"entropy_val_auroc\"", ",", "\n", "\"entropy_train_acc\"", ",", "\n", "\"entropy_train_auroc\"", ",", "\n", "\"regr_val_mse\"", ",", "\n", "\"regr_val_r2\"", ",", "\n", "\"regr_train_mse\"", ",", "\n", "\"regr_train_r2\"", ",", "\n", "\"entropy_regr_val_mse\"", ",", "\n", "\"entropy_regr_val_r2\"", ",", "\n", "\"entropy_regr_train_mse\"", ",", "\n", "\"entropy_regr_train_r2\"", ",", "\n", "\"iou0_found\"", ",", "\n", "\"iou0_not_found\"", ",", "\n", "\"not_iou0_found\"", ",", "\n", "\"not_iou0_not_found\"", ",", "\n", "]", "\n", "\n", "for", "s", "in", "per_alphas_av_stats", ":", "\n", "            ", "stats", "[", "s", "]", "=", "0.5", "*", "np", ".", "ones", "(", "(", "self", ".", "n_av", ",", "len", "(", "self", ".", "lambdas", ")", ")", ")", "\n", "\n", "", "for", "s", "in", "per_av_stats", ":", "\n", "            ", "stats", "[", "s", "]", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_av", ",", ")", ")", "\n", "\n", "", "stats", "[", "\"coefs\"", "]", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_av", ",", "len", "(", "self", ".", "lambdas", ")", ",", "len", "(", "self", ".", "X_names", ")", ")", ")", "\n", "stats", "[", "\"lambdas\"", "]", "=", "self", ".", "lambdas", "\n", "stats", "[", "\"n_av\"", "]", "=", "self", ".", "n_av", "\n", "stats", "[", "\"n_metrics\"", "]", "=", "len", "(", "self", ".", "X_names", ")", "\n", "stats", "[", "\"metric_names\"", "]", "=", "self", ".", "X_names", "\n", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.fit_model_run": [[353, 521], ["print", "main_functions.AnalyzeMetrics.split_data_randomly", "numpy.zeros", "range", "numpy.argmax", "numpy.argmax", "range", "src.MetaSeg.functions.calculate.classification_fit_and_predict", "numpy.mean", "numpy.mean", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "xa_val.copy", "ya_val.copy", "xa_train.copy", "ya_train.copy", "src.MetaSeg.functions.calculate.regression_fit_and_predict", "numpy.sqrt", "sklearn.metrics.r2_score", "numpy.sqrt", "sklearn.metrics.r2_score", "src.MetaSeg.functions.calculate.regression_fit_and_predict", "numpy.sqrt", "sklearn.metrics.r2_score", "numpy.sqrt", "sklearn.metrics.r2_score", "numpy.asarray", "len", "src.MetaSeg.functions.calculate.classification_l1_fit_and_predict", "numpy.mean", "numpy.mean", "print", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "len", "xa_train[].reshape", "xa_val[].reshape", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "sklearn.metrics.mean_squared_error", "sklearn.metrics.mean_squared_error", "x2_train[].reshape", "x2_val[].reshape", "sklearn.metrics.mean_squared_error", "sklearn.metrics.mean_squared_error", "src.MetaSeg.functions.plot.plot_roc_curve", "src.MetaSeg.functions.plot.plot_regression", "src.MetaSeg.functions.plot.plot_classif_hist", "len", "numpy.sum", "src.MetaSeg.functions.calculate.classification_fit_and_predict", "numpy.mean", "numpy.mean", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "numpy.argmax", "numpy.argmax", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.argmax", "numpy.argmax", "y0a_val_pred.copy", "y0a_train_pred.copy", "numpy.abs", "numpy.argmax", "numpy.argmax", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.split_data_randomly", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.classification_fit_and_predict", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.regression_fit_and_predict", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.regression_fit_and_predict", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.classification_l1_fit_and_predict", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_roc_curve", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_regression", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_classif_hist", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.calculate.classification_fit_and_predict"], ["", "def", "fit_model_run", "(", "self", ",", "xa", ",", "ya", ",", "y0a", ",", "single_run_stats", ",", "run", ")", ":", "\n", "        ", "\"\"\"\n        fit meta model for one random data split and store results in dataframe\n        :param xa:  (np array) dispersion metrics as input for meta model\n        :param ya:  (np array) meta regression label of segment, i.e. IoU value\n        :param y0a: (np array) meta classification label of segment, i.e. intersection\n            with ground truth or not\n        :param single_run_stats:  (dict) empty dataframe where results are stored into\n        :param run: (int) run id\n        :return: dict dataframe with stored results of meta model\n        \"\"\"", "\n", "print", "(", "\"Run {}\"", ".", "format", "(", "run", ")", ")", "\n", "(", "\n", "xa_val", ",", "\n", "ya_val", ",", "\n", "y0a_val", ",", "\n", "xa_train", ",", "\n", "ya_train", ",", "\n", "y0a_train", ",", "\n", ")", "=", "self", ".", "split_data_randomly", "(", "xa", ",", "ya", ",", "y0a", ",", "seed", "=", "run", ")", "\n", "coefs", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "lambdas", ")", ",", "xa", ".", "shape", "[", "1", "]", ")", ")", "\n", "max_acc", "=", "0", "\n", "best_l1_results", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lambdas", ")", ")", ":", "\n", "\n", "            ", "y0a_val_pred", ",", "y0a_train_pred", ",", "lm_coefs", "=", "classification_l1_fit_and_predict", "(", "\n", "xa_train", ",", "y0a_train", ",", "self", ".", "lambdas", "[", "i", "]", ",", "xa_val", "\n", ")", "\n", "\n", "single_run_stats", "[", "\"penalized_val_acc\"", "]", "[", "run", ",", "i", "]", "=", "np", ".", "mean", "(", "\n", "np", ".", "argmax", "(", "y0a_val_pred", ",", "axis", "=", "-", "1", ")", "==", "y0a_val", "\n", ")", "\n", "single_run_stats", "[", "\"penalized_train_acc\"", "]", "[", "run", ",", "i", "]", "=", "np", ".", "mean", "(", "\n", "np", ".", "argmax", "(", "y0a_train_pred", ",", "axis", "=", "-", "1", ")", "==", "y0a_train", "\n", ")", "\n", "\n", "if", "single_run_stats", "[", "\"penalized_val_acc\"", "]", "[", "run", ",", "i", "]", ">", "max_acc", ":", "\n", "                ", "max_acc", "=", "single_run_stats", "[", "\"penalized_val_acc\"", "]", "[", "run", ",", "i", "]", "\n", "best_l1_results", "=", "[", "y0a_val_pred", ".", "copy", "(", ")", ",", "y0a_train_pred", ".", "copy", "(", ")", "]", "\n", "\n", "", "print", "(", "\n", "\"Step {}, alpha={:.2E}, val. acc.: {:.2%}\"", ".", "format", "(", "\n", "i", ",", "self", ".", "lambdas", "[", "i", "]", ",", "single_run_stats", "[", "\"penalized_val_acc\"", "]", "[", "run", ",", "i", "]", "\n", ")", "\n", ")", "\n", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y0a_val", ",", "y0a_val_pred", "[", ":", ",", "1", "]", ")", "\n", "single_run_stats", "[", "\"penalized_val_auroc\"", "]", "[", "run", ",", "i", "]", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y0a_train", ",", "y0a_train_pred", "[", ":", ",", "1", "]", ")", "\n", "single_run_stats", "[", "\"penalized_train_auroc\"", "]", "[", "run", ",", "i", "]", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "coefs", "[", "i", "]", "=", "lm_coefs", "\n", "\n", "if", "np", ".", "sum", "(", "np", ".", "abs", "(", "coefs", "[", "i", "]", ")", ">", "1e-6", ")", ">", "0", ":", "\n", "                ", "y0a_val_pred", ",", "y0a_train_pred", "=", "classification_fit_and_predict", "(", "\n", "xa_train", "[", ":", ",", "np", ".", "abs", "(", "coefs", "[", "i", "]", ")", ">", "1e-6", "]", ",", "\n", "y0a_train", ",", "\n", "xa_val", "[", ":", ",", "np", ".", "abs", "(", "coefs", "[", "i", "]", ")", ">", "1e-6", "]", ",", "\n", ")", "\n", "\n", "single_run_stats", "[", "\"plain_val_acc\"", "]", "[", "run", ",", "i", "]", "=", "np", ".", "mean", "(", "\n", "np", ".", "argmax", "(", "y0a_val_pred", ",", "axis", "=", "-", "1", ")", "==", "y0a_val", "\n", ")", "\n", "single_run_stats", "[", "\"plain_train_acc\"", "]", "[", "run", ",", "i", "]", "=", "np", ".", "mean", "(", "\n", "np", ".", "argmax", "(", "y0a_train_pred", ",", "axis", "=", "-", "1", ")", "==", "y0a_train", "\n", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y0a_val", ",", "y0a_val_pred", "[", ":", ",", "1", "]", ")", "\n", "single_run_stats", "[", "\"plain_val_auroc\"", "]", "[", "run", ",", "i", "]", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y0a_train", ",", "y0a_train_pred", "[", ":", ",", "1", "]", ")", "\n", "single_run_stats", "[", "\"plain_train_auroc\"", "]", "[", "run", ",", "i", "]", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "", "else", ":", "\n", "                ", "single_run_stats", "[", "\"plain_val_acc\"", "]", "[", "run", ",", "i", "]", "=", "single_run_stats", "[", "\n", "\"penalized_val_acc\"", "\n", "]", "[", "run", ",", "i", "]", "\n", "single_run_stats", "[", "\"plain_train_acc\"", "]", "[", "run", ",", "i", "]", "=", "single_run_stats", "[", "\n", "\"penalized_train_acc\"", "\n", "]", "[", "run", ",", "i", "]", "\n", "\n", "single_run_stats", "[", "\"plain_val_auroc\"", "]", "[", "run", ",", "i", "]", "=", "single_run_stats", "[", "\n", "\"penalized_val_auroc\"", "\n", "]", "[", "run", ",", "i", "]", "\n", "single_run_stats", "[", "\"plain_train_auroc\"", "]", "[", "run", ",", "i", "]", "=", "single_run_stats", "[", "\n", "\"penalized_train_auroc\"", "\n", "]", "[", "run", ",", "i", "]", "\n", "\n", "", "", "ypred", "=", "np", ".", "argmax", "(", "best_l1_results", "[", "0", "]", ",", "axis", "=", "-", "1", ")", "\n", "ypred_t", "=", "np", ".", "argmax", "(", "best_l1_results", "[", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "e_ind", "=", "0", "\n", "for", "e_ind", "in", "range", "(", "len", "(", "self", ".", "X_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "X_names", "[", "e_ind", "]", "==", "\"E\"", ":", "\n", "                ", "break", "\n", "\n", "", "", "y0a_val_pred", ",", "y0a_train_pred", "=", "classification_fit_and_predict", "(", "\n", "xa_train", "[", ":", ",", "e_ind", "]", ".", "reshape", "(", "(", "xa_train", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "\n", "y0a_train", ",", "\n", "xa_val", "[", ":", ",", "e_ind", "]", ".", "reshape", "(", "(", "xa_val", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "single_run_stats", "[", "\"entropy_val_acc\"", "]", "[", "run", "]", "=", "np", ".", "mean", "(", "\n", "np", ".", "argmax", "(", "y0a_val_pred", ",", "axis", "=", "-", "1", ")", "==", "y0a_val", "\n", ")", "\n", "single_run_stats", "[", "\"entropy_train_acc\"", "]", "[", "run", "]", "=", "np", ".", "mean", "(", "\n", "np", ".", "argmax", "(", "y0a_val_pred", ",", "axis", "=", "-", "1", ")", "==", "y0a_val", "\n", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y0a_val", ",", "y0a_val_pred", "[", ":", ",", "1", "]", ")", "\n", "single_run_stats", "[", "\"entropy_val_auroc\"", "]", "[", "run", "]", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y0a_train", ",", "y0a_train_pred", "[", ":", ",", "1", "]", ")", "\n", "single_run_stats", "[", "\"entropy_train_auroc\"", "]", "[", "run", "]", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "\n", "single_run_stats", "[", "\"iou0_found\"", "]", "[", "run", "]", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "ypred", "==", "1", ",", "y0a_val", "==", "1", ")", "\n", ")", "+", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "ypred_t", "==", "1", ",", "y0a_train", "==", "1", ")", ")", "\n", "single_run_stats", "[", "\"iou0_not_found\"", "]", "[", "run", "]", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "ypred", "==", "0", ",", "y0a_val", "==", "1", ")", "\n", ")", "+", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "ypred_t", "==", "0", ",", "y0a_train", "==", "1", ")", ")", "\n", "single_run_stats", "[", "\"not_iou0_found\"", "]", "[", "run", "]", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "ypred", "==", "0", ",", "y0a_val", "==", "0", ")", "\n", ")", "+", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "ypred_t", "==", "0", ",", "y0a_train", "==", "0", ")", ")", "\n", "single_run_stats", "[", "\"not_iou0_not_found\"", "]", "[", "run", "]", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "ypred", "==", "1", ",", "y0a_val", "==", "0", ")", "\n", ")", "+", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "ypred_t", "==", "1", ",", "y0a_train", "==", "0", ")", ")", "\n", "\n", "x2_train", "=", "xa_val", ".", "copy", "(", ")", "\n", "y2_train", "=", "ya_val", ".", "copy", "(", ")", "\n", "x2_val", "=", "xa_train", ".", "copy", "(", ")", "\n", "y2_val", "=", "ya_train", ".", "copy", "(", ")", "\n", "\n", "y2_val_pred", ",", "y2_train_pred", "=", "regression_fit_and_predict", "(", "\n", "x2_train", ",", "y2_train", ",", "x2_val", "\n", ")", "\n", "\n", "single_run_stats", "[", "\"regr_val_mse\"", "]", "[", "run", "]", "=", "np", ".", "sqrt", "(", "\n", "mean_squared_error", "(", "y2_val", ",", "y2_val_pred", ")", "\n", ")", "\n", "single_run_stats", "[", "\"regr_val_r2\"", "]", "[", "run", "]", "=", "r2_score", "(", "y2_val", ",", "y2_val_pred", ")", "\n", "single_run_stats", "[", "\"regr_train_mse\"", "]", "[", "run", "]", "=", "np", ".", "sqrt", "(", "\n", "mean_squared_error", "(", "y2_train", ",", "y2_train_pred", ")", "\n", ")", "\n", "single_run_stats", "[", "\"regr_train_r2\"", "]", "[", "run", "]", "=", "r2_score", "(", "y2_train", ",", "y2_train_pred", ")", "\n", "\n", "y2e_val_pred", ",", "y2e_train_pred", "=", "regression_fit_and_predict", "(", "\n", "x2_train", "[", ":", ",", "e_ind", "]", ".", "reshape", "(", "(", "x2_train", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "\n", "y2_train", ",", "\n", "x2_val", "[", ":", ",", "e_ind", "]", ".", "reshape", "(", "(", "x2_val", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "single_run_stats", "[", "\"entropy_regr_val_mse\"", "]", "[", "run", "]", "=", "np", ".", "sqrt", "(", "\n", "mean_squared_error", "(", "y2_val", ",", "y2e_val_pred", ")", "\n", ")", "\n", "single_run_stats", "[", "\"entropy_regr_val_r2\"", "]", "[", "run", "]", "=", "r2_score", "(", "y2_val", ",", "y2e_val_pred", ")", "\n", "single_run_stats", "[", "\"entropy_regr_train_mse\"", "]", "[", "run", "]", "=", "np", ".", "sqrt", "(", "\n", "mean_squared_error", "(", "y2_train", ",", "y2e_train_pred", ")", "\n", ")", "\n", "single_run_stats", "[", "\"entropy_regr_train_r2\"", "]", "[", "run", "]", "=", "r2_score", "(", "\n", "y2_train", ",", "y2e_train_pred", "\n", ")", "\n", "\n", "single_run_stats", "[", "\"coefs\"", "]", "[", "run", "]", "=", "np", ".", "asarray", "(", "coefs", ")", "\n", "\n", "if", "run", "==", "0", ":", "\n", "            ", "plot_roc_curve", "(", "\n", "y0a_val", ",", "best_l1_results", "[", "0", "]", "[", ":", ",", "1", "]", ",", "CONFIG", ".", "RESULTS_DIR", "+", "\"roccurve.pdf\"", "\n", ")", "\n", "plot_regression", "(", "x2_val", ",", "y2_val", ",", "y2_val_pred", ",", "self", ".", "X_names", ")", "\n", "plot_classif_hist", "(", "ya_val", ",", "ypred", ")", "\n", "\n", "", "return", "single_run_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.split_data_randomly": [[522, 544], ["numpy.random.seed", "numpy.random.rand", "len", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "split_data_randomly", "(", "xa", ",", "ya", ",", "y0a", ",", "seed", ")", ":", "\n", "        ", "\"\"\"\n        create random data split 50/50 for training and validation\n        :param xa:  (np array) dispersion metrics\n        :param ya:  (np array) meta regression label\n        :param y0a: (np array) meta classification label\n        :param seed: (int) number used to initialize random generator\n        :return: splitted np arrays for training and validation\n        \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "val_mask", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "ya", ")", ")", "<", "3.0", "/", "6.0", "\n", "\n", "xa_val", "=", "xa", "[", "val_mask", "]", "\n", "ya_val", "=", "ya", "[", "val_mask", "]", "\n", "y0a_val", "=", "y0a", "[", "val_mask", "]", "\n", "\n", "xa_train", "=", "xa", "[", "np", ".", "logical_not", "(", "val_mask", ")", "]", "\n", "ya_train", "=", "ya", "[", "np", ".", "logical_not", "(", "val_mask", ")", "]", "\n", "y0a_train", "=", "y0a", "[", "np", ".", "logical_not", "(", "val_mask", ")", "]", "\n", "\n", "return", "xa_val", ",", "ya_val", ",", "y0a_val", ",", "xa_train", ",", "ya_train", ",", "y0a_train", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.main_functions.AnalyzeMetrics.merge_stats": [[545, 559], ["range"], "methods", ["None"], ["", "def", "merge_stats", "(", "self", ",", "stats", ",", "single_run_stats", ")", ":", "\n", "        ", "\"\"\"\n        combine results for every one single dataframe\n        :param stats: (dict) the single dataframe\n        :param single_run_stats: (dict) dataframe from one run, note: strange format\n            due to parallelization\n        :return: dict dataframe with stored results\n        \"\"\"", "\n", "for", "run", "in", "range", "(", "self", ".", "n_av", ")", ":", "\n", "            ", "for", "s", "in", "stats", ":", "\n", "                ", "if", "s", "not", "in", "[", "\"alphas\"", ",", "\"n_av\"", ",", "\"n_metrics\"", ",", "\"metric_names\"", "]", ":", "\n", "                    ", "stats", "[", "s", "]", "[", "run", "]", "=", "single_run_stats", "[", "run", "]", "[", "s", "]", "[", "run", "]", "\n", "\n", "", "", "", "return", "stats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.dataset.MetaSegData.__init__": [[11, 62], ["torch.utils.data.Dataset.__init__", "os.listdir", "os.path.join", "os.path.isfile", "all", "os.path.join", "os.path.splitext", "os.path.exists", "os.path.join", "range", "len", "str", "dataset.MetaSegData._index_of_file"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.dataset.MetaSegData._index_of_file"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", "=", "\"/data/poberdie/metaseg\"", ",", "\n", "dataset", "=", "\"cityscapes\"", ",", "\n", "model_name", "=", "\"deeplabv3plus\"", ",", "\n", "loading", "=", "(", "\"input\"", ",", "\"metrics\"", ",", "\"components\"", ")", ",", "\n", "class_dtype", "=", "\"probs\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "loading", "=", "loading", "\n", "self", ".", "class_dtype", "=", "class_dtype", "\n", "\n", "#         self._dir_names = {'INPUT_DIR': 'input',", "\n", "#                            'METRICS_DIR': 'metrics',", "\n", "#                            'COMPONENTS_DIR': 'components',", "\n", "#                            'IOU_SEG_VIS_DIR': 'iou_seg_vis',", "\n", "#                            'RESULTS_DIR': 'results',", "\n", "#                            'STATS_DIR': 'stats'}", "\n", "self", ".", "_file_extensions", "=", "{", "\"input\"", ":", "\".hdf5\"", ",", "\"metrics\"", ":", "\".p\"", ",", "\"components\"", ":", "\".p\"", "}", "\n", "\n", "# get number of inputs:", "\n", "self", ".", "num_imgs", "=", "0", "\n", "for", "f", "in", "os", ".", "listdir", "(", "\n", "join", "(", "self", ".", "root", ",", "self", ".", "loading", "[", "0", "]", ",", "self", ".", "model_name", ",", "self", ".", "dataset", ")", "\n", ")", ":", "\n", "            ", "if", "(", "\n", "isfile", "(", "\n", "join", "(", "self", ".", "root", ",", "self", ".", "loading", "[", "0", "]", ",", "self", ".", "model_name", ",", "self", ".", "dataset", ",", "f", ")", "\n", ")", "\n", "and", "splitext", "(", "f", ")", "[", "-", "1", "]", "==", "self", ".", "_file_extensions", "[", "self", ".", "loading", "[", "0", "]", "]", "\n", "and", "all", "(", "\n", "[", "\n", "exists", "(", "\n", "join", "(", "\n", "self", ".", "root", ",", "\n", "self", ".", "loading", "[", "i", "]", ",", "\n", "self", ".", "model_name", ",", "\n", "self", ".", "dataset", ",", "\n", "self", ".", "loading", "[", "i", "]", "\n", "+", "str", "(", "self", ".", "_index_of_file", "(", "f", ")", ")", "\n", "+", "self", ".", "_file_extensions", "[", "self", ".", "loading", "[", "i", "]", "]", ",", "\n", ")", "\n", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "loading", ")", ")", "\n", "]", "\n", ")", "\n", ")", ":", "\n", "                ", "self", ".", "num_imgs", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.dataset.MetaSegData.__getitem__": [[63, 73], ["isinstance", "getattr", "data.extend", "data.append"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "loading", ":", "\n", "            ", "d", "=", "getattr", "(", "self", ",", "\"_load_{}\"", ".", "format", "(", "i", ")", ")", "(", "index", ")", "\n", "if", "isinstance", "(", "d", ",", "tuple", ")", ":", "\n", "                ", "data", ".", "extend", "(", "d", ")", "\n", "", "else", ":", "\n", "                ", "data", ".", "append", "(", "d", ")", "\n", "\n", "", "", "return", "(", "*", "data", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.dataset.MetaSegData.__len__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.dataset.MetaSegData._load_input": [[77, 92], ["os.path.join", "h5py.File", "numpy.asarray", "numpy.asarray", "numpy.squeeze", "numpy.squeeze", "[].decode"], "methods", ["None"], ["", "def", "_load_input", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "join", "(", "\n", "self", ".", "root", ",", "\n", "\"input\"", ",", "\n", "self", ".", "model_name", ",", "\n", "self", ".", "dataset", ",", "\n", "\"input{}.hdf5\"", ".", "format", "(", "index", ")", ",", "\n", ")", "\n", "with", "h5py", ".", "File", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "probs", "=", "np", ".", "asarray", "(", "f", "[", "\"probabilities\"", "]", ")", "\n", "gt", "=", "np", ".", "asarray", "(", "f", "[", "\"ground_truths\"", "]", ")", "\n", "probs", "=", "np", ".", "squeeze", "(", "probs", ")", "\n", "gt", "=", "np", ".", "squeeze", "(", "gt", ")", "\n", "image_path", "=", "f", "[", "\"image_path\"", "]", "[", "0", "]", ".", "decode", "(", "\"utf8\"", ")", "\n", "", "return", "probs", ",", "gt", ",", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.dataset.MetaSegData._load_metrics": [[93, 106], ["os.path.join", "numpy.asarray", "open", "pickle.load", "numpy.asarray", "pickle.load.keys"], "methods", ["None"], ["", "def", "_load_metrics", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "join", "(", "\n", "self", ".", "root", ",", "\n", "\"metrics\"", ",", "\n", "self", ".", "model_name", ",", "\n", "self", ".", "dataset", ",", "\n", "\"metrics{}.p\"", ".", "format", "(", "index", ")", ",", "\n", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "metrics", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "M", "=", "np", ".", "asarray", "(", "[", "np", ".", "asarray", "(", "metrics", "[", "m", "]", ")", "for", "m", "in", "metrics", ".", "keys", "(", ")", "]", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.dataset.MetaSegData._load_components": [[107, 118], ["os.path.join", "open", "pickle.load"], "methods", ["None"], ["", "def", "_load_components", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "join", "(", "\n", "self", ".", "root", ",", "\n", "\"components\"", ",", "\n", "self", ".", "model_name", ",", "\n", "self", ".", "dataset", ",", "\n", "\"components{}.p\"", ".", "format", "(", "index", ")", ",", "\n", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "components", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "return", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.dataset.MetaSegData._index_of_file": [[119, 125], ["dataset.MetaSegData._file_extensions.keys", "f.replace.replace.replace", "int", "os.path.splitext", "f.replace.replace.replace", "os.path.basename"], "methods", ["None"], ["", "def", "_index_of_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "f", "=", "splitext", "(", "basename", "(", "filename", ")", ")", "[", "0", "]", "\n", "for", "i", "in", "self", ".", "_file_extensions", ".", "keys", "(", ")", ":", "\n", "            ", "f", "=", "f", ".", "replace", "(", "i", ",", "\"\"", ")", "\n", "", "f", "=", "f", ".", "replace", "(", "\"_\"", ",", "\"\"", ")", "\n", "return", "int", "(", "f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.concatenate_metrics": [[19, 48], ["logging.getLogger", "isinstance", "list", "enumerate", "logging.getLogger.debug", "in_out.metrics_load", "list", "isinstance", "tqdm.tqdm", "in_out.metrics_load", "range", "in_out.metrics_load", "len", "in_out.metrics_dump", "in_out.metrics_dump", "max", "in_out.get_indices", "in_out.metrics_load", "ValueError", "len", "len", "type"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_dump", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_dump", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_load"], ["def", "concatenate_metrics", "(", "num_imgs", ",", "metrics_dir", ",", "save", "=", "False", ")", ":", "\n", "    ", "log", "=", "logging", ".", "getLogger", "(", "\"concatenate_metrics\"", ")", "\n", "if", "isinstance", "(", "num_imgs", ",", "int", ")", ":", "\n", "        ", "metrics", "=", "metrics_load", "(", "0", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "num_imgs", "=", "list", "(", "range", "(", "1", ",", "num_imgs", ")", ")", "\n", "", "elif", "isinstance", "(", "num_imgs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "metrics", "=", "metrics_load", "(", "num_imgs", "[", "0", "]", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "num_imgs", "=", "num_imgs", "[", "1", ":", "]", "\n", "", "elif", "num_imgs", "is", "None", ":", "\n", "        ", "num_imgs", "=", "get_indices", "(", "metrics_dir", ")", "\n", "metrics", "=", "metrics_load", "(", "num_imgs", "[", "0", "]", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "num_imgs", "=", "num_imgs", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"num_imgs should either be of type int, list or tuple \"", "\n", "\"but received {}\"", ".", "format", "(", "type", "(", "num_imgs", ")", ")", "\n", ")", "\n", "\n", "", "start", "=", "list", "(", "[", "0", ",", "len", "(", "metrics", "[", "\"S\"", "]", ")", "]", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "num_imgs", ",", "total", "=", "len", "(", "num_imgs", ")", "+", "1", ",", "initial", "=", "1", ")", ")", ":", "\n", "        ", "m", "=", "metrics_load", "(", "k", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "start", "+=", "[", "start", "[", "-", "1", "]", "+", "len", "(", "m", "[", "\"S\"", "]", ")", "]", "\n", "for", "j", "in", "metrics", ":", "\n", "            ", "metrics", "[", "j", "]", "+=", "m", "[", "j", "]", "\n", "", "if", "save", ":", "\n", "            ", "metrics_dump", "(", "metrics", ",", "\"_all\"", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "metrics_dump", "(", "start", ",", "\"_start\"", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "", "", "log", ".", "debug", "(", "\"Loaded {} segments.\"", ".", "format", "(", "max", "(", "start", ")", ")", ")", "\n", "return", "metrics", ",", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_nparray": [[50, 72], ["range", "numpy.asarray", "numpy.squeeze", "len", "np.squeeze.copy", "numpy.asarray", "range", "numpy.squeeze", "numpy.asarray", "numpy.mean", "numpy.std", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "metrics_to_nparray", "(", "\n", "metrics", ",", "names", ",", "normalize", "=", "False", ",", "non_empty", "=", "False", ",", "all_metrics", "=", "(", ")", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "In", "=", "range", "(", "len", "(", "metrics", "[", "\"S_in\"", "]", ")", ")", "\n", "if", "non_empty", ":", "\n", "        ", "In", "=", "np", ".", "asarray", "(", "metrics", "[", "\"S_in\"", "]", ")", ">", "0", "\n", "", "M", "=", "np", ".", "asarray", "(", "[", "np", ".", "asarray", "(", "metrics", "[", "m", "]", ")", "[", "In", "]", "for", "m", "in", "names", "]", ")", "\n", "MM", "=", "[", "]", "\n", "if", "not", "all_metrics", ":", "\n", "        ", "MM", "=", "M", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "MM", "=", "np", ".", "asarray", "(", "[", "np", ".", "asarray", "(", "all_metrics", "[", "m", "]", ")", "[", "In", "]", "for", "m", "in", "names", "]", ")", "\n", "", "if", "normalize", ":", "\n", "        ", "mu", "=", "np", ".", "mean", "(", "MM", ",", "axis", "=", "-", "1", ")", "if", "\"mean\"", "not", "in", "kwargs", "else", "kwargs", "[", "\"mean\"", "]", "\n", "std", "=", "np", ".", "std", "(", "MM", ",", "axis", "=", "-", "1", ")", "if", "\"std\"", "not", "in", "kwargs", "else", "kwargs", "[", "\"std\"", "]", "\n", "for", "i", "in", "range", "(", "M", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "names", "[", "i", "]", "!=", "\"class\"", ":", "\n", "                ", "M", "[", "i", "]", "=", "(", "np", ".", "asarray", "(", "M", "[", "i", "]", ")", "-", "mu", "[", "i", "]", ")", "/", "(", "std", "[", "i", "]", "+", "1e-10", ")", "\n", "", "", "M", "=", "np", ".", "squeeze", "(", "M", ".", "T", ")", "\n", "return", "M", ",", "mu", ",", "std", "\n", "", "M", "=", "np", ".", "squeeze", "(", "M", ".", "T", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.label_as_onehot": [[74, 80], ["numpy.zeros", "range", "numpy.transpose", "np.transpose.astype"], "function", ["None"], ["", "def", "label_as_onehot", "(", "label", ",", "num_classes", ",", "shift_range", "=", "0", ")", ":", "\n", "    ", "y", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "c", "in", "range", "(", "shift_range", ",", "num_classes", "+", "shift_range", ")", ":", "\n", "        ", "y", "[", "c", "-", "shift_range", "]", "[", "label", "==", "c", "]", "=", "1", "\n", "", "y", "=", "np", ".", "transpose", "(", "y", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# shape is (height, width, num_classes)", "\n", "return", "y", ".", "astype", "(", "\"uint8\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.classes_to_categorical": [[82, 91], ["numpy.squeeze", "label_as_onehot().reshape", "numpy.asarray", "numpy.max", "helper.label_as_onehot", "str", "range", "label_as_onehot().reshape.reshape"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.label_as_onehot"], ["", "def", "classes_to_categorical", "(", "classes", ",", "nc", "=", "None", ")", ":", "\n", "    ", "classes", "=", "np", ".", "squeeze", "(", "np", ".", "asarray", "(", "classes", ")", ")", "\n", "if", "nc", "is", "None", ":", "\n", "        ", "nc", "=", "np", ".", "max", "(", "classes", ")", "\n", "", "classes", "=", "label_as_onehot", "(", "classes", ".", "reshape", "(", "(", "classes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "nc", ")", ".", "reshape", "(", "\n", "(", "classes", ".", "shape", "[", "0", "]", ",", "nc", ")", "\n", ")", "\n", "names", "=", "[", "\"C_\"", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "nc", ")", "]", "\n", "return", "classes", ",", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_dataset": [[93, 170], ["sorted", "helper.metrics_to_nparray", "helper.metrics_to_nparray", "helper.metrics_to_nparray", "helper.metrics_to_nparray", "helper.metrics_to_nparray", "helper.metrics_to_nparray", "helper.classes_to_categorical", "ValueError", "str", "range", "str"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_nparray", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_nparray", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_nparray", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_nparray", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_nparray", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_nparray", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.classes_to_categorical"], ["", "def", "metrics_to_dataset", "(", "\n", "metrics", ",", "\n", "nclasses", ",", "\n", "non_empty", "=", "True", ",", "\n", "all_metrics", "=", "(", ")", ",", "\n", "class_dtype", "=", "CONFIG", ".", "CLASS_DTYPE", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "x_names", "=", "sorted", "(", "\n", "[", "m", "for", "m", "in", "metrics", "if", "m", "not", "in", "[", "\"class\"", ",", "\"iou\"", ",", "\"iou0\"", "]", "and", "\"cprob\"", "not", "in", "m", "]", "\n", ")", "\n", "if", "class_dtype", "==", "\"probs\"", ":", "\n", "        ", "class_names", "=", "[", "\n", "\"cprob\"", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "nclasses", ")", "if", "\"cprob\"", "+", "str", "(", "i", ")", "in", "metrics", "\n", "]", "\n", "", "elif", "class_dtype", "==", "\"one_hot_classes\"", ":", "\n", "        ", "class_names", "=", "[", "\"class\"", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"class_dtype should be one of ['one_hot_classes', 'probs'] \"", "\n", "\"but got {}.\"", ".", "format", "(", "class_dtype", ")", "\n", ")", "\n", "\n", "", "if", "\"xa_mean\"", "in", "kwargs", "and", "\"xa_std\"", "in", "kwargs", ":", "\n", "        ", "xa", ",", "xa_mean", ",", "xa_std", "=", "metrics_to_nparray", "(", "\n", "metrics", ",", "\n", "x_names", ",", "\n", "normalize", "=", "True", ",", "\n", "non_empty", "=", "non_empty", ",", "\n", "all_metrics", "=", "all_metrics", ",", "\n", "mean", "=", "kwargs", "[", "\"xa_mean\"", "]", ",", "\n", "std", "=", "kwargs", "[", "\"xa_std\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "xa", ",", "xa_mean", ",", "xa_std", "=", "metrics_to_nparray", "(", "\n", "metrics", ",", "\n", "x_names", ",", "\n", "normalize", "=", "True", ",", "\n", "non_empty", "=", "non_empty", ",", "\n", "all_metrics", "=", "all_metrics", ",", "\n", ")", "\n", "\n", "", "if", "\"classes_mean\"", "in", "kwargs", "and", "\"classes_std\"", "in", "kwargs", ":", "\n", "        ", "classes", ",", "classes_mean", ",", "classes_std", "=", "metrics_to_nparray", "(", "\n", "metrics", ",", "\n", "class_names", ",", "\n", "normalize", "=", "True", ",", "\n", "non_empty", "=", "non_empty", ",", "\n", "all_metrics", "=", "all_metrics", ",", "\n", "mean", "=", "kwargs", "[", "\"classes_mean\"", "]", ",", "\n", "std", "=", "kwargs", "[", "\"classes_std\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "classes", ",", "classes_mean", ",", "classes_std", "=", "metrics_to_nparray", "(", "\n", "metrics", ",", "\n", "class_names", ",", "\n", "normalize", "=", "True", ",", "\n", "non_empty", "=", "non_empty", ",", "\n", "all_metrics", "=", "all_metrics", ",", "\n", ")", "\n", "\n", "", "ya", "=", "metrics_to_nparray", "(", "metrics", ",", "[", "\"iou\"", "]", ",", "normalize", "=", "False", ",", "non_empty", "=", "non_empty", ")", "\n", "y0a", "=", "metrics_to_nparray", "(", "metrics", ",", "[", "\"iou0\"", "]", ",", "normalize", "=", "False", ",", "non_empty", "=", "non_empty", ")", "\n", "\n", "if", "class_dtype", "==", "\"one_hot_classes\"", ":", "\n", "        ", "classes", ",", "class_names", "=", "classes_to_categorical", "(", "classes", ",", "nclasses", ")", "\n", "", "return", "(", "\n", "xa", ",", "\n", "classes", ",", "\n", "ya", ",", "\n", "y0a", ",", "\n", "x_names", ",", "\n", "class_names", ",", "\n", "xa_mean", ",", "\n", "xa_std", ",", "\n", "classes_mean", ",", "\n", "classes_std", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.load_data": [[173, 207], ["os.path.join", "helper.concatenate_metrics", "helper.metrics_to_dataset", "numpy.concatenate", "in_out.get_indices", "numpy.max"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.concatenate_metrics", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.metrics_to_dataset", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices"], ["", "def", "load_data", "(", "\n", "dataset", "=", "\"cityscapes\"", ",", "num_imgs", "=", "None", ",", "model_name", "=", "CONFIG", ".", "MODEL_NAME", ",", "**", "kwargs", "\n", ")", ":", "\n", "# loads all data that can be found in the metaseg input folder", "\n", "    ", "metrics_dir", "=", "join", "(", "CONFIG", ".", "metaseg_io_path", ",", "\"metrics\"", ",", "model_name", ",", "dataset", ")", "\n", "num_imgs", "=", "get_indices", "(", "metrics_dir", ")", "if", "num_imgs", "is", "None", "else", "num_imgs", "\n", "metrics", ",", "start", "=", "concatenate_metrics", "(", "num_imgs", ",", "save", "=", "False", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "nclasses", "=", "np", ".", "max", "(", "metrics", "[", "\"class\"", "]", ")", "+", "1", "\n", "\n", "(", "\n", "xa", ",", "\n", "classes", ",", "\n", "ya", ",", "\n", "_", ",", "\n", "x_names", ",", "\n", "class_names", ",", "\n", "xa_mean", ",", "\n", "xa_std", ",", "\n", "classes_mean", ",", "\n", "classes_std", ",", "\n", ")", "=", "metrics_to_dataset", "(", "metrics", ",", "nclasses", ",", "non_empty", "=", "False", ",", "**", "kwargs", ")", "\n", "xa", "=", "np", ".", "concatenate", "(", "(", "xa", ",", "classes", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "(", "\n", "xa", ",", "\n", "ya", ",", "\n", "x_names", ",", "\n", "class_names", ",", "\n", "xa_mean", ",", "\n", "xa_std", ",", "\n", "classes_mean", ",", "\n", "classes_std", ",", "\n", "start", ",", "\n", "metrics", "[", "\"class\"", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.helper.get_lambdas": [[210, 214], ["scipy.interpolate.interp1d", "scipy.interpolate.interp1d.item", "range", "scipy.interpolate.interp1d."], "function", ["None"], ["", "def", "get_lambdas", "(", "n_steps", ",", "min_pow", ",", "max_pow", ")", ":", "\n", "    ", "m", "=", "interp1d", "(", "[", "0", ",", "n_steps", "-", "1", "]", ",", "[", "min_pow", ",", "max_pow", "]", ")", "\n", "lambdas", "=", "[", "10", "**", "m", "(", "i", ")", ".", "item", "(", ")", "for", "i", "in", "range", "(", "n_steps", ")", "]", "\n", "return", "lambdas", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.visualize_segments": [[67, 93], ["numpy.asarray", "numpy.asarray", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.asarray", "len", "numpy.zeros", "numpy.meshgrid", "x.reshape.reshape", "y.reshape.reshape", "numpy.asarray().astype", "comp.copy", "len", "numpy.arange", "numpy.arange", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["def", "visualize_segments", "(", "comp", ",", "metric", ")", ":", "\n", "    ", "r", "=", "np", ".", "asarray", "(", "metric", ")", "\n", "r", "=", "1", "-", "0.5", "*", "r", "\n", "g", "=", "np", ".", "asarray", "(", "metric", ")", "\n", "b", "=", "0.3", "+", "0.35", "*", "np", ".", "asarray", "(", "metric", ")", "\n", "\n", "r", "=", "np", ".", "concatenate", "(", "(", "r", ",", "np", ".", "asarray", "(", "[", "0", ",", "1", "]", ")", ")", ")", "\n", "g", "=", "np", ".", "concatenate", "(", "(", "g", ",", "np", ".", "asarray", "(", "[", "0", ",", "1", "]", ")", ")", ")", "\n", "b", "=", "np", ".", "concatenate", "(", "(", "b", ",", "np", ".", "asarray", "(", "[", "0", ",", "1", "]", ")", ")", ")", "\n", "\n", "components", "=", "np", ".", "asarray", "(", "comp", ".", "copy", "(", ")", ",", "dtype", "=", "\"int16\"", ")", "\n", "components", "[", "components", "<", "0", "]", "=", "len", "(", "r", ")", "-", "1", "\n", "components", "[", "components", "==", "0", "]", "=", "len", "(", "r", ")", "\n", "\n", "img", "=", "np", ".", "zeros", "(", "components", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "img", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "img", ".", "shape", "[", "1", "]", ")", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ")", "\n", "y", "=", "y", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "img", "[", "x", ",", "y", ",", "0", "]", "=", "r", "[", "components", "[", "x", ",", "y", "]", "-", "1", "]", "\n", "img", "[", "x", ",", "y", ",", "1", "]", "=", "g", "[", "components", "[", "x", ",", "y", "]", "-", "1", "]", "\n", "img", "[", "x", ",", "y", ",", "2", "]", "=", "b", "[", "components", "[", "x", ",", "y", "]", "-", "1", "]", "\n", "\n", "img", "=", "np", ".", "asarray", "(", "255", "*", "img", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.visualize_regression_prediction_i": [[95, 169], ["os.path.isfile", "src.MetaSeg.functions.in_out.get_save_path_input_i", "src.MetaSeg.functions.in_out.probs_gt_load", "PIL.Image.open().convert", "numpy.asarray", "src.MetaSeg.functions.in_out.components_load", "src.MetaSeg.functions.metrics.entropy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "predc.reshape.reshape", "gtc.reshape.reshape", "PIL.Image.fromarray", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "PIL.Image.fromarray", "Image.fromarray.save", "matplotlib.close", "print", "np.asarray.resize", "numpy.argmax", "PIL.Image.fromarray", "plot.visualize_segments", "np.concatenate.astype", "os.path.exists", "os.makedirs", "os.path.join", "getattr", "getattr", "PIL.Image.open", "numpy.uint8", "enumerate", "os.path.join", "importlib.import_module", "importlib.import_module", "range", "range", "range", "range", "matplotlib.cm.jet"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_input_i", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.None.pred_images.save", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.visualize_segments"], ["", "def", "visualize_regression_prediction_i", "(", "\n", "iou_pred", ",", "\n", "i", ",", "\n", "input_dir", "=", "CONFIG", ".", "INPUT_DIR", ",", "\n", "seg_dir", "=", "CONFIG", ".", "IOU_SEG_VIS_DIR", ",", "\n", "components_dir", "=", "CONFIG", ".", "COMPONENTS_DIR", ",", "\n", ")", ":", "\n", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "get_save_path_input_i", "(", "i", ",", "input_dir", "=", "input_dir", ")", ")", ":", "\n", "        ", "label_mapping", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "CONFIG", ".", "DATASET", ".", "module_name", ")", ",", "\n", "CONFIG", ".", "DATASET", ".", "class_name", ",", "\n", ")", "(", "\n", "**", "CONFIG", ".", "DATASET", ".", "kwargs", ",", "\n", ")", ".", "label_mapping", "\n", "pred_mapping", "=", "getattr", "(", "\n", "importlib", ".", "import_module", "(", "CONFIG", ".", "TRAIN_DATASET", ".", "module_name", ")", ",", "\n", "CONFIG", ".", "TRAIN_DATASET", ".", "class_name", ",", "\n", ")", "(", "\n", "**", "CONFIG", ".", "TRAIN_DATASET", ".", "kwargs", ",", "\n", ")", ".", "label_mapping", "\n", "\n", "probs", ",", "gt", ",", "path", "=", "probs_gt_load", "(", "i", ",", "input_dir", "=", "input_dir", ")", "\n", "input_image", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "input_image", "=", "np", ".", "asarray", "(", "input_image", ".", "resize", "(", "probs", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", ")", ")", "\n", "components", "=", "components_load", "(", "i", ",", "components_dir", "=", "components_dir", ")", "\n", "\n", "e", "=", "entropy", "(", "probs", ")", "\n", "pred", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "probs", ",", "axis", "=", "-", "1", ")", ",", "dtype", "=", "\"int\"", ")", "\n", "gt", "[", "gt", "==", "255", "]", "=", "0", "\n", "predc", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "pred_mapping", "[", "pred", "[", "p", ",", "q", "]", "]", "[", "1", "]", "\n", "for", "p", "in", "range", "(", "pred", ".", "shape", "[", "0", "]", ")", "\n", "for", "q", "in", "range", "(", "pred", ".", "shape", "[", "1", "]", ")", "\n", "]", "\n", ")", "\n", "gtc", "=", "np", ".", "asarray", "(", "\n", "[", "\n", "label_mapping", "[", "gt", "[", "p", ",", "q", "]", "]", "[", "1", "]", "\n", "for", "p", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", "\n", "for", "q", "in", "range", "(", "gt", ".", "shape", "[", "1", "]", ")", "\n", "]", "\n", ")", "\n", "predc", "=", "predc", ".", "reshape", "(", "input_image", ".", "shape", ")", "\n", "gtc", "=", "gtc", ".", "reshape", "(", "input_image", ".", "shape", ")", "\n", "\n", "overlay_factor", "=", "[", "1.0", ",", "0.5", ",", "1.0", "]", "\n", "img_predc", ",", "img_gtc", ",", "img_entropy", "=", "[", "\n", "Image", ".", "fromarray", "(", "\n", "np", ".", "uint8", "(", "\n", "arr", "*", "overlay_factor", "[", "i", "]", "+", "input_image", "*", "(", "1", "-", "overlay_factor", "[", "i", "]", ")", "\n", ")", "\n", ")", "\n", "for", "i", ",", "arr", "in", "enumerate", "(", "[", "predc", ",", "gtc", ",", "cm", ".", "jet", "(", "e", ")", "[", ":", ",", ":", ",", ":", "3", "]", "*", "255.0", "]", ")", "\n", "]", "\n", "\n", "img_ioupred", "=", "Image", ".", "fromarray", "(", "visualize_segments", "(", "components", ",", "iou_pred", ")", ")", "\n", "\n", "images", "=", "[", "img_gtc", ",", "img_predc", ",", "img_entropy", ",", "img_ioupred", "]", "\n", "\n", "img_top", "=", "np", ".", "concatenate", "(", "images", "[", "2", ":", "]", ",", "axis", "=", "1", ")", "\n", "img_bottom", "=", "np", ".", "concatenate", "(", "images", "[", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "\n", "img_total", "=", "np", ".", "concatenate", "(", "(", "img_top", ",", "img_bottom", ")", ",", "axis", "=", "0", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "img_total", ".", "astype", "(", "\"uint8\"", ")", ",", "\"RGB\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "seg_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "seg_dir", ")", "\n", "\n", "", "image", ".", "save", "(", "join", "(", "seg_dir", ",", "\"image{}.png\"", ".", "format", "(", "i", ")", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "print", "(", "\"stored: {}\"", ".", "format", "(", "join", "(", "seg_dir", ",", "\"image{}.png\"", ".", "format", "(", "i", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_roc_curve": [[171, 195], ["sklearn.metrics.roc_curve", "sklearn.metrics.auc", "print", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "os.path.dirname", "matplotlib.savefig", "print", "matplotlib.close", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "plot_roc_curve", "(", "y", ",", "probs", ",", "roc_path", ")", ":", "\n", "    ", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y", ",", "probs", ")", "\n", "roc_auc", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "print", "(", "\"auc\"", ",", "roc_auc", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "lw", "=", "2", "\n", "plt", ".", "plot", "(", "fpr", ",", "tpr", ",", "color", "=", "\"red\"", ",", "lw", "=", "lw", ",", "label", "=", "\"ROC curve (area = %0.2f)\"", "%", "roc_auc", ")", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "color", "=", "\"black\"", ",", "lw", "=", "lw", ",", "linestyle", "=", "\"--\"", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"False Positive Rate\"", ")", "\n", "plt", ".", "ylabel", "(", "\"True Positive Rate\"", ")", "\n", "plt", ".", "title", "(", "\"ROC curve of meta classification performance\"", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"lower right\"", ")", "\n", "\n", "roc_dir", "=", "os", ".", "path", ".", "dirname", "(", "roc_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "roc_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "roc_dir", ")", "\n", "\n", "", "plt", ".", "savefig", "(", "roc_path", ")", "\n", "print", "(", "\"roc curve saved to \"", "+", "roc_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "return", "roc_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_regression": [[197, 225], ["matplotlib.get_cmap", "matplotlib.figure", "matplotlib.clf", "range", "numpy.squeeze", "numpy.arange", "matplotlib.plot", "matplotlib.scatter", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.clf", "len", "numpy.min", "numpy.clip", "numpy.std", "numpy.max", "plt.get_cmap.", "plt.get_cmap."], "function", ["None"], ["", "def", "plot_regression", "(", "x2_val", ",", "y2_val", ",", "y2_pred", ",", "x_names", ")", ":", "\n", "    ", "cmap", "=", "plt", ".", "get_cmap", "(", "\"tab20\"", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "3", ",", "3", ")", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "s_ind", "=", "0", "\n", "for", "s_ind", "in", "range", "(", "len", "(", "x_names", ")", ")", ":", "\n", "        ", "if", "x_names", "[", "s_ind", "]", "==", "\"S\"", ":", "\n", "            ", "break", "\n", "\n", "", "", "sizes", "=", "np", ".", "squeeze", "(", "x2_val", "[", ":", ",", "s_ind", "]", "*", "np", ".", "std", "(", "x2_val", "[", ":", ",", "s_ind", "]", ")", ")", "\n", "sizes", "=", "sizes", "-", "np", ".", "min", "(", "sizes", ")", "\n", "sizes", "=", "sizes", "/", "np", ".", "max", "(", "sizes", ")", "*", "50", "# + 1.5", "\n", "x", "=", "np", ".", "arange", "(", "0.0", ",", "1", ",", "0.01", ")", "\n", "plt", ".", "plot", "(", "x", ",", "x", ",", "color", "=", "\"black\"", ",", "alpha", "=", "0.5", ",", "linestyle", "=", "\"dashed\"", ")", "\n", "plt", ".", "scatter", "(", "\n", "y2_val", ",", "\n", "np", ".", "clip", "(", "y2_pred", ",", "0", ",", "1", ")", ",", "\n", "s", "=", "sizes", ",", "\n", "linewidth", "=", "0.5", ",", "\n", "c", "=", "cmap", "(", "0", ")", ",", "\n", "edgecolors", "=", "cmap", "(", "1", ")", ",", "\n", "alpha", "=", "0.25", ",", "\n", ")", "\n", "plt", ".", "xlabel", "(", "\"$\\mathit{IoU}_\\mathrm{adj}$\"", ")", "# noqa: W605", "\n", "plt", ".", "ylabel", "(", "\"predicted $\\mathit{IoU}_\\mathrm{adj}$\"", ")", "# noqa: W605", "\n", "plt", ".", "savefig", "(", "CONFIG", ".", "RESULTS_DIR", "+", "\"regression.png\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_classif_hist": [[227, 250], ["matplotlib.clf", "scipy.stats.gaussian_kde", "scipy.stats.gaussian_kde", "scipy.stats.gaussian_kde.set_bandwidth", "scipy.stats.gaussian_kde.set_bandwidth", "numpy.arange", "matplotlib.clf", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.hist", "matplotlib.hist", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.clf", "scipy.stats.gaussian_kde.", "scipy.stats.gaussian_kde."], "function", ["None"], ["", "def", "plot_classif_hist", "(", "ya_val", ",", "ypred", ")", ":", "\n", "    ", "figsize", "=", "(", "8.75", ",", "5.25", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "density1", "=", "gaussian_kde", "(", "ya_val", "[", "ypred", "==", "1", "]", ")", "\n", "density2", "=", "gaussian_kde", "(", "ya_val", "[", "ypred", "==", "0", "]", ")", "\n", "\n", "density1", ".", "set_bandwidth", "(", "bw_method", "=", "density1", ".", "factor", "/", "2.0", ")", "\n", "density2", ".", "set_bandwidth", "(", "bw_method", "=", "density2", ".", "factor", "/", "2.0", ")", "\n", "\n", "x", "=", "np", ".", "arange", "(", "0.0", ",", "1", ",", "0.01", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "plt", ".", "plot", "(", "x", ",", "density1", "(", "x", ")", ",", "color", "=", "\"red\"", ",", "alpha", "=", "0.66", ",", "label", "=", "\"pred. $IoU = 0$\"", ")", "\n", "plt", ".", "plot", "(", "x", ",", "density2", "(", "x", ")", ",", "color", "=", "\"blue\"", ",", "alpha", "=", "0.66", ",", "label", "=", "\"pred. $IoU > 0$\"", ")", "\n", "plt", ".", "hist", "(", "ya_val", "[", "ypred", "==", "1", "]", ",", "bins", "=", "20", ",", "color", "=", "\"red\"", ",", "alpha", "=", "0.1", ",", "density", "=", "True", ")", "\n", "plt", ".", "hist", "(", "ya_val", "[", "ypred", "==", "0", "]", ",", "bins", "=", "20", ",", "color", "=", "\"blue\"", ",", "alpha", "=", "0.1", ",", "density", "=", "True", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "xlabel", "(", "\"$\\mathit{IoU}_\\mathrm{adj}$\"", ")", "# noqa: W605", "\n", "plt", ".", "savefig", "(", "CONFIG", ".", "RESULTS_DIR", "+", "\"classif_hist.pdf\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_classif": [[252, 315], ["numpy.squeeze", "numpy.concatenate", "numpy.argmax", "matplotlib.get_cmap", "matplotlib.clf", "matplotlib.semilogx", "matplotlib.semilogx", "matplotlib.semilogx", "matplotlib.ylim", "matplotlib.vlines", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.axis", "matplotlib.savefig", "matplotlib.clf", "matplotlib.semilogx", "matplotlib.semilogx", "matplotlib.semilogx", "matplotlib.ylim", "matplotlib.vlines", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.axis", "matplotlib.savefig", "matplotlib.close", "len", "len", "numpy.max().reshape", "plt.get_cmap.", "plt.get_cmap.", "numpy.ones", "plt.get_cmap.", "plt.get_cmap.", "numpy.ones", "numpy.max", "len", "len", "numpy.abs"], "function", ["None"], ["", "def", "plot_classif", "(", "stats", ",", "mean_stats", ",", "x_names", ",", "class_names", ")", ":", "\n", "    ", "nc", "=", "len", "(", "x_names", ")", "-", "len", "(", "class_names", ")", "\n", "coefs", "=", "np", ".", "squeeze", "(", "stats", "[", "\"coefs\"", "]", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "coefs", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "coefs", "[", ":", ",", "0", ":", "nc", "]", ",", "\n", "np", ".", "max", "(", "np", ".", "abs", "(", "coefs", "[", ":", ",", "nc", ":", "]", ")", ",", "axis", "=", "1", ")", ".", "reshape", "(", "(", "coefs", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "\n", "]", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", "max_acc", "=", "np", ".", "argmax", "(", "stats", "[", "\"penalized_val_acc\"", "]", "[", "0", "]", ",", "axis", "=", "-", "1", ")", "\n", "lambdas", "=", "stats", "[", "\"lambdas\"", "]", "\n", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "\"tab20\"", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "semilogx", "(", "\n", "lambdas", ",", "stats", "[", "\"plain_val_acc\"", "]", "[", "0", "]", ",", "label", "=", "\"unpenalized model\"", ",", "color", "=", "cmap", "(", "2", ")", "\n", ")", "\n", "plt", ".", "semilogx", "(", "\n", "lambdas", ",", "stats", "[", "\"penalized_val_acc\"", "]", "[", "0", "]", ",", "label", "=", "\"penalized model\"", ",", "color", "=", "cmap", "(", "0", ")", "\n", ")", "\n", "plt", ".", "semilogx", "(", "\n", "lambdas", ",", "\n", "mean_stats", "[", "\"entropy_val_acc\"", "]", "*", "np", ".", "ones", "(", "(", "len", "(", "lambdas", ")", ",", ")", ")", ",", "\n", "label", "=", "\"entropy baseline\"", ",", "\n", "color", "=", "\"black\"", ",", "\n", "linestyle", "=", "\"dashed\"", ",", "\n", ")", "\n", "ymin", ",", "ymax", "=", "plt", ".", "ylim", "(", ")", "\n", "plt", ".", "vlines", "(", "\n", "lambdas", "[", "max_acc", "]", ",", "ymin", ",", "ymax", ",", "linestyle", "=", "\"dashed\"", ",", "linewidth", "=", "0.5", ",", "color", "=", "\"grey\"", "\n", ")", "\n", "legend", "=", "plt", ".", "legend", "(", "loc", "=", "\"lower right\"", ")", "# noqa: F841", "\n", "plt", ".", "xlabel", "(", "\"$\\lambda^{-1}$\"", ")", "# noqa: W605", "\n", "plt", ".", "ylabel", "(", "\"classification accuracy\"", ")", "\n", "plt", ".", "axis", "(", "\"tight\"", ")", "\n", "plt", ".", "savefig", "(", "CONFIG", ".", "RESULTS_DIR", "+", "\"classif_perf.pdf\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "semilogx", "(", "\n", "lambdas", ",", "stats", "[", "\"plain_val_auroc\"", "]", "[", "0", "]", ",", "label", "=", "\"unpenalized model\"", ",", "color", "=", "cmap", "(", "2", ")", "\n", ")", "\n", "plt", ".", "semilogx", "(", "\n", "lambdas", ",", "stats", "[", "\"penalized_val_auroc\"", "]", "[", "0", "]", ",", "label", "=", "\"penalized model\"", ",", "color", "=", "cmap", "(", "0", ")", "\n", ")", "\n", "plt", ".", "semilogx", "(", "\n", "lambdas", ",", "\n", "mean_stats", "[", "\"entropy_val_auroc\"", "]", "*", "np", ".", "ones", "(", "(", "len", "(", "lambdas", ")", ",", ")", ")", ",", "\n", "label", "=", "\"entropy baseline\"", ",", "\n", "color", "=", "\"black\"", ",", "\n", "linestyle", "=", "\"dashed\"", ",", "\n", ")", "\n", "ymin", ",", "ymax", "=", "plt", ".", "ylim", "(", ")", "\n", "plt", ".", "vlines", "(", "\n", "lambdas", "[", "max_acc", "]", ",", "ymin", ",", "ymax", ",", "linestyle", "=", "\"dashed\"", ",", "linewidth", "=", "0.5", ",", "color", "=", "\"grey\"", "\n", ")", "\n", "legend", "=", "plt", ".", "legend", "(", "loc", "=", "\"lower right\"", ")", "# noqa: F841", "\n", "plt", ".", "xlabel", "(", "\"$\\lambda^{-1}$\"", ")", "# noqa: W605", "\n", "plt", ".", "ylabel", "(", "\"AUROC\"", ")", "\n", "plt", ".", "axis", "(", "\"tight\"", ")", "\n", "plt", ".", "savefig", "(", "CONFIG", ".", "RESULTS_DIR", "+", "\"classif_auroc.pdf\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.add_scatterplot_vs_iou": [[317, 337], ["matplotlib.get_cmap", "scipy.stats.pearsonr", "matplotlib.title", "matplotlib.scatter", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.yticks", "plt.get_cmap.", "plt.get_cmap.", "numpy.max"], "function", ["None"], ["", "def", "add_scatterplot_vs_iou", "(", "\n", "ious", ",", "sizes", ",", "dataset", ",", "shortname", ",", "size_fac", ",", "scale", ",", "setylim", "=", "True", "\n", ")", ":", "\n", "    ", "cmap", "=", "plt", ".", "get_cmap", "(", "\"tab20\"", ")", "\n", "rho", "=", "pearsonr", "(", "ious", ",", "dataset", ")", "\n", "plt", ".", "title", "(", "r\"$\\rho = {:.05f}$\"", ".", "format", "(", "rho", "[", "0", "]", ")", ")", "\n", "plt", ".", "scatter", "(", "\n", "ious", ",", "\n", "dataset", ",", "\n", "s", "=", "sizes", "/", "np", ".", "max", "(", "sizes", ")", "*", "size_fac", ",", "\n", "linewidth", "=", "0.5", ",", "\n", "c", "=", "cmap", "(", "0", ")", ",", "\n", "edgecolors", "=", "cmap", "(", "1", ")", ",", "\n", "alpha", "=", "0.25", ",", "\n", ")", "\n", "plt", ".", "xlabel", "(", "\"$\\mathit{IoU}_\\mathrm{adj}$\"", ",", "labelpad", "=", "-", "10", ")", "# noqa: W605", "\n", "plt", ".", "ylabel", "(", "shortname", ",", "labelpad", "=", "-", "8", ")", "\n", "plt", ".", "ylim", "(", "-", "0.05", ",", "1.05", ")", "\n", "plt", ".", "xticks", "(", "(", "0", ",", "1", ")", ",", "fontsize", "=", "10", "*", "scale", ")", "\n", "plt", ".", "yticks", "(", "(", "0", ",", "1", ")", ",", "fontsize", "=", "10", "*", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_scatter": [[339, 353], ["print", "print", "matplotlib.figure", "plot.add_scatterplot_vs_iou", "matplotlib.tight_layout", "os.path.join", "matplotlib.savefig", "print", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.add_scatterplot_vs_iou"], ["", "def", "plot_scatter", "(", "df_full", ",", "m", "=", "\"E\"", ")", ":", "\n", "    ", "print", "(", "\"\"", ")", "\n", "print", "(", "\"making iou scatterplot ...\"", ")", "\n", "scale", "=", "0.75", "\n", "size_fac", "=", "50", "*", "scale", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "3", ",", "3", ")", ",", "dpi", "=", "300", ")", "\n", "add_scatterplot_vs_iou", "(", "df_full", "[", "\"iou\"", "]", ",", "df_full", "[", "\"S\"", "]", ",", "df_full", "[", "m", "]", ",", "m", ",", "size_fac", ",", "scale", ")", "\n", "\n", "plt", ".", "tight_layout", "(", "pad", "=", "1.0", "*", "scale", ",", "w_pad", "=", "0.5", "*", "scale", ",", "h_pad", "=", "1.5", "*", "scale", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "CONFIG", ".", "RESULTS_DIR", ",", "\"iou_vs_\"", "+", "m", "+", "\".png\"", ")", "\n", "plt", ".", "savefig", "(", "save_path", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "print", "(", "\"scatterplots saved to \"", "+", "save_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.plot.plot_metaseg_component_densities": [[356, 416], ["print", "matplotlib.figure", "matplotlib.axes", "enumerate", "plt.axes.set_xlabel", "matplotlib.savefig", "isinstance", "sklearn.decomposition.PCA().fit_transform", "sklearn.manifold.TSNE().fit_transform", "lengths.append", "print", "src.MetaSeg.functions.utils.get_grid", "src.MetaSeg.functions.utils.estimate_kernel_density", "numpy.reshape", "plt.axes.set_ylabel", "numpy.concatenate", "pca.fit.transform", "ValueError", "range", "plt.axes.plot", "plt.axes.set_ylabel", "plt.axes.set_zlabel", "sklearn.decomposition.PCA", "sklearn.manifold.TSNE", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "numpy.concatenate", "range", "len", "src.MetaSeg.functions.utils.estimate_kernel_density.", "plt.axes.plot_surface", "numpy.concatenate", "len"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.utils.get_grid", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.utils.estimate_kernel_density"], ["", "def", "plot_metaseg_component_densities", "(", "\n", "xa", ",", "filename", ",", "n_components", "=", "1", ",", "model", "=", "None", ",", "method", "=", "\"TSNE\"", "\n", ")", ":", "\n", "    ", "colors", "=", "[", "\"g\"", ",", "\"r\"", ",", "\"b\"", ",", "\"y\"", ",", "\"m\"", "]", "\n", "#     colors=['r', 'b', 'y', 'm']", "\n", "if", "not", "isinstance", "(", "xa", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "xa", "=", "[", "xa", "]", "\n", "\n", "", "print", "(", "\"Computing {}...\"", ".", "format", "(", "method", ")", ")", "\n", "if", "method", "==", "\"TSNE\"", ":", "\n", "        ", "pcs", "=", "PCA", "(", "n_components", "=", "50", ")", ".", "fit_transform", "(", "np", ".", "concatenate", "(", "xa", ")", ")", "\n", "pcs", "=", "TSNE", "(", "n_components", "=", "n_components", ")", ".", "fit_transform", "(", "pcs", ")", "\n", "", "elif", "method", "==", "\"PCA\"", ":", "\n", "        ", "if", "model", "is", "None", ":", "\n", "            ", "pca", "=", "PCA", "(", "n_components", "=", "n_components", ")", "\n", "model", "=", "pca", ".", "fit", "(", "np", ".", "concatenate", "(", "xa", ")", ")", "\n", "", "pcs", "=", "model", ".", "transform", "(", "np", ".", "concatenate", "(", "xa", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"method should be one of ['PCA', 'TSNE']\"", ")", "\n", "\n", "", "lengths", "=", "[", "0", "]", "\n", "for", "i", "in", "xa", ":", "\n", "        ", "lengths", ".", "append", "(", "i", ".", "shape", "[", "0", "]", ")", "\n", "", "lengths", "=", "[", "0", "]", "+", "[", "lengths", "[", "i", "]", "+", "lengths", "[", "i", "-", "1", "]", "for", "i", "in", "range", "(", "1", ",", "len", "(", "lengths", ")", ")", "]", "\n", "pcs", "=", "[", "pcs", "[", "lengths", "[", "i", "-", "1", "]", ":", "lengths", "[", "i", "]", "]", "for", "i", "in", "range", "(", "1", ",", "len", "(", "lengths", ")", ")", "]", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "15", ")", ")", "\n", "ax", "=", "plt", ".", "axes", "(", "projection", "=", "\"3d\"", "if", "n_components", "==", "2", "else", "None", ")", "\n", "\n", "for", "i", ",", "pc", "in", "enumerate", "(", "pcs", ")", ":", "\n", "        ", "print", "(", "\"Transforming...\"", ")", "\n", "xx", ",", "yy", ",", "positions", "=", "get_grid", "(", "pc", ",", "n_components", "=", "n_components", ")", "\n", "kernel", "=", "estimate_kernel_density", "(", "pc", ")", "\n", "f", "=", "np", ".", "reshape", "(", "kernel", "(", "positions", ")", ".", "T", ",", "xx", ".", "shape", ")", "\n", "\n", "if", "n_components", "==", "1", ":", "\n", "            ", "ax", ".", "plot", "(", "xx", ",", "f", ",", "color", "=", "colors", "[", "i", "]", ",", "linestyle", "=", "\"-\"", ")", "\n", "", "elif", "n_components", "==", "2", ":", "\n", "            ", "ax", ".", "plot_surface", "(", "\n", "xx", ",", "yy", ",", "f", ",", "rstride", "=", "1", ",", "cstride", "=", "1", ",", "color", "=", "colors", "[", "i", "]", ",", "edgecolor", "=", "\"none\"", "\n", ")", "\n", "\n", "", "", "if", "n_components", "==", "1", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "\"Density\"", ")", "\n", "", "elif", "n_components", "==", "2", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "\"Component 2\"", ")", "\n", "ax", ".", "set_zlabel", "(", "\"Density\"", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "\"Component 1\"", ")", "\n", "# ax.set_title(\"MetaSeg Component Metric Density Estimate\")", "\n", "# ax.set(xlim=(0, 100), ylim=(-50, 50), zlim=(0, 1))", "\n", "# ax.view_init(60, 35)", "\n", "# ax.set(", "\n", "#     xlim=(ax_ranges[0], ax_ranges[1]),", "\n", "#     ylim=(ax_ranges[2], ax_ranges[3]),", "\n", "#     zlim=(ax_ranges[4], ax_ranges[5]),", "\n", "# )", "\n", "# plt.show()", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.__init__": [[37, 44], ["reversed", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_cores", "=", "CONFIG", ".", "NUM_CORES", ")", ":", "\n", "        ", "self", ".", "num_cores", "=", "num_cores", "\n", "self", ".", "trainId2label_ds20k", "=", "{", "\n", "label", ".", "trainId", ":", "label", "for", "label", "in", "reversed", "(", "labels", ".", "ds20k_labels", ")", "\n", "}", "\n", "self", ".", "label2trainId_cs", "=", "{", "\n", "label", ".", "Id", ":", "label", "for", "label", "in", "reversed", "(", "labels", ".", "cs_labels", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.probs_gt_save": [[46, 55], ["h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "print", "h5py.File.close", "str", "img_path.encode"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "probs_gt_save", "(", "probs", ",", "gt", ",", "img_path", ",", "i", ")", ":", "\n", "        ", "file_name", "=", "CONFIG", ".", "INPUT_DIR", "+", "\"input\"", "+", "str", "(", "i", ")", "+", "\".hdf5\"", "\n", "f", "=", "h5py", ".", "File", "(", "file_name", ",", "\"w\"", ")", "\n", "f", ".", "create_dataset", "(", "\"probabilities\"", ",", "data", "=", "probs", ")", "\n", "f", ".", "create_dataset", "(", "\"ground_truths\"", ",", "data", "=", "gt", ")", "\n", "f", ".", "create_dataset", "(", "\"image_path\"", ",", "data", "=", "[", "img_path", ".", "encode", "(", "\"utf8\"", ")", "]", ")", "\n", "print", "(", "\"file stored:\"", ",", "file_name", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.color2trainId_ds20k": [[56, 64], ["numpy.zeros", "enumerate", "range", "len"], "methods", ["None"], ["", "def", "color2trainId_ds20k", "(", "self", ",", "gtc", ")", ":", "\n", "        ", "gt", "=", "np", ".", "zeros", "(", "shape", "=", "gtc", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "int", ")", "\n", "colors", "=", "[", "\n", "self", ".", "trainId2label_ds20k", "[", "i", "]", ".", "color", "for", "i", "in", "range", "(", "len", "(", "labels", ".", "ds20k_labels", ")", ")", "\n", "]", "\n", "for", "idx", ",", "rgb", "in", "enumerate", "(", "colors", ")", ":", "\n", "            ", "gt", "[", "(", "gtc", "==", "rgb", ")", ".", "all", "(", "2", ")", "]", "=", "idx", "\n", "", "return", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.labelId2TrainId_cityscapes": [[65, 70], ["numpy.zeros", "numpy.unique"], "methods", ["None"], ["", "def", "labelId2TrainId_cityscapes", "(", "self", ",", "gt_label", ")", ":", "\n", "        ", "gt_train", "=", "np", ".", "zeros", "(", "shape", "=", "gt_label", ".", "shape", ",", "dtype", "=", "int", ")", "\n", "for", "labelId", "in", "np", ".", "unique", "(", "gt_label", ")", ":", "\n", "            ", "gt_train", "[", "gt_label", "==", "labelId", "]", "=", "self", ".", "label2trainId_cs", "[", "labelId", "]", ".", "trainId", "\n", "", "return", "gt_train", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.ds20k": [[71, 82], ["print", "sorted", "range", "glob.glob.glob", "len", "numpy.load", "PIL.Image.open", "numpy.array", "prepare_data.prepare_data.color2trainId_ds20k", "prepare_data.prepare_data.probs_gt_save", "os.path.basename", "numpy.array.resize"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.color2trainId_ds20k", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.probs_gt_save"], ["", "def", "ds20k", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Process DS20k data\"", ")", "\n", "probs_list", "=", "sorted", "(", "glob", "(", "CONFIG", ".", "PROBS_DIR", "+", "\"**.npy\"", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "probs_list", ")", ")", ":", "\n", "            ", "image_name", "=", "os", ".", "path", ".", "basename", "(", "probs_list", "[", "i", "]", ")", "[", ":", "-", "4", "]", "\n", "probs", "=", "np", ".", "load", "(", "probs_list", "[", "i", "]", ")", "\n", "gtc", "=", "Image", ".", "open", "(", "CONFIG", ".", "GT_DIR", "+", "image_name", "+", "\".png\"", ")", "\n", "gtc", "=", "np", ".", "array", "(", "gtc", ".", "resize", "(", "probs", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", ")", ")", "\n", "gt", "=", "self", ".", "color2trainId_ds20k", "(", "gtc", ")", "\n", "image_path", "=", "CONFIG", ".", "IMG_DIR", "+", "image_name", "+", "\".png\"", "\n", "self", ".", "probs_gt_save", "(", "probs", ",", "gt", ",", "image_path", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.cityscapes": [[83, 100], ["print", "sorted", "range", "glob.glob.glob", "len", "numpy.load", "numpy.array", "prepare_data.prepare_data.labelId2TrainId_cityscapes", "prepare_data.prepare_data.probs_gt_save", "os.path.basename", "glob.glob.glob", "PIL.Image.open", "glob.glob.glob"], "methods", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.labelId2TrainId_cityscapes", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.prepare_data.prepare_data.probs_gt_save"], ["", "", "def", "cityscapes", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Process Cityscapes data\"", ")", "\n", "probs_list", "=", "sorted", "(", "glob", "(", "CONFIG", ".", "PROBS_DIR", "+", "\"**/*.npy\"", ",", "recursive", "=", "True", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "probs_list", ")", ")", ":", "\n", "            ", "image_name", "=", "os", ".", "path", ".", "basename", "(", "probs_list", "[", "i", "]", ")", "[", ":", "-", "4", "]", "\n", "probs", "=", "np", ".", "load", "(", "probs_list", "[", "i", "]", ")", "\n", "gt_label_path", "=", "glob", "(", "\n", "CONFIG", ".", "GT_DIR", "+", "\"**/*\"", "+", "image_name", "+", "\"_gtFine_labelIds.png\"", ",", "\n", "recursive", "=", "True", ",", "\n", ")", "[", "0", "]", "\n", "gt_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_label_path", ")", ")", "\n", "gt", "=", "self", ".", "labelId2TrainId_cityscapes", "(", "gt_label", ")", "\n", "image_path", "=", "glob", "(", "\n", "CONFIG", ".", "IMG_DIR", "+", "\"**/*\"", "+", "image_name", "+", "\"_leftImg8bit.png\"", ",", "\n", "recursive", "=", "True", ",", "\n", ")", "[", "0", "]", "\n", "self", ".", "probs_gt_save", "(", "probs", ",", "gt", ",", "image_path", ",", "i", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_input_i": [[18, 24], ["os.path.isfile", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "get_save_path_input_i", "(", "i", ",", "input_dir", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "join", "(", "input_dir", ",", "\"probs_{}.hdf5\"", ".", "format", "(", "i", ")", ")", ")", ":", "\n", "        ", "file_path", "=", "join", "(", "input_dir", ",", "\"probs_{}.hdf5\"", ".", "format", "(", "i", ")", ")", "\n", "", "else", ":", "\n", "        ", "file_path", "=", "join", "(", "input_dir", ",", "\"input{}.hdf5\"", ".", "format", "(", "i", ")", ")", "\n", "", "return", "file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_metrics_i": [[26, 28], ["os.path.join"], "function", ["None"], ["", "def", "get_save_path_metrics_i", "(", "i", ",", "metrics_dir", ")", ":", "\n", "    ", "return", "join", "(", "metrics_dir", ",", "\"metrics{}.p\"", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_components_i": [[30, 32], ["os.path.join"], "function", ["None"], ["", "def", "get_save_path_components_i", "(", "i", ",", "components_dir", ")", ":", "\n", "    ", "return", "join", "(", "components_dir", ",", "\"components{}.p\"", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_load": [[34, 38], ["in_out.get_save_path_metrics_i", "pickle.load", "open"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_metrics_i"], ["", "def", "metrics_load", "(", "i", ",", "metrics_dir", ")", ":", "\n", "    ", "read_path", "=", "get_save_path_metrics_i", "(", "i", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "metrics", "=", "pickle", ".", "load", "(", "open", "(", "read_path", ",", "\"rb\"", ")", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_load": [[40, 44], ["in_out.get_save_path_components_i", "pickle.load", "open"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_components_i"], ["", "def", "components_load", "(", "i", ",", "components_dir", ")", ":", "\n", "    ", "read_path", "=", "get_save_path_components_i", "(", "i", ",", "components_dir", "=", "components_dir", ")", "\n", "components", "=", "pickle", ".", "load", "(", "open", "(", "read_path", ",", "\"rb\"", ")", ")", "\n", "return", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_load_all": [[46, 52], ["numpy.stack().squeeze", "in_out.components_load", "components.append", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_load"], ["", "def", "components_load_all", "(", "num_imgs", ",", "components_dir", "=", "CONFIG", ".", "COMPONENTS_DIR", ")", ":", "\n", "    ", "components", "=", "[", "]", "\n", "for", "ind", "in", "num_imgs", ":", "\n", "        ", "comp", "=", "components_load", "(", "ind", ",", "components_dir", "=", "components_dir", ")", "\n", "components", ".", "append", "(", "comp", ")", "\n", "", "return", "np", ".", "stack", "(", "components", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.metrics_dump": [[54, 62], ["in_out.get_save_path_metrics_i", "os.path.dirname", "os.path.exists", "os.makedirs", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_metrics_i"], ["", "def", "metrics_dump", "(", "metrics", ",", "i", ",", "metrics_dir", ")", ":", "\n", "    ", "dump_path", "=", "get_save_path_metrics_i", "(", "i", ",", "metrics_dir", "=", "metrics_dir", ")", "\n", "dump_dir", "=", "os", ".", "path", ".", "dirname", "(", "dump_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dump_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "with", "open", "(", "dump_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "metrics", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.components_dump": [[64, 72], ["in_out.get_save_path_components_i", "os.path.dirname", "os.path.exists", "os.makedirs", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_components_i"], ["", "", "def", "components_dump", "(", "components", ",", "i", ",", "components_dir", "=", "CONFIG", ".", "COMPONENTS_DIR", ")", ":", "\n", "    ", "dump_path", "=", "get_save_path_components_i", "(", "i", ",", "components_dir", "=", "components_dir", ")", "\n", "dump_dir", "=", "os", ".", "path", ".", "dirname", "(", "dump_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dump_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "with", "open", "(", "dump_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "components", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_img_path_fname": [[74, 84], ["os.walk", "print", "os.path.join"], "function", ["None"], ["", "", "def", "get_img_path_fname", "(", "filename", ",", "img_dir", "=", "CONFIG", ".", "IMG_DIR", ")", ":", "\n", "    ", "path", "=", "[", "]", "\n", "for", "root", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "img_dir", ")", ":", "\n", "        ", "for", "fn", "in", "filenames", ":", "\n", "            ", "if", "filename", "in", "fn", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fn", ")", "\n", "break", "\n", "", "", "", "if", "path", "==", "[", "]", ":", "\n", "        ", "print", "(", "\"file {} not found.\"", ".", "format", "(", "filename", ")", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.image_path_load": [[86, 93], ["h5py.File", "in_out.get_save_path_input_i", "list", "in_out.get_img_path_fname", "[].decode", "f_probs.keys", "[].decode"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_input_i", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_img_path_fname"], ["", "def", "image_path_load", "(", "i", ",", "input_dir", "=", "CONFIG", ".", "INPUT_DIR", ")", ":", "\n", "    ", "with", "h5py", ".", "File", "(", "get_save_path_input_i", "(", "i", ",", "input_dir", "=", "input_dir", ")", ",", "\"r\"", ")", "as", "f_probs", ":", "\n", "        ", "if", "\"file_names\"", "in", "list", "(", "f_probs", ".", "keys", "(", ")", ")", ":", "\n", "            ", "image_path", "=", "get_img_path_fname", "(", "f_probs", "[", "\"file_names\"", "]", "[", "0", "]", ".", "decode", "(", "\"utf8\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "image_path", "=", "f_probs", "[", "\"image_path\"", "]", "[", "0", "]", ".", "decode", "(", "\"utf8\"", ")", "\n", "", "", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load": [[95, 109], ["h5py.File", "numpy.squeeze", "numpy.squeeze", "in_out.get_save_path_input_i", "list", "in_out.get_img_path_fname", "[].decode", "f_probs.keys", "[].decode"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_save_path_input_i", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_img_path_fname"], ["", "def", "probs_gt_load", "(", "i", ",", "input_dir", "=", "CONFIG", ".", "INPUT_DIR", ",", "preds", "=", "False", ")", ":", "\n", "    ", "with", "h5py", ".", "File", "(", "get_save_path_input_i", "(", "i", ",", "input_dir", "=", "input_dir", ")", ",", "\"r\"", ")", "as", "f_probs", ":", "\n", "        ", "if", "preds", ":", "\n", "            ", "probs", "=", "f_probs", "[", "\"prediction\"", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "probs", "=", "f_probs", "[", "\"probabilities\"", "]", "[", "(", ")", "]", "\n", "", "gt", "=", "f_probs", "[", "\"ground_truths\"", "]", "[", "(", ")", "]", "\n", "probs", "=", "np", ".", "squeeze", "(", "probs", ")", "\n", "gt", "=", "np", ".", "squeeze", "(", "gt", ")", "\n", "if", "\"file_names\"", "in", "list", "(", "f_probs", ".", "keys", "(", ")", ")", ":", "# compatibility with metaseg 1.0", "\n", "            ", "image_path", "=", "get_img_path_fname", "(", "f_probs", "[", "\"file_names\"", "]", "[", "0", "]", ".", "decode", "(", "\"utf8\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "image_path", "=", "f_probs", "[", "\"image_path\"", "]", "[", "0", "]", ".", "decode", "(", "\"utf8\"", ")", "\n", "", "", "return", "probs", ",", "gt", ",", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load_all": [[111, 131], ["isinstance", "isinstance", "in_out.probs_gt_load", "probs.append", "gt.append", "image_paths.append", "numpy.stack", "numpy.stack", "tuple", "in_out.get_indices", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.probs_gt_load", "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices"], ["", "def", "probs_gt_load_all", "(", "num_imgs", ",", "input_dir", "=", "CONFIG", ".", "INPUT_DIR", ")", ":", "\n", "    ", "if", "isinstance", "(", "num_imgs", ",", "int", ")", ":", "\n", "        ", "num_imgs", "=", "get_indices", "(", "input_dir", ")", "[", ":", "num_imgs", "]", "\n", "", "elif", "isinstance", "(", "num_imgs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"num_imgs should either be of type int, list or tuple \"", "\n", "\"but received {}\"", ".", "format", "(", "type", "(", "num_imgs", ")", ")", "\n", ")", "\n", "\n", "", "probs", "=", "[", "]", "\n", "gt", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "for", "i", "in", "num_imgs", ":", "\n", "        ", "p", ",", "g", ",", "img_path", "=", "probs_gt_load", "(", "i", ",", "input_dir", "=", "input_dir", ")", "\n", "probs", ".", "append", "(", "p", ")", "\n", "gt", ".", "append", "(", "g", ")", "\n", "image_paths", ".", "append", "(", "img_path", ")", "\n", "", "return", "np", ".", "stack", "(", "probs", ")", ",", "np", ".", "stack", "(", "gt", ")", ",", "tuple", "(", "image_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.stats_dump": [[133, 313], ["dict", "dict", "numpy.argmax", "df_full.corr", "open", "print", "print", "print", "print", "sorted", "print", "print", "sorted", "print", "print", "sorted", "print", "print", "sorted", "print", "print", "sorted", "print", "print", "sorted", "print", "print", "print", "print", "sorted", "print", "print", "sorted", "print", "print", "sorted", "print", "print", "sorted", "print", "print", "print", "sorted", "print", "print", "print", "print", "df_all.copy", "numpy.mean", "numpy.std", "os.path.join", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "numpy.sum", "numpy.sum", "len", "os.path.exists", "os.makedirs", "open", "pickle.dump", "df_all[].nonzero", "os.path.join"], "function", ["None"], ["", "def", "stats_dump", "(", "stats", ",", "df_all", ",", "y0a", ")", ":", "\n", "    ", "df_full", "=", "df_all", ".", "copy", "(", ")", ".", "loc", "[", "df_all", "[", "\"S_in\"", "]", ".", "nonzero", "(", ")", "[", "0", "]", "]", "\n", "iou_corrs", "=", "df_full", ".", "corr", "(", ")", "[", "\"iou\"", "]", "\n", "mean_stats", "=", "dict", "(", "{", "}", ")", "\n", "std_stats", "=", "dict", "(", "{", "}", ")", "\n", "for", "s", "in", "stats", ":", "\n", "        ", "if", "s", "not", "in", "[", "\"alphas\"", ",", "\"n_av\"", ",", "\"n_metrics\"", ",", "\"metric_names\"", "]", ":", "\n", "            ", "mean_stats", "[", "s", "]", "=", "np", ".", "mean", "(", "stats", "[", "s", "]", ",", "axis", "=", "0", ")", "\n", "std_stats", "[", "s", "]", "=", "np", ".", "std", "(", "stats", "[", "s", "]", ",", "axis", "=", "0", ")", "\n", "", "", "best_pen_ind", "=", "np", ".", "argmax", "(", "mean_stats", "[", "\"penalized_val_acc\"", "]", ")", "\n", "\n", "# dump stats latex ready", "\n", "with", "open", "(", "join", "(", "CONFIG", ".", "RESULTS_DIR", ",", "\"av_results.txt\"", ")", ",", "\"wt\"", ")", "as", "f", ":", "\n", "\n", "        ", "print", "(", "iou_corrs", ",", "file", "=", "f", ")", "\n", "print", "(", "\" \"", ",", "file", "=", "f", ")", "\n", "\n", "print", "(", "\"classification\"", ",", "file", "=", "f", ")", "\n", "print", "(", "\n", "\"        & train           &  val             &    \\\\\\\\ \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "M", "=", "sorted", "(", "[", "s", "for", "s", "in", "mean_stats", "if", "\"penalized\"", "in", "s", "and", "\"acc\"", "in", "s", "]", ")", "\n", "print", "(", "\"ACC penalized               \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.2f}\\%\"", ".", "format", "(", "100", "*", "mean_stats", "[", "s", "]", "[", "best_pen_ind", "]", ")", "# noqa: W605", "\n", "+", "\"(\\pm{:.2f}\\%)$\"", ".", "format", "(", "# noqa: W605", "\n", "100", "*", "std_stats", "[", "s", "]", "[", "best_pen_ind", "]", "\n", ")", ",", "\n", "end", "=", "\" & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "M", "=", "sorted", "(", "[", "s", "for", "s", "in", "mean_stats", "if", "\"plain\"", "in", "s", "and", "\"acc\"", "in", "s", "]", ")", "\n", "print", "(", "\"ACC unpenalized             \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.2f}\\%\"", ".", "format", "(", "100", "*", "mean_stats", "[", "s", "]", "[", "best_pen_ind", "]", ")", "# noqa: W605", "\n", "+", "\"(\\pm{:.2f}\\%)$\"", ".", "format", "(", "# noqa: W605", "\n", "100", "*", "std_stats", "[", "s", "]", "[", "best_pen_ind", "]", "\n", ")", ",", "\n", "end", "=", "\" & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "M", "=", "sorted", "(", "[", "s", "for", "s", "in", "mean_stats", "if", "\"entropy\"", "in", "s", "and", "\"acc\"", "in", "s", "]", ")", "\n", "print", "(", "\"ACC entropy baseline        \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.2f}\\%\"", ".", "format", "(", "100", "*", "mean_stats", "[", "s", "]", ")", "# noqa: W605", "\n", "+", "\"(\\pm{:.2f}\\%)$\"", ".", "format", "(", "100", "*", "std_stats", "[", "s", "]", ")", ",", "# noqa: W605", "\n", "end", "=", "\" & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "\n", "M", "=", "sorted", "(", "[", "s", "for", "s", "in", "mean_stats", "if", "\"penalized\"", "in", "s", "and", "\"auroc\"", "in", "s", "]", ")", "\n", "print", "(", "\"AUROC penalized             \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.2f}\\%\"", ".", "format", "(", "100", "*", "mean_stats", "[", "s", "]", "[", "best_pen_ind", "]", ")", "# noqa: W605", "\n", "+", "\"(\\pm{:.2f}\\%)$\"", ".", "format", "(", "# noqa: W605", "\n", "100", "*", "std_stats", "[", "s", "]", "[", "best_pen_ind", "]", "\n", ")", ",", "\n", "end", "=", "\" & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "M", "=", "sorted", "(", "[", "s", "for", "s", "in", "mean_stats", "if", "\"plain\"", "in", "s", "and", "\"auroc\"", "in", "s", "]", ")", "\n", "print", "(", "\"AUROC unpenalized           \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.2f}\\%\"", ".", "format", "(", "100", "*", "mean_stats", "[", "s", "]", "[", "best_pen_ind", "]", ")", "# noqa: W605", "\n", "+", "\"(\\pm{:.2f}\\%)$\"", ".", "format", "(", "# noqa: W605", "\n", "100", "*", "std_stats", "[", "s", "]", "[", "best_pen_ind", "]", "\n", ")", ",", "\n", "end", "=", "\" & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "M", "=", "sorted", "(", "[", "s", "for", "s", "in", "mean_stats", "if", "\"entropy\"", "in", "s", "and", "\"auroc\"", "in", "s", "]", ")", "\n", "print", "(", "\"AUROC entropy baseline      \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.2f}\\%\"", ".", "format", "(", "100", "*", "mean_stats", "[", "s", "]", ")", "# noqa: W605", "\n", "+", "\"(\\pm{:.2f}\\%)$\"", ".", "format", "(", "100", "*", "std_stats", "[", "s", "]", ")", ",", "# noqa: W605", "\n", "end", "=", "\" & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "\n", "print", "(", "\" \"", ",", "file", "=", "f", ")", "\n", "print", "(", "\"regression\"", ",", "file", "=", "f", ")", "\n", "\n", "M", "=", "sorted", "(", "\n", "[", "s", "for", "s", "in", "mean_stats", "if", "\"regr\"", "in", "s", "and", "\"mse\"", "in", "s", "and", "\"entropy\"", "not", "in", "s", "]", "\n", ")", "\n", "print", "(", "\"$\\sigma$, all metrics       \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "# noqa: W605", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.3f}\"", ".", "format", "(", "mean_stats", "[", "s", "]", ")", "\n", "+", "\"(\\pm{:.3f})$\"", ".", "format", "(", "std_stats", "[", "s", "]", ")", ",", "# noqa: W605", "\n", "end", "=", "\"    & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "M", "=", "sorted", "(", "\n", "[", "s", "for", "s", "in", "mean_stats", "if", "\"regr\"", "in", "s", "and", "\"mse\"", "in", "s", "and", "\"entropy\"", "in", "s", "]", "\n", ")", "\n", "print", "(", "\"$\\sigma$, entropy baseline  \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "# noqa: W605", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.3f}\"", ".", "format", "(", "mean_stats", "[", "s", "]", ")", "\n", "+", "\"(\\pm{:.3f})$\"", ".", "format", "(", "std_stats", "[", "s", "]", ")", ",", "# noqa: W605", "\n", "end", "=", "\"    & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "\n", "M", "=", "sorted", "(", "\n", "[", "s", "for", "s", "in", "mean_stats", "if", "\"regr\"", "in", "s", "and", "\"r2\"", "in", "s", "and", "\"entropy\"", "not", "in", "s", "]", "\n", ")", "\n", "print", "(", "\"$R^2$, all metrics          \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.2f}\\%\"", ".", "format", "(", "100", "*", "mean_stats", "[", "s", "]", ")", "# noqa: W605", "\n", "+", "\"(\\pm{:.2f}\\%)$\"", ".", "format", "(", "100", "*", "std_stats", "[", "s", "]", ")", ",", "# noqa: W605", "\n", "end", "=", "\" & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "M", "=", "sorted", "(", "\n", "[", "s", "for", "s", "in", "mean_stats", "if", "\"regr\"", "in", "s", "and", "\"r2\"", "in", "s", "and", "\"entropy\"", "in", "s", "]", "\n", ")", "\n", "print", "(", "\"$R^2$, entropy baseline     \"", ",", "end", "=", "\" & \"", ",", "file", "=", "f", ")", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "\"${:.2f}\\%\"", ".", "format", "(", "100", "*", "mean_stats", "[", "s", "]", ")", "# noqa: W605", "\n", "+", "\"(\\pm{:.2f}\\%)$\"", ".", "format", "(", "100", "*", "std_stats", "[", "s", "]", ")", ",", "# noqa: W605", "\n", "end", "=", "\" & \"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\"   \\\\\\\\ \"", ",", "file", "=", "f", ")", "\n", "\n", "print", "(", "\" \"", ",", "file", "=", "f", ")", "\n", "M", "=", "sorted", "(", "[", "s", "for", "s", "in", "mean_stats", "if", "\"iou\"", "in", "s", "]", ")", "\n", "for", "s", "in", "M", ":", "\n", "            ", "print", "(", "\n", "s", ",", "\n", "\": {:.0f}\"", ".", "format", "(", "mean_stats", "[", "s", "]", ")", "\n", "+", "\"($\\pm${:.0f})\"", ".", "format", "(", "std_stats", "[", "s", "]", ")", ",", "# noqa: W605", "\n", "file", "=", "f", ",", "\n", ")", "\n", "", "print", "(", "\n", "\"IoU=0:\"", ",", "\n", "np", ".", "sum", "(", "y0a", "==", "1", ")", ",", "\n", "\"of\"", ",", "\n", "y0a", ".", "shape", "[", "0", "]", ",", "\n", "\"non-empty components\"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "print", "(", "\n", "\"IoU>0:\"", ",", "\n", "np", ".", "sum", "(", "y0a", "==", "0", ")", ",", "\n", "\"of\"", ",", "\n", "y0a", ".", "shape", "[", "0", "]", ",", "\n", "\"non-empty components\"", ",", "\n", "file", "=", "f", ",", "\n", ")", "\n", "print", "(", "\"total number of components: \"", ",", "len", "(", "df_all", ")", ",", "file", "=", "f", ")", "\n", "print", "(", "\" \"", ",", "file", "=", "f", ")", "\n", "\n", "dump_dir", "=", "CONFIG", ".", "STATS_DIR", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dump_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "with", "open", "(", "join", "(", "dump_dir", ",", "\"stats.p\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "stats", ",", "f", ")", "\n", "", "", "return", "mean_stats", ",", "std_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.in_out.get_indices": [[315, 320], ["inds.sort", "int", "os.listdir", "re.match().group", "os.path.splitext", "re.match", "os.path.splitext"], "function", ["None"], ["", "def", "get_indices", "(", "directory", ")", ":", "\n", "    ", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "directory", ")", "if", "splitext", "(", "f", ")", "[", "-", "1", "]", "in", "(", "\".hdf5\"", ",", "\".p\"", ")", "]", "\n", "inds", "=", "[", "int", "(", "re", ".", "match", "(", "\".*?([0-9]+)$\"", ",", "splitext", "(", "f", ")", "[", "0", "]", ")", ".", "group", "(", "1", ")", ")", "for", "f", "in", "files", "]", "\n", "inds", ".", "sort", "(", ")", "\n", "return", "inds", "\n", "", ""]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.utils.estimate_kernel_density": [[7, 12], ["logging.getLogger", "logging.getLogger.debug", "scipy.stats.gaussian_kde"], "function", ["None"], ["def", "estimate_kernel_density", "(", "pc", ")", ":", "\n", "    ", "log", "=", "logging", ".", "getLogger", "(", "\"estimate_kernel_density\"", ")", "\n", "log", ".", "debug", "(", "\"Computing Gaussian Kernel...\"", ")", "\n", "values", "=", "pc", ".", "T", "\n", "return", "gaussian_kde", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RonMcKay_OODRetrieval.functions.utils.get_grid": [[14, 40], ["numpy.linspace", "min", "max", "np.linspace.ravel", "numpy.meshgrid", "max", "min", "min", "max", "min", "max", "numpy.linspace", "numpy.linspace", "numpy.vstack", "max", "min", "max", "min", "np.linspace.ravel", "yy.ravel"], "function", ["None"], ["", "def", "get_grid", "(", "pc", ",", "n_components", ",", "n_steps", "=", "100", ")", ":", "\n", "    ", "if", "n_components", "==", "1", ":", "\n", "        ", "x", "=", "pc", "[", ":", ",", "0", "]", "\n", "delta_x", "=", "(", "max", "(", "x", ")", "-", "min", "(", "x", ")", ")", "/", "10", "\n", "\n", "xmin", "=", "min", "(", "x", ")", "-", "delta_x", "\n", "xmax", "=", "max", "(", "x", ")", "+", "delta_x", "\n", "\n", "xx", "=", "np", ".", "linspace", "(", "xmin", ",", "xmax", ",", "num", "=", "n_steps", ")", "\n", "return", "xx", ",", "xx", ",", "xx", ".", "ravel", "(", ")", "\n", "", "elif", "n_components", "==", "2", ":", "\n", "        ", "x", "=", "pc", "[", ":", ",", "0", "]", "\n", "y", "=", "pc", "[", ":", ",", "1", "]", "\n", "delta_x", "=", "(", "max", "(", "x", ")", "-", "min", "(", "x", ")", ")", "/", "10", "\n", "delta_y", "=", "(", "max", "(", "y", ")", "-", "min", "(", "y", ")", ")", "/", "10", "\n", "\n", "xmin", "=", "min", "(", "x", ")", "-", "delta_x", "\n", "xmax", "=", "max", "(", "x", ")", "+", "delta_x", "\n", "ymin", "=", "min", "(", "y", ")", "-", "delta_y", "\n", "ymax", "=", "max", "(", "y", ")", "+", "delta_y", "\n", "\n", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "\n", "np", ".", "linspace", "(", "xmin", ",", "xmax", ",", "num", "=", "n_steps", ")", ",", "np", ".", "linspace", "(", "ymin", ",", "ymax", ",", "num", "=", "n_steps", ")", "\n", ")", "\n", "\n", "return", "xx", ",", "yy", ",", "np", ".", "vstack", "(", "[", "xx", ".", "ravel", "(", ")", ",", "yy", ".", "ravel", "(", ")", "]", ")", "\n", "", "", ""]]}