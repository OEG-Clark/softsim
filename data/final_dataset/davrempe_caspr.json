{"home.repos.pwc.inspect_result.davrempe_caspr.caspr.viz.parse_args": [[24, 34], ["argparse.ArgumentParser", "utils.config_utils.get_general_options", "utils.config_utils.get_viz_options", "utils.config_utils.get_viz_options.parse_known_args"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_general_options", "home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_viz_options"], ["def", "parse_args", "(", "args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "allow_abbrev", "=", "False", ")", "\n", "\n", "parser", "=", "get_general_options", "(", "parser", ")", "\n", "parser", "=", "get_viz_options", "(", "parser", ")", "\n", "\n", "flags", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "flags", "=", "flags", "[", "0", "]", "\n", "\n", "return", "flags", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.caspr.viz.viz": [[35, 106], ["utils.torch_utils.get_device", "print", "models.caspr.CaSPR", "models.caspr.CaSPR.to", "data.caspr_dataset.DynamicPCLDataset", "torch.utils.data.DataLoader", "utils.viz_utils.VizConfig", "print", "torch.load", "utils.torch_utils.load_encoder_weights_from_full", "torch.no_grad", "utils.viz_utils.test_viz", "print", "torch.load", "utils.torch_utils.load_weights", "numpy.random.seed"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.get_device", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.load_encoder_weights_from_full", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.test_viz", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.load_weights"], ["", "def", "viz", "(", "flags", ")", ":", "\n", "# General options", "\n", "    ", "num_workers", "=", "flags", ".", "num_workers", "\n", "\n", "data_cfg", "=", "flags", ".", "data_cfg", "\n", "seq_len", "=", "flags", ".", "seq_len", "\n", "num_pts", "=", "flags", ".", "num_pts", "\n", "\n", "augment_quad", "=", "flags", ".", "augment_quad", "\n", "augment_pairs", "=", "flags", ".", "augment_pairs", "\n", "\n", "pretrain_tnocs", "=", "flags", ".", "pretrain_tnocs", "\n", "\n", "model_in_path", "=", "flags", ".", "weights", "\n", "radii_list", "=", "flags", ".", "radii", "\n", "local_feat_size", "=", "flags", ".", "local_feat_size", "\n", "latent_feat_size", "=", "flags", ".", "latent_feat_size", "\n", "ode_hidden_size", "=", "flags", ".", "ode_hidden_size", "\n", "motion_feat_size", "=", "flags", ".", "motion_feat_size", "\n", "cnf_blocks", "=", "flags", ".", "cnf_blocks", "\n", "regress_tnocs", "=", "flags", ".", "regress_tnocs", "\n", "\n", "# Viz-specific options", "\n", "shuffle_test", "=", "flags", ".", "shuffle_test", "\n", "\n", "viz_tnocs", "=", "flags", ".", "viz_tnocs", "\n", "viz_observed", "=", "flags", ".", "viz_observed", "\n", "viz_interpolated", "=", "flags", ".", "viz_interpolated", "\n", "\n", "device", "=", "get_device", "(", ")", "\n", "\n", "print", "(", "'Setting batch size to 1 for visualization...'", ")", "\n", "batch_size", "=", "1", "\n", "\n", "# create caspr model", "\n", "model", "=", "CaSPR", "(", "radii_list", "=", "radii_list", ",", "\n", "local_feat_size", "=", "local_feat_size", ",", "\n", "latent_feat_size", "=", "latent_feat_size", ",", "\n", "ode_hidden_size", "=", "ode_hidden_size", ",", "\n", "pretrain_tnocs", "=", "pretrain_tnocs", ",", "\n", "augment_quad", "=", "augment_quad", ",", "\n", "augment_pairs", "=", "augment_pairs", ",", "\n", "cnf_blocks", "=", "cnf_blocks", ",", "\n", "motion_feat_size", "=", "motion_feat_size", ",", "\n", "regress_tnocs", "=", "regress_tnocs", "\n", ")", "\n", "\n", "if", "pretrain_tnocs", "and", "model_in_path", "!=", "''", ":", "\n", "# load in only pretrained tnocs weights", "\n", "        ", "print", "(", "'Loading weights for pre-trained canonicalizer from %s...'", "%", "(", "model_in_path", ")", ")", "\n", "loaded_state_dict", "=", "torch", ".", "load", "(", "model_in_path", ",", "map_location", "=", "device", ")", "\n", "load_encoder_weights_from_full", "(", "model", ",", "loaded_state_dict", ")", "\n", "", "elif", "model_in_path", "!=", "''", ":", "\n", "        ", "print", "(", "'Loading model weights from %s...'", "%", "(", "model_in_path", ")", ")", "\n", "loaded_state_dict", "=", "torch", ".", "load", "(", "model_in_path", ",", "map_location", "=", "device", ")", "\n", "load_weights", "(", "model", ",", "loaded_state_dict", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "# visualize results on test set", "\n", "test_dataset", "=", "DynamicPCLDataset", "(", "data_cfg", ",", "split", "=", "'test'", ",", "train_frac", "=", "0.8", ",", "val_frac", "=", "0.1", ",", "\n", "num_pts", "=", "num_pts", ",", "seq_len", "=", "seq_len", ",", "\n", "shift_time_to_zero", "=", "(", "not", "pretrain_tnocs", ")", ",", "\n", "random_point_sample", "=", "False", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle_test", ",", "num_workers", "=", "num_workers", ",", "\n", "worker_init_fn", "=", "lambda", "_", ":", "np", ".", "random", ".", "seed", "(", ")", ")", "# get around numpy RNG seed bug", "\n", "\n", "# visualize predictions", "\n", "viz_cfg", "=", "VizConfig", "(", "flags", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "test_viz", "(", "viz_cfg", ",", "model", ",", "test_dataset", ",", "test_loader", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.caspr.viz.main": [[107, 109], ["train"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.caspr.train.train"], ["", "", "def", "main", "(", "flags", ")", ":", "\n", "    ", "train", "(", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.caspr.train.parse_args": [[28, 38], ["argparse.ArgumentParser", "utils.config_utils.get_general_options", "utils.config_utils.get_train_options", "utils.config_utils.get_train_options.parse_known_args"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_general_options", "home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_train_options"], ["def", "parse_args", "(", "args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "allow_abbrev", "=", "False", ")", "\n", "\n", "parser", "=", "get_general_options", "(", "parser", ")", "\n", "parser", "=", "get_train_options", "(", "parser", ")", "\n", "\n", "flags", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "flags", "=", "flags", "[", "0", "]", "\n", "\n", "return", "flags", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.caspr.train.train": [[39, 191], ["os.path.join", "utils.train_utils.log", "data.caspr_dataset.DynamicPCLDataset", "torch.utils.data.DataLoader", "data.caspr_dataset.DynamicPCLDataset", "torch.utils.data.DataLoader", "utils.torch_utils.get_device", "models.caspr.CaSPR", "nn.DataParallel.to", "torch.Adam", "utils.torch_utils.count_params", "utils.train_utils.log", "utils.train_utils.TrainLossTracker", "range", "os.path.exists", "os.mkdir", "utils.train_utils.log", "print", "torch.load", "torch.load", "torch.load", "utils.torch_utils.load_encoder_weights_from_full", "torch.DataParallel", "nn.DataParallel.parameters", "utils.train_utils.run_one_epoch", "print", "torch.load", "torch.load", "torch.load", "utils.torch_utils.load_weights", "str", "utils.train_utils.TrainLossTracker.plot_cur_loss_curves", "os.path.join", "torch.save", "torch.save", "torch.save", "numpy.random.seed", "numpy.random.seed", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.test_utils.TestStatTracker", "utils.train_utils.run_one_epoch", "utils.test_utils.TestStatTracker.get_mean_stats", "nn.DataParallel.state_dict", "math.isnan", "utils.train_utils.TrainLossTracker.record_val_step", "utils.train_utils.print_stats", "len", "utils.train_utils.log", "os.path.join", "torch.save", "torch.save", "torch.save", "min", "len", "nn.DataParallel.state_dict"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.get_device", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.count_params", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.load_encoder_weights_from_full", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.run_one_epoch", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.load_weights", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.TrainLossTracker.plot_cur_loss_curves", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.run_one_epoch", "home.repos.pwc.inspect_result.davrempe_caspr.utils.test_utils.TestStatTracker.get_mean_stats", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.TrainLossTracker.record_val_step", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.print_stats", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log"], ["", "def", "train", "(", "flags", ")", ":", "\n", "# General options", "\n", "    ", "num_workers", "=", "flags", ".", "num_workers", "\n", "\n", "model_out_path", "=", "flags", ".", "out", "\n", "\n", "data_cfg", "=", "flags", ".", "data_cfg", "\n", "batch_size", "=", "flags", ".", "batch_size", "\n", "seq_len", "=", "flags", ".", "seq_len", "\n", "num_pts", "=", "flags", ".", "num_pts", "\n", "\n", "augment_quad", "=", "flags", ".", "augment_quad", "\n", "augment_pairs", "=", "flags", ".", "augment_pairs", "\n", "\n", "pretrain_tnocs", "=", "flags", ".", "pretrain_tnocs", "\n", "\n", "model_in_path", "=", "flags", ".", "weights", "\n", "radii_list", "=", "flags", ".", "radii", "\n", "local_feat_size", "=", "flags", ".", "local_feat_size", "\n", "latent_feat_size", "=", "flags", ".", "latent_feat_size", "\n", "ode_hidden_size", "=", "flags", ".", "ode_hidden_size", "\n", "motion_feat_size", "=", "flags", ".", "motion_feat_size", "\n", "cnf_blocks", "=", "flags", ".", "cnf_blocks", "\n", "regress_tnocs", "=", "flags", ".", "regress_tnocs", "\n", "\n", "cnf_loss_weight", "=", "flags", ".", "cnf_loss", "\n", "tnocs_loss_weight", "=", "flags", ".", "tnocs_loss", "\n", "\n", "# Train-only options", "\n", "parallel_train", "=", "flags", ".", "use_parallel", "\n", "\n", "num_epochs", "=", "flags", ".", "epochs", "\n", "val_every", "=", "flags", ".", "val_every", "\n", "save_every", "=", "flags", ".", "save_every", "\n", "print_stats_every", "=", "flags", ".", "print_every", "\n", "\n", "lr", "=", "flags", ".", "lr", "\n", "betas", "=", "(", "flags", ".", "beta1", ",", "flags", ".", "beta2", ")", "\n", "eps", "=", "flags", ".", "eps", "\n", "weight_decay", "=", "flags", ".", "decay", "\n", "\n", "# prepare output", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_out_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_out_path", ")", "\n", "", "log_out", "=", "os", ".", "path", ".", "join", "(", "model_out_path", ",", "'train_log.txt'", ")", "\n", "log", "(", "log_out", ",", "flags", ")", "\n", "\n", "# load train and validation sets", "\n", "train_dataset", "=", "DynamicPCLDataset", "(", "data_cfg", ",", "split", "=", "'train'", ",", "train_frac", "=", "0.8", ",", "val_frac", "=", "0.1", ",", "\n", "num_pts", "=", "num_pts", ",", "seq_len", "=", "seq_len", ",", "\n", "shift_time_to_zero", "=", "(", "not", "pretrain_tnocs", ")", ",", "\n", "random_point_sample", "=", "True", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "worker_init_fn", "=", "lambda", "_", ":", "np", ".", "random", ".", "seed", "(", ")", ")", "# get around numpy RNG seed bug", "\n", "\n", "val_dataset", "=", "DynamicPCLDataset", "(", "data_cfg", ",", "split", "=", "'val'", ",", "train_frac", "=", "0.8", ",", "val_frac", "=", "0.1", ",", "\n", "num_pts", "=", "num_pts", ",", "seq_len", "=", "seq_len", ",", "\n", "shift_time_to_zero", "=", "(", "not", "pretrain_tnocs", ")", ",", "\n", "random_point_sample", "=", "False", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "worker_init_fn", "=", "lambda", "_", ":", "np", ".", "random", ".", "seed", "(", ")", ")", "\n", "\n", "if", "parallel_train", ":", "\n", "        ", "log", "(", "log_out", ",", "'Attempting to use all available GPUs for parallel training...'", ")", "\n", "# gets GPU 0 if available, else CPU", "\n", "", "device", "=", "get_device", "(", ")", "\n", "\n", "# create caspr model", "\n", "model", "=", "CaSPR", "(", "radii_list", "=", "radii_list", ",", "\n", "local_feat_size", "=", "local_feat_size", ",", "\n", "latent_feat_size", "=", "latent_feat_size", ",", "\n", "ode_hidden_size", "=", "ode_hidden_size", ",", "\n", "pretrain_tnocs", "=", "pretrain_tnocs", ",", "\n", "augment_quad", "=", "augment_quad", ",", "\n", "augment_pairs", "=", "augment_pairs", ",", "\n", "cnf_blocks", "=", "cnf_blocks", ",", "\n", "motion_feat_size", "=", "motion_feat_size", ",", "\n", "regress_tnocs", "=", "regress_tnocs", "\n", ")", "\n", "\n", "if", "pretrain_tnocs", "and", "model_in_path", "!=", "''", ":", "\n", "# load in only pretrained tnocs weights", "\n", "        ", "print", "(", "'Loading weights for pre-trained canonicalizer from %s...'", "%", "(", "model_in_path", ")", ")", "\n", "loaded_state_dict", "=", "torch", ".", "load", "(", "model_in_path", ",", "map_location", "=", "device", ")", "\n", "load_encoder_weights_from_full", "(", "model", ",", "loaded_state_dict", ")", "\n", "", "elif", "model_in_path", "!=", "''", ":", "\n", "        ", "print", "(", "'Loading model weights from %s...'", "%", "(", "model_in_path", ")", ")", "\n", "loaded_state_dict", "=", "torch", ".", "load", "(", "model_in_path", ",", "map_location", "=", "device", ")", "\n", "load_weights", "(", "model", ",", "loaded_state_dict", ")", "\n", "\n", "", "if", "parallel_train", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "params", "=", "count_params", "(", "model", ")", "\n", "log", "(", "log_out", ",", "'Num model params: '", "+", "str", "(", "params", ")", ")", "\n", "\n", "loss_tracker", "=", "TrainLossTracker", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "# train", "\n", "        ", "run_one_epoch", "(", "model", ",", "train_loader", ",", "device", ",", "optimizer", ",", "\n", "cnf_loss_weight", ",", "tnocs_loss_weight", ",", "\n", "epoch", ",", "loss_tracker", ",", "log_out", ",", "\n", "mode", "=", "'train'", ",", "print_stats_every", "=", "print_stats_every", ")", "\n", "\n", "# validate", "\n", "if", "epoch", "%", "val_every", "==", "0", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "# must do this to avoid running out of memory", "\n", "                ", "val_stat_tracker", "=", "TestStatTracker", "(", ")", "\n", "\n", "run_one_epoch", "(", "model", ",", "val_loader", ",", "device", ",", "None", ",", "\n", "cnf_loss_weight", ",", "tnocs_loss_weight", ",", "\n", "epoch", ",", "val_stat_tracker", ",", "log_out", ",", "\n", "mode", "=", "'val'", ",", "print_stats_every", "=", "print_stats_every", ")", "\n", "\n", "# get final aggregate stats", "\n", "mean_losses", "=", "val_stat_tracker", ".", "get_mean_stats", "(", ")", "\n", "total_loss_out", ",", "mean_cnf_err", ",", "mean_tnocs_pos_err", ",", "mean_tnocs_time_err", ",", "mean_nfe", "=", "mean_losses", "\n", "\n", "# early stopping - save if it's the best so far", "\n", "if", "not", "math", ".", "isnan", "(", "total_loss_out", ")", ":", "\n", "                    ", "if", "len", "(", "loss_tracker", ".", "val_losses", ")", "==", "0", ":", "\n", "                        ", "min_loss_so_far", "=", "True", "\n", "", "else", ":", "\n", "                        ", "min_loss_so_far", "=", "total_loss_out", "<", "min", "(", "loss_tracker", ".", "val_losses", ")", "\n", "\n", "# record loss curve and print stats", "\n", "", "loss_tracker", ".", "record_val_step", "(", "total_loss_out", ",", "epoch", "*", "len", "(", "train_loader", ")", ")", "\n", "print_stats", "(", "log_out", ",", "epoch", ",", "0", ",", "0", ",", "total_loss_out", ",", "mean_cnf_err", ",", "\n", "mean_tnocs_pos_err", ",", "mean_tnocs_time_err", ",", "\n", "'VAL'", ",", "mean_nfe", ")", "\n", "\n", "if", "min_loss_so_far", ":", "\n", "                        ", "log", "(", "log_out", ",", "'BEST Val loss so far! Saving checkpoint...'", ")", "\n", "save_name", "=", "'BEST_time_model.pth'", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "model_out_path", ",", "save_name", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_file", ")", "\n", "\n", "# viz loss curve", "\n", "", "", "", "loss_tracker", ".", "plot_cur_loss_curves", "(", "model_out_path", ")", "\n", "\n", "", "if", "epoch", "%", "save_every", "==", "0", ":", "\n", "# save model parameters", "\n", "            ", "save_name", "=", "'time_model_%d.pth'", "%", "(", "epoch", ")", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "model_out_path", ",", "save_name", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.caspr.train.main": [[192, 194], ["train.train"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.caspr.train.train"], ["", "", "", "def", "main", "(", "flags", ")", ":", "\n", "    ", "train", "(", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.caspr.test.parse_args": [[29, 39], ["argparse.ArgumentParser", "utils.config_utils.get_general_options", "utils.config_utils.get_test_options", "utils.config_utils.get_test_options.parse_known_args"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_general_options", "home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_test_options"], ["def", "parse_args", "(", "args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "allow_abbrev", "=", "False", ")", "\n", "\n", "parser", "=", "get_general_options", "(", "parser", ")", "\n", "parser", "=", "get_test_options", "(", "parser", ")", "\n", "\n", "flags", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "flags", "=", "flags", "[", "0", "]", "\n", "\n", "return", "flags", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.caspr.test.test": [[40, 171], ["utils.torch_utils.get_device", "models.caspr.CaSPR", "models.caspr.CaSPR.to", "data.caspr_dataset.DynamicPCLDataset", "torch.utils.data.DataLoader", "os.path.join", "utils.train_utils.log", "os.path.exists", "os.mkdir", "print", "torch.load", "utils.torch_utils.load_encoder_weights_from_full", "torch.no_grad", "print", "torch.load", "utils.torch_utils.load_weights", "torch.no_grad", "utils.test_utils.TestStatTracker", "utils.train_utils.run_one_epoch", "utils.test_utils.TestStatTracker.get_mean_stats", "utils.train_utils.print_stats", "utils.evaluations.test_shape_recon", "utils.evaluations.test_shape_recon", "utils.evaluations.test_tnocs_regression", "utils.evaluations.test_observed_camera_pose_ransac", "numpy.random.seed"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.get_device", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.load_encoder_weights_from_full", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.load_weights", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.run_one_epoch", "home.repos.pwc.inspect_result.davrempe_caspr.utils.test_utils.TestStatTracker.get_mean_stats", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.print_stats", "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.test_shape_recon", "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.test_shape_recon", "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.test_tnocs_regression", "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.test_observed_camera_pose_ransac"], ["", "def", "test", "(", "flags", ")", ":", "\n", "# General options", "\n", "    ", "num_workers", "=", "flags", ".", "num_workers", "\n", "\n", "model_out_path", "=", "flags", ".", "out", "\n", "\n", "data_cfg", "=", "flags", ".", "data_cfg", "\n", "batch_size", "=", "flags", ".", "batch_size", "\n", "seq_len", "=", "flags", ".", "seq_len", "\n", "num_pts", "=", "flags", ".", "num_pts", "\n", "\n", "augment_quad", "=", "flags", ".", "augment_quad", "\n", "augment_pairs", "=", "flags", ".", "augment_pairs", "\n", "\n", "pretrain_tnocs", "=", "flags", ".", "pretrain_tnocs", "\n", "\n", "model_in_path", "=", "flags", ".", "weights", "\n", "radii_list", "=", "flags", ".", "radii", "\n", "local_feat_size", "=", "flags", ".", "local_feat_size", "\n", "latent_feat_size", "=", "flags", ".", "latent_feat_size", "\n", "ode_hidden_size", "=", "flags", ".", "ode_hidden_size", "\n", "motion_feat_size", "=", "flags", ".", "motion_feat_size", "\n", "cnf_blocks", "=", "flags", ".", "cnf_blocks", "\n", "regress_tnocs", "=", "flags", ".", "regress_tnocs", "\n", "\n", "cnf_loss_weight", "=", "flags", ".", "cnf_loss", "\n", "tnocs_loss_weight", "=", "flags", ".", "tnocs_loss", "\n", "\n", "# Test-specific options", "\n", "test_log_out_name", "=", "flags", ".", "log", "\n", "\n", "shuffle_test", "=", "flags", ".", "shuffle_test", "\n", "\n", "eval_full_test", "=", "flags", ".", "eval_full_test", "\n", "eval_shape_recon_observed", "=", "flags", ".", "eval_shape_recon_observed", "\n", "eval_shape_recon_unobserved", "=", "flags", ".", "eval_shape_recon_unobserved", "\n", "eval_tnocs_regression", "=", "flags", ".", "eval_tnocs_regression", "\n", "eval_pose_observed_ransac", "=", "flags", ".", "eval_pose_observed_ransac", "\n", "show_pose_viz", "=", "flags", ".", "show_pose_viz", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_out_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_out_path", ")", "\n", "\n", "# gets GPU 0 if available, else CPU", "\n", "", "device", "=", "get_device", "(", ")", "\n", "\n", "# create caspr model", "\n", "model", "=", "CaSPR", "(", "radii_list", "=", "radii_list", ",", "\n", "local_feat_size", "=", "local_feat_size", ",", "\n", "latent_feat_size", "=", "latent_feat_size", ",", "\n", "ode_hidden_size", "=", "ode_hidden_size", ",", "\n", "pretrain_tnocs", "=", "pretrain_tnocs", ",", "\n", "augment_quad", "=", "augment_quad", ",", "\n", "augment_pairs", "=", "augment_pairs", ",", "\n", "cnf_blocks", "=", "cnf_blocks", ",", "\n", "motion_feat_size", "=", "motion_feat_size", ",", "\n", "regress_tnocs", "=", "regress_tnocs", "\n", ")", "\n", "\n", "if", "pretrain_tnocs", "and", "model_in_path", "!=", "''", ":", "\n", "# load in only pretrained tnocs weights", "\n", "        ", "print", "(", "'Loading weights for pre-trained canonicalizer from %s...'", "%", "(", "model_in_path", ")", ")", "\n", "loaded_state_dict", "=", "torch", ".", "load", "(", "model_in_path", ",", "map_location", "=", "device", ")", "\n", "load_encoder_weights_from_full", "(", "model", ",", "loaded_state_dict", ")", "\n", "", "elif", "model_in_path", "!=", "''", ":", "\n", "        ", "print", "(", "'Loading model weights from %s...'", "%", "(", "model_in_path", ")", ")", "\n", "loaded_state_dict", "=", "torch", ".", "load", "(", "model_in_path", ",", "map_location", "=", "device", ")", "\n", "load_weights", "(", "model", ",", "loaded_state_dict", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "# then run on test set", "\n", "test_dataset", "=", "DynamicPCLDataset", "(", "data_cfg", ",", "split", "=", "'test'", ",", "train_frac", "=", "0.8", ",", "val_frac", "=", "0.1", ",", "\n", "num_pts", "=", "num_pts", ",", "seq_len", "=", "seq_len", ",", "\n", "shift_time_to_zero", "=", "(", "not", "pretrain_tnocs", ")", ",", "\n", "random_point_sample", "=", "False", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle_test", ",", "num_workers", "=", "num_workers", ",", "\n", "worker_init_fn", "=", "lambda", "_", ":", "np", ".", "random", ".", "seed", "(", ")", ")", "# get around numpy RNG seed bug", "\n", "\n", "log_out", "=", "os", ".", "path", ".", "join", "(", "model_out_path", ",", "test_log_out_name", ")", "\n", "log", "(", "log_out", ",", "flags", ")", "\n", "\n", "# run through the full test set and calculate same metrics reported during training for comparison", "\n", "if", "eval_full_test", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_stat_tracker", "=", "TestStatTracker", "(", ")", "\n", "\n", "run_one_epoch", "(", "model", ",", "test_loader", ",", "device", ",", "None", ",", "\n", "cnf_loss_weight", ",", "tnocs_loss_weight", ",", "\n", "0", ",", "test_stat_tracker", ",", "log_out", ",", "\n", "mode", "=", "'test'", ",", "print_stats_every", "=", "1", ")", "\n", "\n", "# get final aggregate stats", "\n", "mean_losses", "=", "test_stat_tracker", ".", "get_mean_stats", "(", ")", "\n", "total_loss_out", ",", "mean_cnf_err", ",", "mean_tnocs_pos_err", ",", "mean_tnocs_time_err", ",", "mean_nfe", "=", "mean_losses", "\n", "\n", "# print stats", "\n", "print_stats", "(", "log_out", ",", "0", ",", "0", ",", "0", ",", "total_loss_out", ",", "mean_cnf_err", ",", "mean_tnocs_pos_err", ",", "\n", "mean_tnocs_time_err", ",", "'TEST'", ",", "mean_nfe", ")", "\n", "\n", "# other evaluations", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "eval_shape_recon_observed", ":", "\n", "            ", "observed_steps", "=", "eval_utils", ".", "ALL_OBSERVED_STEPS", "\n", "unobserved_steps", "=", "eval_utils", ".", "ALL_UNOBSERVED_STEPS", "\n", "test_shape_recon", "(", "model", ",", "\n", "test_loader", ",", "\n", "device", ",", "\n", "log_out", ",", "\n", "observed_steps", ",", "\n", "unobserved_steps", ")", "\n", "", "if", "eval_shape_recon_unobserved", ":", "\n", "            ", "observed_steps", "=", "eval_utils", ".", "SPLIT_OBSERVED_STEPS", "\n", "unobserved_steps", "=", "eval_utils", ".", "SPLIT_UNOBSERVED_STEPS", "\n", "test_shape_recon", "(", "model", ",", "\n", "test_loader", ",", "\n", "device", ",", "\n", "log_out", ",", "\n", "observed_steps", ",", "\n", "unobserved_steps", ")", "\n", "", "if", "eval_tnocs_regression", ":", "\n", "            ", "test_tnocs_regression", "(", "model", ",", "\n", "test_loader", ",", "\n", "device", ",", "\n", "log_out", ")", "\n", "", "if", "eval_pose_observed_ransac", ":", "\n", "            ", "test_observed_camera_pose_ransac", "(", "model", ",", "\n", "test_loader", ",", "\n", "device", ",", "\n", "log_out", ",", "\n", "show", "=", "show_pose_viz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.caspr.test.main": [[172, 174], ["test.test"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.caspr.test.test"], ["", "", "", "def", "main", "(", "flags", ")", ":", "\n", "    ", "test", "(", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.eval_reconstr_frames": [[36, 50], ["chamfer_dist", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "emd.earth_mover_distance", "tuple", "pred.size", "res.cpu().data.numpy", "res.cpu"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.emd.earth_mover_distance"], ["def", "eval_reconstr_frames", "(", "pred", ",", "gt", ",", "chamfer_dist", ")", ":", "\n", "    ", "'''\n    Evaluates chamfer, one-way chamfer, and emd and returns as np arrays.\n    '''", "\n", "dist1", ",", "dist2", "=", "chamfer_dist", "(", "pred", ",", "gt", ")", "\n", "mean_dist_pred2gt", "=", "torch", ".", "mean", "(", "dist1", ",", "dim", "=", "1", ")", "\n", "mean_dist_gt2pred", "=", "torch", ".", "mean", "(", "dist2", ",", "dim", "=", "1", ")", "\n", "mean_dist", "=", "mean_dist_pred2gt", "+", "mean_dist_gt2pred", "\n", "\n", "cur_emd", "=", "emd", "(", "pred", ",", "gt", ",", "transpose", "=", "False", ")", "\n", "cur_emd", "=", "cur_emd", "/", "pred", ".", "size", "(", "1", ")", "\n", "\n", "results", "=", "[", "mean_dist", ",", "cur_emd", "]", "\n", "return", "tuple", "(", "[", "res", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "for", "res", "in", "results", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.test_shape_recon": [[51, 202], ["tk3dv.extern.chamfer.ChamferDistance", "train_utils.log", "train_utils.log", "model.eval", "enumerate", "zip", "train_utils.log", "train_utils.log", "numpy.savez", "print", "len", "print", "pcl_in.to.to", "nocs_out.to.to", "model_ids.extend", "seq_ids.extend", "pcl_in.to.size", "len", "len", "time.time", "model.reconstruct", "model.get_nfe", "nfe_stats.append", "nocs_out[].view", "pred_pcl[].view", "evaluations.eval_reconstr_frames", "observed_stats[].extend", "observed_stats[].extend", "observed_stats[].append", "print", "print", "print", "print", "print", "print", "print", "train_utils.log", "train_utils.log", "train_utils.log", "open", "csv.writer", "csv.writer.writerow", "zip", "print", "exit", "print", "exit", "time.time", "mean_chamfer.tolist", "cur_emd.tolist", "nocs_out[].view", "pred_pcl[].view", "evaluations.eval_reconstr_frames", "unobserved_stats[].extend", "unobserved_stats[].extend", "print", "print", "print", "print", "print", "print", "numpy.mean", "numpy.median", "numpy.std", "numpy.mean", "numpy.median", "numpy.std", "tuple", "numpy.mean", "numpy.array().reshape", "numpy.mean", "numpy.array().reshape", "numpy.mean", "range", "tuple", "numpy.mean", "mean_chamfer.tolist", "cur_emd.tolist", "numpy.mean().tolist", "len", "csv.writer.writerow", "str", "str", "len", "numpy.mean", "numpy.median", "numpy.mean", "numpy.median", "numpy.mean().tolist", "tuple", "len", "len", "numpy.array", "numpy.array", "numpy.mean", "numpy.median", "numpy.mean", "numpy.median", "numpy.mean().tolist", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.reconstruct", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.get_nfe", "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.eval_reconstr_frames", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.eval_reconstr_frames"], ["", "def", "test_shape_recon", "(", "model", ",", "test_loader", ",", "device", ",", "log_out", ",", "observed_steps", ",", "unobserved_steps", ")", ":", "\n", "    ", "'''\n    Evaluates shape reconstruction from CNF.\n    '''", "\n", "test_dataset", "=", "test_loader", ".", "dataset", "\n", "\n", "chamfer_dist", "=", "ChamferDistance", "(", ")", "\n", "\n", "log", "(", "log_out", ",", "'Observed steps [%s]'", "%", "(", "','", ".", "join", "(", "[", "str", "(", "idx", ")", "for", "idx", "in", "observed_steps", "]", ")", ")", ")", "\n", "log", "(", "log_out", ",", "'Unobserved steps [%s]'", "%", "(", "','", ".", "join", "(", "[", "str", "(", "idx", ")", "for", "idx", "in", "unobserved_steps", "]", ")", ")", ")", "\n", "\n", "use_unobserved_steps", "=", "len", "(", "unobserved_steps", ")", ">", "0", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "nfe_stats", "=", "[", "]", "\n", "model_ids", "=", "[", "]", "\n", "seq_ids", "=", "[", "]", "\n", "observed_stats", "=", "{", "\n", "'chamfer'", ":", "[", "]", ",", "\n", "'emd'", ":", "[", "]", ",", "\n", "'infer_time'", ":", "[", "]", "\n", "}", "\n", "unobserved_stats", "=", "{", "\n", "'chamfer'", ":", "[", "]", ",", "\n", "'emd'", ":", "[", "]", "\n", "}", "\n", "num_batches_total", "=", "0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "print", "(", "'Batch: %d / %d'", "%", "(", "i", ",", "len", "(", "test_loader", ")", ")", ")", "\n", "pcl_in", ",", "nocs_out", "=", "data", "[", "0", "]", "# world point cloud, corresponding nocs point cloud", "\n", "pcl_in", "=", "pcl_in", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "nocs_out", "=", "nocs_out", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "\n", "cur_model_ids", "=", "data", "[", "1", "]", "\n", "cur_seq_ids", "=", "data", "[", "2", "]", "\n", "model_ids", ".", "extend", "(", "cur_model_ids", ")", "\n", "seq_ids", ".", "extend", "(", "cur_seq_ids", ")", "\n", "\n", "# print(cur_model_ids)", "\n", "# print(cur_seq_ids)", "\n", "\n", "B", ",", "T", ",", "N", ",", "_", "=", "pcl_in", ".", "size", "(", ")", "\n", "num_batches_total", "+=", "B", "\n", "T_observed", "=", "len", "(", "observed_steps", ")", "\n", "T_unobserved", "=", "len", "(", "unobserved_steps", ")", "\n", "\n", "if", "T", "!=", "PROTOCOL_NUM_STEPS", ":", "\n", "            ", "print", "(", "'Test protocol requires %d steps, but %d given!'", "%", "(", "PROTOCOL_NUM_STEPS", ",", "T", ")", ")", "\n", "exit", "(", ")", "\n", "", "if", "N", "!=", "PROTOCOL_NUM_PTS", ":", "\n", "            ", "print", "(", "'Test protocol requires %d points, but %d given!'", "%", "(", "PROTOCOL_NUM_PTS", ",", "N", ")", ")", "\n", "exit", "(", ")", "\n", "\n", "# only use the observed steps as input", "\n", "", "observed_pcl_in", "=", "pcl_in", "[", ":", ",", "observed_steps", ",", ":", ",", ":", "]", "\n", "\n", "elapsed", "=", "0.0", "\n", "start_t", "=", "time", ".", "time", "(", ")", "\n", "# reconstruct at all time steps, both observed and unobserved", "\n", "_", ",", "_", ",", "pred_pcl", ",", "_", "=", "model", ".", "reconstruct", "(", "observed_pcl_in", ",", "\n", "num_points", "=", "N", ",", "\n", "timestamps", "=", "nocs_out", "[", "0", ",", ":", ",", "0", ",", "3", "]", ",", "\n", "constant_in_time", "=", "False", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_t", "\n", "\n", "cur_nfe", "=", "model", ".", "get_nfe", "(", ")", "\n", "nfe_stats", ".", "append", "(", "cur_nfe", ")", "\n", "\n", "# evaluate Chamfer and EMD", "\n", "# first observed", "\n", "observed_tnocs_gt", "=", "nocs_out", "[", ":", ",", "observed_steps", ",", ":", ",", ":", "3", "]", ".", "view", "(", "(", "B", "*", "T_observed", ",", "N", ",", "3", ")", ")", "# don't need time stamp for reconstruction", "\n", "observed_reconstr", "=", "pred_pcl", "[", ":", ",", "observed_steps", ",", ":", ",", ":", "]", ".", "view", "(", "(", "B", "*", "T_observed", ",", "N", ",", "3", ")", ")", "\n", "\n", "mean_chamfer", ",", "cur_emd", "=", "eval_reconstr_frames", "(", "observed_reconstr", ",", "observed_tnocs_gt", ",", "chamfer_dist", ")", "\n", "observed_stats", "[", "'chamfer'", "]", ".", "extend", "(", "mean_chamfer", ".", "tolist", "(", ")", ")", "\n", "observed_stats", "[", "'emd'", "]", ".", "extend", "(", "cur_emd", ".", "tolist", "(", ")", ")", "\n", "observed_stats", "[", "'infer_time'", "]", ".", "append", "(", "elapsed", ")", "\n", "\n", "print", "(", "'==== OBSERVED ===='", ")", "\n", "print", "(", "'Shape Recon Mean Chamfer: %f'", "%", "(", "np", ".", "mean", "(", "observed_stats", "[", "'chamfer'", "]", ")", "*", "1000", ")", ")", "\n", "print", "(", "'Shape Recon Median Chamfer: %f'", "%", "(", "np", ".", "median", "(", "observed_stats", "[", "'chamfer'", "]", ")", "*", "1000", ")", ")", "\n", "print", "(", "'Shape Recon Mean EMD: %f'", "%", "(", "np", ".", "mean", "(", "observed_stats", "[", "'emd'", "]", ")", "*", "1000", ")", ")", "\n", "print", "(", "'Shape Recon Median EMD: %f'", "%", "(", "np", ".", "median", "(", "observed_stats", "[", "'emd'", "]", ")", "*", "1000", ")", ")", "\n", "print", "(", "'NFE Mean: (%f, %f)'", "%", "tuple", "(", "np", ".", "mean", "(", "nfe_stats", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", ")", ")", "\n", "print", "(", "'Infer time mean: %f'", "%", "(", "np", ".", "mean", "(", "observed_stats", "[", "'infer_time'", "]", ")", ")", ")", "\n", "\n", "\n", "if", "use_unobserved_steps", ":", "\n", "            ", "unobserved_tnocs_gt", "=", "nocs_out", "[", ":", ",", "unobserved_steps", ",", ":", ",", ":", "3", "]", ".", "view", "(", "(", "B", "*", "T_unobserved", ",", "N", ",", "3", ")", ")", "# don't need time stamp for reconstruction", "\n", "unobserved_reconstr", "=", "pred_pcl", "[", ":", ",", "unobserved_steps", ",", ":", ",", ":", "]", ".", "view", "(", "(", "B", "*", "T_unobserved", ",", "N", ",", "3", ")", ")", "\n", "\n", "mean_chamfer", ",", "cur_emd", "=", "eval_reconstr_frames", "(", "unobserved_reconstr", ",", "unobserved_tnocs_gt", ",", "chamfer_dist", ")", "\n", "unobserved_stats", "[", "'chamfer'", "]", ".", "extend", "(", "mean_chamfer", ".", "tolist", "(", ")", ")", "\n", "unobserved_stats", "[", "'emd'", "]", ".", "extend", "(", "cur_emd", ".", "tolist", "(", ")", ")", "\n", "\n", "print", "(", "'==== UNOBSERVED ===='", ")", "\n", "print", "(", "'Shape Recon Mean Chamfer: %f'", "%", "(", "np", ".", "mean", "(", "unobserved_stats", "[", "'chamfer'", "]", ")", "*", "1000", ")", ")", "\n", "print", "(", "'Shape Recon Median Chamfer: %f'", "%", "(", "np", ".", "median", "(", "unobserved_stats", "[", "'chamfer'", "]", ")", "*", "1000", ")", ")", "\n", "print", "(", "'Shape Recon Mean EMD: %f'", "%", "(", "np", ".", "mean", "(", "unobserved_stats", "[", "'emd'", "]", ")", "*", "1000", ")", ")", "\n", "print", "(", "'Shape Recon Median EMD: %f'", "%", "(", "np", ".", "median", "(", "unobserved_stats", "[", "'emd'", "]", ")", "*", "1000", ")", ")", "\n", "print", "(", "'NFE Mean: (%f, %f)'", "%", "tuple", "(", "np", ".", "mean", "(", "nfe_stats", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "# print(len(observed_stats['chamfer']))", "\n", "# print(len(unobserved_stats['chamfer']))", "\n", "\n", "# aggregate", "\n", "", "", "stats_list", "=", "[", "observed_stats", ",", "unobserved_stats", "]", "if", "use_unobserved_steps", "else", "[", "observed_stats", "]", "\n", "stats_names", "=", "[", "'OBSERVED'", ",", "'UNOBSERVED'", "]", "if", "use_unobserved_steps", "else", "[", "'OBSERVED'", "]", "\n", "for", "stat_dict", ",", "stats_name", "in", "zip", "(", "stats_list", ",", "stats_names", ")", ":", "\n", "        ", "mean_chamfer_err", "=", "np", ".", "mean", "(", "stat_dict", "[", "'chamfer'", "]", ")", "*", "1000.0", "\n", "median_chamfer_err", "=", "np", ".", "median", "(", "stat_dict", "[", "'chamfer'", "]", ")", "*", "1000.0", "\n", "std_chamfer_err", "=", "np", ".", "std", "(", "stat_dict", "[", "'chamfer'", "]", ")", "*", "1000.0", "\n", "mean_emd_err", "=", "np", ".", "mean", "(", "stat_dict", "[", "'emd'", "]", ")", "*", "1000.0", "\n", "median_emd_err", "=", "np", ".", "median", "(", "stat_dict", "[", "'emd'", "]", ")", "*", "1000.0", "\n", "std_emd_err", "=", "np", ".", "std", "(", "stat_dict", "[", "'emd'", "]", ")", "*", "1000.0", "\n", "\n", "log", "(", "log_out", ",", "'================  %s SAMPLING RECONSTR EVAL ====================='", "%", "(", "stats_name", ")", ")", "\n", "log", "(", "log_out", ",", "'mean CHAMFER error (x1000): %f +- %f, median: %f'", "%", "(", "mean_chamfer_err", ",", "std_chamfer_err", ",", "median_chamfer_err", ")", ")", "\n", "log", "(", "log_out", ",", "'mean EMD error (x1000): %f +- %f, median: %f'", "%", "(", "mean_emd_err", ",", "std_emd_err", ",", "median_emd_err", ")", ")", "\n", "", "log", "(", "log_out", ",", "'NFE Mean: (%f, %f)'", "%", "tuple", "(", "np", ".", "mean", "(", "nfe_stats", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", ")", ")", "\n", "log", "(", "log_out", ",", "'mean Inference time: %f'", "%", "(", "np", ".", "mean", "(", "observed_stats", "[", "'infer_time'", "]", ")", ")", ")", "\n", "\n", "# save the evaluation data", "\n", "per_seq_data_out", "=", "log_out", "[", ":", "-", "len", "(", "'txt'", ")", "]", "+", "'npz'", "\n", "np", ".", "savez", "(", "per_seq_data_out", ",", "observed_chamfer", "=", "observed_stats", "[", "'chamfer'", "]", ",", "\n", "observed_emd", "=", "observed_stats", "[", "'emd'", "]", ",", "\n", "unobserved_chamfer", "=", "unobserved_stats", "[", "'chamfer'", "]", ",", "\n", "unobserved_emd", "=", "unobserved_stats", "[", "'emd'", "]", ")", "\n", "\n", "# log per-sequence performance", "\n", "per_seq_log", "=", "log_out", "[", ":", "-", "len", "(", "'txt'", ")", "]", "+", "'csv'", "\n", "print", "(", "'Per seq performance being saved to %s...'", "%", "(", "per_seq_log", ")", ")", "\n", "stats_steps", "=", "[", "T_observed", ",", "T_unobserved", "]", "\n", "with", "open", "(", "per_seq_log", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "# write header", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ",", "delimiter", "=", "','", ",", "\n", "quotechar", "=", "'|'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "header", "=", "[", "'type'", ",", "'model_id'", ",", "'seq_id'", ",", "'chamfer'", ",", "'emd'", "]", "\n", "csvwriter", ".", "writerow", "(", "header", ")", "\n", "for", "stat_dict", ",", "stats_name", ",", "stats_T", "in", "zip", "(", "stats_list", ",", "stats_names", ",", "stats_steps", ")", ":", "\n", "            ", "per_seq_chamfer", "=", "np", ".", "array", "(", "stat_dict", "[", "'chamfer'", "]", ")", ".", "reshape", "(", "(", "num_batches_total", ",", "stats_T", ")", ")", "\n", "per_seq_chamfer", "=", "np", ".", "mean", "(", "per_seq_chamfer", ",", "axis", "=", "1", ")", "\n", "per_seq_emd", "=", "np", ".", "array", "(", "stat_dict", "[", "'emd'", "]", ")", ".", "reshape", "(", "(", "num_batches_total", ",", "stats_T", ")", ")", "\n", "per_seq_emd", "=", "np", ".", "mean", "(", "per_seq_emd", ",", "axis", "=", "1", ")", "\n", "\n", "for", "line_idx", "in", "range", "(", "len", "(", "model_ids", ")", ")", ":", "\n", "                ", "cur_line", "=", "[", "stats_name", ",", "model_ids", "[", "line_idx", "]", ",", "seq_ids", "[", "line_idx", "]", ",", "per_seq_chamfer", "[", "line_idx", "]", ",", "per_seq_emd", "[", "line_idx", "]", "]", "\n", "csvwriter", ".", "writerow", "(", "cur_line", ")", "\n", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.test_tnocs_regression": [[203, 296], ["model.eval", "enumerate", "numpy.mean", "numpy.median", "numpy.std", "numpy.mean", "numpy.median", "numpy.std", "train_utils.log", "train_utils.log", "train_utils.log", "numpy.savez", "print", "print", "pcl_in.to.to", "nocs_out.to.to", "model_ids.extend", "seq_ids.extend", "pcl_in.to.size", "model.encode", "torch.mean", "torch.mean", "stat_dict[].extend", "print", "print", "print", "open", "csv.writer", "csv.writer.writerow", "numpy.array().reshape", "numpy.mean", "numpy.array().reshape", "numpy.mean", "range", "print", "exit", "print", "exit", "torch.norm", "torch.norm", "torch.mean.to().data.numpy().reshape().tolist", "pred_tnocs.size", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "stat_dict[].extend", "len", "csv.writer.writerow", "torch.mean.to().data.numpy().reshape().tolist", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "len", "torch.mean.to().data.numpy().reshape", "len", "len", "torch.mean.to().data.numpy().reshape", "torch.mean.to().data.numpy", "torch.mean.to().data.numpy", "torch.mean.to", "torch.mean.to"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.encode"], ["", "def", "test_tnocs_regression", "(", "model", ",", "test_loader", ",", "device", ",", "log_out", ")", ":", "\n", "    ", "'''\n    EVAL only TNOCS regression.\n    '''", "\n", "test_dataset", "=", "test_loader", ".", "dataset", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "model_ids", "=", "[", "]", "\n", "seq_ids", "=", "[", "]", "\n", "stat_dict", "=", "{", "\n", "'space'", ":", "[", "]", ",", "# l2 loss in space", "\n", "'time'", ":", "[", "]", "# abs difference in time", "\n", "}", "\n", "num_batches_total", "=", "0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "print", "(", "'Batch: %d / %d'", "%", "(", "i", ",", "len", "(", "test_loader", ")", ")", ")", "\n", "pcl_in", ",", "nocs_out", "=", "data", "[", "0", "]", "# world point cloud, corresponding nocs point cloud", "\n", "pcl_in", "=", "pcl_in", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "nocs_out", "=", "nocs_out", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "\n", "cur_model_ids", "=", "data", "[", "1", "]", "\n", "cur_seq_ids", "=", "data", "[", "2", "]", "\n", "model_ids", ".", "extend", "(", "cur_model_ids", ")", "\n", "seq_ids", ".", "extend", "(", "cur_seq_ids", ")", "\n", "\n", "# print(cur_model_ids)", "\n", "# print(cur_seq_ids)", "\n", "\n", "B", ",", "T", ",", "N", ",", "_", "=", "pcl_in", ".", "size", "(", ")", "\n", "num_batches_total", "+=", "B", "\n", "\n", "if", "T", "!=", "PROTOCOL_NUM_STEPS", ":", "\n", "            ", "print", "(", "'Test protocol requires %d steps, but %d given!'", "%", "(", "PROTOCOL_NUM_STEPS", ",", "T", ")", ")", "\n", "exit", "(", ")", "\n", "", "if", "N", "!=", "PROTOCOL_NUM_PTS", ":", "\n", "            ", "print", "(", "'Test protocol requires %d points, but %d given!'", "%", "(", "PROTOCOL_NUM_PTS", ",", "N", ")", ")", "\n", "exit", "(", ")", "\n", "\n", "# only tnocs predictions", "\n", "", "_", ",", "pred_tnocs", "=", "model", ".", "encode", "(", "pcl_in", ")", "\n", "\n", "# calculate distance error (with correspondences)", "\n", "diff", "=", "pred_tnocs", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "-", "nocs_out", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "dist", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "diff", ",", "dim", "=", "3", ")", ",", "dim", "=", "2", ")", "# B x T", "\n", "stat_dict", "[", "'space'", "]", ".", "extend", "(", "dist", ".", "to", "(", "'cpu'", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "# calulcate time error", "\n", "if", "pred_tnocs", ".", "size", "(", "3", ")", ">", "3", ":", "\n", "            ", "time_diff", "=", "torch", ".", "abs", "(", "pred_tnocs", "[", ":", ",", ":", ",", ":", ",", "3", "]", "-", "nocs_out", "[", ":", ",", ":", ",", ":", ",", "3", "]", ")", "\n", "time_diff", "=", "torch", ".", "mean", "(", "time_diff", ",", "dim", "=", "2", ")", "# B x T", "\n", "stat_dict", "[", "'time'", "]", ".", "extend", "(", "time_diff", ".", "to", "(", "'cpu'", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "print", "(", "'==== CURRENT ERROR ===='", ")", "\n", "print", "(", "'mean SPATIAL error (l2 distance) %f'", "%", "(", "np", ".", "mean", "(", "stat_dict", "[", "'space'", "]", ")", ")", ")", "\n", "print", "(", "'mean TIME error (absolute diff): : %f'", "%", "(", "np", ".", "mean", "(", "stat_dict", "[", "'time'", "]", ")", ")", ")", "\n", "\n", "\n", "", "mean_space_err", "=", "np", ".", "mean", "(", "stat_dict", "[", "'space'", "]", ")", "\n", "median_space_err", "=", "np", ".", "median", "(", "stat_dict", "[", "'space'", "]", ")", "\n", "std_space_err", "=", "np", ".", "std", "(", "stat_dict", "[", "'space'", "]", ")", "\n", "\n", "mean_time_err", "=", "np", ".", "mean", "(", "stat_dict", "[", "'time'", "]", ")", "\n", "median_time_err", "=", "np", ".", "median", "(", "stat_dict", "[", "'time'", "]", ")", "\n", "std_time_err", "=", "np", ".", "std", "(", "stat_dict", "[", "'time'", "]", ")", "\n", "\n", "log", "(", "log_out", ",", "'================  TNOCS REGRESSION EVAL ====================='", ")", "\n", "log", "(", "log_out", ",", "'mean SPATIAL error (l2 distance): %f +- %f, median: %f'", "%", "(", "mean_space_err", ",", "std_space_err", ",", "median_space_err", ")", ")", "\n", "log", "(", "log_out", ",", "'mean TIME error (absolute diff): %f +- %f, median: %f'", "%", "(", "mean_time_err", ",", "std_time_err", ",", "median_time_err", ")", ")", "\n", "\n", "# save the evaluation data", "\n", "per_seq_data_out", "=", "log_out", "[", ":", "-", "len", "(", "'txt'", ")", "]", "+", "'npz'", "\n", "np", ".", "savez", "(", "per_seq_data_out", ",", "space", "=", "stat_dict", "[", "'space'", "]", ",", "\n", "time", "=", "stat_dict", "[", "'time'", "]", ")", "\n", "\n", "# log per-sequence performance", "\n", "per_seq_log", "=", "log_out", "[", ":", "-", "len", "(", "'txt'", ")", "]", "+", "'csv'", "\n", "print", "(", "'Per seq performance being saved to %s...'", "%", "(", "per_seq_log", ")", ")", "\n", "with", "open", "(", "per_seq_log", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "# write header", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ",", "delimiter", "=", "','", ",", "\n", "quotechar", "=", "'|'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "header", "=", "[", "'model_id'", ",", "'seq_id'", ",", "'space'", ",", "'time'", "]", "\n", "csvwriter", ".", "writerow", "(", "header", ")", "\n", "\n", "per_seq_space", "=", "np", ".", "array", "(", "stat_dict", "[", "'space'", "]", ")", ".", "reshape", "(", "(", "num_batches_total", ",", "T", ")", ")", "\n", "per_seq_space", "=", "np", ".", "mean", "(", "per_seq_space", ",", "axis", "=", "1", ")", "\n", "per_seq_time", "=", "np", ".", "array", "(", "stat_dict", "[", "'time'", "]", ")", ".", "reshape", "(", "(", "num_batches_total", ",", "T", ")", ")", "\n", "per_seq_time", "=", "np", ".", "mean", "(", "per_seq_time", ",", "axis", "=", "1", ")", "\n", "\n", "for", "line_idx", "in", "range", "(", "len", "(", "model_ids", ")", ")", ":", "\n", "            ", "cur_line", "=", "[", "model_ids", "[", "line_idx", "]", ",", "seq_ids", "[", "line_idx", "]", ",", "per_seq_space", "[", "line_idx", "]", ",", "per_seq_time", "[", "line_idx", "]", "]", "\n", "csvwriter", ".", "writerow", "(", "cur_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.test_observed_camera_pose_ransac": [[297, 515], ["test_dataset.set_return_pose_data", "model.eval", "enumerate", "numpy.mean", "numpy.median", "numpy.std", "numpy.mean", "numpy.median", "numpy.std", "numpy.mean", "numpy.median", "numpy.std", "numpy.mean", "numpy.median", "numpy.std", "train_utils.log", "train_utils.log", "train_utils.log", "train_utils.log", "numpy.savez", "print", "print", "pcl_in.to.to", "nocs_out.to.to", "model_ids.extend", "seq_ids.extend", "pcl_in.to.size", "model.encode", "range", "print", "print", "print", "print", "print", "open", "csv.writer", "csv.writer.writerow", "numpy.array().reshape", "numpy.mean", "numpy.array().reshape", "numpy.mean", "numpy.array().reshape", "numpy.mean", "range", "print", "exit", "print", "exit", "range", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "len", "csv.writer.writerow", "o3d.geometry.PointCloud", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.utility.Vector3dVector", "numpy.tile", "o3d.utility.Vector2iVector", "o3d.registration.registration_ransac_based_on_correspondence", "cur_input_points[].cpu().numpy", "pose_data[].data.numpy", "pose_data[].data.numpy", "norm_gt_nocs[].cpu().numpy", "np.stack.append", "np.stack.append", "numpy.median", "stat_dict[].append", "numpy.mean", "stat_dict[].append", "numpy.dot", "numpy.eye", "cam_transform_seq_RANSAC.append", "numpy.eye", "numpy.dot", "np.stack.append", "numpy.linalg.norm", "numpy.clip", "numpy.degrees", "stat_dict[].append", "stat_dict[].append", "numpy.zeros_like", "numpy.zeros_like", "pcl_viewer.viz_pcl_seq", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "numpy.array", "len", "norm_pred_nocs[].to().data.numpy", "cur_input_points[].to().data.numpy", "numpy.expand_dims", "numpy.linalg.norm", "np.mean.tolist", "numpy.linalg.norm", "np.mean.tolist", "numpy.arccos", "norm_pred_nocs[].to().data.numpy", "pred_tnocs[].to().data.numpy().astype", "norm_gt_nocs[].to().data.numpy", "len", "len", "numpy.arange", "o3d.registration.TransformationEstimationPointToPoint", "o3d.registration.RANSACConvergenceCriteria", "cur_input_points[].cpu", "norm_gt_nocs[].cpu", "numpy.dot", "numpy.dot", "numpy.trace", "range", "range", "range", "range", "range", "range", "range", "range", "len", "numpy.dot", "pred_tnocs[].to().data.numpy", "len", "len", "norm_pred_nocs[].to", "cur_input_points[].to", "norm_pred_nocs[].to", "norm_pred_nocs.size", "norm_gt_nocs[].to", "norm_gt_nocs.size", "pred_tnocs[].to"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.set_return_pose_data", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.encode", "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.viz_pcl_seq"], ["", "", "", "def", "test_observed_camera_pose_ransac", "(", "model", ",", "test_loader", ",", "device", ",", "log_out", ",", "show", "=", "False", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "\n", "'''\n    Evaluate camera pose estimation at observed time steps. With just the TNOCS regression.\n    '''", "\n", "test_dataset", "=", "test_loader", ".", "dataset", "\n", "test_dataset", ".", "set_return_pose_data", "(", "True", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "model_ids", "=", "[", "]", "\n", "seq_ids", "=", "[", "]", "\n", "stat_dict", "=", "{", "\n", "'trans_RANSAC'", ":", "[", "]", ",", "# l2 loss on translation", "\n", "'rot_RANSAC'", ":", "[", "]", ",", "# abs degree difference of rotation", "\n", "'point_RANSAC'", ":", "[", "]", ",", "# pointwise distance after transforming predicted NOCS with optimal pose", "\n", "'point_mean_RANSAC'", ":", "[", "]", ",", "# pointwise distance after transforming predicted NOCS with optimal pose", "\n", "}", "\n", "num_batches_total", "=", "0", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "print", "(", "'Batch: %d / %d'", "%", "(", "i", ",", "len", "(", "test_loader", ")", ")", ")", "\n", "pcl_in", ",", "nocs_out", "=", "data", "[", "0", "]", "# world point cloud, corresponding nocs point cloud", "\n", "pcl_in", "=", "pcl_in", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "nocs_out", "=", "nocs_out", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "\n", "pose_data", "=", "data", "[", "1", "]", "\n", "\n", "cur_model_ids", "=", "data", "[", "2", "]", "\n", "cur_seq_ids", "=", "data", "[", "3", "]", "\n", "model_ids", ".", "extend", "(", "cur_model_ids", ")", "\n", "seq_ids", ".", "extend", "(", "cur_seq_ids", ")", "\n", "\n", "# print(cur_model_ids)", "\n", "# print(cur_seq_ids)", "\n", "\n", "B", ",", "num_steps", ",", "N", ",", "_", "=", "pcl_in", ".", "size", "(", ")", "\n", "num_batches_total", "+=", "B", "\n", "\n", "if", "num_steps", "!=", "PROTOCOL_NUM_STEPS", ":", "\n", "            ", "print", "(", "'Test protocol requires %d steps, but %d given!'", "%", "(", "PROTOCOL_NUM_STEPS", ",", "T", ")", ")", "\n", "exit", "(", ")", "\n", "", "if", "N", "!=", "PROTOCOL_NUM_PTS", ":", "\n", "            ", "print", "(", "'Test protocol requires %d points, but %d given!'", "%", "(", "PROTOCOL_NUM_PTS", ",", "N", ")", ")", "\n", "exit", "(", ")", "\n", "\n", "# only tnocs predictions", "\n", "", "_", ",", "pred_tnocs", "=", "model", ".", "encode", "(", "pcl_in", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "pred_tnocs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "norm_pred_nocs", "=", "pred_tnocs", "[", "batch_idx", ",", ":", ",", ":", ",", ":", "3", "]", "-", "0.5", "\n", "norm_gt_nocs", "=", "nocs_out", "[", "batch_idx", ",", ":", ",", ":", ",", ":", "3", "]", "-", "0.5", "\n", "cur_input_points", "=", "pcl_in", "[", "batch_idx", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "cam_transform_seq_RANSAC", "=", "[", "]", "\n", "gt_cam_transform_seq", "=", "[", "]", "\n", "\n", "pred_depth_seq_RANSAC", "=", "[", "]", "\n", "gt_depth_seq", "=", "[", "]", "\n", "\n", "for", "step_idx", "in", "range", "(", "norm_pred_nocs", ".", "shape", "[", "0", "]", ")", ":", "\n", "# solve for rigid transform using RANSAC", "\n", "                ", "pcd1", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd2", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd1", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "norm_pred_nocs", "[", "step_idx", "]", ".", "to", "(", "'cpu'", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "pcd2", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "cur_input_points", "[", "step_idx", "]", ".", "to", "(", "'cpu'", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "# Correspondences are already sorted", "\n", "corr_idx", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "len", "(", "pcd1", ".", "points", ")", ")", ",", "1", ")", ",", "(", "1", ",", "2", ")", ")", "\n", "corrs", "=", "o3d", ".", "utility", ".", "Vector2iVector", "(", "corr_idx", ")", "\n", "\n", "distance_threshold", "=", "0.015", "\n", "result_ransac", "=", "o3d", ".", "registration", ".", "registration_ransac_based_on_correspondence", "(", "\n", "source", "=", "pcd1", ",", "target", "=", "pcd2", ",", "corres", "=", "corrs", ",", "\n", "max_correspondence_distance", "=", "distance_threshold", ",", "\n", "estimation_method", "=", "o3d", ".", "registration", ".", "TransformationEstimationPointToPoint", "(", "False", ")", ",", "\n", "ransac_n", "=", "4", ",", "\n", "criteria", "=", "o3d", ".", "registration", ".", "RANSACConvergenceCriteria", "(", "50000", ",", "5000", ")", ")", "\n", "\n", "trans_param", "=", "result_ransac", ".", "transformation", "\n", "\n", "R_pred_RANSAC", "=", "trans_param", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "T_pred_RANSAC", "=", "trans_param", "[", "0", ":", "3", ",", "3", "]", "#.reshape(-1,1)", "\n", "\n", "\n", "#", "\n", "# Compute errors", "\n", "#", "\n", "input_data_np", "=", "cur_input_points", "[", "step_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# get GT object pose", "\n", "R_gt", "=", "pose_data", "[", "batch_idx", ",", "step_idx", ",", ":", "3", ",", ":", "3", "]", ".", "data", ".", "numpy", "(", ")", "\n", "T_gt", "=", "pose_data", "[", "batch_idx", ",", "step_idx", ",", ":", "3", ",", "3", "]", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "# Use ground truth TNOCS as not to compound error from NOCS estimation into point-wise error", "\n", "norm_gt_nocs_np", "=", "norm_gt_nocs", "[", "step_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_depth_points", "=", "np", ".", "dot", "(", "R_gt", ",", "norm_gt_nocs_np", ".", "T", ")", ".", "T", "+", "T_gt", "\n", "pred_depth_points_RANSAC", "=", "np", ".", "dot", "(", "R_pred_RANSAC", ",", "norm_gt_nocs_np", ".", "T", ")", ".", "T", "+", "T_pred_RANSAC", "\n", "\n", "gt_depth_seq", ".", "append", "(", "gt_depth_points", ")", "\n", "pred_depth_seq_RANSAC", ".", "append", "(", "pred_depth_points_RANSAC", ")", "\n", "\n", "# calculate RANSAC distance error (with correspondences)", "\n", "diff_RANSAC", "=", "pred_depth_points_RANSAC", "-", "input_data_np", "\n", "dist_RANSAC", "=", "np", ".", "median", "(", "np", ".", "linalg", ".", "norm", "(", "diff_RANSAC", ",", "axis", "=", "1", ")", ")", "\n", "stat_dict", "[", "'point_RANSAC'", "]", ".", "append", "(", "dist_RANSAC", ".", "tolist", "(", ")", ")", "\n", "dist_RANSAC", "=", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "diff_RANSAC", ",", "axis", "=", "1", ")", ")", "\n", "stat_dict", "[", "'point_mean_RANSAC'", "]", ".", "append", "(", "dist_RANSAC", ".", "tolist", "(", ")", ")", "\n", "\n", "# predicted camera pose RANSAC", "\n", "cam_R_RANSAC", "=", "R_pred_RANSAC", ".", "T", "\n", "cam_T_RANSAC", "=", "np", ".", "dot", "(", "cam_R_RANSAC", ",", "-", "T_pred_RANSAC", ")", "\n", "cam_transform_RANSAC", "=", "np", ".", "eye", "(", "4", ")", "\n", "cam_transform_RANSAC", "[", ":", "3", ",", ":", "3", "]", "=", "cam_R_RANSAC", "\n", "cam_transform_RANSAC", "[", ":", "3", ",", "3", "]", "=", "cam_T_RANSAC", "\n", "cam_transform_seq_RANSAC", ".", "append", "(", "cam_transform_RANSAC", ")", "\n", "\n", "# GT camera pose", "\n", "gt_cam_transform", "=", "np", ".", "eye", "(", "4", ")", "\n", "gt_cam_transform", "[", ":", "3", ",", ":", "3", "]", "=", "R_gt", ".", "T", "\n", "gt_cam_transform", "[", ":", "3", ",", "3", "]", "=", "np", ".", "dot", "(", "R_gt", ".", "T", ",", "-", "T_gt", ")", "\n", "gt_cam_transform_seq", ".", "append", "(", "gt_cam_transform", ")", "\n", "\n", "# calculate error RANSAC", "\n", "trans_err_RANSAC", "=", "np", ".", "linalg", ".", "norm", "(", "T_pred_RANSAC", "-", "T_gt", ")", "\n", "rot_mat_diff_RANSAC", "=", "(", "np", ".", "trace", "(", "np", ".", "dot", "(", "R_pred_RANSAC", ".", "T", ",", "R_gt", ")", ")", "-", "1.0", ")", "/", "2.0", "\n", "rot_mat_diff_RANSAC", "=", "np", ".", "clip", "(", "rot_mat_diff_RANSAC", ",", "-", "1.0", ",", "1.0", ")", "\n", "rot_err_RANSAC", "=", "np", ".", "degrees", "(", "np", ".", "arccos", "(", "rot_mat_diff_RANSAC", ")", ")", "\n", "\n", "stat_dict", "[", "'trans_RANSAC'", "]", ".", "append", "(", "trans_err_RANSAC", ")", "\n", "stat_dict", "[", "'rot_RANSAC'", "]", ".", "append", "(", "rot_err_RANSAC", ")", "\n", "\n", "", "pred_cam_transform_seq_RANSAC", "=", "np", ".", "stack", "(", "cam_transform_seq_RANSAC", ",", "axis", "=", "0", ")", "\n", "gt_cam_transform_seq", "=", "np", ".", "stack", "(", "gt_cam_transform_seq", ",", "axis", "=", "0", ")", "\n", "\n", "pred_depth_seq_RANSAC", "=", "np", ".", "stack", "(", "pred_depth_seq_RANSAC", ",", "axis", "=", "0", ")", "\n", "gt_depth_seq", "=", "np", ".", "stack", "(", "gt_depth_seq", ",", "axis", "=", "0", ")", "\n", "\n", "if", "show", ":", "\n", "# Visualization shows:", "\n", "#   - predicted NOCS in RGB", "\n", "#   - GT NOCS transformed by the predicted pose (in blue)", "\n", "#   - GT input and NOCS point clouds (in green)", "\n", "#   - GT camera pose (in green)", "\n", "#   - pred camera pose (in red)", "\n", "                ", "pred_nocs_viz", "=", "[", "norm_pred_nocs", "[", "idx", "]", ".", "to", "(", "'cpu'", ")", ".", "data", ".", "numpy", "(", ")", "for", "idx", "in", "range", "(", "norm_pred_nocs", ".", "size", "(", ")", "[", "0", "]", ")", "]", "\n", "pred_nocs_rgb", "=", "[", "pred_tnocs", "[", "batch_idx", ",", "idx", ",", ":", ",", ":", "3", "]", ".", "to", "(", "'cpu'", ")", ".", "data", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "for", "idx", "in", "range", "(", "len", "(", "pred_nocs_viz", ")", ")", "]", "\n", "pred_depth_viz", "=", "[", "pred_depth_seq_RANSAC", "[", "idx", "]", "for", "idx", "in", "range", "(", "pred_depth_seq_RANSAC", ".", "shape", "[", "0", "]", ")", "]", "\n", "blue_rgb", "=", "np", ".", "zeros_like", "(", "pred_depth_seq_RANSAC", "[", "0", "]", ")", "\n", "blue_rgb", "[", ":", ",", "2", "]", "=", "1.0", "\n", "pred_depth_rgb", "=", "[", "blue_rgb", "for", "idx", "in", "range", "(", "pred_depth_seq_RANSAC", ".", "shape", "[", "0", "]", ")", "]", "\n", "gt_depth_viz", "=", "[", "gt_depth_seq", "[", "idx", "]", "for", "idx", "in", "range", "(", "gt_depth_seq", ".", "shape", "[", "0", "]", ")", "]", "\n", "green_rgb", "=", "np", ".", "zeros_like", "(", "gt_depth_seq", "[", "0", "]", ")", "\n", "green_rgb", "[", ":", ",", "1", "]", "=", "1.0", "\n", "gt_depth_rgb", "=", "[", "green_rgb", "for", "idx", "in", "range", "(", "gt_depth_seq", ".", "shape", "[", "0", "]", ")", "]", "\n", "gt_nocs_viz", "=", "[", "norm_gt_nocs", "[", "idx", "]", ".", "to", "(", "'cpu'", ")", ".", "data", ".", "numpy", "(", ")", "for", "idx", "in", "range", "(", "norm_gt_nocs", ".", "size", "(", ")", "[", "0", "]", ")", "]", "\n", "gt_nocs_rgb", "=", "[", "green_rgb", "for", "idx", "in", "range", "(", "len", "(", "gt_nocs_viz", ")", ")", "]", "\n", "\n", "viz_pcl_seq", "(", "[", "pred_nocs_viz", ",", "pred_depth_viz", ",", "gt_depth_viz", ",", "gt_nocs_viz", "]", ",", "\n", "rgb_seq", "=", "[", "pred_nocs_rgb", ",", "pred_depth_rgb", ",", "gt_depth_rgb", ",", "gt_nocs_rgb", "]", ",", "\n", "fps", "=", "10", ",", "autoplay", "=", "True", ",", "cameras", "=", "[", "gt_cam_transform_seq", ",", "pred_cam_transform_seq_RANSAC", "]", ",", "\n", "draw_cubes", "=", "False", ")", "\n", "\n", "", "", "print", "(", "'==== CURRENT ERROR ===='", ")", "\n", "print", "(", "'mean Pos error RANSAC (l2 distance) %f'", "%", "(", "np", ".", "mean", "(", "stat_dict", "[", "'trans_RANSAC'", "]", ")", ")", ")", "\n", "print", "(", "'mean Rot error RANSAC (degrees): %f'", "%", "(", "np", ".", "mean", "(", "stat_dict", "[", "'rot_RANSAC'", "]", ")", ")", ")", "\n", "print", "(", "'mean-median Point error RANSAC (L2 distance): %f'", "%", "(", "np", ".", "mean", "(", "stat_dict", "[", "'point_RANSAC'", "]", ")", ")", ")", "\n", "print", "(", "'mean-mean Point error RANSAC (L2 distance): %f'", "%", "(", "np", ".", "mean", "(", "stat_dict", "[", "'point_mean_RANSAC'", "]", ")", ")", ")", "\n", "\n", "", "mean_pos_err_RANSAC", "=", "np", ".", "mean", "(", "stat_dict", "[", "'trans_RANSAC'", "]", ")", "\n", "median_pos_err_RANSAC", "=", "np", ".", "median", "(", "stat_dict", "[", "'trans_RANSAC'", "]", ")", "\n", "std_pos_err_RANSAC", "=", "np", ".", "std", "(", "stat_dict", "[", "'trans_RANSAC'", "]", ")", "\n", "\n", "mean_rot_err_RANSAC", "=", "np", ".", "mean", "(", "stat_dict", "[", "'rot_RANSAC'", "]", ")", "\n", "median_rot_err_RANSAC", "=", "np", ".", "median", "(", "stat_dict", "[", "'rot_RANSAC'", "]", ")", "\n", "std_rot_err_RANSAC", "=", "np", ".", "std", "(", "stat_dict", "[", "'rot_RANSAC'", "]", ")", "\n", "\n", "mean_point_err_RANSAC", "=", "np", ".", "mean", "(", "stat_dict", "[", "'point_RANSAC'", "]", ")", "\n", "median_point_err_RANSAC", "=", "np", ".", "median", "(", "stat_dict", "[", "'point_RANSAC'", "]", ")", "\n", "std_point_err_RANSAC", "=", "np", ".", "std", "(", "stat_dict", "[", "'point_RANSAC'", "]", ")", "\n", "\n", "mean_mean_point_err_RANSAC", "=", "np", ".", "mean", "(", "stat_dict", "[", "'point_mean_RANSAC'", "]", ")", "\n", "median_mean_point_err_RANSAC", "=", "np", ".", "median", "(", "stat_dict", "[", "'point_mean_RANSAC'", "]", ")", "\n", "std_mean_point_err_RANSAC", "=", "np", ".", "std", "(", "stat_dict", "[", "'point_mean_RANSAC'", "]", ")", "\n", "\n", "log", "(", "log_out", ",", "'mean POS error RANSAC (l2 distance): %f +- %f, median: %f'", "%", "(", "mean_pos_err_RANSAC", ",", "std_pos_err_RANSAC", ",", "median_pos_err_RANSAC", ")", ")", "\n", "log", "(", "log_out", ",", "'mean ROT error RANSAC (degrees): %f +- %f, median: %f'", "%", "(", "mean_rot_err_RANSAC", ",", "std_rot_err_RANSAC", ",", "median_rot_err_RANSAC", ")", ")", "\n", "log", "(", "log_out", ",", "'mean POINT(median) error RANSAC (l2 distance): %f +- %f, median: %f'", "%", "(", "mean_point_err_RANSAC", ",", "std_point_err_RANSAC", ",", "median_point_err_RANSAC", ")", ")", "\n", "log", "(", "log_out", ",", "'mean POINT(mean) error RANSAC (l2 distance): %f +- %f, median: %f'", "%", "(", "mean_mean_point_err_RANSAC", ",", "std_mean_point_err_RANSAC", ",", "median_mean_point_err_RANSAC", ")", ")", "\n", "\n", "# save the evaluation data", "\n", "per_seq_data_out_RANSAC", "=", "log_out", "[", ":", "-", "len", "(", "'.txt'", ")", "]", "+", "'_RANSAC.npz'", "\n", "np", ".", "savez", "(", "per_seq_data_out_RANSAC", ",", "trans", "=", "stat_dict", "[", "'trans_RANSAC'", "]", ",", "\n", "rot", "=", "stat_dict", "[", "'rot_RANSAC'", "]", ",", "\n", "point", "=", "stat_dict", "[", "'point_RANSAC'", "]", ",", "\n", "point_mean", "=", "stat_dict", "[", "'point_mean_RANSAC'", "]", ")", "\n", "\n", "# log per-sequence performance of RANSAC", "\n", "per_seq_log_RANSAC", "=", "log_out", "[", ":", "-", "len", "(", "'.txt'", ")", "]", "+", "'_RANSAC.csv'", "\n", "print", "(", "'Per seq performance of RANSAC being saved to %s...'", "%", "(", "per_seq_log_RANSAC", ")", ")", "\n", "\n", "with", "open", "(", "per_seq_log_RANSAC", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "# write header", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ",", "delimiter", "=", "','", ",", "\n", "quotechar", "=", "'|'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "header", "=", "[", "'model_id'", ",", "'seq_id'", ",", "'pos'", ",", "'rot'", ",", "'point'", "]", "\n", "csvwriter", ".", "writerow", "(", "header", ")", "\n", "\n", "per_seq_pos_RANSAC", "=", "np", ".", "array", "(", "stat_dict", "[", "'trans_RANSAC'", "]", ")", ".", "reshape", "(", "(", "num_batches_total", ",", "num_steps", ")", ")", "\n", "per_seq_pos_RANSAC", "=", "np", ".", "mean", "(", "per_seq_pos_RANSAC", ",", "axis", "=", "1", ")", "\n", "per_seq_rot_RANSAC", "=", "np", ".", "array", "(", "stat_dict", "[", "'rot_RANSAC'", "]", ")", ".", "reshape", "(", "(", "num_batches_total", ",", "num_steps", ")", ")", "\n", "per_seq_rot_RANSAC", "=", "np", ".", "mean", "(", "per_seq_rot_RANSAC", ",", "axis", "=", "1", ")", "\n", "per_seq_point_RANSAC", "=", "np", ".", "array", "(", "stat_dict", "[", "'point_RANSAC'", "]", ")", ".", "reshape", "(", "(", "num_batches_total", ",", "num_steps", ")", ")", "\n", "per_seq_point_RANSAC", "=", "np", ".", "mean", "(", "per_seq_point_RANSAC", ",", "axis", "=", "1", ")", "\n", "\n", "for", "line_idx", "in", "range", "(", "len", "(", "model_ids", ")", ")", ":", "\n", "            ", "cur_line", "=", "[", "model_ids", "[", "line_idx", "]", ",", "seq_ids", "[", "line_idx", "]", ",", "per_seq_pos_RANSAC", "[", "line_idx", "]", ",", "per_seq_rot_RANSAC", "[", "line_idx", "]", ",", "per_seq_point_RANSAC", "[", "line_idx", "]", "]", "\n", "csvwriter", ".", "writerow", "(", "cur_line", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.emd.EarthMoverDistanceFunction.forward": [[6, 15], ["xyz1.contiguous.contiguous.contiguous", "xyz2.contiguous.contiguous.contiguous", "emd_cuda.approxmatch_forward", "emd_cuda.matchcost_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "xyz1", "=", "xyz1", ".", "contiguous", "(", ")", "\n", "xyz2", "=", "xyz2", ".", "contiguous", "(", ")", "\n", "assert", "xyz1", ".", "is_cuda", "and", "xyz2", ".", "is_cuda", ",", "\"Only support cuda currently.\"", "\n", "match", "=", "emd_cuda", ".", "approxmatch_forward", "(", "xyz1", ",", "xyz2", ")", "\n", "cost", "=", "emd_cuda", ".", "matchcost_forward", "(", "xyz1", ",", "xyz2", ",", "match", ")", "\n", "ctx", ".", "save_for_backward", "(", "xyz1", ",", "xyz2", ",", "match", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.emd.EarthMoverDistanceFunction.backward": [[16, 22], ["grad_cost.contiguous.contiguous.contiguous", "emd_cuda.matchcost_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_cost", ")", ":", "\n", "        ", "xyz1", ",", "xyz2", ",", "match", "=", "ctx", ".", "saved_tensors", "\n", "grad_cost", "=", "grad_cost", ".", "contiguous", "(", ")", "\n", "grad_xyz1", ",", "grad_xyz2", "=", "emd_cuda", ".", "matchcost_backward", "(", "grad_cost", ",", "xyz1", ",", "xyz2", ",", "match", ")", "\n", "return", "grad_xyz1", ",", "grad_xyz2", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.emd.earth_mover_distance": [[24, 46], ["EarthMoverDistanceFunction.apply", "xyz1.transpose.dim", "xyz1.transpose.unsqueeze", "xyz2.transpose.dim", "xyz2.transpose.unsqueeze", "xyz1.transpose.transpose", "xyz2.transpose.transpose"], "function", ["None"], ["", "", "def", "earth_mover_distance", "(", "xyz1", ",", "xyz2", ",", "transpose", "=", "True", ")", ":", "\n", "    ", "\"\"\"Earth Mover Distance (Approx)\n\n    Args:\n        xyz1 (torch.Tensor): (b, 3, n1)\n        xyz2 (torch.Tensor): (b, 3, n1)\n        transpose (bool): whether to transpose inputs as it might be BCN format.\n            Extensions only support BNC format.\n\n    Returns:\n        cost (torch.Tensor): (b)\n\n    \"\"\"", "\n", "if", "xyz1", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "xyz1", "=", "xyz1", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "xyz2", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "xyz2", "=", "xyz2", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "transpose", ":", "\n", "        ", "xyz1", "=", "xyz1", ".", "transpose", "(", "1", ",", "2", ")", "\n", "xyz2", "=", "xyz2", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "cost", "=", "EarthMoverDistanceFunction", ".", "apply", "(", "xyz1", ",", "xyz2", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.CloseEasel.closeEvent": [[33, 37], ["pcl_viewer.CloseEasel.stop", "Mod.__del__"], "methods", ["None"], ["     ", "def", "closeEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "stop", "(", ")", "\n", "for", "Mod", "in", "self", ".", "Modules", ":", "\n", "            ", "Mod", ".", "__del__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.__init__": [[39, 98], ["EaselModule.EaselModule.__init__", "len", "range", "len", "len", "print", "numpy.array", "print", "len", "len", "print", "exit", "str", "pcl_viewer.PCLViewer.cameras.append", "str", "tk3dv.CameraExtrinsics", "cur_extrins.append", "tk3dv.Camera"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pcl_seq", ",", "\n", "rgb_seq", "=", "None", ",", "\n", "cameras", "=", "None", ",", "\n", "fps", "=", "60", ",", "\n", "autoplay", "=", "True", ",", "\n", "draw_cubes", "=", "True", ",", "\n", "out_path", "=", "None", ")", ":", "\n", "        ", "'''\n        - N point cloud sequences of the same length of steps (can have different number of points) : list of lists [[np.array(N x 3)]]\n        - N rgb color sequences (optional) : list of lists [[np.array(N x 3)]]\n        - list of N camera extrinsics : [Nx4x4 [R|t]] numpy array that represents the transformation cam2world\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# sequence of raw depth image data", "\n", "self", ".", "pcl_seq", "=", "pcl_seq", "\n", "self", ".", "rgb_seq", "=", "rgb_seq", "\n", "self", ".", "draw_cubes", "=", "draw_cubes", "\n", "# point set objects to visualize", "\n", "self", ".", "pt_set_seq", "=", "[", "]", "\n", "\n", "self", ".", "PointSize", "=", "3", "\n", "self", ".", "seq_len", "=", "len", "(", "pcl_seq", "[", "0", "]", ")", "\n", "for", "seq_idx", "in", "range", "(", "len", "(", "self", ".", "pcl_seq", ")", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "pcl_seq", "[", "seq_idx", "]", ")", "!=", "self", ".", "seq_len", ":", "\n", "                ", "print", "(", "'All sequences must be the same length to visualize!'", ")", "\n", "exit", "(", ")", "\n", "", "", "self", ".", "cur_frame", "=", "0", "\n", "\n", "self", ".", "num_seq", "=", "len", "(", "self", ".", "pcl_seq", ")", "\n", "self", ".", "num_frames_per_seq", "=", "len", "(", "self", ".", "pcl_seq", "[", "0", "]", ")", "\n", "self", ".", "cur_seq", "=", "self", ".", "num_seq", "\n", "self", ".", "num_display", "=", "self", ".", "num_seq", "+", "2", "\n", "print", "(", "'Number of sequences: '", "+", "str", "(", "self", ".", "num_seq", ")", ")", "\n", "\n", "self", ".", "fps", "=", "fps", "\n", "self", ".", "autoplay", "=", "autoplay", "\n", "self", ".", "draw_all", "=", "False", "\n", "self", ".", "take_ss", "=", "False", "# whether we're currently taking a screenshot", "\n", "self", ".", "ss_ctr", "=", "0", "\n", "self", ".", "out_path", "=", "out_path", "\n", "if", "self", ".", "out_path", "is", "None", ":", "\n", "            ", "self", ".", "out_path", "=", "'.'", "\n", "\n", "", "self", ".", "need_update_step", "=", "autoplay", "\n", "\n", "self", ".", "cam_colors", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", ",", "0.0", "]", ",", "[", "1.0", ",", "0.0", ",", "0.0", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "self", ".", "cameras", "=", "None", "\n", "if", "cameras", "is", "not", "None", ":", "\n", "            ", "self", ".", "cameras", "=", "[", "]", "\n", "for", "extrins_list", "in", "cameras", ":", "\n", "                ", "cur_extrins", "=", "[", "]", "\n", "for", "T", "in", "extrins_list", ":", "\n", "                    ", "extrins", "=", "ds", ".", "CameraExtrinsics", "(", "rotation", "=", "T", "[", ":", "3", ",", ":", "3", "]", ".", "T", ",", "translation", "=", "T", "[", ":", "3", ",", "3", "]", ")", "\n", "# print(extrins)", "\n", "cur_extrins", ".", "append", "(", "ds", ".", "Camera", "(", "Extrinsics", "=", "extrins", ")", ")", "\n", "", "self", ".", "cameras", ".", "append", "(", "cur_extrins", ")", "\n", "\n", "", "", "print", "(", "'Viz sequence of length: '", "+", "str", "(", "self", ".", "seq_len", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.init": [[100, 121], ["range", "pcl_viewer.PCLViewer.pt_set_seq.append", "range", "tk3dv.PointSet3D", "tk3dv.PointSet3D.update", "pcl_viewer.PCLViewer.pt_set_seq[].append", "cur_pcl.astype", "cur_rgb.astype", "numpy.zeros_like"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "argv", "=", "None", ")", ":", "\n", "# create point sets for each frame of each sequence", "\n", "        ", "for", "seq_idx", "in", "range", "(", "self", ".", "num_seq", ")", ":", "\n", "            ", "cur_pcl_seq", "=", "self", ".", "pcl_seq", "[", "seq_idx", "]", "\n", "self", ".", "pt_set_seq", ".", "append", "(", "[", "]", ")", "\n", "for", "frame_idx", "in", "range", "(", "self", ".", "seq_len", ")", ":", "\n", "                ", "cur_pcl", "=", "cur_pcl_seq", "[", "frame_idx", "]", "\n", "cur_rgb", "=", "None", "\n", "if", "self", ".", "rgb_seq", "is", "not", "None", "and", "self", ".", "rgb_seq", "[", "seq_idx", "]", "is", "not", "None", ":", "\n", "                    ", "cur_rgb", "=", "self", ".", "rgb_seq", "[", "seq_idx", "]", "[", "frame_idx", "]", "\n", "\n", "", "cur_pts", "=", "ds", ".", "PointSet3D", "(", ")", "\n", "# print(cur_pcl.shape)", "\n", "if", "cur_pcl", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                    ", "cur_pts", ".", "Points", "=", "cur_pcl", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "cur_rgb", "is", "not", "None", ":", "\n", "                        ", "cur_pts", ".", "Colors", "=", "cur_rgb", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "else", ":", "\n", "                        ", "cur_pts", ".", "Colors", "=", "np", ".", "zeros_like", "(", "cur_pts", ".", "Points", ",", "dtype", "=", "np", ".", "float", ")", "\n", "", "", "cur_pts", ".", "update", "(", ")", "\n", "self", ".", "pt_set_seq", "[", "-", "1", "]", ".", "append", "(", "cur_pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.step": [[123, 140], ["tk3dv.common.utilities.getCurrentEpochTime", "tk3dv.common.utilities.getCurrentEpochTime", "time.sleep"], "methods", ["None"], ["", "", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "need_update_step", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "self", ".", "need_update_step", "=", "self", ".", "autoplay", "\n", "\n", "", "startTime", "=", "utilities", ".", "getCurrentEpochTime", "(", ")", "\n", "\n", "self", ".", "cur_frame", "=", "(", "self", ".", "cur_frame", "+", "1", ")", "%", "self", ".", "seq_len", "\n", "\n", "endTime", "=", "utilities", ".", "getCurrentEpochTime", "(", ")", "\n", "ElapsedTime", "=", "(", "endTime", "-", "startTime", ")", "\n", "\n", "if", "self", ".", "autoplay", ":", "\n", "            ", "desired_step_time", "=", "(", "1.0", "/", "self", ".", "fps", ")", "*", "1e6", "\n", "if", "ElapsedTime", "<", "desired_step_time", ":", "\n", "                ", "sleep", "(", "(", "desired_step_time", "-", "ElapsedTime", ")", "/", "1e6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.step_back": [[141, 147], ["None"], "methods", ["None"], ["", "", "", "def", "step_back", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "need_update_step", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "self", ".", "need_update_step", "=", "self", ".", "autoplay", "\n", "", "self", ".", "cur_frame", "=", "(", "self", ".", "cur_frame", "-", "1", ")", "%", "self", ".", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.drawLine": [[148, 166], ["OpenGL.glMatrixMode", "OpenGL.glPushMatrix", "OpenGL.glPushAttrib", "OpenGL.glLineWidth", "OpenGL.glBegin", "OpenGL.glVertex3f", "OpenGL.glVertex3f", "OpenGL.glEnd", "OpenGL.glPopAttrib", "OpenGL.glPopMatrix", "OpenGL.glColor3f", "OpenGL.glColor3fv"], "methods", ["None"], ["", "def", "drawLine", "(", "self", ",", "start_pt", ",", "end_pt", ",", "LineWidth", "=", "5.0", ",", "Color", "=", "None", ")", ":", "\n", "        ", "gl", ".", "glMatrixMode", "(", "gl", ".", "GL_MODELVIEW", ")", "\n", "gl", ".", "glPushMatrix", "(", ")", "\n", "\n", "gl", ".", "glPushAttrib", "(", "gl", ".", "GL_LINE_BIT", ")", "\n", "gl", ".", "glLineWidth", "(", "LineWidth", ")", "\n", "gl", ".", "glBegin", "(", "gl", ".", "GL_LINES", ")", "\n", "if", "Color", "is", "None", ":", "\n", "            ", "gl", ".", "glColor3f", "(", "1.0", ",", "0.0", ",", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "gl", ".", "glColor3fv", "(", "Color", ")", "\n", "", "gl", ".", "glVertex3f", "(", "start_pt", "[", "0", "]", ",", "start_pt", "[", "1", "]", ",", "start_pt", "[", "2", "]", ")", "\n", "gl", ".", "glVertex3f", "(", "end_pt", "[", "0", "]", ",", "end_pt", "[", "1", "]", ",", "end_pt", "[", "2", "]", ")", "\n", "\n", "gl", ".", "glEnd", "(", ")", "\n", "\n", "gl", ".", "glPopAttrib", "(", ")", "\n", "gl", ".", "glPopMatrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.draw": [[167, 227], ["OpenGL.glMatrixMode", "OpenGL.glPushMatrix", "OpenGL.glScale", "OpenGL.glPopMatrix", "tk3dv.common.drawing.drawUnitWireCube", "OpenGL.glPushMatrix", "OpenGL.glTranslate", "tk3dv.common.drawing.drawUnitWireCube", "OpenGL.glPopMatrix", "range", "range", "OpenGL.glGetIntegerv", "OpenGL.glPixelStorei", "OpenGL.glReadPixels", "numpy.frombuffer", "numpy.reshape", "cv2.flip", "cv2.cvtColor", "os.path.join", "cv2.imwrite", "print", "sys.stdout.flush", "range", "range", "range", "range", "len", "range", "[].draw", "[].draw", "[].draw", "len", "[].draw", "pcl_viewer.PCLViewer.drawLine", "len", "str().zfill", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.draw", "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.draw", "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.draw", "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.draw", "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.drawLine"], ["", "def", "draw", "(", "self", ")", ":", "\n", "        ", "gl", ".", "glMatrixMode", "(", "gl", ".", "GL_MODELVIEW", ")", "\n", "gl", ".", "glPushMatrix", "(", ")", "\n", "\n", "ScaleFact", "=", "1000", "\n", "gl", ".", "glScale", "(", "ScaleFact", ",", "ScaleFact", ",", "ScaleFact", ")", "\n", "\n", "if", "self", ".", "draw_cubes", ":", "\n", "            ", "drawing", ".", "drawUnitWireCube", "(", "2.0", ",", "False", ",", "WireColor", "=", "(", "0.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "\n", "gl", ".", "glPushMatrix", "(", ")", "\n", "gl", ".", "glTranslate", "(", "1.0", ",", "0.0", ",", "0.0", ")", "\n", "drawing", ".", "drawUnitWireCube", "(", "2.0", ",", "False", ",", "WireColor", "=", "(", "1.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "gl", ".", "glPopMatrix", "(", ")", "\n", "\n", "", "if", "self", ".", "draw_all", ":", "\n", "            ", "for", "frame_idx", "in", "range", "(", "self", ".", "num_frames_per_seq", ")", ":", "\n", "                ", "for", "seq_idx", "in", "range", "(", "self", ".", "num_seq", ")", ":", "\n", "                        ", "self", ".", "pt_set_seq", "[", "seq_idx", "]", "[", "frame_idx", "]", ".", "draw", "(", "self", ".", "PointSize", ")", "\n", "", "", "", "else", ":", "\n", "            ", "if", "self", ".", "cur_seq", "==", "self", ".", "num_seq", ":", "\n", "                ", "for", "seq_idx", "in", "range", "(", "self", ".", "num_seq", ")", ":", "\n", "                    ", "self", ".", "pt_set_seq", "[", "seq_idx", "]", "[", "self", ".", "cur_frame", "]", ".", "draw", "(", "self", ".", "PointSize", ")", "\n", "", "", "elif", "self", ".", "cur_seq", "<", "self", ".", "num_seq", ":", "\n", "                ", "self", ".", "pt_set_seq", "[", "self", ".", "cur_seq", "]", "[", "self", ".", "cur_frame", "]", ".", "draw", "(", "self", ".", "PointSize", ")", "\n", "\n", "", "", "if", "self", ".", "cameras", "is", "not", "None", ":", "\n", "            ", "draw_frames", "=", "[", "self", ".", "cur_frame", "]", "\n", "if", "self", ".", "draw_all", ":", "\n", "                ", "draw_frames", "=", "range", "(", "self", ".", "num_frames_per_seq", ")", "\n", "", "for", "cam_frame_idx", "in", "draw_frames", ":", "\n", "                ", "for", "cam_idx", "in", "range", "(", "len", "(", "self", ".", "cameras", ")", ")", ":", "\n", "                    ", "self", ".", "cameras", "[", "cam_idx", "]", "[", "cam_frame_idx", "]", ".", "draw", "(", "Color", "=", "self", ".", "cam_colors", "[", "cam_idx", "%", "len", "(", "self", ".", "cam_colors", ")", "]", ",", "\n", "CubeSide", "=", "-", "0.2", ",", "isDrawDir", "=", "True", ",", "Length", "=", "0.3", ")", "\n", "\n", "# draw cam traj", "\n", "", "", "for", "cam_idx", "in", "range", "(", "len", "(", "self", ".", "cameras", ")", ")", ":", "\n", "                ", "for", "cam_frame_idx", "in", "range", "(", "len", "(", "self", ".", "cameras", "[", "cam_idx", "]", ")", "-", "1", ")", ":", "\n", "                    ", "self", ".", "drawLine", "(", "self", ".", "cameras", "[", "cam_idx", "]", "[", "cam_frame_idx", "]", ".", "Extrinsics", ".", "Translation", ",", "self", ".", "cameras", "[", "cam_idx", "]", "[", "cam_frame_idx", "+", "1", "]", ".", "Extrinsics", ".", "Translation", ",", "Color", "=", "self", ".", "cam_colors", "[", "cam_idx", "%", "len", "(", "self", ".", "cam_colors", ")", "]", ",", "LineWidth", "=", "1.0", ")", "\n", "\n", "", "", "", "gl", ".", "glPopMatrix", "(", ")", "\n", "\n", "if", "self", ".", "take_ss", ":", "\n", "            ", "x", ",", "y", ",", "width", ",", "height", "=", "gl", ".", "glGetIntegerv", "(", "gl", ".", "GL_VIEWPORT", ")", "\n", "# print(\"Screenshot viewport:\", x, y, width, height)", "\n", "gl", ".", "glPixelStorei", "(", "gl", ".", "GL_PACK_ALIGNMENT", ",", "1", ")", "\n", "\n", "data", "=", "gl", ".", "glReadPixels", "(", "x", ",", "y", ",", "width", ",", "height", ",", "gl", ".", "GL_RGBA", ",", "gl", ".", "GL_UNSIGNED_BYTE", ")", "\n", "SS", "=", "np", ".", "frombuffer", "(", "data", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "SS", "=", "np", ".", "reshape", "(", "SS", ",", "(", "height", ",", "width", ",", "4", ")", ")", "\n", "SS", "=", "cv2", ".", "flip", "(", "SS", ",", "0", ")", "\n", "SS", "=", "cv2", ".", "cvtColor", "(", "SS", ",", "cv2", ".", "COLOR_BGRA2RGBA", ")", "\n", "ss_out_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "out_path", ",", "'screenshot_'", "+", "str", "(", "self", ".", "ss_ctr", ")", ".", "zfill", "(", "6", ")", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "ss_out_path", ",", "SS", ")", "\n", "self", ".", "ss_ctr", "=", "self", ".", "ss_ctr", "+", "1", "\n", "self", ".", "take_ss", "=", "False", "\n", "\n", "print", "(", "'[ INFO ]: Done saving.'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.keyPressEvent": [[228, 259], ["a0.key", "a0.key", "a0.key", "pcl_viewer.PCLViewer.step_back", "a0.key", "pcl_viewer.PCLViewer.step", "a0.key", "a0.key", "a0.key", "a0.key", "print", "sys.stdout.flush"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.step_back", "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.step"], ["", "", "def", "keyPressEvent", "(", "self", ",", "a0", ":", "QKeyEvent", ")", ":", "\n", "        ", "if", "a0", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_Plus", ":", "# Increase or decrease point size", "\n", "            ", "if", "self", ".", "PointSize", "<", "20", ":", "\n", "                ", "self", ".", "PointSize", "=", "self", ".", "PointSize", "+", "1", "\n", "\n", "", "", "if", "a0", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_Minus", ":", "# Increase or decrease point size", "\n", "            ", "if", "self", ".", "PointSize", ">", "1", ":", "\n", "                ", "self", ".", "PointSize", "=", "self", ".", "PointSize", "-", "1", "\n", "\n", "", "", "if", "a0", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_Left", ":", "# Go back a frame", "\n", "            ", "self", ".", "need_update_step", "=", "True", "\n", "self", ".", "step_back", "(", ")", "\n", "", "if", "a0", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_Right", ":", "# Go forward frames", "\n", "            ", "self", ".", "need_update_step", "=", "True", "\n", "self", ".", "step", "(", ")", "\n", "\n", "", "if", "a0", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_T", ":", "# toggle which sequence is showing", "\n", "            ", "self", ".", "cur_seq", "+=", "1", "\n", "self", ".", "cur_seq", "%=", "self", ".", "num_display", "\n", "\n", "", "if", "a0", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_P", ":", "\n", "            ", "self", ".", "autoplay", "=", "not", "self", ".", "autoplay", "\n", "self", ".", "need_update_step", "=", "self", ".", "autoplay", "\n", "\n", "", "if", "a0", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_A", ":", "# show all frames at once", "\n", "            ", "self", ".", "draw_all", "=", "not", "self", ".", "draw_all", "\n", "\n", "", "if", "a0", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_S", ":", "\n", "            ", "print", "(", "'[ INFO ]: Taking snapshot. This might take a while...'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "take_ss", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.viz_pcl_seq": [[261, 291], ["PyQt5.QtWidgets.QApplication", "pcl_viewer.PCLViewer", "pcl_viewer.CloseEasel", "CloseEasel.show", "PyQt5.QtWidgets.QApplication.exec_"], "function", ["None"], ["", "", "", "def", "viz_pcl_seq", "(", "pcl_seq", ",", "\n", "rgb_seq", "=", "None", ",", "\n", "fps", "=", "60", ",", "\n", "autoplay", "=", "True", ",", "\n", "cameras", "=", "None", ",", "\n", "draw_cubes", "=", "True", ",", "\n", "out_path", "=", "None", ")", ":", "\n", "    ", "''' \n    Visualize one or more sequences of point clouds with mapped colors (optional).\n\n    If autoplay is true, will play at the given framerate, otherwise\n    Can step through frames with keys.\n\n    Inputs:\n    - pcl_seq : List of point cloud sequences, list of lists of np.arrays of size Nx3 where N may be differenct across frames and sequences.\n    - rbg_seq : Same as pcl_seq, but with point colors instead of locations\n    - fps     : Frame rate.\n    - autoplay: If true, will automatically start playing. Otherwise frame stepping is controlled with arrow keys <- ->\n    - cameras : List of camera transform sequences to visualize, list of np.arrays(F x 4 x 4) where F is the number of frames of each sequence\n    - draw_cubes : if true draws the NOCS cube\n    - out_path : path to save screenshots to (by default saves to '.')\n    '''", "\n", "app", "=", "QApplication", "(", "[", "''", "]", ")", "\n", "view", "=", "PCLViewer", "(", "pcl_seq", ",", "rgb_seq", "=", "rgb_seq", ",", "cameras", "=", "cameras", ",", "fps", "=", "fps", ",", "\n", "autoplay", "=", "autoplay", ",", "draw_cubes", "=", "draw_cubes", ",", "\n", "out_path", "=", "out_path", ")", "\n", "mainWindow", "=", "CloseEasel", "(", "[", "view", "]", ")", "\n", "mainWindow", ".", "isUpdateEveryStep", "=", "autoplay", "\n", "mainWindow", ".", "show", "(", ")", "\n", "app", ".", "exec_", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.VizConfig.__init__": [[19, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flags", ")", ":", "\n", "        ", "'''\n        - flags : argparse flags\n        '''", "\n", "# TNOCS", "\n", "self", ".", "viz_tnocs", "=", "flags", ".", "viz_tnocs", "\n", "\n", "# Observed", "\n", "self", ".", "viz_observed", "=", "flags", ".", "viz_observed", "\n", "\n", "# Interpolated", "\n", "self", ".", "viz_interpolated", "=", "flags", ".", "viz_interpolated", "\n", "\n", "self", ".", "num_sampled_pts", "=", "flags", ".", "num_sampled_pts", "\n", "self", ".", "num_sampled_steps", "=", "flags", ".", "num_sampled_steps", "\n", "self", ".", "constant_in_time", "=", "flags", ".", "constant_in_time", "\n", "self", ".", "show_base_sampling", "=", "flags", ".", "show_base_sampling", "\n", "self", ".", "sample_contours", "=", "flags", ".", "sample_contours", "\n", "self", ".", "show_input_seq", "=", "flags", ".", "show_input_seq", "\n", "self", ".", "tnocs_error_map", "=", "flags", ".", "tnocs_error_map", "\n", "self", ".", "show_nocs_cubes", "=", "flags", ".", "show_nocs_cubes", "\n", "self", ".", "base_color_map", "=", "flags", ".", "base_color_map", "\n", "self", ".", "prob_color_map", "=", "flags", ".", "prob_color_map", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.test_viz": [[43, 178], ["ChamferDistance", "model.eval", "enumerate", "print", "pcl_in.to.to", "nocs_out.to.to", "pcl_in.to.size", "print", "print", "torch_utils.torch_to_numpy", "viz_utils.np_to_list", "viz_utils.np_to_list", "viz_utils.copy_pcl_list", "print", "exit", "model.encode", "model.reconstruct", "torch.norm().mean().to().item", "print", "min", "nocs_out[].view", "pred_pcl[].view", "evaluations.eval_reconstr_frames", "print", "print", "base_seq_to_viz.append", "base_rgb_to_viz.append", "print", "viz_utils.np_to_list", "viz_utils.shift_pcl_list", "pcl_viewer.viz_pcl_seq", "print", "viz_utils.viz_caspr_reconstruction", "print", "torch.linspace().to", "model.reconstruct", "int", "range", "viz_utils.copy_pcl_list", "viz_utils.viz_caspr_reconstruction", "torch_utils.torch_to_numpy", "viz_utils.copy_pcl_list", "range", "len", "subsampled_gt_nocs.append", "subsampled_pcl_in.append", "subsampled_times.append", "cur_base_seq_to_viz.append", "cur_base_rgb_to_viz.append", "len", "torch.norm().mean().to", "viz_utils.get_error_colors", "torch.linspace", "float", "subsampled_gt_nocs.append", "subsampled_pcl_in.append", "subsampled_times.append", "numpy.mean", "numpy.mean", "range", "torch.norm().mean", "torch.norm"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.torch_to_numpy", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.np_to_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.np_to_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.copy_pcl_list", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.encode", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.reconstruct", "home.repos.pwc.inspect_result.davrempe_caspr.utils.evaluations.eval_reconstr_frames", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.np_to_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.shift_pcl_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.viz_pcl_seq", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.viz_caspr_reconstruction", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.reconstruct", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.copy_pcl_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.viz_caspr_reconstruction", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.torch_to_numpy", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.copy_pcl_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.get_error_colors"], ["", "", "def", "test_viz", "(", "cfg", ",", "\n", "model", ",", "\n", "test_dataset", ",", "\n", "test_loader", ",", "\n", "device", ")", ":", "\n", "    ", "'''\n    Visualize CaSPR results\n    '''", "\n", "\n", "from", "tk3dv", ".", "extern", ".", "chamfer", "import", "ChamferDistance", "# only import if we need it", "\n", "chamfer_dist", "=", "ChamferDistance", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "print", "(", "'Batch: %d / %d'", "%", "(", "i", ",", "len", "(", "test_loader", ")", ")", ")", "\n", "pcl_in", ",", "nocs_out", "=", "data", "[", "0", "]", "# world point cloud, corresponding nocs point cloud", "\n", "pcl_in", "=", "pcl_in", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "nocs_out", "=", "nocs_out", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "\n", "# print(nocs_out.size())", "\n", "\n", "B", ",", "T", ",", "N", ",", "_", "=", "pcl_in", ".", "size", "(", ")", "\n", "\n", "if", "B", "!=", "1", ":", "\n", "            ", "print", "(", "'batch size must be 1 to visualize!'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "cur_model_id", "=", "data", "[", "1", "]", "[", "0", "]", "\n", "cur_seq_id", "=", "data", "[", "2", "]", "[", "0", "]", "\n", "print", "(", "'Model %s'", "%", "(", "cur_model_id", ")", ")", "\n", "print", "(", "'Seq %s'", "%", "(", "cur_seq_id", ")", ")", "\n", "\n", "#", "\n", "# first show quantitative eval for context", "\n", "#", "\n", "pred_tnocs", "=", "None", "\n", "if", "cfg", ".", "viz_tnocs", "and", "not", "(", "cfg", ".", "viz_observed", "or", "cfg", ".", "viz_interpolated", ")", ":", "\n", "            ", "_", ",", "pred_tnocs", "=", "model", ".", "encode", "(", "pcl_in", ")", "\n", "", "else", ":", "# we need sampling predictions", "\n", "            ", "samp_pcl", ",", "logprob_samp_pcl", ",", "pred_pcl", ",", "pred_tnocs", "=", "model", ".", "reconstruct", "(", "pcl_in", ",", "\n", "num_points", "=", "cfg", ".", "num_sampled_pts", ",", "\n", "constant_in_time", "=", "cfg", ".", "constant_in_time", ",", "\n", "max_timestamp", "=", "test_dataset", ".", "max_timestamp", ",", "\n", "sample_contours", "=", "SAMPLE_CONTOURS_RADII", "if", "cfg", ".", "sample_contours", "else", "None", ")", "\n", "", "if", "cfg", ".", "viz_tnocs", ":", "\n", "            ", "nocs_err", "=", "torch", ".", "norm", "(", "pred_tnocs", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "-", "nocs_out", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "dim", "=", "3", ")", ".", "mean", "(", ")", ".", "to", "(", "'cpu'", ")", ".", "item", "(", ")", "\n", "print", "(", "'Cur L2 nocs spatial error: %f'", "%", "(", "nocs_err", ")", ")", "\n", "\n", "", "if", "cfg", ".", "viz_observed", "or", "cfg", ".", "viz_interpolated", ":", "\n", "            ", "quant_num_pts", "=", "min", "(", "[", "cfg", ".", "num_sampled_pts", ",", "N", "]", ")", "\n", "observed_tnocs_gt", "=", "nocs_out", "[", ":", ",", ":", ",", ":", "quant_num_pts", ",", ":", "3", "]", ".", "view", "(", "(", "B", "*", "T", ",", "quant_num_pts", ",", "3", ")", ")", "# don't need time stamp for reconstruction", "\n", "observed_reconstr", "=", "pred_pcl", "[", ":", ",", ":", ",", ":", "quant_num_pts", ",", ":", "]", ".", "view", "(", "(", "B", "*", "T", ",", "quant_num_pts", ",", "3", ")", ")", "\n", "mean_chamfer", ",", "cur_emd", "=", "eval_reconstr_frames", "(", "observed_reconstr", ",", "observed_tnocs_gt", ",", "chamfer_dist", ")", "\n", "print", "(", "'Cur Mean Chamfer: %f'", "%", "(", "np", ".", "mean", "(", "mean_chamfer", ")", "*", "1000", ")", ")", "\n", "print", "(", "'Cur Mean EMD: %f'", "%", "(", "np", ".", "mean", "(", "cur_emd", ")", "*", "1000", ")", ")", "\n", "\n", "#", "\n", "# Visualize", "\n", "#", "\n", "\n", "# needed by all visualizations", "\n", "", "pcl_in_np", ",", "gt_nocs_np", "=", "torch_to_numpy", "(", "[", "pcl_in", ",", "nocs_out", "]", ")", "\n", "viz_gt_nocs", "=", "np_to_list", "(", "gt_nocs_np", ")", "\n", "viz_pcl_in", "=", "np_to_list", "(", "pcl_in_np", ")", "\n", "gt_nocs_rgb", "=", "copy_pcl_list", "(", "viz_gt_nocs", ")", "\n", "\n", "base_seq_to_viz", "=", "[", "viz_gt_nocs", "]", "\n", "base_rgb_to_viz", "=", "[", "gt_nocs_rgb", "]", "\n", "if", "cfg", ".", "show_input_seq", ":", "\n", "            ", "base_seq_to_viz", ".", "append", "(", "viz_pcl_in", ")", "\n", "base_rgb_to_viz", ".", "append", "(", "gt_nocs_rgb", ")", "\n", "\n", "# TNOCS regression visualization", "\n", "", "if", "cfg", ".", "viz_tnocs", ":", "\n", "            ", "print", "(", "'Visualizing TNOCS Regression Prediction...'", ")", "\n", "pred_nocs_np", "=", "torch_to_numpy", "(", "[", "pred_tnocs", "]", ")", "[", "0", "]", "\n", "\n", "viz_pred_nocs", "=", "np_to_list", "(", "pred_nocs_np", ")", "\n", "if", "cfg", ".", "tnocs_error_map", ":", "\n", "                ", "pred_nocs_rgb", "=", "[", "get_error_colors", "(", "viz_pred_nocs", "[", "idx", "]", ",", "viz_gt_nocs", "[", "idx", "]", ")", "for", "idx", "in", "range", "(", "gt_nocs_np", ".", "shape", "[", "1", "]", ")", "]", "\n", "", "else", ":", "\n", "                ", "pred_nocs_rgb", "=", "copy_pcl_list", "(", "viz_pred_nocs", ")", "\n", "# translate to be in predicted viz cube", "\n", "", "viz_pred_nocs", "=", "shift_pcl_list", "(", "viz_pred_nocs", ",", "PRED_OFFSET", ")", "\n", "\n", "seq_to_viz", "=", "base_seq_to_viz", "+", "[", "viz_pred_nocs", "]", "\n", "rgb_to_viz", "=", "base_rgb_to_viz", "+", "[", "pred_nocs_rgb", "]", "\n", "\n", "viz_pcl_seq", "(", "seq_to_viz", ",", "rgb_seq", "=", "rgb_to_viz", ",", "fps", "=", "T", ",", "autoplay", "=", "True", ",", "draw_cubes", "=", "cfg", ".", "show_nocs_cubes", ")", "\n", "\n", "# Observed sampling visualization", "\n", "", "if", "cfg", ".", "viz_observed", ":", "\n", "            ", "print", "(", "'Visualizing CaSPR Observed Reconstruction Sampling...'", ")", "\n", "viz_caspr_reconstruction", "(", "cfg", ",", "samp_pcl", ",", "logprob_samp_pcl", ",", "pred_pcl", ",", "\n", "base_seq_to_viz", ",", "base_rgb_to_viz", ",", "T", ")", "\n", "\n", "# Interpolated sampling visualization", "\n", "", "if", "cfg", ".", "viz_interpolated", ":", "\n", "            ", "print", "(", "'Visualizing CaSPR Interpolated Reconstruction Sampling...'", ")", "\n", "timstamps", "=", "torch", ".", "linspace", "(", "0.0", ",", "1.0", ",", "cfg", ".", "num_sampled_steps", ")", ".", "to", "(", "pcl_in", ")", "\n", "# rerun reconstruction on higher-res timestamps", "\n", "samp_pcl", ",", "logprob_samp_pcl", ",", "pred_pcl", ",", "_", "=", "model", ".", "reconstruct", "(", "pcl_in", ",", "\n", "timestamps", "=", "timstamps", ",", "\n", "num_points", "=", "cfg", ".", "num_sampled_pts", ",", "\n", "constant_in_time", "=", "cfg", ".", "constant_in_time", ",", "\n", "sample_contours", "=", "SAMPLE_CONTOURS_RADII", "if", "cfg", ".", "sample_contours", "else", "None", ")", "\n", "\n", "# naively subsample observations to visualize with interpolated result", "\n", "subsampled_gt_nocs", "=", "[", "]", "\n", "subsampled_pcl_in", "=", "[", "]", "\n", "subsampled_times", "=", "[", "]", "\n", "subsamples_per_step", "=", "int", "(", "float", "(", "cfg", ".", "num_sampled_steps", ")", "/", "T", ")", "\n", "for", "time_idx", "in", "range", "(", "T", ")", ":", "\n", "                ", "for", "repeat_idx", "in", "range", "(", "subsamples_per_step", ")", ":", "\n", "                    ", "subsampled_gt_nocs", ".", "append", "(", "gt_nocs_np", "[", "0", ",", "time_idx", ",", ":", ",", ":", "3", "]", ")", "\n", "subsampled_pcl_in", ".", "append", "(", "pcl_in_np", "[", "0", ",", "time_idx", ",", ":", ",", ":", "3", "]", ")", "\n", "subsampled_times", ".", "append", "(", "gt_nocs_np", "[", "0", ",", "time_idx", ",", "0", ",", "3", "]", ")", "\n", "# fill any extras", "\n", "", "", "while", "len", "(", "subsampled_gt_nocs", ")", "<", "cfg", ".", "num_sampled_steps", ":", "\n", "                ", "subsampled_gt_nocs", ".", "append", "(", "gt_nocs_np", "[", "0", ",", "T", "-", "1", ",", ":", ",", ":", "3", "]", ")", "\n", "subsampled_pcl_in", ".", "append", "(", "pcl_in_np", "[", "0", ",", "T", "-", "1", ",", ":", ",", ":", "3", "]", ")", "\n", "subsampled_times", ".", "append", "(", "gt_nocs_np", "[", "0", ",", "T", "-", "1", ",", "0", ",", "3", "]", ")", "\n", "\n", "", "viz_gt_nocs", "=", "subsampled_gt_nocs", "\n", "viz_pcl_in", "=", "subsampled_pcl_in", "\n", "gt_nocs_rgb", "=", "copy_pcl_list", "(", "viz_gt_nocs", ")", "\n", "\n", "cur_base_seq_to_viz", "=", "[", "viz_gt_nocs", "]", "\n", "cur_base_rgb_to_viz", "=", "[", "gt_nocs_rgb", "]", "\n", "if", "cfg", ".", "show_input_seq", ":", "\n", "                ", "cur_base_seq_to_viz", ".", "append", "(", "viz_pcl_in", ")", "\n", "cur_base_rgb_to_viz", ".", "append", "(", "gt_nocs_rgb", ")", "\n", "\n", "", "viz_caspr_reconstruction", "(", "cfg", ",", "samp_pcl", ",", "logprob_samp_pcl", ",", "pred_pcl", ",", "\n", "cur_base_seq_to_viz", ",", "cur_base_rgb_to_viz", ",", "cfg", ".", "num_sampled_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.viz_caspr_reconstruction": [[179, 217], ["torch_utils.torch_to_numpy", "viz_utils.np_to_list", "viz_utils.copy_pcl_list", "viz_utils.np_to_list", "viz_utils.shift_pcl_list", "pcl_viewer.viz_pcl_seq", "viz_utils.get_sphere_samp_colors", "seq_to_viz.append", "rgb_to_viz.append", "numpy.array", "range", "viz_utils.get_logprob_colors", "len", "range"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.torch_to_numpy", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.np_to_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.copy_pcl_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.np_to_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.shift_pcl_list", "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.viz_pcl_seq", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.get_sphere_samp_colors", "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.get_logprob_colors"], ["", "", "", "def", "viz_caspr_reconstruction", "(", "cfg", ",", "samp_pcl", ",", "logprob_samp_pcl", ",", "pred_pcl", ",", "\n", "base_seq_to_viz", ",", "base_rgb_to_viz", ",", "fps", ")", ":", "\n", "    ", "'''\n    Visualizes full CaSPR reconstruction pipeline results\n    '''", "\n", "samp_pcl_np", ",", "logprob_samp_pcl_np", ",", "pred_pcl_np", "=", "torch_to_numpy", "(", "[", "samp_pcl", ",", "logprob_samp_pcl", ",", "pred_pcl", "]", ")", "\n", "\n", "# sampling from caspr", "\n", "viz_pred", "=", "np_to_list", "(", "pred_pcl_np", ")", "\n", "pred_nocs_rgb", "=", "copy_pcl_list", "(", "viz_pred", ")", "\n", "# sampling from base gaussian given to caspr", "\n", "viz_samp", "=", "np_to_list", "(", "samp_pcl_np", ")", "\n", "viz_samp_rgb", "=", "pred_nocs_rgb", "\n", "\n", "if", "cfg", ".", "sample_contours", ":", "\n", "# get different colors for each contour", "\n", "        ", "pred_nocs_rgb", "=", "viz_samp_rgb", "=", "get_sphere_samp_colors", "(", "-", "logprob_samp_pcl_np", "[", "0", "]", ")", "\n", "", "elif", "cfg", ".", "base_color_map", ":", "\n", "# color based on location of base point rather than final location", "\n", "        ", "cur_gaussian", "=", "samp_pcl_np", "[", "0", "]", "\n", "cur_gaussian", "=", "cur_gaussian", "/", "4.5", "\n", "cur_gaussian", "=", "cur_gaussian", "+", "0.5", "\n", "pred_nocs_rgb", "=", "viz_samp_rgb", "=", "[", "cur_gaussian", "[", "idx", "]", "for", "idx", "in", "range", "(", "cur_gaussian", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "elif", "cfg", ".", "prob_color_map", ":", "\n", "# color based on log probability of base distribution sample", "\n", "        ", "pred_nocs_rgb", "=", "viz_samp_rgb", "=", "get_logprob_colors", "(", "-", "logprob_samp_pcl_np", "[", "0", "]", ")", "\n", "\n", "", "viz_pred", "=", "shift_pcl_list", "(", "viz_pred", ",", "PRED_OFFSET", ")", "\n", "# have to (approximately) scale & translate manually b/c base sampling did not go through normalzation layer yet", "\n", "viz_samp", "=", "[", "(", "viz_samp", "[", "idx", "]", "/", "15.0", ")", "+", "np", ".", "array", "(", "[", "BASE_OFFSET", "]", ")", "for", "idx", "in", "range", "(", "len", "(", "viz_samp", ")", ")", "]", "\n", "\n", "seq_to_viz", "=", "base_seq_to_viz", "+", "[", "viz_pred", "]", "\n", "rgb_to_viz", "=", "base_rgb_to_viz", "+", "[", "pred_nocs_rgb", "]", "\n", "if", "cfg", ".", "show_base_sampling", ":", "\n", "        ", "seq_to_viz", ".", "append", "(", "viz_samp", ")", "\n", "rgb_to_viz", ".", "append", "(", "viz_samp_rgb", ")", "\n", "\n", "", "viz_pcl_seq", "(", "seq_to_viz", ",", "rgb_seq", "=", "rgb_to_viz", ",", "fps", "=", "fps", ",", "autoplay", "=", "True", ",", "draw_cubes", "=", "cfg", ".", "show_nocs_cubes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.np_to_list": [[222, 225], ["range"], "function", ["None"], ["", "def", "np_to_list", "(", "np_array", ")", ":", "\n", "    ", "''' Turns B x T x N x D np array into a list of Nx3 arrays for visualization. Uses batch 1. '''", "\n", "return", "[", "np_array", "[", "0", ",", "i", ",", ":", ",", ":", "3", "]", "for", "i", "in", "range", "(", "np_array", ".", "shape", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.copy_pcl_list": [[226, 228], ["range", "len"], "function", ["None"], ["", "def", "copy_pcl_list", "(", "pcl_list", ")", ":", "\n", "    ", "return", "[", "pcl_list", "[", "idx", "]", "for", "idx", "in", "range", "(", "len", "(", "pcl_list", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.shift_pcl_list": [[229, 234], ["numpy.array", "range", "len"], "function", ["None"], ["", "def", "shift_pcl_list", "(", "pcl_list", ",", "offset", ")", ":", "\n", "    ", "'''\n    Shifts a list of Nx3 np array point clouds by the given offset translation [x,y,z].\n    '''", "\n", "return", "[", "pcl_list", "[", "idx", "]", "+", "np", ".", "array", "(", "[", "offset", "]", ")", "for", "idx", "in", "range", "(", "len", "(", "pcl_list", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.get_error_colors": [[235, 245], ["numpy.linalg.norm", "numpy.ones_like", "numpy.minimum"], "function", ["None"], ["", "def", "get_error_colors", "(", "predicted", ",", "gt", ")", ":", "\n", "    ", "worst_error", "=", "0.07", "\n", "# color the predicted_nocs based on error", "\n", "pt_errors", "=", "np", ".", "linalg", ".", "norm", "(", "predicted", "-", "gt", ",", "axis", "=", "1", ")", "\n", "pt_colors", "=", "np", ".", "ones_like", "(", "predicted", ")", "\n", "pt_colors", "[", ":", ",", "0", "]", "=", "np", ".", "minimum", "(", "1.0", ",", "pt_errors", "/", "worst_error", ")", "# based on error", "\n", "pt_colors", "[", ":", ",", "1", "]", "=", "27.0", "/", "255.0", "\n", "pt_colors", "[", ":", ",", "2", "]", "=", "116.0", "/", "255.0", "\n", "\n", "return", "pt_colors", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.get_logprob_colors": [[246, 263], ["numpy.ones", "numpy.minimum", "range"], "function", ["None"], ["", "def", "get_logprob_colors", "(", "logprob_y", ",", "low_prob", "=", "2.0", ",", "high_prob", "=", "9.0", ")", ":", "\n", "    ", "'''\n    logprob_y : T x N\n    '''", "\n", "# print(logprob_y)", "\n", "trans_logprob", "=", "logprob_y", "-", "low_prob", "\n", "high_prob", "-=", "low_prob", "\n", "low_prob", "=", "0.0", "\n", "T", ",", "N", "=", "logprob_y", ".", "shape", "\n", "pt_colors", "=", "np", ".", "ones", "(", "(", "T", ",", "N", ",", "3", ")", ")", "\n", "pt_colors", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "minimum", "(", "1.0", ",", "trans_logprob", "/", "high_prob", ")", "\n", "pt_colors", "[", ":", ",", ":", ",", "1", "]", "=", "27.0", "/", "255.0", "\n", "pt_colors", "[", ":", ",", ":", ",", "2", "]", "=", "116.0", "/", "255.0", "\n", "\n", "logprob_colors", "=", "[", "pt_colors", "[", "idx", "]", "for", "idx", "in", "range", "(", "pt_colors", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "return", "logprob_colors", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.viz_utils.get_sphere_samp_colors": [[264, 286], ["numpy.array", "numpy.unique", "numpy.ones", "pt_colors.reshape.reshape", "logprob_y.round", "range"], "function", ["None"], ["", "def", "get_sphere_samp_colors", "(", "logprob_y", ")", ":", "\n", "    ", "'''\n    logprob_y : T x N\n    '''", "\n", "\n", "prob_colors", "=", "np", ".", "array", "(", "[", "[", "153.0", ",", "0.0", ",", "76.0", "]", ",", "\n", "[", "102.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "204.0", ",", "102.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "102.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "102.0", ",", "204.0", "]", ",", "\n", "[", "102.0", ",", "0.0", ",", "204.0", "]", "]", ")", "\n", "prob_colors", "/=", "255.0", "\n", "\n", "T", ",", "N", "=", "logprob_y", ".", "shape", "\n", "sorted_probs", ",", "inv_map", "=", "np", ".", "unique", "(", "logprob_y", ".", "round", "(", "decimals", "=", "4", ")", ",", "return_inverse", "=", "True", ")", "\n", "\n", "pt_colors", "=", "np", ".", "ones", "(", "(", "T", "*", "N", ",", "3", ")", ")", "\n", "pt_colors", "[", ":", ",", ":", "]", "=", "prob_colors", "[", "inv_map", ",", ":", "]", "\n", "pt_colors", "=", "pt_colors", ".", "reshape", "(", "(", "T", ",", "N", ",", "3", ")", ")", "\n", "\n", "logprob_colors", "=", "[", "pt_colors", "[", "idx", "]", "for", "idx", "in", "range", "(", "pt_colors", ".", "shape", "[", "0", "]", ")", "]", "\n", "return", "logprob_colors", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.test_utils.TestStatTracker.__init__": [[12, 26], ["numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_sum", "=", "0.0", "\n", "self", ".", "total_loss_count", "=", "0", "\n", "\n", "self", ".", "cnf_err_sum", "=", "0.0", "\n", "self", ".", "cnf_err_count", "=", "0", "\n", "\n", "self", ".", "tnocs_pos_err_sum", "=", "0.0", "\n", "self", ".", "tnocs_pos_err_count", "=", "0", "\n", "\n", "self", ".", "tnocs_time_err_sum", "=", "0.0", "\n", "self", ".", "tnocs_time_err_count", "=", "0", "\n", "\n", "self", ".", "nfe_sum", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.test_utils.TestStatTracker.record_stats": [[27, 45], ["numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "record_stats", "(", "self", ",", "loss_scalar", ",", "cnf_err", ",", "tnocs_pos_err", ",", "tnocs_time_err", ",", "nfe", ")", ":", "\n", "        ", "'''\n        Takes in a loss value and numpy arrays of various losses/errors and adds to\n        the current sum. Updates counts automatically.\n        '''", "\n", "self", ".", "loss_sum", "+=", "loss_scalar", "\n", "self", ".", "total_loss_count", "+=", "1", "\n", "\n", "self", ".", "cnf_err_sum", "+=", "np", ".", "sum", "(", "cnf_err", ")", "\n", "self", ".", "cnf_err_count", "+=", "cnf_err", ".", "shape", "[", "0", "]", "*", "cnf_err", ".", "shape", "[", "1", "]", "*", "cnf_err", ".", "shape", "[", "2", "]", "\n", "\n", "self", ".", "tnocs_pos_err_sum", "+=", "np", ".", "sum", "(", "tnocs_pos_err", ")", "\n", "self", ".", "tnocs_pos_err_count", "+=", "tnocs_pos_err", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "tnocs_time_err_sum", "+=", "np", ".", "sum", "(", "tnocs_time_err", ")", "\n", "self", ".", "tnocs_time_err_count", "+=", "tnocs_time_err", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "nfe_sum", "+=", "nfe", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.test_utils.TestStatTracker.get_mean_stats": [[46, 56], ["None"], "methods", ["None"], ["", "def", "get_mean_stats", "(", "self", ")", ":", "\n", "        ", "''' Return mean for all values '''", "\n", "total_loss_out", "=", "self", ".", "loss_sum", "/", "self", ".", "total_loss_count", "\n", "\n", "cnf_err_out", "=", "self", ".", "cnf_err_sum", "/", "self", ".", "cnf_err_count", "\n", "tnocs_pos_err_out", "=", "self", ".", "tnocs_pos_err_sum", "/", "self", ".", "tnocs_pos_err_count", "\n", "tnocs_time_err_out", "=", "self", ".", "tnocs_time_err_sum", "/", "self", ".", "tnocs_time_err_count", "\n", "mean_nfe", "=", "self", ".", "nfe_sum", "/", "self", ".", "total_loss_count", "\n", "\n", "return", "total_loss_out", ",", "cnf_err_out", ",", "tnocs_pos_err_out", ",", "tnocs_time_err_out", ",", "mean_nfe", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.transform_utils.random_rotation": [[10, 27], ["numpy.random.uniform", "open3d.geometry.get_rotation_matrix_from_quaternion", "numpy.sqrt", "numpy.sin", "numpy.sqrt", "numpy.cos", "numpy.sqrt", "numpy.sin", "numpy.sqrt", "numpy.cos", "numpy.array"], "function", ["None"], ["def", "random_rotation", "(", ")", ":", "\n", "    ", "'''\n    Returns a uniformly sampled rotation matrix.\n    Uses method at http://planning.cs.uiuc.edu/node198.html to generate\n    a random uniform quaternion which is then converted\n    '''", "\n", "u", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "3", ")", "\n", "coeff1", "=", "2.0", "*", "np", ".", "pi", "*", "u", "[", "1", "]", "\n", "coeff2", "=", "2.0", "*", "np", ".", "pi", "*", "u", "[", "2", "]", "\n", "w", "=", "np", ".", "sqrt", "(", "1.0", "-", "u", "[", "0", "]", ")", "*", "np", ".", "sin", "(", "coeff1", ")", "\n", "x", "=", "np", ".", "sqrt", "(", "1.0", "-", "u", "[", "0", "]", ")", "*", "np", ".", "cos", "(", "coeff1", ")", "\n", "y", "=", "np", ".", "sqrt", "(", "u", "[", "0", "]", ")", "*", "np", ".", "sin", "(", "coeff2", ")", "\n", "z", "=", "np", ".", "sqrt", "(", "u", "[", "0", "]", ")", "*", "np", ".", "cos", "(", "coeff2", ")", "\n", "\n", "R", "=", "o3d", ".", "geometry", ".", "get_rotation_matrix_from_quaternion", "(", "np", ".", "array", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ")", ")", "\n", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.transform_utils.rotation_axis": [[28, 34], ["numpy.linalg.norm", "open3d.geometry.get_rotation_matrix_from_axis_angle"], "function", ["None"], ["", "def", "rotation_axis", "(", "axis", ",", "angle", ")", ":", "\n", "    ", "'''\n    Return rot matrix around the given axis [x,y,or z] and angle.\n    '''", "\n", "axis", "/=", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "\n", "return", "o3d", ".", "geometry", ".", "get_rotation_matrix_from_axis_angle", "(", "axis", "*", "angle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.transform_utils.random_rotation_axis": [[35, 49], ["numpy.random.uniform", "open3d.geometry.get_rotation_matrix_from_axis_angle", "print"], "function", ["None"], ["", "def", "random_rotation_axis", "(", "axis", ")", ":", "\n", "    ", "'''\n    Returns a random rotation matrix around a given\n    principle axis (x, y, or z)\n    '''", "\n", "if", "axis", "not", "in", "AXIS_MAP", ":", "\n", "        ", "print", "(", "'Axis must be x, y, or z!'", ")", "\n", "return", "None", "\n", "", "rot_axis", "=", "AXIS_MAP", "[", "axis", "]", "\n", "rot_angle", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.0", ",", "high", "=", "2.0", "*", "np", ".", "pi", ")", "\n", "\n", "R", "=", "o3d", ".", "geometry", ".", "get_rotation_matrix_from_axis_angle", "(", "rot_axis", "*", "rot_angle", ")", "\n", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.transform_utils.random_sphere_point": [[50, 62], ["numpy.random.uniform", "numpy.random.uniform", "numpy.sqrt", "numpy.array", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "random_sphere_point", "(", ")", ":", "\n", "    ", "'''\n    Returns a random point on the surface of a unit sphere.\n    Using method from: http://mathworld.wolfram.com/SpherePointPicking.html.\n    '''", "\n", "u", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "1.0", ",", "high", "=", "1.0", ")", "\n", "theta", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0", ",", "high", "=", "2.0", "*", "np", ".", "pi", ")", "\n", "coeff", "=", "np", ".", "sqrt", "(", "1.0", "-", "u", "**", "2", ")", "\n", "x", "=", "coeff", "*", "np", ".", "cos", "(", "theta", ")", "\n", "y", "=", "coeff", "*", "np", ".", "sin", "(", "theta", ")", "\n", "z", "=", "u", "\n", "return", "np", ".", "array", "(", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.transform_utils.random_sphere_points": [[63, 79], ["numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.arccos", "numpy.cbrt", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.array", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "random_sphere_points", "(", "num_points", ",", "radius", "=", "0.5", ")", ":", "\n", "    ", "'''\n    Returns random points inside a sphere of the given radius\n    Using method from: https://stackoverflow.com/a/5408843.\n    '''", "\n", "costheta", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "1.0", ",", "high", "=", "1.0", ",", "size", "=", "num_points", ")", "\n", "phi", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0", ",", "high", "=", "2.0", "*", "np", ".", "pi", ",", "size", "=", "num_points", ")", "\n", "u", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0", ",", "high", "=", "1.0", ",", "size", "=", "num_points", ")", "\n", "theta", "=", "np", ".", "arccos", "(", "costheta", ")", "\n", "r", "=", "radius", "*", "np", ".", "cbrt", "(", "u", ")", "\n", "\n", "x", "=", "r", "*", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "cos", "(", "phi", ")", "\n", "y", "=", "r", "*", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "sin", "(", "phi", ")", "\n", "z", "=", "r", "*", "np", ".", "cos", "(", "theta", ")", "\n", "vol_points", "=", "np", ".", "array", "(", "[", "x", ",", "y", ",", "z", "]", ")", ".", "T", "\n", "return", "vol_points", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.transform_utils.sphere_surface_points": [[80, 86], ["numpy.random.uniform", "numpy.linalg.norm().reshape", "numpy.linalg.norm"], "function", ["None"], ["", "def", "sphere_surface_points", "(", "num_points", ",", "radius", "=", "0.5", ")", ":", "\n", "# sample uniformly", "\n", "    ", "uniform_cube", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "1.0", ",", "high", "=", "1.0", ",", "size", "=", "(", "num_points", ",", "3", ")", ")", "\n", "norm_uniform", "=", "uniform_cube", "/", "np", ".", "linalg", ".", "norm", "(", "uniform_cube", ",", "axis", "=", "1", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "random_surface", "=", "norm_uniform", "*", "radius", "\n", "return", "random_surface", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.transform_utils.normals_to_angles": [[87, 99], ["torch.norm", "torch.atan().unsqueeze", "torch.atan2().unsqueeze", "torch.cat", "torch.atan", "torch.atan2"], "function", ["None"], ["", "def", "normals_to_angles", "(", "normals", ")", ":", "\n", "    ", "'''\n    Given a batch of normals at each time step, converts to a 2D angle representation.\n    normals : B x T x N x 3\n    '''", "\n", "x2y2", "=", "torch", ".", "norm", "(", "normals", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "dim", "=", "3", ")", "\n", "theta", "=", "torch", ".", "atan", "(", "x2y2", "/", "normals", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", ".", "unsqueeze", "(", "3", ")", "# norm(x, y) / z", "\n", "theta", "[", "theta", "<", "0", "]", "+=", "np", ".", "pi", "# make angles from 0 to pi rather than discontinously from pi/2 to -pi/2", "\n", "phi", "=", "torch", ".", "atan2", "(", "normals", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "normals", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "3", ")", "# y / x", "\n", "phi", "[", "phi", "<", "0", "]", "+=", "2.0", "*", "np", ".", "pi", "# make angles from 0 to 2pi rather -pi to pi", "\n", "angles", "=", "torch", ".", "cat", "(", "[", "theta", ",", "phi", "]", ",", "dim", "=", "3", ")", "\n", "return", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.transform_utils.angles_to_normals": [[100, 115], ["torch.cos", "torch.stack", "torch.sin", "torch.cos", "torch.sin", "torch.sin"], "function", ["None"], ["", "def", "angles_to_normals", "(", "angles", ")", ":", "\n", "    ", "'''\n    Given a batch of angles representating points on the unit sphere, \n    converts them to the 3D euclidean represenation.\n\n    angles : B x T x N x 2\n    '''", "\n", "theta", "=", "angles", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "# theta[theta < 0] += np.pi", "\n", "phi", "=", "angles", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "x", "=", "torch", ".", "sin", "(", "theta", ")", "*", "torch", ".", "cos", "(", "phi", ")", "\n", "y", "=", "torch", ".", "sin", "(", "theta", ")", "*", "torch", ".", "sin", "(", "phi", ")", "\n", "z", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "normals", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "dim", "=", "3", ")", "\n", "return", "normals", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.TrainLossTracker.__init__": [[52, 65], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "# total weighted loss actually used to optimize the net", "\n", "        ", "self", ".", "train_losses", "=", "[", "]", "\n", "# optimization step at which the loss was recorded", "\n", "self", ".", "train_steps", "=", "[", "]", "\n", "\n", "self", ".", "cnf_losses", "=", "[", "]", "\n", "self", ".", "tnocs_losses", "=", "[", "]", "\n", "\n", "# total weighted loss acutally used to optimize", "\n", "self", ".", "val_losses", "=", "[", "]", "\n", "# optimization step at which loss was recorded", "\n", "self", ".", "val_steps", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.TrainLossTracker.record_train_step": [[66, 72], ["train_utils.TrainLossTracker.train_losses.append", "train_utils.TrainLossTracker.cnf_losses.append", "train_utils.TrainLossTracker.tnocs_losses.append", "train_utils.TrainLossTracker.train_steps.append"], "methods", ["None"], ["", "def", "record_train_step", "(", "self", ",", "train_loss", ",", "cnf_loss", ",", "tnocs_loss", ",", "step_idx", ")", ":", "\n", "        ", "self", ".", "train_losses", ".", "append", "(", "train_loss", ")", "\n", "self", ".", "cnf_losses", ".", "append", "(", "cnf_loss", ")", "\n", "self", ".", "tnocs_losses", ".", "append", "(", "tnocs_loss", ")", "\n", "\n", "self", ".", "train_steps", ".", "append", "(", "step_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.TrainLossTracker.record_val_step": [[73, 76], ["train_utils.TrainLossTracker.val_losses.append", "train_utils.TrainLossTracker.val_steps.append"], "methods", ["None"], ["", "def", "record_val_step", "(", "self", ",", "val_loss", ",", "step_idx", ")", ":", "\n", "        ", "self", ".", "val_losses", ".", "append", "(", "val_loss", ")", "\n", "self", ".", "val_steps", ".", "append", "(", "step_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.TrainLossTracker.plot_cur_loss_curves": [[77, 81], ["train_utils.plot_train_stats"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.plot_train_stats"], ["", "def", "plot_cur_loss_curves", "(", "self", ",", "out_dir", ")", ":", "\n", "        ", "plot_train_stats", "(", "self", ".", "train_losses", ",", "self", ".", "cnf_losses", ",", "self", ".", "tnocs_losses", ",", "\n", "self", ".", "train_steps", ",", "self", ".", "val_losses", ",", "\n", "self", ".", "val_steps", ",", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.plot_train_stats": [[13, 30], ["matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.legend", "matplotlib.title", "matplotlib.savefig", "matplotlib.close", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "os.path.join"], "function", ["None"], ["def", "plot_train_stats", "(", "train_losses", ",", "cnf_losses", ",", "tnocs_losses", ",", "\n", "train_steps", ",", "val_losses", ",", "val_steps", ",", "out_dir", ")", ":", "\n", "# plot training and validation curves", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "8", ")", ")", "\n", "\n", "plt", ".", "plot", "(", "np", ".", "array", "(", "train_steps", ")", ",", "np", ".", "array", "(", "train_losses", ")", ",", "'-'", ",", "label", "=", "'train loss'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "array", "(", "train_steps", ")", ",", "np", ".", "array", "(", "cnf_losses", ")", ",", "'--'", ",", "label", "=", "'NLL loss'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "array", "(", "train_steps", ")", ",", "np", ".", "array", "(", "tnocs_losses", ")", ",", "'--'", ",", "label", "=", "'TNOCS loss'", ")", "\n", "\n", "plt", ".", "plot", "(", "np", ".", "array", "(", "val_steps", ")", ",", "np", ".", "array", "(", "val_losses", ")", ",", "'-'", ",", "label", "=", "'val loss'", ")", "\n", "\n", "plt", ".", "xlabel", "(", "'optim steps'", ")", "\n", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "'Training Curves'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'train_curve.png'", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log": [[31, 35], ["print", "open", "f.write", "str"], "function", ["None"], ["", "def", "log", "(", "log_out", ",", "write_str", ")", ":", "\n", "    ", "with", "open", "(", "log_out", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "write_str", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "write_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.print_stats": [[36, 45], ["train_utils.log", "train_utils.log", "train_utils.log", "train_utils.log"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log"], ["", "def", "print_stats", "(", "log_out", ",", "epoch", ",", "cur_batch", ",", "num_batches", ",", "total_loss", ",", "\n", "cnf_err", ",", "tnocs_pos_err", ",", "tnocs_time_err", ",", "\n", "type_id", "=", "'TRAIN'", ",", "nfe", "=", "None", ")", ":", "\n", "    ", "log", "(", "log_out", ",", "'[Epoch %d: Batch %d/%d] %s Mean loss: %f'", "%", "(", "epoch", ",", "cur_batch", ",", "num_batches", ",", "type_id", ",", "total_loss", ")", ")", "\n", "log", "(", "log_out", ",", "'                    %s Mean CNF NLL: %f'", "%", "(", "type_id", ",", "cnf_err", ")", ")", "\n", "log", "(", "log_out", ",", "'                    %s Mean TNOCS Pos (m): %f, Mean TNOCS time: %f'", "%", "(", "type_id", ",", "tnocs_pos_err", ",", "tnocs_time_err", ")", ")", "\n", "\n", "if", "nfe", "is", "not", "None", ":", "\n", "        ", "log", "(", "log_out", ",", "'                    %s Mean NFE (latent-ode, decoder): (%f, %f)'", "%", "(", "type_id", ",", "nfe", "[", "0", "]", ",", "nfe", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.run_one_epoch": [[82, 234], ["isinstance", "enumerate", "torch.cuda.empty_cache", "print", "exit", "model.eval.train", "model.eval.eval", "pcl_in.to.to", "nocs_out.to.to", "nocs_out.to.size", "model.eval.", "torch.zeros().to", "optimizer.zero_grad", "len", "torch.zeros.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().to.backward", "optimizer.step", "batch_losses.append", "torch.zeros().to.to().item", "torch_utils.torch_to_numpy", "numpy.linalg.norm", "loss_tracker.record_stats", "len", "print", "exit", "model.eval.module.get_nfe", "model.eval.get_nfe", "torch.zeros", "per_point_nll.sum.mean", "per_point_tnocs[].mean", "torch.zeros().to.to().item", "numpy.mean", "torch.zeros.to().item", "torch.zeros.to().item", "loss_tracker.record_train_step", "numpy.mean", "cur_tnocs_error[].reshape", "numpy.linalg.norm", "numpy.mean", "train_utils.print_stats", "tnocs_err[].reshape", "tnocs_err[].reshape", "numpy.zeros", "print", "loss_tracker.get_mean_stats", "train_utils.print_stats", "numpy.array", "torch_utils.torch_to_numpy", "torch_utils.torch_to_numpy", "cur_tnocs_error[].reshape", "numpy.mean", "len", "torch.zeros().to.to", "len", "torch.zeros().to.to", "torch.zeros.to", "torch.zeros.to", "len", "len"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.caspr.train.train", "home.repos.pwc.inspect_result.davrempe_caspr.utils.emd.EarthMoverDistanceFunction.backward", "home.repos.pwc.inspect_result.davrempe_caspr.utils.pcl_viewer.PCLViewer.step", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.torch_to_numpy", "home.repos.pwc.inspect_result.davrempe_caspr.utils.test_utils.TestStatTracker.record_stats", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.get_nfe", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.get_nfe", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.TrainLossTracker.record_train_step", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.print_stats", "home.repos.pwc.inspect_result.davrempe_caspr.utils.test_utils.TestStatTracker.get_mean_stats", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.print_stats", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.torch_to_numpy", "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.torch_to_numpy"], ["", "", "def", "run_one_epoch", "(", "model", ",", "\n", "data_loader", ",", "\n", "device", ",", "\n", "optimizer", ",", "\n", "cnf_loss_weight", ",", "\n", "tnocs_loss_weight", ",", "\n", "epoch", ",", "\n", "loss_tracker", ",", "\n", "log_out", ",", "\n", "mode", "=", "'train'", ",", "\n", "print_stats_every", "=", "10", ")", ":", "\n", "    ", "'''\n    Runs through the given dataset once to train or test the model depending on the mode given.\n    '''", "\n", "if", "mode", "not", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "        ", "print", "(", "'Most must be train or test!'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "is_parallel", "=", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "model", "=", "model", ".", "train", "(", ")", "\n", "batch_losses", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "model", "=", "model", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "pcl_in", ",", "nocs_out", "=", "data", "[", "0", "]", "# world point cloud, corresponding nocs point cloud", "\n", "pcl_in", "=", "pcl_in", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "nocs_out", "=", "nocs_out", ".", "to", "(", "device", ")", "# B x T x N x 4 (x,y,z,t)", "\n", "\n", "# print(pcl_in.size())", "\n", "B", ",", "T", ",", "N", ",", "_", "=", "nocs_out", ".", "size", "(", ")", "\n", "\n", "if", "is_parallel", "and", "B", "%", "2", "==", "1", ":", "\n", "# skip this batch otherwise screws up splitting across GPUs", "\n", "            ", "continue", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "# zero the gradients", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward", "\n", "", "losses", "=", "model", "(", "pcl_in", ",", "nocs_out", ")", "\n", "\n", "#", "\n", "# Compute aggregate loss", "\n", "#", "\n", "per_point_nll", "=", "per_step_nll", "=", "None", "\n", "per_point_tnocs", "=", "None", "\n", "if", "len", "(", "losses", ")", "==", "1", ":", "\n", "# just pretraining tnocs", "\n", "            ", "per_point_tnocs", "=", "losses", "[", "0", "]", "\n", "", "elif", "len", "(", "losses", ")", "==", "2", ":", "\n", "            ", "per_point_nll", ",", "per_point_tnocs", "=", "losses", "\n", "", "else", ":", "\n", "            ", "print", "(", "'unexpected number of losses returned'", ")", "\n", "exit", "(", ")", "\n", "\n", "# get number of function evals", "\n", "", "if", "per_point_nll", "is", "not", "None", ":", "\n", "            ", "if", "is_parallel", ":", "\n", "                ", "cur_nfe", "=", "model", ".", "module", ".", "get_nfe", "(", ")", "\n", "", "else", ":", "\n", "                ", "cur_nfe", "=", "model", ".", "get_nfe", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "cur_nfe", "=", "0.0", "\n", "\n", "# loss calculation", "\n", "", "loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "if", "per_point_nll", "is", "not", "None", ":", "\n", "            ", "per_step_nll", "=", "per_point_nll", ".", "sum", "(", "2", ")", "\n", "cnf_loss", "=", "cnf_loss_weight", "*", "per_step_nll", ".", "mean", "(", ")", "\n", "# print(cnf_loss)", "\n", "loss", "+=", "cnf_loss", "\n", "", "else", ":", "\n", "            ", "cnf_loss", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "per_point_nll", "=", "torch", ".", "zeros", "(", "B", ",", "T", ",", "N", ")", "\n", "\n", "", "if", "per_point_tnocs", "is", "not", "None", ":", "\n", "# we're using tnocs regression loss", "\n", "            ", "tnocs_loss", "=", "tnocs_loss_weight", "*", "per_point_tnocs", "[", ":", ",", ":", ",", ":", ",", ":", "4", "]", ".", "mean", "(", ")", "\n", "\n", "loss", "+=", "tnocs_loss", "\n", "# print(tnocs_loss)", "\n", "", "else", ":", "\n", "            ", "tnocs_loss", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "per_point_tnocs", "=", "torch", ".", "zeros", "(", "B", ",", "T", ",", "N", ",", "4", ")", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "# backward + optimize", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "batch_losses", ".", "append", "(", "loss", ".", "to", "(", "'cpu'", ")", ".", "item", "(", ")", ")", "\n", "\n", "# log stats and print update", "\n", "if", "i", "%", "print_stats_every", "==", "0", ":", "\n", "                ", "cur_mean_loss", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "batch_losses", ")", ")", "\n", "\n", "cur_mean_cnf_loss", "=", "cnf_loss", ".", "to", "(", "'cpu'", ")", ".", "item", "(", ")", "\n", "cur_mean_tnocs_loss", "=", "tnocs_loss", ".", "to", "(", "'cpu'", ")", ".", "item", "(", ")", "\n", "\n", "loss_tracker", ".", "record_train_step", "(", "cur_mean_loss", ",", "cur_mean_cnf_loss", ",", "cur_mean_tnocs_loss", ",", "\n", "epoch", "*", "len", "(", "data_loader", ")", "+", "i", ")", "\n", "\n", "cur_cnf_error", "=", "torch_to_numpy", "(", "[", "per_point_nll", "]", ")", "[", "0", "]", "\n", "cur_cnf_error", "=", "np", ".", "mean", "(", "cur_cnf_error", ")", "\n", "\n", "cur_tnocs_error", "=", "torch_to_numpy", "(", "[", "per_point_tnocs", "]", ")", "[", "0", "]", "\n", "cur_tnocs_spatial_error", "=", "cur_tnocs_error", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "cur_tnocs_spatial_error", "=", "np", ".", "linalg", ".", "norm", "(", "cur_tnocs_spatial_error", ",", "axis", "=", "1", ")", "\n", "cur_tnocs_spatial_error", "=", "np", ".", "mean", "(", "cur_tnocs_spatial_error", ")", "\n", "\n", "if", "cur_tnocs_error", ".", "shape", "[", "3", "]", ">", "3", ":", "\n", "                    ", "cur_tnocs_time_error", "=", "cur_tnocs_error", "[", ":", ",", ":", ",", ":", ",", "3", "]", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "cur_tnocs_time_error", "=", "np", ".", "mean", "(", "cur_tnocs_time_error", ")", "\n", "", "else", ":", "\n", "                    ", "cur_tnocs_time_error", "=", "0.0", "\n", "\n", "\n", "", "print_stats", "(", "log_out", ",", "epoch", ",", "i", ",", "len", "(", "data_loader", ")", ",", "\n", "cur_mean_loss", ",", "cur_cnf_error", ",", "cur_tnocs_spatial_error", ",", "\n", "cur_tnocs_time_error", ",", "\n", "'TRAIN'", ")", "\n", "\n", "batch_losses", "=", "[", "]", "\n", "", "", "else", ":", "\n", "# log stats and print update", "\n", "            ", "loss_scalar", "=", "loss", ".", "to", "(", "'cpu'", ")", ".", "item", "(", ")", "\n", "\n", "cnf_err", ",", "tnocs_err", "=", "torch_to_numpy", "(", "[", "per_point_nll", ",", "per_point_tnocs", "]", ")", "\n", "\n", "B", ",", "T", ",", "N", ",", "_", "=", "tnocs_err", ".", "shape", "\n", "tnocs_pos_err", "=", "np", ".", "linalg", ".", "norm", "(", "tnocs_err", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "axis", "=", "1", ")", "\n", "if", "tnocs_err", ".", "shape", "[", "3", "]", ">", "3", ":", "\n", "                ", "tnocs_time_err", "=", "tnocs_err", "[", ":", ",", ":", ",", ":", ",", "3", "]", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "tnocs_time_err", "=", "np", ".", "zeros", "(", "(", "B", "*", "T", "*", "N", ")", ")", "\n", "\n", "", "loss_tracker", ".", "record_stats", "(", "loss_scalar", ",", "cnf_err", ",", "tnocs_pos_err", ",", "tnocs_time_err", ",", "cur_nfe", ")", "\n", "\n", "if", "i", "%", "print_stats_every", "==", "0", ":", "\n", "                ", "print", "(", "'%s batch %d/%d...'", "%", "(", "mode", ",", "i", ",", "len", "(", "data_loader", ")", ")", ")", "\n", "\n", "mean_losses", "=", "loss_tracker", ".", "get_mean_stats", "(", ")", "\n", "total_loss_out", ",", "mean_cnf_err", ",", "mean_tnocs_pos_err", ",", "mean_tnocs_time_err", ",", "mean_nfe", "=", "mean_losses", "\n", "\n", "# print stats", "\n", "print_stats", "(", "log_out", ",", "epoch", ",", "i", ",", "len", "(", "data_loader", ")", ",", "total_loss_out", ",", "mean_cnf_err", ",", "mean_tnocs_pos_err", ",", "\n", "mean_tnocs_time_err", ",", "mode", ",", "mean_nfe", ")", "\n", "\n", "", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_general_options": [[5, 46], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "get_general_options", "(", "parser", ")", ":", "\n", "    ", "'''\n    Adds general options to the given argparse parser.\n    These are options that are shares across train, test, and visualization time.\n    '''", "\n", "# General", "\n", "parser", ".", "add_argument", "(", "'--num-workers'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'for data loaders'", ")", "\n", "\n", "# Output", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "type", "=", "str", ",", "default", "=", "'./train_out'", ",", "help", "=", "'Directory to save model weights and logs to.'", ")", "\n", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "'--data-cfg'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'.cfg for the dataset to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Batch size for training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seq-len'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Number of time steps to sample in each sequence that is used as input to the model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-pts'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'Number of point cloud points to sample for each step in the sequence that is used as input to the model.'", ")", "\n", "\n", "# Input augmentation", "\n", "parser", ".", "add_argument", "(", "'--no-augment-quad'", ",", "dest", "=", "'augment_quad'", ",", "action", "=", "'store_false'", ",", "help", "=", "\"If given, won't augment raw input data with quadratic terms.\"", ")", "\n", "parser", ".", "set_defaults", "(", "augment_quad", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--no-augment-pairs'", ",", "dest", "=", "'augment_pairs'", ",", "action", "=", "'store_false'", ",", "help", "=", "\"If given, won't augment raw input data with pairwise multiplicative terms (xy, yz, xz).\"", ")", "\n", "parser", ".", "set_defaults", "(", "augment_pairs", "=", "True", ")", "\n", "\n", "# Model options", "\n", "parser", ".", "add_argument", "(", "'--pretrain-tnocs'", ",", "dest", "=", "'pretrain_tnocs'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"If true, uses only TNOCS regression part of the model for training/testing.\"", ")", "\n", "parser", ".", "set_defaults", "(", "pretrain_tnocs", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Path to full model weights to start training from or load in for testing.'", ")", "\n", "parser", ".", "add_argument", "(", "'--radii'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.4", ",", "0.8", "]", ",", "help", "=", "'Radii list to use if using PointNet++ w/ PointNet+'", ")", "\n", "parser", ".", "add_argument", "(", "'--local-feat-size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'Feature size of PointNet++ in PointNet+.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cnf-blocks'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of normalizing flow blocks to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--latent-feat-size'", ",", "type", "=", "int", ",", "default", "=", "1600", ",", "help", "=", "'Latent state size to extract from the encoder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--ode-hidden-size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'Hidden state size in dynamics network of LatentODE'", ")", "\n", "parser", ".", "add_argument", "(", "'--motion-feat-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'The size of the part of the feature that should be given to the latent ODE.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-regress-tnocs'", ",", "dest", "=", "'regress_tnocs'", ",", "action", "=", "'store_false'", ",", "help", "=", "\"If given, will not regress or supervise TNOCS, instead using only the reconstruction loss.\"", ")", "\n", "parser", ".", "set_defaults", "(", "regress_tnocs", "=", "True", ")", "\n", "\n", "# Loss function options", "\n", "parser", ".", "add_argument", "(", "'--cnf-loss'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'Weight for NLL loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--tnocs-loss'", ",", "type", "=", "float", ",", "default", "=", "100.0", ",", "help", "=", "'Weight for TNOCS regression loss'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_train_options": [[48, 71], ["parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "def", "get_train_options", "(", "parser", ")", ":", "\n", "    ", "'''\n    Options specific to training time.\n    '''", "\n", "\n", "# gpu", "\n", "parser", ".", "add_argument", "(", "'--parallel'", ",", "dest", "=", "'use_parallel'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"If given, will use all available GPUs in parallel. Otherwise uses device 0 by default.\"", ")", "\n", "parser", ".", "set_defaults", "(", "use_parallel", "=", "False", ")", "\n", "\n", "# Training options", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'Number of epochs for training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--val-every'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'Number of epochs between validations.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-every'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Number of epochs between saving model checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'--print-every'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Number of batches between printing stats.'", ")", "\n", "\n", "# Optimizer options", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'Learning rate for ADAM'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'Beta1 for ADAM'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'Beta2 for ADAM'", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "help", "=", "'Epsilon rate for ADAM'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'Weight decay on params (except the dynamics network).'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_test_options": [[72, 99], ["parser.add_argument", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults"], "function", ["None"], ["", "def", "get_test_options", "(", "parser", ")", ":", "\n", "    ", "'''\n    Options specific to testing time.\n    '''", "\n", "\n", "# Output", "\n", "parser", ".", "add_argument", "(", "'--log'", ",", "type", "=", "str", ",", "default", "=", "'test_log.txt'", ",", "help", "=", "'Name of the log to save - will be saved to the output directory.'", ")", "\n", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "'--shuffle-test'", ",", "dest", "=", "'shuffle_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Shuffles ordering of test dataset.\"", ")", "\n", "parser", ".", "set_defaults", "(", "shuffle_test", "=", "False", ")", "\n", "\n", "# Different kinds of evaluations to run (any number of them can be given)", "\n", "parser", ".", "add_argument", "(", "'--eval-test'", ",", "dest", "=", "'eval_full_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Evaluate on the full test set with same metrics as during training.\"", ")", "\n", "parser", ".", "set_defaults", "(", "eval_full_test", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-shape-recon-observed'", ",", "dest", "=", "'eval_shape_recon_observed'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"evaluate shape reconstruction where all 10 steps of the sequence are given as input\"", ")", "\n", "parser", ".", "set_defaults", "(", "eval_shape_recon_observed", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-shape-recon-unobserved'", ",", "dest", "=", "'eval_shape_recon_unobserved'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"evaluate shape reconstruct when sparse set of steps is given as input and evaluates performance on both seen and unseen steps\"", ")", "\n", "parser", ".", "set_defaults", "(", "eval_shape_recon_unobserved", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-tnocs-regression'", ",", "dest", "=", "'eval_tnocs_regression'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"evaluate only the TNOCS regression\"", ")", "\n", "parser", ".", "set_defaults", "(", "eval_tnocs_regression", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-pose-observed-ransac'", ",", "dest", "=", "'eval_pose_observed_ransac'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Perform and evaluate pose estimation at observed time steps using TNOCS estimates.\"", ")", "\n", "parser", ".", "set_defaults", "(", "eval_pose_observed_ransac", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--show-pose-viz'", ",", "dest", "=", "'show_pose_viz'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"If doing pose estimation evaluation, show visualization of each result.\"", ")", "\n", "parser", ".", "set_defaults", "(", "show_pose_viz", "=", "False", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.config_utils.get_viz_options": [[101, 144], ["parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults", "parser.add_argument", "parser.set_defaults"], "function", ["None"], ["", "def", "get_viz_options", "(", "parser", ")", ":", "\n", "    ", "'''\n    Options specific to visualization time.\n    '''", "\n", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "'--shuffle-test'", ",", "dest", "=", "'shuffle_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Shuffles ordering of test dataset.\"", ")", "\n", "parser", ".", "set_defaults", "(", "shuffle_test", "=", "False", ")", "\n", "\n", "# Visualizations", "\n", "parser", ".", "add_argument", "(", "'--viz-tnocs'", ",", "dest", "=", "'viz_tnocs'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Visualizes TNOCS regression for each test sequence.\"", ")", "\n", "parser", ".", "set_defaults", "(", "viz_tnocs", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-observed'", ",", "dest", "=", "'viz_observed'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Visualizes observed timestep reconstruction using CaSPR for each test sequence.\"", ")", "\n", "parser", ".", "set_defaults", "(", "viz_observed", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-interpolated'", ",", "dest", "=", "'viz_interpolated'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Visualizes interpolated reconstruction using CaSPR for each test sequence.\"", ")", "\n", "parser", ".", "set_defaults", "(", "viz_interpolated", "=", "False", ")", "\n", "\n", "# options related to all", "\n", "parser", ".", "add_argument", "(", "'--no-input-seq'", ",", "dest", "=", "'show_input_seq'", ",", "action", "=", "'store_false'", ",", "help", "=", "\"If given, will not visualize the raw depth input sequence along with GT and predictiongs.\"", ")", "\n", "parser", ".", "set_defaults", "(", "show_input_seq", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--no-nocs-cubes'", ",", "dest", "=", "'show_nocs_cubes'", ",", "action", "=", "'store_false'", ",", "help", "=", "\"If given, will not visualize the NOCS cubes.\"", ")", "\n", "parser", ".", "set_defaults", "(", "show_nocs_cubes", "=", "True", ")", "\n", "\n", "# options related to tnocs", "\n", "parser", ".", "add_argument", "(", "'--tnocs-err-map'", ",", "dest", "=", "'tnocs_error_map'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"If given, colors TNOCS predictions with an error map rather than TNOCS RGB.\"", ")", "\n", "parser", ".", "set_defaults", "(", "tnocs_error_map", "=", "False", ")", "\n", "\n", "# options related to observed/interp", "\n", "parser", ".", "add_argument", "(", "'--num-sampled-pts'", ",", "type", "=", "int", ",", "default", "=", "2048", ",", "help", "=", "'Number of points to sample from CaSPR at each step of the sequence.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-sampled-steps'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'Number of timesteps to sample from CaSPR for interpolated reconstruction.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-constant'", ",", "dest", "=", "'constant_in_time'", ",", "action", "=", "'store_false'", ",", "help", "=", "\"If given, samples random points from CaSPR at each step, rather than using the same base gaussian sampling for all timesteps.\"", ")", "\n", "parser", ".", "set_defaults", "(", "constant_in_time", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--no-base-samples'", ",", "dest", "=", "'show_base_sampling'", ",", "action", "=", "'store_false'", ",", "help", "=", "\"If given, will not visualize the sampling from the base distribution along with the CaSPR sampling.\"", ")", "\n", "parser", ".", "set_defaults", "(", "show_base_sampling", "=", "True", ")", "\n", "# affects coloring of visualization, can only choose one of these", "\n", "parser", ".", "add_argument", "(", "'--sample-contours'", ",", "dest", "=", "'sample_contours'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"If true, CaSPR samples are taken from specific contours from the base gaussian rather than randomly sampled.\"", ")", "\n", "parser", ".", "set_defaults", "(", "sample_contours", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--base-color-map'", ",", "dest", "=", "'base_color_map'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"If true, visualizes base and CaSPR samples using the location in the base gaussian rather than location in the NOCS cube.\"", ")", "\n", "parser", ".", "set_defaults", "(", "base_color_map", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--prob-color-map'", ",", "dest", "=", "'prob_color_map'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"If true, visualizes base and CaSPR samples using the log probability in the base gaussian rather than location in the NOCS cube.\"", ")", "\n", "parser", ".", "set_defaults", "(", "prob_color_map", "=", "False", ")", "\n", "\n", "return", "parser", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.get_device": [[8, 20], ["torch.device", "torch.cuda.is_available", "print", "print"], "function", ["None"], ["def", "get_device", "(", ")", ":", "\n", "    ", "'''\n    Returns GPU device if available, else CPU.\n    '''", "\n", "gpu_device_str", "=", "'cuda:0'", "\n", "device_str", "=", "gpu_device_str", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "if", "device_str", "==", "gpu_device_str", ":", "\n", "        ", "print", "(", "'Using detected GPU!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'No detected GPU...using CPU.'", ")", "\n", "", "device", "=", "torch", ".", "device", "(", "device_str", ")", "\n", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.torch_to_numpy": [[21, 23], ["x.to().data.numpy", "x.to"], "function", ["None"], ["", "def", "torch_to_numpy", "(", "tensor_list", ")", ":", "\n", "    ", "return", "[", "x", ".", "to", "(", "'cpu'", ")", ".", "data", ".", "numpy", "(", ")", "for", "x", "in", "tensor_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.torch_to_scalar": [[24, 26], ["x.to().item", "x.to"], "function", ["None"], ["", "def", "torch_to_scalar", "(", "tensor_list", ")", ":", "\n", "    ", "return", "[", "x", ".", "to", "(", "'cpu'", ")", ".", "item", "(", ")", "for", "x", "in", "tensor_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.load_weights": [[27, 45], ["state_dict.items", "model.load_state_dict", "len", "print", "print", "len", "print", "print", "print", "k.split", "state_dict.items", "k.split", "k.split"], "function", ["None"], ["", "def", "load_weights", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "'''\n    Load weights for full model\n    '''", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'module'", ":", "\n", "# then it was trained with Data parallel", "\n", "            ", "print", "(", "'Loading weights trained with DataParallel...'", ")", "\n", "state_dict", "=", "{", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'module'", "}", "\n", "", "break", "\n", "# 2. overwrite entries in the existing state dict", "\n", "", "missing_keys", ",", "unexpected_keys", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "print", "(", "'WARNING: The following keys could not be found in the given state dict - ignoring...'", ")", "\n", "print", "(", "missing_keys", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "        ", "print", "(", "'WARNING: The following keys were found in the given state dict but not in the current model - ignoring...'", ")", "\n", "print", "(", "unexpected_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.load_encoder_weights_from_full": [[46, 61], ["state_dict.items", "model.encoder.load_state_dict", "print", "state_dict.items", "k.split", "k.split", "state_dict.items", "k.split", "k.split", "k.split"], "function", ["None"], ["", "", "def", "load_encoder_weights_from_full", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "'''\n    Given weights for the full TNOCS model, loads only those for pre-trained nocs encoder.\n    '''", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'module'", ":", "\n", "# then it was trained with Data parallel", "\n", "            ", "print", "(", "'Loading weights trained with DataParallel...'", ")", "\n", "state_dict", "=", "{", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'module'", "}", "\n", "", "break", "\n", "# 1. filter out unnecessary keys", "\n", "", "state_dict", "=", "{", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'encoder'", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model", ".", "encoder", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.utils.torch_utils.count_params": [[62, 66], ["filter", "sum", "model.parameters", "numpy.prod", "p.size"], "function", ["None"], ["", "def", "count_params", "(", "model", ")", ":", "\n", "    ", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "return", "params", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.Swish.__init__": [[34, 37], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.Swish.forward": [[38, 40], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "self", ".", "beta", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.Lambda.__init__": [[43, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "f", ")", ":", "\n", "        ", "super", "(", "Lambda", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f", "=", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.Lambda.forward": [[47, 49], ["odefunc.Lambda.f"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "f", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.ODEnet.__init__": [[67, 97], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "base_layer", "layers.append", "activation_fns.append", "list", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["def", "__init__", "(", "self", ",", "hidden_dims", ",", "input_shape", ",", "context_dim", ",", "layer_type", "=", "\"concat\"", ",", "nonlinearity", "=", "\"softplus\"", ")", ":", "\n", "        ", "super", "(", "ODEnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "base_layer", "=", "{", "\n", "\"ignore\"", ":", "diffeq_layers", ".", "IgnoreLinear", ",", "\n", "\"squash\"", ":", "diffeq_layers", ".", "SquashLinear", ",", "\n", "\"scale\"", ":", "diffeq_layers", ".", "ScaleLinear", ",", "\n", "\"concat\"", ":", "diffeq_layers", ".", "ConcatLinear", ",", "\n", "\"concat_v2\"", ":", "diffeq_layers", ".", "ConcatLinear_v2", ",", "\n", "\"concatsquash\"", ":", "diffeq_layers", ".", "ConcatSquashLinear", ",", "\n", "\"concatscale\"", ":", "diffeq_layers", ".", "ConcatScaleLinear", ",", "\n", "}", "[", "layer_type", "]", "\n", "\n", "# build models and add them", "\n", "layers", "=", "[", "]", "\n", "activation_fns", "=", "[", "]", "\n", "hidden_shape", "=", "input_shape", "\n", "\n", "for", "dim_out", "in", "(", "hidden_dims", "+", "(", "input_shape", "[", "0", "]", ",", ")", ")", ":", "\n", "            ", "layer_kwargs", "=", "{", "}", "\n", "layer", "=", "base_layer", "(", "hidden_shape", "[", "0", "]", ",", "dim_out", ",", "context_dim", ",", "**", "layer_kwargs", ")", "\n", "layers", ".", "append", "(", "layer", ")", "\n", "activation_fns", ".", "append", "(", "NONLINEARITIES", "[", "nonlinearity", "]", ")", "\n", "\n", "hidden_shape", "=", "list", "(", "copy", ".", "copy", "(", "hidden_shape", ")", ")", "\n", "hidden_shape", "[", "0", "]", "=", "dim_out", "\n", "\n", "# print(layers)", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "self", ".", "activation_fns", "=", "nn", ".", "ModuleList", "(", "activation_fns", "[", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.ODEnet.forward": [[98, 106], ["enumerate", "layer", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "y", ")", ":", "\n", "        ", "dx", "=", "y", "\n", "for", "l", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "dx", "=", "layer", "(", "context", ",", "dx", ")", "\n", "# if not last layer, use nonlinearity", "\n", "if", "l", "<", "len", "(", "self", ".", "layers", ")", "-", "1", ":", "\n", "                ", "dx", "=", "self", ".", "activation_fns", "[", "l", "]", "(", "dx", ")", "\n", "", "", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.ODEfunc.__init__": [[109, 114], ["torch.Module.__init__", "odefunc.ODEfunc.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "diffeq", ")", ":", "\n", "        ", "super", "(", "ODEfunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "diffeq", "=", "diffeq", "\n", "self", ".", "divergence_fn", "=", "divergence_approx", "\n", "self", ".", "register_buffer", "(", "\"_num_evals\"", ",", "torch", ".", "tensor", "(", "0.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.ODEfunc.before_odeint": [[115, 118], ["odefunc.ODEfunc._num_evals.fill_"], "methods", ["None"], ["", "def", "before_odeint", "(", "self", ",", "e", "=", "None", ")", ":", "\n", "        ", "self", ".", "_e", "=", "e", "\n", "self", ".", "_num_evals", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.ODEfunc.forward": [[119, 143], ["torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "t.clone().detach().requires_grad_().type_as", "state.requires_grad_", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "odefunc.ODEfunc.diffeq", "odefunc.ODEfunc.divergence_fn().unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "t.clone().detach().requires_grad_", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "len", "odefunc.ODEfunc.diffeq", "odefunc.ODEfunc.divergence_fn().view", "y.size", "c.view", "odefunc.ODEfunc.divergence_fn", "t.clone().detach", "y.size", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "odefunc.ODEfunc.divergence_fn", "t.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "states", ")", ":", "\n", "        ", "y", "=", "states", "[", "0", "]", "\n", "t", "=", "torch", ".", "ones", "(", "y", ".", "size", "(", "0", ")", ",", "1", ")", ".", "to", "(", "y", ")", "*", "t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "type_as", "(", "y", ")", "\n", "self", ".", "_num_evals", "+=", "1", "\n", "for", "state", "in", "states", ":", "\n", "            ", "state", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Sample and fix the noise.", "\n", "", "if", "self", ".", "_e", "is", "None", ":", "\n", "            ", "self", ".", "_e", "=", "torch", ".", "randn_like", "(", "y", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "y", ")", "\n", "\n", "", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "            ", "if", "len", "(", "states", ")", "==", "3", ":", "# conditional CNF", "\n", "                ", "c", "=", "states", "[", "2", "]", "\n", "tc", "=", "torch", ".", "cat", "(", "[", "t", ",", "c", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "dy", "=", "self", ".", "diffeq", "(", "tc", ",", "y", ")", "\n", "divergence", "=", "self", ".", "divergence_fn", "(", "dy", ",", "y", ",", "e", "=", "self", ".", "_e", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "dy", ",", "-", "divergence", ",", "torch", ".", "zeros_like", "(", "c", ")", ".", "requires_grad_", "(", "True", ")", "\n", "", "elif", "len", "(", "states", ")", "==", "2", ":", "# unconditional CNF", "\n", "                ", "dy", "=", "self", ".", "diffeq", "(", "t", ",", "y", ")", "\n", "divergence", "=", "self", ".", "divergence_fn", "(", "dy", ",", "y", ",", "e", "=", "self", ".", "_e", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "dy", ",", "-", "divergence", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "\"`len(states)` should be 2 or 3 or 5\"", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.divergence_approx": [[13, 32], ["e_dzdx.mul", "e_dzdx.mul.sum", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "f.size"], "function", ["None"], ["def", "divergence_approx", "(", "f", ",", "y", ",", "e", "=", "None", ")", ":", "\n", "    ", "e_dzdx", "=", "torch", ".", "autograd", ".", "grad", "(", "f", ",", "y", ",", "e", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "e_dzdx_e", "=", "e_dzdx", ".", "mul", "(", "e", ")", "\n", "\n", "cnt", "=", "0", "\n", "while", "not", "e_dzdx_e", ".", "requires_grad", "and", "cnt", "<", "10", ":", "\n", "# print(\"RequiresGrad:f=%s, y(rgrad)=%s, e_dzdx:%s, e:%s, e_dzdx_e:%s cnt=%d\"", "\n", "#       % (f.requires_grad, y.requires_grad, e_dzdx.requires_grad,", "\n", "#          e.requires_grad, e_dzdx_e.requires_grad, cnt))", "\n", "        ", "e_dzdx", "=", "torch", ".", "autograd", ".", "grad", "(", "f", ",", "y", ",", "e", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "e_dzdx_e", "=", "e_dzdx", "*", "e", "\n", "cnt", "+=", "1", "\n", "\n", "", "approx_tr_dzdx", "=", "e_dzdx_e", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "assert", "approx_tr_dzdx", ".", "requires_grad", ",", "\"(failed to add node to graph) f=%s %s, y(rgrad)=%s, e_dzdx:%s, e:%s, e_dzdx_e:%s cnt:%s\"", "%", "(", "\n", "f", ".", "size", "(", ")", ",", "f", ".", "requires_grad", ",", "y", ".", "requires_grad", ",", "e_dzdx", ".", "requires_grad", ",", "e", ".", "requires_grad", ",", "e_dzdx_e", ".", "requires_grad", ",", "cnt", ")", "\n", "return", "approx_tr_dzdx", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.IgnoreLinear.__init__": [[17, 20], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "IgnoreLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.IgnoreLinear.forward": [[21, 23], ["diffeq_layers.IgnoreLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ConcatLinear.__init__": [[26, 29], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ConcatLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", "+", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ConcatLinear.forward": [[30, 35], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "diffeq_layers.ConcatLinear._layer", "x.dim", "context.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "x.size", "context.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ",", "c", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "context", "=", "context", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "", "x_context", "=", "torch", ".", "cat", "(", "(", "x", ",", "context", ")", ",", "dim", "=", "2", ")", "\n", "return", "self", ".", "_layer", "(", "x_context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ConcatLinear_v2.__init__": [[38, 42], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ConcatLinear_v2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper_bias", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ConcatLinear_v2.forward": [[43, 48], ["diffeq_layers.ConcatLinear_v2._hyper_bias", "x.dim", "bias.unsqueeze.unsqueeze.unsqueeze", "diffeq_layers.ConcatLinear_v2._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "bias", "=", "self", ".", "_hyper_bias", "(", "context", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "bias", "=", "bias", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "self", ".", "_layer", "(", "x", ")", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.SquashLinear.__init__": [[51, 55], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "SquashLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.SquashLinear.forward": [[56, 61], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "diffeq_layers.SquashLinear._hyper", "x.dim", "gate.unsqueeze.unsqueeze.unsqueeze", "diffeq_layers.SquashLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "_hyper", "(", "context", ")", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "gate", "=", "gate", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "self", ".", "_layer", "(", "x", ")", "*", "gate", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ScaleLinear.__init__": [[64, 68], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ScaleLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ScaleLinear.forward": [[69, 74], ["diffeq_layers.ScaleLinear._hyper", "x.dim", "gate.unsqueeze.unsqueeze.unsqueeze", "diffeq_layers.ScaleLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "gate", "=", "self", ".", "_hyper", "(", "context", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "gate", "=", "gate", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "self", ".", "_layer", "(", "x", ")", "*", "gate", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ConcatSquashLinear.__init__": [[77, 82], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ConcatSquashLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper_bias", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "_hyper_gate", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ConcatSquashLinear.forward": [[83, 91], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "diffeq_layers.ConcatSquashLinear._hyper_bias", "diffeq_layers.ConcatSquashLinear._hyper_gate", "x.dim", "gate.unsqueeze.unsqueeze.unsqueeze", "bias.unsqueeze.unsqueeze.unsqueeze", "diffeq_layers.ConcatSquashLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "_hyper_gate", "(", "context", ")", ")", "\n", "bias", "=", "self", ".", "_hyper_bias", "(", "context", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "gate", "=", "gate", ".", "unsqueeze", "(", "1", ")", "\n", "bias", "=", "bias", ".", "unsqueeze", "(", "1", ")", "\n", "", "ret", "=", "self", ".", "_layer", "(", "x", ")", "*", "gate", "+", "bias", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ConcatScaleLinear.__init__": [[94, 99], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ConcatScaleLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper_bias", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "_hyper_gate", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.ConcatScaleLinear.forward": [[100, 108], ["diffeq_layers.ConcatScaleLinear._hyper_gate", "diffeq_layers.ConcatScaleLinear._hyper_bias", "x.dim", "gate.unsqueeze.unsqueeze.unsqueeze", "bias.unsqueeze.unsqueeze.unsqueeze", "diffeq_layers.ConcatScaleLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "gate", "=", "self", ".", "_hyper_gate", "(", "context", ")", "\n", "bias", "=", "self", ".", "_hyper_bias", "(", "context", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "gate", "=", "gate", ".", "unsqueeze", "(", "1", ")", "\n", "bias", "=", "bias", ".", "unsqueeze", "(", "1", ")", "\n", "", "ret", "=", "self", ".", "_layer", "(", "x", ")", "*", "gate", "+", "bias", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.diffeq_layers.weights_init": [[9, 14], ["torch.init.constant_", "torch.init.normal_", "classname.find", "classname.find"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "bias", ",", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd.__init__": [[13, 31], ["torch.Module.__init__", "normalization.MovingBatchNormNd.register_buffer", "normalization.MovingBatchNormNd.register_buffer", "normalization.MovingBatchNormNd.register_buffer", "normalization.MovingBatchNormNd.reset_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "normalization.MovingBatchNormNd.register_parameter", "normalization.MovingBatchNormNd.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__", "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-4", ",", "decay", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "MovingBatchNormNd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "register_buffer", "(", "'step'", ",", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd.shape": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd.reset_parameters": [[36, 42], ["normalization.MovingBatchNormNd.running_mean.zero_", "normalization.MovingBatchNormNd.running_var.fill_", "normalization.MovingBatchNormNd.weight.data.zero_", "normalization.MovingBatchNormNd.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd.update_running_mean": [[43, 52], ["x.size", "x.transpose().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "x.transpose"], "methods", ["None"], ["", "", "def", "update_running_mean", "(", "self", ",", "x", ")", ":", "\n", "        ", "num_channels", "=", "x", ".", "size", "(", "-", "1", ")", "\n", "# compute batch statistics", "\n", "x_t", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "num_channels", ",", "-", "1", ")", "\n", "batch_mean", "=", "torch", ".", "mean", "(", "x_t", ",", "dim", "=", "1", ")", "\n", "batch_var", "=", "torch", ".", "var", "(", "x_t", ",", "dim", "=", "1", ")", "\n", "self", ".", "running_mean", "-=", "self", ".", "decay", "*", "(", "self", ".", "running_mean", "-", "batch_mean", ".", "data", ")", "\n", "self", ".", "running_var", "-=", "self", ".", "decay", "*", "(", "self", ".", "running_var", "-", "batch_var", ".", "data", ")", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd.forward": [[53, 58], ["normalization.MovingBatchNormNd._reverse", "normalization.MovingBatchNormNd._forward"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd._reverse", "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd._forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", "=", "None", ",", "logpx", "=", "None", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "reverse", ":", "\n", "            ", "return", "self", ".", "_reverse", "(", "x", ",", "logpx", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward", "(", "x", ",", "logpx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd._forward": [[59, 81], ["normalization.MovingBatchNormNd.running_mean.clone().detach", "normalization.MovingBatchNormNd.running_var.clone().detach", "used_mean.view().expand_as.view().expand_as.view().expand_as", "used_var.view().expand_as.view().expand_as.view().expand_as", "normalization.MovingBatchNormNd.update_running_mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "normalization.MovingBatchNormNd.weight.view().expand_as", "normalization.MovingBatchNormNd.bias.view().expand_as", "normalization.MovingBatchNormNd.running_mean.clone", "normalization.MovingBatchNormNd.running_var.clone", "used_mean.view().expand_as.view().expand_as.view", "used_var.view().expand_as.view().expand_as.view", "normalization.MovingBatchNormNd._logdetgrad().sum", "torch.log", "torch.log", "torch.log", "torch.log", "normalization.MovingBatchNormNd.weight.view", "normalization.MovingBatchNormNd.bias.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "normalization.MovingBatchNormNd._logdetgrad"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd.update_running_mean", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd._logdetgrad"], ["", "", "def", "_forward", "(", "self", ",", "x", ",", "logpx", "=", "None", ")", ":", "\n", "        ", "used_mean", "=", "self", ".", "running_mean", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "used_var", "=", "self", ".", "running_var", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "update_running_mean", "(", "x", ")", "\n", "\n", "# perform normalization", "\n", "", "used_mean", "=", "used_mean", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "x", ")", "\n", "used_var", "=", "used_var", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "x", ")", "\n", "\n", "y", "=", "(", "x", "-", "used_mean", ")", "*", "torch", ".", "exp", "(", "-", "0.5", "*", "torch", ".", "log", "(", "used_var", "+", "self", ".", "eps", ")", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "weight", "=", "self", ".", "weight", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "x", ")", "\n", "bias", "=", "self", ".", "bias", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "x", ")", "\n", "y", "=", "y", "*", "torch", ".", "exp", "(", "weight", ")", "+", "bias", "\n", "\n", "", "if", "logpx", "is", "None", ":", "\n", "            ", "return", "y", "\n", "", "else", ":", "\n", "            ", "log_out", "=", "logpx", "-", "self", ".", "_logdetgrad", "(", "x", ",", "used_var", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "y", ",", "log_out", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd._reverse": [[82, 102], ["y.size", "normalization.MovingBatchNormNd.running_mean.clone().detach", "normalization.MovingBatchNormNd.running_var.clone().detach", "used_mean.view().expand_as.view().expand_as.view().expand_as", "used_var.view().expand_as.view().expand_as.view().expand_as", "normalization.MovingBatchNormNd.weight.view().expand_as", "normalization.MovingBatchNormNd.bias.view().expand_as", "normalization.MovingBatchNormNd.running_mean.clone", "normalization.MovingBatchNormNd.running_var.clone", "used_mean.view().expand_as.view().expand_as.view", "used_var.view().expand_as.view().expand_as.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "normalization.MovingBatchNormNd._logdetgrad().sum", "normalization.MovingBatchNormNd.weight.view", "normalization.MovingBatchNormNd.bias.view", "torch.log", "torch.log", "torch.log", "torch.log", "normalization.MovingBatchNormNd._logdetgrad"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd._logdetgrad"], ["", "", "def", "_reverse", "(", "self", ",", "y", ",", "logpy", "=", "None", ")", ":", "\n", "        ", "num_channels", "=", "y", ".", "size", "(", "-", "1", ")", "\n", "used_mean", "=", "self", ".", "running_mean", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "used_var", "=", "self", ".", "running_var", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "used_mean", "=", "used_mean", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "y", ")", "\n", "used_var", "=", "used_var", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "y", ")", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "weight", "=", "self", ".", "weight", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "y", ")", "\n", "bias", "=", "self", ".", "bias", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "bias", ")", "*", "torch", ".", "exp", "(", "-", "weight", ")", "\n", "\n", "", "x", "=", "y", "*", "torch", ".", "exp", "(", "0.5", "*", "torch", ".", "log", "(", "used_var", "+", "self", ".", "eps", ")", ")", "+", "used_mean", "\n", "\n", "if", "logpy", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "log_out", "=", "logpy", "+", "self", ".", "_logdetgrad", "(", "x", ",", "used_var", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "x", ",", "log_out", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd._logdetgrad": [[103, 109], ["torch.log", "torch.log", "torch.log", "torch.log", "normalization.MovingBatchNormNd.weight.view().expand", "normalization.MovingBatchNormNd.weight.view", "x.size"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log", "home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log"], ["", "", "def", "_logdetgrad", "(", "self", ",", "x", ",", "used_var", ")", ":", "\n", "        ", "logdetgrad", "=", "-", "0.5", "*", "torch", ".", "log", "(", "used_var", "+", "self", ".", "eps", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "weight", "=", "self", ".", "weight", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand", "(", "*", "x", ".", "size", "(", ")", ")", "\n", "logdetgrad", "+=", "weight", "\n", "", "return", "logdetgrad", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNormNd.__repr__": [[110, 114], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "'{name}({num_features}, eps={eps}, decay={decay}'", "\n", "' affine={affine})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNorm1d.shape": [[118, 121], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "1", ",", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.normalization.MovingBatchNorm1d.forward": [[122, 129], ["normalization.MovingBatchNormNd.forward"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNetFeatureExtractor.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "context", "=", "None", ",", "logpx", "=", "None", ",", "integration_times", "=", "None", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "ret", "=", "super", "(", "MovingBatchNorm1d", ",", "self", ")", ".", "forward", "(", "\n", "x", ",", "context", ",", "logpx", "=", "logpx", ",", "reverse", "=", "reverse", ")", "\n", "if", "logpx", "is", "None", ":", "\n", "            ", "return", "ret", "\n", "\n", "", "return", "ret", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.LatentODE.__init__": [[16, 41], ["torch.Module.__init__", "latent_ode_model.DynamicsNet", "latent_ode_model.ODESolver", "latent_ode_model.init_network_weights"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__", "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.init_network_weights"], ["def", "__init__", "(", "self", ",", "input_size", "=", "1024", ",", "\n", "hidden_size", "=", "1024", ",", "\n", "num_layers", "=", "2", ",", "\n", "nonlinearity", "=", "nn", ".", "Tanh", ",", "\n", "augment_size", "=", "0", ")", ":", "\n", "        ", "'''\n        input_size : dimension of latent state\n        hidden_size : size of hidden state to use within the dynamics net\n        num_layers : number of hidden layers in the dynamics net\n        nonlinearity : the nonlinearity to use in the network. Avoid non-smooth \n                        non-linearities such as ReLU and LeakyReLU. Prefer non-linearities\n                        with a theoretically unique adjoint/gradient such as Softplus.\n        augment_size : the number of zeros to augment to the last dimension of the init state.\n                        If > 0, the returned output will be input_size + augment_size in this dim.\n        '''", "\n", "super", "(", "LatentODE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "augment_size", "=", "augment_size", "\n", "self", ".", "output_size", "=", "input_size", "+", "self", ".", "augment_size", "\n", "self", ".", "ode_func", "=", "DynamicsNet", "(", "input_size", "=", "self", ".", "output_size", ",", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "self", ".", "solver", "=", "ODESolver", "(", "self", ".", "ode_func", ",", "method", "=", "'dopri5'", ",", "rtol", "=", "1e-3", ",", "atol", "=", "1e-4", ")", "\n", "\n", "init_network_weights", "(", "self", ".", "ode_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.LatentODE.get_output_size": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.LatentODE.forward": [[45, 71], ["latent_ode_model.LatentODE.ode_func._num_evals.fill_", "latent_ode_model.LatentODE.solver", "pred_z.permute.permute.permute", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "z0.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z0", ",", "t", ")", ":", "\n", "        ", "'''\n        z0 - initial state, B x H tensor\n        t - times to evaluate ODE, size T 1-D tensor. The initial time corresponding to z0\n            should be the first element of this sequence and each time must be larger than \n            the previous time\n\n        Return:\n        pred_z - latent state found by ODE solver at the requested times, B x T x H tensor\n        '''", "\n", "self", ".", "ode_func", ".", "_num_evals", ".", "fill_", "(", "0", ")", "\n", "\n", "# make all times relative to first (in case t0 != 0)", "\n", "rel_t", "=", "t", "-", "t", "[", "0", "]", "\n", "\n", "# augment initial state", "\n", "aug_z0", "=", "z0", "\n", "if", "self", ".", "augment_size", ">", "0", ":", "\n", "            ", "cur_device", "=", "z0", ".", "device", "\n", "augment_tens", "=", "torch", ".", "zeros", "(", "z0", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "augment_size", ",", "dtype", "=", "z0", ".", "dtype", ")", ".", "to", "(", "cur_device", ")", "\n", "aug_z0", "=", "torch", ".", "cat", "(", "[", "z0", ",", "augment_tens", "]", ",", "dim", "=", "1", ")", "# B x (H+A)", "\n", "\n", "", "pred_z", "=", "self", ".", "solver", "(", "aug_z0", ",", "rel_t", ")", "\n", "pred_z", "=", "pred_z", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# first dimension of returned pred_z is time so must permute        ", "\n", "\n", "return", "pred_z", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.LatentODE.num_evals": [[72, 74], ["latent_ode_model.LatentODE.ode_func._num_evals.item"], "methods", ["None"], ["", "def", "num_evals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ode_func", ".", "_num_evals", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.ODESolver.__init__": [[77, 87], ["torch.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "ode_func", ",", "method", "=", "'dopri5'", ",", "rtol", "=", "1e-4", ",", "atol", "=", "1e-5", ")", ":", "\n", "\t\t", "super", "(", "ODESolver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "ode_func", "=", "ode_func", "\n", "self", ".", "rtol", "=", "rtol", "\n", "self", ".", "atol", "=", "rtol", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "ode_func", ",", "nn", ".", "Module", ")", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'ode_func is required to be an instance of nn.Module to use the adjoint method'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.ODESolver.forward": [[88, 100], ["torchdiffeq.odeint_adjoint"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z0", ",", "t", ")", ":", "\n", "\t\t", "'''\n        z0 - initial state, N-D tensor\n        t - times to evaluate ODE at size T 1-D tensor. The initial time corresponding to z0\n            should be the first element of this sequence and each time must be larger than \n            the previous time\n\n\t\tReturns:\n\t\tpred_z - latent state found by the solver, tensor T x N-D\n        '''", "\n", "pred_z", "=", "odeint", "(", "self", ".", "ode_func", ",", "z0", ",", "t", ",", "rtol", "=", "self", ".", "rtol", ",", "atol", "=", "self", ".", "atol", ",", "method", "=", "self", ".", "method", ")", "\n", "return", "pred_z", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.DynamicsNet.__init__": [[108, 128], ["torch.Module.__init__", "latent_ode_model.DynamicsNet.build_net", "latent_ode_model.DynamicsNet.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__", "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.DynamicsNet.build_net"], ["def", "__init__", "(", "self", ",", "input_size", "=", "1024", ",", "hidden_size", "=", "1024", ",", "num_layers", "=", "2", ",", "nonlinearity", "=", "nn", ".", "Tanh", ")", ":", "\n", "        ", "'''\n        input_size : dimension of latent state inputs. This is also the output size of the dynamics net.\n        hidden_size : size of hidden state to use within the dynamics net\n        num_layers : number of hidden layers in the dynamics net\n        nonlinearity : the nonlinearity to use in the network. Avoid non-smooth \n                       non-linearities such as ReLU and LeakyReLU. Prefer non-linearities\n                       with a theoretically unique adjoint/gradient such as Softplus.\n        '''", "\n", "super", "(", "DynamicsNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "output_size", "=", "self", ".", "input_size", "\n", "\n", "self", ".", "dynamics_net", "=", "self", ".", "build_net", "(", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"_num_evals\"", ",", "torch", ".", "tensor", "(", "0.", ")", ")", "# to work with dataparallel", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.DynamicsNet.build_net": [[129, 137], ["range", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "layers.append", "layers.append", "latent_ode_model.DynamicsNet.nonlinearity", "torch.Linear", "torch.Linear", "torch.Linear", "latent_ode_model.DynamicsNet.nonlinearity", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "build_net", "(", "self", ")", ":", "\n", "        ", "layers", "=", "[", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "hidden_size", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "nonlinearity", "(", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "", "layers", ".", "append", "(", "self", ".", "nonlinearity", "(", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.DynamicsNet.forward": [[139, 148], ["latent_ode_model.DynamicsNet.dynamics_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "z", ")", ":", "\n", "        ", "'''\n        t - current time to query gradient, scalar\n        z - current state to query gradient, B x H tensor\n        '''", "\n", "self", ".", "_num_evals", "+=", "1", "\n", "\n", "dzdt", "=", "self", ".", "dynamics_net", "(", "z", ")", "\n", "return", "dzdt", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.DynamicsNet.num_evals": [[149, 151], ["None"], "methods", ["None"], ["", "def", "num_evals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_evals", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.latent_ode_model.init_network_weights": [[152, 157], ["net.modules", "isinstance", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["", "", "def", "init_network_weights", "(", "net", ",", "std", "=", "0.1", ")", ":", "\n", "\t", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.__init__": [[23, 71], ["torch.Module.__init__", "tpointnet2.TPointNet2", "latent_ode_model.LatentODE", "flow.PointCNFArgs", "flow.get_point_cnf"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__", "home.repos.pwc.inspect_result.davrempe_caspr.models.flow.get_point_cnf"], ["    ", "def", "__init__", "(", "self", ",", "radii_list", "=", "[", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.4", ",", "0.8", "]", ",", "# radii to use for pointnet++", "\n", "local_feat_size", "=", "512", ",", "# size of per-point features from PointNet++", "\n", "latent_feat_size", "=", "1600", ",", "# size of feature from TPointNet++ intermediate features (dynamic + static feature size)", "\n", "ode_hidden_size", "=", "512", ",", "# size of dynamics net hidden state for latent ode", "\n", "motion_feat_size", "=", "64", ",", "# size of the latent feature to go through ODE (dynamic feature)", "\n", "pretrain_tnocs", "=", "False", ",", "# If true, forward pass and loss will only compute TNOCS regression", "\n", "augment_quad", "=", "True", ",", "# If true, augments the raw point cloud input with quadratic terms", "\n", "augment_pairs", "=", "True", ",", "# if true, augments raw point cloud input with pairwise mult terms", "\n", "cnf_blocks", "=", "1", ",", "# number of normalizing flow blocks to use", "\n", "regress_tnocs", "=", "True", ",", "# if false, does not regress tnocs or use tnocs loss", "\n", ")", ":", "\n", "        ", "'''\n        Main CaSPR architecture.\n        '''", "\n", "super", "(", "CaSPR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pretrain_tnocs", "=", "pretrain_tnocs", "\n", "self", ".", "augment_quad", "=", "augment_quad", "\n", "self", ".", "augment_pairs", "=", "augment_pairs", "\n", "self", ".", "motion_feat_size", "=", "motion_feat_size", "\n", "self", ".", "regress_tnocs", "=", "regress_tnocs", "\n", "\n", "self", ".", "tnocs_point_size", "=", "4", "# by default x,y,z,t", "\n", "# Encoder and T-NOCS regression", "\n", "self", ".", "encoder", "=", "TPointNet2", "(", "radii_list", ",", "\n", "local_feat_size", "=", "local_feat_size", ",", "\n", "out_feat_size", "=", "latent_feat_size", ",", "\n", "augment_quad", "=", "self", ".", "augment_quad", ",", "\n", "augment_pairs", "=", "self", ".", "augment_pairs", ",", "\n", "tnocs_point_size", "=", "self", ".", "tnocs_point_size", ",", "\n", "regress_tnocs", "=", "self", ".", "regress_tnocs", ")", "\n", "\n", "if", "self", ".", "pretrain_tnocs", ":", "\n", "# do not need below here if we're pretraining", "\n", "            ", "return", "\n", "\n", "# Dynamic feature advection", "\n", "", "ode_input_size", "=", "self", ".", "motion_feat_size", "\n", "self", ".", "latent_ode", "=", "LatentODE", "(", "input_size", "=", "ode_input_size", ",", "\n", "hidden_size", "=", "ode_hidden_size", ",", "\n", "num_layers", "=", "2", ",", "# num hidden layers", "\n", "nonlinearity", "=", "nn", ".", "Tanh", ")", "\n", "\n", "# CNF Decoder", "\n", "self", ".", "cnf_args", "=", "PointCNFArgs", "(", ")", "\n", "self", ".", "cnf_args", ".", "zdim", "=", "latent_feat_size", "\n", "self", ".", "cnf_args", ".", "num_blocks", "=", "cnf_blocks", "\n", "self", ".", "point_cnf", "=", "get_point_cnf", "(", "self", ".", "cnf_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.forward": [[76, 123], ["caspr.CaSPR.encode", "z0.size", "[].clone.size", "caspr.CaSPR.aggregate_and_solve_latent", "sample_feats.view.view.view", "[].clone", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "caspr.CaSPR.point_cnf", "caspr.CaSPR.get_nll_loss", "tuple", "caspr.CaSPR.encoder.loss", "tuple", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "[].clone.view"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.encode", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.aggregate_and_solve_latent", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.get_nll_loss", "home.repos.pwc.inspect_result.davrempe_caspr.models.tpointnet2.TPointNet2.loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "sample_points", ",", "aggregate_points", "=", "None", ")", ":", "\n", "        ", "'''\n        x               : B x T x N x 4 space-time point cloud with timestamps\n        sample_points   : B x T x N x 4 sampled points on object surface in T-NOCS\n                                NOTE: these must correspond exactly to the input points if\n                                        using TNOCs regression supervision!\n        '''", "\n", "# get initial state of latent trajectory", "\n", "# z0 is B x H", "\n", "z0", ",", "tnocs_pred", "=", "self", ".", "encode", "(", "x", ")", "\n", "\n", "B", ",", "H", "=", "z0", ".", "size", "(", ")", "\n", "_", ",", "T", ",", "N", ",", "_", "=", "sample_points", ".", "size", "(", ")", "\n", "\n", "# get loss if regressing TNOCS before the latent ODE", "\n", "tnocs_loss", "=", "None", "\n", "if", "self", ".", "regress_tnocs", ":", "\n", "            ", "tnocs_loss", "=", "self", ".", "encoder", ".", "loss", "(", "\n", "tnocs_pred", "[", ":", ",", ":", ",", ":", ",", ":", "self", ".", "tnocs_point_size", "]", ",", "\n", "sample_points", "[", ":", ",", ":", ",", ":", ",", ":", "self", ".", "tnocs_point_size", "]", ")", "# only want loss on x,y,z,t", "\n", "\n", "", "if", "self", ".", "pretrain_tnocs", ":", "\n", "# return nocs loss only", "\n", "            ", "return", "tuple", "(", "[", "tnocs_loss", "]", ")", "\n", "\n", "", "ode_feat_dim", "=", "self", ".", "cnf_args", ".", "zdim", "\n", "\n", "# collect times we need to solve for", "\n", "# NOTE: this assumes all batches have the same init time t0", "\n", "#       i.e all z0 are for the same timestamp", "\n", "all_times", "=", "sample_points", "[", ":", ",", ":", ",", "0", ",", "3", "]", "# B x T", "\n", "# solve the ODE forward in time", "\n", "sample_feats", "=", "self", ".", "aggregate_and_solve_latent", "(", "z0", ",", "all_times", ")", "# B x T x H", "\n", "sample_feats", "=", "sample_feats", ".", "view", "(", "B", "*", "T", ",", "ode_feat_dim", ")", "\n", "z", "=", "sample_feats", "\n", "\n", "# now sample with CNF", "\n", "sample_points", "=", "sample_points", ".", "view", "(", "(", "B", "*", "T", ",", "N", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", "3", "]", ".", "clone", "(", ")", "# don't need timestamps", "\n", "init_logprob", "=", "torch", ".", "zeros", "(", "B", "*", "T", ",", "N", ",", "1", ")", ".", "to", "(", "sample_points", ")", "\n", "# run flow", "\n", "cnf_result", "=", "self", ".", "point_cnf", "(", "sample_points", ",", "z", ",", "init_logprob", ")", "\n", "# get loss", "\n", "recon_loss", "=", "self", ".", "get_nll_loss", "(", "cnf_result", ",", "B", ",", "T", ")", "\n", "\n", "return_list", "=", "[", "recon_loss", ",", "tnocs_loss", "]", "\n", "\n", "return", "tuple", "(", "return_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.get_nll_loss": [[124, 147], ["utils.standard_normal_logprob", "log_py.sum.sum.sum", "delta_log_py.view.view.view", "recon_loss.view.view.view", "y.size"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.utils.standard_normal_logprob"], ["", "def", "get_nll_loss", "(", "self", ",", "cnf_result_list", ",", "B", ",", "T", ")", ":", "\n", "        ", "'''\n        Compute negative log-likelihood loss for normalizing flow.\n        '''", "\n", "batch_size", "=", "B", "*", "T", "\n", "y", ",", "delta_log_py", "=", "cnf_result_list", "\n", "cloud_dim", "=", "y", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "# likelihood under base distribution", "\n", "log_py", "=", "standard_normal_logprob", "(", "y", ")", "\n", "log_py", "=", "log_py", ".", "sum", "(", "2", ")", "\n", "# change in volume term", "\n", "delta_log_py", "=", "delta_log_py", ".", "view", "(", "batch_size", ",", "cloud_dim", ")", "\n", "# log likelihood", "\n", "log_px", "=", "log_py", "-", "delta_log_py", "\n", "\n", "# Loss", "\n", "recon_loss", "=", "-", "log_px", "# negative log likelihood", "\n", "\n", "batch_dim", "=", "B", "\n", "recon_loss", "=", "recon_loss", ".", "view", "(", "(", "batch_dim", ",", "T", ",", "-", "1", ")", ")", "\n", "\n", "return", "recon_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.encode": [[148, 156], ["caspr.CaSPR.encoder"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        x               : B x T x N x 4 space-time point cloud with timestamps\n        '''", "\n", "# get initial trajectory state from encoder", "\n", "# z0 is B x H", "\n", "z0", ",", "tnocs_pred", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "z0", ",", "tnocs_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.aggregate_and_solve_latent": [[157, 184], ["time_tensor.size", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "caspr.CaSPR.gen_latent", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "z_global.unsqueeze().expand.unsqueeze().expand.size", "z_global.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "z_global.unsqueeze().expand.unsqueeze().expand.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.gen_latent"], ["", "def", "aggregate_and_solve_latent", "(", "self", ",", "z0", ",", "time_tensor", ")", ":", "\n", "        ", "'''\n        Given a time tensor B x T containing all the timestamps we want to\n        solve for (they may not be unique). Finds all unique times, solves\n        the ODE forward in time, and maps back to the original time step to\n        return latent z's of size B x T x H\n        '''", "\n", "B", ",", "T", "=", "time_tensor", ".", "size", "(", ")", "\n", "# get unique times", "\n", "solve_t", ",", "time_map", "=", "torch", ".", "unique", "(", "time_tensor", ",", "sorted", "=", "True", ",", "return_inverse", "=", "True", ")", "\n", "\n", "# factorize input feature into static and dynamic feature ", "\n", "z_init", "=", "z0", "[", ":", ",", ":", "self", ".", "latent_ode", ".", "input_size", "]", "# dynamic", "\n", "z_global", "=", "z0", "[", ":", ",", "self", ".", "latent_ode", ".", "input_size", ":", "]", "# static", "\n", "\n", "# solve ODE for necessary times", "\n", "pred_z", "=", "self", ".", "gen_latent", "(", "z_init", ",", "solve_t", ")", "\n", "\n", "batch_inds", "=", "torch", ".", "arange", "(", "B", ")", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", ".", "repeat", "(", "(", "1", ",", "T", ")", ")", "\n", "# map result latent states back to input sampled points", "\n", "sample_feats", "=", "pred_z", "[", "batch_inds", ",", "time_map", ",", ":", "]", "# B x T x H", "\n", "\n", "B_global", ",", "H_global", "=", "z_global", ".", "size", "(", ")", "\n", "z_global", "=", "z_global", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "B_global", ",", "sample_feats", ".", "size", "(", ")", "[", "1", "]", ",", "H_global", ")", "\n", "sample_feats", "=", "torch", ".", "cat", "(", "[", "sample_feats", ",", "z_global", "]", ",", "dim", "=", "2", ")", "\n", "\n", "return", "sample_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.gen_latent": [[185, 197], ["caspr.CaSPR.latent_ode"], "methods", ["None"], ["", "def", "gen_latent", "(", "self", ",", "z0", ",", "timestamps", ")", ":", "\n", "        ", "'''\n        Generates the latent code at the given timestamps starting at the initial condition\n        z0 by solving an ODE forward in time.\n\n        z0 : B x H\n        timestamps : T\n\n        returns B x T x H\n        '''", "\n", "pred_z", "=", "self", ".", "latent_ode", "(", "z0", ",", "timestamps", ")", "\n", "return", "pred_z", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.get_nfe": [[198, 203], ["numpy.array", "flow.count_nfe", "flow.count_nfe"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.flow.count_nfe", "home.repos.pwc.inspect_result.davrempe_caspr.models.flow.count_nfe"], ["", "def", "get_nfe", "(", "self", ")", ":", "\n", "        ", "'''\n        Returns the number of function evaluations needed for the most recent forward pass.\n        '''", "\n", "return", "np", ".", "array", "(", "[", "count_nfe", "(", "self", ".", "latent_ode", ")", ",", "count_nfe", "(", "self", ".", "point_cnf", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.decode": [[204, 268], ["z.view.view.size", "utils.standard_normal_logprob().view().sum", "z.view.view.view", "caspr.CaSPR.point_cnf", "x.view.view.view", "y.reshape.reshape.view", "logp_y.view.view.view", "numpy.concatenate", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "y.reshape.reshape.view", "utils.sample_gaussian", "y.reshape.reshape.view().expand", "y.reshape.reshape.reshape", "utils.transform_utils.sphere_surface_points", "contours.append", "utils.standard_normal_logprob().view", "rand_surf_points.reshape.reshape.reshape", "rand_surf_points.reshape.reshape.reshape", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y.reshape.reshape.view", "utils.standard_normal_logprob", "len", "len"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.utils.sample_gaussian", "home.repos.pwc.inspect_result.davrempe_caspr.utils.transform_utils.sphere_surface_points", "home.repos.pwc.inspect_result.davrempe_caspr.models.utils.standard_normal_logprob"], ["", "def", "decode", "(", "self", ",", "z", ",", "\n", "num_points", "=", "1024", ",", "\n", "constant_in_time", "=", "False", ",", "\n", "truncate_std", "=", "None", ",", "\n", "sample_contours", "=", "None", ",", "\n", ")", ":", "\n", "        ", "'''\n        Given latent vectors at various time steps, samples points on the object surface\n\n        z          : latent codes for each step B x T x H\n        num_points : how many points to sample\n        constant_in_time : if True, samples a single Nx3 point cloud for each batch and uses this same\n                           sampling for every timestep\n        truncate_std : the number of standard deviations to truncate the sampling from.\n        sample_contours : if given a list of floats e.g. [0.25, 0.5, 1.0, 1.5, 2.25, 3.0] samples will come\n                          from these gaussian contours rather than randomly\n\n        Returns\n        y      : points sampled from the standard normal\n        logp_y : the log probability of the sampled points\n        x      : points after decoding\n        '''", "\n", "# transform points from the prior to a point cloud, conditioned on a shape code", "\n", "B", ",", "T", ",", "H", "=", "z", ".", "size", "(", ")", "\n", "samp_batch", "=", "B", "if", "constant_in_time", "else", "B", "*", "T", "\n", "input_dim", "=", "self", ".", "cnf_args", ".", "input_dim", "\n", "samp_size", "=", "(", "samp_batch", ",", "num_points", ",", "input_dim", ")", "\n", "\n", "if", "sample_contours", "is", "not", "None", ":", "\n", "            ", "radii", "=", "sample_contours", "\n", "contours", "=", "[", "]", "\n", "nsamp_pts", "=", "0", "\n", "for", "radius", "in", "radii", ":", "\n", "                ", "if", "radius", "==", "radii", "[", "-", "1", "]", ":", "\n", "                    ", "cur_npts", "=", "samp_batch", "*", "(", "num_points", "-", "nsamp_pts", ")", "\n", "", "else", ":", "\n", "                    ", "cur_npts", "=", "samp_batch", "*", "(", "num_points", "//", "len", "(", "radii", ")", ")", "\n", "", "rand_surf_points", "=", "sphere_surface_points", "(", "cur_npts", ",", "radius", "=", "radius", ")", "\n", "if", "radius", "==", "radii", "[", "-", "1", "]", ":", "\n", "                    ", "rand_surf_points", "=", "rand_surf_points", ".", "reshape", "(", "(", "samp_batch", ",", "num_points", "-", "nsamp_pts", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                    ", "rand_surf_points", "=", "rand_surf_points", ".", "reshape", "(", "(", "samp_batch", ",", "num_points", "//", "len", "(", "radii", ")", ",", "3", ")", ")", "\n", "", "contours", ".", "append", "(", "rand_surf_points", ")", "\n", "nsamp_pts", "+=", "num_points", "//", "len", "(", "radii", ")", "\n", "", "y", "=", "np", ".", "concatenate", "(", "contours", ",", "axis", "=", "1", ")", "\n", "y", "=", "torch", ".", "from_numpy", "(", "y", ")", ".", "to", "(", "z", ")", "\n", "y", "=", "y", ".", "view", "(", "samp_size", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "sample_gaussian", "(", "samp_size", ",", "truncate_std", ",", "device", "=", "z", ".", "device", ")", "\n", "\n", "", "if", "constant_in_time", ":", "\n", "            ", "y", "=", "y", ".", "view", "(", "(", "B", ",", "1", ",", "num_points", ",", "input_dim", ")", ")", ".", "expand", "(", "(", "B", ",", "T", ",", "num_points", ",", "self", ".", "cnf_args", ".", "input_dim", ")", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "B", "*", "T", ",", "num_points", ",", "input_dim", ")", ")", "\n", "\n", "", "logp_y", "=", "standard_normal_logprob", "(", "y", ")", ".", "view", "(", "B", "*", "T", ",", "num_points", ",", "-", "1", ")", ".", "sum", "(", "2", ")", "\n", "\n", "z", "=", "z", ".", "view", "(", "(", "B", "*", "T", ",", "H", ")", ")", "\n", "\n", "x", "=", "self", ".", "point_cnf", "(", "y", ",", "z", ",", "reverse", "=", "True", ")", "#.view(*y.size())", "\n", "x", "=", "x", ".", "view", "(", "(", "B", ",", "T", ",", "num_points", ",", "input_dim", ")", ")", "\n", "y", "=", "y", ".", "view", "(", "(", "B", ",", "T", ",", "num_points", ",", "input_dim", ")", ")", "\n", "logp_y", "=", "logp_y", ".", "view", "(", "(", "B", ",", "T", ",", "num_points", ")", ")", "\n", "\n", "return", "y", ",", "logp_y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.reconstruct": [[269, 309], ["x.size", "caspr.CaSPR.encode", "caspr.CaSPR.aggregate_and_solve_latent", "caspr.CaSPR.decode", "timestamps.view().repeat", "timestamps.view"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.encode", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.aggregate_and_solve_latent", "home.repos.pwc.inspect_result.davrempe_caspr.models.caspr.CaSPR.decode"], ["", "def", "reconstruct", "(", "self", ",", "x", ",", "\n", "num_points", "=", "1024", ",", "\n", "constant_in_time", "=", "False", ",", "\n", "timestamps", "=", "None", ",", "\n", "max_timestamp", "=", "5.0", ",", "\n", "truncate_std", "=", "None", ",", "\n", "sample_contours", "=", "None", ",", "\n", ")", ":", "\n", "        ", "'''\n        Reconstructs a given point cloud sequence with CaSPR.\n\n        x               : B x T x N x 4 space-time point cloud with timestamps to condition reconstruction\n        num_points      : the number of points to sample at each step\n        constant_in_time : if True, samples a single Nx3 point cloud for each batch and uses this same\n                           sampling for every timestep\n        timestamps      : (T) the times to sample at, if None, uses those from the input sequence\n        max_timestamp   : the max_timestamps to normalize input sequences times by if timestamps is None\n        truncate_std    : the number of standard deviations to truncate the sampling from.\n        sample_contours : if given a list of floats e.g. [0.25, 0.5, 1.0, 1.5, 2.25, 3.0] samples will come\n                            from these gaussian contours rather than randomly\n\n        Returns\n        y      : points sampled from the standard normal (base distribution)\n        logp_y : the log probability of the sampled points\n        x      : points after decoding (the reconstruction)\n        tnocs_pred : the TNOCS regression if applicable\n        '''", "\n", "B", ",", "T", ",", "N", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "z0", ",", "tnocs_pred", "=", "self", ".", "encode", "(", "x", ")", "\n", "\n", "if", "timestamps", "is", "None", ":", "\n", "            ", "all_times", "=", "x", "[", ":", ",", ":", ",", "0", ",", "3", "]", "/", "max_timestamp", "\n", "", "else", ":", "\n", "            ", "all_times", "=", "timestamps", ".", "view", "(", "(", "1", ",", "-", "1", ")", ")", ".", "repeat", "(", "(", "B", ",", "1", ")", ")", "\n", "# print(all_times)", "\n", "\n", "", "z", "=", "self", ".", "aggregate_and_solve_latent", "(", "z0", ",", "all_times", ")", "\n", "y", ",", "logp_y", ",", "x", "=", "self", ".", "decode", "(", "z", ",", "num_points", ",", "constant_in_time", ",", "truncate_std", ",", "sample_contours", ")", "\n", "\n", "return", "y", ",", "logp_y", ",", "x", ",", "tnocs_pred", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.tpointnet2.TPointNet2.__init__": [[13, 69], ["torch.Module.__init__", "pointnet2.PointNet2feat", "pointnet.PointNetfeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "print", "print", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["def", "__init__", "(", "self", ",", "radii_list", "=", "[", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.4", ",", "0.8", "]", ",", "\n", "local_feat_size", "=", "512", ",", "# size of the PointNet++ features", "\n", "out_feat_size", "=", "1600", ",", "# size of the output latent feature size from this model.", "\n", "augment_quad", "=", "True", ",", "# whether to augment quadratic terms to input of PointNet++ (x^2, y^x, z^2)", "\n", "augment_pairs", "=", "True", ",", "# whether to augment pairwise multiplied terms (xy, xz, yz)", "\n", "tnocs_point_size", "=", "4", ",", "\n", "regress_tnocs", "=", "True", ")", ":", "# if true, regresses TNOCS points in addition to extracting latent feature", "\n", "        ", "super", "(", "TPointNet2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "augment_quad", "=", "augment_quad", "\n", "self", ".", "augment_pairs", "=", "augment_pairs", "\n", "self", ".", "tnocs_point_size", "=", "tnocs_point_size", "\n", "\n", "# PointNet++ feat output size", "\n", "self", ".", "local_feat_size", "=", "local_feat_size", "\n", "self", ".", "local_bottleneck_size", "=", "self", ".", "local_feat_size", "\n", "\n", "# PointNet feat size", "\n", "self", ".", "global_feat_size", "=", "1024", "\n", "self", ".", "space_time_pt_feat", "=", "64", "\n", "\n", "# out feature size", "\n", "self", ".", "latent_feat_size", "=", "out_feat_size", "\n", "\n", "# PointNet++", "\n", "in_features", "=", "0", "# by default we only use x,y,z as input", "\n", "if", "self", ".", "augment_quad", ":", "\n", "            ", "print", "(", "'Augmenting quadratic terms to input of PointNet++!'", ")", "\n", "in_features", "+=", "3", "# add quadratic terms", "\n", "", "if", "self", ".", "augment_pairs", ":", "\n", "            ", "print", "(", "'Augmenting pairwise terms to input of PointNet++!'", ")", "\n", "in_features", "+=", "3", "# add pairwise terms", "\n", "", "self", ".", "local_extract", "=", "PointNet2", "(", "in_features", "=", "in_features", ",", "\n", "num_classes", "=", "self", ".", "local_feat_size", ",", "# size of the output", "\n", "batchnorm", "=", "False", ",", "# will use groupnorm instead", "\n", "use_xyz_feature", "=", "True", ",", "# also uses the coordinate as a feature", "\n", "use_random_ball_query", "=", "False", ",", "\n", "radii_list", "=", "radii_list", ",", "\n", "max_feat_prop_size", "=", "self", ".", "local_bottleneck_size", "\n", ")", "\n", "\n", "# PointNet", "\n", "self", ".", "global_extract", "=", "PointNetfeat", "(", "input_dim", "=", "4", ",", "out_size", "=", "self", ".", "global_feat_size", ")", "\n", "\n", "# layers to get space-time feature", "\n", "per_point_out_size", "=", "self", ".", "global_feat_size", "+", "self", ".", "space_time_pt_feat", "+", "self", ".", "local_feat_size", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "per_point_out_size", ",", "per_point_out_size", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "per_point_out_size", ",", "self", ".", "latent_feat_size", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "GroupNorm", "(", "16", ",", "per_point_out_size", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "GroupNorm", "(", "16", ",", "self", ".", "latent_feat_size", ")", "\n", "\n", "# regress TNOCS afterward", "\n", "self", ".", "regress_tnocs", "=", "regress_tnocs", "\n", "if", "self", ".", "regress_tnocs", ":", "\n", "            ", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "latent_feat_size", ",", "self", ".", "tnocs_point_size", ",", "1", ")", "# output latent features besides just (x,y,z,t)", "\n", "self", ".", "loss_func", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduce", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.tpointnet2.TPointNet2.forward": [[70, 116], ["x.size", "x.view().transpose().contiguous", "tpointnet2.TPointNet2.global_extract", "tpointnet2.TPointNet2.local_extract().view", "local_feat.view().transpose().contiguous.view().transpose().contiguous.view().transpose().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "tpointnet2.TPointNet2.bn2", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tpointnet2.TPointNet2.bn1", "tpointnet2.TPointNet2.conv2", "tpointnet2.TPointNet2.conv3", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "tnocs_regression.view.view.transpose().contiguous", "tnocs_regression.view.view.view", "x.view().transpose", "tpointnet2.TPointNet2.local_extract", "local_feat.view().transpose().contiguous.view().transpose().contiguous.view().transpose", "tpointnet2.TPointNet2.conv1", "torch.relu", "torch.relu", "torch.relu", "tnocs_regression.view.view.transpose", "x.view", "local_feat.view().transpose().contiguous.view().transpose().contiguous.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "T", ",", "N", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "\n", "# Global spatio-temporal feature", "\n", "# output is the per-point features concatenated with global feature", "\n", "global_input", "=", "x", ".", "view", "(", "B", ",", "T", "*", "N", ",", "4", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "global_feat", "=", "self", ".", "global_extract", "(", "global_input", ")", "\n", "\n", "# Local spatial feature for each timestep", "\n", "spatial_in", "=", "x", ".", "view", "(", "B", "*", "T", ",", "N", ",", "4", ")", "[", ":", ",", ":", ",", ":", "3", "]", "# only want spatial inputs", "\n", "local_in", "=", "spatial_in", "\n", "if", "self", ".", "augment_quad", ":", "\n", "# concat quadratic terms", "\n", "            ", "quad_terms", "=", "spatial_in", "*", "spatial_in", "\n", "local_in", "=", "torch", ".", "cat", "(", "[", "spatial_in", ",", "quad_terms", "]", ",", "axis", "=", "2", ")", "\n", "", "if", "self", ".", "augment_pairs", ":", "\n", "# concat pairwise mult terms", "\n", "            ", "xz", "=", "spatial_in", "[", ":", ",", ":", ",", "0", ":", "1", "]", "*", "spatial_in", "[", ":", ",", ":", ",", "2", ":", "3", "]", "\n", "xy", "=", "spatial_in", "[", ":", ",", ":", ",", "0", ":", "1", "]", "*", "spatial_in", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "yz", "=", "spatial_in", "[", ":", ",", ":", ",", "2", ":", "3", "]", "*", "spatial_in", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "local_in", "=", "torch", ".", "cat", "(", "[", "local_in", ",", "xz", ",", "xy", ",", "yz", "]", ",", "axis", "=", "2", ")", "\n", "\n", "", "local_feat", "=", "self", ".", "local_extract", "(", "local_in", ")", ".", "view", "(", "B", ",", "T", ",", "N", ",", "-", "1", ")", "\n", "local_feat", "=", "local_feat", ".", "view", "(", "B", ",", "T", "*", "N", ",", "self", ".", "local_feat_size", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# concat global and local features", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "local_feat", ",", "global_feat", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# process to get latent features output", "\n", "feat", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "feat", ")", ")", ")", "\n", "feat", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "feat", ")", ")", "\n", "\n", "# further process to get TNOCS regression output", "\n", "tnocs_regression", "=", "None", "\n", "if", "self", ".", "regress_tnocs", ":", "\n", "            ", "tnocs_out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "feat", ")", ")", "\n", "tnocs_regression", "=", "torch", ".", "sigmoid", "(", "tnocs_out", "[", ":", ",", ":", "self", ".", "tnocs_point_size", ",", ":", "]", ")", "\n", "tnocs_regression", "=", "tnocs_regression", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# B x T*N x 4", "\n", "tnocs_regression", "=", "tnocs_regression", ".", "view", "(", "B", ",", "T", ",", "N", ",", "self", ".", "tnocs_point_size", ")", "\n", "\n", "# max-pool over point-wise latent features to gets single output feature", "\n", "", "feat_max_op", "=", "torch", ".", "max", "(", "feat", ",", "2", ",", "keepdim", "=", "False", ")", "\n", "feat", "=", "feat_max_op", "[", "0", "]", "\n", "feat_max_inds", "=", "feat_max_op", "[", "1", "]", "\n", "\n", "return", "feat", ",", "tnocs_regression", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.tpointnet2.TPointNet2.loss": [[117, 124], ["tpointnet2.TPointNet2.loss_func"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "outputs", ",", "gt", ")", ":", "\n", "        ", "'''\n        Computes the loss for TNOCS regression given the outputs of the network compared to GT\n        TNOCS values. Returns unreduces loss values (per-point)\n        '''", "\n", "loss", "=", "self", ".", "loss_func", "(", "outputs", ",", "gt", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet.PointNetfeat.__init__": [[23, 33], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "3", ",", "out_size", "=", "1024", ",", "layer_sizes", "=", "[", "64", ",", "128", "]", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "out_size", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "layer_sizes", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "layer_sizes", "[", "0", "]", ",", "layer_sizes", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "layer_sizes", "[", "1", "]", ",", "self", ".", "output_size", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "GroupNorm", "(", "16", ",", "layer_sizes", "[", "0", "]", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "GroupNorm", "(", "16", ",", "layer_sizes", "[", "1", "]", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "GroupNorm", "(", "16", ",", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet.PointNetfeat.forward": [[34, 47], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetfeat.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.size", "pointnet.PointNetfeat.bn1", "pointnet.PointNetfeat.bn2", "pointnet.PointNetfeat.conv3", "pointnet.PointNetfeat.conv1", "pointnet.PointNetfeat.conv2", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "max_op", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "max_op", "[", "0", "]", "\n", "max_inds", "=", "max_op", "[", "1", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "output_size", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.flow.PointCNFArgs.__init__": [[87, 101], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "input_dim", "=", "3", "# Number of input dimensions (3 for 3D point clouds)", "\n", "self", ".", "dims", "=", "\"512-512-512\"", "# hidden dims of ode net (will be this many +1 (input layer))", "\n", "self", ".", "zdim", "=", "512", "# Dimension of the shape code", "\n", "self", ".", "num_blocks", "=", "1", "# Number of stacked CNFs", "\n", "self", ".", "layer_type", "=", "'concatsquash'", "# type of layer to use in ode func", "\n", "self", ".", "nonlinearity", "=", "'softplus'", "# nonlinearity in ode func", "\n", "self", ".", "time_length", "=", "0.5", "# if not training final time of flow, what to use", "\n", "self", ".", "train_T", "=", "True", "# whether to train time of ending flow", "\n", "self", ".", "solver", "=", "'dopri5'", "# ODE solver to use", "\n", "self", ".", "use_adjoint", "=", "True", "# use adjoint method", "\n", "self", ".", "atol", "=", "1e-5", "# solver tolerences", "\n", "self", ".", "rtol", "=", "1e-5", "\n", "self", ".", "batch_norm", "=", "True", "# whether to use moving batch norm", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.flow.count_nfe": [[10, 23], ["AccNumEvals", "model.apply", "isinstance", "isinstance", "module.num_evals"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.models.cnf.CNF.num_evals"], ["def", "count_nfe", "(", "model", ")", ":", "\n", "    ", "class", "AccNumEvals", "(", "object", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "num_evals", "=", "0", "\n", "\n", "", "def", "__call__", "(", "self", ",", "module", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "CNF", ")", "or", "isinstance", "(", "module", ",", "LatentODE", ")", ":", "\n", "                ", "self", ".", "num_evals", "+=", "module", ".", "num_evals", "(", ")", "\n", "\n", "", "", "", "accumulator", "=", "AccNumEvals", "(", ")", "\n", "model", ".", "apply", "(", "accumulator", ")", "\n", "return", "accumulator", ".", "num_evals", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.flow.count_parameters": [[25, 27], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.flow.count_total_time": [[29, 42], ["Accumulator", "model.apply", "isinstance"], "function", ["None"], ["", "def", "count_total_time", "(", "model", ")", ":", "\n", "    ", "class", "Accumulator", "(", "object", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "total_time", "=", "0", "\n", "\n", "", "def", "__call__", "(", "self", ",", "module", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "CNF", ")", ":", "\n", "                ", "self", ".", "total_time", "=", "self", ".", "total_time", "+", "module", ".", "sqrt_end_time", "*", "module", ".", "sqrt_end_time", "\n", "\n", "", "", "", "accumulator", "=", "Accumulator", "(", ")", "\n", "model", ".", "apply", "(", "accumulator", ")", "\n", "return", "accumulator", ".", "total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.flow.build_model": [[44, 77], ["cnf.SequentialFlow", "odefunc.ODEnet", "odefunc.ODEfunc", "cnf.CNF", "flow.build_model.build_cnf"], "function", ["None"], ["", "def", "build_model", "(", "args", ",", "input_dim", ",", "hidden_dims", ",", "context_dim", ",", "num_blocks", ",", "conditional", ")", ":", "\n", "    ", "def", "build_cnf", "(", ")", ":", "\n", "        ", "diffeq", "=", "ODEnet", "(", "\n", "hidden_dims", "=", "hidden_dims", ",", "\n", "input_shape", "=", "(", "input_dim", ",", ")", ",", "\n", "context_dim", "=", "context_dim", ",", "\n", "layer_type", "=", "args", ".", "layer_type", ",", "\n", "nonlinearity", "=", "args", ".", "nonlinearity", ",", "\n", ")", "\n", "odefunc", "=", "ODEfunc", "(", "\n", "diffeq", "=", "diffeq", ",", "\n", ")", "\n", "cnf", "=", "CNF", "(", "\n", "odefunc", "=", "odefunc", ",", "\n", "T", "=", "args", ".", "time_length", ",", "\n", "train_T", "=", "args", ".", "train_T", ",", "\n", "conditional", "=", "conditional", ",", "\n", "solver", "=", "args", ".", "solver", ",", "\n", "use_adjoint", "=", "args", ".", "use_adjoint", ",", "\n", "atol", "=", "args", ".", "atol", ",", "\n", "rtol", "=", "args", ".", "rtol", "\n", ")", "\n", "return", "cnf", "\n", "\n", "", "chain", "=", "[", "build_cnf", "(", ")", "for", "_", "in", "range", "(", "num_blocks", ")", "]", "\n", "if", "args", ".", "batch_norm", ":", "\n", "        ", "bn_chain", "=", "[", "MovingBatchNorm1d", "(", "input_dim", ")", "]", "\n", "chain", "=", "bn_chain", "+", "chain", "\n", "chain", "+=", "[", "MovingBatchNorm1d", "(", "input_dim", ")", "]", "\n", "\n", "", "model", "=", "SequentialFlow", "(", "chain", ",", "use_bn", "=", "args", ".", "batch_norm", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.flow.get_point_cnf": [[79, 84], ["tuple", "build_model().cuda", "print", "map", "args.dims.split", "flow.build_model", "flow.count_parameters"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.models.flow.build_model", "home.repos.pwc.inspect_result.davrempe_caspr.models.flow.count_parameters"], ["", "def", "get_point_cnf", "(", "args", ")", ":", "\n", "    ", "dims", "=", "tuple", "(", "map", "(", "int", ",", "args", ".", "dims", ".", "split", "(", "\"-\"", ")", ")", ")", "\n", "model", "=", "build_model", "(", "args", ",", "args", ".", "input_dim", ",", "dims", ",", "args", ".", "zdim", ",", "args", ".", "num_blocks", ",", "True", ")", ".", "cuda", "(", ")", "\n", "print", "(", "\"Number of trainable parameters of Point CNF: {}\"", ".", "format", "(", "count_parameters", "(", "model", ")", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.cnf.SequentialFlow.__init__": [[23, 30], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["def", "__init__", "(", "self", ",", "layer_list", ",", "use_bn", "=", "True", ")", ":", "\n", "        ", "'''\n        The given input is inserted at all CNF blocks.\n        '''", "\n", "super", "(", "SequentialFlow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chain", "=", "nn", ".", "ModuleList", "(", "layer_list", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.cnf.SequentialFlow.forward": [[33, 49], ["range", "range", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "context", ",", "logpx", "=", "None", ",", "reverse", "=", "False", ",", "inds", "=", "None", ",", "integration_times", "=", "None", ")", ":", "\n", "        ", "if", "inds", "is", "None", ":", "\n", "            ", "if", "reverse", ":", "\n", "                ", "inds", "=", "range", "(", "len", "(", "self", ".", "chain", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "inds", "=", "range", "(", "len", "(", "self", ".", "chain", ")", ")", "\n", "\n", "", "", "if", "logpx", "is", "None", ":", "\n", "            ", "for", "i", "in", "inds", ":", "\n", "                ", "x", "=", "self", ".", "chain", "[", "i", "]", "(", "x", ",", "context", ",", "logpx", ",", "integration_times", ",", "reverse", ")", "\n", "", "return", "x", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "inds", ":", "\n", "                ", "result", "=", "self", ".", "chain", "[", "i", "]", "(", "x", ",", "context", ",", "logpx", ",", "integration_times", ",", "reverse", ")", "\n", "x", ",", "logpx", "=", "result", "\n", "", "return", "x", ",", "logpx", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.cnf.CNF.__init__": [[51, 69], ["torch.Module.__init__", "cnf.CNF.register_parameter", "torch.Parameter", "torch.Parameter", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "odefunc", ",", "conditional", "=", "True", ",", "T", "=", "1.0", ",", "train_T", "=", "False", ",", "\n", "solver", "=", "'dopri5'", ",", "atol", "=", "1e-5", ",", "rtol", "=", "1e-5", ",", "use_adjoint", "=", "True", ")", ":", "\n", "        ", "super", "(", "CNF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_T", "=", "train_T", "\n", "self", ".", "T", "=", "T", "\n", "if", "train_T", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"sqrt_end_time\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "T", ")", ")", ")", ")", "\n", "\n", "", "self", ".", "use_adjoint", "=", "use_adjoint", "\n", "self", ".", "odefunc", "=", "odefunc", "\n", "self", ".", "solver", "=", "solver", "\n", "self", ".", "atol", "=", "atol", "\n", "self", ".", "rtol", "=", "rtol", "\n", "self", ".", "test_solver", "=", "solver", "\n", "self", ".", "test_atol", "=", "atol", "\n", "self", ".", "test_rtol", "=", "rtol", "\n", "self", ".", "solver_options", "=", "{", "}", "\n", "self", ".", "conditional", "=", "conditional", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.cnf.CNF.forward": [[70, 129], ["cnf.CNF.odefunc.before_odeint", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "cnf._flip", "torchdiffeq.odeint", "torchdiffeq.odeint", "len", "tuple", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to.to", "torch.tensor().to.to", "torch.tensor().to.to", "torch.tensor().to.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.models.odefunc.ODEfunc.before_odeint", "home.repos.pwc.inspect_result.davrempe_caspr.models.cnf._flip"], ["", "def", "forward", "(", "self", ",", "x", ",", "context", "=", "None", ",", "logpx", "=", "None", ",", "integration_times", "=", "None", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "logpx", "is", "None", ":", "\n", "            ", "_logpx", "=", "torch", ".", "zeros", "(", "*", "x", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ".", "to", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "_logpx", "=", "logpx", "\n", "\n", "\n", "", "if", "self", ".", "conditional", ":", "\n", "            ", "assert", "context", "is", "not", "None", "\n", "states", "=", "(", "x", ",", "_logpx", ",", "context", ")", "\n", "atol", "=", "[", "self", ".", "atol", "]", "*", "3", "\n", "rtol", "=", "[", "self", ".", "rtol", "]", "*", "3", "\n", "", "else", ":", "\n", "            ", "states", "=", "(", "x", ",", "_logpx", ")", "\n", "atol", "=", "[", "self", ".", "atol", "]", "*", "2", "\n", "rtol", "=", "[", "self", ".", "rtol", "]", "*", "2", "\n", "\n", "", "if", "integration_times", "is", "None", ":", "\n", "            ", "if", "self", ".", "train_T", ":", "\n", "                ", "integration_times", "=", "torch", ".", "stack", "(", "\n", "[", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "x", ")", ",", "self", ".", "sqrt_end_time", "*", "self", ".", "sqrt_end_time", "]", "\n", ")", ".", "to", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "integration_times", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "self", ".", "T", "]", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "x", ")", "\n", "\n", "", "", "if", "reverse", ":", "\n", "            ", "integration_times", "=", "_flip", "(", "integration_times", ",", "0", ")", "\n", "\n", "# Refresh the odefunc statistics.", "\n", "", "self", ".", "odefunc", ".", "before_odeint", "(", ")", "\n", "odeint", "=", "odeint_adjoint", "if", "self", ".", "use_adjoint", "else", "odeint_normal", "\n", "if", "self", ".", "training", ":", "\n", "            ", "state_t", "=", "odeint", "(", "\n", "self", ".", "odefunc", ",", "\n", "states", ",", "\n", "integration_times", ".", "to", "(", "x", ")", ",", "\n", "atol", "=", "atol", ",", "\n", "rtol", "=", "rtol", ",", "\n", "method", "=", "self", ".", "solver", ",", "\n", "options", "=", "self", ".", "solver_options", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "state_t", "=", "odeint", "(", "\n", "self", ".", "odefunc", ",", "\n", "states", ",", "\n", "integration_times", ".", "to", "(", "x", ")", ",", "\n", "atol", "=", "self", ".", "test_atol", ",", "\n", "rtol", "=", "self", ".", "test_rtol", ",", "\n", "method", "=", "self", ".", "test_solver", ",", "\n", ")", "\n", "\n", "", "if", "len", "(", "integration_times", ")", "==", "2", ":", "\n", "            ", "state_t", "=", "tuple", "(", "s", "[", "1", "]", "for", "s", "in", "state_t", ")", "\n", "\n", "", "z_t", ",", "logpz_t", "=", "state_t", "[", ":", "2", "]", "\n", "if", "logpx", "is", "not", "None", ":", "\n", "            ", "return", "z_t", ",", "logpz_t", "\n", "", "else", ":", "\n", "            ", "return", "z_t", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.cnf.CNF.num_evals": [[130, 132], ["cnf.CNF.odefunc._num_evals.item"], "methods", ["None"], ["", "", "def", "num_evals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "odefunc", ".", "_num_evals", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.cnf._flip": [[134, 138], ["torch.arange", "torch.arange", "x.dim", "slice", "x.size", "tuple"], "function", ["None"], ["", "", "def", "_flip", "(", "x", ",", "dim", ")", ":", "\n", "    ", "indices", "=", "[", "slice", "(", "None", ")", "]", "*", "x", ".", "dim", "(", ")", "\n", "indices", "[", "dim", "]", "=", "torch", ".", "arange", "(", "x", ".", "size", "(", "dim", ")", "-", "1", ",", "-", "1", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "x", "[", "tuple", "(", "indices", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2feat.__init__": [[47, 216], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet2.PointNet2feat.set_abstractions.append", "pointnet2.PointNet2feat.set_abstractions.append", "pointnet2.PointNet2feat.set_abstractions.append", "pointnet2.PointNet2feat.set_abstractions.append", "pointnet2.PointNet2feat.set_abstractions.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet2.PointNet2feat.feature_propagators.append", "pointnet2.PointNet2feat.feature_propagators.append", "pointnet2.PointNet2feat.feature_propagators.append", "pointnet2.PointNet2feat.feature_propagators.append", "pointnet2.PointNet2feat.feature_propagators.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "print", "exit", "pointnet2.PointNet2SetAbstraction", "pointnet2.PointNet2SetAbstraction", "pointnet2.PointNet2SetAbstraction", "pointnet2.PointNet2SetAbstraction", "pointnet2.PointNet2SetAbstraction", "pointnet2.PointNet2FeaturePropagator", "pointnet2.PointNet2FeaturePropagator", "pointnet2.PointNet2FeaturePropagator", "pointnet2.PointNet2FeaturePropagator", "pointnet2.PointNet2FeaturePropagator", "max", "max", "max", "max", "max", "len", "pointnet2.PointNet2feat.set_abstractions[].get_num_features_out", "pointnet2.PointNet2feat.set_abstractions[].get_num_features_out", "pointnet2.PointNet2feat.set_abstractions[].get_num_features_out", "pointnet2.PointNet2feat.set_abstractions[].get_num_features_out", "pointnet2.PointNet2feat.set_abstractions[].get_num_features_out", "pointnet2.PointNet2feat.set_abstractions[].get_num_features_out", "pointnet2.PointNet2feat.set_abstractions[].get_num_features_out", "pointnet2.PointNet2feat.feature_propagators[].get_num_features_out", "pointnet2.PointNet2feat.set_abstractions[].get_num_features_out", "pointnet2.PointNet2feat.feature_propagators[].get_num_features_out", "pointnet2.PointNet2feat.set_abstractions[].get_num_features_out", "pointnet2.PointNet2feat.feature_propagators[].get_num_features_out", "pointnet2.PointNet2feat.feature_propagators[].get_num_features_out", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "pointnet2.PointNet2feat.feature_propagators[].get_num_features_out", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out", "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out"], ["def", "__init__", "(", "self", ",", "\n", "in_features", "=", "0", ",", "\n", "num_classes", "=", "2", ",", "\n", "batchnorm", "=", "True", ",", "\n", "use_xyz_feature", "=", "True", ",", "\n", "use_random_ball_query", "=", "False", ",", "\n", "radii_list", "=", "[", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.4", ",", "0.8", "]", ",", "\n", "max_feat_prop_size", "=", "512", ")", ":", "\n", "\n", "        ", "super", "(", "PointNet2feat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "radii_list", ")", "!=", "6", ":", "\n", "            ", "print", "(", "'Radii list must be length 6, not %d!'", "%", "(", "len", "(", "radii_list", ")", ")", ")", "\n", "exit", "(", ")", "\n", "\n", "", "self", ".", "set_abstractions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "set_abstractions", ".", "append", "(", "\n", "PointNet2SetAbstraction", "(", "\n", "num_points_out", "=", "1024", ",", "\n", "pointnet_in_features", "=", "in_features", ",", "\n", "pointnet_layer_dims_list", "=", "[", "\n", "[", "16", ",", "16", ",", "32", "]", ",", "\n", "[", "32", ",", "32", ",", "64", "]", ",", "\n", "]", ",", "\n", "radii_list", "=", "[", "radii_list", "[", "-", "6", "]", ",", "radii_list", "[", "-", "5", "]", "]", ",", "\n", "num_samples_list", "=", "[", "16", ",", "32", "]", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "use_xyz_feature", "=", "use_xyz_feature", ",", "\n", "use_random_ball_query", "=", "use_random_ball_query", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "set_abstractions", ".", "append", "(", "\n", "PointNet2SetAbstraction", "(", "\n", "num_points_out", "=", "512", ",", "\n", "pointnet_in_features", "=", "self", ".", "set_abstractions", "[", "-", "1", "]", ".", "get_num_features_out", "(", "\n", ")", ",", "\n", "pointnet_layer_dims_list", "=", "[", "\n", "[", "32", ",", "32", ",", "64", "]", ",", "\n", "[", "32", ",", "32", ",", "64", "]", ",", "\n", "]", ",", "\n", "radii_list", "=", "[", "radii_list", "[", "-", "5", "]", ",", "radii_list", "[", "-", "4", "]", "]", ",", "\n", "num_samples_list", "=", "[", "16", ",", "32", "]", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "use_xyz_feature", "=", "use_xyz_feature", ",", "\n", "use_random_ball_query", "=", "use_random_ball_query", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "set_abstractions", ".", "append", "(", "\n", "PointNet2SetAbstraction", "(", "\n", "num_points_out", "=", "256", ",", "\n", "pointnet_in_features", "=", "self", ".", "set_abstractions", "[", "-", "1", "]", ".", "get_num_features_out", "(", "\n", ")", ",", "\n", "pointnet_layer_dims_list", "=", "[", "\n", "[", "64", ",", "64", ",", "128", "]", ",", "\n", "[", "64", ",", "96", ",", "128", "]", ",", "\n", "]", ",", "\n", "radii_list", "=", "[", "radii_list", "[", "-", "4", "]", ",", "radii_list", "[", "-", "3", "]", "]", ",", "\n", "num_samples_list", "=", "[", "16", ",", "32", "]", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "use_xyz_feature", "=", "use_xyz_feature", ",", "\n", "use_random_ball_query", "=", "use_random_ball_query", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "set_abstractions", ".", "append", "(", "\n", "PointNet2SetAbstraction", "(", "\n", "num_points_out", "=", "64", ",", "\n", "pointnet_in_features", "=", "self", ".", "set_abstractions", "[", "-", "1", "]", ".", "get_num_features_out", "(", "\n", ")", ",", "\n", "pointnet_layer_dims_list", "=", "[", "\n", "[", "128", ",", "196", ",", "256", "]", "if", "batchnorm", "else", "[", "128", ",", "256", ",", "256", "]", ",", "\n", "[", "128", ",", "196", ",", "256", "]", "if", "batchnorm", "else", "[", "128", ",", "256", ",", "256", "]", ",", "\n", "]", ",", "\n", "radii_list", "=", "[", "radii_list", "[", "-", "3", "]", ",", "radii_list", "[", "-", "2", "]", "]", ",", "\n", "num_samples_list", "=", "[", "16", ",", "32", "]", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "use_xyz_feature", "=", "use_xyz_feature", ",", "\n", "use_random_ball_query", "=", "use_random_ball_query", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "set_abstractions", ".", "append", "(", "\n", "PointNet2SetAbstraction", "(", "\n", "num_points_out", "=", "16", ",", "\n", "pointnet_in_features", "=", "self", ".", "set_abstractions", "[", "-", "1", "]", ".", "get_num_features_out", "(", "\n", ")", ",", "\n", "pointnet_layer_dims_list", "=", "[", "\n", "[", "256", ",", "256", ",", "512", "]", ",", "\n", "[", "256", ",", "384", ",", "512", "]", "if", "batchnorm", "else", "[", "256", ",", "256", ",", "512", "]", ",", "\n", "]", ",", "\n", "radii_list", "=", "[", "radii_list", "[", "-", "2", "]", ",", "radii_list", "[", "-", "1", "]", "]", ",", "\n", "num_samples_list", "=", "[", "16", ",", "32", "]", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "use_xyz_feature", "=", "use_xyz_feature", ",", "\n", "use_random_ball_query", "=", "use_random_ball_query", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "feature_propagators", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "layer_dims", "=", "[", "max", "(", "[", "max_feat_prop_size", ",", "num_classes", "]", ")", "]", "*", "2", "\n", "self", ".", "feature_propagators", ".", "append", "(", "\n", "PointNet2FeaturePropagator", "(", "\n", "num_features", "=", "self", ".", "set_abstractions", "[", "-", "2", "]", ".", "get_num_features_out", "(", ")", ",", "\n", "num_features_prev", "=", "self", ".", "set_abstractions", "[", "-", "1", "]", ".", "get_num_features_out", "(", ")", ",", "\n", "layer_dims", "=", "layer_dims", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", ")", "\n", ")", "\n", "\n", "layer_dims", "=", "[", "max", "(", "[", "max_feat_prop_size", ",", "num_classes", "]", ")", "]", "*", "2", "\n", "self", ".", "feature_propagators", ".", "append", "(", "\n", "PointNet2FeaturePropagator", "(", "\n", "num_features", "=", "self", ".", "set_abstractions", "[", "-", "3", "]", ".", "get_num_features_out", "(", ")", ",", "\n", "num_features_prev", "=", "self", ".", "feature_propagators", "[", "-", "1", "]", ".", "get_num_features_out", "(", "\n", ")", ",", "\n", "layer_dims", "=", "layer_dims", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", ")", "\n", ")", "\n", "\n", "layer_dims", "=", "[", "max", "(", "[", "max_feat_prop_size", "//", "2", ",", "num_classes", "]", ")", "]", "*", "2", "\n", "self", ".", "feature_propagators", ".", "append", "(", "\n", "PointNet2FeaturePropagator", "(", "\n", "num_features", "=", "self", ".", "set_abstractions", "[", "-", "4", "]", ".", "get_num_features_out", "(", ")", ",", "\n", "num_features_prev", "=", "self", ".", "feature_propagators", "[", "-", "1", "]", ".", "get_num_features_out", "(", "\n", ")", ",", "\n", "layer_dims", "=", "layer_dims", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", ")", "\n", ")", "\n", "\n", "layer_dims", "=", "[", "max", "(", "[", "max_feat_prop_size", "//", "2", ",", "num_classes", "]", ")", "]", "*", "2", "\n", "self", ".", "feature_propagators", ".", "append", "(", "\n", "PointNet2FeaturePropagator", "(", "\n", "num_features", "=", "self", ".", "set_abstractions", "[", "-", "5", "]", ".", "get_num_features_out", "(", ")", ",", "\n", "num_features_prev", "=", "self", ".", "feature_propagators", "[", "-", "1", "]", ".", "get_num_features_out", "(", "\n", ")", ",", "\n", "layer_dims", "=", "layer_dims", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", ")", "\n", ")", "\n", "\n", "layer_dims", "=", "[", "max", "(", "[", "max_feat_prop_size", "//", "4", ",", "num_classes", "]", ")", "]", "*", "2", "\n", "self", ".", "feature_propagators", ".", "append", "(", "\n", "PointNet2FeaturePropagator", "(", "\n", "num_features", "=", "in_features", ",", "\n", "num_features_prev", "=", "self", ".", "feature_propagators", "[", "-", "1", "]", ".", "get_num_features_out", "(", "\n", ")", ",", "\n", "layer_dims", "=", "layer_dims", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", ")", "\n", ")", "\n", "\n", "final_dim", "=", "layer_dims", "[", "0", "]", "\n", "final_layer_modules", "=", "[", "\n", "module", "for", "module", "in", "[", "\n", "nn", ".", "Conv1d", "(", "\n", "self", ".", "feature_propagators", "[", "-", "1", "]", ".", "get_num_features_out", "(", ")", ",", "final_dim", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "final_dim", ")", "if", "batchnorm", "else", "nn", ".", "GroupNorm", "(", "NUM_GROUPS", ",", "final_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Dropout(0.5),", "\n", "nn", ".", "Conv1d", "(", "final_dim", ",", "num_classes", ",", "1", ")", "\n", "]", "if", "module", "is", "not", "None", "\n", "]", "\n", "self", ".", "final_layers", "=", "nn", ".", "Sequential", "(", "*", "final_layer_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2feat.forward": [[217, 249], ["kaolin.models.PointNet2.separate_xyz_and_features", "kaolin.models.PointNet2.separate_xyz_and_features", "pointnet2.PointNet2feat.final_layers().transpose().contiguous", "module", "xyz_list.append", "features_list.append", "module", "pointnet2.PointNet2feat.final_layers().transpose", "pointnet2.PointNet2feat.final_layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            points (torch.Tensor): shape = (batch_size, num_points, 3 + in_features)\n                The points to perform segmentation on.\n\n        Returns:\n            (torch.Tensor): shape = (batch_size, num_points, num_classes)\n                The score of each point being in each class.\n                Note: no softmax or logsoftmax will be applied.\n        \"\"\"", "\n", "xyz", ",", "features", "=", "separate_xyz_and_features", "(", "points", ")", "\n", "\n", "xyz_list", ",", "features_list", "=", "[", "xyz", "]", ",", "[", "features", "]", "\n", "\n", "for", "module", "in", "self", ".", "set_abstractions", ":", "\n", "            ", "xyz", ",", "features", "=", "module", "(", "xyz", ",", "features", ")", "\n", "xyz_list", ".", "append", "(", "xyz", ")", "\n", "features_list", ".", "append", "(", "features", ")", "\n", "\n", "", "target_index", "=", "-", "2", "\n", "for", "module", "in", "self", ".", "feature_propagators", ":", "\n", "            ", "features_list", "[", "target_index", "]", "=", "module", "(", "\n", "xyz_list", "[", "target_index", "]", ",", "\n", "xyz_list", "[", "target_index", "+", "1", "]", ",", "\n", "features_list", "[", "target_index", "]", ",", "\n", "features_list", "[", "target_index", "+", "1", "]", ")", "\n", "\n", "target_index", "-=", "1", "\n", "\n", "", "return", "(", "self", ".", "final_layers", "(", "features_list", "[", "0", "]", ")", "\n", ".", "transpose", "(", "1", ",", "2", ")", "\n", ".", "contiguous", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2SetAbstraction.__init__": [[297, 360], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "range", "len", "len", "len", "len", "len", "len", "isinstance", "kaolin.models.PointNet2.PointNet2GroupingLayer", "kaolin.models.PointNet2.PointNet2GroupingLayer", "pointnet2.PointNetFeatureExtractor", "pointnet2.PointNet2SetAbstraction.grouper_modules.append", "pointnet2.PointNet2SetAbstraction.pointnet_modules.append", "pointnet2.PointNet2SetAbstraction.layers.append", "isinstance", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_points_out", ",", "\n", "pointnet_in_features", ",", "\n", "pointnet_layer_dims_list", ",", "\n", "radii_list", "=", "None", ",", "\n", "num_samples_list", "=", "None", ",", "\n", "batchnorm", "=", "True", ",", "\n", "use_xyz_feature", "=", "True", ",", "\n", "use_random_ball_query", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "PointNet2SetAbstraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "num_points_out", "is", "None", ":", "\n", "            ", "radii_list", "=", "[", "None", "]", "\n", "num_samples_list", "=", "[", "None", "]", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "radii_list", ",", "list", ")", "and", "isinstance", "(", "\n", "num_samples_list", ",", "list", ")", ",", "'radii_list and num_samples_list must be lists'", "\n", "\n", "", "assert", "(", "len", "(", "radii_list", ")", "==", "len", "(", "num_samples_list", ")", "==", "len", "(", "pointnet_layer_dims_list", ")", ")", ",", "(", "\n", "'Dimension of radii_list ({}), num_samples_list ({}), pointnet_layer_dims_list ({}) must match'", "\n", ".", "format", "(", "len", "(", "radii_list", ")", ",", "len", "(", "num_samples_list", ")", ",", "len", "(", "pointnet_layer_dims_list", ")", ")", ")", "\n", "\n", "self", ".", "num_points_out", "=", "num_points_out", "\n", "self", ".", "pointnet_layer_dims_list", "=", "pointnet_layer_dims_list", "\n", "# self.sub_modules = nn.ModuleList()", "\n", "self", ".", "grouper_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "pointnet_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "pointnet_in_channels", "=", "pointnet_in_features", "+", "(", "3", "if", "use_xyz_feature", "else", "0", ")", "\n", "\n", "num_scales", "=", "len", "(", "radii_list", ")", "\n", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "radius", "=", "radii_list", "[", "i", "]", "\n", "num_samples", "=", "num_samples_list", "[", "i", "]", "\n", "pointnet_layer_dims", "=", "pointnet_layer_dims_list", "[", "i", "]", "\n", "\n", "assert", "isinstance", "(", "pointnet_layer_dims", ",", "list", ")", ",", "'Each pointnet_layer_dims must be a list, got {} instead'", ".", "format", "(", "\n", "pointnet_layer_dims", ")", "\n", "assert", "len", "(", "\n", "pointnet_layer_dims", ")", ">", "0", ",", "'Each pointnet_layer_dims must have at least one element'", "\n", "\n", "grouper", "=", "PointNet2GroupingLayer", "(", "\n", "radius", ",", "num_samples", ",", "use_xyz_feature", "=", "use_xyz_feature", ",", "\n", "use_random_ball_query", "=", "use_random_ball_query", ")", "\n", "\n", "pointnet", "=", "PointNetFeatureExtractor", "(", "\n", "in_channels", "=", "self", ".", "pointnet_in_channels", ",", "\n", "feat_size", "=", "pointnet_layer_dims", "[", "-", "1", "]", ",", "\n", "layer_dims", "=", "pointnet_layer_dims", "[", ":", "-", "1", "]", ",", "\n", "global_feat", "=", "True", ",", "\n", "batchnorm", "=", "batchnorm", ",", "\n", "transposed_input", "=", "True", "\n", ")", "\n", "\n", "# Register sub-modules", "\n", "# self.sub_modules.append(grouper)", "\n", "# self.sub_modules.append(pointnet)", "\n", "self", ".", "grouper_modules", ".", "append", "(", "grouper", ")", "\n", "self", ".", "pointnet_modules", ".", "append", "(", "pointnet", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2SetAbstraction.forward": [[361, 420], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "kaolin.models.PointNet2.furthest_point_sampling", "kaolin.models.PointNet2.furthest_point_sampling", "kaolin.models.PointNet2.fps_gather_by_index", "kaolin.models.PointNet2.fps_gather_by_index", "new_xyz.transpose().contiguous.transpose().contiguous.transpose().contiguous", "new_features_list.append", "xyz.transpose().contiguous", "new_features.view().transpose.view().transpose.view", "new_features.view().transpose.view().transpose.view().transpose", "new_xyz.transpose().contiguous.transpose().contiguous.transpose", "xyz.transpose", "new_features.view().transpose.view().transpose.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "features", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            xyz (torch.Tensor): shape = (batch_size, num_points_in, 3)\n                The 3D coordinates of each point.\n\n            features (torch.Tensor|None): shape = (batch_size, num_features, num_points_in)\n                The features of each point.\n\n        Returns:\n            new_xyz (torch.Tensor|None): shape = (batch_size, num_points_out, 3)\n                The new coordinates of the grouped points.\n                If self.num_points_out is None, new_xyz will be None.\n\n            new_features (torch.Tensor): shape = (batch_size, out_num_features, num_points_out)\n                The features of each output point.\n                If self.num_points_out is None, new_features will have shape:\n                (batch_size, num_features_out)\n        \"\"\"", "\n", "batch_size", "=", "xyz", ".", "shape", "[", "0", "]", "\n", "\n", "new_xyz", "=", "None", "\n", "if", "self", ".", "num_points_out", "is", "not", "None", ":", "\n", "            ", "new_xyz_idx", "=", "furthest_point_sampling", "(", "xyz", ",", "self", ".", "num_points_out", ")", "\n", "new_xyz", "=", "fps_gather_by_index", "(", "\n", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ",", "new_xyz_idx", ")", "\n", "new_xyz", "=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "new_features_list", "=", "[", "]", "\n", "for", "i", ",", "num_samples", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "grouper_modules", "[", "i", "]", "(", "xyz", ",", "new_xyz", ",", "features", ")", "\n", "# shape = (batch_size, num_points_out, self.pointnet_in_channels, num_samples)", "\n", "# if num_points_out is None:", "\n", "# shape = (batch_size, self.pointnet_in_channels, num_samples)", "\n", "\n", "if", "self", ".", "num_points_out", "is", "not", "None", ":", "\n", "                ", "new_features", "=", "new_features", ".", "view", "(", "-", "1", ",", "\n", "self", ".", "pointnet_in_channels", ",", "num_samples", ")", "\n", "\n", "# new_features = pointnet(new_features)", "\n", "", "new_features", "=", "self", ".", "pointnet_modules", "[", "i", "]", "(", "new_features", ")", "\n", "\n", "# shape = (batch_size * num_points_out, feat_size)", "\n", "# if num_points_out is None:", "\n", "# shape = (batch_size, feat_size)", "\n", "\n", "if", "self", ".", "num_points_out", "is", "not", "None", ":", "\n", "                ", "new_features", "=", "new_features", ".", "view", "(", "\n", "batch_size", ",", "self", ".", "num_points_out", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# shape = (batch_size, feat_size, num_points_out)", "\n", "\n", "", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "new_features", "=", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "# shape = (batch_size, num_features_out, num_points_out)", "\n", "# if num_points_out is None:", "\n", "# shape = (batch_size, num_features_out)", "\n", "\n", "return", "new_xyz", ",", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2SetAbstraction.get_num_features_out": [[421, 423], ["sum"], "methods", ["None"], ["", "def", "get_num_features_out", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "lst", "[", "-", "1", "]", "for", "lst", "in", "self", ".", "pointnet_layer_dims_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.__init__": [[462, 482], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unit_pointnets.append", "unit_pointnets.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "unit_pointnets.append", "unit_pointnets.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "num_features_prev", ",", "layer_dims", ",", "batchnorm", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNet2FeaturePropagator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_dims", "=", "layer_dims", "\n", "\n", "unit_pointnets", "=", "[", "]", "\n", "in_features", "=", "num_features", "+", "num_features_prev", "\n", "for", "out_features", "in", "layer_dims", ":", "\n", "            ", "unit_pointnets", ".", "append", "(", "\n", "nn", ".", "Conv1d", "(", "in_features", ",", "out_features", ",", "1", ")", ")", "\n", "\n", "if", "batchnorm", ":", "\n", "                ", "unit_pointnets", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "                ", "unit_pointnets", ".", "append", "(", "nn", ".", "GroupNorm", "(", "NUM_GROUPS", ",", "out_features", ")", ")", "\n", "\n", "", "unit_pointnets", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "in_features", "=", "out_features", "\n", "\n", "", "self", ".", "unit_pointnet", "=", "nn", ".", "Sequential", "(", "*", "unit_pointnets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.forward": [[483, 526], ["pointnet2.PointNet2FeaturePropagator.unit_pointnet", "features_prev.expand", "kaolin.models.PointNet2.three_nn", "kaolin.models.PointNet2.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kaolin.models.PointNet2.three_interpolate", "kaolin.models.PointNet2.three_interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "xyz_prev", ",", "features", "=", "None", ",", "features_prev", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            xyz (torch.Tensor): shape = (batch_size, num_points, 3)\n                The 3D coordinates of each point at current layer,\n                computed during feature extraction (i.e. set abstraction).\n\n            xyz_prev (torch.Tensor|None): shape = (batch_size, num_points_prev, 3)\n                The 3D coordinates of each point from the previous feature\n                propagation layer (corresponding to the next layer during\n                feature extraction).\n                This value can be None (i.e. for the very first propagator layer).\n\n            features (torch.Tensor|None): shape = (batch_size, num_features, num_points)\n                The features of each point at current layer,\n                computed during feature extraction (i.e. set abstraction).\n\n            features_prev (torch.Tensor|None): shape = (batch_size, num_features_prev, num_points_prev)\n                The features of each point from the previous feature\n                propagation layer (corresponding to the next layer during\n                feature extraction).\n\n        Returns:\n            (torch.Tensor): shape = (batch_size, num_features_out, num_points)\n        \"\"\"", "\n", "num_points", "=", "xyz", ".", "shape", "[", "1", "]", "\n", "if", "xyz_prev", "is", "None", ":", "# Very first feature propagation layer", "\n", "            ", "new_features", "=", "features_prev", ".", "expand", "(", "\n", "*", "(", "features", ".", "shape", "+", "[", "num_points", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "dist", ",", "idx", "=", "three_nn", "(", "xyz", ",", "xyz_prev", ")", "\n", "# shape = (batch_size, num_points, 3), (batch_size, num_points, 3)", "\n", "inverse_dist", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "total_inverse_dist", "=", "torch", ".", "sum", "(", "inverse_dist", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weights", "=", "inverse_dist", "/", "total_inverse_dist", "\n", "new_features", "=", "three_interpolate", "(", "features_prev", ",", "idx", ",", "weights", ")", "\n", "# shape = (batch_size, num_features_prev, num_points)", "\n", "\n", "", "if", "features", "is", "not", "None", ":", "\n", "            ", "new_features", "=", "torch", ".", "cat", "(", "[", "new_features", ",", "features", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "self", ".", "unit_pointnet", "(", "new_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNet2FeaturePropagator.get_num_features_out": [[527, 529], ["None"], "methods", ["None"], ["", "def", "get_num_features_out", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dims", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNetFeatureExtractor.__init__": [[587, 648], ["torch.Module.__init__", "enumerate", "list.insert", "list.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "isinstance", "TypeError", "isinstance", "TypeError", "hasattr", "TypeError", "isinstance", "TypeError", "isinstance", "list", "pointnet2.PointNetFeatureExtractor.conv_layers.append", "isinstance", "TypeError", "len", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "pointnet2.PointNetFeatureExtractor.bn_layers.append", "pointnet2.PointNetFeatureExtractor.bn_layers.append", "type", "type", "type", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "type"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ":", "int", "=", "3", ",", "\n", "feat_size", ":", "int", "=", "1024", ",", "\n", "layer_dims", ":", "Iterable", "[", "int", "]", "=", "[", "64", ",", "128", "]", ",", "\n", "global_feat", ":", "bool", "=", "True", ",", "\n", "activation", "=", "F", ".", "relu", ",", "\n", "batchnorm", ":", "bool", "=", "True", ",", "\n", "transposed_input", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "PointNetFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "in_channels", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Argument in_channels expected to be of type int. '", "\n", "'Got {0} instead.'", ".", "format", "(", "type", "(", "in_channels", ")", ")", ")", "\n", "", "if", "not", "isinstance", "(", "feat_size", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Argument feat_size expected to be of type int. '", "\n", "'Got {0} instead.'", ".", "format", "(", "type", "(", "feat_size", ")", ")", ")", "\n", "", "if", "not", "hasattr", "(", "layer_dims", ",", "'__iter__'", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Argument layer_dims is not iterable.'", ")", "\n", "", "for", "idx", ",", "layer_dim", "in", "enumerate", "(", "layer_dims", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "layer_dim", ",", "int", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'Elements of layer_dims must be of type int. '", "\n", "'Found type {0} at index {1}.'", ".", "format", "(", "\n", "type", "(", "layer_dim", ")", ",", "idx", ")", ")", "\n", "", "", "if", "not", "isinstance", "(", "global_feat", ",", "bool", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Argument global_feat expected to be of type '", "\n", "'bool. Got {0} instead.'", ".", "format", "(", "\n", "type", "(", "global_feat", ")", ")", ")", "\n", "\n", "# Store feat_size as a class attribute", "\n", "", "self", ".", "feat_size", "=", "feat_size", "\n", "\n", "# Store activation as a class attribute", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "# Store global_feat as a class attribute", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "\n", "# Add in_channels to the head of layer_dims (the first layer", "\n", "# has number of channels equal to `in_channels`). Also, add", "\n", "# feat_size to the tail of layer_dims.", "\n", "if", "not", "isinstance", "(", "layer_dims", ",", "list", ")", ":", "\n", "            ", "layer_dims", "=", "list", "(", "layer_dims", ")", "\n", "", "layer_dims", ".", "insert", "(", "0", ",", "in_channels", ")", "\n", "layer_dims", ".", "append", "(", "feat_size", ")", "\n", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# if batchnorm:", "\n", "self", ".", "bn_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "layer_dims", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "conv_layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "layer_dims", "[", "idx", "]", ",", "\n", "layer_dims", "[", "idx", "+", "1", "]", ",", "1", ")", ")", "\n", "if", "batchnorm", ":", "\n", "                ", "self", ".", "bn_layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "layer_dims", "[", "idx", "+", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bn_layers", ".", "append", "(", "nn", ".", "GroupNorm", "(", "NUM_GROUPS", ",", "layer_dims", "[", "idx", "+", "1", "]", ")", ")", "\n", "\n", "# Store whether or not to use batchnorm as a class attribute", "\n", "", "", "self", ".", "batchnorm", "=", "batchnorm", "\n", "\n", "self", ".", "transposed_input", "=", "transposed_input", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.pointnet2.PointNetFeatureExtractor.forward": [[649, 709], ["pointnet2.PointNetFeatureExtractor.activation", "range", "pointnet2.PointNetFeatureExtractor.view", "pointnet2.PointNetFeatureExtractor.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pointnet2.PointNetFeatureExtractor.transpose", "pointnet2.PointNetFeatureExtractor.activation", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len", "pointnet2.PointNetFeatureExtractor.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"Forward pass through the PointNet feature extractor.\n\n        Args:\n            x (torch.Tensor): Tensor representing a pointcloud\n                (shape: :math:`B \\times N \\times D`, where :math:`B`\n                is the batchsize, :math:`N` is the number of points\n                in the pointcloud, and :math:`D` is the dimensionality\n                of each point in the pointcloud).\n                If self.transposed_input is True, then the shape is\n                :math:`B \\times D \\times N`.\n\n        \"\"\"", "\n", "if", "not", "self", ".", "transposed_input", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# Number of points", "\n", "", "num_points", "=", "x", ".", "shape", "[", "2", "]", "\n", "\n", "# By default, initialize local features (per-point features)", "\n", "# to None.", "\n", "local_features", "=", "None", "\n", "\n", "# Apply a sequence of conv-batchnorm-nonlinearity operations", "\n", "\n", "# For the first layer, store the features, as these will be", "\n", "# used to compute local features (if specified).", "\n", "# if self.batchnorm:", "\n", "x", "=", "self", ".", "activation", "(", "self", ".", "bn_layers", "[", "0", "]", "(", "self", ".", "conv_layers", "[", "0", "]", "(", "x", ")", ")", ")", "\n", "# else:", "\n", "#     x = self.activation(self.conv_layers[0](x))", "\n", "if", "self", ".", "global_feat", "is", "False", ":", "\n", "            ", "local_features", "=", "x", "\n", "\n", "# Pass through the remaining layers (until the penultimate layer).", "\n", "", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "self", ".", "conv_layers", ")", "-", "1", ")", ":", "\n", "# if self.batchnorm:", "\n", "            ", "x", "=", "self", ".", "activation", "(", "self", ".", "bn_layers", "[", "idx", "]", "(", "\n", "self", ".", "conv_layers", "[", "idx", "]", "(", "x", ")", ")", ")", "\n", "# else:", "\n", "# x = self.activation(self.conv_layers[idx](x))", "\n", "\n", "# For the last layer, do not apply nonlinearity.", "\n", "# if self.batchnorm:", "\n", "", "x", "=", "self", ".", "bn_layers", "[", "-", "1", "]", "(", "self", ".", "conv_layers", "[", "-", "1", "]", "(", "x", ")", ")", "\n", "# else:", "\n", "# x = self.conv_layers[-1](x)", "\n", "\n", "# Max pooling.", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "feat_size", ")", "\n", "\n", "# If extracting global features, return at this point.", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", "\n", "\n", "# If extracting local features, compute local features by", "\n", "# concatenating global features, and per-point features", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "feat_size", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "num_points", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "local_features", ")", ",", "dim", "=", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.models.utils.standard_normal_logprob": [[10, 13], ["math.log", "z.pow"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.utils.train_utils.log"], ["def", "standard_normal_logprob", "(", "z", ")", ":", "\n", "    ", "log_z", "=", "-", "0.5", "*", "log", "(", "2", "*", "pi", ")", "\n", "return", "log_z", "-", "z", ".", "pow", "(", "2", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.utils.truncated_normal": [[15, 23], ["tensor.new_empty().normal_", "tensor.data.copy_", "tensor.data.mul_().add_", "valid.max", "tensor.new_empty().normal_.gather().squeeze", "tensor.new_empty", "tensor.data.mul_", "tensor.new_empty().normal_.gather"], "function", ["None"], ["", "def", "truncated_normal", "(", "tensor", ",", "mean", "=", "0", ",", "std", "=", "1", ",", "trunc_std", "=", "2", ")", ":", "\n", "    ", "size", "=", "tensor", ".", "shape", "\n", "tmp", "=", "tensor", ".", "new_empty", "(", "size", "+", "(", "4", ",", ")", ")", ".", "normal_", "(", ")", "\n", "valid", "=", "(", "tmp", "<", "trunc_std", ")", "&", "(", "tmp", ">", "-", "trunc_std", ")", "\n", "ind", "=", "valid", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "tensor", ".", "data", ".", "copy_", "(", "tmp", ".", "gather", "(", "-", "1", ",", "ind", ")", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "tensor", ".", "data", ".", "mul_", "(", "std", ")", ".", "add_", "(", "mean", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.models.utils.sample_gaussian": [[24, 30], ["torch.randn().float", "torch.randn().float.to", "utils.truncated_normal", "torch.randn"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.models.utils.truncated_normal"], ["", "def", "sample_gaussian", "(", "size", ",", "truncate_std", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "y", "=", "torch", ".", "randn", "(", "*", "size", ")", ".", "float", "(", ")", "\n", "y", "=", "y", "if", "device", "is", "None", "else", "y", ".", "to", "(", "device", ")", "\n", "if", "truncate_std", "is", "not", "None", ":", "\n", "        ", "truncated_normal", "(", "y", ",", "mean", "=", "0", ",", "std", "=", "1", ",", "trunc_std", "=", "truncate_std", ")", "\n", "", "return", "y", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.SplitLineParser.convert_arg_line_to_args": [[23, 25], ["arg_line.split"], "methods", ["None"], ["    ", "def", "convert_arg_line_to_args", "(", "self", ",", "arg_line", ")", ":", "\n", "        ", "return", "arg_line", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__init__": [[216, 273], ["caspr_dataset.parse_dataset_cfg", "print", "print", "caspr_dataset.load_time_data", "len", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.parse_dataset_cfg", "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.load_time_data"], ["def", "__init__", "(", "self", ",", "data_cfg", ",", "\n", "split", "=", "'train'", ",", "\n", "train_frac", "=", "0.8", ",", "\n", "val_frac", "=", "0.1", ",", "\n", "num_pts", "=", "1024", ",", "\n", "seq_len", "=", "5", ",", "\n", "shift_time_to_zero", "=", "False", ",", "\n", "random_point_sample", "=", "True", ",", "\n", "random_point_sample_per_step", "=", "False", ")", ":", "\n", "        ", "'''\n        - data_cfg                      : path to dataset configuration file\n        - split                         : \"train\", \"test\", or \"val\"\n        - train_frac                    : percentage of dataset to use for training (if a splits file is not given)\n        - val_frac                      : percentage of dataset to use for validation (if a splits file is not given)\n        - num_pts                       : number of points to sample for input/output of TNOCS at each time step\n        - seq_len                       : length of sequences to sample. Cannot be more than the sequence length of the data.\n        - shift_time_to_zero            : if True, will shift all the timestamps to zero in the returned sequences. For example\n                                              if the initial samplest steps are [0.2, 0.6, 0.7] the returned stamps would be\n                                             shifted to [0.0, 0.4, 0.5] so that it starts at 0.\n        - random_point_sample           : if True, randomly chooses the set of points returned at each timestep. if Fals, the first num_pts are returned.\n        - random_point_sample_per_step  : if True, chooses a different sampling at each time step (only matters for data where points correspond over time, e.g warping cars)\n        '''", "\n", "data_args", "=", "parse_dataset_cfg", "(", "data_cfg", ")", "\n", "print", "(", "data_args", ")", "\n", "self", ".", "data_paths", "=", "data_args", ".", "data", "\n", "self", ".", "split_paths", "=", "data_args", ".", "splits", "\n", "self", ".", "data_seq_len", "=", "data_args", ".", "expected_seq_len", "\n", "self", ".", "expected_num_pts", "=", "data_args", ".", "expected_num_pts", "\n", "self", ".", "max_timestamp", "=", "data_args", ".", "max_timestamp", "\n", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "train_frac", "=", "train_frac", "\n", "self", ".", "val_frac", "=", "val_frac", "\n", "self", ".", "num_pts", "=", "num_pts", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "shift_time_to_zero", "=", "shift_time_to_zero", "\n", "self", ".", "random_point_sample", "=", "random_point_sample", "\n", "self", ".", "random_point_sample_per_step", "=", "random_point_sample_per_step", "\n", "\n", "# optional data to return", "\n", "self", ".", "return_pose_data", "=", "False", "\n", "self", ".", "return_first_steps", "=", "False", "# If true, returns the first seq_len steps in the sequence instead of random sampling", "\n", "\n", "if", "self", ".", "split", "not", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", ":", "\n", "            ", "print", "(", "'Split %s is not a valid option. Choose train, test, or val.'", "%", "(", "split", ")", ")", "\n", "exit", "(", ")", "\n", "\n", "", "print", "(", "'Expected sequence length is set to %d!!'", "%", "(", "self", ".", "data_seq_len", ")", ")", "\n", "\n", "# gets the file path to all sequences to load for this split", "\n", "self", ".", "seq_data_paths", "=", "load_time_data", "(", "self", ".", "data_paths", ",", "\n", "self", ".", "split", ",", "\n", "self", ".", "train_frac", ",", "\n", "self", ".", "val_frac", ",", "\n", "self", ".", "split_paths", ",", "\n", "data_seq_len", "=", "self", ".", "data_seq_len", ")", "\n", "self", ".", "data_len", "=", "len", "(", "self", ".", "seq_data_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__len__": [[274, 276], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_len", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.__getitem__": [[277, 344], ["caspr_dataset.load_seq_path", "sorted", "torch.from_numpy", "torch.from_numpy", "output_list.extend", "tuple", "[].split", "[].split", "numpy.arange", "numpy.random.choice", "numpy.arange", "full_depth_seq[].copy", "full_nocs_seq[].copy", "numpy.repeat", "numpy.stack.reshape", "full_depth_seq[].copy", "input_data[].reshape", "full_nocs_seq[].copy", "output_data[].reshape", "numpy.min", "numpy.min", "input_data[].reshape.astype", "output_data[].reshape.astype", "output_list.append", "numpy.random.choice", "numpy.arange", "numpy.stack", "numpy.random.choice", "range"], "methods", ["home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.load_seq_path"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "'''\n        Returns list of tuples of (input, output) for TNOCS regression and reconstruction training.\n\n        The input is the world point cloud sequence B x T x N x 4\n        and the output is the corresponding TNOCS point cloud sequence B x T x N x 4.\n        '''", "\n", "# load in the data", "\n", "model_id", "=", "self", ".", "seq_data_paths", "[", "idx", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "seq_id", "=", "self", ".", "seq_data_paths", "[", "idx", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "all_data", "=", "load_seq_path", "(", "self", ".", "seq_data_paths", "[", "idx", "]", ",", "\n", "max_timestamp", "=", "self", ".", "max_timestamp", ",", "\n", "expected_num_pts", "=", "self", ".", "expected_num_pts", ")", "\n", "full_nocs_seq", ",", "full_depth_seq", ",", "full_pose_seq", "=", "all_data", "\n", "\n", "# randomly subsample time steps to get the desired sequence length", "\n", "if", "self", ".", "return_first_steps", ":", "\n", "            ", "sampled_steps", "=", "np", ".", "arange", "(", "self", ".", "seq_len", ")", "\n", "", "else", ":", "\n", "            ", "sampled_steps", "=", "np", ".", "random", ".", "choice", "(", "full_nocs_seq", ".", "shape", "[", "0", "]", ",", "self", ".", "seq_len", ",", "replace", "=", "False", ")", "\n", "\n", "", "sampled_steps", "=", "sorted", "(", "sampled_steps", ")", "\n", "\n", "if", "self", ".", "random_point_sample", "or", "self", ".", "random_point_sample_per_step", ":", "\n", "# randomly subsample the same points", "\n", "            ", "if", "self", ".", "random_point_sample", ":", "\n", "                ", "sampled_pts", "=", "np", ".", "random", ".", "choice", "(", "full_nocs_seq", ".", "shape", "[", "1", "]", ",", "self", ".", "num_pts", ",", "replace", "=", "False", ")", "\n", "", "elif", "self", ".", "random_point_sample_per_step", ":", "\n", "                ", "sampled_pts", "=", "[", "np", ".", "random", ".", "choice", "(", "full_nocs_seq", ".", "shape", "[", "1", "]", ",", "self", ".", "num_pts", ",", "replace", "=", "False", ")", "for", "i", "in", "range", "(", "full_nocs_seq", ".", "shape", "[", "0", "]", ")", "]", "\n", "sampled_pts", "=", "np", ".", "stack", "(", "sampled_pts", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "sampled_pts", "=", "np", ".", "arange", "(", "self", ".", "num_pts", ")", "\n", "\n", "# for TNOCS", "\n", "", "if", "not", "self", ".", "random_point_sample_per_step", ":", "\n", "            ", "input_data", "=", "full_depth_seq", "[", "sampled_steps", ",", ":", ",", ":", "]", ".", "copy", "(", ")", "\n", "input_data", "=", "input_data", "[", ":", ",", "sampled_pts", ",", ":", "]", "\n", "output_data", "=", "full_nocs_seq", "[", "sampled_steps", ",", ":", ",", ":", "]", ".", "copy", "(", ")", "\n", "output_data", "=", "output_data", "[", ":", ",", "sampled_pts", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "time_inds", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "sampled_pts", ".", "shape", "[", "0", "]", ")", ",", "sampled_pts", ".", "shape", "[", "1", "]", ")", "\n", "pt_inds", "=", "sampled_pts", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "\n", "input_data", "=", "full_depth_seq", "[", "sampled_steps", ",", ":", ",", ":", "]", ".", "copy", "(", ")", "\n", "input_data", "=", "input_data", "[", "time_inds", ",", "pt_inds", ",", ":", "]", ".", "reshape", "(", "(", "sampled_pts", ".", "shape", "[", "0", "]", ",", "sampled_pts", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "output_data", "=", "full_nocs_seq", "[", "sampled_steps", ",", ":", ",", ":", "]", ".", "copy", "(", ")", "\n", "output_data", "=", "output_data", "[", "time_inds", ",", "pt_inds", ",", ":", "]", ".", "reshape", "(", "(", "sampled_pts", ".", "shape", "[", "0", "]", ",", "sampled_pts", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "shift_time_to_zero", ":", "\n", "# subtract out the min time from the timestamps so it starts at 0", "\n", "            ", "input_data", "[", ":", ",", ":", ",", "-", "1", "]", "-=", "np", ".", "min", "(", "input_data", "[", ":", ",", ":", ",", "-", "1", "]", ")", "\n", "output_data", "[", ":", ",", ":", ",", "-", "1", "]", "-=", "np", ".", "min", "(", "output_data", "[", ":", ",", ":", ",", "-", "1", "]", ")", "\n", "\n", "# to torch", "\n", "", "input_data", "=", "torch", ".", "from_numpy", "(", "input_data", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "output_data", "=", "torch", ".", "from_numpy", "(", "output_data", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "cur_item", "=", "(", "input_data", ",", "output_data", ")", "\n", "\n", "output_list", "=", "[", "cur_item", "]", "\n", "\n", "if", "self", ".", "return_pose_data", ":", "\n", "            ", "pose_data", "=", "full_pose_seq", "[", "sampled_steps", ",", ":", "]", "\n", "output_list", ".", "append", "(", "pose_data", ")", "\n", "\n", "", "output_list", ".", "extend", "(", "[", "model_id", ",", "seq_id", "]", ")", "\n", "\n", "return", "tuple", "(", "output_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.set_return_pose_data": [[345, 347], ["None"], "methods", ["None"], ["", "def", "set_return_pose_data", "(", "self", ",", "return_pose", ")", ":", "\n", "        ", "self", ".", "return_pose_data", "=", "return_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.DynamicPCLDataset.set_return_first_steps": [[348, 350], ["None"], "methods", ["None"], ["", "def", "set_return_first_steps", "(", "self", ",", "return_first_steps", ")", ":", "\n", "        ", "self", ".", "return_first_steps", "=", "return_first_steps", "", "", "", ""]], "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.parse_dataset_cfg": [[26, 35], ["caspr_dataset.SplitLineParser", "SplitLineParser.add_argument", "SplitLineParser.add_argument", "SplitLineParser.add_argument", "SplitLineParser.add_argument", "SplitLineParser.add_argument", "SplitLineParser.parse_args"], "function", ["home.repos.pwc.inspect_result.davrempe_caspr.caspr.test.parse_args"], ["", "", "def", "parse_dataset_cfg", "(", "cfg_file_path", ")", ":", "\n", "    ", "parser", "=", "SplitLineParser", "(", "fromfile_prefix_chars", "=", "'@'", ",", "allow_abbrev", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "required", "=", "True", ",", "help", "=", "'Paths to dataset roots e.g. ../data/cars'", ")", "\n", "parser", ".", "add_argument", "(", "'--splits'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "default", "=", "None", ",", "help", "=", "'Directory to optionally load data splits from e.g. ../data/splits/car_splits. Otherwise will split based on fractions given.'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-timestamp'", ",", "type", "=", "float", ",", "default", "=", "DEFAULT_MAX_TIMESTAMP", ",", "help", "=", "'Max timestamp to label the data with'", ")", "\n", "parser", ".", "add_argument", "(", "'--expected-num-pts'", ",", "type", "=", "int", ",", "default", "=", "DEFAULT_EXPECTED_NUM_PTS", ",", "help", "=", "'The expected number of points in each frame of the dataset to load in.'", ")", "\n", "parser", ".", "add_argument", "(", "'--expected-seq-len'", ",", "type", "=", "int", ",", "default", "=", "DEFAULT_EXPECTED_SEQ_LEN", ",", "help", "=", "'The expected number of frames in each sequence.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "'@'", "+", "cfg_file_path", "]", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.load_time_data": [[36, 146], ["print", "enumerate", "print", "print", "print", "numpy.array", "print", "print", "len", "print", "print", "len", "os.path.exists", "print", "exit", "os.path.join", "print", "f.read.split", "print", "nocs_seq_paths.append", "np.array.append", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "all_nocs_seq_paths.extend", "len", "os.path.exists", "print", "exit", "open", "f.read", "os.path.join", "os.path.join", "len", "model_path.split", "print", "print", "os.path.join", "sorted", "len", "cur_model_paths.append", "len", "len", "print", "exit", "int", "len", "np.arange.tolist", "sorted", "os.path.isdir", "os.path.exists", "sorted", "os.path.isdir", "glob.glob", "print", "int", "os.listdir", "os.listdir", "os.path.join"], "function", ["None"], ["", "def", "load_time_data", "(", "data_roots", ",", "split", ",", "train_frac", ",", "val_frac", ",", "splits_dirs", "=", "None", ",", "data_seq_len", "=", "DEFAULT_EXPECTED_SEQ_LEN", ")", ":", "\n", "    ", "'''\n    Collects all the necessary data paths contained in the\n    given data_roots which will be used to load in the\n    data lazily when requested.\n    '''", "\n", "print", "(", "'Loading time data from %d sources...'", "%", "(", "len", "(", "data_roots", ")", ")", ")", "\n", "all_nocs_seq_paths", "=", "[", "]", "\n", "for", "data_src_idx", ",", "data_root", "in", "enumerate", "(", "data_roots", ")", ":", "\n", "        ", "print", "(", "data_root", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_root", ")", ":", "\n", "            ", "print", "(", "'Could not find %s!'", "%", "(", "data_root", ")", ")", "\n", "exit", "(", ")", "\n", "\n", "", "cur_split_dir", "=", "None", "\n", "split_list", "=", "None", "\n", "if", "splits_dirs", "is", "not", "None", ":", "\n", "            ", "cur_split_dir", "=", "splits_dirs", "[", "data_src_idx", "]", "\n", "cur_split_file", "=", "os", ".", "path", ".", "join", "(", "cur_split_dir", ",", "split", "+", "'_split.txt'", ")", "\n", "print", "(", "cur_split_file", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cur_split_file", ")", ":", "\n", "                ", "print", "(", "'There is no split file for the requested split!'", ")", "\n", "exit", "(", ")", "\n", "", "with", "open", "(", "cur_split_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "split_str", "=", "f", ".", "read", "(", ")", "\n", "", "split_list", "=", "split_str", ".", "split", "(", "'\\n'", ")", "\n", "\n", "# go through each model in this dataset", "\n", "", "if", "split_list", "is", "None", ":", "\n", "            ", "model_dirs", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "data_root", ")", ")", "if", "f", "[", "0", "]", "!=", "'.'", "]", "\n", "model_dirs", "=", "[", "f", "for", "f", "in", "model_dirs", "if", "os", ".", "path", ".", "isdir", "(", "f", ")", "]", "\n", "", "else", ":", "\n", "            ", "model_dirs", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "split_model", ")", "for", "split_model", "in", "split_list", "if", "split_model", "!=", "''", "]", "\n", "\n", "", "print", "(", "'Found %d models from this data source.'", "%", "(", "len", "(", "model_dirs", ")", ")", ")", "\n", "if", "split_list", "is", "not", "None", ":", "\n", "            ", "print", "(", "'NOTE: this is just for the single requested split.'", ")", "\n", "\n", "", "all_model_ids", "=", "[", "]", "\n", "nocs_seq_paths", "=", "[", "]", "# all model lists", "\n", "for", "model_path", "in", "model_dirs", ":", "\n", "            ", "model_id", "=", "model_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "cur_split_dir", "is", "not", "None", "and", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "                ", "print", "(", "'WARNING: Could not find model %s requested in the split file! Skipping...'", "%", "(", "model_id", ")", ")", "\n", "continue", "\n", "", "if", "model_id", "in", "BAD_MODELS", ":", "\n", "                ", "print", "(", "'Skipping model %s, bad model...'", "%", "(", "model_id", ")", ")", "\n", "continue", "\n", "", "cur_model_paths", "=", "[", "]", "# all the sequences for this model", "\n", "# go through each sequence", "\n", "seq_dirs", "=", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "model_path", ")", ")", "if", "f", "[", "0", "]", "!=", "'.'", "]", "\n", "seq_dirs", "=", "[", "f", "for", "f", "in", "seq_dirs", "if", "os", ".", "path", ".", "isdir", "(", "f", ")", "]", "\n", "\n", "# collect paths for full dataset", "\n", "for", "seq_path", "in", "seq_dirs", ":", "\n", "                ", "nocs_pc_files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'*frame*.npz'", ")", ")", ")", "\n", "\n", "num_frames", "=", "len", "(", "nocs_pc_files", ")", "\n", "if", "num_frames", "!=", "data_seq_len", ":", "\n", "                    ", "print", "(", "'Found %d frames at %s...skipping!'", "%", "(", "num_frames", ",", "seq_path", ")", ")", "\n", "continue", "\n", "\n", "", "cur_model_paths", ".", "append", "(", "nocs_pc_files", ")", "\n", "", "nocs_seq_paths", ".", "append", "(", "cur_model_paths", ")", "\n", "all_model_ids", ".", "append", "(", "model_id", ")", "\n", "", "all_model_ids", "=", "np", ".", "array", "(", "all_model_ids", ")", "\n", "\n", "print", "(", "'Sequences are of length %d...'", "%", "(", "len", "(", "nocs_seq_paths", "[", "0", "]", "[", "0", "]", ")", ")", ")", "\n", "print", "(", "'Loading %s split...'", "%", "(", "split", ")", ")", "\n", "\n", "# only load in necessary split", "\n", "\n", "num_models", "=", "len", "(", "nocs_seq_paths", ")", "\n", "print", "(", "'This data source has %d sequences per model...'", "%", "(", "len", "(", "nocs_seq_paths", "[", "0", "]", ")", ")", ")", "\n", "\n", "if", "splits_dirs", "is", "None", ":", "\n", "# split by model", "\n", "            ", "if", "train_frac", "+", "val_frac", ">", "1.0", ":", "\n", "                ", "print", "(", "'Training and validation fraction must be less than 1.0!'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "train_inds", "=", "np", ".", "arange", "(", "int", "(", "train_frac", "*", "num_models", ")", ")", "\n", "# print(train_inds)", "\n", "val_inds", "=", "np", ".", "arange", "(", "train_inds", "[", "-", "1", "]", "+", "1", ",", "train_inds", "[", "-", "1", "]", "+", "1", "+", "int", "(", "val_frac", "*", "num_models", ")", ")", "\n", "# print(val_inds)", "\n", "test_inds", "=", "np", ".", "arange", "(", "val_inds", "[", "-", "1", "]", "+", "1", ",", "num_models", ")", "\n", "# print(test_inds)", "\n", "\n", "split_inds", "=", "train_inds", "\n", "if", "split", "==", "'val'", ":", "\n", "                ", "split_inds", "=", "val_inds", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "                ", "split_inds", "=", "test_inds", "\n", "\n", "", "", "else", ":", "\n", "            ", "split_inds", "=", "np", ".", "arange", "(", "len", "(", "nocs_seq_paths", ")", ")", "\n", "\n", "", "print", "(", "'Split size (num models): %d'", "%", "(", "split_inds", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# only take the models from this split", "\n", "nocs_seq_paths", "=", "[", "nocs_seq_paths", "[", "i", "]", "for", "i", "in", "split_inds", ".", "tolist", "(", ")", "]", "\n", "# combine all together", "\n", "for", "model_seq", "in", "nocs_seq_paths", ":", "\n", "            ", "all_nocs_seq_paths", ".", "extend", "(", "model_seq", ")", "\n", "\n", "", "", "print", "(", "'Split size (num seqs): %d'", "%", "(", "len", "(", "all_nocs_seq_paths", ")", ")", ")", "\n", "\n", "\n", "return", "all_nocs_seq_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.davrempe_caspr.data.caspr_dataset.load_seq_path": [[148, 209], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.load", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.count_nonzero", "numpy.concatenate", "numpy.concatenate", "numpy.ones", "numpy.ones", "nocs_pc[].reshape", "depth_pc[].reshape"], "function", ["None"], ["", "def", "load_seq_path", "(", "seq_path_list", ",", "max_timestamp", "=", "DEFAULT_MAX_TIMESTAMP", ",", "expected_num_pts", "=", "4096", ")", ":", "\n", "    ", "'''\n    Given a list of data files making up a sequence, loads in all data for the sequence.\n    '''", "\n", "pc_seq_files", "=", "seq_path_list", "\n", "\n", "seq_len", "=", "len", "(", "pc_seq_files", ")", "\n", "if", "seq_len", "==", "1", ":", "\n", "        ", "step_size", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "step_size", "=", "1.0", "/", "(", "seq_len", "-", "1", ")", "\n", "\n", "# print(seq_path_list)", "\n", "\n", "# load data for this sequence", "\n", "", "nocs_seq", "=", "np", ".", "zeros", "(", "(", "seq_len", ",", "expected_num_pts", ",", "4", ")", ")", "# x,y,z,t", "\n", "depth_seq", "=", "np", ".", "zeros", "(", "(", "seq_len", ",", "expected_num_pts", ",", "4", ")", ")", "# x,y,z,t", "\n", "pose_seq", "=", "np", ".", "zeros", "(", "(", "seq_len", ",", "4", ",", "4", ")", ")", "# 4x4 transformation matrices", "\n", "for", "step_idx", ",", "pc_file", "in", "enumerate", "(", "pc_seq_files", ")", ":", "\n", "        ", "pc_data", "=", "np", ".", "load", "(", "pc_file", ")", "\n", "nocs_pc", "=", "pc_data", "[", "'nocs_data'", "]", "\n", "depth_pc", "=", "pc_data", "[", "'depth_data'", "]", "\n", "pose", "=", "pc_data", "[", "'obj_T'", "]", "\n", "\n", "# account for missing data (from i.e. warping cars data)", "\n", "if", "depth_pc", ".", "size", "==", "0", ":", "\n", "# if we don't have any depth data, use NOCS point cloud as input", "\n", "            ", "depth_pc", "=", "nocs_pc", "\n", "", "if", "pose", ".", "size", "==", "0", ":", "\n", "            ", "pose", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "\n", "# print(nocs_pc.shape)", "\n", "# print(depth_pc.shape)", "\n", "# print(nocs_pc)", "\n", "# print(depth_pc)", "\n", "", "if", "np", ".", "count_nonzero", "(", "nocs_pc", ")", "==", "0", ":", "\n", "# has a blank frame, don't use this sequence", "\n", "# print('BLANK FRAME')", "\n", "            ", "break", "\n", "\n", "", "if", "nocs_pc", ".", "shape", "[", "0", "]", "<", "expected_num_pts", ":", "\n", "# print('Needs padding: %d' % (nocs_pc.shape[0]))", "\n", "# need to pad end to get the expected point cloud size", "\n", "            ", "pad_size", "=", "expected_num_pts", "-", "nocs_pc", ".", "shape", "[", "0", "]", "\n", "while", "pad_size", ">", "0", ":", "\n", "                ", "nocs_pc", "=", "np", ".", "concatenate", "(", "[", "nocs_pc", ",", "nocs_pc", "[", ":", "pad_size", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "]", ",", "axis", "=", "0", ")", "\n", "depth_pc", "=", "np", ".", "concatenate", "(", "[", "depth_pc", ",", "depth_pc", "[", ":", "pad_size", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "]", ",", "axis", "=", "0", ")", "\n", "pad_size", "=", "expected_num_pts", "-", "nocs_pc", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "pose_seq", "[", "step_idx", "]", "=", "pose", "\n", "\n", "# add time stamp min 0, max 1 based on number of steps", "\n", "time_stamp", "=", "np", ".", "ones", "(", "(", "nocs_pc", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "*", "step_size", "*", "step_idx", "# NOCS time (0, 1)", "\n", "nocs_pc", "=", "np", ".", "concatenate", "(", "[", "nocs_pc", ",", "time_stamp", "]", ",", "axis", "=", "1", ")", "\n", "nocs_seq", "[", "step_idx", "]", "=", "nocs_pc", "\n", "# world time (0, max_time)", "\n", "time_stamp", "=", "max_timestamp", "*", "np", ".", "ones", "(", "(", "depth_pc", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "*", "step_size", "*", "step_idx", "\n", "depth_pc", "=", "np", ".", "concatenate", "(", "[", "depth_pc", ",", "time_stamp", "]", ",", "axis", "=", "1", ")", "\n", "depth_seq", "[", "step_idx", "]", "=", "depth_pc", "\n", "\n", "", "return", "nocs_seq", ",", "depth_seq", ",", "pose_seq", "\n", "\n"]]}