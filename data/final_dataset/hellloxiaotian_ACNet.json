{"home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.tcw_sample.parse_args": [[18, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--group\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample_dir\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"dataset/Urban100\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--shave\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.tcw_sample.save_image": [[32, 37], ["tensor.cpu.cpu", "tensor.cpu.mul().clamp().byte().permute().numpy", "PIL.Image.fromarray", "Image.fromarray.save", "tensor.cpu.mul().clamp().byte().permute", "tensor.cpu.mul().clamp().byte", "tensor.cpu.mul().clamp", "tensor.cpu.mul"], "function", ["None"], ["", "def", "save_image", "(", "tensor", ",", "filename", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "cpu", "(", ")", "\n", "ndarr", "=", "tensor", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.tcw_sample.psnr": [[38, 48], ["tcw_sample.psnr.im2double"], "function", ["None"], ["", "def", "psnr", "(", "im1", ",", "im2", ")", ":", "#tcw201904101621", "\n", "    ", "def", "im2double", "(", "im", ")", ":", "\n", "        ", "min_val", ",", "max_val", "=", "0", ",", "255", "\n", "out", "=", "(", "im", ".", "astype", "(", "np", ".", "float64", ")", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "return", "out", "\n", "\n", "", "im1", "=", "im2double", "(", "im1", ")", "\n", "im2", "=", "im2double", "(", "im2", ")", "\n", "psnr", "=", "measure", ".", "compare_psnr", "(", "im1", ",", "im2", ",", "data_range", "=", "1", ")", "\n", "return", "psnr", "\n", "#tcw20190413043", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.tcw_sample.calculate_ssim": [[49, 72], ["ValueError", "tcw_sample.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "tcw_sample.ssim", "tcw_sample.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.tcw_sample.ssim": [[73, 94], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.tcw_sample.rgb2ycbcr": [[94, 117], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''\n    same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.tcw_sample.sample": [[118, 242], ["enumerate", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tcw_sample.save_image", "tcw_sample.save_image", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte().permute().numpy", "net().detach().squeeze.cpu().mul().clamp().byte().permute().numpy", "tcw_sample.rgb2ycbcr", "tcw_sample.rgb2ycbcr", "time.time", "torch.tensor", "torch.tensor", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch.to.to", "net().detach", "torch.tensor().to", "torch.tensor().to", "result[].copy_", "result[].copy_", "result[].copy_", "result[].copy_", "time.time", "time.time", "lr.squeeze.unsqueeze().to", "net().detach().squeeze", "lr.squeeze.squeeze", "time.time", "[].split", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tcw_sample.psnr", "len", "tcw_sample.calculate_ssim", "len", "lr.squeeze.size", "int", "int", "cfg.test_data_dir.split", "cfg.test_data_dir.split", "name.replace", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte().permute", "net().detach().squeeze.cpu().mul().clamp().byte().permute", "net", "torch.tensor", "torch.tensor", "lr.squeeze.unsqueeze", "net().detach", "cfg.ckpt_path.split", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte", "net().detach().squeeze.cpu().mul().clamp().byte", "net", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp", "net().detach().squeeze.cpu().mul().clamp", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul", "net().detach().squeeze.cpu().mul", "hr.cpu().mul().clamp().byte().permute().numpy.cpu", "net().detach().squeeze.cpu"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.save_image", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.save_image", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.rgb2ycbcr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.rgb2ycbcr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.psnr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.calculate_ssim"], ["", "def", "sample", "(", "net", ",", "device", ",", "dataset", ",", "cfg", ")", ":", "\n", "    ", "scale", "=", "cfg", ".", "scale", "\n", "mean_psnr", "=", "0", "\n", "mean_psnr1", "=", "0", "\n", "mean_psnr2", "=", "0", "\n", "mean_ssim", "=", "0", "#tcw20190413047", "\n", "for", "step", ",", "(", "hr", ",", "lr", ",", "name", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "\"DIV2K\"", "in", "dataset", ".", "name", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "h", ",", "w", "=", "lr", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "h_half", ",", "w_half", "=", "int", "(", "h", "/", "2", ")", ",", "int", "(", "w", "/", "2", ")", "\n", "h_chop", ",", "w_chop", "=", "h_half", "+", "cfg", ".", "shave", ",", "w_half", "+", "cfg", ".", "shave", "\n", "\n", "lr_patch", "=", "torch", ".", "tensor", "(", "(", "4", ",", "3", ",", "h_chop", ",", "w_chop", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "lr_patch", "[", "0", "]", ".", "copy_", "(", "lr", "[", ":", ",", "0", ":", "h_chop", ",", "0", ":", "w_chop", "]", ")", "\n", "lr_patch", "[", "1", "]", ".", "copy_", "(", "lr", "[", ":", ",", "0", ":", "h_chop", ",", "w", "-", "w_chop", ":", "w", "]", ")", "\n", "lr_patch", "[", "2", "]", ".", "copy_", "(", "lr", "[", ":", ",", "h", "-", "h_chop", ":", "h", ",", "0", ":", "w_chop", "]", ")", "\n", "lr_patch", "[", "3", "]", ".", "copy_", "(", "lr", "[", ":", ",", "h", "-", "h_chop", ":", "h", ",", "w", "-", "w_chop", ":", "w", "]", ")", "\n", "lr_patch", "=", "lr_patch", ".", "to", "(", "device", ")", "\n", "\n", "sr", "=", "net", "(", "lr_patch", ",", "cfg", ".", "scale", ")", ".", "detach", "(", ")", "\n", "\n", "h", ",", "h_half", ",", "h_chop", "=", "h", "*", "scale", ",", "h_half", "*", "scale", ",", "h_chop", "*", "scale", "\n", "w", ",", "w_half", ",", "w_chop", "=", "w", "*", "scale", ",", "w_half", "*", "scale", ",", "w_chop", "*", "scale", "\n", "\n", "result", "=", "torch", ".", "tensor", "(", "(", "3", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "result", "[", ":", ",", "0", ":", "h_half", ",", "0", ":", "w_half", "]", ".", "copy_", "(", "sr", "[", "0", ",", ":", ",", "0", ":", "h_half", ",", "0", ":", "w_half", "]", ")", "\n", "result", "[", ":", ",", "0", ":", "h_half", ",", "w_half", ":", "w", "]", ".", "copy_", "(", "sr", "[", "1", ",", ":", ",", "0", ":", "h_half", ",", "w_chop", "-", "w", "+", "w_half", ":", "w_chop", "]", ")", "\n", "result", "[", ":", ",", "h_half", ":", "h", ",", "0", ":", "w_half", "]", ".", "copy_", "(", "sr", "[", "2", ",", ":", ",", "h_chop", "-", "h", "+", "h_half", ":", "h_chop", ",", "0", ":", "w_half", "]", ")", "\n", "result", "[", ":", ",", "h_half", ":", "h", ",", "w_half", ":", "w", "]", ".", "copy_", "(", "sr", "[", "3", ",", ":", ",", "h_chop", "-", "h", "+", "h_half", ":", "h_chop", ",", "w_chop", "-", "w", "+", "w_half", ":", "w_chop", "]", ")", "\n", "sr", "=", "result", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "#print '--------'", "\n", "#print lr.size() #e.g (3,512,512)", "\n", "lr", "=", "lr", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "#print lr.size() #(1,3,512,512)", "\n", "#b = net(lr, cfg.scale).detach()", "\n", "#print b.size()  #(1,3,1024,1024)", "\n", "sr", "=", "net", "(", "lr", ",", "cfg", ".", "scale", ")", ".", "detach", "(", ")", ".", "squeeze", "(", "0", ")", "#detach() break the reversed transformation.", "\n", "#print sr.size() #(3,1024,1024)", "\n", "lr", "=", "lr", ".", "squeeze", "(", "0", ")", "\n", "#print lr.size() #(3,512,512)", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "#print 'step is %d, mean_psnr is %d' % (step,mean_psrn) ", "\n", "#print cfg.ckpt_path #./checkpoint/carn.pth", "\n", "#print cfg.ckpt_path.split(\".\") #['', '/checkpoint/carn', 'pth']", "\n", "#print cfg.ckpt_path.split(\".\")[0] # ''", "\n", "#print cfg.ckpt_path.split(\".\")[0].split(\"/\") #''", "\n", "#print cfg.ckpt_path.split(\".\")[0].split(\"/\")[-1] #''", "\n", "", "model_name", "=", "cfg", ".", "ckpt_path", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "#''", "\n", "#print ", "\n", "#print 'a'", "\n", "#print '%s', %(model_name)", "\n", "#print model_name", "\n", "sr_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "sample_dir", ",", "\n", "model_name", ",", "\n", "cfg", ".", "test_data_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "\"x{}\"", ".", "format", "(", "cfg", ".", "scale", ")", ",", "\n", "\"SR\"", ")", "\n", "hr_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "sample_dir", ",", "\n", "model_name", ",", "\n", "cfg", ".", "test_data_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "\"x{}\"", ".", "format", "(", "cfg", ".", "scale", ")", ",", "\n", "\"HR\"", ")", "\n", "#print sr_dir #sample/Urban100/x2/SR", "\n", "#print hr_dir #sample/Urban100/x2/HR", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sr_dir", ")", ":", "#201904072208 tcw", "\n", "#os.makedirs(sr_dir, exist_ok=Ture)             #201904072211tcw, it is given at first, but it is wrong. So, I mark it.", "\n", "#os.makedirs(hr_dir, exist_ok=Ture)", "\n", "            ", "os", ".", "makedirs", "(", "sr_dir", ",", "mode", "=", "0o777", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "hr_dir", ")", ":", "#201904072208 tcw", "\n", "            ", "os", ".", "makedirs", "(", "hr_dir", ",", "mode", "=", "0o777", ")", "\n", "\n", "", "sr_im_path", "=", "os", ".", "path", ".", "join", "(", "sr_dir", ",", "\"{}\"", ".", "format", "(", "name", ".", "replace", "(", "\"HR\"", ",", "\"SR\"", ")", ")", ")", "#use SR instead of HR in the name of high-resolution image", "\n", "hr_im_path", "=", "os", ".", "path", ".", "join", "(", "hr_dir", ",", "\"{}\"", ".", "format", "(", "name", ")", ")", "#name is a name of high-resolution image", "\n", "#print sr_im_path #sample/Urban100/x2/SR/img_100_SRF_2_SR.png", "\n", "#print hr_im_path #sample/Urban100/x2/HR/img_100_SRF_2_HR.png", "\n", "save_image", "(", "sr", ",", "sr_im_path", ")", "\n", "save_image", "(", "hr", ",", "hr_im_path", ")", "\n", "#201904111731tcw y", "\n", "#sr_Y = cv2.imread(sr_im_path,cv2.IMREAD_COLOR)", "\n", "#sr_Y = cv2.cvtColor(sr_Y,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#sr_Y = rgb2ycbcr(sr_Y)", "\n", "#sr_Y = sr_Y[:,:,0] #y", "\n", "#print sr_Y.shape", "\n", "#hr_Y = cv2.imread(hr_im_path,cv2.IMREAD_COLOR)", "\n", "#hr_Y = cv2.cvtColor(hr_Y,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#hr_Y = rgb2ycbcr(hr_Y)", "\n", "#hr_Y = hr_Y[:,:,0] #y ", "\n", "#print hr_Y.shape", "\n", "hr", "=", "hr", ".", "cpu", "(", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "#(644.1024,3) is the same dimensional with the size of input test image in dataset.py. #201904101617tcw", "\n", "sr", "=", "sr", ".", "cpu", "(", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "#tcw201904101617", "\n", "bnd", "=", "scale", "#tcw", "\n", "#''''''''''''", "\n", "#hr_Y1 = cv2.cvtColor(hr,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#sr_Y1 = cv2.cvtColor(sr,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#hr_Y2 =hr_Y1[:,:,0]", "\n", "#sr_Y2 = sr_Y1[:,:,0]", "\n", "#hr_Y2 = hr_Y2[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#sr_Y2 = sr_Y2[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#''''''''''''", "\n", "#im1 = hr[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#im2 = sr[bnd:-bnd, bnd:-bnd] #tcw", "\n", "sr_1", "=", "rgb2ycbcr", "(", "sr", ")", "\n", "hr_1", "=", "rgb2ycbcr", "(", "hr", ")", "\n", "#sr_Y = sr_Y[bnd:-bnd,bnd:-bnd]#tcw201904111837", "\n", "#hr_Y = hr_Y[bnd:-bnd,bnd:-bnd]#tcw201904111837", "\n", "sr_1", "=", "sr_1", "[", "bnd", ":", "-", "bnd", ",", "bnd", ":", "-", "bnd", "]", "#tcw201904111837", "\n", "hr_1", "=", "hr_1", "[", "bnd", ":", "-", "bnd", ",", "bnd", ":", "-", "bnd", "]", "#tcw201904111837", "\n", "#mean_psnr1 +=psnr(sr_Y,hr_Y)/len(dataset)", "\n", "mean_psnr2", "+=", "psnr", "(", "sr_1", ",", "hr_1", ")", "/", "len", "(", "dataset", ")", "\n", "mean_ssim", "+=", "calculate_ssim", "(", "sr_1", ",", "hr_1", ")", "/", "len", "(", "dataset", ")", "\n", "#print mean_psnr2, mean_ssim, len(dataset)", "\n", "#print len(dataset) #it is only used to debug the code.", "\n", "#mean_psnr += psnr(im1, im2) / len(dataset) #tcw", "\n", "#mean_psnr2 +=psnr(sr_Y2,hr_Y2)/len(dataset)", "\n", "#print(\"Saved {} ({}x{} -> {}x{}, {:.3f}s)\"", "\n", "# .format(sr_im_path, lr.shape[1], lr.shape[2], sr.shape[1], sr.shape[2], t2-t1))", "\n", "#Saved sample/Urban100/x2/SR/img_100_SRF_2_SR.png (512x512 -> 1024x1024, 0.007s)", "\n", "#print mean_psnr, mean_psnr1, mean_psnr2 #tcw", "\n", "#print mean_psnr1, mean_psnr2", "\n", "", "print", "(", "mean_psnr2", ",", "mean_ssim", ")", "\n", "#print '-------------------'z", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.tcw_sample.main": [[244, 281], ["importlib.import_module", "importlib.import_module.Net", "print", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "net.to.load_state_dict", "torch.device", "torch.device", "net.to.to", "dataset.TestDataset", "tcw_sample.sample", "json.dumps", "vars", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.sample"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "module", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "cfg", ".", "model", ")", ")", "\n", "''' \n    net = module.Net(multi_scale=False, \n                     group=cfg.group)\n    '''", "\n", "net", "=", "module", ".", "Net", "(", "scale", "=", "cfg", ".", "scale", ",", "\n", "group", "=", "cfg", ".", "group", ")", "\n", "'''\n    #net = MyModel\n    params = list(net.parameters())\n    k = 0\n    for i in params:\n        l = 1\n\t#print('' + str(list(i.size())))\n\tfor j in i.size():\n            l *= j\n\t    #print('' + str(l))\n\t    k = k + l\n\tprint(''+ str(k))\n    '''", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "cfg", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "#print cfg information according order.", "\n", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "ckpt_path", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "\n", "# name = k[7:] # remove \"module.\"", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "net", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "#os.environ['CUDA_VISIBLE_DEVICES']='0,1'", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "#0 is number of gpu, if this gpu1 is work, you can set it into 1 (device=torch.device(\"cuda:1\" if torch.cuda.is_available() else \"cpu\"))", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "#summary(net,[(3,240, 160),(3,1000, 2000)]) #tcw20190623", "\n", "#summary(net,[torch.zeros(1,3,240,160),2],2)", "\n", "dataset", "=", "TestDataset", "(", "cfg", ".", "test_data_dir", ",", "cfg", ".", "scale", ")", "\n", "sample", "(", "net", ",", "device", ",", "dataset", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.train.parse_args": [[9, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_name\"", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--print_interval\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "#original data is 1000", "\n", "parser", ".", "add_argument", "(", "\"--train_data_path\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"dataset/DIV2K_train.h5\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_dir\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"checkpoint\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample_dir\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"sample/\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--num_gpu\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--shave\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "#moren shi 20 $tcw20191222", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--verbose\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--group\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--patch_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_steps\"", ",", "type", "=", "int", ",", "default", "=", "200000", ")", "\n", "parser", ".", "add_argument", "(", "\"--decay\"", ",", "type", "=", "int", ",", "default", "=", "150000", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "parser", ".", "add_argument", "(", "\"--clip\"", ",", "type", "=", "float", ",", "default", "=", "10", ")", "\n", "\n", "#parser.add_argument(\"--loss_fn\", type=str, ", "\n", "#choices=[\"MSE\", \"L1\", \"SmoothL1\"], default=\"L1\") #tcw201904082029", "\n", "parser", ".", "add_argument", "(", "\"--loss_fn\"", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"MSE\"", ",", "\"L1\"", ",", "\"SmoothL1\"", "]", ",", "default", "=", "\"MSE\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.train.main": [[43, 51], ["print", "solver.Solver", "solver.Solver.fit", "importlib.import_module", "json.dumps", "vars"], "function", ["None"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "# dynamic import using --model argument", "\n", "    ", "net", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "cfg", ".", "model", ")", ")", ".", "Net", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "cfg", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n", "solver", "=", "Solver", "(", "net", ",", "cfg", ")", "\n", "#print 'ds'", "\n", "solver", ".", "fit", "(", ")", "\n", "#print 'sdsddwdew'", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.dataset.TrainDataset.__init__": [[42, 62], ["torch.Dataset.__init__", "h5py.File", "h5py.File.close", "torchvision.Compose", "h5f[].values", "torchvision.ToTensor", "h5f[].values", "h5f[].values"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "size", ",", "scale", ")", ":", "\n", "        ", "super", "(", "TrainDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "size", "=", "size", "\n", "h5f", "=", "h5py", ".", "File", "(", "path", ",", "\"r\"", ")", "\n", "\n", "self", ".", "hr", "=", "[", "v", "[", ":", "]", "for", "v", "in", "h5f", "[", "\"HR\"", "]", ".", "values", "(", ")", "]", "\n", "# perform multi-scale training", "\n", "if", "scale", "==", "0", ":", "\n", "            ", "self", ".", "scale", "=", "[", "2", ",", "3", ",", "4", "]", "\n", "self", ".", "lr", "=", "[", "[", "v", "[", ":", "]", "for", "v", "in", "h5f", "[", "\"X{}\"", ".", "format", "(", "i", ")", "]", ".", "values", "(", ")", "]", "for", "i", "in", "self", ".", "scale", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", "=", "[", "scale", "]", "\n", "self", ".", "lr", "=", "[", "[", "v", "[", ":", "]", "for", "v", "in", "h5f", "[", "\"X{}\"", ".", "format", "(", "scale", ")", "]", ".", "values", "(", ")", "]", "]", "\n", "\n", "", "h5f", ".", "close", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.dataset.TrainDataset.__getitem__": [[64, 72], ["dataset.random_crop", "dataset.random_flip_and_rotate", "enumerate", "enumerate", "dataset.TrainDataset.transform", "dataset.TrainDataset.transform"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_crop", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_flip_and_rotate"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "size", "=", "self", ".", "size", "\n", "item", "=", "[", "(", "self", ".", "hr", "[", "index", "]", ",", "self", ".", "lr", "[", "i", "]", "[", "index", "]", ")", "for", "i", ",", "_", "in", "enumerate", "(", "self", ".", "lr", ")", "]", "\n", "#i is the number, _ is the context", "\n", "item", "=", "[", "random_crop", "(", "hr", ",", "lr", ",", "size", ",", "self", ".", "scale", "[", "i", "]", ")", "for", "i", ",", "(", "hr", ",", "lr", ")", "in", "enumerate", "(", "item", ")", "]", "\n", "item", "=", "[", "random_flip_and_rotate", "(", "hr", ",", "lr", ")", "for", "hr", ",", "lr", "in", "item", "]", "\n", "\n", "return", "[", "(", "self", ".", "transform", "(", "hr", ")", ",", "self", ".", "transform", "(", "lr", ")", ")", "for", "hr", ",", "lr", "in", "item", "]", "#tranform array (hr,lr) into tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.dataset.TrainDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.dataset.TestDataset.__init__": [[78, 98], ["torch.Dataset.__init__", "dataset.TestDataset.hr.sort", "dataset.TestDataset.lr.sort", "torchvision.Compose", "dirname.split", "glob.glob", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dirname", ",", "scale", ")", ":", "\n", "        ", "super", "(", "TestDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "dirname", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "if", "\"DIV\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "hr", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\"{}_HR\"", ".", "format", "(", "dirname", ")", ",", "\"*.png\"", ")", ")", "\n", "self", ".", "lr", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\"{}_LR_bicubic\"", ".", "format", "(", "dirname", ")", ",", "\n", "\"X{}/*.png\"", ".", "format", "(", "scale", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "all_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"x{}/*.png\"", ".", "format", "(", "scale", ")", ")", ")", "\n", "self", ".", "hr", "=", "[", "name", "for", "name", "in", "all_files", "if", "\"HR\"", "in", "name", "]", "\n", "self", ".", "lr", "=", "[", "name", "for", "name", "in", "all_files", "if", "\"LR\"", "in", "name", "]", "\n", "\n", "", "self", ".", "hr", ".", "sort", "(", ")", "\n", "self", ".", "lr", ".", "sort", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.dataset.TestDataset.__getitem__": [[100, 117], ["PIL.Image.open", "PIL.Image.open", "hr.convert.convert.convert", "lr.convert.convert.convert", "dataset.TestDataset.hr[].split", "dataset.TestDataset.transform", "dataset.TestDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "hr", "=", "Image", ".", "open", "(", "self", ".", "hr", "[", "index", "]", ")", "\n", "lr", "=", "Image", ".", "open", "(", "self", ".", "lr", "[", "index", "]", ")", "\n", "'''\n        #This is only used to test code, which makes me more know the code. \n        ss = np.asarray(hr) (644,1024,3)\n        print ss.shape\n        '''", "\n", "hr", "=", "hr", ".", "convert", "(", "\"RGB\"", ")", "\n", "lr", "=", "lr", ".", "convert", "(", "\"RGB\"", ")", "\n", "'''\n        tss = np.asarray(hr) (644,1024,3)\n        print tss.shape\n        '''", "\n", "filename", "=", "self", ".", "hr", "[", "index", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "#keep the last string, which is after /. For example, a= 'aaa/asds.bmp', a.split(\"/\")[-1] = asds ", "\n", "return", "self", ".", "transform", "(", "hr", ")", ",", "self", ".", "transform", "(", "lr", ")", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.dataset.TestDataset.__len__": [[118, 120], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.dataset.random_crop": [[10, 22], ["random.randint", "random.randint", "lr[].copy", "hr[].copy"], "function", ["None"], ["def", "random_crop", "(", "hr", ",", "lr", ",", "size", ",", "scale", ")", ":", "\n", "    ", "h", ",", "w", "=", "lr", ".", "shape", "[", ":", "-", "1", "]", "#h,w,channel [:-1] beside the final element, such as channel ", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "size", ")", "#random number", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "size", ")", "\n", "\n", "hsize", "=", "size", "*", "scale", "\n", "hx", ",", "hy", "=", "x", "*", "scale", ",", "y", "*", "scale", "\n", "\n", "crop_lr", "=", "lr", "[", "y", ":", "y", "+", "size", ",", "x", ":", "x", "+", "size", "]", ".", "copy", "(", ")", "#low-resolution patch", "\n", "crop_hr", "=", "hr", "[", "hy", ":", "hy", "+", "hsize", ",", "hx", ":", "hx", "+", "hsize", "]", ".", "copy", "(", ")", "#high-resolution patch", "\n", "\n", "return", "crop_hr", ",", "crop_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x2.dataset.random_flip_and_rotate": [[24, 39], ["random.choice", "numpy.rot90", "numpy.rot90", "random.random", "numpy.flipud", "numpy.flipud", "random.random", "numpy.fliplr", "numpy.fliplr", "np.fliplr.copy", "np.fliplr.copy"], "function", ["None"], ["", "def", "random_flip_and_rotate", "(", "im1", ",", "im2", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "im1", "=", "np", ".", "flipud", "(", "im1", ")", "#left and right move", "\n", "im2", "=", "np", ".", "flipud", "(", "im2", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "#up and down move", "\n", "        ", "im1", "=", "np", ".", "fliplr", "(", "im1", ")", "\n", "im2", "=", "np", ".", "fliplr", "(", "im2", ")", "\n", "\n", "", "angle", "=", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "#rote", "\n", "im1", "=", "np", ".", "rot90", "(", "im1", ",", "angle", ")", "\n", "im2", "=", "np", ".", "rot90", "(", "im2", ",", "angle", ")", "\n", "\n", "# have to copy before be called by transform function", "\n", "return", "im1", ".", "copy", "(", ")", ",", "im2", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.MeanShift.__init__": [[12, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ops.MeanShift.shifter.parameters", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean_rgb", ",", "sub", ")", ":", "\n", "        ", "super", "(", "MeanShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "sign", "=", "-", "1", "if", "sub", "else", "1", "\n", "r", "=", "mean_rgb", "[", "0", "]", "*", "sign", "\n", "g", "=", "mean_rgb", "[", "1", "]", "*", "sign", "\n", "b", "=", "mean_rgb", "[", "2", "]", "*", "sign", "\n", "\n", "self", ".", "shifter", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "1", ",", "1", ",", "0", ")", "#3 is size of output, 3 is size of input, 1 is kernel 1 is padding, 0 is group ", "\n", "self", ".", "shifter", ".", "weight", ".", "data", "=", "torch", ".", "eye", "(", "3", ")", ".", "view", "(", "3", ",", "3", ",", "1", ",", "1", ")", "# view(3,3,1,1) convert a shape into (3,3,1,1) eye(3) is a 3x3 matrix and diagonal is 1.", "\n", "self", ".", "shifter", ".", "bias", ".", "data", "=", "torch", ".", "Tensor", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "#in_channels, out_channels,ksize=3, stride=1, pad=1", "\n", "# Freeze the mean shift layer", "\n", "for", "params", "in", "self", ".", "shifter", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.MeanShift.forward": [[28, 31], ["ops.MeanShift.shifter"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "shifter", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.BasicBlock.__init__": [[34, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ops.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "out_channels", ",", "\n", "ksize", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "pad", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "init_weights", "(", "self", ".", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.BasicBlock.forward": [[46, 49], ["ops.BasicBlock.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.ResidualBlock.__init__": [[52, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ops.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "init_weights", "(", "self", ".", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.ResidualBlock.forward": [[64, 68], ["ops.ResidualBlock.body", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", "+", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.EResidualBlock.__init__": [[71, 85], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ops.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "out_channels", ",", "\n", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "EResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ")", ",", "\n", ")", "\n", "\n", "init_weights", "(", "self", ".", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.EResidualBlock.forward": [[86, 90], ["ops.EResidualBlock.body", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", "+", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.UpsampleBlock.__init__": [[93, 106], ["torch.Module.__init__", "ops._UpsampleBlock", "ops._UpsampleBlock", "ops._UpsampleBlock", "ops._UpsampleBlock"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_channels", ",", "scale", ",", "multi_scale", ",", "\n", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "UpsampleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "multi_scale", ":", "\n", "            ", "self", ".", "up2", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "2", ",", "group", "=", "group", ")", "\n", "self", ".", "up3", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "3", ",", "group", "=", "group", ")", "\n", "self", ".", "up4", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "4", ",", "group", "=", "group", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "scale", ",", "group", "=", "group", ")", "\n", "\n", "", "self", ".", "multi_scale", "=", "multi_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.UpsampleBlock.forward": [[107, 117], ["ops.UpsampleBlock.up", "ops.UpsampleBlock.up2", "ops.UpsampleBlock.up3", "ops.UpsampleBlock.up4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "scale", ")", ":", "\n", "        ", "if", "self", ".", "multi_scale", ":", "\n", "            ", "if", "scale", "==", "2", ":", "\n", "                ", "return", "self", ".", "up2", "(", "x", ")", "\n", "", "elif", "scale", "==", "3", ":", "\n", "                ", "return", "self", ".", "up3", "(", "x", ")", "\n", "", "elif", "scale", "==", "4", ":", "\n", "                ", "return", "self", ".", "up4", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "self", ".", "up", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops._UpsampleBlock.__init__": [[120, 138], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ops.init_weights", "range", "int", "math.log", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_channels", ",", "scale", ",", "\n", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "_UpsampleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "modules", "=", "[", "]", "\n", "if", "scale", "==", "2", "or", "scale", "==", "4", "or", "scale", "==", "8", ":", "\n", "            ", "for", "_", "in", "range", "(", "int", "(", "math", ".", "log", "(", "scale", ",", "2", ")", ")", ")", ":", "\n", "#modules += [nn.Conv2d(n_channels, 4*n_channels, 3, 1, 1, groups=group), nn.ReLU(inplace=True)]", "\n", "                ", "modules", "+=", "[", "nn", ".", "Conv2d", "(", "n_channels", ",", "4", "*", "n_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ")", "]", "\n", "modules", "+=", "[", "nn", ".", "PixelShuffle", "(", "2", ")", "]", "\n", "", "", "elif", "scale", "==", "3", ":", "\n", "#modules += [nn.Conv2d(n_channels, 9*n_channels, 3, 1, 1, groups=group), nn.ReLU(inplace=True)]", "\n", "            ", "modules", "+=", "[", "nn", ".", "Conv2d", "(", "n_channels", ",", "9", "*", "n_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ")", "]", "\n", "modules", "+=", "[", "nn", ".", "PixelShuffle", "(", "3", ")", "]", "\n", "\n", "", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "init_weights", "(", "self", ".", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops._UpsampleBlock.forward": [[139, 142], ["ops._UpsampleBlock.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.ops.init_weights": [[7, 9], ["None"], "function", ["None"], ["def", "init_weights", "(", "modules", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.acnet.Net.__init__": [[35, 126], ["torch.Module.__init__", "kwargs.get", "kwargs.get", "kwargs.get", "model.MeanShift", "model.MeanShift", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "model.UpsampleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["self", ".", "conv4_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv6_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv6_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv6_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv7_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv7_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv7_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv8_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv8_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv8_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv9_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv9_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv9_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv10_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv10_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv10_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv11_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv11_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv11_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv12_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv12_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv12_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv13_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv13_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv13_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv14_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv14_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv14_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv15_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv15_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv15_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv16_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv16_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv16_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv17_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv17_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv17_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv18_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv18_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv19_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv19_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv20", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv21", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv22", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "ReLU", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "#self.BN = nn.BatchNorm2d(features)", "\n", "self", ".", "upsample", "=", "ops", ".", "UpsampleBlock", "(", "64", ",", "scale", "=", "scale", ",", "multi_scale", "=", "multi_scale", ",", "group", "=", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "scale", ")", ":", "\n", "        ", "x0", "=", "self", ".", "sub_mean", "(", "x", ")", "\n", "x1_1", "=", "self", ".", "conv1_1", "(", "x0", ")", "\n", "x1_2", "=", "self", ".", "conv1_2", "(", "x0", ")", "\n", "x1_3", "=", "self", ".", "conv1_3", "(", "x0", ")", "\n", "x1", "=", "x1_1", "+", "x1_2", "+", "x1_3", "\n", "x1_tcw", "=", "self", ".", "ReLU", "(", "x1", ")", "\n", "x2_1", "=", "self", ".", "conv2_1", "(", "x1_tcw", ")", "\n", "x2_2", "=", "self", ".", "conv2_2", "(", "x1_tcw", ")", "\n", "x2_3", "=", "self", ".", "conv2_3", "(", "x1_tcw", ")", "\n", "x2", "=", "x2_1", "+", "x2_2", "+", "x2_3", "\n", "x2_tcw", "=", "self", ".", "ReLU", "(", "x2", ")", "\n", "x3_1", "=", "self", ".", "conv3_1", "(", "x2_tcw", ")", "\n", "x3_2", "=", "self", ".", "conv3_2", "(", "x2_tcw", ")", "\n", "x3_3", "=", "self", ".", "conv3_3", "(", "x2_tcw", ")", "\n", "x3", "=", "x3_1", "+", "x3_2", "+", "x3_3", "\n", "x3_tcw", "=", "self", ".", "ReLU", "(", "x3", ")", "\n", "x4_1", "=", "self", ".", "conv4_1", "(", "x3_tcw", ")", "\n", "x4_2", "=", "self", ".", "conv4_2", "(", "x3_tcw", ")", "\n", "x4_3", "=", "self", ".", "conv4_3", "(", "x3_tcw", ")", "\n", "x4", "=", "x4_1", "+", "x4_2", "+", "x4_3", "\n", "x4_tcw", "=", "self", ".", "ReLU", "(", "x4", ")", "\n", "x5_1", "=", "self", ".", "conv5_1", "(", "x4_tcw", ")", "\n", "x5_2", "=", "self", ".", "conv5_2", "(", "x4_tcw", ")", "\n", "x5_3", "=", "self", ".", "conv5_3", "(", "x4_tcw", ")", "\n", "x5", "=", "x5_1", "+", "x5_2", "+", "x5_3", "\n", "x5_tcw", "=", "self", ".", "ReLU", "(", "x5", ")", "\n", "x6_1", "=", "self", ".", "conv6_1", "(", "x5_tcw", ")", "\n", "x6_2", "=", "self", ".", "conv6_2", "(", "x5_tcw", ")", "\n", "x6_3", "=", "self", ".", "conv6_3", "(", "x5_tcw", ")", "\n", "x6", "=", "x6_1", "+", "x6_2", "+", "x6_3", "\n", "x6_tcw", "=", "self", ".", "ReLU", "(", "x6", ")", "\n", "x7_1", "=", "self", ".", "conv7_1", "(", "x6_tcw", ")", "\n", "x7_2", "=", "self", ".", "conv7_2", "(", "x6_tcw", ")", "\n", "x7_3", "=", "self", ".", "conv7_3", "(", "x6_tcw", ")", "\n", "x7", "=", "x7_1", "+", "x7_2", "+", "x7_3", "\n", "x7_tcw", "=", "self", ".", "ReLU", "(", "x7", ")", "\n", "x8_1", "=", "self", ".", "conv8_1", "(", "x7_tcw", ")", "\n", "x8_2", "=", "self", ".", "conv8_2", "(", "x7_tcw", ")", "\n", "x8_3", "=", "self", ".", "conv8_3", "(", "x7_tcw", ")", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.acnet.Net.forward": [[126, 266], ["acnet.Net.sub_mean", "acnet.Net.conv1_1", "acnet.Net.conv1_2", "acnet.Net.conv1_3", "acnet.Net.ReLU", "acnet.Net.conv2_1", "acnet.Net.conv2_2", "acnet.Net.conv2_3", "acnet.Net.ReLU", "acnet.Net.conv3_1", "acnet.Net.conv3_2", "acnet.Net.conv3_3", "acnet.Net.ReLU", "acnet.Net.conv4_1", "acnet.Net.conv4_2", "acnet.Net.conv4_3", "acnet.Net.ReLU", "acnet.Net.conv5_1", "acnet.Net.conv5_2", "acnet.Net.conv5_3", "acnet.Net.ReLU", "acnet.Net.conv6_1", "acnet.Net.conv6_2", "acnet.Net.conv6_3", "acnet.Net.ReLU", "acnet.Net.conv7_1", "acnet.Net.conv7_2", "acnet.Net.conv7_3", "acnet.Net.ReLU", "acnet.Net.conv8_1", "acnet.Net.conv8_2", "acnet.Net.conv8_3", "acnet.Net.ReLU", "acnet.Net.conv9_1", "acnet.Net.conv9_2", "acnet.Net.conv9_3", "acnet.Net.ReLU", "acnet.Net.conv10_1", "acnet.Net.conv10_2", "acnet.Net.conv10_3", "acnet.Net.ReLU", "acnet.Net.conv11_1", "acnet.Net.conv11_2", "acnet.Net.conv11_3", "acnet.Net.ReLU", "acnet.Net.conv12_1", "acnet.Net.conv12_2", "acnet.Net.conv12_3", "acnet.Net.ReLU", "acnet.Net.conv13_1", "acnet.Net.conv13_2", "acnet.Net.conv13_3", "acnet.Net.ReLU", "acnet.Net.conv14_1", "acnet.Net.conv14_2", "acnet.Net.conv14_3", "acnet.Net.ReLU", "acnet.Net.conv15_1", "acnet.Net.conv15_2", "acnet.Net.conv15_3", "acnet.Net.ReLU", "acnet.Net.conv16_1", "acnet.Net.conv16_2", "acnet.Net.conv16_3", "acnet.Net.ReLU", "acnet.Net.conv17_1", "acnet.Net.conv17_2", "acnet.Net.conv17_3", "acnet.Net.ReLU", "acnet.Net.upsample", "acnet.Net.ReLU", "acnet.Net.upsample", "acnet.Net.ReLU", "acnet.Net.conv18_1", "acnet.Net.conv18_2", "acnet.Net.conv19_1", "acnet.Net.conv19_2", "acnet.Net.ReLU", "acnet.Net.conv20", "acnet.Net.conv21", "acnet.Net.conv22", "acnet.Net.add_mean"], "methods", ["None"], ["x8_3", "=", "self", ".", "conv8_3", "(", "x7_tcw", ")", "\n", "x8", "=", "x8_1", "+", "x8_2", "+", "x8_3", "\n", "x8_tcw", "=", "self", ".", "ReLU", "(", "x8", ")", "\n", "x9_1", "=", "self", ".", "conv9_1", "(", "x8_tcw", ")", "\n", "x9_2", "=", "self", ".", "conv9_2", "(", "x8_tcw", ")", "\n", "x9_3", "=", "self", ".", "conv9_3", "(", "x8_tcw", ")", "\n", "x9", "=", "x9_1", "+", "x9_2", "+", "x9_3", "\n", "x9_tcw", "=", "self", ".", "ReLU", "(", "x9", ")", "\n", "x10_1", "=", "self", ".", "conv10_1", "(", "x9_tcw", ")", "\n", "x10_2", "=", "self", ".", "conv10_2", "(", "x9_tcw", ")", "\n", "x10_3", "=", "self", ".", "conv10_3", "(", "x9_tcw", ")", "\n", "x10", "=", "x10_1", "+", "x10_2", "+", "x10_3", "\n", "x10_tcw", "=", "self", ".", "ReLU", "(", "x10", ")", "\n", "x11_1", "=", "self", ".", "conv11_1", "(", "x10_tcw", ")", "\n", "x11_2", "=", "self", ".", "conv11_2", "(", "x10_tcw", ")", "\n", "x11_3", "=", "self", ".", "conv11_3", "(", "x10_tcw", ")", "\n", "x11", "=", "x11_1", "+", "x11_2", "+", "x11_3", "\n", "x11_tcw", "=", "self", ".", "ReLU", "(", "x11", ")", "\n", "x12_1", "=", "self", ".", "conv12_1", "(", "x11_tcw", ")", "\n", "x12_2", "=", "self", ".", "conv12_2", "(", "x11_tcw", ")", "\n", "x12_3", "=", "self", ".", "conv12_3", "(", "x11_tcw", ")", "\n", "x12", "=", "x12_1", "+", "x12_2", "+", "x12_3", "\n", "x12_tcw", "=", "self", ".", "ReLU", "(", "x12", ")", "\n", "x13_1", "=", "self", ".", "conv13_1", "(", "x12_tcw", ")", "\n", "x13_2", "=", "self", ".", "conv13_2", "(", "x12_tcw", ")", "\n", "x13_3", "=", "self", ".", "conv13_3", "(", "x12_tcw", ")", "\n", "x13", "=", "x13_1", "+", "x13_2", "+", "x13_3", "\n", "x13_tcw", "=", "self", ".", "ReLU", "(", "x13", ")", "\n", "x14_1", "=", "self", ".", "conv14_1", "(", "x13_tcw", ")", "\n", "x14_2", "=", "self", ".", "conv14_2", "(", "x13_tcw", ")", "\n", "x14_3", "=", "self", ".", "conv14_3", "(", "x13_tcw", ")", "\n", "x14", "=", "x14_1", "+", "x14_2", "+", "x14_3", "\n", "x14_tcw", "=", "self", ".", "ReLU", "(", "x14", ")", "\n", "x15_1", "=", "self", ".", "conv15_1", "(", "x14_tcw", ")", "\n", "x15_2", "=", "self", ".", "conv15_2", "(", "x14_tcw", ")", "\n", "x15_3", "=", "self", ".", "conv15_3", "(", "x14_tcw", ")", "\n", "x15", "=", "x15_1", "+", "x15_2", "+", "x15_3", "\n", "\t\t", "x15_tcw", "=", "self", ".", "ReLU", "(", "x15", ")", "\n", "", "x16_1", "=", "self", ".", "conv16_1", "(", "x15_tcw", ")", "\n", "x16_2", "=", "self", ".", "conv16_2", "(", "x15_tcw", ")", "\n", "x16_3", "=", "self", ".", "conv16_3", "(", "x15_tcw", ")", "\n", "x16", "=", "x16_1", "+", "x16_2", "+", "x16_3", "\n", "x16_tcw", "=", "self", ".", "ReLU", "(", "x16", ")", "\n", "x17_1", "=", "self", ".", "conv17_1", "(", "x16_tcw", ")", "\n", "x17_2", "=", "self", ".", "conv17_2", "(", "x16_tcw", ")", "\n", "x17_3", "=", "self", ".", "conv17_3", "(", "x16_tcw", ")", "\n", "x17", "=", "x17_1", "+", "x17_2", "+", "x17_3", "\n", "x17", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "+", "x5", "+", "x6", "+", "x7", "+", "x8", "+", "x9", "+", "x10", "+", "x11", "+", "x12", "+", "x13", "+", "x14", "+", "x15", "+", "x16", "+", "x17", "#tcw", "\n", "x17_tcw", "=", "self", ".", "ReLU", "(", "x17", ")", "\n", "temp", "=", "self", ".", "upsample", "(", "x17_tcw", ",", "scale", "=", "scale", ")", "\n", "temp1", "=", "self", ".", "ReLU", "(", "temp", ")", "\n", "x111", "=", "self", ".", "upsample", "(", "x1_tcw", ",", "scale", "=", "scale", ")", "\n", "temp2", "=", "self", ".", "ReLU", "(", "x111", ")", "\n", "x18_1", "=", "self", ".", "conv18_1", "(", "temp1", ")", "\n", "x18_2", "=", "self", ".", "conv18_2", "(", "temp2", ")", "\n", "x19_1", "=", "self", ".", "conv19_1", "(", "x18_1", ")", "\n", "x19_2", "=", "self", ".", "conv19_2", "(", "x18_2", ")", "\n", "x19", "=", "x19_1", "+", "x19_2", "\n", "temp3", "=", "self", ".", "ReLU", "(", "x19", ")", "\n", "x20", "=", "self", ".", "conv20", "(", "temp3", ")", "\n", "x21", "=", "self", ".", "conv21", "(", "x20", ")", "\n", "x22", "=", "self", ".", "conv22", "(", "x21", ")", "\n", "out", "=", "self", ".", "add_mean", "(", "x22", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.acnet-b.Net.__init__": [[7, 87], ["torch.Module.__init__", "kwargs.get", "kwargs.get", "kwargs.get", "model.MeanShift", "model.MeanShift", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "model.UpsampleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "scale", "=", "kwargs", ".", "get", "(", "\"scale\"", ")", "#value of scale is scale. ", "\n", "multi_scale", "=", "kwargs", ".", "get", "(", "\"multi_scale\"", ")", "# value of multi_scale is multi_scale in args.", "\n", "group", "=", "kwargs", ".", "get", "(", "\"group\"", ",", "1", ")", "#if valule of group isn't given, group is 1.", "\n", "kernel_size", "=", "3", "#tcw 201904091123", "\n", "kernel_size1", "=", "1", "#tcw 201904091123", "\n", "padding1", "=", "0", "#tcw 201904091124", "\n", "padding", "=", "1", "#tcw201904091123", "\n", "features", "=", "64", "#tcw201904091124", "\n", "groups", "=", "1", "#tcw201904091124", "\n", "channels", "=", "3", "\n", "features1", "=", "64", "\n", "self", ".", "sub_mean", "=", "ops", ".", "MeanShift", "(", "(", "0.4488", ",", "0.4371", ",", "0.4040", ")", ",", "sub", "=", "True", ")", "\n", "self", ".", "add_mean", "=", "ops", ".", "MeanShift", "(", "(", "0.4488", ",", "0.4371", ",", "0.4040", ")", ",", "sub", "=", "False", ")", "\n", "'''\n           in_channels, out_channels, kernel_size, stride, padding,dialation, groups,\n        '''", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv1_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv2_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv6_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv6_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv6_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv7_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv7_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv7_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv8_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv8_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv8_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv9_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv9_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv9_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv10_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv10_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv10_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv11_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv11_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv11_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv12_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv12_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv12_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv13_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv13_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv13_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv14_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv14_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv14_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv15_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv15_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv15_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv16_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv16_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv16_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv17_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv17_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv17_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv18_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv18_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv19_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv19_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv20", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv21", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "features", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv22", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "features", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "ReLU", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "#self.BN = nn.BatchNorm2d(features)", "\n", "self", ".", "upsample", "=", "ops", ".", "UpsampleBlock", "(", "64", ",", "scale", "=", "scale", ",", "multi_scale", "=", "multi_scale", ",", "group", "=", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "scale", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.model.acnet-b.Net.forward": [[87, 190], ["acnet-b.Net.sub_mean", "acnet-b.Net.conv1_1", "acnet-b.Net.conv1_2", "acnet-b.Net.conv1_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv2_1", "acnet-b.Net.conv2_2", "acnet-b.Net.conv2_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv3_1", "acnet-b.Net.conv3_2", "acnet-b.Net.conv3_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv4_1", "acnet-b.Net.conv4_2", "acnet-b.Net.conv4_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv5_1", "acnet-b.Net.conv5_2", "acnet-b.Net.conv5_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv6_1", "acnet-b.Net.conv6_2", "acnet-b.Net.conv6_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv7_1", "acnet-b.Net.conv7_2", "acnet-b.Net.conv7_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv8_1", "acnet-b.Net.conv8_2", "acnet-b.Net.conv8_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv9_1", "acnet-b.Net.conv9_2", "acnet-b.Net.conv9_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv10_1", "acnet-b.Net.conv10_2", "acnet-b.Net.conv10_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv11_1", "acnet-b.Net.conv11_2", "acnet-b.Net.conv11_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv12_1", "acnet-b.Net.conv12_2", "acnet-b.Net.conv12_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv13_1", "acnet-b.Net.conv13_2", "acnet-b.Net.conv13_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv14_1", "acnet-b.Net.conv14_2", "acnet-b.Net.conv14_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv15_1", "acnet-b.Net.conv15_2", "acnet-b.Net.conv15_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv16_1", "acnet-b.Net.conv16_2", "acnet-b.Net.conv16_3", "acnet-b.Net.ReLU", "acnet-b.Net.conv17_1", "acnet-b.Net.conv17_2", "acnet-b.Net.conv17_3", "acnet-b.Net.ReLU", "acnet-b.Net.upsample", "acnet-b.Net.ReLU", "acnet-b.Net.upsample", "acnet-b.Net.ReLU", "acnet-b.Net.conv18_1", "acnet-b.Net.conv18_2", "acnet-b.Net.conv19_1", "acnet-b.Net.conv19_2", "acnet-b.Net.ReLU", "acnet-b.Net.conv20", "acnet-b.Net.conv21", "acnet-b.Net.conv22", "acnet-b.Net.add_mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "scale", ")", ":", "\n", "        ", "x0", "=", "self", ".", "sub_mean", "(", "x", ")", "\n", "x1_1", "=", "self", ".", "conv1_1", "(", "x0", ")", "\n", "x1_2", "=", "self", ".", "conv1_2", "(", "x0", ")", "\n", "x1_3", "=", "self", ".", "conv1_3", "(", "x0", ")", "\n", "x1", "=", "x1_1", "+", "x1_2", "+", "x1_3", "\n", "x1_tcw", "=", "self", ".", "ReLU", "(", "x1", ")", "\n", "x2_1", "=", "self", ".", "conv2_1", "(", "x1_tcw", ")", "\n", "x2_2", "=", "self", ".", "conv2_2", "(", "x1_tcw", ")", "\n", "x2_3", "=", "self", ".", "conv2_3", "(", "x1_tcw", ")", "\n", "x2", "=", "x2_1", "+", "x2_2", "+", "x2_3", "\n", "x2_tcw", "=", "self", ".", "ReLU", "(", "x2", ")", "\n", "x3_1", "=", "self", ".", "conv3_1", "(", "x2_tcw", ")", "\n", "x3_2", "=", "self", ".", "conv3_2", "(", "x2_tcw", ")", "\n", "x3_3", "=", "self", ".", "conv3_3", "(", "x2_tcw", ")", "\n", "x3", "=", "x3_1", "+", "x3_2", "+", "x3_3", "\n", "x3_tcw", "=", "self", ".", "ReLU", "(", "x3", ")", "\n", "x4_1", "=", "self", ".", "conv4_1", "(", "x3_tcw", ")", "\n", "x4_2", "=", "self", ".", "conv4_2", "(", "x3_tcw", ")", "\n", "x4_3", "=", "self", ".", "conv4_3", "(", "x3_tcw", ")", "\n", "x4", "=", "x4_1", "+", "x4_2", "+", "x4_3", "\n", "x4_tcw", "=", "self", ".", "ReLU", "(", "x4", ")", "\n", "x5_1", "=", "self", ".", "conv5_1", "(", "x4_tcw", ")", "\n", "x5_2", "=", "self", ".", "conv5_2", "(", "x4_tcw", ")", "\n", "x5_3", "=", "self", ".", "conv5_3", "(", "x4_tcw", ")", "\n", "x5", "=", "x5_1", "+", "x5_2", "+", "x5_3", "\n", "x5_tcw", "=", "self", ".", "ReLU", "(", "x5", ")", "\n", "x6_1", "=", "self", ".", "conv6_1", "(", "x5_tcw", ")", "\n", "x6_2", "=", "self", ".", "conv6_2", "(", "x5_tcw", ")", "\n", "x6_3", "=", "self", ".", "conv6_3", "(", "x5_tcw", ")", "\n", "x6", "=", "x6_1", "+", "x6_2", "+", "x6_3", "\n", "x6_tcw", "=", "self", ".", "ReLU", "(", "x6", ")", "\n", "x7_1", "=", "self", ".", "conv7_1", "(", "x6_tcw", ")", "\n", "x7_2", "=", "self", ".", "conv7_2", "(", "x6_tcw", ")", "\n", "x7_3", "=", "self", ".", "conv7_3", "(", "x6_tcw", ")", "\n", "x7", "=", "x7_1", "+", "x7_2", "+", "x7_3", "\n", "x7_tcw", "=", "self", ".", "ReLU", "(", "x7", ")", "\n", "x8_1", "=", "self", ".", "conv8_1", "(", "x7_tcw", ")", "\n", "x8_2", "=", "self", ".", "conv8_2", "(", "x7_tcw", ")", "\n", "x8_3", "=", "self", ".", "conv8_3", "(", "x7_tcw", ")", "\n", "x8", "=", "x8_1", "+", "x8_2", "+", "x8_3", "\n", "x8_tcw", "=", "self", ".", "ReLU", "(", "x8", ")", "\n", "x9_1", "=", "self", ".", "conv9_1", "(", "x8_tcw", ")", "\n", "x9_2", "=", "self", ".", "conv9_2", "(", "x8_tcw", ")", "\n", "x9_3", "=", "self", ".", "conv9_3", "(", "x8_tcw", ")", "\n", "x9", "=", "x9_1", "+", "x9_2", "+", "x9_3", "\n", "x9_tcw", "=", "self", ".", "ReLU", "(", "x9", ")", "\n", "x10_1", "=", "self", ".", "conv10_1", "(", "x9_tcw", ")", "\n", "x10_2", "=", "self", ".", "conv10_2", "(", "x9_tcw", ")", "\n", "x10_3", "=", "self", ".", "conv10_3", "(", "x9_tcw", ")", "\n", "x10", "=", "x10_1", "+", "x10_2", "+", "x10_3", "\n", "x10_tcw", "=", "self", ".", "ReLU", "(", "x10", ")", "\n", "x11_1", "=", "self", ".", "conv11_1", "(", "x10_tcw", ")", "\n", "x11_2", "=", "self", ".", "conv11_2", "(", "x10_tcw", ")", "\n", "x11_3", "=", "self", ".", "conv11_3", "(", "x10_tcw", ")", "\n", "x11", "=", "x11_1", "+", "x11_2", "+", "x11_3", "\n", "x11_tcw", "=", "self", ".", "ReLU", "(", "x11", ")", "\n", "x12_1", "=", "self", ".", "conv12_1", "(", "x11_tcw", ")", "\n", "x12_2", "=", "self", ".", "conv12_2", "(", "x11_tcw", ")", "\n", "x12_3", "=", "self", ".", "conv12_3", "(", "x11_tcw", ")", "\n", "x12", "=", "x12_1", "+", "x12_2", "+", "x12_3", "\n", "x12_tcw", "=", "self", ".", "ReLU", "(", "x12", ")", "\n", "x13_1", "=", "self", ".", "conv13_1", "(", "x12_tcw", ")", "\n", "x13_2", "=", "self", ".", "conv13_2", "(", "x12_tcw", ")", "\n", "x13_3", "=", "self", ".", "conv13_3", "(", "x12_tcw", ")", "\n", "x13", "=", "x13_1", "+", "x13_2", "+", "x13_3", "\n", "x13_tcw", "=", "self", ".", "ReLU", "(", "x13", ")", "\n", "x14_1", "=", "self", ".", "conv14_1", "(", "x13_tcw", ")", "\n", "x14_2", "=", "self", ".", "conv14_2", "(", "x13_tcw", ")", "\n", "x14_3", "=", "self", ".", "conv14_3", "(", "x13_tcw", ")", "\n", "x14", "=", "x14_1", "+", "x14_2", "+", "x14_3", "\n", "x14_tcw", "=", "self", ".", "ReLU", "(", "x14", ")", "\n", "x15_1", "=", "self", ".", "conv15_1", "(", "x14_tcw", ")", "\n", "x15_2", "=", "self", ".", "conv15_2", "(", "x14_tcw", ")", "\n", "x15_3", "=", "self", ".", "conv15_3", "(", "x14_tcw", ")", "\n", "x15", "=", "x15_1", "+", "x15_2", "+", "x15_3", "\n", "x15_tcw", "=", "self", ".", "ReLU", "(", "x15", ")", "\n", "x16_1", "=", "self", ".", "conv16_1", "(", "x15_tcw", ")", "\n", "x16_2", "=", "self", ".", "conv16_2", "(", "x15_tcw", ")", "\n", "x16_3", "=", "self", ".", "conv16_3", "(", "x15_tcw", ")", "\n", "x16", "=", "x16_1", "+", "x16_2", "+", "x16_3", "\n", "x16_tcw", "=", "self", ".", "ReLU", "(", "x16", ")", "\n", "x17_1", "=", "self", ".", "conv17_1", "(", "x16_tcw", ")", "\n", "x17_2", "=", "self", ".", "conv17_2", "(", "x16_tcw", ")", "\n", "x17_3", "=", "self", ".", "conv17_3", "(", "x16_tcw", ")", "\n", "x17", "=", "x17_1", "+", "x17_2", "+", "x17_3", "\n", "x17", "=", "x1", "+", "x2", "+", "x3", "+", "x4", "+", "x5", "+", "x6", "+", "x7", "+", "x8", "+", "x9", "+", "x10", "+", "x11", "+", "x12", "+", "x13", "+", "x14", "+", "x15", "+", "x16", "+", "x17", "#tcw", "\n", "x17_tcw", "=", "self", ".", "ReLU", "(", "x17", ")", "\n", "temp", "=", "self", ".", "upsample", "(", "x17_tcw", ",", "scale", "=", "scale", ")", "\n", "temp1", "=", "self", ".", "ReLU", "(", "temp", ")", "\n", "x111", "=", "self", ".", "upsample", "(", "x1_tcw", ",", "scale", "=", "scale", ")", "\n", "temp2", "=", "self", ".", "ReLU", "(", "x111", ")", "\n", "x18_1", "=", "self", ".", "conv18_1", "(", "temp1", ")", "\n", "x18_2", "=", "self", ".", "conv18_2", "(", "temp2", ")", "\n", "x19_1", "=", "self", ".", "conv19_1", "(", "x18_1", ")", "\n", "x19_2", "=", "self", ".", "conv19_2", "(", "x18_2", ")", "\n", "x19", "=", "x19_1", "+", "x19_2", "\n", "temp3", "=", "self", ".", "ReLU", "(", "x19", ")", "\n", "x20", "=", "self", ".", "conv20", "(", "temp3", ")", "\n", "x21", "=", "self", ".", "conv21", "(", "x20", ")", "\n", "x22", "=", "self", ".", "conv22", "(", "x21", ")", "\n", "out", "=", "self", ".", "add_mean", "(", "x22", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.tcw_sample.parse_args": [[18, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--group\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample_dir\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"dataset/Urban100\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--shave\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.tcw_sample.save_image": [[32, 37], ["tensor.cpu.cpu", "tensor.cpu.mul().clamp().byte().permute().numpy", "PIL.Image.fromarray", "Image.fromarray.save", "tensor.cpu.mul().clamp().byte().permute", "tensor.cpu.mul().clamp().byte", "tensor.cpu.mul().clamp", "tensor.cpu.mul"], "function", ["None"], ["", "def", "save_image", "(", "tensor", ",", "filename", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "cpu", "(", ")", "\n", "ndarr", "=", "tensor", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.tcw_sample.psnr": [[38, 48], ["tcw_sample.psnr.im2double"], "function", ["None"], ["", "def", "psnr", "(", "im1", ",", "im2", ")", ":", "#tcw201904101621", "\n", "    ", "def", "im2double", "(", "im", ")", ":", "\n", "        ", "min_val", ",", "max_val", "=", "0", ",", "255", "\n", "out", "=", "(", "im", ".", "astype", "(", "np", ".", "float64", ")", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "return", "out", "\n", "\n", "", "im1", "=", "im2double", "(", "im1", ")", "\n", "im2", "=", "im2double", "(", "im2", ")", "\n", "psnr", "=", "measure", ".", "compare_psnr", "(", "im1", ",", "im2", ",", "data_range", "=", "1", ")", "\n", "return", "psnr", "\n", "#tcw20190413043", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.tcw_sample.calculate_ssim": [[49, 72], ["ValueError", "tcw_sample.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "tcw_sample.ssim", "tcw_sample.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.tcw_sample.ssim": [[73, 94], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.tcw_sample.rgb2ycbcr": [[94, 117], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''\n    same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.tcw_sample.sample": [[118, 242], ["enumerate", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tcw_sample.save_image", "tcw_sample.save_image", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte().permute().numpy", "net().detach().squeeze.cpu().mul().clamp().byte().permute().numpy", "tcw_sample.rgb2ycbcr", "tcw_sample.rgb2ycbcr", "time.time", "torch.tensor", "torch.tensor", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch.to.to", "net().detach", "torch.tensor().to", "torch.tensor().to", "result[].copy_", "result[].copy_", "result[].copy_", "result[].copy_", "time.time", "time.time", "lr.squeeze.unsqueeze().to", "net().detach().squeeze", "lr.squeeze.squeeze", "time.time", "[].split", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tcw_sample.psnr", "len", "tcw_sample.calculate_ssim", "len", "lr.squeeze.size", "int", "int", "cfg.test_data_dir.split", "cfg.test_data_dir.split", "name.replace", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte().permute", "net().detach().squeeze.cpu().mul().clamp().byte().permute", "net", "torch.tensor", "torch.tensor", "lr.squeeze.unsqueeze", "net().detach", "cfg.ckpt_path.split", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte", "net().detach().squeeze.cpu().mul().clamp().byte", "net", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp", "net().detach().squeeze.cpu().mul().clamp", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul", "net().detach().squeeze.cpu().mul", "hr.cpu().mul().clamp().byte().permute().numpy.cpu", "net().detach().squeeze.cpu"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.save_image", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.save_image", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.rgb2ycbcr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.rgb2ycbcr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.psnr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.calculate_ssim"], ["", "def", "sample", "(", "net", ",", "device", ",", "dataset", ",", "cfg", ")", ":", "\n", "    ", "scale", "=", "cfg", ".", "scale", "\n", "mean_psnr", "=", "0", "\n", "mean_psnr1", "=", "0", "\n", "mean_psnr2", "=", "0", "\n", "mean_ssim", "=", "0", "#tcw20190413047", "\n", "for", "step", ",", "(", "hr", ",", "lr", ",", "name", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "\"DIV2K\"", "in", "dataset", ".", "name", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "h", ",", "w", "=", "lr", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "h_half", ",", "w_half", "=", "int", "(", "h", "/", "2", ")", ",", "int", "(", "w", "/", "2", ")", "\n", "h_chop", ",", "w_chop", "=", "h_half", "+", "cfg", ".", "shave", ",", "w_half", "+", "cfg", ".", "shave", "\n", "\n", "lr_patch", "=", "torch", ".", "tensor", "(", "(", "4", ",", "3", ",", "h_chop", ",", "w_chop", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "lr_patch", "[", "0", "]", ".", "copy_", "(", "lr", "[", ":", ",", "0", ":", "h_chop", ",", "0", ":", "w_chop", "]", ")", "\n", "lr_patch", "[", "1", "]", ".", "copy_", "(", "lr", "[", ":", ",", "0", ":", "h_chop", ",", "w", "-", "w_chop", ":", "w", "]", ")", "\n", "lr_patch", "[", "2", "]", ".", "copy_", "(", "lr", "[", ":", ",", "h", "-", "h_chop", ":", "h", ",", "0", ":", "w_chop", "]", ")", "\n", "lr_patch", "[", "3", "]", ".", "copy_", "(", "lr", "[", ":", ",", "h", "-", "h_chop", ":", "h", ",", "w", "-", "w_chop", ":", "w", "]", ")", "\n", "lr_patch", "=", "lr_patch", ".", "to", "(", "device", ")", "\n", "\n", "sr", "=", "net", "(", "lr_patch", ",", "cfg", ".", "scale", ")", ".", "detach", "(", ")", "\n", "\n", "h", ",", "h_half", ",", "h_chop", "=", "h", "*", "scale", ",", "h_half", "*", "scale", ",", "h_chop", "*", "scale", "\n", "w", ",", "w_half", ",", "w_chop", "=", "w", "*", "scale", ",", "w_half", "*", "scale", ",", "w_chop", "*", "scale", "\n", "\n", "result", "=", "torch", ".", "tensor", "(", "(", "3", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "result", "[", ":", ",", "0", ":", "h_half", ",", "0", ":", "w_half", "]", ".", "copy_", "(", "sr", "[", "0", ",", ":", ",", "0", ":", "h_half", ",", "0", ":", "w_half", "]", ")", "\n", "result", "[", ":", ",", "0", ":", "h_half", ",", "w_half", ":", "w", "]", ".", "copy_", "(", "sr", "[", "1", ",", ":", ",", "0", ":", "h_half", ",", "w_chop", "-", "w", "+", "w_half", ":", "w_chop", "]", ")", "\n", "result", "[", ":", ",", "h_half", ":", "h", ",", "0", ":", "w_half", "]", ".", "copy_", "(", "sr", "[", "2", ",", ":", ",", "h_chop", "-", "h", "+", "h_half", ":", "h_chop", ",", "0", ":", "w_half", "]", ")", "\n", "result", "[", ":", ",", "h_half", ":", "h", ",", "w_half", ":", "w", "]", ".", "copy_", "(", "sr", "[", "3", ",", ":", ",", "h_chop", "-", "h", "+", "h_half", ":", "h_chop", ",", "w_chop", "-", "w", "+", "w_half", ":", "w_chop", "]", ")", "\n", "sr", "=", "result", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "#print '--------'", "\n", "#print lr.size() #e.g (3,512,512)", "\n", "lr", "=", "lr", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "#print lr.size() #(1,3,512,512)", "\n", "#b = net(lr, cfg.scale).detach()", "\n", "#print b.size()  #(1,3,1024,1024)", "\n", "sr", "=", "net", "(", "lr", ",", "cfg", ".", "scale", ")", ".", "detach", "(", ")", ".", "squeeze", "(", "0", ")", "#detach() break the reversed transformation.", "\n", "#print sr.size() #(3,1024,1024)", "\n", "lr", "=", "lr", ".", "squeeze", "(", "0", ")", "\n", "#print lr.size() #(3,512,512)", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "#print 'step is %d, mean_psnr is %d' % (step,mean_psrn) ", "\n", "#print cfg.ckpt_path #./checkpoint/carn.pth", "\n", "#print cfg.ckpt_path.split(\".\") #['', '/checkpoint/carn', 'pth']", "\n", "#print cfg.ckpt_path.split(\".\")[0] # ''", "\n", "#print cfg.ckpt_path.split(\".\")[0].split(\"/\") #''", "\n", "#print cfg.ckpt_path.split(\".\")[0].split(\"/\")[-1] #''", "\n", "", "model_name", "=", "cfg", ".", "ckpt_path", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "#''", "\n", "#print ", "\n", "#print 'a'", "\n", "#print '%s', %(model_name)", "\n", "#print model_name", "\n", "sr_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "sample_dir", ",", "\n", "model_name", ",", "\n", "cfg", ".", "test_data_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "\"x{}\"", ".", "format", "(", "cfg", ".", "scale", ")", ",", "\n", "\"SR\"", ")", "\n", "hr_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "sample_dir", ",", "\n", "model_name", ",", "\n", "cfg", ".", "test_data_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "\"x{}\"", ".", "format", "(", "cfg", ".", "scale", ")", ",", "\n", "\"HR\"", ")", "\n", "#print sr_dir #sample/Urban100/x2/SR", "\n", "#print hr_dir #sample/Urban100/x2/HR", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sr_dir", ")", ":", "#201904072208 tcw", "\n", "#os.makedirs(sr_dir, exist_ok=Ture)             #201904072211tcw, it is given at first, but it is wrong. So, I mark it.", "\n", "#os.makedirs(hr_dir, exist_ok=Ture)", "\n", "            ", "os", ".", "makedirs", "(", "sr_dir", ",", "mode", "=", "0o777", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "hr_dir", ")", ":", "#201904072208 tcw", "\n", "            ", "os", ".", "makedirs", "(", "hr_dir", ",", "mode", "=", "0o777", ")", "\n", "\n", "", "sr_im_path", "=", "os", ".", "path", ".", "join", "(", "sr_dir", ",", "\"{}\"", ".", "format", "(", "name", ".", "replace", "(", "\"HR\"", ",", "\"SR\"", ")", ")", ")", "#use SR instead of HR in the name of high-resolution image", "\n", "hr_im_path", "=", "os", ".", "path", ".", "join", "(", "hr_dir", ",", "\"{}\"", ".", "format", "(", "name", ")", ")", "#name is a name of high-resolution image", "\n", "#print sr_im_path #sample/Urban100/x2/SR/img_100_SRF_2_SR.png", "\n", "#print hr_im_path #sample/Urban100/x2/HR/img_100_SRF_2_HR.png", "\n", "save_image", "(", "sr", ",", "sr_im_path", ")", "\n", "save_image", "(", "hr", ",", "hr_im_path", ")", "\n", "#201904111731tcw y", "\n", "#sr_Y = cv2.imread(sr_im_path,cv2.IMREAD_COLOR)", "\n", "#sr_Y = cv2.cvtColor(sr_Y,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#sr_Y = rgb2ycbcr(sr_Y)", "\n", "#sr_Y = sr_Y[:,:,0] #y", "\n", "#print sr_Y.shape", "\n", "#hr_Y = cv2.imread(hr_im_path,cv2.IMREAD_COLOR)", "\n", "#hr_Y = cv2.cvtColor(hr_Y,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#hr_Y = rgb2ycbcr(hr_Y)", "\n", "#hr_Y = hr_Y[:,:,0] #y ", "\n", "#print hr_Y.shape", "\n", "hr", "=", "hr", ".", "cpu", "(", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "#(644.1024,3) is the same dimensional with the size of input test image in dataset.py. #201904101617tcw", "\n", "sr", "=", "sr", ".", "cpu", "(", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "#tcw201904101617", "\n", "bnd", "=", "scale", "#tcw", "\n", "#''''''''''''", "\n", "#hr_Y1 = cv2.cvtColor(hr,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#sr_Y1 = cv2.cvtColor(sr,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#hr_Y2 =hr_Y1[:,:,0]", "\n", "#sr_Y2 = sr_Y1[:,:,0]", "\n", "#hr_Y2 = hr_Y2[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#sr_Y2 = sr_Y2[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#''''''''''''", "\n", "#im1 = hr[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#im2 = sr[bnd:-bnd, bnd:-bnd] #tcw", "\n", "sr_1", "=", "rgb2ycbcr", "(", "sr", ")", "\n", "hr_1", "=", "rgb2ycbcr", "(", "hr", ")", "\n", "#sr_Y = sr_Y[bnd:-bnd,bnd:-bnd]#tcw201904111837", "\n", "#hr_Y = hr_Y[bnd:-bnd,bnd:-bnd]#tcw201904111837", "\n", "sr_1", "=", "sr_1", "[", "bnd", ":", "-", "bnd", ",", "bnd", ":", "-", "bnd", "]", "#tcw201904111837", "\n", "hr_1", "=", "hr_1", "[", "bnd", ":", "-", "bnd", ",", "bnd", ":", "-", "bnd", "]", "#tcw201904111837", "\n", "#mean_psnr1 +=psnr(sr_Y,hr_Y)/len(dataset)", "\n", "mean_psnr2", "+=", "psnr", "(", "sr_1", ",", "hr_1", ")", "/", "len", "(", "dataset", ")", "\n", "mean_ssim", "+=", "calculate_ssim", "(", "sr_1", ",", "hr_1", ")", "/", "len", "(", "dataset", ")", "\n", "#print mean_psnr2, mean_ssim, len(dataset)", "\n", "#print len(dataset) #it is only used to debug the code.", "\n", "#mean_psnr += psnr(im1, im2) / len(dataset) #tcw", "\n", "#mean_psnr2 +=psnr(sr_Y2,hr_Y2)/len(dataset)", "\n", "#print(\"Saved {} ({}x{} -> {}x{}, {:.3f}s)\"", "\n", "# .format(sr_im_path, lr.shape[1], lr.shape[2], sr.shape[1], sr.shape[2], t2-t1))", "\n", "#Saved sample/Urban100/x2/SR/img_100_SRF_2_SR.png (512x512 -> 1024x1024, 0.007s)", "\n", "#print mean_psnr, mean_psnr1, mean_psnr2 #tcw", "\n", "#print mean_psnr1, mean_psnr2", "\n", "", "print", "(", "mean_psnr2", ",", "mean_ssim", ")", "\n", "#print '-------------------'z", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.tcw_sample.main": [[244, 281], ["importlib.import_module", "importlib.import_module.Net", "print", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "net.to.load_state_dict", "torch.device", "torch.device", "net.to.to", "dataset.TestDataset", "tcw_sample.sample", "json.dumps", "vars", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.sample"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "module", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "cfg", ".", "model", ")", ")", "\n", "''' \n    net = module.Net(multi_scale=False, \n                     group=cfg.group)\n    '''", "\n", "net", "=", "module", ".", "Net", "(", "scale", "=", "cfg", ".", "scale", ",", "\n", "group", "=", "cfg", ".", "group", ")", "\n", "'''\n    #net = MyModel\n    params = list(net.parameters())\n    k = 0\n    for i in params:\n        l = 1\n\t#print('' + str(list(i.size())))\n\tfor j in i.size():\n            l *= j\n\t    #print('' + str(l))\n\t    k = k + l\n\tprint(''+ str(k))\n    '''", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "cfg", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "#print cfg information according order.", "\n", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "ckpt_path", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "\n", "# name = k[7:] # remove \"module.\"", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "net", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "#os.environ['CUDA_VISIBLE_DEVICES']='0,1'", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "#0 is number of gpu, if this gpu1 is work, you can set it into 1 (device=torch.device(\"cuda:1\" if torch.cuda.is_available() else \"cpu\"))", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "#summary(net,[(3,240, 160),(3,1000, 2000)]) #tcw20190623", "\n", "#summary(net,[torch.zeros(1,3,240,160),2],2)", "\n", "dataset", "=", "TestDataset", "(", "cfg", ".", "test_data_dir", ",", "cfg", ".", "scale", ")", "\n", "sample", "(", "net", ",", "device", ",", "dataset", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.train.parse_args": [[9, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_name\"", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--print_interval\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "#original data is 1000", "\n", "parser", ".", "add_argument", "(", "\"--train_data_path\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"dataset/DIV2K_train.h5\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_dir\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"checkpoint\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample_dir\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"sample/\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--num_gpu\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--shave\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "#moren shi 20 $tcw20191222", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--verbose\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--group\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--patch_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_steps\"", ",", "type", "=", "int", ",", "default", "=", "200000", ")", "\n", "parser", ".", "add_argument", "(", "\"--decay\"", ",", "type", "=", "int", ",", "default", "=", "150000", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "parser", ".", "add_argument", "(", "\"--clip\"", ",", "type", "=", "float", ",", "default", "=", "10", ")", "\n", "\n", "#parser.add_argument(\"--loss_fn\", type=str, ", "\n", "#choices=[\"MSE\", \"L1\", \"SmoothL1\"], default=\"L1\") #tcw201904082029", "\n", "parser", ".", "add_argument", "(", "\"--loss_fn\"", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"MSE\"", ",", "\"L1\"", ",", "\"SmoothL1\"", "]", ",", "default", "=", "\"MSE\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.train.main": [[43, 51], ["print", "solver.Solver", "solver.Solver.fit", "importlib.import_module", "json.dumps", "vars"], "function", ["None"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "# dynamic import using --model argument", "\n", "    ", "net", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "cfg", ".", "model", ")", ")", ".", "Net", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "cfg", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n", "solver", "=", "Solver", "(", "net", ",", "cfg", ")", "\n", "#print 'ds'", "\n", "solver", ".", "fit", "(", ")", "\n", "#print 'sdsddwdew'", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.dataset.TrainDataset.__init__": [[42, 62], ["torch.Dataset.__init__", "h5py.File", "h5py.File.close", "torchvision.Compose", "h5f[].values", "torchvision.ToTensor", "h5f[].values", "h5f[].values"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "size", ",", "scale", ")", ":", "\n", "        ", "super", "(", "TrainDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "size", "=", "size", "\n", "h5f", "=", "h5py", ".", "File", "(", "path", ",", "\"r\"", ")", "\n", "\n", "self", ".", "hr", "=", "[", "v", "[", ":", "]", "for", "v", "in", "h5f", "[", "\"HR\"", "]", ".", "values", "(", ")", "]", "\n", "# perform multi-scale training", "\n", "if", "scale", "==", "0", ":", "\n", "            ", "self", ".", "scale", "=", "[", "2", ",", "3", ",", "4", "]", "\n", "self", ".", "lr", "=", "[", "[", "v", "[", ":", "]", "for", "v", "in", "h5f", "[", "\"X{}\"", ".", "format", "(", "i", ")", "]", ".", "values", "(", ")", "]", "for", "i", "in", "self", ".", "scale", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", "=", "[", "scale", "]", "\n", "self", ".", "lr", "=", "[", "[", "v", "[", ":", "]", "for", "v", "in", "h5f", "[", "\"X{}\"", ".", "format", "(", "scale", ")", "]", ".", "values", "(", ")", "]", "]", "\n", "\n", "", "h5f", ".", "close", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.dataset.TrainDataset.__getitem__": [[64, 72], ["dataset.random_crop", "dataset.random_flip_and_rotate", "enumerate", "enumerate", "dataset.TrainDataset.transform", "dataset.TrainDataset.transform"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_crop", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_flip_and_rotate"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "size", "=", "self", ".", "size", "\n", "item", "=", "[", "(", "self", ".", "hr", "[", "index", "]", ",", "self", ".", "lr", "[", "i", "]", "[", "index", "]", ")", "for", "i", ",", "_", "in", "enumerate", "(", "self", ".", "lr", ")", "]", "\n", "#i is the number, _ is the context", "\n", "item", "=", "[", "random_crop", "(", "hr", ",", "lr", ",", "size", ",", "self", ".", "scale", "[", "i", "]", ")", "for", "i", ",", "(", "hr", ",", "lr", ")", "in", "enumerate", "(", "item", ")", "]", "\n", "item", "=", "[", "random_flip_and_rotate", "(", "hr", ",", "lr", ")", "for", "hr", ",", "lr", "in", "item", "]", "\n", "\n", "return", "[", "(", "self", ".", "transform", "(", "hr", ")", ",", "self", ".", "transform", "(", "lr", ")", ")", "for", "hr", ",", "lr", "in", "item", "]", "#tranform array (hr,lr) into tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.dataset.TrainDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.dataset.TestDataset.__init__": [[78, 98], ["torch.Dataset.__init__", "dataset.TestDataset.hr.sort", "dataset.TestDataset.lr.sort", "torchvision.Compose", "dirname.split", "glob.glob", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dirname", ",", "scale", ")", ":", "\n", "        ", "super", "(", "TestDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "dirname", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "if", "\"DIV\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "hr", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\"{}_HR\"", ".", "format", "(", "dirname", ")", ",", "\"*.png\"", ")", ")", "\n", "self", ".", "lr", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\"{}_LR_bicubic\"", ".", "format", "(", "dirname", ")", ",", "\n", "\"X{}/*.png\"", ".", "format", "(", "scale", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "all_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"x{}/*.png\"", ".", "format", "(", "scale", ")", ")", ")", "\n", "self", ".", "hr", "=", "[", "name", "for", "name", "in", "all_files", "if", "\"HR\"", "in", "name", "]", "\n", "self", ".", "lr", "=", "[", "name", "for", "name", "in", "all_files", "if", "\"LR\"", "in", "name", "]", "\n", "\n", "", "self", ".", "hr", ".", "sort", "(", ")", "\n", "self", ".", "lr", ".", "sort", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.dataset.TestDataset.__getitem__": [[100, 117], ["PIL.Image.open", "PIL.Image.open", "hr.convert.convert.convert", "lr.convert.convert.convert", "dataset.TestDataset.hr[].split", "dataset.TestDataset.transform", "dataset.TestDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "hr", "=", "Image", ".", "open", "(", "self", ".", "hr", "[", "index", "]", ")", "\n", "lr", "=", "Image", ".", "open", "(", "self", ".", "lr", "[", "index", "]", ")", "\n", "'''\n        #This is only used to test code, which makes me more know the code. \n        ss = np.asarray(hr) (644,1024,3)\n        print ss.shape\n        '''", "\n", "hr", "=", "hr", ".", "convert", "(", "\"RGB\"", ")", "\n", "lr", "=", "lr", ".", "convert", "(", "\"RGB\"", ")", "\n", "'''\n        tss = np.asarray(hr) (644,1024,3)\n        print tss.shape\n        '''", "\n", "filename", "=", "self", ".", "hr", "[", "index", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "#keep the last string, which is after /. For example, a= 'aaa/asds.bmp', a.split(\"/\")[-1] = asds ", "\n", "return", "self", ".", "transform", "(", "hr", ")", ",", "self", ".", "transform", "(", "lr", ")", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.dataset.TestDataset.__len__": [[118, 120], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.dataset.random_crop": [[10, 22], ["random.randint", "random.randint", "lr[].copy", "hr[].copy"], "function", ["None"], ["def", "random_crop", "(", "hr", ",", "lr", ",", "size", ",", "scale", ")", ":", "\n", "    ", "h", ",", "w", "=", "lr", ".", "shape", "[", ":", "-", "1", "]", "#h,w,channel [:-1] beside the final element, such as channel ", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "size", ")", "#random number", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "size", ")", "\n", "\n", "hsize", "=", "size", "*", "scale", "\n", "hx", ",", "hy", "=", "x", "*", "scale", ",", "y", "*", "scale", "\n", "\n", "crop_lr", "=", "lr", "[", "y", ":", "y", "+", "size", ",", "x", ":", "x", "+", "size", "]", ".", "copy", "(", ")", "#low-resolution patch", "\n", "crop_hr", "=", "hr", "[", "hy", ":", "hy", "+", "hsize", ",", "hx", ":", "hx", "+", "hsize", "]", ".", "copy", "(", ")", "#high-resolution patch", "\n", "\n", "return", "crop_hr", ",", "crop_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x3.dataset.random_flip_and_rotate": [[24, 39], ["random.choice", "numpy.rot90", "numpy.rot90", "random.random", "numpy.flipud", "numpy.flipud", "random.random", "numpy.fliplr", "numpy.fliplr", "np.fliplr.copy", "np.fliplr.copy"], "function", ["None"], ["", "def", "random_flip_and_rotate", "(", "im1", ",", "im2", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "im1", "=", "np", ".", "flipud", "(", "im1", ")", "#left and right move", "\n", "im2", "=", "np", ".", "flipud", "(", "im2", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "#up and down move", "\n", "        ", "im1", "=", "np", ".", "fliplr", "(", "im1", ")", "\n", "im2", "=", "np", ".", "fliplr", "(", "im2", ")", "\n", "\n", "", "angle", "=", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "#rote", "\n", "im1", "=", "np", ".", "rot90", "(", "im1", ",", "angle", ")", "\n", "im2", "=", "np", ".", "rot90", "(", "im2", ",", "angle", ")", "\n", "\n", "# have to copy before be called by transform function", "\n", "return", "im1", ".", "copy", "(", ")", ",", "im2", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.tcw_sample.parse_args": [[18, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--group\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample_dir\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"dataset/Urban100\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--shave\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.tcw_sample.save_image": [[32, 37], ["tensor.cpu.cpu", "tensor.cpu.mul().clamp().byte().permute().numpy", "PIL.Image.fromarray", "Image.fromarray.save", "tensor.cpu.mul().clamp().byte().permute", "tensor.cpu.mul().clamp().byte", "tensor.cpu.mul().clamp", "tensor.cpu.mul"], "function", ["None"], ["", "def", "save_image", "(", "tensor", ",", "filename", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "cpu", "(", ")", "\n", "ndarr", "=", "tensor", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.tcw_sample.psnr": [[38, 48], ["tcw_sample.psnr.im2double"], "function", ["None"], ["", "def", "psnr", "(", "im1", ",", "im2", ")", ":", "#tcw201904101621", "\n", "    ", "def", "im2double", "(", "im", ")", ":", "\n", "        ", "min_val", ",", "max_val", "=", "0", ",", "255", "\n", "out", "=", "(", "im", ".", "astype", "(", "np", ".", "float64", ")", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "return", "out", "\n", "\n", "", "im1", "=", "im2double", "(", "im1", ")", "\n", "im2", "=", "im2double", "(", "im2", ")", "\n", "psnr", "=", "measure", ".", "compare_psnr", "(", "im1", ",", "im2", ",", "data_range", "=", "1", ")", "\n", "return", "psnr", "\n", "#tcw20190413043", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.tcw_sample.calculate_ssim": [[49, 72], ["ValueError", "tcw_sample.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "tcw_sample.ssim", "tcw_sample.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.tcw_sample.ssim": [[73, 94], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.tcw_sample.rgb2ycbcr": [[94, 117], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''\n    same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.tcw_sample.sample": [[118, 242], ["enumerate", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tcw_sample.save_image", "tcw_sample.save_image", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte().permute().numpy", "net().detach().squeeze.cpu().mul().clamp().byte().permute().numpy", "tcw_sample.rgb2ycbcr", "tcw_sample.rgb2ycbcr", "time.time", "torch.tensor", "torch.tensor", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch.to.to", "net().detach", "torch.tensor().to", "torch.tensor().to", "result[].copy_", "result[].copy_", "result[].copy_", "result[].copy_", "time.time", "time.time", "lr.squeeze.unsqueeze().to", "net().detach().squeeze", "lr.squeeze.squeeze", "time.time", "[].split", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tcw_sample.psnr", "len", "tcw_sample.calculate_ssim", "len", "lr.squeeze.size", "int", "int", "cfg.test_data_dir.split", "cfg.test_data_dir.split", "name.replace", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte().permute", "net().detach().squeeze.cpu().mul().clamp().byte().permute", "net", "torch.tensor", "torch.tensor", "lr.squeeze.unsqueeze", "net().detach", "cfg.ckpt_path.split", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte", "net().detach().squeeze.cpu().mul().clamp().byte", "net", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp", "net().detach().squeeze.cpu().mul().clamp", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul", "net().detach().squeeze.cpu().mul", "hr.cpu().mul().clamp().byte().permute().numpy.cpu", "net().detach().squeeze.cpu"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.save_image", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.save_image", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.rgb2ycbcr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.rgb2ycbcr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.psnr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.calculate_ssim"], ["", "def", "sample", "(", "net", ",", "device", ",", "dataset", ",", "cfg", ")", ":", "\n", "    ", "scale", "=", "cfg", ".", "scale", "\n", "mean_psnr", "=", "0", "\n", "mean_psnr1", "=", "0", "\n", "mean_psnr2", "=", "0", "\n", "mean_ssim", "=", "0", "#tcw20190413047", "\n", "for", "step", ",", "(", "hr", ",", "lr", ",", "name", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "\"DIV2K\"", "in", "dataset", ".", "name", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "h", ",", "w", "=", "lr", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "h_half", ",", "w_half", "=", "int", "(", "h", "/", "2", ")", ",", "int", "(", "w", "/", "2", ")", "\n", "h_chop", ",", "w_chop", "=", "h_half", "+", "cfg", ".", "shave", ",", "w_half", "+", "cfg", ".", "shave", "\n", "\n", "lr_patch", "=", "torch", ".", "tensor", "(", "(", "4", ",", "3", ",", "h_chop", ",", "w_chop", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "lr_patch", "[", "0", "]", ".", "copy_", "(", "lr", "[", ":", ",", "0", ":", "h_chop", ",", "0", ":", "w_chop", "]", ")", "\n", "lr_patch", "[", "1", "]", ".", "copy_", "(", "lr", "[", ":", ",", "0", ":", "h_chop", ",", "w", "-", "w_chop", ":", "w", "]", ")", "\n", "lr_patch", "[", "2", "]", ".", "copy_", "(", "lr", "[", ":", ",", "h", "-", "h_chop", ":", "h", ",", "0", ":", "w_chop", "]", ")", "\n", "lr_patch", "[", "3", "]", ".", "copy_", "(", "lr", "[", ":", ",", "h", "-", "h_chop", ":", "h", ",", "w", "-", "w_chop", ":", "w", "]", ")", "\n", "lr_patch", "=", "lr_patch", ".", "to", "(", "device", ")", "\n", "\n", "sr", "=", "net", "(", "lr_patch", ",", "cfg", ".", "scale", ")", ".", "detach", "(", ")", "\n", "\n", "h", ",", "h_half", ",", "h_chop", "=", "h", "*", "scale", ",", "h_half", "*", "scale", ",", "h_chop", "*", "scale", "\n", "w", ",", "w_half", ",", "w_chop", "=", "w", "*", "scale", ",", "w_half", "*", "scale", ",", "w_chop", "*", "scale", "\n", "\n", "result", "=", "torch", ".", "tensor", "(", "(", "3", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "result", "[", ":", ",", "0", ":", "h_half", ",", "0", ":", "w_half", "]", ".", "copy_", "(", "sr", "[", "0", ",", ":", ",", "0", ":", "h_half", ",", "0", ":", "w_half", "]", ")", "\n", "result", "[", ":", ",", "0", ":", "h_half", ",", "w_half", ":", "w", "]", ".", "copy_", "(", "sr", "[", "1", ",", ":", ",", "0", ":", "h_half", ",", "w_chop", "-", "w", "+", "w_half", ":", "w_chop", "]", ")", "\n", "result", "[", ":", ",", "h_half", ":", "h", ",", "0", ":", "w_half", "]", ".", "copy_", "(", "sr", "[", "2", ",", ":", ",", "h_chop", "-", "h", "+", "h_half", ":", "h_chop", ",", "0", ":", "w_half", "]", ")", "\n", "result", "[", ":", ",", "h_half", ":", "h", ",", "w_half", ":", "w", "]", ".", "copy_", "(", "sr", "[", "3", ",", ":", ",", "h_chop", "-", "h", "+", "h_half", ":", "h_chop", ",", "w_chop", "-", "w", "+", "w_half", ":", "w_chop", "]", ")", "\n", "sr", "=", "result", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "#print '--------'", "\n", "#print lr.size() #e.g (3,512,512)", "\n", "lr", "=", "lr", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "#print lr.size() #(1,3,512,512)", "\n", "#b = net(lr, cfg.scale).detach()", "\n", "#print b.size()  #(1,3,1024,1024)", "\n", "sr", "=", "net", "(", "lr", ",", "cfg", ".", "scale", ")", ".", "detach", "(", ")", ".", "squeeze", "(", "0", ")", "#detach() break the reversed transformation.", "\n", "#print sr.size() #(3,1024,1024)", "\n", "lr", "=", "lr", ".", "squeeze", "(", "0", ")", "\n", "#print lr.size() #(3,512,512)", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "#print 'step is %d, mean_psnr is %d' % (step,mean_psrn) ", "\n", "#print cfg.ckpt_path #./checkpoint/carn.pth", "\n", "#print cfg.ckpt_path.split(\".\") #['', '/checkpoint/carn', 'pth']", "\n", "#print cfg.ckpt_path.split(\".\")[0] # ''", "\n", "#print cfg.ckpt_path.split(\".\")[0].split(\"/\") #''", "\n", "#print cfg.ckpt_path.split(\".\")[0].split(\"/\")[-1] #''", "\n", "", "model_name", "=", "cfg", ".", "ckpt_path", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "#''", "\n", "#print ", "\n", "#print 'a'", "\n", "#print '%s', %(model_name)", "\n", "#print model_name", "\n", "sr_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "sample_dir", ",", "\n", "model_name", ",", "\n", "cfg", ".", "test_data_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "\"x{}\"", ".", "format", "(", "cfg", ".", "scale", ")", ",", "\n", "\"SR\"", ")", "\n", "hr_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "sample_dir", ",", "\n", "model_name", ",", "\n", "cfg", ".", "test_data_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "\"x{}\"", ".", "format", "(", "cfg", ".", "scale", ")", ",", "\n", "\"HR\"", ")", "\n", "#print sr_dir #sample/Urban100/x2/SR", "\n", "#print hr_dir #sample/Urban100/x2/HR", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sr_dir", ")", ":", "#201904072208 tcw", "\n", "#os.makedirs(sr_dir, exist_ok=Ture)             #201904072211tcw, it is given at first, but it is wrong. So, I mark it.", "\n", "#os.makedirs(hr_dir, exist_ok=Ture)", "\n", "            ", "os", ".", "makedirs", "(", "sr_dir", ",", "mode", "=", "0o777", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "hr_dir", ")", ":", "#201904072208 tcw", "\n", "            ", "os", ".", "makedirs", "(", "hr_dir", ",", "mode", "=", "0o777", ")", "\n", "\n", "", "sr_im_path", "=", "os", ".", "path", ".", "join", "(", "sr_dir", ",", "\"{}\"", ".", "format", "(", "name", ".", "replace", "(", "\"HR\"", ",", "\"SR\"", ")", ")", ")", "#use SR instead of HR in the name of high-resolution image", "\n", "hr_im_path", "=", "os", ".", "path", ".", "join", "(", "hr_dir", ",", "\"{}\"", ".", "format", "(", "name", ")", ")", "#name is a name of high-resolution image", "\n", "#print sr_im_path #sample/Urban100/x2/SR/img_100_SRF_2_SR.png", "\n", "#print hr_im_path #sample/Urban100/x2/HR/img_100_SRF_2_HR.png", "\n", "save_image", "(", "sr", ",", "sr_im_path", ")", "\n", "save_image", "(", "hr", ",", "hr_im_path", ")", "\n", "#201904111731tcw y", "\n", "#sr_Y = cv2.imread(sr_im_path,cv2.IMREAD_COLOR)", "\n", "#sr_Y = cv2.cvtColor(sr_Y,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#sr_Y = rgb2ycbcr(sr_Y)", "\n", "#sr_Y = sr_Y[:,:,0] #y", "\n", "#print sr_Y.shape", "\n", "#hr_Y = cv2.imread(hr_im_path,cv2.IMREAD_COLOR)", "\n", "#hr_Y = cv2.cvtColor(hr_Y,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#hr_Y = rgb2ycbcr(hr_Y)", "\n", "#hr_Y = hr_Y[:,:,0] #y ", "\n", "#print hr_Y.shape", "\n", "hr", "=", "hr", ".", "cpu", "(", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "#(644.1024,3) is the same dimensional with the size of input test image in dataset.py. #201904101617tcw", "\n", "sr", "=", "sr", ".", "cpu", "(", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "#tcw201904101617", "\n", "bnd", "=", "scale", "#tcw", "\n", "#''''''''''''", "\n", "#hr_Y1 = cv2.cvtColor(hr,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#sr_Y1 = cv2.cvtColor(sr,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#hr_Y2 =hr_Y1[:,:,0]", "\n", "#sr_Y2 = sr_Y1[:,:,0]", "\n", "#hr_Y2 = hr_Y2[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#sr_Y2 = sr_Y2[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#''''''''''''", "\n", "#im1 = hr[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#im2 = sr[bnd:-bnd, bnd:-bnd] #tcw", "\n", "sr_1", "=", "rgb2ycbcr", "(", "sr", ")", "\n", "hr_1", "=", "rgb2ycbcr", "(", "hr", ")", "\n", "#sr_Y = sr_Y[bnd:-bnd,bnd:-bnd]#tcw201904111837", "\n", "#hr_Y = hr_Y[bnd:-bnd,bnd:-bnd]#tcw201904111837", "\n", "sr_1", "=", "sr_1", "[", "bnd", ":", "-", "bnd", ",", "bnd", ":", "-", "bnd", "]", "#tcw201904111837", "\n", "hr_1", "=", "hr_1", "[", "bnd", ":", "-", "bnd", ",", "bnd", ":", "-", "bnd", "]", "#tcw201904111837", "\n", "#mean_psnr1 +=psnr(sr_Y,hr_Y)/len(dataset)", "\n", "mean_psnr2", "+=", "psnr", "(", "sr_1", ",", "hr_1", ")", "/", "len", "(", "dataset", ")", "\n", "mean_ssim", "+=", "calculate_ssim", "(", "sr_1", ",", "hr_1", ")", "/", "len", "(", "dataset", ")", "\n", "#print mean_psnr2, mean_ssim, len(dataset)", "\n", "#print len(dataset) #it is only used to debug the code.", "\n", "#mean_psnr += psnr(im1, im2) / len(dataset) #tcw", "\n", "#mean_psnr2 +=psnr(sr_Y2,hr_Y2)/len(dataset)", "\n", "#print(\"Saved {} ({}x{} -> {}x{}, {:.3f}s)\"", "\n", "# .format(sr_im_path, lr.shape[1], lr.shape[2], sr.shape[1], sr.shape[2], t2-t1))", "\n", "#Saved sample/Urban100/x2/SR/img_100_SRF_2_SR.png (512x512 -> 1024x1024, 0.007s)", "\n", "#print mean_psnr, mean_psnr1, mean_psnr2 #tcw", "\n", "#print mean_psnr1, mean_psnr2", "\n", "", "print", "(", "mean_psnr2", ",", "mean_ssim", ")", "\n", "#print '-------------------'z", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.tcw_sample.main": [[244, 281], ["importlib.import_module", "importlib.import_module.Net", "print", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "net.to.load_state_dict", "torch.device", "torch.device", "net.to.to", "dataset.TestDataset", "tcw_sample.sample", "json.dumps", "vars", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.sample"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "module", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "cfg", ".", "model", ")", ")", "\n", "''' \n    net = module.Net(multi_scale=False, \n                     group=cfg.group)\n    '''", "\n", "net", "=", "module", ".", "Net", "(", "scale", "=", "cfg", ".", "scale", ",", "\n", "group", "=", "cfg", ".", "group", ")", "\n", "'''\n    #net = MyModel\n    params = list(net.parameters())\n    k = 0\n    for i in params:\n        l = 1\n\t#print('' + str(list(i.size())))\n\tfor j in i.size():\n            l *= j\n\t    #print('' + str(l))\n\t    k = k + l\n\tprint(''+ str(k))\n    '''", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "cfg", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "#print cfg information according order.", "\n", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "ckpt_path", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "\n", "# name = k[7:] # remove \"module.\"", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "net", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "#os.environ['CUDA_VISIBLE_DEVICES']='0,1'", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "#0 is number of gpu, if this gpu1 is work, you can set it into 1 (device=torch.device(\"cuda:1\" if torch.cuda.is_available() else \"cpu\"))", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "#summary(net,[(3,240, 160),(3,1000, 2000)]) #tcw20190623", "\n", "#summary(net,[torch.zeros(1,3,240,160),2],2)", "\n", "dataset", "=", "TestDataset", "(", "cfg", ".", "test_data_dir", ",", "cfg", ".", "scale", ")", "\n", "sample", "(", "net", ",", "device", ",", "dataset", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.train.parse_args": [[9, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_name\"", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--print_interval\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "#original data is 1000", "\n", "parser", ".", "add_argument", "(", "\"--train_data_path\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"dataset/DIV2K_train.h5\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_dir\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"checkpoint\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample_dir\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"sample/\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--num_gpu\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--shave\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "#moren shi 20 $tcw20191222", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--verbose\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--group\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--patch_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_steps\"", ",", "type", "=", "int", ",", "default", "=", "200000", ")", "\n", "parser", ".", "add_argument", "(", "\"--decay\"", ",", "type", "=", "int", ",", "default", "=", "150000", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "parser", ".", "add_argument", "(", "\"--clip\"", ",", "type", "=", "float", ",", "default", "=", "10", ")", "\n", "\n", "#parser.add_argument(\"--loss_fn\", type=str, ", "\n", "#choices=[\"MSE\", \"L1\", \"SmoothL1\"], default=\"L1\") #tcw201904082029", "\n", "parser", ".", "add_argument", "(", "\"--loss_fn\"", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"MSE\"", ",", "\"L1\"", ",", "\"SmoothL1\"", "]", ",", "default", "=", "\"MSE\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.train.main": [[43, 51], ["print", "solver.Solver", "solver.Solver.fit", "importlib.import_module", "json.dumps", "vars"], "function", ["None"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "# dynamic import using --model argument", "\n", "    ", "net", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "cfg", ".", "model", ")", ")", ".", "Net", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "cfg", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n", "solver", "=", "Solver", "(", "net", ",", "cfg", ")", "\n", "#print 'ds'", "\n", "solver", ".", "fit", "(", ")", "\n", "#print 'sdsddwdew'", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.dataset.TrainDataset.__init__": [[42, 62], ["torch.Dataset.__init__", "h5py.File", "h5py.File.close", "torchvision.Compose", "h5f[].values", "torchvision.ToTensor", "h5f[].values", "h5f[].values"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "size", ",", "scale", ")", ":", "\n", "        ", "super", "(", "TrainDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "size", "=", "size", "\n", "h5f", "=", "h5py", ".", "File", "(", "path", ",", "\"r\"", ")", "\n", "\n", "self", ".", "hr", "=", "[", "v", "[", ":", "]", "for", "v", "in", "h5f", "[", "\"HR\"", "]", ".", "values", "(", ")", "]", "\n", "# perform multi-scale training", "\n", "if", "scale", "==", "0", ":", "\n", "            ", "self", ".", "scale", "=", "[", "2", ",", "3", ",", "4", "]", "\n", "self", ".", "lr", "=", "[", "[", "v", "[", ":", "]", "for", "v", "in", "h5f", "[", "\"X{}\"", ".", "format", "(", "i", ")", "]", ".", "values", "(", ")", "]", "for", "i", "in", "self", ".", "scale", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", "=", "[", "scale", "]", "\n", "self", ".", "lr", "=", "[", "[", "v", "[", ":", "]", "for", "v", "in", "h5f", "[", "\"X{}\"", ".", "format", "(", "scale", ")", "]", ".", "values", "(", ")", "]", "]", "\n", "\n", "", "h5f", ".", "close", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.dataset.TrainDataset.__getitem__": [[64, 72], ["dataset.random_crop", "dataset.random_flip_and_rotate", "enumerate", "enumerate", "dataset.TrainDataset.transform", "dataset.TrainDataset.transform"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_crop", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_flip_and_rotate"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "size", "=", "self", ".", "size", "\n", "item", "=", "[", "(", "self", ".", "hr", "[", "index", "]", ",", "self", ".", "lr", "[", "i", "]", "[", "index", "]", ")", "for", "i", ",", "_", "in", "enumerate", "(", "self", ".", "lr", ")", "]", "\n", "#i is the number, _ is the context", "\n", "item", "=", "[", "random_crop", "(", "hr", ",", "lr", ",", "size", ",", "self", ".", "scale", "[", "i", "]", ")", "for", "i", ",", "(", "hr", ",", "lr", ")", "in", "enumerate", "(", "item", ")", "]", "\n", "item", "=", "[", "random_flip_and_rotate", "(", "hr", ",", "lr", ")", "for", "hr", ",", "lr", "in", "item", "]", "\n", "\n", "return", "[", "(", "self", ".", "transform", "(", "hr", ")", ",", "self", ".", "transform", "(", "lr", ")", ")", "for", "hr", ",", "lr", "in", "item", "]", "#tranform array (hr,lr) into tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.dataset.TrainDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.dataset.TestDataset.__init__": [[78, 98], ["torch.Dataset.__init__", "dataset.TestDataset.hr.sort", "dataset.TestDataset.lr.sort", "torchvision.Compose", "dirname.split", "glob.glob", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dirname", ",", "scale", ")", ":", "\n", "        ", "super", "(", "TestDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "dirname", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "if", "\"DIV\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "hr", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\"{}_HR\"", ".", "format", "(", "dirname", ")", ",", "\"*.png\"", ")", ")", "\n", "self", ".", "lr", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\"{}_LR_bicubic\"", ".", "format", "(", "dirname", ")", ",", "\n", "\"X{}/*.png\"", ".", "format", "(", "scale", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "all_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"x{}/*.png\"", ".", "format", "(", "scale", ")", ")", ")", "\n", "self", ".", "hr", "=", "[", "name", "for", "name", "in", "all_files", "if", "\"HR\"", "in", "name", "]", "\n", "self", ".", "lr", "=", "[", "name", "for", "name", "in", "all_files", "if", "\"LR\"", "in", "name", "]", "\n", "\n", "", "self", ".", "hr", ".", "sort", "(", ")", "\n", "self", ".", "lr", ".", "sort", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.dataset.TestDataset.__getitem__": [[100, 117], ["PIL.Image.open", "PIL.Image.open", "hr.convert.convert.convert", "lr.convert.convert.convert", "dataset.TestDataset.hr[].split", "dataset.TestDataset.transform", "dataset.TestDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "hr", "=", "Image", ".", "open", "(", "self", ".", "hr", "[", "index", "]", ")", "\n", "lr", "=", "Image", ".", "open", "(", "self", ".", "lr", "[", "index", "]", ")", "\n", "'''\n        #This is only used to test code, which makes me more know the code. \n        ss = np.asarray(hr) (644,1024,3)\n        print ss.shape\n        '''", "\n", "hr", "=", "hr", ".", "convert", "(", "\"RGB\"", ")", "\n", "lr", "=", "lr", ".", "convert", "(", "\"RGB\"", ")", "\n", "'''\n        tss = np.asarray(hr) (644,1024,3)\n        print tss.shape\n        '''", "\n", "filename", "=", "self", ".", "hr", "[", "index", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "#keep the last string, which is after /. For example, a= 'aaa/asds.bmp', a.split(\"/\")[-1] = asds ", "\n", "return", "self", ".", "transform", "(", "hr", ")", ",", "self", ".", "transform", "(", "lr", ")", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.dataset.TestDataset.__len__": [[118, 120], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.dataset.random_crop": [[10, 22], ["random.randint", "random.randint", "lr[].copy", "hr[].copy"], "function", ["None"], ["def", "random_crop", "(", "hr", ",", "lr", ",", "size", ",", "scale", ")", ":", "\n", "    ", "h", ",", "w", "=", "lr", ".", "shape", "[", ":", "-", "1", "]", "#h,w,channel [:-1] beside the final element, such as channel ", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "size", ")", "#random number", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "size", ")", "\n", "\n", "hsize", "=", "size", "*", "scale", "\n", "hx", ",", "hy", "=", "x", "*", "scale", ",", "y", "*", "scale", "\n", "\n", "crop_lr", "=", "lr", "[", "y", ":", "y", "+", "size", ",", "x", ":", "x", "+", "size", "]", ".", "copy", "(", ")", "#low-resolution patch", "\n", "crop_hr", "=", "hr", "[", "hy", ":", "hy", "+", "hsize", ",", "hx", ":", "hx", "+", "hsize", "]", ".", "copy", "(", ")", "#high-resolution patch", "\n", "\n", "return", "crop_hr", ",", "crop_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.x4.dataset.random_flip_and_rotate": [[24, 39], ["random.choice", "numpy.rot90", "numpy.rot90", "random.random", "numpy.flipud", "numpy.flipud", "random.random", "numpy.fliplr", "numpy.fliplr", "np.fliplr.copy", "np.fliplr.copy"], "function", ["None"], ["", "def", "random_flip_and_rotate", "(", "im1", ",", "im2", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "im1", "=", "np", ".", "flipud", "(", "im1", ")", "#left and right move", "\n", "im2", "=", "np", ".", "flipud", "(", "im2", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "#up and down move", "\n", "        ", "im1", "=", "np", ".", "fliplr", "(", "im1", ")", "\n", "im2", "=", "np", ".", "fliplr", "(", "im2", ")", "\n", "\n", "", "angle", "=", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "#rote", "\n", "im1", "=", "np", ".", "rot90", "(", "im1", ",", "angle", ")", "\n", "im2", "=", "np", ".", "rot90", "(", "im2", ",", "angle", ")", "\n", "\n", "# have to copy before be called by transform function", "\n", "return", "im1", ".", "copy", "(", ")", ",", "im2", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.parse_args": [[18, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--group\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample_dir\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"dataset/Urban100\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--shave\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.save_image": [[32, 37], ["tensor.cpu.cpu", "tensor.cpu.mul().clamp().byte().permute().numpy", "PIL.Image.fromarray", "Image.fromarray.save", "tensor.cpu.mul().clamp().byte().permute", "tensor.cpu.mul().clamp().byte", "tensor.cpu.mul().clamp", "tensor.cpu.mul"], "function", ["None"], ["", "def", "save_image", "(", "tensor", ",", "filename", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "cpu", "(", ")", "\n", "ndarr", "=", "tensor", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.psnr": [[38, 48], ["tcw_sample.psnr.im2double"], "function", ["None"], ["", "def", "psnr", "(", "im1", ",", "im2", ")", ":", "#tcw201904101621", "\n", "    ", "def", "im2double", "(", "im", ")", ":", "\n", "        ", "min_val", ",", "max_val", "=", "0", ",", "255", "\n", "out", "=", "(", "im", ".", "astype", "(", "np", ".", "float64", ")", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "return", "out", "\n", "\n", "", "im1", "=", "im2double", "(", "im1", ")", "\n", "im2", "=", "im2double", "(", "im2", ")", "\n", "psnr", "=", "measure", ".", "compare_psnr", "(", "im1", ",", "im2", ",", "data_range", "=", "1", ")", "\n", "return", "psnr", "\n", "#tcw20190413043", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.calculate_ssim": [[49, 72], ["ValueError", "tcw_sample.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "tcw_sample.ssim", "tcw_sample.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.ssim": [[73, 94], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.rgb2ycbcr": [[94, 117], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''\n    same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.sample": [[118, 242], ["enumerate", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tcw_sample.save_image", "tcw_sample.save_image", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte().permute().numpy", "net().detach().squeeze.cpu().mul().clamp().byte().permute().numpy", "tcw_sample.rgb2ycbcr", "tcw_sample.rgb2ycbcr", "time.time", "torch.tensor", "torch.tensor", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch[].copy_", "lr_patch.to.to", "net().detach", "torch.tensor().to", "torch.tensor().to", "result[].copy_", "result[].copy_", "result[].copy_", "result[].copy_", "time.time", "time.time", "lr.squeeze.unsqueeze().to", "net().detach().squeeze", "lr.squeeze.squeeze", "time.time", "[].split", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tcw_sample.psnr", "len", "tcw_sample.calculate_ssim", "len", "lr.squeeze.size", "int", "int", "cfg.test_data_dir.split", "cfg.test_data_dir.split", "name.replace", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte().permute", "net().detach().squeeze.cpu().mul().clamp().byte().permute", "net", "torch.tensor", "torch.tensor", "lr.squeeze.unsqueeze", "net().detach", "cfg.ckpt_path.split", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp().byte", "net().detach().squeeze.cpu().mul().clamp().byte", "net", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul().clamp", "net().detach().squeeze.cpu().mul().clamp", "hr.cpu().mul().clamp().byte().permute().numpy.cpu().mul", "net().detach().squeeze.cpu().mul", "hr.cpu().mul().clamp().byte().permute().numpy.cpu", "net().detach().squeeze.cpu"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.save_image", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.save_image", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.rgb2ycbcr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.rgb2ycbcr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.psnr", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.calculate_ssim"], ["", "def", "sample", "(", "net", ",", "device", ",", "dataset", ",", "cfg", ")", ":", "\n", "    ", "scale", "=", "cfg", ".", "scale", "\n", "mean_psnr", "=", "0", "\n", "mean_psnr1", "=", "0", "\n", "mean_psnr2", "=", "0", "\n", "mean_ssim", "=", "0", "#tcw20190413047", "\n", "for", "step", ",", "(", "hr", ",", "lr", ",", "name", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "\"DIV2K\"", "in", "dataset", ".", "name", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "h", ",", "w", "=", "lr", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "h_half", ",", "w_half", "=", "int", "(", "h", "/", "2", ")", ",", "int", "(", "w", "/", "2", ")", "\n", "h_chop", ",", "w_chop", "=", "h_half", "+", "cfg", ".", "shave", ",", "w_half", "+", "cfg", ".", "shave", "\n", "\n", "lr_patch", "=", "torch", ".", "tensor", "(", "(", "4", ",", "3", ",", "h_chop", ",", "w_chop", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "lr_patch", "[", "0", "]", ".", "copy_", "(", "lr", "[", ":", ",", "0", ":", "h_chop", ",", "0", ":", "w_chop", "]", ")", "\n", "lr_patch", "[", "1", "]", ".", "copy_", "(", "lr", "[", ":", ",", "0", ":", "h_chop", ",", "w", "-", "w_chop", ":", "w", "]", ")", "\n", "lr_patch", "[", "2", "]", ".", "copy_", "(", "lr", "[", ":", ",", "h", "-", "h_chop", ":", "h", ",", "0", ":", "w_chop", "]", ")", "\n", "lr_patch", "[", "3", "]", ".", "copy_", "(", "lr", "[", ":", ",", "h", "-", "h_chop", ":", "h", ",", "w", "-", "w_chop", ":", "w", "]", ")", "\n", "lr_patch", "=", "lr_patch", ".", "to", "(", "device", ")", "\n", "\n", "sr", "=", "net", "(", "lr_patch", ",", "cfg", ".", "scale", ")", ".", "detach", "(", ")", "\n", "\n", "h", ",", "h_half", ",", "h_chop", "=", "h", "*", "scale", ",", "h_half", "*", "scale", ",", "h_chop", "*", "scale", "\n", "w", ",", "w_half", ",", "w_chop", "=", "w", "*", "scale", ",", "w_half", "*", "scale", ",", "w_chop", "*", "scale", "\n", "\n", "result", "=", "torch", ".", "tensor", "(", "(", "3", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "result", "[", ":", ",", "0", ":", "h_half", ",", "0", ":", "w_half", "]", ".", "copy_", "(", "sr", "[", "0", ",", ":", ",", "0", ":", "h_half", ",", "0", ":", "w_half", "]", ")", "\n", "result", "[", ":", ",", "0", ":", "h_half", ",", "w_half", ":", "w", "]", ".", "copy_", "(", "sr", "[", "1", ",", ":", ",", "0", ":", "h_half", ",", "w_chop", "-", "w", "+", "w_half", ":", "w_chop", "]", ")", "\n", "result", "[", ":", ",", "h_half", ":", "h", ",", "0", ":", "w_half", "]", ".", "copy_", "(", "sr", "[", "2", ",", ":", ",", "h_chop", "-", "h", "+", "h_half", ":", "h_chop", ",", "0", ":", "w_half", "]", ")", "\n", "result", "[", ":", ",", "h_half", ":", "h", ",", "w_half", ":", "w", "]", ".", "copy_", "(", "sr", "[", "3", ",", ":", ",", "h_chop", "-", "h", "+", "h_half", ":", "h_chop", ",", "w_chop", "-", "w", "+", "w_half", ":", "w_chop", "]", ")", "\n", "sr", "=", "result", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "#print '--------'", "\n", "#print lr.size() #e.g (3,512,512)", "\n", "lr", "=", "lr", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "#print lr.size() #(1,3,512,512)", "\n", "#b = net(lr, cfg.scale).detach()", "\n", "#print b.size()  #(1,3,1024,1024)", "\n", "sr", "=", "net", "(", "lr", ",", "cfg", ".", "scale", ")", ".", "detach", "(", ")", ".", "squeeze", "(", "0", ")", "#detach() break the reversed transformation.", "\n", "#print sr.size() #(3,1024,1024)", "\n", "lr", "=", "lr", ".", "squeeze", "(", "0", ")", "\n", "#print lr.size() #(3,512,512)", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "#print 'step is %d, mean_psnr is %d' % (step,mean_psrn) ", "\n", "#print cfg.ckpt_path #./checkpoint/carn.pth", "\n", "#print cfg.ckpt_path.split(\".\") #['', '/checkpoint/carn', 'pth']", "\n", "#print cfg.ckpt_path.split(\".\")[0] # ''", "\n", "#print cfg.ckpt_path.split(\".\")[0].split(\"/\") #''", "\n", "#print cfg.ckpt_path.split(\".\")[0].split(\"/\")[-1] #''", "\n", "", "model_name", "=", "cfg", ".", "ckpt_path", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "#''", "\n", "#print ", "\n", "#print 'a'", "\n", "#print '%s', %(model_name)", "\n", "#print model_name", "\n", "sr_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "sample_dir", ",", "\n", "model_name", ",", "\n", "cfg", ".", "test_data_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "\"x{}\"", ".", "format", "(", "cfg", ".", "scale", ")", ",", "\n", "\"SR\"", ")", "\n", "hr_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "sample_dir", ",", "\n", "model_name", ",", "\n", "cfg", ".", "test_data_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "\"x{}\"", ".", "format", "(", "cfg", ".", "scale", ")", ",", "\n", "\"HR\"", ")", "\n", "#print sr_dir #sample/Urban100/x2/SR", "\n", "#print hr_dir #sample/Urban100/x2/HR", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sr_dir", ")", ":", "#201904072208 tcw", "\n", "#os.makedirs(sr_dir, exist_ok=Ture)             #201904072211tcw, it is given at first, but it is wrong. So, I mark it.", "\n", "#os.makedirs(hr_dir, exist_ok=Ture)", "\n", "            ", "os", ".", "makedirs", "(", "sr_dir", ",", "mode", "=", "0o777", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "hr_dir", ")", ":", "#201904072208 tcw", "\n", "            ", "os", ".", "makedirs", "(", "hr_dir", ",", "mode", "=", "0o777", ")", "\n", "\n", "", "sr_im_path", "=", "os", ".", "path", ".", "join", "(", "sr_dir", ",", "\"{}\"", ".", "format", "(", "name", ".", "replace", "(", "\"HR\"", ",", "\"SR\"", ")", ")", ")", "#use SR instead of HR in the name of high-resolution image", "\n", "hr_im_path", "=", "os", ".", "path", ".", "join", "(", "hr_dir", ",", "\"{}\"", ".", "format", "(", "name", ")", ")", "#name is a name of high-resolution image", "\n", "#print sr_im_path #sample/Urban100/x2/SR/img_100_SRF_2_SR.png", "\n", "#print hr_im_path #sample/Urban100/x2/HR/img_100_SRF_2_HR.png", "\n", "save_image", "(", "sr", ",", "sr_im_path", ")", "\n", "save_image", "(", "hr", ",", "hr_im_path", ")", "\n", "#201904111731tcw y", "\n", "#sr_Y = cv2.imread(sr_im_path,cv2.IMREAD_COLOR)", "\n", "#sr_Y = cv2.cvtColor(sr_Y,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#sr_Y = rgb2ycbcr(sr_Y)", "\n", "#sr_Y = sr_Y[:,:,0] #y", "\n", "#print sr_Y.shape", "\n", "#hr_Y = cv2.imread(hr_im_path,cv2.IMREAD_COLOR)", "\n", "#hr_Y = cv2.cvtColor(hr_Y,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#hr_Y = rgb2ycbcr(hr_Y)", "\n", "#hr_Y = hr_Y[:,:,0] #y ", "\n", "#print hr_Y.shape", "\n", "hr", "=", "hr", ".", "cpu", "(", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "#(644.1024,3) is the same dimensional with the size of input test image in dataset.py. #201904101617tcw", "\n", "sr", "=", "sr", ".", "cpu", "(", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "#tcw201904101617", "\n", "bnd", "=", "scale", "#tcw", "\n", "#''''''''''''", "\n", "#hr_Y1 = cv2.cvtColor(hr,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#sr_Y1 = cv2.cvtColor(sr,cv2.COLOR_BGR2YCrCb) #YCrCb", "\n", "#hr_Y2 =hr_Y1[:,:,0]", "\n", "#sr_Y2 = sr_Y1[:,:,0]", "\n", "#hr_Y2 = hr_Y2[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#sr_Y2 = sr_Y2[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#''''''''''''", "\n", "#im1 = hr[bnd:-bnd, bnd:-bnd] #tcw", "\n", "#im2 = sr[bnd:-bnd, bnd:-bnd] #tcw", "\n", "sr_1", "=", "rgb2ycbcr", "(", "sr", ")", "\n", "hr_1", "=", "rgb2ycbcr", "(", "hr", ")", "\n", "#sr_Y = sr_Y[bnd:-bnd,bnd:-bnd]#tcw201904111837", "\n", "#hr_Y = hr_Y[bnd:-bnd,bnd:-bnd]#tcw201904111837", "\n", "sr_1", "=", "sr_1", "[", "bnd", ":", "-", "bnd", ",", "bnd", ":", "-", "bnd", "]", "#tcw201904111837", "\n", "hr_1", "=", "hr_1", "[", "bnd", ":", "-", "bnd", ",", "bnd", ":", "-", "bnd", "]", "#tcw201904111837", "\n", "#mean_psnr1 +=psnr(sr_Y,hr_Y)/len(dataset)", "\n", "mean_psnr2", "+=", "psnr", "(", "sr_1", ",", "hr_1", ")", "/", "len", "(", "dataset", ")", "\n", "mean_ssim", "+=", "calculate_ssim", "(", "sr_1", ",", "hr_1", ")", "/", "len", "(", "dataset", ")", "\n", "#print mean_psnr2, mean_ssim, len(dataset)", "\n", "#print len(dataset) #it is only used to debug the code.", "\n", "#mean_psnr += psnr(im1, im2) / len(dataset) #tcw", "\n", "#mean_psnr2 +=psnr(sr_Y2,hr_Y2)/len(dataset)", "\n", "#print(\"Saved {} ({}x{} -> {}x{}, {:.3f}s)\"", "\n", "# .format(sr_im_path, lr.shape[1], lr.shape[2], sr.shape[1], sr.shape[2], t2-t1))", "\n", "#Saved sample/Urban100/x2/SR/img_100_SRF_2_SR.png (512x512 -> 1024x1024, 0.007s)", "\n", "#print mean_psnr, mean_psnr1, mean_psnr2 #tcw", "\n", "#print mean_psnr1, mean_psnr2", "\n", "", "print", "(", "mean_psnr2", ",", "mean_ssim", ")", "\n", "#print '-------------------'z", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.main": [[244, 281], ["importlib.import_module", "importlib.import_module.Net", "print", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "net.to.load_state_dict", "torch.device", "torch.device", "net.to.to", "dataset.TestDataset", "tcw_sample.sample", "json.dumps", "vars", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.tcw_sample.sample"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "module", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "cfg", ".", "model", ")", ")", "\n", "''' \n    net = module.Net(multi_scale=False, \n                     group=cfg.group)\n    '''", "\n", "net", "=", "module", ".", "Net", "(", "scale", "=", "cfg", ".", "scale", ",", "\n", "group", "=", "cfg", ".", "group", ")", "\n", "'''\n    #net = MyModel\n    params = list(net.parameters())\n    k = 0\n    for i in params:\n        l = 1\n\t#print('' + str(list(i.size())))\n\tfor j in i.size():\n            l *= j\n\t    #print('' + str(l))\n\t    k = k + l\n\tprint(''+ str(k))\n    '''", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "cfg", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "#print cfg information according order.", "\n", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "ckpt_path", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "\n", "# name = k[7:] # remove \"module.\"", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "net", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "#os.environ['CUDA_VISIBLE_DEVICES']='0,1'", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "#0 is number of gpu, if this gpu1 is work, you can set it into 1 (device=torch.device(\"cuda:1\" if torch.cuda.is_available() else \"cpu\"))", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "#summary(net,[(3,240, 160),(3,1000, 2000)]) #tcw20190623", "\n", "#summary(net,[torch.zeros(1,3,240,160),2],2)", "\n", "dataset", "=", "TestDataset", "(", "cfg", ".", "test_data_dir", ",", "cfg", ".", "scale", ")", "\n", "sample", "(", "net", ",", "device", ",", "dataset", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.parse_args": [[9, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_name\"", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--print_interval\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "#original data is 1000", "\n", "parser", ".", "add_argument", "(", "\"--train_data_path\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"dataset/DIV2K_train.h5\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_dir\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"checkpoint\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample_dir\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"sample/\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--num_gpu\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--shave\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "#moren shi 20 $tcw20191222", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--verbose\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--group\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--patch_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_steps\"", ",", "type", "=", "int", ",", "default", "=", "200000", ")", "\n", "parser", ".", "add_argument", "(", "\"--decay\"", ",", "type", "=", "int", ",", "default", "=", "150000", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "parser", ".", "add_argument", "(", "\"--clip\"", ",", "type", "=", "float", ",", "default", "=", "10", ")", "\n", "\n", "#parser.add_argument(\"--loss_fn\", type=str, ", "\n", "#choices=[\"MSE\", \"L1\", \"SmoothL1\"], default=\"L1\") #tcw201904082029", "\n", "parser", ".", "add_argument", "(", "\"--loss_fn\"", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"MSE\"", ",", "\"L1\"", ",", "\"SmoothL1\"", "]", ",", "default", "=", "\"MSE\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.train.main": [[43, 51], ["print", "solver.Solver", "solver.Solver.fit", "importlib.import_module", "json.dumps", "vars"], "function", ["None"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "# dynamic import using --model argument", "\n", "    ", "net", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "cfg", ".", "model", ")", ")", ".", "Net", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "cfg", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n", "solver", "=", "Solver", "(", "net", ",", "cfg", ")", "\n", "#print 'ds'", "\n", "solver", ".", "fit", "(", ")", "\n", "#print 'sdsddwdew'", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TrainDataset.__init__": [[57, 77], ["torch.Dataset.__init__", "h5py.File", "h5py.File.close", "torchvision.Compose", "h5f[].values", "torchvision.ToTensor", "h5f[].values", "h5f[].values"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["\n", "", "h5f", ".", "close", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "size", "=", "self", ".", "size", "\n", "item", "=", "[", "(", "self", ".", "hr", "[", "index", "]", ",", "self", ".", "lr", "[", "i", "]", "[", "index", "]", ")", "for", "i", ",", "_", "in", "enumerate", "(", "self", ".", "lr", ")", "]", "\n", "#i is the number, _ is the context", "\n", "item", "=", "[", "random_crop", "(", "hr", ",", "lr", ",", "size", ",", "self", ".", "scale", "[", "i", "]", ")", "for", "i", ",", "(", "hr", ",", "lr", ")", "in", "enumerate", "(", "item", ")", "]", "\n", "item", "=", "[", "random_flip_and_rotate", "(", "hr", ",", "lr", ")", "for", "hr", ",", "lr", "in", "item", "]", "\n", "\n", "return", "[", "(", "self", ".", "transform", "(", "hr", ")", ",", "self", ".", "transform", "(", "lr", ")", ")", "for", "hr", ",", "lr", "in", "item", "]", "#tranform array (hr,lr) into tensor", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hr", ")", "\n", "\n", "\n", "", "", "class", "TestDataset", "(", "data", ".", "Dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TrainDataset.__getitem__": [[79, 86], ["dataset.random_crop", "dataset.random_flip_and_rotate", "enumerate", "enumerate", "dataset.TrainDataset.transform", "dataset.TrainDataset.transform"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_crop", "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_flip_and_rotate"], ["        ", "super", "(", "TestDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "dirname", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "if", "\"DIV\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "hr", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\"{}_HR\"", ".", "format", "(", "dirname", ")", ",", "\"*.png\"", ")", ")", "\n", "self", ".", "lr", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\"{}_LR_bicubic\"", ".", "format", "(", "dirname", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TrainDataset.__len__": [[87, 89], ["len"], "methods", ["None"], ["\"X{}/*.png\"", ".", "format", "(", "scale", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "all_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "\"x{}/*.png\"", ".", "format", "(", "scale", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__": [[92, 112], ["torch.Dataset.__init__", "dataset.TestDataset.hr.sort", "dataset.TestDataset.lr.sort", "torchvision.Compose", "dirname.split", "glob.glob", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__init__"], ["\n", "", "self", ".", "hr", ".", "sort", "(", ")", "\n", "self", ".", "lr", ".", "sort", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "hr", "=", "Image", ".", "open", "(", "self", ".", "hr", "[", "index", "]", ")", "\n", "lr", "=", "Image", ".", "open", "(", "self", ".", "lr", "[", "index", "]", ")", "\n", "'''\n        #This is only used to test code, which makes me more know the code. \n        ss = np.asarray(hr) (644,1024,3)\n        print ss.shape\n        '''", "\n", "hr", "=", "hr", ".", "convert", "(", "\"RGB\"", ")", "\n", "lr", "=", "lr", ".", "convert", "(", "\"RGB\"", ")", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__getitem__": [[114, 131], ["PIL.Image.open", "PIL.Image.open", "hr.convert.convert.convert", "lr.convert.convert.convert", "dataset.TestDataset.hr[].split", "dataset.TestDataset.transform", "dataset.TestDataset.transform"], "methods", ["None"], ["filename", "=", "self", ".", "hr", "[", "index", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "#keep the last string, which is after /. For example, a= 'aaa/asds.bmp', a.split(\"/\")[-1] = asds ", "\n", "return", "self", ".", "transform", "(", "hr", ")", ",", "self", ".", "transform", "(", "lr", ")", ",", "filename", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.TestDataset.__len__": [[132, 134], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_crop": [[10, 22], ["random.randint", "random.randint", "lr[].copy", "hr[].copy"], "function", ["None"], ["def", "random_crop", "(", "hr", ",", "lr", ",", "size", ",", "scale", ")", ":", "\n", "    ", "h", ",", "w", "=", "lr", ".", "shape", "[", ":", "-", "1", "]", "#h,w,channel [:-1] beside the final element, such as channel ", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "size", ")", "#random number", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "size", ")", "\n", "\n", "hsize", "=", "size", "*", "scale", "\n", "hx", ",", "hy", "=", "x", "*", "scale", ",", "y", "*", "scale", "\n", "\n", "crop_lr", "=", "lr", "[", "y", ":", "y", "+", "size", ",", "x", ":", "x", "+", "size", "]", ".", "copy", "(", ")", "#low-resolution patch", "\n", "crop_hr", "=", "hr", "[", "hy", ":", "hy", "+", "hsize", ",", "hx", ":", "hx", "+", "hsize", "]", ".", "copy", "(", ")", "#high-resolution patch", "\n", "\n", "return", "crop_hr", ",", "crop_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hellloxiaotian_ACNet.acnet-b.dataset.random_flip_and_rotate": [[24, 39], ["random.choice", "numpy.rot90", "numpy.rot90", "random.random", "numpy.flipud", "numpy.flipud", "random.random", "numpy.fliplr", "numpy.fliplr", "np.fliplr.copy", "np.fliplr.copy"], "function", ["None"], ["", "def", "random_flip_and_rotate", "(", "im1", ",", "im2", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "im1", "=", "np", ".", "flipud", "(", "im1", ")", "#left and right move", "\n", "im2", "=", "np", ".", "flipud", "(", "im2", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "#up and down move", "\n", "        ", "im1", "=", "np", ".", "fliplr", "(", "im1", ")", "\n", "im2", "=", "np", ".", "fliplr", "(", "im2", ")", "\n", "\n", "", "angle", "=", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "#rote", "\n", "im1", "=", "np", ".", "rot90", "(", "im1", ",", "angle", ")", "\n", "im2", "=", "np", ".", "rot90", "(", "im2", ",", "angle", ")", "\n", "\n", "# have to copy before be called by transform function", "\n", "return", "im1", ".", "copy", "(", ")", ",", "im2", ".", "copy", "(", ")", "\n", "\n"]]}