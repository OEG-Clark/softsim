{"home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.test_cifar": [[21, 45], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "iter", "range", "torch.max", "torch.max", "torch.max", "len", "iter.next", "inputs.to.to", "labels.to.to", "model.inference", "classifier", "torch.sum().item", "torch.sum().item", "torch.sum().item", "float", "classifier.data.float", "labels.to.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "classifier.data.float", "labels.to.data.float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning.inference"], ["def", "test_cifar", "(", "loader", ",", "model", ",", "classifier", ",", "device", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "start_test", "=", "True", "\n", "iter_val", "=", "iter", "(", "loader", "[", "'test'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "            ", "data", "=", "iter_val", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "feat", "=", "model", ".", "inference", "(", "inputs", ")", "\n", "outputs", "=", "classifier", "(", "feat", ")", "\n", "\n", "if", "start_test", ":", "\n", "                ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "\n", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_label", ")", ".", "item", "(", ")", "/", "float", "(", "all_label", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.test": [[47, 77], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "classifier.eval", "len", "range", "torch.max", "torch.max", "torch.max", "iter", "range", "labels.to.to", "range", "sum", "torch.sum().item", "torch.sum().item", "torch.sum().item", "float", "range", "iter_val[].next", "inputs[].to", "model.inference", "classifier", "sum.append", "sum.data.float", "labels.to.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "sum.data.float", "labels.to.data.float", "str", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning.inference"], ["", "def", "test", "(", "loader", ",", "model", ",", "classifier", ",", "device", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "start_test", "=", "True", "\n", "val_len", "=", "len", "(", "loader", "[", "'test0'", "]", ")", "\n", "iter_val", "=", "[", "iter", "(", "loader", "[", "'test'", "+", "str", "(", "i", ")", "]", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "for", "_", "in", "range", "(", "val_len", ")", ":", "\n", "            ", "data", "=", "[", "iter_val", "[", "j", "]", ".", "next", "(", ")", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "inputs", "=", "[", "data", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "labels", "=", "data", "[", "0", "]", "[", "1", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                ", "inputs", "[", "j", "]", "=", "inputs", "[", "j", "]", ".", "to", "(", "device", ")", "\n", "", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                ", "feat", "=", "model", ".", "inference", "(", "inputs", "[", "j", "]", ")", "\n", "output", "=", "classifier", "(", "feat", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "outputs", "=", "sum", "(", "outputs", ")", "\n", "if", "start_test", ":", "\n", "                ", "all_outputs", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_labels", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                ", "all_outputs", "=", "torch", ".", "cat", "(", "(", "all_outputs", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_labels", "=", "torch", ".", "cat", "(", "(", "all_labels", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_outputs", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_labels", ")", ".", "item", "(", ")", "/", "float", "(", "all_labels", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.train": [[78, 162], ["len", "iter", "len", "iter", "range", "print", "torch.save", "torch.save", "torch.save", "print", "torch.CrossEntropyLoss", "torch.KLDivLoss", "model.train", "classifier.train", "optimizer.zero_grad", "iter.next", "iter.next", "[].to", "[].to", "data_labeled[].to", "[].to", "[].to", "model", "classifier", "model.encoder_q", "classifier", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "model", "total_loss.backward", "optimizer.step", "scheduler.step", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "iter", "iter", "classifier.detach", "torch.max", "torch.max", "torch.max", "predict.size", "print", "model.eval", "classifier.eval", "print", "writer.add_scalar", "main.test_cifar", "main.test", "model.state_dict", "classifier.state_dict", "float"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.train", "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.train", "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.test_cifar", "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.test"], ["", "def", "train", "(", "args", ",", "model", ",", "classifier", ",", "dataset_loaders", ",", "optimizer", ",", "scheduler", ",", "device", "=", "None", ",", "writer", "=", "None", ",", "model_path", "=", "None", ")", ":", "\n", "\n", "    ", "len_labeled", "=", "len", "(", "dataset_loaders", "[", "\"train\"", "]", ")", "\n", "iter_labeled", "=", "iter", "(", "dataset_loaders", "[", "\"train\"", "]", ")", "\n", "\n", "len_unlabeled", "=", "len", "(", "dataset_loaders", "[", "\"unlabeled_train\"", "]", ")", "\n", "iter_unlabeled", "=", "iter", "(", "dataset_loaders", "[", "\"unlabeled_train\"", "]", ")", "\n", "\n", "criterions", "=", "{", "\"CrossEntropy\"", ":", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\"KLDiv\"", ":", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'batchmean'", ")", "}", "\n", "\n", "best_acc", "=", "0.0", "\n", "best_model", "=", "None", "\n", "\n", "for", "iter_num", "in", "range", "(", "1", ",", "args", ".", "max_iter", "+", "1", ")", ":", "\n", "        ", "model", ".", "train", "(", "True", ")", "\n", "classifier", ".", "train", "(", "True", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "iter_num", "%", "len_labeled", "==", "0", ":", "\n", "            ", "iter_labeled", "=", "iter", "(", "dataset_loaders", "[", "\"train\"", "]", ")", "\n", "", "if", "iter_num", "%", "len_unlabeled", "==", "0", ":", "\n", "            ", "iter_unlabeled", "=", "iter", "(", "dataset_loaders", "[", "\"unlabeled_train\"", "]", ")", "\n", "\n", "", "data_labeled", "=", "iter_labeled", ".", "next", "(", ")", "\n", "data_unlabeled", "=", "iter_unlabeled", ".", "next", "(", ")", "\n", "\n", "img_labeled_q", "=", "data_labeled", "[", "0", "]", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "img_labeled_k", "=", "data_labeled", "[", "0", "]", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "label", "=", "data_labeled", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "img_unlabeled_q", "=", "data_unlabeled", "[", "0", "]", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "img_unlabeled_k", "=", "data_unlabeled", "[", "0", "]", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "## For Labeled Data", "\n", "PGC_logit_labeled", ",", "PGC_label_labeled", ",", "feat_labeled", "=", "model", "(", "img_labeled_q", ",", "img_labeled_k", ",", "label", ")", "\n", "out", "=", "classifier", "(", "feat_labeled", ")", "\n", "classifier_loss", "=", "criterions", "[", "'CrossEntropy'", "]", "(", "out", ",", "label", ")", "\n", "PGC_loss_labeled", "=", "criterions", "[", "'KLDiv'", "]", "(", "PGC_logit_labeled", ",", "PGC_label_labeled", ")", "\n", "\n", "\n", "## For Unlabeled Data", "\n", "q_c_unlabeled", ",", "q_f_unlabeled", "=", "model", ".", "encoder_q", "(", "img_unlabeled_q", ")", "\n", "logit_unlabeled", "=", "classifier", "(", "q_f_unlabeled", ")", "\n", "prob_unlabeled", "=", "torch", ".", "softmax", "(", "logit_unlabeled", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "confidence_unlabeled", ",", "predict_unlabeled", "=", "torch", ".", "max", "(", "prob_unlabeled", ",", "dim", "=", "-", "1", ")", "\n", "PGC_logit_unlabeled", ",", "PGC_label_unlabeled", ",", "feat_unlabeled", "=", "model", "(", "img_unlabeled_q", ",", "img_unlabeled_k", ",", "predict_unlabeled", ")", "\n", "PGC_loss_unlabeled", "=", "criterions", "[", "'KLDiv'", "]", "(", "PGC_logit_unlabeled", ",", "PGC_label_unlabeled", ")", "\n", "\n", "total_loss", "=", "classifier_loss", "+", "PGC_loss_labeled", "+", "PGC_loss_unlabeled", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "\n", "## Calculate the training accuracy of current iteration", "\n", "if", "iter_num", "%", "100", "==", "0", ":", "\n", "            ", "_", ",", "predict", "=", "torch", ".", "max", "(", "out", ",", "1", ")", "\n", "hit_num", "=", "(", "predict", "==", "label", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "sample_num", "=", "predict", ".", "size", "(", "0", ")", "\n", "print", "(", "\"iter_num: {}; current acc: {}\"", ".", "format", "(", "iter_num", ",", "hit_num", "/", "float", "(", "sample_num", ")", ")", ")", "\n", "\n", "## Show Loss in TensorBoard", "\n", "", "writer", ".", "add_scalar", "(", "'loss/classifier_loss'", ",", "classifier_loss", ",", "iter_num", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/PGC_loss_labeled'", ",", "PGC_loss_labeled", ",", "iter_num", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/PGC_loss_unlabeled'", ",", "PGC_loss_unlabeled", ",", "iter_num", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/total_loss'", ",", "total_loss", ",", "iter_num", ")", "\n", "\n", "if", "iter_num", "%", "args", ".", "test_interval", "==", "1", "or", "iter_num", "==", "500", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "if", "'cifar100'", "in", "args", ".", "root", ":", "\n", "                ", "test_acc", "=", "test_cifar", "(", "dataset_loaders", ",", "model", ",", "classifier", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "                ", "test_acc", "=", "test", "(", "dataset_loaders", ",", "model", ",", "classifier", ",", "device", "=", "device", ")", "\n", "", "print", "(", "\"iter_num: {}; test_acc: {}\"", ".", "format", "(", "iter_num", ",", "test_acc", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'acc/test_acc'", ",", "test_acc", ",", "iter_num", ")", "\n", "if", "test_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "test_acc", "\n", "best_model", "=", "{", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'classifier'", ":", "classifier", ".", "state_dict", "(", ")", ",", "\n", "'step'", ":", "iter_num", "\n", "}", "\n", "", "", "", "print", "(", "\"best acc: %.4f\"", "%", "(", "best_acc", ")", ")", "\n", "torch", ".", "save", "(", "best_model", ",", "model_path", ")", "\n", "print", "(", "\"The best model has been saved in \"", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.read_config": [[163, 189], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "read_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "help", "=", "'root path of dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--label_ratio'", ",", "type", "=", "int", ",", "default", "=", "15", ")", "\n", "parser", ".", "add_argument", "(", "'--logdir'", ",", "type", "=", "str", ",", "default", "=", "'../vis/'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "'0.001'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "'666666'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "'4'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_ratio'", ",", "type", "=", "float", ",", "default", "=", "'10'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "'resnet50'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "parser", ".", "add_argument", "(", "'--queue_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'queue size for each class'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'the momentum hyperparameter for moving average'", ")", "\n", "parser", ".", "add_argument", "(", "'--projector_dim'", ",", "type", "=", "int", ",", "default", "=", "1024", ")", "\n", "parser", ".", "add_argument", "(", "'--class_num'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--max_iter'", ",", "type", "=", "float", ",", "default", "=", "27005", ")", "\n", "parser", ".", "add_argument", "(", "'--test_interval'", ",", "type", "=", "float", ",", "default", "=", "3000", ")", "\n", "parser", ".", "add_argument", "(", "\"--pretrained\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use the pre-trained model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pretrained_path\"", ",", "type", "=", "str", ",", "default", "=", "'~/.torch/models/moco_v2_800ep_pretrain.pth.tar'", ")", "\n", "## Only for Cifar100", "\n", "parser", ".", "add_argument", "(", "\"--expand_label\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"expand label to fit eval steps\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_labeled'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of labeled data'", ")", "\n", "configs", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.set_seed": [[191, 196], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.main": [[198, 247], ["main.read_config", "main.set_seed", "src.utils.load_data", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.device", "os.path.join", "tensorboardX.SummaryWriter", "os.path.join", "src.utils.load_network", "models.method.SelfTuning().to", "models.classifier.Classifier().to", "print", "print", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "main.train", "os.path.exists", "os.makedirs", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "models.method.SelfTuning", "models.classifier.Classifier", "os.path.basename", "str", "os.path.basename", "str", "sum", "SelfTuning().to.parameters", "Classifier().to.parameters", "sum", "p.numel", "p.numel", "Classifier().to.parameters", "SelfTuning().to.parameters"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.read_config", "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.set_seed", "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.utils.load_data", "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.utils.load_network", "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.main.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "read_config", "(", ")", "\n", "set_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Prepare data", "\n", "if", "'cifar100'", "in", "args", ".", "root", ":", "\n", "        ", "args", ".", "class_num", "=", "100", "\n", "", "elif", "'CUB200'", "in", "args", ".", "root", ":", "\n", "        ", "args", ".", "class_num", "=", "200", "\n", "", "elif", "'StanfordCars'", "in", "args", ".", "root", ":", "\n", "        ", "args", ".", "class_num", "=", "196", "\n", "", "elif", "'Aircraft'", "in", "args", ".", "root", ":", "\n", "        ", "args", ".", "class_num", "=", "100", "\n", "\n", "", "dataset_loaders", "=", "load_data", "(", "args", ")", "\n", "print", "(", "\"class_num: \"", ",", "args", ".", "class_num", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu_id", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu_id", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "if", "'cifar100'", "in", "args", ".", "root", ":", "\n", "        ", "model_name", "=", "\"%s_%s_%s\"", "%", "(", "args", ".", "backbone", ",", "os", ".", "path", ".", "basename", "(", "args", ".", "root", ")", ",", "str", "(", "args", ".", "num_labeled", ")", ")", "\n", "", "else", ":", "\n", "        ", "model_name", "=", "\"%s_%s_%s\"", "%", "(", "args", ".", "backbone", ",", "os", ".", "path", ".", "basename", "(", "args", ".", "root", ")", ",", "str", "(", "args", ".", "label_ratio", ")", ")", "\n", "", "logdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "logdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "logdir", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "logdir", ")", "\n", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "\"%s_best.pkl\"", "%", "(", "model_name", ")", ")", "\n", "\n", "# Initialize model", "\n", "network", ",", "feature_dim", "=", "load_network", "(", "args", ".", "backbone", ")", "\n", "model", "=", "SelfTuning", "(", "network", "=", "network", ",", "backbone", "=", "args", ".", "backbone", ",", "queue_size", "=", "args", ".", "queue_size", ",", "projector_dim", "=", "args", ".", "projector_dim", ",", "feature_dim", "=", "feature_dim", ",", "\n", "class_num", "=", "args", ".", "class_num", ",", "momentum", "=", "args", ".", "momentum", ",", "pretrained", "=", "args", ".", "pretrained", ",", "pretrained_path", "=", "args", ".", "pretrained_path", ")", ".", "to", "(", "device", ")", "\n", "classifier", "=", "Classifier", "(", "feature_dim", ",", "args", ".", "class_num", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "\"backbone params: {:.2f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "/", "2", ")", ")", "\n", "print", "(", "\"classifier params: {:.2f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "classifier", ".", "parameters", "(", ")", ")", "/", "1e6", ")", ")", "\n", "\n", "## Define Optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "model", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "classifier", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "args", ".", "lr_ratio", "}", ",", "\n", "]", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "milestones", "=", "[", "6000", ",", "12000", ",", "18000", ",", "24000", "]", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", ",", "gamma", "=", "0.1", ")", "\n", "\n", "# Train model", "\n", "train", "(", "args", ",", "model", ",", "classifier", ",", "dataset_loaders", ",", "optimizer", ",", "scheduler", ",", "device", "=", "device", ",", "writer", "=", "writer", ",", "model_path", "=", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.utils.load_data": [[14, 62], ["data.cifar100.get_cifar100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.tranforms.TransformTrain", "data.tranforms.TransformTest", "datasets.update", "dataset_loaders.update", "dataset", "dataset", "dataset", "torch.utils.data.DataLoader", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "os.path.basename", "str", "range", "torch.utils.data.DataLoader", "str", "range", "str", "str"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.cifar100.get_cifar100", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTest"], ["def", "load_data", "(", "args", ")", ":", "\n", "    ", "batch_size_dict", "=", "{", "\"train\"", ":", "args", ".", "batch_size", ",", "\"unlabeled_train\"", ":", "args", ".", "batch_size", ",", "\"test\"", ":", "100", "}", "\n", "\n", "if", "'cifar100'", "in", "args", ".", "root", ":", "\n", "        ", "labeled_dataset", ",", "unlabeled_dataset", ",", "test_dataset", "=", "get_cifar100", "(", "args", ",", "args", ".", "root", ")", "\n", "labeled_trainloader", "=", "DataLoader", "(", "\n", "labeled_dataset", ",", "\n", "sampler", "=", "RandomSampler", "(", "labeled_dataset", ")", ",", "\n", "batch_size", "=", "batch_size_dict", "[", "\"train\"", "]", ",", "\n", "num_workers", "=", "4", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "unlabeled_trainloader", "=", "DataLoader", "(", "\n", "unlabeled_dataset", ",", "\n", "sampler", "=", "RandomSampler", "(", "unlabeled_dataset", ")", ",", "\n", "batch_size", "=", "batch_size_dict", "[", "\"unlabeled_train\"", "]", ",", "\n", "num_workers", "=", "4", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "## We didn't apply tencrop test since other SSL baselines neither", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "batch_size_dict", "[", "\"test\"", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ")", "\n", "\n", "dataset_loaders", "=", "{", "\"train\"", ":", "labeled_trainloader", ",", "\n", "\"unlabeled_train\"", ":", "unlabeled_trainloader", ",", "\n", "\"test\"", ":", "test_loader", "}", "\n", "\n", "", "else", ":", "\n", "        ", "transform_train", "=", "TransformTrain", "(", ")", "\n", "transform_test", "=", "TransformTest", "(", "mean", "=", "imagenet_mean", ",", "std", "=", "imagenet_std", ")", "\n", "dataset", "=", "data", ".", "__dict__", "[", "os", ".", "path", ".", "basename", "(", "args", ".", "root", ")", "]", "\n", "\n", "datasets", "=", "{", "\"train\"", ":", "dataset", "(", "root", "=", "args", ".", "root", ",", "split", "=", "'train'", ",", "label_ratio", "=", "args", ".", "label_ratio", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", ",", "\n", "\"unlabeled_train\"", ":", "dataset", "(", "root", "=", "args", ".", "root", ",", "split", "=", "'unlabeled_train'", ",", "label_ratio", "=", "args", ".", "label_ratio", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "}", "\n", "test_dataset", "=", "{", "\n", "'test'", "+", "str", "(", "i", ")", ":", "dataset", "(", "root", "=", "args", ".", "root", ",", "split", "=", "'test'", ",", "label_ratio", "=", "100", ",", "download", "=", "True", ",", "transform", "=", "transform_test", "[", "\"test\"", "+", "str", "(", "i", ")", "]", ")", "for", "i", "in", "range", "(", "10", ")", "\n", "}", "\n", "datasets", ".", "update", "(", "test_dataset", ")", "\n", "\n", "dataset_loaders", "=", "{", "x", ":", "DataLoader", "(", "datasets", "[", "x", "]", ",", "batch_size", "=", "batch_size_dict", "[", "x", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "for", "x", "in", "[", "'train'", ",", "'unlabeled_train'", "]", "}", "\n", "dataset_loaders", ".", "update", "(", "{", "'test'", "+", "str", "(", "i", ")", ":", "DataLoader", "(", "datasets", "[", "\"test\"", "+", "str", "(", "i", ")", "]", ",", "batch_size", "=", "4", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "for", "i", "in", "range", "(", "10", ")", "}", ")", "\n", "\n", "", "return", "dataset_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.src.utils.load_network": [[65, 104], ["print"], "function", ["None"], ["", "def", "load_network", "(", "backbone", ")", ":", "\n", "    ", "if", "'resnet'", "in", "backbone", ":", "\n", "        ", "if", "backbone", "==", "'resnet18'", ":", "\n", "            ", "network", "=", "resnet18", "\n", "feature_dim", "=", "512", "\n", "", "elif", "backbone", "==", "'resnet34'", ":", "\n", "            ", "network", "=", "resnet34", "\n", "feature_dim", "=", "512", "\n", "", "elif", "backbone", "==", "'resnet50'", ":", "\n", "            ", "network", "=", "resnet50", "\n", "feature_dim", "=", "2048", "\n", "", "elif", "backbone", "==", "'resnet101'", ":", "\n", "            ", "network", "=", "resnet101", "\n", "feature_dim", "=", "2048", "\n", "", "elif", "backbone", "==", "'resnet152'", ":", "\n", "            ", "network", "=", "resnet152", "\n", "feature_dim", "=", "2048", "\n", "", "", "elif", "'efficientnet'", "in", "backbone", ":", "\n", "        ", "network", "=", "EfficientNetFc", "\n", "print", "(", "backbone", ")", "\n", "if", "backbone", "==", "'efficientnet-b0'", ":", "\n", "            ", "feature_dim", "=", "1280", "\n", "", "elif", "backbone", "==", "'efficientnet-b1'", ":", "\n", "            ", "feature_dim", "=", "1280", "\n", "", "elif", "backbone", "==", "'efficientnet-b2'", ":", "\n", "            ", "feature_dim", "=", "1408", "\n", "", "elif", "backbone", "==", "'efficientnet-b3'", ":", "\n", "            ", "feature_dim", "=", "1536", "\n", "", "elif", "backbone", "==", "'efficientnet-b4'", ":", "\n", "            ", "feature_dim", "=", "1792", "\n", "", "elif", "backbone", "==", "'efficientnet-b5'", ":", "\n", "            ", "feature_dim", "=", "2048", "\n", "", "elif", "backbone", "==", "'efficientnet-b6'", ":", "\n", "            ", "feature_dim", "=", "2304", "\n", "", "", "else", ":", "\n", "        ", "network", "=", "resnet50", "\n", "feature_dim", "=", "2048", "\n", "\n", "", "return", "network", ",", "feature_dim", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.efficientnet.EfficientNetFc.__init__": [[5, 10], ["torch.Module.__init__", "print", "efficientnet_pytorch.EfficientNet.from_pretrained", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", "=", "'efficientnet-b4'", ",", "feature_dim", "=", "1792", ",", "projector_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "EfficientNetFc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "backbone", ")", "\n", "self", ".", "backbone", "=", "EfficientNet", ".", "from_pretrained", "(", "backbone", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "feature_dim", ",", "projector_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.efficientnet.EfficientNetFc.forward": [[11, 19], ["efficientnet.EfficientNetFc.backbone.extract_features", "efficientnet.EfficientNetFc.backbone._avg_pooling", "efficientnet.EfficientNetFc.flatten", "efficientnet.EfficientNetFc.backbone._dropout", "efficientnet.EfficientNetFc.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", ".", "extract_features", "(", "x", ")", "\n", "x", "=", "self", ".", "backbone", ".", "_avg_pooling", "(", "x", ")", "\n", "if", "self", ".", "backbone", ".", "_global_params", ".", "include_top", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "backbone", ".", "_dropout", "(", "x", ")", "\n", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "return", "y", ",", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.Normalize.__init__": [[24, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.Normalize.forward": [[28, 32], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.BasicBlock.__init__": [[37, 46], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__", "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.conv3x3", "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.BasicBlock.forward": [[47, 64], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.Bottleneck.__init__": [[69, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.Bottleneck.forward": [[82, 103], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.ResNet.__init__": [[107, 132], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "int", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.Normalize", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__", "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "projector_dim", "=", "1000", ",", "in_channel", "=", "3", ",", "width", "=", "1", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "base", "=", "int", "(", "64", "*", "width", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "base", "*", "8", "*", "block", ".", "expansion", ",", "projector_dim", ")", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.ResNet._make_layer": [[133, 149], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.ResNet.forward": [[150, 163], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "x6.view.view.view", "resnet.ResNet.fc", "x6.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "layer4", "(", "x4", ")", "\n", "x6", "=", "self", ".", "avgpool", "(", "x5", ")", "\n", "x6", "=", "x6", ".", "view", "(", "x6", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "x6", ")", "\n", "return", "y", ",", "x6", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.resnet18": [[164, 173], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.resnet34": [[175, 184], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.resnet50": [[186, 195], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.resnet101": [[197, 206], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.resnet.resnet152": [[208, 217], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning.__init__": [[8, 54], ["torch.Module.__init__", "method.SelfTuning.load_pretrained", "zip", "method.SelfTuning.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "method.SelfTuning.register_buffer", "network", "network", "network", "network", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "method.SelfTuning.encoder_q.parameters", "method.SelfTuning.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__", "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning.load_pretrained"], ["def", "__init__", "(", "self", ",", "network", ",", "backbone", ",", "queue_size", "=", "32", ",", "projector_dim", "=", "256", ",", "feature_dim", "=", "256", ",", "\n", "class_num", "=", "200", ",", "momentum", "=", "0.999", ",", "temp", "=", "0.07", ",", "pretrained", "=", "True", ",", "pretrained_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        network: the network of the backbone\n        backbone: the name of the backbone\n        queue_size: the queue size for each class\n        projector_dim: the dimension of the projector (default: 1024)\n        feature_dim: the dimension of the output from the backbone\n        class_num: the class number of the dataset\n        pretrained: loading from pre-trained model or not (default: True)\n        momentum: the momentum hyperparameter for moving average to update key encoder (default: 0.999)\n        temp: softmax temperature (default: 0.07)\n        pretrained_path: the path of the pre-trained model\n        \"\"\"", "\n", "super", "(", "SelfTuning", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "queue_size", "=", "queue_size", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "pretrained_path", "=", "pretrained_path", "\n", "\n", "# create the encoders", "\n", "if", "'efficientnet'", "in", "self", ".", "backbone", ":", "\n", "            ", "self", ".", "encoder_q", "=", "network", "(", "backbone", "=", "self", ".", "backbone", ",", "feature_dim", "=", "feature_dim", ",", "projector_dim", "=", "projector_dim", ")", "\n", "self", ".", "encoder_k", "=", "network", "(", "backbone", "=", "self", ".", "backbone", ",", "feature_dim", "=", "feature_dim", ",", "projector_dim", "=", "projector_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder_q", "=", "network", "(", "projector_dim", "=", "projector_dim", ")", "\n", "self", ".", "encoder_k", "=", "network", "(", "projector_dim", "=", "projector_dim", ")", "\n", "\n", "", "if", "backbone", "==", "'MOCOv2'", ":", "# hack: brute-force replacement", "\n", "            ", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_q", ".", "fc", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_k", ".", "fc", ")", "\n", "\n", "", "self", ".", "load_pretrained", "(", "network", ")", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# don't be updated by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue_list\"", ",", "torch", ".", "randn", "(", "projector_dim", ",", "queue_size", "*", "self", ".", "class_num", ")", ")", "\n", "self", ".", "queue_list", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue_list", ",", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning._momentum_update_key_encoder": [[55, 62], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "method.SelfTuning.encoder_q.parameters", "method.SelfTuning.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "momentum", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning._dequeue_and_enqueue": [[63, 73], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "key_c", ",", "c", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "batch_size", "=", "key_c", ".", "shape", "[", "0", "]", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", "[", "c", "]", ")", "\n", "real_ptr", "=", "ptr", "+", "c", "*", "self", ".", "queue_size", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue_list", "[", ":", ",", "real_ptr", ":", "real_ptr", "+", "batch_size", "]", "=", "key_c", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "queue_size", "# move pointer", "\n", "self", ".", "queue_ptr", "[", "c", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning.forward": [[74, 123], ["im_q.size", "method.SelfTuning.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "method.SelfTuning.queue_list.clone().detach", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "PGC_labels[].fill_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "method.SelfTuning._momentum_update_key_encoder", "method.SelfTuning.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "method.SelfTuning._dequeue_and_enqueue", "torch.LogSoftmax", "torch.LogSoftmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "method.SelfTuning.queue_list.clone", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning._momentum_update_key_encoder", "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning._dequeue_and_enqueue"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "batch_size", "=", "im_q", ".", "size", "(", "0", ")", "\n", "\n", "# compute query features", "\n", "q_c", ",", "q_f", "=", "self", ".", "encoder_q", "(", "im_q", ")", "# queries: q_c (N x projector_dim)", "\n", "q_c", "=", "nn", ".", "functional", ".", "normalize", "(", "q_c", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "k_c", ",", "_", "=", "self", ".", "encoder_k", "(", "im_k", ")", "# keys: k_c (N x projector_dim)", "\n", "k_c", "=", "nn", ".", "functional", ".", "normalize", "(", "k_c", ",", "dim", "=", "1", ")", "\n", "\n", "# compute logits", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nl,nl->n'", ",", "[", "q_c", ",", "k_c", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "# Einstein sum is more intuitive", "\n", "\n", "# cur_queue_list: queue_size * class_num", "\n", "cur_queue_list", "=", "self", ".", "queue_list", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "l_neg_list", "=", "torch", ".", "Tensor", "(", "[", "]", ")", ".", "cuda", "(", ")", "\n", "l_pos_list", "=", "torch", ".", "Tensor", "(", "[", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "neg_sample", "=", "torch", ".", "cat", "(", "[", "cur_queue_list", "[", ":", ",", "0", ":", "labels", "[", "i", "]", "*", "self", ".", "queue_size", "]", ",", "\n", "cur_queue_list", "[", ":", ",", "(", "labels", "[", "i", "]", "+", "1", ")", "*", "self", ".", "queue_size", ":", "]", "]", ",", "\n", "dim", "=", "1", ")", "\n", "pos_sample", "=", "cur_queue_list", "[", ":", ",", "labels", "[", "i", "]", "*", "self", ".", "queue_size", ":", "(", "labels", "[", "i", "]", "+", "1", ")", "*", "self", ".", "queue_size", "]", "\n", "ith_neg", "=", "torch", ".", "einsum", "(", "'nl,lk->nk'", ",", "[", "q_c", "[", "i", ":", "i", "+", "1", "]", ",", "neg_sample", "]", ")", "\n", "ith_pos", "=", "torch", ".", "einsum", "(", "'nl,lk->nk'", ",", "[", "q_c", "[", "i", ":", "i", "+", "1", "]", ",", "pos_sample", "]", ")", "\n", "l_neg_list", "=", "torch", ".", "cat", "(", "(", "l_neg_list", ",", "ith_neg", ")", ",", "dim", "=", "0", ")", "\n", "l_pos_list", "=", "torch", ".", "cat", "(", "(", "l_pos_list", ",", "ith_pos", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k_c", "[", "i", ":", "i", "+", "1", "]", ",", "labels", "[", "i", "]", ")", "\n", "\n", "# logits: 1 + queue_size + queue_size * (class_num - 1)", "\n", "", "PGC_logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_pos_list", ",", "l_neg_list", "]", ",", "dim", "=", "1", ")", "\n", "# apply temperature", "\n", "PGC_logits", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "(", "PGC_logits", "/", "self", ".", "temp", ")", "\n", "\n", "PGC_labels", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "1", "+", "self", ".", "queue_size", "*", "self", ".", "class_num", "]", ")", ".", "cuda", "(", ")", "\n", "PGC_labels", "[", ":", ",", "0", ":", "self", ".", "queue_size", "+", "1", "]", ".", "fill_", "(", "1.0", "/", "(", "self", ".", "queue_size", "+", "1", ")", ")", "\n", "return", "PGC_logits", ",", "PGC_labels", ",", "q_f", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning.load_pretrained": [[124, 159], ["ckpt.items", "method.SelfTuning.encoder_q.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "k.replace.replace.replace", "ckpt.items", "method.SelfTuning.encoder_q.load_state_dict", "print", "k.replace.replace.startswith", "torch.load", "torch.load", "torch.load", "torch.load", "k.replace.replace.replace", "network", "k.replace.replace.startswith", "network"], "methods", ["None"], ["", "def", "load_pretrained", "(", "self", ",", "network", ")", ":", "\n", "        ", "if", "self", ".", "backbone", "==", "'MOCOv1'", "and", "self", ".", "pretrained", ":", "\n", "            ", "if", "self", ".", "pretrained_path", "is", "None", ":", "\n", "                ", "self", ".", "pretrained_path", "=", "\"~/.torch/models/moco_v1_200ep_pretrain.pth.tar\"", "\n", "", "ckpt", "=", "torch", ".", "load", "(", "self", ".", "pretrained_path", ")", "[", "'state_dict'", "]", "\n", "state_dict_cut", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "ckpt", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "k", ".", "startswith", "(", "\"module.encoder_q.\"", ")", ":", "\n", "                    ", "continue", "\n", "", "k", "=", "k", ".", "replace", "(", "\"module.encoder_q.\"", ",", "\"\"", ")", "\n", "state_dict_cut", "[", "k", "]", "=", "v", "\n", "", "self", ".", "encoder_q", ".", "load_state_dict", "(", "state_dict_cut", ")", "\n", "print", "(", "'Successfully load the pre-trained model of MOCOv1'", ")", "\n", "", "elif", "self", ".", "backbone", "==", "'MOCOv2'", "and", "self", ".", "pretrained", ":", "\n", "            ", "if", "self", ".", "pretrained_path", "is", "None", ":", "\n", "                ", "self", ".", "pretrained_path", "=", "'~/.torch/models/moco_v2_800ep_pretrain.pth.tar'", "\n", "", "ckpt", "=", "torch", ".", "load", "(", "self", ".", "pretrained_path", ")", "[", "'state_dict'", "]", "\n", "state_dict_cut", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "ckpt", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "k", ".", "startswith", "(", "\"module.encoder_q.\"", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "'fc.2'", "in", "k", ":", "\n", "                    ", "continue", "\n", "", "k", "=", "k", ".", "replace", "(", "\"module.encoder_q.\"", ",", "\"\"", ")", "\n", "state_dict_cut", "[", "k", "]", "=", "v", "\n", "", "self", ".", "encoder_q", ".", "load_state_dict", "(", "state_dict_cut", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Successfully load the pre-trained model of MOCOv2'", ")", "\n", "", "elif", "'resnet'", "in", "self", ".", "backbone", ":", "\n", "            ", "q", "=", "network", "(", "projector_dim", "=", "1000", ",", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "q", ".", "fc", "=", "self", ".", "encoder_q", ".", "fc", "\n", "self", ".", "encoder_q", "=", "q", "\n", "", "elif", "'densenet'", "in", "self", ".", "backbone", ":", "\n", "            ", "q", "=", "network", "(", "projector_dim", "=", "1000", ",", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "q", ".", "classifier", "=", "self", ".", "encoder_q", ".", "classifier", "\n", "self", ".", "encoder_q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.method.SelfTuning.inference": [[160, 163], ["method.SelfTuning.encoder_q"], "methods", ["None"], ["", "", "def", "inference", "(", "self", ",", "img", ")", ":", "\n", "        ", "y", ",", "feat", "=", "self", ".", "encoder_q", "(", "img", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.classifier.Classifier.__init__": [[4, 9], ["torch.Module.__init__", "torch.Linear", "classifier.Classifier.classifier_layer.weight.data.normal_", "classifier.Classifier.classifier_layer.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "class_num", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classifier_layer", "=", "nn", ".", "Linear", "(", "inputs", ",", "class_num", ")", "\n", "self", ".", "classifier_layer", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "classifier_layer", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.models.classifier.Classifier.forward": [[10, 12], ["classifier.Classifier.classifier_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "classifier_layer", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.cifar100.CIFAR100SSL.__init__": [[59, 69], ["torchvision.datasets.CIFAR100.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "indexs", ",", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "train", "=", "train", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "download", "=", "download", ")", "\n", "if", "indexs", "is", "not", "None", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "indexs", "]", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "[", "indexs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.cifar100.CIFAR100SSL.__getitem__": [[70, 81], ["PIL.Image.fromarray", "cifar100.CIFAR100SSL.transform", "cifar100.CIFAR100SSL.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.cifar100.get_cifar100": [[14, 34], ["torchvision.transforms.Compose", "torchvision.datasets.CIFAR100", "cifar100.x_u_split", "print", "print", "cifar100.CIFAR100SSL", "cifar100.CIFAR100SSL", "torchvision.datasets.CIFAR100", "len", "len", "data.tranforms.ResizeImage", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "data.tranforms.TransformTrainCifar", "data.tranforms.TransformTrainCifar"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.cifar100.x_u_split"], ["def", "get_cifar100", "(", "args", ",", "root", ")", ":", "\n", "    ", "transform_val", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "size", "=", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "cifar100_mean", ",", "std", "=", "cifar100_std", ")", "]", ")", "\n", "base_dataset", "=", "datasets", ".", "CIFAR100", "(", "root", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "train_labeled_idxs", ",", "train_unlabeled_idxs", "=", "x_u_split", "(", "args", ",", "base_dataset", ".", "targets", ")", "\n", "print", "(", "\"train_labeled_idxs: \"", ",", "len", "(", "train_labeled_idxs", ")", ")", "\n", "print", "(", "\"train_unlabeled_idxs: \"", ",", "len", "(", "train_unlabeled_idxs", ")", ")", "\n", "\n", "train_labeled_dataset", "=", "CIFAR100SSL", "(", "\n", "root", ",", "train_labeled_idxs", ",", "train", "=", "True", ",", "\n", "transform", "=", "TransformTrainCifar", "(", "mean", "=", "cifar100_mean", ",", "std", "=", "cifar100_std", ")", ")", "\n", "\n", "train_unlabeled_dataset", "=", "CIFAR100SSL", "(", "\n", "root", ",", "train_unlabeled_idxs", ",", "train", "=", "True", ",", "\n", "transform", "=", "TransformTrainCifar", "(", "mean", "=", "cifar100_mean", ",", "std", "=", "cifar100_std", ")", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR100", "(", "root", ",", "train", "=", "False", ",", "transform", "=", "transform_val", ",", "download", "=", "False", ")", "\n", "\n", "return", "train_labeled_dataset", ",", "train_unlabeled_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.cifar100.x_u_split": [[36, 55], ["numpy.array", "numpy.array", "range", "numpy.array", "numpy.random.shuffle", "range", "numpy.random.choice", "np.hstack.extend", "len", "math.ceil", "numpy.hstack", "len", "numpy.where", "range"], "function", ["None"], ["", "def", "x_u_split", "(", "args", ",", "labels", ")", ":", "\n", "    ", "label_per_class", "=", "args", ".", "num_labeled", "//", "args", ".", "class_num", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "labeled_idx", "=", "[", "]", "\n", "# unlabeled data: all data (https://github.com/kekmodel/FixMatch-pytorch/issues/10)", "\n", "unlabeled_idx", "=", "np", ".", "array", "(", "range", "(", "len", "(", "labels", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "class_num", ")", ":", "\n", "        ", "idx", "=", "np", ".", "where", "(", "labels", "==", "i", ")", "[", "0", "]", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "label_per_class", ",", "False", ")", "\n", "labeled_idx", ".", "extend", "(", "idx", ")", "\n", "", "labeled_idx", "=", "np", ".", "array", "(", "labeled_idx", ")", "\n", "assert", "len", "(", "labeled_idx", ")", "==", "args", ".", "num_labeled", "\n", "\n", "if", "args", ".", "expand_label", "or", "args", ".", "num_labeled", "<", "args", ".", "batch_size", ":", "\n", "        ", "num_expand_x", "=", "math", ".", "ceil", "(", "\n", "args", ".", "batch_size", "*", "args", ".", "test_interval", "/", "args", ".", "num_labeled", ")", "\n", "labeled_idx", "=", "np", ".", "hstack", "(", "[", "labeled_idx", "for", "_", "in", "range", "(", "num_expand_x", ")", "]", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "labeled_idx", ")", "\n", "return", "labeled_idx", ",", "unlabeled_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.cub200.CUB200.__init__": [[50, 78], ["imagelist.ImageList.__init__", "os.path.join", "list", "list", "str", "os.path.join", "os.path.join", "os.path.join", "_util.read_list_from_file", "_util.read_list_from_file", "list", "_util.save_list_to_file", "os.path.join", "map", "map", "str", "set", "set", "_util.download_data", "_util.check_exits", "str"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.read_list_from_file", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.read_list_from_file", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.save_list_to_file", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.download_data", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.check_exits"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "split", ":", "str", ",", "label_ratio", ":", "Optional", "[", "int", "]", "=", "100", ",", "download", ":", "Optional", "[", "bool", "]", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "list_name", "=", "'train'", "+", "str", "(", "label_ratio", ")", "\n", "assert", "list_name", "in", "self", ".", "image_list", "\n", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "list_name", "]", ")", "\n", "", "elif", "split", "==", "'unlabeled_train'", ":", "\n", "            ", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"image_list/unlabeled_\"", "+", "str", "(", "label_ratio", ")", "+", "\".txt\"", ")", "\n", "# if not os.path.exists(data_list_file):", "\n", "train_list_name", "=", "'train'", "+", "str", "(", "label_ratio", ")", "\n", "full_list_name", "=", "'train'", "\n", "assert", "train_list_name", "in", "self", ".", "image_list", "\n", "assert", "full_list_name", "in", "self", ".", "image_list", "\n", "train_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "train_list_name", "]", ")", "\n", "full_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "full_list_name", "]", ")", "\n", "train_list", "=", "read_list_from_file", "(", "train_list_file", ")", "\n", "full_list", "=", "read_list_from_file", "(", "full_list_file", ")", "\n", "unlabel_list", "=", "list", "(", "set", "(", "full_list", ")", "-", "set", "(", "train_list", ")", ")", "\n", "save_list_to_file", "(", "data_list_file", ",", "unlabel_list", ")", "\n", "", "else", ":", "\n", "            ", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "'test'", "]", ")", "\n", "\n", "", "if", "download", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "args", ":", "download_data", "(", "root", ",", "*", "args", ")", ",", "self", ".", "download_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "file_name", ",", "_", ":", "check_exits", "(", "root", ",", "file_name", ")", ",", "self", ".", "download_list", ")", ")", "\n", "\n", "", "super", "(", "CUB200", ",", "self", ")", ".", "__init__", "(", "root", ",", "CUB200", ".", "CLASSES", ",", "data_list_file", "=", "data_list_file", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.RandAugmentPC.__init__": [[184, 190], ["randaugment.my_augment_pool"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.my_augment_pool"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "assert", "n", ">=", "1", "\n", "assert", "1", "<=", "m", "<=", "10", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_pool", "=", "my_augment_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.RandAugmentPC.__call__": [[191, 199], ["random.choices", "randaugment.CutoutAbs", "numpy.random.uniform", "int", "op", "random.random"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.CutoutAbs"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_pool", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "max_v", ",", "bias", "in", "ops", ":", "\n", "            ", "prob", "=", "np", ".", "random", ".", "uniform", "(", "0.2", ",", "0.8", ")", "\n", "if", "random", ".", "random", "(", ")", "+", "prob", ">=", "1", ":", "\n", "                ", "img", "=", "op", "(", "img", ",", "v", "=", "self", ".", "m", ",", "max_v", "=", "max_v", ",", "bias", "=", "bias", ")", "\n", "", "", "img", "=", "CutoutAbs", "(", "img", ",", "int", "(", "32", "*", "0.5", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.RandAugmentMC.__init__": [[202, 208], ["randaugment.fixmatch_augment_pool"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.fixmatch_augment_pool"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "assert", "n", ">=", "1", "\n", "assert", "1", "<=", "m", "<=", "10", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_pool", "=", "fixmatch_augment_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.RandAugmentMC.__call__": [[209, 217], ["random.choices", "randaugment.CutoutAbs", "numpy.random.randint", "int", "random.random", "op"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.CutoutAbs"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_pool", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "max_v", ",", "bias", "in", "ops", ":", "\n", "            ", "v", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "m", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "op", "(", "img", ",", "v", "=", "v", ",", "max_v", "=", "max_v", ",", "bias", "=", "bias", ")", "\n", "", "", "img", "=", "CutoutAbs", "(", "img", ",", "int", "(", "32", "*", "0.5", ")", ")", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.AutoContrast": [[16, 18], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["def", "AutoContrast", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Brightness": [[20, 23], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "randaugment._float_parameter", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Brightness", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Brightness", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Brightness", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Color": [[25, 28], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "randaugment._float_parameter", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Color", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Color", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Color", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Color"], ["", "def", "Color", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Contrast": [[30, 33], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "randaugment._float_parameter", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Contrast", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Contrast", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Contrast", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Cutout": [[35, 41], ["int", "randaugment.CutoutAbs", "randaugment._float_parameter", "min"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.CutoutAbs", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter"], ["", "def", "Cutout", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "if", "v", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "v", "=", "int", "(", "v", "*", "min", "(", "img", ".", "size", ")", ")", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.CutoutAbs": [[43, 57], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "int", "int", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "min", "min", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ",", "**", "kwarg", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "h", ")", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.", ")", ")", "\n", "x1", "=", "int", "(", "min", "(", "w", ",", "x0", "+", "v", ")", ")", "\n", "y1", "=", "int", "(", "min", "(", "h", ",", "y0", "+", "v", ")", ")", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "# gray", "\n", "color", "=", "(", "127", ",", "127", ",", "127", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Equalize": [[59, 61], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Identity": [[63, 65], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Invert": [[67, 69], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Posterize": [[71, 74], ["PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "randaugment._int_parameter"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._int_parameter"], ["", "def", "Posterize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Rotate": [[76, 81], ["img.rotate", "randaugment._int_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._int_parameter"], ["", "def", "Rotate", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Sharpness": [[83, 86], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "randaugment._float_parameter", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Sharpness", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Sharpness", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Sharpness", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.ShearX": [[88, 93], ["img.transform", "randaugment._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter"], ["", "def", "ShearX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.ShearY": [[95, 100], ["img.transform", "randaugment._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter"], ["", "def", "ShearY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.Solarize": [[102, 105], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "randaugment._int_parameter"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._int_parameter"], ["", "def", "Solarize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "256", "-", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.SolarizeAdd": [[107, 117], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "randaugment._int_parameter", "random.random", "numpy.array"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._int_parameter"], ["", "def", "SolarizeAdd", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "v", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.TranslateX": [[119, 125], ["int", "img.transform", "randaugment._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter"], ["", "def", "TranslateX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.TranslateY": [[127, 133], ["int", "img.transform", "randaugment._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter"], ["", "def", "TranslateY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._float_parameter": [[135, 137], ["float"], "function", ["None"], ["", "def", "_float_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "float", "(", "v", ")", "*", "max_v", "/", "PARAMETER_MAX", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment._int_parameter": [[139, 141], ["int"], "function", ["None"], ["", "def", "_int_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "int", "(", "v", "*", "max_v", "/", "PARAMETER_MAX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.fixmatch_augment_pool": [[143, 160], ["None"], "function", ["None"], ["", "def", "fixmatch_augment_pool", "(", ")", ":", "\n", "# FixMatch paper", "\n", "    ", "augs", "=", "[", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Color", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Contrast", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Identity", ",", "None", ",", "None", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "(", "Rotate", ",", "30", ",", "0", ")", ",", "\n", "(", "Sharpness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "ShearX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "ShearY", ",", "0.3", ",", "0", ")", ",", "\n", "(", "Solarize", ",", "256", ",", "0", ")", ",", "\n", "(", "TranslateX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "TranslateY", ",", "0.3", ",", "0", ")", "]", "\n", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.randaugment.my_augment_pool": [[162, 181], ["None"], "function", ["None"], ["", "def", "my_augment_pool", "(", ")", ":", "\n", "# Test", "\n", "    ", "augs", "=", "[", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Color", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Contrast", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Cutout", ",", "0.2", ",", "0", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Invert", ",", "None", ",", "None", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "(", "Rotate", ",", "30", ",", "0", ")", ",", "\n", "(", "Sharpness", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "ShearX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "ShearY", ",", "0.3", ",", "0", ")", ",", "\n", "(", "Solarize", ",", "256", ",", "0", ")", ",", "\n", "(", "SolarizeAdd", ",", "110", ",", "0", ")", ",", "\n", "(", "TranslateX", ",", "0.45", ",", "0", ")", ",", "\n", "(", "TranslateY", ",", "0.45", ",", "0", ")", "]", "\n", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.download_data": [[6, 31], ["os.path.exists", "print", "os.path.join", "torchvision.datasets.utils.download_and_extract_archive", "print", "print", "exit"], "function", ["None"], ["def", "download_data", "(", "root", ":", "str", ",", "file_name", ":", "str", ",", "archive_name", ":", "str", ",", "url_link", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Download file from internet url link.\n\n    Args:\n        root (str) The directory to put downloaded files.\n        file_name: (str) The name of the unzipped file.\n        archive_name: (str) The name of archive(zipped file) downloaded.\n        url_link: (str) The url link to download data.\n\n    .. note::\n        If `file_name` already exists under path `root`, then it is not downloaded again.\n        Else `archive_name` will be downloaded from `url_link` and extracted to `file_name`.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", ")", ")", ":", "\n", "        ", "print", "(", "\"Downloading {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "# if os.path.exists(os.path.join(root, archive_name)):", "\n", "#     os.remove(os.path.join(root, archive_name))", "\n", "try", ":", "\n", "            ", "download_and_extract_archive", "(", "url_link", ",", "download_root", "=", "root", ",", "filename", "=", "archive_name", ",", "remove_finished", "=", "False", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "print", "(", "\"Fail to download {} from url link {}\"", ".", "format", "(", "archive_name", ",", "url_link", ")", ")", "\n", "print", "(", "'Please check you internet connection or '", "\n", "\"reinstall DALIB by 'pip install --upgrade dalib'\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.check_exits": [[33, 38], ["os.path.exists", "print", "exit", "os.path.join"], "function", ["None"], ["", "", "", "def", "check_exits", "(", "root", ":", "str", ",", "file_name", ":", "str", ")", ":", "\n", "    ", "\"\"\"Check whether `file_name` exists under directory `root`. \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", ")", ")", ":", "\n", "        ", "print", "(", "\"Dataset directory {} not found under {}\"", ".", "format", "(", "file_name", ",", "root", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.read_list_from_file": [[40, 47], ["open", "f.readlines", "result.append", "line.strip"], "function", ["None"], ["", "", "def", "read_list_from_file", "(", "file_name", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"Read data from file and convert each line into an element in the list\"\"\"", "\n", "result", "=", "[", "]", "\n", "with", "open", "(", "file_name", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "result", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.save_list_to_file": [[48, 53], ["open", "open.close", "open.write"], "function", ["None"], ["", "def", "save_list_to_file", "(", "file_name", ":", "str", ",", "file_list", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "textfile", "=", "open", "(", "file_name", ",", "\"w\"", ")", "\n", "for", "element", "in", "file_list", ":", "\n", "        ", "textfile", ".", "write", "(", "element", "+", "\"\\n\"", ")", "\n", "", "textfile", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.aircrafts.Aircraft.__init__": [[57, 85], ["imagelist.ImageList.__init__", "os.path.join", "list", "list", "str", "os.path.join", "os.path.join", "os.path.join", "_util.read_list_from_file", "_util.read_list_from_file", "list", "_util.save_list_to_file", "os.path.join", "map", "map", "str", "set", "set", "_util.download_data", "_util.check_exits", "str"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.read_list_from_file", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.read_list_from_file", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.save_list_to_file", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.download_data", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.check_exits"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "split", ":", "str", ",", "label_ratio", ":", "Optional", "[", "int", "]", "=", "100", ",", "download", ":", "Optional", "[", "bool", "]", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "list_name", "=", "'train'", "+", "str", "(", "label_ratio", ")", "\n", "assert", "list_name", "in", "self", ".", "image_list", "\n", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "list_name", "]", ")", "\n", "", "elif", "split", "==", "'unlabeled_train'", ":", "\n", "            ", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"image_list/unlabeled_\"", "+", "str", "(", "label_ratio", ")", "+", "\".txt\"", ")", "\n", "# if not os.path.exists(data_list_file):", "\n", "train_list_name", "=", "'train'", "+", "str", "(", "label_ratio", ")", "\n", "full_list_name", "=", "'train'", "\n", "assert", "train_list_name", "in", "self", ".", "image_list", "\n", "assert", "full_list_name", "in", "self", ".", "image_list", "\n", "train_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "train_list_name", "]", ")", "\n", "full_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "full_list_name", "]", ")", "\n", "train_list", "=", "read_list_from_file", "(", "train_list_file", ")", "\n", "full_list", "=", "read_list_from_file", "(", "full_list_file", ")", "\n", "unlabel_list", "=", "list", "(", "set", "(", "full_list", ")", "-", "set", "(", "train_list", ")", ")", "\n", "save_list_to_file", "(", "data_list_file", ",", "unlabel_list", ")", "\n", "", "else", ":", "\n", "            ", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "'test'", "]", ")", "\n", "\n", "", "if", "download", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "args", ":", "download_data", "(", "root", ",", "*", "args", ")", ",", "self", ".", "download_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "file_name", ",", "_", ":", "check_exits", "(", "root", ",", "file_name", ")", ",", "self", ".", "download_list", ")", ")", "\n", "\n", "", "super", "(", "Aircraft", ",", "self", ")", ".", "__init__", "(", "root", ",", "Aircraft", ".", "CLASSES", ",", "data_list_file", "=", "data_list_file", ",", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.imagelist.ImageList.__init__": [[29, 38], ["torchvision.VisionDataset.__init__", "imagelist.ImageList.parse_data_file", "enumerate"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.imagelist.ImageList.parse_data_file"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "classes", ":", "List", "[", "str", "]", ",", "data_list_file", ":", "str", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "samples", "=", "self", ".", "parse_data_file", "(", "data_list_file", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "{", "cls", ":", "idx", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "data_list_file", "=", "data_list_file", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.imagelist.ImageList.__getitem__": [[39, 52], ["imagelist.ImageList.loader", "imagelist.ImageList.transform", "imagelist.ImageList.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n            return (tuple): (image, target) where target is index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", "and", "target", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.imagelist.ImageList.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.imagelist.ImageList.parse_data_file": [[56, 74], ["open", "f.readlines", "line.split", "int", "data_list.append", "os.path.isabs", "os.path.join"], "methods", ["None"], ["", "def", "parse_data_file", "(", "self", ",", "file_name", ":", "str", ")", "->", "List", "[", "Tuple", "[", "str", ",", "int", "]", "]", ":", "\n", "        ", "\"\"\"Parse file to data list\n\n        Args:\n            file_name (str): The path of data file\n            return (list): List of (image path, class_index) tuples\n        \"\"\"", "\n", "with", "open", "(", "file_name", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data_list", "=", "[", "]", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "split_line", "=", "line", ".", "split", "(", ")", "\n", "target", "=", "split_line", "[", "-", "1", "]", "\n", "path", "=", "' '", ".", "join", "(", "split_line", "[", ":", "-", "1", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "isabs", "(", "path", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "path", ")", "\n", "", "target", "=", "int", "(", "target", ")", "\n", "data_list", ".", "append", "(", "(", "path", ",", "target", ")", ")", "\n", "", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.imagelist.ImageList.num_classes": [[75, 79], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Number of classes\"\"\"", "\n", "return", "len", "(", "self", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.imagelist.ImageList.domains": [[80, 84], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "domains", "(", "cls", ")", ":", "\n", "        ", "\"\"\"All possible domain in this dataset\"\"\"", "\n", "raise", "NotImplemented", "", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.stanford_cars.StanfordCars.__init__": [[57, 85], ["imagelist.ImageList.__init__", "os.path.join", "list", "list", "str", "os.path.join", "os.path.join", "os.path.join", "_util.read_list_from_file", "_util.read_list_from_file", "list", "_util.save_list_to_file", "os.path.join", "map", "map", "str", "set", "set", "_util.download_data", "_util.check_exits", "str"], "methods", ["home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.read_list_from_file", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.read_list_from_file", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.save_list_to_file", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.download_data", "home.repos.pwc.inspect_result.thuml_Self-Tuning.data._util.check_exits"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "split", ":", "str", ",", "label_ratio", ":", "Optional", "[", "int", "]", "=", "100", ",", "download", ":", "Optional", "[", "bool", "]", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "list_name", "=", "'train'", "+", "str", "(", "label_ratio", ")", "\n", "assert", "list_name", "in", "self", ".", "image_list", "\n", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "list_name", "]", ")", "\n", "", "elif", "split", "==", "'unlabeled_train'", ":", "\n", "            ", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"image_list/unlabeled_\"", "+", "str", "(", "label_ratio", ")", "+", "\".txt\"", ")", "\n", "# if not os.path.exists(data_list_file):", "\n", "train_list_name", "=", "'train'", "+", "str", "(", "label_ratio", ")", "\n", "full_list_name", "=", "'train'", "\n", "assert", "train_list_name", "in", "self", ".", "image_list", "\n", "assert", "full_list_name", "in", "self", ".", "image_list", "\n", "train_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "train_list_name", "]", ")", "\n", "full_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "full_list_name", "]", ")", "\n", "train_list", "=", "read_list_from_file", "(", "train_list_file", ")", "\n", "full_list", "=", "read_list_from_file", "(", "full_list_file", ")", "\n", "unlabel_list", "=", "list", "(", "set", "(", "full_list", ")", "-", "set", "(", "train_list", ")", ")", "\n", "save_list_to_file", "(", "data_list_file", ",", "unlabel_list", ")", "\n", "", "else", ":", "\n", "            ", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "'test'", "]", ")", "\n", "\n", "", "if", "download", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "args", ":", "download_data", "(", "root", ",", "*", "args", ")", ",", "self", ".", "download_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "file_name", ",", "_", ":", "check_exits", "(", "root", ",", "file_name", ")", ",", "self", ".", "download_list", ")", ")", "\n", "\n", "", "super", "(", "StanfordCars", ",", "self", ")", ".", "__init__", "(", "root", ",", "StanfordCars", ".", "CLASSES", ",", "data_list_file", "=", "data_list_file", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.ResizeImage.__init__": [[18, 23], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.ResizeImage.__call__": [[24, 27], ["img.resize"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "th", ",", "tw", "=", "self", ".", "size", "\n", "return", "img", ".", "resize", "(", "(", "th", ",", "tw", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.PlaceCrop.__init__": [[37, 44], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "start_x", ",", "start_y", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "start_x", "=", "start_x", "\n", "self", ".", "start_y", "=", "start_y", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.PlaceCrop.__call__": [[45, 54], ["img.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "return", "img", ".", "crop", "(", "(", "self", ".", "start_x", ",", "self", ".", "start_y", ",", "self", ".", "start_x", "+", "tw", ",", "self", ".", "start_y", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.ForceFlip.__call__": [[59, 67], ["img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrain.__init__": [[70, 79], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "tranforms.ResizeImage", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "data.randaugment.RandAugmentMC", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "resize_size", "=", "256", ",", "crop_size", "=", "224", ",", "mean", "=", "imagenet_mean", ",", "std", "=", "imagenet_std", ")", ":", "\n", "        ", "self", ".", "strong", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "RandAugmentMC", "(", "n", "=", "2", ",", "m", "=", "10", ")", "]", ")", "\n", "self", ".", "normalize", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrain.__call__": [[80, 82], ["tranforms.TransformTrain.normalize", "tranforms.TransformTrain.strong", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "self", ".", "normalize", "(", "self", ".", "strong", "(", "x", ")", ")", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__init__": [[84, 96], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "data.randaugment.RandAugmentMC", "tranforms.ResizeImage", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "crop_size", "=", "224", ")", ":", "\n", "        ", "self", ".", "strong", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "\n", "padding", "=", "int", "(", "32", "*", "0.125", ")", ",", "\n", "padding_mode", "=", "'reflect'", ")", ",", "\n", "RandAugmentMC", "(", "n", "=", "2", ",", "m", "=", "10", ")", ",", "\n", "ResizeImage", "(", "size", "=", "crop_size", ")", ",", "\n", "]", ")", "\n", "self", ".", "normalize", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTrainCifar.__call__": [[97, 99], ["tranforms.TransformTrainCifar.normalize", "tranforms.TransformTrainCifar.strong", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "self", ".", "normalize", "(", "self", ".", "strong", "(", "x", ")", ")", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_Self-Tuning.data.tranforms.TransformTest": [[103, 171], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "tranforms.ResizeImage", "tranforms.ForceFlip", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor", "tranforms.ResizeImage", "tranforms.ForceFlip", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor", "tranforms.ResizeImage", "tranforms.ForceFlip", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor", "tranforms.ResizeImage", "tranforms.ForceFlip", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor", "tranforms.ResizeImage", "tranforms.ForceFlip", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor", "tranforms.ResizeImage", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor", "tranforms.ResizeImage", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor", "tranforms.ResizeImage", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor", "tranforms.ResizeImage", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor", "tranforms.ResizeImage", "tranforms.PlaceCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "TransformTest", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "# ten crops for image test", "\n", "start_first", "=", "0", "\n", "start_center", "=", "(", "resize_size", "-", "crop_size", "-", "1", ")", "/", "2", "\n", "start_last", "=", "resize_size", "-", "crop_size", "-", "1", "\n", "data_transforms", "=", "{", "}", "\n", "data_transforms", "[", "'test0'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_first", ",", "start_first", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'test1'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_last", ",", "start_last", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'test2'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_last", ",", "start_first", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'test3'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_first", ",", "start_last", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'test4'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_center", ",", "start_center", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'test5'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_first", ",", "start_first", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'test6'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_last", ",", "start_last", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'test7'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_last", ",", "start_first", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'test8'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_first", ",", "start_last", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'test9'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_center", ",", "start_center", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "return", "data_transforms", "\n", "\n"]]}