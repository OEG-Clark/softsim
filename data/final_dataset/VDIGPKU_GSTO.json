{"home.repos.pwc.inspect_result.VDIGPKU_GSTO.None.test.parse_args": [[28, 44], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.update_config"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.None.test.parse_args", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.config.default.update_config"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test segmentation network'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "\n", "help", "=", "'experiment configure file name'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'opts'", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.None.test.main": [[46, 129], ["test.parse_args", "utils.utils.create_logger", "logger.info", "logger.info", "models.gsto_hrnet.get_seg_model", "torch.rand", "torch.rand", "torch.rand", "logger.info", "logger.info", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.state_dict", "model.state_dict.update", "nn.DataParallel().cuda.load_state_dict", "list", "torch.DataParallel().cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "timeit.default_timer", "timeit.default_timer", "logger.info", "logger.info", "pprint.pformat", "pprint.pformat", "utils.modelsummary.get_model_summary", "os.path.join", "eval", "core.function.testval", "logging.info", "logging.info", "nn.DataParallel().cuda.cuda", "torch.rand.cuda", "torch.load.items", "torch.DataParallel", "core.function.test", "numpy.int", "model.state_dict.keys"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.None.test.parse_args", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.create_logger", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.get_seg_model", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.modelsummary.get_model_summary", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.function.testval", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.function.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logger", ",", "final_output_dir", ",", "_", "=", "create_logger", "(", "\n", "config", ",", "args", ".", "cfg", ",", "'test'", ")", "\n", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "args", ")", ")", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "config", ")", ")", "\n", "\n", "# cudnn related setting", "\n", "cudnn", ".", "benchmark", "=", "config", ".", "CUDNN", ".", "BENCHMARK", "\n", "cudnn", ".", "deterministic", "=", "config", ".", "CUDNN", ".", "DETERMINISTIC", "\n", "cudnn", ".", "enabled", "=", "config", ".", "CUDNN", ".", "ENABLED", "\n", "\n", "# build model", "\n", "model", "=", "models", ".", "gsto_hrnet", ".", "get_seg_model", "(", "config", ")", "\n", "\n", "dump_input", "=", "torch", ".", "rand", "(", "\n", "(", "1", ",", "3", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", ")", "\n", "logger", ".", "info", "(", "get_model_summary", "(", "model", ".", "cuda", "(", ")", ",", "dump_input", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "if", "config", ".", "TEST", ".", "MODEL_FILE", ":", "\n", "        ", "model_state_file", "=", "config", ".", "TEST", ".", "MODEL_FILE", "\n", "", "else", ":", "\n", "        ", "model_state_file", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "\n", "'final_state.pth'", ")", "\n", "", "logger", ".", "info", "(", "'=> loading model from {}'", ".", "format", "(", "model_state_file", ")", ")", "\n", "\n", "model_state_file", "=", "config", ".", "TEST", ".", "MODEL_FILE", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "model_state_file", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", "[", "6", ":", "]", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "[", "6", ":", "]", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "gpus", "=", "list", "(", "config", ".", "GPUS", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpus", ")", ".", "cuda", "(", ")", "\n", "\n", "# prepare data", "\n", "test_size", "=", "(", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", "test_dataset", "=", "eval", "(", "'datasets.'", "+", "config", ".", "DATASET", ".", "DATASET", ")", "(", "\n", "root", "=", "config", ".", "DATASET", ".", "ROOT", ",", "\n", "list_path", "=", "config", ".", "DATASET", ".", "TEST_SET", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "multi_scale", "=", "False", ",", "\n", "flip", "=", "False", ",", "\n", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "base_size", "=", "config", ".", "TEST", ".", "BASE_SIZE", ",", "\n", "crop_size", "=", "test_size", ",", "\n", "downsample_rate", "=", "1", ")", "\n", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "if", "'val'", "in", "config", ".", "DATASET", ".", "TEST_SET", ":", "\n", "        ", "mean_IoU", ",", "IoU_array", ",", "pixel_acc", ",", "mean_acc", "=", "testval", "(", "config", ",", "\n", "test_dataset", ",", "\n", "testloader", ",", "\n", "model", ")", "\n", "\n", "msg", "=", "'MeanIU: {: 4.4f}, Pixel_Acc: {: 4.4f}, \\\n            Mean_Acc: {: 4.4f}, Class IoU: '", ".", "format", "(", "mean_IoU", ",", "\n", "pixel_acc", ",", "mean_acc", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "logging", ".", "info", "(", "IoU_array", ")", "\n", "", "elif", "'test'", "in", "config", ".", "DATASET", ".", "TEST_SET", ":", "\n", "        ", "test", "(", "config", ",", "\n", "test_dataset", ",", "\n", "testloader", ",", "\n", "model", ",", "\n", "sv_dir", "=", "final_output_dir", ")", "\n", "\n", "", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "logger", ".", "info", "(", "'Mins: %d'", "%", "np", ".", "int", "(", "(", "end", "-", "start", ")", "/", "60", ")", ")", "\n", "logger", ".", "info", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.modelsummary.get_model_summary": [[19, 136], ["collections.namedtuple", "model.eval", "model.apply", "model", "hook.remove", "str", "isinstance", "isinstance", "summary.append", "hooks.append", "str", "module.parameters", "hasattr", "isinstance", "collections.namedtuple.", "isinstance", "isinstance", "module.register_forward_hook", "str.find", "str.find", "str.find", "param_.view().size", "str.find", "list", "list", "param_.view", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "input[].size", "output.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.prod", "torch.prod", "input[].size", "list", "torch.LongTensor", "torch.LongTensor", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "module.weight.data.size", "list", "list", "str", "str", "str", "str", "output.size", "output.size"], "function", ["None"], ["def", "get_model_summary", "(", "model", ",", "*", "input_tensors", ",", "item_length", "=", "26", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param model:\n    :param input_tensors:\n    :param item_length:\n    :return:\n    \"\"\"", "\n", "\n", "summary", "=", "[", "]", "\n", "\n", "ModuleDetails", "=", "namedtuple", "(", "\n", "\"Layer\"", ",", "[", "\"name\"", ",", "\"input_size\"", ",", "\"output_size\"", ",", "\"num_parameters\"", ",", "\"multiply_adds\"", "]", ")", "\n", "hooks", "=", "[", "]", "\n", "layer_instances", "=", "{", "}", "\n", "\n", "def", "add_hooks", "(", "module", ")", ":", "\n", "\n", "        ", "def", "hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "class_name", "=", "str", "(", "module", ".", "__class__", ".", "__name__", ")", "\n", "\n", "instance_index", "=", "1", "\n", "if", "class_name", "not", "in", "layer_instances", ":", "\n", "                ", "layer_instances", "[", "class_name", "]", "=", "instance_index", "\n", "", "else", ":", "\n", "                ", "instance_index", "=", "layer_instances", "[", "class_name", "]", "+", "1", "\n", "layer_instances", "[", "class_name", "]", "=", "instance_index", "\n", "\n", "", "layer_name", "=", "class_name", "+", "\"_\"", "+", "str", "(", "instance_index", ")", "\n", "\n", "params", "=", "0", "\n", "\n", "if", "class_name", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ":", "\n", "                ", "for", "param_", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                    ", "params", "+=", "param_", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "\n", "", "", "flops", "=", "\"Not Available\"", "\n", "if", "class_name", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "and", "hasattr", "(", "module", ",", "\"weight\"", ")", ":", "\n", "                ", "flops", "=", "(", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "weight", ".", "data", ".", "size", "(", ")", ")", ")", ")", "*", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "output", ".", "size", "(", ")", ")", "[", "2", ":", "]", ")", ")", ")", ".", "item", "(", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "flops", "=", "(", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "output", ".", "size", "(", ")", ")", ")", ")", "*", "input", "[", "0", "]", ".", "size", "(", "1", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "                ", "input", "=", "input", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output", ",", "list", ")", ":", "\n", "                ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "summary", ".", "append", "(", "\n", "ModuleDetails", "(", "\n", "name", "=", "layer_name", ",", "\n", "input_size", "=", "list", "(", "input", "[", "0", "]", ".", "size", "(", ")", ")", ",", "\n", "output_size", "=", "list", "(", "output", ".", "size", "(", ")", ")", ",", "\n", "num_parameters", "=", "params", ",", "\n", "multiply_adds", "=", "flops", ")", "\n", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "module", ",", "nn", ".", "ModuleList", ")", "and", "not", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", "and", "module", "!=", "model", ":", "\n", "            ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "add_hooks", ")", "\n", "\n", "space_len", "=", "item_length", "\n", "\n", "model", "(", "*", "input_tensors", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "details", "=", "''", "\n", "if", "verbose", ":", "\n", "        ", "details", "=", "\"Model Summary\"", "+", "os", ".", "linesep", "+", "\"Name{}Input Size{}Output Size{}Parameters{}Multiply Adds (Flops){}\"", ".", "format", "(", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Name\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Input Size\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Output Size\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Parameters\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Multiply Adds (Flops)\"", ")", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "\n", "", "params_sum", "=", "0", "\n", "flops_sum", "=", "0", "\n", "for", "layer", "in", "summary", ":", "\n", "        ", "params_sum", "+=", "layer", ".", "num_parameters", "\n", "if", "layer", ".", "multiply_adds", "!=", "\"Not Available\"", ":", "\n", "            ", "flops_sum", "+=", "layer", ".", "multiply_adds", "\n", "", "if", "verbose", ":", "\n", "            ", "details", "+=", "\"{}{}{}{}{}{}{}{}{}{}\"", ".", "format", "(", "\n", "layer", ".", "name", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "layer", ".", "name", ")", ")", ",", "\n", "layer", ".", "input_size", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "input_size", ")", ")", ")", ",", "\n", "layer", ".", "output_size", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "output_size", ")", ")", ")", ",", "\n", "layer", ".", "num_parameters", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "num_parameters", ")", ")", ")", ",", "\n", "layer", ".", "multiply_adds", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "multiply_adds", ")", ")", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "\n", "", "", "details", "+=", "os", ".", "linesep", "+", "\"Total Parameters: {:,}\"", ".", "format", "(", "params_sum", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "details", "+=", "\"Total Multiply Adds (For Convolution and Linear Layers only): {:,} GFLOPs\"", ".", "format", "(", "flops_sum", "/", "(", "1024", "**", "3", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "details", "+=", "\"Number of Layers\"", "+", "os", ".", "linesep", "\n", "for", "layer", "in", "layer_instances", ":", "\n", "        ", "details", "+=", "\"{} : {} layers   \"", ".", "format", "(", "layer", ",", "layer_instances", "[", "layer", "]", ")", "\n", "\n", "", "return", "details", "", "", ""]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.FullModel.__init__": [[28, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "loss", ")", ":", "\n", "    ", "super", "(", "FullModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loss", "=", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.FullModel.forward": [[33, 45], ["utils.FullModel.model", "utils.FullModel.loss", "utils.FullModel.loss", "utils.FullModel.loss", "utils.FullModel.loss", "print", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "len", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "labels", ",", "name", "=", "None", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "model", "(", "inputs", ",", "name", "=", "None", ")", "\n", "loss4", "=", "self", ".", "loss", "(", "outputs", "[", "0", "]", ",", "labels", ")", "\n", "loss3", "=", "self", ".", "loss", "(", "outputs", "[", "1", "]", ",", "labels", ")", "if", "len", "(", "outputs", ")", ">", "1", "else", "0", "\n", "loss2", "=", "self", ".", "loss", "(", "outputs", "[", "2", "]", ",", "labels", ")", "if", "len", "(", "outputs", ")", ">", "2", "else", "0", "\n", "loss1", "=", "self", ".", "loss", "(", "outputs", "[", "3", "]", ",", "labels", ")", "if", "len", "(", "outputs", ")", ">", "3", "else", "0", "\n", "printif", "=", "False", "\n", "if", "printif", ":", "\n", "        ", "print", "(", "'loss1: {}, loss2:{}, loss3:{}, loss4:{}'", ".", "format", "(", "\n", "loss1", ",", "loss2", ",", "loss3", ",", "loss4", ")", ")", "\n", "", "loss", "=", "loss4", "+", "0.5", "*", "loss3", "+", "0.3", "*", "loss2", "+", "0.2", "*", "loss1", "\n", "return", "torch", ".", "unsqueeze", "(", "loss", ",", "0", ")", ",", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.__init__": [[49, 55], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "None", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "count", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.initialize": [[56, 62], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "val", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "avg", "=", "val", "\n", "self", ".", "sum", "=", "val", "*", "weight", "\n", "self", ".", "count", "=", "weight", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.update": [[63, 68], ["utils.AverageMeter.initialize", "utils.AverageMeter.add"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.initialize", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.add"], ["", "def", "update", "(", "self", ",", "val", ",", "weight", "=", "1", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", "val", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add", "(", "val", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.add": [[69, 74], ["None"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "val", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "weight", "\n", "self", ".", "count", "+=", "weight", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.value": [[75, 77], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.average": [[78, 80], ["None"], "methods", ["None"], ["", "def", "average", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.create_logger": [[81, 114], ["pathlib.Path", "print", "final_output_dir.mkdir", "time.strftime", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.getLogger().addHandler", "print", "tensorboard_log_dir.mkdir", "pathlib.Path.exists", "print", "pathlib.Path.mkdir", "os.path.basename().split", "str", "str", "str", "logging.getLogger", "os.path.basename", "pathlib.Path"], "function", ["None"], ["", "", "def", "create_logger", "(", "cfg", ",", "cfg_name", ",", "phase", "=", "'train'", ")", ":", "\n", "    ", "root_output_dir", "=", "Path", "(", "cfg", ".", "OUTPUT_DIR", ")", "\n", "# set up logger", "\n", "if", "not", "root_output_dir", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "'=> creating {}'", ".", "format", "(", "root_output_dir", ")", ")", "\n", "root_output_dir", ".", "mkdir", "(", ")", "\n", "\n", "", "dataset", "=", "cfg", ".", "DATASET", ".", "DATASET", "\n", "model", "=", "cfg", ".", "MODEL", ".", "NAME", "\n", "cfg_name", "=", "os", ".", "path", ".", "basename", "(", "cfg_name", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "final_output_dir", "=", "root_output_dir", "/", "dataset", "/", "cfg_name", "\n", "\n", "print", "(", "'=> creating {}'", ".", "format", "(", "final_output_dir", ")", ")", "\n", "final_output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "log_file", "=", "'{}_{}_{}.log'", ".", "format", "(", "cfg_name", ",", "time_str", ",", "phase", ")", "\n", "final_log_file", "=", "final_output_dir", "/", "log_file", "\n", "head", "=", "'%(asctime)-15s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "str", "(", "final_log_file", ")", ",", "\n", "format", "=", "head", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n", "tensorboard_log_dir", "=", "Path", "(", "cfg", ".", "LOG_DIR", ")", "/", "dataset", "/", "model", "/", "(", "cfg_name", "+", "'_'", "+", "time_str", ")", "\n", "print", "(", "'=> creating {}'", ".", "format", "(", "tensorboard_log_dir", ")", ")", "\n", "tensorboard_log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "return", "logger", ",", "str", "(", "final_output_dir", ")", ",", "str", "(", "tensorboard_log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.get_confusion_matrix": [[115, 139], ["pred.cpu().numpy().transpose", "numpy.asarray", "numpy.asarray", "numpy.bincount", "numpy.zeros", "range", "numpy.argmax", "range", "pred.cpu().numpy", "label.cpu().numpy", "len", "pred.cpu", "label.cpu"], "function", ["None"], ["", "def", "get_confusion_matrix", "(", "label", ",", "pred", ",", "size", ",", "num_class", ",", "ignore", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Calcute the confusion matrix by given label and pred\n    \"\"\"", "\n", "output", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "seg_pred", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "seg_gt", "=", "np", ".", "asarray", "(", "\n", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", "size", "[", "-", "2", "]", ",", ":", "size", "[", "-", "1", "]", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "ignore_index", "=", "seg_gt", "!=", "ignore", "\n", "seg_gt", "=", "seg_gt", "[", "ignore_index", "]", "\n", "seg_pred", "=", "seg_pred", "[", "ignore_index", "]", "\n", "\n", "index", "=", "(", "seg_gt", "*", "num_class", "+", "seg_pred", ")", ".", "astype", "(", "'int32'", ")", "\n", "label_count", "=", "np", ".", "bincount", "(", "index", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "num_class", ",", "num_class", ")", ")", "\n", "\n", "for", "i_label", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "for", "i_pred", "in", "range", "(", "num_class", ")", ":", "\n", "            ", "cur_index", "=", "i_label", "*", "num_class", "+", "i_pred", "\n", "if", "cur_index", "<", "len", "(", "label_count", ")", ":", "\n", "                ", "confusion_matrix", "[", "i_label", ",", "\n", "i_pred", "]", "=", "label_count", "[", "cur_index", "]", "\n", "", "", "", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.adjust_learning_rate": [[140, 145], ["float"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "base_lr", ",", "max_iters", ",", "\n", "cur_iters", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "lr", "=", "base_lr", "*", "(", "(", "1", "-", "float", "(", "cur_iters", ")", "/", "max_iters", ")", "**", "(", "power", ")", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "return", "lr", "", "", ""]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.lip.LIP.__init__": [[18, 48], ["base_dataset.BaseDataset.__init__", "lip.LIP.read_files", "line.strip().split", "open", "line.strip"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.read_files"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "20", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "473", ",", "\n", "crop_size", "=", "(", "473", ",", "473", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "11", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "super", "(", "LIP", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "class_weights", "=", "None", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "img_list", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "root", "+", "list_path", ")", "]", "\n", "\n", "self", ".", "files", "=", "self", ".", "read_files", "(", ")", "\n", "if", "num_samples", ":", "\n", "            ", "self", ".", "files", "=", "self", ".", "files", "[", ":", "num_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.lip.LIP.read_files": [[49, 69], ["files.append", "os.path.splitext", "NotImplementedError", "os.path.basename", "os.path.splitext", "os.path.basename"], "methods", ["None"], ["", "", "def", "read_files", "(", "self", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "img_list", ":", "\n", "            ", "if", "'train'", "in", "self", ".", "list_path", ":", "\n", "                ", "image_path", ",", "label_path", ",", "label_rev_path", ",", "_", "=", "item", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "label_path", ")", ")", "[", "0", "]", "\n", "sample", "=", "{", "\"img\"", ":", "image_path", ",", "\n", "\"label\"", ":", "label_path", ",", "\n", "\"label_rev\"", ":", "label_rev_path", ",", "\n", "\"name\"", ":", "name", ",", "}", "\n", "", "elif", "'val'", "in", "self", ".", "list_path", ":", "\n", "                ", "image_path", ",", "label_path", "=", "item", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "label_path", ")", ")", "[", "0", "]", "\n", "sample", "=", "{", "\"img\"", ":", "image_path", ",", "\n", "\"label\"", ":", "label_path", ",", "\n", "\"name\"", ":", "name", ",", "}", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Unknown subset.'", ")", "\n", "", "files", ".", "append", "(", "sample", ")", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.lip.LIP.resize_image": [[70, 74], ["cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "resize_image", "(", "self", ",", "image", ",", "label", ",", "size", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.lip.LIP.__getitem__": [[75, 110], ["cv2.imread", "cv2.imread", "lip.LIP.resize_image", "lip.LIP.gen_sample", "os.path.join", "os.path.join", "cv2.resize", "lip.LIP.input_transform", "image.transpose.transpose.transpose", "image.transpose.transpose.copy", "cv2.imread.copy", "numpy.array", "image.transpose.transpose.copy", "cv2.imread.copy", "numpy.array", "cv2.imread", "numpy.random.choice", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.lip.LIP.resize_image", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.gen_sample", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.input_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "\"name\"", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "'lip/TrainVal_images/'", ",", "item", "[", "\"img\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "'lip/TrainVal_parsing_annotations/'", ",", "\n", "item", "[", "\"label\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "size", "=", "label", ".", "shape", "\n", "\n", "if", "'testval'", "in", "self", ".", "list_path", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "self", ".", "crop_size", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n", "", "if", "self", ".", "flip", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ":", "flip", ",", ":", "]", "\n", "if", "flip", "==", "-", "1", ":", "\n", "                ", "label", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "'lip/TrainVal_parsing_annotations/'", ",", "\n", "item", "[", "\"label_rev\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "\n", "", "", "image", ",", "label", "=", "self", ".", "resize_image", "(", "image", ",", "label", ",", "self", ".", "crop_size", ")", "\n", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "False", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.lip.LIP.inference": [[111, 134], ["image.size", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.exp", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.cpu().numpy().copy", "torch.from_numpy().cuda", "image.numpy", "torch.from_numpy", "flip_img.copy", "torch.nn.functional.upsample.cpu().numpy", "torch.from_numpy", "flip_pred[].copy", "torch.nn.functional.upsample.cpu"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "model", ",", "image", ",", "flip", ")", ":", "\n", "        ", "size", "=", "image", ".", "size", "(", ")", "\n", "pred", "=", "model", "(", "image", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "if", "flip", ":", "\n", "            ", "flip_img", "=", "image", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "flip_output", "=", "model", "(", "torch", ".", "from_numpy", "(", "flip_img", ".", "copy", "(", ")", ")", ")", "\n", "flip_output", "=", "F", ".", "upsample", "(", "input", "=", "flip_output", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "flip_pred", "=", "flip_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "flip_pred", "[", ":", ",", "14", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "15", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "15", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "14", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "16", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "17", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "17", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "16", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "18", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "19", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "19", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "18", ",", ":", ",", ":", "]", "\n", "flip_pred", "=", "torch", ".", "from_numpy", "(", "flip_pred", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pred", "+=", "flip_pred", "\n", "pred", "=", "pred", "*", "0.5", "\n", "", "return", "pred", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.pascal_ctx.PASCALContext.__init__": [[20, 78], ["base_dataset.BaseDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "pascal_ctx.PASCALContext.detail.getImgs", "numpy.sort", "numpy.array().astype", "print", "os.path.exists", "Detail", "os.path.join", "numpy.array", "torch.load", "pascal_ctx.PASCALContext._preprocess", "Detail", "os.path.join", "NotImplementedError", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.pascal_ctx.PASCALContext._preprocess"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "59", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "520", ",", "\n", "crop_size", "=", "(", "480", ",", "480", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "16", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", ")", ":", "\n", "\n", "        ", "super", "(", "PASCALContext", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ")", "\n", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pascal_ctx/VOCdevkit/VOC2010'", ")", "\n", "self", ".", "split", "=", "list_path", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "class_weights", "=", "None", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "# prepare data", "\n", "annots", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'trainval_merged.json'", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'JPEGImages'", ")", "\n", "from", "detail", "import", "Detail", "\n", "if", "'val'", "in", "self", ".", "split", ":", "\n", "            ", "self", ".", "detail", "=", "Detail", "(", "annots", ",", "img_path", ",", "'val'", ")", "\n", "mask_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'val.pth'", ")", "\n", "", "elif", "'train'", "in", "self", ".", "split", ":", "\n", "            ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "detail", "=", "Detail", "(", "annots", ",", "img_path", ",", "'train'", ")", "\n", "mask_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train.pth'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'only supporting train and val set.'", ")", "\n", "", "self", ".", "files", "=", "self", ".", "detail", ".", "getImgs", "(", ")", "\n", "\n", "# generate masks", "\n", "self", ".", "_mapping", "=", "np", ".", "sort", "(", "np", ".", "array", "(", "[", "\n", "0", ",", "2", ",", "259", ",", "260", ",", "415", ",", "324", ",", "9", ",", "258", ",", "144", ",", "18", ",", "19", ",", "22", ",", "\n", "23", ",", "397", ",", "25", ",", "284", ",", "158", ",", "159", ",", "416", ",", "33", ",", "162", ",", "420", ",", "454", ",", "295", ",", "296", ",", "\n", "427", ",", "44", ",", "45", ",", "46", ",", "308", ",", "59", ",", "440", ",", "445", ",", "31", ",", "232", ",", "65", ",", "354", ",", "424", ",", "\n", "68", ",", "326", ",", "72", ",", "458", ",", "34", ",", "207", ",", "80", ",", "355", ",", "85", ",", "347", ",", "220", ",", "349", ",", "360", ",", "\n", "98", ",", "187", ",", "104", ",", "105", ",", "366", ",", "189", ",", "368", ",", "113", ",", "115", "]", ")", ")", "\n", "\n", "self", ".", "_key", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ".", "_mapping", ")", ")", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "print", "(", "'mask_file:'", ",", "mask_file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "mask_file", ")", ":", "\n", "            ", "self", ".", "masks", "=", "torch", ".", "load", "(", "mask_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "masks", "=", "self", ".", "_preprocess", "(", "mask_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.pascal_ctx.PASCALContext._class_to_index": [[79, 86], ["numpy.unique", "range", "numpy.digitize", "pascal_ctx.PASCALContext._key[].reshape", "len", "mask.ravel"], "methods", ["None"], ["", "", "def", "_class_to_index", "(", "self", ",", "mask", ")", ":", "\n", "# assert the values", "\n", "        ", "values", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "values", ")", ")", ":", "\n", "            ", "assert", "(", "values", "[", "i", "]", "in", "self", ".", "_mapping", ")", "\n", "", "index", "=", "np", ".", "digitize", "(", "mask", ".", "ravel", "(", ")", ",", "self", ".", "_mapping", ",", "right", "=", "True", ")", "\n", "return", "self", ".", "_key", "[", "index", "]", ".", "reshape", "(", "mask", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.pascal_ctx.PASCALContext._preprocess": [[87, 98], ["print", "range", "torch.save", "len", "PIL.Image.fromarray", "pascal_ctx.PASCALContext._class_to_index", "pascal_ctx.PASCALContext.detail.getMask"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.pascal_ctx.PASCALContext._class_to_index"], ["", "def", "_preprocess", "(", "self", ",", "mask_file", ")", ":", "\n", "        ", "masks", "=", "{", "}", "\n", "print", "(", "\"Preprocessing mask, this will take a while.\"", "+", "\"But don't worry, it only run once for each split.\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "files", ")", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "files", "[", "i", "]", "\n", "mask", "=", "Image", ".", "fromarray", "(", "self", ".", "_class_to_index", "(", "\n", "self", ".", "detail", ".", "getMask", "(", "img_id", ")", ")", ")", "\n", "masks", "[", "img_id", "[", "'image_id'", "]", "]", "=", "mask", "\n", "", "torch", ".", "save", "(", "masks", ",", "mask_file", ")", "\n", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.pascal_ctx.PASCALContext.__getitem__": [[99, 128], ["cv2.imread", "numpy.asarray", "os.path.join", "cv2.resize", "pascal_ctx.PASCALContext.input_transform", "image.transpose.transpose.transpose", "cv2.resize", "pascal_ctx.PASCALContext.label_transform", "image.transpose.transpose.copy", "pascal_ctx.PASCALContext.copy", "numpy.array", "pascal_ctx.PASCALContext.input_transform", "image.transpose.transpose.transpose", "pascal_ctx.PASCALContext.label_transform", "pascal_ctx.PASCALContext.gen_sample"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.input_transform", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.label_transform", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.input_transform", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.label_transform", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.gen_sample"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "'file_name'", "]", "\n", "img_id", "=", "item", "[", "'image_id'", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "detail", ".", "img_folder", ",", "name", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "np", ".", "asarray", "(", "self", ".", "masks", "[", "img_id", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "size", "=", "image", ".", "shape", "\n", "\n", "if", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "self", ".", "crop_size", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "self", ".", "crop_size", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "label", "=", "self", ".", "label_transform", "(", "label", ")", "\n", "", "elif", "self", ".", "split", "==", "'testval'", ":", "\n", "# evaluate model on val dataset", "\n", "            ", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "label", "=", "self", ".", "label_transform", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "self", ".", "flip", ")", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.pascal_ctx.PASCALContext.label_transform": [[129, 137], ["numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "label_transform", "(", "self", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "num_classes", "==", "59", ":", "\n", "# background is ignored", "\n", "            ", "label", "=", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "'int32'", ")", "-", "1", "\n", "label", "[", "label", "==", "-", "2", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "label", "=", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "'int32'", ")", "\n", "", "return", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.__init__": [[19, 67], ["base_dataset.BaseDataset.__init__", "cityscapes.Cityscapes.read_files", "torch.FloatTensor().cuda", "line.strip().split", "open", "torch.FloatTensor", "line.strip"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.read_files"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "19", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "2048", ",", "\n", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "16", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "super", "(", "Cityscapes", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ",", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "\n", "self", ".", "img_list", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "root", "+", "list_path", ")", "]", "\n", "\n", "self", ".", "files", "=", "self", ".", "read_files", "(", ")", "\n", "if", "num_samples", ":", "\n", "            ", "self", ".", "files", "=", "self", ".", "files", "[", ":", "num_samples", "]", "\n", "\n", "", "self", ".", "label_mapping", "=", "{", "-", "1", ":", "ignore_label", ",", "0", ":", "ignore_label", ",", "\n", "1", ":", "ignore_label", ",", "2", ":", "ignore_label", ",", "\n", "3", ":", "ignore_label", ",", "4", ":", "ignore_label", ",", "\n", "5", ":", "ignore_label", ",", "6", ":", "ignore_label", ",", "\n", "7", ":", "0", ",", "8", ":", "1", ",", "9", ":", "ignore_label", ",", "\n", "10", ":", "ignore_label", ",", "11", ":", "2", ",", "12", ":", "3", ",", "\n", "13", ":", "4", ",", "14", ":", "ignore_label", ",", "15", ":", "ignore_label", ",", "\n", "16", ":", "ignore_label", ",", "17", ":", "5", ",", "18", ":", "ignore_label", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "\n", "25", ":", "12", ",", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "\n", "29", ":", "ignore_label", ",", "30", ":", "ignore_label", ",", "\n", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "self", ".", "class_weights", "=", "torch", ".", "FloatTensor", "(", "[", "0.8373", ",", "0.918", ",", "0.866", ",", "1.0345", ",", "\n", "1.0166", ",", "0.9969", ",", "0.9754", ",", "1.0489", ",", "\n", "0.8786", ",", "1.0023", ",", "0.9539", ",", "0.9843", ",", "\n", "1.1116", ",", "0.9037", ",", "1.0865", ",", "1.0955", ",", "\n", "1.0865", ",", "1.1529", ",", "1.0507", "]", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.read_files": [[68, 89], ["files.append", "files.append", "os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["None"], ["", "def", "read_files", "(", "self", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "if", "'test'", "in", "self", ".", "list_path", ":", "\n", "            ", "for", "item", "in", "self", ".", "img_list", ":", "\n", "                ", "image_path", "=", "item", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "image_path", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "image_path", "[", "0", "]", ",", "\n", "\"name\"", ":", "name", ",", "\n", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "item", "in", "self", ".", "img_list", ":", "\n", "                ", "image_path", ",", "label_path", "=", "item", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "label_path", ")", ")", "[", "0", "]", "\n", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "image_path", ",", "\n", "\"label\"", ":", "label_path", ",", "\n", "\"name\"", ":", "name", ",", "\n", "\"weight\"", ":", "1", "\n", "}", ")", "\n", "", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.convert_label": [[90, 99], ["label.copy", "cityscapes.Cityscapes.label_mapping.items", "cityscapes.Cityscapes.label_mapping.items"], "methods", ["None"], ["", "def", "convert_label", "(", "self", ",", "label", ",", "inverse", "=", "False", ")", ":", "\n", "        ", "temp", "=", "label", ".", "copy", "(", ")", "\n", "if", "inverse", ":", "\n", "            ", "for", "v", ",", "k", "in", "self", ".", "label_mapping", ".", "items", "(", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "label_mapping", ".", "items", "(", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.__getitem__": [[100, 121], ["cv2.imread", "cv2.imread", "cityscapes.Cityscapes.convert_label", "cityscapes.Cityscapes.gen_sample", "os.path.join", "cityscapes.Cityscapes.input_transform", "image.transpose.transpose.transpose", "os.path.join", "image.transpose.transpose.copy", "cityscapes.Cityscapes.copy", "numpy.array", "image.transpose.transpose.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.convert_label", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.gen_sample", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.input_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "\"name\"", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'cityscapes'", ",", "item", "[", "\"img\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", ")", "\n", "size", "=", "image", ".", "shape", "\n", "\n", "if", "'test'", "in", "self", ".", "list_path", ":", "\n", "            ", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n", "", "label", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'cityscapes'", ",", "item", "[", "\"label\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "label", "=", "self", ".", "convert_label", "(", "label", ")", "\n", "\n", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "self", ".", "flip", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.multi_scale_inference": [[122, 173], ["[].transpose().copy.size", "[].transpose().copy", "numpy.int", "numpy.int", "torch.zeros().cuda", "cityscapes.Cityscapes.multi_scale_aug", "torch.nn.functional.upsample", "[].transpose", "torch.zeros", "torch.from_numpy.transpose", "numpy.expand_dims", "torch.from_numpy", "cityscapes.Cityscapes.inference", "torch.zeros().cuda", "torch.zeros().cuda", "range", "numpy.int", "numpy.int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "min", "min", "max", "max", "torch.from_numpy.transpose", "numpy.expand_dims", "torch.from_numpy", "cityscapes.Cityscapes.inference", "[].transpose().copy.numpy", "int", "int"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.multi_scale_aug", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.inference", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.inference"], ["", "def", "multi_scale_inference", "(", "self", ",", "model", ",", "image", ",", "scales", "=", "[", "1", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "batch", ",", "_", ",", "ori_height", ",", "ori_width", "=", "image", ".", "size", "(", ")", "\n", "assert", "batch", "==", "1", ",", "\"only supporting batchsize 1.\"", "\n", "image", "=", "image", ".", "numpy", "(", ")", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "copy", "(", ")", "\n", "stride_h", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.0", ")", "\n", "stride_w", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.0", ")", "\n", "final_pred", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "ori_height", ",", "ori_width", "]", ")", ".", "cuda", "(", ")", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "new_img", "=", "self", ".", "multi_scale_aug", "(", "image", "=", "image", ",", "\n", "rand_scale", "=", "scale", ",", "\n", "rand_crop", "=", "False", ")", "\n", "height", ",", "width", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "if", "scale", "<=", "1.0", ":", "\n", "                ", "new_img", "=", "new_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "new_img", "=", "np", ".", "expand_dims", "(", "new_img", ",", "axis", "=", "0", ")", "\n", "new_img", "=", "torch", ".", "from_numpy", "(", "new_img", ")", "\n", "preds", "=", "self", ".", "inference", "(", "model", ",", "new_img", ",", "flip", ")", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", "0", ":", "height", ",", "0", ":", "width", "]", "\n", "", "else", ":", "\n", "                ", "new_h", ",", "new_w", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "rows", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_h", "-", "\n", "self", ".", "crop_size", "[", "0", "]", ")", "/", "stride_h", ")", ")", "+", "1", "\n", "cols", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_w", "-", "\n", "self", ".", "crop_size", "[", "1", "]", ")", "/", "stride_w", ")", ")", "+", "1", "\n", "preds", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "new_h", ",", "new_w", "]", ")", ".", "cuda", "(", ")", "\n", "count", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "new_h", ",", "new_w", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "                    ", "for", "c", "in", "range", "(", "cols", ")", ":", "\n", "                        ", "h0", "=", "r", "*", "stride_h", "\n", "w0", "=", "c", "*", "stride_w", "\n", "h1", "=", "min", "(", "h0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "new_h", ")", "\n", "w1", "=", "min", "(", "w0", "+", "self", ".", "crop_size", "[", "1", "]", ",", "new_w", ")", "\n", "h0", "=", "max", "(", "int", "(", "h1", "-", "self", ".", "crop_size", "[", "0", "]", ")", ",", "0", ")", "\n", "w0", "=", "max", "(", "int", "(", "w1", "-", "self", ".", "crop_size", "[", "1", "]", ")", ",", "0", ")", "\n", "crop_img", "=", "new_img", "[", "h0", ":", "h1", ",", "w0", ":", "w1", ",", ":", "]", "\n", "crop_img", "=", "crop_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "crop_img", "=", "np", ".", "expand_dims", "(", "crop_img", ",", "axis", "=", "0", ")", "\n", "crop_img", "=", "torch", ".", "from_numpy", "(", "crop_img", ")", "\n", "pred", "=", "self", ".", "inference", "(", "model", ",", "crop_img", ",", "flip", ")", "\n", "preds", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "pred", "[", ":", ",", ":", ",", "0", ":", "h1", "-", "h0", ",", "0", ":", "w1", "-", "w0", "]", "\n", "count", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "1", "\n", "", "", "preds", "=", "preds", "/", "count", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", ":", "height", ",", ":", "width", "]", "\n", "", "preds", "=", "F", ".", "upsample", "(", "preds", ",", "(", "ori_height", ",", "ori_width", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "final_pred", "+=", "preds", "\n", "", "return", "final_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.get_palette": [[174, 189], ["range"], "methods", ["None"], ["", "def", "get_palette", "(", "self", ",", "n", ")", ":", "\n", "        ", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "                ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.save_pred": [[190, 198], ["cityscapes.Cityscapes.get_palette", "numpy.asarray", "range", "numpy.argmax", "cityscapes.Cityscapes.convert_label", "PIL.Image.fromarray", "PIL.Image.fromarray.putpalette", "PIL.Image.fromarray.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.get_palette", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.convert_label"], ["", "def", "save_pred", "(", "self", ",", "preds", ",", "sv_path", ",", "name", ")", ":", "\n", "        ", "palette", "=", "self", ".", "get_palette", "(", "256", ")", "\n", "preds", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pred", "=", "self", ".", "convert_label", "(", "preds", "[", "i", "]", ",", "inverse", "=", "True", ")", "\n", "save_img", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "save_img", ".", "putpalette", "(", "palette", ")", "\n", "save_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "i", "]", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.__init__": [[20, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "2048", ",", "\n", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "16", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "downsample_rate", "=", "1.", "/", "downsample_rate", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.input_transform": [[43, 49], ["image.astype"], "methods", ["None"], ["", "def", "input_transform", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "image", "=", "image", "/", "255.0", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "/=", "self", ".", "std", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.label_transform": [[50, 52], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "label_transform", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.pad_image": [[53, 63], ["image.copy", "max", "max", "cv2.copyMakeBorder"], "methods", ["None"], ["", "def", "pad_image", "(", "self", ",", "image", ",", "h", ",", "w", ",", "size", ",", "padvalue", ")", ":", "\n", "        ", "pad_image", "=", "image", ".", "copy", "(", ")", "\n", "pad_h", "=", "max", "(", "size", "[", "0", "]", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "size", "[", "1", "]", "-", "w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "pad_image", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "padvalue", ")", "\n", "\n", "", "return", "pad_image", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.rand_crop": [[64, 78], ["base_dataset.BaseDataset.pad_image", "base_dataset.BaseDataset.pad_image", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.pad_image"], ["", "def", "rand_crop", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "-", "1", "]", "\n", "image", "=", "self", ".", "pad_image", "(", "image", ",", "h", ",", "w", ",", "self", ".", "crop_size", ",", "\n", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "label", "=", "self", ".", "pad_image", "(", "label", ",", "h", ",", "w", ",", "self", ".", "crop_size", ",", "\n", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "\n", "new_h", ",", "new_w", "=", "label", ".", "shape", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "new_w", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "new_h", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "image", "=", "image", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "label", "=", "label", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.multi_scale_aug": [[79, 102], ["numpy.int", "cv2.resize", "numpy.int", "numpy.int", "cv2.resize", "base_dataset.BaseDataset.rand_crop"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.rand_crop"], ["", "def", "multi_scale_aug", "(", "self", ",", "image", ",", "label", "=", "None", ",", "\n", "rand_scale", "=", "1", ",", "rand_crop", "=", "True", ")", ":", "\n", "        ", "long_size", "=", "np", ".", "int", "(", "self", ".", "base_size", "*", "rand_scale", "+", "0.5", ")", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "if", "h", ">", "w", ":", "\n", "            ", "new_h", "=", "long_size", "\n", "new_w", "=", "np", ".", "int", "(", "w", "*", "long_size", "/", "h", "+", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "new_w", "=", "long_size", "\n", "new_h", "=", "np", ".", "int", "(", "h", "*", "long_size", "/", "w", "+", "0.5", ")", "\n", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_w", ",", "new_h", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "new_w", ",", "new_h", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "return", "image", "\n", "\n", "", "if", "rand_crop", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "rand_crop", "(", "image", ",", "label", ")", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.gen_sample": [[103, 133], ["base_dataset.BaseDataset.input_transform", "base_dataset.BaseDataset.label_transform", "PIL.ImageEnhance.Brightness().enhance.transpose", "base_dataset.BaseDataset.multi_scale_aug", "random.randint", "PIL.ImageEnhance.Brightness().enhance", "cv2.resize", "random.randint", "PIL.ImageEnhance.Brightness", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.input_transform", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.label_transform", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.multi_scale_aug"], ["", "def", "gen_sample", "(", "self", ",", "image", ",", "label", ",", "\n", "multi_scale", "=", "True", ",", "is_flip", "=", "True", ",", "is_jitter", "=", "True", ")", ":", "\n", "\n", "        ", "if", "multi_scale", ":", "\n", "            ", "rand_scale", "=", "0.5", "+", "random", ".", "randint", "(", "0", ",", "self", ".", "scale_factor", ")", "/", "10.0", "\n", "image", ",", "label", "=", "self", ".", "multi_scale_aug", "(", "image", ",", "label", ",", "\n", "rand_scale", "=", "rand_scale", ")", "\n", "\n", "", "if", "is_jitter", ":", "\n", "            ", "jitter", "=", "random", ".", "randint", "(", "-", "10", ",", "10", ")", "\n", "image", "=", "ImageEnhance", ".", "Brightness", "(", "image", ")", ".", "enhance", "(", "jitter", ")", "\n", "\n", "", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "label", "=", "self", ".", "label_transform", "(", "label", ")", "\n", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "is_flip", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "if", "self", ".", "downsample_rate", "!=", "1", ":", "\n", "            ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "\n", "None", ",", "\n", "fx", "=", "self", ".", "downsample_rate", ",", "\n", "fy", "=", "self", ".", "downsample_rate", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.inference": [[134, 151], ["image.size", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.exp", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.cpu().numpy().copy", "torch.from_numpy().cuda", "image.numpy", "torch.from_numpy", "flip_img.copy", "torch.nn.functional.upsample.cpu().numpy", "torch.from_numpy", "flip_pred[].copy", "torch.nn.functional.upsample.cpu"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "model", ",", "image", ",", "flip", "=", "False", ")", ":", "\n", "        ", "size", "=", "image", ".", "size", "(", ")", "\n", "pred", "=", "model", "(", "image", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", "[", "0", "]", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "if", "flip", ":", "\n", "            ", "flip_img", "=", "image", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "flip_output", "=", "model", "(", "torch", ".", "from_numpy", "(", "flip_img", ".", "copy", "(", ")", ")", ")", "\n", "flip_output", "=", "F", ".", "upsample", "(", "input", "=", "flip_output", "[", "0", "]", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "flip_pred", "=", "flip_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "flip_pred", "=", "torch", ".", "from_numpy", "(", "flip_pred", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pred", "+=", "flip_pred", "\n", "pred", "=", "pred", "*", "0.5", "\n", "", "return", "pred", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.multi_scale_inference": [[152, 213], ["[].transpose().copy.size", "[].transpose().copy", "numpy.int", "numpy.int", "torch.zeros().cuda", "numpy.array", "base_dataset.BaseDataset.multi_scale_aug", "torch.nn.functional.upsample", "[].transpose", "torch.zeros", "numpy.array", "max", "numpy.min", "base_dataset.BaseDataset.pad_image", "base_dataset.BaseDataset.transpose", "numpy.expand_dims", "torch.from_numpy", "base_dataset.BaseDataset.inference", "torch.zeros().cuda", "torch.zeros().cuda", "range", "base_dataset.BaseDataset.pad_image", "numpy.int", "numpy.int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "min", "min", "base_dataset.BaseDataset.transpose", "numpy.expand_dims", "torch.from_numpy", "base_dataset.BaseDataset.inference", "[].transpose().copy.numpy", "base_dataset.BaseDataset.pad_image"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.multi_scale_aug", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.inference", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.inference", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.pad_image"], ["", "def", "multi_scale_inference", "(", "self", ",", "model", ",", "image", ",", "scales", "=", "[", "1", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "batch", ",", "_", ",", "ori_height", ",", "ori_width", "=", "image", ".", "size", "(", ")", "\n", "assert", "batch", "==", "1", ",", "\"only supporting batchsize 1.\"", "\n", "image", "=", "image", ".", "numpy", "(", ")", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "copy", "(", ")", "\n", "stride_h", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "2.0", "/", "3.0", ")", "\n", "stride_w", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "2.0", "/", "3.0", ")", "\n", "final_pred", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "ori_height", ",", "ori_width", "]", ")", ".", "cuda", "(", ")", "\n", "padvalue", "=", "-", "1.0", "*", "np", ".", "array", "(", "self", ".", "mean", ")", "/", "np", ".", "array", "(", "self", ".", "std", ")", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "new_img", "=", "self", ".", "multi_scale_aug", "(", "image", "=", "image", ",", "\n", "rand_scale", "=", "scale", ",", "\n", "rand_crop", "=", "False", ")", "\n", "height", ",", "width", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "if", "max", "(", "height", ",", "width", ")", "<=", "np", ".", "min", "(", "self", ".", "crop_size", ")", ":", "\n", "                ", "new_img", "=", "self", ".", "pad_image", "(", "new_img", ",", "height", ",", "width", ",", "\n", "self", ".", "crop_size", ",", "padvalue", ")", "\n", "new_img", "=", "new_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "new_img", "=", "np", ".", "expand_dims", "(", "new_img", ",", "axis", "=", "0", ")", "\n", "new_img", "=", "torch", ".", "from_numpy", "(", "new_img", ")", "\n", "preds", "=", "self", ".", "inference", "(", "model", ",", "new_img", ",", "flip", ")", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", "0", ":", "height", ",", "0", ":", "width", "]", "\n", "", "else", ":", "\n", "                ", "if", "height", "<", "self", ".", "crop_size", "[", "0", "]", "or", "width", "<", "self", ".", "crop_size", "[", "1", "]", ":", "\n", "                    ", "new_img", "=", "self", ".", "pad_image", "(", "new_img", ",", "height", ",", "width", ",", "\n", "self", ".", "crop_size", ",", "padvalue", ")", "\n", "", "new_h", ",", "new_w", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "rows", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_h", "-", "\n", "self", ".", "crop_size", "[", "0", "]", ")", "/", "stride_h", ")", ")", "+", "1", "\n", "cols", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_w", "-", "\n", "self", ".", "crop_size", "[", "1", "]", ")", "/", "stride_w", ")", ")", "+", "1", "\n", "preds", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "new_h", ",", "new_w", "]", ")", ".", "cuda", "(", ")", "\n", "count", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "new_h", ",", "new_w", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "                    ", "for", "c", "in", "range", "(", "cols", ")", ":", "\n", "                        ", "h0", "=", "r", "*", "stride_h", "\n", "w0", "=", "c", "*", "stride_w", "\n", "h1", "=", "min", "(", "h0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "new_h", ")", "\n", "w1", "=", "min", "(", "w0", "+", "self", ".", "crop_size", "[", "1", "]", ",", "new_w", ")", "\n", "crop_img", "=", "new_img", "[", "h0", ":", "h1", ",", "w0", ":", "w1", ",", ":", "]", "\n", "if", "h1", "==", "new_h", "or", "w1", "==", "new_w", ":", "\n", "                            ", "crop_img", "=", "self", ".", "pad_image", "(", "crop_img", ",", "\n", "h1", "-", "h0", ",", "\n", "w1", "-", "w0", ",", "\n", "self", ".", "crop_size", ",", "\n", "padvalue", ")", "\n", "", "crop_img", "=", "crop_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "crop_img", "=", "np", ".", "expand_dims", "(", "crop_img", ",", "axis", "=", "0", ")", "\n", "crop_img", "=", "torch", ".", "from_numpy", "(", "crop_img", ")", "\n", "pred", "=", "self", ".", "inference", "(", "model", ",", "crop_img", ",", "flip", ")", "\n", "preds", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "pred", "[", ":", ",", ":", ",", "0", ":", "h1", "-", "h0", ",", "0", ":", "w1", "-", "w0", "]", "\n", "count", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "1", "\n", "", "", "preds", "=", "preds", "/", "count", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", ":", "height", ",", ":", "width", "]", "\n", "", "preds", "=", "F", ".", "upsample", "(", "preds", ",", "(", "ori_height", ",", "ori_width", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "final_pred", "+=", "preds", "\n", "", "return", "final_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.ColorJitter.__init__": [[226, 231], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "brightness", "\n", "self", ".", "contrast", "=", "contrast", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.ColorJitter.get_params": [[232, 265], ["numpy.random.shuffle", "torch_tr.Compose", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "max", "torch_tr.Lambda", "max", "torch_tr.Lambda", "max", "torch_tr.Lambda", "torch_tr.Lambda", "adjust_brightness", "adjust_contrast", "adjust_saturation", "adjust_hue"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_brightness", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_contrast", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_saturation", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_hue"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n        Arguments are same as that of __init__.\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "if", "brightness", ">", "0", ":", "\n", "            ", "brightness_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "brightness", ")", ",", "1", "+", "brightness", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ")", ")", "\n", "\n", "", "if", "contrast", ">", "0", ":", "\n", "            ", "contrast_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "contrast", ")", ",", "1", "+", "contrast", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ")", ")", "\n", "\n", "", "if", "saturation", ">", "0", ":", "\n", "            ", "saturation_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "saturation", ")", ",", "1", "+", "saturation", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ")", ")", "\n", "\n", "", "if", "hue", ">", "0", ":", "\n", "            ", "hue_factor", "=", "np", ".", "random", ".", "uniform", "(", "-", "hue", ",", "hue", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_hue", "(", "img", ",", "hue_factor", ")", ")", ")", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "transforms", ")", "\n", "transform", "=", "torch_tr", ".", "Compose", "(", "transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.ColorJitter.__call__": [[266, 276], ["base_dataset.ColorJitter.get_params", "base_dataset.ColorJitter."], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.ColorJitter.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Input image.\n        Returns:\n            PIL Image: Color jittered image.\n        \"\"\"", "\n", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "return", "transform", "(", "img", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.ColorJitter.__init__": [[153, 158], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "brightness", "\n", "self", ".", "contrast", "=", "contrast", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.ColorJitter.get_params": [[159, 192], ["numpy.random.shuffle", "torchvision.Compose", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "max", "torchvision.Lambda", "max", "torchvision.Lambda", "max", "torchvision.Lambda", "torchvision.Lambda", "transform.adjust_brightness", "transform.adjust_contrast", "transform.adjust_saturation", "transform.adjust_hue"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_brightness", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_contrast", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_saturation", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_hue"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n        Arguments are same as that of __init__.\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "if", "brightness", ">", "0", ":", "\n", "            ", "brightness_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "brightness", ")", ",", "1", "+", "brightness", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ")", ")", "\n", "\n", "", "if", "contrast", ">", "0", ":", "\n", "            ", "contrast_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "contrast", ")", ",", "1", "+", "contrast", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ")", ")", "\n", "\n", "", "if", "saturation", ">", "0", ":", "\n", "            ", "saturation_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "saturation", ")", ",", "1", "+", "saturation", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ")", ")", "\n", "\n", "", "if", "hue", ">", "0", ":", "\n", "            ", "hue_factor", "=", "np", ".", "random", ".", "uniform", "(", "-", "hue", ",", "hue", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_hue", "(", "img", ",", "hue_factor", ")", ")", ")", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "transforms", ")", "\n", "transform", "=", "torch_tr", ".", "Compose", "(", "transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.ColorJitter.__call__": [[193, 203], ["transform.ColorJitter.ColorJitter.get_params", "transform.ColorJitter.ColorJitter."], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.ColorJitter.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Input image.\n        Returns:\n            PIL Image: Color jittered image.\n        \"\"\"", "\n", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "return", "transform", "(", "img", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform._is_pil_image": [[42, 47], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "_is_pil_image", "(", "img", ")", ":", "\n", "    ", "if", "accimage", "is", "not", "None", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "(", "Image", ".", "Image", ",", "accimage", ".", "Image", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_brightness": [[48, 64], ["PIL.ImageEnhance.Brightness", "ImageEnhance.Brightness.enhance", "transform._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform._is_pil_image"], ["", "", "def", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ":", "\n", "    ", "\"\"\"Adjust brightness of an Image.\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        brightness_factor (float):  How much to adjust the brightness. Can be\n            any non negative number. 0 gives a black image, 1 gives the\n            original image while 2 increases the brightness by a factor of 2.\n    Returns:\n        PIL Image: Brightness adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "brightness_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_contrast": [[66, 82], ["PIL.ImageEnhance.Contrast", "ImageEnhance.Contrast.enhance", "transform._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform._is_pil_image"], ["", "def", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ":", "\n", "    ", "\"\"\"Adjust contrast of an Image.\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        contrast_factor (float): How much to adjust the contrast. Can be any\n            non negative number. 0 gives a solid gray image, 1 gives the\n            original image while 2 increases the contrast by a factor of 2.\n    Returns:\n        PIL Image: Contrast adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "contrast_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_saturation": [[84, 100], ["PIL.ImageEnhance.Color", "ImageEnhance.Color.enhance", "transform._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform._is_pil_image"], ["", "def", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ":", "\n", "    ", "\"\"\"Adjust color saturation of an image.\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        saturation_factor (float):  How much to adjust the saturation. 0 will\n            give a black and white image, 1 will give the original image while\n            2 will enhance the saturation by a factor of 2.\n    Returns:\n        PIL Image: Saturation adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Color", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "saturation_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform.adjust_hue": [[102, 140], ["Image.merge().convert.convert().split", "numpy.array", "PIL.Image.fromarray", "PIL.Image.merge().convert", "ValueError", "transform._is_pil_image", "TypeError", "numpy.errstate", "numpy.uint8", "Image.merge().convert.convert", "PIL.Image.merge", "type"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.transform._is_pil_image"], ["", "def", "adjust_hue", "(", "img", ",", "hue_factor", ")", ":", "\n", "    ", "\"\"\"Adjust hue of an image.\n    The image hue is adjusted by converting the image to HSV and\n    cyclically shifting the intensities in the hue channel (H).\n    The image is then converted back to original image mode.\n    `hue_factor` is the amount of shift in H channel and must be in the\n    interval `[-0.5, 0.5]`.\n    See https://en.wikipedia.org/wiki/Hue for more details on Hue.\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        hue_factor (float):  How much to shift the hue channel. Should be in\n            [-0.5, 0.5]. 0.5 and -0.5 give complete reversal of hue channel in\n            HSV space in positive and negative direction respectively.\n            0 means no shift. Therefore, both -0.5 and 0.5 will give an image\n            with complementary colors while 0 gives the original image.\n    Returns:\n        PIL Image: Hue adjusted image.\n    \"\"\"", "\n", "if", "not", "(", "-", "0.5", "<=", "hue_factor", "<=", "0.5", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'hue_factor is not in [-0.5, 0.5].'", ".", "format", "(", "hue_factor", ")", ")", "\n", "\n", "", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "input_mode", "=", "img", ".", "mode", "\n", "if", "input_mode", "in", "{", "'L'", ",", "'1'", ",", "'I'", ",", "'F'", "}", ":", "\n", "        ", "return", "img", "\n", "\n", "", "h", ",", "s", ",", "v", "=", "img", ".", "convert", "(", "'HSV'", ")", ".", "split", "(", ")", "\n", "\n", "np_h", "=", "np", ".", "array", "(", "h", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# uint8 addition take cares of rotation across boundaries", "\n", "with", "np", ".", "errstate", "(", "over", "=", "'ignore'", ")", ":", "\n", "        ", "np_h", "+=", "np", ".", "uint8", "(", "hue_factor", "*", "255", ")", "\n", "", "h", "=", "Image", ".", "fromarray", "(", "np_h", ",", "'L'", ")", "\n", "\n", "img", "=", "Image", ".", "merge", "(", "'HSV'", ",", "(", "h", ",", "s", ",", "v", ")", ")", ".", "convert", "(", "input_mode", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.config.default.update_config": [[131, 138], ["cfg.defrost", "cfg.merge_from_file", "cfg.merge_from_list", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.BasicBlock.__init__": [[37, 46], ["torch.Module.__init__", "gsto_hrnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "gsto_hrnet.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.conv3x3", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.BasicBlock.forward": [[47, 64], ["gsto_hrnet.BasicBlock.conv1", "gsto_hrnet.BasicBlock.bn1", "gsto_hrnet.BasicBlock.relu", "gsto_hrnet.BasicBlock.conv2", "gsto_hrnet.BasicBlock.bn2", "gsto_hrnet.BasicBlock.relu", "gsto_hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.Bottleneck.__init__": [[69, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.Bottleneck.forward": [[84, 105], ["gsto_hrnet.Bottleneck.conv1", "gsto_hrnet.Bottleneck.bn1", "gsto_hrnet.Bottleneck.relu", "gsto_hrnet.Bottleneck.conv2", "gsto_hrnet.Bottleneck.bn2", "gsto_hrnet.Bottleneck.relu", "gsto_hrnet.Bottleneck.conv3", "gsto_hrnet.Bottleneck.bn3", "gsto_hrnet.Bottleneck.relu", "gsto_hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule.__init__": [[108, 124], ["torch.Module.__init__", "gsto_hrnet.HighResolutionModule._check_branches", "gsto_hrnet.HighResolutionModule._make_branches", "gsto_hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", ",", "self", ".", "att_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule._check_branches": [[125, 144], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule._make_one_branch": [[145, 168], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule._make_branches": [[169, 177], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "gsto_hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule._make_fuse_layers": [[178, 236], ["range", "range", "fuse_layers.append", "att_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "att_layer.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "att_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "att_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "att_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "1", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", ")", "\n", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "att_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "att_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", ",", "nn", ".", "ModuleList", "(", "att_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule.get_num_inchannels": [[237, 239], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule.forward": [[240, 271], ["range", "range", "len", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "range", "x_fuse.append", "x[].size", "x[].size", "x[].size", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "gsto_hrnet.HighResolutionModule.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x[].size", "x[].size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "b", ",", "h", ",", "w", "=", "x", "[", "0", "]", ".", "size", "(", "0", ")", ",", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "att", "=", "F", ".", "sigmoid", "(", "self", ".", "att_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", ".", "view", "(", "b", ",", "-", "1", ",", "h", "*", "w", ")", ")", ".", "view", "(", "b", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "x_att", "=", "att", "*", "x", "[", "0", "]", "\n", "y", "=", "x_att", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x_att", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "h", ",", "w", "=", "x", "[", "j", "]", ".", "size", "(", "2", ")", ",", "x", "[", "j", "]", ".", "size", "(", "3", ")", "\n", "att", "=", "F", ".", "sigmoid", "(", "self", ".", "att_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ".", "view", "(", "b", ",", "-", "1", ",", "h", "*", "w", ")", ")", ".", "view", "(", "b", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "x_att", "=", "att", "*", "x", "[", "j", "]", "\n", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x_att", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x_att", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x_att", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet.__init__": [[281, 341], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "gsto_hrnet.HighResolutionNet._make_layer", "gsto_hrnet.HighResolutionNet._make_transition_layer1", "gsto_hrnet.HighResolutionNet._make_stage", "numpy.int", "gsto_hrnet.HighResolutionNet._make_predict_layer", "gsto_hrnet.HighResolutionNet._make_transition_layer1", "gsto_hrnet.HighResolutionNet._make_stage", "numpy.int", "gsto_hrnet.HighResolutionNet._make_predict_layer", "gsto_hrnet.HighResolutionNet._make_transition_layer1", "gsto_hrnet.HighResolutionNet._make_stage", "numpy.int", "gsto_hrnet.HighResolutionNet._make_predict_layer", "numpy.sum", "numpy.sum", "numpy.sum", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_transition_layer1", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_predict_layer", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_transition_layer1", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_predict_layer", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_transition_layer1", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_predict_layer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "extra", "=", "config", ".", "MODEL", ".", "EXTRA", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", "\n", "self", ".", "final_conv_kernel", "=", "extra", ".", "FINAL_CONV_KERNEL", "\n", "\n", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "stage1_cfg", "=", "extra", "[", "'STAGE1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "\n", "self", ".", "stage2_cfg", "=", "extra", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", ",", "self", ".", "att1", "=", "self", ".", "_make_transition_layer1", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "self", ".", "last_layer_stage2", "=", "self", ".", "_make_predict_layer", "(", "last_inp_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "extra", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", ",", "self", ".", "att2", "=", "self", ".", "_make_transition_layer1", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "self", ".", "last_layer_stage3", "=", "self", ".", "_make_predict_layer", "(", "last_inp_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "extra", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", ",", "self", ".", "att3", "=", "self", ".", "_make_transition_layer1", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "self", ".", "last_layer", "=", "self", ".", "_make_predict_layer", "(", "last_inp_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_predict_layer": [[342, 363], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_make_predict_layer", "(", "\n", "self", ",", "last_inp_channels", ",", "num_classes", "=", "None", ")", ":", "\n", "        ", "if", "not", "num_classes", ":", "\n", "            ", "num_classes", "=", "self", ".", "num_classes", "\n", "", "predict_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "last_inp_channels", ",", "\n", "out_channels", "=", "last_inp_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", "BatchNorm2d", "(", "last_inp_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "last_inp_channels", ",", "\n", "out_channels", "=", "num_classes", ",", "\n", "kernel_size", "=", "self", ".", "final_conv_kernel", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "self", ".", "final_conv_kernel", "==", "3", "else", "0", ")", "\n", ")", "\n", "return", "predict_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_transition_layer1": [[365, 414], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "att_layers.append", "range", "att_layers.append", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "att_conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer1", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "att_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "att_layers", ".", "append", "(", "None", ")", "\n", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "att_conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                    ", "inp", "=", "self", ".", "num_classes", "if", "j", "==", "0", "else", "1", "\n", "stride", "=", "1", "if", "j", "==", "0", "else", "2", "\n", "att_conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inp", ",", "1", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "1", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", ")", "\n", "", "att_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "att_conv3x3s", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", ",", "nn", ".", "ModuleList", "(", "att_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_layer": [[416, 432], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet._make_stage": [[433, 461], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "gsto_hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet.forward": [[462, 527], ["gsto_hrnet.HighResolutionNet.conv1", "gsto_hrnet.HighResolutionNet.bn1", "gsto_hrnet.HighResolutionNet.relu", "gsto_hrnet.HighResolutionNet.conv2", "gsto_hrnet.HighResolutionNet.bn2", "gsto_hrnet.HighResolutionNet.relu", "gsto_hrnet.HighResolutionNet.layer1", "range", "gsto_hrnet.HighResolutionNet.stage2", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gsto_hrnet.HighResolutionNet.last_layer_stage2", "range", "gsto_hrnet.HighResolutionNet.stage3", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gsto_hrnet.HighResolutionNet.last_layer_stage3", "range", "gsto_hrnet.HighResolutionNet.stage4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gsto_hrnet.HighResolutionNet.last_layer", "gsto_hrnet.HighResolutionNet.size", "gsto_hrnet.HighResolutionNet.size", "gsto_hrnet.HighResolutionNet.size", "x[].size", "x[].size", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x_list.append", "x_list.append", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "bs", ",", "x0_h", ",", "x0_w", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "\n", "# Upsampling", "\n", "x1", "=", "F", ".", "upsample", "(", "y_list", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "y_list", "[", "0", "]", ",", "x1", "]", ",", "1", ")", "\n", "x_stage2", "=", "self", ".", "last_layer_stage2", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "att2", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "att", "=", "F", ".", "sigmoid", "(", "self", ".", "att2", "[", "i", "]", "(", "x_stage2", ")", ")", "\n", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", "*", "att", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "i", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "# Upsampling", "\n", "x1", "=", "F", ".", "upsample", "(", "y_list", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x2", "=", "F", ".", "upsample", "(", "y_list", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "y_list", "[", "0", "]", ",", "x1", ",", "x2", "]", ",", "1", ")", "\n", "x_stage3", "=", "self", ".", "last_layer_stage3", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "att3", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "att", "=", "F", ".", "sigmoid", "(", "self", ".", "att3", "[", "i", "]", "(", "x_stage3", ")", ")", "\n", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", "*", "att", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "i", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# Upsampling", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "upsample", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x2", "=", "F", ".", "upsample", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x3", "=", "F", ".", "upsample", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "\n", "return", "[", "x", ",", "x_stage3", ",", "x_stage2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.HighResolutionNet.init_weights": [[528, 547], ["logger.info", "gsto_hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "gsto_hrnet.HighResolutionNet.state_dict", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "gsto_hrnet.HighResolutionNet.update", "gsto_hrnet.HighResolutionNet.load_state_dict", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "logger.info", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "gsto_hrnet.HighResolutionNet.keys"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "InPlaceABNSync", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "for", "k", ",", "_", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'=> loading {} pretrained model {}'", ".", "format", "(", "k", ",", "pretrained", ")", ")", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.models.gsto_hrnet.get_seg_model": [[548, 553], ["gsto_hrnet.HighResolutionNet"], "function", ["None"], ["", "", "", "def", "get_seg_model", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "cfg", ",", "**", "kwargs", ")", "\n", "# model.init_weights(cfg.MODEL.PRETRAINED)", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions.InPlaceABN.forward": [[76, 114], ["functions._count_samples", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "running_mean.contiguous", "running_var.contiguous", "running_mean.mul_", "running_var.mul_"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._count_samples", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.forward", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._act_forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "# Update running stats", "\n", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions.InPlaceABN.backward": [[115, 136], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._act_backward", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions.InPlaceABNSync.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "# TODO: implement simplified CUDA backward for inference mode", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions.InPlaceABNSync.forward": [[139, 200], ["cls._parse_extra", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "functions._count_samples", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "range", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.mean", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "running_mean.contiguous", "running_var.contiguous", "ctx.master_queue.get", "ctx.master_queue.task_done", "torch.gather.append", "torch.gather.append", "queue.put", "running_mean.mul_", "running_var.mul_", "comm.gather.mean.unsqueeze", "var.unsqueeze", "mean_w.unsqueeze", "var_w.unsqueeze", "comm.gather.mean.get_device"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions.InPlaceABNSync._parse_extra", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.forward", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._act_forward", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._count_samples"], ["    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "extra", ",", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "cls", ".", "_parse_extra", "(", "ctx", ",", "extra", ")", "\n", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "*", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "means", ",", "vars", "=", "[", "mean", ".", "unsqueeze", "(", "0", ")", "]", ",", "[", "var", ".", "unsqueeze", "(", "0", ")", "]", "\n", "for", "_", "in", "range", "(", "ctx", ".", "master_queue", ".", "maxsize", ")", ":", "\n", "                    ", "mean_w", ",", "var_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "means", ".", "append", "(", "mean_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "vars", ".", "append", "(", "var_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "means", "=", "comm", ".", "gather", "(", "means", ")", "\n", "vars", "=", "comm", ".", "gather", "(", "vars", ")", "\n", "\n", "mean", "=", "means", ".", "mean", "(", "0", ")", "\n", "var", "=", "(", "vars", "+", "(", "mean", "-", "means", ")", "**", "2", ")", ".", "mean", "(", "0", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "mean", ",", "var", ")", ",", "[", "mean", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "mean", ",", "var", ")", ")", "\n", "mean", ",", "var", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "\n", "# Update running stats", "\n", "", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions.InPlaceABNSync.backward": [[201, 240], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "range", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size", "len", "ctx.master_queue.get", "ctx.master_queue.task_done", "edzs.append", "eydzs.append", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "queue.put", "dz.contiguous.new_zeros.get_device"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._act_backward", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions.InPlaceABNSync.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "edzs", ",", "eydzs", "=", "[", "edz", "]", ",", "[", "eydz", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "ctx", ".", "worker_queues", ")", ")", ":", "\n", "                    ", "edz_w", ",", "eydz_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "edzs", ".", "append", "(", "edz_w", ")", "\n", "eydzs", ".", "append", "(", "eydz_w", ")", "\n", "\n", "", "edz", "=", "comm", ".", "reduce_add", "(", "edzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "eydz", "=", "comm", ".", "reduce_add", "(", "eydzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "edz", ",", "eydz", ")", ",", "[", "edz", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "edz", ",", "eydz", ")", ")", "\n", "edz", ",", "eydz", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions.InPlaceABNSync._parse_extra": [[241, 251], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_parse_extra", "(", "ctx", ",", "extra", ")", ":", "\n", "        ", "ctx", ".", "is_master", "=", "extra", "[", "\"is_master\"", "]", "\n", "if", "ctx", ".", "is_master", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queues", "=", "extra", "[", "\"worker_queues\"", "]", "\n", "ctx", ".", "worker_ids", "=", "extra", "[", "\"worker_ids\"", "]", "\n", "", "else", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queue", "=", "extra", "[", "\"worker_queue\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._check": [[25, 29], ["fn", "RuntimeError"], "function", ["None"], ["def", "_check", "(", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "success", "=", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "not", "success", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"CUDA Error encountered in {}\"", ".", "format", "(", "fn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._broadcast_shape": [[31, 39], ["enumerate", "x.size", "out_size.append", "out_size.append"], "function", ["None"], ["", "", "def", "_broadcast_shape", "(", "x", ")", ":", "\n", "    ", "out_size", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "out_size", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "out_size", ".", "append", "(", "s", ")", "\n", "", "", "return", "out_size", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._reduce": [[41, 47], ["len", "x.sum", "x.contiguous().view().sum().sum", "x.size", "x.size", "x.contiguous().view().sum", "x.contiguous().view", "x.contiguous"], "function", ["None"], ["", "def", "_reduce", "(", "x", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "return", "x", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "n", ",", "c", "=", "x", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "(", "n", ",", "c", ",", "-", "1", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._count_samples": [[49, 55], ["enumerate", "x.size"], "function", ["None"], ["", "", "def", "_count_samples", "(", "x", ")", ":", "\n", "    ", "count", "=", "1", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "count", "*=", "s", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._act_forward": [[57, 64], ["_backend.leaky_relu_forward", "_backend.elu_forward"], "function", ["None"], ["", "def", "_act_forward", "(", "ctx", ",", "x", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_forward", "(", "x", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_forward", "(", "x", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions._act_backward": [[66, 73], ["_backend.leaky_relu_backward", "_backend.elu_backward"], "function", ["None"], ["", "", "def", "_act_backward", "(", "ctx", ",", "x", ",", "dx", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_backward", "(", "x", ",", "dx", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_backward", "(", "x", ",", "dx", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.ABN.__init__": [[23, 57], ["torch.Module.__init__", "bn.ABN.register_buffer", "bn.ABN.register_buffer", "bn.ABN.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bn.ABN.register_parameter", "bn.ABN.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.ABN.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "ABN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "slope", "=", "slope", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.ABN.reset_parameters": [[58, 64], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_mean", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_var", ",", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.ABN.forward": [[65, 77], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.elu", "torch.elu", "torch.elu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "functional", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "activation", "==", "ACT_RELU", ":", "\n", "            ", "return", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "            ", "return", "functional", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "self", ".", "slope", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_ELU", ":", "\n", "            ", "return", "functional", ".", "elu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.ABN.__repr__": [[78, 86], ["rep.format"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.InPlaceABN.__init__": [[91, 110], ["bn.ABN.__init__"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABN", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.InPlaceABN.forward": [[111, 114], ["inplace_abn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "inplace_abn", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.InPlaceABNSync.__init__": [[122, 150], ["bn.ABN.__init__", "Queue", "list", "len", "Queue", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "devices", "=", "None", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "\n", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates a synchronized, InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        devices : list of int or None\n            IDs of the GPUs that will run the replicas of this module.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABNSync", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "self", ".", "devices", "=", "devices", "if", "devices", "else", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "# Initialize queues", "\n", "self", ".", "worker_ids", "=", "self", ".", "devices", "[", "1", ":", "]", "\n", "self", ".", "master_queue", "=", "Queue", "(", "len", "(", "self", ".", "worker_ids", ")", ")", "\n", "self", ".", "worker_queues", "=", "[", "Queue", "(", "1", ")", "for", "_", "in", "self", ".", "worker_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.InPlaceABNSync.forward": [[151, 170], ["inplace_abn_sync", "x.get_device", "bn.InPlaceABNSync.worker_ids.index", "x.get_device"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "get_device", "(", ")", "==", "self", ".", "devices", "[", "0", "]", ":", "\n", "# Master mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "True", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queues\"", ":", "self", ".", "worker_queues", ",", "\n", "\"worker_ids\"", ":", "self", ".", "worker_ids", "\n", "}", "\n", "", "else", ":", "\n", "# Worker mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "False", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queue\"", ":", "self", ".", "worker_queues", "[", "self", ".", "worker_ids", ".", "index", "(", "x", ".", "get_device", "(", ")", ")", "]", "\n", "}", "\n", "\n", "", "return", "inplace_abn_sync", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.bn.InPlaceABNSync.__repr__": [[171, 179], ["rep.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, devices={devices}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.function.train": [[23, 65], ["model.train", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "time.time", "enumerate", "writer.add_scalar", "labels.long().cuda.long().cuda", "model", "losses.mean", "model.zero_grad", "losses.mean.backward", "optimizer.step", "utils.utils.AverageMeter.update", "time.time", "utils.utils.AverageMeter.update", "utils.utils.adjust_learning_rate", "utils.utils.AverageMeter.average", "losses.mean.item", "logging.info", "labels.long().cuda.long", "time.time", "utils.utils.AverageMeter.average", "utils.utils.AverageMeter.average"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.function.train", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.inplace_abn.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.average"], ["def", "train", "(", "config", ",", "epoch", ",", "num_epoch", ",", "epoch_iters", ",", "base_lr", ",", "\n", "num_iters", ",", "trainloader", ",", "optimizer", ",", "model", ",", "writer_dict", ")", ":", "\n", "# Training", "\n", "    ", "model", ".", "train", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "ave_loss", "=", "AverageMeter", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "cur_iters", "=", "epoch", "*", "epoch_iters", "\n", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'train_global_steps'", "]", "\n", "for", "i_iter", ",", "batch", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "        ", "images", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "losses", ",", "_", "=", "model", "(", "images", ",", "labels", ")", "\n", "loss", "=", "losses", ".", "mean", "(", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tic", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "# update average loss", "\n", "ave_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "\n", "base_lr", ",", "\n", "num_iters", ",", "\n", "i_iter", "+", "cur_iters", ")", "\n", "\n", "if", "i_iter", "%", "config", ".", "PRINT_FREQ", "==", "0", ":", "\n", "            ", "msg", "=", "'Epoch: [{}/{}] Iter:[{}/{}], Time: {:.2f}, '", "'lr: {:.6f}, Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "num_epoch", ",", "i_iter", ",", "epoch_iters", ",", "\n", "batch_time", ".", "average", "(", ")", ",", "lr", ",", "ave_loss", ".", "average", "(", ")", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "", "writer", ".", "add_scalar", "(", "'train_loss'", ",", "ave_loss", ".", "average", "(", ")", ",", "global_steps", ")", "\n", "writer_dict", "[", "'train_global_steps'", "]", "=", "global_steps", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.function.validate": [[66, 102], ["model.eval", "utils.utils.AverageMeter", "numpy.zeros", "np.zeros.sum", "np.zeros.sum", "numpy.diag", "IoU_array.mean", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.maximum", "utils.utils.AverageMeter.average", "utils.utils.AverageMeter.average", "label.long().cuda.size", "label.long().cuda.long().cuda", "model", "torch.nn.functional.upsample", "losses.mean", "utils.utils.AverageMeter.update", "utils.utils.get_confusion_matrix", "losses.mean.item", "label.long().cuda.long"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.get_confusion_matrix"], ["", "def", "validate", "(", "config", ",", "testloader", ",", "model", ",", "writer_dict", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "ave_loss", "=", "AverageMeter", "(", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "\n", "(", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "config", ".", "DATASET", ".", "NUM_CLASSES", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "image", ",", "label", ",", "_", ",", "_", "=", "batch", "\n", "size", "=", "label", ".", "size", "(", ")", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "losses", ",", "pred", "=", "model", "(", "image", ",", "label", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", ",", "size", "=", "(", "\n", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "loss", "=", "losses", ".", "mean", "(", ")", "\n", "ave_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "confusion_matrix", "+=", "get_confusion_matrix", "(", "\n", "label", ",", "\n", "pred", ",", "\n", "size", ",", "\n", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ")", "\n", "\n", "", "", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "\n", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'valid_global_steps'", "]", "\n", "writer", ".", "add_scalar", "(", "'valid_loss'", ",", "ave_loss", ".", "average", "(", ")", ",", "global_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'valid_mIoU'", ",", "mean_IoU", ",", "global_steps", ")", "\n", "writer_dict", "[", "'valid_global_steps'", "]", "=", "global_steps", "+", "1", "\n", "return", "ave_loss", ".", "average", "(", ")", ",", "mean_IoU", ",", "IoU_array", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.function.testval": [[103, 153], ["model.eval", "numpy.zeros", "np.zeros.sum", "np.zeros.sum", "numpy.diag", "IoU_array.mean", "torch.no_grad", "torch.no_grad", "enumerate", "np.diag.sum", "confusion_matrix.sum.sum", "numpy.maximum", "tqdm.tqdm", "label.size", "test_dataset.multi_scale_inference", "utils.utils.get_confusion_matrix", "torch.nn.functional.upsample", "os.path.join", "test_dataset.save_pred", "logging.info", "np.zeros.sum", "np.zeros.sum", "numpy.diag", "IoU_array.mean", "logging.info", "numpy.maximum", "os.path.exists", "os.mkdir", "numpy.maximum", "F.upsample.size", "F.upsample.size"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.multi_scale_inference", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.utils.utils.get_confusion_matrix", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.save_pred"], ["", "def", "testval", "(", "config", ",", "test_dataset", ",", "testloader", ",", "model", ",", "\n", "sv_dir", "=", "''", ",", "sv_pred", "=", "True", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "\n", "(", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "config", ".", "DATASET", ".", "NUM_CLASSES", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "size", "=", "label", ".", "size", "(", ")", "\n", "pred", "=", "test_dataset", ".", "multi_scale_inference", "(", "\n", "model", ",", "\n", "image", ",", "\n", "scales", "=", "config", ".", "TEST", ".", "SCALE_LIST", ",", "\n", "flip", "=", "config", ".", "TEST", ".", "FLIP_TEST", ")", "\n", "\n", "if", "pred", ".", "size", "(", ")", "[", "-", "2", "]", "!=", "size", "[", "-", "2", "]", "or", "pred", ".", "size", "(", ")", "[", "-", "1", "]", "!=", "size", "[", "-", "1", "]", ":", "\n", "                ", "pred", "=", "F", ".", "upsample", "(", "pred", ",", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "confusion_matrix", "+=", "get_confusion_matrix", "(", "\n", "label", ",", "\n", "pred", ",", "\n", "size", ",", "\n", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ")", "\n", "\n", "if", "sv_pred", ":", "\n", "                ", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "'test_results'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sv_path", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "sv_path", ")", "\n", "", "test_dataset", ".", "save_pred", "(", "pred", ",", "sv_path", ",", "name", ")", "\n", "\n", "", "if", "index", "%", "100", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'processing: %d images'", "%", "index", ")", "\n", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "logging", ".", "info", "(", "'mIoU: %.4f'", "%", "(", "mean_IoU", ")", ")", "\n", "\n", "", "", "", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "pixel_acc", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_acc", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "\n", "return", "mean_IoU", ",", "IoU_array", ",", "pixel_acc", ",", "mean_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.function.test": [[154, 176], ["model.eval", "torch.no_grad", "torch.no_grad", "enumerate", "tqdm.tqdm", "test_dataset.multi_scale_inference", "torch.nn.functional.upsample", "os.path.join", "test_dataset.save_pred", "os.path.exists", "os.mkdir", "F.upsample.size", "F.upsample.size"], "function", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.base_dataset.BaseDataset.multi_scale_inference", "home.repos.pwc.inspect_result.VDIGPKU_GSTO.datasets.cityscapes.Cityscapes.save_pred"], ["", "def", "test", "(", "config", ",", "test_dataset", ",", "testloader", ",", "model", ",", "\n", "sv_dir", "=", "''", ",", "sv_pred", "=", "True", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "size", ",", "name", "=", "batch", "\n", "size", "=", "size", "[", "0", "]", "\n", "pred", "=", "test_dataset", ".", "multi_scale_inference", "(", "\n", "model", ",", "\n", "image", ",", "\n", "scales", "=", "config", ".", "TEST", ".", "SCALE_LIST", ",", "\n", "flip", "=", "config", ".", "TEST", ".", "FLIP_TEST", ")", "\n", "\n", "if", "pred", ".", "size", "(", ")", "[", "-", "2", "]", "!=", "size", "[", "0", "]", "or", "pred", ".", "size", "(", ")", "[", "-", "1", "]", "!=", "size", "[", "1", "]", ":", "\n", "                ", "pred", "=", "F", ".", "upsample", "(", "pred", ",", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "if", "sv_pred", ":", "\n", "                ", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "'test_results'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sv_path", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "sv_path", ")", "\n", "", "test_dataset", ".", "save_pred", "(", "pred", ",", "sv_path", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.function.visualize": [[178, 186], ["model.eval", "os.path.exists", "os.mkdir", "torch.no_grad", "torch.no_grad", "enumerate", "tqdm.tqdm", "model"], "function", ["None"], ["", "", "", "", "def", "visualize", "(", "testloader", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'vis'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'vis'", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "label", ",", "size", ",", "name", "=", "batch", "\n", "pred", "=", "model", "(", "image", ",", "name", "[", "0", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.CrossEntropy.__init__": [[13, 18], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "-", "1", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "CrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "\n", "ignore_index", "=", "ignore_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.CrossEntropy.forward": [[19, 29], ["criterion.CrossEntropy.criterion", "torch.nn.functional.upsample.size", "torch.nn.functional.upsample.size", "target.size", "target.size", "torch.nn.functional.upsample", "torch.nn.functional.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "score", ",", "target", ")", ":", "\n", "        ", "ph", ",", "pw", "=", "score", ".", "size", "(", "2", ")", ",", "score", ".", "size", "(", "3", ")", "\n", "h", ",", "w", "=", "target", ".", "size", "(", "1", ")", ",", "target", ".", "size", "(", "2", ")", "\n", "if", "ph", "!=", "h", "or", "pw", "!=", "w", ":", "\n", "            ", "score", "=", "F", ".", "upsample", "(", "\n", "input", "=", "score", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "loss", "=", "self", ".", "criterion", "(", "score", ",", "target", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__": [[31, 40], ["torch.Module.__init__", "max", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "-", "1", ",", "thres", "=", "0.7", ",", "\n", "min_kept", "=", "100000", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "OhemCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "thresh", "=", "thres", "\n", "self", ".", "min_kept", "=", "max", "(", "1", ",", "min_kept", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "\n", "ignore_index", "=", "ignore_label", ",", "\n", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VDIGPKU_GSTO.core.criterion.OhemCrossEntropy.forward": [[41, 60], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "criterion.OhemCrossEntropy.criterion().contiguous().view", "target.clone", "pred.gather.gather.gather", "[].contiguous().sort", "max", "criterion.OhemCrossEntropy.mean", "torch.nn.functional.upsample.size", "torch.nn.functional.upsample.size", "target.size", "target.size", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "target.contiguous().view", "target.clone.unsqueeze", "criterion.OhemCrossEntropy.criterion().contiguous", "[].contiguous", "min", "target.contiguous", "criterion.OhemCrossEntropy.criterion", "pred.gather.gather.numel", "pred.gather.gather.contiguous().view", "pred.gather.gather.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "score", ",", "target", ",", "**", "kwargs", ")", ":", "\n", "        ", "ph", ",", "pw", "=", "score", ".", "size", "(", "2", ")", ",", "score", ".", "size", "(", "3", ")", "\n", "h", ",", "w", "=", "target", ".", "size", "(", "1", ")", ",", "target", ".", "size", "(", "2", ")", "\n", "if", "ph", "!=", "h", "or", "pw", "!=", "w", ":", "\n", "            ", "score", "=", "F", ".", "upsample", "(", "input", "=", "score", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "pred", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "pixel_losses", "=", "self", ".", "criterion", "(", "score", ",", "target", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "mask", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "!=", "self", ".", "ignore_label", "\n", "\n", "tmp_target", "=", "target", ".", "clone", "(", ")", "\n", "tmp_target", "[", "tmp_target", "==", "self", ".", "ignore_label", "]", "=", "0", "\n", "pred", "=", "pred", ".", "gather", "(", "1", ",", "tmp_target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "pred", ",", "ind", "=", "pred", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", ")", "[", "mask", "]", ".", "contiguous", "(", ")", ".", "sort", "(", ")", "\n", "min_value", "=", "pred", "[", "min", "(", "self", ".", "min_kept", ",", "pred", ".", "numel", "(", ")", "-", "1", ")", "]", "\n", "threshold", "=", "max", "(", "min_value", ",", "self", ".", "thresh", ")", "\n", "\n", "pixel_losses", "=", "pixel_losses", "[", "mask", "]", "[", "ind", "]", "\n", "pixel_losses", "=", "pixel_losses", "[", "pred", "<", "threshold", "]", "\n", "return", "pixel_losses", ".", "mean", "(", ")", "", "", "", ""]]}