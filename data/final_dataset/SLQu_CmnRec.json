{"home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.__init__": [[14, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "reuse", "=", "reuse", "\n", "self", ".", "log", "=", "config", ".", "log", "\n", "self", ".", "num_steps", "=", "config", ".", "num_steps", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "batch_size", "=", "config", ".", "batch_size", "\n", "self", ".", "use_men", "=", "config", ".", "use_mem", "\n", "\n", "self", ".", "embedding_dim", "=", "config", ".", "embedding_dim", "\n", "self", ".", "hidden_dim", "=", "config", ".", "hidden_dim", "\n", "self", ".", "num_layers", "=", "config", ".", "num_layers", "\n", "self", ".", "rnn_model", "=", "config", ".", "rnn_model", "\n", "self", ".", "learning_rate", "=", "config", ".", "learning_rate", "\n", "self", ".", "use_cache", "=", "config", ".", "use_cache", "\n", "self", ".", "cache_attend_dim", "=", "config", ".", "cache_attend_dim", "\n", "\n", "self", ".", "cost_type", "=", "config", ".", "cost_type", "\n", "self", ".", "cost_fun", "=", "config", ".", "cost_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.placeholders": [[34, 44], ["tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "placeholders", "(", "self", ")", ":", "\n", "        ", "self", ".", "wholesession", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "\n", "[", "None", ",", "None", "]", ",", "name", "=", "'wholesession'", ")", "\n", "self", ".", "_inputs", "=", "self", ".", "wholesession", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "if", "self", ".", "cost_type", "==", "\"all\"", ":", "\n", "            ", "self", ".", "_targets", "=", "self", ".", "wholesession", "[", ":", ",", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_targets", "=", "self", ".", "wholesession", "[", ":", ",", "-", "1", ":", "]", "\n", "\n", "", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.build_model": [[46, 61], ["rnn.PTBModel.placeholders", "rnn.PTBModel.cost", "rnn.PTBModel.optimize", "rnn.PTBModel.rnn", "rnn.PTBModel.rnn", "rnn.PTBModel.rnn_tf"], "methods", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.placeholders", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.cost", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.optimize", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.rnn", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.rnn", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.rnn_tf"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "placeholders", "(", ")", "\n", "if", "self", ".", "config", ".", "time_type", "==", "0", ":", "\n", "            ", "if", "self", ".", "use_men", "==", "1", "&", "self", ".", "use_cache", "==", "1", ":", "\n", "                ", "self", ".", "rnn", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "rnn_tf", "(", ")", "\n", "# elif self.use_men == 1 & self.use_cache == 1:", "\n", "#     self.rnn_tf()", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "rnn", "(", ")", "\n", "\n", "", "self", ".", "cost", "(", ")", "\n", "self", ".", "optimize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.input_embedding": [[62, 70], ["tensorflow.device", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "scope.reuse_variables"], "methods", ["None"], ["", "def", "input_embedding", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'input_embedding'", ")", "as", "scope", ":", "\n", "                ", "if", "self", ".", "reuse", ":", "\n", "                    ", "scope", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "embedding", "=", "tf", ".", "get_variable", "(", "\"embedding\"", ",", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "_inputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding", ",", "self", ".", "_inputs", ")", "\n", "", "", "return", "_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.rnn_tf": [[71, 285], ["tensorflow.layers.dense", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.rnn.DropoutWrapper", "rnn.PTBModel.log.info", "rnn.PTBModel.log.info", "tensorflow.contrib.rnn.MultiRNNCell.", "rnn.PTBModel.log.info", "rnn.PTBModel.log.info", "tensorflow.reshape", "tensorflow.concat", "tensorflow.contrib.rnn.MultiRNNCell.", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.contrib.rnn.MultiRNNCell.zero_state", "rnn.PTBModel.input_embedding", "tensorflow.TensorArray", "tensorflow.reshape", "tensorflow.reshape", "rnn.PTBModel.rnn_tf.lstm_cell"], "methods", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.input_embedding"], ["", "def", "rnn_tf", "(", "self", ")", ":", "\n", "        ", "def", "lstm_cell", "(", ")", ":", "\n", "# return tf.contrib.rnn.BasicLSTM(self.hidden_dim,state_is_tuple=True)", "\n", "            ", "return", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "self", ".", "hidden_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "", "def", "gru_cell", "(", ")", ":", "\n", "            ", "return", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "self", ".", "hidden_dim", ")", "\n", "", "def", "dropout_cell", "(", ")", ":", "\n", "            ", "if", "(", "self", ".", "rnn_model", "==", "'lstm'", ")", ":", "\n", "                ", "cell", "=", "lstm_cell", "(", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "gru_cell", "(", ")", "\n", "", "return", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "cell", ",", "output_keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "", "def", "_loop_body", "(", "times", ",", "out", ",", "controller_state", ",", "_inputs", ")", ":", "\n", "            ", "self", ".", "log", ".", "info", "(", "'No memory'", ")", "\n", "self", ".", "log", ".", "info", "(", "'========================================================'", ")", "\n", "output", ",", "controller_state", "=", "rnn_cell", "(", "_inputs", "[", ":", ",", "times", ",", ":", "]", ",", "controller_state", ")", "\n", "times", "+=", "1", "\n", "# scope.reuse_variables()", "\n", "return", "times", ",", "out", ".", "write", "(", "times", "-", "1", ",", "output", ")", ",", "controller_state", ",", "_inputs", "\n", "\n", "", "def", "_loop_body_men", "(", "times", ",", "outs", ",", "controller_state", ",", "_inputs", ",", "memory_state", ",", "cache_hiddens", ",", "times2", ")", ":", "\n", "            ", "self", ".", "log", ".", "info", "(", "'use memory'", ")", "\n", "self", ".", "log", ".", "info", "(", "'========================================================'", ")", "\n", "last_read_vectors", "=", "memory_state", "[", "6", "]", "# read values from memory", "\n", "\n", "\n", "flat_read_vectors", "=", "tf", ".", "reshape", "(", "last_read_vectors", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", "# flatten R read vectors: batch x RN", "\n", "complete_input", "=", "tf", ".", "concat", "(", "[", "_inputs", "[", ":", ",", "times", ",", ":", "]", ",", "flat_read_vectors", "]", ",", "1", ")", "# concat input --> read data", "\n", "nn_output", ",", "controller_state", "=", "rnn_cell", "(", "complete_input", ",", "controller_state", ")", "\n", "\n", "pre_output", "=", "tf", ".", "matmul", "(", "nn_output", ",", "self", ".", "memory", ".", "nn_output_weights", ")", "# batch x output_dim -->later combine with new read vector", "\n", "\n", "if", "self", ".", "use_cache", "==", "1", ":", "\n", "\n", "                ", "self", ".", "log", ".", "info", "(", "'use cache'", ")", "\n", "def", "updateCache", "(", ")", ":", "\n", "\n", "                    ", "def", "getatt", "(", ")", ":", "\n", "                        ", "cache_values", "=", "cache_hiddens", ".", "gather", "(", "tf", ".", "range", "(", "times", "-", "times2", ",", "times", "+", "1", ")", ")", "\n", "cache_values", "=", "tf", ".", "transpose", "(", "cache_values", ",", "[", "1", ",", "0", ",", "2", "]", ")", "# bs x Lin x h", "\n", "U", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "cache_values", ",", "[", "-", "1", ",", "self", ".", "hidden_dim", "]", ")", ",", "self", ".", "memory", ".", "cU_a", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "cache_attend_dim", "]", ")", "\n", "V", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "last_read_vectors", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "memory", ".", "read_heads", "*", "self", ".", "memory", ".", "word_size", "]", ")", ",", "\n", "self", ".", "memory", ".", "cV_a", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "1", ",", "self", ".", "cache_attend_dim", "]", ")", "\n", "#  H = tf.reshape(tf.matmul(nn_output, self.memory.cW_a), [self.batch_size, 1, self.cache_attend_dim])", "\n", "total", "=", "U", "+", "V", "# + H", "\n", "total", "=", "tf", ".", "reshape", "(", "tf", ".", "tanh", "(", "total", ")", ",", "[", "-", "1", ",", "self", ".", "cache_attend_dim", "]", ")", "\n", "\n", "eijs", "=", "tf", ".", "matmul", "(", "total", ",", "tf", ".", "expand_dims", "(", "self", ".", "memory", ".", "cv_a", ",", "1", ")", ")", "# bs.Lin x 1", "\n", "eijs", "=", "tf", ".", "reshape", "(", "eijs", ",", "[", "self", ".", "batch_size", ",", "-", "1", "]", ")", "# bs x Lin", "\n", "alphas", "=", "tf", ".", "nn", ".", "softmax", "(", "eijs", ")", "\n", "\n", "att", "=", "tf", ".", "reduce_sum", "(", "cache_values", "*", "tf", ".", "expand_dims", "(", "alphas", ",", "2", ")", ",", "1", ")", "# bs x h x 1", "\n", "return", "att", "\n", "\n", "", "def", "cacheHidden", "(", ")", ":", "\n", "                        ", "return", "cache_hiddens", ".", "gather", "(", "tf", ".", "range", "(", "times", "-", "times2", ",", "times", "+", "1", ")", ")", "\n", "\n", "", "att", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "0", ",", "times2", ")", ",", "cacheHidden", ",", "getatt", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", "]", ")", "# bs x h", "\n", "att_state", "=", "list", "(", "controller_state", ")", "\n", "\n", "if", "self", ".", "config", ".", "rnn_model", "==", "\"lstm\"", ":", "\n", "                        ", "att_state", "[", "-", "1", "]", "=", "LSTMStateTuple", "(", "att_state", "[", "-", "1", "]", "[", "0", "]", ",", "att", ")", "\n", "", "elif", "self", ".", "config", ".", "rnn_model", "==", "\"gru\"", ":", "\n", "                        ", "att_state", "[", "-", "1", "]", "=", "att", "\n", "\n", "", "att_state", "=", "tuple", "(", "att_state", ")", "\n", "return", "0", ",", "att_state", "\n", "\n", "", "def", "holdCache", "(", ")", ":", "\n", "                    ", "return", "times2", "+", "1", ",", "controller_state", "\n", "\n", "", "def", "updateMem", "(", ")", ":", "\n", "                    ", "interface", "=", "tf", ".", "matmul", "(", "nn_output", ",", "self", ".", "memory", ".", "interface_weights", ")", "# batch x interface_dim", "\n", "interface", "=", "tf", ".", "nn", ".", "dropout", "(", "interface", ",", "keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "interface", "=", "self", ".", "memory", ".", "parse_interface_vector", "(", "interface", ")", "# use to read write into vector", "\n", "\n", "usage_vector", ",", "write_weighting", ",", "memory_matrix", ",", "link_matrix", ",", "precedence_vector", "=", "self", ".", "memory", ".", "write", "(", "\n", "memory_state", "[", "0", "]", ",", "memory_state", "[", "1", "]", ",", "memory_state", "[", "5", "]", ",", "\n", "memory_state", "[", "4", "]", ",", "memory_state", "[", "2", "]", ",", "memory_state", "[", "3", "]", ",", "\n", "interface", "[", "'write_key'", "]", ",", "\n", "interface", "[", "'write_strength'", "]", ",", "\n", "interface", "[", "'free_gates'", "]", ",", "\n", "interface", "[", "'allocation_gate'", "]", ",", "\n", "interface", "[", "'write_gate'", "]", ",", "\n", "interface", "[", "'write_vector'", "]", ",", "\n", "interface", "[", "'erase_vector'", "]", "\n", ")", "\n", "\n", "read_weightings", ",", "new_read_vectors", "=", "self", ".", "memory", ".", "read", "(", "\n", "memory_matrix", ",", "\n", "memory_state", "[", "5", "]", ",", "\n", "interface", "[", "'read_keys'", "]", ",", "\n", "interface", "[", "'read_strengths'", "]", ",", "\n", "link_matrix", ",", "\n", "interface", "[", "'read_modes'", "]", ",", "\n", ")", "\n", "\n", "new_memory_state", "=", "tuple", "(", "[", "memory_matrix", ",", "usage_vector", ",", "\n", "precedence_vector", ",", "link_matrix", ",", "\n", "write_weighting", ",", "read_weightings", ",", "new_read_vectors", "]", ")", "\n", "return", "new_memory_state", ",", "new_read_vectors", "\n", "", "def", "holdMem", "(", ")", ":", "\n", "                    ", "return", "memory_state", ",", "last_read_vectors", "\n", "\n", "", "def", "judgeWrite", "(", ")", ":", "\n", "                    ", "sss", "=", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "self", ".", "istimes", ",", "self", ".", "num_steps", "-", "1", "-", "times", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "ssaa", "=", "tf", ".", "reduce_sum", "(", "sss", ")", "\n", "return", "tf", ".", "cast", "(", "ssaa", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "\n", "", "cache_hiddens", "=", "cache_hiddens", ".", "write", "(", "times", ",", "nn_output", ")", "\n", "times2", ",", "controller_state", "=", "tf", ".", "cond", "(", "judgeWrite", "(", ")", ",", "updateCache", ",", "holdCache", ")", "\n", "''' update memory  '''", "\n", "memory_state", ",", "read_vectors", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "times2", ",", "0", ")", ",", "updateMem", ",", "holdMem", ")", "\n", "\n", "", "else", ":", "\n", "                ", "interface", "=", "tf", ".", "matmul", "(", "nn_output", ",", "self", ".", "memory", ".", "interface_weights", ")", "# batch x interface_dim", "\n", "interface", "=", "tf", ".", "nn", ".", "dropout", "(", "interface", ",", "keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "interface", "=", "self", ".", "memory", ".", "parse_interface_vector", "(", "interface", ")", "# use to read write into vector", "\n", "self", ".", "log", ".", "info", "(", "'no cache'", ")", "\n", "usage_vector", ",", "write_weighting", ",", "memory_matrix", ",", "link_matrix", ",", "precedence_vector", "=", "self", ".", "memory", ".", "write", "(", "\n", "memory_state", "[", "0", "]", ",", "memory_state", "[", "1", "]", ",", "memory_state", "[", "5", "]", ",", "\n", "memory_state", "[", "4", "]", ",", "memory_state", "[", "2", "]", ",", "memory_state", "[", "3", "]", ",", "\n", "interface", "[", "'write_key'", "]", ",", "\n", "interface", "[", "'write_strength'", "]", ",", "\n", "interface", "[", "'free_gates'", "]", ",", "\n", "interface", "[", "'allocation_gate'", "]", ",", "\n", "interface", "[", "'write_gate'", "]", ",", "\n", "interface", "[", "'write_vector'", "]", ",", "\n", "interface", "[", "'erase_vector'", "]", "\n", ")", "\n", "read_weightings", ",", "read_vectors", "=", "self", ".", "memory", ".", "read", "(", "\n", "memory_matrix", ",", "\n", "memory_state", "[", "5", "]", ",", "\n", "interface", "[", "'read_keys'", "]", ",", "\n", "interface", "[", "'read_strengths'", "]", ",", "\n", "link_matrix", ",", "\n", "interface", "[", "'read_modes'", "]", ",", "\n", ")", "\n", "memory_state", "=", "tuple", "(", "[", "memory_matrix", ",", "usage_vector", ",", "\n", "precedence_vector", ",", "link_matrix", ",", "\n", "write_weighting", ",", "read_weightings", ",", "read_vectors", "]", ")", "\n", "\n", "", "flat_read_vectors", "=", "tf", ".", "reshape", "(", "read_vectors", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", "# batch_size x flatten", "\n", "final_output", "=", "pre_output", "+", "tf", ".", "matmul", "(", "flat_read_vectors", ",", "self", ".", "memory", ".", "mem_output_weights", ")", "\n", "\n", "times", "+=", "1", "\n", "return", "times", ",", "outs", ".", "write", "(", "times", "-", "1", ",", "final_output", ")", ",", "controller_state", ",", "_inputs", ",", "memory_state", ",", "cache_hiddens", ",", "times2", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'LSTM'", ")", "as", "scope", ":", "\n", "            ", "lstm", "=", "[", "dropout_cell", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_layers", ")", "]", "#tf.nn.rnn_cell.BasicLSTMCell(self.hidden_dim)", "\n", "rnn_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "lstm", ",", "state_is_tuple", "=", "True", ")", "\n", "\n", "controller_state", "=", "rnn_cell", ".", "zero_state", "(", "self", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "_inputs", "=", "self", ".", "input_embedding", "(", ")", "\n", "outs", "=", "tf", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "num_steps", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"sequence__loop\"", ")", "as", "scope", ":", "\n", "                ", "if", "self", ".", "reuse", ":", "\n", "                    ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "times", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "times2", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "if", "self", ".", "use_men", ":", "\n", "\n", "                    ", "self", ".", "memory", "=", "memory_uw", ".", "Memory", "(", "self", ".", "config", ".", "m_input_size", ",", "self", ".", "config", ".", "m_output_size", ",", "\n", "self", ".", "config", ".", "words_num", ",", "self", ".", "config", ".", "word_size", ",", "\n", "self", ".", "config", ".", "read_heads", ",", "self", ".", "batch_size", ")", "\n", "memory_state", "=", "self", ".", "memory", ".", "init_memory", "(", ")", "\n", "\n", "if", "self", ".", "use_cache", ":", "\n", "                        ", "self", ".", "istimes", "=", "self", ".", "getWriteTimes", "(", "self", ".", "config", ".", "cache_type", ",", "True", ")", "\n", "self", ".", "memory", ".", "ini_W", "(", "self", ".", "cache_attend_dim", ",", "self", ".", "hidden_dim", ")", "\n", "", "cache_hiddens", "=", "tf", ".", "TensorArray", "(", "tf", ".", "float32", ",", "size", "=", "self", ".", "num_steps", ",", "dynamic_size", "=", "True", ",", "element_shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", "]", ")", "\n", "\n", "_results", "=", "tf", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "times", ",", "*", "_", ":", "times", "<", "self", ".", "num_steps", ",", "\n", "body", "=", "_loop_body_men", ",", "\n", "loop_vars", "=", "(", "\n", "times", ",", "outs", ",", "controller_state", ",", "_inputs", ",", "memory_state", ",", "cache_hiddens", ",", "times2", "\n", ")", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "_results", "=", "tf", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "times", ",", "*", "_", ":", "times", "<", "self", ".", "num_steps", ",", "\n", "body", "=", "_loop_body", ",", "\n", "loop_vars", "=", "(", "\n", "times", ",", "outs", ",", "controller_state", ",", "_inputs", "\n", ")", ",", "\n", ")", "\n", "\n", "", "_results", "=", "tf", ".", "transpose", "(", "_results", "[", "1", "]", ".", "stack", "(", ")", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "", "if", "self", ".", "cost_type", "==", "\"all\"", ":", "\n", "                ", "last", "=", "_results", "\n", "", "else", ":", "\n", "                ", "last", "=", "_results", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "", "", "self", ".", "hidden_out", "=", "last", "\n", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "last", ",", "units", "=", "self", ".", "vocab_size", ",", "name", "=", "\"dense_layer\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "self", ".", "_logits", "=", "logits", "\n", "\n", "\n", "if", "self", ".", "cost_type", "==", "\"all\"", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "reshape", "(", "self", ".", "_targets", ",", "[", "self", ".", "batch_size", ",", "self", ".", "num_steps", "]", ")", "# fajie addd", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "reshape", "(", "self", ".", "_targets", ",", "[", "-", "1", "]", ")", "# fajie addd", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.rnn": [[287, 373], ["tensorflow.layers.dense", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.rnn.DropoutWrapper", "tensorflow.variable_scope", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.contrib.rnn.MultiRNNCell.zero_state", "rnn.PTBModel.input_embedding", "tensorflow.reshape", "tensorflow.reshape", "rnn.PTBModel.rnn_tf.lstm_cell"], "methods", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.input_embedding"], ["", "", "def", "rnn", "(", "self", ")", ":", "\n", "        ", "def", "lstm_cell", "(", ")", ":", "\n", "# return tf.contrib.rnn.BasicLSTM(self.hidden_dim,state_is_tuple=True)", "\n", "            ", "return", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "self", ".", "hidden_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "", "def", "gru_cell", "(", ")", ":", "\n", "            ", "return", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "self", ".", "hidden_dim", ")", "\n", "", "def", "dropout_cell", "(", ")", ":", "\n", "            ", "if", "(", "self", ".", "rnn_model", "==", "'lstm'", ")", ":", "\n", "                ", "cell", "=", "lstm_cell", "(", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "gru_cell", "(", ")", "\n", "", "return", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "cell", ",", "output_keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'LSTM'", ")", "as", "scope", ":", "\n", "            ", "lstm", "=", "[", "dropout_cell", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_layers", ")", "]", "#tf.nn.rnn_cell.BasicLSTMCell(self.hidden_dim)", "\n", "rnn_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "lstm", ",", "state_is_tuple", "=", "True", ")", "\n", "controller_state", "=", "rnn_cell", ".", "zero_state", "(", "self", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "_inputs", "=", "self", ".", "input_embedding", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"sequence__loop\"", ")", "as", "scope", ":", "\n", "                ", "if", "self", ".", "reuse", ":", "\n", "                    ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "_results", "=", "[", "]", "\n", "if", "self", ".", "use_men", ":", "\n", "                    ", "self", ".", "memory", "=", "memory_uw", ".", "Memory", "(", "self", ".", "config", ".", "m_input_size", ",", "self", ".", "config", ".", "m_output_size", ",", "self", ".", "config", ".", "words_num", ",", "self", ".", "config", ".", "word_size", ",", "self", ".", "config", ".", "read_heads", ",", "self", ".", "batch_size", ")", "\n", "memory_state", "=", "self", ".", "memory", ".", "init_memory", "(", ")", "\n", "if", "self", ".", "use_cache", ":", "\n", "                        ", "self", ".", "timeToWrite", "=", "self", ".", "getWriteTimes", "(", "self", ".", "config", ".", "cache_type", ")", "\n", "self", ".", "memory", ".", "ini_W", "(", "self", ".", "cache_attend_dim", ",", "self", ".", "hidden_dim", ")", "\n", "", "cache_hiddens", "=", "[", "]", "\n", "times2", "=", "0", "\n", "\n", "for", "times", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "                        ", "self", ".", "log", ".", "info", "(", "'use memory  '", "+", "str", "(", "times", ")", ")", "\n", "last_read_vectors", "=", "memory_state", "[", "6", "]", "# read values from memory", "\n", "flat_read_vectors", "=", "tf", ".", "reshape", "(", "last_read_vectors", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", "# flatten R read vectors: batch x RN", "\n", "complete_input", "=", "tf", ".", "concat", "(", "[", "_inputs", "[", ":", ",", "times", ",", ":", "]", ",", "flat_read_vectors", "]", ",", "1", ")", "# concat input --> read data", "\n", "nn_output", ",", "controller_state", "=", "rnn_cell", "(", "complete_input", ",", "controller_state", ")", "\n", "pre_output", "=", "tf", ".", "matmul", "(", "nn_output", ",", "self", ".", "memory", ".", "nn_output_weights", ")", "# batch x output_dim -->later combine with new read vector", "\n", "\n", "if", "self", ".", "use_cache", "==", "1", ":", "\n", "                            ", "self", ".", "log", ".", "info", "(", "'use cache'", ")", "\n", "cache_hiddens", ".", "append", "(", "nn_output", ")", "\n", "\n", "if", "(", "self", ".", "num_steps", "-", "1", "-", "times", ")", "not", "in", "self", ".", "timeToWrite", ":", "\n", "                                ", "read_vectors", "=", "last_read_vectors", "\n", "times2", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "controller_state", "=", "self", ".", "updateCache", "(", "times", ",", "times2", ",", "cache_hiddens", ",", "last_read_vectors", ",", "controller_state", ")", "\n", "memory_state", ",", "read_vectors", "=", "self", ".", "updateMem", "(", "nn_output", ",", "memory_state", ")", "\n", "times2", "=", "0", "\n", "\n", "", "", "else", ":", "\n", "                            ", "interface", "=", "tf", ".", "matmul", "(", "nn_output", ",", "self", ".", "memory", ".", "interface_weights", ")", "# batch x interface_dim", "\n", "interface", "=", "tf", ".", "nn", ".", "dropout", "(", "interface", ",", "keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "interface", "=", "self", ".", "memory", ".", "parse_interface_vector", "(", "interface", ")", "# use to read write into vector", "\n", "self", ".", "log", ".", "info", "(", "'no cache'", ")", "\n", "usage_vector", ",", "write_weighting", ",", "memory_matrix", ",", "link_matrix", ",", "precedence_vector", "=", "self", ".", "memory", ".", "write", "(", "memory_state", "[", "0", "]", ",", "memory_state", "[", "1", "]", ",", "memory_state", "[", "5", "]", ",", "memory_state", "[", "4", "]", ",", "memory_state", "[", "2", "]", ",", "memory_state", "[", "3", "]", ",", "interface", "[", "'write_key'", "]", ",", "interface", "[", "'write_strength'", "]", ",", "interface", "[", "'free_gates'", "]", ",", "interface", "[", "'allocation_gate'", "]", ",", "interface", "[", "'write_gate'", "]", ",", "interface", "[", "'write_vector'", "]", ",", "interface", "[", "'erase_vector'", "]", ")", "\n", "read_weightings", ",", "read_vectors", "=", "self", ".", "memory", ".", "read", "(", "memory_matrix", ",", "memory_state", "[", "5", "]", ",", "interface", "[", "'read_keys'", "]", ",", "interface", "[", "'read_strengths'", "]", ",", "link_matrix", ",", "interface", "[", "'read_modes'", "]", ",", ")", "\n", "memory_state", "=", "tuple", "(", "[", "memory_matrix", ",", "usage_vector", ",", "precedence_vector", ",", "link_matrix", ",", "write_weighting", ",", "read_weightings", ",", "read_vectors", "]", ")", "\n", "\n", "", "flat_read_vectors", "=", "tf", ".", "reshape", "(", "read_vectors", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", "# batch_size x flatten", "\n", "final_output", "=", "pre_output", "+", "tf", ".", "matmul", "(", "flat_read_vectors", ",", "self", ".", "memory", ".", "mem_output_weights", ")", "\n", "_results", ".", "append", "(", "final_output", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "times", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "                        ", "self", ".", "log", ".", "info", "(", "'No memory'", ")", "\n", "print", "(", "_inputs", "[", ":", ",", "times", ",", ":", "]", ")", "\n", "print", "(", "controller_state", ")", "\n", "output", ",", "controller_state", "=", "rnn_cell", "(", "_inputs", "[", ":", ",", "times", ",", ":", "]", ",", "controller_state", ")", "\n", "_results", ".", "append", "(", "output", ")", "\n", "\n", "", "", "_results", "=", "tf", ".", "transpose", "(", "tf", ".", "stack", "(", "_results", ")", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "", "if", "self", ".", "cost_type", "==", "\"all\"", ":", "\n", "                ", "last", "=", "_results", "\n", "", "else", ":", "\n", "                ", "last", "=", "_results", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "", "", "self", ".", "hidden_out", "=", "last", "\n", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "last", ",", "units", "=", "self", ".", "vocab_size", ",", "name", "=", "\"dense_layer\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "self", ".", "_logits", "=", "logits", "\n", "\n", "if", "self", ".", "cost_type", "==", "\"all\"", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "reshape", "(", "self", ".", "_targets", ",", "[", "self", ".", "batch_size", ",", "self", ".", "num_steps", "]", ")", "# fajie addd", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "reshape", "(", "self", ".", "_targets", ",", "[", "-", "1", "]", ")", "# fajie addd", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.updateCache": [[375, 408], ["tensorflow.reshape", "list", "tuple", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "print", "print", "tensorflow.python.ops.rnn_cell.LSTMStateTuple", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.tanh", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims"], "methods", ["None"], ["", "", "def", "updateCache", "(", "self", ",", "times", ",", "times2", ",", "cache_hiddens", ",", "last_read_vectors", ",", "controller_state", ")", ":", "\n", "\n", "        ", "if", "times2", "!=", "0", ":", "\n", "            ", "cache_values", "=", "cache_hiddens", "[", "(", "times", "-", "times2", ")", ":", "times", "+", "1", "]", "\n", "cache_values", "=", "tf", ".", "transpose", "(", "cache_values", ",", "[", "1", ",", "0", ",", "2", "]", ")", "# bs x Lin x h", "\n", "U", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "cache_values", ",", "[", "-", "1", ",", "self", ".", "hidden_dim", "]", ")", ",", "self", ".", "memory", ".", "cU_a", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "cache_attend_dim", "]", ")", "\n", "V", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "last_read_vectors", ",", "[", "self", ".", "batch_size", ",", "\n", "self", ".", "memory", ".", "read_heads", "*", "self", ".", "memory", ".", "word_size", "]", ")", ",", "\n", "self", ".", "memory", ".", "cV_a", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "1", ",", "self", ".", "cache_attend_dim", "]", ")", "\n", "total", "=", "U", "+", "V", "# + H", "\n", "total", "=", "tf", ".", "reshape", "(", "tf", ".", "tanh", "(", "total", ")", ",", "[", "-", "1", ",", "self", ".", "cache_attend_dim", "]", ")", "\n", "eijs", "=", "tf", ".", "matmul", "(", "total", ",", "tf", ".", "expand_dims", "(", "self", ".", "memory", ".", "cv_a", ",", "1", ")", ")", "# bs.Lin x 1", "\n", "eijs", "=", "tf", ".", "reshape", "(", "eijs", ",", "[", "self", ".", "batch_size", ",", "-", "1", "]", ")", "# bs x Lin", "\n", "alphas", "=", "tf", ".", "nn", ".", "softmax", "(", "eijs", ")", "\n", "att", "=", "tf", ".", "reduce_sum", "(", "cache_values", "*", "tf", ".", "expand_dims", "(", "alphas", ",", "2", ")", ",", "1", ")", "# bs x h x 1", "\n", "print", "(", "\"=================2==========================\"", ")", "\n", "", "else", ":", "\n", "            ", "att", "=", "cache_hiddens", "[", "-", "1", "]", "\n", "print", "(", "\"==================3=========================\"", ")", "\n", "\n", "", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", "]", ")", "# bs x h", "\n", "att_state", "=", "list", "(", "controller_state", ")", "\n", "\n", "if", "self", ".", "config", ".", "rnn_model", "==", "\"lstm\"", ":", "\n", "            ", "att_state", "[", "-", "1", "]", "=", "LSTMStateTuple", "(", "att_state", "[", "-", "1", "]", "[", "0", "]", ",", "att", ")", "\n", "", "elif", "self", ".", "config", ".", "rnn_model", "==", "\"gru\"", ":", "\n", "            ", "att_state", "[", "-", "1", "]", "=", "att", "\n", "\n", "", "att_state", "=", "tuple", "(", "att_state", ")", "\n", "return", "att_state", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.updateMem": [[409, 441], ["tensorflow.matmul", "tensorflow.nn.dropout", "rnn.PTBModel.memory.parse_interface_vector", "rnn.PTBModel.memory.write", "rnn.PTBModel.memory.read", "tuple"], "methods", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.parse_interface_vector", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.write", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.read"], ["", "def", "updateMem", "(", "self", ",", "nn_output", ",", "memory_state", ")", ":", "\n", "        ", "interface", "=", "tf", ".", "matmul", "(", "nn_output", ",", "self", ".", "memory", ".", "interface_weights", ")", "# batch x interface_dim", "\n", "interface", "=", "tf", ".", "nn", ".", "dropout", "(", "interface", ",", "keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "interface", "=", "self", ".", "memory", ".", "parse_interface_vector", "(", "\n", "interface", ")", "# use to read write into vector", "\n", "\n", "usage_vector", ",", "write_weighting", ",", "memory_matrix", ",", "link_matrix", ",", "precedence_vector", "=", "self", ".", "memory", ".", "write", "(", "\n", "memory_state", "[", "0", "]", ",", "memory_state", "[", "1", "]", ",", "memory_state", "[", "5", "]", ",", "\n", "memory_state", "[", "4", "]", ",", "memory_state", "[", "2", "]", ",", "memory_state", "[", "3", "]", ",", "\n", "interface", "[", "'write_key'", "]", ",", "\n", "interface", "[", "'write_strength'", "]", ",", "\n", "interface", "[", "'free_gates'", "]", ",", "\n", "interface", "[", "'allocation_gate'", "]", ",", "\n", "interface", "[", "'write_gate'", "]", ",", "\n", "interface", "[", "'write_vector'", "]", ",", "\n", "interface", "[", "'erase_vector'", "]", "\n", ")", "\n", "\n", "read_weightings", ",", "new_read_vectors", "=", "self", ".", "memory", ".", "read", "(", "\n", "memory_matrix", ",", "\n", "memory_state", "[", "5", "]", ",", "\n", "interface", "[", "'read_keys'", "]", ",", "\n", "interface", "[", "'read_strengths'", "]", ",", "\n", "link_matrix", ",", "\n", "interface", "[", "'read_modes'", "]", ",", "\n", ")", "\n", "\n", "new_memory_state", "=", "tuple", "(", "[", "memory_matrix", ",", "usage_vector", ",", "\n", "precedence_vector", ",", "link_matrix", ",", "\n", "write_weighting", ",", "read_weightings", ",", "new_read_vectors", "]", ")", "\n", "return", "new_memory_state", ",", "new_read_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.getWriteTimes": [[442, 461], ["int", "int", "tensorflow.constant", "set", "rnn.PTBModel.log.info", "rnn.PTBModel.log.info", "range", "sum", "range", "str", "range", "range", "range"], "methods", ["None"], ["", "def", "getWriteTimes", "(", "self", ",", "cache_type", ",", "while_l", "=", "False", ")", ":", "\n", "        ", "times_num", "=", "int", "(", "self", ".", "num_steps", "/", "(", "1", "+", "self", ".", "memory", ".", "words_num", ")", "/", "self", ".", "memory", ".", "words_num", "*", "2", ")", "\n", "times_num_2", "=", "int", "(", "self", ".", "num_steps", "/", "self", ".", "memory", ".", "words_num", ")", "\n", "if", "cache_type", "==", "1", ":", "\n", "            ", "if", "times_num", "==", "0", ":", "\n", "                ", "istimes", "=", "[", "i", "*", "times_num_2", "for", "i", "in", "range", "(", "0", ",", "self", ".", "memory", ".", "words_num", ")", "]", "\n", "self", ".", "log", ".", "info", "(", "\"1   times_num = 0\"", ")", "\n", "", "else", ":", "\n", "                ", "istimes", "=", "[", "sum", "(", "range", "(", "i", ")", ")", "*", "times_num", "for", "i", "in", "range", "(", "1", ",", "self", ".", "memory", ".", "words_num", "+", "1", ")", "]", "\n", "self", ".", "log", ".", "info", "(", "\"2   times_num = \"", "+", "str", "(", "times_num", ")", ")", "\n", "", "", "elif", "cache_type", "==", "2", ":", "\n", "            ", "istimes", "=", "[", "i", "*", "times_num_2", "for", "i", "in", "range", "(", "0", ",", "self", ".", "memory", ".", "words_num", ")", "]", "\n", "", "else", ":", "\n", "            ", "istimes", "=", "[", "i", "for", "i", "in", "range", "(", "0", ",", "self", ".", "memory", ".", "words_num", ")", "]", "\n", "\n", "", "if", "while_l", ":", "\n", "            ", "return", "tf", ".", "constant", "(", "istimes", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "            ", "return", "set", "(", "istimes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.evaluate": [[462, 498], ["tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.nn.top_k", "tensorflow.equal", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.nn.top_k", "tensorflow.equal", "tensorflow.cast", "print", "print", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.where", "tensorflow.nn.in_top_k", "tensorflow.reduce_sum", "tensorflow.where", "tensorflow.nn.in_top_k", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.log", "tensorflow.log"], "methods", ["None"], ["", "", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cost_type", "==", "\"all\"", ":", "\n", "            ", "if", "self", ".", "cost_fun", "==", "\"bpr\"", ":", "\n", "                ", "logits", "=", "self", ".", "hidden_out", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "logits", ",", "self", ".", "softmax_W", ",", "transpose_b", "=", "True", ")", "+", "self", ".", "softmax_b", "\n", "", "else", ":", "\n", "                ", "logits", "=", "self", ".", "_logits", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "", "_targets", "=", "self", ".", "_targets", "[", ":", ",", "-", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "cost_fun", "==", "\"bpr\"", ":", "\n", "                ", "logits", "=", "self", ".", "hidden_out", "\n", "logits", "=", "tf", ".", "matmul", "(", "logits", ",", "self", ".", "softmax_W", ",", "transpose_b", "=", "True", ")", "+", "self", ".", "softmax_b", "\n", "", "else", ":", "\n", "                ", "logits", "=", "self", ".", "_logits", "\n", "", "_targets", "=", "tf", ".", "reshape", "(", "self", ".", "_targets", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "-", "1", "]", ")", "\n", "\n", "", "prediction", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n", "lable", "=", "tf", ".", "reshape", "(", "_targets", ",", "shape", "=", "[", "self", ".", "batch_size", "]", ")", "\n", "_", ",", "pred_words_5", "=", "tf", ".", "nn", ".", "top_k", "(", "prediction", ",", "5", ")", "\n", "bool_idx_5", "=", "tf", ".", "equal", "(", "pred_words_5", ",", "tf", ".", "cast", "(", "_targets", ",", "dtype", "=", "tf", ".", "int32", ")", ")", "\n", "int_index_5", "=", "tf", ".", "cast", "(", "tf", ".", "where", "(", "bool_idx_5", ")", "[", ":", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "MRR_5", "=", "tf", ".", "reduce_sum", "(", "1.0", "/", "(", "int_index_5", "+", "1", ")", ")", "/", "self", ".", "batch_size", "\n", "Rec_5", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "tf", ".", "nn", ".", "in_top_k", "(", "prediction", ",", "lable", ",", "5", ")", ",", "tf", ".", "float32", ")", ")", "\n", "ndcg_5", "=", "tf", ".", "reduce_sum", "(", "1.0", "/", "tf", ".", "log", "(", "int_index_5", "+", "2", ")", ")", "/", "self", ".", "batch_size", "/", "log_2", "\n", "\n", "_", ",", "pred_words_20", "=", "tf", ".", "nn", ".", "top_k", "(", "prediction", ",", "20", ")", "\n", "bool_idx_20", "=", "tf", ".", "equal", "(", "pred_words_20", ",", "tf", ".", "cast", "(", "_targets", ",", "dtype", "=", "tf", ".", "int32", ")", ")", "\n", "int_index_20", "=", "tf", ".", "cast", "(", "tf", ".", "where", "(", "bool_idx_20", ")", "[", ":", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "MRR_20", "=", "tf", ".", "reduce_sum", "(", "1.0", "/", "(", "int_index_20", "+", "1", ")", ")", "/", "self", ".", "batch_size", "\n", "print", "(", "prediction", ")", "\n", "print", "(", "lable", ")", "\n", "Rec_20", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "tf", ".", "nn", ".", "in_top_k", "(", "prediction", ",", "lable", ",", "20", ")", ",", "tf", ".", "float32", ")", ")", "\n", "ndcg_20", "=", "tf", ".", "reduce_sum", "(", "1.0", "/", "tf", ".", "log", "(", "int_index_20", "+", "2", ")", ")", "/", "self", ".", "batch_size", "/", "log_2", "\n", "\n", "return", "MRR_5", ",", "Rec_5", ",", "ndcg_5", ",", "MRR_20", ",", "Rec_20", ",", "ndcg_20", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.cost": [[499, 517], ["tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.reshape", "int", "tensorflow.nn.sampled_softmax_loss", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "cost", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cost_fun", "==", "\"bpr\"", ":", "\n", "            ", "self", ".", "softmax_W", "=", "tf", ".", "get_variable", "(", "'softmax_w'", ",", "[", "self", ".", "vocab_size", ",", "self", ".", "hidden_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "softmax_b", "=", "tf", ".", "get_variable", "(", "'softmax_b'", ",", "[", "self", ".", "vocab_size", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "logits_2D", "=", "tf", ".", "reshape", "(", "self", ".", "hidden_out", ",", "[", "-", "1", ",", "self", ".", "hidden_dim", "]", ")", "\n", "\n", "label_flat", "=", "tf", ".", "reshape", "(", "self", ".", "input_y", ",", "[", "-", "1", ",", "1", "]", ")", "# 1 is the number of positive example", "\n", "num_sampled", "=", "int", "(", "self", ".", "vocab_size", "/", "10", ")", "# sample 20% as negatives", "\n", "# tf.nn.nce_loss", "\n", "cost", "=", "tf", ".", "nn", ".", "sampled_softmax_loss", "(", "self", ".", "softmax_W", ",", "self", ".", "softmax_b", ",", "inputs", "=", "logits_2D", ",", "\n", "num_sampled", "=", "num_sampled", ",", "num_classes", "=", "self", ".", "vocab_size", ",", "labels", "=", "label_flat", ",", ")", "\n", "", "else", ":", "\n", "            ", "cost", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "_logits", ",", "labels", "=", "self", ".", "input_y", ")", "\n", "", "cost", "=", "tf", ".", "reduce_mean", "(", "cost", ")", "\n", "\n", "self", ".", "loss", "=", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.optimize": [[518, 521], ["tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize"], "methods", ["None"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "learning_rate", ",", "beta1", "=", "0.9", ",", ")", "\n", "self", ".", "optim", "=", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.setArgs": [[10, 21], ["os.path.exists", "list", "Tools.argsRecheck", "open().readlines", "con.strip().split.strip().split", "setattr", "len", "open", "con.strip().split.strip"], "function", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.argsRecheck"], ["def", "setArgs", "(", "args", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "\"config/\"", "+", "args", ".", "c", "+", "\".txt\"", ")", ":", "\n", "        ", "cons", "=", "list", "(", "open", "(", "\"config/\"", "+", "args", ".", "c", "+", "\".txt\"", ",", "\"r\"", ")", ".", "readlines", "(", ")", ")", "\n", "for", "con", "in", "cons", ":", "\n", "            ", "con", "=", "con", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "\"=\"", ")", "\n", "if", "len", "(", "con", ")", "!=", "2", ":", "\n", "                ", "break", "\n", "", "setattr", "(", "args", ",", "con", "[", "0", "]", ",", "con", "[", "1", "]", ")", "\n", "", "args", "=", "argsRecheck", "(", "args", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.printargs": [[22, 30], ["vars", "log.info", "log.info", "log.info", "log.info", "log.info", "getattr", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "printargs", "(", "args", ")", ":", "\n", "    ", "log", "=", "args", ".", "log", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "log", ".", "info", "(", "'%s:--%s'", ",", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", "\n", "", "log", ".", "info", "(", "\"------------------------------------------------------\"", ")", "\n", "log", ".", "info", "(", "\"num_steps :\"", "+", "str", "(", "args", ".", "num_steps", ")", "+", "\", text_dir :\"", "+", "str", "(", "args", ".", "text_dir", ")", ")", "\n", "log", ".", "info", "(", "\"memory :\"", "+", "str", "(", "args", ".", "use_mem", ")", "+", "\", cache :\"", "+", "str", "(", "args", ".", "use_cache", ")", "+", "\", words_num :\"", "+", "str", "(", "args", ".", "words_num", ")", "+", "\", read_heads :\"", "+", "str", "(", "args", ".", "read_heads", ")", ")", "\n", "log", ".", "info", "(", "\"======================================================\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.mkdir": [[31, 37], ["os.path.exists", "os.makedirs", "print"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "folder", "=", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "if", "not", "folder", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"---  There is this folder!  ---\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.elapsed": [[38, 45], ["str", "str", "str"], "function", ["None"], ["", "", "def", "elapsed", "(", "sec", ")", ":", "\n", "    ", "if", "sec", "<", "60", ":", "\n", "        ", "return", "str", "(", "sec", ")", "[", ":", "4", "]", "+", "\" sec\"", "\n", "", "elif", "sec", "<", "(", "60", "*", "60", ")", ":", "\n", "        ", "return", "str", "(", "sec", "/", "60", ")", "[", ":", "4", "]", "+", "\" min\"", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "sec", "/", "(", "60", "*", "60", ")", ")", "[", ":", "4", "]", "+", "\" hr\"", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.getlog": [[46, 61], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "Tools.mkdir", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.mkdir"], ["", "", "def", "getlog", "(", "log_name", ")", ":", "\n", "# get TF logger", "\n", "    ", "import", "logging", "\n", "log", "=", "logging", ".", "getLogger", "(", "'tensorflow'", ")", "\n", "log", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "# create formatter and add it to the handlers", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "mkdir", "(", "'./log/'", ")", "\n", "# create file handler which logs even debug messages", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "'./log/'", "+", "log_name", "+", "'.log'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "addHandler", "(", "fh", ")", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.argsRecheck": [[62, 81], ["float", "float", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "argsRecheck", "(", "args", ")", ":", "\n", "    ", "args", ".", "learning_rate", "=", "float", "(", "args", ".", "learning_rate", ")", "\n", "args", ".", "sample_percentage", "=", "float", "(", "args", ".", "sample_percentage", ")", "\n", "args", ".", "use_mem", "=", "int", "(", "args", ".", "use_mem", ")", "\n", "args", ".", "use_cache", "=", "int", "(", "args", ".", "use_cache", ")", "\n", "args", ".", "words_num", "=", "int", "(", "args", ".", "words_num", ")", "\n", "args", ".", "dataset", "=", "int", "(", "args", ".", "dataset", ")", "\n", "args", ".", "read_heads", "=", "int", "(", "args", ".", "read_heads", ")", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", ")", "\n", "args", ".", "embedding_dim", "=", "int", "(", "args", ".", "embedding_dim", ")", "\n", "args", ".", "hidden_dim", "=", "int", "(", "args", ".", "hidden_dim", ")", "\n", "args", ".", "cache_attend_dim", "=", "int", "(", "args", ".", "cache_attend_dim", ")", "\n", "\n", "args", ".", "word_size", "=", "int", "(", "args", ".", "word_size", ")", "\n", "args", ".", "top_k", "=", "int", "(", "args", ".", "top_k", ")", "\n", "args", ".", "max_epochs", "=", "int", "(", "args", ".", "max_epochs", ")", "\n", "args", ".", "num_layers", "=", "int", "(", "args", ".", "num_layers", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.creatCos": [[84, 127], ["print", "print", "tensorflow.convert_to_tensor", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.square", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.constant", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.reduce_mean", "args.log.info", "numpy.zeros", "range", "args.log.info", "tensorflow.expand_dims", "numpy.ones", "tensorflow.expand_dims", "tensorflow.expand_dims", "int", "session.run", "numpy.array"], "function", ["None"], ["", "def", "creatCos", "(", "args", ",", "total_sess", ",", "embed", ",", "session", ")", ":", "\n", "    ", "se_len", ",", "setp_len", "=", "total_sess", ".", "shape", "\n", "item_num", ",", "embed_size", "=", "embed", ".", "shape", "\n", "print", "(", "se_len", ",", "setp_len", ")", "\n", "print", "(", "item_num", ",", "embed_size", ")", "\n", "\n", "embedding", "=", "tf", ".", "convert_to_tensor", "(", "embed", ")", "\n", "\n", "sess_input", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "None", ",", "None", "]", ")", "\n", "\n", "sess_embed_1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedding", ",", "sess_input", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "sess_embed_last", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedding", ",", "sess_input", "[", ":", ",", "-", "1", "]", ")", "\n", "cons_1", "=", "tf", ".", "matmul", "(", "sess_embed_1", ",", "tf", ".", "expand_dims", "(", "sess_embed_last", ",", "2", ")", ")", "\n", "cons_1", "=", "tf", ".", "squeeze", "(", "cons_1", ",", "2", ")", "\n", "\n", "sess_embed_last_2", "=", "tf", ".", "square", "(", "sess_embed_last", ")", "\n", "sess_embed_1_2", "=", "tf", ".", "square", "(", "sess_embed_1", ")", "\n", "\n", "sess_embed_last_2_red", "=", "tf", ".", "reduce_sum", "(", "sess_embed_last_2", ",", "1", ")", "\n", "sess_embed_1_2_red", "=", "tf", ".", "reduce_sum", "(", "sess_embed_1_2", ",", "2", ")", "\n", "sess_embed_last_2_qsrt", "=", "tf", ".", "sqrt", "(", "sess_embed_last_2_red", ")", "\n", "sess_embed_1_2_qsrt", "=", "tf", ".", "sqrt", "(", "sess_embed_1_2_red", ")", "\n", "\n", "a", "=", "tf", ".", "constant", "(", "np", ".", "ones", "(", "setp_len", "-", "1", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "b", "=", "tf", ".", "transpose", "(", "sess_embed_last_2_qsrt", ")", "\n", "\n", "dowm_temp", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "tf", ".", "expand_dims", "(", "a", ",", "0", ")", ")", "\n", "down", "=", "sess_embed_1_2_qsrt", "*", "dowm_temp", "\n", "\n", "out", "=", "tf", ".", "reduce_mean", "(", "cons_1", "/", "down", ",", "axis", "=", "0", ")", "\n", "\n", "args", ".", "log", ".", "info", "(", "\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\"", ")", "\n", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "coss", "=", "np", ".", "zeros", "(", "shape", "=", "[", "setp_len", "-", "1", "]", ",", "dtype", "=", "float", ")", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "int", "(", "se_len", "/", "batch_size", ")", ")", ":", "\n", "        ", "sess_in_id", "=", "total_sess", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", ",", ":", "]", "\n", "aa", "=", "session", ".", "run", "(", "out", ",", "feed_dict", "=", "{", "sess_input", ":", "sess_in_id", "}", ")", "\n", "coss", "+=", "np", ".", "array", "(", "aa", ")", "\n", "count", "+=", "1", "\n", "\n", "", "args", ".", "log", ".", "info", "(", "coss", "/", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.creatSessonCos": [[128, 170], ["print", "print", "tensorflow.convert_to_tensor", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.square", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.multiply", "tensorflow.reduce_mean", "args.log.info", "numpy.zeros", "range", "args.log.info", "tensorflow.multiply", "int", "session.run", "numpy.array"], "function", ["None"], ["", "def", "creatSessonCos", "(", "args", ",", "total_sess", ",", "embed", ",", "session", ")", ":", "\n", "    ", "se_len", ",", "setp_len", "=", "total_sess", ".", "shape", "\n", "item_num", ",", "embed_size", "=", "embed", ".", "shape", "\n", "print", "(", "se_len", ",", "setp_len", ")", "\n", "print", "(", "item_num", ",", "embed_size", ")", "\n", "\n", "embedding", "=", "tf", ".", "convert_to_tensor", "(", "embed", ")", "\n", "sess_input", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "None", ",", "None", "]", ")", "\n", "sess_embed_one", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedding", ",", "sess_input", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "sess_embed_two", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedding", ",", "sess_input", "[", ":", ",", "1", ":", "]", ")", "\n", "aa", "=", "tf", ".", "reshape", "(", "sess_embed_one", ",", "shape", "=", "[", "-", "1", ",", "embed_size", "]", ")", "\n", "bb", "=", "tf", ".", "reshape", "(", "sess_embed_two", ",", "shape", "=", "[", "-", "1", ",", "embed_size", "]", ")", "\n", "\n", "cons_u", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "aa", ",", "bb", ")", ",", "1", ")", "\n", "cons_up", "=", "tf", ".", "reshape", "(", "cons_u", ",", "shape", "=", "[", "-", "1", ",", "setp_len", "-", "1", "]", ")", "\n", "\n", "\n", "sess_embed_one_d", "=", "tf", ".", "square", "(", "sess_embed_one", ")", "\n", "sess_embed_two_d", "=", "tf", ".", "square", "(", "sess_embed_two", ")", "\n", "\n", "sess_embed_one_d", "=", "tf", ".", "reduce_sum", "(", "sess_embed_one_d", ",", "2", ")", "\n", "sess_embed_two_d", "=", "tf", ".", "reduce_sum", "(", "sess_embed_two_d", ",", "2", ")", "\n", "sess_embed_one_d", "=", "tf", ".", "sqrt", "(", "sess_embed_one_d", ")", "\n", "sess_embed_two_d", "=", "tf", ".", "sqrt", "(", "sess_embed_two_d", ")", "\n", "\n", "\n", "cos_dowm_", "=", "tf", ".", "multiply", "(", "sess_embed_one_d", ",", "sess_embed_two_d", ")", "\n", "\n", "out", "=", "tf", ".", "reduce_mean", "(", "cons_up", "/", "cos_dowm_", ",", "axis", "=", "0", ")", "\n", "\n", "args", ".", "log", ".", "info", "(", "\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\"", ")", "\n", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "coss", "=", "np", ".", "zeros", "(", "shape", "=", "[", "setp_len", "-", "1", "]", ",", "dtype", "=", "float", ")", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "int", "(", "se_len", "/", "batch_size", ")", ")", ":", "\n", "        ", "sess_in_id", "=", "total_sess", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", ",", ":", "]", "\n", "aa", "=", "session", ".", "run", "(", "out", ",", "feed_dict", "=", "{", "sess_input", ":", "sess_in_id", "}", ")", "\n", "coss", "+=", "np", ".", "array", "(", "aa", ")", "\n", "count", "+=", "1", "\n", "\n", "", "args", ".", "log", ".", "info", "(", "coss", "/", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.sample_top": [[172, 179], ["numpy.random.choice", "numpy.argsort", "numpy.sum"], "function", ["None"], ["", "def", "sample_top", "(", "a", "=", "[", "]", ",", "top_k", "=", "10", ")", ":", "\n", "    ", "idx", "=", "np", ".", "argsort", "(", "a", ")", "[", ":", ":", "-", "1", "]", "\n", "idx", "=", "idx", "[", ":", "top_k", "]", "\n", "probs", "=", "a", "[", "idx", "]", "\n", "probs", "=", "probs", "/", "np", ".", "sum", "(", "probs", ")", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "p", "=", "probs", ")", "\n", "return", "choice", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.sample_top_k": [[181, 188], ["numpy.argsort"], "function", ["None"], ["", "def", "sample_top_k", "(", "a", "=", "[", "]", ",", "top_k", "=", "10", ")", ":", "\n", "    ", "idx", "=", "np", ".", "argsort", "(", "a", ")", "[", ":", ":", "-", "1", "]", "\n", "idx", "=", "idx", "[", ":", "top_k", "]", "\n", "# probs = a[idx]", "\n", "# probs = probs / np.sum(probs)", "\n", "# choice = np.random.choice(idx, p=probs)", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.MostPop.main": [[12, 124], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "data_loader_recsys.Data_Loader", "numpy.random.seed", "numpy.random.permutation", "dict", "dict", "range", "numpy.arange", "int", "sorted", "sorted", "print", "len", "item_dic.items", "item_dic.items", "range", "float", "dict.get", "dict.get", "sum", "float", "sum", "float", "sum", "float", "sum", "float", "sum", "float", "sum", "float", "len", "item_dic.get", "curr_preds_5.append", "rec_preds_5.append", "ndcg_preds_5.append", "toplist_5.index", "curr_preds_5.append", "rec_preds_5.append", "ndcg_preds_5.append", "curr_preds_20.append", "rec_preds_20.append", "ndcg_preds_20.append", "toplist_20.index", "curr_preds_20.append", "rec_preds_20.append", "ndcg_preds_20.append", "len", "len", "len", "len", "len", "len", "math.log", "math.log"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'Learning Rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--top_k'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Sample from top k predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epochs'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Max Epochs'", ")", "\n", "#process_history_sequences_20181014_fajie", "\n", "#movielen_30", "\n", "#ratings_seq20_order", "\n", "#movielen_100", "\n", "\n", "parser", ".", "add_argument", "(", "'--text_dir'", ",", "type", "=", "str", ",", "default", "=", "'data/ratings_seq20_order.csv'", ",", "\n", "help", "=", "'Directory containing text files'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "str", ",", "default", "=", "'f78c95a8-9256-4757-9a9f-213df5c6854e,1151b040-8022-4965-96d2-8a4605ce456c,4277434f-e3c2-41ae-9ce3-23fd157f9347,fb51d2c4-cc69-4128-92f5-77ec38d66859,4e78efc4-e545-47af-9617-05ff816d86e2'", ",", "\n", "help", "=", "'Seed for text generation'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_percentage'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'sample_percentage from whole data, e.g.0.2= 80% training 20% testing'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "dl", "=", "data_loader", ".", "Data_Loader", "(", "{", "'model_type'", ":", "'generator'", ",", "'dir_name'", ":", "args", ".", "text_dir", "}", ")", "\n", "\n", "all_samples", "=", "dl", ".", "item", "\n", "items", "=", "dl", ".", "item_dict", "\n", "\n", "\n", "# Randomly shuffle data", "\n", "np", ".", "random", ".", "seed", "(", "10", ")", "\n", "shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "all_samples", ")", ")", ")", "\n", "text_samples", "=", "all_samples", "[", "shuffle_indices", "]", "\n", "\n", "\n", "# Split train/test set", "\n", "# TODO: This is very crude, should use cross-validation", "\n", "dev_sample_index", "=", "-", "1", "*", "int", "(", "args", ".", "sample_percentage", "*", "float", "(", "len", "(", "text_samples", ")", ")", ")", "\n", "x_train", ",", "x_dev", "=", "text_samples", "[", ":", "dev_sample_index", "]", ",", "text_samples", "[", "dev_sample_index", ":", "]", "\n", "\n", "item_dic", "=", "{", "}", "\n", "for", "bi", "in", "x_train", ":", "\n", "        ", "for", "item", "in", "bi", ":", "\n", "            ", "if", "item", "in", "item_dic", ":", "\n", "                ", "item_dic", "[", "item", "]", "=", "item_dic", ".", "get", "(", "item", ")", "+", "1", "\n", "", "else", ":", "\n", "                ", "item_dic", "[", "item", "]", "=", "1", "\n", "# sorted_names_5 = sorted(item_dic.iteritems(), key=lambda (k, v): (-v, k))[:args.top_k]#top_k=5", "\n", "", "", "", "sorted_names_5", "=", "sorted", "(", "item_dic", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", ":", "args", ".", "top_k", "]", "\n", "toplist_5", "=", "[", "tuple", "[", "0", "]", "for", "tuple", "in", "sorted_names_5", "]", "#the same order with sorted_names", "\n", "\n", "# sorted_names_20 = sorted(item_dic.iteritems(), key=lambda (k, v): (-v, k))[:(args.top_k+15)]  # top_k=5", "\n", "sorted_names_20", "=", "sorted", "(", "item_dic", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", ":", "args", ".", "top_k", "+", "15", "]", "\n", "toplist_20", "=", "[", "tuple", "[", "0", "]", "for", "tuple", "in", "sorted_names_20", "]", "# the same order with sorted_names", "\n", "\n", "# predictmap=[tuple for tuple in sorted_names]", "\n", "predictmap_5", "=", "dict", "(", "sorted_names_5", ")", "\n", "predictmap_20", "=", "dict", "(", "sorted_names_20", ")", "\n", "\n", "\n", "batch_size_test", "=", "args", ".", "batch_size", "*", "1", "\n", "\n", "for", "j", "in", "range", "(", "args", ".", "max_epochs", ")", ":", "\n", "        ", "curr_preds_5", "=", "[", "]", "\n", "rec_preds_5", "=", "[", "]", "# 1", "\n", "ndcg_preds_5", "=", "[", "]", "# 1", "\n", "curr_preds_20", "=", "[", "]", "\n", "rec_preds_20", "=", "[", "]", "# 1", "\n", "ndcg_preds_20", "=", "[", "]", "# 1", "\n", "\n", "batch_no_test", "=", "0", "\n", "\n", "while", "(", "batch_no_test", "+", "1", ")", "*", "batch_size_test", "<", "x_dev", ".", "shape", "[", "0", "]", ":", "\n", "            ", "if", "(", "batch_no_test", ">", "100", ")", ":", "\n", "                ", "break", "\n", "", "text_batch", "=", "x_dev", "[", "batch_no_test", "*", "batch_size_test", ":", "(", "batch_no_test", "+", "1", ")", "*", "batch_size_test", ",", ":", "]", "\n", "for", "bi", "in", "range", "(", "batch_size_test", ")", ":", "\n", "# predictmap = sorted_names", "\n", "                ", "true_word", "=", "text_batch", "[", "bi", "]", "[", "-", "1", "]", "\n", "\n", "rank_5", "=", "predictmap_5", ".", "get", "(", "true_word", ")", "\n", "rank_20", "=", "predictmap_20", ".", "get", "(", "true_word", ")", "\n", "if", "rank_5", "==", "None", ":", "\n", "                    ", "curr_preds_5", ".", "append", "(", "0.0", ")", "\n", "rec_preds_5", ".", "append", "(", "0.0", ")", "# 2", "\n", "ndcg_preds_5", ".", "append", "(", "0.0", ")", "# 2", "\n", "", "else", ":", "\n", "\n", "                    ", "rank_5", "=", "toplist_5", ".", "index", "(", "true_word", ")", "\n", "\n", "MRR_5", "=", "1.0", "/", "(", "rank_5", "+", "1", ")", "\n", "Rec_5", "=", "1.0", "# 3", "\n", "ndcg_5", "=", "1.0", "/", "math", ".", "log", "(", "rank_5", "+", "2", ",", "2", ")", "# 3", "\n", "curr_preds_5", ".", "append", "(", "MRR_5", ")", "\n", "rec_preds_5", ".", "append", "(", "Rec_5", ")", "# 4", "\n", "ndcg_preds_5", ".", "append", "(", "ndcg_5", ")", "# 4", "\n", "", "if", "rank_20", "==", "None", ":", "\n", "                    ", "curr_preds_20", ".", "append", "(", "0.0", ")", "\n", "rec_preds_20", ".", "append", "(", "0.0", ")", "# 2", "\n", "ndcg_preds_20", ".", "append", "(", "0.0", ")", "# 2", "\n", "", "else", ":", "\n", "                    ", "rank_20", "=", "toplist_20", ".", "index", "(", "true_word", ")", "\n", "MRR_20", "=", "1.0", "/", "(", "rank_20", "+", "1", ")", "\n", "Rec_20", "=", "1.0", "# 3", "\n", "ndcg_20", "=", "1.0", "/", "math", ".", "log", "(", "rank_20", "+", "2", ",", "2", ")", "# 3", "\n", "curr_preds_20", ".", "append", "(", "MRR_20", ")", "\n", "rec_preds_20", ".", "append", "(", "Rec_20", ")", "# 4", "\n", "ndcg_preds_20", ".", "append", "(", "ndcg_20", ")", "# 4", "\n", "", "", "batch_no_test", "+=", "1", "\n", "", "print", "(", "j", ",", "\"Accuracy mrr_5,20;hit_5,20;ndcg_5,20:\"", ",", "sum", "(", "curr_preds_5", ")", "/", "float", "(", "len", "(", "curr_preds_5", ")", ")", ",", "sum", "(", "curr_preds_20", ")", "/", "float", "(", "len", "(", "curr_preds_20", ")", ")", ",", "sum", "(", "rec_preds_5", ")", "/", "float", "(", "len", "(", "rec_preds_5", ")", ")", ",", "\n", "sum", "(", "rec_preds_20", ")", "/", "float", "(", "len", "(", "rec_preds_20", ")", ")", ",", "sum", "(", "ndcg_preds_5", ")", "/", "float", "(", "len", "(", "ndcg_preds_5", ")", ")", ",", "sum", "(", "ndcg_preds_20", ")", "/", "float", "(", "len", "(", "ndcg_preds_20", ")", ")", ")", "# 5", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.data_loader_recsys.Data_Loader.__init__": [[10, 22], ["list", "max", "tensorflow.contrib.learn.preprocessing.VocabularyProcessor", "numpy.array", "open().readlines", "list", "int", "len", "tensorflow.contrib.learn.preprocessing.VocabularyProcessor.fit_transform", "open", "x.split", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "\n", "        ", "positive_data_file", "=", "options", "[", "'dir_name'", "]", "\n", "positive_examples", "=", "list", "(", "open", "(", "positive_data_file", ",", "\"r\"", ")", ".", "readlines", "(", ")", ")", "\n", "positive_examples", "=", "[", "s", "for", "s", "in", "positive_examples", "]", "\n", "positive_examples", "=", "positive_examples", "[", ":", "int", "(", "options", "[", "'dataset_rate'", "]", "*", "len", "(", "positive_examples", ")", ")", "]", "\n", "\n", "\n", "max_document_length", "=", "max", "(", "[", "len", "(", "x", ".", "split", "(", "\",\"", ")", ")", "for", "x", "in", "positive_examples", "]", ")", "\n", "vocab_processor", "=", "learn", ".", "preprocessing", ".", "VocabularyProcessor", "(", "max_document_length", ")", "\n", "self", ".", "item", "=", "np", ".", "array", "(", "list", "(", "vocab_processor", ".", "fit_transform", "(", "positive_examples", ")", ")", ")", "\n", "self", ".", "item_dict", "=", "vocab_processor", ".", "vocabulary_", ".", "_mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.data_loader_recsys.Data_Loader.load_generator_data": [[24, 30], ["text.reshape.reshape.reshape", "len", "len"], "methods", ["None"], ["", "def", "load_generator_data", "(", "self", ",", "sample_size", ")", ":", "\n", "        ", "text", "=", "self", ".", "text", "\n", "mod_size", "=", "len", "(", "text", ")", "-", "len", "(", "text", ")", "%", "sample_size", "\n", "text", "=", "text", "[", "0", ":", "mod_size", "]", "\n", "text", "=", "text", ".", "reshape", "(", "-", "1", ",", "sample_size", ")", "\n", "return", "text", ",", "self", ".", "vocab_indexed", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.data_loader_recsys.Data_Loader.string_to_indices": [[32, 35], ["sentence.split"], "methods", ["None"], ["", "def", "string_to_indices", "(", "self", ",", "sentence", ",", "vocab", ")", ":", "\n", "        ", "indices", "=", "[", "vocab", "[", "s", "]", "for", "s", "in", "sentence", ".", "split", "(", "','", ")", "]", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.data_loader_recsys.Data_Loader.inidices_to_string": [[36, 45], ["None"], "methods", ["None"], ["", "def", "inidices_to_string", "(", "self", ",", "sentence", ",", "vocab", ")", ":", "\n", "        ", "id_ch", "=", "{", "vocab", "[", "ch", "]", ":", "ch", "for", "ch", "in", "vocab", "}", "\n", "sent", "=", "[", "]", "\n", "for", "c", "in", "sentence", ":", "\n", "            ", "if", "id_ch", "[", "c", "]", "==", "'eol'", ":", "\n", "                ", "break", "\n", "", "sent", "+=", "id_ch", "[", "c", "]", "\n", "\n", "", "return", "\"\"", ".", "join", "(", "sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.setup.main": [[24, 205], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "Tools.getlog", "Tools.getlog.info", "Tools.getlog.info", "data_loader_recsys.Data_Loader", "numpy.random.seed", "numpy.random.permutation", "len", "Tools.printargs", "rnn.PTBModel", "rnn.PTBModel.build_model", "Tools.getlog.info", "rnn.PTBModel.evaluate", "tensorflow.Session", "Tools.getlog.info", "range", "len", "str", "len", "Tool.setArgs", "numpy.arange", "int", "tf.Session.as_default", "tf.Session.run", "time.time", "time.time", "Tools.getlog.info", "Tools.elapsed", "time.time", "time.time", "Tools.getlog.info", "Tools.getlog.info", "Tools.getlog.info", "time.strftime", "time.strftime", "sys.argv[].split", "len", "tensorflow.global_variables_initializer", "tf.Session.run", "tf.Session.run", "curr_preds_5.append", "rec_preds_5.append", "ndcg_preds_5.append", "curr_preds_20.append", "rec_preds_20.append", "ndcg_preds_20.append", "Tools.elapsed", "time.strftime", "time.strftime", "time.localtime", "time.localtime", "float", "time.time", "time.time", "time.localtime", "time.localtime", "sum", "sum", "sum", "sum", "sum", "sum", "len", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.getlog", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.printargs", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.build_model", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.rnn.PTBModel.evaluate", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.setArgs", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.elapsed", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.Tools.elapsed"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use_mem'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'use_mem'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_cache'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'use cache'", ")", "\n", "parser", ".", "add_argument", "(", "'--words_num'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'words_num'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_type'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'cache_type'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_rate'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'dataset_rate'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'hidden layer size'", ")", "\n", "parser", ".", "add_argument", "(", "'--word_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "\n", "help", "=", "'word size'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"demo.csv\"", ",", "\n", "help", "=", "'Directory containing text files'", ")", "\n", "parser", ".", "add_argument", "(", "'--rnn_model'", ",", "type", "=", "str", ",", "\n", "default", "=", "'lstm'", ",", "help", "=", "'gru, lstm'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "'Learning Rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--read_heads'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'number read heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--time_type'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"time test\"", ")", "\n", "parser", ".", "add_argument", "(", "'--write_sess_emd'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"write_sess_emd\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cost_type'", ",", "type", "=", "str", ",", "default", "=", "\"all\"", ",", "\n", "help", "=", "'last or all'", ")", "\n", "parser", ".", "add_argument", "(", "'--cost_fun'", ",", "type", "=", "str", ",", "default", "=", "\"bpr\"", ",", "\n", "help", "=", "'bpr or cross'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'Learning Rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding_dim'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "\n", "help", "=", "'embedding size'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_attend_dim'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'cache attend dim'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--top_k'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Sample from top k predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epochs'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Max Epochs'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "str", ",", "\n", "default", "=", "'f78c95a8-9256-4757-9a9f-213df5c6854e,1151b040-8022-4965-96d2-8a4605ce456c'", ",", "\n", "help", "=", "'Seed for text generation'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_percentage'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'sample_percentage from whole data, e.g.0.2= 80% training 20% testing'", ")", "\n", "\n", "# parser.add_argument('--l2_reg_lambda', type=float, default=0,", "\n", "#                     help='L2 regularization lambda (default: 0.0)')", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'num_layers'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_name'", ",", "type", "=", "str", ",", "\n", "default", "=", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "help", "=", "'log_name'", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "type", "=", "str", ",", "\n", "default", "=", "\"__none\"", ",", "help", "=", "'config name'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "log", "=", "Tools", ".", "getlog", "(", "args", ".", "log_name", ")", "\n", "args", ".", "log", "=", "log", "\n", "\n", "log", ".", "info", "(", "len", "(", "sys", ".", "argv", ")", ")", "\n", "log", ".", "info", "(", "str", "(", "sys", ".", "argv", ")", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "2", ":", "\n", "        ", "args", ".", "c", "=", "sys", ".", "argv", "[", "1", "]", ".", "split", "(", "\"=\"", ")", "[", "1", "]", "\n", "args", "=", "Tool", ".", "setArgs", "(", "args", ")", "\n", "\n", "", "args", ".", "m_input_size", "=", "args", ".", "hidden_dim", "\n", "args", ".", "m_output_size", "=", "args", ".", "hidden_dim", "\n", "args", ".", "text_dir", "=", "args", ".", "dataset", "\n", "dl", "=", "data_loader", ".", "Data_Loader", "(", "{", "'model_type'", ":", "'generator'", ",", "'dir_name'", ":", "args", ".", "text_dir", ",", "'dataset_rate'", ":", "args", ".", "dataset_rate", "}", ")", "\n", "# text_samples=16390600  vocab=947255  session100", "\n", "all_samples", "=", "dl", ".", "item", "\n", "items", "=", "dl", ".", "item_dict", "\n", "\n", "\n", "# Randomly shuffle data", "\n", "np", ".", "random", ".", "seed", "(", "10", ")", "\n", "shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "all_samples", ")", ")", ")", "\n", "text_samples", "=", "all_samples", "[", "shuffle_indices", "]", "\n", "if", "args", ".", "write_sess_emd", ":", "\n", "        ", "args", ".", "text_samples", "=", "text_samples", "\n", "\n", "# Split train/test set", "\n", "# TODO: This is very crude, should use cross-validation", "\n", "", "dev_sample_index", "=", "-", "1", "*", "int", "(", "args", ".", "sample_percentage", "*", "float", "(", "len", "(", "text_samples", ")", ")", ")", "\n", "x_train", ",", "x_dev", "=", "text_samples", "[", ":", "dev_sample_index", "]", ",", "text_samples", "[", "dev_sample_index", ":", "]", "\n", "# print(x_train.shape)", "\n", "# print((x_train[:,30:]).shape)", "\n", "# x_train=np.hstack((np.zeros(shape=[x_train.shape[0],30],dtype=float),x_train[:,30:]))", "\n", "# print(x_train.shape)", "\n", "args", ".", "num_steps", "=", "x_train", ".", "shape", "[", "1", "]", "-", "1", "\n", "args", ".", "x_train", "=", "x_train", "\n", "args", ".", "x_dev", "=", "x_dev", "\n", "args", ".", "train_size", "=", "x_train", ".", "shape", "[", "0", "]", "\n", "args", ".", "test_size", "=", "x_dev", ".", "shape", "[", "0", "]", "\n", "args", ".", "vocab_size", "=", "len", "(", "items", ")", "\n", "\n", "Tools", ".", "printargs", "(", "args", ")", "\n", "\n", "rnn", "=", "PTBModel", "(", "args", ")", "\n", "rnn", ".", "build_model", "(", ")", "\n", "# loss_sum = tf.summary.scalar('loss', rnn.loss)", "\n", "log", ".", "info", "(", "\"train build ok , next is test\"", ")", "\n", "\n", "MRR_5", ",", "Rec_5", ",", "ndcg_5", ",", "MRR_20", ",", "Rec_20", ",", "ndcg_20", "=", "rnn", ".", "evaluate", "(", ")", "\n", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "", "batch_size", "=", "args", ".", "batch_size", "\n", "total_loss", ",", "acc_total", ",", "last_loss", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "log", ".", "info", "(", "'train  begin'", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "max_epochs", ")", ":", "\n", "        ", "batch_no", "=", "0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "args", ".", "sss", "=", "2000", "\n", "args", ".", "ssss", "=", "0", "\n", "while", "(", "batch_no", "+", "1", ")", "*", "batch_size", "<", "args", ".", "train_size", ":", "#args.train_size", "\n", "# do not need to evaluate all, only after several 10 sample_every, then output final results", "\n", "            ", "text_batch", "=", "x_train", "[", "batch_no", "*", "batch_size", ":", "(", "batch_no", "+", "1", ")", "*", "batch_size", ",", ":", "]", "\n", "\n", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "rnn", ".", "optim", ",", "rnn", ".", "loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "rnn", ".", "wholesession", ":", "text_batch", ",", "\n", "rnn", ".", "dropout_keep_prob", ":", "0.5", "\n", "}", ")", "\n", "total_loss", "+=", "loss", "\n", "batch_no", "+=", "1", "\n", "\n", "", "log", ".", "info", "(", "\"  EPOCH: %d  total_loss: %.6f    delta loss: %.6f \"", ",", "epoch", ",", "total_loss", ",", "(", "total_loss", "-", "last_loss", ")", ")", "\n", "train_time", "=", "Tools", ".", "elapsed", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "last_loss", "=", "total_loss", "\n", "total_loss", "=", "0", "\n", "\n", "batch_no_test", "=", "0", "\n", "curr_preds_5", ",", "rec_preds_5", ",", "ndcg_preds_5", ",", "curr_preds_20", ",", "rec_preds_20", ",", "ndcg_preds_20", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "while", "(", "batch_no_test", "+", "1", ")", "*", "batch_size", "<", "args", ".", "test_size", ":", "#    test_size    sss", "\n", "            ", "text_batch", "=", "x_dev", "[", "batch_no_test", "*", "batch_size", ":", "(", "batch_no_test", "+", "1", ")", "*", "batch_size", ",", ":", "]", "\n", "batch_no_test", "+=", "1", "\n", "\n", "MRR_5__", ",", "Rec_5__", ",", "ndcg_5__", ",", "MRR_20__", ",", "Rec_20__", ",", "ndcg_20__", "=", "sess", ".", "run", "(", "\n", "[", "MRR_5", ",", "Rec_5", ",", "ndcg_5", ",", "MRR_20", ",", "Rec_20", ",", "ndcg_20", "]", ",", "\n", "feed_dict", "=", "{", "\n", "rnn", ".", "wholesession", ":", "text_batch", ",", "\n", "rnn", ".", "dropout_keep_prob", ":", "1.0", "\n", "}", ")", "\n", "\n", "curr_preds_5", ".", "append", "(", "MRR_5__", ")", "\n", "rec_preds_5", ".", "append", "(", "Rec_5__", ")", "# 2", "\n", "ndcg_preds_5", ".", "append", "(", "ndcg_5__", ")", "# 2", "\n", "curr_preds_20", ".", "append", "(", "MRR_20__", ")", "\n", "rec_preds_20", ".", "append", "(", "Rec_20__", ")", "# 2", "\n", "ndcg_preds_20", ".", "append", "(", "ndcg_20__", ")", "# 2", "\n", "\n", "\n", "\n", "", "log", ".", "info", "(", "\"  EPOCH: %d  train time: %s  , test time: %s ,  %s \"", ",", "\n", "epoch", ",", "train_time", ",", "Tools", ".", "elapsed", "(", "time", ".", "time", "(", ")", "-", "start", ")", ",", "time", ".", "strftime", "(", "\"%m%d-%H%M%S\"", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "batch_no_test", "=", "1", "if", "batch_no_test", "==", "0", "else", "batch_no_test", "\n", "log", ".", "info", "(", "\"  <mrr_5,20,hit_5,20,ndcg_5,20> %.4f, %.4f, %.4f, %.4f, %.4f, %.4f\"", ",", "\n", "sum", "(", "curr_preds_5", ")", "/", "batch_no_test", ",", "\n", "sum", "(", "curr_preds_20", ")", "/", "batch_no_test", ",", "\n", "sum", "(", "rec_preds_5", ")", "/", "batch_no_test", ",", "\n", "sum", "(", "rec_preds_20", ")", "/", "batch_no_test", ",", "\n", "sum", "(", "ndcg_preds_5", ")", "/", "batch_no_test", ",", "\n", "sum", "(", "ndcg_preds_20", ")", "/", "batch_no_test", ")", "# 5", "\n", "\n", "log", ".", "info", "(", "\"==================================================================\"", ")", "\n", "# if args.write_sess_emd:", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.__init__": [[9, 52], ["tensorflow.constant", "tensorflow.constant", "memory_uw.Memory.initials_w", "numpy.identity", "numpy.cumsum"], "methods", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.initials_w"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "words_num", "=", "128", ",", "word_size", "=", "64", ",", "read_heads", "=", "1", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        constructs a memory matrix with read heads and a write head as described\n        in the DNC paper\n        http://www.nature.com/nature/journal/vaop/ncurrent/full/nature20101.html\n        Parameters:\n        ----------\n        words_num: int\n            the maximum number of words that can be stored in the memory at the\n            same time\n        word_size: int\n            the size of the individual word in the memory\n        read_heads: int\n            the number of read heads that can read simultaneously from the memory\n        batch_size: int\n            the size of input data batch\n        \"\"\"", "\n", "\n", "self", ".", "words_num", "=", "words_num", "\n", "self", ".", "word_size", "=", "word_size", "\n", "self", ".", "read_heads", "=", "read_heads", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "# a words_num x words_num identity matrix", "\n", "self", ".", "I", "=", "tf", ".", "constant", "(", "np", ".", "identity", "(", "words_num", ",", "dtype", "=", "np", ".", "float32", ")", ")", "# to support calculate link matrix", "\n", "\n", "# maps the indecies from the 2D array of free list per batch to", "\n", "# their corresponding values in the flat 1D array of ordered_allocation_weighting --> vector a --> need to be sorted", "\n", "self", ".", "index_mapper", "=", "tf", ".", "constant", "(", "\n", "np", ".", "cumsum", "(", "[", "0", "]", "+", "[", "words_num", "]", "*", "(", "batch_size", "-", "1", ")", ",", "dtype", "=", "np", ".", "int32", ")", "[", ":", ",", "np", ".", "newaxis", "]", "# [[0], [word_num], [word_num*2], [word_num*3], ...]", "\n", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "nn_input_size", "=", "self", ".", "word_size", "*", "self", ".", "read_heads", "+", "self", ".", "input_size", "\n", "self", ".", "nn_output_size", "=", "input_size", "\n", "self", ".", "interface_vector_size", "=", "self", ".", "word_size", "*", "self", ".", "read_heads", "#R read keys", "\n", "self", ".", "interface_vector_size", "+=", "3", "*", "self", ".", "word_size", "#1 write key, 1 erase, 1 content", "\n", "self", ".", "interface_vector_size", "+=", "5", "*", "self", ".", "read_heads", "#R read key strengths, R free gates, 3xR read modes (each mode for each read has 3 values)", "\n", "self", ".", "interface_vector_size", "+=", "3", "# 1 write strength, 1 allocation gate, 1 write gate", "\n", "\n", "\n", "self", ".", "initials_w", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.init_memory": [[53, 67], ["tensorflow.fill", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.fill", "tensorflow.fill", "tensorflow.fill"], "methods", ["None"], ["", "def", "init_memory", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns the initial values for the memory Parameters\n        Returns: Tuple\n        \"\"\"", "\n", "return", "(", "\n", "# each sample in batch has its own version of memory", "\n", "tf", ".", "fill", "(", "[", "self", ".", "batch_size", ",", "self", ".", "words_num", ",", "self", ".", "word_size", "]", ",", "1e-6", ")", ",", "# initial memory matrix", "\n", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "words_num", "]", ")", ",", "# initial usage vector u", "\n", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "words_num", "]", ")", ",", "# initial precedence vector p", "\n", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "words_num", ",", "self", ".", "words_num", "]", ")", ",", "# initial link matrix L", "\n", "tf", ".", "fill", "(", "[", "self", ".", "batch_size", ",", "self", ".", "words_num", "]", ",", "1e-6", ")", ",", "# initial write weighting", "\n", "tf", ".", "fill", "(", "[", "self", ".", "batch_size", ",", "self", ".", "words_num", ",", "self", ".", "read_heads", "]", ",", "1e-6", ")", ",", "# initial read weightings", "\n", "tf", ".", "fill", "(", "[", "self", ".", "batch_size", ",", "self", ".", "word_size", ",", "self", ".", "read_heads", "]", ",", "1e-6", ")", ",", "# initial read vectors", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.get_lookup_weighting": [[71, 95], ["tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.nn.softmax"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get_lookup_weighting", "(", "memory_matrix", ",", "keys", ",", "strengths", ")", ":", "\n", "        ", "\"\"\"\n        retrives a content-based adderssing weighting given the keys\n        Parameters:\n        ----------\n        memory_matrix: Tensor (batch_size, words_num, word_size)\n            the memory matrix to lookup in\n        keys: Tensor (batch_size, word_size, number_of_keys)\n            the keys to query the memory with\n        strengths: Tensor (batch_size, number_of_keys, )\n            the list of strengths for each lookup key\n        Returns: Tensor (batch_size, words_num, number_of_keys)\n            The list of lookup weightings for each provided key\n        \"\"\"", "\n", "\n", "normalized_memory", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "memory_matrix", ",", "2", ")", "#M=M/|M|", "\n", "normalized_keys", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "keys", ",", "1", ")", "#k=k/|k|", "\n", "\n", "similiarity", "=", "tf", ".", "matmul", "(", "normalized_memory", ",", "normalized_keys", ")", "#cosine sim: (batch_size, word_num, number_of_keys)", "\n", "strengths", "=", "tf", ".", "expand_dims", "(", "strengths", ",", "1", ")", "#(batch_size, 1, number_of_keys)", "\n", "\n", "# (batch_size, word_num, number_of_keys) --softmax on 1-->(batch_size, word_num, number_of_keys)", "\n", "return", "tf", ".", "nn", ".", "softmax", "(", "similiarity", "*", "strengths", ",", "1", ")", "#each batch, every row of mem is multiplied with strength and then softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_usage_vector": [[100, 120], ["tensorflow.expand_dims", "tensorflow.reduce_prod"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "update_usage_vector", "(", "usage_vector", ",", "read_weightings", ",", "write_weighting", ",", "free_gates", ")", ":", "\n", "        ", "\"\"\"\n        updates and returns the usgae vector given the values of the free gates\n        and the usage_vector, read_weightings, write_weighting from previous step\n        Parameters:\n        ----------\n        usage_vector: Tensor (batch_size, words_num)\n        read_weightings: Tensor (batch_size, words_num, read_heads)\n        write_weighting: Tensor (batch_size, words_num)\n        free_gates: Tensor (batch_size, read_heads, )\n        Returns: Tensor (batch_size, words_num, )\n            the updated usage vector\n        \"\"\"", "\n", "free_gates", "=", "tf", ".", "expand_dims", "(", "free_gates", ",", "1", ")", "#(batch_size, 1, read_heads )", "\n", "\n", "retention_vector", "=", "tf", ".", "reduce_prod", "(", "1", "-", "read_weightings", "*", "free_gates", ",", "2", ")", "# (batch_size, word_num)", "\n", "updated_usage", "=", "(", "usage_vector", "+", "write_weighting", "-", "usage_vector", "*", "write_weighting", ")", "*", "retention_vector", "\n", "\n", "return", "updated_usage", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.get_allocation_weighting": [[122, 152], ["tensorflow.cumprod", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.TensorArray", "tensorflow.TensorArray.scatter", "tf.TensorArray.scatter.stack", "tensorflow.reshape"], "methods", ["None"], ["", "def", "get_allocation_weighting", "(", "self", ",", "sorted_usage", ",", "free_list", ")", ":", "\n", "        ", "\"\"\"\n        retreives the writing allocation weighting based on the usage free list\n        Parameters:\n        ----------\n        sorted_usage: Tensor (batch_size, words_num, )\n            the usage vector sorted ascendingly\n        free_list: Tensor (batch, words_num, )\n            the original indecies of the sorted usage vector: free_list[0] = the least use location --> calculated by sorting usage vector\n        Returns: Tensor (batch_size, words_num, )\n            the allocation weighting for each word in memory\n        \"\"\"", "\n", "# cum product makes the first index of result (correspond to less usage one) has bigger value --> should be allocate", "\n", "shifted_cumprod", "=", "tf", ".", "cumprod", "(", "sorted_usage", ",", "axis", "=", "1", ",", "exclusive", "=", "True", ")", "\n", "# multiply with this even make larger for less usage ones", "\n", "unordered_allocation_weighting", "=", "(", "1", "-", "sorted_usage", ")", "*", "shifted_cumprod", "# batch_size x words_num, the first element is weight for least use", "\n", "\n", "mapped_free_list", "=", "free_list", "+", "self", ".", "index_mapper", "# boardcast add with the offset correspond to batch id", "\n", "flat_unordered_allocation_weighting", "=", "tf", ".", "reshape", "(", "unordered_allocation_weighting", ",", "(", "-", "1", ",", ")", ")", "# flatten", "\n", "flat_mapped_free_list", "=", "tf", ".", "reshape", "(", "mapped_free_list", ",", "(", "-", "1", ",", ")", ")", "# flatten", "\n", "flat_container", "=", "tf", ".", "TensorArray", "(", "tf", ".", "float32", ",", "self", ".", "batch_size", "*", "self", ".", "words_num", ")", "\n", "\n", "# fill the weights to the original locations", "\n", "flat_ordered_weightings", "=", "flat_container", ".", "scatter", "(", "\n", "flat_mapped_free_list", ",", "\n", "flat_unordered_allocation_weighting", "\n", ")", "\n", "\n", "packed_wightings", "=", "flat_ordered_weightings", ".", "stack", "(", ")", "\n", "return", "tf", ".", "reshape", "(", "packed_wightings", ",", "(", "self", ".", "batch_size", ",", "self", ".", "words_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_write_weighting": [[154, 181], ["tensorflow.squeeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "update_write_weighting", "(", "lookup_weighting", ",", "allocation_weighting", ",", "write_gate", ",", "allocation_gate", ")", ":", "\n", "        ", "\"\"\"\n        updates and returns the current write_weighting\n        Parameters:\n        ----------\n        lookup_weighting: Tensor (batch_size, words_num, 1)\n            the weight of the lookup operation in writing --> diff from one in reading\n        allocation_weighting: Tensor (batch_size, words_num)\n            the weight of the allocation operation in writing\n        write_gate: (batch_size, 1)\n            the fraction of writing to be done\n        allocation_gate: (batch_size, 1)\n            the fraction of allocation to be done\n        Returns: Tensor (batch_size, words_num)\n            the updated write_weighting\n        \"\"\"", "\n", "\n", "# remove the dimension of 1 from the lookup_weighting (the third dim, because num write head =1)", "\n", "lookup_weighting", "=", "tf", ".", "squeeze", "(", "lookup_weighting", ")", "\n", "\n", "# the write gate is the final decisor may help protect memory despite other factors", "\n", "# allocation gate is computed based on usage", "\n", "# allocation gate interpolate between usage and content lookup", "\n", "updated_write_weighting", "=", "write_gate", "*", "(", "allocation_gate", "*", "allocation_weighting", "+", "(", "1", "-", "allocation_gate", ")", "*", "lookup_weighting", ")", "\n", "\n", "return", "updated_write_weighting", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_memory": [[183, 215], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "update_memory", "(", "memory_matrix", ",", "write_weighting", ",", "write_vector", ",", "erase_vector", ")", ":", "\n", "        ", "\"\"\"\n        updates and returns the memory matrix given the weighting, write and erase vectors\n        and the memory matrix from previous step\n        Parameters:\n        ----------\n        memory_matrix: Tensor (batch_size, words_num, word_size)\n            the memory matrix from previous step\n        write_weighting: Tensor (batch_size, words_num)\n            the weight of writing at each memory location\n        write_vector: Tensor (batch_size, word_size)\n            a vector specifying what to write\n        erase_vector: Tensor (batch_size, word_size)\n            a vector specifying what to erase from memory\n        Returns: Tensor (batch_size, words_num, word_size)\n            the updated memory matrix\n        \"\"\"", "\n", "\n", "# expand data with a dimension of 1 at multiplication-adjacent location", "\n", "# to force matmul to behave as an outer product", "\n", "write_weighting", "=", "tf", ".", "expand_dims", "(", "write_weighting", ",", "2", ")", "#(batch_size, words_num, 1)", "\n", "write_vector", "=", "tf", ".", "expand_dims", "(", "write_vector", ",", "1", ")", "# (batch_size, 1, word_size)", "\n", "erase_vector", "=", "tf", ".", "expand_dims", "(", "erase_vector", ",", "1", ")", "# (batch_size, 1, word_size)", "\n", "\n", "# weight and erase are out product to create a matrix erase", "\n", "# erase value is reflected differently in each location by the weight", "\n", "erasing", "=", "memory_matrix", "*", "(", "1", "-", "tf", ".", "matmul", "(", "write_weighting", ",", "erase_vector", ")", ")", "#(batch_size, words_num, word_size)", "\n", "writing", "=", "tf", ".", "matmul", "(", "write_weighting", ",", "write_vector", ")", "#(batch_size, words_num, word_size)", "\n", "updated_memory", "=", "erasing", "+", "writing", "#(batch_size, words_num, word_size)", "\n", "\n", "return", "updated_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_precedence_vector": [[219, 239], ["tensorflow.reduce_sum"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "update_precedence_vector", "(", "precedence_vector", ",", "write_weighting", ")", ":", "\n", "        ", "\"\"\"\n        updates the precedence vector given the latest write weighting --> contain info of writting information\n        and the precedence_vector from last step\n        Parameters:\n        ----------\n        precedence_vector: Tensor (batch_size. words_num)\n            the precedence vector from the last time step\n        write_weighting: Tensor (batch_size,words_num)\n            the latest write weighting for the memory\n        Returns: Tensor (batch_size, words_num)\n            the updated precedence vector\n        \"\"\"", "\n", "\n", "# if current write is to full memory --> no need to refer to writing information from the past--> like write weight", "\n", "reset_factor", "=", "1", "-", "tf", ".", "reduce_sum", "(", "write_weighting", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "updated_precedence_vector", "=", "reset_factor", "*", "precedence_vector", "+", "write_weighting", "\n", "\n", "return", "updated_precedence_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_link_matrix": [[241, 270], ["tensorflow.expand_dims", "tensorflow.expand_dims", "memory_uw.Memory.pairwise_add", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.pairwise_add"], ["", "def", "update_link_matrix", "(", "self", ",", "precedence_vector", ",", "link_matrix", ",", "write_weighting", ")", ":", "\n", "        ", "\"\"\"\n        updates and returns the temporal link matrix for the latest write\n        given the precedence vector and the link matrix from previous step\n        Parameters:\n        ----------\n        precedence_vector: Tensor (batch_size, words_num)\n            the precedence vector from the last time step\n        link_matrix: Tensor (batch_size, words_num, words_num)\n            the link matrix form the last step\n        write_weighting: Tensor (batch_size, words_num)\n            the latest write_weighting for the memory\n        Returns: Tensor (batch_size, words_num, words_num)\n            the updated temporal link matrix\n        \"\"\"", "\n", "\n", "write_weighting", "=", "tf", ".", "expand_dims", "(", "write_weighting", ",", "2", ")", "#(batch_size, words_num, 1)", "\n", "precedence_vector", "=", "tf", ".", "expand_dims", "(", "precedence_vector", ",", "1", ")", "#(batch_size, 1, words_num)", "\n", "\n", "# remove old link between all i and j because now we have new weight write", "\n", "reset_factor", "=", "1", "-", "self", ".", "pairwise_add", "(", "write_weighting", ",", "is_batch", "=", "True", ")", "#(batch_size, words_num, 1) matrix[i,j]=1-w[i]-w[j]", "\n", "\n", "# add current link between last write (precedence vector) and cur write weight", "\n", "updated_link_matrix", "=", "reset_factor", "*", "link_matrix", "+", "tf", ".", "matmul", "(", "write_weighting", ",", "precedence_vector", ")", "#(batch_size, words_num, words_num)", "\n", "\n", "# diagnoal position should be 0", "\n", "updated_link_matrix", "=", "(", "1", "-", "self", ".", "I", ")", "*", "updated_link_matrix", "# eliminates self-links", "\n", "\n", "return", "updated_link_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.get_directional_weightings": [[272, 294], ["tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_directional_weightings", "(", "read_weightings", ",", "link_matrix", ")", ":", "\n", "        ", "\"\"\"\n        computes and returns the forward and backward reading weightings\n        given the read_weightings from the previous step\n        Parameters:\n        ----------\n        read_weightings: Tensor (batch_size, words_num, read_heads)\n            the read weightings from the last time step\n        link_matrix: Tensor (batch_size, words_num, words_num)\n            the temporal link matrix\n        Returns: Tuple\n            forward weighting: Tensor (batch_size, words_num, read_heads),\n            backward weighting: Tensor (batch_size, words_num, read_heads)\n        \"\"\"", "\n", "\n", "# if your last reading location is i, forward lead you to the next location that is written after i (current write j)", "\n", "forward_weighting", "=", "tf", ".", "matmul", "(", "link_matrix", ",", "read_weightings", ")", "\n", "# if your last reading location is i, backward lead you to the previous location that is written before i (last write k)", "\n", "backward_weighting", "=", "tf", ".", "matmul", "(", "link_matrix", ",", "read_weightings", ",", "transpose_a", "=", "True", ")", "# tranpose link and mul", "\n", "\n", "return", "forward_weighting", ",", "backward_weighting", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_read_weightings": [[296, 321], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "update_read_weightings", "(", "lookup_weightings", ",", "forward_weighting", ",", "backward_weighting", ",", "read_mode", ")", ":", "\n", "        ", "\"\"\"\n        updates and returns the current read_weightings\n        Parameters:\n        ----------\n        lookup_weightings: Tensor (batch_size, words_num, read_heads)\n            the content-based read weighting\n        forward_weighting: Tensor (batch_size, words_num, read_heads)\n            the forward direction read weighting\n        backward_weighting: Tensor (batch_size, words_num, read_heads)\n            the backward direction read weighting\n        read_mode: Tesnor (batch_size, 3, read_heads)\n            the softmax distribution between the three read modes\n        Returns: Tensor (batch_size, words_num, read_heads)\n        \"\"\"", "\n", "\n", "# interpolate 3 component: backward forward content", "\n", "\n", "backward_mode", "=", "tf", ".", "expand_dims", "(", "read_mode", "[", ":", ",", "0", ",", ":", "]", ",", "1", ")", "*", "backward_weighting", "\n", "lookup_mode", "=", "tf", ".", "expand_dims", "(", "read_mode", "[", ":", ",", "1", ",", ":", "]", ",", "1", ")", "*", "lookup_weightings", "\n", "forward_mode", "=", "tf", ".", "expand_dims", "(", "read_mode", "[", ":", ",", "2", ",", ":", "]", ",", "1", ")", "*", "forward_weighting", "\n", "updated_read_weightings", "=", "backward_mode", "+", "lookup_mode", "+", "forward_mode", "\n", "\n", "return", "updated_read_weightings", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_read_vectors": [[323, 340], ["tensorflow.matmul"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "update_read_vectors", "(", "memory_matrix", ",", "read_weightings", ")", ":", "\n", "        ", "\"\"\"\n        reads, updates, and returns the read vectors of the recently updated memory\n        Parameters:\n        ----------\n        memory_matrix: Tensor (batch_size, words_num, word_size)\n            the recently updated memory matrix\n        read_weightings: Tensor (batch_size, words_num, read_heads)\n            the amount of info to read from each memory location by each read head\n        Returns: Tensor (word_size, read_heads)\n        \"\"\"", "\n", "\n", "# the read values", "\n", "updated_read_vectors", "=", "tf", ".", "matmul", "(", "memory_matrix", ",", "read_weightings", ",", "transpose_a", "=", "True", ")", "\n", "\n", "return", "updated_read_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.write": [[344, 402], ["memory_uw.Memory.get_lookup_weighting", "memory_uw.Memory.update_usage_vector", "tensorflow.nn.top_k", "memory_uw.Memory.get_allocation_weighting", "memory_uw.Memory.update_write_weighting", "memory_uw.Memory.update_link_matrix", "memory_uw.Memory.update_precedence_vector", "memory_uw.Memory.update_memory"], "methods", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.get_lookup_weighting", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_usage_vector", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.get_allocation_weighting", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_write_weighting", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_link_matrix", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_precedence_vector", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_memory"], ["def", "write", "(", "self", ",", "memory_matrix", ",", "usage_vector", ",", "read_weightings", ",", "write_weighting", ",", "\n", "precedence_vector", ",", "link_matrix", ",", "key", ",", "strength", ",", "free_gates", ",", "\n", "allocation_gate", ",", "write_gate", ",", "write_vector", ",", "erase_vector", ")", ":", "\n", "        ", "\"\"\"\n        defines the complete pipeline of writing to memory given the write variables\n        and the memory_matrix, usage_vector, link_matrix, and precedence_vector from\n        previous step\n        Parameters:\n        ----------\n        memory_matrix: Tensor (batch_size, words_num, word_size)\n            the memory matrix from previous step\n        usage_vector: Tensor (batch_size, words_num)\n            the usage_vector from the last time step\n        read_weightings: Tensor (batch_size, words_num, read_heads)\n            the read_weightings from the last time step\n        write_weighting: Tensor (batch_size, words_num)\n            the write_weighting from the last time step\n        precedence_vector: Tensor (batch_size, words_num)\n            the precedence vector from the last time step\n        link_matrix: Tensor (batch_size, words_num, words_num)\n            the link_matrix from previous step\n        key: Tensor (batch_size, word_size, 1)\n            the key to query the memory location with\n        strength: (batch_size, 1)\n            the strength of the query key\n        free_gates: Tensor (batch_size, read_heads)\n            the degree to which location at read haeds will be freed\n        allocation_gate: (batch_size, 1)\n            the fraction of writing that is being allocated in a new locatio\n        write_gate: (batch_size, 1)\n            the amount of information to be written to memory\n        write_vector: Tensor (batch_size, word_size)\n            specifications of what to write to memory\n        erase_vector: Tensor(batch_size, word_size)\n            specifications of what to erase from memory\n        Returns : Tuple\n            the updated usage vector: Tensor (batch_size, words_num)\n            the updated write_weighting: Tensor(batch_size, words_num)\n            the updated memory_matrix: Tensor (batch_size, words_num, words_size)\n            the updated link matrix: Tensor(batch_size, words_num, words_num)\n            the updated precedence vector: Tensor (batch_size, words_num)\n        \"\"\"", "\n", "\n", "lookup_weighting", "=", "self", ".", "get_lookup_weighting", "(", "memory_matrix", ",", "key", ",", "strength", ")", "\n", "\n", "new_usage_vector", "=", "self", ".", "update_usage_vector", "(", "usage_vector", ",", "read_weightings", ",", "write_weighting", ",", "free_gates", ")", "\n", "\n", "sorted_usage", ",", "free_list", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "1", "*", "new_usage_vector", ",", "self", ".", "words_num", ")", "#make it from min to max", "\n", "sorted_usage", "=", "-", "1", "*", "sorted_usage", "#convert to normal values", "\n", "\n", "allocation_weighting", "=", "self", ".", "get_allocation_weighting", "(", "sorted_usage", ",", "free_list", ")", "\n", "new_write_weighting", "=", "self", ".", "update_write_weighting", "(", "lookup_weighting", ",", "allocation_weighting", ",", "write_gate", ",", "allocation_gate", ")", "\n", "new_link_matrix", "=", "self", ".", "update_link_matrix", "(", "precedence_vector", ",", "link_matrix", ",", "new_write_weighting", ")", "\n", "new_precedence_vector", "=", "self", ".", "update_precedence_vector", "(", "precedence_vector", ",", "new_write_weighting", ")", "\n", "\n", "new_memory_matrix", "=", "self", ".", "update_memory", "(", "memory_matrix", ",", "new_write_weighting", ",", "write_vector", ",", "erase_vector", ")", "\n", "\n", "return", "new_usage_vector", ",", "new_write_weighting", ",", "new_memory_matrix", ",", "new_link_matrix", ",", "new_precedence_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.read_zero": [[403, 410], ["tensorflow.fill", "tensorflow.fill", "tensorflow.fill", "tensorflow.fill"], "methods", ["None"], ["", "def", "read_zero", "(", "self", ",", "read_heads", "=", "None", ")", ":", "\n", "        ", "if", "read_heads", "is", "None", ":", "\n", "            ", "return", "tf", ".", "fill", "(", "[", "self", ".", "batch_size", ",", "self", ".", "words_num", ",", "self", ".", "read_heads", "]", ",", "1e-6", ")", ",", "tf", ".", "fill", "(", "[", "self", ".", "batch_size", ",", "self", ".", "word_size", ",", "self", ".", "read_heads", "]", ",", "1e-6", ")", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "fill", "(", "[", "self", ".", "batch_size", ",", "self", ".", "words_num", ",", "read_heads", "]", ",", "1e-6", ")", ",", "tf", ".", "fill", "(", "[", "self", ".", "batch_size", ",", "self", ".", "word_size", ",", "read_heads", "]", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.read": [[411, 443], ["memory_uw.Memory.get_lookup_weighting", "memory_uw.Memory.get_directional_weightings", "memory_uw.Memory.update_read_weightings", "memory_uw.Memory.update_read_vectors"], "methods", ["home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.get_lookup_weighting", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.get_directional_weightings", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_read_weightings", "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.update_read_vectors"], ["", "", "def", "read", "(", "self", ",", "memory_matrix", ",", "read_weightings", ",", "keys", ",", "strengths", ",", "link_matrix", ",", "read_modes", ")", ":", "\n", "        ", "\"\"\"\n        defines the complete pipeline for reading from memory\n        Parameters:\n        ----------\n        memory_matrix: Tensor (batch_size, words_num, word_size)\n            the updated memory matrix from the last writing\n        read_weightings: Tensor (batch_size, words_num, read_heads)\n            the read weightings form the last time step\n        keys: Tensor (batch_size, word_size, read_heads)\n            the kyes to query the memory locations with\n        strengths: Tensor (batch_size, read_heads)\n            the strength of each read key\n        link_matrix: Tensor (batch_size, words_num, words_num)\n            the updated link matrix from the last writing\n        read_modes: Tensor (batch_size, 3, read_heads)\n            the softmax distribution between the three read modes\n        Returns: Tuple\n            the updated read_weightings: Tensor(batch_size, words_num, read_heads)\n            the recently read vectors: Tensor (batch_size, word_size, read_heads)\n        \"\"\"", "\n", "\n", "lookup_weighting", "=", "self", ".", "get_lookup_weighting", "(", "memory_matrix", ",", "keys", ",", "strengths", ")", "# content weight: later use to produce read weight", "\n", "\n", "\n", "# need last read weights to infer forward, backward --> just mul with link matrix", "\n", "forward_weighting", ",", "backward_weighting", "=", "self", ".", "get_directional_weightings", "(", "read_weightings", ",", "link_matrix", ")", "\n", "new_read_weightings", "=", "self", ".", "update_read_weightings", "(", "lookup_weighting", ",", "forward_weighting", ",", "backward_weighting", ",", "read_modes", ")", "\n", "\n", "new_read_vectors", "=", "self", ".", "update_read_vectors", "(", "memory_matrix", ",", "new_read_weightings", ")", "\n", "\n", "return", "new_read_weightings", ",", "new_read_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.pairwise_add": [[444, 484], ["u.get_shape().as_list", "tensorflow.reshape", "tensorflow.concat", "ValueError", "ValueError", "v.get_shape().as_list", "tensorflow.reshape", "tensorflow.concat", "u.get_shape", "len", "len", "ValueError", "tensorflow.transpose", "len", "len", "v.get_shape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "pairwise_add", "(", "u", ",", "v", "=", "None", ",", "is_batch", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        performs a pairwise summation between vectors (possibly the same)\n        Parameters:\n        ----------\n        u: Tensor (n, ) | (n, 1)\n        v: Tensor (n, ) | (n, 1) [optional]\n        is_batch: bool\n            a flag for whether the vectors come in a batch\n            ie.: whether the vectors has a shape of (b,n) or (b,n,1)\n        Returns: Tensor (n, n)\n        Raises: ValueError\n        \"\"\"", "\n", "u_shape", "=", "u", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n", "if", "len", "(", "u_shape", ")", ">", "2", "and", "not", "is_batch", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected at most 2D tensors, but got %dD\"", "%", "len", "(", "u_shape", ")", ")", "\n", "", "if", "len", "(", "u_shape", ")", ">", "3", "and", "is_batch", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected at most 2D tensor batches, but got %dD\"", "%", "len", "(", "u_shape", ")", ")", "\n", "\n", "", "if", "v", "is", "None", ":", "\n", "            ", "v", "=", "u", "\n", "", "else", ":", "\n", "            ", "v_shape", "=", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "u_shape", "!=", "v_shape", ":", "\n", "                ", "raise", "ValueError", "(", "\"Shapes %s and %s do not match\"", "%", "(", "u_shape", ",", "v_shape", ")", ")", "\n", "\n", "", "", "n", "=", "u_shape", "[", "0", "]", "if", "not", "is_batch", "else", "u_shape", "[", "1", "]", "\n", "\n", "column_u", "=", "tf", ".", "reshape", "(", "u", ",", "(", "-", "1", ",", "1", ")", "if", "not", "is_batch", "else", "(", "-", "1", ",", "n", ",", "1", ")", ")", "\n", "U", "=", "tf", ".", "concat", "(", "[", "column_u", "]", "*", "n", ",", "1", "if", "not", "is_batch", "else", "2", ")", "\n", "\n", "if", "v", "is", "u", ":", "\n", "            ", "return", "U", "+", "tf", ".", "transpose", "(", "U", ",", "None", "if", "not", "is_batch", "else", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "row_v", "=", "tf", ".", "reshape", "(", "v", ",", "(", "1", ",", "-", "1", ")", "if", "not", "is_batch", "else", "(", "-", "1", ",", "1", ",", "n", ")", ")", "\n", "V", "=", "tf", ".", "concat", "(", "[", "row_v", "]", "*", "n", ",", "0", "if", "not", "is_batch", "else", "1", ")", "\n", "\n", "return", "U", "+", "V", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.parse_interface_vector": [[485, 536], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.softmax", "tensorflow.nn.softplus", "tensorflow.nn.softplus"], "methods", ["None"], ["", "", "def", "parse_interface_vector", "(", "self", ",", "interface_vector", ")", ":", "\n", "        ", "\"\"\"\n        pasres the flat interface_vector into its various components with their\n        correct shapes\n\n        Parameters:\n        ----------\n        interface_vector: Tensor (batch_size, interface_vector_size)\n            the flattened inetrface vector to be parsed\n\n        Returns: dict\n            a dictionary with the components of the interface_vector parsed\n        \"\"\"", "\n", "parsed", "=", "{", "}", "\n", "\n", "r_keys_end", "=", "self", ".", "word_size", "*", "self", ".", "read_heads", "\n", "r_strengths_end", "=", "r_keys_end", "+", "self", ".", "read_heads", "\n", "w_key_end", "=", "r_strengths_end", "+", "self", ".", "word_size", "\n", "erase_end", "=", "w_key_end", "+", "1", "+", "self", ".", "word_size", "\n", "write_end", "=", "erase_end", "+", "self", ".", "word_size", "\n", "free_end", "=", "write_end", "+", "self", ".", "read_heads", "\n", "\n", "r_keys_shape", "=", "(", "-", "1", ",", "self", ".", "word_size", ",", "self", ".", "read_heads", ")", "\n", "r_strengths_shape", "=", "(", "-", "1", ",", "self", ".", "read_heads", ")", "\n", "w_key_shape", "=", "(", "-", "1", ",", "self", ".", "word_size", ",", "1", ")", "\n", "write_shape", "=", "erase_shape", "=", "(", "-", "1", ",", "self", ".", "word_size", ")", "\n", "free_shape", "=", "(", "-", "1", ",", "self", ".", "read_heads", ")", "\n", "modes_shape", "=", "(", "-", "1", ",", "3", ",", "self", ".", "read_heads", ")", "\n", "\n", "# parsing the vector into its individual components", "\n", "parsed", "[", "'read_keys'", "]", "=", "tf", ".", "reshape", "(", "interface_vector", "[", ":", ",", ":", "r_keys_end", "]", ",", "r_keys_shape", ")", "#batch x N x R", "\n", "parsed", "[", "'read_strengths'", "]", "=", "tf", ".", "reshape", "(", "interface_vector", "[", ":", ",", "r_keys_end", ":", "r_strengths_end", "]", ",", "r_strengths_shape", ")", "#batch x R", "\n", "parsed", "[", "'write_key'", "]", "=", "tf", ".", "reshape", "(", "interface_vector", "[", ":", ",", "r_strengths_end", ":", "w_key_end", "]", ",", "w_key_shape", ")", "#batch x N x 1 --> share similarity function with read", "\n", "parsed", "[", "'write_strength'", "]", "=", "tf", ".", "reshape", "(", "interface_vector", "[", ":", ",", "w_key_end", "]", ",", "(", "-", "1", ",", "1", ")", ")", "# batch x 1", "\n", "parsed", "[", "'erase_vector'", "]", "=", "tf", ".", "reshape", "(", "interface_vector", "[", ":", ",", "w_key_end", "+", "1", ":", "erase_end", "]", ",", "erase_shape", ")", "#batch x N", "\n", "parsed", "[", "'write_vector'", "]", "=", "tf", ".", "reshape", "(", "interface_vector", "[", ":", ",", "erase_end", ":", "write_end", "]", ",", "write_shape", ")", "# batch x N", "\n", "parsed", "[", "'free_gates'", "]", "=", "tf", ".", "reshape", "(", "interface_vector", "[", ":", ",", "write_end", ":", "free_end", "]", ",", "free_shape", ")", "# batch x R", "\n", "parsed", "[", "'allocation_gate'", "]", "=", "tf", ".", "expand_dims", "(", "interface_vector", "[", ":", ",", "free_end", "]", ",", "1", ")", "# batch x 1", "\n", "parsed", "[", "'write_gate'", "]", "=", "tf", ".", "expand_dims", "(", "interface_vector", "[", ":", ",", "free_end", "+", "1", "]", ",", "1", ")", "# batch x 1", "\n", "parsed", "[", "'read_modes'", "]", "=", "tf", ".", "reshape", "(", "interface_vector", "[", ":", ",", "free_end", "+", "2", ":", "]", ",", "modes_shape", ")", "# batch x 3 x R", "\n", "\n", "# transforming the components to ensure they're in the right ranges", "\n", "parsed", "[", "'read_strengths'", "]", "=", "1", "+", "tf", ".", "nn", ".", "softplus", "(", "parsed", "[", "'read_strengths'", "]", ")", "\n", "parsed", "[", "'write_strength'", "]", "=", "1", "+", "tf", ".", "nn", ".", "softplus", "(", "parsed", "[", "'write_strength'", "]", ")", "\n", "parsed", "[", "'erase_vector'", "]", "=", "tf", ".", "nn", ".", "sigmoid", "(", "parsed", "[", "'erase_vector'", "]", ")", "\n", "parsed", "[", "'free_gates'", "]", "=", "tf", ".", "nn", ".", "sigmoid", "(", "parsed", "[", "'free_gates'", "]", ")", "\n", "parsed", "[", "'allocation_gate'", "]", "=", "tf", ".", "nn", ".", "sigmoid", "(", "parsed", "[", "'allocation_gate'", "]", ")", "\n", "parsed", "[", "'write_gate'", "]", "=", "tf", ".", "nn", ".", "sigmoid", "(", "parsed", "[", "'write_gate'", "]", ")", "\n", "parsed", "[", "'read_modes'", "]", "=", "tf", ".", "nn", ".", "softmax", "(", "parsed", "[", "'read_modes'", "]", ",", "1", ")", "\n", "\n", "return", "parsed", "# dict of tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.initials_w": [[537, 557], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal"], "methods", ["None"], ["", "def", "initials_w", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        sets the initial values of the controller transformation weights matrices\n        this method can be overwritten to use a different initialization scheme\n        \"\"\"", "\n", "# defining internal weights of the controller", "\n", "self", ".", "interface_weights", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "nn_output_size", ",", "self", ".", "interface_vector_size", "]", ",", "stddev", "=", "0.1", ")", ",", "\n", "name", "=", "'interface_weights'", "\n", ")", "# function to compute interface: i = H x iW", "\n", "\n", "self", ".", "nn_output_weights", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "nn_output_size", ",", "self", ".", "output_size", "]", ",", "stddev", "=", "0.1", ")", ",", "\n", "name", "=", "'nn_output_weights'", "\n", ")", "# function to compute output of the whole : v = H x yW", "\n", "\n", "final_win", "=", "self", ".", "word_size", "*", "self", ".", "read_heads", "\n", "self", ".", "mem_output_weights", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "final_win", ",", "self", ".", "output_size", "]", ",", "stddev", "=", "0.1", ")", ",", "\n", "name", "=", "'mem_output_weights'", "\n", ")", "# function to compute final output of the whole, combine output and read values: y = v + rs x Wr", "\n"]], "home.repos.pwc.inspect_result.SLQu_CmnRec.None.memory_uw.Memory.ini_W": [[560, 573], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer"], "methods", ["None"], ["", "def", "ini_W", "(", "self", ",", "cache_attend_dim", ",", "hidden_controller_dim", ")", ":", "\n", "        ", "self", ".", "cache_attend_dim", "=", "cache_attend_dim", "\n", "self", ".", "hidden_controller_dim", "=", "hidden_controller_dim", "\n", "\n", "self", ".", "cW_a", "=", "tf", ".", "get_variable", "(", "'cW_a'", ",", "[", "self", ".", "hidden_controller_dim", ",", "self", ".", "cache_attend_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "cU_a", "=", "tf", ".", "get_variable", "(", "'cU_a'", ",", "[", "self", ".", "hidden_controller_dim", ",", "self", ".", "cache_attend_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "cV_a", "=", "tf", ".", "get_variable", "(", "'cV_a'", ",", "[", "self", ".", "read_heads", "*", "self", ".", "word_size", ",", "self", ".", "cache_attend_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "cv_a", "=", "tf", ".", "get_variable", "(", "'cv_a'", ",", "[", "self", ".", "cache_attend_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "cache", "=", "tf", ".", "get_variable", "(", "'cache'", ",", "[", "self", ".", "cache_attend_dim", "]", ")", "\n", "", "", ""]]}