{"home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.affine": [[5, 12], ["torch.functional.grid_sample", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.functional.grid_sample", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones", "torch.ones", "x.size"], "function", ["None"], ["def", "affine", "(", "x", ",", "vgrid", ",", "device", "=", "'cuda'", ")", ":", "\n", "\t", "output", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "vgrid", ")", "\n", "mask", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "ones", "(", "x", ".", "size", "(", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "mask", "=", "nn", ".", "functional", ".", "grid_sample", "(", "mask", ",", "vgrid", ")", "\n", "mask", "[", "mask", "<", "0.9999", "]", "=", "0", "\n", "mask", "[", "mask", ">", "0", "]", "=", "1", "\n", "return", "output", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.Resize": [[13, 28], ["x.to.size", "torch.zeros", "torch.zeros", "grid.to.to", "x.to.to", "input_diversify.affine", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.affine"], ["", "def", "Resize", "(", "x", ",", "device", "=", "'cuda'", ")", ":", "\n", "\t", "'''\n\tinput:\n\t\tx: (N, 299, 299)\n\toutput:\n\t\t(N, 224, 224)\n\t'''", "\n", "scale_factor", "=", "2.0", "/", "223", "\n", "N", "=", "x", ".", "size", "(", "0", ")", "\n", "grid", "=", "torch", ".", "zeros", "(", "(", "N", ",", "224", ",", "224", ",", "2", ")", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "torch", ".", "arange", "(", "0", ",", "224", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "(", "1", ",", "1", ",", "224", ")", ")", ".", "repeat", "(", "N", ",", "224", ",", "1", ")", "*", "scale_factor", "-", "1", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "arange", "(", "0", ",", "224", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "(", "1", ",", "224", ",", "1", ")", ")", ".", "repeat", "(", "N", ",", "1", ",", "224", ")", "*", "scale_factor", "-", "1", "\n", "grid", "=", "grid", ".", "to", "(", "device", ")", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "return", "affine", "(", "x", ",", "grid", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.RandomCrop": [[29, 47], ["x.to.size", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "start[].view().float", "start[].view().float", "grid.to.to", "x.to.to", "input_diversify.affine", "start[].view", "start[].view", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.affine"], ["", "def", "RandomCrop", "(", "x", ",", "device", "=", "'cuda'", ")", ":", "\n", "\t", "'''\n\tinput:\n\t\tx: (N, 299, 299)\n\toutput:\n\t\t(N, 224, 224)\n\t'''", "\n", "scale_factor", "=", "2.0", "/", "223", "\n", "N", "=", "x", ".", "size", "(", "0", ")", "\n", "grid", "=", "torch", ".", "zeros", "(", "(", "N", ",", "224", ",", "224", ",", "2", ")", ")", "\n", "start", "=", "torch", ".", "randint", "(", "0", ",", "(", "299", "-", "224", ")", "/", "2", ",", "(", "N", ",", "2", ")", ")", "\n", "sx", "=", "start", "[", ":", ",", "0", "]", ".", "view", "(", "N", ",", "1", ",", "1", ")", ".", "float", "(", ")", "\n", "sy", "=", "start", "[", ":", ",", "1", "]", ".", "view", "(", "N", ",", "1", ",", "1", ")", ".", "float", "(", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "sx", "+", "torch", ".", "arange", "(", "0", ",", "224", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "(", "1", ",", "1", ",", "224", ")", ")", ".", "repeat", "(", "N", ",", "224", ",", "1", ")", ")", "*", "scale_factor", "-", "1", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "sy", "+", "torch", ".", "arange", "(", "0", ",", "224", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "(", "1", ",", "224", ",", "1", ")", ")", ".", "repeat", "(", "N", ",", "1", ",", "224", ")", ")", "*", "scale_factor", "-", "1", "\n", "grid", "=", "grid", ".", "to", "(", "device", ")", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "return", "affine", "(", "x", ",", "grid", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.Resize_and_padding": [[48, 60], ["torch.functional.interpolate", "torch.functional.pad", "nn.functional.pad.size", "nn.functional.pad.size"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.pad"], ["", "def", "Resize_and_padding", "(", "x", ",", "scale_factor", ")", ":", "\n", "\t", "ori_size", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "scale_factor", ")", "\n", "new_size", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "\n", "delta_w", "=", "ori_size", "[", "1", "]", "-", "new_size", "[", "1", "]", "\n", "delta_h", "=", "ori_size", "[", "0", "]", "-", "new_size", "[", "0", "]", "\n", "top", ",", "bottom", "=", "delta_h", "//", "2", ",", "delta_h", "-", "(", "delta_h", "//", "2", ")", "\n", "left", ",", "right", "=", "delta_w", "//", "2", ",", "delta_w", "-", "(", "delta_w", "//", "2", ")", "\n", "\n", "x", "=", "nn", ".", "functional", ".", "pad", "(", "x", ",", "pad", "=", "(", "left", ",", "right", ",", "top", ",", "bottom", ")", ",", "value", "=", "255", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.Rotate": [[61, 72], ["numpy.zeros", "numpy.cos().ravel", "numpy.sin().ravel", "torch.Tensor().to", "torch.Tensor().to", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "input_diversify.affine", "x.size", "numpy.cos", "numpy.sin", "torch.Tensor", "torch.Tensor", "x.size", "torch.Tensor().to.transpose"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.affine"], ["", "def", "Rotate", "(", "x", ",", "theta", ",", "device", "=", "'cuda'", ")", ":", "\n", "\t", "rotation", "=", "np", ".", "zeros", "(", "(", "2", ",", "3", ",", "x", ".", "size", "(", "0", ")", ")", ")", "\n", "cos", "=", "np", ".", "cos", "(", "theta", ")", ".", "ravel", "(", ")", "\n", "sin", "=", "np", ".", "sin", "(", "theta", ")", ".", "ravel", "(", ")", "\n", "rotation", "[", "0", ",", "0", "]", "=", "cos", "\n", "rotation", "[", "0", ",", "1", "]", "=", "sin", "\n", "rotation", "[", "1", ",", "0", "]", "=", "-", "sin", "\n", "rotation", "[", "1", ",", "1", "]", "=", "cos", "\n", "rotation", "=", "torch", ".", "Tensor", "(", "rotation", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "grid", "=", "torch", ".", "nn", ".", "functional", ".", "affine_grid", "(", "rotation", ",", "size", "=", "x", ".", "size", "(", ")", ")", "\n", "return", "affine", "(", "x", ",", "grid", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.input_diversity": [[74, 88], ["Rotate.size", "torch.Tensor", "torch.Tensor", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "input_diversify.affine", "Rotate.size", "numpy.random.normal", "input_diversify.Rotate", "numpy.tile", "numpy.random.normal", "Rotate.size", "grid.cuda.cuda", "numpy.array"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.affine", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.Rotate"], ["", "def", "input_diversity", "(", "x", ",", "std_proj", "=", "None", ",", "std_rotate", "=", "None", ",", "device", "=", "'cuda'", ")", ":", "\n", "\t", "if", "std_proj", "is", "not", "None", ":", "\n", "\t\t", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "M", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", ",", "(", "n", ",", "1", ",", "1", ")", ")", "+", "np", ".", "random", ".", "normal", "(", "scale", "=", "std_proj", ",", "size", "=", "(", "n", ",", "2", ",", "3", ")", ")", "\n", "M", "=", "torch", ".", "Tensor", "(", "M", ")", "\n", "grid", "=", "torch", ".", "nn", ".", "functional", ".", "affine_grid", "(", "M", ",", "x", ".", "size", "(", ")", ")", "\n", "if", "device", "==", "'cuda'", ":", "\n", "\t\t\t", "grid", "=", "grid", ".", "cuda", "(", ")", "\n", "", "x", "=", "affine", "(", "x", ",", "grid", ",", "device", "=", "device", ")", "\n", "", "if", "std_rotate", "is", "not", "None", ":", "\n", "\t\t", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "theta", "=", "np", ".", "random", ".", "normal", "(", "scale", "=", "std_rotate", ",", "size", "=", "(", "n", ",", "1", ")", ")", "\n", "x", "=", "Rotate", "(", "x", ",", "theta", ",", "device", "=", "device", ")", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.get_model.getmodel": [[9, 31], ["CosFace.CosFace", "SphereFace.SphereFace", "ArcFace.ArcFace"], "function", ["None"], ["def", "getmodel", "(", "face_model", ",", "**", "kwargs", ")", ":", "\n", "\t", "\"\"\"\n\t\tselect the face model according to its name\n\t\t:param face_model: string\n\t\t:param FLAGS: a tf FLAGS (should be replace later)\n\t\t:param is_use_crop: boolean, whether the network accepted cropped images or uncropped images\n\t\t:loss_type: string, the loss to generate adversarial examples\n\t\treturn:\n\t\ta model class\n\t\"\"\"", "\n", "img_shape", "=", "(", "112", ",", "112", ")", "\n", "if", "face_model", "==", "'CosFace'", ":", "\n", "\t\t", "model", "=", "CosFace", "(", "**", "kwargs", ")", "\n", "img_shape", "=", "(", "112", ",", "96", ")", "\n", "", "elif", "face_model", "==", "'SphereFace'", ":", "\n", "\t\t", "model", "=", "SphereFace", "(", "**", "kwargs", ")", "\n", "img_shape", "=", "(", "112", ",", "96", ")", "\n", "", "elif", "face_model", "==", "'ArcFace'", ":", "\n", "\t\t", "model", "=", "ArcFace", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "Exception", "\n", "", "return", "model", ",", "img_shape", "\n", "", ""]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.run.main": [[43, 183], ["get_model.getmodel", "random.seed", "range", "numpy.array", "utils.inference", "torch.autograd.Variable", "len", "tqdm.tqdm", "open", "open", "f.readlines", "scipy.misc.imread().astype", "align.align", "cv2.resize", "np.array.append", "range", "range", "numpy.array", "torch.Tensor().cuda", "input_init.permute.permute", "model.forward", "torch.autograd.Variable", "f.readlines", "pair.strip", "attacker_persons.append", "line.strip", "target_persons.append", "min", "attacker_persons[].split", "scipy.misc.imread().astype", "original_images.append", "align.align", "cv2.resize", "np.array.append", "aligned_names.append", "M.append", "torch.Tensor().cuda", "inputs.permute.permute", "torch.zeros_like", "torch.clamp", "torch.clamp", "inputs.permute.detach().clone().requires_grad_", "range", "adv_images.detach().requires_grad_.detach().permute().cpu().numpy", "range", "scipy.misc.imread", "torch.Tensor", "random.uniform", "random.uniform", "model.zero_grad", "input_diversify.input_diversity", "model.forward", "mmd.mmd_loss", "range", "torch.cat", "run.submodular", "print", "adv_images.detach().requires_grad_.detach().requires_grad_", "utils.save_priv", "scipy.misc.imread", "int", "torch.Tensor", "inputs.permute.detach().clone", "adv_images.detach().requires_grad_.clone().reshape", "inputs.permute.clone().reshape", "model.zero_grad", "torch.mean", "torch.mean", "loss.backward", "adv_images.detach().requires_grad_.grad.data.clone", "adv_images.detach().requires_grad_.grad.data.zero_", "adv_images.detach().requires_grad_.data.clone", "torch.max", "torch.min", "tmp_grads.append", "tmp_advs.append", "torch.cat.append", "adv_images.detach().requires_grad_.detach().permute().cpu", "attacker_persons[].split", "np.array.copy", "adv_images.grad.data.clone.abs().mean", "loss.data.unsqueeze", "adv_images.detach().requires_grad_.detach", "int", "inputs.permute.detach", "adv_images.detach().requires_grad_.clone", "inputs.permute.clone", "torch.zeros_like.clone", "numpy.sqrt", "tmp_sum_grad.reshape", "tmp_sum_grad.reshape.norm", "adv_images.detach().requires_grad_.detach().permute", "adv_images.grad.data.clone.abs", "torch.sign", "numpy.prod", "tmp_sum_grad.size", "adv_images.detach().requires_grad_.detach", "torch.reshape", "tmp_sum_grad.size"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.get_model.getmodel", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.inference", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.align.align", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.forward", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.align.align", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.FaceModel.FaceModel.zero_grad", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.input_diversify.input_diversity", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.forward", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.mmd.mmd_loss", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.run.submodular", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.save_priv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.FaceModel.FaceModel.zero_grad"], ["def", "main", "(", ")", ":", "\n", "    ", "model", ",", "img_shape", "=", "getmodel", "(", "args", ".", "src_model", ")", "\n", "iters", "=", "args", ".", "num_iter", "\n", "\n", "cnt_pairs", "=", "0", "\n", "candidate_e", "=", "[", "12", "]", "\n", "func", "=", "{", "\n", "'gain1'", ":", "Gain1", ",", "\n", "'gain2'", ":", "Gain2", ",", "\n", "'gain3'", ":", "Gain3", "\n", "}", "\n", "\n", "# conduct attacker", "\n", "attacker_persons", "=", "[", "]", "\n", "with", "open", "(", "args", ".", "input_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "pair", "in", "f", ".", "readlines", "(", ")", "[", ":", "500", "]", ":", "\n", "            ", "attacker_person", "=", "pair", ".", "strip", "(", ")", "\n", "attacker_persons", ".", "append", "(", "attacker_person", ")", "\n", "\n", "", "", "random", ".", "seed", "(", "seed", ")", "\n", "cnt", "=", "0", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "# conduct targets, only 10 identities!", "\n", "target_nums", "=", "args", ".", "target_nums", "\n", "aligned_target_imgs", "=", "[", "]", "\n", "target_persons", "=", "[", "]", "\n", "with", "open", "(", "'targets/target_attacks.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "target_person", "=", "line", ".", "strip", "(", ")", "\n", "target_persons", ".", "append", "(", "target_person", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "target_nums", ")", ":", "\n", "        ", "target_img", "=", "imread", "(", "target_persons", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "align_target_img", ",", "_", "=", "align", "(", "target_img", ")", "\n", "align_target_img", "=", "cv2", ".", "resize", "(", "align_target_img", ",", "(", "img_shape", "[", "1", "]", ",", "img_shape", "[", "0", "]", ")", ")", "\n", "aligned_target_imgs", ".", "append", "(", "align_target_img", ")", "\n", "", "aligned_target_imgs", "=", "np", ".", "array", "(", "aligned_target_imgs", ")", "\n", "\n", "# extract features of targets", "\n", "target_feas", "=", "inference", "(", "aligned_target_imgs", ",", "model", ",", "image_shape", "=", "img_shape", ")", "\n", "target_feas", "=", "Variable", "(", "target_feas", ")", "\n", "\n", "# extract initial features of attackers", "\n", "n", "=", "len", "(", "attacker_persons", ")", "\n", "m", "=", "1.0", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "n", ",", "batch_size", ")", ")", ":", "\n", "        ", "l", ",", "r", "=", "i", ",", "min", "(", "i", "+", "batch_size", ",", "n", ")", "\n", "original_images", "=", "[", "]", "\n", "aligned_images", "=", "[", "]", "\n", "aligned_names", "=", "[", "]", "\n", "M", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "l", ",", "r", ")", ":", "\n", "            ", "attack_name", ",", "id1", ",", "id2", "=", "attacker_persons", "[", "j", "]", ".", "split", "(", "'\\t'", ")", "\n", "original_img", "=", "imread", "(", "\"data/lfw/{}/{}_{:04d}.jpg\"", ".", "format", "(", "attack_name", ",", "attack_name", ",", "int", "(", "id2", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "original_images", ".", "append", "(", "original_img", ")", "\n", "align_img", ",", "tmpM", "=", "align", "(", "original_img", ")", "\n", "align_img", "=", "cv2", ".", "resize", "(", "align_img", ",", "(", "img_shape", "[", "1", "]", ",", "img_shape", "[", "0", "]", ")", ")", "\n", "aligned_images", ".", "append", "(", "align_img", ")", "\n", "aligned_names", ".", "append", "(", "\"{}_{:04d}\"", ".", "format", "(", "attack_name", ",", "int", "(", "id2", ")", ")", ")", "\n", "M", ".", "append", "(", "tmpM", ")", "\n", "", "aligned_images", "=", "np", ".", "array", "(", "aligned_images", ")", "\n", "input_init", "=", "torch", ".", "Tensor", "(", "aligned_images", ")", ".", "cuda", "(", ")", "\n", "input_init", "=", "input_init", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "init_feas", "=", "model", ".", "forward", "(", "input_init", ")", "\n", "init_feas", "=", "Variable", "(", "init_feas", ")", "\n", "\n", "# craft protected images ", "\n", "for", "epsilon", "in", "candidate_e", ":", "\n", "            ", "alpha", "=", "1.5", "*", "epsilon", "/", "iters", "\n", "inputs", "=", "torch", ".", "Tensor", "(", "aligned_images", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "inputs", "=", "inputs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "sum_grad", "=", "torch", ".", "zeros_like", "(", "inputs", ")", "\n", "min_img", "=", "torch", ".", "clamp", "(", "inputs", "-", "epsilon", ",", "min", "=", "0", ")", "\n", "max_img", "=", "torch", ".", "clamp", "(", "inputs", "+", "epsilon", ",", "max", "=", "255", ")", "\n", "adv_images", "=", "inputs", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "for", "iii", "in", "range", "(", "iters", ")", ":", "\n", "                ", "std_proj", "=", "random", ".", "uniform", "(", "0.01", ",", "0.1", ")", "\n", "std_rotate", "=", "random", ".", "uniform", "(", "0.01", ",", "0.1", ")", "\n", "tmp_advs", "=", "[", "]", "\n", "tmp_grads", "=", "[", "]", "\n", "tmp_losses", "=", "[", "]", "\n", "model", ".", "zero_grad", "(", ")", "\n", "# introduce input diversity for generalizaion", "\n", "images", "=", "input_diversity", "(", "adv_images", ",", "std_proj", ",", "std_rotate", ")", "\n", "adv_feas", "=", "model", ".", "forward", "(", "images", ")", "\n", "\n", "# compute image-level natural loss by MMD. ", "\n", "loss_mmd", "=", "mmd_loss", "(", "adv_images", ".", "clone", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", ",", "\n", "inputs", ".", "clone", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "\n", "# search optimal target ", "\n", "for", "idx", "in", "range", "(", "target_nums", ")", ":", "\n", "                    ", "model", ".", "zero_grad", "(", ")", "\n", "loss_i", "=", "torch", ".", "mean", "(", "(", "adv_feas", "-", "init_feas", ")", "**", "2", ")", "\n", "loss_t", "=", "torch", ".", "mean", "(", "(", "adv_feas", "-", "target_feas", "[", "idx", "]", ")", "**", "2", ")", "\n", "\n", "# total loss ", "\n", "'''\n                    loss_mmd does not affect search direction of targets set, just for updating images.\n                    '''", "\n", "loss", "=", "loss_t", "-", "loss_i", "+", "args", ".", "gamma", "*", "loss_mmd", "\n", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "grad", "=", "adv_images", ".", "grad", ".", "data", ".", "clone", "(", ")", "\n", "grad", "=", "grad", "/", "grad", ".", "abs", "(", ")", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "\n", "tmp_sum_grad", "=", "m", "*", "sum_grad", ".", "clone", "(", ")", "+", "grad", "\n", "adv_images", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "tmp_adv_images", "=", "adv_images", ".", "data", ".", "clone", "(", ")", "\n", "# infty norm", "\n", "if", "args", ".", "norm", "==", "'linf'", ":", "\n", "                        ", "tmp_adv_images", "=", "tmp_adv_images", "-", "torch", ".", "sign", "(", "tmp_sum_grad", ")", "*", "alpha", "\n", "", "elif", "args", ".", "norm", "==", "'l2'", ":", "\n", "                        ", "factor", "=", "np", ".", "sqrt", "(", "np", ".", "prod", "(", "img_shape", ")", "*", "3", ")", "\n", "grad2d", "=", "tmp_sum_grad", ".", "reshape", "(", "(", "tmp_sum_grad", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "gradnorm", "=", "grad2d", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "grad_unit", "=", "grad2d", "/", "gradnorm", "\n", "delta", "=", "-", "torch", ".", "reshape", "(", "grad_unit", ",", "tmp_sum_grad", ".", "size", "(", ")", ")", "*", "alpha", "*", "factor", "\n", "tmp_adv_images", "=", "tmp_adv_images", "+", "delta", "\n", "\n", "", "tmp_adv_images", "=", "torch", ".", "max", "(", "tmp_adv_images", ",", "min_img", ")", "\n", "tmp_adv_images", "=", "torch", ".", "min", "(", "tmp_adv_images", ",", "max_img", ")", "\n", "tmp_grads", ".", "append", "(", "tmp_sum_grad", ")", "\n", "tmp_advs", ".", "append", "(", "tmp_adv_images", ")", "\n", "tmp_losses", ".", "append", "(", "loss", ".", "data", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "tmp_losses", "=", "torch", ".", "cat", "(", "tmp_losses", ")", "\n", "# find best index", "\n", "best_idx", "=", "submodular", "(", "target_feas", ",", "init_feas", ",", "tmp_advs", ",", "model", ",", "func", "[", "args", ".", "gain", "]", ")", "\n", "sum_grad", "=", "tmp_grads", "[", "best_idx", "]", "\n", "\n", "adv_images", "=", "tmp_advs", "[", "best_idx", "]", "\n", "print", "(", "tmp_losses", "[", "best_idx", "]", ",", "best_idx", ")", "\n", "adv_images", "=", "adv_images", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "", "adv_images", "=", "adv_images", ".", "detach", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "attacker_name", "=", "attacker_persons", "[", "l", "+", "j", "]", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "\n", "_", "=", "save_priv", "(", "adv_images", "[", "j", "]", ",", "aligned_images", "[", "j", "]", ",", "original_images", "[", "j", "]", ",", "attacker_name", ",", "M", "[", "j", "]", ",", "epsilon", ",", "args", ".", "src_model", ",", "args", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.run.submodular": [[184, 193], ["torch.cat", "torch.zeros", "model.forward", "range", "torch.argmax", "len", "Gain", "tmpadv_feas[].unsqueeze", "len"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.forward"], ["", "", "", "", "def", "submodular", "(", "target_feas", ",", "init_feas", ",", "tmp_advs", ",", "model", ",", "Gain", ")", ":", "\n", "    ", "tmp_advs", "=", "torch", ".", "cat", "(", "tmp_advs", ")", "\n", "\n", "gains", "=", "torch", ".", "zeros", "(", "size", "=", "(", "len", "(", "target_feas", ")", ",", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "tmpadv_feas", "=", "model", ".", "forward", "(", "tmp_advs", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "tmpadv_feas", ")", ")", ":", "\n", "        ", "gains", "[", "idx", "]", "=", "Gain", "(", "tmpadv_feas", "[", "idx", "]", ".", "unsqueeze", "(", "0", ")", ",", "init_feas", ",", "target_feas", ",", "idx", ")", "\n", "", "best_idx", "=", "torch", ".", "argmax", "(", "gains", ")", "\n", "return", "best_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.run.L2distance": [[194, 196], ["torch.sqrt", "torch.sum"], "function", ["None"], ["", "def", "L2distance", "(", "x", ",", "y", ")", ":", "\n", "\t", "return", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "x", "-", "y", ")", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.run.Gain1": [[197, 201], ["run.L2distance", "torch.sum", "torch.log", "torch.exp", "run.L2distance"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.L2distance", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.L2distance"], ["", "def", "Gain1", "(", "adv_fea", ",", "init_feas", ",", "target_feas", ",", "idx", "=", "0", ")", ":", "\n", "    ", "d1", "=", "L2distance", "(", "adv_fea", ",", "init_feas", ")", "\n", "d2", "=", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "d1", "-", "L2distance", "(", "adv_fea", ",", "target_feas", ")", ")", ")", "\n", "return", "torch", ".", "log", "(", "1.0", "+", "d2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.run.Gain2": [[202, 206], ["run.L2distance", "torch.min", "torch.log", "torch.exp", "run.L2distance"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.L2distance", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.L2distance"], ["", "def", "Gain2", "(", "adv_fea", ",", "init_feas", ",", "target_feas", ",", "idx", "=", "0", ")", ":", "\n", "    ", "d1", "=", "L2distance", "(", "adv_fea", ",", "init_feas", ")", "\n", "d2", "=", "torch", ".", "min", "(", "torch", ".", "exp", "(", "d1", "-", "L2distance", "(", "adv_fea", ",", "target_feas", ")", ")", ")", "\n", "return", "torch", ".", "log", "(", "1.0", "+", "d2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.run.Gain3": [[207, 211], ["run.L2distance", "torch.max", "torch.log", "torch.exp", "run.L2distance"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.L2distance", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.L2distance"], ["", "def", "Gain3", "(", "adv_fea", ",", "init_feas", ",", "target_feas", ",", "idx", "=", "0", ")", ":", "\n", "    ", "d1", "=", "L2distance", "(", "adv_fea", ",", "init_feas", ")", "\n", "d2", "=", "torch", ".", "max", "(", "torch", ".", "exp", "(", "d1", "-", "L2distance", "(", "adv_fea", ",", "target_feas", ")", ")", ")", "\n", "return", "torch", ".", "log", "(", "1.0", "+", "d2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.mmd.gaussian_kernel_matrix": [[6, 15], ["sigmas.view.view", "pairwise_distance().contiguous", "pairwise_distance().contiguous.view", "torch.matmul", "torch.sum().view_as", "mmd.pairwise_distance", "torch.sum", "torch.exp"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.mmd.pairwise_distance"], ["def", "gaussian_kernel_matrix", "(", "x", ",", "y", ",", "sigmas", ")", ":", "\n", "\n", "    ", "sigmas", "=", "sigmas", ".", "view", "(", "sigmas", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "beta", "=", "1.", "/", "(", "2.", "*", "sigmas", ")", "\n", "dist", "=", "pairwise_distance", "(", "x", ",", "y", ")", ".", "contiguous", "(", ")", "\n", "dist_", "=", "dist", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "s", "=", "torch", ".", "matmul", "(", "beta", ",", "dist_", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "-", "s", ")", ",", "0", ")", ".", "view_as", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.mmd.pairwise_distance": [[16, 30], ["x.view.view", "torch.transpose", "torch.sum", "torch.transpose", "ValueError", "ValueError", "len", "len"], "function", ["None"], ["", "def", "pairwise_distance", "(", "x", ",", "y", ")", ":", "\n", "\n", "    ", "if", "not", "len", "(", "x", ".", "shape", ")", "==", "len", "(", "y", ".", "shape", ")", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'Both inputs should be matrices.'", ")", "\n", "\n", "", "if", "x", ".", "shape", "[", "1", "]", "!=", "y", ".", "shape", "[", "1", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'The number of features should be the same.'", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "y", "=", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", "\n", "output", "=", "torch", ".", "sum", "(", "(", "x", "-", "y", ")", "**", "2", ",", "1", ")", "\n", "output", "=", "torch", ".", "transpose", "(", "output", ",", "0", ",", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.mmd.maximum_mean_discrepancy": [[31, 38], ["torch.mean", "torch.mean", "kernel", "kernel", "torch.mean", "kernel"], "function", ["None"], ["", "def", "maximum_mean_discrepancy", "(", "x", ",", "y", ",", "kernel", "=", "gaussian_kernel_matrix", ")", ":", "\n", "\n", "    ", "cost", "=", "torch", ".", "mean", "(", "kernel", "(", "x", ",", "x", ")", ")", "\n", "cost", "+=", "torch", ".", "mean", "(", "kernel", "(", "y", ",", "y", ")", ")", "\n", "cost", "-=", "2", "*", "torch", ".", "mean", "(", "kernel", "(", "x", ",", "y", ")", ")", "\n", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.mmd.mmd_loss": [[39, 57], ["mmd.maximum_mean_discrepancy", "functools.partial", "functools.partial", "source_features.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.mmd.maximum_mean_discrepancy"], ["", "def", "mmd_loss", "(", "source_features", ",", "target_features", ",", "use_gpu", "=", "True", ")", ":", "\n", "\n", "    ", "sigmas", "=", "[", "\n", "1e-6", ",", "1e-5", ",", "1e-4", ",", "1e-3", ",", "1e-2", ",", "1e-1", ",", "1", ",", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "35", ",", "100", ",", "\n", "1e3", ",", "1e4", ",", "1e5", ",", "1e6", "\n", "]", "\n", "if", "use_gpu", ":", "\n", "        ", "gaussian_kernel", "=", "partial", "(", "\n", "gaussian_kernel_matrix", ",", "sigmas", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "sigmas", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "gaussian_kernel", "=", "partial", "(", "\n", "gaussian_kernel_matrix", ",", "sigmas", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "sigmas", ")", ")", "\n", ")", "\n", "", "loss_value", "=", "maximum_mean_discrepancy", "(", "source_features", ",", "target_features", ",", "kernel", "=", "gaussian_kernel", ")", "\n", "loss_value", "=", "loss_value", "/", "source_features", ".", "size", "(", "0", ")", "\n", "\n", "return", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.makedirs": [[14, 17], ["os.path.exists", "os.makdirs"], "function", ["None"], ["def", "makedirs", "(", "path", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "\t\t", "os", ".", "makdirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.save_priv": [[18, 41], ["os.path.join", "os.path.exists", "os.makedirs", "tensorflow.gfile.Open", "scipy.misc.imresize", "scipy.misc.imresize", "align.re_align", "numpy.clip", "numpy.clip().astype", "scipy.misc.imsave", "str", "os.path.join", "np.clip().astype.astype", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.makedirs", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.align.re_align"], ["", "", "def", "save_priv", "(", "image", ",", "align_image", ",", "original_image", ",", "src", ",", "M", ",", "epsilon", ",", "model_name", ",", "output_dir", ")", ":", "\n", "\t", "\"\"\"Saves images to the output directory.\n\n\tArgs:\n\t\t\timages: array with minibatch of images, normalized\n\t\t\talign_image: unnormalized\n\t\t\toriginal_iamge: unnormalized\n\t\t\tfilenames: list of filenames without path\n\t\t\t\t\tIf number of file names in this list less than number of images in\n\t\t\t\t\tthe minibatch then only first len(filenames) images will be saved.\n\t\t\toutput_dir: directory where to save images\n\t\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "path", "=", "src", "+", "'-'", "+", "str", "(", "epsilon", ")", "+", "'.png'", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "path", ")", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "image", "=", "imresize", "(", "image", ",", "(", "112", ",", "112", ")", ")", "\n", "align_image", "=", "imresize", "(", "align_image", ",", "(", "112", ",", "112", ")", ")", "\n", "image", "=", "re_align", "(", "image", ",", "align_image", ",", "original_image", ",", "M", ")", "\n", "image", "=", "np", ".", "clip", "(", "image", ",", "original_image", "-", "epsilon", ",", "original_image", "+", "epsilon", ")", "\n", "image", "=", "np", ".", "clip", "(", "image", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imsave", "(", "f", ",", "image", ".", "astype", "(", "np", ".", "uint8", ")", ",", "format", "=", "'png'", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "output_dir", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.cosdistance": [[42, 46], ["torch.sum", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "cosdistance", "(", "x", ",", "y", ",", "offset", "=", "1e-5", ")", ":", "\n", "\t", "x", "=", "x", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "x", "**", "2", ")", ")", "+", "offset", "\n", "y", "=", "y", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "y", "**", "2", ")", ")", "+", "offset", "\n", "return", "torch", ".", "sum", "(", "x", "*", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.L2distance": [[47, 49], ["torch.sqrt", "torch.sum"], "function", ["None"], ["", "def", "L2distance", "(", "x", ",", "y", ")", ":", "\n", "\t", "return", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "x", "-", "y", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.inference": [[50, 76], ["torch.Tensor().cuda", "np.zeros.permute", "model.forward", "numpy.zeros", "range", "numpy.zeros", "range", "align.align", "scipy.misc.imresize", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.forward", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.align.align"], ["", "def", "inference", "(", "x", ",", "model", ",", "use_prelogits", "=", "False", ",", "image_shape", "=", "(", "112", ",", "112", ")", ")", ":", "\n", "\t", "\"\"\"\n\t\tget the embedding of face images\n\t\t:param x: ndarray(size = [None, None, None, 3]), unnormalized\n\t\t:param model: our model class\n\t\t:param image_shape: (int, int), the shape that a cropped image should be (related to networks, not images)\n\t\treturn: torch.Tensor(size = [None, None])\n\t\"\"\"", "\n", "assert", "x", ".", "ndim", "==", "3", "or", "x", ".", "ndim", "==", "4", "\n", "if", "x", ".", "ndim", "==", "3", ":", "\n", "\t\t", "x", "=", "x", "[", "None", ",", ":", "]", "\n", "", "batchsize", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "x", ".", "shape", "[", "1", ":", "3", "]", "!=", "(", "112", ",", "112", ")", "and", "x", ".", "shape", "[", "1", ":", "3", "]", "!=", "image_shape", ":", "\n", "\t\t", "align_x", "=", "np", ".", "zeros", "(", "(", "batchsize", ",", "112", ",", "112", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "batchsize", ")", ":", "\n", "\t\t\t", "align_x", "[", "i", "]", ",", "_", "=", "align", "(", "x", "[", "i", "]", ")", "\n", "", "x", "=", "align_x", "\n", "", "if", "x", ".", "shape", "[", "1", ":", "3", "]", "!=", "image_shape", ":", "\n", "\t\t", "normal_x", "=", "x", "\n", "x", "=", "np", ".", "zeros", "(", "(", "batchsize", ",", "image_shape", "[", "0", "]", ",", "image_shape", "[", "1", "]", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "batchsize", ")", ":", "\n", "\t\t\t", "x", "[", "i", "]", "=", "imresize", "(", "normal_x", "[", "i", "]", ",", "(", "image_shape", "[", "0", "]", ",", "image_shape", "[", "1", "]", ")", ")", "\n", "", "", "x", "=", "torch", ".", "Tensor", "(", "x", ")", ".", "cuda", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "model", ".", "forward", "(", "x", ",", "use_prelogits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.compare": [[78, 90], ["scipy.misc.imread().astype", "scipy.misc.imread().astype", "utils.inference", "utils.inference", "utils.cosdistance", "utils.inference", "utils.inference", "print", "utils.L2distance", "scipy.misc.imread", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.inference", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.inference", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.cosdistance", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.inference", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.inference", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.L2distance"], ["", "def", "compare", "(", "model", ",", "img1_path", ",", "img2_path", ",", "image_shape", ")", ":", "\n", "\t", "img1", "=", "imread", "(", "img1_path", ",", "mode", "=", "'RGB'", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img2", "=", "imread", "(", "img2_path", ",", "mode", "=", "'RGB'", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "feat1", "=", "inference", "(", "img1", "[", "np", ".", "newaxis", "]", ",", "model", ",", "use_prelogits", "=", "False", ",", "image_shape", "=", "image_shape", ")", "\n", "feat2", "=", "inference", "(", "img2", "[", "np", ".", "newaxis", "]", ",", "model", ",", "use_prelogits", "=", "False", ",", "image_shape", "=", "image_shape", ")", "\n", "cos_similarity", "=", "cosdistance", "(", "feat1", ",", "feat2", ")", "\n", "\n", "feat1", "=", "inference", "(", "img1", "[", "np", ".", "newaxis", "]", ",", "model", ",", "use_prelogits", "=", "True", ",", "image_shape", "=", "image_shape", ")", "\n", "feat2", "=", "inference", "(", "img2", "[", "np", ".", "newaxis", "]", ",", "model", ",", "use_prelogits", "=", "True", ",", "image_shape", "=", "image_shape", ")", "\n", "L2_similarity", "=", "-", "L2distance", "(", "feat1", ",", "feat2", ")", "\n", "print", "(", "feat2", "[", "0", ",", ":", "10", "]", ")", "\n", "return", "cos_similarity", ",", "L2_similarity", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.SphereFace.AngleLinear.__init__": [[16, 31], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "SphereFace.AngleLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "SphereFace.AngleLinear.weight.data.uniform_().renorm_", "SphereFace.AngleLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "m", "=", "4", ",", "phiflag", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "AngleLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "self", ".", "phiflag", "=", "phiflag", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "mlambda", "=", "[", "\n", "lambda", "x", ":", "x", "**", "0", ",", "\n", "lambda", "x", ":", "x", "**", "1", ",", "\n", "lambda", "x", ":", "2", "*", "x", "**", "2", "-", "1", ",", "\n", "lambda", "x", ":", "4", "*", "x", "**", "3", "-", "3", "*", "x", ",", "\n", "lambda", "x", ":", "8", "*", "x", "**", "4", "-", "8", "*", "x", "**", "2", "+", "1", ",", "\n", "lambda", "x", ":", "16", "*", "x", "**", "5", "-", "20", "*", "x", "**", "3", "+", "5", "*", "x", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.SphereFace.AngleLinear.forward": [[33, 60], ["w.renorm().mul", "x.pow().sum().pow", "w.renorm().mul.pow().sum().pow", "x.mm", "cos_theta.clamp.clamp.clamp", "w.renorm().mul.pow().sum().pow.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "cos_theta.clamp.clamp.acos", "SphereFace.myphi", "phi_theta.clamp.clamp.clamp", "x.pow().sum().pow.view", "x.pow().sum().pow.view", "w.renorm", "x.pow().sum", "w.renorm().mul.pow().sum", "x.pow().sum().pow.view", "cos_theta.clamp.clamp.data.acos", "x.pow", "w.renorm().mul.pow"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.SphereFace.myphi"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "x", "=", "input", "# size=(B,F)\tF is feature len", "\n", "w", "=", "self", ".", "weight", "# size=(F,Classnum) F=in_features Classnum=out_features", "\n", "\n", "ww", "=", "w", ".", "renorm", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul", "(", "1e5", ")", "\n", "xlen", "=", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", ".", "pow", "(", "0.5", ")", "# size=B", "\n", "wlen", "=", "ww", ".", "pow", "(", "2", ")", ".", "sum", "(", "0", ")", ".", "pow", "(", "0.5", ")", "# size=Classnum", "\n", "\n", "cos_theta", "=", "x", ".", "mm", "(", "ww", ")", "# size=(B,Classnum)", "\n", "cos_theta", "=", "cos_theta", "/", "xlen", ".", "view", "(", "-", "1", ",", "1", ")", "/", "wlen", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "cos_theta", "=", "cos_theta", ".", "clamp", "(", "-", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "phiflag", ":", "\n", "\t\t\t", "cos_m_theta", "=", "self", ".", "mlambda", "[", "self", ".", "m", "]", "(", "cos_theta", ")", "\n", "theta", "=", "Variable", "(", "cos_theta", ".", "data", ".", "acos", "(", ")", ")", "\n", "k", "=", "(", "self", ".", "m", "*", "theta", "/", "3.14159265", ")", ".", "floor", "(", ")", "\n", "n_one", "=", "k", "*", "0.0", "-", "1", "\n", "phi_theta", "=", "(", "n_one", "**", "k", ")", "*", "cos_m_theta", "-", "2", "*", "k", "\n", "", "else", ":", "\n", "\t\t\t", "theta", "=", "cos_theta", ".", "acos", "(", ")", "\n", "phi_theta", "=", "myphi", "(", "theta", ",", "self", ".", "m", ")", "\n", "phi_theta", "=", "phi_theta", ".", "clamp", "(", "-", "1", "*", "self", ".", "m", ",", "1", ")", "\n", "\n", "", "cos_theta", "=", "cos_theta", "*", "xlen", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "phi_theta", "=", "phi_theta", "*", "xlen", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "output", "=", "(", "cos_theta", ",", "phi_theta", ")", "\n", "return", "output", "# size=(B,Classnum,2)", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.SphereFace.AngleLoss.__init__": [[63, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["\t", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ")", ":", "\n", "\t\t", "super", "(", "AngleLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "it", "=", "0", "\n", "self", ".", "LambdaMin", "=", "5.0", "\n", "self", ".", "LambdaMax", "=", "1500.0", "\n", "self", ".", "lamb", "=", "1500.0", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.SphereFace.AngleLoss.forward": [[71, 95], ["target.view.view.view", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.byte", "torch.autograd.Variable.byte", "torch.autograd.Variable.byte", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "max", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "loss.mean.mean.mean", "target.view.view.data.view", "logpt.view.view.data.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "\t\t", "self", ".", "it", "+=", "1", "\n", "cos_theta", ",", "phi_theta", "=", "input", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "#size=(B,1)", "\n", "\n", "index", "=", "cos_theta", ".", "data", "*", "0.0", "#size=(B,Classnum)", "\n", "index", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "index", "=", "index", ".", "byte", "(", ")", "\n", "index", "=", "Variable", "(", "index", ")", "\n", "\n", "self", ".", "lamb", "=", "max", "(", "self", ".", "LambdaMin", ",", "self", ".", "LambdaMax", "/", "(", "1", "+", "0.1", "*", "self", ".", "it", ")", ")", "\n", "output", "=", "cos_theta", "*", "1.0", "#size=(B,Classnum)", "\n", "output", "[", "index", "]", "-=", "cos_theta", "[", "index", "]", "*", "(", "1.0", "+", "0", ")", "/", "(", "1", "+", "self", ".", "lamb", ")", "\n", "output", "[", "index", "]", "+=", "phi_theta", "[", "index", "]", "*", "(", "1.0", "+", "0", ")", "/", "(", "1", "+", "self", ".", "lamb", ")", "\n", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "output", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "Variable", "(", "logpt", ".", "data", ".", "exp", "(", ")", ")", "\n", "\n", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.SphereFace.sphere20a.__init__": [[98, 154], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.Linear", "SphereFace.AngleLinear"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["\t", "def", "__init__", "(", "self", ",", "classnum", "=", "10574", ",", "feature", "=", "False", ")", ":", "\n", "\t\t", "super", "(", "sphere20a", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classnum", "=", "classnum", "\n", "self", ".", "feature", "=", "feature", "\n", "#input = B*3*112*96", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "2", ",", "1", ")", "#=>B*64*56*48", "\n", "self", ".", "relu1_1", "=", "nn", ".", "PReLU", "(", "64", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu1_2", "=", "nn", ".", "PReLU", "(", "64", ")", "\n", "self", ".", "conv1_3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu1_3", "=", "nn", ".", "PReLU", "(", "64", ")", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "1", ")", "#=>B*128*28*24", "\n", "self", ".", "relu2_1", "=", "nn", ".", "PReLU", "(", "128", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu2_2", "=", "nn", ".", "PReLU", "(", "128", ")", "\n", "self", ".", "conv2_3", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu2_3", "=", "nn", ".", "PReLU", "(", "128", ")", "\n", "\n", "self", ".", "conv2_4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", "#=>B*128*28*24", "\n", "self", ".", "relu2_4", "=", "nn", ".", "PReLU", "(", "128", ")", "\n", "self", ".", "conv2_5", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu2_5", "=", "nn", ".", "PReLU", "(", "128", ")", "\n", "\n", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "2", ",", "1", ")", "#=>B*256*14*12", "\n", "self", ".", "relu3_1", "=", "nn", ".", "PReLU", "(", "256", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu3_2", "=", "nn", ".", "PReLU", "(", "256", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu3_3", "=", "nn", ".", "PReLU", "(", "256", ")", "\n", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "#=>B*256*14*12", "\n", "self", ".", "relu3_4", "=", "nn", ".", "PReLU", "(", "256", ")", "\n", "self", ".", "conv3_5", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu3_5", "=", "nn", ".", "PReLU", "(", "256", ")", "\n", "\n", "self", ".", "conv3_6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "#=>B*256*14*12", "\n", "self", ".", "relu3_6", "=", "nn", ".", "PReLU", "(", "256", ")", "\n", "self", ".", "conv3_7", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu3_7", "=", "nn", ".", "PReLU", "(", "256", ")", "\n", "\n", "self", ".", "conv3_8", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "#=>B*256*14*12", "\n", "self", ".", "relu3_8", "=", "nn", ".", "PReLU", "(", "256", ")", "\n", "self", ".", "conv3_9", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu3_9", "=", "nn", ".", "PReLU", "(", "256", ")", "\n", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "2", ",", "1", ")", "#=>B*512*7*6", "\n", "self", ".", "relu4_1", "=", "nn", ".", "PReLU", "(", "512", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu4_2", "=", "nn", ".", "PReLU", "(", "512", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "relu4_3", "=", "nn", ".", "PReLU", "(", "512", ")", "\n", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "512", "*", "7", "*", "6", ",", "512", ")", "\n", "self", ".", "fc6", "=", "AngleLinear", "(", "512", ",", "self", ".", "classnum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.SphereFace.sphere20a.forward": [[156, 180], ["SphereFace.sphere20a.relu1_1", "SphereFace.sphere20a.relu2_1", "SphereFace.sphere20a.relu3_1", "SphereFace.sphere20a.relu4_1", "SphereFace.sphere20a.view", "SphereFace.sphere20a.fc5", "SphereFace.sphere20a.fc6", "SphereFace.sphere20a.conv1_1", "SphereFace.sphere20a.relu1_3", "SphereFace.sphere20a.conv2_1", "SphereFace.sphere20a.relu2_3", "SphereFace.sphere20a.relu2_5", "SphereFace.sphere20a.conv3_1", "SphereFace.sphere20a.relu3_3", "SphereFace.sphere20a.relu3_5", "SphereFace.sphere20a.relu3_7", "SphereFace.sphere20a.relu3_9", "SphereFace.sphere20a.conv4_1", "SphereFace.sphere20a.relu4_3", "SphereFace.sphere20a.size", "SphereFace.sphere20a.conv1_3", "SphereFace.sphere20a.conv2_3", "SphereFace.sphere20a.conv2_5", "SphereFace.sphere20a.conv3_3", "SphereFace.sphere20a.conv3_5", "SphereFace.sphere20a.conv3_7", "SphereFace.sphere20a.conv3_9", "SphereFace.sphere20a.conv4_3", "SphereFace.sphere20a.relu1_2", "SphereFace.sphere20a.relu2_2", "SphereFace.sphere20a.relu2_4", "SphereFace.sphere20a.relu3_2", "SphereFace.sphere20a.relu3_4", "SphereFace.sphere20a.relu3_6", "SphereFace.sphere20a.relu3_8", "SphereFace.sphere20a.relu4_2", "SphereFace.sphere20a.conv1_2", "SphereFace.sphere20a.conv2_2", "SphereFace.sphere20a.conv2_4", "SphereFace.sphere20a.conv3_2", "SphereFace.sphere20a.conv3_4", "SphereFace.sphere20a.conv3_6", "SphereFace.sphere20a.conv3_8", "SphereFace.sphere20a.conv4_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "(", "x", "-", "127.5", ")", "/", "128", "\n", "x", "=", "self", ".", "relu1_1", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "relu1_3", "(", "self", ".", "conv1_3", "(", "self", ".", "relu1_2", "(", "self", ".", "conv1_2", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "self", ".", "relu2_1", "(", "self", ".", "conv2_1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "relu2_3", "(", "self", ".", "conv2_3", "(", "self", ".", "relu2_2", "(", "self", ".", "conv2_2", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "relu2_5", "(", "self", ".", "conv2_5", "(", "self", ".", "relu2_4", "(", "self", ".", "conv2_4", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "self", ".", "relu3_1", "(", "self", ".", "conv3_1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "relu3_3", "(", "self", ".", "conv3_3", "(", "self", ".", "relu3_2", "(", "self", ".", "conv3_2", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "relu3_5", "(", "self", ".", "conv3_5", "(", "self", ".", "relu3_4", "(", "self", ".", "conv3_4", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "relu3_7", "(", "self", ".", "conv3_7", "(", "self", ".", "relu3_6", "(", "self", ".", "conv3_6", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "relu3_9", "(", "self", ".", "conv3_9", "(", "self", ".", "relu3_8", "(", "self", ".", "conv3_8", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "self", ".", "relu4_1", "(", "self", ".", "conv4_1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "relu4_3", "(", "self", ".", "conv4_3", "(", "self", ".", "relu4_2", "(", "self", ".", "conv4_2", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc5", "(", "x", ")", "\n", "if", "self", ".", "feature", ":", "return", "x", "\n", "\n", "x", "=", "self", ".", "fc6", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.SphereFace.SphereFace.__init__": [[182, 192], ["SphereFace.sphere20a", "FaceModel.FaceModel.FaceModel.__init__"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["\t", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "net", "=", "sphere20a", "(", "feature", "=", "True", ")", "\n", "url", "=", "'http://ml.cs.tsinghua.edu.cn/~xiaoyang/face_models/SphereFace/sphere20a_20171020.pth'", "\n", "channel", "=", "'bgr'", "\n", "FaceModel", ".", "__init__", "(", "\n", "self", ",", "\n", "net", "=", "net", ",", "\n", "url", "=", "url", ",", "\n", "channel", "=", "channel", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.SphereFace.myphi": [[10, 14], ["math.factorial", "math.factorial", "math.factorial", "math.factorial", "math.factorial"], "function", ["None"], ["def", "myphi", "(", "x", ",", "m", ")", ":", "\n", "\t", "x", "=", "x", "*", "m", "\n", "return", "1", "-", "x", "**", "2", "/", "math", ".", "factorial", "(", "2", ")", "+", "x", "**", "4", "/", "math", ".", "factorial", "(", "4", ")", "-", "x", "**", "6", "/", "math", ".", "factorial", "(", "6", ")", "+", "x", "**", "8", "/", "math", ".", "factorial", "(", "8", ")", "-", "x", "**", "9", "/", "math", ".", "factorial", "(", "9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.Flatten.forward": [[13, 15], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.SEModule.__init__": [[25, 38], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "\n", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc1", ".", "weight", ".", "data", ")", "\n", "\n", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "Conv2d", "(", "\n", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "sigmoid", "=", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.SEModule.forward": [[39, 48], ["ArcFace.SEModule.avg_pool", "ArcFace.SEModule.fc1", "ArcFace.SEModule.relu", "ArcFace.SEModule.fc2", "ArcFace.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.bottleneck_IR.__init__": [[51, 62], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "        ", "super", "(", "bottleneck_IR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "depth", ")", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "depth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.bottleneck_IR.forward": [[63, 68], ["ArcFace.bottleneck_IR.shortcut_layer", "ArcFace.bottleneck_IR.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.bottleneck_IR_SE.__init__": [[71, 86], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "ArcFace.SEModule", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "        ", "super", "(", "bottleneck_IR_SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ",", "\n", "SEModule", "(", "depth", ",", "16", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.bottleneck_IR_SE.forward": [[88, 93], ["ArcFace.bottleneck_IR_SE.shortcut_layer", "ArcFace.bottleneck_IR_SE.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.Backbone.__init__": [[131, 167], ["torch.nn.Module.__init__", "ArcFace.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "ArcFace.Backbone._initialize_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "ArcFace.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "ArcFace.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_blocks", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.Backbone._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "num_layers", ",", "mode", "=", "'ir'", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_size", "[", "0", "]", "in", "[", "112", ",", "224", "]", ",", "\"input_size should be [112, 112] or [224, 224]\"", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "\"num_layers should be 50, 100 or 152\"", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "\"mode should be ir or ir_se\"", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR_SE", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "if", "input_size", "[", "0", "]", "==", "112", ":", "\n", "            ", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "7", "*", "7", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "14", "*", "14", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ")", "\n", "\n", "", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "for", "bottleneck", "in", "block", ":", "\n", "                ", "modules", ".", "append", "(", "\n", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.Backbone.forward": [[168, 175], ["ArcFace.Backbone.input_layer", "ArcFace.Backbone.body", "ArcFace.Backbone.output_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "127.5", ")", "/", "128", "\n", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.Backbone._initialize_weights": [[176, 192], ["ArcFace.Backbone.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.ArcFace.__init__": [[202, 212], ["ArcFace.IR_50", "FaceModel.FaceModel.FaceModel.__init__"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.IR_50", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "net", "=", "IR_50", "(", "(", "112", ",", "112", ")", ")", "\n", "url", "=", "'http://ml.cs.tsinghua.edu.cn/~xiaoyang/face_models/ArcFace/model_ir_se50.pth'", "\n", "channel", "=", "'rgb'", "\n", "FaceModel", ".", "__init__", "(", "\n", "self", ",", "\n", "net", "=", "net", ",", "\n", "url", "=", "url", ",", "\n", "channel", "=", "channel", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.l2_norm": [[17, 22], ["torch.norm", "torch.norm", "torch.div", "torch.div"], "function", ["None"], ["", "", "def", "l2_norm", "(", "input", ",", "axis", "=", "1", ")", ":", "\n", "    ", "norm", "=", "torch", ".", "norm", "(", "input", ",", "2", ",", "axis", ",", "True", ")", "\n", "output", "=", "torch", ".", "div", "(", "input", ",", "norm", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block": [[99, 102], ["ArcFace.Bottleneck", "ArcFace.Bottleneck", "range"], "function", ["None"], ["", "def", "get_block", "(", "in_channel", ",", "depth", ",", "num_units", ",", "stride", "=", "2", ")", ":", "\n", "\n", "    ", "return", "[", "Bottleneck", "(", "in_channel", ",", "depth", ",", "stride", ")", "]", "+", "[", "Bottleneck", "(", "depth", ",", "depth", ",", "1", ")", "for", "i", "in", "range", "(", "num_units", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_blocks": [[104, 128], ["ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block", "ArcFace.get_block"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.get_block"], ["", "def", "get_blocks", "(", "num_layers", ")", ":", "\n", "    ", "if", "num_layers", "==", "50", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "4", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "14", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "100", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "13", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "30", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "8", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "36", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.ArcFace.IR_50": [[194, 200], ["ArcFace.Backbone"], "function", ["None"], ["", "", "", "", "", "def", "IR_50", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-50 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "50", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.FaceModel.FaceModel.__init__": [[50, 64], ["kwargs.get", "kwargs.get", "FaceModel.get_model", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.FaceModel.get_model"], ["\t", "def", "__init__", "(", "self", ",", "url", ",", "net", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "embedding_size", "=", "kwargs", ".", "get", "(", "'embedding_size'", ",", "512", ")", "\n", "no_gpu", "=", "kwargs", ".", "get", "(", "'no_gpu'", ",", "False", ")", "\n", "# get the pytorch model", "\n", "output", ",", "input_device", "=", "get_model", "(", "\n", "net", "=", "net", ",", "\n", "url", "=", "url", ",", "\n", "embedding_size", "=", "embedding_size", ",", "\n", "no_gpu", "=", "no_gpu", ")", "\n", "out_dims", "=", "embedding_size", "\n", "self", ".", "out_dims", "=", "out_dims", "\n", "self", ".", "channel", "=", "kwargs", ".", "get", "(", "'channel'", ",", "'rgb'", ")", "\n", "self", ".", "output", "=", "output", "\n", "self", ".", "input_device", "=", "input_device", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "use_prelogits", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.FaceModel.FaceModel.forward": [[64, 71], ["torch.flip", "torch.sqrt", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "use_prelogits", "=", "False", ")", ":", "\n", "\t\t", "if", "self", ".", "channel", "==", "'bgr'", ":", "\n", "\t\t\t", "x", "=", "torch", ".", "flip", "(", "x", ",", "dims", "=", "[", "1", "]", ")", "\n", "", "x", "=", "self", ".", "output", "[", "'prelogits'", "]", "[", "0", "]", "(", "x", ")", "\n", "if", "not", "use_prelogits", ":", "\n", "\t\t\t", "x", "=", "x", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-5", ")", "\n", "", "return", "x", "\n", "", "def", "zero_grad", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.FaceModel.FaceModel.zero_grad": [[71, 73], ["[].zero_grad"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.FaceModel.FaceModel.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "output", "[", "'prelogits'", "]", "[", "0", "]", ".", "zero_grad", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.FaceModel.get_model": [[5, 48], ["net.eval", "url.split", "print", "torch.load", "isinstance", "net.load_state_dict", "net.load_state_dict", "output.items", "torch.device", "torch.device", "print", "six.moves.urllib.request.urlretrieve", "print", "print", "torch.load", "graph.cuda.cuda", "os.path.exists", "storage.cuda", "os.makedirs", "storage.cuda"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.load", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.load", "home.repos.pwc.inspect_result.shawnxyang_tip-im.None.utils.makedirs"], ["def", "get_model", "(", "url", ",", "net", ",", "embedding_size", ",", "no_gpu", "=", "False", ")", ":", "\n", "\t", "\"\"\"\n\t\t:param url: a string, the url\n\t\t:param net: the backbone model\n\t\t:param embedding_size: int, output feature shape\n\t\t:param no_gpu: boolean, whether to use gpu\n\t\"\"\"", "\n", "\n", "model_name", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "try", ":", "\n", "\t\t", "print", "(", "'Load existing checkpoint'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'./ckpts/{}'", ".", "format", "(", "model_name", ")", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", ")", ")", "\n", "", "except", "Exception", ":", "\n", "\t\t", "print", "(", "'No existing checkpoint, now downloading online'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./ckpts/'", ")", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "os", ".", "makedirs", "(", "'./ckpts/'", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "\t\t\t\t", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "\t\t\t\t\t", "raise", "\n", "", "", "", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "\n", "'./ckpts/{}'", ".", "format", "(", "model_name", ")", ")", "\n", "print", "(", "'Finish downloading'", ")", "\n", "print", "(", "'Load checkpoint'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'./ckpts/{}'", ".", "format", "(", "model_name", ")", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "checkpoint", ",", "dict", ")", "and", "'state_dict'", "in", "checkpoint", ":", "\n", "\t\t", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "net", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "net", ".", "eval", "(", ")", "\n", "output", "=", "{", "'prelogits'", ":", "(", "net", ",", "embedding_size", ")", "}", "\n", "if", "not", "no_gpu", ":", "\n", "\t\t", "for", "key", ",", "(", "graph", ",", "_", ")", "in", "output", ".", "items", "(", ")", ":", "\n", "\t\t\t", "graph", "=", "graph", ".", "cuda", "(", ")", "\n", "", "input_device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "\t\t", "input_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "return", "output", ",", "input_device", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.Block.__init__": [[7, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "prelu1", "=", "nn", ".", "PReLU", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "prelu2", "=", "nn", ".", "PReLU", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.Block.forward": [[14, 16], ["CosFace.Block.prelu2", "CosFace.Block.conv2", "CosFace.Block.prelu1", "CosFace.Block.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "prelu2", "(", "self", ".", "conv2", "(", "self", ".", "prelu1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.sphere.__init__": [[19, 46], ["torch.Module.__init__", "CosFace.sphere._make_layer", "CosFace.sphere._make_layer", "CosFace.sphere._make_layer", "CosFace.sphere._make_layer", "torch.Linear", "torch.Linear", "CosFace.sphere.modules", "ValueError", "isinstance", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "str"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet._make_layer", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet._make_layer", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet._make_layer", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "type", "=", "20", ",", "is_gray", "=", "False", ")", ":", "\n", "        ", "super", "(", "sphere", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "Block", "\n", "if", "type", "is", "20", ":", "\n", "            ", "layers", "=", "[", "1", ",", "2", ",", "4", ",", "1", "]", "\n", "", "elif", "type", "is", "64", ":", "\n", "            ", "layers", "=", "[", "3", ",", "7", ",", "16", ",", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'sphere'", "+", "str", "(", "type", ")", "+", "\" IS NOT SUPPORTED! (sphere20 or sphere64)\"", ")", "\n", "", "filter_list", "=", "[", "3", ",", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "if", "is_gray", ":", "\n", "            ", "filter_list", "[", "0", "]", "=", "1", "\n", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "filter_list", "[", "0", "]", ",", "filter_list", "[", "1", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "filter_list", "[", "1", "]", ",", "filter_list", "[", "2", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "filter_list", "[", "2", "]", ",", "filter_list", "[", "3", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "filter_list", "[", "3", "]", ",", "filter_list", "[", "4", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "7", "*", "6", ",", "512", ")", "\n", "\n", "# Weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "else", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.sphere._make_layer": [[48, 56], ["layers.append", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "layers.append", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "PReLU", "(", "planes", ")", ")", "\n", "for", "i", "in", "range", "(", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.sphere.forward": [[57, 68], ["CosFace.sphere.layer1", "CosFace.sphere.layer2", "CosFace.sphere.layer3", "CosFace.sphere.layer4", "CosFace.sphere.view", "CosFace.sphere.fc", "CosFace.sphere.size"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "127.5", ")", "/", "128", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.sphere.save": [[69, 72], ["open", "torch.save", "torch.save", "torch.save", "torch.save", "CosFace.sphere.state_dict"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.save", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.save", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.save", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.save"], ["", "def", "save", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "state_dict", "(", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.BlockIR.__init__": [[79, 94], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "dim_match", ")", ":", "\n", "        ", "super", "(", "BlockIR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "prelu1", "=", "nn", ".", "PReLU", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "if", "dim_match", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.BlockIR.forward": [[96, 112], ["CosFace.BlockIR.bn1", "CosFace.BlockIR.conv1", "CosFace.BlockIR.bn2", "CosFace.BlockIR.prelu1", "CosFace.BlockIR.conv2", "CosFace.BlockIR.bn3", "CosFace.BlockIR.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "prelu1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.__init__": [[116, 147], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.PReLU", "torch.PReLU", "CosFace.LResNet._make_layer", "CosFace.LResNet._make_layer", "CosFace.LResNet._make_layer", "CosFace.LResNet._make_layer", "torch.Sequential", "torch.Sequential", "CosFace.LResNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "isinstance", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet._make_layer", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet._make_layer", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet._make_layer", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "filter_list", ",", "is_gray", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "LResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# input is (mini-batch,3 or 1,112,96)", "\n", "# use (conv3x3, stride=1, padding=1) instead of (conv7x7, stride=2, padding=3)", "\n", "if", "is_gray", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "filter_list", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "# gray", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "filter_list", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "filter_list", "[", "0", "]", ")", "\n", "self", ".", "prelu1", "=", "nn", ".", "PReLU", "(", "filter_list", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "filter_list", "[", "0", "]", ",", "filter_list", "[", "1", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "filter_list", "[", "1", "]", ",", "filter_list", "[", "2", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "filter_list", "[", "2", "]", ",", "filter_list", "[", "3", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "filter_list", "[", "3", "]", ",", "filter_list", "[", "4", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm1d", "(", "filter_list", "[", "4", "]", "*", "7", "*", "6", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.4", ")", ",", "\n", "nn", ".", "Linear", "(", "filter_list", "[", "4", "]", "*", "7", "*", "6", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "# fix gamma ???", "\n", ")", "\n", "\n", "# Weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet._make_layer": [[149, 156], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "False", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", ",", "planes", ",", "stride", "=", "1", ",", "dim_match", "=", "True", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.forward": [[157, 172], ["CosFace.LResNet.conv1", "CosFace.LResNet.bn1", "CosFace.LResNet.prelu1", "CosFace.LResNet.layer1", "CosFace.LResNet.layer2", "CosFace.LResNet.layer3", "CosFace.LResNet.layer4", "CosFace.LResNet.view", "CosFace.LResNet.fc", "CosFace.LResNet.size"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "127.5", ")", "/", "128", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.save": [[173, 176], ["open", "torch.save", "torch.save", "torch.save", "torch.save", "CosFace.LResNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.save", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.save", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.save", "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet.save"], ["", "def", "save", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "state_dict", "(", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.CosFace.__init__": [[185, 195], ["CosFace.sphere", "FaceModel.FaceModel.FaceModel.__init__"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "net", "=", "sphere", "(", ")", "\n", "url", "=", "'http://ml.cs.tsinghua.edu.cn/~xiaoyang/face_models/CosFace/cosface.pth'", "\n", "channel", "=", "'rgb'", "\n", "FaceModel", ".", "__init__", "(", "\n", "self", ",", "\n", "net", "=", "net", ",", "\n", "url", "=", "url", ",", "\n", "channel", "=", "channel", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.networks.CosFace.LResNet50E_IR": [[178, 182], ["CosFace.LResNet"], "function", ["None"], ["", "", "", "def", "LResNet50E_IR", "(", "is_gray", "=", "False", ")", ":", "\n", "    ", "filter_list", "=", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "layers", "=", "[", "3", ",", "4", ",", "14", ",", "3", "]", "\n", "return", "LResNet", "(", "BlockIR", ",", "layers", ",", "filter_list", ",", "is_gray", ")", "\n", "# ---------------------------------- LResNet50E-IR network End ----------------------------------", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.load_property": [[8, 16], ["easydict.EasyDict", "open", "os.path.join", "line.strip().split", "int", "len", "int", "int", "line.strip"], "function", ["None"], ["def", "load_property", "(", "data_dir", ")", ":", "\n", "  ", "prop", "=", "edict", "(", ")", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'property'", ")", ")", ":", "\n", "    ", "vec", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "assert", "len", "(", "vec", ")", "==", "3", "\n", "prop", ".", "num_classes", "=", "int", "(", "vec", "[", "0", "]", ")", "\n", "prop", ".", "image_size", "=", "[", "int", "(", "vec", "[", "1", "]", ")", ",", "int", "(", "vec", "[", "2", "]", ")", "]", "\n", "", "return", "prop", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_webface": [[19, 31], ["open", "line.strip().split", "easydict.EasyDict", "vec[].replace", "os.path.join", "ret.append", "len", "line.strip"], "function", ["None"], ["", "def", "get_dataset_webface", "(", "input_dir", ")", ":", "\n", "  ", "clean_list_file", "=", "input_dir", "+", "\"_clean_list.txt\"", "\n", "ret", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "clean_list_file", ",", "'r'", ")", ":", "\n", "    ", "vec", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "assert", "len", "(", "vec", ")", "==", "2", "\n", "fimage", "=", "edict", "(", ")", "\n", "fimage", ".", "id", "=", "vec", "[", "0", "]", ".", "replace", "(", "\"\\\\\"", ",", "'/'", ")", "\n", "fimage", ".", "classname", "=", "vec", "[", "1", "]", "\n", "fimage", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "fimage", ".", "id", ")", "\n", "ret", ".", "append", "(", "fimage", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_celeb": [[32, 55], ["open", "line.strip.strip", "line.strip.split", "easydict.EasyDict", "str", "os.path.join", "ret.append", "line.strip.startswith", "len", "len"], "function", ["None"], ["", "def", "get_dataset_celeb", "(", "input_dir", ")", ":", "\n", "  ", "clean_list_file", "=", "input_dir", "+", "\"_clean_list.txt\"", "\n", "ret", "=", "[", "]", "\n", "dir2label", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "clean_list_file", ",", "'r'", ")", ":", "\n", "    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "not", "line", ".", "startswith", "(", "'./m.'", ")", ":", "\n", "      ", "continue", "\n", "", "line", "=", "line", "[", "2", ":", "]", "\n", "vec", "=", "line", ".", "split", "(", "'/'", ")", "\n", "assert", "len", "(", "vec", ")", "==", "2", "\n", "if", "vec", "[", "0", "]", "in", "dir2label", ":", "\n", "      ", "label", "=", "dir2label", "[", "vec", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "      ", "label", "=", "len", "(", "dir2label", ")", "\n", "dir2label", "[", "vec", "[", "0", "]", "]", "=", "label", "\n", "\n", "", "fimage", "=", "edict", "(", ")", "\n", "fimage", ".", "id", "=", "line", "\n", "fimage", ".", "classname", "=", "str", "(", "label", ")", "\n", "fimage", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "fimage", ".", "id", ")", "\n", "ret", ".", "append", "(", "fimage", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image._get_dataset_celeb": [[56, 68], ["open", "line.strip().split", "easydict.EasyDict", "os.path.join", "ret.append", "len", "line.strip"], "function", ["None"], ["", "def", "_get_dataset_celeb", "(", "input_dir", ")", ":", "\n", "  ", "list_file", "=", "input_dir", "+", "\"_original_list.txt\"", "\n", "ret", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "list_file", ",", "'r'", ")", ":", "\n", "    ", "vec", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "assert", "len", "(", "vec", ")", "==", "2", "\n", "fimage", "=", "edict", "(", ")", "\n", "fimage", ".", "id", "=", "vec", "[", "0", "]", "\n", "fimage", ".", "classname", "=", "vec", "[", "1", "]", "\n", "fimage", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "fimage", ".", "id", ")", "\n", "ret", ".", "append", "(", "fimage", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_facescrub": [[69, 90], ["os.listdir", "sorted", "sorted.append", "os.path.join", "os.listdir", "os.path.isdir", "easydict.EasyDict", "os.path.join", "str", "os.path.join", "ret.append"], "function", ["None"], ["", "def", "get_dataset_facescrub", "(", "input_dir", ")", ":", "\n", "  ", "ret", "=", "[", "]", "\n", "label", "=", "0", "\n", "person_names", "=", "[", "]", "\n", "for", "person_name", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "    ", "person_names", ".", "append", "(", "person_name", ")", "\n", "", "person_names", "=", "sorted", "(", "person_names", ")", "\n", "for", "person_name", "in", "person_names", ":", "\n", "    ", "subdir", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "person_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "subdir", ")", ":", "\n", "      ", "continue", "\n", "", "for", "_img", "in", "os", ".", "listdir", "(", "subdir", ")", ":", "\n", "      ", "fimage", "=", "edict", "(", ")", "\n", "fimage", ".", "id", "=", "os", ".", "path", ".", "join", "(", "person_name", ",", "_img", ")", "\n", "fimage", ".", "classname", "=", "str", "(", "label", ")", "\n", "fimage", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "subdir", ",", "_img", ")", "\n", "fimage", ".", "landmark", "=", "None", "\n", "fimage", ".", "bbox", "=", "None", "\n", "ret", ".", "append", "(", "fimage", ")", "\n", "", "label", "+=", "1", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_megaface": [[91, 138], ["os.listdir", "os.path.join", "os.listdir", "os.path.join", "os.listdir", "os.path.isdir", "img.endswith", "easydict.EasyDict", "os.path.join", "str", "os.path.join", "os.path.exists", "ret.append", "img.endswith", "open", "f.read", "json.loads", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "get_dataset_megaface", "(", "input_dir", ")", ":", "\n", "  ", "ret", "=", "[", "]", "\n", "label", "=", "0", "\n", "for", "prefixdir", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "    ", "_prefixdir", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "prefixdir", ")", "\n", "for", "subdir", "in", "os", ".", "listdir", "(", "_prefixdir", ")", ":", "\n", "      ", "_subdir", "=", "os", ".", "path", ".", "join", "(", "_prefixdir", ",", "subdir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "_subdir", ")", ":", "\n", "        ", "continue", "\n", "", "for", "img", "in", "os", ".", "listdir", "(", "_subdir", ")", ":", "\n", "        ", "if", "not", "img", ".", "endswith", "(", "'.jpg.jpg'", ")", "and", "img", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "          ", "fimage", "=", "edict", "(", ")", "\n", "fimage", ".", "id", "=", "os", ".", "path", ".", "join", "(", "prefixdir", ",", "subdir", ",", "img", ")", "\n", "fimage", ".", "classname", "=", "str", "(", "label", ")", "\n", "fimage", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "_subdir", ",", "img", ")", "\n", "json_file", "=", "fimage", ".", "image_path", "+", "\".json\"", "\n", "data", "=", "None", "\n", "fimage", ".", "bbox", "=", "None", "\n", "fimage", ".", "landmark", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_file", ")", ":", "\n", "            ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "              ", "data", "=", "f", ".", "read", "(", ")", "\n", "data", "=", "json", ".", "loads", "(", "data", ")", "\n", "", "assert", "data", "is", "not", "None", "\n", "if", "'bounding_box'", "in", "data", ":", "\n", "              ", "fimage", ".", "bbox", "=", "np", ".", "zeros", "(", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bb", "=", "data", "[", "'bounding_box'", "]", "\n", "fimage", ".", "bbox", "[", "0", "]", "=", "bb", "[", "'x'", "]", "\n", "fimage", ".", "bbox", "[", "1", "]", "=", "bb", "[", "'y'", "]", "\n", "fimage", ".", "bbox", "[", "2", "]", "=", "bb", "[", "'x'", "]", "+", "bb", "[", "'width'", "]", "\n", "fimage", ".", "bbox", "[", "3", "]", "=", "bb", "[", "'y'", "]", "+", "bb", "[", "'height'", "]", "\n", "#print('bb')", "\n", "", "if", "'landmarks'", "in", "data", ":", "\n", "              ", "landmarks", "=", "data", "[", "'landmarks'", "]", "\n", "if", "'1'", "in", "landmarks", "and", "'0'", "in", "landmarks", "and", "'2'", "in", "landmarks", ":", "\n", "                ", "fimage", ".", "landmark", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fimage", ".", "landmark", "[", "0", "]", "[", "0", "]", "=", "landmarks", "[", "'1'", "]", "[", "'x'", "]", "\n", "fimage", ".", "landmark", "[", "0", "]", "[", "1", "]", "=", "landmarks", "[", "'1'", "]", "[", "'y'", "]", "\n", "fimage", ".", "landmark", "[", "1", "]", "[", "0", "]", "=", "landmarks", "[", "'0'", "]", "[", "'x'", "]", "\n", "fimage", ".", "landmark", "[", "1", "]", "[", "1", "]", "=", "landmarks", "[", "'0'", "]", "[", "'y'", "]", "\n", "fimage", ".", "landmark", "[", "2", "]", "[", "0", "]", "=", "landmarks", "[", "'2'", "]", "[", "'x'", "]", "\n", "fimage", ".", "landmark", "[", "2", "]", "[", "1", "]", "=", "landmarks", "[", "'2'", "]", "[", "'y'", "]", "\n", "#print('lm')", "\n", "\n", "", "", "", "ret", ".", "append", "(", "fimage", ")", "\n", "", "", "label", "+=", "1", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_fgnet": [[139, 185], ["os.listdir", "os.path.join", "os.listdir", "os.path.isdir", "img.endswith", "easydict.EasyDict", "os.path.join", "str", "os.path.join", "os.path.exists", "ret.append", "open", "f.read", "json.loads", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "get_dataset_fgnet", "(", "input_dir", ")", ":", "\n", "  ", "ret", "=", "[", "]", "\n", "label", "=", "0", "\n", "for", "subdir", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "    ", "_subdir", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "subdir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "_subdir", ")", ":", "\n", "      ", "continue", "\n", "", "for", "img", "in", "os", ".", "listdir", "(", "_subdir", ")", ":", "\n", "      ", "if", "img", ".", "endswith", "(", "'.JPG'", ")", ":", "\n", "        ", "fimage", "=", "edict", "(", ")", "\n", "fimage", ".", "id", "=", "os", ".", "path", ".", "join", "(", "_subdir", ",", "img", ")", "\n", "fimage", ".", "classname", "=", "str", "(", "label", ")", "\n", "fimage", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "_subdir", ",", "img", ")", "\n", "json_file", "=", "fimage", ".", "image_path", "+", "\".json\"", "\n", "data", "=", "None", "\n", "fimage", ".", "bbox", "=", "None", "\n", "fimage", ".", "landmark", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_file", ")", ":", "\n", "          ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "f", ".", "read", "(", ")", "\n", "data", "=", "json", ".", "loads", "(", "data", ")", "\n", "", "assert", "data", "is", "not", "None", "\n", "if", "'bounding_box'", "in", "data", ":", "\n", "            ", "fimage", ".", "bbox", "=", "np", ".", "zeros", "(", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bb", "=", "data", "[", "'bounding_box'", "]", "\n", "fimage", ".", "bbox", "[", "0", "]", "=", "bb", "[", "'x'", "]", "\n", "fimage", ".", "bbox", "[", "1", "]", "=", "bb", "[", "'y'", "]", "\n", "fimage", ".", "bbox", "[", "2", "]", "=", "bb", "[", "'x'", "]", "+", "bb", "[", "'width'", "]", "\n", "fimage", ".", "bbox", "[", "3", "]", "=", "bb", "[", "'y'", "]", "+", "bb", "[", "'height'", "]", "\n", "#print('bb')", "\n", "", "if", "'landmarks'", "in", "data", ":", "\n", "            ", "landmarks", "=", "data", "[", "'landmarks'", "]", "\n", "if", "'1'", "in", "landmarks", "and", "'0'", "in", "landmarks", "and", "'2'", "in", "landmarks", ":", "\n", "              ", "fimage", ".", "landmark", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fimage", ".", "landmark", "[", "0", "]", "[", "0", "]", "=", "landmarks", "[", "'1'", "]", "[", "'x'", "]", "\n", "fimage", ".", "landmark", "[", "0", "]", "[", "1", "]", "=", "landmarks", "[", "'1'", "]", "[", "'y'", "]", "\n", "fimage", ".", "landmark", "[", "1", "]", "[", "0", "]", "=", "landmarks", "[", "'0'", "]", "[", "'x'", "]", "\n", "fimage", ".", "landmark", "[", "1", "]", "[", "1", "]", "=", "landmarks", "[", "'0'", "]", "[", "'y'", "]", "\n", "fimage", ".", "landmark", "[", "2", "]", "[", "0", "]", "=", "landmarks", "[", "'2'", "]", "[", "'x'", "]", "\n", "fimage", ".", "landmark", "[", "2", "]", "[", "1", "]", "=", "landmarks", "[", "'2'", "]", "[", "'y'", "]", "\n", "#print('lm')", "\n", "\n", "#fimage.landmark = None", "\n", "", "", "", "ret", ".", "append", "(", "fimage", ")", "\n", "", "", "label", "+=", "1", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_ytf": [[186, 213], ["os.listdir", "sorted", "sorted.append", "os.path.join", "os.listdir", "os.path.isdir", "os.path.join", "os.listdir", "os.path.isdir", "easydict.EasyDict", "os.path.join", "str", "os.path.join", "_ret.append"], "function", ["None"], ["", "def", "get_dataset_ytf", "(", "input_dir", ")", ":", "\n", "  ", "ret", "=", "[", "]", "\n", "label", "=", "0", "\n", "person_names", "=", "[", "]", "\n", "for", "person_name", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "    ", "person_names", ".", "append", "(", "person_name", ")", "\n", "", "person_names", "=", "sorted", "(", "person_names", ")", "\n", "for", "person_name", "in", "person_names", ":", "\n", "    ", "_subdir", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "person_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "_subdir", ")", ":", "\n", "      ", "continue", "\n", "", "for", "_subdir2", "in", "os", ".", "listdir", "(", "_subdir", ")", ":", "\n", "      ", "_subdir2", "=", "os", ".", "path", ".", "join", "(", "_subdir", ",", "_subdir2", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "_subdir2", ")", ":", "\n", "        ", "continue", "\n", "", "_ret", "=", "[", "]", "\n", "for", "img", "in", "os", ".", "listdir", "(", "_subdir2", ")", ":", "\n", "        ", "fimage", "=", "edict", "(", ")", "\n", "fimage", ".", "id", "=", "os", ".", "path", ".", "join", "(", "_subdir2", ",", "img", ")", "\n", "fimage", ".", "classname", "=", "str", "(", "label", ")", "\n", "fimage", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "_subdir2", ",", "img", ")", "\n", "fimage", ".", "bbox", "=", "None", "\n", "fimage", ".", "landmark", "=", "None", "\n", "_ret", ".", "append", "(", "fimage", ")", "\n", "", "ret", "+=", "_ret", "\n", "", "label", "+=", "1", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_clfw": [[214, 226], ["os.listdir", "easydict.EasyDict", "str", "os.path.join", "ret.append"], "function", ["None"], ["", "def", "get_dataset_clfw", "(", "input_dir", ")", ":", "\n", "  ", "ret", "=", "[", "]", "\n", "label", "=", "0", "\n", "for", "img", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "    ", "fimage", "=", "edict", "(", ")", "\n", "fimage", ".", "id", "=", "img", "\n", "fimage", ".", "classname", "=", "str", "(", "0", ")", "\n", "fimage", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "img", ")", "\n", "fimage", ".", "bbox", "=", "None", "\n", "fimage", ".", "landmark", "=", "None", "\n", "ret", ".", "append", "(", "fimage", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_common": [[227, 251], ["os.listdir", "sorted", "sorted.append", "os.path.join", "os.listdir", "os.path.isdir", "easydict.EasyDict", "os.path.join", "str", "os.path.join", "_ret.append", "len"], "function", ["None"], ["", "def", "get_dataset_common", "(", "input_dir", ",", "min_images", "=", "1", ")", ":", "\n", "  ", "ret", "=", "[", "]", "\n", "label", "=", "0", "\n", "person_names", "=", "[", "]", "\n", "for", "person_name", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "    ", "person_names", ".", "append", "(", "person_name", ")", "\n", "", "person_names", "=", "sorted", "(", "person_names", ")", "\n", "for", "person_name", "in", "person_names", ":", "\n", "    ", "_subdir", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "person_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "_subdir", ")", ":", "\n", "      ", "continue", "\n", "", "_ret", "=", "[", "]", "\n", "for", "img", "in", "os", ".", "listdir", "(", "_subdir", ")", ":", "\n", "      ", "fimage", "=", "edict", "(", ")", "\n", "fimage", ".", "id", "=", "os", ".", "path", ".", "join", "(", "person_name", ",", "img", ")", "\n", "fimage", ".", "classname", "=", "str", "(", "label", ")", "\n", "fimage", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "_subdir", ",", "img", ")", "\n", "fimage", ".", "bbox", "=", "None", "\n", "fimage", ".", "landmark", "=", "None", "\n", "_ret", ".", "append", "(", "fimage", ")", "\n", "", "if", "len", "(", "_ret", ")", ">=", "min_images", ":", "\n", "      ", "ret", "+=", "_ret", "\n", "label", "+=", "1", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset": [[252, 268], ["face_image.get_dataset_common", "face_image.get_dataset_celeb", "face_image.get_dataset_facescrub", "face_image.get_dataset_megaface", "face_image.get_dataset_fgnet", "face_image.get_dataset_ytf", "face_image.get_dataset_clfw"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_common", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_celeb", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_facescrub", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_megaface", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_fgnet", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_ytf", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_image.get_dataset_clfw"], ["", "def", "get_dataset", "(", "name", ",", "input_dir", ")", ":", "\n", "  ", "if", "name", "==", "'webface'", "or", "name", "==", "'lfw'", "or", "name", "==", "'vgg'", ":", "\n", "    ", "return", "get_dataset_common", "(", "input_dir", ")", "\n", "", "if", "name", "==", "'celeb'", ":", "\n", "    ", "return", "get_dataset_celeb", "(", "input_dir", ")", "\n", "", "if", "name", "==", "'facescrub'", ":", "\n", "    ", "return", "get_dataset_facescrub", "(", "input_dir", ")", "\n", "", "if", "name", "==", "'megaface'", ":", "\n", "    ", "return", "get_dataset_megaface", "(", "input_dir", ")", "\n", "", "if", "name", "==", "'fgnet'", ":", "\n", "    ", "return", "get_dataset_fgnet", "(", "input_dir", ")", "\n", "", "if", "name", "==", "'ytf'", ":", "\n", "    ", "return", "get_dataset_ytf", "(", "input_dir", ")", "\n", "", "if", "name", "==", "'clfw'", ":", "\n", "    ", "return", "get_dataset_clfw", "(", "input_dir", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_preprocess.parse_lst_line": [[6, 27], ["line.strip().split", "int", "int", "len", "len", "numpy.zeros", "xrange", "line.strip", "int", "len", "xrange", "_l.append", "numpy.array().reshape", "float", "numpy.array"], "function", ["None"], ["def", "parse_lst_line", "(", "line", ")", ":", "\n", "  ", "vec", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "assert", "len", "(", "vec", ")", ">=", "3", "\n", "aligned", "=", "int", "(", "vec", "[", "0", "]", ")", "\n", "image_path", "=", "vec", "[", "1", "]", "\n", "label", "=", "int", "(", "vec", "[", "2", "]", ")", "\n", "bbox", "=", "None", "\n", "landmark", "=", "None", "\n", "#print(vec)", "\n", "if", "len", "(", "vec", ")", ">", "3", ":", "\n", "    ", "bbox", "=", "np", ".", "zeros", "(", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "xrange", "(", "3", ",", "7", ")", ":", "\n", "      ", "bbox", "[", "i", "-", "3", "]", "=", "int", "(", "vec", "[", "i", "]", ")", "\n", "", "landmark", "=", "None", "\n", "if", "len", "(", "vec", ")", ">", "7", ":", "\n", "      ", "_l", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "7", ",", "17", ")", ":", "\n", "        ", "_l", ".", "append", "(", "float", "(", "vec", "[", "i", "]", ")", ")", "\n", "", "landmark", "=", "np", ".", "array", "(", "_l", ")", ".", "reshape", "(", "(", "2", ",", "5", ")", ")", ".", "T", "\n", "#print(aligned)", "\n", "", "", "return", "image_path", ",", "label", ",", "bbox", ",", "landmark", ",", "aligned", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_preprocess.read_image": [[31, 44], ["kwargs.get", "kwargs.get", "cv2.imread", "cv2.imread", "numpy.transpose"], "function", ["None"], ["", "def", "read_image", "(", "img_path", ",", "**", "kwargs", ")", ":", "\n", "  ", "mode", "=", "kwargs", ".", "get", "(", "'mode'", ",", "'rgb'", ")", "\n", "layout", "=", "kwargs", ".", "get", "(", "'layout'", ",", "'HWC'", ")", "\n", "if", "mode", "==", "'gray'", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "cv2", ".", "CV_LOAD_IMAGE_GRAYSCALE", ")", "\n", "", "else", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "cv2", ".", "CV_LOAD_IMAGE_COLOR", ")", "\n", "if", "mode", "==", "'rgb'", ":", "\n", "#print('to rgb')", "\n", "      ", "img", "=", "img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "", "if", "layout", "==", "'CHW'", ":", "\n", "      ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_preprocess.preprocess": [[46, 93], ["isinstance", "face_preprocess.read_image", "len", "numpy.array", "landmark.astype", "skimage.transform.SimilarityTransform", "trans.SimilarityTransform.estimate", "numpy.zeros", "int", "int", "numpy.zeros", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "cv2.warpAffine", "len", "len", "cv2.resize", "len"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_preprocess.read_image"], ["", "def", "preprocess", "(", "img", ",", "image_size", ",", "bbox", "=", "None", ",", "landmark", "=", "None", ")", ":", "\n", "  ", "if", "isinstance", "(", "img", ",", "str", ")", ":", "\n", "    ", "img", "=", "read_image", "(", "img", ",", "**", "kwargs", ")", "\n", "", "M", "=", "None", "\n", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "assert", "image_size", "[", "0", "]", "==", "112", "\n", "assert", "image_size", "[", "0", "]", "==", "112", "or", "image_size", "[", "1", "]", "==", "96", "\n", "if", "landmark", "is", "not", "None", ":", "\n", "    ", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "src", "=", "np", ".", "array", "(", "[", "\n", "[", "30.2946", ",", "51.6963", "]", ",", "\n", "[", "65.5318", ",", "51.5014", "]", ",", "\n", "[", "48.0252", ",", "71.7366", "]", ",", "\n", "[", "33.5493", ",", "92.3655", "]", ",", "\n", "[", "62.7299", ",", "92.2041", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "image_size", "[", "1", "]", "==", "112", ":", "\n", "      ", "src", "[", ":", ",", "0", "]", "+=", "8.0", "\n", "", "dst", "=", "landmark", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "dst", ",", "src", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "#M = cv2.estimateRigidTransform( dst.reshape(1,5,2), src.reshape(1,5,2), False)", "\n", "\n", "", "if", "M", "is", "None", ":", "\n", "    ", "det", "=", "np", ".", "zeros", "(", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "det", "[", "0", "]", "=", "int", "(", "0", ")", "\n", "det", "[", "1", "]", "=", "int", "(", "0", ")", "\n", "det", "[", "2", "]", "=", "img", ".", "shape", "[", "1", "]", "-", "det", "[", "0", "]", "\n", "det", "[", "3", "]", "=", "img", ".", "shape", "[", "0", "]", "-", "det", "[", "1", "]", "\n", "\n", "margin", "=", "0", "\n", "bb", "=", "np", ".", "zeros", "(", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "bb", "[", "0", "]", "=", "np", ".", "maximum", "(", "det", "[", "0", "]", "-", "margin", "/", "2", ",", "0", ")", "\n", "bb", "[", "1", "]", "=", "np", ".", "maximum", "(", "det", "[", "1", "]", "-", "margin", "/", "2", ",", "0", ")", "\n", "bb", "[", "2", "]", "=", "np", ".", "minimum", "(", "det", "[", "2", "]", "+", "margin", "/", "2", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "bb", "[", "3", "]", "=", "np", ".", "minimum", "(", "det", "[", "3", "]", "+", "margin", "/", "2", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "ret", "=", "img", "[", "bb", "[", "1", "]", ":", "bb", "[", "3", "]", ",", "bb", "[", "0", "]", ":", "bb", "[", "2", "]", ",", ":", "]", "\n", "if", "len", "(", "image_size", ")", ">", "0", ":", "\n", "      ", "ret", "=", "cv2", ".", "resize", "(", "ret", ",", "(", "image_size", "[", "1", "]", ",", "image_size", "[", "0", "]", ")", ")", "\n", "", "return", "ret", ",", "None", "\n", "", "else", ":", "#do align using landmark", "\n", "    ", "assert", "len", "(", "image_size", ")", "==", "2", "\n", "\n", "warped", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "image_size", "[", "1", "]", ",", "image_size", "[", "0", "]", ")", ",", "borderValue", "=", "0.0", ")", "\n", "\n", "return", "warped", ",", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.__init__": [[63, 74], ["dict", "detect_face.Network.setup"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.ONet.setup"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "trainable", "=", "True", ")", ":", "\n", "# The input nodes for this network", "\n", "        ", "self", ".", "inputs", "=", "inputs", "\n", "# The current list of terminal nodes", "\n", "self", ".", "terminals", "=", "[", "]", "\n", "# Mapping from layer names to layers", "\n", "self", ".", "layers", "=", "dict", "(", "inputs", ")", "\n", "# If true, the resulting variables are set as trainable", "\n", "self", ".", "trainable", "=", "trainable", "\n", "\n", "self", ".", "setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.setup": [[75, 78], ["NotImplementedError"], "methods", ["None"], ["", "def", "setup", "(", "self", ")", ":", "\n", "        ", "'''Construct the network. '''", "\n", "raise", "NotImplementedError", "(", "'Must be implemented by the subclass.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.load": [[79, 96], ["numpy.load().item", "numpy.load", "tensorflow.variable_scope", "six.iteritems", "tensorflow.get_variable", "session.run", "tensorflow.get_variable.assign"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.load"], ["", "def", "load", "(", "self", ",", "data_path", ",", "session", ",", "ignore_missing", "=", "False", ")", ":", "\n", "        ", "'''Load network weights.\n        data_path: The path to the numpy-serialized network weights\n        session: The current TensorFlow session\n        ignore_missing: If true, serialized weights for missing layers are ignored.\n        '''", "\n", "data_dict", "=", "np", ".", "load", "(", "data_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "#pylint: disable=no-member", "\n", "\n", "for", "op_name", "in", "data_dict", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "op_name", ",", "reuse", "=", "True", ")", ":", "\n", "                ", "for", "param_name", ",", "data", "in", "iteritems", "(", "data_dict", "[", "op_name", "]", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "var", "=", "tf", ".", "get_variable", "(", "param_name", ")", "\n", "session", ".", "run", "(", "var", ".", "assign", "(", "data", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "if", "not", "ignore_missing", ":", "\n", "                            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.feed": [[97, 111], ["len", "isinstance", "detect_face.Network.terminals.append", "KeyError"], "methods", ["None"], ["", "", "", "", "", "", "def", "feed", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "'''Set the input(s) for the next operation by replacing the terminal nodes.\n        The arguments can be either layer names or the actual layers.\n        '''", "\n", "assert", "len", "(", "args", ")", "!=", "0", "\n", "self", ".", "terminals", "=", "[", "]", "\n", "for", "fed_layer", "in", "args", ":", "\n", "            ", "if", "isinstance", "(", "fed_layer", ",", "string_types", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "fed_layer", "=", "self", ".", "layers", "[", "fed_layer", "]", "\n", "", "except", "KeyError", ":", "\n", "                    ", "raise", "KeyError", "(", "'Unknown layer name fed: %s'", "%", "fed_layer", ")", "\n", "", "", "self", ".", "terminals", ".", "append", "(", "fed_layer", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.get_output": [[112, 115], ["None"], "methods", ["None"], ["", "def", "get_output", "(", "self", ")", ":", "\n", "        ", "'''Returns the current network output.'''", "\n", "return", "self", ".", "terminals", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.get_unique_name": [[116, 122], ["sum", "t.startswith", "detect_face.Network.layers.items"], "methods", ["None"], ["", "def", "get_unique_name", "(", "self", ",", "prefix", ")", ":", "\n", "        ", "'''Returns an index-suffixed unique name for the given prefix.\n        This is used for auto-generating layer names based on the type-prefix.\n        '''", "\n", "ident", "=", "sum", "(", "t", ".", "startswith", "(", "prefix", ")", "for", "t", ",", "_", "in", "self", ".", "layers", ".", "items", "(", ")", ")", "+", "1", "\n", "return", "'%s_%d'", "%", "(", "prefix", ",", "ident", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.make_var": [[123, 126], ["tensorflow.get_variable"], "methods", ["None"], ["", "def", "make_var", "(", "self", ",", "name", ",", "shape", ")", ":", "\n", "        ", "'''Creates a new TensorFlow variable.'''", "\n", "return", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.validate_padding": [[127, 130], ["None"], "methods", ["None"], ["", "def", "validate_padding", "(", "self", ",", "padding", ")", ":", "\n", "        ", "'''Verifies that the padding is one of the supported ones.'''", "\n", "assert", "padding", "in", "(", "'SAME'", ",", "'VALID'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv": [[131, 165], ["detect_face.Network.validate_padding", "int", "tensorflow.nn.conv2d", "tensorflow.variable_scope", "detect_face.Network.make_var", "convolve", "inp.get_shape", "detect_face.Network.make_var", "tensorflow.nn.bias_add", "tensorflow.nn.relu"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.validate_padding", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.make_var", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.make_var"], ["", "@", "layer", "\n", "def", "conv", "(", "self", ",", "\n", "inp", ",", "\n", "k_h", ",", "\n", "k_w", ",", "\n", "c_o", ",", "\n", "s_h", ",", "\n", "s_w", ",", "\n", "name", ",", "\n", "relu", "=", "True", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "group", "=", "1", ",", "\n", "biased", "=", "True", ")", ":", "\n", "# Verify that the padding is acceptable", "\n", "        ", "self", ".", "validate_padding", "(", "padding", ")", "\n", "# Get the number of channels in the input", "\n", "c_i", "=", "int", "(", "inp", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "# Verify that the grouping parameter is valid", "\n", "assert", "c_i", "%", "group", "==", "0", "\n", "assert", "c_o", "%", "group", "==", "0", "\n", "# Convolution for a given input and kernel", "\n", "convolve", "=", "lambda", "i", ",", "k", ":", "tf", ".", "nn", ".", "conv2d", "(", "i", ",", "k", ",", "[", "1", ",", "s_h", ",", "s_w", ",", "1", "]", ",", "padding", "=", "padding", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "kernel", "=", "self", ".", "make_var", "(", "'weights'", ",", "shape", "=", "[", "k_h", ",", "k_w", ",", "c_i", "//", "group", ",", "c_o", "]", ")", "\n", "# This is the common-case. Convolve the input without any further complications.", "\n", "output", "=", "convolve", "(", "inp", ",", "kernel", ")", "\n", "# Add the biases", "\n", "if", "biased", ":", "\n", "                ", "biases", "=", "self", ".", "make_var", "(", "'biases'", ",", "[", "c_o", "]", ")", "\n", "output", "=", "tf", ".", "nn", ".", "bias_add", "(", "output", ",", "biases", ")", "\n", "", "if", "relu", ":", "\n", "# ReLU non-linearity", "\n", "                ", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ",", "name", "=", "scope", ".", "name", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu": [[166, 173], ["tensorflow.variable_scope", "int", "detect_face.Network.make_var", "tensorflow.nn.relu", "tensorflow.multiply", "inp.get_shape", "tensorflow.nn.relu"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.make_var"], ["", "", "@", "layer", "\n", "def", "prelu", "(", "self", ",", "inp", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "i", "=", "int", "(", "inp", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "alpha", "=", "self", ".", "make_var", "(", "'alpha'", ",", "shape", "=", "(", "i", ",", ")", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "inp", ")", "+", "tf", ".", "multiply", "(", "alpha", ",", "-", "tf", ".", "nn", ".", "relu", "(", "-", "inp", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.max_pool": [[174, 182], ["detect_face.Network.validate_padding", "tensorflow.nn.max_pool"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.validate_padding", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.max_pool"], ["", "@", "layer", "\n", "def", "max_pool", "(", "self", ",", "inp", ",", "k_h", ",", "k_w", ",", "s_h", ",", "s_w", ",", "name", ",", "padding", "=", "'SAME'", ")", ":", "\n", "        ", "self", ".", "validate_padding", "(", "padding", ")", "\n", "return", "tf", ".", "nn", ".", "max_pool", "(", "inp", ",", "\n", "ksize", "=", "[", "1", ",", "k_h", ",", "k_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "s_h", ",", "s_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc": [[183, 200], ["tensorflow.variable_scope", "inp.get_shape", "detect_face.Network.make_var", "detect_face.Network.make_var", "op", "input_shape[].as_list", "tensorflow.reshape", "int"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.make_var", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.make_var"], ["", "@", "layer", "\n", "def", "fc", "(", "self", ",", "inp", ",", "num_out", ",", "name", ",", "relu", "=", "True", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "input_shape", "=", "inp", ".", "get_shape", "(", ")", "\n", "if", "input_shape", ".", "ndims", "==", "4", ":", "\n", "# The input is spatial. Vectorize it first.", "\n", "                ", "dim", "=", "1", "\n", "for", "d", "in", "input_shape", "[", "1", ":", "]", ".", "as_list", "(", ")", ":", "\n", "                    ", "dim", "*=", "int", "(", "d", ")", "\n", "", "feed_in", "=", "tf", ".", "reshape", "(", "inp", ",", "[", "-", "1", ",", "dim", "]", ")", "\n", "", "else", ":", "\n", "                ", "feed_in", ",", "dim", "=", "(", "inp", ",", "input_shape", "[", "-", "1", "]", ".", "value", ")", "\n", "", "weights", "=", "self", ".", "make_var", "(", "'weights'", ",", "shape", "=", "[", "dim", ",", "num_out", "]", ")", "\n", "biases", "=", "self", ".", "make_var", "(", "'biases'", ",", "[", "num_out", "]", ")", "\n", "op", "=", "tf", ".", "nn", ".", "relu_layer", "if", "relu", "else", "tf", ".", "nn", ".", "xw_plus_b", "\n", "fc", "=", "op", "(", "feed_in", ",", "weights", ",", "biases", ",", "name", "=", "name", ")", "\n", "return", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.softmax": [[208, 215], ["tensorflow.reduce_max", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.div"], "methods", ["None"], ["@", "layer", "\n", "def", "softmax", "(", "self", ",", "target", ",", "axis", ",", "name", "=", "None", ")", ":", "\n", "        ", "max_axis", "=", "tf", ".", "reduce_max", "(", "target", ",", "axis", ",", "keep_dims", "=", "True", ")", "\n", "target_exp", "=", "tf", ".", "exp", "(", "target", "-", "max_axis", ")", "\n", "normalize", "=", "tf", ".", "reduce_sum", "(", "target_exp", ",", "axis", ",", "keep_dims", "=", "True", ")", "\n", "softmax", "=", "tf", ".", "div", "(", "target_exp", ",", "normalize", ",", "name", ")", "\n", "return", "softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.PNet.setup": [[217, 231], ["detect_face.PNet.feed().conv().prelu().max_pool().conv().prelu().conv().prelu().conv().softmax", "detect_face.PNet.feed().conv", "detect_face.PNet.feed().conv().prelu().max_pool().conv().prelu().conv().prelu().conv", "detect_face.PNet.feed", "detect_face.PNet.feed().conv().prelu().max_pool().conv().prelu().conv().prelu", "detect_face.PNet.feed().conv().prelu().max_pool().conv().prelu().conv", "detect_face.PNet.feed().conv().prelu().max_pool().conv().prelu", "detect_face.PNet.feed().conv().prelu().max_pool().conv", "detect_face.PNet.feed().conv().prelu().max_pool", "detect_face.PNet.feed().conv().prelu", "detect_face.PNet.feed().conv", "detect_face.PNet.feed"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.softmax", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.feed", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.max_pool", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.feed"], ["    ", "def", "setup", "(", "self", ")", ":", "\n", "        ", "(", "self", ".", "feed", "(", "'data'", ")", "#pylint: disable=no-value-for-parameter, no-member", "\n", ".", "conv", "(", "3", ",", "3", ",", "10", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv1'", ")", "\n", ".", "prelu", "(", "name", "=", "'PReLU1'", ")", "\n", ".", "max_pool", "(", "2", ",", "2", ",", "2", ",", "2", ",", "name", "=", "'pool1'", ")", "\n", ".", "conv", "(", "3", ",", "3", ",", "16", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv2'", ")", "\n", ".", "prelu", "(", "name", "=", "'PReLU2'", ")", "\n", ".", "conv", "(", "3", ",", "3", ",", "32", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv3'", ")", "\n", ".", "prelu", "(", "name", "=", "'PReLU3'", ")", "\n", ".", "conv", "(", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'conv4-1'", ")", "\n", ".", "softmax", "(", "3", ",", "name", "=", "'prob1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'PReLU3'", ")", "#pylint: disable=no-value-for-parameter", "\n", ".", "conv", "(", "1", ",", "1", ",", "4", ",", "1", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'conv4-2'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.RNet.setup": [[233, 250], ["detect_face.RNet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().fc().prelu().fc().softmax", "detect_face.RNet.feed().fc", "detect_face.RNet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().fc().prelu().fc", "detect_face.RNet.feed", "detect_face.RNet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().fc().prelu", "detect_face.RNet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().fc", "detect_face.RNet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu", "detect_face.RNet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv", "detect_face.RNet.feed().conv().prelu().max_pool().conv().prelu().max_pool", "detect_face.RNet.feed().conv().prelu().max_pool().conv().prelu", "detect_face.RNet.feed().conv().prelu().max_pool().conv", "detect_face.RNet.feed().conv().prelu().max_pool", "detect_face.RNet.feed().conv().prelu", "detect_face.RNet.feed().conv", "detect_face.RNet.feed"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.softmax", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.feed", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.max_pool", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.max_pool", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.feed"], ["    ", "def", "setup", "(", "self", ")", ":", "\n", "        ", "(", "self", ".", "feed", "(", "'data'", ")", "#pylint: disable=no-value-for-parameter, no-member", "\n", ".", "conv", "(", "3", ",", "3", ",", "28", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv1'", ")", "\n", ".", "prelu", "(", "name", "=", "'prelu1'", ")", "\n", ".", "max_pool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "name", "=", "'pool1'", ")", "\n", ".", "conv", "(", "3", ",", "3", ",", "48", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv2'", ")", "\n", ".", "prelu", "(", "name", "=", "'prelu2'", ")", "\n", ".", "max_pool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "padding", "=", "'VALID'", ",", "name", "=", "'pool2'", ")", "\n", ".", "conv", "(", "2", ",", "2", ",", "64", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv3'", ")", "\n", ".", "prelu", "(", "name", "=", "'prelu3'", ")", "\n", ".", "fc", "(", "128", ",", "relu", "=", "False", ",", "name", "=", "'conv4'", ")", "\n", ".", "prelu", "(", "name", "=", "'prelu4'", ")", "\n", ".", "fc", "(", "2", ",", "relu", "=", "False", ",", "name", "=", "'conv5-1'", ")", "\n", ".", "softmax", "(", "1", ",", "name", "=", "'prob1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'prelu4'", ")", "#pylint: disable=no-value-for-parameter", "\n", ".", "fc", "(", "4", ",", "relu", "=", "False", ",", "name", "=", "'conv5-2'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.ONet.setup": [[252, 275], ["detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().fc().prelu().fc().softmax", "detect_face.ONet.feed().fc", "detect_face.ONet.feed().fc", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().fc().prelu().fc", "detect_face.ONet.feed", "detect_face.ONet.feed", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().fc().prelu", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().fc", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().max_pool().conv", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu().max_pool", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv().prelu", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool().conv", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu().max_pool", "detect_face.ONet.feed().conv().prelu().max_pool().conv().prelu", "detect_face.ONet.feed().conv().prelu().max_pool().conv", "detect_face.ONet.feed().conv().prelu().max_pool", "detect_face.ONet.feed().conv().prelu", "detect_face.ONet.feed().conv", "detect_face.ONet.feed"], "methods", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.softmax", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.feed", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.feed", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.fc", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.max_pool", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.max_pool", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.max_pool", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.prelu", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.conv", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.feed"], ["    ", "def", "setup", "(", "self", ")", ":", "\n", "        ", "(", "self", ".", "feed", "(", "'data'", ")", "#pylint: disable=no-value-for-parameter, no-member", "\n", ".", "conv", "(", "3", ",", "3", ",", "32", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv1'", ")", "\n", ".", "prelu", "(", "name", "=", "'prelu1'", ")", "\n", ".", "max_pool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "name", "=", "'pool1'", ")", "\n", ".", "conv", "(", "3", ",", "3", ",", "64", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv2'", ")", "\n", ".", "prelu", "(", "name", "=", "'prelu2'", ")", "\n", ".", "max_pool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "padding", "=", "'VALID'", ",", "name", "=", "'pool2'", ")", "\n", ".", "conv", "(", "3", ",", "3", ",", "64", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv3'", ")", "\n", ".", "prelu", "(", "name", "=", "'prelu3'", ")", "\n", ".", "max_pool", "(", "2", ",", "2", ",", "2", ",", "2", ",", "name", "=", "'pool3'", ")", "\n", ".", "conv", "(", "2", ",", "2", ",", "128", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "name", "=", "'conv4'", ")", "\n", ".", "prelu", "(", "name", "=", "'prelu4'", ")", "\n", ".", "fc", "(", "256", ",", "relu", "=", "False", ",", "name", "=", "'conv5'", ")", "\n", ".", "prelu", "(", "name", "=", "'prelu5'", ")", "\n", ".", "fc", "(", "2", ",", "relu", "=", "False", ",", "name", "=", "'conv6-1'", ")", "\n", ".", "softmax", "(", "1", ",", "name", "=", "'prob1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'prelu5'", ")", "#pylint: disable=no-value-for-parameter", "\n", ".", "fc", "(", "4", ",", "relu", "=", "False", ",", "name", "=", "'conv6-2'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'prelu5'", ")", "#pylint: disable=no-value-for-parameter", "\n", ".", "fc", "(", "10", ",", "relu", "=", "False", ",", "name", "=", "'conv6-3'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.layer": [[37, 60], ["kwargs.setdefault", "op", "detect_face..feed", "detect_face..get_unique_name", "len", "RuntimeError", "len", "list"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.feed", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.get_unique_name"], ["def", "layer", "(", "op", ")", ":", "\n", "    ", "'''Decorator for composable network layers.'''", "\n", "\n", "def", "layer_decorated", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# Automatically set a name if not provided.", "\n", "        ", "name", "=", "kwargs", ".", "setdefault", "(", "'name'", ",", "self", ".", "get_unique_name", "(", "op", ".", "__name__", ")", ")", "\n", "# Figure out the layer inputs.", "\n", "if", "len", "(", "self", ".", "terminals", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'No input variables found for layer %s.'", "%", "name", ")", "\n", "", "elif", "len", "(", "self", ".", "terminals", ")", "==", "1", ":", "\n", "            ", "layer_input", "=", "self", ".", "terminals", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "layer_input", "=", "list", "(", "self", ".", "terminals", ")", "\n", "# Perform the operation and get the output.", "\n", "", "layer_output", "=", "op", "(", "self", ",", "layer_input", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "# Add to layer LUT.", "\n", "self", ".", "layers", "[", "name", "]", "=", "layer_output", "\n", "# This output is now the input for the next layer.", "\n", "self", ".", "feed", "(", "layer_output", ")", "\n", "# Return self for chained calls.", "\n", "return", "self", "\n", "\n", "", "return", "layer_decorated", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.create_mtcnn": [[276, 297], ["os.path.split", "tensorflow.variable_scope", "tensorflow.placeholder", "detect_face.PNet", "detect_face.Network.load", "tensorflow.variable_scope", "tensorflow.placeholder", "detect_face.RNet", "detect_face.Network.load", "tensorflow.variable_scope", "tensorflow.placeholder", "detect_face.ONet", "detect_face.Network.load", "sess.run", "sess.run", "sess.run", "os.path.realpath", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.load", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.load", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.Network.load"], ["", "", "def", "create_mtcnn", "(", "sess", ",", "model_path", ")", ":", "\n", "    ", "if", "not", "model_path", ":", "\n", "        ", "model_path", ",", "_", "=", "os", ".", "path", ".", "split", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'pnet'", ")", ":", "\n", "        ", "data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "None", ",", "None", ",", "3", ")", ",", "'input'", ")", "\n", "pnet", "=", "PNet", "(", "{", "'data'", ":", "data", "}", ")", "\n", "pnet", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "'det1.npy'", ")", ",", "sess", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'rnet'", ")", ":", "\n", "        ", "data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "24", ",", "24", ",", "3", ")", ",", "'input'", ")", "\n", "rnet", "=", "RNet", "(", "{", "'data'", ":", "data", "}", ")", "\n", "rnet", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "'det2.npy'", ")", ",", "sess", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'onet'", ")", ":", "\n", "        ", "data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "48", ",", "48", ",", "3", ")", ",", "'input'", ")", "\n", "onet", "=", "ONet", "(", "{", "'data'", ":", "data", "}", ")", "\n", "onet", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "'det3.npy'", ")", ",", "sess", ")", "\n", "\n", "", "pnet_fun", "=", "lambda", "img", ":", "sess", ".", "run", "(", "(", "'pnet/conv4-2/BiasAdd:0'", ",", "'pnet/prob1:0'", ")", ",", "feed_dict", "=", "{", "'pnet/input:0'", ":", "img", "}", ")", "\n", "rnet_fun", "=", "lambda", "img", ":", "sess", ".", "run", "(", "(", "'rnet/conv5-2/conv5-2:0'", ",", "'rnet/prob1:0'", ")", ",", "feed_dict", "=", "{", "'rnet/input:0'", ":", "img", "}", ")", "\n", "onet_fun", "=", "lambda", "img", ":", "sess", ".", "run", "(", "(", "'onet/conv6-2/conv6-2:0'", ",", "'onet/conv6-3/conv6-3:0'", ",", "'onet/prob1:0'", ")", ",", "feed_dict", "=", "{", "'onet/input:0'", ":", "img", "}", ")", "\n", "return", "pnet_fun", ",", "rnet_fun", ",", "onet_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.detect_face": [[299, 419], ["numpy.empty", "numpy.amin", "range", "len", "int", "int", "detect_face.imresample", "numpy.expand_dims", "numpy.transpose", "pnet", "numpy.transpose", "numpy.transpose", "detect_face.generateBoundingBox", "detect_face.nms", "detect_face.nms", "numpy.transpose", "detect_face.rerec", "numpy.fix().astype", "detect_face.pad", "numpy.zeros", "range", "numpy.transpose", "rnet", "numpy.transpose", "numpy.transpose", "numpy.where", "numpy.hstack", "numpy.fix().astype", "detect_face.pad", "numpy.zeros", "range", "numpy.transpose", "onet", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.where", "numpy.hstack", "numpy.ceil", "numpy.ceil", "out1[].copy", "out0[].copy", "boxes.copy", "numpy.append", "bbreg.copy", "numpy.vstack", "bbreg.copy", "bbreg.copy", "numpy.zeros", "detect_face.nms", "detect_face.bbreg", "detect_face.rerec", "bbreg.copy", "numpy.zeros", "detect_face.bbreg", "detect_face.nms", "numpy.power", "numpy.fix", "detect_face.imresample", "numpy.empty", "total_boxes[].copy", "numpy.expand_dims", "bbreg.copy", "numpy.transpose", "bbreg.copy", "numpy.fix", "detect_face.imresample", "numpy.empty", "total_boxes[].copy", "numpy.expand_dims", "numpy.tile", "numpy.tile", "bbreg.copy", "numpy.transpose", "bbreg.copy", "int", "int", "score[].copy", "int", "int", "score[].copy", "numpy.tile", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.imresample", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.generateBoundingBox", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.rerec", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.pad", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.pad", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.bbreg", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.rerec", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.bbreg", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.imresample", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.imresample"], ["", "def", "detect_face", "(", "img", ",", "minsize", ",", "pnet", ",", "rnet", ",", "onet", ",", "threshold", ",", "factor", ")", ":", "\n", "# im: input image", "\n", "# minsize: minimum of faces' size", "\n", "# pnet, rnet, onet: caffemodel", "\n", "# threshold: threshold=[th1 th2 th3], th1-3 are three steps's threshold", "\n", "# fastresize: resize img from last scale (using in high-resolution images) if fastresize==true", "\n", "    ", "factor_count", "=", "0", "\n", "total_boxes", "=", "np", ".", "empty", "(", "(", "0", ",", "9", ")", ")", "\n", "points", "=", "[", "]", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "minl", "=", "np", ".", "amin", "(", "[", "h", ",", "w", "]", ")", "\n", "m", "=", "12.0", "/", "minsize", "\n", "minl", "=", "minl", "*", "m", "\n", "# creat scale pyramid", "\n", "scales", "=", "[", "]", "\n", "while", "minl", ">=", "12", ":", "\n", "        ", "scales", "+=", "[", "m", "*", "np", ".", "power", "(", "factor", ",", "factor_count", ")", "]", "\n", "minl", "=", "minl", "*", "factor", "\n", "factor_count", "+=", "1", "\n", "\n", "# first stage", "\n", "", "for", "j", "in", "range", "(", "len", "(", "scales", ")", ")", ":", "\n", "        ", "scale", "=", "scales", "[", "j", "]", "\n", "hs", "=", "int", "(", "np", ".", "ceil", "(", "h", "*", "scale", ")", ")", "\n", "ws", "=", "int", "(", "np", ".", "ceil", "(", "w", "*", "scale", ")", ")", "\n", "im_data", "=", "imresample", "(", "img", ",", "(", "hs", ",", "ws", ")", ")", "\n", "im_data", "=", "(", "im_data", "-", "127.5", ")", "*", "0.0078125", "\n", "img_x", "=", "np", ".", "expand_dims", "(", "im_data", ",", "0", ")", "\n", "img_y", "=", "np", ".", "transpose", "(", "img_x", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "out", "=", "pnet", "(", "img_y", ")", "\n", "out0", "=", "np", ".", "transpose", "(", "out", "[", "0", "]", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "out1", "=", "np", ".", "transpose", "(", "out", "[", "1", "]", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "\n", "boxes", ",", "_", "=", "generateBoundingBox", "(", "out1", "[", "0", ",", ":", ",", ":", ",", "1", "]", ".", "copy", "(", ")", ",", "out0", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "copy", "(", ")", ",", "scale", ",", "threshold", "[", "0", "]", ")", "\n", "\n", "# inter-scale nms", "\n", "pick", "=", "nms", "(", "boxes", ".", "copy", "(", ")", ",", "0.5", ",", "'Union'", ")", "\n", "if", "boxes", ".", "size", ">", "0", "and", "pick", ".", "size", ">", "0", ":", "\n", "            ", "boxes", "=", "boxes", "[", "pick", ",", ":", "]", "\n", "total_boxes", "=", "np", ".", "append", "(", "total_boxes", ",", "boxes", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "numbox", "=", "total_boxes", ".", "shape", "[", "0", "]", "\n", "if", "numbox", ">", "0", ":", "\n", "        ", "pick", "=", "nms", "(", "total_boxes", ".", "copy", "(", ")", ",", "0.7", ",", "'Union'", ")", "\n", "total_boxes", "=", "total_boxes", "[", "pick", ",", ":", "]", "\n", "regw", "=", "total_boxes", "[", ":", ",", "2", "]", "-", "total_boxes", "[", ":", ",", "0", "]", "\n", "regh", "=", "total_boxes", "[", ":", ",", "3", "]", "-", "total_boxes", "[", ":", ",", "1", "]", "\n", "qq1", "=", "total_boxes", "[", ":", ",", "0", "]", "+", "total_boxes", "[", ":", ",", "5", "]", "*", "regw", "\n", "qq2", "=", "total_boxes", "[", ":", ",", "1", "]", "+", "total_boxes", "[", ":", ",", "6", "]", "*", "regh", "\n", "qq3", "=", "total_boxes", "[", ":", ",", "2", "]", "+", "total_boxes", "[", ":", ",", "7", "]", "*", "regw", "\n", "qq4", "=", "total_boxes", "[", ":", ",", "3", "]", "+", "total_boxes", "[", ":", ",", "8", "]", "*", "regh", "\n", "total_boxes", "=", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "qq1", ",", "qq2", ",", "qq3", ",", "qq4", ",", "total_boxes", "[", ":", ",", "4", "]", "]", ")", ")", "\n", "total_boxes", "=", "rerec", "(", "total_boxes", ".", "copy", "(", ")", ")", "\n", "total_boxes", "[", ":", ",", "0", ":", "4", "]", "=", "np", ".", "fix", "(", "total_boxes", "[", ":", ",", "0", ":", "4", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "dy", ",", "edy", ",", "dx", ",", "edx", ",", "y", ",", "ey", ",", "x", ",", "ex", ",", "tmpw", ",", "tmph", "=", "pad", "(", "total_boxes", ".", "copy", "(", ")", ",", "w", ",", "h", ")", "\n", "\n", "", "numbox", "=", "total_boxes", ".", "shape", "[", "0", "]", "\n", "if", "numbox", ">", "0", ":", "\n", "# second stage", "\n", "        ", "tempimg", "=", "np", ".", "zeros", "(", "(", "24", ",", "24", ",", "3", ",", "numbox", ")", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "numbox", ")", ":", "\n", "            ", "tmp", "=", "np", ".", "zeros", "(", "(", "int", "(", "tmph", "[", "k", "]", ")", ",", "int", "(", "tmpw", "[", "k", "]", ")", ",", "3", ")", ")", "\n", "tmp", "[", "dy", "[", "k", "]", "-", "1", ":", "edy", "[", "k", "]", ",", "dx", "[", "k", "]", "-", "1", ":", "edx", "[", "k", "]", ",", ":", "]", "=", "img", "[", "y", "[", "k", "]", "-", "1", ":", "ey", "[", "k", "]", ",", "x", "[", "k", "]", "-", "1", ":", "ex", "[", "k", "]", ",", ":", "]", "\n", "if", "tmp", ".", "shape", "[", "0", "]", ">", "0", "and", "tmp", ".", "shape", "[", "1", "]", ">", "0", "or", "tmp", ".", "shape", "[", "0", "]", "==", "0", "and", "tmp", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "tempimg", "[", ":", ",", ":", ",", ":", ",", "k", "]", "=", "imresample", "(", "tmp", ",", "(", "24", ",", "24", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "empty", "(", ")", "\n", "", "", "tempimg", "=", "(", "tempimg", "-", "127.5", ")", "*", "0.0078125", "\n", "tempimg1", "=", "np", ".", "transpose", "(", "tempimg", ",", "(", "3", ",", "1", ",", "0", ",", "2", ")", ")", "\n", "out", "=", "rnet", "(", "tempimg1", ")", "\n", "out0", "=", "np", ".", "transpose", "(", "out", "[", "0", "]", ")", "\n", "out1", "=", "np", ".", "transpose", "(", "out", "[", "1", "]", ")", "\n", "score", "=", "out1", "[", "1", ",", ":", "]", "\n", "ipass", "=", "np", ".", "where", "(", "score", ">", "threshold", "[", "1", "]", ")", "\n", "total_boxes", "=", "np", ".", "hstack", "(", "[", "total_boxes", "[", "ipass", "[", "0", "]", ",", "0", ":", "4", "]", ".", "copy", "(", ")", ",", "np", ".", "expand_dims", "(", "score", "[", "ipass", "]", ".", "copy", "(", ")", ",", "1", ")", "]", ")", "\n", "mv", "=", "out0", "[", ":", ",", "ipass", "[", "0", "]", "]", "\n", "if", "total_boxes", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "pick", "=", "nms", "(", "total_boxes", ",", "0.7", ",", "'Union'", ")", "\n", "total_boxes", "=", "total_boxes", "[", "pick", ",", ":", "]", "\n", "total_boxes", "=", "bbreg", "(", "total_boxes", ".", "copy", "(", ")", ",", "np", ".", "transpose", "(", "mv", "[", ":", ",", "pick", "]", ")", ")", "\n", "total_boxes", "=", "rerec", "(", "total_boxes", ".", "copy", "(", ")", ")", "\n", "\n", "", "", "numbox", "=", "total_boxes", ".", "shape", "[", "0", "]", "\n", "if", "numbox", ">", "0", ":", "\n", "# third stage", "\n", "        ", "total_boxes", "=", "np", ".", "fix", "(", "total_boxes", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "dy", ",", "edy", ",", "dx", ",", "edx", ",", "y", ",", "ey", ",", "x", ",", "ex", ",", "tmpw", ",", "tmph", "=", "pad", "(", "total_boxes", ".", "copy", "(", ")", ",", "w", ",", "h", ")", "\n", "tempimg", "=", "np", ".", "zeros", "(", "(", "48", ",", "48", ",", "3", ",", "numbox", ")", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "numbox", ")", ":", "\n", "            ", "tmp", "=", "np", ".", "zeros", "(", "(", "int", "(", "tmph", "[", "k", "]", ")", ",", "int", "(", "tmpw", "[", "k", "]", ")", ",", "3", ")", ")", "\n", "tmp", "[", "dy", "[", "k", "]", "-", "1", ":", "edy", "[", "k", "]", ",", "dx", "[", "k", "]", "-", "1", ":", "edx", "[", "k", "]", ",", ":", "]", "=", "img", "[", "y", "[", "k", "]", "-", "1", ":", "ey", "[", "k", "]", ",", "x", "[", "k", "]", "-", "1", ":", "ex", "[", "k", "]", ",", ":", "]", "\n", "if", "tmp", ".", "shape", "[", "0", "]", ">", "0", "and", "tmp", ".", "shape", "[", "1", "]", ">", "0", "or", "tmp", ".", "shape", "[", "0", "]", "==", "0", "and", "tmp", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "tempimg", "[", ":", ",", ":", ",", ":", ",", "k", "]", "=", "imresample", "(", "tmp", ",", "(", "48", ",", "48", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "empty", "(", ")", "\n", "", "", "tempimg", "=", "(", "tempimg", "-", "127.5", ")", "*", "0.0078125", "\n", "tempimg1", "=", "np", ".", "transpose", "(", "tempimg", ",", "(", "3", ",", "1", ",", "0", ",", "2", ")", ")", "\n", "out", "=", "onet", "(", "tempimg1", ")", "\n", "out0", "=", "np", ".", "transpose", "(", "out", "[", "0", "]", ")", "\n", "out1", "=", "np", ".", "transpose", "(", "out", "[", "1", "]", ")", "\n", "out2", "=", "np", ".", "transpose", "(", "out", "[", "2", "]", ")", "\n", "score", "=", "out2", "[", "1", ",", ":", "]", "\n", "points", "=", "out1", "\n", "ipass", "=", "np", ".", "where", "(", "score", ">", "threshold", "[", "2", "]", ")", "\n", "points", "=", "points", "[", ":", ",", "ipass", "[", "0", "]", "]", "\n", "total_boxes", "=", "np", ".", "hstack", "(", "[", "total_boxes", "[", "ipass", "[", "0", "]", ",", "0", ":", "4", "]", ".", "copy", "(", ")", ",", "np", ".", "expand_dims", "(", "score", "[", "ipass", "]", ".", "copy", "(", ")", ",", "1", ")", "]", ")", "\n", "mv", "=", "out0", "[", ":", ",", "ipass", "[", "0", "]", "]", "\n", "\n", "w", "=", "total_boxes", "[", ":", ",", "2", "]", "-", "total_boxes", "[", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "total_boxes", "[", ":", ",", "3", "]", "-", "total_boxes", "[", ":", ",", "1", "]", "+", "1", "\n", "points", "[", "0", ":", "5", ",", ":", "]", "=", "np", ".", "tile", "(", "w", ",", "(", "5", ",", "1", ")", ")", "*", "points", "[", "0", ":", "5", ",", ":", "]", "+", "np", ".", "tile", "(", "total_boxes", "[", ":", ",", "0", "]", ",", "(", "5", ",", "1", ")", ")", "-", "1", "\n", "points", "[", "5", ":", "10", ",", ":", "]", "=", "np", ".", "tile", "(", "h", ",", "(", "5", ",", "1", ")", ")", "*", "points", "[", "5", ":", "10", ",", ":", "]", "+", "np", ".", "tile", "(", "total_boxes", "[", ":", ",", "1", "]", ",", "(", "5", ",", "1", ")", ")", "-", "1", "\n", "if", "total_boxes", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "total_boxes", "=", "bbreg", "(", "total_boxes", ".", "copy", "(", ")", ",", "np", ".", "transpose", "(", "mv", ")", ")", "\n", "pick", "=", "nms", "(", "total_boxes", ".", "copy", "(", ")", ",", "0.7", ",", "'Min'", ")", "\n", "total_boxes", "=", "total_boxes", "[", "pick", ",", ":", "]", "\n", "points", "=", "points", "[", ":", ",", "pick", "]", "\n", "\n", "", "", "return", "total_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.detect_face_force": [[420, 490], ["numpy.zeros", "detect_face.pad", "numpy.zeros", "range", "numpy.transpose", "rnet", "numpy.transpose", "numpy.transpose", "numpy.where", "numpy.hstack", "numpy.fix().astype", "detect_face.pad", "numpy.zeros", "range", "numpy.transpose", "onet", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.where", "numpy.hstack", "bbreg.copy", "numpy.zeros", "detect_face.nms", "detect_face.bbreg", "detect_face.rerec", "bbreg.copy", "numpy.zeros", "detect_face.bbreg", "detect_face.nms", "detect_face.imresample", "numpy.empty", "total_boxes[].copy", "numpy.expand_dims", "bbreg.copy", "numpy.transpose", "bbreg.copy", "numpy.fix", "detect_face.imresample", "numpy.empty", "total_boxes[].copy", "numpy.expand_dims", "numpy.tile", "numpy.tile", "bbreg.copy", "numpy.transpose", "bbreg.copy", "int", "int", "score[].copy", "int", "int", "score[].copy", "numpy.tile", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.pad", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.pad", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.bbreg", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.rerec", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.bbreg", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.imresample", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.imresample"], ["", "def", "detect_face_force", "(", "img", ",", "bbox", ",", "pnet", ",", "rnet", ",", "onet", ")", ":", "\n", "    ", "total_boxes", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "total_boxes", "[", "0", ",", "0", ":", "4", "]", "=", "bbox", "\n", "threshold", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "numbox", "=", "total_boxes", ".", "shape", "[", "0", "]", "\n", "if", "numbox", ">", "0", ":", "\n", "        ", "dy", ",", "edy", ",", "dx", ",", "edx", ",", "y", ",", "ey", ",", "x", ",", "ex", ",", "tmpw", ",", "tmph", "=", "pad", "(", "total_boxes", ".", "copy", "(", ")", ",", "w", ",", "h", ")", "\n", "# second stage", "\n", "tempimg", "=", "np", ".", "zeros", "(", "(", "24", ",", "24", ",", "3", ",", "numbox", ")", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "numbox", ")", ":", "\n", "            ", "tmp", "=", "np", ".", "zeros", "(", "(", "int", "(", "tmph", "[", "k", "]", ")", ",", "int", "(", "tmpw", "[", "k", "]", ")", ",", "3", ")", ")", "\n", "tmp", "[", "dy", "[", "k", "]", "-", "1", ":", "edy", "[", "k", "]", ",", "dx", "[", "k", "]", "-", "1", ":", "edx", "[", "k", "]", ",", ":", "]", "=", "img", "[", "y", "[", "k", "]", "-", "1", ":", "ey", "[", "k", "]", ",", "x", "[", "k", "]", "-", "1", ":", "ex", "[", "k", "]", ",", ":", "]", "\n", "if", "tmp", ".", "shape", "[", "0", "]", ">", "0", "and", "tmp", ".", "shape", "[", "1", "]", ">", "0", "or", "tmp", ".", "shape", "[", "0", "]", "==", "0", "and", "tmp", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "tempimg", "[", ":", ",", ":", ",", ":", ",", "k", "]", "=", "imresample", "(", "tmp", ",", "(", "24", ",", "24", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "empty", "(", ")", "\n", "", "", "tempimg", "=", "(", "tempimg", "-", "127.5", ")", "*", "0.0078125", "\n", "tempimg1", "=", "np", ".", "transpose", "(", "tempimg", ",", "(", "3", ",", "1", ",", "0", ",", "2", ")", ")", "\n", "out", "=", "rnet", "(", "tempimg1", ")", "\n", "out0", "=", "np", ".", "transpose", "(", "out", "[", "0", "]", ")", "\n", "out1", "=", "np", ".", "transpose", "(", "out", "[", "1", "]", ")", "\n", "score", "=", "out1", "[", "1", ",", ":", "]", "\n", "ipass", "=", "np", ".", "where", "(", "score", ">", "threshold", "[", "1", "]", ")", "\n", "total_boxes", "=", "np", ".", "hstack", "(", "[", "total_boxes", "[", "ipass", "[", "0", "]", ",", "0", ":", "4", "]", ".", "copy", "(", ")", ",", "np", ".", "expand_dims", "(", "score", "[", "ipass", "]", ".", "copy", "(", ")", ",", "1", ")", "]", ")", "\n", "mv", "=", "out0", "[", ":", ",", "ipass", "[", "0", "]", "]", "\n", "if", "total_boxes", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "pick", "=", "nms", "(", "total_boxes", ",", "0.7", ",", "'Union'", ")", "\n", "total_boxes", "=", "total_boxes", "[", "pick", ",", ":", "]", "\n", "total_boxes", "=", "bbreg", "(", "total_boxes", ".", "copy", "(", ")", ",", "np", ".", "transpose", "(", "mv", "[", ":", ",", "pick", "]", ")", ")", "\n", "total_boxes", "=", "rerec", "(", "total_boxes", ".", "copy", "(", ")", ")", "\n", "\n", "", "", "numbox", "=", "total_boxes", ".", "shape", "[", "0", "]", "\n", "if", "numbox", ">", "0", ":", "\n", "# third stage", "\n", "        ", "total_boxes", "=", "np", ".", "fix", "(", "total_boxes", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "dy", ",", "edy", ",", "dx", ",", "edx", ",", "y", ",", "ey", ",", "x", ",", "ex", ",", "tmpw", ",", "tmph", "=", "pad", "(", "total_boxes", ".", "copy", "(", ")", ",", "w", ",", "h", ")", "\n", "tempimg", "=", "np", ".", "zeros", "(", "(", "48", ",", "48", ",", "3", ",", "numbox", ")", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "numbox", ")", ":", "\n", "            ", "tmp", "=", "np", ".", "zeros", "(", "(", "int", "(", "tmph", "[", "k", "]", ")", ",", "int", "(", "tmpw", "[", "k", "]", ")", ",", "3", ")", ")", "\n", "tmp", "[", "dy", "[", "k", "]", "-", "1", ":", "edy", "[", "k", "]", ",", "dx", "[", "k", "]", "-", "1", ":", "edx", "[", "k", "]", ",", ":", "]", "=", "img", "[", "y", "[", "k", "]", "-", "1", ":", "ey", "[", "k", "]", ",", "x", "[", "k", "]", "-", "1", ":", "ex", "[", "k", "]", ",", ":", "]", "\n", "if", "tmp", ".", "shape", "[", "0", "]", ">", "0", "and", "tmp", ".", "shape", "[", "1", "]", ">", "0", "or", "tmp", ".", "shape", "[", "0", "]", "==", "0", "and", "tmp", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "tempimg", "[", ":", ",", ":", ",", ":", ",", "k", "]", "=", "imresample", "(", "tmp", ",", "(", "48", ",", "48", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "empty", "(", ")", "\n", "", "", "tempimg", "=", "(", "tempimg", "-", "127.5", ")", "*", "0.0078125", "\n", "tempimg1", "=", "np", ".", "transpose", "(", "tempimg", ",", "(", "3", ",", "1", ",", "0", ",", "2", ")", ")", "\n", "out", "=", "onet", "(", "tempimg1", ")", "\n", "out0", "=", "np", ".", "transpose", "(", "out", "[", "0", "]", ")", "\n", "out1", "=", "np", ".", "transpose", "(", "out", "[", "1", "]", ")", "\n", "out2", "=", "np", ".", "transpose", "(", "out", "[", "2", "]", ")", "\n", "score", "=", "out2", "[", "1", ",", ":", "]", "\n", "points", "=", "out1", "\n", "ipass", "=", "np", ".", "where", "(", "score", ">", "threshold", "[", "2", "]", ")", "\n", "points", "=", "points", "[", ":", ",", "ipass", "[", "0", "]", "]", "\n", "total_boxes", "=", "np", ".", "hstack", "(", "[", "total_boxes", "[", "ipass", "[", "0", "]", ",", "0", ":", "4", "]", ".", "copy", "(", ")", ",", "np", ".", "expand_dims", "(", "score", "[", "ipass", "]", ".", "copy", "(", ")", ",", "1", ")", "]", ")", "\n", "mv", "=", "out0", "[", ":", ",", "ipass", "[", "0", "]", "]", "\n", "\n", "w", "=", "total_boxes", "[", ":", ",", "2", "]", "-", "total_boxes", "[", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "total_boxes", "[", ":", ",", "3", "]", "-", "total_boxes", "[", ":", ",", "1", "]", "+", "1", "\n", "points", "[", "0", ":", "5", ",", ":", "]", "=", "np", ".", "tile", "(", "w", ",", "(", "5", ",", "1", ")", ")", "*", "points", "[", "0", ":", "5", ",", ":", "]", "+", "np", ".", "tile", "(", "total_boxes", "[", ":", ",", "0", "]", ",", "(", "5", ",", "1", ")", ")", "-", "1", "\n", "points", "[", "5", ":", "10", ",", ":", "]", "=", "np", ".", "tile", "(", "h", ",", "(", "5", ",", "1", ")", ")", "*", "points", "[", "5", ":", "10", ",", ":", "]", "+", "np", ".", "tile", "(", "total_boxes", "[", ":", ",", "1", "]", ",", "(", "5", ",", "1", ")", ")", "-", "1", "\n", "if", "total_boxes", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "total_boxes", "=", "bbreg", "(", "total_boxes", ".", "copy", "(", ")", ",", "np", ".", "transpose", "(", "mv", ")", ")", "\n", "pick", "=", "nms", "(", "total_boxes", ".", "copy", "(", ")", ",", "0.7", ",", "'Min'", ")", "\n", "total_boxes", "=", "total_boxes", "[", "pick", ",", ":", "]", "\n", "points", "=", "points", "[", ":", ",", "pick", "]", "\n", "\n", "", "", "return", "total_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.bulk_detect_face": [[491, 711], ["range", "enumerate", "enumerate", "enumerate", "numpy.empty", "enumerate", "rnet", "numpy.transpose", "numpy.transpose", "enumerate", "numpy.empty", "enumerate", "onet", "numpy.transpose", "numpy.transpose", "numpy.transpose", "enumerate", "len", "len", "len", "int", "numpy.amin", "pnet", "range", "numpy.where", "numpy.hstack", "numpy.where", "numpy.hstack", "numpy.empty", "all_scales[].append", "int", "int", "detect_face.imresample", "numpy.transpose", "images_obj_per_resolution[].append", "len", "numpy.transpose", "numpy.transpose", "detect_face.generateBoundingBox", "detect_face.nms", "detect_face.nms", "numpy.transpose", "detect_face.rerec", "numpy.fix().astype", "detect_face.pad", "numpy.zeros", "numpy.append", "detect_face.nms", "detect_face.bbreg", "detect_face.rerec", "numpy.append", "ret.append", "detect_face.bbreg", "detect_face.nms", "ret.append", "ret.append", "numpy.minimum", "numpy.ceil", "numpy.ceil", "out1[].copy", "out0[].copy", "boxes.copy", "numpy.append", "image_obj[].copy", "numpy.vstack", "image_obj[].copy", "image_obj[].copy", "range", "numpy.transpose", "[].copy", "numpy.expand_dims", "image_obj[].copy", "numpy.transpose", "image_obj[].copy", "numpy.zeros", "numpy.fix().astype", "detect_face.pad", "range", "numpy.transpose", "[].copy", "numpy.expand_dims", "numpy.tile", "numpy.tile", "image_obj[].copy", "numpy.transpose", "image_obj[].copy", "numpy.power", "numpy.fix", "numpy.zeros", "score_per_image[].copy", "image_obj[].copy", "numpy.zeros", "score_per_image[].copy", "numpy.tile", "numpy.tile", "detect_face.imresample", "numpy.empty", "numpy.fix", "detect_face.imresample", "numpy.empty", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.imresample", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.generateBoundingBox", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.rerec", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.pad", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.bbreg", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.rerec", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.bbreg", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.pad", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.imresample", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.imresample"], ["", "def", "bulk_detect_face", "(", "images", ",", "detection_window_size_ratio", ",", "pnet", ",", "rnet", ",", "onet", ",", "threshold", ",", "factor", ")", ":", "\n", "# im: input image", "\n", "# minsize: minimum of faces' size", "\n", "# pnet, rnet, onet: caffemodel", "\n", "# threshold: threshold=[th1 th2 th3], th1-3 are three steps's threshold [0-1]", "\n", "\n", "    ", "all_scales", "=", "[", "None", "]", "*", "len", "(", "images", ")", "\n", "images_with_boxes", "=", "[", "None", "]", "*", "len", "(", "images", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "        ", "images_with_boxes", "[", "i", "]", "=", "{", "'total_boxes'", ":", "np", ".", "empty", "(", "(", "0", ",", "9", ")", ")", "}", "\n", "\n", "# create scale pyramid", "\n", "", "for", "index", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "all_scales", "[", "index", "]", "=", "[", "]", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "minsize", "=", "int", "(", "detection_window_size_ratio", "*", "np", ".", "minimum", "(", "w", ",", "h", ")", ")", "\n", "factor_count", "=", "0", "\n", "minl", "=", "np", ".", "amin", "(", "[", "h", ",", "w", "]", ")", "\n", "if", "minsize", "<=", "12", ":", "\n", "            ", "minsize", "=", "12", "\n", "\n", "", "m", "=", "12.0", "/", "minsize", "\n", "minl", "=", "minl", "*", "m", "\n", "while", "minl", ">=", "12", ":", "\n", "            ", "all_scales", "[", "index", "]", ".", "append", "(", "m", "*", "np", ".", "power", "(", "factor", ",", "factor_count", ")", ")", "\n", "minl", "=", "minl", "*", "factor", "\n", "factor_count", "+=", "1", "\n", "\n", "# # # # # # # # # # # # #", "\n", "# first stage - fast proposal network (pnet) to obtain face candidates", "\n", "# # # # # # # # # # # # #", "\n", "\n", "", "", "images_obj_per_resolution", "=", "{", "}", "\n", "\n", "# TODO: use some type of rounding to number module 8 to increase probability that pyramid images will have the same resolution across input images", "\n", "\n", "for", "index", ",", "scales", "in", "enumerate", "(", "all_scales", ")", ":", "\n", "        ", "h", "=", "images", "[", "index", "]", ".", "shape", "[", "0", "]", "\n", "w", "=", "images", "[", "index", "]", ".", "shape", "[", "1", "]", "\n", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "hs", "=", "int", "(", "np", ".", "ceil", "(", "h", "*", "scale", ")", ")", "\n", "ws", "=", "int", "(", "np", ".", "ceil", "(", "w", "*", "scale", ")", ")", "\n", "\n", "if", "(", "ws", ",", "hs", ")", "not", "in", "images_obj_per_resolution", ":", "\n", "                ", "images_obj_per_resolution", "[", "(", "ws", ",", "hs", ")", "]", "=", "[", "]", "\n", "\n", "", "im_data", "=", "imresample", "(", "images", "[", "index", "]", ",", "(", "hs", ",", "ws", ")", ")", "\n", "im_data", "=", "(", "im_data", "-", "127.5", ")", "*", "0.0078125", "\n", "img_y", "=", "np", ".", "transpose", "(", "im_data", ",", "(", "1", ",", "0", ",", "2", ")", ")", "# caffe uses different dimensions ordering", "\n", "images_obj_per_resolution", "[", "(", "ws", ",", "hs", ")", "]", ".", "append", "(", "{", "'scale'", ":", "scale", ",", "'image'", ":", "img_y", ",", "'index'", ":", "index", "}", ")", "\n", "\n", "", "", "for", "resolution", "in", "images_obj_per_resolution", ":", "\n", "        ", "images_per_resolution", "=", "[", "i", "[", "'image'", "]", "for", "i", "in", "images_obj_per_resolution", "[", "resolution", "]", "]", "\n", "outs", "=", "pnet", "(", "images_per_resolution", ")", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "outs", "[", "0", "]", ")", ")", ":", "\n", "            ", "scale", "=", "images_obj_per_resolution", "[", "resolution", "]", "[", "index", "]", "[", "'scale'", "]", "\n", "image_index", "=", "images_obj_per_resolution", "[", "resolution", "]", "[", "index", "]", "[", "'index'", "]", "\n", "out0", "=", "np", ".", "transpose", "(", "outs", "[", "0", "]", "[", "index", "]", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "out1", "=", "np", ".", "transpose", "(", "outs", "[", "1", "]", "[", "index", "]", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "boxes", ",", "_", "=", "generateBoundingBox", "(", "out1", "[", ":", ",", ":", ",", "1", "]", ".", "copy", "(", ")", ",", "out0", "[", ":", ",", ":", ",", ":", "]", ".", "copy", "(", ")", ",", "scale", ",", "threshold", "[", "0", "]", ")", "\n", "\n", "# inter-scale nms", "\n", "pick", "=", "nms", "(", "boxes", ".", "copy", "(", ")", ",", "0.5", ",", "'Union'", ")", "\n", "if", "boxes", ".", "size", ">", "0", "and", "pick", ".", "size", ">", "0", ":", "\n", "                ", "boxes", "=", "boxes", "[", "pick", ",", ":", "]", "\n", "images_with_boxes", "[", "image_index", "]", "[", "'total_boxes'", "]", "=", "np", ".", "append", "(", "images_with_boxes", "[", "image_index", "]", "[", "'total_boxes'", "]", ",", "\n", "boxes", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "", "for", "index", ",", "image_obj", "in", "enumerate", "(", "images_with_boxes", ")", ":", "\n", "        ", "numbox", "=", "image_obj", "[", "'total_boxes'", "]", ".", "shape", "[", "0", "]", "\n", "if", "numbox", ">", "0", ":", "\n", "            ", "h", "=", "images", "[", "index", "]", ".", "shape", "[", "0", "]", "\n", "w", "=", "images", "[", "index", "]", ".", "shape", "[", "1", "]", "\n", "pick", "=", "nms", "(", "image_obj", "[", "'total_boxes'", "]", ".", "copy", "(", ")", ",", "0.7", ",", "'Union'", ")", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "image_obj", "[", "'total_boxes'", "]", "[", "pick", ",", ":", "]", "\n", "regw", "=", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "2", "]", "-", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "0", "]", "\n", "regh", "=", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "3", "]", "-", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "1", "]", "\n", "qq1", "=", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "0", "]", "+", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "5", "]", "*", "regw", "\n", "qq2", "=", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "1", "]", "+", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "6", "]", "*", "regh", "\n", "qq3", "=", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "2", "]", "+", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "7", "]", "*", "regw", "\n", "qq4", "=", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "3", "]", "+", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "8", "]", "*", "regh", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "qq1", ",", "qq2", ",", "qq3", ",", "qq4", ",", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "4", "]", "]", ")", ")", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "rerec", "(", "image_obj", "[", "'total_boxes'", "]", ".", "copy", "(", ")", ")", "\n", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "0", ":", "4", "]", "=", "np", ".", "fix", "(", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "0", ":", "4", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "dy", ",", "edy", ",", "dx", ",", "edx", ",", "y", ",", "ey", ",", "x", ",", "ex", ",", "tmpw", ",", "tmph", "=", "pad", "(", "image_obj", "[", "'total_boxes'", "]", ".", "copy", "(", ")", ",", "w", ",", "h", ")", "\n", "\n", "numbox", "=", "image_obj", "[", "'total_boxes'", "]", ".", "shape", "[", "0", "]", "\n", "tempimg", "=", "np", ".", "zeros", "(", "(", "24", ",", "24", ",", "3", ",", "numbox", ")", ")", "\n", "\n", "if", "numbox", ">", "0", ":", "\n", "                ", "for", "k", "in", "range", "(", "0", ",", "numbox", ")", ":", "\n", "                    ", "tmp", "=", "np", ".", "zeros", "(", "(", "int", "(", "tmph", "[", "k", "]", ")", ",", "int", "(", "tmpw", "[", "k", "]", ")", ",", "3", ")", ")", "\n", "tmp", "[", "dy", "[", "k", "]", "-", "1", ":", "edy", "[", "k", "]", ",", "dx", "[", "k", "]", "-", "1", ":", "edx", "[", "k", "]", ",", ":", "]", "=", "images", "[", "index", "]", "[", "y", "[", "k", "]", "-", "1", ":", "ey", "[", "k", "]", ",", "x", "[", "k", "]", "-", "1", ":", "ex", "[", "k", "]", ",", ":", "]", "\n", "if", "tmp", ".", "shape", "[", "0", "]", ">", "0", "and", "tmp", ".", "shape", "[", "1", "]", ">", "0", "or", "tmp", ".", "shape", "[", "0", "]", "==", "0", "and", "tmp", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                        ", "tempimg", "[", ":", ",", ":", ",", ":", ",", "k", "]", "=", "imresample", "(", "tmp", ",", "(", "24", ",", "24", ")", ")", "\n", "", "else", ":", "\n", "                        ", "return", "np", ".", "empty", "(", ")", "\n", "\n", "", "", "tempimg", "=", "(", "tempimg", "-", "127.5", ")", "*", "0.0078125", "\n", "image_obj", "[", "'rnet_input'", "]", "=", "np", ".", "transpose", "(", "tempimg", ",", "(", "3", ",", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "# # # # # # # # # # # # #", "\n", "# second stage - refinement of face candidates with rnet", "\n", "# # # # # # # # # # # # #", "\n", "\n", "", "", "", "bulk_rnet_input", "=", "np", ".", "empty", "(", "(", "0", ",", "24", ",", "24", ",", "3", ")", ")", "\n", "for", "index", ",", "image_obj", "in", "enumerate", "(", "images_with_boxes", ")", ":", "\n", "        ", "if", "'rnet_input'", "in", "image_obj", ":", "\n", "            ", "bulk_rnet_input", "=", "np", ".", "append", "(", "bulk_rnet_input", ",", "image_obj", "[", "'rnet_input'", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "out", "=", "rnet", "(", "bulk_rnet_input", ")", "\n", "out0", "=", "np", ".", "transpose", "(", "out", "[", "0", "]", ")", "\n", "out1", "=", "np", ".", "transpose", "(", "out", "[", "1", "]", ")", "\n", "score", "=", "out1", "[", "1", ",", ":", "]", "\n", "\n", "i", "=", "0", "\n", "for", "index", ",", "image_obj", "in", "enumerate", "(", "images_with_boxes", ")", ":", "\n", "        ", "if", "'rnet_input'", "not", "in", "image_obj", ":", "\n", "            ", "continue", "\n", "\n", "", "rnet_input_count", "=", "image_obj", "[", "'rnet_input'", "]", ".", "shape", "[", "0", "]", "\n", "score_per_image", "=", "score", "[", "i", ":", "i", "+", "rnet_input_count", "]", "\n", "out0_per_image", "=", "out0", "[", ":", ",", "i", ":", "i", "+", "rnet_input_count", "]", "\n", "\n", "ipass", "=", "np", ".", "where", "(", "score_per_image", ">", "threshold", "[", "1", "]", ")", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "np", ".", "hstack", "(", "[", "image_obj", "[", "'total_boxes'", "]", "[", "ipass", "[", "0", "]", ",", "0", ":", "4", "]", ".", "copy", "(", ")", ",", "\n", "np", ".", "expand_dims", "(", "score_per_image", "[", "ipass", "]", ".", "copy", "(", ")", ",", "1", ")", "]", ")", "\n", "\n", "mv", "=", "out0_per_image", "[", ":", ",", "ipass", "[", "0", "]", "]", "\n", "\n", "if", "image_obj", "[", "'total_boxes'", "]", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "h", "=", "images", "[", "index", "]", ".", "shape", "[", "0", "]", "\n", "w", "=", "images", "[", "index", "]", ".", "shape", "[", "1", "]", "\n", "pick", "=", "nms", "(", "image_obj", "[", "'total_boxes'", "]", ",", "0.7", ",", "'Union'", ")", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "image_obj", "[", "'total_boxes'", "]", "[", "pick", ",", ":", "]", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "bbreg", "(", "image_obj", "[", "'total_boxes'", "]", ".", "copy", "(", ")", ",", "np", ".", "transpose", "(", "mv", "[", ":", ",", "pick", "]", ")", ")", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "rerec", "(", "image_obj", "[", "'total_boxes'", "]", ".", "copy", "(", ")", ")", "\n", "\n", "numbox", "=", "image_obj", "[", "'total_boxes'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "if", "numbox", ">", "0", ":", "\n", "                ", "tempimg", "=", "np", ".", "zeros", "(", "(", "48", ",", "48", ",", "3", ",", "numbox", ")", ")", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "np", ".", "fix", "(", "image_obj", "[", "'total_boxes'", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "dy", ",", "edy", ",", "dx", ",", "edx", ",", "y", ",", "ey", ",", "x", ",", "ex", ",", "tmpw", ",", "tmph", "=", "pad", "(", "image_obj", "[", "'total_boxes'", "]", ".", "copy", "(", ")", ",", "w", ",", "h", ")", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "numbox", ")", ":", "\n", "                    ", "tmp", "=", "np", ".", "zeros", "(", "(", "int", "(", "tmph", "[", "k", "]", ")", ",", "int", "(", "tmpw", "[", "k", "]", ")", ",", "3", ")", ")", "\n", "tmp", "[", "dy", "[", "k", "]", "-", "1", ":", "edy", "[", "k", "]", ",", "dx", "[", "k", "]", "-", "1", ":", "edx", "[", "k", "]", ",", ":", "]", "=", "images", "[", "index", "]", "[", "y", "[", "k", "]", "-", "1", ":", "ey", "[", "k", "]", ",", "x", "[", "k", "]", "-", "1", ":", "ex", "[", "k", "]", ",", ":", "]", "\n", "if", "tmp", ".", "shape", "[", "0", "]", ">", "0", "and", "tmp", ".", "shape", "[", "1", "]", ">", "0", "or", "tmp", ".", "shape", "[", "0", "]", "==", "0", "and", "tmp", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                        ", "tempimg", "[", ":", ",", ":", ",", ":", ",", "k", "]", "=", "imresample", "(", "tmp", ",", "(", "48", ",", "48", ")", ")", "\n", "", "else", ":", "\n", "                        ", "return", "np", ".", "empty", "(", ")", "\n", "", "", "tempimg", "=", "(", "tempimg", "-", "127.5", ")", "*", "0.0078125", "\n", "image_obj", "[", "'onet_input'", "]", "=", "np", ".", "transpose", "(", "tempimg", ",", "(", "3", ",", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "", "", "i", "+=", "rnet_input_count", "\n", "\n", "# # # # # # # # # # # # #", "\n", "# third stage - further refinement and facial landmarks positions with onet", "\n", "# # # # # # # # # # # # #", "\n", "\n", "", "bulk_onet_input", "=", "np", ".", "empty", "(", "(", "0", ",", "48", ",", "48", ",", "3", ")", ")", "\n", "for", "index", ",", "image_obj", "in", "enumerate", "(", "images_with_boxes", ")", ":", "\n", "        ", "if", "'onet_input'", "in", "image_obj", ":", "\n", "            ", "bulk_onet_input", "=", "np", ".", "append", "(", "bulk_onet_input", ",", "image_obj", "[", "'onet_input'", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "out", "=", "onet", "(", "bulk_onet_input", ")", "\n", "\n", "out0", "=", "np", ".", "transpose", "(", "out", "[", "0", "]", ")", "\n", "out1", "=", "np", ".", "transpose", "(", "out", "[", "1", "]", ")", "\n", "out2", "=", "np", ".", "transpose", "(", "out", "[", "2", "]", ")", "\n", "score", "=", "out2", "[", "1", ",", ":", "]", "\n", "points", "=", "out1", "\n", "\n", "i", "=", "0", "\n", "ret", "=", "[", "]", "\n", "for", "index", ",", "image_obj", "in", "enumerate", "(", "images_with_boxes", ")", ":", "\n", "        ", "if", "'onet_input'", "not", "in", "image_obj", ":", "\n", "            ", "ret", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "onet_input_count", "=", "image_obj", "[", "'onet_input'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "out0_per_image", "=", "out0", "[", ":", ",", "i", ":", "i", "+", "onet_input_count", "]", "\n", "score_per_image", "=", "score", "[", "i", ":", "i", "+", "onet_input_count", "]", "\n", "points_per_image", "=", "points", "[", ":", ",", "i", ":", "i", "+", "onet_input_count", "]", "\n", "\n", "ipass", "=", "np", ".", "where", "(", "score_per_image", ">", "threshold", "[", "2", "]", ")", "\n", "points_per_image", "=", "points_per_image", "[", ":", ",", "ipass", "[", "0", "]", "]", "\n", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "np", ".", "hstack", "(", "[", "image_obj", "[", "'total_boxes'", "]", "[", "ipass", "[", "0", "]", ",", "0", ":", "4", "]", ".", "copy", "(", ")", ",", "\n", "np", ".", "expand_dims", "(", "score_per_image", "[", "ipass", "]", ".", "copy", "(", ")", ",", "1", ")", "]", ")", "\n", "mv", "=", "out0_per_image", "[", ":", ",", "ipass", "[", "0", "]", "]", "\n", "\n", "w", "=", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "2", "]", "-", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "3", "]", "-", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "1", "]", "+", "1", "\n", "points_per_image", "[", "0", ":", "5", ",", ":", "]", "=", "np", ".", "tile", "(", "w", ",", "(", "5", ",", "1", ")", ")", "*", "points_per_image", "[", "0", ":", "5", ",", ":", "]", "+", "np", ".", "tile", "(", "\n", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "0", "]", ",", "(", "5", ",", "1", ")", ")", "-", "1", "\n", "points_per_image", "[", "5", ":", "10", ",", ":", "]", "=", "np", ".", "tile", "(", "h", ",", "(", "5", ",", "1", ")", ")", "*", "points_per_image", "[", "5", ":", "10", ",", ":", "]", "+", "np", ".", "tile", "(", "\n", "image_obj", "[", "'total_boxes'", "]", "[", ":", ",", "1", "]", ",", "(", "5", ",", "1", ")", ")", "-", "1", "\n", "\n", "if", "image_obj", "[", "'total_boxes'", "]", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "image_obj", "[", "'total_boxes'", "]", "=", "bbreg", "(", "image_obj", "[", "'total_boxes'", "]", ".", "copy", "(", ")", ",", "np", ".", "transpose", "(", "mv", ")", ")", "\n", "pick", "=", "nms", "(", "image_obj", "[", "'total_boxes'", "]", ".", "copy", "(", ")", ",", "0.7", ",", "'Min'", ")", "\n", "image_obj", "[", "'total_boxes'", "]", "=", "image_obj", "[", "'total_boxes'", "]", "[", "pick", ",", ":", "]", "\n", "points_per_image", "=", "points_per_image", "[", ":", ",", "pick", "]", "\n", "\n", "ret", ".", "append", "(", "(", "image_obj", "[", "'total_boxes'", "]", ",", "points_per_image", ")", ")", "\n", "", "else", ":", "\n", "            ", "ret", ".", "append", "(", "None", ")", "\n", "\n", "", "i", "+=", "onet_input_count", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.bbreg": [[714, 727], ["numpy.transpose", "numpy.reshape", "numpy.vstack"], "function", ["None"], ["", "def", "bbreg", "(", "boundingbox", ",", "reg", ")", ":", "\n", "# calibrate bounding boxes", "\n", "    ", "if", "reg", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "reg", "=", "np", ".", "reshape", "(", "reg", ",", "(", "reg", ".", "shape", "[", "2", "]", ",", "reg", ".", "shape", "[", "3", "]", ")", ")", "\n", "\n", "", "w", "=", "boundingbox", "[", ":", ",", "2", "]", "-", "boundingbox", "[", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "boundingbox", "[", ":", ",", "3", "]", "-", "boundingbox", "[", ":", ",", "1", "]", "+", "1", "\n", "b1", "=", "boundingbox", "[", ":", ",", "0", "]", "+", "reg", "[", ":", ",", "0", "]", "*", "w", "\n", "b2", "=", "boundingbox", "[", ":", ",", "1", "]", "+", "reg", "[", ":", ",", "1", "]", "*", "h", "\n", "b3", "=", "boundingbox", "[", ":", ",", "2", "]", "+", "reg", "[", ":", ",", "2", "]", "*", "w", "\n", "b4", "=", "boundingbox", "[", ":", ",", "3", "]", "+", "reg", "[", ":", ",", "3", "]", "*", "h", "\n", "boundingbox", "[", ":", ",", "0", ":", "4", "]", "=", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "b1", ",", "b2", ",", "b3", ",", "b4", "]", ")", ")", "\n", "return", "boundingbox", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.generateBoundingBox": [[728, 753], ["numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.where", "numpy.transpose", "numpy.transpose", "numpy.fix", "numpy.fix", "numpy.hstack", "numpy.flipud", "numpy.flipud", "numpy.flipud", "numpy.flipud", "numpy.vstack", "numpy.empty", "numpy.vstack", "numpy.expand_dims"], "function", ["None"], ["", "def", "generateBoundingBox", "(", "imap", ",", "reg", ",", "scale", ",", "t", ")", ":", "\n", "# use heatmap to generate bounding boxes", "\n", "    ", "stride", "=", "2", "\n", "cellsize", "=", "12", "\n", "\n", "imap", "=", "np", ".", "transpose", "(", "imap", ")", "\n", "dx1", "=", "np", ".", "transpose", "(", "reg", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "dy1", "=", "np", ".", "transpose", "(", "reg", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "dx2", "=", "np", ".", "transpose", "(", "reg", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "dy2", "=", "np", ".", "transpose", "(", "reg", "[", ":", ",", ":", ",", "3", "]", ")", "\n", "y", ",", "x", "=", "np", ".", "where", "(", "imap", ">=", "t", ")", "\n", "if", "y", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "dx1", "=", "np", ".", "flipud", "(", "dx1", ")", "\n", "dy1", "=", "np", ".", "flipud", "(", "dy1", ")", "\n", "dx2", "=", "np", ".", "flipud", "(", "dx2", ")", "\n", "dy2", "=", "np", ".", "flipud", "(", "dy2", ")", "\n", "", "score", "=", "imap", "[", "(", "y", ",", "x", ")", "]", "\n", "reg", "=", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "dx1", "[", "(", "y", ",", "x", ")", "]", ",", "dy1", "[", "(", "y", ",", "x", ")", "]", ",", "dx2", "[", "(", "y", ",", "x", ")", "]", ",", "dy2", "[", "(", "y", ",", "x", ")", "]", "]", ")", ")", "\n", "if", "reg", ".", "size", "==", "0", ":", "\n", "        ", "reg", "=", "np", ".", "empty", "(", "(", "0", ",", "3", ")", ")", "\n", "", "bb", "=", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "y", ",", "x", "]", ")", ")", "\n", "q1", "=", "np", ".", "fix", "(", "(", "stride", "*", "bb", "+", "1", ")", "/", "scale", ")", "\n", "q2", "=", "np", ".", "fix", "(", "(", "stride", "*", "bb", "+", "cellsize", "-", "1", "+", "1", ")", "/", "scale", ")", "\n", "boundingbox", "=", "np", ".", "hstack", "(", "[", "q1", ",", "q2", ",", "np", ".", "expand_dims", "(", "score", ",", "1", ")", ",", "reg", "]", ")", "\n", "return", "boundingbox", ",", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.nms": [[755, 786], ["numpy.argsort", "numpy.zeros_like", "numpy.empty", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.where"], "function", ["None"], ["", "def", "nms", "(", "boxes", ",", "threshold", ",", "method", ")", ":", "\n", "    ", "if", "boxes", ".", "size", "==", "0", ":", "\n", "        ", "return", "np", ".", "empty", "(", "(", "0", ",", "3", ")", ")", "\n", "", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "s", "=", "boxes", "[", ":", ",", "4", "]", "\n", "area", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "I", "=", "np", ".", "argsort", "(", "s", ")", "\n", "pick", "=", "np", ".", "zeros_like", "(", "s", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "counter", "=", "0", "\n", "while", "I", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", "[", "counter", "]", "=", "i", "\n", "counter", "+=", "1", "\n", "idx", "=", "I", "[", "0", ":", "-", "1", "]", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "idx", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "idx", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "idx", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "idx", "]", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", "+", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", "+", "1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "if", "method", "is", "'Min'", ":", "\n", "            ", "o", "=", "inter", "/", "np", ".", "minimum", "(", "area", "[", "i", "]", ",", "area", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "idx", "]", "-", "inter", ")", "\n", "", "I", "=", "I", "[", "np", ".", "where", "(", "o", "<=", "threshold", ")", "]", "\n", "", "pick", "=", "pick", "[", "0", ":", "counter", "]", "\n", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.pad": [[788, 821], ["numpy.ones", "numpy.ones", "tmpw.copy().astype", "tmph.copy().astype", "total_boxes[].copy().astype", "total_boxes[].copy().astype", "total_boxes[].copy().astype", "total_boxes[].copy().astype", "numpy.where", "numpy.expand_dims", "numpy.where", "numpy.expand_dims", "numpy.where", "numpy.expand_dims", "numpy.where", "numpy.expand_dims", "tmpw.copy", "tmph.copy", "total_boxes[].copy", "total_boxes[].copy", "total_boxes[].copy", "total_boxes[].copy"], "function", ["None"], ["", "def", "pad", "(", "total_boxes", ",", "w", ",", "h", ")", ":", "\n", "# compute the padding coordinates (pad the bounding boxes to square)", "\n", "    ", "tmpw", "=", "(", "total_boxes", "[", ":", ",", "2", "]", "-", "total_boxes", "[", ":", ",", "0", "]", "+", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "tmph", "=", "(", "total_boxes", "[", ":", ",", "3", "]", "-", "total_boxes", "[", ":", ",", "1", "]", "+", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "numbox", "=", "total_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "dx", "=", "np", ".", "ones", "(", "(", "numbox", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "dy", "=", "np", ".", "ones", "(", "(", "numbox", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "edx", "=", "tmpw", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "edy", "=", "tmph", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "x", "=", "total_boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "y", "=", "total_boxes", "[", ":", ",", "1", "]", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "ex", "=", "total_boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "ey", "=", "total_boxes", "[", ":", ",", "3", "]", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "tmp", "=", "np", ".", "where", "(", "ex", ">", "w", ")", "\n", "edx", ".", "flat", "[", "tmp", "]", "=", "np", ".", "expand_dims", "(", "-", "ex", "[", "tmp", "]", "+", "w", "+", "tmpw", "[", "tmp", "]", ",", "1", ")", "\n", "ex", "[", "tmp", "]", "=", "w", "\n", "\n", "tmp", "=", "np", ".", "where", "(", "ey", ">", "h", ")", "\n", "edy", ".", "flat", "[", "tmp", "]", "=", "np", ".", "expand_dims", "(", "-", "ey", "[", "tmp", "]", "+", "h", "+", "tmph", "[", "tmp", "]", ",", "1", ")", "\n", "ey", "[", "tmp", "]", "=", "h", "\n", "\n", "tmp", "=", "np", ".", "where", "(", "x", "<", "1", ")", "\n", "dx", ".", "flat", "[", "tmp", "]", "=", "np", ".", "expand_dims", "(", "2", "-", "x", "[", "tmp", "]", ",", "1", ")", "\n", "x", "[", "tmp", "]", "=", "1", "\n", "\n", "tmp", "=", "np", ".", "where", "(", "y", "<", "1", ")", "\n", "dy", ".", "flat", "[", "tmp", "]", "=", "np", ".", "expand_dims", "(", "2", "-", "y", "[", "tmp", "]", ",", "1", ")", "\n", "y", "[", "tmp", "]", "=", "1", "\n", "\n", "return", "dy", ",", "edy", ",", "dx", ",", "edx", ",", "y", ",", "ey", ",", "x", ",", "ex", ",", "tmpw", ",", "tmph", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.rerec": [[823, 832], ["numpy.maximum", "numpy.transpose", "numpy.tile"], "function", ["None"], ["", "def", "rerec", "(", "bboxA", ")", ":", "\n", "# convert bboxA to square", "\n", "    ", "h", "=", "bboxA", "[", ":", ",", "3", "]", "-", "bboxA", "[", ":", ",", "1", "]", "\n", "w", "=", "bboxA", "[", ":", ",", "2", "]", "-", "bboxA", "[", ":", ",", "0", "]", "\n", "l", "=", "np", ".", "maximum", "(", "w", ",", "h", ")", "\n", "bboxA", "[", ":", ",", "0", "]", "=", "bboxA", "[", ":", ",", "0", "]", "+", "w", "*", "0.5", "-", "l", "*", "0.5", "\n", "bboxA", "[", ":", ",", "1", "]", "=", "bboxA", "[", ":", ",", "1", "]", "+", "h", "*", "0.5", "-", "l", "*", "0.5", "\n", "bboxA", "[", ":", ",", "2", ":", "4", "]", "=", "bboxA", "[", ":", ",", "0", ":", "2", "]", "+", "np", ".", "transpose", "(", "np", ".", "tile", "(", "l", ",", "(", "2", ",", "1", ")", ")", ")", "\n", "return", "bboxA", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.imresample": [[833, 836], ["cv2.resize"], "function", ["None"], ["", "def", "imresample", "(", "img", ",", "sz", ")", ":", "\n", "    ", "im_data", "=", "cv2", ".", "resize", "(", "img", ",", "(", "sz", "[", "1", "]", ",", "sz", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "#@UndefinedVariable", "\n", "return", "im_data", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.align.to_rgb": [[20, 25], ["numpy.empty"], "function", ["None"], ["def", "to_rgb", "(", "img", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "shape", "\n", "ret", "=", "np", ".", "empty", "(", "(", "w", ",", "h", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ret", "[", ":", ",", ":", ",", "0", "]", "=", "ret", "[", ":", ",", ":", ",", "1", "]", "=", "ret", "[", ":", ",", ":", ",", "2", "]", "=", "img", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.align.IOU": [[27, 54], ["max", "min", "max", "min"], "function", ["None"], ["", "def", "IOU", "(", "Reframe", ",", "GTframe", ")", ":", "\n", "  ", "x1", "=", "Reframe", "[", "0", "]", ";", "\n", "y1", "=", "Reframe", "[", "1", "]", ";", "\n", "width1", "=", "Reframe", "[", "2", "]", "-", "Reframe", "[", "0", "]", ";", "\n", "height1", "=", "Reframe", "[", "3", "]", "-", "Reframe", "[", "1", "]", ";", "\n", "\n", "x2", "=", "GTframe", "[", "0", "]", "\n", "y2", "=", "GTframe", "[", "1", "]", "\n", "width2", "=", "GTframe", "[", "2", "]", "-", "GTframe", "[", "0", "]", "\n", "height2", "=", "GTframe", "[", "3", "]", "-", "GTframe", "[", "1", "]", "\n", "\n", "endx", "=", "max", "(", "x1", "+", "width1", ",", "x2", "+", "width2", ")", "\n", "startx", "=", "min", "(", "x1", ",", "x2", ")", "\n", "width", "=", "width1", "+", "width2", "-", "(", "endx", "-", "startx", ")", "\n", "\n", "endy", "=", "max", "(", "y1", "+", "height1", ",", "y2", "+", "height2", ")", "\n", "starty", "=", "min", "(", "y1", ",", "y2", ")", "\n", "height", "=", "height1", "+", "height2", "-", "(", "endy", "-", "starty", ")", "\n", "\n", "if", "width", "<=", "0", "or", "height", "<=", "0", ":", "\n", "    ", "ratio", "=", "0", "\n", "", "else", ":", "\n", "    ", "Area", "=", "width", "*", "height", "\n", "Area1", "=", "width1", "*", "height1", "\n", "Area2", "=", "width2", "*", "height2", "\n", "ratio", "=", "Area", "*", "1.", "/", "(", "Area1", "+", "Area2", "-", "Area", ")", "\n", "", "return", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.align.align": [[64, 94], ["detect_face.detect_face", "face_preprocess.preprocess", "print", "align.to_rgb", "numpy.asarray", "numpy.vstack", "numpy.sum", "numpy.argmax", "points[].reshape", "numpy.power"], "function", ["home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.detect_face.detect_face", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.face_preprocess.preprocess", "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.align.to_rgb"], ["", "", "def", "align", "(", "img", ",", "image_size", "=", "(", "112", ",", "112", ")", ")", ":", "\n", "    ", "minsize", "=", "20", "\n", "threshold", "=", "[", "0.6", ",", "0.7", ",", "0.9", "]", "\n", "factor", "=", "0.85", "\n", "\n", "if", "img", ".", "ndim", "<", "2", ":", "\n", "       ", "print", "(", "'Image dim error'", "%", "image_path", ")", "\n", "", "if", "img", ".", "ndim", "==", "2", ":", "\n", "       ", "img", "=", "to_rgb", "(", "img", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "", "_minsize", "=", "minsize", "\n", "_bbox", "=", "None", "\n", "_landmark", "=", "None", "\n", "bounding_boxes", ",", "points", "=", "detect_face", ".", "detect_face", "(", "img", ",", "_minsize", ",", "pnet", ",", "rnet", ",", "onet", ",", "threshold", ",", "factor", ")", "\n", "nrof_faces", "=", "bounding_boxes", ".", "shape", "[", "0", "]", "\n", "if", "nrof_faces", ">", "0", ":", "\n", "       ", "det", "=", "bounding_boxes", "[", ":", ",", "0", ":", "4", "]", "\n", "img_size", "=", "np", ".", "asarray", "(", "img", ".", "shape", ")", "[", "0", ":", "2", "]", "\n", "bindex", "=", "0", "\n", "if", "nrof_faces", ">", "1", ":", "\n", "          ", "bounding_box_size", "=", "(", "det", "[", ":", ",", "2", "]", "-", "det", "[", ":", ",", "0", "]", ")", "*", "(", "det", "[", ":", ",", "3", "]", "-", "det", "[", ":", ",", "1", "]", ")", "\n", "img_center", "=", "img_size", "/", "2", "\n", "offsets", "=", "np", ".", "vstack", "(", "[", "(", "det", "[", ":", ",", "0", "]", "+", "det", "[", ":", ",", "2", "]", ")", "/", "2", "-", "img_center", "[", "1", "]", ",", "(", "det", "[", ":", ",", "1", "]", "+", "det", "[", ":", ",", "3", "]", ")", "/", "2", "-", "img_center", "[", "0", "]", "]", ")", "\n", "offset_dist_squared", "=", "np", ".", "sum", "(", "np", ".", "power", "(", "offsets", ",", "2.0", ")", ",", "0", ")", "\n", "bindex", "=", "np", ".", "argmax", "(", "bounding_box_size", "-", "offset_dist_squared", "*", "2.0", ")", "# some extra weight on the centering", "\n", "", "_bbox", "=", "bounding_boxes", "[", "bindex", ",", "0", ":", "4", "]", "\n", "_landmark", "=", "points", "[", ":", ",", "bindex", "]", ".", "reshape", "(", "(", "2", ",", "5", ")", ")", ".", "T", "\n", "", "warped", ",", "M", "=", "face_preprocess", ".", "preprocess", "(", "img", ",", "image_size", "=", "image_size", ",", "bbox", "=", "_bbox", ",", "landmark", "=", "_landmark", ")", "\n", "bgr", "=", "warped", "[", "...", ",", ":", "]", "\n", "return", "bgr", ",", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.shawnxyang_tip-im.align_methods.align.re_align": [[95, 116], ["np.clip.astype", "numpy.ones_like", "numpy.clip", "img_small_adv.astype", "img_small.astype", "int", "int", "cv2.resize", "cv2.warpAffine", "cv2.warpAffine", "cv2.warpAffine"], "function", ["None"], ["", "def", "re_align", "(", "img_small_adv", ",", "img_small", ",", "img_origin", ",", "M", ")", ":", "\n", "    ", "perturb", "=", "img_small_adv", ".", "astype", "(", "float", ")", "-", "img_small", ".", "astype", "(", "float", ")", "\n", "img_origin", "=", "img_origin", ".", "astype", "(", "float", ")", "\n", "mask", "=", "np", ".", "ones_like", "(", "img_small", ")", "\n", "if", "M", "is", "None", ":", "\n", "       ", "origin_shape", "=", "img_origin", ".", "shape", "\n", "det1", "=", "int", "(", "0", ")", "\n", "det2", "=", "int", "(", "0", ")", "\n", "size1", "=", "origin_shape", "[", "0", "]", "-", "2", "*", "det1", "\n", "size2", "=", "origin_shape", "[", "1", "]", "-", "2", "*", "det2", "\n", "perturb", "=", "cv2", ".", "resize", "(", "perturb", ",", "(", "size2", ",", "size1", ")", ")", "\n", "img_origin", "[", "det1", ":", "(", "det1", "+", "size1", ")", ",", "det2", ":", "(", "det2", "+", "size2", ")", ",", ":", "]", "+=", "perturb", "\n", "", "else", ":", "\n", "       ", "perturb", "=", "cv2", ".", "warpAffine", "(", "src", "=", "perturb", ",", "M", "=", "M", ",", "dsize", "=", "(", "img_origin", ".", "shape", "[", "1", "]", ",", "img_origin", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "WARP_INVERSE_MAP", ",", "borderValue", "=", "0.0", ")", "\n", "adv", "=", "cv2", ".", "warpAffine", "(", "src", "=", "img_small_adv", ",", "M", "=", "M", ",", "dsize", "=", "(", "img_origin", ".", "shape", "[", "1", "]", ",", "img_origin", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "WARP_INVERSE_MAP", ",", "borderValue", "=", "0.0", ")", "\n", "\n", "mask", "=", "cv2", ".", "warpAffine", "(", "src", "=", "mask", ",", "M", "=", "M", ",", "dsize", "=", "(", "img_origin", ".", "shape", "[", "1", "]", ",", "img_origin", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "WARP_INVERSE_MAP", ",", "borderValue", "=", "0.0", ")", "\n", "img_origin", "=", "img_origin", "*", "(", "mask", "==", "0", ")", "+", "adv", "*", "(", "mask", ">", "0", ")", "\n", "#      img_origin += perturb", "\n", "", "img_origin", "=", "np", ".", "clip", "(", "img_origin", ",", "0", ",", "255", ")", "\n", "return", "img_origin", "\n", "", ""]]}