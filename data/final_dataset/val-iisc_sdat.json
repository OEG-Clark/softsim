{"home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc.main": [[34, 181], ["common.utils.logger.CompleteLogger", "print", "print", "utils.get_train_transform", "utils.get_val_transform", "print", "print", "utils.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "common.utils.data.ForeverDataIterator", "common.utils.data.ForeverDataIterator", "print", "utils.get_model", "print", "dalib.adaptation.cdan.ImageClassifier().to", "torch.optim.SGD", "print", "torch.optim.lr_scheduler.LambdaLR", "dalib.adaptation.cdan.ConditionalDomainAdversarialLoss().to", "dalib.adaptation.mcc.MinimumClassConfusionLoss", "range", "print", "ImageClassifier().to.load_state_dict", "utils.validate", "print", "common.utils.logger.CompleteLogger.close", "wandb.init", "wandb.config.update", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "torch.Identity", "dalib.modules.domain_discriminator.DomainDiscriminator().to", "dalib.modules.domain_discriminator.DomainDiscriminator().to", "ImageClassifier().to.get_parameters", "DomainDiscriminator().to.get_parameters", "torch.load", "torch.load", "torch.load", "torch.load", "ImageClassifier().to.load_state_dict", "torch.Sequential().to", "common.utils.analysis.collect_feature", "common.utils.analysis.collect_feature", "os.join", "common.utils.analysis.tsne.visualize", "print", "common.utils.analysis.a_distance.calculate", "print", "utils.validate", "print", "print", "print", "cdan_mcc.train", "utils.validate", "torch.save", "torch.save", "torch.save", "torch.save", "max", "torch.load", "torch.load", "torch.load", "torch.load", "wandb.log", "dalib.adaptation.cdan.ImageClassifier", "dalib.adaptation.cdan.ConditionalDomainAdversarialLoss", "common.utils.logger.CompleteLogger.get_checkpoint_path", "wandb.log", "wandb.log", "ImageClassifier().to.state_dict", "common.utils.logger.CompleteLogger.get_checkpoint_path", "shutil.copy", "common.utils.logger.CompleteLogger.get_checkpoint_path", "dalib.modules.domain_discriminator.DomainDiscriminator", "dalib.modules.domain_discriminator.DomainDiscriminator", "torch.Sequential", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "common.utils.logger.CompleteLogger.get_checkpoint_path", "common.utils.logger.CompleteLogger.get_checkpoint_path", "torch.optim.lr_scheduler.LambdaLR.get_lr", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "float"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_train_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_val_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_dataset", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_model", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.close", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.get_parameters", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.get_parameters", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.__init__.collect_feature", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.__init__.collect_feature", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.tsne.visualize", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.a_distance.calculate", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.scheduler.WarmupMultiStepLR.get_lr"], ["def", "main", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "logger", "=", "CompleteLogger", "(", "args", ".", "log", ",", "args", ".", "phase", ")", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "\"DA\"", ",", "entity", "=", "\"SDAT\"", ",", "name", "=", "args", ".", "log_name", ")", "\n", "wandb", ".", "config", ".", "update", "(", "args", ")", "\n", "", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "device", "=", "args", ".", "device", "\n", "\n", "# Data loading code", "\n", "train_transform", "=", "utils", ".", "get_train_transform", "(", "args", ".", "train_resizing", ",", "random_horizontal_flip", "=", "not", "args", ".", "no_hflip", ",", "\n", "random_color_jitter", "=", "False", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "val_transform", "=", "utils", ".", "get_val_transform", "(", "args", ".", "val_resizing", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "print", "(", "\"train_transform: \"", ",", "train_transform", ")", "\n", "print", "(", "\"val_transform: \"", ",", "val_transform", ")", "\n", "\n", "train_source_dataset", ",", "train_target_dataset", ",", "val_dataset", ",", "test_dataset", ",", "num_classes", ",", "args", ".", "class_names", "=", "utils", ".", "get_dataset", "(", "args", ".", "data", ",", "args", ".", "root", ",", "args", ".", "source", ",", "\n", "args", ".", "target", ",", "train_transform", ",", "val_transform", ")", "\n", "train_source_loader", "=", "DataLoader", "(", "train_source_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "True", ")", "\n", "train_target_loader", "=", "DataLoader", "(", "train_target_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "train_source_iter", "=", "ForeverDataIterator", "(", "train_source_loader", ")", "\n", "train_target_iter", "=", "ForeverDataIterator", "(", "train_target_loader", ")", "\n", "\n", "# create model", "\n", "print", "(", "\"=> using model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "backbone", "=", "utils", ".", "get_model", "(", "args", ".", "arch", ",", "pretrain", "=", "not", "args", ".", "scratch", ")", "\n", "print", "(", "backbone", ")", "\n", "pool_layer", "=", "nn", ".", "Identity", "(", ")", "if", "args", ".", "no_pool", "else", "None", "\n", "classifier", "=", "ImageClassifier", "(", "backbone", ",", "num_classes", ",", "bottleneck_dim", "=", "args", ".", "bottleneck_dim", ",", "\n", "pool_layer", "=", "pool_layer", ",", "finetune", "=", "not", "args", ".", "scratch", ")", ".", "to", "(", "device", ")", "\n", "classifier_feature_dim", "=", "classifier", ".", "features_dim", "\n", "\n", "if", "args", ".", "randomized", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "args", ".", "randomized_dim", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "classifier_feature_dim", "*", "num_classes", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "all_parameters", "=", "classifier", ".", "get_parameters", "(", ")", "+", "domain_discri", ".", "get_parameters", "(", ")", "\n", "\n", "# define optimizer and lr scheduler", "\n", "optimizer", "=", "SGD", "(", "all_parameters", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "t_total", "=", "args", ".", "iters_per_epoch", "*", "args", ".", "epochs", "\n", "print", "(", "\"{INFORMATION} The total number of steps is \"", ",", "t_total", ")", "\n", "\n", "lr_scheduler", "=", "LambdaLR", "(", "optimizer", ",", "lambda", "x", ":", "args", ".", "lr", "*", "\n", "(", "1.", "+", "args", ".", "lr_gamma", "*", "float", "(", "x", ")", ")", "**", "(", "-", "args", ".", "lr_decay", ")", ")", "\n", "\n", "# define loss function", "\n", "domain_adv", "=", "ConditionalDomainAdversarialLoss", "(", "\n", "domain_discri", ",", "entropy_conditioning", "=", "args", ".", "entropy", ",", "\n", "num_classes", "=", "num_classes", ",", "features_dim", "=", "classifier_feature_dim", ",", "randomized", "=", "args", ".", "randomized", ",", "\n", "randomized_dim", "=", "args", ".", "randomized_dim", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "mcc_loss", "=", "MinimumClassConfusionLoss", "(", "temperature", "=", "args", ".", "temperature", ")", "\n", "\n", "# resume from the best checkpoint", "\n", "if", "args", ".", "phase", "!=", "'train'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "\n", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "# analysis the model", "\n", "", "if", "args", ".", "phase", "==", "'analysis'", ":", "\n", "# extract features from both domains", "\n", "        ", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "classifier", ".", "backbone", ",", "classifier", ".", "pool_layer", ",", "classifier", ".", "bottleneck", ")", ".", "to", "(", "device", ")", "\n", "source_feature", "=", "collect_feature", "(", "\n", "train_source_loader", ",", "feature_extractor", ",", "device", ")", "\n", "target_feature", "=", "collect_feature", "(", "\n", "train_target_loader", ",", "feature_extractor", ",", "device", ")", "\n", "# plot t-SNE", "\n", "tSNE_filename", "=", "osp", ".", "join", "(", "logger", ".", "visualize_directory", ",", "'TSNE.pdf'", ")", "\n", "tsne", ".", "visualize", "(", "source_feature", ",", "target_feature", ",", "tSNE_filename", ")", "\n", "print", "(", "\"Saving t-SNE to\"", ",", "tSNE_filename", ")", "\n", "# calculate A-distance, which is a measure for distribution discrepancy", "\n", "A_distance", "=", "a_distance", ".", "calculate", "(", "\n", "source_feature", ",", "target_feature", ",", "device", ")", "\n", "print", "(", "\"A-distance =\"", ",", "A_distance", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "phase", "==", "'test'", ":", "\n", "        ", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "acc1", ")", "\n", "return", "\n", "\n", "# start training", "\n", "", "best_acc1", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "print", "(", "\"lr_bbone:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "print", "(", "\"lr_btlnck:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "1", "]", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"lr_bbone\"", ":", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", ",", "\n", "\"lr_btlnck\"", ":", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "1", "]", "}", ")", "\n", "# train for one epoch", "\n", "", "train", "(", "train_source_iter", ",", "train_target_iter", ",", "classifier", ",", "domain_adv", ",", "mcc_loss", ",", "optimizer", ",", "\n", "lr_scheduler", ",", "epoch", ",", "args", ")", "\n", "\n", "# evaluate on validation set", "\n", "acc1", "=", "utils", ".", "validate", "(", "val_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'val_acc'", ":", "acc1", "}", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "\n", "logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ")", "\n", "if", "acc1", ">", "best_acc1", ":", "\n", "            ", "shutil", ".", "copy", "(", "logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ",", "\n", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", "\n", "", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "", "print", "(", "\"best_acc1 = {:3.1f}\"", ".", "format", "(", "best_acc1", ")", ")", "\n", "\n", "# evaluate on test set", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", ")", "\n", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "\"test_acc1 = {:3.1f}\"", ".", "format", "(", "acc1", ")", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'test_acc'", ":", "acc1", "}", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc.train": [[183, 247], ["common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.ProgressMeter", "model.train", "domain_adv.train", "time.time", "range", "next", "next", "x_s.to.to", "x_t.to.to", "labels_s.to.to", "common.utils.meter.AverageMeter.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model", "y.chunk", "f.chunk", "torch.cross_entropy", "mcc", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "lr_scheduler.step", "common.utils.meter.AverageMeter.update", "time.time", "domain_adv", "mcc", "common.utils.metric.accuracy", "wandb.log", "loss.item", "x_s.to.size", "x_s.to.size", "x_s.to.size", "transfer_loss.item", "x_s.to.size", "common.utils.meter.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.accuracy", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter.display"], ["", "def", "train", "(", "train_source_iter", ":", "ForeverDataIterator", ",", "train_target_iter", ":", "ForeverDataIterator", ",", "model", ":", "ImageClassifier", ",", "\n", "domain_adv", ":", "ConditionalDomainAdversarialLoss", ",", "mcc", ",", "optimizer", ":", "SGD", ",", "\n", "lr_scheduler", ",", "epoch", ":", "int", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':3.1f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':3.1f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':3.2f'", ")", "\n", "trans_losses", "=", "AverageMeter", "(", "'Trans Loss'", ",", "':3.2f'", ")", "\n", "cls_accs", "=", "AverageMeter", "(", "'Cls Acc'", ",", "':3.1f'", ")", "\n", "domain_accs", "=", "AverageMeter", "(", "'Domain Acc'", ",", "':3.1f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "args", ".", "iters_per_epoch", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "trans_losses", ",", "cls_accs", ",", "domain_accs", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "domain_adv", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "iters_per_epoch", ")", ":", "\n", "        ", "x_s", ",", "labels_s", "=", "next", "(", "train_source_iter", ")", "\n", "x_t", ",", "_", "=", "next", "(", "train_target_iter", ")", "\n", "\n", "x_s", "=", "x_s", ".", "to", "(", "device", ")", "\n", "x_t", "=", "x_t", ".", "to", "(", "device", ")", "\n", "labels_s", "=", "labels_s", ".", "to", "(", "device", ")", "\n", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# compute output", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_s", ",", "x_t", ")", ",", "dim", "=", "0", ")", "\n", "y", ",", "f", "=", "model", "(", "x", ")", "\n", "y_s", ",", "y_t", "=", "y", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "f_s", ",", "f_t", "=", "f", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "\n", "cls_loss", "=", "F", ".", "cross_entropy", "(", "y_s", ",", "labels_s", ")", "\n", "transfer_loss", "=", "domain_adv", "(", "y_s", ",", "f_s", ",", "y_t", ",", "f_t", ")", "+", "mcc", "(", "y_t", ")", "\n", "mcc_loss_value", "=", "mcc", "(", "y_t", ")", "\n", "domain_acc", "=", "domain_adv", ".", "domain_discriminator_accuracy", "\n", "loss", "=", "cls_loss", "+", "transfer_loss", "*", "args", ".", "trade_off", "\n", "cls_acc", "=", "accuracy", "(", "y_s", ",", "labels_s", ")", "[", "0", "]", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "epoch", "*", "args", ".", "iters_per_epoch", "+", "i", ",", "'loss'", ":", "loss", ",", "'cls_loss'", ":", "cls_loss", ",", "\n", "'transfer_loss'", ":", "transfer_loss", ",", "'iteration'", ":", "epoch", "*", "args", ".", "iters_per_epoch", "+", "i", ",", "\n", "'domain_acc'", ":", "domain_acc", ",", "'mcc_loss'", ":", "mcc_loss_value", "}", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "cls_accs", ".", "update", "(", "cls_acc", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "domain_accs", ".", "update", "(", "domain_acc", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "trans_losses", ".", "update", "(", "transfer_loss", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_sdat.main": [[34, 179], ["common.utils.logger.CompleteLogger", "print", "print", "utils.get_train_transform", "utils.get_val_transform", "print", "print", "utils.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "common.utils.data.ForeverDataIterator", "common.utils.data.ForeverDataIterator", "print", "utils.get_model", "print", "dalib.adaptation.cdan.ImageClassifier().to", "torch.optim.SGD", "common.utils.sam.SAM", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "dalib.adaptation.cdan.ConditionalDomainAdversarialLoss().to", "range", "print", "ImageClassifier().to.load_state_dict", "utils.validate", "print", "common.utils.logger.CompleteLogger.close", "wandb.init", "wandb.config.update", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "torch.Identity", "dalib.modules.domain_discriminator.DomainDiscriminator().to", "dalib.modules.domain_discriminator.DomainDiscriminator().to", "DomainDiscriminator().to.get_parameters", "ImageClassifier().to.get_parameters", "torch.load", "torch.load", "torch.load", "torch.load", "ImageClassifier().to.load_state_dict", "torch.Sequential().to", "common.utils.analysis.collect_feature", "common.utils.analysis.collect_feature", "os.join", "common.utils.analysis.tsne.visualize", "print", "common.utils.analysis.a_distance.calculate", "print", "utils.validate", "print", "print", "print", "cdan_sdat.train", "utils.validate", "torch.save", "torch.save", "torch.save", "torch.save", "max", "torch.load", "torch.load", "torch.load", "torch.load", "wandb.log", "dalib.adaptation.cdan.ImageClassifier", "dalib.adaptation.cdan.ConditionalDomainAdversarialLoss", "common.utils.logger.CompleteLogger.get_checkpoint_path", "wandb.log", "wandb.log", "ImageClassifier().to.state_dict", "common.utils.logger.CompleteLogger.get_checkpoint_path", "shutil.copy", "common.utils.logger.CompleteLogger.get_checkpoint_path", "dalib.modules.domain_discriminator.DomainDiscriminator", "dalib.modules.domain_discriminator.DomainDiscriminator", "torch.Sequential", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "common.utils.logger.CompleteLogger.get_checkpoint_path", "common.utils.logger.CompleteLogger.get_checkpoint_path", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "float", "float"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_train_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_val_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_dataset", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_model", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.close", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.get_parameters", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.get_parameters", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.__init__.collect_feature", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.__init__.collect_feature", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.tsne.visualize", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.a_distance.calculate", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path"], ["def", "main", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "logger", "=", "CompleteLogger", "(", "args", ".", "log", ",", "args", ".", "phase", ")", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "\"DA\"", ",", "entity", "=", "\"SDAT\"", ",", "name", "=", "args", ".", "log_name", ")", "\n", "wandb", ".", "config", ".", "update", "(", "args", ")", "\n", "", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "device", "=", "args", ".", "device", "\n", "\n", "# Data loading code", "\n", "train_transform", "=", "utils", ".", "get_train_transform", "(", "args", ".", "train_resizing", ",", "random_horizontal_flip", "=", "not", "args", ".", "no_hflip", ",", "\n", "random_color_jitter", "=", "False", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "val_transform", "=", "utils", ".", "get_val_transform", "(", "args", ".", "val_resizing", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "print", "(", "\"train_transform: \"", ",", "train_transform", ")", "\n", "print", "(", "\"val_transform: \"", ",", "val_transform", ")", "\n", "\n", "train_source_dataset", ",", "train_target_dataset", ",", "val_dataset", ",", "test_dataset", ",", "num_classes", ",", "args", ".", "class_names", "=", "utils", ".", "get_dataset", "(", "args", ".", "data", ",", "args", ".", "root", ",", "args", ".", "source", ",", "\n", "args", ".", "target", ",", "train_transform", ",", "val_transform", ")", "\n", "train_source_loader", "=", "DataLoader", "(", "train_source_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "True", ")", "\n", "train_target_loader", "=", "DataLoader", "(", "train_target_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "train_source_iter", "=", "ForeverDataIterator", "(", "train_source_loader", ")", "\n", "train_target_iter", "=", "ForeverDataIterator", "(", "train_target_loader", ")", "\n", "\n", "# create model", "\n", "print", "(", "\"=> using model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "backbone", "=", "utils", ".", "get_model", "(", "args", ".", "arch", ",", "pretrain", "=", "not", "args", ".", "scratch", ")", "\n", "print", "(", "backbone", ")", "\n", "pool_layer", "=", "nn", ".", "Identity", "(", ")", "if", "args", ".", "no_pool", "else", "None", "\n", "classifier", "=", "ImageClassifier", "(", "backbone", ",", "num_classes", ",", "bottleneck_dim", "=", "args", ".", "bottleneck_dim", ",", "\n", "pool_layer", "=", "pool_layer", ",", "finetune", "=", "not", "args", ".", "scratch", ")", ".", "to", "(", "device", ")", "\n", "classifier_feature_dim", "=", "classifier", ".", "features_dim", "\n", "\n", "if", "args", ".", "randomized", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "args", ".", "randomized_dim", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "classifier_feature_dim", "*", "num_classes", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "\n", "# define optimizer and lr scheduler", "\n", "", "base_optimizer", "=", "torch", ".", "optim", ".", "SGD", "\n", "ad_optimizer", "=", "SGD", "(", "domain_discri", ".", "get_parameters", "(", "\n", ")", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "optimizer", "=", "SAM", "(", "classifier", ".", "get_parameters", "(", ")", ",", "base_optimizer", ",", "rho", "=", "args", ".", "rho", ",", "adaptive", "=", "False", ",", "\n", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "lr_scheduler", "=", "LambdaLR", "(", "optimizer", ",", "lambda", "x", ":", "args", ".", "lr", "*", "\n", "(", "1.", "+", "args", ".", "lr_gamma", "*", "float", "(", "x", ")", ")", "**", "(", "-", "args", ".", "lr_decay", ")", ")", "\n", "lr_scheduler_ad", "=", "LambdaLR", "(", "\n", "ad_optimizer", ",", "lambda", "x", ":", "args", ".", "lr", "*", "(", "1.", "+", "args", ".", "lr_gamma", "*", "float", "(", "x", ")", ")", "**", "(", "-", "args", ".", "lr_decay", ")", ")", "\n", "\n", "# define loss function", "\n", "domain_adv", "=", "ConditionalDomainAdversarialLoss", "(", "\n", "domain_discri", ",", "entropy_conditioning", "=", "args", ".", "entropy", ",", "\n", "num_classes", "=", "num_classes", ",", "features_dim", "=", "classifier_feature_dim", ",", "randomized", "=", "args", ".", "randomized", ",", "\n", "randomized_dim", "=", "args", ".", "randomized_dim", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "# resume from the best checkpoint", "\n", "if", "args", ".", "phase", "!=", "'train'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "\n", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "# analysis the model", "\n", "", "if", "args", ".", "phase", "==", "'analysis'", ":", "\n", "# extract features from both domains", "\n", "        ", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "classifier", ".", "backbone", ",", "classifier", ".", "pool_layer", ",", "classifier", ".", "bottleneck", ")", ".", "to", "(", "device", ")", "\n", "source_feature", "=", "collect_feature", "(", "\n", "train_source_loader", ",", "feature_extractor", ",", "device", ")", "\n", "target_feature", "=", "collect_feature", "(", "\n", "train_target_loader", ",", "feature_extractor", ",", "device", ")", "\n", "# plot t-SNE", "\n", "tSNE_filename", "=", "osp", ".", "join", "(", "logger", ".", "visualize_directory", ",", "'TSNE.pdf'", ")", "\n", "tsne", ".", "visualize", "(", "source_feature", ",", "target_feature", ",", "tSNE_filename", ")", "\n", "print", "(", "\"Saving t-SNE to\"", ",", "tSNE_filename", ")", "\n", "# calculate A-distance, which is a measure for distribution discrepancy", "\n", "A_distance", "=", "a_distance", ".", "calculate", "(", "\n", "source_feature", ",", "target_feature", ",", "device", ")", "\n", "print", "(", "\"A-distance =\"", ",", "A_distance", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "phase", "==", "'test'", ":", "\n", "        ", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "acc1", ")", "\n", "return", "\n", "\n", "# start training", "\n", "", "best_acc1", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "print", "(", "\"lr_bbone:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "print", "(", "\"lr_btlnck:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "1", "]", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"lr_bbone\"", ":", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "\"lr_btlnck\"", ":", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "1", "]", "}", ")", "\n", "\n", "# train for one epoch", "\n", "", "train", "(", "train_source_iter", ",", "train_target_iter", ",", "classifier", ",", "domain_adv", ",", "optimizer", ",", "ad_optimizer", ",", "\n", "lr_scheduler", ",", "lr_scheduler_ad", ",", "epoch", ",", "args", ")", "\n", "# evaluate on validation set", "\n", "acc1", "=", "utils", ".", "validate", "(", "val_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'val_acc'", ":", "acc1", "}", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "\n", "logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ")", "\n", "if", "acc1", ">", "best_acc1", ":", "\n", "            ", "shutil", ".", "copy", "(", "logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ",", "\n", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", "\n", "", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "", "print", "(", "\"best_acc1 = {:3.1f}\"", ".", "format", "(", "best_acc1", ")", ")", "\n", "\n", "# evaluate on test set", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", ")", "\n", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "\"test_acc1 = {:3.1f}\"", ".", "format", "(", "acc1", ")", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'test_acc'", ":", "acc1", "}", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_sdat.train": [[181, 260], ["common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.ProgressMeter", "model.train", "domain_adv.train", "time.time", "range", "next", "next", "x_s.to.to", "x_t.to.to", "labels_s.to.to", "common.utils.meter.AverageMeter.update", "optimizer.zero_grad", "ad_optimizer.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model", "y.chunk", "f.chunk", "torch.cross_entropy", "loss.backward", "optimizer.first_step", "model", "y.chunk", "f.chunk", "torch.cross_entropy", "domain_adv", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "loss.backward", "ad_optimizer.step", "optimizer.second_step", "lr_scheduler.step", "lr_scheduler_ad.step", "common.utils.meter.AverageMeter.update", "time.time", "common.utils.metric.accuracy", "wandb.log", "loss.item", "x_s.to.size", "x_s.to.size", "x_s.to.size", "domain_adv.item", "x_s.to.size", "common.utils.meter.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.first_step", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.second_step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.accuracy", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter.display"], ["", "def", "train", "(", "train_source_iter", ":", "ForeverDataIterator", ",", "train_target_iter", ":", "ForeverDataIterator", ",", "model", ":", "ImageClassifier", ",", "\n", "domain_adv", ":", "ConditionalDomainAdversarialLoss", ",", "optimizer", ",", "ad_optimizer", ",", "\n", "lr_scheduler", ":", "LambdaLR", ",", "lr_scheduler_ad", ",", "epoch", ":", "int", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':3.1f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':3.1f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':3.2f'", ")", "\n", "trans_losses", "=", "AverageMeter", "(", "'Trans Loss'", ",", "':3.2f'", ")", "\n", "cls_accs", "=", "AverageMeter", "(", "'Cls Acc'", ",", "':3.1f'", ")", "\n", "domain_accs", "=", "AverageMeter", "(", "'Domain Acc'", ",", "':3.1f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "args", ".", "iters_per_epoch", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "trans_losses", ",", "cls_accs", ",", "domain_accs", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "device", "=", "args", ".", "device", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "domain_adv", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "iters_per_epoch", ")", ":", "\n", "        ", "x_s", ",", "labels_s", "=", "next", "(", "train_source_iter", ")", "\n", "x_t", ",", "_", "=", "next", "(", "train_target_iter", ")", "\n", "\n", "x_s", "=", "x_s", ".", "to", "(", "device", ")", "\n", "x_t", "=", "x_t", ".", "to", "(", "device", ")", "\n", "labels_s", "=", "labels_s", ".", "to", "(", "device", ")", "\n", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "ad_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# compute task loss for first step", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_s", ",", "x_t", ")", ",", "dim", "=", "0", ")", "\n", "y", ",", "f", "=", "model", "(", "x", ")", "\n", "y_s", ",", "y_t", "=", "y", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "f_s", ",", "f_t", "=", "f", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "cls_loss", "=", "F", ".", "cross_entropy", "(", "y_s", ",", "labels_s", ")", "\n", "loss", "=", "cls_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Calculate \u03f5\u0302 (w) and add it to the weights", "\n", "optimizer", ".", "first_step", "(", "zero_grad", "=", "True", ")", "\n", "\n", "# Calculate task loss and domain loss", "\n", "y", ",", "f", "=", "model", "(", "x", ")", "\n", "y_s", ",", "y_t", "=", "y", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "f_s", ",", "f_t", "=", "f", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "\n", "cls_loss", "=", "F", ".", "cross_entropy", "(", "y_s", ",", "labels_s", ")", "\n", "transfer_loss", "=", "domain_adv", "(", "y_s", ",", "f_s", ",", "y_t", ",", "f_t", ")", "\n", "domain_acc", "=", "domain_adv", ".", "domain_discriminator_accuracy", "\n", "loss", "=", "cls_loss", "+", "transfer_loss", "*", "args", ".", "trade_off", "\n", "\n", "cls_acc", "=", "accuracy", "(", "y_s", ",", "labels_s", ")", "[", "0", "]", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "epoch", "*", "args", ".", "iters_per_epoch", "+", "i", ",", "'loss'", ":", "loss", ",", "'cls_loss'", ":", "cls_loss", ",", "\n", "'transfer_loss'", ":", "transfer_loss", ",", "'domain_acc'", ":", "domain_acc", "}", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "cls_accs", ".", "update", "(", "cls_acc", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "domain_accs", ".", "update", "(", "domain_acc", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "trans_losses", ".", "update", "(", "transfer_loss", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters of domain classifier", "\n", "ad_optimizer", ".", "step", "(", ")", "\n", "# Update parameters (Sharpness-Aware update)", "\n", "optimizer", ".", "second_step", "(", "zero_grad", "=", "True", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "lr_scheduler_ad", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan.main": [[33, 176], ["common.utils.logger.CompleteLogger", "print", "print", "utils.get_train_transform", "utils.get_val_transform", "print", "print", "utils.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "common.utils.data.ForeverDataIterator", "common.utils.data.ForeverDataIterator", "print", "utils.get_model", "print", "dalib.adaptation.cdan.ImageClassifier().to", "torch.optim.SGD", "print", "torch.optim.lr_scheduler.LambdaLR", "dalib.adaptation.cdan.ConditionalDomainAdversarialLoss().to", "range", "print", "ImageClassifier().to.load_state_dict", "utils.validate", "print", "common.utils.logger.CompleteLogger.close", "wandb.init", "wandb.config.update", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "torch.Identity", "dalib.modules.domain_discriminator.DomainDiscriminator().to", "dalib.modules.domain_discriminator.DomainDiscriminator().to", "ImageClassifier().to.get_parameters", "DomainDiscriminator().to.get_parameters", "torch.load", "torch.load", "torch.load", "torch.load", "ImageClassifier().to.load_state_dict", "torch.Sequential().to", "common.utils.analysis.collect_feature", "common.utils.analysis.collect_feature", "os.join", "common.utils.analysis.tsne.visualize", "print", "common.utils.analysis.a_distance.calculate", "print", "utils.validate", "print", "print", "print", "cdan.train", "utils.validate", "torch.save", "torch.save", "torch.save", "torch.save", "max", "torch.load", "torch.load", "torch.load", "torch.load", "wandb.log", "dalib.adaptation.cdan.ImageClassifier", "dalib.adaptation.cdan.ConditionalDomainAdversarialLoss", "common.utils.logger.CompleteLogger.get_checkpoint_path", "wandb.log", "wandb.log", "ImageClassifier().to.state_dict", "common.utils.logger.CompleteLogger.get_checkpoint_path", "shutil.copy", "common.utils.logger.CompleteLogger.get_checkpoint_path", "dalib.modules.domain_discriminator.DomainDiscriminator", "dalib.modules.domain_discriminator.DomainDiscriminator", "torch.Sequential", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "common.utils.logger.CompleteLogger.get_checkpoint_path", "common.utils.logger.CompleteLogger.get_checkpoint_path", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "float"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_train_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_val_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_dataset", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_model", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.close", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.get_parameters", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.get_parameters", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.__init__.collect_feature", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.__init__.collect_feature", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.tsne.visualize", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.a_distance.calculate", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path"], ["def", "main", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "logger", "=", "CompleteLogger", "(", "args", ".", "log", ",", "args", ".", "phase", ")", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "\"DA\"", ",", "entity", "=", "\"SDAT\"", ",", "name", "=", "args", ".", "log_name", ")", "\n", "wandb", ".", "config", ".", "update", "(", "args", ")", "\n", "", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "device", "=", "args", ".", "device", "\n", "# Data loading code", "\n", "train_transform", "=", "utils", ".", "get_train_transform", "(", "args", ".", "train_resizing", ",", "random_horizontal_flip", "=", "not", "args", ".", "no_hflip", ",", "\n", "random_color_jitter", "=", "False", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "val_transform", "=", "utils", ".", "get_val_transform", "(", "args", ".", "val_resizing", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "print", "(", "\"train_transform: \"", ",", "train_transform", ")", "\n", "print", "(", "\"val_transform: \"", ",", "val_transform", ")", "\n", "\n", "train_source_dataset", ",", "train_target_dataset", ",", "val_dataset", ",", "test_dataset", ",", "num_classes", ",", "args", ".", "class_names", "=", "utils", ".", "get_dataset", "(", "args", ".", "data", ",", "args", ".", "root", ",", "args", ".", "source", ",", "\n", "args", ".", "target", ",", "train_transform", ",", "val_transform", ")", "\n", "train_source_loader", "=", "DataLoader", "(", "train_source_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "True", ")", "\n", "train_target_loader", "=", "DataLoader", "(", "train_target_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "train_source_iter", "=", "ForeverDataIterator", "(", "train_source_loader", ")", "\n", "train_target_iter", "=", "ForeverDataIterator", "(", "train_target_loader", ")", "\n", "\n", "# create model", "\n", "print", "(", "\"=> using model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "backbone", "=", "utils", ".", "get_model", "(", "args", ".", "arch", ",", "pretrain", "=", "not", "args", ".", "scratch", ")", "\n", "print", "(", "backbone", ")", "\n", "pool_layer", "=", "nn", ".", "Identity", "(", ")", "if", "args", ".", "no_pool", "else", "None", "\n", "classifier", "=", "ImageClassifier", "(", "backbone", ",", "num_classes", ",", "bottleneck_dim", "=", "args", ".", "bottleneck_dim", ",", "\n", "pool_layer", "=", "pool_layer", ",", "finetune", "=", "not", "args", ".", "scratch", ")", ".", "to", "(", "device", ")", "\n", "classifier_feature_dim", "=", "classifier", ".", "features_dim", "\n", "\n", "if", "args", ".", "randomized", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "args", ".", "randomized_dim", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "classifier_feature_dim", "*", "num_classes", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "all_parameters", "=", "classifier", ".", "get_parameters", "(", ")", "+", "domain_discri", ".", "get_parameters", "(", ")", "\n", "# define optimizer and lr scheduler", "\n", "optimizer", "=", "SGD", "(", "all_parameters", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "t_total", "=", "args", ".", "iters_per_epoch", "*", "args", ".", "epochs", "\n", "print", "(", "\"{INFORMATION} The total number of steps is \"", ",", "t_total", ")", "\n", "\n", "lr_scheduler", "=", "LambdaLR", "(", "optimizer", ",", "lambda", "x", ":", "args", ".", "lr", "*", "\n", "(", "1.", "+", "args", ".", "lr_gamma", "*", "float", "(", "x", ")", ")", "**", "(", "-", "args", ".", "lr_decay", ")", ")", "\n", "\n", "# define loss function", "\n", "domain_adv", "=", "ConditionalDomainAdversarialLoss", "(", "\n", "domain_discri", ",", "entropy_conditioning", "=", "args", ".", "entropy", ",", "\n", "num_classes", "=", "num_classes", ",", "features_dim", "=", "classifier_feature_dim", ",", "randomized", "=", "args", ".", "randomized", ",", "\n", "randomized_dim", "=", "args", ".", "randomized_dim", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "# resume from the best checkpoint", "\n", "if", "args", ".", "phase", "!=", "'train'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "\n", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "# analysis the model", "\n", "", "if", "args", ".", "phase", "==", "'analysis'", ":", "\n", "# extract features from both domains", "\n", "        ", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "classifier", ".", "backbone", ",", "classifier", ".", "pool_layer", ",", "classifier", ".", "bottleneck", ")", ".", "to", "(", "device", ")", "\n", "source_feature", "=", "collect_feature", "(", "\n", "train_source_loader", ",", "feature_extractor", ",", "device", ")", "\n", "target_feature", "=", "collect_feature", "(", "\n", "train_target_loader", ",", "feature_extractor", ",", "device", ")", "\n", "# plot t-SNE", "\n", "tSNE_filename", "=", "osp", ".", "join", "(", "logger", ".", "visualize_directory", ",", "'TSNE.pdf'", ")", "\n", "tsne", ".", "visualize", "(", "source_feature", ",", "target_feature", ",", "tSNE_filename", ")", "\n", "print", "(", "\"Saving t-SNE to\"", ",", "tSNE_filename", ")", "\n", "# calculate A-distance, which is a measure for distribution discrepancy", "\n", "A_distance", "=", "a_distance", ".", "calculate", "(", "\n", "source_feature", ",", "target_feature", ",", "device", ")", "\n", "print", "(", "\"A-distance =\"", ",", "A_distance", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "phase", "==", "'test'", ":", "\n", "        ", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "acc1", ")", "\n", "return", "\n", "\n", "# start training", "\n", "", "best_acc1", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "print", "(", "\"lr_bbone:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "print", "(", "\"lr_btlnck:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "1", "]", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"lr_bbone\"", ":", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "\"lr_btlnck\"", ":", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "1", "]", "}", ")", "\n", "# train for one epoch", "\n", "", "train", "(", "train_source_iter", ",", "train_target_iter", ",", "classifier", ",", "domain_adv", ",", "optimizer", ",", "\n", "lr_scheduler", ",", "epoch", ",", "args", ")", "\n", "\n", "# evaluate on validation set", "\n", "acc1", "=", "utils", ".", "validate", "(", "val_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'val_acc'", ":", "acc1", "}", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "\n", "logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ")", "\n", "if", "acc1", ">", "best_acc1", ":", "\n", "            ", "shutil", ".", "copy", "(", "logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ",", "\n", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", "\n", "", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "", "print", "(", "\"best_acc1 = {:3.1f}\"", ".", "format", "(", "best_acc1", ")", ")", "\n", "\n", "# evaluate on test set", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", ")", "\n", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "\"test_acc1 = {:3.1f}\"", ".", "format", "(", "acc1", ")", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'test_acc'", ":", "acc1", "}", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan.train": [[178, 243], ["common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.ProgressMeter", "model.train", "domain_adv.train", "time.time", "range", "next", "next", "x_s.to.to", "x_t.to.to", "labels_s.to.to", "common.utils.meter.AverageMeter.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model", "y.chunk", "f.chunk", "torch.cross_entropy", "domain_adv", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "lr_scheduler.step", "common.utils.meter.AverageMeter.update", "time.time", "common.utils.metric.accuracy", "wandb.log", "loss.item", "x_s.to.size", "x_s.to.size", "x_s.to.size", "domain_adv.item", "x_s.to.size", "common.utils.meter.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.accuracy", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter.display"], ["", "def", "train", "(", "train_source_iter", ":", "ForeverDataIterator", ",", "train_target_iter", ":", "ForeverDataIterator", ",", "model", ":", "ImageClassifier", ",", "\n", "domain_adv", ":", "ConditionalDomainAdversarialLoss", ",", "optimizer", ":", "SGD", ",", "\n", "lr_scheduler", ",", "epoch", ":", "int", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':3.1f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':3.1f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':3.2f'", ")", "\n", "trans_losses", "=", "AverageMeter", "(", "'Trans Loss'", ",", "':3.2f'", ")", "\n", "cls_accs", "=", "AverageMeter", "(", "'Cls Acc'", ",", "':3.1f'", ")", "\n", "domain_accs", "=", "AverageMeter", "(", "'Domain Acc'", ",", "':3.1f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "args", ".", "iters_per_epoch", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "trans_losses", ",", "cls_accs", ",", "domain_accs", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "device", "=", "args", ".", "device", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "domain_adv", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "iters_per_epoch", ")", ":", "\n", "        ", "x_s", ",", "labels_s", "=", "next", "(", "train_source_iter", ")", "\n", "x_t", ",", "_", "=", "next", "(", "train_target_iter", ")", "\n", "\n", "x_s", "=", "x_s", ".", "to", "(", "device", ")", "\n", "x_t", "=", "x_t", ".", "to", "(", "device", ")", "\n", "labels_s", "=", "labels_s", ".", "to", "(", "device", ")", "\n", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# compute output", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_s", ",", "x_t", ")", ",", "dim", "=", "0", ")", "\n", "y", ",", "f", "=", "model", "(", "x", ")", "\n", "y_s", ",", "y_t", "=", "y", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "f_s", ",", "f_t", "=", "f", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "\n", "cls_loss", "=", "F", ".", "cross_entropy", "(", "y_s", ",", "labels_s", ")", "\n", "transfer_loss", "=", "domain_adv", "(", "y_s", ",", "f_s", ",", "y_t", ",", "f_t", ")", "\n", "domain_acc", "=", "domain_adv", ".", "domain_discriminator_accuracy", "\n", "loss", "=", "cls_loss", "+", "transfer_loss", "*", "args", ".", "trade_off", "\n", "\n", "cls_acc", "=", "accuracy", "(", "y_s", ",", "labels_s", ")", "[", "0", "]", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "epoch", "*", "args", ".", "iters_per_epoch", "+", "i", ",", "'loss'", ":", "loss", ",", "'cls_loss'", ":", "cls_loss", ",", "\n", "'transfer_loss'", ":", "transfer_loss", ",", "'domain_acc'", ":", "domain_acc", "}", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "cls_accs", ".", "update", "(", "cls_acc", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "domain_accs", ".", "update", "(", "domain_acc", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "trans_losses", ".", "update", "(", "transfer_loss", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.eval.main": [[27, 70], ["utils.get_train_transform", "utils.get_val_transform", "utils.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "utils.get_model", "print", "dalib.adaptation.cdan.ImageClassifier().to", "wandb.init", "wandb.config.update", "torch.Identity", "print", "ImageClassifier().to.load_state_dict", "utils.validate", "print", "dalib.adaptation.cdan.ImageClassifier", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_train_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_val_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_dataset", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_model", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate"], ["def", "main", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "\n", "    ", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "\"DA\"", ",", "entity", "=", "\"SDAT\"", ",", "name", "=", "args", ".", "log_name", ")", "\n", "wandb", ".", "config", ".", "update", "(", "args", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "device", "=", "args", ".", "device", "\n", "# Data loading code", "\n", "train_transform", "=", "utils", ".", "get_train_transform", "(", "args", ".", "train_resizing", ",", "random_horizontal_flip", "=", "not", "args", ".", "no_hflip", ",", "\n", "random_color_jitter", "=", "False", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "val_transform", "=", "utils", ".", "get_val_transform", "(", "args", ".", "val_resizing", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "\n", "train_source_dataset", ",", "train_target_dataset", ",", "val_dataset", ",", "test_dataset", ",", "num_classes", ",", "args", ".", "class_names", "=", "utils", ".", "get_dataset", "(", "args", ".", "data", ",", "args", ".", "root", ",", "args", ".", "source", ",", "\n", "args", ".", "target", ",", "train_transform", ",", "val_transform", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "\n", "# create model", "\n", "print", "(", "\"=> using model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "backbone", "=", "utils", ".", "get_model", "(", "args", ".", "arch", ",", "pretrain", "=", "not", "args", ".", "scratch", ")", "\n", "print", "(", "backbone", ")", "\n", "pool_layer", "=", "nn", ".", "Identity", "(", ")", "if", "args", ".", "no_pool", "else", "None", "\n", "classifier", "=", "ImageClassifier", "(", "backbone", ",", "num_classes", ",", "bottleneck_dim", "=", "args", ".", "bottleneck_dim", ",", "\n", "pool_layer", "=", "pool_layer", ",", "finetune", "=", "not", "args", ".", "scratch", ")", ".", "to", "(", "device", ")", "\n", "classifier_feature_dim", "=", "classifier", ".", "features_dim", "\n", "\n", "# resume from the best checkpoint", "\n", "if", "args", ".", "phase", "!=", "'train'", ":", "\n", "        ", "path", "=", "args", ".", "weight_path", "\n", "print", "(", "f\"[INFORMATION] Using the weights stored at {args.weight_path}\"", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "\n", "", "if", "args", ".", "phase", "==", "'test'", ":", "\n", "        ", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "acc1", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.main": [[35, 182], ["common.utils.logger.CompleteLogger", "print", "print", "utils.get_train_transform", "utils.get_val_transform", "print", "print", "utils.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "common.utils.data.ForeverDataIterator", "common.utils.data.ForeverDataIterator", "print", "utils.get_model", "print", "dalib.adaptation.cdan.ImageClassifier().to", "torch.optim.SGD", "common.utils.sam.SAM", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "dalib.adaptation.cdan.ConditionalDomainAdversarialLoss().to", "dalib.adaptation.mcc.MinimumClassConfusionLoss", "range", "print", "ImageClassifier().to.load_state_dict", "utils.validate", "print", "common.utils.logger.CompleteLogger.close", "wandb.init", "wandb.config.update", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "torch.Identity", "dalib.modules.domain_discriminator.DomainDiscriminator().to", "dalib.modules.domain_discriminator.DomainDiscriminator().to", "DomainDiscriminator().to.get_parameters", "ImageClassifier().to.get_parameters", "torch.load", "torch.load", "torch.load", "torch.load", "ImageClassifier().to.load_state_dict", "torch.Sequential().to", "common.utils.analysis.collect_feature", "common.utils.analysis.collect_feature", "os.join", "common.utils.analysis.tsne.visualize", "print", "common.utils.analysis.a_distance.calculate", "print", "utils.validate", "print", "print", "print", "cdan_mcc_sdat.train", "utils.validate", "torch.save", "torch.save", "torch.save", "torch.save", "max", "torch.load", "torch.load", "torch.load", "torch.load", "wandb.log", "dalib.adaptation.cdan.ImageClassifier", "dalib.adaptation.cdan.ConditionalDomainAdversarialLoss", "common.utils.logger.CompleteLogger.get_checkpoint_path", "wandb.log", "wandb.log", "ImageClassifier().to.state_dict", "common.utils.logger.CompleteLogger.get_checkpoint_path", "shutil.copy", "common.utils.logger.CompleteLogger.get_checkpoint_path", "dalib.modules.domain_discriminator.DomainDiscriminator", "dalib.modules.domain_discriminator.DomainDiscriminator", "torch.Sequential", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "common.utils.logger.CompleteLogger.get_checkpoint_path", "common.utils.logger.CompleteLogger.get_checkpoint_path", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "float", "float"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_train_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_val_transform", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_dataset", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_model", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.close", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.get_parameters", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.get_parameters", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.__init__.collect_feature", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.__init__.collect_feature", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.tsne.visualize", "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.a_distance.calculate", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path"], ["def", "main", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "logger", "=", "CompleteLogger", "(", "args", ".", "log", ",", "args", ".", "phase", ")", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "\"DA\"", ",", "entity", "=", "\"SDAT\"", ",", "name", "=", "args", ".", "log_name", ")", "\n", "wandb", ".", "config", ".", "update", "(", "args", ")", "\n", "", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "device", "=", "args", ".", "device", "\n", "\n", "# Data loading code", "\n", "train_transform", "=", "utils", ".", "get_train_transform", "(", "args", ".", "train_resizing", ",", "random_horizontal_flip", "=", "not", "args", ".", "no_hflip", ",", "\n", "random_color_jitter", "=", "False", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "val_transform", "=", "utils", ".", "get_val_transform", "(", "args", ".", "val_resizing", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "norm_mean", "=", "args", ".", "norm_mean", ",", "norm_std", "=", "args", ".", "norm_std", ")", "\n", "print", "(", "\"train_transform: \"", ",", "train_transform", ")", "\n", "print", "(", "\"val_transform: \"", ",", "val_transform", ")", "\n", "\n", "train_source_dataset", ",", "train_target_dataset", ",", "val_dataset", ",", "test_dataset", ",", "num_classes", ",", "args", ".", "class_names", "=", "utils", ".", "get_dataset", "(", "args", ".", "data", ",", "args", ".", "root", ",", "args", ".", "source", ",", "\n", "args", ".", "target", ",", "train_transform", ",", "val_transform", ")", "\n", "train_source_loader", "=", "DataLoader", "(", "train_source_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "True", ")", "\n", "train_target_loader", "=", "DataLoader", "(", "train_target_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "train_source_iter", "=", "ForeverDataIterator", "(", "train_source_loader", ")", "\n", "train_target_iter", "=", "ForeverDataIterator", "(", "train_target_loader", ")", "\n", "\n", "# create model", "\n", "print", "(", "\"=> using model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "backbone", "=", "utils", ".", "get_model", "(", "args", ".", "arch", ",", "pretrain", "=", "not", "args", ".", "scratch", ")", "\n", "print", "(", "backbone", ")", "\n", "pool_layer", "=", "nn", ".", "Identity", "(", ")", "if", "args", ".", "no_pool", "else", "None", "\n", "classifier", "=", "ImageClassifier", "(", "backbone", ",", "num_classes", ",", "bottleneck_dim", "=", "args", ".", "bottleneck_dim", ",", "\n", "pool_layer", "=", "pool_layer", ",", "finetune", "=", "not", "args", ".", "scratch", ")", ".", "to", "(", "device", ")", "\n", "classifier_feature_dim", "=", "classifier", ".", "features_dim", "\n", "\n", "if", "args", ".", "randomized", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "args", ".", "randomized_dim", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "classifier_feature_dim", "*", "num_classes", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "\n", "# define optimizer and lr scheduler", "\n", "", "base_optimizer", "=", "torch", ".", "optim", ".", "SGD", "\n", "ad_optimizer", "=", "SGD", "(", "domain_discri", ".", "get_parameters", "(", "\n", ")", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "optimizer", "=", "SAM", "(", "classifier", ".", "get_parameters", "(", ")", ",", "base_optimizer", ",", "rho", "=", "args", ".", "rho", ",", "adaptive", "=", "False", ",", "\n", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "lr_scheduler", "=", "LambdaLR", "(", "optimizer", ",", "lambda", "x", ":", "args", ".", "lr", "*", "\n", "(", "1.", "+", "args", ".", "lr_gamma", "*", "float", "(", "x", ")", ")", "**", "(", "-", "args", ".", "lr_decay", ")", ")", "\n", "lr_scheduler_ad", "=", "LambdaLR", "(", "\n", "ad_optimizer", ",", "lambda", "x", ":", "args", ".", "lr", "*", "(", "1.", "+", "args", ".", "lr_gamma", "*", "float", "(", "x", ")", ")", "**", "(", "-", "args", ".", "lr_decay", ")", ")", "\n", "\n", "# define loss function", "\n", "domain_adv", "=", "ConditionalDomainAdversarialLoss", "(", "\n", "domain_discri", ",", "entropy_conditioning", "=", "args", ".", "entropy", ",", "\n", "num_classes", "=", "num_classes", ",", "features_dim", "=", "classifier_feature_dim", ",", "randomized", "=", "args", ".", "randomized", ",", "\n", "randomized_dim", "=", "args", ".", "randomized_dim", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "mcc_loss", "=", "MinimumClassConfusionLoss", "(", "temperature", "=", "args", ".", "temperature", ")", "\n", "\n", "# resume from the best checkpoint", "\n", "if", "args", ".", "phase", "!=", "'train'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "\n", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "# analysis the model", "\n", "", "if", "args", ".", "phase", "==", "'analysis'", ":", "\n", "# extract features from both domains", "\n", "        ", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "classifier", ".", "backbone", ",", "classifier", ".", "pool_layer", ",", "classifier", ".", "bottleneck", ")", ".", "to", "(", "device", ")", "\n", "source_feature", "=", "collect_feature", "(", "\n", "train_source_loader", ",", "feature_extractor", ",", "device", ")", "\n", "target_feature", "=", "collect_feature", "(", "\n", "train_target_loader", ",", "feature_extractor", ",", "device", ")", "\n", "# plot t-SNE", "\n", "tSNE_filename", "=", "osp", ".", "join", "(", "logger", ".", "visualize_directory", ",", "'TSNE.pdf'", ")", "\n", "tsne", ".", "visualize", "(", "source_feature", ",", "target_feature", ",", "tSNE_filename", ")", "\n", "print", "(", "\"Saving t-SNE to\"", ",", "tSNE_filename", ")", "\n", "# calculate A-distance, which is a measure for distribution discrepancy", "\n", "A_distance", "=", "a_distance", ".", "calculate", "(", "\n", "source_feature", ",", "target_feature", ",", "device", ")", "\n", "print", "(", "\"A-distance =\"", ",", "A_distance", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "phase", "==", "'test'", ":", "\n", "        ", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "acc1", ")", "\n", "return", "\n", "\n", "# start training", "\n", "", "best_acc1", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "print", "(", "\"lr_bbone:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "print", "(", "\"lr_btlnck:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "1", "]", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"lr_bbone\"", ":", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "\"lr_btlnck\"", ":", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "1", "]", "}", ")", "\n", "# train for one epoch", "\n", "\n", "", "train", "(", "train_source_iter", ",", "train_target_iter", ",", "classifier", ",", "domain_adv", ",", "mcc_loss", ",", "optimizer", ",", "ad_optimizer", ",", "\n", "lr_scheduler", ",", "lr_scheduler_ad", ",", "epoch", ",", "args", ")", "\n", "# evaluate on validation set", "\n", "acc1", "=", "utils", ".", "validate", "(", "val_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'val_acc'", ":", "acc1", "}", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "\n", "logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ")", "\n", "if", "acc1", ">", "best_acc1", ":", "\n", "            ", "shutil", ".", "copy", "(", "logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ",", "\n", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", "\n", "", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "", "print", "(", "\"best_acc1 = {:3.1f}\"", ".", "format", "(", "best_acc1", ")", ")", "\n", "\n", "# evaluate on test set", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", ")", "\n", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "\"test_acc1 = {:3.1f}\"", ".", "format", "(", "acc1", ")", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'test_acc'", ":", "acc1", "}", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train": [[184, 264], ["common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.ProgressMeter", "model.train", "domain_adv.train", "time.time", "range", "next", "next", "x_s.to.to", "x_t.to.to", "labels_s.to.to", "common.utils.meter.AverageMeter.update", "optimizer.zero_grad", "ad_optimizer.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model", "y.chunk", "f.chunk", "torch.cross_entropy", "mcc", "loss.backward", "optimizer.first_step", "model", "y.chunk", "f.chunk", "torch.cross_entropy", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "loss.backward", "ad_optimizer.step", "optimizer.second_step", "lr_scheduler.step", "lr_scheduler_ad.step", "common.utils.meter.AverageMeter.update", "time.time", "domain_adv", "mcc", "common.utils.metric.accuracy", "wandb.log", "loss.item", "x_s.to.size", "x_s.to.size", "x_s.to.size", "transfer_loss.item", "x_s.to.size", "common.utils.meter.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.first_step", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.second_step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.accuracy", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter.display"], ["", "def", "train", "(", "train_source_iter", ":", "ForeverDataIterator", ",", "train_target_iter", ":", "ForeverDataIterator", ",", "model", ":", "ImageClassifier", ",", "\n", "domain_adv", ":", "ConditionalDomainAdversarialLoss", ",", "mcc", ",", "optimizer", ",", "ad_optimizer", ",", "\n", "lr_scheduler", ":", "LambdaLR", ",", "lr_scheduler_ad", ",", "epoch", ":", "int", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':3.1f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':3.1f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':3.2f'", ")", "\n", "trans_losses", "=", "AverageMeter", "(", "'Trans Loss'", ",", "':3.2f'", ")", "\n", "cls_accs", "=", "AverageMeter", "(", "'Cls Acc'", ",", "':3.1f'", ")", "\n", "domain_accs", "=", "AverageMeter", "(", "'Domain Acc'", ",", "':3.1f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "args", ".", "iters_per_epoch", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "trans_losses", ",", "cls_accs", ",", "domain_accs", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "domain_adv", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "iters_per_epoch", ")", ":", "\n", "        ", "x_s", ",", "labels_s", "=", "next", "(", "train_source_iter", ")", "\n", "x_t", ",", "_", "=", "next", "(", "train_target_iter", ")", "\n", "\n", "x_s", "=", "x_s", ".", "to", "(", "device", ")", "\n", "x_t", "=", "x_t", ".", "to", "(", "device", ")", "\n", "labels_s", "=", "labels_s", ".", "to", "(", "device", ")", "\n", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "ad_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# compute output", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_s", ",", "x_t", ")", ",", "dim", "=", "0", ")", "\n", "y", ",", "f", "=", "model", "(", "x", ")", "\n", "y_s", ",", "y_t", "=", "y", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "f_s", ",", "f_t", "=", "f", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "cls_loss", "=", "F", ".", "cross_entropy", "(", "y_s", ",", "labels_s", ")", "\n", "mcc_loss_value", "=", "mcc", "(", "y_t", ")", "\n", "loss", "=", "cls_loss", "+", "mcc_loss_value", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Calculate \u03f5\u0302 (w) and add it to the weights", "\n", "optimizer", ".", "first_step", "(", "zero_grad", "=", "True", ")", "\n", "\n", "# Calculate task loss and domain loss", "\n", "y", ",", "f", "=", "model", "(", "x", ")", "\n", "y_s", ",", "y_t", "=", "y", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "f_s", ",", "f_t", "=", "f", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "\n", "cls_loss", "=", "F", ".", "cross_entropy", "(", "y_s", ",", "labels_s", ")", "\n", "transfer_loss", "=", "domain_adv", "(", "y_s", ",", "f_s", ",", "y_t", ",", "f_t", ")", "+", "mcc", "(", "y_t", ")", "\n", "domain_acc", "=", "domain_adv", ".", "domain_discriminator_accuracy", "\n", "loss", "=", "cls_loss", "+", "transfer_loss", "*", "args", ".", "trade_off", "\n", "\n", "cls_acc", "=", "accuracy", "(", "y_s", ",", "labels_s", ")", "[", "0", "]", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "epoch", "*", "args", ".", "iters_per_epoch", "+", "i", ",", "'loss'", ":", "loss", ",", "'cls_loss'", ":", "cls_loss", ",", "\n", "'transfer_loss'", ":", "transfer_loss", ",", "'domain_acc'", ":", "domain_acc", "}", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "cls_accs", ".", "update", "(", "cls_acc", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "domain_accs", ".", "update", "(", "domain_acc", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "trans_losses", ".", "update", "(", "transfer_loss", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters of domain classifier", "\n", "ad_optimizer", ".", "step", "(", ")", "\n", "# Update parameters (Sharpness-Aware update)", "\n", "optimizer", ".", "second_step", "(", "zero_grad", "=", "True", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "lr_scheduler_ad", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_model_names": [[21, 27], ["sorted", "timm.list_models", "name.islower", "callable", "name.startswith"], "function", ["None"], ["def", "get_model_names", "(", ")", ":", "\n", "    ", "return", "sorted", "(", "\n", "name", "for", "name", "in", "models", ".", "__dict__", "\n", "if", "name", ".", "islower", "(", ")", "and", "not", "name", ".", "startswith", "(", "\"__\"", ")", "\n", "and", "callable", "(", "models", ".", "__dict__", "[", "name", "]", ")", "\n", ")", "+", "timm", ".", "list_models", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_model": [[29, 44], ["timm.create_model", "timm.create_model.reset_classifier", "torch.Identity"], "function", ["None"], ["", "def", "get_model", "(", "model_name", ",", "pretrain", "=", "True", ")", ":", "\n", "    ", "if", "model_name", "in", "models", ".", "__dict__", ":", "\n", "# load models from common.vision.models", "\n", "        ", "backbone", "=", "models", ".", "__dict__", "[", "model_name", "]", "(", "pretrained", "=", "pretrain", ")", "\n", "", "else", ":", "\n", "# load models from pytorch-image-models", "\n", "        ", "backbone", "=", "timm", ".", "create_model", "(", "model_name", ",", "pretrained", "=", "pretrain", ")", "\n", "try", ":", "\n", "#backbone.out_features = backbone.get_classifier().in_features", "\n", "            ", "backbone", ".", "out_features", "=", "768", "\n", "backbone", ".", "reset_classifier", "(", "0", ",", "''", ")", "\n", "", "except", ":", "\n", "            ", "backbone", ".", "out_features", "=", "backbone", ".", "head", ".", "in_features", "\n", "backbone", ".", "head", "=", "nn", ".", "Identity", "(", ")", "\n", "", "", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.convert_from_wilds_dataset": [[46, 59], ["Dataset", "len"], "function", ["None"], ["", "def", "convert_from_wilds_dataset", "(", "wild_dataset", ")", ":", "\n", "    ", "class", "Dataset", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "wild_dataset", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "            ", "x", ",", "y", ",", "metadata", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "return", "x", ",", "y", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n", "", "", "return", "Dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_dataset_names": [[61, 66], ["sorted", "callable", "name.startswith"], "function", ["None"], ["", "def", "get_dataset_names", "(", ")", ":", "\n", "    ", "return", "sorted", "(", "\n", "name", "for", "name", "in", "datasets", ".", "__dict__", "\n", "if", "not", "name", ".", "startswith", "(", "\"__\"", ")", "and", "callable", "(", "datasets", ".", "__dict__", "[", "name", "]", ")", "\n", ")", "+", "wilds", ".", "supported_datasets", "+", "[", "'Digits'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_dataset": [[68, 105], ["common.MNIST.get_classes", "len", "os.join", "os.join", "os.join", "utils.get_dataset.concat_dataset"], "function", ["None"], ["", "def", "get_dataset", "(", "dataset_name", ",", "root", ",", "source", ",", "target", ",", "train_source_transform", ",", "val_transform", ",", "train_target_transform", "=", "None", ")", ":", "\n", "    ", "if", "train_target_transform", "is", "None", ":", "\n", "        ", "train_target_transform", "=", "train_source_transform", "\n", "", "if", "dataset_name", "==", "\"Digits\"", ":", "\n", "        ", "train_source_dataset", "=", "datasets", ".", "__dict__", "[", "source", "[", "0", "]", "]", "(", "osp", ".", "join", "(", "root", ",", "source", "[", "0", "]", ")", ",", "download", "=", "True", ",", "\n", "transform", "=", "train_source_transform", ")", "\n", "train_target_dataset", "=", "datasets", ".", "__dict__", "[", "target", "[", "0", "]", "]", "(", "osp", ".", "join", "(", "root", ",", "target", "[", "0", "]", ")", ",", "download", "=", "True", ",", "\n", "transform", "=", "train_target_transform", ")", "\n", "val_dataset", "=", "test_dataset", "=", "datasets", ".", "__dict__", "[", "target", "[", "0", "]", "]", "(", "osp", ".", "join", "(", "root", ",", "target", "[", "0", "]", ")", ",", "split", "=", "'test'", ",", "\n", "download", "=", "True", ",", "transform", "=", "val_transform", ")", "\n", "class_names", "=", "datasets", ".", "MNIST", ".", "get_classes", "(", ")", "\n", "num_classes", "=", "len", "(", "class_names", ")", "\n", "", "elif", "dataset_name", "in", "datasets", ".", "__dict__", ":", "\n", "# load datasets from common.vision.datasets", "\n", "        ", "dataset", "=", "datasets", ".", "__dict__", "[", "dataset_name", "]", "\n", "\n", "def", "concat_dataset", "(", "tasks", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "ConcatDataset", "(", "[", "dataset", "(", "task", "=", "task", ",", "**", "kwargs", ")", "for", "task", "in", "tasks", "]", ")", "\n", "\n", "", "train_source_dataset", "=", "concat_dataset", "(", "root", "=", "root", ",", "tasks", "=", "source", ",", "download", "=", "True", ",", "transform", "=", "train_source_transform", ")", "\n", "train_target_dataset", "=", "concat_dataset", "(", "root", "=", "root", ",", "tasks", "=", "target", ",", "download", "=", "True", ",", "transform", "=", "train_target_transform", ")", "\n", "val_dataset", "=", "concat_dataset", "(", "root", "=", "root", ",", "tasks", "=", "target", ",", "download", "=", "True", ",", "transform", "=", "val_transform", ")", "\n", "if", "dataset_name", "==", "'DomainNet'", ":", "\n", "            ", "test_dataset", "=", "concat_dataset", "(", "root", "=", "root", ",", "tasks", "=", "target", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "val_transform", ")", "\n", "", "else", ":", "\n", "            ", "test_dataset", "=", "val_dataset", "\n", "", "class_names", "=", "train_source_dataset", ".", "datasets", "[", "0", "]", ".", "classes", "\n", "num_classes", "=", "len", "(", "class_names", ")", "\n", "", "else", ":", "\n", "# load datasets from wilds", "\n", "        ", "dataset", "=", "wilds", ".", "get_dataset", "(", "dataset_name", ",", "root_dir", "=", "root", ",", "download", "=", "True", ")", "\n", "num_classes", "=", "dataset", ".", "n_classes", "\n", "class_names", "=", "None", "\n", "train_source_dataset", "=", "convert_from_wilds_dataset", "(", "dataset", ".", "get_subset", "(", "'train'", ",", "transform", "=", "train_source_transform", ")", ")", "\n", "train_target_dataset", "=", "convert_from_wilds_dataset", "(", "dataset", ".", "get_subset", "(", "'test'", ",", "transform", "=", "train_target_transform", ")", ")", "\n", "val_dataset", "=", "test_dataset", "=", "convert_from_wilds_dataset", "(", "dataset", ".", "get_subset", "(", "'test'", ",", "transform", "=", "val_transform", ")", ")", "\n", "", "return", "train_source_dataset", ",", "train_target_dataset", ",", "val_dataset", ",", "test_dataset", ",", "num_classes", ",", "class_names", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.validate": [[107, 152], ["common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.ProgressMeter", "model.eval", "len", "common.utils.metric.ConfusionMatrix", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "len", "images.to.to", "target.to.to", "model", "torch.cross_entropy", "common.utils.metric.accuracy", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "time.time", "print", "common.utils.metric.ConfusionMatrix.update", "F.cross_entropy.item", "images.to.size", "acc1.item", "images.to.size", "common.utils.meter.ProgressMeter.display", "common.utils.metric.ConfusionMatrix.format", "model.argmax", "time.time"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.accuracy", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter.display", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.format"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "args", ",", "device", ")", "->", "float", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", "]", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "if", "args", ".", "per_class_eval", ":", "\n", "        ", "confmat", "=", "ConfusionMatrix", "(", "len", "(", "args", ".", "class_names", ")", ")", "\n", "", "else", ":", "\n", "        ", "confmat", "=", "None", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "if", "confmat", ":", "\n", "                ", "confmat", ".", "update", "(", "target", ",", "output", ".", "argmax", "(", "1", ")", ")", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f}'", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "if", "confmat", ":", "\n", "            ", "print", "(", "confmat", ".", "format", "(", "args", ".", "class_names", ")", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_train_transform": [[154, 191], ["transforms.extend", "torchvision.Compose", "torchvision.Compose", "transforms.append", "transforms.append", "torchvision.Compose", "torchvision.RandomHorizontalFlip", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Normalize", "common.vision.transforms.ResizeImage", "torchvision.RandomResizedCrop", "torchvision.Compose", "common.vision.transforms.ResizeImage", "torchvision.CenterCrop", "common.vision.transforms.ResizeImage", "NotImplementedError", "common.vision.transforms.ResizeImage", "torchvision.RandomCrop"], "function", ["None"], ["", "def", "get_train_transform", "(", "resizing", "=", "'default'", ",", "random_horizontal_flip", "=", "True", ",", "random_color_jitter", "=", "False", ",", "\n", "resize_size", "=", "224", ",", "norm_mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "norm_std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "\"\"\"\n    resizing mode:\n        - default: resize the image to 256 and take a random resized crop of size 224;\n        - cen.crop: resize the image to 256 and take the center crop of size 224;\n        - res: resize the image to 224;\n    \"\"\"", "\n", "if", "resizing", "==", "'default'", ":", "\n", "        ", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "256", ")", ",", "\n", "T", ".", "RandomResizedCrop", "(", "224", ")", "\n", "]", ")", "\n", "", "elif", "resizing", "==", "'cen.crop'", ":", "\n", "        ", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "256", ")", ",", "\n", "T", ".", "CenterCrop", "(", "224", ")", "\n", "]", ")", "\n", "", "elif", "resizing", "==", "'ran.crop'", ":", "\n", "        ", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "256", ")", ",", "\n", "T", ".", "RandomCrop", "(", "224", ")", "\n", "]", ")", "\n", "", "elif", "resizing", "==", "'res.'", ":", "\n", "        ", "transform", "=", "ResizeImage", "(", "resize_size", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "resizing", ")", "\n", "", "transforms", "=", "[", "transform", "]", "\n", "if", "random_horizontal_flip", ":", "\n", "        ", "transforms", ".", "append", "(", "T", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "if", "random_color_jitter", ":", "\n", "        ", "transforms", ".", "append", "(", "T", ".", "ColorJitter", "(", "brightness", "=", "0.5", ",", "contrast", "=", "0.5", ",", "saturation", "=", "0.5", ",", "hue", "=", "0.5", ")", ")", "\n", "", "transforms", ".", "extend", "(", "[", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "norm_mean", ",", "std", "=", "norm_std", ")", "\n", "]", ")", "\n", "return", "T", ".", "Compose", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.get_val_transform": [[193, 213], ["torchvision.Compose", "torchvision.Compose", "common.vision.transforms.ResizeImage", "NotImplementedError", "torchvision.ToTensor", "torchvision.Normalize", "common.vision.transforms.ResizeImage", "torchvision.CenterCrop"], "function", ["None"], ["", "def", "get_val_transform", "(", "resizing", "=", "'default'", ",", "resize_size", "=", "224", ",", "\n", "norm_mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "norm_std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "\"\"\"\n    resizing mode:\n        - default: resize the image to 256 and take the center crop of size 224;\n        \u2013 res.: resize the image to 224\n    \"\"\"", "\n", "if", "resizing", "==", "'default'", ":", "\n", "        ", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "256", ")", ",", "\n", "T", ".", "CenterCrop", "(", "224", ")", ",", "\n", "]", ")", "\n", "", "elif", "resizing", "==", "'res.'", ":", "\n", "        ", "transform", "=", "ResizeImage", "(", "resize_size", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "resizing", ")", "\n", "", "return", "T", ".", "Compose", "(", "[", "\n", "transform", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "norm_mean", ",", "std", "=", "norm_std", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.examples.utils.pretrain": [[216, 264], ["common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.AverageMeter", "common.utils.meter.ProgressMeter", "model.train", "time.time", "range", "next", "x_s.to.to", "labels_s.to.to", "common.utils.meter.AverageMeter.update", "model", "torch.cross_entropy", "common.utils.meter.AverageMeter.update", "common.utils.meter.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "lr_scheduler.step", "common.utils.meter.AverageMeter.update", "time.time", "common.utils.metric.accuracy", "wandb.log", "loss.item", "x_s.to.size", "cls_acc.item", "x_s.to.size", "common.utils.meter.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.accuracy", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter.display"], ["", "def", "pretrain", "(", "train_source_iter", ",", "model", ",", "optimizer", ",", "lr_scheduler", ",", "epoch", ",", "args", ",", "device", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':3.1f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':3.1f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':3.2f'", ")", "\n", "cls_accs", "=", "AverageMeter", "(", "'Cls Acc'", ",", "':3.1f'", ")", "\n", "\n", "progress", "=", "ProgressMeter", "(", "\n", "args", ".", "iters_per_epoch", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "cls_accs", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "iters_per_epoch", ")", ":", "\n", "        ", "x_s", ",", "labels_s", "=", "next", "(", "train_source_iter", ")", "\n", "x_s", "=", "x_s", ".", "to", "(", "device", ")", "\n", "labels_s", "=", "labels_s", ".", "to", "(", "device", ")", "\n", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# compute output", "\n", "y_s", ",", "f_s", "=", "model", "(", "x_s", ")", "\n", "\n", "cls_loss", "=", "F", ".", "cross_entropy", "(", "y_s", ",", "labels_s", ")", "\n", "loss", "=", "cls_loss", "\n", "\n", "cls_acc", "=", "accuracy", "(", "y_s", ",", "labels_s", ")", "[", "0", "]", "\n", "if", "args", ".", "log_results", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "epoch", "*", "args", ".", "iters_per_epoch", "+", "i", ",", "'loss'", ":", "loss", "}", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "cls_accs", ".", "update", "(", "cls_acc", ".", "item", "(", ")", ",", "x_s", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.gl.GradientFunction.forward": [[14, 19], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "Any", ",", "input", ":", "torch", ".", "Tensor", ",", "coeff", ":", "Optional", "[", "float", "]", "=", "1.", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "ctx", ".", "coeff", "=", "coeff", "\n", "output", "=", "input", "*", "1.0", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.gl.GradientFunction.backward": [[20, 23], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "Any", ",", "grad_output", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Any", "]", ":", "\n", "        ", "return", "grad_output", "*", "ctx", ".", "coeff", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.gl.WarmStartGradientLayer.__init__": [[51, 60], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ":", "Optional", "[", "float", "]", "=", "1.0", ",", "lo", ":", "Optional", "[", "float", "]", "=", "0.0", ",", "hi", ":", "Optional", "[", "float", "]", "=", "1.", ",", "\n", "max_iters", ":", "Optional", "[", "int", "]", "=", "1000.", ",", "auto_step", ":", "Optional", "[", "bool", "]", "=", "False", ")", ":", "\n", "        ", "super", "(", "WarmStartGradientLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "lo", "=", "lo", "\n", "self", ".", "hi", "=", "hi", "\n", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "auto_step", "=", "auto_step", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.gl.WarmStartGradientLayer.forward": [[61, 70], ["numpy.float", "GradientFunction.apply", "gl.WarmStartGradientLayer.step", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "coeff", "=", "np", ".", "float", "(", "\n", "2.0", "*", "(", "self", ".", "hi", "-", "self", ".", "lo", ")", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "self", ".", "alpha", "*", "self", ".", "iter_num", "/", "self", ".", "max_iters", ")", ")", "\n", "-", "(", "self", ".", "hi", "-", "self", ".", "lo", ")", "+", "self", ".", "lo", "\n", ")", "\n", "if", "self", ".", "auto_step", ":", "\n", "            ", "self", ".", "step", "(", ")", "\n", "", "return", "GradientFunction", ".", "apply", "(", "input", ",", "coeff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.gl.WarmStartGradientLayer.step": [[71, 74], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Increase iteration number :math:`i` by 1\"\"\"", "\n", "self", ".", "iter_num", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.kernels.GaussianKernel.__init__": [[44, 51], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "self", ",", "sigma", ":", "Optional", "[", "float", "]", "=", "None", ",", "track_running_stats", ":", "Optional", "[", "bool", "]", "=", "True", ",", "\n", "alpha", ":", "Optional", "[", "float", "]", "=", "1.", ")", ":", "\n", "        ", "super", "(", "GaussianKernel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "track_running_stats", "or", "sigma", "is", "not", "None", "\n", "self", ".", "sigma_square", "=", "torch", ".", "tensor", "(", "sigma", "*", "sigma", ")", "if", "sigma", "is", "not", "None", "else", "None", "\n", "self", ".", "track_running_stats", "=", "track_running_stats", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.kernels.GaussianKernel.forward": [[52, 59], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "l2_distance_square.detach", "X.unsqueeze", "X.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "l2_distance_square", "=", "(", "(", "X", ".", "unsqueeze", "(", "0", ")", "-", "X", ".", "unsqueeze", "(", "1", ")", ")", "**", "2", ")", ".", "sum", "(", "2", ")", "\n", "\n", "if", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "sigma_square", "=", "self", ".", "alpha", "*", "torch", ".", "mean", "(", "l2_distance_square", ".", "detach", "(", ")", ")", "\n", "\n", "", "return", "torch", ".", "exp", "(", "-", "l2_distance_square", "/", "(", "2", "*", "self", ".", "sigma_square", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.domain_discriminator.DomainDiscriminator.__init__": [[29, 51], ["torch.Sequential.__init__", "torch.Sequential.__init__", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear", "torch.Sigmoid", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__", "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "self", ",", "in_feature", ":", "int", ",", "hidden_size", ":", "int", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "if", "batch_norm", ":", "\n", "            ", "super", "(", "DomainDiscriminator", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "Linear", "(", "in_feature", ",", "hidden_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", "DomainDiscriminator", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "Linear", "(", "in_feature", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.domain_discriminator.DomainDiscriminator.get_parameters": [[53, 55], ["domain_discriminator.DomainDiscriminator.parameters"], "methods", ["None"], ["", "", "def", "get_parameters", "(", "self", ")", "->", "List", "[", "Dict", "]", ":", "\n", "        ", "return", "[", "{", "\"params\"", ":", "self", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1.", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.forward": [[14, 19], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "Any", ",", "input", ":", "torch", ".", "Tensor", ",", "coeff", ":", "Optional", "[", "float", "]", "=", "1.", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "ctx", ".", "coeff", "=", "coeff", "\n", "output", "=", "input", "*", "1.0", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.backward": [[20, 23], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "Any", ",", "grad_output", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Any", "]", ":", "\n", "        ", "return", "grad_output", ".", "neg", "(", ")", "*", "ctx", ".", "coeff", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseLayer.__init__": [[26, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GradientReverseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseLayer.forward": [[29, 31], ["GradientReverseFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "return", "GradientReverseFunction", ".", "apply", "(", "*", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.WarmStartGradientReverseLayer.__init__": [[59, 68], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ":", "Optional", "[", "float", "]", "=", "1.0", ",", "lo", ":", "Optional", "[", "float", "]", "=", "0.0", ",", "hi", ":", "Optional", "[", "float", "]", "=", "1.", ",", "\n", "max_iters", ":", "Optional", "[", "int", "]", "=", "1000.", ",", "auto_step", ":", "Optional", "[", "bool", "]", "=", "False", ")", ":", "\n", "        ", "super", "(", "WarmStartGradientReverseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "lo", "=", "lo", "\n", "self", ".", "hi", "=", "hi", "\n", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "auto_step", "=", "auto_step", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.WarmStartGradientReverseLayer.forward": [[69, 78], ["numpy.float", "GradientReverseFunction.apply", "grl.WarmStartGradientReverseLayer.step", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "coeff", "=", "np", ".", "float", "(", "\n", "2.0", "*", "(", "self", ".", "hi", "-", "self", ".", "lo", ")", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "self", ".", "alpha", "*", "self", ".", "iter_num", "/", "self", ".", "max_iters", ")", ")", "\n", "-", "(", "self", ".", "hi", "-", "self", ".", "lo", ")", "+", "self", ".", "lo", "\n", ")", "\n", "if", "self", ".", "auto_step", ":", "\n", "            ", "self", ".", "step", "(", ")", "\n", "", "return", "GradientReverseFunction", ".", "apply", "(", "input", ",", "coeff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.WarmStartGradientReverseLayer.step": [[79, 82], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Increase iteration number :math:`i` by 1\"\"\"", "\n", "self", ".", "iter_num", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.entropy.entropy": [[8, 35], ["H.sum.sum", "torch.log", "H.sum.mean"], "function", ["None"], ["def", "entropy", "(", "predictions", ":", "torch", ".", "Tensor", ",", "reduction", "=", "'none'", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "r\"\"\"Entropy of prediction.\n    The definition is:\n\n    .. math::\n        entropy(p) = - \\sum_{c=1}^C p_c \\log p_c\n\n    where C is number of classes.\n\n    Args:\n        predictions (tensor): Classifier predictions. Expected to contain raw, normalized scores for each class\n        reduction (str, optional): Specifies the reduction to apply to the output:\n          ``'none'`` | ``'mean'``. ``'none'``: no reduction will be applied,\n          ``'mean'``: the sum of the output will be divided by the number of\n          elements in the output. Default: ``'mean'``\n\n    Shape:\n        - predictions: :math:`(minibatch, C)` where C means the number of classes.\n        - Output: :math:`(minibatch, )` by default. If :attr:`reduction` is ``'mean'``, then scalar.\n    \"\"\"", "\n", "epsilon", "=", "1e-5", "\n", "H", "=", "-", "predictions", "*", "torch", ".", "log", "(", "predictions", "+", "epsilon", ")", "\n", "H", "=", "H", ".", "sum", "(", "dim", "=", "1", ")", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "H", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.__init__": [[44, 71], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "print", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Flatten"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ":", "nn", ".", "Module", ",", "num_classes", ":", "int", ",", "bottleneck", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "bottleneck_dim", ":", "Optional", "[", "int", "]", "=", "-", "1", ",", "head", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "finetune", "=", "True", ",", "pool_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "pool_layer", "is", "None", ":", "\n", "            ", "self", ".", "pool_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pool_layer", "=", "pool_layer", "\n", "", "if", "bottleneck", "is", "None", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "_features_dim", "=", "backbone", ".", "out_features", "\n", "", "else", ":", "\n", "            ", "self", ".", "bottleneck", "=", "bottleneck", "\n", "print", "(", "\"[INFORMATION] The bottleneck dim is \"", ",", "bottleneck_dim", ")", "\n", "assert", "bottleneck_dim", ">", "0", "\n", "self", ".", "_features_dim", "=", "bottleneck_dim", "\n", "\n", "\n", "", "if", "head", "is", "None", ":", "\n", "            ", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "_features_dim", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "head", "=", "head", "\n", "", "self", ".", "finetune", "=", "finetune", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.features_dim": [[72, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "features_dim", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"The dimension of features before the final `head` layer\"\"\"", "\n", "return", "self", ".", "_features_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.forward": [[77, 86], ["classifier.Classifier.pool_layer", "classifier.Classifier.bottleneck", "classifier.Classifier.head", "classifier.Classifier.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "f", "=", "self", ".", "pool_layer", "(", "self", ".", "backbone", "(", "x", ")", ")", "\n", "f", "=", "self", ".", "bottleneck", "(", "f", ")", "\n", "predictions", "=", "self", ".", "head", "(", "f", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "predictions", ",", "f", "\n", "", "else", ":", "\n", "            ", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.modules.classifier.Classifier.get_parameters": [[87, 98], ["classifier.Classifier.backbone.parameters", "classifier.Classifier.bottleneck.parameters", "classifier.Classifier.head.parameters"], "methods", ["None"], ["", "", "def", "get_parameters", "(", "self", ",", "base_lr", "=", "1.0", ")", "->", "List", "[", "Dict", "]", ":", "\n", "        ", "\"\"\"A parameter list which decides optimization hyper-parameters,\n            such as the relative learning rate of each layer\n        \"\"\"", "\n", "params", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "backbone", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "0.1", "*", "base_lr", "if", "self", ".", "finetune", "else", "1.0", "*", "base_lr", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "bottleneck", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1.0", "*", "base_lr", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "head", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "1.0", "*", "base_lr", "}", ",", "\n", "]", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.cdan.ConditionalDomainAdversarialLoss.__init__": [[76, 95], ["torch.Module.__init__", "modules.grl.WarmStartGradientReverseLayer", "cdan.RandomizedMultiLinearMap", "cdan.MultiLinearMap", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["train_target_iter", "=", "ForeverDataIterator", "(", "train_target_loader", ")", "\n", "\n", "# create model", "\n", "print", "(", "\"=> using model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "backbone", "=", "utils", ".", "get_model", "(", "args", ".", "arch", ",", "pretrain", "=", "not", "args", ".", "scratch", ")", "\n", "print", "(", "backbone", ")", "\n", "pool_layer", "=", "nn", ".", "Identity", "(", ")", "if", "args", ".", "no_pool", "else", "None", "\n", "classifier", "=", "ImageClassifier", "(", "backbone", ",", "num_classes", ",", "bottleneck_dim", "=", "args", ".", "bottleneck_dim", ",", "\n", "pool_layer", "=", "pool_layer", ",", "finetune", "=", "not", "args", ".", "scratch", ")", ".", "to", "(", "device", ")", "\n", "classifier_feature_dim", "=", "classifier", ".", "features_dim", "\n", "\n", "if", "args", ".", "randomized", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "args", ".", "randomized_dim", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "domain_discri", "=", "DomainDiscriminator", "(", "\n", "classifier_feature_dim", "*", "num_classes", ",", "hidden_size", "=", "1024", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "all_parameters", "=", "classifier", ".", "get_parameters", "(", ")", "+", "domain_discri", ".", "get_parameters", "(", ")", "\n", "# define optimizer and lr scheduler", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.cdan.ConditionalDomainAdversarialLoss.forward": [[96, 111], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "cdan.ConditionalDomainAdversarialLoss.grl", "cdan.ConditionalDomainAdversarialLoss.domain_discriminator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "common.utils.metric.binary_accuracy", "cdan.ConditionalDomainAdversarialLoss.bce", "cdan.ConditionalDomainAdversarialLoss.map", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "weight.view_as", "torch.softmax", "torch.softmax", "torch.softmax", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "modules.entropy.entropy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "g_s.size", "g_t.size"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.binary_accuracy", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.entropy.entropy"], ["optimizer", "=", "SGD", "(", "all_parameters", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "t_total", "=", "args", ".", "iters_per_epoch", "*", "args", ".", "epochs", "\n", "print", "(", "\"{INFORMATION} The total number of steps is \"", ",", "t_total", ")", "\n", "\n", "lr_scheduler", "=", "LambdaLR", "(", "optimizer", ",", "lambda", "x", ":", "args", ".", "lr", "*", "\n", "(", "1.", "+", "args", ".", "lr_gamma", "*", "float", "(", "x", ")", ")", "**", "(", "-", "args", ".", "lr_decay", ")", ")", "\n", "\n", "# define loss function", "\n", "domain_adv", "=", "ConditionalDomainAdversarialLoss", "(", "\n", "domain_discri", ",", "entropy_conditioning", "=", "args", ".", "entropy", ",", "\n", "num_classes", "=", "num_classes", ",", "features_dim", "=", "classifier_feature_dim", ",", "randomized", "=", "args", ".", "randomized", ",", "\n", "randomized_dim", "=", "args", ".", "randomized_dim", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "# resume from the best checkpoint", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.cdan.RandomizedMultiLinearMap.__init__": [[135, 140], ["torch.Module.__init__", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["\n", "", "if", "args", ".", "phase", "==", "'test'", ":", "\n", "        ", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "acc1", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.cdan.RandomizedMultiLinearMap.forward": [[141, 146], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "cdan.RandomizedMultiLinearMap.Rf.to", "cdan.RandomizedMultiLinearMap.Rg.to", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "numpy.sqrt", "float"], "methods", ["None"], ["# start training", "\n", "", "best_acc1", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "print", "(", "\"lr_bbone:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "print", "(", "\"lr_btlnck:\"", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "1", "]", ")", "\n", "if", "args", ".", "log_results", ":", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.cdan.MultiLinearMap.__init__": [[157, 159], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["\n", "# remember best acc@1 and save checkpoint", "\n", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.cdan.MultiLinearMap.forward": [[160, 164], ["f.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "g.unsqueeze", "f.unsqueeze"], "methods", ["None"], ["logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ")", "\n", "if", "acc1", ">", "best_acc1", ":", "\n", "            ", "shutil", ".", "copy", "(", "logger", ".", "get_checkpoint_path", "(", "'latest'", ")", ",", "\n", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", "\n", "", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.cdan.ImageClassifier.__init__": [[167, 176], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "common.modules.classifier.Classifier.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["\n", "# evaluate on test set", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "logger", ".", "get_checkpoint_path", "(", "'best'", ")", ")", ")", "\n", "acc1", "=", "utils", ".", "validate", "(", "test_loader", ",", "classifier", ",", "args", ",", "device", ")", "\n", "print", "(", "\"test_acc1 = {:3.1f}\"", ".", "format", "(", "acc1", ")", ")", "\n", "if", "args", ".", "log_results", ":", "\n", "        ", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'test_acc'", ":", "acc1", "}", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.mcc.MinimumClassConfusionLoss.__init__": [[57, 60], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ":", "float", ")", ":", "\n", "        ", "super", "(", "MinimumClassConfusionLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.mcc.MinimumClassConfusionLoss.forward": [[61, 71], ["torch.softmax", "torch.softmax", "torch.softmax", "modules.entropy.entropy().detach", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "modules.entropy.entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.modules.entropy.entropy"], ["", "def", "forward", "(", "self", ",", "logits", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "batch_size", ",", "num_classes", "=", "logits", ".", "shape", "\n", "predictions", "=", "F", ".", "softmax", "(", "logits", "/", "self", ".", "temperature", ",", "dim", "=", "1", ")", "# batch_size x num_classes", "\n", "entropy_weight", "=", "entropy", "(", "predictions", ")", ".", "detach", "(", ")", "\n", "entropy_weight", "=", "1", "+", "torch", ".", "exp", "(", "-", "entropy_weight", ")", "\n", "entropy_weight", "=", "(", "batch_size", "*", "entropy_weight", "/", "torch", ".", "sum", "(", "entropy_weight", ")", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "# batch_size x 1", "\n", "class_confusion_matrix", "=", "torch", ".", "mm", "(", "(", "predictions", "*", "entropy_weight", ")", ".", "transpose", "(", "1", ",", "0", ")", ",", "predictions", ")", "# num_classes x num_classes", "\n", "class_confusion_matrix", "=", "class_confusion_matrix", "/", "torch", ".", "sum", "(", "class_confusion_matrix", ",", "dim", "=", "1", ")", "\n", "mcc_loss", "=", "(", "torch", ".", "sum", "(", "class_confusion_matrix", ")", "-", "torch", ".", "trace", "(", "class_confusion_matrix", ")", ")", "/", "num_classes", "\n", "return", "mcc_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.adaptation.mcc.ImageClassifier.__init__": [[74, 83], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "common.modules.classifier.Classifier.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ":", "nn", ".", "Module", ",", "num_classes", ":", "int", ",", "bottleneck_dim", ":", "Optional", "[", "int", "]", "=", "256", ",", "**", "kwargs", ")", ":", "\n", "        ", "bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "# nn.AdaptiveAvgPool2d(output_size=(1, 1)),", "\n", "# nn.Flatten(),", "\n", "nn", ".", "Linear", "(", "backbone", ".", "out_features", ",", "bottleneck_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "bottleneck_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "super", "(", "ImageClassifier", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "num_classes", ",", "bottleneck", ",", "bottleneck_dim", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.AverageMeter.__init__": [[14, 18], ["meter.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.reset"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "fmt", ":", "Optional", "[", "str", "]", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.AverageMeter.reset": [[19, 24], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.AverageMeter.update": [[25, 31], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "if", "self", ".", "count", ">", "0", ":", "\n", "            ", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.AverageMeter.__str__": [[32, 35], ["fmtstr.format"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.format"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.AverageMeterDict.__init__": [[38, 41], ["meter.AverageMeter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "names", ":", "List", ",", "fmt", ":", "Optional", "[", "str", "]", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "dict", "=", "{", "\n", "name", ":", "AverageMeter", "(", "name", ",", "fmt", ")", "for", "name", "in", "names", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.AverageMeterDict.reset": [[43, 46], ["meter.AverageMeterDict.dict.values", "meter.reset"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "dict", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.AverageMeterDict.update": [[47, 50], ["accuracies.items", "meter.AverageMeterDict.dict[].update"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update"], ["", "", "def", "update", "(", "self", ",", "accuracies", ",", "n", "=", "1", ")", ":", "\n", "        ", "for", "name", ",", "acc", "in", "accuracies", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "dict", "[", "name", "]", ".", "update", "(", "acc", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.AverageMeterDict.average": [[51, 54], ["meter.AverageMeterDict.dict.items"], "methods", ["None"], ["", "", "def", "average", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "name", ":", "meter", ".", "avg", "for", "name", ",", "meter", "in", "self", ".", "dict", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.AverageMeterDict.__getitem__": [[56, 58], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "dict", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.Meter.__init__": [[62, 66], ["meter.Meter.reset"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.reset"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "fmt", ":", "Optional", "[", "str", "]", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.Meter.reset": [[67, 69], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.Meter.update": [[70, 72], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.Meter.__str__": [[73, 76], ["fmtstr.format"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.format"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'}'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter.__init__": [[79, 83], ["meter.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter.display": [[84, 88], ["print", "str", "meter.ProgressMeter.batch_fmtstr.format"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.format"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.meter.ProgressMeter._get_batch_fmtstr": [[89, 93], ["len", "str", "str", "fmt.format"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.format"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.TextLogger.__init__": [[12, 15], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filename", ",", "stream", "=", "sys", ".", "stdout", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "stream", "\n", "self", ".", "log", "=", "open", "(", "filename", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.TextLogger.write": [[16, 20], ["logger.TextLogger.terminal.write", "logger.TextLogger.log.write", "logger.TextLogger.flush"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.TextLogger.write", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.TextLogger.write", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.TextLogger.flush"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "\n", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.TextLogger.flush": [[21, 24], ["logger.TextLogger.terminal.flush", "logger.TextLogger.log.flush"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.TextLogger.flush", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.TextLogger.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "flush", "(", ")", "\n", "self", ".", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.TextLogger.close": [[25, 28], ["logger.TextLogger.terminal.close", "logger.TextLogger.log.close"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.close", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "close", "(", ")", "\n", "self", ".", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.__init__": [[43, 64], ["os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "time.strftime", "os.path.join", "os.path.exists", "logger.TextLogger", "time.localtime", "os.remove", "logger.CompleteLogger.set_epoch", "time.time"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.set_epoch"], ["def", "__init__", "(", "self", ",", "root", ",", "phase", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "visualize_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"visualize\"", ")", "\n", "self", ".", "checkpoint_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"checkpoints\"", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "os", ".", "makedirs", "(", "self", ".", "root", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "visualize_directory", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "checkpoint_directory", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# redirect std out", "\n", "now", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H_%M_%S\"", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "log_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"{}-{}.txt\"", ".", "format", "(", "phase", ",", "now", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "log_filename", ")", ":", "\n", "            ", "os", ".", "remove", "(", "log_filename", ")", "\n", "", "self", ".", "logger", "=", "TextLogger", "(", "log_filename", ")", "\n", "sys", ".", "stdout", "=", "self", ".", "logger", "\n", "sys", ".", "stderr", "=", "self", ".", "logger", "\n", "if", "phase", "!=", "'train'", ":", "\n", "            ", "self", ".", "set_epoch", "(", "phase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.set_epoch": [[65, 69], ["os.makedirs", "os.path.join", "str"], "methods", ["None"], ["", "", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Set the epoch number. Please use it during training.\"\"\"", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "self", ".", "visualize_directory", ",", "str", "(", "epoch", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger._get_phase_or_epoch": [[70, 75], ["str"], "methods", ["None"], ["", "def", "_get_phase_or_epoch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "return", "str", "(", "self", ".", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "phase", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_image_path": [[76, 81], ["os.path.join", "logger.CompleteLogger._get_phase_or_epoch"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger._get_phase_or_epoch"], ["", "", "def", "get_image_path", "(", "self", ",", "filename", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Get the full image path for a specific filename\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "visualize_directory", ",", "self", ".", "_get_phase_or_epoch", "(", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.get_checkpoint_path": [[82, 96], ["str", "os.path.join", "logger.CompleteLogger._get_phase_or_epoch"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger._get_phase_or_epoch"], ["", "def", "get_checkpoint_path", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Get the full checkpoint path.\n\n        Args:\n            name (optional): the filename (without file extension) to save checkpoint.\n                If None, when the phase is ``train``, checkpoint will be saved to ``{epoch}.pth``.\n                Otherwise, will be saved to ``{phase}.pth``.\n\n        \"\"\"", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "self", ".", "_get_phase_or_epoch", "(", ")", "\n", "", "name", "=", "str", "(", "name", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_directory", ",", "name", "+", "\".pth\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.close": [[97, 99], ["logger.CompleteLogger.logger.close"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.logger.CompleteLogger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.__init__": [[6, 14], ["dict", "super().__init__", "base_optimizer"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "base_optimizer", ",", "rho", "=", "0.05", ",", "adaptive", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "rho", ">=", "0.0", ",", "f\"Invalid rho, should be non-negative: {rho}\"", "\n", "\n", "defaults", "=", "dict", "(", "rho", "=", "rho", ",", "adaptive", "=", "adaptive", ",", "**", "kwargs", ")", "\n", "super", "(", "SAM", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "self", ".", "base_optimizer", "=", "base_optimizer", "(", "self", ".", "param_groups", ",", "**", "kwargs", ")", "\n", "self", ".", "param_groups", "=", "self", ".", "base_optimizer", ".", "param_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.first_step": [[15, 28], ["torch.no_grad", "sam.SAM._grad_norm", "sam.SAM.zero_grad", "p.add_", "scale.to", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM._grad_norm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "first_step", "(", "self", ",", "zero_grad", "=", "False", ")", ":", "\n", "        ", "grad_norm", "=", "self", ".", "_grad_norm", "(", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "scale", "=", "group", "[", "\"rho\"", "]", "/", "(", "grad_norm", "+", "1e-12", ")", "\n", "\n", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "continue", "\n", "e_w", "=", "(", "torch", ".", "pow", "(", "p", ",", "2", ")", "if", "group", "[", "\"adaptive\"", "]", "else", "1.0", ")", "*", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "# climb to the local maximum \"w + e(w)\"", "\n", "self", ".", "state", "[", "p", "]", "[", "\"e_w\"", "]", "=", "e_w", "\n", "\n", "", "", "if", "zero_grad", ":", "self", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.second_step": [[29, 39], ["torch.no_grad", "sam.SAM.base_optimizer.step", "sam.SAM.zero_grad", "p.sub_"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "second_step", "(", "self", ",", "zero_grad", "=", "False", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "continue", "\n", "p", ".", "sub_", "(", "self", ".", "state", "[", "p", "]", "[", "\"e_w\"", "]", ")", "# get back to \"w\" from \"w + e(w)\"", "\n", "\n", "", "", "self", ".", "base_optimizer", ".", "step", "(", ")", "# do the actual \"sharpness-aware\" update", "\n", "\n", "if", "zero_grad", ":", "self", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step": [[40, 48], ["torch.no_grad", "sam.SAM.first_step", "closure", "sam.SAM.second_step", "torch.enable_grad"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.first_step", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.second_step"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "assert", "closure", "is", "not", "None", ",", "\"Sharpness Aware Minimization requires closure, but it was not provided\"", "\n", "closure", "=", "torch", ".", "enable_grad", "(", ")", "(", "closure", ")", "# the closure should do a full forward-backward pass", "\n", "\n", "self", ".", "first_step", "(", "zero_grad", "=", "True", ")", "\n", "closure", "(", ")", "\n", "self", ".", "second_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM._grad_norm": [[49, 60], ["torch.norm", "torch.stack", "torch.abs"], "methods", ["None"], ["", "def", "_grad_norm", "(", "self", ")", ":", "\n", "        ", "shared_device", "=", "self", ".", "param_groups", "[", "0", "]", "[", "\"params\"", "]", "[", "0", "]", ".", "device", "# put everything on the same device, in case of model parallelism", "\n", "norm", "=", "torch", ".", "norm", "(", "\n", "torch", ".", "stack", "(", "[", "\n", "(", "(", "torch", ".", "abs", "(", "p", ")", "if", "group", "[", "\"adaptive\"", "]", "else", "1.0", ")", "*", "p", ".", "grad", ")", ".", "norm", "(", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", "\n", "for", "group", "in", "self", ".", "param_groups", "for", "p", "in", "group", "[", "\"params\"", "]", "\n", "if", "p", ".", "grad", "is", "not", "None", "\n", "]", ")", ",", "\n", "p", "=", "2", "\n", ")", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.ForeverDataIterator.__init__": [[39, 43], ["iter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_loader", ":", "DataLoader", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "iter", "=", "iter", "(", "self", ".", "data_loader", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.ForeverDataIterator.__next__": [[44, 55], ["next", "data.send_to_device", "iter", "next", "data.send_to_device"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.send_to_device", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.send_to_device"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "next", "(", "self", ".", "iter", ")", "\n", "if", "self", ".", "device", "is", "not", "None", ":", "\n", "                ", "data", "=", "send_to_device", "(", "data", ",", "self", ".", "device", ")", "\n", "", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "iter", "=", "iter", "(", "self", ".", "data_loader", ")", "\n", "data", "=", "next", "(", "self", ".", "iter", ")", "\n", "if", "self", ".", "device", "is", "not", "None", ":", "\n", "                ", "data", "=", "send_to_device", "(", "data", ",", "self", ".", "device", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.ForeverDataIterator.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.RandomMultipleGallerySampler.__init__": [[72, 92], ["torch.utils.data.Sampler.__init__", "enumerate", "list", "len", "data.RandomMultipleGallerySampler.cid_list_per_pid[].append", "data.RandomMultipleGallerySampler.idx_list_per_pid[].append", "data.RandomMultipleGallerySampler.idx_list_per_pid.keys"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_instances", "=", "4", ")", ":", "\n", "        ", "super", "(", "RandomMultipleGallerySampler", ",", "self", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "\n", "self", ".", "idx_to_pid", "=", "{", "}", "\n", "self", ".", "cid_list_per_pid", "=", "{", "}", "\n", "self", ".", "idx_list_per_pid", "=", "{", "}", "\n", "\n", "for", "idx", ",", "(", "_", ",", "pid", ",", "cid", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "if", "pid", "not", "in", "self", ".", "cid_list_per_pid", ":", "\n", "                ", "self", ".", "cid_list_per_pid", "[", "pid", "]", "=", "[", "]", "\n", "self", ".", "idx_list_per_pid", "[", "pid", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "idx_to_pid", "[", "idx", "]", "=", "pid", "\n", "self", ".", "cid_list_per_pid", "[", "pid", "]", ".", "append", "(", "cid", ")", "\n", "self", ".", "idx_list_per_pid", "[", "pid", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "self", ".", "pid_list", "=", "list", "(", "self", ".", "idx_list_per_pid", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "pid_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.RandomMultipleGallerySampler.__len__": [[93, 95], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.RandomMultipleGallerySampler.__iter__": [[96, 135], ["torch.randperm().tolist", "iter", "isinstance", "random.choice", "final_idxes.append", "data.RandomMultipleGallerySampler.__iter__.select_idxes"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "def", "select_idxes", "(", "element_list", ",", "target_element", ")", ":", "\n", "            ", "assert", "isinstance", "(", "element_list", ",", "list", ")", "\n", "return", "[", "i", "for", "i", ",", "element", "in", "enumerate", "(", "element_list", ")", "if", "element", "!=", "target_element", "]", "\n", "\n", "", "pid_idxes", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "pid_list", ")", ")", ".", "tolist", "(", ")", "\n", "final_idxes", "=", "[", "]", "\n", "\n", "for", "perm_id", "in", "pid_idxes", ":", "\n", "            ", "i", "=", "random", ".", "choice", "(", "self", ".", "idx_list_per_pid", "[", "self", ".", "pid_list", "[", "perm_id", "]", "]", ")", "\n", "_", ",", "_", ",", "cid", "=", "self", ".", "dataset", "[", "i", "]", "\n", "\n", "final_idxes", ".", "append", "(", "i", ")", "\n", "\n", "pid_i", "=", "self", ".", "idx_to_pid", "[", "i", "]", "\n", "cid_list", "=", "self", ".", "cid_list_per_pid", "[", "pid_i", "]", "\n", "idx_list", "=", "self", ".", "idx_list_per_pid", "[", "pid_i", "]", "\n", "selected_cid_list", "=", "select_idxes", "(", "cid_list", ",", "cid", ")", "\n", "\n", "if", "selected_cid_list", ":", "\n", "                ", "if", "len", "(", "selected_cid_list", ")", ">=", "self", ".", "num_instances", ":", "\n", "                    ", "cid_idxes", "=", "np", ".", "random", ".", "choice", "(", "selected_cid_list", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "cid_idxes", "=", "np", ".", "random", ".", "choice", "(", "selected_cid_list", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "True", ")", "\n", "", "for", "cid_idx", "in", "cid_idxes", ":", "\n", "                    ", "final_idxes", ".", "append", "(", "idx_list", "[", "cid_idx", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "selected_idxes", "=", "select_idxes", "(", "idx_list", ",", "i", ")", "\n", "if", "not", "selected_idxes", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "selected_idxes", ")", ">=", "self", ".", "num_instances", ":", "\n", "                    ", "pid_idxes", "=", "np", ".", "random", ".", "choice", "(", "selected_idxes", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "pid_idxes", "=", "np", ".", "random", ".", "choice", "(", "selected_idxes", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "True", ")", "\n", "\n", "", "for", "pid_idx", "in", "pid_idxes", ":", "\n", "                    ", "final_idxes", ".", "append", "(", "idx_list", "[", "pid_idx", "]", ")", "\n", "\n", "", "", "", "return", "iter", "(", "final_idxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.CombineDataset.__init__": [[147, 152], ["super().__init__", "list", "len"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ":", "Iterable", "[", "Dataset", "]", ")", "->", "None", ":", "\n", "        ", "super", "(", "CombineDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Cannot verify that datasets is Sized", "\n", "assert", "len", "(", "datasets", ")", ">", "0", ",", "'datasets should not be an empty iterable'", "# type: ignore", "\n", "self", ".", "datasets", "=", "list", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.CombineDataset.__len__": [[153, 155], ["min", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "[", "len", "(", "d", ")", "for", "d", "in", "self", ".", "datasets", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.CombineDataset.__getitem__": [[156, 158], ["list", "itertools.chain"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "list", "(", "itertools", ".", "chain", "(", "*", "[", "d", "[", "idx", "]", "for", "d", "in", "self", ".", "datasets", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.send_to_device": [[14, 34], ["isinstance", "tensor.to", "isinstance", "type", "data.send_to_device", "type", "hasattr", "data.send_to_device", "tensor.items"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.send_to_device", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.send_to_device"], ["def", "send_to_device", "(", "tensor", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Recursively sends the elements in a nested list/tuple/dictionary of tensors to a given device.\n\n    Args:\n        tensor (nested list/tuple/dictionary of :obj:`torch.Tensor`):\n            The data to send to a given device.\n        device (:obj:`torch.device`):\n            The device to send the data to\n\n    Returns:\n        The same data structure as :obj:`tensor` with all tensors sent to the proper device.\n    \"\"\"", "\n", "if", "isinstance", "(", "tensor", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "type", "(", "tensor", ")", "(", "send_to_device", "(", "t", ",", "device", ")", "for", "t", "in", "tensor", ")", "\n", "", "elif", "isinstance", "(", "tensor", ",", "dict", ")", ":", "\n", "        ", "return", "type", "(", "tensor", ")", "(", "{", "k", ":", "send_to_device", "(", "v", ",", "device", ")", "for", "k", ",", "v", "in", "tensor", ".", "items", "(", ")", "}", ")", "\n", "", "elif", "not", "hasattr", "(", "tensor", ",", "\"to\"", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "return", "tensor", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.concatenate": [[160, 176], ["isinstance", "torch.cat", "isinstance", "range", "isinstance", "len", "dict.append", "dict", "tensors[].keys", "data.concatenate", "data.concatenate"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.concatenate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.concatenate"], ["", "", "def", "concatenate", "(", "tensors", ")", ":", "\n", "    ", "\"\"\"concatenate multiple batches into one batch.\n    ``tensors`` can be :class:`torch.Tensor`, List or Dict, but they must be the same data format.\n    \"\"\"", "\n", "if", "isinstance", "(", "tensors", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "tensors", ",", "dim", "=", "0", ")", "\n", "", "elif", "isinstance", "(", "tensors", "[", "0", "]", ",", "List", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tensors", "[", "0", "]", ")", ")", ":", "\n", "            ", "ret", ".", "append", "(", "concatenate", "(", "[", "t", "[", "i", "]", "for", "t", "in", "tensors", "]", ")", ")", "\n", "", "return", "ret", "\n", "", "elif", "isinstance", "(", "tensors", "[", "0", "]", ",", "Dict", ")", ":", "\n", "        ", "ret", "=", "dict", "(", ")", "\n", "for", "k", "in", "tensors", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "ret", "[", "k", "]", "=", "concatenate", "(", "[", "t", "[", "k", "]", "for", "t", "in", "tensors", "]", ")", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.scheduler.WarmupMultiStepLR.__init__": [[22, 49], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_steps", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.utils.scheduler.WarmupMultiStepLR.get_lr": [[50, 63], ["bisect.bisect_right", "float", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "float", "(", "self", ".", "warmup_steps", ")", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.tsne.visualize": [[15, 48], ["source_feature.numpy.numpy", "target_feature.numpy.numpy", "numpy.concatenate", "sklearn.manifold.TSNE().fit_transform", "numpy.concatenate", "matplotlib.subplots", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "matplotlib.scatter", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.savefig", "sklearn.manifold.TSNE", "numpy.ones", "numpy.zeros", "matplotlib.ListedColormap", "len", "len"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.concatenate", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.data.concatenate"], ["def", "visualize", "(", "source_feature", ":", "torch", ".", "Tensor", ",", "target_feature", ":", "torch", ".", "Tensor", ",", "\n", "filename", ":", "str", ",", "source_color", "=", "'r'", ",", "target_color", "=", "'b'", ")", ":", "\n", "    ", "\"\"\"\n    Visualize features from different domains using t-SNE.\n\n    Args:\n        source_feature (tensor): features from source domain in shape :math:`(minibatch, F)`\n        target_feature (tensor): features from target domain in shape :math:`(minibatch, F)`\n        filename (str): the file name to save t-SNE\n        source_color (str): the color of the source features. Default: 'r'\n        target_color (str): the color of the target features. Default: 'b'\n\n    \"\"\"", "\n", "source_feature", "=", "source_feature", ".", "numpy", "(", ")", "\n", "target_feature", "=", "target_feature", ".", "numpy", "(", ")", "\n", "features", "=", "np", ".", "concatenate", "(", "[", "source_feature", ",", "target_feature", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# map features to 2-d using TSNE", "\n", "X_tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "random_state", "=", "33", ")", ".", "fit_transform", "(", "features", ")", "\n", "\n", "# domain labels, 1 represents source while 0 represents target", "\n", "domains", "=", "np", ".", "concatenate", "(", "(", "np", ".", "ones", "(", "len", "(", "source_feature", ")", ")", ",", "np", ".", "zeros", "(", "len", "(", "target_feature", ")", ")", ")", ")", "\n", "\n", "# visualize using matplotlib", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "scatter", "(", "X_tsne", "[", ":", ",", "0", "]", ",", "X_tsne", "[", ":", ",", "1", "]", ",", "c", "=", "domains", ",", "cmap", "=", "col", ".", "ListedColormap", "(", "[", "target_color", ",", "source_color", "]", ")", ",", "s", "=", "20", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.a_distance.ANet.__init__": [[16, 20], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_feature", ")", ":", "\n", "        ", "super", "(", "ANet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "nn", ".", "Linear", "(", "in_feature", ",", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.a_distance.ANet.forward": [[21, 25], ["a_distance.ANet.layer", "a_distance.ANet.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.a_distance.calculate": [[27, 87], ["torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.utils.data.TensorDataset", "len", "int", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ANet().to", "torch.optim.SGD", "range", "ANet().to.parameters", "ANet().to.train", "ANet().to.eval", "meter.AverageMeter", "a_distance.ANet", "x.to.to", "label.to.to", "ANet().to.zero_grad", "ANet().to.", "torch.binary_cross_entropy", "F.binary_cross_entropy.backward", "torch.optim.SGD.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "x.to.to", "label.to.to", "ANet().to.", "metric.binary_accuracy", "meter.AverageMeter.update"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.examples.cdan_mcc_sdat.train", "home.repos.pwc.inspect_result.val-iisc_sdat.modules.grl.GradientReverseFunction.backward", "home.repos.pwc.inspect_result.val-iisc_sdat.utils.sam.SAM.step", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.binary_accuracy", "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update"], ["", "", "def", "calculate", "(", "source_feature", ":", "torch", ".", "Tensor", ",", "target_feature", ":", "torch", ".", "Tensor", ",", "\n", "device", ",", "progress", "=", "True", ",", "training_epochs", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the :math:`\\mathcal{A}`-distance, which is a measure for distribution discrepancy.\n\n    The definition is :math:`dist_\\mathcal{A} = 2 (1-2\\epsilon)`, where :math:`\\epsilon` is the\n    test error of a classifier trained to discriminate the source from the target.\n\n    Args:\n        source_feature (tensor): features from source domain in shape :math:`(minibatch, F)`\n        target_feature (tensor): features from target domain in shape :math:`(minibatch, F)`\n        device (torch.device)\n        progress (bool): if True, displays a the progress of training A-Net\n        training_epochs (int): the number of epochs when training the classifier\n\n    Returns:\n        :math:`\\mathcal{A}`-distance\n    \"\"\"", "\n", "source_label", "=", "torch", ".", "ones", "(", "(", "source_feature", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "target_label", "=", "torch", ".", "zeros", "(", "(", "target_feature", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "[", "source_feature", ",", "target_feature", "]", ",", "dim", "=", "0", ")", "\n", "label", "=", "torch", ".", "cat", "(", "[", "source_label", ",", "target_label", "]", ",", "dim", "=", "0", ")", "\n", "\n", "dataset", "=", "TensorDataset", "(", "feature", ",", "label", ")", "\n", "length", "=", "len", "(", "dataset", ")", "\n", "train_size", "=", "int", "(", "0.8", "*", "length", ")", "\n", "val_size", "=", "length", "-", "train_size", "\n", "train_set", ",", "val_set", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "dataset", ",", "[", "train_size", ",", "val_size", "]", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "2", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_set", ",", "batch_size", "=", "8", ",", "shuffle", "=", "False", ")", "\n", "\n", "anet", "=", "ANet", "(", "feature", ".", "shape", "[", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "SGD", "(", "anet", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "a_distance", "=", "2.0", "\n", "for", "epoch", "in", "range", "(", "training_epochs", ")", ":", "\n", "        ", "anet", ".", "train", "(", ")", "\n", "for", "(", "x", ",", "label", ")", "in", "train_loader", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "anet", ".", "zero_grad", "(", ")", "\n", "y", "=", "anet", "(", "x", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy", "(", "y", ",", "label", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "anet", ".", "eval", "(", ")", "\n", "meter", "=", "AverageMeter", "(", "\"accuracy\"", ",", "\":4.2f\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "(", "x", ",", "label", ")", "in", "val_loader", ":", "\n", "                ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "y", "=", "anet", "(", "x", ")", "\n", "acc", "=", "binary_accuracy", "(", "y", ",", "label", ")", "\n", "meter", ".", "update", "(", "acc", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "", "", "error", "=", "1", "-", "meter", ".", "avg", "/", "100", "\n", "a_distance", "=", "2", "*", "(", "1", "-", "2", "*", "error", ")", "\n", "if", "progress", ":", "\n", "            ", "print", "(", "\"epoch {} accuracy: {} A-dist: {}\"", ".", "format", "(", "epoch", ",", "meter", ".", "avg", ",", "a_distance", ")", ")", "\n", "\n", "", "", "return", "a_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.analysis.__init__.collect_feature": [[7, 31], ["feature_extractor.eval", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "enumerate", "tqdm.tqdm", "images.to.to", "feature_extractor().cpu", "all_features.append", "feature_extractor"], "function", ["None"], [""]], "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.__init__": [[44, 47], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.update": [[48, 67], ["torch.zeros", "torch.no_grad", "torch.bincount().reshape", "target[].to", "torch.bincount"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.reset": [[68, 70], ["__init__.ConfusionMatrix.mat.zero_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.compute": [[71, 78], ["__init__.ConfusionMatrix.mat.float", "torch.diag().sum", "__init__.ConfusionMatrix.sum", "torch.diag", "__init__.ConfusionMatrix.sum", "torch.diag", "torch.diag", "torch.diag", "__init__.ConfusionMatrix.sum", "__init__.ConfusionMatrix.sum"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.__str__": [[87, 98], ["__init__.ConfusionMatrix.compute", "acc_global.item", "iu.mean().item", "iu.mean"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.compute"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.format": [[99, 109], ["__init__.ConfusionMatrix.compute", "prettytable.PrettyTable", "zip", "range", "prettytable.PrettyTable.add_row", "prettytable.PrettyTable.get_string", "len", "acc_global.item", "acc.mean().item", "iu.mean().item", "acc.mean", "iu.mean"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.ConfusionMatrix.compute"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.binary_accuracy": [[6, 14], ["torch.no_grad", "target.size", "pred.eq().float().sum", "pred.eq().float().sum.mul_", "pred.eq().float", "pred.eq", "target.view"], "function", ["None"], ["__all__", "=", "[", "'grl'", ",", "'kernels'", ",", "'domain_discriminator'", ",", "'entropy'", "]", "\n", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.metric.__init__.accuracy": [[16, 41], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "correct[].flatten().sum", "res.append", "correct[].flatten"], "function", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets._util.download": [[6, 31], ["os.path.exists", "print", "os.path.join", "torchvision.datasets.utils.download_and_extract_archive", "print", "print", "exit"], "function", ["None"], ["def", "download", "(", "root", ":", "str", ",", "file_name", ":", "str", ",", "archive_name", ":", "str", ",", "url_link", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Download file from internet url link.\n\n    Args:\n        root (str) The directory to put downloaded files.\n        file_name: (str) The name of the unzipped file.\n        archive_name: (str) The name of archive(zipped file) downloaded.\n        url_link: (str) The url link to download data.\n\n    .. note::\n        If `file_name` already exists under path `root`, then it is not downloaded again.\n        Else `archive_name` will be downloaded from `url_link` and extracted to `file_name`.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", ")", ")", ":", "\n", "        ", "print", "(", "\"Downloading {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "# if os.path.exists(os.path.join(root, archive_name)):", "\n", "#     os.remove(os.path.join(root, archive_name))", "\n", "try", ":", "\n", "            ", "download_and_extract_archive", "(", "url_link", ",", "download_root", "=", "root", ",", "filename", "=", "archive_name", ",", "remove_finished", "=", "False", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "print", "(", "\"Fail to download {} from url link {}\"", ".", "format", "(", "archive_name", ",", "url_link", ")", ")", "\n", "print", "(", "'Please check you internet connection.'", "\n", "\"Simply trying again may be fine.\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets._util.check_exits": [[33, 38], ["os.path.exists", "print", "exit", "os.path.join"], "function", ["None"], ["", "", "", "def", "check_exits", "(", "root", ":", "str", ",", "file_name", ":", "str", ")", ":", "\n", "    ", "\"\"\"Check whether `file_name` exists under directory `root`. \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", ")", ")", ":", "\n", "        ", "print", "(", "\"Dataset directory {} not found under {}\"", ".", "format", "(", "file_name", ",", "root", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets._util.read_list_from_file": [[40, 47], ["open", "f.readlines", "result.append", "line.strip"], "function", ["None"], ["", "", "def", "read_list_from_file", "(", "file_name", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"Read data from file and convert each line into an element in the list\"\"\"", "\n", "result", "=", "[", "]", "\n", "with", "open", "(", "file_name", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "result", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.visda2017.VisDA2017.__init__": [[43, 53], ["os.path.join", "imagelist.ImageList.__init__", "list", "list", "map", "map", "_util.download", "_util.check_exits"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__", "home.repos.pwc.inspect_result.val-iisc_sdat.datasets._util.download", "home.repos.pwc.inspect_result.val-iisc_sdat.datasets._util.check_exits"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "task", ":", "str", ",", "download", ":", "Optional", "[", "bool", "]", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "task", "in", "self", ".", "image_list", "\n", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "task", "]", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "args", ":", "download_data", "(", "root", ",", "*", "args", ")", ",", "self", ".", "download_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "file_name", ",", "_", ":", "check_exits", "(", "root", ",", "file_name", ")", ",", "self", ".", "download_list", ")", ")", "\n", "\n", "", "super", "(", "VisDA2017", ",", "self", ")", ".", "__init__", "(", "root", ",", "VisDA2017", ".", "CLASSES", ",", "data_list_file", "=", "data_list_file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.visda2017.VisDA2017.domains": [[54, 57], ["list", "cls.image_list.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "domains", "(", "cls", ")", ":", "\n", "        ", "return", "list", "(", "cls", ".", "image_list", ".", "keys", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.imagelist.ImageList.__init__": [[29, 38], ["torchvision.VisionDataset.__init__", "imagelist.ImageList.parse_data_file", "enumerate"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__", "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.imagelist.ImageList.parse_data_file"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "classes", ":", "List", "[", "str", "]", ",", "data_list_file", ":", "str", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "samples", "=", "self", ".", "parse_data_file", "(", "data_list_file", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "{", "cls", ":", "idx", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "data_list_file", "=", "data_list_file", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.imagelist.ImageList.__getitem__": [[39, 52], ["imagelist.ImageList.loader", "imagelist.ImageList.transform", "imagelist.ImageList.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n            return (tuple): (image, target) where target is index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", "and", "target", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.imagelist.ImageList.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.imagelist.ImageList.parse_data_file": [[56, 74], ["open", "f.readlines", "line.split", "int", "data_list.append", "os.path.isabs", "os.path.join"], "methods", ["None"], ["", "def", "parse_data_file", "(", "self", ",", "file_name", ":", "str", ")", "->", "List", "[", "Tuple", "[", "str", ",", "int", "]", "]", ":", "\n", "        ", "\"\"\"Parse file to data list\n\n        Args:\n            file_name (str): The path of data file\n            return (list): List of (image path, class_index) tuples\n        \"\"\"", "\n", "with", "open", "(", "file_name", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data_list", "=", "[", "]", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "split_line", "=", "line", ".", "split", "(", ")", "\n", "target", "=", "split_line", "[", "-", "1", "]", "\n", "path", "=", "' '", ".", "join", "(", "split_line", "[", ":", "-", "1", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "isabs", "(", "path", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "path", ")", "\n", "", "target", "=", "int", "(", "target", ")", "\n", "data_list", ".", "append", "(", "(", "path", ",", "target", ")", ")", "\n", "", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.imagelist.ImageList.num_classes": [[75, 79], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Number of classes\"\"\"", "\n", "return", "len", "(", "self", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.imagelist.ImageList.domains": [[80, 84], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "domains", "(", "cls", ")", ":", "\n", "        ", "\"\"\"All possible domain in this dataset\"\"\"", "\n", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.officehome.OfficeHome.__init__": [[55, 65], ["os.path.join", "imagelist.ImageList.__init__", "list", "list", "map", "map", "_util.download", "_util.check_exits"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__", "home.repos.pwc.inspect_result.val-iisc_sdat.datasets._util.download", "home.repos.pwc.inspect_result.val-iisc_sdat.datasets._util.check_exits"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "task", ":", "str", ",", "download", ":", "Optional", "[", "bool", "]", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "task", "in", "self", ".", "image_list", "\n", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "image_list", "[", "task", "]", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "args", ":", "download_data", "(", "root", ",", "*", "args", ")", ",", "self", ".", "download_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "file_name", ",", "_", ":", "check_exits", "(", "root", ",", "file_name", ")", ",", "self", ".", "download_list", ")", ")", "\n", "\n", "", "super", "(", "OfficeHome", ",", "self", ")", ".", "__init__", "(", "root", ",", "OfficeHome", ".", "CLASSES", ",", "data_list_file", "=", "data_list_file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.officehome.OfficeHome.domains": [[66, 69], ["list", "cls.image_list.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "domains", "(", "cls", ")", ":", "\n", "        ", "return", "list", "(", "cls", ".", "image_list", ".", "keys", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.domainnet.DomainNet.__init__": [[91, 103], ["os.path.join", "print", "imagelist.ImageList.__init__", "list", "list", "map", "map", "_util.download", "_util.check_exits"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__", "home.repos.pwc.inspect_result.val-iisc_sdat.datasets._util.download", "home.repos.pwc.inspect_result.val-iisc_sdat.datasets._util.check_exits"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "task", ":", "str", ",", "split", ":", "Optional", "[", "str", "]", "=", "'train'", ",", "download", ":", "Optional", "[", "float", "]", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "task", "in", "self", ".", "image_list", "\n", "assert", "split", "in", "[", "'train'", ",", "'test'", "]", "\n", "data_list_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"image_list\"", ",", "\"{}_{}.txt\"", ".", "format", "(", "self", ".", "image_list", "[", "task", "]", ",", "split", ")", ")", "\n", "print", "(", "\"loading {}\"", ".", "format", "(", "data_list_file", ")", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "args", ":", "download_data", "(", "root", ",", "*", "args", ")", ",", "self", ".", "download_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "list", "(", "map", "(", "lambda", "args", ":", "check_exits", "(", "root", ",", "args", "[", "0", "]", ")", ",", "self", ".", "download_list", ")", ")", "\n", "\n", "", "super", "(", "DomainNet", ",", "self", ")", ".", "__init__", "(", "root", ",", "DomainNet", ".", "CLASSES", ",", "data_list_file", "=", "data_list_file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.datasets.domainnet.DomainNet.domains": [[104, 107], ["list", "cls.image_list.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "domains", "(", "cls", ")", ":", "\n", "        ", "return", "list", "(", "cls", ".", "image_list", ".", "keys", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.ResNet.__init__": [[17, 20], ["torchvision.models.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_out_features", "=", "self", ".", "fc", ".", "in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.ResNet.forward": [[21, 34], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.ResNet.out_features": [[35, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "out_features", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"The dimension of output features\"\"\"", "\n", "return", "self", ".", "_out_features", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.ResNet.copy_head": [[40, 43], ["copy.deepcopy"], "methods", ["None"], ["", "def", "copy_head", "(", "self", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "\"\"\"Copy the origin fully connected layer\"\"\"", "\n", "return", "copy", ".", "deepcopy", "(", "self", ".", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet": [[45, 55], ["resnet.ResNet", "ResNet.state_dict", "torchvision.models.utils.load_state_dict_from_url", "ResNet.load_state_dict", "torchvision.models.utils.load_state_dict_from_url.items", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "# remove keys from pretrained dict that doesn't appear in model dict", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model", ".", "load_state_dict", "(", "pretrained_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.resnet18": [[57, 67], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.resnet34": [[69, 79], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.resnet50": [[81, 91], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.resnet101": [[93, 103], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.resnet152": [[105, 115], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.resnext50_32x4d": [[117, 129], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.resnext101_32x8d": [[131, 143], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.wide_resnet50_2": [[145, 161], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet.wide_resnet101_2": [[163, 179], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.val-iisc_sdat.models.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.ResizeImage.__init__": [[18, 23], ["isinstance", "int", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.ResizeImage.__call__": [[24, 27], ["img.resize"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.ResizeImage.__repr__": [[28, 30], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.MultipleApply.__init__": [[51, 53], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.MultipleApply.__call__": [[54, 56], ["t"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.MultipleApply.__repr__": [[57, 64], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.Denormalize.__init__": [[82, 86], ["numpy.array", "numpy.array", "torchvision.transforms.Normalize.__init__"], "methods", ["home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.NormalizeAndTranspose.__init__": [[94, 96], ["numpy.array"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.NormalizeAndTranspose.__call__": [[97, 114], ["isinstance", "numpy.asarray", "image.permute.permute.transpose().copy", "isinstance", "torch.from_numpy().to", "image.permute.permute.permute", "NotImplementedError", "image.permute.permute.transpose", "type", "torch.from_numpy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.DeNormalizeAndTranspose.__init__": [[122, 124], ["numpy.array"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.DeNormalizeAndTranspose.__call__": [[125, 132], ["image.transpose.transpose.transpose"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__init__": [[147, 153], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__call__": [[154, 180], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.val-iisc_sdat.transforms.__init__.RandomErasing.__repr__": [[181, 183], ["None"], "methods", ["None"], []]}