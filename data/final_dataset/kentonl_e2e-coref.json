{"home.repos.pwc.inspect_result.kentonl_e2e-coref.None.demo.create_example": [[14, 23], ["nltk.tokenize.sent_tokenize", "nltk.tokenize.word_tokenize"], "function", ["None"], ["def", "create_example", "(", "text", ")", ":", "\n", "  ", "raw_sentences", "=", "sent_tokenize", "(", "text", ")", "\n", "sentences", "=", "[", "word_tokenize", "(", "s", ")", "for", "s", "in", "raw_sentences", "]", "\n", "speakers", "=", "[", "[", "\"\"", "for", "_", "in", "sentence", "]", "for", "sentence", "in", "sentences", "]", "\n", "return", "{", "\n", "\"doc_key\"", ":", "\"nw\"", ",", "\n", "\"clusters\"", ":", "[", "]", ",", "\n", "\"sentences\"", ":", "sentences", ",", "\n", "\"speakers\"", ":", "speakers", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.demo.print_predictions": [[25, 29], ["util.flatten", "print"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.flatten"], ["", "def", "print_predictions", "(", "example", ")", ":", "\n", "  ", "words", "=", "util", ".", "flatten", "(", "example", "[", "\"sentences\"", "]", ")", "\n", "for", "cluster", "in", "example", "[", "\"predicted_clusters\"", "]", ":", "\n", "    ", "print", "(", "u\"Predicted cluster: {}\"", ".", "format", "(", "[", "\" \"", ".", "join", "(", "words", "[", "m", "[", "0", "]", ":", "m", "[", "1", "]", "+", "1", "]", ")", "for", "m", "in", "cluster", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.demo.make_predictions": [[30, 42], ["demo.create_example", "model.tensorize_example", "session.run", "model.get_predicted_antecedents", "model.get_predicted_clusters", "zip", "head_scores.tolist", "zip", "int", "int"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.demo.create_example", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.tensorize_example", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_predicted_antecedents", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_predicted_clusters"], ["", "", "def", "make_predictions", "(", "text", ",", "model", ")", ":", "\n", "  ", "example", "=", "create_example", "(", "text", ")", "\n", "tensorized_example", "=", "model", ".", "tensorize_example", "(", "example", ",", "is_training", "=", "False", ")", "\n", "feed_dict", "=", "{", "i", ":", "t", "for", "i", ",", "t", "in", "zip", "(", "model", ".", "input_tensors", ",", "tensorized_example", ")", "}", "\n", "_", ",", "_", ",", "_", ",", "mention_starts", ",", "mention_ends", ",", "antecedents", ",", "antecedent_scores", ",", "head_scores", "=", "session", ".", "run", "(", "model", ".", "predictions", "+", "[", "model", ".", "head_scores", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "predicted_antecedents", "=", "model", ".", "get_predicted_antecedents", "(", "antecedents", ",", "antecedent_scores", ")", "\n", "\n", "example", "[", "\"predicted_clusters\"", "]", ",", "_", "=", "model", ".", "get_predicted_clusters", "(", "mention_starts", ",", "mention_ends", ",", "predicted_antecedents", ")", "\n", "example", "[", "\"top_spans\"", "]", "=", "zip", "(", "(", "int", "(", "i", ")", "for", "i", "in", "mention_starts", ")", ",", "(", "int", "(", "i", ")", "for", "i", "in", "mention_ends", ")", ")", "\n", "example", "[", "\"head_scores\"", "]", "=", "head_scores", ".", "tolist", "(", ")", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.continuous_evaluate.copy_checkpoint": [[15, 18], ["shutil.copyfile"], "function", ["None"], ["def", "copy_checkpoint", "(", "source", ",", "target", ")", ":", "\n", "  ", "for", "ext", "in", "(", "\".index\"", ",", "\".data-00000-of-00001\"", ")", ":", "\n", "    ", "shutil", ".", "copyfile", "(", "source", "+", "ext", ",", "target", "+", "ext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.get_char_vocab.get_char_vocab": [[9, 23], ["set", "sorted", "print", "list", "io.open", "open", "f.readlines", "f.write", "f.write", "len", "json.loads", "sorted.update"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.update"], ["def", "get_char_vocab", "(", "input_filenames", ",", "output_filename", ")", ":", "\n", "  ", "vocab", "=", "set", "(", ")", "\n", "for", "filename", "in", "input_filenames", ":", "\n", "    ", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "      ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "        ", "for", "sentence", "in", "json", ".", "loads", "(", "line", ")", "[", "\"sentences\"", "]", ":", "\n", "          ", "for", "word", "in", "sentence", ":", "\n", "            ", "vocab", ".", "update", "(", "word", ")", "\n", "", "", "", "", "", "vocab", "=", "sorted", "(", "list", "(", "vocab", ")", ")", "\n", "with", "io", ".", "open", "(", "output_filename", ",", "mode", "=", "\"w\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "    ", "for", "char", "in", "vocab", ":", "\n", "      ", "f", ".", "write", "(", "char", ")", "\n", "f", ".", "write", "(", "u\"\\n\"", ")", "\n", "", "", "print", "(", "\"Wrote {} characters to {}\"", ".", "format", "(", "len", "(", "vocab", ")", ",", "output_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.get_char_vocab.get_char_vocab_language": [[24, 26], ["get_char_vocab.get_char_vocab"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.get_char_vocab.get_char_vocab"], ["", "def", "get_char_vocab_language", "(", "language", ")", ":", "\n", "  ", "get_char_vocab", "(", "[", "\"{}.{}.jsonlines\"", ".", "format", "(", "partition", ",", "language", ")", "for", "partition", "in", "(", "\"train\"", ",", "\"dev\"", ",", "\"test\"", ")", "]", ",", "\"char_vocab.{}.txt\"", ".", "format", "(", "language", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.cache_elmo.build_elmo": [[12, 24], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow_hub.Module", "hub.Module.", "tensorflow.stack", "tensorflow.concat"], "function", ["None"], ["def", "build_elmo", "(", ")", ":", "\n", "  ", "token_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "[", "None", ",", "None", "]", ")", "\n", "len_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "\n", "elmo_module", "=", "hub", ".", "Module", "(", "\"https://tfhub.dev/google/elmo/2\"", ")", "\n", "lm_embeddings", "=", "elmo_module", "(", "\n", "inputs", "=", "{", "\"tokens\"", ":", "token_ph", ",", "\"sequence_len\"", ":", "len_ph", "}", ",", "\n", "signature", "=", "\"tokens\"", ",", "as_dict", "=", "True", ")", "\n", "word_emb", "=", "lm_embeddings", "[", "\"word_emb\"", "]", "\n", "lm_emb", "=", "tf", ".", "stack", "(", "[", "tf", ".", "concat", "(", "[", "word_emb", ",", "word_emb", "]", ",", "-", "1", ")", ",", "\n", "lm_embeddings", "[", "\"lstm_outputs1\"", "]", ",", "\n", "lm_embeddings", "[", "\"lstm_outputs2\"", "]", "]", ",", "-", "1", ")", "\n", "return", "token_ph", ",", "len_ph", ",", "lm_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.cache_elmo.cache_dataset": [[25, 48], ["open", "enumerate", "in_file.readlines", "json.loads", "max", "numpy.array", "enumerate", "numpy.array", "session.run", "example[].replace", "out_file.create_group", "enumerate", "enumerate", "zip", "print", "len", "len", "str"], "function", ["None"], ["", "def", "cache_dataset", "(", "data_path", ",", "session", ",", "token_ph", ",", "len_ph", ",", "lm_emb", ",", "out_file", ")", ":", "\n", "  ", "with", "open", "(", "data_path", ")", "as", "in_file", ":", "\n", "    ", "for", "doc_num", ",", "line", "in", "enumerate", "(", "in_file", ".", "readlines", "(", ")", ")", ":", "\n", "      ", "example", "=", "json", ".", "loads", "(", "line", ")", "\n", "sentences", "=", "example", "[", "\"sentences\"", "]", "\n", "max_sentence_length", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "sentences", ")", "\n", "tokens", "=", "[", "[", "\"\"", "]", "*", "max_sentence_length", "for", "_", "in", "sentences", "]", "\n", "text_len", "=", "np", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "sentences", "]", ")", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "        ", "for", "j", ",", "word", "in", "enumerate", "(", "sentence", ")", ":", "\n", "          ", "tokens", "[", "i", "]", "[", "j", "]", "=", "word", "\n", "", "", "tokens", "=", "np", ".", "array", "(", "tokens", ")", "\n", "tf_lm_emb", "=", "session", ".", "run", "(", "lm_emb", ",", "feed_dict", "=", "{", "\n", "token_ph", ":", "tokens", ",", "\n", "len_ph", ":", "text_len", "\n", "}", ")", "\n", "file_key", "=", "example", "[", "\"doc_key\"", "]", ".", "replace", "(", "\"/\"", ",", "\":\"", ")", "\n", "group", "=", "out_file", ".", "create_group", "(", "file_key", ")", "\n", "for", "i", ",", "(", "e", ",", "l", ")", "in", "enumerate", "(", "zip", "(", "tf_lm_emb", ",", "text_len", ")", ")", ":", "\n", "        ", "e", "=", "e", "[", ":", "l", ",", ":", ",", ":", "]", "\n", "group", "[", "str", "(", "i", ")", "]", "=", "e", "\n", "", "if", "doc_num", "%", "10", "==", "0", ":", "\n", "        ", "print", "(", "\"Cached {} documents in {}\"", ".", "format", "(", "doc_num", "+", "1", ",", "data_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.get_doc_key": [[17, 19], ["int"], "function", ["None"], ["def", "get_doc_key", "(", "doc_id", ",", "part", ")", ":", "\n", "  ", "return", "\"{}_{}\"", ".", "format", "(", "doc_id", ",", "int", "(", "part", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.output_conll": [[20, 73], ["predictions.items", "input_file.readlines", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "enumerate", "collections.defaultdict.items", "collections.defaultdict.items", "line.split", "len", "output_file.write", "row[].startswith", "re.match", "output_file.write", "output_file.write", "output_file.write", "output_file.write", "word_map[].append", "start_map[].append", "end_map[].append", "sorted", "sorted", "conll.get_doc_key", "conll.get_doc_key", "len", "re.match.group", "re.match.group", "coref_list.append", "coref_list.append", "coref_list.append", "operator.itemgetter", "operator.itemgetter"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.get_doc_key", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.get_doc_key"], ["", "def", "output_conll", "(", "input_file", ",", "output_file", ",", "predictions", ")", ":", "\n", "  ", "prediction_map", "=", "{", "}", "\n", "for", "doc_key", ",", "clusters", "in", "predictions", ".", "items", "(", ")", ":", "\n", "    ", "start_map", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "end_map", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "word_map", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "cluster_id", ",", "mentions", "in", "enumerate", "(", "clusters", ")", ":", "\n", "      ", "for", "start", ",", "end", "in", "mentions", ":", "\n", "        ", "if", "start", "==", "end", ":", "\n", "          ", "word_map", "[", "start", "]", ".", "append", "(", "cluster_id", ")", "\n", "", "else", ":", "\n", "          ", "start_map", "[", "start", "]", ".", "append", "(", "(", "cluster_id", ",", "end", ")", ")", "\n", "end_map", "[", "end", "]", ".", "append", "(", "(", "cluster_id", ",", "start", ")", ")", "\n", "", "", "", "for", "k", ",", "v", "in", "start_map", ".", "items", "(", ")", ":", "\n", "      ", "start_map", "[", "k", "]", "=", "[", "cluster_id", "for", "cluster_id", ",", "end", "in", "sorted", "(", "v", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", "]", "\n", "", "for", "k", ",", "v", "in", "end_map", ".", "items", "(", ")", ":", "\n", "      ", "end_map", "[", "k", "]", "=", "[", "cluster_id", "for", "cluster_id", ",", "start", "in", "sorted", "(", "v", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", "]", "\n", "", "prediction_map", "[", "doc_key", "]", "=", "(", "start_map", ",", "end_map", ",", "word_map", ")", "\n", "\n", "", "word_index", "=", "0", "\n", "for", "line", "in", "input_file", ".", "readlines", "(", ")", ":", "\n", "    ", "row", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "row", ")", "==", "0", ":", "\n", "      ", "output_file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "elif", "row", "[", "0", "]", ".", "startswith", "(", "\"#\"", ")", ":", "\n", "      ", "begin_match", "=", "re", ".", "match", "(", "BEGIN_DOCUMENT_REGEX", ",", "line", ")", "\n", "if", "begin_match", ":", "\n", "        ", "doc_key", "=", "get_doc_key", "(", "begin_match", ".", "group", "(", "1", ")", ",", "begin_match", ".", "group", "(", "2", ")", ")", "\n", "start_map", ",", "end_map", ",", "word_map", "=", "prediction_map", "[", "doc_key", "]", "\n", "word_index", "=", "0", "\n", "", "output_file", ".", "write", "(", "line", ")", "\n", "output_file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "      ", "assert", "get_doc_key", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", "==", "doc_key", "\n", "coref_list", "=", "[", "]", "\n", "if", "word_index", "in", "end_map", ":", "\n", "        ", "for", "cluster_id", "in", "end_map", "[", "word_index", "]", ":", "\n", "          ", "coref_list", ".", "append", "(", "\"{})\"", ".", "format", "(", "cluster_id", ")", ")", "\n", "", "", "if", "word_index", "in", "word_map", ":", "\n", "        ", "for", "cluster_id", "in", "word_map", "[", "word_index", "]", ":", "\n", "          ", "coref_list", ".", "append", "(", "\"({})\"", ".", "format", "(", "cluster_id", ")", ")", "\n", "", "", "if", "word_index", "in", "start_map", ":", "\n", "        ", "for", "cluster_id", "in", "start_map", "[", "word_index", "]", ":", "\n", "          ", "coref_list", ".", "append", "(", "\"({}\"", ".", "format", "(", "cluster_id", ")", ")", "\n", "\n", "", "", "if", "len", "(", "coref_list", ")", "==", "0", ":", "\n", "        ", "row", "[", "-", "1", "]", "=", "\"-\"", "\n", "", "else", ":", "\n", "        ", "row", "[", "-", "1", "]", "=", "\"|\"", ".", "join", "(", "coref_list", ")", "\n", "\n", "", "output_file", ".", "write", "(", "\"   \"", ".", "join", "(", "row", ")", ")", "\n", "output_file", ".", "write", "(", "\"\\n\"", ")", "\n", "word_index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.official_conll_eval": [[74, 93], ["subprocess.Popen", "subprocess.Popen.communicate", "subprocess.Popen.wait", "stdout.decode.decode", "re.match", "float", "float", "float", "print", "print", "print", "re.match.group", "re.match.group", "re.match.group"], "function", ["None"], ["", "", "", "def", "official_conll_eval", "(", "gold_path", ",", "predicted_path", ",", "metric", ",", "official_stdout", "=", "False", ")", ":", "\n", "  ", "cmd", "=", "[", "\"conll-2012/scorer/v8.01/scorer.pl\"", ",", "metric", ",", "gold_path", ",", "predicted_path", ",", "\"none\"", "]", "\n", "process", "=", "subprocess", ".", "Popen", "(", "cmd", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "stdout", ",", "stderr", "=", "process", ".", "communicate", "(", ")", "\n", "process", ".", "wait", "(", ")", "\n", "\n", "stdout", "=", "stdout", ".", "decode", "(", "\"utf-8\"", ")", "\n", "if", "stderr", "is", "not", "None", ":", "\n", "    ", "print", "(", "stderr", ")", "\n", "\n", "", "if", "official_stdout", ":", "\n", "    ", "print", "(", "\"Official result for {}\"", ".", "format", "(", "metric", ")", ")", "\n", "print", "(", "stdout", ")", "\n", "\n", "", "coref_results_match", "=", "re", ".", "match", "(", "COREF_RESULTS_REGEX", ",", "stdout", ")", "\n", "recall", "=", "float", "(", "coref_results_match", ".", "group", "(", "1", ")", ")", "\n", "precision", "=", "float", "(", "coref_results_match", ".", "group", "(", "2", ")", ")", "\n", "f1", "=", "float", "(", "coref_results_match", ".", "group", "(", "3", ")", ")", "\n", "return", "{", "\"r\"", ":", "recall", ",", "\"p\"", ":", "precision", ",", "\"f\"", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.evaluate_conll": [[94, 100], ["tempfile.NamedTemporaryFile", "print", "conll.official_conll_eval", "open", "conll.output_conll"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.official_conll_eval", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.output_conll"], ["", "def", "evaluate_conll", "(", "gold_path", ",", "predictions", ",", "official_stdout", "=", "False", ")", ":", "\n", "  ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "delete", "=", "False", ",", "mode", "=", "\"w\"", ")", "as", "prediction_file", ":", "\n", "    ", "with", "open", "(", "gold_path", ",", "\"r\"", ")", "as", "gold_file", ":", "\n", "      ", "output_conll", "(", "gold_file", ",", "prediction_file", ",", "predictions", ")", "\n", "", "print", "(", "\"Predicted conll file: {}\"", ".", "format", "(", "prediction_file", ".", "name", ")", ")", "\n", "", "return", "{", "m", ":", "official_conll_eval", "(", "gold_file", ".", "name", ",", "prediction_file", ".", "name", ",", "m", ",", "official_stdout", ")", "for", "m", "in", "(", "\"muc\"", ",", "\"bcub\"", ",", "\"ceafe\"", ")", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.CorefEvaluator.__init__": [[16, 18], ["metrics.Evaluator"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "evaluators", "=", "[", "Evaluator", "(", "m", ")", "for", "m", "in", "(", "muc", ",", "b_cubed", ",", "ceafe", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.CorefEvaluator.update": [[19, 22], ["e.update"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.update"], ["", "def", "update", "(", "self", ",", "predicted", ",", "gold", ",", "mention_to_predicted", ",", "mention_to_gold", ")", ":", "\n", "        ", "for", "e", "in", "self", ".", "evaluators", ":", "\n", "            ", "e", ".", "update", "(", "predicted", ",", "gold", ",", "mention_to_predicted", ",", "mention_to_gold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.CorefEvaluator.get_f1": [[23, 25], ["sum", "len", "e.get_f1"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_f1"], ["", "", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "e", ".", "get_f1", "(", ")", "for", "e", "in", "self", ".", "evaluators", ")", "/", "len", "(", "self", ".", "evaluators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.CorefEvaluator.get_recall": [[26, 28], ["sum", "len", "e.get_recall"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_recall"], ["", "def", "get_recall", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "e", ".", "get_recall", "(", ")", "for", "e", "in", "self", ".", "evaluators", ")", "/", "len", "(", "self", ".", "evaluators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.CorefEvaluator.get_precision": [[29, 31], ["sum", "len", "e.get_precision"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_precision"], ["", "def", "get_precision", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "e", ".", "get_precision", "(", ")", "for", "e", "in", "self", ".", "evaluators", ")", "/", "len", "(", "self", ".", "evaluators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.CorefEvaluator.get_prf": [[32, 34], ["metrics.CorefEvaluator.get_precision", "metrics.CorefEvaluator.get_recall", "metrics.CorefEvaluator.get_f1"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_precision", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_recall", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_f1"], ["", "def", "get_prf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_precision", "(", ")", ",", "self", ".", "get_recall", "(", ")", ",", "self", ".", "get_f1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.__init__": [[36, 43], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "metric", ",", "beta", "=", "1", ")", ":", "\n", "        ", "self", ".", "p_num", "=", "0", "\n", "self", ".", "p_den", "=", "0", "\n", "self", ".", "r_num", "=", "0", "\n", "self", ".", "r_den", "=", "0", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.update": [[44, 54], ["metrics.Evaluator.metric", "metrics.Evaluator.metric", "metrics.Evaluator.metric"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "predicted", ",", "gold", ",", "mention_to_predicted", ",", "mention_to_gold", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "ceafe", ":", "\n", "            ", "pn", ",", "pd", ",", "rn", ",", "rd", "=", "self", ".", "metric", "(", "predicted", ",", "gold", ")", "\n", "", "else", ":", "\n", "            ", "pn", ",", "pd", "=", "self", ".", "metric", "(", "predicted", ",", "mention_to_gold", ")", "\n", "rn", ",", "rd", "=", "self", ".", "metric", "(", "gold", ",", "mention_to_predicted", ")", "\n", "", "self", ".", "p_num", "+=", "pn", "\n", "self", ".", "p_den", "+=", "pd", "\n", "self", ".", "r_num", "+=", "rn", "\n", "self", ".", "r_den", "+=", "rd", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_f1": [[55, 57], ["metrics.f1"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.f1"], ["", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "return", "f1", "(", "self", ".", "p_num", ",", "self", ".", "p_den", ",", "self", ".", "r_num", ",", "self", ".", "r_den", ",", "beta", "=", "self", ".", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_recall": [[58, 60], ["float"], "methods", ["None"], ["", "def", "get_recall", "(", "self", ")", ":", "\n", "        ", "return", "0", "if", "self", ".", "r_num", "==", "0", "else", "self", ".", "r_num", "/", "float", "(", "self", ".", "r_den", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_precision": [[61, 63], ["float"], "methods", ["None"], ["", "def", "get_precision", "(", "self", ")", ":", "\n", "        ", "return", "0", "if", "self", ".", "p_num", "==", "0", "else", "self", ".", "p_num", "/", "float", "(", "self", ".", "p_den", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_prf": [[64, 66], ["metrics.Evaluator.get_precision", "metrics.Evaluator.get_recall", "metrics.Evaluator.get_f1"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_precision", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_recall", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_f1"], ["", "def", "get_prf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_precision", "(", ")", ",", "self", ".", "get_recall", "(", ")", ",", "self", ".", "get_f1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_counts": [[67, 69], ["None"], "methods", ["None"], ["", "def", "get_counts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "p_num", ",", "self", ".", "p_den", ",", "self", ".", "r_num", ",", "self", ".", "r_den", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.f1": [[10, 14], ["float", "float"], "function", ["None"], ["def", "f1", "(", "p_num", ",", "p_den", ",", "r_num", ",", "r_den", ",", "beta", "=", "1", ")", ":", "\n", "    ", "p", "=", "0", "if", "p_den", "==", "0", "else", "p_num", "/", "float", "(", "p_den", ")", "\n", "r", "=", "0", "if", "r_den", "==", "0", "else", "r_num", "/", "float", "(", "r_den", ")", "\n", "return", "0", "if", "p", "+", "r", "==", "0", "else", "(", "1", "+", "beta", "*", "beta", ")", "*", "p", "*", "r", "/", "(", "beta", "*", "beta", "*", "p", "+", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.evaluate_documents": [[71, 76], ["metrics.Evaluator", "metrics.Evaluator.update", "metrics.Evaluator.get_precision", "metrics.Evaluator.get_recall", "metrics.Evaluator.get_f1"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.update", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_precision", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_recall", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_f1"], ["", "", "def", "evaluate_documents", "(", "documents", ",", "metric", ",", "beta", "=", "1", ")", ":", "\n", "    ", "evaluator", "=", "Evaluator", "(", "metric", ",", "beta", "=", "beta", ")", "\n", "for", "document", "in", "documents", ":", "\n", "        ", "evaluator", ".", "update", "(", "document", ")", "\n", "", "return", "evaluator", ".", "get_precision", "(", ")", ",", "evaluator", ".", "get_recall", "(", ")", ",", "evaluator", ".", "get_f1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.b_cubed": [[78, 98], ["collections.Counter", "collections.Counter.items", "len", "len", "float", "len", "len", "tuple"], "function", ["None"], ["", "def", "b_cubed", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "    ", "num", ",", "dem", "=", "0", ",", "0", "\n", "\n", "for", "c", "in", "clusters", ":", "\n", "        ", "if", "len", "(", "c", ")", "==", "1", ":", "\n", "            ", "continue", "\n", "\n", "", "gold_counts", "=", "Counter", "(", ")", "\n", "correct", "=", "0", "\n", "for", "m", "in", "c", ":", "\n", "            ", "if", "m", "in", "mention_to_gold", ":", "\n", "                ", "gold_counts", "[", "tuple", "(", "mention_to_gold", "[", "m", "]", ")", "]", "+=", "1", "\n", "", "", "for", "c2", ",", "count", "in", "gold_counts", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "c2", ")", "!=", "1", ":", "\n", "                ", "correct", "+=", "count", "*", "count", "\n", "\n", "", "", "num", "+=", "correct", "/", "float", "(", "len", "(", "c", ")", ")", "\n", "dem", "+=", "len", "(", "c", ")", "\n", "\n", "", "return", "num", ",", "dem", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.muc": [[100, 113], ["len", "set", "len", "len", "set.add"], "function", ["None"], ["", "def", "muc", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "    ", "tp", ",", "p", "=", "0", ",", "0", "\n", "for", "c", "in", "clusters", ":", "\n", "        ", "p", "+=", "len", "(", "c", ")", "-", "1", "\n", "tp", "+=", "len", "(", "c", ")", "\n", "linked", "=", "set", "(", ")", "\n", "for", "m", "in", "c", ":", "\n", "            ", "if", "m", "in", "mention_to_gold", ":", "\n", "                ", "linked", ".", "add", "(", "mention_to_gold", "[", "m", "]", ")", "\n", "", "else", ":", "\n", "                ", "tp", "-=", "1", "\n", "", "", "tp", "-=", "len", "(", "linked", ")", "\n", "", "return", "tp", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.phi4": [[115, 117], ["float", "len", "len", "len"], "function", ["None"], ["", "def", "phi4", "(", "c1", ",", "c2", ")", ":", "\n", "    ", "return", "2", "*", "len", "(", "[", "m", "for", "m", "in", "c1", "if", "m", "in", "c2", "]", ")", "/", "float", "(", "len", "(", "c1", ")", "+", "len", "(", "c2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.ceafe": [[119, 128], ["numpy.zeros", "range", "sklearn.utils.linear_assignment_.linear_assignment", "sum", "len", "range", "len", "len", "len", "len", "len", "metrics.phi4", "len"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.phi4"], ["", "def", "ceafe", "(", "clusters", ",", "gold_clusters", ")", ":", "\n", "    ", "clusters", "=", "[", "c", "for", "c", "in", "clusters", "if", "len", "(", "c", ")", "!=", "1", "]", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "gold_clusters", ")", ",", "len", "(", "clusters", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gold_clusters", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "clusters", ")", ")", ":", "\n", "            ", "scores", "[", "i", ",", "j", "]", "=", "phi4", "(", "gold_clusters", "[", "i", "]", ",", "clusters", "[", "j", "]", ")", "\n", "", "", "matching", "=", "linear_assignment", "(", "-", "scores", ")", "\n", "similarity", "=", "sum", "(", "scores", "[", "matching", "[", ":", ",", "0", "]", ",", "matching", "[", ":", ",", "1", "]", "]", ")", "\n", "return", "similarity", ",", "len", "(", "clusters", ")", ",", "similarity", ",", "len", "(", "gold_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.lea": [[130, 149], ["enumerate", "len", "len", "float", "len", "len", "len"], "function", ["None"], ["", "def", "lea", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "    ", "num", ",", "dem", "=", "0", ",", "0", "\n", "\n", "for", "c", "in", "clusters", ":", "\n", "        ", "if", "len", "(", "c", ")", "==", "1", ":", "\n", "            ", "continue", "\n", "\n", "", "common_links", "=", "0", "\n", "all_links", "=", "len", "(", "c", ")", "*", "(", "len", "(", "c", ")", "-", "1", ")", "/", "2.0", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "c", ")", ":", "\n", "            ", "if", "m", "in", "mention_to_gold", ":", "\n", "                ", "for", "m2", "in", "c", "[", "i", "+", "1", ":", "]", ":", "\n", "                    ", "if", "m2", "in", "mention_to_gold", "and", "mention_to_gold", "[", "m", "]", "==", "mention_to_gold", "[", "m2", "]", ":", "\n", "                        ", "common_links", "+=", "1", "\n", "\n", "", "", "", "", "num", "+=", "len", "(", "c", ")", "*", "common_links", "/", "float", "(", "all_links", ")", "\n", "dem", "+=", "len", "(", "c", ")", "\n", "\n", "", "return", "num", ",", "dem", "\n", "", ""]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.__init__": [[22, 72], ["util.EmbeddingDictionary", "util.EmbeddingDictionary", "util.load_char_dict", "input_props.append", "input_props.append", "input_props.append", "input_props.append", "input_props.append", "input_props.append", "input_props.append", "input_props.append", "input_props.append", "input_props.append", "input_props.append", "input_props.append", "zip", "tensorflow.PaddingFIFOQueue", "tensorflow.PaddingFIFOQueue.enqueue", "tensorflow.PaddingFIFOQueue.dequeue", "coref_model.CorefModel.get_predictions_and_loss", "tensorflow.Variable", "tensorflow.assign", "tensorflow.train.exponential_decay", "tensorflow.trainable_variables", "tensorflow.gradients", "tensorflow.clip_by_global_norm", "optimizer.apply_gradients", "h5py.File", "tensorflow.placeholder", "zip", "enumerate"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.load_char_dict", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_predictions_and_loss"], ["  ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "    ", "self", ".", "config", "=", "config", "\n", "self", ".", "context_embeddings", "=", "util", ".", "EmbeddingDictionary", "(", "config", "[", "\"context_embeddings\"", "]", ")", "\n", "self", ".", "head_embeddings", "=", "util", ".", "EmbeddingDictionary", "(", "config", "[", "\"head_embeddings\"", "]", ",", "maybe_cache", "=", "self", ".", "context_embeddings", ")", "\n", "self", ".", "char_embedding_size", "=", "config", "[", "\"char_embedding_size\"", "]", "\n", "self", ".", "char_dict", "=", "util", ".", "load_char_dict", "(", "config", "[", "\"char_vocab_path\"", "]", ")", "\n", "self", ".", "max_span_width", "=", "config", "[", "\"max_span_width\"", "]", "\n", "self", ".", "genres", "=", "{", "g", ":", "i", "for", "i", ",", "g", "in", "enumerate", "(", "config", "[", "\"genres\"", "]", ")", "}", "\n", "if", "config", "[", "\"lm_path\"", "]", ":", "\n", "      ", "self", ".", "lm_file", "=", "h5py", ".", "File", "(", "self", ".", "config", "[", "\"lm_path\"", "]", ",", "\"r\"", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "lm_file", "=", "None", "\n", "", "self", ".", "lm_layers", "=", "self", ".", "config", "[", "\"lm_layers\"", "]", "\n", "self", ".", "lm_size", "=", "self", ".", "config", "[", "\"lm_size\"", "]", "\n", "self", ".", "eval_data", "=", "None", "# Load eval data lazily.", "\n", "\n", "input_props", "=", "[", "]", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "string", ",", "[", "None", ",", "None", "]", ")", ")", "# Tokens.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", ",", "self", ".", "context_embeddings", ".", "size", "]", ")", ")", "# Context embeddings.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", ",", "self", ".", "head_embeddings", ".", "size", "]", ")", ")", "# Head embeddings.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", ",", "self", ".", "lm_size", ",", "self", ".", "lm_layers", "]", ")", ")", "# LM embeddings.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", ",", "None", "]", ")", ")", "# Character indices.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ")", "# Text lengths.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ")", "# Speaker IDs.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "int32", ",", "[", "]", ")", ")", "# Genre.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "bool", ",", "[", "]", ")", ")", "# Is training.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ")", "# Gold starts.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ")", "# Gold ends.", "\n", "input_props", ".", "append", "(", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ")", "# Cluster ids.", "\n", "\n", "self", ".", "queue_input_tensors", "=", "[", "tf", ".", "placeholder", "(", "dtype", ",", "shape", ")", "for", "dtype", ",", "shape", "in", "input_props", "]", "\n", "dtypes", ",", "shapes", "=", "zip", "(", "*", "input_props", ")", "\n", "queue", "=", "tf", ".", "PaddingFIFOQueue", "(", "capacity", "=", "10", ",", "dtypes", "=", "dtypes", ",", "shapes", "=", "shapes", ")", "\n", "self", ".", "enqueue_op", "=", "queue", ".", "enqueue", "(", "self", ".", "queue_input_tensors", ")", "\n", "self", ".", "input_tensors", "=", "queue", ".", "dequeue", "(", ")", "\n", "\n", "self", ".", "predictions", ",", "self", ".", "loss", "=", "self", ".", "get_predictions_and_loss", "(", "*", "self", ".", "input_tensors", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "\"global_step\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "reset_global_step", "=", "tf", ".", "assign", "(", "self", ".", "global_step", ",", "0", ")", "\n", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "self", ".", "config", "[", "\"learning_rate\"", "]", ",", "self", ".", "global_step", ",", "\n", "self", ".", "config", "[", "\"decay_frequency\"", "]", ",", "self", ".", "config", "[", "\"decay_rate\"", "]", ",", "staircase", "=", "True", ")", "\n", "trainable_params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "gradients", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "trainable_params", ")", "\n", "gradients", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "gradients", ",", "self", ".", "config", "[", "\"max_gradient_norm\"", "]", ")", "\n", "optimizers", "=", "{", "\n", "\"adam\"", ":", "tf", ".", "train", ".", "AdamOptimizer", ",", "\n", "\"sgd\"", ":", "tf", ".", "train", ".", "GradientDescentOptimizer", "\n", "}", "\n", "optimizer", "=", "optimizers", "[", "self", ".", "config", "[", "\"optimizer\"", "]", "]", "(", "learning_rate", ")", "\n", "self", ".", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "trainable_params", ")", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.start_enqueue_thread": [[73, 86], ["threading.Thread", "threading.Thread.start", "open", "json.loads", "random.shuffle", "f.readlines", "coref_model.CorefModel.tensorize_example", "dict", "session.run", "zip"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.tensorize_example"], ["", "def", "start_enqueue_thread", "(", "self", ",", "session", ")", ":", "\n", "    ", "with", "open", "(", "self", ".", "config", "[", "\"train_path\"", "]", ")", "as", "f", ":", "\n", "      ", "train_examples", "=", "[", "json", ".", "loads", "(", "jsonline", ")", "for", "jsonline", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "def", "_enqueue_loop", "(", ")", ":", "\n", "      ", "while", "True", ":", "\n", "        ", "random", ".", "shuffle", "(", "train_examples", ")", "\n", "for", "example", "in", "train_examples", ":", "\n", "          ", "tensorized_example", "=", "self", ".", "tensorize_example", "(", "example", ",", "is_training", "=", "True", ")", "\n", "feed_dict", "=", "dict", "(", "zip", "(", "self", ".", "queue_input_tensors", ",", "tensorized_example", ")", ")", "\n", "session", ".", "run", "(", "self", ".", "enqueue_op", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "", "", "enqueue_thread", "=", "threading", ".", "Thread", "(", "target", "=", "_enqueue_loop", ")", "\n", "enqueue_thread", ".", "daemon", "=", "True", "\n", "enqueue_thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.restore": [[87, 95], ["tensorflow.train.Saver", "os.path.join", "print", "session.run", "tensorflow.train.Saver.restore", "tensorflow.global_variables_initializer", "tensorflow.global_variables"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.restore"], ["", "def", "restore", "(", "self", ",", "session", ")", ":", "\n", "# Don't try to restore unused variables from the TF-Hub ELMo module.", "\n", "    ", "vars_to_restore", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "\"module/\"", "not", "in", "v", ".", "name", "]", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "vars_to_restore", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "\"log_dir\"", "]", ",", "\"model.max.ckpt\"", ")", "\n", "print", "(", "\"Restoring from {}\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "session", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "saver", ".", "restore", "(", "session", ",", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.load_lm_embeddings": [[96, 107], ["doc_key.replace", "len", "numpy.zeros", "enumerate", "numpy.zeros", "list", "group.keys", "range", "max", "str"], "methods", ["None"], ["", "def", "load_lm_embeddings", "(", "self", ",", "doc_key", ")", ":", "\n", "    ", "if", "self", ".", "lm_file", "is", "None", ":", "\n", "      ", "return", "np", ".", "zeros", "(", "[", "0", ",", "0", ",", "self", ".", "lm_size", ",", "self", ".", "lm_layers", "]", ")", "\n", "", "file_key", "=", "doc_key", ".", "replace", "(", "\"/\"", ",", "\":\"", ")", "\n", "group", "=", "self", ".", "lm_file", "[", "file_key", "]", "\n", "num_sentences", "=", "len", "(", "list", "(", "group", ".", "keys", "(", ")", ")", ")", "\n", "sentences", "=", "[", "group", "[", "str", "(", "i", ")", "]", "[", "...", "]", "for", "i", "in", "range", "(", "num_sentences", ")", "]", "\n", "lm_emb", "=", "np", ".", "zeros", "(", "[", "num_sentences", ",", "max", "(", "s", ".", "shape", "[", "0", "]", "for", "s", "in", "sentences", ")", ",", "self", ".", "lm_size", ",", "self", ".", "lm_layers", "]", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sentences", ")", ":", "\n", "      ", "lm_emb", "[", "i", ",", ":", "s", ".", "shape", "[", "0", "]", ",", ":", ",", ":", "]", "=", "s", "\n", "", "return", "lm_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.tensorize_mentions": [[108, 114], ["len", "zip", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "tensorize_mentions", "(", "self", ",", "mentions", ")", ":", "\n", "    ", "if", "len", "(", "mentions", ")", ">", "0", ":", "\n", "      ", "starts", ",", "ends", "=", "zip", "(", "*", "mentions", ")", "\n", "", "else", ":", "\n", "      ", "starts", ",", "ends", "=", "[", "]", ",", "[", "]", "\n", "", "return", "np", ".", "array", "(", "starts", ")", ",", "np", ".", "array", "(", "ends", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.tensorize_span_labels": [[115, 121], ["len", "zip", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "tensorize_span_labels", "(", "self", ",", "tuples", ",", "label_dict", ")", ":", "\n", "    ", "if", "len", "(", "tuples", ")", ">", "0", ":", "\n", "      ", "starts", ",", "ends", ",", "labels", "=", "zip", "(", "*", "tuples", ")", "\n", "", "else", ":", "\n", "      ", "starts", ",", "ends", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "return", "np", ".", "array", "(", "starts", ")", ",", "np", ".", "array", "(", "ends", ")", ",", "np", ".", "array", "(", "[", "label_dict", "[", "c", "]", "for", "c", "in", "labels", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.tensorize_example": [[122, 169], ["sorted", "numpy.zeros", "enumerate", "sum", "util.flatten", "max", "max", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.array", "numpy.array", "coref_model.CorefModel.tensorize_mentions", "coref_model.CorefModel.load_lm_embeddings", "len", "len", "max", "max", "enumerate", "coref_model.CorefModel.truncate_example", "tuple", "enumerate", "len", "len", "len", "len", "len", "len", "enumerate", "len", "util.flatten", "max", "set", "len", "len", "tuple"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.flatten", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.tensorize_mentions", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.load_lm_embeddings", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.truncate_example", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.flatten"], ["", "def", "tensorize_example", "(", "self", ",", "example", ",", "is_training", ")", ":", "\n", "    ", "clusters", "=", "example", "[", "\"clusters\"", "]", "\n", "\n", "gold_mentions", "=", "sorted", "(", "tuple", "(", "m", ")", "for", "m", "in", "util", ".", "flatten", "(", "clusters", ")", ")", "\n", "gold_mention_map", "=", "{", "m", ":", "i", "for", "i", ",", "m", "in", "enumerate", "(", "gold_mentions", ")", "}", "\n", "cluster_ids", "=", "np", ".", "zeros", "(", "len", "(", "gold_mentions", ")", ")", "\n", "for", "cluster_id", ",", "cluster", "in", "enumerate", "(", "clusters", ")", ":", "\n", "      ", "for", "mention", "in", "cluster", ":", "\n", "        ", "cluster_ids", "[", "gold_mention_map", "[", "tuple", "(", "mention", ")", "]", "]", "=", "cluster_id", "+", "1", "\n", "\n", "", "", "sentences", "=", "example", "[", "\"sentences\"", "]", "\n", "num_words", "=", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "sentences", ")", "\n", "speakers", "=", "util", ".", "flatten", "(", "example", "[", "\"speakers\"", "]", ")", "\n", "\n", "assert", "num_words", "==", "len", "(", "speakers", ")", "\n", "\n", "max_sentence_length", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "sentences", ")", "\n", "max_word_length", "=", "max", "(", "max", "(", "max", "(", "len", "(", "w", ")", "for", "w", "in", "s", ")", "for", "s", "in", "sentences", ")", ",", "max", "(", "self", ".", "config", "[", "\"filter_widths\"", "]", ")", ")", "\n", "text_len", "=", "np", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "sentences", "]", ")", "\n", "tokens", "=", "[", "[", "\"\"", "]", "*", "max_sentence_length", "for", "_", "in", "sentences", "]", "\n", "context_word_emb", "=", "np", ".", "zeros", "(", "[", "len", "(", "sentences", ")", ",", "max_sentence_length", ",", "self", ".", "context_embeddings", ".", "size", "]", ")", "\n", "head_word_emb", "=", "np", ".", "zeros", "(", "[", "len", "(", "sentences", ")", ",", "max_sentence_length", ",", "self", ".", "head_embeddings", ".", "size", "]", ")", "\n", "char_index", "=", "np", ".", "zeros", "(", "[", "len", "(", "sentences", ")", ",", "max_sentence_length", ",", "max_word_length", "]", ")", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "      ", "for", "j", ",", "word", "in", "enumerate", "(", "sentence", ")", ":", "\n", "        ", "tokens", "[", "i", "]", "[", "j", "]", "=", "word", "\n", "context_word_emb", "[", "i", ",", "j", "]", "=", "self", ".", "context_embeddings", "[", "word", "]", "\n", "head_word_emb", "[", "i", ",", "j", "]", "=", "self", ".", "head_embeddings", "[", "word", "]", "\n", "char_index", "[", "i", ",", "j", ",", ":", "len", "(", "word", ")", "]", "=", "[", "self", ".", "char_dict", "[", "c", "]", "for", "c", "in", "word", "]", "\n", "", "", "tokens", "=", "np", ".", "array", "(", "tokens", ")", "\n", "\n", "speaker_dict", "=", "{", "s", ":", "i", "for", "i", ",", "s", "in", "enumerate", "(", "set", "(", "speakers", ")", ")", "}", "\n", "speaker_ids", "=", "np", ".", "array", "(", "[", "speaker_dict", "[", "s", "]", "for", "s", "in", "speakers", "]", ")", "\n", "\n", "doc_key", "=", "example", "[", "\"doc_key\"", "]", "\n", "genre", "=", "self", ".", "genres", "[", "doc_key", "[", ":", "2", "]", "]", "\n", "\n", "gold_starts", ",", "gold_ends", "=", "self", ".", "tensorize_mentions", "(", "gold_mentions", ")", "\n", "\n", "lm_emb", "=", "self", ".", "load_lm_embeddings", "(", "doc_key", ")", "\n", "\n", "example_tensors", "=", "(", "tokens", ",", "context_word_emb", ",", "head_word_emb", ",", "lm_emb", ",", "char_index", ",", "text_len", ",", "speaker_ids", ",", "genre", ",", "is_training", ",", "gold_starts", ",", "gold_ends", ",", "cluster_ids", ")", "\n", "\n", "if", "is_training", "and", "len", "(", "sentences", ")", ">", "self", ".", "config", "[", "\"max_training_sentences\"", "]", ":", "\n", "      ", "return", "self", ".", "truncate_example", "(", "*", "example_tensors", ")", "\n", "", "else", ":", "\n", "      ", "return", "example_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.truncate_example": [[170, 192], ["random.randint", "text_len[].sum", "text_len[].sum", "numpy.logical_and"], "methods", ["None"], ["", "", "def", "truncate_example", "(", "self", ",", "tokens", ",", "context_word_emb", ",", "head_word_emb", ",", "lm_emb", ",", "char_index", ",", "text_len", ",", "speaker_ids", ",", "genre", ",", "is_training", ",", "gold_starts", ",", "gold_ends", ",", "cluster_ids", ")", ":", "\n", "    ", "max_training_sentences", "=", "self", ".", "config", "[", "\"max_training_sentences\"", "]", "\n", "num_sentences", "=", "context_word_emb", ".", "shape", "[", "0", "]", "\n", "assert", "num_sentences", ">", "max_training_sentences", "\n", "\n", "sentence_offset", "=", "random", ".", "randint", "(", "0", ",", "num_sentences", "-", "max_training_sentences", ")", "\n", "word_offset", "=", "text_len", "[", ":", "sentence_offset", "]", ".", "sum", "(", ")", "\n", "num_words", "=", "text_len", "[", "sentence_offset", ":", "sentence_offset", "+", "max_training_sentences", "]", ".", "sum", "(", ")", "\n", "tokens", "=", "tokens", "[", "sentence_offset", ":", "sentence_offset", "+", "max_training_sentences", ",", ":", "]", "\n", "context_word_emb", "=", "context_word_emb", "[", "sentence_offset", ":", "sentence_offset", "+", "max_training_sentences", ",", ":", ",", ":", "]", "\n", "head_word_emb", "=", "head_word_emb", "[", "sentence_offset", ":", "sentence_offset", "+", "max_training_sentences", ",", ":", ",", ":", "]", "\n", "lm_emb", "=", "lm_emb", "[", "sentence_offset", ":", "sentence_offset", "+", "max_training_sentences", ",", ":", ",", ":", ",", ":", "]", "\n", "char_index", "=", "char_index", "[", "sentence_offset", ":", "sentence_offset", "+", "max_training_sentences", ",", ":", ",", ":", "]", "\n", "text_len", "=", "text_len", "[", "sentence_offset", ":", "sentence_offset", "+", "max_training_sentences", "]", "\n", "\n", "speaker_ids", "=", "speaker_ids", "[", "word_offset", ":", "word_offset", "+", "num_words", "]", "\n", "gold_spans", "=", "np", ".", "logical_and", "(", "gold_ends", ">=", "word_offset", ",", "gold_starts", "<", "word_offset", "+", "num_words", ")", "\n", "gold_starts", "=", "gold_starts", "[", "gold_spans", "]", "-", "word_offset", "\n", "gold_ends", "=", "gold_ends", "[", "gold_spans", "]", "-", "word_offset", "\n", "cluster_ids", "=", "cluster_ids", "[", "gold_spans", "]", "\n", "\n", "return", "tokens", ",", "context_word_emb", ",", "head_word_emb", ",", "lm_emb", ",", "char_index", ",", "text_len", ",", "speaker_ids", ",", "genre", ",", "is_training", ",", "gold_starts", ",", "gold_ends", ",", "cluster_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_candidate_labels": [[193, 200], ["tensorflow.equal", "tensorflow.equal", "tensorflow.logical_and", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.to_int32"], "methods", ["None"], ["", "def", "get_candidate_labels", "(", "self", ",", "candidate_starts", ",", "candidate_ends", ",", "labeled_starts", ",", "labeled_ends", ",", "labels", ")", ":", "\n", "    ", "same_start", "=", "tf", ".", "equal", "(", "tf", ".", "expand_dims", "(", "labeled_starts", ",", "1", ")", ",", "tf", ".", "expand_dims", "(", "candidate_starts", ",", "0", ")", ")", "# [num_labeled, num_candidates]", "\n", "same_end", "=", "tf", ".", "equal", "(", "tf", ".", "expand_dims", "(", "labeled_ends", ",", "1", ")", ",", "tf", ".", "expand_dims", "(", "candidate_ends", ",", "0", ")", ")", "# [num_labeled, num_candidates]", "\n", "same_span", "=", "tf", ".", "logical_and", "(", "same_start", ",", "same_end", ")", "# [num_labeled, num_candidates]", "\n", "candidate_labels", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "labels", ",", "0", ")", ",", "tf", ".", "to_int32", "(", "same_span", ")", ")", "# [1, num_candidates]", "\n", "candidate_labels", "=", "tf", ".", "squeeze", "(", "candidate_labels", ",", "0", ")", "# [num_candidates]", "\n", "return", "candidate_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_dropout": [[201, 203], ["tensorflow.to_float"], "methods", ["None"], ["", "def", "get_dropout", "(", "self", ",", "dropout_rate", ",", "is_training", ")", ":", "\n", "    ", "return", "1", "-", "(", "tf", ".", "to_float", "(", "is_training", ")", "*", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.coarse_to_fine_pruning": [[204, 218], ["util.shape", "tensorflow.range", "tensorflow.log", "coref_model.CorefModel.get_fast_antecedent_scores", "tensorflow.nn.top_k", "util.batch_gather", "util.batch_gather", "util.batch_gather", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.to_float"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_fast_antecedent_scores", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.batch_gather", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.batch_gather", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.batch_gather"], ["", "def", "coarse_to_fine_pruning", "(", "self", ",", "top_span_emb", ",", "top_span_mention_scores", ",", "c", ")", ":", "\n", "    ", "k", "=", "util", ".", "shape", "(", "top_span_emb", ",", "0", ")", "\n", "top_span_range", "=", "tf", ".", "range", "(", "k", ")", "# [k]", "\n", "antecedent_offsets", "=", "tf", ".", "expand_dims", "(", "top_span_range", ",", "1", ")", "-", "tf", ".", "expand_dims", "(", "top_span_range", ",", "0", ")", "# [k, k]", "\n", "antecedents_mask", "=", "antecedent_offsets", ">=", "1", "# [k, k]", "\n", "fast_antecedent_scores", "=", "tf", ".", "expand_dims", "(", "top_span_mention_scores", ",", "1", ")", "+", "tf", ".", "expand_dims", "(", "top_span_mention_scores", ",", "0", ")", "# [k, k]", "\n", "fast_antecedent_scores", "+=", "tf", ".", "log", "(", "tf", ".", "to_float", "(", "antecedents_mask", ")", ")", "# [k, k]", "\n", "fast_antecedent_scores", "+=", "self", ".", "get_fast_antecedent_scores", "(", "top_span_emb", ")", "# [k, k]", "\n", "\n", "_", ",", "top_antecedents", "=", "tf", ".", "nn", ".", "top_k", "(", "fast_antecedent_scores", ",", "c", ",", "sorted", "=", "False", ")", "# [k, c]", "\n", "top_antecedents_mask", "=", "util", ".", "batch_gather", "(", "antecedents_mask", ",", "top_antecedents", ")", "# [k, c]", "\n", "top_fast_antecedent_scores", "=", "util", ".", "batch_gather", "(", "fast_antecedent_scores", ",", "top_antecedents", ")", "# [k, c]", "\n", "top_antecedent_offsets", "=", "util", ".", "batch_gather", "(", "antecedent_offsets", ",", "top_antecedents", ")", "# [k, c]", "\n", "return", "top_antecedents", ",", "top_antecedents_mask", ",", "top_fast_antecedent_scores", ",", "top_antecedent_offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.distance_pruning": [[219, 229], ["util.shape", "tensorflow.tile", "tensorflow.maximum", "tensorflow.log", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.gather", "tensorflow.to_float", "tensorflow.range", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "distance_pruning", "(", "self", ",", "top_span_emb", ",", "top_span_mention_scores", ",", "c", ")", ":", "\n", "    ", "k", "=", "util", ".", "shape", "(", "top_span_emb", ",", "0", ")", "\n", "top_antecedent_offsets", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "c", ")", "+", "1", ",", "0", ")", ",", "[", "k", ",", "1", "]", ")", "# [k, c]", "\n", "raw_top_antecedents", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "k", ")", ",", "1", ")", "-", "top_antecedent_offsets", "# [k, c]", "\n", "top_antecedents_mask", "=", "raw_top_antecedents", ">=", "0", "# [k, c]", "\n", "top_antecedents", "=", "tf", ".", "maximum", "(", "raw_top_antecedents", ",", "0", ")", "# [k, c]", "\n", "\n", "top_fast_antecedent_scores", "=", "tf", ".", "expand_dims", "(", "top_span_mention_scores", ",", "1", ")", "+", "tf", ".", "gather", "(", "top_span_mention_scores", ",", "top_antecedents", ")", "# [k, c]", "\n", "top_fast_antecedent_scores", "+=", "tf", ".", "log", "(", "tf", ".", "to_float", "(", "top_antecedents_mask", ")", ")", "# [k, c]", "\n", "return", "top_antecedents", ",", "top_antecedents_mask", ",", "top_fast_antecedent_scores", ",", "top_antecedent_offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_predictions_and_loss": [[230, 351], ["coref_model.CorefModel.get_dropout", "coref_model.CorefModel.get_dropout", "coref_model.CorefModel.get_dropout", "util.shape", "util.shape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "context_emb_list.append", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.sequence_mask", "coref_model.CorefModel.lstm_contextualize", "util.shape", "tensorflow.gather", "tensorflow.tile", "coref_model.CorefModel.flatten_emb_by_sentence", "coref_model.CorefModel.flatten_emb_by_sentence", "tensorflow.tile", "tensorflow.gather", "tensorflow.gather", "tensorflow.logical_and", "tensorflow.reshape", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "coref_model.CorefModel.get_candidate_labels", "coref_model.CorefModel.get_span_emb", "coref_model.CorefModel.get_mention_scores", "tensorflow.squeeze", "tensorflow.to_int32", "coref_ops.extract_spans", "tensorflow.squeeze.set_shape", "tensorflow.squeeze", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.minimum", "tensorflow.zeros", "range", "tensorflow.concat", "tensorflow.gather", "tensorflow.to_int32", "tensorflow.equal", "tensorflow.expand_dims", "tensorflow.logical_and", "tensorflow.logical_not", "tensorflow.concat", "coref_model.CorefModel.softmax_loss", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.shape", "tensorflow.gather", "tensorflow.reshape", "util.cnn", "tensorflow.reshape", "context_emb_list.append", "head_emb_list.append", "tensorflow_hub.Module", "tensorflow_hub.Module.", "tensorflow.stack", "tensorflow.variable_scope", "tensorflow.nn.softmax", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.minimum", "tensorflow.equal", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.floor", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "util.shape", "coref_model.CorefModel.coarse_to_fine_pruning", "coref_model.CorefModel.distance_pruning", "tensorflow.log", "tensorflow.expand_dims", "tensorflow.reduce_any", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.variable_scope", "tensorflow.gather", "tensorflow.nn.softmax", "tensorflow.concat", "tensorflow.reduce_sum", "tensorflow.to_float", "util.shape", "util.shape", "util.shape", "tensorflow.concat", "tensorflow.constant_initializer", "len", "tensorflow.to_float", "coref_model.CorefModel.get_slow_antecedent_scores", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.sigmoid", "len", "tensorflow.constant_initializer", "tensorflow.expand_dims", "tensorflow.expand_dims", "util.projection", "tensorflow.shape", "tensorflow.concat", "util.shape"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_dropout", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_dropout", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_dropout", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.lstm_contextualize", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.flatten_emb_by_sentence", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.flatten_emb_by_sentence", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_candidate_labels", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_span_emb", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_mention_scores", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.softmax_loss", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.cnn", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.coarse_to_fine_pruning", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.distance_pruning", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_slow_antecedent_scores", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.projection", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "get_predictions_and_loss", "(", "self", ",", "tokens", ",", "context_word_emb", ",", "head_word_emb", ",", "lm_emb", ",", "char_index", ",", "text_len", ",", "speaker_ids", ",", "genre", ",", "is_training", ",", "gold_starts", ",", "gold_ends", ",", "cluster_ids", ")", ":", "\n", "    ", "self", ".", "dropout", "=", "self", ".", "get_dropout", "(", "self", ".", "config", "[", "\"dropout_rate\"", "]", ",", "is_training", ")", "\n", "self", ".", "lexical_dropout", "=", "self", ".", "get_dropout", "(", "self", ".", "config", "[", "\"lexical_dropout_rate\"", "]", ",", "is_training", ")", "\n", "self", ".", "lstm_dropout", "=", "self", ".", "get_dropout", "(", "self", ".", "config", "[", "\"lstm_dropout_rate\"", "]", ",", "is_training", ")", "\n", "\n", "num_sentences", "=", "tf", ".", "shape", "(", "context_word_emb", ")", "[", "0", "]", "\n", "max_sentence_length", "=", "tf", ".", "shape", "(", "context_word_emb", ")", "[", "1", "]", "\n", "\n", "context_emb_list", "=", "[", "context_word_emb", "]", "\n", "head_emb_list", "=", "[", "head_word_emb", "]", "\n", "\n", "if", "self", ".", "config", "[", "\"char_embedding_size\"", "]", ">", "0", ":", "\n", "      ", "char_emb", "=", "tf", ".", "gather", "(", "tf", ".", "get_variable", "(", "\"char_embeddings\"", ",", "[", "len", "(", "self", ".", "char_dict", ")", ",", "self", ".", "config", "[", "\"char_embedding_size\"", "]", "]", ")", ",", "char_index", ")", "# [num_sentences, max_sentence_length, max_word_length, emb]", "\n", "flattened_char_emb", "=", "tf", ".", "reshape", "(", "char_emb", ",", "[", "num_sentences", "*", "max_sentence_length", ",", "util", ".", "shape", "(", "char_emb", ",", "2", ")", ",", "util", ".", "shape", "(", "char_emb", ",", "3", ")", "]", ")", "# [num_sentences * max_sentence_length, max_word_length, emb]", "\n", "flattened_aggregated_char_emb", "=", "util", ".", "cnn", "(", "flattened_char_emb", ",", "self", ".", "config", "[", "\"filter_widths\"", "]", ",", "self", ".", "config", "[", "\"filter_size\"", "]", ")", "# [num_sentences * max_sentence_length, emb]", "\n", "aggregated_char_emb", "=", "tf", ".", "reshape", "(", "flattened_aggregated_char_emb", ",", "[", "num_sentences", ",", "max_sentence_length", ",", "util", ".", "shape", "(", "flattened_aggregated_char_emb", ",", "1", ")", "]", ")", "# [num_sentences, max_sentence_length, emb]", "\n", "context_emb_list", ".", "append", "(", "aggregated_char_emb", ")", "\n", "head_emb_list", ".", "append", "(", "aggregated_char_emb", ")", "\n", "\n", "", "if", "not", "self", ".", "lm_file", ":", "\n", "      ", "elmo_module", "=", "hub", ".", "Module", "(", "\"https://tfhub.dev/google/elmo/2\"", ")", "\n", "lm_embeddings", "=", "elmo_module", "(", "\n", "inputs", "=", "{", "\"tokens\"", ":", "tokens", ",", "\"sequence_len\"", ":", "text_len", "}", ",", "\n", "signature", "=", "\"tokens\"", ",", "as_dict", "=", "True", ")", "\n", "word_emb", "=", "lm_embeddings", "[", "\"word_emb\"", "]", "# [num_sentences, max_sentence_length, 512]", "\n", "lm_emb", "=", "tf", ".", "stack", "(", "[", "tf", ".", "concat", "(", "[", "word_emb", ",", "word_emb", "]", ",", "-", "1", ")", ",", "\n", "lm_embeddings", "[", "\"lstm_outputs1\"", "]", ",", "\n", "lm_embeddings", "[", "\"lstm_outputs2\"", "]", "]", ",", "-", "1", ")", "# [num_sentences, max_sentence_length, 1024, 3]", "\n", "", "lm_emb_size", "=", "util", ".", "shape", "(", "lm_emb", ",", "2", ")", "\n", "lm_num_layers", "=", "util", ".", "shape", "(", "lm_emb", ",", "3", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"lm_aggregation\"", ")", ":", "\n", "      ", "self", ".", "lm_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "get_variable", "(", "\"lm_scores\"", ",", "[", "lm_num_layers", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", ")", "\n", "self", ".", "lm_scaling", "=", "tf", ".", "get_variable", "(", "\"lm_scaling\"", ",", "[", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "", "flattened_lm_emb", "=", "tf", ".", "reshape", "(", "lm_emb", ",", "[", "num_sentences", "*", "max_sentence_length", "*", "lm_emb_size", ",", "lm_num_layers", "]", ")", "\n", "flattened_aggregated_lm_emb", "=", "tf", ".", "matmul", "(", "flattened_lm_emb", ",", "tf", ".", "expand_dims", "(", "self", ".", "lm_weights", ",", "1", ")", ")", "# [num_sentences * max_sentence_length * emb, 1]", "\n", "aggregated_lm_emb", "=", "tf", ".", "reshape", "(", "flattened_aggregated_lm_emb", ",", "[", "num_sentences", ",", "max_sentence_length", ",", "lm_emb_size", "]", ")", "\n", "aggregated_lm_emb", "*=", "self", ".", "lm_scaling", "\n", "context_emb_list", ".", "append", "(", "aggregated_lm_emb", ")", "\n", "\n", "context_emb", "=", "tf", ".", "concat", "(", "context_emb_list", ",", "2", ")", "# [num_sentences, max_sentence_length, emb]", "\n", "head_emb", "=", "tf", ".", "concat", "(", "head_emb_list", ",", "2", ")", "# [num_sentences, max_sentence_length, emb]", "\n", "context_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "context_emb", ",", "self", ".", "lexical_dropout", ")", "# [num_sentences, max_sentence_length, emb]", "\n", "head_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "head_emb", ",", "self", ".", "lexical_dropout", ")", "# [num_sentences, max_sentence_length, emb]", "\n", "\n", "text_len_mask", "=", "tf", ".", "sequence_mask", "(", "text_len", ",", "maxlen", "=", "max_sentence_length", ")", "# [num_sentence, max_sentence_length]", "\n", "\n", "context_outputs", "=", "self", ".", "lstm_contextualize", "(", "context_emb", ",", "text_len", ",", "text_len_mask", ")", "# [num_words, emb]", "\n", "num_words", "=", "util", ".", "shape", "(", "context_outputs", ",", "0", ")", "\n", "\n", "genre_emb", "=", "tf", ".", "gather", "(", "tf", ".", "get_variable", "(", "\"genre_embeddings\"", ",", "[", "len", "(", "self", ".", "genres", ")", ",", "self", ".", "config", "[", "\"feature_size\"", "]", "]", ")", ",", "genre", ")", "# [emb]", "\n", "\n", "sentence_indices", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "num_sentences", ")", ",", "1", ")", ",", "[", "1", ",", "max_sentence_length", "]", ")", "# [num_sentences, max_sentence_length]", "\n", "flattened_sentence_indices", "=", "self", ".", "flatten_emb_by_sentence", "(", "sentence_indices", ",", "text_len_mask", ")", "# [num_words]", "\n", "flattened_head_emb", "=", "self", ".", "flatten_emb_by_sentence", "(", "head_emb", ",", "text_len_mask", ")", "# [num_words]", "\n", "\n", "candidate_starts", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "num_words", ")", ",", "1", ")", ",", "[", "1", ",", "self", ".", "max_span_width", "]", ")", "# [num_words, max_span_width]", "\n", "candidate_ends", "=", "candidate_starts", "+", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "self", ".", "max_span_width", ")", ",", "0", ")", "# [num_words, max_span_width]", "\n", "candidate_start_sentence_indices", "=", "tf", ".", "gather", "(", "flattened_sentence_indices", ",", "candidate_starts", ")", "# [num_words, max_span_width]", "\n", "candidate_end_sentence_indices", "=", "tf", ".", "gather", "(", "flattened_sentence_indices", ",", "tf", ".", "minimum", "(", "candidate_ends", ",", "num_words", "-", "1", ")", ")", "# [num_words, max_span_width]", "\n", "candidate_mask", "=", "tf", ".", "logical_and", "(", "candidate_ends", "<", "num_words", ",", "tf", ".", "equal", "(", "candidate_start_sentence_indices", ",", "candidate_end_sentence_indices", ")", ")", "# [num_words, max_span_width]", "\n", "flattened_candidate_mask", "=", "tf", ".", "reshape", "(", "candidate_mask", ",", "[", "-", "1", "]", ")", "# [num_words * max_span_width]", "\n", "candidate_starts", "=", "tf", ".", "boolean_mask", "(", "tf", ".", "reshape", "(", "candidate_starts", ",", "[", "-", "1", "]", ")", ",", "flattened_candidate_mask", ")", "# [num_candidates]", "\n", "candidate_ends", "=", "tf", ".", "boolean_mask", "(", "tf", ".", "reshape", "(", "candidate_ends", ",", "[", "-", "1", "]", ")", ",", "flattened_candidate_mask", ")", "# [num_candidates]", "\n", "candidate_sentence_indices", "=", "tf", ".", "boolean_mask", "(", "tf", ".", "reshape", "(", "candidate_start_sentence_indices", ",", "[", "-", "1", "]", ")", ",", "flattened_candidate_mask", ")", "# [num_candidates]", "\n", "\n", "candidate_cluster_ids", "=", "self", ".", "get_candidate_labels", "(", "candidate_starts", ",", "candidate_ends", ",", "gold_starts", ",", "gold_ends", ",", "cluster_ids", ")", "# [num_candidates]", "\n", "\n", "candidate_span_emb", "=", "self", ".", "get_span_emb", "(", "flattened_head_emb", ",", "context_outputs", ",", "candidate_starts", ",", "candidate_ends", ")", "# [num_candidates, emb]", "\n", "candidate_mention_scores", "=", "self", ".", "get_mention_scores", "(", "candidate_span_emb", ")", "# [k, 1]", "\n", "candidate_mention_scores", "=", "tf", ".", "squeeze", "(", "candidate_mention_scores", ",", "1", ")", "# [k]", "\n", "\n", "k", "=", "tf", ".", "to_int32", "(", "tf", ".", "floor", "(", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "context_outputs", ")", "[", "0", "]", ")", "*", "self", ".", "config", "[", "\"top_span_ratio\"", "]", ")", ")", "\n", "top_span_indices", "=", "coref_ops", ".", "extract_spans", "(", "tf", ".", "expand_dims", "(", "candidate_mention_scores", ",", "0", ")", ",", "\n", "tf", ".", "expand_dims", "(", "candidate_starts", ",", "0", ")", ",", "\n", "tf", ".", "expand_dims", "(", "candidate_ends", ",", "0", ")", ",", "\n", "tf", ".", "expand_dims", "(", "k", ",", "0", ")", ",", "\n", "util", ".", "shape", "(", "context_outputs", ",", "0", ")", ",", "\n", "True", ")", "# [1, k]", "\n", "top_span_indices", ".", "set_shape", "(", "[", "1", ",", "None", "]", ")", "\n", "top_span_indices", "=", "tf", ".", "squeeze", "(", "top_span_indices", ",", "0", ")", "# [k]", "\n", "\n", "top_span_starts", "=", "tf", ".", "gather", "(", "candidate_starts", ",", "top_span_indices", ")", "# [k]", "\n", "top_span_ends", "=", "tf", ".", "gather", "(", "candidate_ends", ",", "top_span_indices", ")", "# [k]", "\n", "top_span_emb", "=", "tf", ".", "gather", "(", "candidate_span_emb", ",", "top_span_indices", ")", "# [k, emb]", "\n", "top_span_cluster_ids", "=", "tf", ".", "gather", "(", "candidate_cluster_ids", ",", "top_span_indices", ")", "# [k]", "\n", "top_span_mention_scores", "=", "tf", ".", "gather", "(", "candidate_mention_scores", ",", "top_span_indices", ")", "# [k]", "\n", "top_span_sentence_indices", "=", "tf", ".", "gather", "(", "candidate_sentence_indices", ",", "top_span_indices", ")", "# [k]", "\n", "top_span_speaker_ids", "=", "tf", ".", "gather", "(", "speaker_ids", ",", "top_span_starts", ")", "# [k]", "\n", "\n", "c", "=", "tf", ".", "minimum", "(", "self", ".", "config", "[", "\"max_top_antecedents\"", "]", ",", "k", ")", "\n", "\n", "if", "self", ".", "config", "[", "\"coarse_to_fine\"", "]", ":", "\n", "      ", "top_antecedents", ",", "top_antecedents_mask", ",", "top_fast_antecedent_scores", ",", "top_antecedent_offsets", "=", "self", ".", "coarse_to_fine_pruning", "(", "top_span_emb", ",", "top_span_mention_scores", ",", "c", ")", "\n", "", "else", ":", "\n", "      ", "top_antecedents", ",", "top_antecedents_mask", ",", "top_fast_antecedent_scores", ",", "top_antecedent_offsets", "=", "self", ".", "distance_pruning", "(", "top_span_emb", ",", "top_span_mention_scores", ",", "c", ")", "\n", "\n", "", "dummy_scores", "=", "tf", ".", "zeros", "(", "[", "k", ",", "1", "]", ")", "# [k, 1]", "\n", "for", "i", "in", "range", "(", "self", ".", "config", "[", "\"coref_depth\"", "]", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "\"coref_layer\"", ",", "reuse", "=", "(", "i", ">", "0", ")", ")", ":", "\n", "        ", "top_antecedent_emb", "=", "tf", ".", "gather", "(", "top_span_emb", ",", "top_antecedents", ")", "# [k, c, emb]", "\n", "top_antecedent_scores", "=", "top_fast_antecedent_scores", "+", "self", ".", "get_slow_antecedent_scores", "(", "top_span_emb", ",", "top_antecedents", ",", "top_antecedent_emb", ",", "top_antecedent_offsets", ",", "top_span_speaker_ids", ",", "genre_emb", ")", "# [k, c]", "\n", "top_antecedent_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "concat", "(", "[", "dummy_scores", ",", "top_antecedent_scores", "]", ",", "1", ")", ")", "# [k, c + 1]", "\n", "top_antecedent_emb", "=", "tf", ".", "concat", "(", "[", "tf", ".", "expand_dims", "(", "top_span_emb", ",", "1", ")", ",", "top_antecedent_emb", "]", ",", "1", ")", "# [k, c + 1, emb]", "\n", "attended_span_emb", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "expand_dims", "(", "top_antecedent_weights", ",", "2", ")", "*", "top_antecedent_emb", ",", "1", ")", "# [k, emb]", "\n", "with", "tf", ".", "variable_scope", "(", "\"f\"", ")", ":", "\n", "          ", "f", "=", "tf", ".", "sigmoid", "(", "util", ".", "projection", "(", "tf", ".", "concat", "(", "[", "top_span_emb", ",", "attended_span_emb", "]", ",", "1", ")", ",", "util", ".", "shape", "(", "top_span_emb", ",", "-", "1", ")", ")", ")", "# [k, emb]", "\n", "top_span_emb", "=", "f", "*", "attended_span_emb", "+", "(", "1", "-", "f", ")", "*", "top_span_emb", "# [k, emb]", "\n", "\n", "", "", "", "top_antecedent_scores", "=", "tf", ".", "concat", "(", "[", "dummy_scores", ",", "top_antecedent_scores", "]", ",", "1", ")", "# [k, c + 1]", "\n", "\n", "top_antecedent_cluster_ids", "=", "tf", ".", "gather", "(", "top_span_cluster_ids", ",", "top_antecedents", ")", "# [k, c]", "\n", "top_antecedent_cluster_ids", "+=", "tf", ".", "to_int32", "(", "tf", ".", "log", "(", "tf", ".", "to_float", "(", "top_antecedents_mask", ")", ")", ")", "# [k, c]", "\n", "same_cluster_indicator", "=", "tf", ".", "equal", "(", "top_antecedent_cluster_ids", ",", "tf", ".", "expand_dims", "(", "top_span_cluster_ids", ",", "1", ")", ")", "# [k, c]", "\n", "non_dummy_indicator", "=", "tf", ".", "expand_dims", "(", "top_span_cluster_ids", ">", "0", ",", "1", ")", "# [k, 1]", "\n", "pairwise_labels", "=", "tf", ".", "logical_and", "(", "same_cluster_indicator", ",", "non_dummy_indicator", ")", "# [k, c]", "\n", "dummy_labels", "=", "tf", ".", "logical_not", "(", "tf", ".", "reduce_any", "(", "pairwise_labels", ",", "1", ",", "keepdims", "=", "True", ")", ")", "# [k, 1]", "\n", "top_antecedent_labels", "=", "tf", ".", "concat", "(", "[", "dummy_labels", ",", "pairwise_labels", "]", ",", "1", ")", "# [k, c + 1]", "\n", "loss", "=", "self", ".", "softmax_loss", "(", "top_antecedent_scores", ",", "top_antecedent_labels", ")", "# [k]", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "loss", ")", "# []", "\n", "\n", "return", "[", "candidate_starts", ",", "candidate_ends", ",", "candidate_mention_scores", ",", "top_span_starts", ",", "top_span_ends", ",", "top_antecedents", ",", "top_antecedent_scores", "]", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_span_emb": [[352, 384], ["tensorflow.gather", "span_emb_list.append", "tensorflow.gather", "span_emb_list.append", "tensorflow.concat", "tensorflow.gather", "tensorflow.nn.dropout", "span_emb_list.append", "tensorflow.minimum", "tensorflow.gather", "tensorflow.gather", "tensorflow.expand_dims", "tensorflow.log", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "span_emb_list.append", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.variable_scope", "util.projection", "tensorflow.sequence_mask", "tensorflow.range", "util.shape"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.projection", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "get_span_emb", "(", "self", ",", "head_emb", ",", "context_outputs", ",", "span_starts", ",", "span_ends", ")", ":", "\n", "    ", "span_emb_list", "=", "[", "]", "\n", "\n", "span_start_emb", "=", "tf", ".", "gather", "(", "context_outputs", ",", "span_starts", ")", "# [k, emb]", "\n", "span_emb_list", ".", "append", "(", "span_start_emb", ")", "\n", "\n", "span_end_emb", "=", "tf", ".", "gather", "(", "context_outputs", ",", "span_ends", ")", "# [k, emb]", "\n", "span_emb_list", ".", "append", "(", "span_end_emb", ")", "\n", "\n", "span_width", "=", "1", "+", "span_ends", "-", "span_starts", "# [k]", "\n", "\n", "if", "self", ".", "config", "[", "\"use_features\"", "]", ":", "\n", "      ", "span_width_index", "=", "span_width", "-", "1", "# [k]", "\n", "span_width_emb", "=", "tf", ".", "gather", "(", "tf", ".", "get_variable", "(", "\"span_width_embeddings\"", ",", "[", "self", ".", "config", "[", "\"max_span_width\"", "]", ",", "self", ".", "config", "[", "\"feature_size\"", "]", "]", ")", ",", "span_width_index", ")", "# [k, emb]", "\n", "span_width_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "span_width_emb", ",", "self", ".", "dropout", ")", "\n", "span_emb_list", ".", "append", "(", "span_width_emb", ")", "\n", "\n", "", "if", "self", ".", "config", "[", "\"model_heads\"", "]", ":", "\n", "      ", "span_indices", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "self", ".", "config", "[", "\"max_span_width\"", "]", ")", ",", "0", ")", "+", "tf", ".", "expand_dims", "(", "span_starts", ",", "1", ")", "# [k, max_span_width]", "\n", "span_indices", "=", "tf", ".", "minimum", "(", "util", ".", "shape", "(", "context_outputs", ",", "0", ")", "-", "1", ",", "span_indices", ")", "# [k, max_span_width]", "\n", "span_text_emb", "=", "tf", ".", "gather", "(", "head_emb", ",", "span_indices", ")", "# [k, max_span_width, emb]", "\n", "with", "tf", ".", "variable_scope", "(", "\"head_scores\"", ")", ":", "\n", "        ", "self", ".", "head_scores", "=", "util", ".", "projection", "(", "context_outputs", ",", "1", ")", "# [num_words, 1]", "\n", "", "span_head_scores", "=", "tf", ".", "gather", "(", "self", ".", "head_scores", ",", "span_indices", ")", "# [k, max_span_width, 1]", "\n", "span_mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "sequence_mask", "(", "span_width", ",", "self", ".", "config", "[", "\"max_span_width\"", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "2", ")", "# [k, max_span_width, 1]", "\n", "span_head_scores", "+=", "tf", ".", "log", "(", "span_mask", ")", "# [k, max_span_width, 1]", "\n", "span_attention", "=", "tf", ".", "nn", ".", "softmax", "(", "span_head_scores", ",", "1", ")", "# [k, max_span_width, 1]", "\n", "span_head_emb", "=", "tf", ".", "reduce_sum", "(", "span_attention", "*", "span_text_emb", ",", "1", ")", "# [k, emb]", "\n", "span_emb_list", ".", "append", "(", "span_head_emb", ")", "\n", "\n", "", "span_emb", "=", "tf", ".", "concat", "(", "span_emb_list", ",", "1", ")", "# [k, emb]", "\n", "return", "span_emb", "# [k, emb]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_mention_scores": [[385, 388], ["tensorflow.variable_scope", "util.ffnn"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.ffnn"], ["", "def", "get_mention_scores", "(", "self", ",", "span_emb", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"mention_scores\"", ")", ":", "\n", "      ", "return", "util", ".", "ffnn", "(", "span_emb", ",", "self", ".", "config", "[", "\"ffnn_depth\"", "]", ",", "self", ".", "config", "[", "\"ffnn_size\"", "]", ",", "1", ",", "self", ".", "dropout", ")", "# [k, 1]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.softmax_loss": [[389, 394], ["tensorflow.reduce_logsumexp", "tensorflow.reduce_logsumexp", "tensorflow.log", "tensorflow.to_float"], "methods", ["None"], ["", "", "def", "softmax_loss", "(", "self", ",", "antecedent_scores", ",", "antecedent_labels", ")", ":", "\n", "    ", "gold_scores", "=", "antecedent_scores", "+", "tf", ".", "log", "(", "tf", ".", "to_float", "(", "antecedent_labels", ")", ")", "# [k, max_ant + 1]", "\n", "marginalized_gold_scores", "=", "tf", ".", "reduce_logsumexp", "(", "gold_scores", ",", "[", "1", "]", ")", "# [k]", "\n", "log_norm", "=", "tf", ".", "reduce_logsumexp", "(", "antecedent_scores", ",", "[", "1", "]", ")", "# [k]", "\n", "return", "log_norm", "-", "marginalized_gold_scores", "# [k]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.bucket_distance": [[395, 404], ["tensorflow.to_int32", "tensorflow.clip_by_value", "tensorflow.to_int32", "tensorflow.floor", "tensorflow.log", "math.log", "tensorflow.to_float"], "methods", ["None"], ["", "def", "bucket_distance", "(", "self", ",", "distances", ")", ":", "\n", "    ", "\"\"\"\n    Places the given values (designed for distances) into 10 semi-logscale buckets:\n    [0, 1, 2, 3, 4, 5-7, 8-15, 16-31, 32-63, 64+].\n    \"\"\"", "\n", "logspace_idx", "=", "tf", ".", "to_int32", "(", "tf", ".", "floor", "(", "tf", ".", "log", "(", "tf", ".", "to_float", "(", "distances", ")", ")", "/", "math", ".", "log", "(", "2", ")", ")", ")", "+", "3", "\n", "use_identity", "=", "tf", ".", "to_int32", "(", "distances", "<=", "4", ")", "\n", "combined_idx", "=", "use_identity", "*", "distances", "+", "(", "1", "-", "use_identity", ")", "*", "logspace_idx", "\n", "return", "tf", ".", "clip_by_value", "(", "combined_idx", ",", "0", ",", "9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_slow_antecedent_scores": [[405, 438], ["util.shape", "util.shape", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.gather", "tensorflow.equal", "tensorflow.gather", "feature_emb_list.append", "tensorflow.tile", "feature_emb_list.append", "coref_model.CorefModel.bucket_distance", "tensorflow.gather", "feature_emb_list.append", "tensorflow.variable_scope", "util.ffnn", "tensorflow.expand_dims", "tensorflow.get_variable", "tensorflow.to_int32", "tensorflow.expand_dims", "tensorflow.get_variable", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.bucket_distance", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.ffnn"], ["", "def", "get_slow_antecedent_scores", "(", "self", ",", "top_span_emb", ",", "top_antecedents", ",", "top_antecedent_emb", ",", "top_antecedent_offsets", ",", "top_span_speaker_ids", ",", "genre_emb", ")", ":", "\n", "    ", "k", "=", "util", ".", "shape", "(", "top_span_emb", ",", "0", ")", "\n", "c", "=", "util", ".", "shape", "(", "top_antecedents", ",", "1", ")", "\n", "\n", "feature_emb_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "config", "[", "\"use_metadata\"", "]", ":", "\n", "      ", "top_antecedent_speaker_ids", "=", "tf", ".", "gather", "(", "top_span_speaker_ids", ",", "top_antecedents", ")", "# [k, c]", "\n", "same_speaker", "=", "tf", ".", "equal", "(", "tf", ".", "expand_dims", "(", "top_span_speaker_ids", ",", "1", ")", ",", "top_antecedent_speaker_ids", ")", "# [k, c]", "\n", "speaker_pair_emb", "=", "tf", ".", "gather", "(", "tf", ".", "get_variable", "(", "\"same_speaker_emb\"", ",", "[", "2", ",", "self", ".", "config", "[", "\"feature_size\"", "]", "]", ")", ",", "tf", ".", "to_int32", "(", "same_speaker", ")", ")", "# [k, c, emb]", "\n", "feature_emb_list", ".", "append", "(", "speaker_pair_emb", ")", "\n", "\n", "tiled_genre_emb", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "genre_emb", ",", "0", ")", ",", "0", ")", ",", "[", "k", ",", "c", ",", "1", "]", ")", "# [k, c, emb]", "\n", "feature_emb_list", ".", "append", "(", "tiled_genre_emb", ")", "\n", "\n", "", "if", "self", ".", "config", "[", "\"use_features\"", "]", ":", "\n", "      ", "antecedent_distance_buckets", "=", "self", ".", "bucket_distance", "(", "top_antecedent_offsets", ")", "# [k, c]", "\n", "antecedent_distance_emb", "=", "tf", ".", "gather", "(", "tf", ".", "get_variable", "(", "\"antecedent_distance_emb\"", ",", "[", "10", ",", "self", ".", "config", "[", "\"feature_size\"", "]", "]", ")", ",", "antecedent_distance_buckets", ")", "# [k, c]", "\n", "feature_emb_list", ".", "append", "(", "antecedent_distance_emb", ")", "\n", "\n", "", "feature_emb", "=", "tf", ".", "concat", "(", "feature_emb_list", ",", "2", ")", "# [k, c, emb]", "\n", "feature_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "feature_emb", ",", "self", ".", "dropout", ")", "# [k, c, emb]", "\n", "\n", "target_emb", "=", "tf", ".", "expand_dims", "(", "top_span_emb", ",", "1", ")", "# [k, 1, emb]", "\n", "similarity_emb", "=", "top_antecedent_emb", "*", "target_emb", "# [k, c, emb]", "\n", "target_emb", "=", "tf", ".", "tile", "(", "target_emb", ",", "[", "1", ",", "c", ",", "1", "]", ")", "# [k, c, emb]", "\n", "\n", "pair_emb", "=", "tf", ".", "concat", "(", "[", "target_emb", ",", "top_antecedent_emb", ",", "similarity_emb", ",", "feature_emb", "]", ",", "2", ")", "# [k, c, emb]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"slow_antecedent_scores\"", ")", ":", "\n", "      ", "slow_antecedent_scores", "=", "util", ".", "ffnn", "(", "pair_emb", ",", "self", ".", "config", "[", "\"ffnn_depth\"", "]", ",", "self", ".", "config", "[", "\"ffnn_size\"", "]", ",", "1", ",", "self", ".", "dropout", ")", "# [k, c, 1]", "\n", "", "slow_antecedent_scores", "=", "tf", ".", "squeeze", "(", "slow_antecedent_scores", ",", "2", ")", "# [k, c]", "\n", "return", "slow_antecedent_scores", "# [k, c]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_fast_antecedent_scores": [[439, 444], ["tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.variable_scope", "tensorflow.nn.dropout", "util.projection", "util.shape"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.projection", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "get_fast_antecedent_scores", "(", "self", ",", "top_span_emb", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"src_projection\"", ")", ":", "\n", "      ", "source_top_span_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "util", ".", "projection", "(", "top_span_emb", ",", "util", ".", "shape", "(", "top_span_emb", ",", "-", "1", ")", ")", ",", "self", ".", "dropout", ")", "# [k, emb]", "\n", "", "target_top_span_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "top_span_emb", ",", "self", ".", "dropout", ")", "# [k, emb]", "\n", "return", "tf", ".", "matmul", "(", "source_top_span_emb", ",", "target_top_span_emb", ",", "transpose_b", "=", "True", ")", "# [k, k]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.flatten_emb_by_sentence": [[445, 457], ["len", "tensorflow.boolean_mask", "tensorflow.shape", "tensorflow.shape", "emb.get_shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "ValueError", "util.shape"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "flatten_emb_by_sentence", "(", "self", ",", "emb", ",", "text_len_mask", ")", ":", "\n", "    ", "num_sentences", "=", "tf", ".", "shape", "(", "emb", ")", "[", "0", "]", "\n", "max_sentence_length", "=", "tf", ".", "shape", "(", "emb", ")", "[", "1", "]", "\n", "\n", "emb_rank", "=", "len", "(", "emb", ".", "get_shape", "(", ")", ")", "\n", "if", "emb_rank", "==", "2", ":", "\n", "      ", "flattened_emb", "=", "tf", ".", "reshape", "(", "emb", ",", "[", "num_sentences", "*", "max_sentence_length", "]", ")", "\n", "", "elif", "emb_rank", "==", "3", ":", "\n", "      ", "flattened_emb", "=", "tf", ".", "reshape", "(", "emb", ",", "[", "num_sentences", "*", "max_sentence_length", ",", "util", ".", "shape", "(", "emb", ",", "2", ")", "]", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported rank: {}\"", ".", "format", "(", "emb_rank", ")", ")", "\n", "", "return", "tf", ".", "boolean_mask", "(", "flattened_emb", ",", "tf", ".", "reshape", "(", "text_len_mask", ",", "[", "num_sentences", "*", "max_sentence_length", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.lstm_contextualize": [[458, 488], ["range", "coref_model.CorefModel.flatten_emb_by_sentence", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.contrib.rnn.LSTMStateTuple", "tensorflow.contrib.rnn.LSTMStateTuple", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.variable_scope", "util.CustomLSTMCell", "tensorflow.variable_scope", "util.CustomLSTMCell", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.sigmoid", "util.projection", "util.shape"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.flatten_emb_by_sentence", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.projection", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "lstm_contextualize", "(", "self", ",", "text_emb", ",", "text_len", ",", "text_len_mask", ")", ":", "\n", "    ", "num_sentences", "=", "tf", ".", "shape", "(", "text_emb", ")", "[", "0", "]", "\n", "\n", "current_inputs", "=", "text_emb", "# [num_sentences, max_sentence_length, emb]", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "config", "[", "\"contextualization_layers\"", "]", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "\"layer_{}\"", ".", "format", "(", "layer", ")", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"fw_cell\"", ")", ":", "\n", "          ", "cell_fw", "=", "util", ".", "CustomLSTMCell", "(", "self", ".", "config", "[", "\"contextualization_size\"", "]", ",", "num_sentences", ",", "self", ".", "lstm_dropout", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"bw_cell\"", ")", ":", "\n", "          ", "cell_bw", "=", "util", ".", "CustomLSTMCell", "(", "self", ".", "config", "[", "\"contextualization_size\"", "]", ",", "num_sentences", ",", "self", ".", "lstm_dropout", ")", "\n", "", "state_fw", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", "(", "tf", ".", "tile", "(", "cell_fw", ".", "initial_state", ".", "c", ",", "[", "num_sentences", ",", "1", "]", ")", ",", "tf", ".", "tile", "(", "cell_fw", ".", "initial_state", ".", "h", ",", "[", "num_sentences", ",", "1", "]", ")", ")", "\n", "state_bw", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", "(", "tf", ".", "tile", "(", "cell_bw", ".", "initial_state", ".", "c", ",", "[", "num_sentences", ",", "1", "]", ")", ",", "tf", ".", "tile", "(", "cell_bw", ".", "initial_state", ".", "h", ",", "[", "num_sentences", ",", "1", "]", ")", ")", "\n", "\n", "(", "fw_outputs", ",", "bw_outputs", ")", ",", "_", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", "=", "cell_fw", ",", "\n", "cell_bw", "=", "cell_bw", ",", "\n", "inputs", "=", "current_inputs", ",", "\n", "sequence_length", "=", "text_len", ",", "\n", "initial_state_fw", "=", "state_fw", ",", "\n", "initial_state_bw", "=", "state_bw", ")", "\n", "\n", "text_outputs", "=", "tf", ".", "concat", "(", "[", "fw_outputs", ",", "bw_outputs", "]", ",", "2", ")", "# [num_sentences, max_sentence_length, emb]", "\n", "text_outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "text_outputs", ",", "self", ".", "lstm_dropout", ")", "\n", "if", "layer", ">", "0", ":", "\n", "          ", "highway_gates", "=", "tf", ".", "sigmoid", "(", "util", ".", "projection", "(", "text_outputs", ",", "util", ".", "shape", "(", "text_outputs", ",", "2", ")", ")", ")", "# [num_sentences, max_sentence_length, emb]", "\n", "text_outputs", "=", "highway_gates", "*", "text_outputs", "+", "(", "1", "-", "highway_gates", ")", "*", "current_inputs", "\n", "", "current_inputs", "=", "text_outputs", "\n", "\n", "", "", "return", "self", ".", "flatten_emb_by_sentence", "(", "text_outputs", ",", "text_len_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_predicted_antecedents": [[489, 497], ["enumerate", "numpy.argmax", "predicted_antecedents.append", "predicted_antecedents.append"], "methods", ["None"], ["", "def", "get_predicted_antecedents", "(", "self", ",", "antecedents", ",", "antecedent_scores", ")", ":", "\n", "    ", "predicted_antecedents", "=", "[", "]", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "np", ".", "argmax", "(", "antecedent_scores", ",", "axis", "=", "1", ")", "-", "1", ")", ":", "\n", "      ", "if", "index", "<", "0", ":", "\n", "        ", "predicted_antecedents", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "predicted_antecedents", ".", "append", "(", "antecedents", "[", "i", ",", "index", "]", ")", "\n", "", "", "return", "predicted_antecedents", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_predicted_clusters": [[498, 521], ["enumerate", "predicted_clusters[].append", "tuple", "int", "int", "len", "predicted_clusters.append", "int", "int", "mention_to_predicted.items"], "methods", ["None"], ["", "def", "get_predicted_clusters", "(", "self", ",", "top_span_starts", ",", "top_span_ends", ",", "predicted_antecedents", ")", ":", "\n", "    ", "mention_to_predicted", "=", "{", "}", "\n", "predicted_clusters", "=", "[", "]", "\n", "for", "i", ",", "predicted_index", "in", "enumerate", "(", "predicted_antecedents", ")", ":", "\n", "      ", "if", "predicted_index", "<", "0", ":", "\n", "        ", "continue", "\n", "", "assert", "i", ">", "predicted_index", "\n", "predicted_antecedent", "=", "(", "int", "(", "top_span_starts", "[", "predicted_index", "]", ")", ",", "int", "(", "top_span_ends", "[", "predicted_index", "]", ")", ")", "\n", "if", "predicted_antecedent", "in", "mention_to_predicted", ":", "\n", "        ", "predicted_cluster", "=", "mention_to_predicted", "[", "predicted_antecedent", "]", "\n", "", "else", ":", "\n", "        ", "predicted_cluster", "=", "len", "(", "predicted_clusters", ")", "\n", "predicted_clusters", ".", "append", "(", "[", "predicted_antecedent", "]", ")", "\n", "mention_to_predicted", "[", "predicted_antecedent", "]", "=", "predicted_cluster", "\n", "\n", "", "mention", "=", "(", "int", "(", "top_span_starts", "[", "i", "]", ")", ",", "int", "(", "top_span_ends", "[", "i", "]", ")", ")", "\n", "predicted_clusters", "[", "predicted_cluster", "]", ".", "append", "(", "mention", ")", "\n", "mention_to_predicted", "[", "mention", "]", "=", "predicted_cluster", "\n", "\n", "", "predicted_clusters", "=", "[", "tuple", "(", "pc", ")", "for", "pc", "in", "predicted_clusters", "]", "\n", "mention_to_predicted", "=", "{", "m", ":", "predicted_clusters", "[", "i", "]", "for", "m", ",", "i", "in", "mention_to_predicted", ".", "items", "(", ")", "}", "\n", "\n", "return", "predicted_clusters", ",", "mention_to_predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.evaluate_coref": [[522, 532], ["coref_model.CorefModel.get_predicted_clusters", "evaluator.update", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_predicted_clusters", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.update"], ["", "def", "evaluate_coref", "(", "self", ",", "top_span_starts", ",", "top_span_ends", ",", "predicted_antecedents", ",", "gold_clusters", ",", "evaluator", ")", ":", "\n", "    ", "gold_clusters", "=", "[", "tuple", "(", "tuple", "(", "m", ")", "for", "m", "in", "gc", ")", "for", "gc", "in", "gold_clusters", "]", "\n", "mention_to_gold", "=", "{", "}", "\n", "for", "gc", "in", "gold_clusters", ":", "\n", "      ", "for", "mention", "in", "gc", ":", "\n", "        ", "mention_to_gold", "[", "mention", "]", "=", "gc", "\n", "\n", "", "", "predicted_clusters", ",", "mention_to_predicted", "=", "self", ".", "get_predicted_clusters", "(", "top_span_starts", ",", "top_span_ends", ",", "predicted_antecedents", ")", "\n", "evaluator", ".", "update", "(", "predicted_clusters", ",", "gold_clusters", ",", "mention_to_predicted", ",", "mention_to_gold", ")", "\n", "return", "predicted_clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.load_eval_data": [[533, 542], ["sum", "print", "json.loads", "open", "coref_model.CorefModel.tensorize_example", "coref_model.CorefModel.load_eval_data.load_line"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.tensorize_example"], ["", "def", "load_eval_data", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "eval_data", "is", "None", ":", "\n", "      ", "def", "load_line", "(", "line", ")", ":", "\n", "        ", "example", "=", "json", ".", "loads", "(", "line", ")", "\n", "return", "self", ".", "tensorize_example", "(", "example", ",", "is_training", "=", "False", ")", ",", "example", "\n", "", "with", "open", "(", "self", ".", "config", "[", "\"eval_path\"", "]", ")", "as", "f", ":", "\n", "        ", "self", ".", "eval_data", "=", "[", "load_line", "(", "l", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "num_words", "=", "sum", "(", "tensorized_example", "[", "2", "]", ".", "sum", "(", ")", "for", "tensorized_example", ",", "_", "in", "self", ".", "eval_data", ")", "\n", "print", "(", "\"Loaded {} eval examples.\"", ".", "format", "(", "len", "(", "self", ".", "eval_data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.evaluate": [[543, 573], ["coref_model.CorefModel.load_eval_data", "metrics.CorefEvaluator", "enumerate", "conll.evaluate_conll", "print", "metrics.CorefEvaluator.get_prf", "print", "print", "print", "session.run", "coref_model.CorefModel.get_predicted_antecedents", "coref_model.CorefModel.evaluate_coref", "sum", "len", "util.make_summary", "print", "zip", "len", "conll.evaluate_conll.values"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.load_eval_data", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.evaluate_conll", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.metrics.Evaluator.get_prf", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.get_predicted_antecedents", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.coref_model.CorefModel.evaluate_coref", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.make_summary"], ["", "", "def", "evaluate", "(", "self", ",", "session", ",", "official_stdout", "=", "False", ")", ":", "\n", "    ", "self", ".", "load_eval_data", "(", ")", "\n", "\n", "coref_predictions", "=", "{", "}", "\n", "coref_evaluator", "=", "metrics", ".", "CorefEvaluator", "(", ")", "\n", "\n", "for", "example_num", ",", "(", "tensorized_example", ",", "example", ")", "in", "enumerate", "(", "self", ".", "eval_data", ")", ":", "\n", "      ", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "gold_starts", ",", "gold_ends", ",", "_", "=", "tensorized_example", "\n", "feed_dict", "=", "{", "i", ":", "t", "for", "i", ",", "t", "in", "zip", "(", "self", ".", "input_tensors", ",", "tensorized_example", ")", "}", "\n", "candidate_starts", ",", "candidate_ends", ",", "candidate_mention_scores", ",", "top_span_starts", ",", "top_span_ends", ",", "top_antecedents", ",", "top_antecedent_scores", "=", "session", ".", "run", "(", "self", ".", "predictions", ",", "feed_dict", "=", "feed_dict", ")", "\n", "predicted_antecedents", "=", "self", ".", "get_predicted_antecedents", "(", "top_antecedents", ",", "top_antecedent_scores", ")", "\n", "coref_predictions", "[", "example", "[", "\"doc_key\"", "]", "]", "=", "self", ".", "evaluate_coref", "(", "top_span_starts", ",", "top_span_ends", ",", "predicted_antecedents", ",", "example", "[", "\"clusters\"", "]", ",", "coref_evaluator", ")", "\n", "if", "example_num", "%", "10", "==", "0", ":", "\n", "        ", "print", "(", "\"Evaluated {}/{} examples.\"", ".", "format", "(", "example_num", "+", "1", ",", "len", "(", "self", ".", "eval_data", ")", ")", ")", "\n", "\n", "", "", "summary_dict", "=", "{", "}", "\n", "conll_results", "=", "conll", ".", "evaluate_conll", "(", "self", ".", "config", "[", "\"conll_eval_path\"", "]", ",", "coref_predictions", ",", "official_stdout", ")", "\n", "average_f1", "=", "sum", "(", "results", "[", "\"f\"", "]", "for", "results", "in", "conll_results", ".", "values", "(", ")", ")", "/", "len", "(", "conll_results", ")", "\n", "summary_dict", "[", "\"Average F1 (conll)\"", "]", "=", "average_f1", "\n", "print", "(", "\"Average F1 (conll): {:.2f}%\"", ".", "format", "(", "average_f1", ")", ")", "\n", "\n", "p", ",", "r", ",", "f", "=", "coref_evaluator", ".", "get_prf", "(", ")", "\n", "summary_dict", "[", "\"Average F1 (py)\"", "]", "=", "f", "\n", "print", "(", "\"Average F1 (py): {:.2f}%\"", ".", "format", "(", "f", "*", "100", ")", ")", "\n", "summary_dict", "[", "\"Average precision (py)\"", "]", "=", "p", "\n", "print", "(", "\"Average precision (py): {:.2f}%\"", ".", "format", "(", "p", "*", "100", ")", ")", "\n", "summary_dict", "[", "\"Average recall (py)\"", "]", "=", "r", "\n", "print", "(", "\"Average recall (py): {:.2f}%\"", ".", "format", "(", "r", "*", "100", ")", ")", "\n", "\n", "return", "util", ".", "make_summary", "(", "summary_dict", ")", ",", "average_f1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.__init__": [[143, 147], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "_num_correct", "=", "0", "\n", "self", ".", "_num_gold", "=", "0", "\n", "self", ".", "_num_predicted", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.update": [[148, 152], ["len", "len", "len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "gold_set", ",", "predicted_set", ")", ":", "\n", "    ", "self", ".", "_num_correct", "+=", "len", "(", "gold_set", "&", "predicted_set", ")", "\n", "self", ".", "_num_gold", "+=", "len", "(", "gold_set", ")", "\n", "self", ".", "_num_predicted", "+=", "len", "(", "predicted_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.recall": [[153, 155], ["util.maybe_divide"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.maybe_divide"], ["", "def", "recall", "(", "self", ")", ":", "\n", "    ", "return", "maybe_divide", "(", "self", ".", "_num_correct", ",", "self", ".", "_num_gold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.precision": [[156, 158], ["util.maybe_divide"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.maybe_divide"], ["", "def", "precision", "(", "self", ")", ":", "\n", "    ", "return", "maybe_divide", "(", "self", ".", "_num_correct", ",", "self", ".", "_num_predicted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.metrics": [[159, 164], ["util.RetrievalEvaluator.recall", "util.RetrievalEvaluator.precision", "util.maybe_divide"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.recall", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.precision", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.maybe_divide"], ["", "def", "metrics", "(", "self", ")", ":", "\n", "    ", "recall", "=", "self", ".", "recall", "(", ")", "\n", "precision", "=", "self", ".", "precision", "(", ")", "\n", "f1", "=", "maybe_divide", "(", "2", "*", "recall", "*", "precision", ",", "precision", "+", "recall", ")", "\n", "return", "recall", ",", "precision", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.EmbeddingDictionary.__init__": [[166, 175], ["util.EmbeddingDictionary.load_embedding_dict"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.EmbeddingDictionary.load_embedding_dict"], ["  ", "def", "__init__", "(", "self", ",", "info", ",", "normalize", "=", "True", ",", "maybe_cache", "=", "None", ")", ":", "\n", "    ", "self", ".", "_size", "=", "info", "[", "\"size\"", "]", "\n", "self", ".", "_normalize", "=", "normalize", "\n", "self", ".", "_path", "=", "info", "[", "\"path\"", "]", "\n", "if", "maybe_cache", "is", "not", "None", "and", "maybe_cache", ".", "_path", "==", "self", ".", "_path", ":", "\n", "      ", "assert", "self", ".", "_size", "==", "maybe_cache", ".", "_size", "\n", "self", ".", "_embeddings", "=", "maybe_cache", ".", "_embeddings", "\n", "", "else", ":", "\n", "      ", "self", ".", "_embeddings", "=", "self", ".", "load_embedding_dict", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.EmbeddingDictionary.size": [[176, 179], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.EmbeddingDictionary.load_embedding_dict": [[180, 197], ["print", "numpy.zeros", "collections.defaultdict", "len", "print", "open", "enumerate", "f.readlines", "line.find", "numpy.fromstring", "len", "len"], "methods", ["None"], ["", "def", "load_embedding_dict", "(", "self", ",", "path", ")", ":", "\n", "    ", "print", "(", "\"Loading word embeddings from {}...\"", ".", "format", "(", "path", ")", ")", "\n", "default_embedding", "=", "np", ".", "zeros", "(", "self", ".", "size", ")", "\n", "embedding_dict", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "default_embedding", ")", "\n", "if", "len", "(", "path", ")", ">", "0", ":", "\n", "      ", "vocab_size", "=", "None", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "          ", "word_end", "=", "line", ".", "find", "(", "\" \"", ")", "\n", "word", "=", "line", "[", ":", "word_end", "]", "\n", "embedding", "=", "np", ".", "fromstring", "(", "line", "[", "word_end", "+", "1", ":", "]", ",", "np", ".", "float32", ",", "sep", "=", "\" \"", ")", "\n", "assert", "len", "(", "embedding", ")", "==", "self", ".", "size", "\n", "embedding_dict", "[", "word", "]", "=", "embedding", "\n", "", "", "if", "vocab_size", "is", "not", "None", ":", "\n", "        ", "assert", "vocab_size", "==", "len", "(", "embedding_dict", ")", "\n", "", "print", "(", "\"Done loading word embeddings.\"", ")", "\n", "", "return", "embedding_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.EmbeddingDictionary.__getitem__": [[198, 203], ["util.EmbeddingDictionary.normalize"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.EmbeddingDictionary.normalize"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "    ", "embedding", "=", "self", ".", "_embeddings", "[", "key", "]", "\n", "if", "self", ".", "_normalize", ":", "\n", "      ", "embedding", "=", "self", ".", "normalize", "(", "embedding", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.EmbeddingDictionary.normalize": [[204, 210], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "v", ")", ":", "\n", "    ", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "v", ")", "\n", "if", "norm", ">", "0", ":", "\n", "      ", "return", "v", "/", "norm", "\n", "", "else", ":", "\n", "      ", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.CustomLSTMCell.__init__": [[212, 220], ["tensorflow.nn.dropout", "util.CustomLSTMCell._block_orthonormal_initializer", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.rnn.LSTMStateTuple", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.CustomLSTMCell._block_orthonormal_initializer"], ["  ", "def", "__init__", "(", "self", ",", "num_units", ",", "batch_size", ",", "dropout", ")", ":", "\n", "    ", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_dropout", "=", "dropout", "\n", "self", ".", "_dropout_mask", "=", "tf", ".", "nn", ".", "dropout", "(", "tf", ".", "ones", "(", "[", "batch_size", ",", "self", ".", "output_size", "]", ")", ",", "dropout", ")", "\n", "self", ".", "_initializer", "=", "self", ".", "_block_orthonormal_initializer", "(", "[", "self", ".", "output_size", "]", "*", "3", ")", "\n", "initial_cell_state", "=", "tf", ".", "get_variable", "(", "\"lstm_initial_cell_state\"", ",", "[", "1", ",", "self", ".", "output_size", "]", ")", "\n", "initial_hidden_state", "=", "tf", ".", "get_variable", "(", "\"lstm_initial_hidden_state\"", ",", "[", "1", ",", "self", ".", "output_size", "]", ")", "\n", "self", ".", "_initial_state", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", "(", "initial_cell_state", ",", "initial_hidden_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.CustomLSTMCell.state_size": [[221, 224], ["tensorflow.contrib.rnn.LSTMStateTuple"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", "(", "self", ".", "output_size", ",", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.CustomLSTMCell.output_size": [[225, 228], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.CustomLSTMCell.initial_state": [[229, 232], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "initial_state", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_initial_state", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.CustomLSTMCell.__call__": [[233, 245], ["tensorflow.variable_scope", "util.projection", "tensorflow.split", "tensorflow.sigmoid", "tensorflow.contrib.rnn.LSTMStateTuple", "tensorflow.concat", "tensorflow.tanh", "tensorflow.sigmoid", "tensorflow.tanh", "type"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.projection"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"Long short-term memory cell (LSTM).\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "# \"CustomLSTMCell\"", "\n", "      ", "c", ",", "h", "=", "state", "\n", "h", "*=", "self", ".", "_dropout_mask", "\n", "concat", "=", "projection", "(", "tf", ".", "concat", "(", "[", "inputs", ",", "h", "]", ",", "1", ")", ",", "3", "*", "self", ".", "output_size", ",", "initializer", "=", "self", ".", "_initializer", ")", "\n", "i", ",", "j", ",", "o", "=", "tf", ".", "split", "(", "concat", ",", "num_or_size_splits", "=", "3", ",", "axis", "=", "1", ")", "\n", "i", "=", "tf", ".", "sigmoid", "(", "i", ")", "\n", "new_c", "=", "(", "1", "-", "i", ")", "*", "c", "+", "i", "*", "tf", ".", "tanh", "(", "j", ")", "\n", "new_h", "=", "tf", ".", "tanh", "(", "new_c", ")", "*", "tf", ".", "sigmoid", "(", "o", ")", "\n", "new_state", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", "(", "new_c", ",", "new_h", ")", "\n", "return", "new_h", ",", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.CustomLSTMCell._orthonormal_initializer": [[246, 258], ["numpy.random.randn().astype", "numpy.random.randn().astype", "numpy.linalg.qr", "numpy.linalg.qr", "min", "numpy.sign", "numpy.sign", "numpy.dot", "numpy.random.randn", "numpy.random.randn", "numpy.diag", "numpy.diag"], "methods", ["None"], ["", "", "def", "_orthonormal_initializer", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "partition_info", "=", "None", ")", ":", "\n", "      ", "M1", "=", "np", ".", "random", ".", "randn", "(", "shape", "[", "0", "]", ",", "shape", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "M2", "=", "np", ".", "random", ".", "randn", "(", "shape", "[", "1", "]", ",", "shape", "[", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Q1", ",", "R1", "=", "np", ".", "linalg", ".", "qr", "(", "M1", ")", "\n", "Q2", ",", "R2", "=", "np", ".", "linalg", ".", "qr", "(", "M2", ")", "\n", "Q1", "=", "Q1", "*", "np", ".", "sign", "(", "np", ".", "diag", "(", "R1", ")", ")", "\n", "Q2", "=", "Q2", "*", "np", ".", "sign", "(", "np", ".", "diag", "(", "R2", ")", ")", "\n", "n_min", "=", "min", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", "\n", "params", "=", "np", ".", "dot", "(", "Q1", "[", ":", ",", ":", "n_min", "]", ",", "Q2", "[", ":", "n_min", ",", ":", "]", ")", "*", "scale", "\n", "return", "params", "\n", "", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.CustomLSTMCell._block_orthonormal_initializer": [[259, 267], ["util.CustomLSTMCell._orthonormal_initializer", "numpy.concatenate", "len", "sum", "util.CustomLSTMCell."], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.CustomLSTMCell._orthonormal_initializer"], ["", "def", "_block_orthonormal_initializer", "(", "self", ",", "output_sizes", ")", ":", "\n", "    ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ",", "partition_info", "=", "None", ")", ":", "\n", "      ", "assert", "len", "(", "shape", ")", "==", "2", "\n", "assert", "sum", "(", "output_sizes", ")", "==", "shape", "[", "1", "]", "\n", "initializer", "=", "self", ".", "_orthonormal_initializer", "(", ")", "\n", "params", "=", "np", ".", "concatenate", "(", "[", "initializer", "(", "[", "shape", "[", "0", "]", ",", "o", "]", ",", "dtype", ",", "partition_info", ")", "for", "o", "in", "output_sizes", "]", ",", "1", ")", "\n", "return", "params", "\n", "", "return", "_initializer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.initialize_from_env": [[19, 33], ["print", "util.mkdirs", "print", "util.set_gpus", "util.set_gpus", "pyhocon.ConfigFactory.parse_file", "os.path.join", "pyhocon.HOCONConverter.convert", "int"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.mkdirs", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.set_gpus", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.set_gpus"], ["def", "initialize_from_env", "(", ")", ":", "\n", "  ", "if", "\"GPU\"", "in", "os", ".", "environ", ":", "\n", "    ", "set_gpus", "(", "int", "(", "os", ".", "environ", "[", "\"GPU\"", "]", ")", ")", "\n", "", "else", ":", "\n", "    ", "set_gpus", "(", ")", "\n", "\n", "", "name", "=", "sys", ".", "argv", "[", "1", "]", "\n", "print", "(", "\"Running experiment: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "config", "=", "pyhocon", ".", "ConfigFactory", ".", "parse_file", "(", "\"experiments.conf\"", ")", "[", "name", "]", "\n", "config", "[", "\"log_dir\"", "]", "=", "mkdirs", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_root\"", "]", ",", "name", ")", ")", "\n", "\n", "print", "(", "pyhocon", ".", "HOCONConverter", ".", "convert", "(", "config", ",", "\"hocon\"", ")", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.copy_checkpoint": [[34, 37], ["shutil.copyfile"], "function", ["None"], ["", "def", "copy_checkpoint", "(", "source", ",", "target", ")", ":", "\n", "  ", "for", "ext", "in", "(", "\".index\"", ",", "\".data-00000-of-00001\"", ")", ":", "\n", "    ", "shutil", ".", "copyfile", "(", "source", "+", "ext", ",", "target", "+", "ext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.make_summary": [[38, 40], ["tensorflow.Summary", "tensorflow.Summary.Value", "value_dict.items"], "function", ["None"], ["", "", "def", "make_summary", "(", "value_dict", ")", ":", "\n", "  ", "return", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "k", ",", "simple_value", "=", "v", ")", "for", "k", ",", "v", "in", "value_dict", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.flatten": [[41, 43], ["None"], "function", ["None"], ["", "def", "flatten", "(", "l", ")", ":", "\n", "  ", "return", "[", "item", "for", "sublist", "in", "l", "for", "item", "in", "sublist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.set_gpus": [[44, 47], ["print", "str"], "function", ["None"], ["", "def", "set_gpus", "(", "*", "gpus", ")", ":", "\n", "  ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "\",\"", ".", "join", "(", "str", "(", "g", ")", "for", "g", "in", "gpus", ")", "\n", "print", "(", "\"Setting CUDA_VISIBLE_DEVICES to: {}\"", ".", "format", "(", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.mkdirs": [[48, 55], ["os.makedirs"], "function", ["None"], ["", "def", "mkdirs", "(", "path", ")", ":", "\n", "  ", "try", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exception", ":", "\n", "    ", "if", "exception", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "      ", "raise", "\n", "", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.load_char_dict": [[56, 63], ["collections.defaultdict", "collections.defaultdict.update", "codecs.open", "vocab.extend", "l.strip", "enumerate", "f.readlines"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.update"], ["", "def", "load_char_dict", "(", "char_vocab_path", ")", ":", "\n", "  ", "vocab", "=", "[", "u\"<unk>\"", "]", "\n", "with", "codecs", ".", "open", "(", "char_vocab_path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "    ", "vocab", ".", "extend", "(", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", ")", "\n", "", "char_dict", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "char_dict", ".", "update", "(", "{", "c", ":", "i", "for", "i", ",", "c", "in", "enumerate", "(", "vocab", ")", "}", ")", "\n", "return", "char_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.maybe_divide": [[64, 66], ["float"], "function", ["None"], ["", "def", "maybe_divide", "(", "x", ",", "y", ")", ":", "\n", "  ", "return", "0", "if", "y", "==", "0", "else", "x", "/", "float", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.projection": [[67, 69], ["util.ffnn"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.ffnn"], ["", "def", "projection", "(", "inputs", ",", "output_size", ",", "initializer", "=", "None", ")", ":", "\n", "  ", "return", "ffnn", "(", "inputs", ",", "0", ",", "-", "1", ",", "output_size", ",", "dropout", "=", "None", ",", "output_weights_initializer", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.highway": [[70, 80], ["range", "tensorflow.variable_scope", "tensorflow.split", "tensorflow.sigmoid", "tensorflow.nn.relu", "util.projection", "tensorflow.nn.dropout", "util.shape"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.projection", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "highway", "(", "inputs", ",", "num_layers", ",", "dropout", ")", ":", "\n", "  ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"highway_{}\"", ".", "format", "(", "i", ")", ")", ":", "\n", "      ", "j", ",", "f", "=", "tf", ".", "split", "(", "projection", "(", "inputs", ",", "2", "*", "shape", "(", "inputs", ",", "-", "1", ")", ")", ",", "2", ",", "-", "1", ")", "\n", "f", "=", "tf", ".", "sigmoid", "(", "f", ")", "\n", "j", "=", "tf", ".", "nn", ".", "relu", "(", "j", ")", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "j", "=", "tf", ".", "nn", ".", "dropout", "(", "j", ",", "dropout", ")", "\n", "", "inputs", "=", "f", "*", "j", "+", "(", "1", "-", "f", ")", "*", "inputs", "\n", "", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape": [[81, 83], ["tensorflow.shape", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "shape", "(", "x", ",", "dim", ")", ":", "\n", "  ", "return", "x", ".", "get_shape", "(", ")", "[", "dim", "]", ".", "value", "or", "tf", ".", "shape", "(", "x", ")", "[", "dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.ffnn": [[84, 112], ["range", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.xw_plus_b", "len", "ValueError", "len", "util.shape", "util.shape", "util.shape", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.relu", "len", "tensorflow.reshape", "inputs.get_shape", "inputs.get_shape", "tensorflow.nn.xw_plus_b", "tensorflow.nn.dropout", "util.shape", "inputs.get_shape", "len", "util.shape", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "ffnn", "(", "inputs", ",", "num_hidden_layers", ",", "hidden_size", ",", "output_size", ",", "dropout", ",", "output_weights_initializer", "=", "None", ")", ":", "\n", "  ", "if", "len", "(", "inputs", ".", "get_shape", "(", ")", ")", ">", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\"FFNN with rank {} not supported\"", ".", "format", "(", "len", "(", "inputs", ".", "get_shape", "(", ")", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "inputs", ".", "get_shape", "(", ")", ")", "==", "3", ":", "\n", "    ", "batch_size", "=", "shape", "(", "inputs", ",", "0", ")", "\n", "seqlen", "=", "shape", "(", "inputs", ",", "1", ")", "\n", "emb_size", "=", "shape", "(", "inputs", ",", "2", ")", "\n", "current_inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "batch_size", "*", "seqlen", ",", "emb_size", "]", ")", "\n", "", "else", ":", "\n", "    ", "current_inputs", "=", "inputs", "\n", "\n", "", "for", "i", "in", "range", "(", "num_hidden_layers", ")", ":", "\n", "    ", "hidden_weights", "=", "tf", ".", "get_variable", "(", "\"hidden_weights_{}\"", ".", "format", "(", "i", ")", ",", "[", "shape", "(", "current_inputs", ",", "1", ")", ",", "hidden_size", "]", ")", "\n", "hidden_bias", "=", "tf", ".", "get_variable", "(", "\"hidden_bias_{}\"", ".", "format", "(", "i", ")", ",", "[", "hidden_size", "]", ")", "\n", "current_outputs", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "current_inputs", ",", "hidden_weights", ",", "hidden_bias", ")", ")", "\n", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "      ", "current_outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "current_outputs", ",", "dropout", ")", "\n", "", "current_inputs", "=", "current_outputs", "\n", "\n", "", "output_weights", "=", "tf", ".", "get_variable", "(", "\"output_weights\"", ",", "[", "shape", "(", "current_inputs", ",", "1", ")", ",", "output_size", "]", ",", "initializer", "=", "output_weights_initializer", ")", "\n", "output_bias", "=", "tf", ".", "get_variable", "(", "\"output_bias\"", ",", "[", "output_size", "]", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "current_inputs", ",", "output_weights", ",", "output_bias", ")", "\n", "\n", "if", "len", "(", "inputs", ".", "get_shape", "(", ")", ")", "==", "3", ":", "\n", "    ", "outputs", "=", "tf", ".", "reshape", "(", "outputs", ",", "[", "batch_size", ",", "seqlen", ",", "output_size", "]", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.cnn": [[113, 127], ["util.shape", "util.shape", "util.shape", "enumerate", "tensorflow.concat", "tensorflow.nn.conv1d", "tensorflow.nn.relu", "tensorflow.reduce_max", "outputs.append", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.bias_add"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "cnn", "(", "inputs", ",", "filter_sizes", ",", "num_filters", ")", ":", "\n", "  ", "num_words", "=", "shape", "(", "inputs", ",", "0", ")", "\n", "num_chars", "=", "shape", "(", "inputs", ",", "1", ")", "\n", "input_size", "=", "shape", "(", "inputs", ",", "2", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "filter_size", "in", "enumerate", "(", "filter_sizes", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"conv_{}\"", ".", "format", "(", "i", ")", ")", ":", "\n", "      ", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "filter_size", ",", "input_size", ",", "num_filters", "]", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "num_filters", "]", ")", "\n", "", "conv", "=", "tf", ".", "nn", ".", "conv1d", "(", "inputs", ",", "w", ",", "stride", "=", "1", ",", "padding", "=", "\"VALID\"", ")", "# [num_words, num_chars - filter_size, num_filters]", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b", ")", ")", "# [num_words, num_chars - filter_size, num_filters]", "\n", "pooled", "=", "tf", ".", "reduce_max", "(", "h", ",", "1", ")", "# [num_words, num_filters]", "\n", "outputs", ".", "append", "(", "pooled", ")", "\n", "", "return", "tf", ".", "concat", "(", "outputs", ",", "1", ")", "# [num_words, num_filters * len(filter_sizes)]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.batch_gather": [[128, 141], ["util.shape", "util.shape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.gather", "len", "util.shape", "len", "tensorflow.squeeze", "emb.get_shape", "tensorflow.range", "emb.get_shape"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.shape"], ["", "def", "batch_gather", "(", "emb", ",", "indices", ")", ":", "\n", "  ", "batch_size", "=", "shape", "(", "emb", ",", "0", ")", "\n", "seqlen", "=", "shape", "(", "emb", ",", "1", ")", "\n", "if", "len", "(", "emb", ".", "get_shape", "(", ")", ")", ">", "2", ":", "\n", "    ", "emb_size", "=", "shape", "(", "emb", ",", "2", ")", "\n", "", "else", ":", "\n", "    ", "emb_size", "=", "1", "\n", "", "flattened_emb", "=", "tf", ".", "reshape", "(", "emb", ",", "[", "batch_size", "*", "seqlen", ",", "emb_size", "]", ")", "# [batch_size * seqlen, emb]", "\n", "offset", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "batch_size", ")", "*", "seqlen", ",", "1", ")", "# [batch_size, 1]", "\n", "gathered", "=", "tf", ".", "gather", "(", "flattened_emb", ",", "indices", "+", "offset", ")", "# [batch_size, num_indices, emb]", "\n", "if", "len", "(", "emb", ".", "get_shape", "(", ")", ")", "==", "2", ":", "\n", "    ", "gathered", "=", "tf", ".", "squeeze", "(", "gathered", ",", "2", ")", "# [batch_size, num_indices]", "\n", "", "return", "gathered", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.__init__": [[17, 29], ["collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "doc_key", "=", "None", "\n", "self", ".", "text", "=", "[", "]", "\n", "self", ".", "text_speakers", "=", "[", "]", "\n", "self", ".", "speakers", "=", "[", "]", "\n", "self", ".", "sentences", "=", "[", "]", "\n", "self", ".", "constituents", "=", "{", "}", "\n", "self", ".", "const_stack", "=", "[", "]", "\n", "self", ".", "ner", "=", "{", "}", "\n", "self", ".", "ner_stack", "=", "[", "]", "\n", "self", ".", "clusters", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "self", ".", "coref_stacks", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.assert_empty": [[30, 42], ["len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "assert_empty", "(", "self", ")", ":", "\n", "    ", "assert", "self", ".", "doc_key", "is", "None", "\n", "assert", "len", "(", "self", ".", "text", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "text_speakers", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "speakers", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "sentences", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "constituents", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "const_stack", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "ner", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "ner_stack", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "coref_stacks", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "clusters", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.assert_finalizable": [[43, 53], ["all", "len", "len", "len", "len", "len", "len", "len", "len", "minimize.DocumentState.coref_stacks.values"], "methods", ["None"], ["", "def", "assert_finalizable", "(", "self", ")", ":", "\n", "    ", "assert", "self", ".", "doc_key", "is", "not", "None", "\n", "assert", "len", "(", "self", ".", "text", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "text_speakers", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "speakers", ")", ">", "0", "\n", "assert", "len", "(", "self", ".", "sentences", ")", ">", "0", "\n", "assert", "len", "(", "self", ".", "constituents", ")", ">", "0", "\n", "assert", "len", "(", "self", ".", "const_stack", ")", "==", "0", "\n", "assert", "len", "(", "self", ".", "ner_stack", ")", "==", "0", "\n", "assert", "all", "(", "len", "(", "s", ")", "==", "0", "for", "s", "in", "self", ".", "coref_stacks", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.span_dict_to_list": [[54, 56], ["span_dict.items"], "methods", ["None"], ["", "def", "span_dict_to_list", "(", "self", ",", "span_dict", ")", ":", "\n", "    ", "return", "[", "(", "s", ",", "e", ",", "l", ")", "for", "(", "s", ",", "e", ")", ",", "l", "in", "span_dict", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.finalize": [[57, 84], ["minimize.DocumentState.clusters.values", "util.flatten", "list", "len", "len", "minimize.DocumentState.span_dict_to_list", "minimize.DocumentState.span_dict_to_list", "print", "existing.update", "merged_clusters.append", "set", "set"], "methods", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.flatten", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.span_dict_to_list", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.span_dict_to_list", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.update"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "    ", "merged_clusters", "=", "[", "]", "\n", "for", "c1", "in", "self", ".", "clusters", ".", "values", "(", ")", ":", "\n", "      ", "existing", "=", "None", "\n", "for", "m", "in", "c1", ":", "\n", "        ", "for", "c2", "in", "merged_clusters", ":", "\n", "          ", "if", "m", "in", "c2", ":", "\n", "            ", "existing", "=", "c2", "\n", "break", "\n", "", "", "if", "existing", "is", "not", "None", ":", "\n", "          ", "break", "\n", "", "", "if", "existing", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Merging clusters (shouldn't happen very often.)\"", ")", "\n", "existing", ".", "update", "(", "c1", ")", "\n", "", "else", ":", "\n", "        ", "merged_clusters", ".", "append", "(", "set", "(", "c1", ")", ")", "\n", "", "", "merged_clusters", "=", "[", "list", "(", "c", ")", "for", "c", "in", "merged_clusters", "]", "\n", "all_mentions", "=", "util", ".", "flatten", "(", "merged_clusters", ")", "\n", "assert", "len", "(", "all_mentions", ")", "==", "len", "(", "set", "(", "all_mentions", ")", ")", "\n", "\n", "return", "{", "\n", "\"doc_key\"", ":", "self", ".", "doc_key", ",", "\n", "\"sentences\"", ":", "self", ".", "sentences", ",", "\n", "\"speakers\"", ":", "self", ".", "speakers", ",", "\n", "\"constituents\"", ":", "self", ".", "span_dict_to_list", "(", "self", ".", "constituents", ")", ",", "\n", "\"ner\"", ":", "self", ".", "span_dict_to_list", "(", "self", ".", "ner", ")", ",", "\n", "\"clusters\"", ":", "merged_clusters", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.normalize_word": [[86, 93], ["word.find"], "function", ["None"], ["", "", "def", "normalize_word", "(", "word", ",", "language", ")", ":", "\n", "  ", "if", "language", "==", "\"arabic\"", ":", "\n", "    ", "word", "=", "word", "[", ":", "word", ".", "find", "(", "\"#\"", ")", "]", "\n", "", "if", "word", "==", "\"/.\"", "or", "word", "==", "\"/?\"", ":", "\n", "    ", "return", "word", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "    ", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.handle_bit": [[94, 124], ["bit.find", "open_parens.find", "open_parens.find", "stack.append", "stack.pop"], "function", ["None"], ["", "", "def", "handle_bit", "(", "word_index", ",", "bit", ",", "stack", ",", "spans", ")", ":", "\n", "  ", "asterisk_idx", "=", "bit", ".", "find", "(", "\"*\"", ")", "\n", "if", "asterisk_idx", ">=", "0", ":", "\n", "    ", "open_parens", "=", "bit", "[", ":", "asterisk_idx", "]", "\n", "close_parens", "=", "bit", "[", "asterisk_idx", "+", "1", ":", "]", "\n", "", "else", ":", "\n", "    ", "open_parens", "=", "bit", "[", ":", "-", "1", "]", "\n", "close_parens", "=", "bit", "[", "-", "1", "]", "\n", "\n", "", "current_idx", "=", "open_parens", ".", "find", "(", "\"(\"", ")", "\n", "while", "current_idx", ">=", "0", ":", "\n", "    ", "next_idx", "=", "open_parens", ".", "find", "(", "\"(\"", ",", "current_idx", "+", "1", ")", "\n", "if", "next_idx", ">=", "0", ":", "\n", "      ", "label", "=", "open_parens", "[", "current_idx", "+", "1", ":", "next_idx", "]", "\n", "", "else", ":", "\n", "      ", "label", "=", "open_parens", "[", "current_idx", "+", "1", ":", "]", "\n", "", "stack", ".", "append", "(", "(", "word_index", ",", "label", ")", ")", "\n", "current_idx", "=", "next_idx", "\n", "\n", "", "for", "c", "in", "close_parens", ":", "\n", "    ", "assert", "c", "==", "\")\"", "\n", "open_index", ",", "label", "=", "stack", ".", "pop", "(", ")", "\n", "current_span", "=", "(", "open_index", ",", "word_index", ")", "\n", "\"\"\"\n    if current_span in spans:\n      spans[current_span] += \"_\" + label\n    else:\n      spans[current_span] = label\n    \"\"\"", "\n", "spans", "[", "current_span", "]", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.handle_line": [[125, 179], ["re.match", "document_state.assert_empty", "conll.get_doc_key", "line.startswith", "re.match.group", "re.match.group", "document_state.assert_finalizable", "document_state.finalize", "len", "sum", "labels[].update", "labels[].update", "line.split", "conll.get_doc_key", "minimize.normalize_word", "document_state.text.append", "document_state.text_speakers.append", "minimize.handle_bit", "minimize.handle_bit", "len", "max", "document_state.sentences.append", "document_state.speakers.append", "len", "len", "sum", "coref.split", "len", "len", "tuple", "tuple", "len", "int", "document_state.coref_stacks[].pop", "document_state.clusters[].append", "int", "document_state.clusters[].append", "int", "document_state.coref_stacks[].append"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.assert_empty", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.get_doc_key", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.assert_finalizable", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.DocumentState.finalize", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.update", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.util.RetrievalEvaluator.update", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.conll.get_doc_key", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.normalize_word", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.handle_bit", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.handle_bit"], ["", "", "def", "handle_line", "(", "line", ",", "document_state", ",", "language", ",", "labels", ",", "stats", ")", ":", "\n", "  ", "begin_document_match", "=", "re", ".", "match", "(", "conll", ".", "BEGIN_DOCUMENT_REGEX", ",", "line", ")", "\n", "if", "begin_document_match", ":", "\n", "    ", "document_state", ".", "assert_empty", "(", ")", "\n", "document_state", ".", "doc_key", "=", "conll", ".", "get_doc_key", "(", "begin_document_match", ".", "group", "(", "1", ")", ",", "begin_document_match", ".", "group", "(", "2", ")", ")", "\n", "return", "None", "\n", "", "elif", "line", ".", "startswith", "(", "\"#end document\"", ")", ":", "\n", "    ", "document_state", ".", "assert_finalizable", "(", ")", "\n", "finalized_state", "=", "document_state", ".", "finalize", "(", ")", "\n", "stats", "[", "\"num_clusters\"", "]", "+=", "len", "(", "finalized_state", "[", "\"clusters\"", "]", ")", "\n", "stats", "[", "\"num_mentions\"", "]", "+=", "sum", "(", "len", "(", "c", ")", "for", "c", "in", "finalized_state", "[", "\"clusters\"", "]", ")", "\n", "labels", "[", "\"{}_const_labels\"", ".", "format", "(", "language", ")", "]", ".", "update", "(", "l", "for", "_", ",", "_", ",", "l", "in", "finalized_state", "[", "\"constituents\"", "]", ")", "\n", "labels", "[", "\"ner\"", "]", ".", "update", "(", "l", "for", "_", ",", "_", ",", "l", "in", "finalized_state", "[", "\"ner\"", "]", ")", "\n", "return", "finalized_state", "\n", "", "else", ":", "\n", "    ", "row", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "row", ")", "==", "0", ":", "\n", "      ", "stats", "[", "\"max_sent_len_{}\"", ".", "format", "(", "language", ")", "]", "=", "max", "(", "len", "(", "document_state", ".", "text", ")", ",", "stats", "[", "\"max_sent_len_{}\"", ".", "format", "(", "language", ")", "]", ")", "\n", "stats", "[", "\"num_sents_{}\"", ".", "format", "(", "language", ")", "]", "+=", "1", "\n", "document_state", ".", "sentences", ".", "append", "(", "tuple", "(", "document_state", ".", "text", ")", ")", "\n", "del", "document_state", ".", "text", "[", ":", "]", "\n", "document_state", ".", "speakers", ".", "append", "(", "tuple", "(", "document_state", ".", "text_speakers", ")", ")", "\n", "del", "document_state", ".", "text_speakers", "[", ":", "]", "\n", "return", "None", "\n", "", "assert", "len", "(", "row", ")", ">=", "12", "\n", "\n", "doc_key", "=", "conll", ".", "get_doc_key", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", "\n", "word", "=", "normalize_word", "(", "row", "[", "3", "]", ",", "language", ")", "\n", "parse", "=", "row", "[", "5", "]", "\n", "speaker", "=", "row", "[", "9", "]", "\n", "ner", "=", "row", "[", "10", "]", "\n", "coref", "=", "row", "[", "-", "1", "]", "\n", "\n", "word_index", "=", "len", "(", "document_state", ".", "text", ")", "+", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "document_state", ".", "sentences", ")", "\n", "document_state", ".", "text", ".", "append", "(", "word", ")", "\n", "document_state", ".", "text_speakers", ".", "append", "(", "speaker", ")", "\n", "\n", "handle_bit", "(", "word_index", ",", "parse", ",", "document_state", ".", "const_stack", ",", "document_state", ".", "constituents", ")", "\n", "handle_bit", "(", "word_index", ",", "ner", ",", "document_state", ".", "ner_stack", ",", "document_state", ".", "ner", ")", "\n", "\n", "if", "coref", "!=", "\"-\"", ":", "\n", "      ", "for", "segment", "in", "coref", ".", "split", "(", "\"|\"", ")", ":", "\n", "        ", "if", "segment", "[", "0", "]", "==", "\"(\"", ":", "\n", "          ", "if", "segment", "[", "-", "1", "]", "==", "\")\"", ":", "\n", "            ", "cluster_id", "=", "int", "(", "segment", "[", "1", ":", "-", "1", "]", ")", "\n", "document_state", ".", "clusters", "[", "cluster_id", "]", ".", "append", "(", "(", "word_index", ",", "word_index", ")", ")", "\n", "", "else", ":", "\n", "            ", "cluster_id", "=", "int", "(", "segment", "[", "1", ":", "]", ")", "\n", "document_state", ".", "coref_stacks", "[", "cluster_id", "]", ".", "append", "(", "word_index", ")", "\n", "", "", "else", ":", "\n", "          ", "cluster_id", "=", "int", "(", "segment", "[", ":", "-", "1", "]", ")", "\n", "start", "=", "document_state", ".", "coref_stacks", "[", "cluster_id", "]", ".", "pop", "(", ")", "\n", "document_state", ".", "clusters", "[", "cluster_id", "]", ".", "append", "(", "(", "start", ",", "word_index", ")", ")", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.minimize_partition": [[180, 196], ["print", "print", "open", "open", "minimize.DocumentState", "input_file.readlines", "minimize.handle_line", "output_file.write", "output_file.write", "minimize.DocumentState", "json.dumps"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.handle_line"], ["", "", "def", "minimize_partition", "(", "name", ",", "language", ",", "extension", ",", "labels", ",", "stats", ")", ":", "\n", "  ", "input_path", "=", "\"{}.{}.{}\"", ".", "format", "(", "name", ",", "language", ",", "extension", ")", "\n", "output_path", "=", "\"{}.{}.jsonlines\"", ".", "format", "(", "name", ",", "language", ")", "\n", "count", "=", "0", "\n", "print", "(", "\"Minimizing {}\"", ".", "format", "(", "input_path", ")", ")", "\n", "with", "open", "(", "input_path", ",", "\"r\"", ")", "as", "input_file", ":", "\n", "    ", "with", "open", "(", "output_path", ",", "\"w\"", ")", "as", "output_file", ":", "\n", "      ", "document_state", "=", "DocumentState", "(", ")", "\n", "for", "line", "in", "input_file", ".", "readlines", "(", ")", ":", "\n", "        ", "document", "=", "handle_line", "(", "line", ",", "document_state", ",", "language", ",", "labels", ",", "stats", ")", "\n", "if", "document", "is", "not", "None", ":", "\n", "          ", "output_file", ".", "write", "(", "json", ".", "dumps", "(", "document", ")", ")", "\n", "output_file", ".", "write", "(", "\"\\n\"", ")", "\n", "count", "+=", "1", "\n", "document_state", "=", "DocumentState", "(", ")", "\n", "", "", "", "", "print", "(", "\"Wrote {} documents to {}\"", ".", "format", "(", "count", ",", "output_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.minimize_language": [[197, 201], ["minimize.minimize_partition", "minimize.minimize_partition", "minimize.minimize_partition"], "function", ["home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.minimize_partition", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.minimize_partition", "home.repos.pwc.inspect_result.kentonl_e2e-coref.None.minimize.minimize_partition"], ["", "def", "minimize_language", "(", "language", ",", "labels", ",", "stats", ")", ":", "\n", "  ", "minimize_partition", "(", "\"dev\"", ",", "language", ",", "\"v4_gold_conll\"", ",", "labels", ",", "stats", ")", "\n", "minimize_partition", "(", "\"train\"", ",", "language", ",", "\"v4_gold_conll\"", ",", "labels", ",", "stats", ")", "\n", "minimize_partition", "(", "\"test\"", ",", "language", ",", "\"v4_gold_conll\"", ",", "labels", ",", "stats", ")", "\n", "\n"]]}