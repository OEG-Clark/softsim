{"home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.__init__": [[22, 67], ["DoomGame", "env_doom.Environment.get_task_parameter", "os.path.dirname", "env_doom.Environment.game.load_config", "env_doom.Environment.game.set_screen_resolution", "env_doom.Environment.game.set_screen_format", "env_doom.Environment.game.set_window_visible", "env_doom.Environment.game.init", "os.path.abspath", "os.path.join", "env_doom.Environment.game.add_game_args", "env_doom.Environment.game.set_screen_resolution", "env_doom.Environment.game.set_window_visible", "env_doom.Environment.game.set_mode", "inspect.getfile", "inspect.currentframe"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.get_task_parameter"], ["    ", "def", "__init__", "(", "self", ",", "doom_lvl", ",", "data_format", "=", "\"NCHW\"", ",", "window_visible", "=", "False", ",", "human", "=", "False", ")", ":", "\n", "        ", "\"\"\"Creates doom environment.\n\n        Args:\n          doom_lvl (str): Name of the doom task.\n          data_format (str): NCHW or NHWC\n          window_visible (bool): Shows the screen of the game if True.\n          human (bool): test the doom task if True.\n        \"\"\"", "\n", "\n", "self", ".", "action_repetition", "=", "4", "\n", "self", ".", "screen_res_x", "=", "84", "\n", "self", ".", "screen_res_y", "=", "84", "\n", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "dtype", "=", "np", ".", "float32", "\n", "self", ".", "window_visible", "=", "window_visible", "\n", "self", ".", "human", "=", "human", "\n", "\n", "self", ".", "game", "=", "DoomGame", "(", ")", "\n", "self", ".", "sleep_time", "=", "0.04", "\n", "self", ".", "time", "=", "0", "\n", "\n", "self", ".", "lvl_id", "=", "0", "# for multitexture environment", "\n", "\n", "self", ".", "ammo", "=", "None", "\n", "self", ".", "hp", "=", "None", "\n", "self", ".", "frags", "=", "None", "\n", "\n", "self", ".", "task_type", ",", "self", ".", "cfg_path", ",", "self", ".", "input_vector_size", ",", "self", ".", "actions", ",", "self", ".", "number_of_actions", ",", "self", ".", "manymaps", "=", "self", ".", "get_task_parameter", "(", "doom_lvl", ")", "\n", "\n", "doom_lvl_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "inspect", ".", "getfile", "(", "inspect", ".", "currentframe", "(", ")", ")", ")", ")", "\n", "\n", "self", ".", "game", ".", "load_config", "(", "p_join", "(", "doom_lvl_path", ",", "self", ".", "cfg_path", ")", ")", "\n", "self", ".", "game", ".", "set_screen_resolution", "(", "ScreenResolution", ".", "RES_160X120", ")", "\n", "self", ".", "game", ".", "set_screen_format", "(", "ScreenFormat", ".", "GRAY8", ")", "\n", "self", ".", "game", ".", "set_window_visible", "(", "self", ".", "window_visible", ")", "\n", "\n", "if", "human", ":", "\n", "            ", "self", ".", "game", ".", "add_game_args", "(", "\"+freelook 1\"", ")", "\n", "self", ".", "game", ".", "set_screen_resolution", "(", "ScreenResolution", ".", "RES_640X480", ")", "\n", "self", ".", "game", ".", "set_window_visible", "(", "True", ")", "\n", "self", ".", "game", ".", "set_mode", "(", "Mode", ".", "SPECTATOR", ")", "\n", "\n", "", "self", ".", "game", ".", "init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.__del__": [[68, 70], ["env_doom.Environment.game.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "game", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.get_state": [[71, 96], ["env_doom.Environment.game.get_state", "PIL.Image.fromarray", "img.resize.resize.resize", "ValueError", "numpy.reshape", "ValueError", "numpy.reshape", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.get_state"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current state. Has to be called after each step\"\"\"", "\n", "state", "=", "self", ".", "game", ".", "get_state", "(", ")", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "state", ".", "screen_buffer", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "screen_res_y", ",", "self", ".", "screen_res_x", ")", ")", "\n", "if", "self", ".", "task_type", "==", "\"battle\"", ":", "\n", "            ", "self", ".", "frags", "=", "state", ".", "game_variables", "[", "2", "]", "\n", "self", ".", "hp", "=", "state", ".", "game_variables", "[", "1", "]", "\n", "self", ".", "ammo", "=", "state", ".", "game_variables", "[", "0", "]", "\n", "measurements", "=", "[", "self", ".", "hp", "/", "100.", ",", "self", ".", "ammo", "/", "50.", ",", "self", ".", "time", "/", "2100.", "]", "\n", "", "elif", "self", ".", "task_type", "==", "\"health\"", ":", "\n", "            ", "self", ".", "hp", "=", "state", ".", "game_variables", "[", "0", "]", "\n", "measurements", "=", "[", "self", ".", "hp", "/", "100.", ",", "self", ".", "time", "/", "2100.", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown task_type\"", ")", "\n", "\n", "", "if", "self", ".", "data_format", "==", "\"NHWC\"", ":", "\n", "            ", "return", "np", ".", "reshape", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "self", ".", "dtype", ")", "/", "255.", ",", "\n", "[", "self", ".", "screen_res_y", ",", "self", ".", "screen_res_x", ",", "1", "]", ")", ",", "measurements", "\n", "", "elif", "self", ".", "data_format", "==", "\"NCHW\"", ":", "\n", "            ", "return", "np", ".", "reshape", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "self", ".", "dtype", ")", "/", "255.", ",", "\n", "[", "1", ",", "self", ".", "screen_res_y", ",", "self", ".", "screen_res_x", "]", ")", ",", "measurements", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown data_format\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.step": [[97, 145], ["env_doom.Environment.game.is_episode_finished", "env_doom.Environment.game.make_action", "range", "env_doom.Environment._wait", "env_doom.Environment.game.new_episode", "env_doom.Environment.game.advance_action", "env_doom.Environment.game.get_last_reward", "env_doom.Environment.game.is_episode_finished", "env_doom.Environment.game.set_doom_map", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment._wait"], ["", "", "def", "step", "(", "self", ",", "action_id", ")", ":", "\n", "        ", "\"\"\"Propagates the environment.\n\n        Args:\n          action_id (int): Index of the action.\n\n        Returns:\n          float: Reward for training.\n          float: Reward for evaluation.\n          bool: True if terminal state, False otherwise.\n        \"\"\"", "\n", "if", "not", "self", ".", "human", ":", "\n", "            ", "r_train", "=", "self", ".", "game", ".", "make_action", "(", "self", ".", "actions", "[", "action_id", "]", ",", "self", ".", "action_repetition", ")", "\n", "", "else", ":", "\n", "            ", "r_train", "=", "0", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "                ", "self", ".", "game", ".", "advance_action", "(", ")", "\n", "r_train", "+=", "self", ".", "game", ".", "get_last_reward", "(", ")", "\n", "if", "self", ".", "game", ".", "is_episode_finished", "(", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "r_eval", "=", "0", "\n", "\n", "self", ".", "time", "+=", "1", "\n", "\n", "if", "self", ".", "window_visible", ":", "\n", "            ", "self", ".", "_wait", "(", ")", "\n", "\n", "", "if", "self", ".", "game", ".", "is_episode_finished", "(", ")", ":", "\n", "            ", "self", ".", "time", "=", "0", "\n", "if", "self", ".", "task_type", "==", "\"battle\"", ":", "\n", "# Battle performance is evaluated by the amount of frags [Dosovitskiy & Koltun 2017]", "\n", "                ", "r_eval", "=", "self", ".", "frags", "\n", "", "elif", "self", ".", "task_type", "==", "\"health\"", ":", "\n", "# Health gathering performance is evaluated by the health amount at episode end", "\n", "                ", "r_eval", "=", "self", ".", "hp", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"unknown task_type\"", ")", "\n", "\n", "", "if", "self", ".", "manymaps", ":", "\n", "                ", "self", ".", "lvl_id", "+=", "1", "\n", "self", ".", "game", ".", "set_doom_map", "(", "'MAP{:02d}'", ".", "format", "(", "self", ".", "lvl_id", "%", "89", "+", "1", ")", ")", "\n", "\n", "", "self", ".", "game", ".", "new_episode", "(", ")", "\n", "\n", "return", "r_train", ",", "r_eval", ",", "True", "\n", "", "else", ":", "\n", "            ", "return", "r_train", ",", "r_eval", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment._wait": [[146, 148], ["time.sleep"], "methods", ["None"], ["", "", "def", "_wait", "(", "self", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "self", ".", "sleep_time", "*", "self", ".", "action_repetition", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.get_task_parameter": [[149, 193], ["dict", "dict", "len", "ValueError", "list", "itertools.product"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_task_parameter", "(", "doom_lvl", ")", ":", "\n", "        ", "health_gathering_path_dict", "=", "dict", "(", "\n", "navigation", "=", "\"scenarios/navigation.cfg\"", ",", "\n", "hg_normal", "=", "\"scenarios/const_health_gathering_1.cfg\"", ",", "\n", "hg_normal_health_reward", "=", "\"scenarios/const_health_gathering_1_r_hp.cfg\"", ",", "\n", "hg_normal_many_textures", "=", "\"scenarios/const_health_gathering_1_hexen_manymaps_mix.cfg\"", ",", "\n", "hg_sparse", "=", "\"scenarios/const_health_gathering_2.cfg\"", ",", "\n", "hg_very_sparse", "=", "\"scenarios/const_health_gathering_3.cfg\"", ",", "\n", "hg_delay_2", "=", "\"scenarios/const_health_gathering_1_r_delay_2.cfg\"", ",", "\n", "hg_delay_4", "=", "\"scenarios/const_health_gathering_1_r_delay_4.cfg\"", ",", "\n", "hg_delay_8", "=", "\"scenarios/const_health_gathering_1_r_delay_8.cfg\"", ",", "\n", "hg_delay_16", "=", "\"scenarios/const_health_gathering_1_r_delay_16.cfg\"", ",", "\n", "hg_delay_32", "=", "\"scenarios/const_health_gathering_1_r_delay_32.cfg\"", ",", "\n", "hg_terminal_health_m_1", "=", "\"scenarios/const_health_gathering_2_m_1.cfg\"", ",", "\n", "hg_terminal_health_m_2", "=", "\"scenarios/const_health_gathering_2_m_2.cfg\"", ",", "\n", "hg_terminal_health_m_3", "=", "\"scenarios/const_health_gathering_2_m_3.cfg\"", "\n", ")", "\n", "battle_path_dict", "=", "dict", "(", "\n", "battle", "=", "\"scenarios/labyrinth_with_monsters_hexen_r.cfg\"", ",", "\n", "battle_2", "=", "\"scenarios/labyrinth_with_monsters_difficult_hexen_r.cfg\"", "\n", ")", "\n", "\n", "if", "doom_lvl", "in", "health_gathering_path_dict", ":", "\n", "            ", "task_type", "=", "\"health\"", "\n", "cfg_path", "=", "health_gathering_path_dict", "[", "doom_lvl", "]", "\n", "input_vector_size", "=", "2", "\n", "actions", "=", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "1", "]", ",", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", "\n", "", "elif", "doom_lvl", "in", "battle_path_dict", ":", "\n", "            ", "task_type", "=", "\"battle\"", "\n", "cfg_path", "=", "battle_path_dict", "[", "doom_lvl", "]", "\n", "input_vector_size", "=", "3", "\n", "actions", "=", "[", "list", "(", "el", ")", "for", "el", "in", "product", "(", "[", "0", ",", "1", "]", ",", "repeat", "=", "8", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown doom_lvl\"", ")", "\n", "\n", "", "number_of_actions", "=", "len", "(", "actions", ")", "\n", "\n", "if", "doom_lvl", "in", "(", "\"hg_normal_many_textures\"", ",", ")", ":", "\n", "            ", "manymaps", "=", "True", "\n", "", "else", ":", "\n", "            ", "manymaps", "=", "False", "\n", "\n", "", "return", "task_type", ",", "cfg_path", ",", "input_vector_size", ",", "actions", ",", "number_of_actions", ",", "manymaps", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.config.Parameter.__init__": [[45, 191], ["config.get_argparse_parameter", "len", "len", "td_or_not_td.env.env_doom.Environment.get_task_parameter", "ValueError", "ValueError", "config.Parameter.prediction_steps.append", "config.Parameter.prediction_steps.append", "range"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.config.get_argparse_parameter", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.get_task_parameter"], ["    ", "def", "__init__", "(", "self", ",", "args", "=", "None", ")", ":", "\n", "        ", "\"\"\"Creates all algorithm parameters.\n\n        Args:\n            args (Namespace): output of get_argparse_parameter()\n        \"\"\"", "\n", "\n", "if", "args", "is", "None", ":", "\n", "            ", "args", "=", "get_argparse_parameter", "(", ")", "\n", "\n", "", "self", ".", "main_path", "=", "args", ".", "main_path", "\n", "\n", "self", ".", "eval_run", "=", "args", ".", "eval", "or", "args", ".", "eval_one", "\n", "\n", "self", ".", "single_eval", "=", "args", ".", "eval_one", "\n", "self", ".", "single_eval_id", "=", "args", ".", "eval_one_id", "\n", "\n", "self", ".", "game", "=", "args", ".", "game", "\n", "self", ".", "doom_lvl", "=", "args", ".", "doom_lvl", "\n", "\n", "self", ".", "action_repetition", "=", "4", "\n", "self", ".", "screen_res_x", "=", "84", "\n", "self", ".", "screen_res_y", "=", "84", "\n", "self", ".", "input_image_number", "=", "1", "\n", "\n", "self", ".", "algorithm", "=", "args", ".", "algorithm", "\n", "\n", "if", "self", ".", "algorithm", "==", "\"Qmc\"", ":", "\n", "            ", "self", ".", "discount", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "discount", "=", "0.99", "\n", "\n", "", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "if", "self", ".", "algorithm", "in", "(", "\"Q\"", ",", "\"a3c\"", ")", ":", "\n", "            ", "self", ".", "rollout", "=", "args", ".", "td_rollout", "\n", "assert", "self", ".", "batch_size", ">=", "self", ".", "rollout", "\n", "assert", "self", ".", "batch_size", "%", "self", ".", "rollout", "==", "0", "\n", "\n", "# Examples of target_v for n-step TD batch:", "\n", "#", "\n", "# for batch_size=10 and rollout=10 (for simplicity discount=1 and no terminal states):", "\n", "# v_offset_list = [0]", "\n", "#", "\n", "# target_v(S_0) = r_0 + r_1 + r_2 + r_3 + r_4 + r_5 + r_6 + r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_1) =       r_1 + r_2 + r_3 + r_4 + r_5 + r_6 + r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_2) =             r_2 + r_3 + r_4 + r_5 + r_6 + r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_3) =                   r_3 + r_4 + r_5 + r_6 + r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_4) =                         r_4 + r_5 + r_6 + r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_5) =                               r_5 + r_6 + r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_6) =                                     r_6 + r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_7) =                                           r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_8) =                                                 r_8 + r_9 + V(S_10)", "\n", "# target_v(S_9) =                                                       r_9 + V(S_10)", "\n", "#", "\n", "#", "\n", "# for batch_size=10 and rollout=5 (for simplicity discount=1 and no terminal states):", "\n", "# v_offset_list = [0, 5]", "\n", "#", "\n", "# target_v(S_0) =                               r_5 + r_6 + r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_1) =                                     r_6 + r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_2) =                                           r_7 + r_8 + r_9 + V(S_10)", "\n", "# target_v(S_3) =                                                 r_8 + r_9 + V(S_10)", "\n", "# target_v(S_4) =                                                       r_9 + V(S_10)", "\n", "# target_v(S_5) = r_0 + r_1 + r_2 + r_3 + r_4 + V(S_5)", "\n", "# target_v(S_6) =       r_1 + r_2 + r_3 + r_4 + V(S_5)", "\n", "# target_v(S_7) =             r_2 + r_3 + r_4 + V(S_5)", "\n", "# target_v(S_8) =                   r_3 + r_4 + V(S_5)", "\n", "# target_v(S_9) =                         r_4 + V(S_5)", "\n", "\n", "self", ".", "v_offset_list", "=", "[", "i", "for", "i", "in", "range", "(", "0", ",", "self", ".", "batch_size", ",", "self", ".", "rollout", ")", "]", "\n", "self", ".", "batch_offset", "=", "0", "\n", "", "elif", "self", ".", "algorithm", "==", "\"Qmc\"", ":", "\n", "            ", "self", ".", "rollout", "=", "args", ".", "mc_rollout", "\n", "self", ".", "batch_offset", "=", "self", ".", "rollout", "-", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"algorithm unknown\"", ")", "\n", "\n", "", "if", "self", ".", "algorithm", "==", "\"Qmc\"", ":", "\n", "            ", "assert", "self", ".", "rollout", "\n", "self", ".", "prediction_steps", "=", "[", "]", "# list of finite prediction horizons for the Qmc heads", "\n", "i", "=", "0", "\n", "while", "2", "**", "i", "<", "self", ".", "rollout", ":", "\n", "                ", "self", ".", "prediction_steps", ".", "append", "(", "2", "**", "i", ")", "\n", "i", "+=", "1", "\n", "", "if", "self", ".", "prediction_steps", "[", "-", "1", "]", "!=", "self", ".", "rollout", ":", "\n", "                ", "self", ".", "prediction_steps", ".", "append", "(", "self", ".", "rollout", ")", "\n", "\n", "", "self", ".", "number_of_predictions", "=", "len", "(", "self", ".", "prediction_steps", ")", "\n", "assert", "self", ".", "number_of_predictions", ">=", "3", "\n", "self", ".", "prediction_steps_usage", "=", "[", "0.", "]", "*", "self", ".", "number_of_predictions", "\n", "self", ".", "prediction_steps_usage", "[", "-", "1", "]", "=", "1.", "\n", "self", ".", "prediction_steps_usage", "[", "-", "2", "]", "=", "0.5", "\n", "self", ".", "prediction_steps_usage", "[", "-", "3", "]", "=", "0.5", "\n", "\n", "", "if", "self", ".", "algorithm", "in", "(", "\"Q\"", ",", "\"a3c\"", ")", ":", "\n", "            ", "self", ".", "target_v_size", "=", "len", "(", "self", ".", "v_offset_list", ")", "\n", "", "elif", "self", ".", "algorithm", "==", "\"Qmc\"", ":", "\n", "            ", "self", ".", "target_v_size", "=", "self", ".", "number_of_predictions", "\n", "\n", "", "if", "self", ".", "algorithm", "==", "\"a3c\"", ":", "\n", "            ", "self", ".", "use_eps_exploration", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "use_eps_exploration", "=", "True", "\n", "\n", "", "self", ".", "exploration_time", "=", "args", ".", "exploration_time", "\n", "\n", "self", ".", "number_of_agents", "=", "16", "\n", "self", ".", "number_of_eval_agents", "=", "2", "\n", "self", ".", "stop_after", "=", "args", ".", "training_time", "+", "100000", "\n", "\n", "self", ".", "rms_learning_rate", "=", "args", ".", "rms_learning_rate", "\n", "\n", "self", ".", "replay_memory_size", "=", "1000", "\n", "\n", "self", ".", "run_on_gpu", "=", "False", "\n", "self", ".", "gpu_memory_fraction", "=", "1.0", "\n", "\n", "self", ".", "print_log_occurrence", "=", "10000", "\n", "self", ".", "save_network_occurrence", "=", "2500000", "\n", "self", ".", "update_target_occurrence", "=", "10000", "\n", "\n", "self", ".", "number_of_eval_runs", "=", "500", "\n", "\n", "if", "self", ".", "game", "==", "\"doom\"", ":", "\n", "            ", "self", ".", "use_screen", "=", "True", "\n", "self", ".", "use_vector_input", "=", "True", "\n", "\n", "_", ",", "_", ",", "self", ".", "input_vector_size", ",", "_", ",", "self", ".", "number_of_actions", ",", "_", "=", "Environment", ".", "get_task_parameter", "(", "args", ".", "doom_lvl", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown game\"", ")", "\n", "\n", "", "self", ".", "qmc_no_target_available_encoding", "=", "-", "10.", "\n", "\n", "if", "self", ".", "run_on_gpu", ":", "\n", "            ", "self", ".", "data_format", "=", "\"NCHW\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_format", "=", "\"NHWC\"", "\n", "\n", "", "if", "args", ".", "show_screen", ":", "\n", "            ", "self", ".", "window_visible", "=", "True", "\n", "self", ".", "number_of_agents", "=", "1", "\n", "self", ".", "number_of_eval_agents", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "window_visible", "=", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.config.get_argparse_parameter": [[8, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "int", "os.path.join", "open", "file.write"], "function", ["None"], ["def", "get_argparse_parameter", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "fromfile_prefix_chars", "=", "'@'", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'-main_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'data output path'", ")", "\n", "parser", ".", "add_argument", "(", "'-eval'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Evaluate main_path snapshots instead of training.'", ")", "\n", "parser", ".", "add_argument", "(", "'-eval_one'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Evaluate one main_path snapshot instead of training, '", "\n", "'specified by eval_one_id value.'", ")", "\n", "parser", ".", "add_argument", "(", "'-eval_one_id'", ",", "type", "=", "int", ",", "default", "=", "24", ",", "help", "=", "' '", ")", "\n", "parser", ".", "add_argument", "(", "'-show_screen'", ",", "action", "=", "'store_true'", ",", "help", "=", "' '", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-game'", ",", "type", "=", "str", ",", "default", "=", "\"doom\"", ",", "choices", "=", "(", "\"doom\"", ",", ")", ",", "help", "=", "' '", ")", "\n", "parser", ".", "add_argument", "(", "'-doom_lvl'", ",", "type", "=", "str", ",", "default", "=", "\"battle\"", ",", "choices", "=", "tasks", ",", "help", "=", "' '", ")", "\n", "parser", ".", "add_argument", "(", "'-algorithm'", ",", "type", "=", "str", ",", "default", "=", "\"Qmc\"", ",", "choices", "=", "(", "\"Q\"", ",", "\"a3c\"", ",", "\"Qmc\"", ")", ",", "\n", "help", "=", "' '", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-training_time'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "6e7", ")", ",", "help", "=", "' '", ")", "\n", "parser", ".", "add_argument", "(", "'-exploration_time'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "5e7", ")", ",", "help", "=", "' '", ")", "\n", "parser", ".", "add_argument", "(", "'-rms_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "7.0e-4", ",", "help", "=", "' '", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-mc_rollout'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'Qmc maximal finite horizon'", ")", "\n", "parser", ".", "add_argument", "(", "'-td_rollout'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'Q, and a3c n-step rollout'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "' '", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "main_path", "is", "not", "None", ":", "\n", "        ", "if", "not", "(", "args", ".", "eval", "or", "args", ".", "eval_one", ")", ":", "\n", "            ", "save_para_file_path", "=", "p_join", "(", "args", ".", "main_path", ",", "\"argparse_parameter.txt\"", ")", "\n", "with", "open", "(", "save_para_file_path", ",", "'w'", ")", "as", "file", ":", "\n", "                ", "file", ".", "write", "(", "'\\n'", ".", "join", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", "\n", "", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Agent.__init__": [[7, 30], ["graph.build_agent_graph", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.build_agent_graph"], ["def", "__init__", "(", "self", ",", "rank", ",", "session", ",", "graph", ",", "rm", ")", ":", "\n", "        ", "self", ".", "_p", "=", "graph", ".", "p", "\n", "self", ".", "_sess", "=", "session", "\n", "\n", "if", "self", ".", "_p", ".", "data_format", "==", "\"NHWC\"", ":", "\n", "            ", "data_shape", "=", "[", "None", ",", "self", ".", "_p", ".", "screen_res_y", ",", "self", ".", "_p", ".", "screen_res_x", ",", "\n", "self", ".", "_p", ".", "input_image_number", "]", "\n", "", "else", ":", "\n", "            ", "data_shape", "=", "[", "None", ",", "self", ".", "_p", ".", "input_image_number", ",", "self", ".", "_p", ".", "screen_res_y", ",", "\n", "self", ".", "_p", ".", "screen_res_x", "]", "\n", "\n", "", "self", ".", "_placeholder_dict", "=", "{", "\n", "\"learning_rate\"", ":", "graph", ".", "learning_rate", ",", "\n", "\"image\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "data_shape", ",", "name", "=", "\"image\"", ")", ",", "\n", "\"vector\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_p", ".", "input_vector_size", "]", ",", "\n", "name", "=", "\"vector\"", ")", ",", "\n", "\"action\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_p", ".", "number_of_actions", "]", ",", "name", "=", "\"action\"", ")", ",", "\n", "\"target_v\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"target_v\"", ")", ",", "\n", "\"target_r\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_p", ".", "target_v_size", "]", ",", "\n", "name", "=", "\"target_r\"", ")", ",", "\n", "}", "\n", "\n", "self", ".", "_command_list_dict", "=", "graph", ".", "build_agent_graph", "(", "rank", ",", "self", ".", "_placeholder_dict", ",", "rm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Agent.run": [[31, 58], ["graph.Agent._sess.run", "dict", "zip", "f"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Agent.run"], ["", "def", "run", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Runs one of the available tensorflow ops.\n\n        All used tensorflow ops are created by Graph.build_agent_graph.\n        All placeholders are fed by methods of the ReplayMemory.\n\n        Available keys:\n          \"sync\": copy global network weights to local weights\n          \"action\": get action for current state\n          \"loss\": get current loss value\n          \"train\": run one network training step\n\n        Additional key for TD algorithms (Q and a3c):\n          \"v_list\": get value predictions for bootstrapping\n\n        Additional key for the Q algorithm:\n          \"sync_target\": update target network weights\n\n\n        Args:\n          key (str): tensorflow op key\n        \"\"\"", "\n", "\n", "# command structure:", "\n", "#     [tensorflow_op, [list_of_placeholders], [list_of_replay_memory_methods]]", "\n", "return", "self", ".", "_sess", ".", "run", "(", "self", ".", "_command_list_dict", "[", "key", "]", "[", "0", "]", ",", "feed_dict", "=", "dict", "(", "zip", "(", "\n", "self", ".", "_command_list_dict", "[", "key", "]", "[", "1", "]", ",", "[", "f", "(", ")", "for", "f", "in", "self", ".", "_command_list_dict", "[", "key", "]", "[", "2", "]", "]", "\n", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.__init__": [[62, 102], ["tensorflow.placeholder", "tensorflow.train.RMSPropOptimizer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "graph.Graph.perception_network", "graph.Graph.vector_network", "graph.Graph.network", "tensorflow.get_collection", "graph.Graph.perception_network", "graph.Graph.vector_network", "graph.Graph.network", "tensorflow.get_collection", "tensorflow.get_collection"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.perception_network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.vector_network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.perception_network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.vector_network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.network"], ["    ", "def", "__init__", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "\"\"\"creates global and target network weights\"\"\"", "\n", "self", ".", "p", "=", "parameter", "\n", "self", ".", "learning_rate", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", "\n", "\n", "self", ".", "_optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "self", ".", "learning_rate", ",", "\n", "decay", "=", "0.99", ",", "\n", "epsilon", "=", "1e-1", ")", "\n", "\n", "if", "self", ".", "p", ".", "data_format", "==", "\"NHWC\"", ":", "\n", "            ", "data_shape", "=", "[", "None", ",", "self", ".", "p", ".", "screen_res_y", ",", "self", ".", "p", ".", "screen_res_x", ",", "self", ".", "p", ".", "input_image_number", "]", "\n", "", "else", ":", "\n", "            ", "data_shape", "=", "[", "None", ",", "self", ".", "p", ".", "input_image_number", ",", "self", ".", "p", ".", "screen_res_y", ",", "self", ".", "p", ".", "screen_res_x", "]", "\n", "", "input_image", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "data_shape", ")", "\n", "input_vector", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "p", ".", "input_vector_size", "]", ")", "\n", "input_action", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "p", ".", "number_of_actions", "]", ")", "\n", "\n", "perception", "=", "self", ".", "perception_network", "(", "\n", "input_image", ",", "\"main_perception\"", ",", "self", ".", "p", ".", "data_format", ",", "reuse", "=", "False", ",", "print_shape", "=", "True", ")", "\n", "\n", "vector", "=", "self", ".", "vector_network", "(", "\n", "input_vector", ",", "\"main_vector\"", ",", "self", ".", "p", ".", "data_format", ",", "reuse", "=", "False", ",", "print_shape", "=", "True", ")", "\n", "\n", "self", ".", "network", "(", "perception", ",", "vector", ",", "input_action", ",", "\"main_network\"", ",", "self", ".", "p", ".", "data_format", ",", "\n", "reuse", "=", "False", ",", "print_shape", "=", "True", ")", "\n", "\n", "self", ".", "main_var", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "\"main_perception\"", ")", "+", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "\"main_vector\"", ")", "+", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "\"main_network\"", ")", "\n", "\n", "if", "self", ".", "p", ".", "algorithm", "==", "\"Q\"", ":", "\n", "            ", "perception", "=", "self", ".", "perception_network", "(", "\n", "input_image", ",", "\"target_perception\"", ",", "self", ".", "p", ".", "data_format", ",", "reuse", "=", "False", ",", "\n", "print_shape", "=", "False", ")", "\n", "\n", "vector", "=", "self", ".", "vector_network", "(", "\n", "input_vector", ",", "\"target_vector\"", ",", "self", ".", "p", ".", "data_format", ",", "reuse", "=", "False", ",", "print_shape", "=", "False", ")", "\n", "\n", "self", ".", "network", "(", "perception", ",", "vector", ",", "input_action", ",", "\"target_network\"", ",", "self", ".", "p", ".", "data_format", ",", "\n", "reuse", "=", "False", ",", "print_shape", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.build_agent_graph": [[103, 314], ["graph.Graph.perception_network", "graph.Graph.vector_network", "graph.Graph.network", "graph.Graph._get_copy_weights_list_operator", "tensorflow.clip_by_value", "tensorflow.nn.softmax", "tensorflow.log", "tensorflow.reduce_sum", "zip", "list", "tensorflow.stop_gradient", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.clip_by_global_norm", "zip", "print", "print", "graph.Graph._optimizer.apply_gradients", "graph.Graph.perception_network", "graph.Graph.vector_network", "graph.Graph.network", "tensorflow.reduce_sum", "zip", "list", "tensorflow.multiply", "tensorflow.square", "graph.Graph._optimizer.compute_gradients", "print", "tensorflow.one_hot", "graph.Graph._get_copy_weights_list_operator", "graph.Graph.build_agent_graph.huber_loss"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.perception_network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.vector_network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph._get_copy_weights_list_operator", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.perception_network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.vector_network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.network", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph._get_copy_weights_list_operator"], ["", "", "def", "build_agent_graph", "(", "self", ",", "rank", ",", "pl", ",", "rm", ")", ":", "\n", "        ", "\"\"\"creates a local networks and the tensorflow computation graph\n\n        Args:\n          rank: Thread rank\n          pl: Agent,_placeholder_dict\n          rm: Instance of ReplayMemory\n        \"\"\"", "\n", "\n", "command_dict", "=", "{", "}", "\n", "# command structure:", "\n", "#    [tensorflow_op, [list_of_placeholders], [list_of_replay_memory_methods]]", "\n", "\n", "network_pre_name", "=", "\"agent_\"", "\n", "network_name_ending", "=", "\"_{}\"", ".", "format", "(", "rank", ")", "\n", "reuse", "=", "False", "\n", "\n", "# network creation:", "\n", "\n", "perception", "=", "self", ".", "perception_network", "(", "\n", "pl", "[", "\"image\"", "]", ",", "\n", "network_pre_name", "+", "\"perception\"", "+", "network_name_ending", ",", "self", ".", "p", ".", "data_format", ",", "reuse", "=", "reuse", "\n", ")", "\n", "\n", "vector", "=", "self", ".", "vector_network", "(", "\n", "pl", "[", "\"vector\"", "]", ",", "\n", "network_pre_name", "+", "\"vector\"", "+", "network_name_ending", ",", "self", ".", "p", ".", "data_format", ",", "reuse", "=", "reuse", "\n", ")", "\n", "\n", "out_list", "=", "self", ".", "network", "(", "\n", "perception", ",", "vector", ",", "pl", "[", "\"action\"", "]", ",", "\n", "network_pre_name", "+", "\"network\"", "+", "network_name_ending", ",", "self", ".", "p", ".", "data_format", ",", "\n", "reuse", "=", "reuse", "\n", ")", "\n", "\n", "command_dict", "[", "\"sync\"", "]", "=", "[", "\n", "self", ".", "_get_copy_weights_list_operator", "(", "\n", "[", "\"main_perception\"", ",", "\"main_vector\"", ",", "\"main_network\"", "]", ",", "\n", "[", "\"agent_perception_{}\"", ".", "format", "(", "rank", ")", ",", "\"agent_vector_{}\"", ".", "format", "(", "rank", ")", ",", "\n", "\"agent_network_{}\"", ".", "format", "(", "rank", ")", "]", ")", ",", "\n", "[", "]", ",", "\n", "[", "]", "\n", "]", "\n", "\n", "# computation graph creation:", "\n", "\n", "def", "huber_loss", "(", "diff", ")", ":", "\n", "            ", "clipped_diff", "=", "tf", ".", "clip_by_value", "(", "diff", ",", "-", "1.0", ",", "1.0", ")", "\n", "return", "tf", ".", "stop_gradient", "(", "clipped_diff", ")", "*", "diff", "\n", "\n", "", "if", "self", ".", "p", ".", "algorithm", "==", "\"a3c\"", ":", "\n", "            ", "pol", ",", "v", "=", "out_list", "\n", "\n", "command_dict", "[", "\"v_list\"", "]", "=", "[", "\n", "v", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", "]", ",", "\n", "[", "rm", ".", "state_list_for_v", ",", "rm", ".", "vector_list_for_v", "]", "\n", "]", "\n", "\n", "command_dict", "[", "\"action\"", "]", "=", "[", "\n", "tf", ".", "multinomial", "(", "pol", ",", "1", ")", "[", ":", ",", "0", "]", "[", "0", "]", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", "]", ",", "\n", "[", "rm", ".", "next_state", ",", "rm", ".", "next_vector", "]", "\n", "]", "\n", "\n", "softmax_pol", "=", "tf", ".", "nn", ".", "softmax", "(", "pol", ")", "\n", "log_output_a", "=", "tf", ".", "log", "(", "softmax_pol", "+", "1e-10", ")", "\n", "entropy", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "log_output_a", ",", "softmax_pol", ")", ",", "1", ")", "\n", "cross_entropy", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "log_output_a", ",", "pl", "[", "\"action\"", "]", ")", ",", "1", ")", "\n", "\n", "p_loss", "=", "-", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "cross_entropy", ",", "tf", ".", "stop_gradient", "(", "pl", "[", "\"target_v\"", "]", "-", "v", ")", ")", "+", "0.01", "*", "entropy", ")", "\n", "\n", "v_loss", "=", "0.5", "*", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "square", "(", "pl", "[", "\"target_v\"", "]", "-", "v", ")", ")", "\n", "\n", "command_dict", "[", "\"loss\"", "]", "=", "[", "\n", "[", "v_loss", ",", "p_loss", "]", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", ",", "pl", "[", "\"action\"", "]", ",", "pl", "[", "\"target_v\"", "]", "]", ",", "\n", "[", "rm", ".", "state_batch", ",", "rm", ".", "vector_batch", ",", "rm", ".", "action_batch", ",", "\n", "rm", ".", "value_target_batch", "]", "\n", "]", "\n", "\n", "loss", "=", "p_loss", "+", "0.5", "*", "v_loss", "\n", "\n", "grad", ",", "__", "=", "zip", "(", "*", "self", ".", "_optimizer", ".", "compute_gradients", "(", "loss", ")", ")", "\n", "grad", "=", "[", "x", "for", "x", "in", "grad", "if", "x", "is", "not", "None", "]", "\n", "grad", "=", "tf", ".", "clip_by_global_norm", "(", "grad", ",", "40.", ")", "[", "0", "]", "\n", "\n", "gradvar", "=", "list", "(", "zip", "(", "grad", ",", "self", ".", "main_var", ")", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "print", "(", "\"\\n###### learned parameters: ######\"", ")", "\n", "[", "print", "(", "j", ")", "for", "i", ",", "j", "in", "gradvar", "if", "i", "is", "not", "None", "]", "\n", "print", "(", "\"#################################\"", ")", "\n", "\n", "", "command_dict", "[", "\"train\"", "]", "=", "[", "\n", "self", ".", "_optimizer", ".", "apply_gradients", "(", "gradvar", ")", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", ",", "pl", "[", "\"action\"", "]", ",", "pl", "[", "\"target_v\"", "]", ",", "pl", "[", "\"learning_rate\"", "]", "]", ",", "\n", "[", "rm", ".", "state_batch", ",", "rm", ".", "vector_batch", ",", "rm", ".", "action_batch", ",", "\n", "rm", ".", "value_target_batch", ",", "rm", ".", "learning_rate", "]", "\n", "]", "\n", "\n", "", "elif", "self", ".", "p", ".", "algorithm", "==", "\"Q\"", ":", "\n", "            ", "q_list", ",", "a", "=", "out_list", "\n", "\n", "target_perception", "=", "self", ".", "perception_network", "(", "\n", "pl", "[", "\"image\"", "]", ",", "\"target_perception\"", ",", "self", ".", "p", ".", "data_format", ",", "\n", "reuse", "=", "True", ",", "print_shape", "=", "False", "\n", ")", "\n", "\n", "target_vector", "=", "self", ".", "vector_network", "(", "\n", "pl", "[", "\"vector\"", "]", ",", "\"target_vector\"", ",", "self", ".", "p", ".", "data_format", ",", "\n", "reuse", "=", "True", ",", "print_shape", "=", "False", "\n", ")", "\n", "\n", "target_q_list", ",", "__", "=", "self", ".", "network", "(", "\n", "target_perception", ",", "target_vector", ",", "tf", ".", "one_hot", "(", "a", ",", "self", ".", "p", ".", "number_of_actions", ")", ",", "\n", "\"target_network\"", ",", "self", ".", "p", ".", "data_format", ",", "\n", "reuse", "=", "True", ",", "print_shape", "=", "False", "\n", ")", "\n", "\n", "command_dict", "[", "\"sync_target\"", "]", "=", "[", "\n", "self", ".", "_get_copy_weights_list_operator", "(", "\n", "[", "\"main_perception\"", ",", "\"main_vector\"", ",", "\"main_network\"", "]", ",", "\n", "[", "\"target_perception\"", ",", "\"target_vector\"", ",", "\"target_network\"", "]", ")", ",", "\n", "[", "]", ",", "\n", "[", "]", "\n", "]", "\n", "\n", "command_dict", "[", "\"action\"", "]", "=", "[", "\n", "a", "[", "0", "]", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", "]", ",", "\n", "[", "rm", ".", "next_state", ",", "rm", ".", "next_vector", "]", "\n", "]", "\n", "\n", "command_dict", "[", "\"v_list\"", "]", "=", "[", "\n", "target_q_list", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", "]", ",", "\n", "[", "rm", ".", "state_list_for_v", ",", "rm", ".", "vector_list_for_v", "]", "\n", "]", "\n", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "huber_loss", "(", "q_list", "-", "pl", "[", "\"target_v\"", "]", ")", ")", "\n", "\n", "command_dict", "[", "\"loss\"", "]", "=", "[", "\n", "[", "loss", "]", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", ",", "pl", "[", "\"action\"", "]", ",", "pl", "[", "\"target_v\"", "]", "]", ",", "\n", "[", "rm", ".", "state_batch", ",", "rm", ".", "vector_batch", ",", "rm", ".", "action_batch", ",", "rm", ".", "value_target_batch", "]", "\n", "]", "\n", "\n", "grad", ",", "__", "=", "zip", "(", "*", "self", ".", "_optimizer", ".", "compute_gradients", "(", "loss", ")", ")", "\n", "grad", "=", "[", "x", "for", "x", "in", "grad", "if", "x", "is", "not", "None", "]", "\n", "\n", "gradvar", "=", "list", "(", "zip", "(", "grad", ",", "self", ".", "main_var", ")", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "print", "(", "\"\\n###### learned parameters: ######\"", ")", "\n", "[", "print", "(", "j", ")", "for", "i", ",", "j", "in", "gradvar", "if", "i", "is", "not", "None", "]", "\n", "print", "(", "\"#################################\"", ")", "\n", "\n", "", "command_dict", "[", "\"train\"", "]", "=", "[", "\n", "self", ".", "_optimizer", ".", "apply_gradients", "(", "gradvar", ")", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", ",", "pl", "[", "\"action\"", "]", ",", "pl", "[", "\"target_v\"", "]", ",", "pl", "[", "\"learning_rate\"", "]", "]", ",", "\n", "[", "rm", ".", "state_batch", ",", "rm", ".", "vector_batch", ",", "rm", ".", "action_batch", ",", "rm", ".", "value_target_batch", ",", "\n", "rm", ".", "learning_rate", "]", "\n", "]", "\n", "\n", "", "elif", "self", ".", "p", ".", "algorithm", "==", "\"Qmc\"", ":", "\n", "            ", "v_list", ",", "a", "=", "out_list", "\n", "\n", "command_dict", "[", "\"action\"", "]", "=", "[", "\n", "a", "[", "0", "]", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", "]", ",", "\n", "[", "rm", ".", "next_state", ",", "rm", ".", "next_vector", "]", "\n", "]", "\n", "\n", "zero_const", "=", "tf", ".", "constant", "(", "0.0", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "p", ".", "batch_size", ",", "\n", "self", ".", "p", ".", "target_v_size", "]", ")", "\n", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "where", "(", "\n", "tf", ".", "equal", "(", "pl", "[", "\"target_r\"", "]", ",", "self", ".", "p", ".", "qmc_no_target_available_encoding", ")", ",", "\n", "zero_const", ",", "\n", "huber_loss", "(", "v_list", "-", "pl", "[", "\"target_r\"", "]", ")", "\n", ")", ")", "\n", "\n", "command_dict", "[", "\"loss\"", "]", "=", "[", "\n", "[", "loss", "]", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", ",", "pl", "[", "\"action\"", "]", ",", "pl", "[", "\"target_r\"", "]", "]", ",", "\n", "[", "rm", ".", "state_batch", ",", "rm", ".", "vector_batch", ",", "rm", ".", "action_batch", ",", "rm", ".", "value_target_batch", "]", "\n", "]", "\n", "\n", "grad", ",", "__", "=", "zip", "(", "*", "self", ".", "_optimizer", ".", "compute_gradients", "(", "loss", ")", ")", "\n", "grad", "=", "[", "x", "for", "x", "in", "grad", "if", "x", "is", "not", "None", "]", "\n", "gradvar", "=", "list", "(", "zip", "(", "grad", ",", "self", ".", "main_var", ")", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "print", "(", "\"\\n###### learned parameters: ######\"", ")", "\n", "[", "print", "(", "j", ")", "for", "i", ",", "j", "in", "gradvar", "if", "i", "is", "not", "None", "]", "\n", "print", "(", "\"#################################\"", ")", "\n", "\n", "", "command_dict", "[", "\"train\"", "]", "=", "[", "\n", "self", ".", "_optimizer", ".", "apply_gradients", "(", "gradvar", ")", ",", "\n", "[", "pl", "[", "\"image\"", "]", ",", "pl", "[", "\"vector\"", "]", ",", "pl", "[", "\"action\"", "]", ",", "pl", "[", "\"target_r\"", "]", ",", "pl", "[", "\"learning_rate\"", "]", "]", ",", "\n", "[", "rm", ".", "state_batch", ",", "rm", ".", "vector_batch", ",", "rm", ".", "action_batch", ",", "rm", ".", "value_target_batch", ",", "\n", "rm", ".", "learning_rate", "]", "\n", "]", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown algorithm\"", ")", "\n", "\n", "", "return", "command_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.perception_network": [[315, 332], ["td_or_not_td.alg.layers.NetworkCreator", "td_or_not_td.alg.layers.NetworkCreator.conv_layer", "td_or_not_td.alg.layers.NetworkCreator.relu", "td_or_not_td.alg.layers.NetworkCreator.conv_layer", "td_or_not_td.alg.layers.NetworkCreator.relu", "td_or_not_td.alg.layers.NetworkCreator.conv_layer", "td_or_not_td.alg.layers.NetworkCreator.relu", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "td_or_not_td.alg.layers.NetworkCreator.relu"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.conv_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.conv_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.conv_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu"], ["", "def", "perception_network", "(", "self", ",", "input_image", ",", "name", ",", "data_format", ",", "reuse", "=", "False", ",", "print_shape", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "p", ".", "use_screen", ":", "\n", "            ", "nc", "=", "NetworkCreator", "(", "name", ",", "data_format", ",", "reuse", ",", "input_image", ",", "print_shape", ")", "\n", "\n", "nc", ".", "conv_layer", "(", "32", ",", "8", ",", "4", ")", "\n", "nc", ".", "relu", "(", ")", "\n", "\n", "nc", ".", "conv_layer", "(", "64", ",", "4", ",", "2", ")", "\n", "nc", ".", "relu", "(", ")", "\n", "\n", "nc", ".", "conv_layer", "(", "64", ",", "3", ",", "1", ")", "\n", "nc", ".", "relu", "(", ")", "\n", "\n", "nc", ".", "fc_layer", "(", "512", ")", "\n", "return", "nc", ".", "relu", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.vector_network": [[333, 347], ["td_or_not_td.alg.layers.NetworkCreator", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "td_or_not_td.alg.layers.NetworkCreator.relu", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "td_or_not_td.alg.layers.NetworkCreator.relu", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "td_or_not_td.alg.layers.NetworkCreator.relu"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu"], ["", "", "def", "vector_network", "(", "self", ",", "input_m", ",", "name", ",", "data_format", ",", "reuse", "=", "False", ",", "print_shape", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "p", ".", "use_vector_input", ":", "\n", "            ", "nc", "=", "NetworkCreator", "(", "name", ",", "data_format", ",", "reuse", ",", "input_m", ",", "print_shape", ")", "\n", "\n", "nc", ".", "fc_layer", "(", "128", ")", "\n", "nc", ".", "relu", "(", ")", "\n", "\n", "nc", ".", "fc_layer", "(", "128", ")", "\n", "nc", ".", "relu", "(", ")", "\n", "\n", "nc", ".", "fc_layer", "(", "128", ")", "\n", "return", "nc", ".", "relu", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph.network": [[348, 432], ["td_or_not_td.alg.layers.NetworkCreator", "td_or_not_td.alg.layers.NetworkCreator.extend", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "tensorflow.reshape", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "ValueError", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "td_or_not_td.alg.layers.NetworkCreator.relu", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "tensorflow.reshape", "tensorflow.argmax", "tensorflow.reshape", "tensorflow.reduce_sum", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "td_or_not_td.alg.layers.NetworkCreator.relu", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.argmax", "ValueError", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_sum", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "td_or_not_td.alg.layers.NetworkCreator.relu", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "tensorflow.argmax", "tensorflow.reduce_sum", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "td_or_not_td.alg.layers.NetworkCreator.relu", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "tensorflow.reshape", "td_or_not_td.alg.layers.NetworkCreator.fc_layer", "tensorflow.argmax", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.extend", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer"], ["", "", "def", "network", "(", "self", ",", "perception", ",", "vector", ",", "action_input", ",", "name", ",", "data_format", ",", "\n", "reuse", "=", "False", ",", "print_shape", "=", "False", ")", ":", "\n", "        ", "nc", "=", "NetworkCreator", "(", "name", ",", "data_format", ",", "reuse", ",", "perception", ",", "print_shape", ")", "\n", "\n", "if", "self", ".", "p", ".", "use_vector_input", "and", "self", ".", "p", ".", "use_screen", ":", "\n", "            ", "assert", "vector", "is", "not", "None", "\n", "tmp", "=", "nc", ".", "extend", "(", "vector", ")", "\n", "", "elif", "self", ".", "p", ".", "use_vector_input", ":", "\n", "            ", "tmp", "=", "vector", "\n", "", "elif", "self", ".", "p", ".", "use_screen", ":", "\n", "            ", "tmp", "=", "perception", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"both use_vector_input and use_screen are False\"", ")", "\n", "\n", "", "if", "self", ".", "p", ".", "algorithm", "==", "\"a3c\"", ":", "\n", "            ", "pol", "=", "nc", ".", "fc_layer", "(", "self", ".", "p", ".", "number_of_actions", ",", "tmp", ")", "\n", "v", "=", "tf", ".", "reshape", "(", "nc", ".", "fc_layer", "(", "1", ",", "tmp", ")", ",", "[", "-", "1", "]", ")", "\n", "return", "[", "pol", ",", "v", "]", "\n", "\n", "", "elif", "self", ".", "p", ".", "algorithm", "==", "\"Qmc\"", ":", "\n", "            ", "assert", "action_input", "is", "not", "None", "\n", "\n", "if", "self", ".", "p", ".", "use_screen", ":", "\n", "                ", "nc", ".", "fc_layer", "(", "512", ",", "tmp", ")", "\n", "nc", ".", "relu", "(", ")", "\n", "r_a", "=", "nc", ".", "fc_layer", "(", "self", ".", "p", ".", "number_of_actions", "*", "self", ".", "p", ".", "number_of_predictions", ")", "\n", "r_a", "=", "tf", ".", "reshape", "(", "r_a", ",", "[", "-", "1", ",", "self", ".", "p", ".", "number_of_actions", ",", "self", ".", "p", ".", "number_of_predictions", "]", ")", "\n", "\n", "a", "=", "tf", ".", "argmax", "(", "tf", ".", "reduce_sum", "(", "self", ".", "p", ".", "prediction_steps_usage", "*", "r_a", ",", "2", ")", ",", "1", ")", "\n", "\n", "r_a", "=", "r_a", "-", "tf", ".", "reduce_mean", "(", "r_a", ",", "reduction_indices", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "action_input", "=", "tf", ".", "reshape", "(", "action_input", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "action_input", ")", ",", "[", "1", "]", "]", ",", "0", ")", ")", "\n", "r_a", "=", "tf", ".", "reduce_sum", "(", "r_a", "*", "action_input", ",", "1", ")", "\n", "\n", "nc", ".", "fc_layer", "(", "512", ",", "tmp", ")", "\n", "nc", ".", "relu", "(", ")", "\n", "r", "=", "nc", ".", "fc_layer", "(", "self", ".", "p", ".", "number_of_predictions", ")", "\n", "\n", "r_list", "=", "r", "+", "r_a", "\n", "return", "[", "r_list", ",", "a", "]", "\n", "\n", "", "else", ":", "\n", "                ", "r_a", "=", "nc", ".", "fc_layer", "(", "self", ".", "p", ".", "number_of_actions", "*", "self", ".", "p", ".", "number_of_predictions", ",", "tmp", ")", "\n", "r_a", "=", "tf", ".", "reshape", "(", "r_a", ",", "[", "-", "1", ",", "self", ".", "p", ".", "number_of_actions", ",", "self", ".", "p", ".", "number_of_predictions", "]", ")", "\n", "\n", "action_input", "=", "tf", ".", "reshape", "(", "action_input", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "action_input", ")", ",", "[", "1", "]", "]", ",", "0", ")", ")", "\n", "r_list", "=", "tf", ".", "reduce_sum", "(", "r_a", "*", "action_input", ",", "1", ")", "\n", "\n", "a", "=", "tf", ".", "argmax", "(", "tf", ".", "reduce_sum", "(", "self", ".", "p", ".", "prediction_steps_usage", "*", "r_a", ",", "2", ")", ",", "1", ")", "\n", "return", "[", "r_list", ",", "a", "]", "\n", "\n", "", "", "elif", "self", ".", "p", ".", "algorithm", "==", "\"Q\"", ":", "\n", "            ", "assert", "action_input", "is", "not", "None", "\n", "\n", "if", "self", ".", "p", ".", "use_screen", ":", "\n", "                ", "nc", ".", "fc_layer", "(", "512", ",", "tmp", ")", "\n", "nc", ".", "relu", "(", ")", "\n", "q_a", "=", "nc", ".", "fc_layer", "(", "self", ".", "p", ".", "number_of_actions", ")", "\n", "\n", "a", "=", "tf", ".", "argmax", "(", "q_a", ",", "1", ")", "\n", "\n", "q_a", "=", "q_a", "-", "tf", ".", "reduce_mean", "(", "q_a", ",", "reduction_indices", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "q_a", "=", "tf", ".", "reduce_sum", "(", "q_a", "*", "action_input", ",", "1", ")", "\n", "\n", "nc", ".", "fc_layer", "(", "512", ",", "tmp", ")", "\n", "nc", ".", "relu", "(", ")", "\n", "q", "=", "nc", ".", "fc_layer", "(", "1", ")", "\n", "\n", "q", "=", "tf", ".", "reshape", "(", "q", ",", "[", "-", "1", "]", ")", "\n", "\n", "q_list", "=", "q", "+", "q_a", "\n", "\n", "return", "[", "q_list", ",", "a", "]", "\n", "\n", "", "else", ":", "\n", "                ", "q_a", "=", "nc", ".", "fc_layer", "(", "self", ".", "p", ".", "number_of_actions", ",", "tmp", ")", "\n", "\n", "a", "=", "tf", ".", "argmax", "(", "q_a", ",", "1", ")", "\n", "\n", "q_list", "=", "tf", ".", "reduce_sum", "(", "q_a", "*", "action_input", ",", "1", ")", "\n", "return", "[", "q_list", ",", "a", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown algorithm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Graph._get_copy_weights_list_operator": [[433, 448], ["zip", "tensorflow.group", "tensorflow.get_collection", "tensorflow.get_collection", "range", "len", "assign_ops.append", "tensorflow.assign"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_copy_weights_list_operator", "(", "list_with_names_c", ",", "list_with_names_v", ")", ":", "\n", "        ", "\"\"\"copy weights from network_c to network_v\n\n        Args:\n            list_with_names_c: target scopes\n            list_with_names_v: source scopes\"\"\"", "\n", "assign_ops", "=", "[", "]", "\n", "for", "network_name_c", ",", "network_name_v", "in", "zip", "(", "list_with_names_c", ",", "list_with_names_v", ")", ":", "\n", "            ", "vars_c", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "network_name_c", ")", "\n", "vars_v", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "network_name_v", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "vars_v", ")", ")", ":", "\n", "                ", "assign_ops", ".", "append", "(", "tf", ".", "assign", "(", "vars_v", "[", "i", "]", ",", "vars_c", "[", "i", "]", ")", ")", "\n", "", "", "assign_all", "=", "tf", ".", "group", "(", "*", "assign_ops", ")", "\n", "return", "assign_all", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.__init__": [[25, 90], ["td_or_not_td.alg.utils.TimeMeasurement", "tensorflow.Graph", "tensorflow.GPUOptions", "print", "print", "io.open", "tensorflow.Session", "td_or_not_td.alg.graph.Graph", "range", "tensorflow.train.Saver", "td_or_not_td.alg.utils.NetworkSaver", "main.Main.sess.run", "os.path.join", "main.Main.rm_list.append", "main.Main.agent_list.append", "tensorflow.global_variables_initializer", "queue.Queue", "queue.Queue.put", "range", "range", "tr.start", "tr.join", "tensorflow.ConfigProto", "td_or_not_td.alg.replaymemory.ReplayMemory", "td_or_not_td.alg.graph.Agent", "threads.append", "threads.append", "threading.Thread", "threading.Thread"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Agent.run", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.TimeMeasurement.start"], ["def", "__init__", "(", "self", ",", "parameter", "=", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "parameter", "\n", "self", ".", "time_m", "=", "TimeMeasurement", "(", ")", "\n", "self", ".", "g", "=", "tf", ".", "Graph", "(", ")", "\n", "self", ".", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "per_process_gpu_memory_fraction", "=", "self", ".", "p", ".", "gpu_memory_fraction", ")", "\n", "\n", "if", "self", ".", "p", ".", "eval_run", ":", "\n", "            ", "print", "(", "\"########## EVAL {} ##########\"", ".", "format", "(", "self", ".", "p", ".", "main_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"########## RUNNING {} ##########\"", ".", "format", "(", "self", ".", "p", ".", "main_path", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "p", ".", "run_on_gpu", ":", "\n", "            ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "\"\"", "\n", "\n", "os", ".", "environ", "[", "'MKL_NUM_THREADS'", "]", "=", "\"1\"", "\n", "os", ".", "environ", "[", "'NUMEXPR_NUM_THREADS'", "]", "=", "\"1\"", "\n", "os", ".", "environ", "[", "'OMP_NUM_THREADS'", "]", "=", "\"1\"", "\n", "\n", "", "if", "self", ".", "p", ".", "eval_run", ":", "\n", "            ", "if", "self", ".", "p", ".", "single_eval", ":", "\n", "                ", "log_file_name", "=", "'evaluation_log_of_{}.txt'", ".", "format", "(", "self", ".", "p", ".", "single_eval_id", ")", "\n", "", "else", ":", "\n", "                ", "log_file_name", "=", "'evaluation_log.txt'", "\n", "\n", "", "", "else", ":", "\n", "            ", "log_file_name", "=", "'training_log.txt'", "\n", "\n", "", "self", ".", "logfile", "=", "None", "\n", "self", ".", "sess", "=", "None", "\n", "with", "open", "(", "p_join", "(", "self", ".", "p", ".", "main_path", ",", "log_file_name", ")", ",", "'w'", ")", "as", "self", ".", "logfile", ",", "tf", ".", "Session", "(", "graph", "=", "self", ".", "g", ",", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "gpu_options", "=", "self", ".", "gpu_options", ",", "\n", "inter_op_parallelism_threads", "=", "self", ".", "p", ".", "number_of_agents", ",", "\n", "intra_op_parallelism_threads", "=", "1", ")", ")", "as", "self", ".", "sess", ":", "\n", "\n", "            ", "self", ".", "graph", "=", "Graph", "(", "self", ".", "p", ")", "\n", "\n", "self", ".", "rm_list", "=", "[", "]", "\n", "self", ".", "agent_list", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "self", ".", "p", ".", "number_of_agents", ")", ":", "\n", "                ", "self", ".", "rm_list", ".", "append", "(", "ReplayMemory", "(", "self", ".", "p", ")", ")", "\n", "self", ".", "agent_list", ".", "append", "(", "Agent", "(", "rank", ",", "self", ".", "sess", ",", "self", ".", "graph", ",", "self", ".", "rm_list", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "self", ".", "graph", ".", "main_var", ",", "\n", "max_to_keep", "=", "self", ".", "p", ".", "stop_after", "//", "self", ".", "p", ".", "save_network_occurrence", "+", "1", "\n", ")", "\n", "self", ".", "saver", "=", "NetworkSaver", "(", "self", ".", "sess", ",", "saver", ",", "self", ".", "p", ".", "main_path", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "threads", "=", "[", "]", "\n", "if", "not", "self", ".", "p", ".", "eval_run", ":", "\n", "                ", "global_t", "=", "queue", ".", "Queue", "(", ")", "\n", "global_t", ".", "put", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "p", ".", "number_of_agents", ")", ":", "\n", "                    ", "threads", ".", "append", "(", "threading", ".", "Thread", "(", "target", "=", "self", ".", "run_train", ",", "args", "=", "(", "n", ",", "global_t", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "n", "in", "range", "(", "self", ".", "p", ".", "number_of_eval_agents", ")", ":", "\n", "                    ", "threads", ".", "append", "(", "threading", ".", "Thread", "(", "target", "=", "self", ".", "run_eval", ",", "args", "=", "(", "n", ",", ")", ")", ")", "\n", "\n", "", "", "for", "tr", "in", "threads", ":", "\n", "                ", "tr", ".", "start", "(", ")", "\n", "", "for", "tr", "in", "threads", ":", "\n", "                ", "tr", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main._get_eps": [[91, 96], ["float"], "methods", ["None"], ["", "", "", "def", "_get_eps", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "p", ".", "exploration_time", ":", "\n", "            ", "return", "1.", "-", "t", "*", "0.99", "/", "float", "(", "self", ".", "p", ".", "exploration_time", ")", "\n", "", "else", ":", "\n", "            ", "return", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main._action_vector": [[97, 101], ["numpy.zeros"], "methods", ["None"], ["", "", "def", "_action_vector", "(", "self", ",", "action_index", ")", ":", "\n", "        ", "a", "=", "np", ".", "zeros", "(", "[", "self", ".", "p", ".", "number_of_actions", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "a", "[", "action_index", "]", "=", "1", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.run_train": [[104, 229], ["Environment", "agent.run", "main.Main._get_eps", "rm.next_pre_save", "Environment.step", "rm.save", "rm.next_pre_save", "rm.get_size", "main.Main.run_train.env_step"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Agent.run", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main._get_eps", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.next_pre_save", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.step", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.NetworkSaver.save", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.next_pre_save", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.get_size"], ["", "def", "run_train", "(", "self", ",", "rank", ",", "global_t", ")", ":", "\n", "        ", "\"\"\"Training code for one thread.\n\n        Args:\n            rank (int): Thread rank.\n            global_t (queue.Queue): Global time step\n        \"\"\"", "\n", "\n", "env", "=", "Environment", "(", "p", ".", "doom_lvl", ",", "p", ".", "data_format", ",", "p", ".", "window_visible", ")", "\n", "\n", "rm", "=", "self", ".", "rm_list", "[", "rank", "]", "\n", "agent", "=", "self", ".", "agent_list", "[", "rank", "]", "\n", "\n", "agent", ".", "run", "(", "\"sync\"", ")", "\n", "\n", "eps", "=", "self", ".", "_get_eps", "(", "0", ")", "\n", "\n", "rm", ".", "next_pre_save", "(", "*", "env", ".", "get_state", "(", ")", ")", "\n", "\n", "def", "env_step", "(", ")", ":", "\n", "            ", "if", "self", ".", "p", ".", "use_eps_exploration", "and", "random", "(", ")", "<", "eps", ":", "\n", "                ", "action_id", "=", "randint", "(", "0", ",", "self", ".", "p", ".", "number_of_actions", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "action_id", "=", "agent", ".", "run", "(", "\"action\"", ")", "\n", "", "r", ",", "_", ",", "is_terminal_state", "=", "env", ".", "step", "(", "action_id", ")", "\n", "rm", ".", "save", "(", "self", ".", "_action_vector", "(", "action_id", ")", ",", "r", ",", "float", "(", "is_terminal_state", ")", ")", "\n", "rm", ".", "next_pre_save", "(", "*", "env", ".", "get_state", "(", ")", ")", "\n", "return", "is_terminal_state", "\n", "\n", "# pre-learning env runs for the experience replay", "\n", "", "while", "rm", ".", "get_size", "(", ")", "<", "self", ".", "p", ".", "replay_memory_size", ":", "\n", "            ", "env_step", "(", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "if", "self", ".", "p", ".", "algorithm", "==", "\"Q\"", ":", "\n", "                ", "agent", ".", "run", "(", "\"sync_target\"", ")", "\n", "", "self", ".", "time_m", ".", "start", "(", ")", "\n", "\n", "print_log", "=", "PeriodicEvent", "(", "self", ".", "p", ".", "print_log_occurrence", ")", "\n", "save_network", "=", "PeriodicEvent", "(", "self", ".", "p", ".", "save_network_occurrence", ",", "\n", "first_event_at_zero_time", "=", "True", ")", "\n", "update_target", "=", "PeriodicEvent", "(", "self", ".", "p", ".", "update_target_occurrence", ")", "\n", "\n", "", "t", "=", "1", "\n", "while", "t", "<", "self", ".", "p", ".", "stop_after", "+", "1", ":", "\n", "            ", "agent", ".", "run", "(", "\"sync\"", ")", "\n", "\n", "# propagate the environment", "\n", "is_terminal", "=", "False", "\n", "t_n", "=", "0", "\n", "\n", "if", "self", ".", "p", ".", "algorithm", "in", "(", "\"a3c\"", ",", "\"Q\"", ")", ":", "\n", "                ", "def", "step_condition", "(", ")", ":", "\n", "                    ", "return", "t_n", "<", "self", ".", "p", ".", "batch_size", "and", "not", "is_terminal", "\n", "", "", "else", ":", "\n", "                ", "def", "step_condition", "(", ")", ":", "\n", "                    ", "return", "t_n", "<", "self", ".", "p", ".", "batch_size", "\n", "\n", "", "", "while", "step_condition", "(", ")", ":", "\n", "                ", "is_terminal", "=", "env_step", "(", ")", "\n", "t_n", "+=", "1", "\n", "\n", "# updating time", "\n", "", "t", "=", "global_t", ".", "get", "(", ")", "+", "t_n", "\n", "global_t", ".", "put", "(", "t", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "print_log", ".", "update_time", "(", "t", ")", "\n", "save_network", ".", "update_time", "(", "t", ")", "\n", "update_target", ".", "update_time", "(", "t", ")", "\n", "\n", "", "rm", ".", "t", "=", "t", "\n", "\n", "if", "self", ".", "p", ".", "use_eps_exploration", ":", "\n", "                ", "eps", "=", "self", ".", "_get_eps", "(", "t", ")", "\n", "\n", "# get value prediction for the target calculations in TD", "\n", "", "if", "self", ".", "p", ".", "algorithm", "in", "(", "\"a3c\"", ",", "\"Q\"", ")", ":", "\n", "                ", "rm", ".", "v_prediction_list", "=", "agent", ".", "run", "(", "\"v_list\"", ")", "\n", "\n", "# print log info", "\n", "", "if", "rank", "==", "0", ":", "\n", "                ", "if", "print_log", ".", "is_event", "(", ")", ":", "\n", "                    ", "loss", "=", "agent", ".", "run", "(", "\"loss\"", ")", "\n", "\n", "self", ".", "time_m", ".", "end", "(", ")", "\n", "time10000", "=", "self", ".", "time_m", ".", "get", "(", ")", "\n", "self", ".", "time_m", ".", "reset", "(", ")", "\n", "self", ".", "time_m", ".", "start", "(", ")", "\n", "\n", "self", ".", "logfile", ".", "write", "(", "\"{}  {}  {}  {}\\n\"", ".", "format", "(", "\n", "int", "(", "t", "%", "self", ".", "p", ".", "save_network_occurrence", "//", "self", ".", "p", ".", "print_log_occurrence", ")", ",", "\n", "time10000", ",", "\n", "int", "(", "time10000", "*", "float", "(", "\n", "(", "self", ".", "p", ".", "stop_after", "-", "t", ")", "//", "self", ".", "p", ".", "print_log_occurrence", ")", "/", "3600.", ")", ",", "\n", "rm", ".", "last_episode_reward", ")", ")", "\n", "self", ".", "logfile", ".", "flush", "(", ")", "\n", "\n", "st", "=", "\"[{:3}/{:3}]   \"", "+", "\"[Time:{:5.1f}]   \"", "+", "\"[Time left:{:5} h]   \"", "+", "\"[Reward:{:6.1f}]   \"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "loss", ")", ")", ":", "\n", "                        ", "st", "+=", "\"[Loss:{:10.6f}]   \"", "\n", "\n", "", "print", "(", "st", ".", "format", "(", "\n", "int", "(", "t", "%", "self", ".", "p", ".", "save_network_occurrence", "//", "self", ".", "p", ".", "print_log_occurrence", ")", ",", "\n", "self", ".", "p", ".", "save_network_occurrence", "//", "self", ".", "p", ".", "print_log_occurrence", ",", "\n", "time10000", ",", "\n", "int", "(", "time10000", "*", "float", "(", "\n", "(", "self", ".", "p", ".", "stop_after", "-", "t", ")", "//", "self", ".", "p", ".", "print_log_occurrence", ")", "/", "3600.", ")", ",", "\n", "rm", ".", "last_episode_reward", ",", "\n", "*", "loss", ")", ",", "flush", "=", "True", ")", "\n", "\n", "# train step", "\n", "", "", "agent", ".", "run", "(", "\"train\"", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "if", "update_target", ".", "is_event", "(", ")", ":", "\n", "                    ", "if", "self", ".", "p", ".", "algorithm", "==", "\"Q\"", ":", "\n", "                        ", "agent", ".", "run", "(", "\"sync_target\"", ")", "\n", "\n", "", "", "if", "save_network", ".", "is_event", "(", ")", ":", "\n", "                    ", "self", ".", "saver", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.eval_print": [[232, 237], ["print", "file.write", "file.flush"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "eval_print", "(", "rank", ",", "string", ",", "file", ")", ":", "\n", "        ", "print", "(", "\"rank {}:  {}\"", ".", "format", "(", "rank", ",", "string", ")", ",", "flush", "=", "True", ")", "\n", "file", ".", "write", "(", "string", "+", "\"\\n\"", ")", "\n", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.run_eval": [[238, 321], ["io.open", "Environment", "threading.Lock", "main.Main.eval_print", "os.path.join", "main.Main.eval_print", "os.path.join", "main.Main.eval_print", "agent.run", "main.Main.eval_print", "numpy.full", "numpy.full", "range", "main.Main.eval_print", "main.Main.eval_print", "sum", "sum", "main.Main.logfile.write", "main.Main.logfile.flush", "os.path.isfile", "os.path.isfile", "time.sleep", "time.sleep", "rm.next_pre_save", "agent.run", "Environment.step", "rm.save", "main.Main.saver.load", "main.Main._action_vector", "float", "print", "time.sleep", "Environment.get_state", "str"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.eval_print", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.eval_print", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.eval_print", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Agent.run", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.eval_print", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.eval_print", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main.eval_print", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.next_pre_save", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.graph.Agent.run", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.step", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.NetworkSaver.save", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.NetworkSaver.load", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.main.Main._action_vector", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.env.env_doom.Environment.get_state"], ["", "def", "run_eval", "(", "self", ",", "rank", ")", ":", "\n", "        ", "\"\"\"Evaluating code for one thread.\n\n        Args:\n            rank (int): Thread rank.\n        \"\"\"", "\n", "\n", "with", "open", "(", "p_join", "(", "self", ".", "p", ".", "main_path", ",", "\"eval_log_{}.txt\"", ".", "format", "(", "rank", ")", ")", ",", "'w'", ")", "as", "status_log_file", ":", "\n", "            ", "env", "=", "Environment", "(", "p", ".", "doom_lvl", ",", "p", ".", "data_format", ",", "p", ".", "window_visible", ")", "\n", "\n", "rm", "=", "self", ".", "rm_list", "[", "rank", "]", "\n", "agent", "=", "self", ".", "agent_list", "[", "rank", "]", "\n", "\n", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "last_file_id", "=", "self", ".", "p", ".", "stop_after", "//", "self", ".", "p", ".", "save_network_occurrence", "+", "1", "\n", "\n", "if", "self", ".", "p", ".", "single_eval", ":", "\n", "                ", "if", "rank", "!=", "0", ":", "\n", "                    ", "return", "\n", "", "else", ":", "\n", "                    ", "file_id", "=", "self", ".", "p", ".", "single_eval_id", "\n", "last_file_id", "=", "self", ".", "p", ".", "single_eval_id", "+", "1", "\n", "self", ".", "eval_print", "(", "rank", ",", "\"single evaluation of {}  \"", ".", "format", "(", "file_id", ")", ",", "\n", "status_log_file", ")", "\n", "", "", "else", ":", "\n", "                ", "file_id", "=", "rank", "\n", "\n", "output_str", "=", "\"evaluation of:  \"", "\n", "while", "file_id", "<", "last_file_id", ":", "\n", "                    ", "output_str", "+=", "\"{}  \"", ".", "format", "(", "file_id", ")", "\n", "file_id", "+=", "self", ".", "p", ".", "number_of_eval_agents", "\n", "", "self", ".", "eval_print", "(", "rank", ",", "output_str", ",", "status_log_file", ")", "\n", "file_id", "=", "rank", "\n", "\n", "", "while", "file_id", "<", "last_file_id", ":", "\n", "                ", "file_path", "=", "p_join", "(", "self", ".", "p", ".", "main_path", ",", "\"model_{}.ckpt\"", ".", "format", "(", "file_id", ")", ")", "\n", "found_save", "=", "False", "\n", "self", ".", "eval_print", "(", "rank", ",", "\"waiting for model_{}.ckpt\"", ".", "format", "(", "file_id", ")", ",", "status_log_file", ")", "\n", "while", "not", "found_save", ":", "\n", "                    ", "if", "os", ".", "path", ".", "isfile", "(", "file_path", "+", "\".index\"", ")", "and", "os", ".", "path", ".", "isfile", "(", "file_path", "+", "\".meta\"", ")", ":", "\n", "                        ", "time", ".", "sleep", "(", "3.", ")", "\n", "try", ":", "\n", "                            ", "self", ".", "saver", ".", "load", "(", "file_id", ")", "\n", "found_save", "=", "True", "\n", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", ":", "\n", "                            ", "raise", "\n", "", "except", "tf", ".", "errors", ".", "NotFoundError", "as", "e", ":", "\n", "                            ", "print", "(", "str", "(", "e", ")", ")", "\n", "time", ".", "sleep", "(", "5.", ")", "\n", "", "", "else", ":", "\n", "                        ", "time", ".", "sleep", "(", "30.", ")", "\n", "", "", "agent", ".", "run", "(", "\"sync\"", ")", "\n", "\n", "self", ".", "eval_print", "(", "\n", "rank", ",", "\n", "\"model imported | beginning evaluation of model_{}.ckpt\"", ".", "format", "(", "file_id", ")", ",", "\n", "status_log_file", "\n", ")", "\n", "\n", "score", "=", "np", ".", "full", "(", "[", "self", ".", "p", ".", "number_of_eval_runs", "]", ",", "0.", ")", "\n", "score2", "=", "np", ".", "full", "(", "[", "self", ".", "p", ".", "number_of_eval_runs", "]", ",", "0.", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "p", ".", "number_of_eval_runs", ")", ":", "\n", "                    ", "is_terminal", "=", "False", "\n", "while", "not", "is_terminal", ":", "\n", "                        ", "rm", ".", "next_pre_save", "(", "*", "env", ".", "get_state", "(", ")", ")", "\n", "action_id", "=", "agent", ".", "run", "(", "\"action\"", ")", "\n", "reward", ",", "reward_eval", ",", "is_terminal", "=", "env", ".", "step", "(", "action_id", ")", "\n", "rm", ".", "save", "(", "self", ".", "_action_vector", "(", "action_id", ")", ",", "reward", ",", "float", "(", "is_terminal", ")", ")", "\n", "score", "[", "i", "]", "+=", "reward", "\n", "score2", "[", "i", "]", "+=", "reward_eval", "\n", "\n", "", "", "avg_score", "=", "sum", "(", "score", ")", "/", "self", ".", "p", ".", "number_of_eval_runs", "\n", "avg_score2", "=", "sum", "(", "score2", ")", "/", "self", ".", "p", ".", "number_of_eval_runs", "\n", "\n", "with", "lock", ":", "\n", "                    ", "self", ".", "logfile", ".", "write", "(", "\"{}  {}  {}\\n\"", ".", "format", "(", "file_id", ",", "avg_score", ",", "avg_score2", ")", ")", "\n", "self", ".", "logfile", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "eval_print", "(", "rank", ",", "\"finished evaluation\"", ",", "status_log_file", ")", "\n", "file_id", "+=", "self", ".", "p", ".", "number_of_eval_agents", "\n", "\n", "", "self", ".", "eval_print", "(", "rank", ",", "\"all evaluations are finished\"", ",", "status_log_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.__init__": [[10, 62], ["collections.deque", "collections.deque", "collections.deque", "collections.deque", "collections.deque", "float", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "replaymemory.ReplayMemory.__init__.data_shape"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "\"\"\"Contains all information that needs to be fed to TensorFlow.\n\n        Args:\n            parameter (config.Parameter): Current parameter.\n        \"\"\"", "\n", "self", ".", "_p", "=", "parameter", "\n", "\n", "self", ".", "_s", "=", "deque", "(", "maxlen", "=", "self", ".", "_p", ".", "replay_memory_size", ")", "\n", "self", ".", "_v", "=", "deque", "(", "maxlen", "=", "self", ".", "_p", ".", "replay_memory_size", ")", "\n", "self", ".", "_a", "=", "deque", "(", "maxlen", "=", "self", ".", "_p", ".", "replay_memory_size", ")", "\n", "self", ".", "_r", "=", "deque", "(", "maxlen", "=", "self", ".", "_p", ".", "replay_memory_size", ")", "\n", "self", ".", "_t", "=", "deque", "(", "maxlen", "=", "self", ".", "_p", ".", "replay_memory_size", ")", "\n", "\n", "if", "self", ".", "_p", ".", "data_format", "==", "\"NHWC\"", ":", "\n", "            ", "def", "data_shape", "(", "i", ")", ":", "\n", "                ", "return", "[", "i", ",", "self", ".", "_p", ".", "screen_res_y", ",", "self", ".", "_p", ".", "screen_res_x", ",", "self", ".", "_p", ".", "input_image_number", "]", "\n", "", "", "else", ":", "\n", "            ", "def", "data_shape", "(", "i", ")", ":", "\n", "                ", "return", "[", "i", ",", "self", ".", "_p", ".", "input_image_number", ",", "self", ".", "_p", ".", "screen_res_y", ",", "self", ".", "_p", ".", "screen_res_x", "]", "\n", "\n", "", "", "if", "not", "self", ".", "_p", ".", "use_vector_input", ":", "\n", "            ", "self", ".", "next_vector", "=", "lambda", ":", "np", ".", "full", "(", "[", "1", ",", "self", ".", "_p", ".", "input_vector_size", "]", ",", "0.0", ")", "\n", "self", ".", "vector_batch", "=", "lambda", ":", "np", ".", "full", "(", "[", "self", ".", "_p", ".", "batch_size", ",", "self", ".", "_p", ".", "input_vector_size", "]", ",", "0.0", ")", "\n", "self", ".", "vector_list_for_v", "=", "lambda", ":", "np", ".", "full", "(", "[", "self", ".", "_p", ".", "target_v_size", ",", "self", ".", "_p", ".", "input_vector_size", "]", ",", "0.0", ")", "\n", "\n", "", "if", "not", "self", ".", "_p", ".", "use_screen", ":", "\n", "            ", "self", ".", "next_state", "=", "lambda", ":", "np", ".", "full", "(", "data_shape", "(", "1", ")", ",", "0.0", ")", "\n", "self", ".", "state_batch", "=", "lambda", ":", "np", ".", "full", "(", "data_shape", "(", "self", ".", "_p", ".", "batch_size", ")", ",", "0.0", ")", "\n", "self", ".", "state_list_for_v", "=", "lambda", ":", "np", ".", "full", "(", "data_shape", "(", "self", ".", "_p", ".", "target_v_size", ")", ",", "0.0", ")", "\n", "\n", "# The next state information is pre-saved here until the full", "\n", "# information (state, vector, action, reward, is_terminal) is available:", "\n", "", "self", ".", "next_s", "=", "None", "\n", "self", ".", "next_v", "=", "None", "\n", "\n", "# for calculating target_v_batch for TD algorithms:", "\n", "self", ".", "v_prediction_list", "=", "None", "\n", "\n", "self", ".", "_learning_rate", "=", "self", ".", "_p", ".", "rms_learning_rate", "\n", "self", ".", "_delta_learning_rate", "=", "(", "self", ".", "_learning_rate", "-", "1e-8", ")", "/", "float", "(", "self", ".", "_p", ".", "stop_after", ")", "\n", "self", ".", "t", "=", "0", "\n", "\n", "# for logging:", "\n", "self", ".", "last_episode_reward", "=", "0.", "\n", "self", ".", "current_episode_reward", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.next_pre_save": [[63, 74], ["copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "next_pre_save", "(", "self", ",", "state", ",", "vector", "=", "None", ")", ":", "\n", "        ", "\"\"\"Pre-save next observation until full information is available.\n\n        Args:\n            state: Image observation.\n            vector: Additional measurement observations.\n        \"\"\"", "\n", "assert", "self", ".", "next_s", "is", "None", "\n", "self", ".", "next_s", "=", "copy", ".", "deepcopy", "(", "state", ")", "\n", "if", "vector", "is", "not", "None", ":", "\n", "            ", "self", ".", "next_v", "=", "copy", ".", "deepcopy", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.save": [[75, 95], ["replaymemory.ReplayMemory._s.append", "replaymemory.ReplayMemory._a.append", "replaymemory.ReplayMemory._r.append", "replaymemory.ReplayMemory._t.append", "replaymemory.ReplayMemory._v.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "", "def", "save", "(", "self", ",", "action", ",", "reward", ",", "is_terminal", ")", ":", "\n", "        ", "\"\"\"Save full transition.\n\n        Args:\n            action: One-hot action vector.\n            reward: Reward received for current action.\n            is_terminal: If True the next state will be from a new episode.\n        \"\"\"", "\n", "self", ".", "current_episode_reward", "+=", "reward", "\n", "assert", "self", ".", "next_s", "is", "not", "None", "\n", "self", ".", "_s", ".", "append", "(", "self", ".", "next_s", ")", "\n", "self", ".", "next_s", "=", "None", "\n", "if", "self", ".", "next_v", "is", "not", "None", ":", "\n", "            ", "self", ".", "_v", ".", "append", "(", "self", ".", "next_v", ")", "\n", "", "self", ".", "_a", ".", "append", "(", "copy", ".", "deepcopy", "(", "action", ")", ")", "\n", "self", ".", "_r", ".", "append", "(", "copy", ".", "deepcopy", "(", "reward", ")", ")", "\n", "self", ".", "_t", ".", "append", "(", "copy", ".", "deepcopy", "(", "is_terminal", ")", ")", "\n", "if", "is_terminal", ":", "\n", "            ", "self", ".", "last_episode_reward", "=", "self", ".", "current_episode_reward", "\n", "self", ".", "current_episode_reward", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.reset": [[96, 103], ["replaymemory.ReplayMemory._s.clear", "replaymemory.ReplayMemory._v.clear", "replaymemory.ReplayMemory._a.clear", "replaymemory.ReplayMemory._r.clear", "replaymemory.ReplayMemory._t.clear"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset all experience.\"\"\"", "\n", "self", ".", "_s", ".", "clear", "(", ")", "\n", "self", ".", "_v", ".", "clear", "(", ")", "\n", "self", ".", "_a", ".", "clear", "(", ")", "\n", "self", ".", "_r", ".", "clear", "(", ")", "\n", "self", ".", "_t", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.get_size": [[104, 107], ["len"], "methods", ["None"], ["", "def", "get_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current experience replay size.\"\"\"", "\n", "return", "len", "(", "self", ".", "_s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.learning_rate": [[110, 112], ["float"], "methods", ["None"], ["", "def", "learning_rate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_learning_rate", "-", "self", ".", "_delta_learning_rate", "*", "float", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.next_state": [[113, 115], ["None"], "methods", ["None"], ["", "def", "next_state", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "next_s", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.next_vector": [[116, 118], ["None"], "methods", ["None"], ["", "def", "next_vector", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "next_v", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.state_list_for_v": [[119, 125], ["builtins.range", "len", "s_list.append"], "methods", ["None"], ["", "def", "state_list_for_v", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_p", ".", "v_offset_list", "[", "0", "]", "==", "0", "\n", "s_list", "=", "[", "self", ".", "next_s", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "_p", ".", "v_offset_list", ")", ")", ":", "\n", "            ", "s_list", ".", "append", "(", "self", ".", "_s", "[", "-", "self", ".", "_p", ".", "v_offset_list", "[", "i", "]", "]", ")", "\n", "", "return", "s_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.vector_list_for_v": [[126, 132], ["builtins.range", "len", "m_list.append"], "methods", ["None"], ["", "def", "vector_list_for_v", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_p", ".", "v_offset_list", "[", "0", "]", "==", "0", "\n", "m_list", "=", "[", "self", ".", "next_v", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "_p", ".", "v_offset_list", ")", ")", ":", "\n", "            ", "m_list", ".", "append", "(", "self", ".", "_v", "[", "-", "self", ".", "_p", ".", "v_offset_list", "[", "i", "]", "]", ")", "\n", "", "return", "m_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.state_batch": [[133, 136], ["list", "replaymemory.ReplayMemory.get_size", "itertools.islice"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.get_size"], ["", "def", "state_batch", "(", "self", ")", ":", "\n", "        ", "last", "=", "self", ".", "get_size", "(", ")", "-", "self", ".", "_p", ".", "batch_offset", "\n", "return", "list", "(", "islice", "(", "self", ".", "_s", ",", "last", "-", "self", ".", "_p", ".", "batch_size", ",", "last", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.vector_batch": [[137, 140], ["list", "replaymemory.ReplayMemory.get_size", "itertools.islice"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.get_size"], ["", "def", "vector_batch", "(", "self", ")", ":", "\n", "        ", "last", "=", "self", ".", "get_size", "(", ")", "-", "self", ".", "_p", ".", "batch_offset", "\n", "return", "list", "(", "islice", "(", "self", ".", "_v", ",", "last", "-", "self", ".", "_p", ".", "batch_size", ",", "last", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.action_batch": [[141, 144], ["list", "replaymemory.ReplayMemory.get_size", "itertools.islice"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.get_size"], ["", "def", "action_batch", "(", "self", ")", ":", "\n", "        ", "last", "=", "self", ".", "get_size", "(", ")", "-", "self", ".", "_p", ".", "batch_offset", "\n", "return", "list", "(", "islice", "(", "self", ".", "_a", ",", "last", "-", "self", ".", "_p", ".", "batch_size", ",", "last", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.reward_batch": [[145, 148], ["list", "replaymemory.ReplayMemory.get_size", "itertools.islice"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.get_size"], ["", "def", "reward_batch", "(", "self", ")", ":", "\n", "        ", "last", "=", "self", ".", "get_size", "(", ")", "-", "self", ".", "_p", ".", "batch_offset", "\n", "return", "list", "(", "islice", "(", "self", ".", "_r", ",", "last", "-", "self", ".", "_p", ".", "batch_size", ",", "last", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.terminal_batch": [[149, 152], ["list", "replaymemory.ReplayMemory.get_size", "itertools.islice"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.get_size"], ["", "def", "terminal_batch", "(", "self", ")", ":", "\n", "        ", "last", "=", "self", ".", "get_size", "(", ")", "-", "self", ".", "_p", ".", "batch_offset", "\n", "return", "list", "(", "islice", "(", "self", ".", "_t", ",", "last", "-", "self", ".", "_p", ".", "batch_size", ",", "last", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.value_target_batch": [[153, 191], ["replaymemory.ReplayMemory.get_size", "replaymemory.ReplayMemory.value_target_batch.get_r_sum_list"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.replaymemory.ReplayMemory.get_size"], ["", "def", "value_target_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_p", ".", "algorithm", "==", "\"Qmc\"", ":", "\n", "            ", "def", "get_r_sum_list", "(", "rm_i", ")", ":", "\n", "                ", "r_list", "=", "[", "]", "\n", "for", "prediction_step", "in", "self", ".", "_p", ".", "prediction_steps", ":", "\n", "                    ", "i_off", "=", "rm_i", "+", "prediction_step", "-", "1", "\n", "assert", "i_off", "<", "self", ".", "get_size", "(", ")", "\n", "# if a terminal state occurs, the target is not used:", "\n", "if", "any", "(", "islice", "(", "self", ".", "_t", ",", "rm_i", ",", "i_off", ")", ")", ":", "\n", "                        ", "r_list", ".", "append", "(", "self", ".", "_p", ".", "qmc_no_target_available_encoding", ")", "\n", "", "else", ":", "\n", "                        ", "r_tmp", "=", "self", ".", "_r", "[", "i_off", "]", "\n", "for", "j", "in", "reversed", "(", "range", "(", "rm_i", ",", "i_off", ")", ")", ":", "\n", "                            ", "r_tmp", "=", "self", ".", "_r", "[", "j", "]", "+", "self", ".", "_p", ".", "discount", "*", "r_tmp", "\n", "", "r_list", ".", "append", "(", "r_tmp", ")", "\n", "", "", "return", "r_list", "\n", "\n", "", "last", "=", "self", ".", "get_size", "(", ")", "-", "self", ".", "_p", ".", "batch_offset", "\n", "return", "[", "get_r_sum_list", "(", "i", ")", "for", "i", "in", "range", "(", "last", "-", "self", ".", "_p", ".", "batch_size", ",", "last", ")", "]", "\n", "\n", "", "elif", "self", ".", "_p", ".", "algorithm", "in", "(", "\"Q\"", ",", "\"a3c\"", ")", ":", "\n", "            ", "r_batch", "=", "[", "0.", "]", "*", "self", ".", "_p", ".", "batch_size", "\n", "r", "=", "0.", "\n", "for", "i", "in", "range", "(", "self", ".", "_p", ".", "batch_size", ")", ":", "\n", "                ", "if", "self", ".", "_t", "[", "-", "(", "i", "+", "1", ")", "]", ":", "\n", "                    ", "r", "=", "self", ".", "_r", "[", "-", "(", "i", "+", "1", ")", "]", "\n", "", "else", ":", "\n", "                    ", "if", "i", "in", "self", ".", "_p", ".", "v_offset_list", ":", "\n", "                        ", "r", "=", "self", ".", "_r", "[", "-", "(", "i", "+", "1", ")", "]", "+", "self", ".", "_p", ".", "discount", "*", "self", ".", "v_prediction_list", "[", "\n", "self", ".", "_p", ".", "v_offset_list", ".", "index", "(", "i", ")", "]", "\n", "", "else", ":", "\n", "                        ", "r", "=", "self", ".", "_r", "[", "-", "(", "i", "+", "1", ")", "]", "+", "self", ".", "_p", ".", "discount", "*", "r", "\n", "\n", "", "", "r_batch", "[", "-", "(", "i", "+", "1", ")", "]", "=", "copy", ".", "copy", "(", "r", ")", "\n", "", "return", "r_batch", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"algorithm unknown\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.__init__": [[9, 26], ["print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "network_name", ",", "data_format", "=", "\"NHWC\"", ",", "reuse", "=", "False", ",", "input_layer", "=", "None", ",", "\n", "print_shape", "=", "False", ")", ":", "\n", "        ", "self", ".", "network_name", "=", "network_name", "\n", "assert", "data_format", "in", "(", "\"NHWC\"", ",", "\"NCHW\"", ")", "\n", "self", ".", "_data_format", "=", "data_format", "\n", "self", ".", "_reuse", "=", "reuse", "# call this class with same network_name & reuse=True to reuse weights", "\n", "self", ".", "_connector", "=", "input_layer", "\n", "self", ".", "_print_shape", "=", "print_shape", "\n", "\n", "self", ".", "_layer_number", "=", "0", "\n", "\n", "if", "self", ".", "_print_shape", ":", "\n", "            ", "print", "(", "\"\\nNetwork:\"", ",", "network_name", ",", "self", ".", "_data_format", ")", "\n", "\n", "", "self", ".", "_flatting_channels", "=", "None", "\n", "self", ".", "_flatting_dimension", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu": [[27, 32], ["layers.NetworkCreator._config_input", "layers.NetworkCreator._config_output", "print", "tensorflow.nn.relu"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_input", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_output", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.relu"], ["", "def", "relu", "(", "self", ",", "input_layer", "=", "None", ")", ":", "\n", "        ", "input_layer", "=", "self", ".", "_config_input", "(", "input_layer", ")", "\n", "if", "self", ".", "_print_shape", ":", "\n", "            ", "print", "(", "\"ReLu\"", ")", "\n", "", "return", "self", ".", "_config_output", "(", "tf", ".", "nn", ".", "relu", "(", "input_layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.conv_layer": [[33, 72], ["tensorflow.variable_scope", "tensorflow.variable_scope", "layers.NetworkCreator._config_input", "tensorflow.contrib.layers.variance_scaling_initializer", "tensorflow.get_variable", "tensorflow.constant_initializer", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.bias_add", "layers.NetworkCreator._config_output", "layers.NetworkCreator._get_name", "print", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "print", "layers.NetworkCreator.get_shape().as_list", "tensorflow.nn.bias_add.get_shape().as_list", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "tensorflow.nn.bias_add.get_shape"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_input", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_output", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._get_name"], ["", "def", "conv_layer", "(", "self", ",", "output_channels", ",", "filter_size", ",", "stride", ",", "input_layer", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "network_name", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "self", ".", "_get_name", "(", ")", ",", "reuse", "=", "self", ".", "_reuse", ")", ":", "\n", "                ", "input_layer", "=", "self", ".", "_config_input", "(", "input_layer", ")", "\n", "\n", "if", "self", ".", "_data_format", "==", "\"NHWC\"", ":", "\n", "                    ", "input_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "input_size_h", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "stride_shape", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "", "else", ":", "\n", "                    ", "input_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "input_size_h", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "stride_shape", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", "\n", "\n", "", "init", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "factor", "=", "1.", ",", "uniform", "=", "True", ")", "\n", "shape", "=", "[", "filter_size", ",", "filter_size", ",", "input_channels", ",", "output_channels", "]", "\n", "w_conv", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init", ")", "\n", "\n", "init", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", "\n", "shape", "=", "[", "output_channels", "]", "\n", "b_conv", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init", ")", "\n", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "input_layer", ",", "w_conv", ",", "stride_shape", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "data_format", "=", "self", ".", "_data_format", ")", "\n", "\n", "output", "=", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b_conv", ",", "data_format", "=", "self", ".", "_data_format", ")", "\n", "\n", "if", "self", ".", "_print_shape", ":", "\n", "                    ", "if", "(", "input_size_h", "-", "filter_size", ")", "%", "stride", "!=", "0", ":", "\n", "                        ", "print", "(", "\"unclean convolution:\"", ")", "\n", "", "print", "(", "self", ".", "_layer_number", ",", "\"Conv\"", ",", "\n", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "\" >> {\"", ",", "\n", "[", "filter_size", ",", "filter_size", ",", "input_channels", ",", "output_channels", "]", ",", "\n", "[", "stride", "]", ",", "\n", "\"} >> \"", ",", "\n", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "return", "self", ".", "_config_output", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.make_unflat": [[73, 99], ["layers.NetworkCreator._config_input", "layers.NetworkCreator._get_square", "tensorflow.reshape", "layers.NetworkCreator._config_output", "layers.NetworkCreator.get_shape().as_list", "print", "ValueError", "layers.NetworkCreator.get_shape().as_list", "tensorflow.reshape.get_shape().as_list", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "tensorflow.reshape.get_shape"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_input", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._get_square", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_output"], ["", "", "", "def", "make_unflat", "(", "self", ",", "input_layer", "=", "None", ",", "unflatting_channels", "=", "None", ")", ":", "\n", "        ", "input_layer", "=", "self", ".", "_config_input", "(", "input_layer", ")", "\n", "input_size", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "\n", "if", "unflatting_channels", "is", "None", ":", "# use value from last flatting:", "\n", "            ", "if", "self", ".", "_flatting_channels", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"input_channels unknown for upconv unflatting\"", ")", "\n", "", "output_size", "=", "self", ".", "_flatting_channels", "\n", "self", ".", "_flatting_channels", "=", "None", "\n", "", "else", ":", "\n", "            ", "output_size", "=", "unflatting_channels", "\n", "\n", "", "assert", "input_size", "%", "output_size", "==", "0", "\n", "dim", "=", "self", ".", "_get_square", "(", "input_size", "//", "output_size", ")", "\n", "assert", "dim", "!=", "-", "1", "\n", "if", "self", ".", "_data_format", "==", "\"NHWC\"", ":", "\n", "            ", "output_shape", "=", "[", "-", "1", ",", "dim", ",", "dim", ",", "output_size", "]", "\n", "", "else", ":", "\n", "            ", "output_shape", "=", "[", "-", "1", ",", "output_size", ",", "dim", ",", "dim", "]", "\n", "", "output", "=", "tf", ".", "reshape", "(", "input_layer", ",", "output_shape", ")", "\n", "if", "self", ".", "_print_shape", ":", "\n", "            ", "print", "(", "\"unflat\"", ",", "\n", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "\" >> \"", ",", "\n", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "return", "self", ".", "_config_output", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.upconv_layer": [[101, 164], ["tensorflow.variable_scope", "tensorflow.variable_scope", "layers.NetworkCreator._config_input", "tensorflow.contrib.layers.variance_scaling_initializer", "tensorflow.get_variable", "tensorflow.constant_initializer", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "tensorflow.nn.bias_add", "tensorflow.reshape", "layers.NetworkCreator._config_output", "layers.NetworkCreator._get_name", "len", "layers.NetworkCreator._make_unflat", "tensorflow.stack", "tensorflow.stack", "print", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "tensorflow.reshape.get_shape().as_list", "ValueError", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "tensorflow.shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "tensorflow.shape", "layers.NetworkCreator.get_shape", "tensorflow.reshape.get_shape"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_input", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_output", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._get_name", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._make_unflat"], ["", "def", "upconv_layer", "(", "self", ",", "output_channels", ",", "filter_size", ",", "stride", ",", "\n", "input_layer", "=", "None", ",", "input_channels", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "network_name", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "self", ".", "_get_name", "(", ")", ",", "reuse", "=", "self", ".", "_reuse", ")", ":", "\n", "                ", "input_layer", "=", "self", ".", "_config_input", "(", "input_layer", ")", "\n", "if", "len", "(", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "==", "2", ":", "\n", "                    ", "if", "input_channels", "is", "None", ":", "# use value from last flatting:", "\n", "                        ", "if", "self", ".", "_flatting_channels", "is", "None", ":", "\n", "                            ", "raise", "ValueError", "(", "\"input_channels unknown for upconv unflatting\"", ")", "\n", "", "unflatting_channels", "=", "self", ".", "_flatting_channels", "\n", "self", ".", "_flatting_channels", "=", "None", "\n", "", "else", ":", "\n", "                        ", "unflatting_channels", "=", "input_channels", "\n", "\n", "", "input_layer", "=", "self", ".", "_make_unflat", "(", "unflatting_channels", ",", "input_layer", ")", "\n", "\n", "", "if", "self", ".", "_data_format", "==", "\"NHWC\"", ":", "\n", "                    ", "input_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "input_size_h", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "input_size_w", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "stride_shape", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "output_size_h", "=", "(", "input_size_h", "-", "1", ")", "*", "stride", "+", "filter_size", "\n", "output_size_w", "=", "(", "input_size_w", "-", "1", ")", "*", "stride", "+", "filter_size", "\n", "output_shape", "=", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "input_layer", ")", "[", "0", "]", ",", "\n", "output_size_h", ",", "output_size_w", ",", "\n", "output_channels", "]", ")", "\n", "", "else", ":", "\n", "                    ", "input_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "input_size_h", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "input_size_w", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "stride_shape", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", "\n", "output_size_h", "=", "(", "input_size_h", "-", "1", ")", "*", "stride", "+", "filter_size", "\n", "output_size_w", "=", "(", "input_size_w", "-", "1", ")", "*", "stride", "+", "filter_size", "\n", "output_shape", "=", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "input_layer", ")", "[", "0", "]", ",", "\n", "output_channels", ",", "\n", "output_size_h", ",", "output_size_w", "]", ")", "\n", "\n", "", "init", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "factor", "=", "1.", ",", "uniform", "=", "True", ")", "\n", "shape", "=", "[", "filter_size", ",", "filter_size", ",", "output_channels", ",", "input_channels", "]", "\n", "w_upconv", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init", ")", "\n", "\n", "init", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", "\n", "shape", "=", "[", "output_channels", "]", "\n", "b_upconv", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init", ")", "\n", "\n", "upconv", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "input_layer", ",", "w_upconv", ",", "output_shape", ",", "stride_shape", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "data_format", "=", "self", ".", "_data_format", ")", "\n", "\n", "output", "=", "tf", ".", "nn", ".", "bias_add", "(", "upconv", ",", "b_upconv", ",", "data_format", "=", "self", ".", "_data_format", ")", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "output_shape", ")", "\n", "\n", "if", "self", ".", "_print_shape", ":", "\n", "                    ", "print", "(", "self", ".", "_layer_number", ",", "\"upconv\"", ",", "\n", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "\" >> {\"", ",", "\n", "[", "filter_size", ",", "filter_size", ",", "input_channels", ",", "output_channels", "]", ",", "\n", "[", "stride", "]", ",", "\n", "\"} >> \"", ",", "\n", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "", "return", "self", ".", "_config_output", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.fc_layer": [[165, 197], ["tensorflow.variable_scope", "tensorflow.variable_scope", "layers.NetworkCreator._config_input", "tensorflow.contrib.layers.variance_scaling_initializer", "tensorflow.get_variable", "tensorflow.constant_initializer", "tensorflow.get_variable", "layers.NetworkCreator._config_output", "layers.NetworkCreator._get_name", "len", "layers.NetworkCreator._make_flat", "layers.NetworkCreator.get_shape().as_list", "tensorflow.matmul", "print", "layers.NetworkCreator.get_shape().as_list", "ValueError", "layers.NetworkCreator.get_shape().as_list", "output.get_shape().as_list", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "output.get_shape"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_input", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_output", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._get_name", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._make_flat"], ["", "", "", "def", "fc_layer", "(", "self", ",", "output_size", ",", "\n", "input_layer", "=", "None", ")", ":", "# output_size==-1: use size from last flatting", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "network_name", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "self", ".", "_get_name", "(", ")", ",", "reuse", "=", "self", ".", "_reuse", ")", ":", "\n", "                ", "input_layer", "=", "self", ".", "_config_input", "(", "input_layer", ")", "\n", "if", "len", "(", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "==", "4", ":", "\n", "                    ", "input_layer", "=", "self", ".", "_make_flat", "(", "input_layer", ")", "\n", "", "input_size", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "\n", "if", "output_size", "==", "-", "1", ":", "\n", "                    ", "if", "self", ".", "_flatting_dimension", "is", "None", ":", "\n", "                        ", "raise", "ValueError", "(", "\"input_dimension unknown for unflatting fc_layer\"", ")", "\n", "", "output_size", "=", "self", ".", "_flatting_dimension", "\n", "self", ".", "_flatting_dimension", "=", "None", "\n", "\n", "", "init", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "factor", "=", "1.", ",", "uniform", "=", "True", ")", "\n", "shape", "=", "[", "input_size", ",", "output_size", "]", "\n", "w_fc", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init", ")", "\n", "\n", "init", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", "\n", "shape", "=", "[", "output_size", "]", "\n", "b_fc", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init", ")", "\n", "\n", "output", "=", "tf", ".", "matmul", "(", "input_layer", ",", "w_fc", ")", "+", "b_fc", "\n", "\n", "if", "self", ".", "_print_shape", ":", "\n", "                    ", "print", "(", "self", ".", "_layer_number", ",", "\"fc\"", ",", "\n", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "\" >> \"", ",", "\n", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "", "return", "self", ".", "_config_output", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator.extend": [[198, 213], ["layers.NetworkCreator._config_input", "tensorflow.concat", "layers.NetworkCreator._config_output", "len", "layers.NetworkCreator._make_flat", "len", "layers.NetworkCreator._make_flat", "print", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "tensorflow.concat.get_shape().as_list", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "tensorflow.concat.get_shape"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_input", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_output", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._make_flat", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._make_flat"], ["", "", "", "def", "extend", "(", "self", ",", "new_input", ",", "input_layer", "=", "None", ")", ":", "\n", "        ", "input_layer", "=", "self", ".", "_config_input", "(", "input_layer", ")", "\n", "if", "len", "(", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "==", "4", ":", "\n", "            ", "input_layer", "=", "self", ".", "_make_flat", "(", "input_layer", ")", "\n", "", "if", "len", "(", "new_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "==", "4", ":", "\n", "            ", "new_input", "=", "self", ".", "_make_flat", "(", "new_input", ")", "\n", "", "output", "=", "tf", ".", "concat", "(", "[", "input_layer", ",", "new_input", "]", ",", "1", ")", "\n", "if", "self", ".", "_print_shape", ":", "\n", "            ", "print", "(", "\"comb\"", ",", "\n", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "\"+\"", ",", "\n", "new_input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "\" >> \"", ",", "\n", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "return", "self", ".", "_config_output", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._make_flat": [[214, 232], ["layers.NetworkCreator._config_input", "functools.reduce", "tensorflow.reshape", "layers.NetworkCreator._config_output", "print", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "layers.NetworkCreator.get_shape().as_list", "tensorflow.reshape.get_shape().as_list", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "tensorflow.reshape.get_shape"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_input", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_output"], ["", "def", "_make_flat", "(", "self", ",", "input_layer", "=", "None", ")", ":", "\n", "        ", "\"\"\"called when fc_layer gets a conv layer output\n        also saves parameters for potential unflatting\"\"\"", "\n", "input_layer", "=", "self", ".", "_config_input", "(", "input_layer", ")", "\n", "# saving number of channels in case of a \"_make_unflat\" call in the future:", "\n", "if", "self", ".", "_data_format", "==", "\"NHWC\"", ":", "\n", "            ", "self", ".", "_flatting_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_flatting_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "", "dim", "=", "reduce", "(", "mul", ",", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "self", ".", "_flatting_dimension", "=", "dim", "\n", "output", "=", "tf", ".", "reshape", "(", "input_layer", ",", "[", "-", "1", ",", "dim", "]", ")", "\n", "if", "self", ".", "_print_shape", ":", "\n", "            ", "print", "(", "\"flat\"", ",", "\n", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "\" >> \"", ",", "\n", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "return", "self", ".", "_config_output", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._make_unflat": [[233, 251], ["layers.NetworkCreator._config_input", "layers.NetworkCreator._get_square", "tensorflow.reshape", "layers.NetworkCreator._config_output", "layers.NetworkCreator.get_shape().as_list", "print", "layers.NetworkCreator.get_shape().as_list", "tensorflow.reshape.get_shape().as_list", "layers.NetworkCreator.get_shape", "layers.NetworkCreator.get_shape", "tensorflow.reshape.get_shape"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_input", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._get_square", "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_output"], ["", "def", "_make_unflat", "(", "self", ",", "output_size", ",", "input_layer", "=", "None", ")", ":", "\n", "        ", "\"\"\"called when upconv layer gets flat input\"\"\"", "\n", "input_layer", "=", "self", ".", "_config_input", "(", "input_layer", ")", "\n", "input_size", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "assert", "input_size", "%", "output_size", "==", "0", "\n", "dim", "=", "self", ".", "_get_square", "(", "input_size", "//", "output_size", ")", "\n", "assert", "dim", "!=", "-", "1", "\n", "if", "self", ".", "_data_format", "==", "\"NHWC\"", ":", "\n", "            ", "output_shape", "=", "[", "-", "1", ",", "dim", ",", "dim", ",", "output_size", "]", "\n", "", "else", ":", "\n", "            ", "output_shape", "=", "[", "-", "1", ",", "output_size", ",", "dim", ",", "dim", "]", "\n", "", "output", "=", "tf", ".", "reshape", "(", "input_layer", ",", "output_shape", ")", "\n", "if", "self", ".", "_print_shape", ":", "\n", "            ", "print", "(", "\"unflat\"", ",", "\n", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "\" >> \"", ",", "\n", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "return", "self", ".", "_config_output", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._get_name": [[252, 257], ["None"], "methods", ["None"], ["", "def", "_get_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"gives every layer a different name)\"\"\"", "\n", "self", ".", "_layer_number", "+=", "1", "\n", "layer_name", "=", "\"layer_{}\"", ".", "format", "(", "self", ".", "_layer_number", ")", "\n", "return", "layer_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_input": [[258, 264], ["None"], "methods", ["None"], ["", "def", "_config_input", "(", "self", ",", "input_layer", ")", ":", "\n", "        ", "if", "input_layer", "is", "None", ":", "# try use previous output:", "\n", "            ", "assert", "self", ".", "_connector", "is", "not", "None", "\n", "return", "self", ".", "_connector", "\n", "", "else", ":", "\n", "            ", "return", "input_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._config_output": [[265, 268], ["None"], "methods", ["None"], ["", "", "def", "_config_output", "(", "self", ",", "output", ")", ":", "\n", "        ", "self", ".", "_connector", "=", "output", "\n", "return", "self", ".", "_connector", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.layers.NetworkCreator._get_square": [[269, 280], ["seen.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_square", "(", "input_int", ")", ":", "\n", "        ", "assert", "input_int", ">", "0", "\n", "x", "=", "input_int", "//", "2", "\n", "seen", "=", "[", "x", "]", "\n", "while", "x", "*", "x", "!=", "input_int", ":", "\n", "            ", "x", "=", "(", "x", "+", "(", "input_int", "//", "x", ")", ")", "//", "2", "\n", "if", "x", "in", "seen", ":", "\n", "                ", "return", "-", "1", "\n", "", "seen", ".", "append", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.TimeMeasurement.__init__": [[7, 16], ["numpy.zeros", "numpy.empty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "1", ")", ":", "\n", "        ", "\"\"\"Class for multiple time measurements.\n\n        Args:\n            size (int): Total amount of time measurements.\n        \"\"\"", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "time_total", "=", "np", ".", "zeros", "(", "[", "self", ".", "size", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "time_start", "=", "np", ".", "empty", "(", "[", "self", ".", "size", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.TimeMeasurement.start": [[17, 24], ["time.time"], "methods", ["None"], ["", "def", "start", "(", "self", ",", "number", "=", "0", ")", ":", "\n", "        ", "\"\"\"Start time measurement.\n\n        Args:\n            number (int): Measurement id.\n        \"\"\"", "\n", "self", ".", "time_start", "[", "number", "]", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.TimeMeasurement.end": [[25, 32], ["time.time"], "methods", ["None"], ["", "def", "end", "(", "self", ",", "number", "=", "0", ")", ":", "\n", "        ", "\"\"\"End time measurement.\n\n        Args:\n            number (int): Measurement id.\n        \"\"\"", "\n", "self", ".", "time_total", "[", "number", "]", "+=", "time", ".", "time", "(", ")", "-", "self", ".", "time_start", "[", "number", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.TimeMeasurement.get": [[33, 40], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "number", "=", "0", ")", ":", "\n", "        ", "\"\"\"Get time measurement.\n\n        Args:\n            number (int): Measurement id.\n        \"\"\"", "\n", "return", "self", ".", "time_total", "[", "number", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.TimeMeasurement.reset": [[41, 44], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset all time measurements.\"\"\"", "\n", "self", ".", "time_total", "[", "...", "]", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.PeriodicEvent.__init__": [[47, 57], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "occurrence", ",", "first_event_at_zero_time", "=", "False", ")", ":", "\n", "        ", "\"\"\"Event manager for training with uneven time-step increment\n\n        Args:\n            occurrence (int): is_event will be true once every \"occurrence\" steps.\n            first_event_at_zero_time (bool): If true, event also happens at zeroth time-step.\n        \"\"\"", "\n", "self", ".", "occurrence", "=", "occurrence", "\n", "self", ".", "last_event_time", "=", "0", "\n", "self", ".", "event", "=", "first_event_at_zero_time", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.PeriodicEvent.update_time": [[58, 66], ["None"], "methods", ["None"], ["", "def", "update_time", "(", "self", ",", "current_time", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            current_time (int): current time-step.\n        \"\"\"", "\n", "if", "(", "current_time", "-", "self", ".", "last_event_time", ")", ">=", "self", ".", "occurrence", ":", "\n", "            ", "self", ".", "last_event_time", "=", "(", "current_time", "//", "self", ".", "occurrence", ")", "*", "self", ".", "occurrence", "\n", "self", ".", "event", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.PeriodicEvent.is_event": [[67, 76], ["None"], "methods", ["None"], ["", "", "def", "is_event", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns (bool): True if \"occurrence\" time-steps passed since last event.\n        \"\"\"", "\n", "if", "self", ".", "event", ":", "\n", "            ", "self", ".", "event", "=", "False", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.NetworkSaver.__init__": [[80, 86], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "session", ",", "saver", ",", "main_path", ")", ":", "\n", "        ", "self", ".", "session", "=", "session", "\n", "self", ".", "saver", "=", "saver", "\n", "self", ".", "main_path", "=", "main_path", "\n", "\n", "self", ".", "save_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.NetworkSaver.save": [[87, 93], ["utils.NetworkSaver.saver.save", "print", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.NetworkSaver.save"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "save_path", "=", "self", ".", "saver", ".", "save", "(", "\n", "self", ".", "session", ",", "p_join", "(", "self", ".", "main_path", ",", "\"model_{}.ckpt\"", ".", "format", "(", "self", ".", "save_id", ")", ")", "\n", ")", "\n", "print", "(", "\"Model saved in: {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "self", ".", "save_id", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lmb-freiburg_td-or-not-td.alg.utils.NetworkSaver.load": [[94, 96], ["utils.NetworkSaver.saver.restore", "os.path.join"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "save_id", ")", ":", "\n", "        ", "self", ".", "saver", ".", "restore", "(", "self", ".", "session", ",", "p_join", "(", "self", ".", "main_path", ",", "\"model_{}.ckpt\"", ".", "format", "(", "save_id", ")", ")", ")", "\n", "", "", ""]]}