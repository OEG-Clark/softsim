{"home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.__init__": [[15, 25], ["vgg_16_cifar10_keras.cifar10vgg.build_model", "vgg_16_cifar10_keras.cifar10vgg.train", "vgg_16_cifar10_keras.cifar10vgg.model.load_weights"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_model", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.train"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "weight_decay", "=", "0.0005", "\n", "self", ".", "x_shape", "=", "[", "32", ",", "32", ",", "3", "]", "\n", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "if", "train", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "'cifar10vgg.h5'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.build_model": [[27, 116], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "# Build the network of vgg for 10 classes with massive dropout and weight decay as described in the paper.", "\n", "\n", "        ", "model", "=", "Sequential", "(", ")", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "\n", "input_shape", "=", "self", ".", "x_shape", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.3", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "self", ".", "num_classes", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize": [[118, 128], ["numpy.mean", "numpy.std"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "X_train", ",", "X_test", ")", ":", "\n", "#this function normalize inputs for zero mean and unit variance", "\n", "# it is used when training a model.", "\n", "# Input: training set and test set", "\n", "# Output: normalized training set and test set according to the trianing set statistics.", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "X_train", "=", "(", "X_train", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "X_test", "=", "(", "X_test", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "return", "X_train", ",", "X_test", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize_production": [[129, 138], ["None"], "methods", ["None"], ["", "def", "normalize_production", "(", "self", ",", "x", ")", ":", "\n", "#this function is used to normalize instances in production according to saved training set statistics", "\n", "# Input: X - a training set", "\n", "# Output X - a normalized training set according to normalization constants.", "\n", "\n", "#these values produced during first training and are general for the standard cifar10 training set normalization", "\n", "        ", "mean", "=", "120.707", "\n", "std", "=", "64.15", "\n", "return", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict": [[139, 143], ["vgg_16_cifar10_keras.cifar10vgg.model.predict", "vgg_16_cifar10_keras.cifar10vgg.normalize_production"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize_production"], ["", "def", "predict", "(", "self", ",", "x", ",", "normalize", "=", "True", ",", "batch_size", "=", "50", ")", ":", "\n", "        ", "if", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "normalize_production", "(", "x", ")", "\n", "", "return", "self", ".", "model", ".", "predict", "(", "x", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.train": [[144, 196], ["keras.datasets.cifar10.load_data", "x_train.astype.astype.astype", "x_test.astype.astype.astype", "vgg_16_cifar10_keras.cifar10vgg.normalize", "keras.utils.to_categorical", "keras.utils.to_categorical", "keras.callbacks.LearningRateScheduler", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.fit", "keras.optimizers.SGD", "model.compile", "model.fit_generator", "model.save_weights", "keras.preprocessing.image.ImageDataGenerator.flow"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "\n", "#training parameters", "\n", "        ", "batch_size", "=", "128", "\n", "maxepoches", "=", "250", "\n", "learning_rate", "=", "0.1", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "20", "\n", "# The data, shuffled and split between train and test sets:", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "cifar10", ".", "load_data", "(", ")", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "\n", "x_test", "=", "x_test", ".", "astype", "(", "'float32'", ")", "\n", "x_train", ",", "x_test", "=", "self", ".", "normalize", "(", "x_train", ",", "x_test", ")", "\n", "\n", "y_train", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_train", ",", "self", ".", "num_classes", ")", "\n", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "\n", "#data augmentation", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "# (std, mean, and principal components if ZCA whitening is applied).", "\n", "datagen", ".", "fit", "(", "x_train", ")", "\n", "\n", "\n", "\n", "#optimization details", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "\n", "# training process in a for loop with learning rate drop every 25 epoches.", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "x_train", ",", "y_train", ",", "\n", "batch_size", "=", "batch_size", ")", ",", "\n", "steps_per_epoch", "=", "x_train", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "\n", "validation_data", "=", "(", "x_test", ",", "y_test", ")", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "verbose", "=", "2", ")", "\n", "model", ".", "save_weights", "(", "'cifar10vgg.h5'", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.pytorch_cifar10.train": [[91, 112], ["print", "net.train", "enumerate", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "net.max", "targets.size", "predicted.eq().sum().item", "print", "inputs.to", "targets.to", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.train"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\nEpoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "print", "(", "'Loss: {} | Acc: {} ({}/{})'", ".", "format", "(", "\n", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "#progress_bar(batch_idx, len(trainloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.pytorch_cifar10.test": [[116, 151], ["net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "net", "criterion", "criterion.item", "net.max", "targets.size", "predicted.eq().sum().item", "print", "net.state_dict", "os.path.isdir", "os.mkdir", "inputs.to", "targets.to", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save"], ["", "", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "global", "best_acc", "\n", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "print", "(", "'Loss: {} | Acc: {} ({}/{})'", ".", "format", "(", "\n", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "#progress_bar(batch_idx, len(testloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#             % (test_loss/(batch_idx+1), 100.*correct/total, correct, total))", "\n", "\n", "# Save checkpoint.", "\n", "", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "if", "acc", ">", "best_acc", ":", "\n", "        ", "print", "(", "'Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/ckpt.pth'", ")", "\n", "best_acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.src.model_config.load_settings": [[6, 82], ["src.Classes.model_builder.ModelBuilder", "os.path.join"], "function", ["None"], ["def", "load_settings", "(", "name", ",", "dataset", ",", "backend", ")", ":", "\n", "\t", "model_acronym", "=", "'{}_{}'", ".", "format", "(", "name", ",", "dataset", ")", "\n", "\n", "model", "=", "ModelBuilder", "(", ")", "\n", "model", ".", "models_folder", "=", "os", ".", "path", ".", "join", "(", "\"src\"", ",", "\"bin\"", ",", "\"models\"", ",", "backend", ")", "\n", "model", ".", "validation_size", "=", "0.3", "\n", "model", ".", "random_state", "=", "42", "\n", "\n", "if", "backend", "==", "'keras'", ":", "\n", "\t\t", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "keras", "import", "dnn_simple_model", "\n", "model", ".", "runner", "=", "dnn_simple_model", "\n", "\n", "if", "model_acronym", "==", "'lenet_mnist'", ":", "\n", "\t\t\t", "model", ".", "num_classes", "=", "10", "\n", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "keras", "import", "cnn", "\n", "model", ".", "model_name", "=", "'leNet_MNIST.h5'", "\n", "model", ".", "batch_size", "=", "128", "\n", "model", ".", "epochs", "=", "12", "\n", "model", ".", "algorithm", "=", "cnn", "\n", "\n", "", "elif", "model_acronym", "==", "'lenet_gtsrb'", ":", "\n", "\t\t\t", "model", ".", "num_classes", "=", "43", "\n", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "keras", "import", "le_net", "\n", "model", ".", "model_name", "=", "'leNet_GTSRB.h5'", "\n", "model", ".", "batch_size", "=", "32", "\n", "model", ".", "epochs", "=", "10", "\n", "model", ".", "algorithm", "=", "le_net", "\n", "\n", "", "elif", "model_acronym", "==", "'resnet_cifar10'", ":", "\n", "\t\t\t", "model", ".", "num_classes", "=", "10", "\n", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "keras", "import", "resnet", "\n", "model", ".", "model_name", "=", "'resNet_CIFAR-10.h5'", "\n", "model", ".", "batch_size", "=", "32", "\n", "model", ".", "epochs", "=", "200", "\n", "model", ".", "algorithm", "=", "resnet", "\n", "\n", "", "elif", "model_acronym", "==", "'vgg16_gtsrb'", ":", "\n", "\t\t\t", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "keras", "import", "vgg16", "\n", "model", ".", "model_name", "=", "'vgg16_GTSRB.h5'", "\n", "model", ".", "batch_size", "=", "100", "\n", "model", ".", "epochs", "=", "10", "\n", "model", ".", "algorithm", "=", "vgg16", "\n", "", "'''\n\t\telif model_acronym == 3:\n\t\t\tmodel.model_name = 'DNN_ensemble_MNIST_'\n\t\t\tmodel.batch_size = 128\n\t\t\tmodel.epochs = 12\n\t\t\tmodel.runner = DNN_ensemble_MNIST_model\n\n\t\telif model_acronym == 4:\n\t\t\tmodel.model_name = 'DNN_ensemble_GTRSB_'\n\t\t\tmodel.batch_size = 32\n\t\t\tmodel.epochs = 10\n\t\t\tmodel.runner = DNN_ensemble_GTRSB_model\n\t\t'''", "\n", "", "elif", "backend", "==", "'pytorch'", ":", "\n", "\t\t", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "pytorch", "import", "dnn_simple_model", "\n", "model", ".", "runner", "=", "dnn_simple_model", "\n", "\n", "if", "model_acronym", "==", "'lenet_cifar10'", ":", "\n", "\t\t\t", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "pytorch", "import", "pytorch_classifiers", "\n", "model", ".", "model_name", "=", "'leNet_CIFAR-10.pth'", "\n", "model", ".", "batch_size", "=", "100", "\n", "model", ".", "epochs", "=", "40", "\n", "model", ".", "algorithm", "=", "pytorch_classifiers", "\n", "model", ".", "num_classes", "=", "10", "\n", "\n", "", "elif", "model_acronym", "==", "'lenet_gtsrb'", ":", "\n", "\t\t\t", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "pytorch", "import", "pytorch_classifiers", "\n", "model", ".", "model_name", "=", "'leNet_GTSRB.pth'", "\n", "model", ".", "batch_size", "=", "100", "\n", "model", ".", "epochs", "=", "30", "\n", "model", ".", "algorithm", "=", "pytorch_classifiers", "\n", "model", ".", "num_classes", "=", "43", "\n", "\n", "", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.src.en_cnn_nl_oob_experiments.run": [[8, 86], ["range", "avg_acc.append", "avg_time.append", "avg_memory.append", "avg_F1.append", "avg_cf.append", "datasets.append", "range", "avg_acc.append", "avg_time.append", "avg_memory.append", "avg_F1.append", "avg_cf.append", "datasets.append", "print", "time.perf_counter", "src.MNIST_experiments.DNN_outOfBox_dimReduc_MNIST_test.run", "time.perf_counter", "acc.append", "t.append", "mem.append", "f1.append", "cf[].append", "cf[].append", "cf[].append", "cf[].append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "print", "time.perf_counter", "src.GTRSB_experiments.DNN_outOfBox_dimReduc_test.run", "time.perf_counter", "acc.append", "t.append", "mem.append", "f1.append", "cf[].append", "cf[].append", "cf[].append", "cf[].append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "src.utils.metrics.evaluate", "src.utils.metrics.F1", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "src.utils.metrics.evaluate", "src.utils.metrics.F1", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.F1", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.F1"], ["def", "run", "(", "repetition", ",", "classToMonitor", ",", "layer_index", ",", "layer_name", ",", "models_folder", ",", "monitors_folder", ",", "isTestOneClass", ",", "sep", ")", ":", "\n", "    ", "dim_reduc_method", "=", "'isomap'", "\n", "avg_acc", "=", "[", "'CNN+OOB+'", "+", "dim_reduc_method", "]", "#accuracy", "\n", "avg_cf", "=", "[", "'CNN+OOB+'", "+", "dim_reduc_method", "]", "#confusion matrix", "\n", "avg_time", "=", "[", "'CNN+OOB+'", "+", "dim_reduc_method", "]", "#time", "\n", "avg_memory", "=", "[", "'CNN+OOB+'", "+", "dim_reduc_method", "]", "#memory", "\n", "avg_F1", "=", "[", "'CNN+OOB+'", "+", "dim_reduc_method", "]", "#memory", "\n", "\n", "acc", "=", "[", "]", "\n", "t", "=", "[", "]", "\n", "cf", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "mem", "=", "[", "]", "\n", "f1", "=", "[", "]", "\n", "datasets", "=", "[", "]", "\n", "\n", "monitor_name", "=", "\"monitor_Box_\"", "+", "dim_reduc_method", "+", "\"_MNIST.p\"", "\n", "model_name", "=", "'DNN_MNIST.h5'", "\n", "\n", "for", "i", "in", "range", "(", "repetition", ")", ":", "\n", "        ", "print", "(", "\"MNIST experiment {} of {} ...\"", ".", "format", "(", "i", "+", "1", ",", "repetition", ")", ")", "\n", "\n", "ini", "=", "timer", "(", ")", "\n", "arrPred", ",", "arrLabel", ",", "memory", ",", "arrFP", ",", "arrFN", ",", "arrTP", ",", "arrTN", "=", "DNN_outOfBox_dimReduc_MNIST_test", ".", "run", "(", "\n", "classToMonitor", ",", "layer_name", ",", "models_folder", ",", "monitors_folder", ",", "monitor_name", ",", "\n", "model_name", ",", "isTestOneClass", ",", "sep", ",", "dim_reduc_method", ")", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "acc", ".", "append", "(", "metrics", ".", "evaluate", "(", "arrLabel", ",", "arrPred", ")", ")", "\n", "t", ".", "append", "(", "end", "-", "ini", ")", "\n", "mem", ".", "append", "(", "memory", ")", "\n", "f1", ".", "append", "(", "metrics", ".", "F1", "(", "arrLabel", ",", "arrPred", ")", ")", "\n", "cf", "[", "0", "]", ".", "append", "(", "arrFP", "[", "str", "(", "classToMonitor", ")", "]", ")", "\n", "cf", "[", "1", "]", ".", "append", "(", "arrFN", "[", "str", "(", "classToMonitor", ")", "]", ")", "\n", "cf", "[", "2", "]", ".", "append", "(", "arrTP", "[", "str", "(", "classToMonitor", ")", "]", ")", "\n", "cf", "[", "3", "]", ".", "append", "(", "arrTN", "[", "str", "(", "classToMonitor", ")", "]", ")", "\n", "\n", "", "avg_acc", ".", "append", "(", "np", ".", "mean", "(", "acc", ")", ")", "\n", "avg_time", ".", "append", "(", "np", ".", "mean", "(", "t", ")", ")", "\n", "avg_memory", ".", "append", "(", "np", ".", "mean", "(", "mem", ")", ")", "\n", "avg_F1", ".", "append", "(", "np", ".", "mean", "(", "f1", ")", ")", "\n", "avg_cf", ".", "append", "(", "[", "np", ".", "mean", "(", "cf", "[", "0", "]", ")", ",", "np", ".", "mean", "(", "cf", "[", "1", "]", ")", ",", "np", ".", "mean", "(", "cf", "[", "2", "]", ")", ",", "np", ".", "mean", "(", "cf", "[", "3", "]", ")", "]", ")", "\n", "datasets", ".", "append", "(", "'MNIST'", ")", "\n", "\n", "acc", "=", "[", "]", "\n", "t", "=", "[", "]", "\n", "cf", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "mem", "=", "[", "]", "\n", "f1", "=", "[", "]", "\n", "\n", "monitor_name", "=", "\"monitor_Box_\"", "+", "dim_reduc_method", "+", "\"_GTRSB.p\"", "\n", "model_name", "=", "'DNN_GTRSB.h5'", "\n", "\n", "for", "i", "in", "range", "(", "repetition", ")", ":", "\n", "        ", "print", "(", "\"GTRSB experiment {} of {} ...\"", ".", "format", "(", "i", "+", "1", ",", "repetition", ")", ")", "\n", "\n", "ini", "=", "timer", "(", ")", "\n", "arrPred", ",", "arrLabel", ",", "memory", ",", "arrFP", ",", "arrFN", ",", "arrTP", ",", "arrTN", "=", "DNN_outOfBox_dimReduc_test", ".", "run", "(", "\n", "classToMonitor", ",", "layer_index", ",", "models_folder", ",", "monitors_folder", ",", "monitor_name", ",", "model_name", ",", "\n", "isTestOneClass", ",", "sep", ",", "dim_reduc_method", ")", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "acc", ".", "append", "(", "metrics", ".", "evaluate", "(", "arrLabel", ",", "arrPred", ")", ")", "\n", "t", ".", "append", "(", "end", "-", "ini", ")", "\n", "mem", ".", "append", "(", "memory", ")", "\n", "f1", ".", "append", "(", "metrics", ".", "F1", "(", "arrLabel", ",", "arrPred", ")", ")", "\n", "cf", "[", "0", "]", ".", "append", "(", "arrFP", "[", "str", "(", "classToMonitor", ")", "]", ")", "\n", "cf", "[", "1", "]", ".", "append", "(", "arrFN", "[", "str", "(", "classToMonitor", ")", "]", ")", "\n", "cf", "[", "2", "]", ".", "append", "(", "arrTP", "[", "str", "(", "classToMonitor", ")", "]", ")", "\n", "cf", "[", "3", "]", ".", "append", "(", "arrTN", "[", "str", "(", "classToMonitor", ")", "]", ")", "\n", "\n", "", "avg_acc", ".", "append", "(", "np", ".", "mean", "(", "acc", ")", ")", "\n", "avg_time", ".", "append", "(", "np", ".", "mean", "(", "t", ")", ")", "\n", "avg_memory", ".", "append", "(", "np", ".", "mean", "(", "mem", ")", ")", "\n", "avg_F1", ".", "append", "(", "np", ".", "mean", "(", "f1", ")", ")", "\n", "avg_cf", ".", "append", "(", "[", "np", ".", "mean", "(", "cf", "[", "0", "]", ")", ",", "np", ".", "mean", "(", "cf", "[", "1", "]", ")", ",", "np", ".", "mean", "(", "cf", "[", "2", "]", ")", ",", "np", ".", "mean", "(", "cf", "[", "3", "]", ")", "]", ")", "\n", "datasets", ".", "append", "(", "'GTSRB'", ")", "\n", "\n", "return", "avg_acc", ",", "avg_time", ",", "avg_cf", ",", "avg_memory", ",", "avg_F1", ",", "datasets", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.src.monitor_config.get_monitor_params": [[1, 43], ["PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["def", "get_monitor_params", "(", "technique", ")", ":", "\n", "\n", "\t", "PARAMS", "=", "{", "}", "\n", "\n", "if", "technique", "in", "'oob'", ":", "\n", "#for oob variations", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'is_build_monitors_by_class'", ":", "True", "}", ")", "#True just for OOB-based monitors", "\n", "PARAMS", ".", "update", "(", "{", "'arr_n_components'", ":", "2", "}", ")", "# 2, 3, 5, 10", "\n", "#for oob variations and knn", "\n", "\n", "#for ocsvm", "\n", "PARAMS", ".", "update", "(", "{", "'min_samples'", ":", "[", "5", ",", "10", ",", "15", "]", "}", ")", "\n", "#for random forest and linear classifiers", "\n", "PARAMS", ".", "update", "(", "{", "'use_grid_search'", ":", "False", "}", ")", "\n", "#for knn and sgd classifiers", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "#all methods", "\n", "PARAMS", ".", "update", "(", "{", "'use_alternative_monitor'", ":", "False", "}", ")", "# True = label -> act func -> save in the monitor; False = label -> act func if label == predicted -> save in the monitor", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "# 'leNet', 'vgg16', 'resnet' ", "\n", "\n", "", "elif", "technique", "==", "'odin'", ":", "\n", "# for odin", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'is_build_monitors_by_class'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'threshold'", ":", "None", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'use_grid_search'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'temperature'", ":", "1000", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'use_alternative_monitor'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'odin'", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'pytorch'", "}", ")", "# for ODIN, using pytorch for now", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'use_gpu'", ":", "True", "}", ")", "\n", "\n", "if", "setting_id", "==", "1", ":", "\n", "# gtsrb", "\n", "\t\t\t", "PARAMS", ".", "update", "(", "{", "'magnitude'", ":", "[", "0.0014", ",", "0.0025", ",", "0.005", ",", "0.01", ",", "0.02", ",", "0.04", ",", "0.08", "]", "}", ")", "# based on paper 'generalized odin'", "\n", "", "elif", "setting_id", "==", "2", ":", "\n", "# cifar-10", "\n", "\t\t\t", "PARAMS", ".", "update", "(", "{", "'magnitude'", ":", "[", "0.0014", ",", "0.0025", ",", "0.005", ",", "0.01", ",", "0.02", ",", "0.04", ",", "0.08", "]", "}", ")", "# based on paper 'generalized odin'", "\n", "\n", "", "", "return", "PARAMS", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.src.neptune_config.neptune_init": [[3, 15], ["threat.replace.replace", "print", "neptune.init"], "function", ["None"], ["def", "neptune_init", "(", "threat", ")", ":", "\n", "\t", "neptune_root", "=", "'raulsenaferreira/'", "\n", "log", "=", "'saving experiments in '", "\n", "threat", "=", "threat", ".", "replace", "(", "'_'", ",", "'-'", ")", "# adapting for neptune usage", "\n", "\n", "if", "threat", "!=", "'novelty-detection'", "and", "threat", "!=", "'adversarial-attack'", "and", "threat", "!=", "'distributional-shift'", "and", "threat", "!=", "'anomaly-detection'", "and", "threat", "!=", "'noise'", ":", "\n", "\t\t", "threat", "=", "'PhD'", "\n", "\n", "", "path", "=", "neptune_root", "+", "'{}'", ".", "format", "(", "threat", ")", "# 'PhD'", "\n", "print", "(", "log", "+", "path", ")", "\n", "\n", "neptune", ".", "init", "(", "path", ")", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.src.data_config.get_data_params": [[4, 23], ["PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["def", "get_data_params", "(", "dataset_name", ")", ":", "\n", "\t", "PARAMS", "=", "{", "}", "\n", "# directory of datasets", "\n", "#root_dir = os.path.join('D:','\\\\backup_desktop_14-10-2020','GITHUB', 'phd_data_generation', 'data', 'modified')", "\n", "#root_dir = os.path.join('C:', '\\\\Users', 'rsenaferre', 'Desktop', 'GITHUB', 'phd_data_generation', 'data', 'training_set')", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'dataset_folder'", ":", "root_dir", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'validation_size'", ":", "0.3", "}", ")", "\n", "\n", "if", "dataset_name", "==", "'gtsrb'", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'dataset_names'", ":", "[", "'GTSRB'", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor'", ":", "[", "43", "]", "}", ")", "\n", "\n", "", "elif", "dataset_name", "==", "'cifar10'", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'dataset_names'", ":", "[", "'CIFAR-10'", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor'", ":", "[", "10", "]", "}", ")", "\n", "\n", "\n", "", "return", "PARAMS", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.save_results": [[12, 14], ["numpy.savetxt"], "function", ["None"], ["from", "sklearn", ".", "metrics", "import", "f1_score", "\n", "from", "sklearn", ".", "metrics", "import", "roc_curve", ",", "auc", "\n", "from", "sklearn", ".", "metrics", "import", "roc_auc_score", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.evaluate": [[16, 18], ["round", "sklearn.metrics.accuracy_score"], "function", ["None"], ["from", "sklearn", ".", "metrics", "import", "classification_report", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_false_decisions_legend": [[24, 43], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.figure.suptitle", "fig.add_subplot.figure.canvas.set_window_title", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.cla", "matplotlib.axis", "fig.add_subplot.legend", "matplotlib.show"], "function", ["None"], ["# CSVs", "\n", "for", "readout", "in", "arr_readouts", ":", "\n", "\t\t", "index_results", ".", "append", "(", "readout", ".", "name", ")", "\n", "results", "[", "0", "]", ".", "append", "(", "readout", ".", "avg_acc", ")", "\n", "results", "[", "1", "]", ".", "append", "(", "readout", ".", "avg_time", ")", "\n", "results", "[", "2", "]", ".", "append", "(", "readout", ".", "avg_memory", ")", "\n", "results", "[", "3", "]", ".", "append", "(", "readout", ".", "avg_F1", ")", "\n", "results", "[", "4", "]", ".", "append", "(", "readout", ".", "avg_cf", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "csvs_folder_path", ",", "exist_ok", "=", "True", ")", "\n", "np", ".", "savetxt", "(", "csvs_folder_path", "+", "index_file", ",", "[", "p", "for", "p", "in", "index_results", "]", ",", "delimiter", "=", "delimiter", ",", "fmt", "=", "'%s'", ")", "\n", "np", ".", "savetxt", "(", "csvs_folder_path", "+", "acc_file_name", ",", "[", "p", "for", "p", "in", "results", "[", "0", "]", "]", ",", "delimiter", "=", "delimiter", ",", "fmt", "=", "'%s'", ")", "\n", "np", ".", "savetxt", "(", "csvs_folder_path", "+", "time_file_name", ",", "[", "p", "for", "p", "in", "results", "[", "1", "]", "]", ",", "delimiter", "=", "delimiter", ",", "fmt", "=", "'%s'", ")", "\n", "np", ".", "savetxt", "(", "csvs_folder_path", "+", "mem_file_name", ",", "[", "p", "for", "p", "in", "results", "[", "2", "]", "]", ",", "delimiter", "=", "delimiter", ",", "fmt", "=", "'%s'", ")", "\n", "np", ".", "savetxt", "(", "csvs_folder_path", "+", "f1_file_name", ",", "[", "p", "for", "p", "in", "results", "[", "3", "]", "]", ",", "delimiter", "=", "delimiter", ",", "fmt", "=", "'%s'", ")", "\n", "np", ".", "savetxt", "(", "csvs_folder_path", "+", "cf_file_name", ",", "[", "p", "for", "p", "in", "results", "[", "4", "]", "]", ",", "delimiter", "=", "delimiter", ",", "fmt", "=", "'%s'", ")", "\n", "\n", "\n", "", "def", "evaluate", "(", "y_true", ",", "y_pred", ",", "metric", "=", "'accuracy'", ")", ":", "\n", "\t", "if", "metric", "==", "'accuracy'", ":", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_pos_neg_rate_stacked_bars_total": [[78, 149], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.xaxis.set_ticks", "fig.add_subplot.legend", "range", "plt.figure.suptitle", "fig.add_subplot.figure.canvas.set_window_title", "figures.append", "matplotlib.show", "metrics.multipage", "x.append", "range", "metrics.plot_statistics", "y_fp.append", "y_fn.append", "y_tp.append", "y_tn.append", "len", "matplotlib.annotate", "matplotlib.annotate", "matplotlib.annotate", "range", "zip", "zip", "str", "str", "str", "len"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.multipage", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_statistics"], ["", "def", "plot_pos_neg_rate_stacked_bars_total", "(", "experiment_name", ",", "arr_readouts", ",", "num_classes", ",", "fig_path", ")", ":", "\n", "\t", "figures", "=", "[", "]", "\n", "x", "=", "[", "]", "\n", "y_fp", "=", "[", "]", "\n", "y_fn", "=", "[", "]", "\n", "y_tp", "=", "[", "]", "\n", "y_tn", "=", "[", "]", "\n", "\n", "#COLOR = 'black'", "\n", "#mpl.rcParams['text.color'] = 'white'", "\n", "#mpl.rcParams['axes.labelcolor'] = 'black'", "\n", "#mpl.rcParams['xtick.color'] = 'black'", "\n", "#mpl.rcParams['ytick.color'] = 'black'", "\n", "mpl", ".", "rcParams", "[", "'font.size'", "]", "=", "12", "\n", "\n", "for", "readout", "in", "arr_readouts", ":", "\n", "\t\t", "fp", ",", "fn", ",", "tp", ",", "tn", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "x", ".", "append", "(", "readout", ".", "name", ")", "\n", "\n", "for", "monitored_class", "in", "range", "(", "num_classes", ")", ":", "\n", "\t\t\t", "fp", "+=", "readout", ".", "avg_cf", "[", "monitored_class", "]", "[", "0", "]", "\n", "fn", "+=", "readout", ".", "avg_cf", "[", "monitored_class", "]", "[", "1", "]", "\n", "tp", "+=", "readout", ".", "avg_cf", "[", "monitored_class", "]", "[", "2", "]", "\n", "tn", "+=", "readout", ".", "avg_cf", "[", "monitored_class", "]", "[", "3", "]", "\n", "\n", "", "plot_statistics", "(", "readout", ".", "name", ",", "tn", ",", "tp", ",", "fp", ",", "fn", ")", "\n", "\n", "y_fp", ".", "append", "(", "fp", ")", "\n", "y_fn", ".", "append", "(", "fn", ")", "\n", "y_tp", ".", "append", "(", "tp", ")", "\n", "y_tn", ".", "append", "(", "tn", ")", "\n", "\n", "", "xticks", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", ")", "\n", "width", "=", "0.3", "\n", "blue", "=", "[", "0", ",", ".4", ",", ".6", "]", "\n", "yellow", "=", "[", "1", ",", "0.65", ",", "0.25", "]", "\n", "red", "=", "[", "1", ",", "0", ",", "0", "]", "\n", "darkgrey", "=", "'darkgrey'", "\n", "gray", "=", "'gray'", "\n", "grey", "=", "'grey'", "\n", "ax", ".", "bar", "(", "x", ",", "y_tp", ",", "color", "=", "darkgrey", ",", "edgecolor", "=", "\"white\"", ",", "width", "=", "width", ",", "label", "=", "'True positive'", ")", "\n", "sums", "=", "y_tp", "\n", "ax", ".", "bar", "(", "x", ",", "y_fn", ",", "bottom", "=", "sums", ",", "color", "=", "grey", ",", "edgecolor", "=", "\"white\"", ",", "hatch", "=", "\"x\"", ",", "width", "=", "width", ",", "label", "=", "'False negative'", ")", "\n", "sums", "=", "[", "_x", "+", "_y", "for", "_x", ",", "_y", "in", "zip", "(", "sums", ",", "y_fn", ")", "]", "\n", "ax", ".", "bar", "(", "x", ",", "y_fp", ",", "bottom", "=", "sums", ",", "color", "=", "gray", ",", "edgecolor", "=", "'white'", ",", "hatch", "=", "\".\"", ",", "width", "=", "width", ",", "label", "=", "'False positive'", ")", "\n", "sums", "=", "[", "_x", "+", "_y", "for", "_x", ",", "_y", "in", "zip", "(", "sums", ",", "y_fp", ")", "]", "\n", "#ax.bar(x, y_tn, bottom=sums, color=[0, 0.2, 0.1], edgecolor='white', hatch=\"*\", width=width, label='True negative')", "\n", "\n", "ax", ".", "set_xlabel", "(", "\"Methods\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"Instances\"", ")", "\n", "#ax.set_ylim([0, 100])", "\n", "ax", ".", "xaxis", ".", "set_ticks", "(", "xticks", ",", "x", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "#ax.annotate('{}'.format(height))", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "y_fp", ")", ")", ":", "\n", "\t\t", "plt", ".", "annotate", "(", "str", "(", "y_tp", "[", "i", "]", ")", ",", "xy", "=", "(", "width", "/", "2", "+", "i", "-", "0.2", ",", "y_tp", "[", "i", "]", "*", "0.2", ")", ",", "va", "=", "'bottom'", ",", "ha", "=", "'left'", ")", "\n", "plt", ".", "annotate", "(", "str", "(", "y_fn", "[", "i", "]", ")", ",", "xy", "=", "(", "width", "/", "2", "+", "i", "-", "0.2", ",", "(", "y_fn", "[", "i", "]", "+", "y_tp", "[", "i", "]", ")", "-", "y_fn", "[", "i", "]", "*", "0.5", ")", ",", "va", "=", "'bottom'", ",", "ha", "=", "'left'", ")", "\n", "plt", ".", "annotate", "(", "str", "(", "y_fp", "[", "i", "]", ")", ",", "xy", "=", "(", "width", "/", "2", "+", "i", "-", "0.2", ",", "(", "y_fp", "[", "i", "]", "+", "y_fn", "[", "i", "]", "+", "y_tp", "[", "i", "]", ")", "-", "y_fp", "[", "i", "]", "*", "0.5", ")", ",", "va", "=", "'bottom'", ",", "ha", "=", "'left'", ")", "\n", "\n", "\n", "\n", "", "fig", ".", "suptitle", "(", "experiment_name", ")", "\n", "ax", ".", "figure", ".", "canvas", ".", "set_window_title", "(", "experiment_name", ")", "\n", "figures", ".", "append", "(", "fig", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "multipage", "(", "fig_path", ",", "figures", ",", "dpi", "=", "250", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.multipage": [[111, 118], ["matplotlib.backends.backend_pdf.PdfPages", "matplotlib.backends.backend_pdf.PdfPages.close", "fig.savefig", "matplotlib.figure", "matplotlib.get_fignums"], "function", ["None"], ["\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", ")", "\n", "width", "=", "0.3", "\n", "blue", "=", "[", "0", ",", ".4", ",", ".6", "]", "\n", "yellow", "=", "[", "1", ",", "0.65", ",", "0.25", "]", "\n", "red", "=", "[", "1", ",", "0", ",", "0", "]", "\n", "darkgrey", "=", "'darkgrey'", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_act_func_boxes_animation": [[162, 164], ["None"], "function", ["None"], ["", "def", "plot_act_func_boxes_animation", "(", "boxes", ",", "point", ")", ":", "\n", "\t", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_statistics": [[166, 200], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "math.sqrt", "math.sqrt"], "function", ["None"], ["", "def", "plot_statistics", "(", "title", ",", "tn", ",", "tp", ",", "fp", ",", "fn", ")", ":", "\n", "\t", "print", "(", "'Method:'", ",", "title", ")", "\n", "print", "(", "'fp'", ",", "fp", ")", "\n", "print", "(", "'fn'", ",", "fn", ")", "\n", "print", "(", "'tp'", ",", "tp", ")", "\n", "print", "(", "'tn'", ",", "tn", ")", "\n", "\n", "total_instances", "=", "tn", "+", "tp", "+", "fp", "+", "fn", "\n", "#print(\"total instances = \", total_instances)", "\n", "\n", "#print(\"TNR @ TPR 95% =\", )", "\n", "\n", "print", "(", "\"monitors accuracy =\"", ",", "(", "tn", "+", "tp", ")", "/", "(", "tn", "+", "tp", "+", "fp", "+", "fn", ")", ")", "\n", "\n", "mcc", "=", "(", "(", "tp", "*", "tn", ")", "-", "(", "fp", "*", "fn", ")", ")", "/", "math", ".", "sqrt", "(", "(", "tp", "+", "fp", ")", "*", "(", "tp", "+", "fn", ")", "*", "(", "tn", "+", "fp", ")", "*", "(", "tn", "+", "fn", ")", ")", "\n", "print", "(", "\"monitor MCC score = \"", ",", "mcc", ")", "\n", "\n", "error", "=", "(", "fp", "+", "fn", ")", "/", "(", "tn", "+", "tp", "+", "fp", "+", "fn", ")", "\n", "print", "(", "\"monitors error =\"", ",", "error", ")", "\n", "\n", "confidence_score", "=", "1.96", "*", "math", ".", "sqrt", "(", "(", "error", "*", "(", "1", "-", "error", ")", ")", "/", "total_instances", ")", "# Wilson score with 95% confidence interval (1.96)", "\n", "print", "(", "\"confidence interval = [{}, {}]\"", ".", "format", "(", "error", "-", "confidence_score", ",", "error", "+", "confidence_score", ")", ")", "\n", "\n", "tnr", "=", "tn", "/", "(", "tn", "+", "fp", ")", "# specificity", "\n", "print", "(", "\"monitors specificity =\"", ",", "tnr", ")", "\n", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "print", "(", "\"monitors precision =\"", ",", "precision", ")", "\n", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "# sensitivity or TPR", "\n", "print", "(", "\"monitors recall =\"", ",", "recall", ")", "\n", "\n", "F1", "=", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "print", "(", "\"monitors F1 score =\"", ",", "F1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.ROC_ID_OOD": [[202, 207], ["sklearn.metrics.roc_curve", "sklearn.metrics.roc_curve"], "function", ["None"], ["", "def", "ROC_ID_OOD", "(", "y_test_ID", ",", "y_score_ID", ",", "y_test_OOD", ",", "y_score_OOD", ")", ":", "\n", "\t", "fpr_id", ",", "tpr_id", ",", "thresholds_id", "=", "roc_curve", "(", "y_test_ID", ",", "y_score_ID", ",", "drop_intermediate", "=", "False", ")", "\n", "fpr_ood", ",", "tpr_ood", ",", "thresholds_ood", "=", "roc_curve", "(", "y_test_OOD", ",", "y_score_OOD", ",", "drop_intermediate", "=", "False", ")", "\n", "\n", "return", "fpr_id", ",", "tpr_id", ",", "thresholds_id", ",", "fpr_ood", ",", "tpr_ood", ",", "thresholds_ood", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_ROC_curve_ID_OOD": [[209, 284], ["matplotlib.figure", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.title", "print", "print", "metrics.plot_confusion_matrix", "metrics.plot_confusion_matrix.figure_.suptitle", "print", "matplotlib.show", "metrics.classification_report", "metrics.classification_report"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot"], ["", "def", "plot_ROC_curve_ID_OOD", "(", "list_of_readouts", ",", "mode", ")", ":", "\n", "#(y_test_ID, y_score_ID, y_test_OOD, y_score_OOD)", "\n", "#y_test = np.hstack([y_test_ID, y_test_OOD])", "\n", "#y_score = np.hstack([y_score_ID, y_score_OOD])", "\n", "#fpr, tpr, _ = roc_curve(y_test, y_score)", "\n", "\t", "plt", ".", "figure", "(", ")", "\n", "lw", "=", "2", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "color", "=", "'navy'", ",", "lw", "=", "lw", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "title", "(", "'ROC Curves'", ")", "\n", "\n", "\n", "for", "readout", "in", "list_of_readouts", ":", "\n", "\n", "\t\t", "y_test_ID", "=", "readout", ".", "arr_pos_neg_ID_true", "\n", "y_score_ID", "=", "readout", ".", "arr_pos_neg_ID_pred", "\n", "y_test_OOD", "=", "readout", ".", "arr_pos_neg_OOD_true", "\n", "y_score_OOD", "=", "readout", ".", "arr_pos_neg_OOD_pred", "\n", "title", "=", "readout", ".", "title", "\n", "target_names", "=", "[", "'Negative'", ",", "'Positive'", "]", "\n", "print", "(", "metrics", ".", "classification_report", "(", "y_test_ID", ",", "y_score_ID", ",", "target_names", "=", "target_names", ")", ")", "\n", "print", "(", "metrics", ".", "classification_report", "(", "y_test_OOD", ",", "y_score_OOD", ",", "target_names", "=", "target_names", ")", ")", "\n", "\n", "disp", "=", "metrics", ".", "plot_confusion_matrix", "(", "classifier", ",", "X_test", ",", "y_test", ")", "\n", "disp", ".", "figure_", ".", "suptitle", "(", "\"Confusion Matrix\"", ")", "\n", "print", "(", "\"Confusion matrix:\\n%s\"", "%", "disp", ".", "confusion_matrix", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "", "'''\n\t\tfpr_id, tpr_id, thresholds_id, fpr_ood, tpr_ood, thresholds_ood = ROC_ID_OOD(y_test_ID, y_score_ID, y_test_OOD, y_score_OOD)\n\t\n\t\tif mode == 'fp_tp':\n\t\t\t# fpr ood x tpr id \n\t\t\t# True positive rate in ID over false positive rate in OOD = verifies how much the monitor\n\t\t\t# helps the classifier in avoiding missclassification on known data while avoiding raising false alarms on OOD\n\t\t\troc_auc = auc(fpr_ood, tpr_id)\n\t\t\tlabel = '{} (area = {})'.format(title, round(roc_auc, 2))\n\t\t\t\n\t\t\tplt.plot(fpr_ood, tpr_id, #color='darkorange',\n\t\t\t         lw=lw, label=label)\n\t\t\tplt.legend(loc=\"lower right\")\n\n\t\t\tplt.xlabel('FPR on {}'.format(readout.ood_dataset))\n\t\t\tplt.ylabel('TPR on {}'.format(readout.id_dataset))\n\t\t\t\n\t\telif mode == 'tp_fp':\n\t\t\t# tpr ood x fpr id\n\t\t\t# False positive rate in ID over true positive rate in OOD = verifies how much the monitor\n\t\t\t# raises false alarms on known data while correctly identifying OOD data\n\t\t\troc_auc = auc(tpr_ood, fpr_id)\n\t\t\tlabel = '{} (area = {})'.format(title, round(roc_auc, 2))\n\t\t\t\n\t\t\tplt.plot(tpr_ood, fpr_id, lw=lw, label=label)\n\t\t\tplt.legend(loc=\"lower right\")\n\n\t\t\tplt.xlabel('TPR on {}'.format(readout.ood_dataset))\n\t\t\tplt.ylabel('FPR on {}'.format(readout.id_dataset))\n\n\t\tarea = get_AUPR(y_test_ID, y_score_ID)\n\t\tprint (\"Area Under PR Curve(AP) ID: %0.2f\" % area)\n\t\tprint('AUROC ID', roc_auc_score(y_test_ID, y_score_ID))\n\n\t\tarea = get_AUPR(y_test_OOD, y_score_OOD)\n\t\tprint (\"Area Under PR Curve(AP) OOD: %0.2f\" % area)\n\t\tprint('AUROC OOD', roc_auc_score(y_test_OOD, y_score_OOD))\n\n\t\tprint('thresholds_ood', thresholds_ood)\n\t\tprint('thresholds_id', thresholds_id)\n\t\tind = np.where(tpr_ood==0.95)\n\n\t\tprint('FPR at 95% TPR:', fpr_id[ind])\n\n\tplt.show()\n\t'''", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_FPR_at_TPR": [[286, 288], ["None"], "function", ["None"], ["", "def", "plot_FPR_at_TPR", "(", "fpr", ",", "tpr", ",", "tpr_rate", "=", "0.95", ")", ":", "\n", "\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.get_AUPR": [[290, 294], ["sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc"], "function", ["None"], ["", "def", "get_AUPR", "(", "labels", ",", "predicted", ")", ":", "\n", "\t", "precision", ",", "recall", ",", "thresholds", "=", "precision_recall_curve", "(", "labels", ",", "predicted", ")", "\n", "area", "=", "auc", "(", "recall", ",", "precision", ")", "\n", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_box_analysis": [[296, 298], ["None"], "function", ["None"], ["", "def", "plot_box_analysis", "(", "boxes_monitor", ",", "point", ")", ":", "\n", "\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_monitored_instances": [[300, 302], ["None"], "function", ["None"], ["", "def", "plot_monitored_instances", "(", ")", ":", "\n", "\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.confusion_matrix": [[304, 323], ["pd.DataFrame", "matplotlib.figure", "sn.set", "sn.heatmap", "matplotlib.show", "range", "range"], "function", ["None"], ["", "def", "confusion_matrix", "(", ")", ":", "\n", "\t", "import", "seaborn", "as", "sn", "\n", "import", "pandas", "as", "pd", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "\n", "array", "=", "[", "[", "13", ",", "1", ",", "1", ",", "0", ",", "2", ",", "0", "]", ",", "\n", "[", "3", ",", "9", ",", "6", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "16", ",", "2", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "13", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "15", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "15", "]", "]", "\n", "\n", "df_cm", "=", "pd", ".", "DataFrame", "(", "array", ",", "range", "(", "6", ")", ",", "range", "(", "6", ")", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "10", ")", ")", "\n", "sn", ".", "set", "(", "font_scale", "=", "1", ")", "# for label size", "\n", "sn", ".", "heatmap", "(", "df_cm", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "12", "}", ")", "# font size", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.conv_out_size_same": [[17, 29], ["int", "math.ceil", "float", "float"], "function", ["None"], ["def", "conv_out_size_same", "(", "size", ",", "stride", ")", ":", "\n", "  ", "\"\"\"Compute the conv layer output size.\n  \n  Arguments:\n    size {int} -- Input size.\n    stride {int} -- conv stride.\n  \n  Returns:\n    [int] -- conv layer output size\n  \"\"\"", "\n", "\n", "return", "int", "(", "math", ".", "ceil", "(", "float", "(", "size", ")", "/", "float", "(", "stride", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.get_image": [[30, 36], ["scgan_utils.imread", "scgan_utils.transform"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imread", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["", "def", "get_image", "(", "image_path", ",", "input_height", ",", "input_width", ",", "\n", "resize_height", "=", "64", ",", "resize_width", "=", "64", ",", "\n", "crop", "=", "True", ",", "grayscale", "=", "False", ")", ":", "\n", "  ", "image", "=", "imread", "(", "image_path", ",", "grayscale", ")", "\n", "return", "transform", "(", "image", ",", "input_height", ",", "input_width", ",", "\n", "resize_height", ",", "resize_width", ",", "crop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.get_image_Slicization": [[37, 41], ["imread().astype", "scgan_utils.transform_Slicization", "tmpTransform.reshape", "scgan_utils.imread"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform_Slicization", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imread"], ["", "def", "get_image_Slicization", "(", "image_path", ",", "patch_size", ",", "patch_step", ",", "grayscale", "=", "False", ")", ":", "\n", "  ", "image", "=", "imread", "(", "image_path", ",", "grayscale", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "tmpTransform", ",", "nSlicization_shape", "=", "transform_Slicization", "(", "image", "/", "127.5", "-", "1", ",", "patch_size", ",", "patch_step", ")", "#[100:235,0:360]", "\n", "return", "tmpTransform", ".", "reshape", "(", "-", "1", ",", "patch_size", "[", "0", "]", ",", "patch_size", "[", "1", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.get_image_SlicizationWithShape": [[43, 47], ["imread().astype", "scgan_utils.transform_Slicization", "tmpTransform.reshape", "scgan_utils.imread"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform_Slicization", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imread"], ["", "def", "get_image_SlicizationWithShape", "(", "image_path", ",", "patch_size", ",", "patch_step", ",", "grayscale", "=", "False", ")", ":", "\n", "  ", "image", "=", "imread", "(", "image_path", ",", "grayscale", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "tmpTransform", ",", "nSlicization_shape", "=", "transform_Slicization", "(", "image", "/", "127.5", "-", "1.", ",", "patch_size", ",", "patch_step", ")", "#[100:230,0:360]", "\n", "return", "tmpTransform", ".", "reshape", "(", "-", "1", ",", "patch_size", "[", "0", "]", ",", "patch_size", "[", "1", "]", ",", "1", ")", ",", "nSlicization_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform_Slicization": [[48, 50], ["scgan_utils.kh_make_patches"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.kh_make_patches"], ["", "def", "transform_Slicization", "(", "image", ",", "patch_size", ",", "patch_step", ")", ":", "\n", "  ", "return", "kh_make_patches", "(", "image", ",", "patch_size", ",", "patch_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.save_images": [[51, 53], ["scgan_utils.imsave", "scgan_utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imsave", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.inverse_transform"], ["", "def", "save_images", "(", "images", ",", "size", ",", "image_path", ")", ":", "\n", "  ", "return", "imsave", "(", "inverse_transform", "(", "images", ")", ",", "size", ",", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imread": [[54, 60], ["scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imread", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imread"], ["", "def", "imread", "(", "path", ",", "grayscale", "=", "False", ")", ":", "\n", "  ", "if", "(", "grayscale", ")", ":", "\n", "#print(path)", "\n", "    ", "return", "scipy", ".", "misc", ".", "imread", "(", "path", ",", "flatten", "=", "True", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "else", ":", "\n", "    ", "return", "scipy", ".", "misc", ".", "imread", "(", "path", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.merge_images": [[61, 63], ["scgan_utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.inverse_transform"], ["", "", "def", "merge_images", "(", "images", ",", "size", ")", ":", "\n", "  ", "return", "inverse_transform", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.merge": [[64, 89], ["numpy.zeros", "enumerate", "numpy.zeros", "enumerate", "ValueError"], "function", ["None"], ["", "def", "merge", "(", "images", ",", "size", ")", ":", "\n", "  ", "h", ",", "w", "=", "images", ".", "shape", "[", "1", "]", ",", "images", ".", "shape", "[", "2", "]", "\n", "if", "(", "images", ".", "shape", "[", "3", "]", "in", "(", "3", ",", "4", ")", ")", ":", "\n", "    ", "c", "=", "images", ".", "shape", "[", "3", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "size", "[", "0", "]", ",", "w", "*", "size", "[", "1", "]", ",", "c", ")", ")", "\n", "try", ":", "\n", "      ", "for", "idx", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "i", "=", "idx", "%", "size", "[", "1", "]", "\n", "j", "=", "idx", "//", "size", "[", "1", "]", "\n", "img", "[", "j", "*", "h", ":", "j", "*", "h", "+", "h", ",", "i", "*", "w", ":", "i", "*", "w", "+", "w", ",", ":", "]", "=", "image", "\n", "", "return", "img", "\n", "", "except", ":", "\n", "      ", "return", "img", "\n", "", "", "elif", "images", ".", "shape", "[", "3", "]", "==", "1", ":", "\n", "    ", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "size", "[", "0", "]", ",", "w", "*", "size", "[", "1", "]", ")", ")", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "      ", "i", "=", "idx", "%", "size", "[", "1", "]", "\n", "j", "=", "idx", "//", "size", "[", "1", "]", "\n", "#print(idx)", "\n", "a", "=", "img", "[", "j", "*", "h", ":", "j", "*", "h", "+", "h", ",", "i", "*", "w", ":", "i", "*", "w", "+", "w", "]", "\n", "if", "(", "a", ".", "shape", "==", "image", "[", ":", ",", ":", ",", "0", "]", ".", "shape", ")", ":", "\n", "        ", "img", "[", "j", "*", "h", ":", "j", "*", "h", "+", "h", ",", "i", "*", "w", ":", "i", "*", "w", "+", "w", "]", "=", "image", "[", ":", ",", ":", ",", "0", "]", "\n", "", "", "return", "img", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'in merge(images,size) images parameter '", "\n", "'must have dimensions: HxW or HxWx3 or HxWx4'", ")", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imsave": [[91, 95], ["numpy.squeeze", "imageio.imwrite", "scgan_utils.merge"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.merge"], ["", "", "def", "imsave", "(", "images", ",", "size", ",", "path", ")", ":", "\n", "  ", "image", "=", "np", ".", "squeeze", "(", "merge", "(", "images", ",", "size", ")", ")", "\n", "#return scipy.misc.imsave(path, image)", "\n", "return", "imageio", ".", "imwrite", "(", "path", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.center_crop": [[96, 105], ["int", "int", "scipy.misc.imresize", "round", "round"], "function", ["None"], ["", "def", "center_crop", "(", "x", ",", "crop_h", ",", "crop_w", ",", "\n", "resize_h", "=", "64", ",", "resize_w", "=", "64", ")", ":", "\n", "  ", "if", "crop_w", "is", "None", ":", "\n", "    ", "crop_w", "=", "crop_h", "\n", "", "h", ",", "w", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "j", "=", "int", "(", "round", "(", "(", "h", "-", "crop_h", ")", "/", "2.", ")", ")", "\n", "i", "=", "int", "(", "round", "(", "(", "w", "-", "crop_w", ")", "/", "2.", ")", ")", "\n", "return", "scipy", ".", "misc", ".", "imresize", "(", "\n", "x", "[", "j", ":", "j", "+", "crop_h", ",", "i", ":", "i", "+", "crop_w", "]", ",", "[", "resize_h", ",", "resize_w", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform": [[106, 115], ["scgan_utils.center_crop", "scipy.misc.imresize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.center_crop"], ["", "def", "transform", "(", "image", ",", "input_height", ",", "input_width", ",", "\n", "resize_height", "=", "64", ",", "resize_width", "=", "64", ",", "crop", "=", "True", ")", ":", "\n", "  ", "if", "crop", ":", "\n", "    ", "cropped_image", "=", "center_crop", "(", "\n", "image", ",", "input_height", ",", "input_width", ",", "\n", "resize_height", ",", "resize_width", ")", "\n", "", "else", ":", "\n", "    ", "cropped_image", "=", "scipy", ".", "misc", ".", "imresize", "(", "image", ",", "[", "resize_height", ",", "resize_width", "]", ")", "\n", "", "return", "np", ".", "array", "(", "cropped_image", ")", "/", "127.5", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.inverse_transform": [[116, 118], ["None"], "function", ["None"], ["", "def", "inverse_transform", "(", "images", ")", ":", "\n", "  ", "return", "(", "images", "+", "1.", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.to_json": [[119, 181], ["open", "layer_f.write", "b.eval", "[].split", "w.eval", "numpy.rollaxis", "bn.gamma.eval", "bn.beta.eval", "lines.replace().split", "w.eval", "fs.append", "fs.append", "list", "lines.replace", "w.name.split", "list", "list", "layer_idx.split", "int", "int", "list", "list", "w_.flatten"], "function", ["None"], ["", "def", "to_json", "(", "output_path", ",", "*", "layers", ")", ":", "\n", "  ", "with", "open", "(", "output_path", ",", "\"w\"", ")", "as", "layer_f", ":", "\n", "    ", "lines", "=", "\"\"", "\n", "for", "w", ",", "b", ",", "bn", "in", "layers", ":", "\n", "      ", "layer_idx", "=", "w", ".", "name", ".", "split", "(", "'/'", ")", "[", "0", "]", ".", "split", "(", "'h'", ")", "[", "1", "]", "\n", "\n", "B", "=", "b", ".", "eval", "(", ")", "\n", "\n", "if", "\"lin/\"", "in", "w", ".", "name", ":", "\n", "        ", "W", "=", "w", ".", "eval", "(", ")", "\n", "depth", "=", "W", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "W", "=", "np", ".", "rollaxis", "(", "w", ".", "eval", "(", ")", ",", "2", ",", "0", ")", "\n", "depth", "=", "W", ".", "shape", "[", "0", "]", "\n", "\n", "", "biases", "=", "{", "\"sy\"", ":", "1", ",", "\"sx\"", ":", "1", ",", "\"depth\"", ":", "depth", ",", "\"w\"", ":", "[", "'%.2f'", "%", "elem", "for", "elem", "in", "list", "(", "B", ")", "]", "}", "\n", "if", "bn", "!=", "None", ":", "\n", "        ", "gamma", "=", "bn", ".", "gamma", ".", "eval", "(", ")", "\n", "beta", "=", "bn", ".", "beta", ".", "eval", "(", ")", "\n", "\n", "gamma", "=", "{", "\"sy\"", ":", "1", ",", "\"sx\"", ":", "1", ",", "\"depth\"", ":", "depth", ",", "\"w\"", ":", "[", "'%.2f'", "%", "elem", "for", "elem", "in", "list", "(", "gamma", ")", "]", "}", "\n", "beta", "=", "{", "\"sy\"", ":", "1", ",", "\"sx\"", ":", "1", ",", "\"depth\"", ":", "depth", ",", "\"w\"", ":", "[", "'%.2f'", "%", "elem", "for", "elem", "in", "list", "(", "beta", ")", "]", "}", "\n", "", "else", ":", "\n", "        ", "gamma", "=", "{", "\"sy\"", ":", "1", ",", "\"sx\"", ":", "1", ",", "\"depth\"", ":", "0", ",", "\"w\"", ":", "[", "]", "}", "\n", "beta", "=", "{", "\"sy\"", ":", "1", ",", "\"sx\"", ":", "1", ",", "\"depth\"", ":", "0", ",", "\"w\"", ":", "[", "]", "}", "\n", "\n", "", "if", "\"lin/\"", "in", "w", ".", "name", ":", "\n", "        ", "fs", "=", "[", "]", "\n", "for", "w", "in", "W", ".", "T", ":", "\n", "          ", "fs", ".", "append", "(", "{", "\"sy\"", ":", "1", ",", "\"sx\"", ":", "1", ",", "\"depth\"", ":", "W", ".", "shape", "[", "0", "]", ",", "\"w\"", ":", "[", "'%.2f'", "%", "elem", "for", "elem", "in", "list", "(", "w", ")", "]", "}", ")", "\n", "\n", "", "lines", "+=", "\"\"\"\n          var layer_%s = {\n            \"layer_type\": \"fc\", \n            \"sy\": 1, \"sx\": 1, \n            \"out_sx\": 1, \"out_sy\": 1,\n            \"stride\": 1, \"pad\": 0,\n            \"out_depth\": %s, \"in_depth\": %s,\n            \"biases\": %s,\n            \"gamma\": %s,\n            \"beta\": %s,\n            \"filters\": %s\n          };\"\"\"", "%", "(", "layer_idx", ".", "split", "(", "'_'", ")", "[", "0", "]", ",", "W", ".", "shape", "[", "1", "]", ",", "W", ".", "shape", "[", "0", "]", ",", "biases", ",", "gamma", ",", "beta", ",", "fs", ")", "\n", "", "else", ":", "\n", "        ", "fs", "=", "[", "]", "\n", "for", "w_", "in", "W", ":", "\n", "          ", "fs", ".", "append", "(", "{", "\"sy\"", ":", "5", ",", "\"sx\"", ":", "5", ",", "\"depth\"", ":", "W", ".", "shape", "[", "3", "]", ",", "\"w\"", ":", "[", "'%.2f'", "%", "elem", "for", "elem", "in", "list", "(", "w_", ".", "flatten", "(", ")", ")", "]", "}", ")", "\n", "\n", "", "lines", "+=", "\"\"\"\n          var layer_%s = {\n            \"layer_type\": \"deconv\", \n            \"sy\": 5, \"sx\": 5,\n            \"out_sx\": %s, \"out_sy\": %s,\n            \"stride\": 2, \"pad\": 1,\n            \"out_depth\": %s, \"in_depth\": %s,\n            \"biases\": %s,\n            \"gamma\": %s,\n            \"beta\": %s,\n            \"filters\": %s\n          };\"\"\"", "%", "(", "layer_idx", ",", "2", "**", "(", "int", "(", "layer_idx", ")", "+", "2", ")", ",", "2", "**", "(", "int", "(", "layer_idx", ")", "+", "2", ")", ",", "\n", "W", ".", "shape", "[", "0", "]", ",", "W", ".", "shape", "[", "3", "]", ",", "biases", ",", "gamma", ",", "beta", ",", "fs", ")", "\n", "", "", "layer_f", ".", "write", "(", "\" \"", ".", "join", "(", "lines", ".", "replace", "(", "\"'\"", ",", "\"\"", ")", ".", "split", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.make_gif": [[182, 198], ["mpy.VideoClip", "mpy.VideoClip.write_gif", "x.astype", "len", "int", "len"], "function", ["None"], ["", "", "def", "make_gif", "(", "images", ",", "fname", ",", "duration", "=", "2", ",", "true_image", "=", "False", ")", ":", "\n", "  ", "import", "moviepy", ".", "editor", "as", "mpy", "\n", "\n", "def", "make_frame", "(", "t", ")", ":", "\n", "    ", "try", ":", "\n", "      ", "x", "=", "images", "[", "int", "(", "len", "(", "images", ")", "/", "duration", "*", "t", ")", "]", "\n", "", "except", ":", "\n", "      ", "x", "=", "images", "[", "-", "1", "]", "\n", "\n", "", "if", "true_image", ":", "\n", "      ", "return", "x", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "      ", "return", "(", "(", "x", "+", "1", ")", "/", "2", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "", "clip", "=", "mpy", ".", "VideoClip", "(", "make_frame", ",", "duration", "=", "duration", ")", "\n", "clip", ".", "write_gif", "(", "fname", ",", "fps", "=", "len", "(", "images", ")", "/", "duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.visualize": [[199, 271], ["int", "math.ceil", "numpy.random.uniform", "sess.run", "scgan_utils.save_images", "numpy.arange", "six.moves.xrange", "time.strftime", "print", "numpy.zeros", "enumerate", "scgan_utils.save_images", "numpy.arange", "time.gmtime", "numpy.random.choice", "numpy.zeros", "sess.run", "sess.run", "random.randint", "print", "numpy.random.uniform", "numpy.tile", "enumerate", "numpy.arange", "six.moves.xrange", "six.moves.xrange", "numpy.random.choice", "numpy.zeros", "sess.run", "sess.run", "scgan_utils.make_gif", "print", "numpy.zeros", "enumerate", "sess.run", "scgan_utils.make_gif", "numpy.arange", "six.moves.xrange", "scgan_utils.make_gif", "scgan_utils.save_images", "print", "numpy.zeros", "enumerate", "image_set.append", "scgan_utils.make_gif", "scgan_utils.merge", "numpy.arange", "sess.run", "numpy.array", "numpy.arange", "time.strftime", "range", "range", "time.gmtime"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.save_images", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.save_images", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.make_gif", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.make_gif", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.make_gif", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.save_images", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.make_gif", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.merge", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run"], ["", "def", "visualize", "(", "sess", ",", "dcgan", ",", "config", ",", "option", ")", ":", "\n", "  ", "image_frame_dim", "=", "int", "(", "math", ".", "ceil", "(", "config", ".", "batch_size", "**", ".5", ")", ")", "\n", "if", "option", "==", "0", ":", "\n", "    ", "z_sample", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ",", "size", "=", "(", "config", ".", "batch_size", ",", "dcgan", ".", "z_dim", ")", ")", "\n", "samples", "=", "sess", ".", "run", "(", "dcgan", ".", "sampler", ",", "feed_dict", "=", "{", "dcgan", ".", "z", ":", "z_sample", "}", ")", "\n", "save_images", "(", "samples", ",", "[", "image_frame_dim", ",", "image_frame_dim", "]", ",", "'./samples/test_%s.png'", "%", "strftime", "(", "\"%Y%m%d%H%M%S\"", ",", "gmtime", "(", ")", ")", ")", "\n", "", "elif", "option", "==", "1", ":", "\n", "    ", "values", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "config", ".", "batch_size", ")", "\n", "for", "idx", "in", "xrange", "(", "100", ")", ":", "\n", "      ", "print", "(", "\" [*] %d\"", "%", "idx", ")", "\n", "z_sample", "=", "np", ".", "zeros", "(", "[", "config", ".", "batch_size", ",", "dcgan", ".", "z_dim", "]", ")", "\n", "for", "kdx", ",", "z", "in", "enumerate", "(", "z_sample", ")", ":", "\n", "        ", "z", "[", "idx", "]", "=", "values", "[", "kdx", "]", "\n", "\n", "", "if", "config", ".", "dataset", "==", "\"mnist\"", ":", "\n", "        ", "y", "=", "np", ".", "random", ".", "choice", "(", "10", ",", "config", ".", "batch_size", ")", "\n", "y_one_hot", "=", "np", ".", "zeros", "(", "(", "config", ".", "batch_size", ",", "10", ")", ")", "\n", "y_one_hot", "[", "np", ".", "arange", "(", "config", ".", "batch_size", ")", ",", "y", "]", "=", "1", "\n", "\n", "samples", "=", "sess", ".", "run", "(", "dcgan", ".", "sampler", ",", "feed_dict", "=", "{", "dcgan", ".", "z", ":", "z_sample", ",", "dcgan", ".", "y", ":", "y_one_hot", "}", ")", "\n", "", "else", ":", "\n", "        ", "samples", "=", "sess", ".", "run", "(", "dcgan", ".", "sampler", ",", "feed_dict", "=", "{", "dcgan", ".", "z", ":", "z_sample", "}", ")", "\n", "\n", "", "save_images", "(", "samples", ",", "[", "image_frame_dim", ",", "image_frame_dim", "]", ",", "'./samples/test_arange_%s.png'", "%", "(", "idx", ")", ")", "\n", "", "", "elif", "option", "==", "2", ":", "\n", "    ", "values", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "config", ".", "batch_size", ")", "\n", "for", "idx", "in", "[", "random", ".", "randint", "(", "0", ",", "99", ")", "for", "_", "in", "xrange", "(", "100", ")", "]", ":", "\n", "      ", "print", "(", "\" [*] %d\"", "%", "idx", ")", "\n", "z", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.2", ",", "0.2", ",", "size", "=", "(", "dcgan", ".", "z_dim", ")", ")", "\n", "z_sample", "=", "np", ".", "tile", "(", "z", ",", "(", "config", ".", "batch_size", ",", "1", ")", ")", "\n", "#z_sample = np.zeros([config.batch_size, dcgan.z_dim])", "\n", "for", "kdx", ",", "z", "in", "enumerate", "(", "z_sample", ")", ":", "\n", "        ", "z", "[", "idx", "]", "=", "values", "[", "kdx", "]", "\n", "\n", "", "if", "config", ".", "dataset", "==", "\"mnist\"", ":", "\n", "        ", "y", "=", "np", ".", "random", ".", "choice", "(", "10", ",", "config", ".", "batch_size", ")", "\n", "y_one_hot", "=", "np", ".", "zeros", "(", "(", "config", ".", "batch_size", ",", "10", ")", ")", "\n", "y_one_hot", "[", "np", ".", "arange", "(", "config", ".", "batch_size", ")", ",", "y", "]", "=", "1", "\n", "\n", "samples", "=", "sess", ".", "run", "(", "dcgan", ".", "sampler", ",", "feed_dict", "=", "{", "dcgan", ".", "z", ":", "z_sample", ",", "dcgan", ".", "y", ":", "y_one_hot", "}", ")", "\n", "", "else", ":", "\n", "        ", "samples", "=", "sess", ".", "run", "(", "dcgan", ".", "sampler", ",", "feed_dict", "=", "{", "dcgan", ".", "z", ":", "z_sample", "}", ")", "\n", "\n", "", "try", ":", "\n", "        ", "make_gif", "(", "samples", ",", "'./samples/test_gif_%s.gif'", "%", "(", "idx", ")", ")", "\n", "", "except", ":", "\n", "        ", "save_images", "(", "samples", ",", "[", "image_frame_dim", ",", "image_frame_dim", "]", ",", "'./samples/test_%s.png'", "%", "strftime", "(", "\"%Y%m%d%H%M%S\"", ",", "gmtime", "(", ")", ")", ")", "\n", "", "", "", "elif", "option", "==", "3", ":", "\n", "    ", "values", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "config", ".", "batch_size", ")", "\n", "for", "idx", "in", "xrange", "(", "100", ")", ":", "\n", "      ", "print", "(", "\" [*] %d\"", "%", "idx", ")", "\n", "z_sample", "=", "np", ".", "zeros", "(", "[", "config", ".", "batch_size", ",", "dcgan", ".", "z_dim", "]", ")", "\n", "for", "kdx", ",", "z", "in", "enumerate", "(", "z_sample", ")", ":", "\n", "        ", "z", "[", "idx", "]", "=", "values", "[", "kdx", "]", "\n", "\n", "", "samples", "=", "sess", ".", "run", "(", "dcgan", ".", "sampler", ",", "feed_dict", "=", "{", "dcgan", ".", "z", ":", "z_sample", "}", ")", "\n", "make_gif", "(", "samples", ",", "'./samples/test_gif_%s.gif'", "%", "(", "idx", ")", ")", "\n", "", "", "elif", "option", "==", "4", ":", "\n", "    ", "image_set", "=", "[", "]", "\n", "values", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "config", ".", "batch_size", ")", "\n", "\n", "for", "idx", "in", "xrange", "(", "100", ")", ":", "\n", "      ", "print", "(", "\" [*] %d\"", "%", "idx", ")", "\n", "z_sample", "=", "np", ".", "zeros", "(", "[", "config", ".", "batch_size", ",", "dcgan", ".", "z_dim", "]", ")", "\n", "for", "kdx", ",", "z", "in", "enumerate", "(", "z_sample", ")", ":", "z", "[", "idx", "]", "=", "values", "[", "kdx", "]", "\n", "\n", "image_set", ".", "append", "(", "sess", ".", "run", "(", "dcgan", ".", "sampler", ",", "feed_dict", "=", "{", "dcgan", ".", "z", ":", "z_sample", "}", ")", ")", "\n", "make_gif", "(", "image_set", "[", "-", "1", "]", ",", "'./samples/test_gif_%s.gif'", "%", "(", "idx", ")", ")", "\n", "\n", "", "new_image_set", "=", "[", "merge", "(", "np", ".", "array", "(", "[", "images", "[", "idx", "]", "for", "images", "in", "image_set", "]", ")", ",", "[", "10", ",", "10", "]", ")", "for", "idx", "in", "range", "(", "64", ")", "+", "range", "(", "63", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "make_gif", "(", "new_image_set", ",", "'./samples/test_gif_merged.gif'", ",", "duration", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.kh_make_patches": [[276, 295], ["isinstance", "isinstance", "tuple", "tuple", "numpy.lib.stride_tricks.as_strided", "tuple", "tuple", "slice", "numpy.array", "list", "list", "list", "list", "numpy.array", "numpy.array"], "function", ["None"], ["def", "kh_make_patches", "(", "arr", ",", "patch_shape", "=", "2", ",", "extraction_step", "=", "1", ")", ":", "\n", "    ", "arr_ndim", "=", "arr", ".", "ndim", "\n", "if", "isinstance", "(", "patch_shape", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "patch_shape", "=", "tuple", "(", "[", "patch_shape", "]", "*", "arr_ndim", ")", "\n", "", "if", "isinstance", "(", "extraction_step", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "extraction_step", "=", "tuple", "(", "[", "extraction_step", "]", "*", "arr_ndim", ")", "\n", "\n", "", "patch_strides", "=", "arr", ".", "strides", "\n", "\n", "slices", "=", "[", "slice", "(", "None", ",", "None", ",", "st", ")", "for", "st", "in", "extraction_step", "]", "\n", "indexing_strides", "=", "arr", "[", "slices", "]", ".", "strides", "\n", "\n", "patch_indices_shape", "=", "(", "np", ".", "array", "(", "arr", ".", "shape", ")", "-", "np", ".", "array", "(", "patch_shape", ")", ")", "//", "np", ".", "array", "(", "extraction_step", ")", "+", "1", "\n", "\n", "shape", "=", "tuple", "(", "list", "(", "patch_indices_shape", ")", "+", "list", "(", "patch_shape", ")", ")", "\n", "strides", "=", "tuple", "(", "list", "(", "indexing_strides", ")", "+", "list", "(", "patch_strides", ")", ")", "\n", "\n", "patches", "=", "as_strided", "(", "arr", ",", "shape", "=", "shape", ",", "strides", "=", "strides", ")", "\n", "return", "patches", ",", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.montage": [[298, 334], ["isinstance", "int", "range", "matplotlib.imsave", "numpy.array", "numpy.ceil", "range", "numpy.sqrt", "len", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imsave"], ["", "def", "montage", "(", "images", ",", "saveto", "=", "'montage.png'", ")", ":", "\n", "    ", "\"\"\"\n      Draw all images as a montage separated by 1 pixel borders.\n      Also saves the file to the destination specified by `saveto`.\n\n    Arguments:\n      images {np.array} -- Numpy array containing a list of images.\n\n    Keyword Arguments:\n      saveto {str} -- destination file name. (default: {'montage.png'})\n\n    Returns:\n      [np.array] -- The montage numpy array.\n    \"\"\"", "\n", "if", "isinstance", "(", "images", ",", "list", ")", ":", "\n", "        ", "images", "=", "np", ".", "array", "(", "images", ")", "\n", "", "img_h", "=", "images", ".", "shape", "[", "1", "]", "\n", "img_w", "=", "images", ".", "shape", "[", "2", "]", "\n", "n_plots", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "images", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "if", "len", "(", "images", ".", "shape", ")", "==", "4", "and", "images", ".", "shape", "[", "3", "]", "==", "3", ":", "\n", "        ", "m", "=", "np", ".", "ones", "(", "\n", "(", "images", ".", "shape", "[", "1", "]", "*", "n_plots", "+", "n_plots", "+", "1", ",", "\n", "images", ".", "shape", "[", "2", "]", "*", "n_plots", "+", "n_plots", "+", "1", ",", "3", ")", ")", "*", "0.5", "\n", "", "else", ":", "\n", "        ", "m", "=", "np", ".", "ones", "(", "\n", "(", "images", ".", "shape", "[", "1", "]", "*", "n_plots", "+", "n_plots", "+", "1", ",", "\n", "images", ".", "shape", "[", "2", "]", "*", "n_plots", "+", "n_plots", "+", "1", ")", ")", "*", "0.5", "\n", "", "for", "i", "in", "range", "(", "n_plots", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_plots", ")", ":", "\n", "            ", "this_filter", "=", "i", "*", "n_plots", "+", "j", "\n", "if", "this_filter", "<", "images", ".", "shape", "[", "0", "]", ":", "\n", "                ", "this_img", "=", "images", "[", "this_filter", "]", "\n", "m", "[", "1", "+", "i", "+", "i", "*", "img_h", ":", "1", "+", "i", "+", "(", "i", "+", "1", ")", "*", "img_h", ",", "\n", "1", "+", "j", "+", "j", "*", "img_w", ":", "1", "+", "j", "+", "(", "j", "+", "1", ")", "*", "img_w", "]", "=", "this_img", "\n", "", "", "", "plt", ".", "imsave", "(", "arr", "=", "m", ",", "fname", "=", "saveto", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.pytorch_utils.get_mean_and_std": [[15, 28], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.pytorch_utils.init_params": [[29, 43], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.pytorch_utils.progress_bar": [[51, 93], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "pytorch_utils.format_time", "pytorch_utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.pytorch_utils.format_time", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.pytorch_utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.pytorch_utils.format_time": [[94, 125], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.get_noisy_data": [[23, 39], ["numpy.array", "skimage.util.random_noise", "lst_noisy.append"], "function", ["None"], ["def", "get_noisy_data", "(", "data", ")", ":", "\n", "    ", "\"\"\"Apply random noise to images data\n    \n    Arguments:\n        data {np.array} -- Image data.\n    \n    Returns:\n        np.array -- Output images.\n    \"\"\"", "\n", "\n", "lst_noisy", "=", "[", "]", "\n", "sigma", "=", "0.155", "\n", "for", "image", "in", "data", ":", "\n", "        ", "noisy", "=", "random_noise", "(", "image", ",", "var", "=", "sigma", "**", "2", ")", "\n", "lst_noisy", ".", "append", "(", "noisy", ")", "\n", "", "return", "np", ".", "array", "(", "lst_noisy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_dataset_image_path": [[40, 50], ["glob.glob", "os.path.join", "glob.glob", "os.path.join", "lst_dir_inner_images_path.append", "len", "numpy.array"], "function", ["None"], ["", "def", "read_dataset_image_path", "(", "s_dataset_url", ",", "n_number_count", "=", "None", ")", ":", "\n", "    ", "lst_dir_inner_images_path", "=", "[", "]", "\n", "for", "s_dir_path", "in", "glob", "(", "os", ".", "path", ".", "join", "(", "s_dataset_url", ",", "'*'", ")", ")", ":", "\n", "        ", "for", "s_image_path", "in", "glob", "(", "os", ".", "path", ".", "join", "(", "s_dir_path", ",", "'*'", ")", ")", ":", "\n", "            ", "lst_dir_inner_images_path", ".", "append", "(", "s_image_path", ")", "\n", "if", "n_number_count", "is", "not", "None", ":", "\n", "                ", "if", "(", "len", "(", "lst_dir_inner_images_path", ")", ">=", "n_number_count", ")", ":", "\n", "                    ", "return", "np", ".", "array", "(", "lst_dir_inner_images_path", ")", "\n", "\n", "", "", "", "", "return", "lst_dir_inner_images_path", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_image_w_noise": [[53, 59], ["scgan_kh_tools.read_image", "skimage.util.random_noise", "numpy.array"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_image"], ["", "def", "read_image_w_noise", "(", "s_image_path", ")", ":", "\n", "    ", "tmp_image", "=", "read_image", "(", "s_image_path", ")", "\n", "sigma", "=", "0.155", "\n", "noisy", "=", "random_noise", "(", "tmp_image", ",", "var", "=", "sigma", "**", "2", ")", "\n", "# image = scipy.misc.imresize(tmp_image, nd_img_size)", "\n", "return", "np", ".", "array", "(", "noisy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_lst_images_w_noise2": [[60, 65], ["numpy.array", "lst_images.append", "scgan_kh_tools.read_image_w_noise"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_image_w_noise"], ["", "def", "read_lst_images_w_noise2", "(", "lst_images_path", ",", "nd_patch_size", ",", "n_patch_step", "=", "None", ")", ":", "\n", "    ", "lst_images", "=", "[", "]", "\n", "for", "image_path", "in", "lst_images_path", ":", "\n", "        ", "lst_images", ".", "append", "(", "read_image_w_noise", "(", "image_path", ")", ")", "\n", "", "return", "np", ".", "array", "(", "lst_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_lst_images_w_noise": [[66, 75], ["scgan_kh_tools.read_image_w_noise", "scgan_kh_tools.get_image_patches", "lst_slices.extend", "lst_location.extend", "numpy.array"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_image_w_noise", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.get_image_patches"], ["", "def", "read_lst_images_w_noise", "(", "lst_images_path", ",", "nd_patch_size", ",", "n_patch_step", ")", ":", "\n", "    ", "lst_slices", "=", "[", "]", "\n", "lst_location", "=", "[", "]", "\n", "for", "image_path", "in", "lst_images_path", ":", "\n", "        ", "tmp_img", "=", "read_image_w_noise", "(", "image_path", ")", "\n", "tmp_slices", ",", "tmp_location_slice", "=", "get_image_patches", "(", "[", "tmp_img", "]", ",", "nd_patch_size", ",", "n_patch_step", ")", "\n", "lst_slices", ".", "extend", "(", "tmp_slices", ")", "\n", "lst_location", ".", "extend", "(", "tmp_location_slice", ")", "\n", "", "return", "np", ".", "array", "(", "lst_slices", ")", ",", "lst_location", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_lst_images": [[76, 91], ["numpy.array", "scgan_kh_tools.read_image", "scgan_kh_tools.get_image_patches", "lst_slices.extend", "lst_location.extend", "lst_images.append", "scgan_kh_tools.read_image"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_image", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.get_image_patches", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_image"], ["", "def", "read_lst_images", "(", "lst_images_path", ",", "nd_patch_size", ",", "n_patch_step", ",", "b_work_on_patch", "=", "True", ")", ":", "\n", "    ", "if", "b_work_on_patch", ":", "\n", "        ", "lst_slices", "=", "[", "]", "\n", "lst_location", "=", "[", "]", "\n", "for", "image_path", "in", "lst_images_path", ":", "\n", "            ", "tmp_img", "=", "read_image", "(", "image_path", ")", "\n", "tmp_slices", ",", "tmp_location_slice", "=", "get_image_patches", "(", "[", "tmp_img", "]", ",", "nd_patch_size", ",", "n_patch_step", ")", "\n", "lst_slices", ".", "extend", "(", "tmp_slices", ")", "\n", "lst_location", ".", "extend", "(", "tmp_location_slice", ")", "\n", "", "return", "lst_slices", ",", "lst_location", "\n", "", "else", ":", "\n", "        ", "lst_images", "=", "[", "]", "\n", "for", "image_path", "in", "lst_images_path", ":", "\n", "            ", "lst_images", ".", "append", "(", "read_image", "(", "image_path", ")", ")", "\n", "", "return", "np", ".", "array", "(", "lst_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_dataset_images": [[92, 102], ["glob.glob", "numpy.array", "os.path.join", "glob.glob", "os.path.join", "lst_images.append", "scgan_kh_tools.read_image", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_image"], ["", "", "def", "read_dataset_images", "(", "s_dataset_url", ",", "nd_img_size", ",", "n_number_count", ")", ":", "\n", "    ", "lst_images", "=", "[", "]", "\n", "for", "s_dir_path", "in", "glob", "(", "os", ".", "path", ".", "join", "(", "s_dataset_url", ",", "'*'", ")", ")", ":", "\n", "        ", "for", "s_image_path", "in", "glob", "(", "os", ".", "path", ".", "join", "(", "s_dir_path", ",", "'*'", ")", ")", ":", "\n", "            ", "lst_images", ".", "append", "(", "read_image", "(", "s_image_path", ",", "nd_img_size", ")", ")", "\n", "if", "n_number_count", "is", "not", "None", ":", "\n", "                ", "if", "(", "len", "(", "lst_images", ")", ">=", "n_number_count", ")", ":", "\n", "                    ", "return", "np", ".", "array", "(", "lst_images", ")", "\n", "\n", "", "", "", "", "return", "np", ".", "array", "(", "lst_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_image": [[103, 109], ["numpy.array", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imread"], ["", "def", "read_image", "(", "s_image_path", ")", ":", "\n", "    ", "tmp_image", "=", "scipy", ".", "misc", ".", "imread", "(", "s_image_path", ")", "[", "100", ":", "240", ",", "0", ":", "360", "]", "/", "127.5", "-", "1.", "\n", "#sigma = 0.155", "\n", "#noisy = random_noise(tmp_image, var=sigma ** 2)", "\n", "# image = scipy.misc.imresize(tmp_image, nd_img_size)", "\n", "return", "np", ".", "array", "(", "tmp_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.get_patch_video": [[111, 133], ["range", "print", "len", "scgan_kh_tools.read_lst_images", "scgan_kh_tools.get_image_patches", "lst_video_slice.extend", "lst_video_location.extend", "numpy.array", "len", "len"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.read_lst_images", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.get_image_patches"], ["", "def", "get_patch_video", "(", "lst_images", ",", "nd_patch_size", ",", "nd_stride", ",", "n_depth", ")", ":", "\n", "    ", "lst_video_slice", "=", "[", "]", "\n", "lst_video_location", "=", "[", "]", "\n", "n_video_numbers", "=", "len", "(", "lst_images", ")", "//", "n_depth", "\n", "\n", "flag", "=", "True", "\n", "n_video_slices_number", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n_video_numbers", ")", ":", "\n", "        ", "tmp_video", "=", "read_lst_images", "(", "lst_images", "[", "i", "*", "n_depth", ":", "(", "(", "i", "+", "1", ")", "*", "n_depth", ")", "]", ")", "\n", "lst_tmp_video", ",", "lst_tmp_location", "=", "get_image_patches", "(", "tmp_video", ",", "nd_patch_size", ",", "nd_stride", ")", "\n", "\n", "if", "flag", ":", "\n", "            ", "flag", "=", "False", "\n", "n_video_slices_number", "=", "len", "(", "lst_tmp_video", ")", "\n", "\n", "", "lst_video_slice", ".", "extend", "(", "lst_tmp_video", ")", "\n", "lst_video_location", ".", "extend", "(", "lst_tmp_location", ")", "\n", "\n", "", "print", "(", "'video patches is ready ({} patches)'", ".", "format", "(", "len", "(", "lst_video_slice", ")", ")", ")", "\n", "\n", "return", "np", ".", "array", "(", "lst_video_slice", ")", ",", "lst_video_location", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.get_image_patches": [[135, 187], ["numpy.array", "numpy.array", "numpy.array", "lst_patches.append", "lst_locations.append"], "function", ["None"], ["", "def", "get_image_patches", "(", "image_src", ",", "nd_patch_size", ",", "nd_stride", ")", ":", "\n", "    ", "image_src", "=", "np", ".", "array", "(", "image_src", ")", "\n", "\n", "lst_patches", "=", "[", "]", "\n", "lst_locations", "=", "[", "]", "\n", "\n", "n_stride_h", "=", "nd_stride", "[", "0", "]", "\n", "n_stride_w", "=", "nd_stride", "[", "1", "]", "\n", "\n", "tmp_frame", "=", "image_src", "[", "0", "]", ".", "shape", "\n", "n_frame_h", "=", "tmp_frame", "[", "0", "]", "\n", "n_frame_w", "=", "tmp_frame", "[", "1", "]", "\n", "\n", "# for i in range(0,n_frame_h,n_stride_h):", "\n", "# np.array(lst_patches[10])[0,:,:]", "\n", "flag_permission_h", "=", "flag_permission_w", "=", "True", "\n", "i", "=", "0", "\n", "while", "i", "<", "n_frame_h", "and", "flag_permission_h", ":", "\n", "        ", "flag_permission_w", "=", "True", "\n", "start_h", "=", "i", "\n", "end_h", "=", "i", "+", "nd_patch_size", "[", "0", "]", "\n", "if", "end_h", ">", "n_frame_h", ":", "\n", "            ", "end_h", "=", "n_frame_h", "\n", "start_h", "=", "n_frame_h", "-", "nd_patch_size", "[", "0", "]", "\n", "# break", "\n", "# for j in range(0,n_frame_w,n_stride_w):", "\n", "", "j", "=", "0", "\n", "while", "j", "<", "n_frame_w", "and", "flag_permission_w", ":", "\n", "            ", "start_w", "=", "j", "\n", "end_w", "=", "j", "+", "nd_patch_size", "[", "1", "]", "\n", "if", "end_w", ">", "n_frame_w", ":", "\n", "                ", "end_w", "=", "n_frame_w", "\n", "start_w", "=", "n_frame_w", "-", "nd_patch_size", "[", "1", "]", "\n", "# break", "\n", "\n", "# print(start_w,end_w,'**',start_h,end_h)", "\n", "\n", "", "tmp_slices", "=", "np", ".", "array", "(", "image_src", "[", ":", ",", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", ")", "\n", "lst_patches", ".", "append", "(", "tmp_slices", ")", "\n", "lst_locations", ".", "append", "(", "[", "start_h", ",", "start_w", "]", ")", "\n", "\n", "j", "+=", "n_stride_w", "\n", "if", "j", ">", "n_frame_w", ":", "\n", "                ", "flag_permission_w", "=", "False", "\n", "j", "=", "n_frame_w", "-", "nd_patch_size", "[", "1", "]", "\n", "\n", "", "", "i", "+=", "n_stride_h", "\n", "if", "i", ">", "n_frame_h", ":", "\n", "            ", "flag_permission_h", "=", "False", "\n", "i", "=", "n_frame_h", "-", "nd_patch_size", "[", "0", "]", "\n", "\n", "", "", "return", "np", ".", "array", "(", "lst_patches", ")", ",", "lst_locations", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_isDirExist": [[188, 193], ["os.path.exists", "os.makedirs", "print"], "function", ["None"], ["", "def", "kh_isDirExist", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "print", "(", "'path '", ",", "path", ",", "' is created'", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_crop": [[194, 196], ["None"], "function", ["None"], ["", "def", "kh_crop", "(", "img", ",", "nStartX", ",", "nEndX", ",", "nStartY", ",", "nEndY", ")", ":", "\n", "    ", "return", "img", "[", "nStartY", ":", "nEndY", ",", "nStartX", ":", "nEndX", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_extractPatches": [[197, 321], ["numpy.zeros", "os.path.dirname", "os.path.basename", "range", "print", "len", "PIL.Image.open", "PIL.Image.open", "numpy.array", "numpy.array", "range", "numpy.array", "scipy.misc.imsave", "numpy.std", "numpy.std", "numpy.add", "min", "min", "scgan_kh_tools.kh_crop", "numpy.resize", "numpy.mean", "numpy.mean", "scgan_kh_tools.kh_isDirExist", "numpy.array", "scipy.misc.imsave", "lst_fNamesTmp.append", "lst_Patches.append", "print", "PIL.Image.open", "PIL.Image.open", "np.resize.resize", "len", "len"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imsave", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_crop", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_isDirExist", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imsave"], ["", "def", "kh_extractPatches", "(", "sImg", ",", "nStride", "=", "1", ",", "ndSliceSize", "=", "(", "10", ",", "10", ")", ",", "bSaveImages", "=", "False", ")", ":", "\n", "    ", "i", "=", "0", "\n", "j", "=", "0", "\n", "imgArray", "=", "np", ".", "zeros", "(", "[", "Image", ".", "open", "(", "sImg", "[", "0", "]", ")", ".", "size", "[", "1", "]", ",", "Image", ".", "open", "(", "sImg", "[", "0", "]", ")", ".", "size", "[", "0", "]", ",", "3", "]", ")", "\n", "\n", "while", "i", "<", "len", "(", "sImg", ")", ":", "\n", "# read Images", "\n", "        ", "imgTmp1", "=", "Image", ".", "open", "(", "sImg", "[", "i", "]", ")", "\n", "imgTmp2", "=", "Image", ".", "open", "(", "sImg", "[", "i", "+", "1", "]", ")", "\n", "\n", "#Image to Numpy array", "\n", "imgArray1", "=", "np", ".", "array", "(", "imgTmp1", ")", "\n", "imgArray2", "=", "np", ".", "array", "(", "imgTmp1", ")", "\n", "\n", "A", "=", "imgArray1", "\n", "A", "=", "(", "A", "-", "np", ".", "mean", "(", "A", ")", ")", "/", "np", ".", "std", "(", "A", ")", "\n", "imgArray1", "=", "A", "\n", "\n", "A", "=", "imgArray2", "\n", "A", "=", "(", "A", "-", "np", ".", "mean", "(", "A", ")", ")", "/", "np", ".", "std", "(", "A", ")", "\n", "imgArray2", "=", "A", "\n", "\n", "imgArray", "[", ":", ",", ":", ",", "j", "]", "=", "np", ".", "add", "(", "imgArray1", ",", "imgArray2", ")", "/", "2", "\n", "\n", "i", "=", "i", "+", "2", "\n", "j", "=", "j", "+", "1", "\n", "\n", "\n", "\n", "#=========================================================", "\n", "", "nImgArrayH", "=", "imgArray", ".", "shape", "[", "0", "]", "\n", "nImgArrayW", "=", "imgArray", ".", "shape", "[", "1", "]", "\n", "\n", "best_rg", "=", "imgArray", "[", "100", ":", "nImgArrayH", "-", "14", ",", "0", ":", "nImgArrayW", "]", "\n", "#best_rg = imgArray[0:nImgArrayH, 0:nImgArrayW]", "\n", "ndMainSize", "=", "(", "best_rg", ".", "shape", "[", "0", "]", ",", "best_rg", ".", "shape", "[", "1", "]", ")", "\n", "\n", "ndSliceSizeWidth", "=", "ndSliceSize", "[", "0", "]", "\n", "ndSliceSizeHeight", "=", "ndSliceSize", "[", "1", "]", "\n", "\n", "# Copy master", "\n", "path", "=", "os", ".", "path", ".", "dirname", "(", "sImg", "[", "0", "]", ")", "\n", "base", "=", "os", ".", "path", ".", "basename", "(", "sImg", "[", "0", "]", ")", "\n", "\n", "# slice the image to 1000 x 1000 tiles", "\n", "slice_size", "=", "ndSliceSizeWidth", "\n", "lst_fNamesTmp", "=", "[", "]", "\n", "lst_Patches", "=", "[", "]", "\n", "beforeViewedX", "=", "[", "]", "\n", "beforeViewedY", "=", "[", "]", "\n", "for", "y", "in", "range", "(", "0", ",", "nImgArrayH", "-", "ndSliceSizeHeight", "+", "1", ",", "nStride", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "0", ",", "nImgArrayW", "-", "ndSliceSizeWidth", "+", "1", ",", "nStride", ")", ":", "\n", "#fname = os.path.join(path, sPrefixOutput+\"/p-%d-%d-%s\" % (x, y, base))", "\n", "#basePosition = \"%s--[%d,%d]--(%d,%d)\" % (sFileAddress,ndSliceSizeWidth,ndSliceSizeHeight,x, y)", "\n", "\n", "#print(\"Creating tile:\" + basePosition)", "\n", "\n", "            ", "minX", "=", "x", "\n", "minY", "=", "y", "\n", "if", "(", "(", "x", "+", "slice_size", ")", ">=", "nImgArrayW", ")", ":", "\n", "                ", "minX", "=", "x", "-", "slice_size", "-", "1", "\n", "", "else", ":", "\n", "                ", "minX", "=", "x", "\n", "\n", "", "if", "(", "(", "y", "+", "slice_size", ")", ">=", "nImgArrayH", ")", ":", "\n", "                ", "minY", "=", "y", "-", "slice_size", "-", "1", "\n", "", "else", ":", "\n", "                ", "minY", "=", "y", "\n", "\n", "", "mx", "=", "min", "(", "x", "+", "slice_size", ",", "nImgArrayW", ")", "\n", "my", "=", "min", "(", "y", "+", "slice_size", ",", "nImgArrayH", ")", "\n", "\n", "if", "(", "mx", "or", "x", ")", ">", "nImgArrayW", "and", "(", "my", "or", "y", ")", ">", "nImgArrayH", ":", "\n", "                ", "continue", "\n", "\n", "", "sSaveBasePatchImg", "=", "'./'", "#+'/' + base", "\n", "\n", "\n", "\n", "basePosition", "=", "\"(%d,%d)\"", "%", "(", "minX", ",", "minY", ")", "\n", "saveAddress", "=", "sSaveBasePatchImg", "+", "'/'", "+", "path", "[", "(", "len", "(", "path", ")", "-", "8", ")", ":", "len", "(", "path", ")", "]", "+", "'_'", "+", "base", "[", "0", ":", "3", "]", "+", "'_'", "+", "basePosition", "\n", "\n", "\n", "#buffer = Image.new(\"RGB\", [slice_size, slice_size], (255, 255, 255))", "\n", "#buffer = Image.new(\"YCbCr\", [slice_size, slice_size])", "\n", "#tile = imgTmp.crop((minX, minY, mx, my))", "\n", "crp", "=", "kh_crop", "(", "imgArray", ",", "minX", ",", "mx", ",", "minY", ",", "my", ")", "\n", "tile", "=", "np", ".", "resize", "(", "crp", ",", "[", "slice_size", ",", "slice_size", ",", "3", "]", ")", "\n", "\n", "# tmpArr=np.array(tile)", "\n", "# tile = Image.fromarray(tmpArr)", "\n", "#buffer.paste(tile.resize(ndSliceSize), (0, 0))", "\n", "\n", "if", "bSaveImages", ":", "\n", "                ", "kh_isDirExist", "(", "sSaveBasePatchImg", ")", "\n", "#buffer.save(saveAddress, \"JPEG\")", "\n", "npTile", "=", "np", ".", "array", "(", "tile", ".", "resize", "(", "ndSliceSize", ")", ")", ";", "\n", "scipy", ".", "misc", ".", "imsave", "(", "saveAddress", "+", "'.jpg'", ",", "npTile", ")", "\n", "\n", "", "if", "True", ":", "#basePosition not in lst_fNamesTmp:", "\n", "                ", "lst_fNamesTmp", ".", "append", "(", "basePosition", ")", "\n", "# Image to Numpy array", "\n", "#imgBuffer = np.array(buffer)", "\n", "#imgBuffer = np.expand_dims(np.array(tile.resize(ndSliceSize)), axis=-1)", "\n", "#expand_tile = np.expand_dims(tile,-1)", "\n", "#buffer = Image.new(\"RGB\", [slice_size, slice_size], (100, 10, 100))", "\n", "#buffer.paste(Image.fromarray(tile))", "\n", "# img = np.zeros([ndSliceSizeWidth, ndSliceSizeHeight, 3])", "\n", "# img[:, :, 0] = tile", "\n", "# img[:, :, 1] = tile", "\n", "# img[:, :, 2] = tile", "\n", "lst_Patches", ".", "append", "(", "tile", ")", "\n", "#print('add => ', saveAddress)", "\n", "", "else", ":", "\n", "                ", "print", "(", "'it is copy => '", ",", "basePosition", ")", "\n", "\n", "", "", "", "if", "bSaveImages", ":", "\n", "#buffer = Image.new(\"RGB\", [ndMainSize[1], ndMainSize[0]], (255, 255, 255))", "\n", "#buffer.paste(imgTmp, (0, 0))", "\n", "        ", "npImgTmp", "=", "np", ".", "array", "(", "tile", ")", ";", "\n", "scipy", ".", "misc", ".", "imsave", "(", "sSaveBasePatchImg", "+", "'/main'", "+", "base", "+", "'.jpg'", ",", "npImgTmp", ")", "\n", "\n", "", "print", "(", "sImg", ",", "' => is finished'", ")", "\n", "return", "lst_Patches", ",", "lst_fNamesTmp", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_extractPatchesOne": [[324, 427], ["PIL.Image.open", "numpy.array", "os.path.dirname", "os.path.basename", "range", "print", "range", "numpy.array", "scipy.misc.imsave", "min", "min", "scgan_kh_tools.kh_crop", "numpy.resize", "scgan_kh_tools.kh_isDirExist", "numpy.array", "scipy.misc.imsave", "lst_fNamesTmp.append", "numpy.zeros", "lst_Patches.append", "print", "np.resize.resize", "len", "len"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imsave", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_crop", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_isDirExist", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imsave"], ["", "def", "kh_extractPatchesOne", "(", "sImg", ",", "nStride", "=", "1", ",", "ndSliceSize", "=", "(", "10", ",", "10", ")", ",", "bSaveImages", "=", "False", ")", ":", "\n", "\n", "# read Images", "\n", "    ", "imgTmp", "=", "Image", ".", "open", "(", "sImg", ")", "\n", "\n", "#Image to Numpy array", "\n", "imgArray", "=", "np", ".", "array", "(", "imgTmp", ")", "\n", "\n", "#=========================================================", "\n", "nImgArrayH", "=", "imgArray", ".", "shape", "[", "0", "]", "\n", "nImgArrayW", "=", "imgArray", ".", "shape", "[", "1", "]", "\n", "\n", "best_rg", "=", "imgArray", "[", "100", ":", "nImgArrayH", "-", "14", ",", "0", ":", "nImgArrayW", "]", "\n", "#best_rg = imgArray[0:nImgArrayH, 0:nImgArrayW]", "\n", "ndMainSize", "=", "(", "best_rg", ".", "shape", "[", "0", "]", ",", "best_rg", ".", "shape", "[", "1", "]", ")", "\n", "\n", "ndSliceSizeWidth", "=", "ndSliceSize", "[", "0", "]", "\n", "ndSliceSizeHeight", "=", "ndSliceSize", "[", "1", "]", "\n", "\n", "# Copy master", "\n", "path", "=", "os", ".", "path", ".", "dirname", "(", "sImg", ")", "\n", "base", "=", "os", ".", "path", ".", "basename", "(", "sImg", ")", "\n", "\n", "# slice the image to 1000 x 1000 tiles", "\n", "slice_size", "=", "ndSliceSizeWidth", "\n", "lst_fNamesTmp", "=", "[", "]", "\n", "lst_Patches", "=", "[", "]", "\n", "beforeViewedX", "=", "[", "]", "\n", "beforeViewedY", "=", "[", "]", "\n", "for", "y", "in", "range", "(", "0", ",", "nImgArrayH", "-", "ndSliceSizeHeight", "+", "1", ",", "nStride", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "0", ",", "nImgArrayW", "-", "ndSliceSizeWidth", "+", "1", ",", "nStride", ")", ":", "\n", "#fname = os.path.join(path, sPrefixOutput+\"/p-%d-%d-%s\" % (x, y, base))", "\n", "#basePosition = \"%s--[%d,%d]--(%d,%d)\" % (sFileAddress,ndSliceSizeWidth,ndSliceSizeHeight,x, y)", "\n", "\n", "#print(\"Creating tile:\" + basePosition)", "\n", "\n", "            ", "minX", "=", "x", "\n", "minY", "=", "y", "\n", "if", "(", "(", "x", "+", "slice_size", ")", ">=", "nImgArrayW", ")", ":", "\n", "                ", "minX", "=", "x", "-", "slice_size", "-", "1", "\n", "", "else", ":", "\n", "                ", "minX", "=", "x", "\n", "\n", "", "if", "(", "(", "y", "+", "slice_size", ")", ">=", "nImgArrayH", ")", ":", "\n", "                ", "minY", "=", "y", "-", "slice_size", "-", "1", "\n", "", "else", ":", "\n", "                ", "minY", "=", "y", "\n", "\n", "", "mx", "=", "min", "(", "x", "+", "slice_size", ",", "nImgArrayW", ")", "\n", "my", "=", "min", "(", "y", "+", "slice_size", ",", "nImgArrayH", ")", "\n", "\n", "if", "(", "mx", "or", "x", ")", ">", "nImgArrayW", "and", "(", "my", "or", "y", ")", ">", "nImgArrayH", ":", "\n", "                ", "continue", "\n", "\n", "", "sSaveBasePatchImg", "=", "'./'", "#+'/' + base", "\n", "\n", "\n", "\n", "basePosition", "=", "\"(%d,%d)\"", "%", "(", "minX", ",", "minY", ")", "\n", "saveAddress", "=", "sSaveBasePatchImg", "+", "'/'", "+", "path", "[", "(", "len", "(", "path", ")", "-", "8", ")", ":", "len", "(", "path", ")", "]", "+", "'_'", "+", "base", "[", "0", ":", "3", "]", "+", "'_'", "+", "basePosition", "\n", "\n", "\n", "#buffer = Image.new(\"RGB\", [slice_size, slice_size], (255, 255, 255))", "\n", "#buffer = Image.new(\"YCbCr\", [slice_size, slice_size])", "\n", "#tile = imgTmp.crop((minX, minY, mx, my))", "\n", "crp", "=", "kh_crop", "(", "imgArray", ",", "minX", ",", "mx", ",", "minY", ",", "my", ")", "\n", "tile", "=", "np", ".", "resize", "(", "crp", ",", "[", "slice_size", ",", "slice_size", "]", ")", "\n", "\n", "# tmpArr=np.array(tile)", "\n", "# tile = Image.fromarray(tmpArr)", "\n", "#buffer.paste(tile.resize(ndSliceSize), (0, 0))", "\n", "\n", "if", "bSaveImages", ":", "\n", "                ", "kh_isDirExist", "(", "sSaveBasePatchImg", ")", "\n", "#buffer.save(saveAddress, \"JPEG\")", "\n", "npTile", "=", "np", ".", "array", "(", "tile", ".", "resize", "(", "ndSliceSize", ")", ")", ";", "\n", "scipy", ".", "misc", ".", "imsave", "(", "saveAddress", "+", "'.jpg'", ",", "npTile", ")", "\n", "\n", "", "if", "True", ":", "#basePosition not in lst_fNamesTmp:", "\n", "                ", "lst_fNamesTmp", ".", "append", "(", "basePosition", ")", "\n", "# Image to Numpy array", "\n", "#imgBuffer = np.array(buffer)", "\n", "#imgBuffer = np.expand_dims(np.array(tile.resize(ndSliceSize)), axis=-1)", "\n", "#expand_tile = np.expand_dims(tile,-1)", "\n", "#buffer = Image.new(\"RGB\", [slice_size, slice_size], (100, 10, 100))", "\n", "#buffer.paste(Image.fromarray(tile))", "\n", "img", "=", "np", ".", "zeros", "(", "[", "ndSliceSizeWidth", ",", "ndSliceSizeHeight", ",", "3", "]", ")", "\n", "img", "[", ":", ",", ":", ",", "0", "]", "=", "tile", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "tile", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "=", "tile", "\n", "lst_Patches", ".", "append", "(", "img", ")", "\n", "#print('add => ', saveAddress)", "\n", "", "else", ":", "\n", "                ", "print", "(", "'it is copy => '", ",", "basePosition", ")", "\n", "\n", "", "", "", "if", "bSaveImages", ":", "\n", "#buffer = Image.new(\"RGB\", [ndMainSize[1], ndMainSize[0]], (255, 255, 255))", "\n", "#buffer.paste(imgTmp, (0, 0))", "\n", "        ", "npImgTmp", "=", "np", ".", "array", "(", "tile", ")", ";", "\n", "scipy", ".", "misc", ".", "imsave", "(", "sSaveBasePatchImg", "+", "'/main'", "+", "base", "+", "'.jpg'", ",", "npImgTmp", ")", "\n", "\n", "", "print", "(", "sImg", ",", "' => is finished'", ")", "\n", "return", "lst_Patches", ",", "lst_fNamesTmp", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_getSliceImages_simple": [[428, 439], ["scgan_kh_tools.kh_extractPatchesOne"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_extractPatchesOne"], ["", "def", "kh_getSliceImages_simple", "(", "sBaseImageFiles", "=", "''", ",", "ndSliceSize", "=", "(", "10", ",", "10", ")", ",", "nStride", "=", "1", ",", "bSaveImages", "=", "False", ")", ":", "\n", "    ", "lst_pics", "=", "[", "]", "\n", "lst_names", "=", "[", "]", "\n", "\n", "for", "sImagePath", "in", "sBaseImageFiles", ":", "\n", "        ", "lst_picTmp", ",", "lst_nameTmp", "=", "kh_extractPatchesOne", "(", "sImagePath", ",", "nStride", "=", "nStride", ",", "ndSliceSize", "=", "ndSliceSize", ",", "bSaveImages", "=", "bSaveImages", ")", "\n", "\n", "lst_pics", "=", "lst_pics", "+", "lst_picTmp", "\n", "lst_names", "=", "lst_names", "+", "lst_nameTmp", "\n", "\n", "", "return", "lst_pics", ",", "lst_names", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_getSliceImages": [[441, 462], ["len", "sImagePath.append", "sImagePath.append", "sImagePath.append", "sImagePath.append", "sImagePath.append", "sImagePath.append", "scgan_kh_tools.kh_extractPatches"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_extractPatches"], ["", "def", "kh_getSliceImages", "(", "sBaseImageFiles", "=", "''", ",", "ndSliceSize", "=", "(", "10", ",", "10", ")", ",", "nStride", "=", "1", ",", "bSaveImages", "=", "False", ")", ":", "\n", "    ", "lst_pics", "=", "[", "]", "\n", "lst_names", "=", "[", "]", "\n", "\n", "i", "=", "0", "\n", "while", "(", "i", "+", "6", ")", "<", "len", "(", "sBaseImageFiles", ")", ":", "\n", "        ", "sImagePath", "=", "[", "]", "\n", "sImagePath", ".", "append", "(", "sBaseImageFiles", "[", "i", "]", ")", "\n", "sImagePath", ".", "append", "(", "sBaseImageFiles", "[", "i", "+", "1", "]", ")", "\n", "sImagePath", ".", "append", "(", "sBaseImageFiles", "[", "i", "+", "2", "]", ")", "\n", "sImagePath", ".", "append", "(", "sBaseImageFiles", "[", "i", "+", "3", "]", ")", "\n", "sImagePath", ".", "append", "(", "sBaseImageFiles", "[", "i", "+", "4", "]", ")", "\n", "sImagePath", ".", "append", "(", "sBaseImageFiles", "[", "i", "+", "5", "]", ")", "\n", "lst_picTmp", ",", "lst_nameTmp", "=", "kh_extractPatches", "(", "sImagePath", ",", "nStride", "=", "nStride", ",", "ndSliceSize", "=", "ndSliceSize", ",", "bSaveImages", "=", "bSaveImages", ")", "\n", "\n", "lst_pics", "=", "lst_pics", "+", "lst_picTmp", "\n", "lst_names", "=", "lst_names", "+", "lst_nameTmp", "\n", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "return", "lst_pics", ",", "lst_names", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_getImages": [[463, 470], ["scgan_kh_tools.kh_getSliceImages"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.kh_getSliceImages"], ["", "def", "kh_getImages", "(", "sBaseImageFiles", "=", "''", ",", "bGetSlice", "=", "True", ",", "ndSliceSize", "=", "(", "10", ",", "10", ")", ",", "nStride", "=", "1", ",", "bSaveImages", "=", "False", ")", ":", "\n", "    ", "if", "bGetSlice", ":", "\n", "        ", "return", "kh_getSliceImages", "(", "sBaseImageFiles", "=", "sBaseImageFiles", ",", "\n", "ndSliceSize", "=", "ndSliceSize", ",", "\n", "nStride", "=", "nStride", ",", "\n", "bSaveImages", "=", "bSaveImages", ")", "\n", "", "return", "(", "''", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.save_artifact_neptune": [[16, 27], ["os.path.join", "os.makedirs", "os.path.join", "numpy.save", "neptune.log_artifact", "os.remove"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save"], ["def", "save_artifact_neptune", "(", "neptune", ",", "artifact_name", ",", "data", ",", "remove_temp_files", "=", "True", ")", ":", "\n", "\t", "tmp_path", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "'temp'", ")", "\n", "os", ".", "makedirs", "(", "tmp_path", ",", "exist_ok", "=", "True", ")", "\n", "tmp_path", "=", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "artifact_name", ")", "\n", "np", ".", "save", "(", "tmp_path", ",", "data", ")", "\n", "neptune", ".", "log_artifact", "(", "tmp_path", ")", "\n", "\n", "if", "remove_temp_files", ":", "\n", "\t\t", "os", ".", "remove", "(", "tmp_path", ")", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.save_metrics_neptune": [[29, 34], ["zip", "neptune.log_metric"], "function", ["None"], ["", "def", "save_metrics_neptune", "(", "neptune", ",", "arr_title", ",", "arr_num", ")", ":", "\n", "\t", "for", "title", ",", "num", "in", "zip", "(", "arr_title", ",", "arr_num", ")", ":", "\n", "\t\t", "neptune", ".", "log_metric", "(", "title", ",", "num", ")", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func": [[27, 30], ["keras.models.Model", "keras.models.Model.predict", "model.get_layer"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["\n", "\n", "", "def", "save_metrics_neptune", "(", "neptune", ",", "arr_title", ",", "arr_num", ")", ":", "\n", "\t", "for", "title", ",", "num", "in", "zip", "(", "arr_title", ",", "arr_num", ")", ":", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info": [[32, 38], ["print", "int"], "function", ["None"], ["\n", "", "return", "True", "\n", "\n", "\n", "", "def", "get_activ_func", "(", "backend", ",", "model", ",", "image", ",", "layerIndex", ")", ":", "\n", "\t", "if", "backend", "==", "'tensorflow'", ":", "\n", "\t\t", "from", "tensorflow", ".", "keras", ".", "models", "import", "Model", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.print_positives_negatives": [[40, 49], ["print", "print", "print", "print", "print", "print", "print", "sum", "sum", "sum", "sum", "arrFalseNegative.values", "arrTrueNegative.values", "arrFalsePositive.values", "arrTruePositive.values", "str", "str", "str", "str"], "function", ["None"], ["\t\t", "from", "keras", ".", "models", "import", "Model", "\n", "", "inter_output_model", "=", "Model", "(", "inputs", "=", "model", ".", "input", ",", "outputs", "=", "model", ".", "get_layer", "(", "index", "=", "layerIndex", ")", ".", "output", ")", "#last layer: index 7 or name 'dense'", "\n", "return", "inter_output_model", ".", "predict", "(", "image", ")", "\n", "\n", "\n", "", "def", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", ":", "\n", "\t", "counter", "+=", "1", "\n", "if", "counter", "%", "loaded", "==", "0", ":", "\n", "\t\t", "print", "(", "\"{} % processed\"", ".", "format", "(", "int", "(", "loading_percentage", "*", "100", ")", ")", ")", "\n", "loading_percentage", "+=", "0.1", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.contrast_normalization": [[52, 62], ["numpy.array", "cv2.GaussianBlur", "cv2.subtract", "cv2.normalize"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize"], ["\n", "", "def", "print_positives_negatives", "(", "arrFalsePositive", ",", "arrFalseNegative", ",", "arrTruePositive", ",", "arrTrueNegative", ",", "classToMonitor", ",", "isTestOneClass", "=", "True", ")", ":", "\n", "\t", "if", "isTestOneClass", ":", "\n", "\t\t", "print", "(", "\"Monitored class:\"", ",", "classToMonitor", ")", "\n", "print", "(", "\"FP: {}\"", ".", "format", "(", "arrFalsePositive", "[", "str", "(", "classToMonitor", ")", "]", ")", ")", "\n", "print", "(", "\"FN: {}\"", ".", "format", "(", "arrFalseNegative", "[", "str", "(", "classToMonitor", ")", "]", ")", ")", "\n", "print", "(", "\"TP: {}\"", ".", "format", "(", "arrTruePositive", "[", "str", "(", "classToMonitor", ")", "]", ")", ")", "\n", "print", "(", "\"TN: {}\"", ".", "format", "(", "arrTrueNegative", "[", "str", "(", "classToMonitor", ")", "]", ")", ")", "\n", "print", "(", "\"Similar patterns (FN + TN): \"", ",", "sum", "(", "arrFalseNegative", ".", "values", "(", ")", ")", "+", "sum", "(", "arrTrueNegative", ".", "values", "(", ")", ")", ")", "\n", "print", "(", "\"Raised alarms (FP + TP): \"", ",", "sum", "(", "arrFalsePositive", ".", "values", "(", ")", ")", "+", "sum", "(", "arrTruePositive", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.image_adjustment": [[64, 70], ["numpy.percentile", "skimage.exposure.rescale_intensity"], "function", ["None"], ["#image pre-processing methods", "\n", "", "", "def", "contrast_normalization", "(", "image", ")", ":", "\n", "\t", "X", "=", "np", ".", "array", "(", "image", ")", "\n", "\n", "image_blur", "=", "cv2", ".", "GaussianBlur", "(", "image", ",", "(", "65", ",", "65", ")", ",", "10", ")", "\n", "# new_image = cv2.subtract(img,image_blur).astype('float32') # WRONG, the result is not stored in float32 directly", "\n", "new_image", "=", "cv2", ".", "subtract", "(", "image", ",", "image_blur", ",", "dtype", "=", "cv2", ".", "CV_32F", ")", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.histogram_equalization": [[72, 77], ["skimage.exposure.equalize_hist", "numpy.hstack"], "function", ["None"], ["#res = np.hstack((X, out)) #stacking images side-by-side", "\n", "#imageio.imwrite('Contrast.jpg', res)", "\n", "return", "out", "\n", "\n", "\n", "", "def", "image_adjustment", "(", "image", ")", ":", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.adaptive_hist_eq": [[79, 84], ["skimage.exposure.equalize_adapthist"], "function", ["None"], ["img_rescale", "=", "exposure", ".", "rescale_intensity", "(", "image", ",", "in_range", "=", "(", "p2", ",", "p98", ")", ")", "\n", "#res = np.hstack((image, img_rescale)) #stacking images side-by-side", "\n", "#imageio.imwrite('Imadjust.jpg', res)", "\n", "return", "img_rescale", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.rescale": [[86, 90], ["keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.flow"], "function", ["None"], ["\t", "equ", "=", "exposure", ".", "equalize_hist", "(", "img", ")", "\n", "res", "=", "np", ".", "hstack", "(", "(", "img", ",", "equ", ")", ")", "#stacking images side-by-side", "\n", "#imageio.imwrite('Histeq.jpg',res)", "\n", "return", "equ", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.std_normalization": [[92, 97], ["keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.fit", "keras.preprocessing.image.ImageDataGenerator.flow"], "function", ["None"], ["", "def", "adaptive_hist_eq", "(", "img", ")", ":", "\n", "\t", "img_adapteq", "=", "exposure", ".", "equalize_adapthist", "(", "img", ",", "clip_limit", "=", "0.3", ")", "\n", "#res = np.hstack((img,img_adapteq)) #stacking images side-by-side", "\n", "#imageio.imwrite('Adapthisteq.jpg',res)", "\n", "return", "img_adapteq", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotDistributions": [[6, 25], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.legend", "matplotlib.show", "classifiers.pca", "handles.append", "fig.add_subplot.scatter"], "function", ["None"], ["def", "plotDistributions", "(", "distributions", ")", ":", "\n", "    ", "i", "=", "0", "\n", "#ploting", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "handles", "=", "[", "]", "\n", "colors", "=", "[", "'magenta'", ",", "'cyan'", "]", "\n", "classes", "=", "[", "'cluster 1'", ",", "'cluster 2'", "]", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "\n", "for", "X", "in", "distributions", ":", "\n", "#reducing to 2-dimensional data", "\n", "        ", "x", "=", "classifiers", ".", "pca", "(", "X", ",", "2", ")", "\n", "\n", "handles", ".", "append", "(", "ax", ".", "scatter", "(", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "s", "=", "5", ",", "edgecolor", "=", "'none'", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "ax", ".", "legend", "(", "handles", ",", "classes", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotDistributionByClass": [[27, 47], ["matplotlib.figure", "plt.figure.add_subplot", "indexesByClass.items", "fig.add_subplot.legend", "matplotlib.show", "classifiers.pca", "handles.append", "fig.add_subplot.scatter"], "function", ["None"], ["", "def", "plotDistributionByClass", "(", "instances", ",", "indexesByClass", ")", ":", "\n", "    ", "i", "=", "0", "\n", "#ploting", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "handles", "=", "[", "]", "\n", "colors", "=", "[", "'magenta'", ",", "'cyan'", "]", "\n", "classes", "=", "[", "'cluster 1'", ",", "'cluster 2'", "]", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "\n", "for", "c", ",", "indexes", "in", "indexesByClass", ".", "items", "(", ")", ":", "\n", "        ", "X", "=", "instances", "[", "indexes", "]", "\n", "#reducing to 2-dimensional data", "\n", "x", "=", "classifiers", ".", "pca", "(", "X", ",", "2", ")", "\n", "\n", "handles", ".", "append", "(", "ax", ".", "scatter", "(", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "s", "=", "5", ",", "edgecolor", "=", "'none'", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "ax", ".", "legend", "(", "handles", ",", "classes", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotAccuracy": [[49, 63], ["numpy.array", "range", "matplotlib.figure", "plt.figure.add_subplot", "matplotlib.axes", "plt.axes.plot", "matplotlib.yticks", "matplotlib.xticks", "matplotlib.title", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.show", "len", "range", "range"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot"], ["", "def", "plotAccuracy", "(", "arr", ",", "steps", ",", "label", ")", ":", "\n", "    ", "arr", "=", "np", ".", "array", "(", "arr", ")", "\n", "c", "=", "range", "(", "len", "(", "arr", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "add_subplot", "(", "122", ")", "\n", "ax", "=", "plt", ".", "axes", "(", ")", "\n", "ax", ".", "plot", "(", "c", ",", "arr", ",", "'k'", ")", "\n", "plt", ".", "yticks", "(", "range", "(", "0", ",", "101", ",", "10", ")", ")", "\n", "plt", ".", "xticks", "(", "range", "(", "0", ",", "steps", "+", "1", ",", "10", ")", ")", "\n", "plt", ".", "title", "(", "label", ")", "\n", "plt", ".", "ylabel", "(", "\"Accuracy\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Step\"", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotDistributionss": [[65, 83], ["matplotlib.figure", "plt.figure.add_subplot", "distributions.items", "fig.add_subplot.legend", "matplotlib.show", "handles.append", "fig.add_subplot.scatter"], "function", ["None"], ["", "def", "plotDistributionss", "(", "distributions", ")", ":", "\n", "    ", "i", "=", "0", "\n", "#ploting", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "handles", "=", "[", "]", "\n", "colors", "=", "[", "'magenta'", ",", "'cyan'", "]", "\n", "classes", "=", "[", "'Class 1'", ",", "'Class 2'", "]", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "\n", "for", "k", ",", "v", "in", "distributions", ".", "items", "(", ")", ":", "\n", "        ", "points", "=", "distributions", "[", "k", "]", "\n", "\n", "handles", ".", "append", "(", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "s", "=", "5", ",", "edgecolor", "=", "'none'", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "ax", ".", "legend", "(", "handles", ",", "classes", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot": [[85, 116], ["list", "matplotlib.figure", "matplotlib.get_cmap", "plt.get_cmap.", "plt.figure.add_subplot", "fig.add_subplot.legend", "matplotlib.title", "matplotlib.show", "set", "numpy.linspace", "handles.append", "handles.append", "classLabels.append", "classLabels.append", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "len", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "plot", "(", "X", ",", "y", ",", "coreX", ",", "coreY", ",", "t", ")", ":", "\n", "    ", "classes", "=", "list", "(", "set", "(", "y", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "handles", "=", "[", "]", "\n", "classLabels", "=", "[", "]", "\n", "cmx", "=", "plt", ".", "get_cmap", "(", "'Paired'", ")", "\n", "colors", "=", "cmx", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "(", "len", "(", "classes", ")", "*", "2", ")", "+", "1", ")", ")", "\n", "#classLabels = ['Class 1', 'Core 1', 'Class 2', 'Core 2']", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "color", "=", "0", "\n", "for", "cl", "in", "classes", ":", "\n", "#points", "\n", "        ", "points", "=", "X", "[", "np", ".", "where", "(", "y", "==", "cl", ")", "[", "0", "]", "]", "\n", "x1", "=", "points", "[", ":", ",", "0", "]", "\n", "x2", "=", "points", "[", ":", ",", "1", "]", "\n", "handles", ".", "append", "(", "ax", ".", "scatter", "(", "x1", ",", "x2", ",", "c", "=", "colors", "[", "color", "]", ")", ")", "\n", "#core support points", "\n", "color", "+=", "1", "\n", "corePoints", "=", "coreX", "[", "np", ".", "where", "(", "coreY", "==", "cl", ")", "[", "0", "]", "]", "\n", "coreX1", "=", "corePoints", "[", ":", ",", "0", "]", "\n", "coreX2", "=", "corePoints", "[", ":", ",", "1", "]", "\n", "handles", ".", "append", "(", "ax", ".", "scatter", "(", "coreX1", ",", "coreX2", ",", "c", "=", "colors", "[", "color", "]", ")", ")", "\n", "#labels", "\n", "classLabels", ".", "append", "(", "'Class {}'", ".", "format", "(", "cl", ")", ")", "\n", "classLabels", ".", "append", "(", "'Core {}'", ".", "format", "(", "cl", ")", ")", "\n", "color", "+=", "1", "\n", "\n", "", "ax", ".", "legend", "(", "handles", ",", "classLabels", ")", "\n", "title", "=", "\"Data distribution. Step {}\"", ".", "format", "(", "t", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotAnimation": [[118, 149], ["list", "matplotlib.figure", "matplotlib.get_cmap", "plt.get_cmap.", "plt.figure.add_subplot", "fig.add_subplot.legend", "matplotlib.title", "matplotlib.show", "set", "numpy.linspace", "handles.append", "handles.append", "classLabels.append", "classLabels.append", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "len", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "plotAnimation", "(", "i", ")", ":", "\n", "    ", "classes", "=", "list", "(", "set", "(", "arrY", "[", "i", "]", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "handles", "=", "[", "]", "\n", "classLabels", "=", "[", "]", "\n", "cmx", "=", "plt", ".", "get_cmap", "(", "'Paired'", ")", "\n", "colors", "=", "cmx", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "(", "len", "(", "classes", ")", "*", "2", ")", "+", "1", ")", ")", "\n", "#classLabels = ['Class 1', 'Core 1', 'Class 2', 'Core 2']", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "color", "=", "0", "\n", "for", "cl", "in", "classes", ":", "\n", "#points", "\n", "        ", "points", "=", "arrX", "[", "i", "]", "[", "np", ".", "where", "(", "y", "==", "cl", ")", "[", "0", "]", "]", "\n", "x1", "=", "points", "[", ":", ",", "0", "]", "\n", "x2", "=", "points", "[", ":", ",", "1", "]", "\n", "handles", ".", "append", "(", "ax", ".", "scatter", "(", "x1", ",", "x2", ",", "c", "=", "colors", "[", "color", "]", ")", ")", "\n", "#core support points", "\n", "color", "+=", "1", "\n", "corePoints", "=", "coreX", "[", "np", ".", "where", "(", "coreY", "==", "cl", ")", "[", "0", "]", "]", "\n", "coreX1", "=", "corePoints", "[", ":", ",", "0", "]", "\n", "coreX2", "=", "corePoints", "[", ":", ",", "1", "]", "\n", "handles", ".", "append", "(", "ax", ".", "scatter", "(", "coreX1", ",", "coreX2", ",", "c", "=", "colors", "[", "color", "]", ")", ")", "\n", "#labels", "\n", "classLabels", ".", "append", "(", "'Class {}'", ".", "format", "(", "cl", ")", ")", "\n", "classLabels", ".", "append", "(", "'Core {}'", ".", "format", "(", "cl", ")", ")", "\n", "color", "+=", "1", "\n", "\n", "", "ax", ".", "legend", "(", "handles", ",", "classLabels", ")", "\n", "title", "=", "\"Data distribution. Step {}\"", ".", "format", "(", "t", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot2": [[151, 176], ["classifiers.pca", "matplotlib.figure", "matplotlib.get_cmap", "plt.get_cmap.", "plt.figure.add_subplot", "fig.add_subplot.legend", "matplotlib.title", "matplotlib.show", "numpy.linspace", "handles.append", "classLabels.append", "fig.add_subplot.scatter", "len", "numpy.where"], "function", ["None"], ["", "def", "plot2", "(", "X", ",", "y", ",", "t", ",", "classes", ")", ":", "\n", "    ", "X", "=", "classifiers", ".", "pca", "(", "X", ",", "2", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "handles", "=", "[", "]", "\n", "classLabels", "=", "[", "]", "\n", "cmx", "=", "plt", ".", "get_cmap", "(", "'Paired'", ")", "\n", "colors", "=", "cmx", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "(", "len", "(", "classes", ")", "*", "2", ")", "+", "1", ")", ")", "\n", "#classLabels = ['Class 1', 'Core 1', 'Class 2', 'Core 2']", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "color", "=", "0", "\n", "for", "cl", "in", "classes", ":", "\n", "#points", "\n", "        ", "points", "=", "X", "[", "np", ".", "where", "(", "y", "==", "cl", ")", "[", "0", "]", "]", "\n", "x1", "=", "points", "[", ":", ",", "0", "]", "\n", "x2", "=", "points", "[", ":", ",", "1", "]", "\n", "handles", ".", "append", "(", "ax", ".", "scatter", "(", "x1", ",", "x2", ",", "c", "=", "colors", "[", "color", "]", ")", ")", "\n", "#core support points", "\n", "color", "+=", "1", "\n", "#labels", "\n", "classLabels", ".", "append", "(", "'Class {}'", ".", "format", "(", "cl", ")", ")", "\n", "\n", "", "ax", ".", "legend", "(", "handles", ",", "classLabels", ")", "\n", "title", "=", "\"Data distribution. Step {}\"", ".", "format", "(", "t", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.finalEvaluation": [[178, 183], ["print", "print", "print", "plot_functions.plotAccuracy", "numpy.mean", "numpy.std", "numpy.std"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotAccuracy"], ["", "def", "finalEvaluation", "(", "arrAcc", ",", "steps", ",", "label", ")", ":", "\n", "    ", "print", "(", "\"Average Accuracy: \"", ",", "np", ".", "mean", "(", "arrAcc", ")", ")", "\n", "print", "(", "\"Standard Deviation: \"", ",", "np", ".", "std", "(", "arrAcc", ")", ")", "\n", "print", "(", "\"Variance: \"", ",", "np", ".", "std", "(", "arrAcc", ")", "**", "2", ")", "\n", "plotAccuracy", "(", "arrAcc", ",", "steps", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotF1": [[185, 202], ["numpy.array", "range", "matplotlib.figure", "plt.figure.add_subplot", "matplotlib.axes", "plt.axes.plot", "matplotlib.yticks", "matplotlib.title", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.show", "len", "matplotlib.xticks", "matplotlib.xticks", "range", "range"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot"], ["", "def", "plotF1", "(", "arrF1", ",", "steps", ",", "label", ")", ":", "\n", "    ", "arrF1", "=", "np", ".", "array", "(", "arrF1", ")", "\n", "c", "=", "range", "(", "len", "(", "arrF1", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "add_subplot", "(", "122", ")", "\n", "ax", "=", "plt", ".", "axes", "(", ")", "\n", "ax", ".", "plot", "(", "c", ",", "arrF1", ",", "'k'", ")", "\n", "plt", ".", "yticks", "(", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", ",", "1", "]", ")", "\n", "if", "steps", ">", "10", ":", "\n", "        ", "plt", ".", "xticks", "(", "range", "(", "1", ",", "steps", "+", "1", ",", "10", ")", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "xticks", "(", "range", "(", "1", ",", "steps", "+", "1", ")", ")", "\n", "", "plt", ".", "title", "(", "label", ")", "\n", "plt", ".", "ylabel", "(", "\"F1\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Step\"", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotBoxplot": [[204, 222], ["matplotlib.figure", "plt.figure.add_subplot", "matplotlib.boxplot", "matplotlib.xticks", "matplotlib.show", "matplotlib.title", "matplotlib.ylabel", "matplotlib.title", "matplotlib.ylabel", "matplotlib.title", "matplotlib.ylabel"], "function", ["None"], ["", "def", "plotBoxplot", "(", "mode", ",", "data", ",", "labels", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "add_subplot", "(", "111", ")", "\n", "plt", ".", "boxplot", "(", "data", ",", "labels", "=", "labels", ")", "\n", "plt", ".", "xticks", "(", "rotation", "=", "90", ")", "\n", "\n", "if", "mode", "==", "'acc'", ":", "\n", "        ", "plt", ".", "title", "(", "\"Accuracy - Boxplot\"", ")", "\n", "#plt.xlabel('step (s)')", "\n", "plt", ".", "ylabel", "(", "'Accuracy'", ")", "\n", "", "elif", "mode", "==", "'mcc'", ":", "\n", "        ", "plt", ".", "title", "(", "'Mathews Correlation Coefficient - Boxplot'", ")", "\n", "plt", ".", "ylabel", "(", "\"Mathews Correlation Coefficient\"", ")", "\n", "", "elif", "mode", "==", "'f1'", ":", "\n", "        ", "plt", ".", "title", "(", "'F1 - Boxplot'", ")", "\n", "plt", ".", "ylabel", "(", "\"F1\"", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotAccuracyCurves": [[224, 241], ["matplotlib.title", "matplotlib.legend", "matplotlib.yticks", "matplotlib.xticks", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.show", "len", "numpy.array", "range", "matplotlib.axes", "plt.axes.plot", "range", "len"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot"], ["", "def", "plotAccuracyCurves", "(", "listOfAccuracies", ",", "listOfMethods", ")", ":", "\n", "    ", "limit", "=", "len", "(", "listOfAccuracies", "[", "0", "]", ")", "+", "1", "\n", "\n", "for", "acc", "in", "listOfAccuracies", ":", "\n", "        ", "acc", "=", "np", ".", "array", "(", "acc", ")", "\n", "c", "=", "range", "(", "len", "(", "acc", ")", ")", "\n", "ax", "=", "plt", ".", "axes", "(", ")", "\n", "ax", ".", "plot", "(", "c", ",", "acc", ")", "\n", "\n", "", "plt", ".", "title", "(", "\"Accuracy curve\"", ")", "\n", "plt", ".", "legend", "(", "listOfMethods", ")", "\n", "plt", ".", "yticks", "(", "[", "0", ",", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", "]", ")", "\n", "plt", ".", "xticks", "(", "range", "(", "0", ",", "limit", ",", "10", ")", ")", "\n", "plt", ".", "ylabel", "(", "\"Accuracy\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Step\"", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotBars": [[243, 255], ["range", "matplotlib.title", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.show", "len", "matplotlib.axes", "plt.axes.bar", "range", "len"], "function", ["None"], ["", "def", "plotBars", "(", "listOfTimes", ",", "listOfMethods", ")", ":", "\n", "\n", "    ", "for", "l", "in", "range", "(", "len", "(", "listOfTimes", ")", ")", ":", "\n", "        ", "ax", "=", "plt", ".", "axes", "(", ")", "\n", "ax", ".", "bar", "(", "l", ",", "listOfTimes", "[", "l", "]", ",", "label", "=", "listOfMethods", "[", "l", "]", ",", "align", "=", "'center'", ")", "\n", "\n", "", "plt", ".", "title", "(", "\"Execution time to perform all stream\"", ")", "\n", "plt", ".", "legend", "(", "listOfMethods", ")", "\n", "plt", ".", "xlabel", "(", "\"Methods\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Execution time\"", ")", "\n", "plt", ".", "xticks", "(", "range", "(", "len", "(", "listOfTimes", ")", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotBars2": [[257, 271], ["range", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.yticks", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.grid", "matplotlib.show", "len", "matplotlib.axes", "plt.axes.bar", "range", "range", "len"], "function", ["None"], ["", "def", "plotBars2", "(", "listOfTimes", ",", "listOfMethods", ")", ":", "\n", "\n", "    ", "for", "l", "in", "range", "(", "len", "(", "listOfTimes", ")", ")", ":", "\n", "        ", "ax", "=", "plt", ".", "axes", "(", ")", "\n", "ax", ".", "bar", "(", "l", ",", "listOfTimes", "[", "l", "]", ")", "\n", "\n", "", "plt", ".", "title", "(", "\"Average Accuracy\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Methods\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Accuracy\"", ")", "\n", "plt", ".", "yticks", "(", "range", "(", "0", ",", "101", ",", "10", ")", ")", "\n", "plt", ".", "xticks", "(", "range", "(", "len", "(", "listOfTimes", ")", ")", ",", "listOfMethods", ")", "\n", "plt", ".", "xticks", "(", "rotation", "=", "90", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotBars3": [[273, 287], ["range", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.grid", "matplotlib.show", "len", "matplotlib.axes", "plt.axes.bar", "range", "len"], "function", ["None"], ["", "def", "plotBars3", "(", "listOfAccuracies", ",", "listOfMethods", ")", ":", "\n", "\n", "    ", "for", "l", "in", "range", "(", "len", "(", "listOfAccuracies", ")", ")", ":", "\n", "        ", "ax", "=", "plt", ".", "axes", "(", ")", "\n", "ax", ".", "bar", "(", "l", ",", "100", "-", "listOfAccuracies", "[", "l", "]", ")", "\n", "\n", "", "plt", ".", "title", "(", "\"Average Error\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Methods\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Error\"", ")", "\n", "#plt.yticks(range(0, 101, 10))", "\n", "plt", ".", "xticks", "(", "range", "(", "len", "(", "listOfAccuracies", ")", ")", ",", "listOfMethods", ")", "\n", "plt", ".", "xticks", "(", "rotation", "=", "90", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plotBars4": [[289, 305], ["range", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.grid", "matplotlib.show", "len", "matplotlib.axes", "plt.axes.bar", "print", "range", "len"], "function", ["None"], ["", "def", "plotBars4", "(", "baseline", ",", "listOfAccuracies", ",", "listOfMethods", ")", ":", "\n", "\n", "    ", "for", "l", "in", "range", "(", "1", ",", "len", "(", "listOfAccuracies", ")", ")", ":", "\n", "        ", "ax", "=", "plt", ".", "axes", "(", ")", "\n", "#ax.bar(l, (listOfAccuracies[l]-baseline)/listOfAccuracies[l])", "\n", "ax", ".", "bar", "(", "l", ",", "(", "(", "listOfAccuracies", "[", "l", "]", "-", "baseline", ")", "/", "baseline", ")", "*", "100", ")", "\n", "print", "(", "'Error reduction:'", ",", "(", "(", "listOfAccuracies", "[", "l", "]", "-", "baseline", ")", "/", "baseline", ")", "*", "100", ")", "\n", "\n", "", "plt", ".", "title", "(", "\"Reduction Percentage Error\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Methods\"", ")", "\n", "plt", ".", "ylabel", "(", "\"% Error under baseline (Static SSL)\"", ")", "\n", "#plt.yticks(range(0, 101, 10))", "\n", "plt", ".", "xticks", "(", "range", "(", "1", ",", "len", "(", "listOfAccuracies", ")", ")", ",", "listOfMethods", "[", "1", ":", "]", ")", "\n", "plt", ".", "xticks", "(", "rotation", "=", "90", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "show", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.F1": [[20, 22], ["sklearn.metrics.f1_score"], "function", ["None"], ["def", "save_results", "(", "arr_readouts", ",", "csvs_folder_path", ",", "filenames", ",", "delimiter", ")", ":", "\n", "\t", "[", "index_file", ",", "acc_file_name", ",", "cf_file_name", ",", "time_file_name", ",", "mem_file_name", ",", "f1_file_name", "]", "=", "filenames", "\n", "index_results", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_pos_neg_rate_stacked_bars": [[45, 88], ["range", "metrics.multipage", "len", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_ylim", "fig.add_subplot.xaxis.set_ticks", "plt.figure.suptitle", "fig.add_subplot.figure.canvas.set_window_title", "figures.append", "matplotlib.show", "x.append", "y_fp.append", "y_fn.append", "y_tp.append", "y_tn.append", "range", "zip", "zip", "len"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.multipage"], ["", "elif", "metric", "==", "'F1'", ":", "\n", "\t\t", "return", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "None", ")", "\n", "", "elif", "metric", "==", "'MCC'", ":", "\n", "\t\t", "return", "matthews_corrcoef", "(", "y_true", ",", "y_pred", ")", "\n", "", "elif", "metric", "==", "'precision'", ":", "\n", "\t\t", "return", "precision_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "None", ")", "\n", "", "elif", "metric", "==", "'recall'", ":", "\n", "\t\t", "return", "recall_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "None", ")", "\n", "", "else", ":", "\n", "\t\t", "print", "(", "\"Metric not found!\"", ")", "\n", "\n", "\n", "", "", "def", "plot_false_decisions_legend", "(", ")", ":", "\n", "\t", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", ")", "\n", "title", "=", "\"Legend\"", "\n", "ax", ".", "figure", ".", "suptitle", "(", "title", ")", "\n", "ax", ".", "figure", ".", "canvas", ".", "set_window_title", "(", "title", ")", "\n", "labels", "=", "'false positives'", ",", "'false negatives'", ",", "'true positives'", "\n", "width", "=", "0.5", "\n", "\n", "blue", "=", "[", "0", ",", ".4", ",", ".6", "]", "\n", "yellow", "=", "[", "1", ",", "0.65", ",", "0.25", "]", "\n", "red", "=", "[", "1", ",", "0", ",", "0", "]", "\n", "res1", "=", "ax", ".", "bar", "(", "[", "1", "]", ",", "[", "1", "]", ",", "color", "=", "red", ",", "edgecolor", "=", "'white'", ",", "hatch", "=", "\".\"", ",", "width", "=", "width", ")", "\n", "res2", "=", "ax", ".", "bar", "(", "[", "1", "]", ",", "[", "2", "]", ",", "bottom", "=", "[", "1", "]", ",", "color", "=", "yellow", ",", "edgecolor", "=", "\"white\"", ",", "hatch", "=", "\"x\"", ",", "width", "=", "width", ")", "\n", "res3", "=", "ax", ".", "bar", "(", "[", "1", "]", ",", "[", "3", "]", ",", "bottom", "=", "[", "2", "]", ",", "color", "=", "blue", ",", "edgecolor", "=", "\"white\"", ",", "width", "=", "width", ")", "\n", "ax", ".", "cla", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "legend", "(", "(", "res1", "[", "0", "]", ",", "res2", "[", "0", "]", ",", "res3", "[", "0", "]", ")", ",", "labels", ",", "loc", "=", "\"center\"", ",", "handleheight", "=", "3", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "", "def", "plot_pos_neg_rate_stacked_bars_total", "(", "experiment_name", ",", "arr_readouts", ",", "num_classes", ",", "fig_path", ")", ":", "\n", "\t", "figures", "=", "[", "]", "\n", "x", "=", "[", "]", "\n", "y_fp", "=", "[", "]", "\n", "y_fn", "=", "[", "]", "\n", "y_tp", "=", "[", "]", "\n", "y_tn", "=", "[", "]", "\n", "\n", "#COLOR = 'black'", "\n", "#mpl.rcParams['text.color'] = 'white'", "\n", "#mpl.rcParams['axes.labelcolor'] = 'black'", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.abstraction_box.make_abstraction": [[7, 48], ["numpy.asarray", "print", "sklearn.cluster.KMeans().fit_predict", "print", "zip", "array_box_by_cluster.update", "dataByCluster.items", "dim_reduc_obj.fit", "dim_reduc_obj.fit.transform", "numpy.asarray", "range", "array_box_by_cluster[].append", "print", "pickle.dump", "sklearn.cluster.KMeans", "dataByCluster[].append", "numpy.amin", "numpy.amax", "arr_intermediate.append", "open", "dataByCluster.update"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["def", "make_abstraction", "(", "data", ",", "K", ",", "classe", ",", "dim_reduc_obj", "=", "None", ",", "dim_reduc_method", "=", "''", ",", "monitors_folder", "=", "''", ",", "save", "=", "False", ")", ":", "\n", "\t", "data", "=", "np", ".", "asarray", "(", "data", ")", "\n", "\n", "if", "dim_reduc_obj", "==", "None", ":", "\n", "#doing a projection by taking just the first and the last dimension of data", "\n", "\t\t", "data", "=", "data", "[", ":", ",", "[", "0", ",", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "#using a dimensionality reduction function", "\n", "\t\t", "method", "=", "dim_reduc_obj", ".", "fit", "(", "data", ")", "\n", "data", "=", "method", ".", "transform", "(", "data", ")", "\n", "if", "save", ":", "\n", "\t\t\t", "print", "(", "\"Saving trained dim reduc method\"", ")", "\n", "pickle", ".", "dump", "(", "method", ",", "open", "(", "monitors_folder", "+", "dim_reduc_method", "+", "'_trained.p'", ",", "\"wb\"", ")", ")", "\n", "\n", "", "", "print", "(", "data", ".", "shape", ")", "\n", "\n", "dataByCluster", "=", "{", "}", "\n", "clusters", "=", "KMeans", "(", "n_clusters", "=", "K", ")", ".", "fit_predict", "(", "data", ")", "\n", "\n", "print", "(", "\"making boxes...\"", ")", "\n", "\n", "for", "c", ",", "d", "in", "zip", "(", "clusters", ",", "data", ")", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "dataByCluster", "[", "c", "]", ".", "append", "(", "d", ")", "\n", "", "except", ":", "\n", "\t\t\t", "dataByCluster", ".", "update", "(", "{", "c", ":", "[", "d", "]", "}", ")", "\n", "\n", "", "", "array_box_by_cluster", "=", "{", "}", "\n", "array_box_by_cluster", ".", "update", "(", "{", "classe", ":", "[", "]", "}", ")", "\n", "\n", "for", "k", ",", "v", "in", "dataByCluster", ".", "items", "(", ")", ":", "\n", "\t\t", "arr_intermediate", "=", "[", "]", "\n", "v", "=", "np", ".", "asarray", "(", "v", ")", "\n", "\n", "for", "i", "in", "range", "(", "v", ".", "shape", "[", "1", "]", ")", ":", "\n", "\t\t\t", "min_i", "=", "np", ".", "amin", "(", "v", "[", ":", ",", "i", "]", ")", "\n", "max_i", "=", "np", ".", "amax", "(", "v", "[", ":", ",", "i", "]", ")", "\n", "arr_intermediate", ".", "append", "(", "[", "min_i", ",", "max_i", "]", ")", "\n", "", "array_box_by_cluster", "[", "classe", "]", ".", "append", "(", "arr_intermediate", ")", "\n", "\n", "", "return", "array_box_by_cluster", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.abstraction_box.find_point": [[50, 76], ["numpy.asarray", "dim_reduc_obj.transform", "np.asarray.reshape"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["", "def", "find_point", "(", "boxes", ",", "intermediateValues", ",", "class_to_monitor", ",", "dim_reduc_obj", "=", "None", ")", ":", "\n", "\t", "data", "=", "np", ".", "asarray", "(", "intermediateValues", ")", "\n", "#print(intermediateValues)", "\n", "\n", "if", "dim_reduc_obj", "!=", "None", ":", "\n", "\t\t", "data", "=", "dim_reduc_obj", ".", "transform", "(", "data", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "\n", "#print(data)", "\n", "", "x", "=", "data", "[", "0", "]", "\n", "y", "=", "data", "[", "-", "1", "]", "\n", "#print(\"point:\", x, y)", "\n", "result", "=", "False", "\n", "try", ":", "\n", "\t\t", "for", "box", "in", "boxes", "[", "class_to_monitor", "]", ":", "\n", "#B = box[0]", "\n", "#print(box)", "\n", "\t\t\t", "x1", "=", "box", "[", "0", "]", "[", "0", "]", "\n", "x2", "=", "box", "[", "0", "]", "[", "1", "]", "\n", "y1", "=", "box", "[", "1", "]", "[", "0", "]", "\n", "y2", "=", "box", "[", "1", "]", "[", "1", "]", "\n", "if", "x", ">=", "x1", "and", "x", "<=", "x2", "and", "y", ">=", "y1", "and", "y", "<=", "y2", ":", "\n", "\t\t\t\t", "return", "True", "\n", "", "", "", "except", ":", "\n", "\t\t", "pass", "\n", "#print(\"error @ find_point function\")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.abstraction_box.find_point_box_ensemble": [[78, 112], ["range", "len", "numpy.asarray", "dim_reduc_obj.transform", "np.asarray.reshape"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["", "def", "find_point_box_ensemble", "(", "arr_boxes", ",", "intermediateValues_all", ",", "dim_reduc_obj", "=", "None", ")", ":", "\n", "\t", "result", "=", "False", "\n", "for", "i", "in", "range", "(", "len", "(", "intermediateValues_all", ")", ")", ":", "\n", "#print(i)", "\n", "\t\t", "if", "i", "!=", "3", ":", "#CNN 3 with problem", "\n", "\t\t\t", "data", "=", "np", ".", "asarray", "(", "intermediateValues_all", "[", "i", "]", ")", "\n", "boxes", "=", "arr_boxes", "[", "i", "]", "\n", "\n", "", "if", "dim_reduc_obj", "!=", "None", ":", "\n", "\t\t\t", "data", "=", "dim_reduc_obj", ".", "transform", "(", "data", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "\n", "x", "=", "data", "[", "0", "]", "\n", "y", "=", "data", "[", "-", "1", "]", "\n", "#print(\"point:\", x, y)", "\n", "try", ":", "\n", "\t\t\t\t", "for", "box", "in", "boxes", ":", "\n", "\t\t\t\t\t", "x1", "=", "box", "[", "0", "]", "[", "0", "]", "\n", "x2", "=", "box", "[", "0", "]", "[", "1", "]", "\n", "y1", "=", "box", "[", "1", "]", "[", "0", "]", "\n", "y2", "=", "box", "[", "1", "]", "[", "1", "]", "\n", "\n", "if", "x", ">=", "x1", "and", "x", "<=", "x2", "and", "y", ">=", "y1", "and", "y", "<=", "y2", ":", "\n", "#print(\"similarity between 0 and 1\", cosine_similarity(intermediateValues_all[0].reshape(1, -1), intermediateValues_all[1].reshape(1, -1)))", "\n", "#print(\"similarity between 0 and 2\", cosine_similarity(intermediateValues_all[0].reshape(1, -1), intermediateValues_all[2].reshape(1, -1)))", "\n", "#print(\"similarity between 0 and 4\", cosine_similarity(intermediateValues_all[0].reshape(1, -1), intermediateValues_all[4].reshape(1, -1)))", "\n", "#print(\"similarity between 1 and 2\", cosine_similarity(intermediateValues_all[1].reshape(1, -1), intermediateValues_all[2].reshape(1, -1)))", "\n", "#print(\"similarity between 1 and 4\", cosine_similarity(intermediateValues_all[1].reshape(1, -1), intermediateValues_all[4].reshape(1, -1)))", "\n", "#print(\"similarity between 2 and 4\", cosine_similarity(intermediateValues_all[2].reshape(1, -1), intermediateValues_all[4].reshape(1, -1)))", "\n", "\n", "\t\t\t\t\t\t", "return", "True", "\n", "", "", "", "except", ":", "\n", "\t\t\t\t", "pass", "\n", "#print(\"error @ find_point_box_ensemble function\")", "\n", "", "", "", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_separator": [[17, 25], ["sys.platform.startswith"], "function", ["None"], ["\t", "tmp_path", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "'temp'", ")", "\n", "os", ".", "makedirs", "(", "tmp_path", ",", "exist_ok", "=", "True", ")", "\n", "tmp_path", "=", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "artifact_name", ")", "\n", "np", ".", "save", "(", "tmp_path", ",", "data", ")", "\n", "neptune", ".", "log_artifact", "(", "tmp_path", ")", "\n", "\n", "if", "remove_temp_files", ":", "\n", "\t\t", "os", ".", "remove", "(", "tmp_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches.is_pred_diff": [[10, 18], ["loaded_monitor.predict"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["def", "is_pred_diff", "(", "yPred", ",", "intermediateValues", ",", "loaded_monitor", ")", ":", "\n", "    ", "yPred_by_monitor", "=", "loaded_monitor", ".", "predict", "(", "intermediateValues", ")", "\n", "#print(np.shape(yPred_by_monitor))", "\n", "\n", "if", "yPred_by_monitor", "==", "yPred", ":", "\n", "        ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches.is_pred_neg": [[20, 28], ["loaded_monitor.predict"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["", "def", "is_pred_neg", "(", "yPred", ",", "intermediateValues", ",", "loaded_monitor", ")", ":", "\n", "    ", "yPred_by_monitor", "=", "loaded_monitor", ".", "predict", "(", "intermediateValues", ")", "\n", "#print(np.shape(yPred_by_monitor))", "\n", "\n", "if", "yPred_by_monitor", "==", "-", "1", ":", "\n", "        ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches.safety_monitor_decision": [[30, 143], ["time.perf_counter", "numpy.reshape", "safety_approaches.is_pred_diff", "time.perf_counter", "src.utils.util.get_activ_func", "scaler.transform", "numpy.reshape", "safety_approaches.is_pred_neg", "readout.arr_detection_SM.append", "readout.arr_detection_true.append", "readout.arr_detection_SM.append", "readout.arr_detection_true.append", "readout.arr_detection_SM.append", "readout.arr_detection_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_detection_SM.append", "readout.arr_detection_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "monitor.method", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "loaded_monitor.detection", "numpy.shape", "os.path.join", "monitor.method.adversarial_model.load_weights", "monitor.method.adversarial_model.predict", "img.reshape", "model_predicts[].reshape", "keras.variable", "keras.variable", "keras.eval().mean", "keras.eval", "keras.losses.binary_crossentropy"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.is_pred_diff", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.is_pred_neg", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.detection", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["", "def", "safety_monitor_decision", "(", "readout", ",", "monitor", ",", "model", ",", "img", ",", "yPred", ",", "lbl", ",", "experiment", ",", "use_intermediateValues", ",", "\n", "scaler", ",", "loaded_monitor", ")", ":", "\n", "\n", "    ", "classes_to_monitor", "=", "experiment", ".", "classes_to_monitor_ID", "\n", "raise_alarm", "=", "False", "\n", "\n", "ini", "=", "timer", "(", ")", "# SM time", "\n", "\n", "if", "use_intermediateValues", "==", "True", ":", "\n", "        ", "intermediateValues", "=", "util", ".", "get_activ_func", "(", "experiment", ".", "backend", ",", "model", ",", "img", ",", "monitor", ".", "layer_index", ")", "[", "0", "]", "\n", "# if you want to scale act func values", "\n", "if", "scaler", "!=", "None", ":", "\n", "            ", "intermediateValues", "=", "scaler", ".", "transform", "(", "intermediateValues", ")", "\n", "\n", "", "", "if", "monitor", ".", "OOD_approach", "==", "'equality'", ":", "\n", "# if monitor acceptance approach is based on two equal predictions", "\n", "        ", "intermediateValues", "=", "np", ".", "reshape", "(", "intermediateValues", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "raise_alarm", "=", "is_pred_diff", "(", "yPred", ",", "intermediateValues", ",", "loaded_monitor", ")", "\n", "\n", "", "elif", "monitor", ".", "OOD_approach", "==", "'outlier'", ":", "\n", "# if monitor acceptance approach is based on instance classified as outlier \"-1\"", "\n", "        ", "intermediateValues", "=", "np", ".", "reshape", "(", "intermediateValues", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "raise_alarm", "=", "is_pred_neg", "(", "yPred", ",", "intermediateValues", ",", "loaded_monitor", ")", "\n", "\n", "", "elif", "monitor", ".", "OOD_approach", "==", "'outside_of_box'", ":", "\n", "        ", "raise_alarm", "=", "monitor", ".", "method", "(", "loaded_monitor", "[", "yPred", "]", ",", "intermediateValues", ",", "yPred", ",", "monitor", ")", "\n", "\n", "", "elif", "monitor", ".", "OOD_approach", "==", "'temperature'", ":", "\n", "# keras version", "\n", "#raise_alarm = loaded_monitor.detection(model, img, yPred, monitor.noiseMagnitude, monitor.temper, monitor.threshold)", "\n", "# pytorch version", "\n", "        ", "raise_alarm", "=", "loaded_monitor", ".", "detection", "(", "model", ",", "img", ",", "monitor", ".", "temper", ",", "monitor", ".", "noiseMagnitude", ",", "monitor", ".", "threshold", ",", "'cuda:0'", ")", "\n", "\n", "", "elif", "monitor", ".", "OOD_approach", "==", "'adversarial'", ":", "\n", "        ", "input_shape", "=", "np", ".", "shape", "(", "img", ")", "#(32, 32, 3)", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "monitor", ".", "monitors_folder", ",", "'class_{}'", ".", "format", "(", "yPred", ")", ",", "'ALOCC_Model_{}.h5'", ".", "format", "(", "monitor", ".", "model_number", ")", ")", "\n", "\n", "monitor", ".", "method", ".", "adversarial_model", ".", "load_weights", "(", "path", ")", "\n", "\n", "#model_predicts = monitor.method.adversarial_model.predict(np.asarray([img]))", "\n", "model_predicts", "=", "monitor", ".", "method", ".", "adversarial_model", ".", "predict", "(", "img", ")", "\n", "\n", "input_image", "=", "img", ".", "reshape", "(", "input_shape", ")", "\n", "reconstructed_image", "=", "model_predicts", "[", "0", "]", ".", "reshape", "(", "input_shape", ")", "\n", "\n", "y_true", "=", "K", ".", "variable", "(", "reconstructed_image", ")", "\n", "y_pred", "=", "K", ".", "variable", "(", "input_image", ")", "\n", "error", "=", "K", ".", "eval", "(", "binary_crossentropy", "(", "y_true", ",", "y_pred", ")", ")", ".", "mean", "(", ")", "\n", "\n", "if", "monitor", ".", "threshold", "[", "yPred", "]", "<", "error", ":", "\n", "            ", "raise_alarm", "=", "True", "\n", "\n", "# ID images (OOD label numbers higher than the ID label numbers)", "\n", "", "", "if", "lbl", "<", "classes_to_monitor", ":", "\n", "\n", "# An ID image arrives in the stream, the SM raises the alarm and dismiss the ML classification", "\n", "        ", "if", "raise_alarm", ":", "\n", "# false positive for OOD", "\n", "            ", "readout", ".", "arr_detection_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_detection_true", ".", "append", "(", "0", ")", "\n", "\n", "if", "yPred", "!=", "lbl", ":", "\n", "# correct reaction (avoided a misclassification of ID data.)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "1", ")", "\n", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "# incorrect reaction (intervention with no necessity)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "0", ")", "\n", "\n", "# An ID image arrives in the stream, the SM does not raise the alarm, accepting the ML classification", "\n", "", "", "else", ":", "\n", "# True negative for OOD", "\n", "            ", "readout", ".", "arr_detection_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_detection_true", ".", "append", "(", "0", ")", "\n", "\n", "if", "yPred", "!=", "lbl", ":", "\n", "# incorrect reaction (it should intervene)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "1", ")", "\n", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "# correct reaction (it correctly did not intervene)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "0", ")", "\n", "\n", "# OOD images", "\n", "", "", "", "else", ":", "\n", "\n", "# An OOD image arrives in the stream, the SM raises the alarm and dismiss the ML classification", "\n", "        ", "if", "raise_alarm", ":", "\n", "# True positive for OOD", "\n", "            ", "readout", ".", "arr_detection_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_detection_true", ".", "append", "(", "1", ")", "\n", "\n", "# for novelty and outlier, it is always correct reaction (independently of the ground truth)", "\n", "readout", ".", "arr_reaction_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "1", ")", "\n", "\n", "# An OOD image arrives in the stream, the SM does not raise the alarm, accepting the ML classification", "\n", "", "else", ":", "\n", "# False negative for OOD", "\n", "            ", "readout", ".", "arr_detection_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_detection_true", ".", "append", "(", "1", ")", "\n", "\n", "# for novelty and outlier, it is always incorrect reaction (it should intervene independently of the ground truth)", "\n", "readout", ".", "arr_reaction_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "1", ")", "\n", "\n", "", "", "time_spent", "=", "timer", "(", ")", "-", "ini", "\n", "return", "readout", ",", "time_spent", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.create_monitor": [[20, 41], ["src.Classes.monitor.Monitor", "os.path.join"], "function", ["None"], ["def", "create_monitor", "(", "technique", ",", "dataset_name", ",", "monitor_name", ",", "monitoring_characteristics", ",", "PARAMS", ")", ":", "\n", "\t", "monitor", "=", "Monitor", "(", "monitor_name", ")", "\n", "\n", "# for class_to_monitor in range(classes_to_monitor):", "\n", "monitor_folder", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "monitoring_characteristics", ",", "dataset_name", ",", "technique", ")", "\n", "# monitor_folder += technique +sep+ 'class_'+str(class_to_monitor) +sep", "\n", "#monitor_folder += technique", "\n", "monitor", ".", "monitors_folder", "=", "monitor_folder", "\n", "\n", "if", "PARAMS", "[", "'use_alternative_monitor'", "]", ":", "\n", "\t\t", "monitor", ".", "filename", "=", "'monitor_'", "+", "monitor_name", "+", "'.p_2'", "\n", "", "else", ":", "\n", "\t\t", "monitor", ".", "filename", "=", "'monitor_'", "+", "monitor_name", "+", "'.p'", "\n", "\n", "#if PARAMS['use_scaler']:", "\n", "#\tmonitor.filename = '(scaled_input_version)'+monitor.filename", "\n", "\n", "", "monitor", ".", "use_alternative_monitor", "=", "PARAMS", "[", "'use_alternative_monitor'", "]", "\n", "monitor", ".", "use_scaler", "=", "PARAMS", "[", "'use_scaler'", "]", "\n", "\n", "return", "monitor", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_cluster_based_monitors": [[43, 59], ["numpy.array", "load_monitors.create_monitor", "monitors.append"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.create_monitor"], ["", "def", "load_cluster_based_monitors", "(", "dataset_name", ",", "technique", ",", "PARAMS", ")", ":", "\n", "\n", "\t", "monitors", "=", "[", "]", "\n", "\n", "if", "'knn'", "==", "technique", ":", "\n", "\t\t", "arr_n_clusters", "=", "PARAMS", "[", "'arr_n_clusters'", "]", "\n", "\n", "for", "n_clusters", "in", "arr_n_clusters", ":", "\n", "\t\t\t", "monitor_name", "=", "technique", "+", "'_{}_clusters'", ".", "format", "(", "n_clusters", ")", "\n", "monitor", "=", "create_monitor", "(", "technique", ",", "dataset_name", ",", "monitor_name", ",", "monitoring_characteristics", ")", "\n", "monitor", ".", "n_clusters", "=", "n_clusters", "\n", "monitor", ".", "use_scaler", "=", "PARAMS", "[", "'use_scaler'", "]", "\n", "\n", "monitors", ".", "append", "(", "monitor", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "monitors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_tree_based_monitors": [[61, 71], ["numpy.array", "load_monitors.create_monitor"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.create_monitor"], ["", "def", "load_tree_based_monitors", "(", "dataset_name", ",", "technique", ",", "PARAMS", ")", ":", "\n", "\n", "\t", "if", "'random_forest'", "==", "technique", ":", "\n", "\t\t", "if", "PARAMS", "[", "'grid_search'", "]", ":", "\n", "\t\t\t", "monitor_name", "=", "technique", "+", "'_optimized'", "\n", "", "else", ":", "\n", "\t\t\t", "monitor_name", "=", "technique", "+", "'_not_optimized'", "\n", "", "monitor", "=", "create_monitor", "(", "technique", ",", "dataset_name", ",", "monitor_name", ",", "monitoring_characteristics", ",", "PARAMS", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "monitor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_linear_based_monitors": [[73, 84], ["numpy.array", "load_monitors.create_monitor"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.create_monitor"], ["", "def", "load_linear_based_monitors", "(", "dataset_name", ",", "technique", ",", "PARAMS", ")", ":", "\n", "\n", "\t", "if", "'sgd'", "==", "technique", ":", "\n", "\t\t", "if", "PARAMS", "[", "'grid_search'", "]", ":", "\n", "\t\t\t", "monitor_name", "=", "technique", "+", "'_optimized'", "\n", "", "else", ":", "\n", "\t\t\t", "monitor_name", "=", "technique", "+", "'_not_optimized'", "\n", "", "monitor", "=", "create_monitor", "(", "technique", ",", "dataset_name", ",", "monitor_name", ",", "monitoring_characteristics", ",", "PARAMS", ")", "\n", "monitor", ".", "OOD_approach", "=", "PARAMS", "[", "'OOD_approach'", "]", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "monitor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_odin_monitor": [[86, 106], ["src.Classes.monitor.Monitor", "os.path.join", "numpy.array"], "function", ["None"], ["", "def", "load_odin_monitor", "(", "dataset_name", ",", "PARAMS", ")", ":", "\n", "\t", "monitor_name", "=", "'odin'", "\n", "monitor", "=", "Monitor", "(", "monitor_name", ")", "\n", "\n", "monitor_folder", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "monitoring_characteristics", ",", "dataset_name", ",", "monitor_name", ")", "\n", "\n", "monitor", ".", "monitors_folder", "=", "monitor_folder", "\n", "\n", "monitor", ".", "filename", "=", "'monitor_odin.p'", "\n", "# line not necessary in the final version", "\n", "monitor", ".", "method", "=", "odin_monitor", "#odin_keras", "\n", "\n", "monitor", ".", "use_alternative_monitor", "=", "PARAMS", "[", "'use_alternative_monitor'", "]", "\n", "monitor", ".", "use_scaler", "=", "PARAMS", "[", "'use_scaler'", "]", "\n", "monitor", ".", "OOD_approach", "=", "PARAMS", "[", "'OOD_approach'", "]", "\n", "monitor", ".", "noiseMagnitude", "=", "PARAMS", "[", "'noiseMagnitude'", "]", "\n", "monitor", ".", "temper", "=", "PARAMS", "[", "'temper'", "]", "\n", "monitor", ".", "threshold", "=", "PARAMS", "[", "'threshold'", "]", "\n", "\n", "return", "np", ".", "array", "(", "[", "monitor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_alocc_monitor": [[108, 131], ["src.Classes.monitor.Monitor", "src.threats.novelty_detection.methods.sota.ALOCC_Keras.models.ALOCC_Model", "os.path.join", "numpy.array"], "function", ["None"], ["", "def", "load_alocc_monitor", "(", "dataset_name", ",", "PARAMS", ")", ":", "\n", "\n", "\t", "monitor_name", "=", "'alooc'", "\n", "monitor", "=", "Monitor", "(", "monitor_name", ")", "\n", "\n", "monitor", ".", "OOD_approach", "=", "PARAMS", "[", "'OOD_approach'", "]", "\n", "monitor", ".", "use_scaler", "=", "PARAMS", "[", "'use_scaler'", "]", "\n", "monitor", ".", "optimizer", "=", "PARAMS", "[", "'optimizer'", "]", "\n", "monitor", ".", "model_number", "=", "PARAMS", "[", "'model_number'", "]", "\n", "monitor", ".", "threshold", "=", "PARAMS", "[", "'threshold'", "]", "\n", "\n", "alooc_monitor", "=", "ALOOC", ".", "ALOCC_Model", "(", "input_height", "=", "PARAMS", "[", "'input_height'", "]", ",", "input_width", "=", "PARAMS", "[", "'input_width'", "]", ",", "\n", "output_height", "=", "PARAMS", "[", "'output_height'", "]", ",", "output_width", "=", "PARAMS", "[", "'output_width'", "]", ",", "c_dim", "=", "3", ")", "\n", "\n", "monitor_folder", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "monitoring_characteristics", ",", "dataset_name", ",", "monitor_name", ",", "monitor", ".", "optimizer", ")", "\n", "\n", "monitor", ".", "monitors_folder", "=", "monitor_folder", "\n", "\n", "monitor", ".", "filename", "=", "'monitor_alooc.p'", "\n", "# line not necessary in the final version", "\n", "monitor", ".", "method", "=", "alooc_monitor", "\n", "\n", "return", "np", ".", "array", "(", "[", "monitor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_svm_based_monitors": [[133, 144], ["numpy.array", "load_monitors.create_monitor"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.create_monitor"], ["", "def", "load_svm_based_monitors", "(", "dataset_name", ",", "technique", ",", "PARAMS", ")", ":", "\n", "\n", "\t", "if", "'ocsvm'", "==", "technique", ":", "\n", "\t\t", "if", "PARAMS", "[", "'grid_search'", "]", ":", "\n", "\t\t\t", "monitor_name", "=", "technique", "+", "'_optimized'", "\n", "", "else", ":", "\n", "\t\t\t", "monitor_name", "=", "technique", "+", "'_not_optimized'", "\n", "", "monitor", "=", "create_monitor", "(", "technique", ",", "dataset_name", ",", "monitor_name", ",", "monitoring_characteristics", ",", "PARAMS", ")", "\n", "monitor", ".", "OOD_approach", "=", "'outlier'", "# only possible using the outlier approach", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "monitor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_box_based_monitors": [[146, 246], ["numpy.array", "src.Classes.monitor.Monitor", "os.path.join", "os.path.join", "monitors.append", "src.Classes.monitor.Monitor", "os.path.join", "os.path.join", "monitors.append", "dim_reduc_method.append", "dim_reduc_method.append"], "function", ["None"], ["", "def", "load_box_based_monitors", "(", "dataset_name", ",", "technique", ",", "classes_to_monitor", ",", "params", ")", ":", "\n", "\n", "\t", "monitors", "=", "[", "]", "\n", "arr_n_clusters_oob", "=", "params", "[", "'arr_n_clusters'", "]", "\n", "tau", "=", "params", "[", "'tau'", "]", "\n", "use_alternative_monitor", "=", "params", "[", "'use_alternative_monitor'", "]", "\n", "use_scaler", "=", "params", "[", "'use_scaler'", "]", "\n", "OOD_approach", "=", "params", "[", "'OOD_approach'", "]", "\n", "\n", "for", "n_clusters_oob", "in", "arr_n_clusters_oob", ":", "\n", "#for tau in arr_tau_oob:", "\n", "\t\t", "monitor", "=", "None", "\n", "boxes", "=", "{", "}", "\n", "\n", "if", "'oob'", "==", "technique", ":", "\n", "\t\t\t", "monitor_name", "=", "technique", "+", "'_{}_clusters'", ".", "format", "(", "n_clusters_oob", ")", "\n", "monitor", "=", "Monitor", "(", "monitor_name", ")", "\n", "monitor", ".", "n_clusters", "=", "n_clusters_oob", "\n", "\n", "#for class_to_monitor in range(classes_to_monitor):", "\n", "monitor_folder", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "monitoring_characteristics", ",", "dataset_name", ")", "\n", "#\tmonitor_folder += technique +sep+ 'class_'+str(class_to_monitor) +sep", "\n", "monitor_folder", "=", "os", ".", "path", ".", "join", "(", "monitor_folder", ",", "technique", ",", "'class_'", ")", "\n", "monitor", ".", "monitors_folder", "=", "monitor_folder", "\n", "\n", "if", "use_alternative_monitor", ":", "\n", "\t\t\t\t", "monitor", ".", "filename", "=", "'monitor_'", "+", "monitor_name", "+", "'.p_2'", "#built with true labels instead of right predictions", "\n", "", "else", ":", "\n", "\t\t\t\t", "monitor", ".", "filename", "=", "'monitor_'", "+", "monitor_name", "+", "'.p'", "\n", "\n", "#monitor_path = monitor.monitors_folder+monitor.filename", "\n", "# loading abstraction boxes", "\n", "#boxes[class_to_monitor] = pickle.load(open(monitor_path, \"rb\"))", "\n", "\n", "", "if", "'ensemble'", "in", "technique", ":", "\n", "\t\t\t\t", "monitor", ".", "method", "=", "abstraction_box", ".", "find_point_box_ensemble", "\n", "", "else", ":", "\n", "#monitor.method = abstraction_box.find_point", "\n", "\t\t\t\t", "monitor", ".", "method", "=", "abstraction_box", ".", "check_outside_of_box", "\n", "\n", "", "monitor", ".", "dim_reduc_method", "=", "None", "\n", "monitor", ".", "tau", "=", "tau", "\n", "monitor", ".", "use_scaler", "=", "use_scaler", "\n", "monitor", ".", "OOD_approach", "=", "OOD_approach", "\n", "monitors", ".", "append", "(", "monitor", ")", "\n", "\n", "", "elif", "'oob_isomap'", "==", "technique", "or", "'oob_pca'", "==", "technique", "or", "'oob_pca_isomap'", "==", "technique", ":", "\n", "\n", "\t\t\t", "arr_n_components", "=", "params", "[", "'arr_n_components'", "]", "\n", "\n", "for", "n_components", "in", "arr_n_components", ":", "\n", "\t\t\t\t", "boxes", "=", "{", "}", "\n", "dim_reduc_method", "=", "[", "]", "\n", "\n", "monitor_name", "=", "technique", "+", "'_{}_components_{}_clusters'", ".", "format", "(", "n_components", ",", "n_clusters_oob", ")", "\n", "reduc_name", "=", "technique", "+", "'_{}_components'", ".", "format", "(", "n_components", ")", "\n", "\n", "monitor", "=", "Monitor", "(", "monitor_name", ")", "\n", "monitor", ".", "n_clusters", "=", "n_clusters_oob", "\n", "\n", "#for class_to_monitor in range(classes_to_monitor):", "\n", "monitor_folder", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "monitoring_characteristics", ",", "dataset_name", ")", "\n", "#\tmonitor_folder += technique +sep+ 'class_'+str(class_to_monitor) +sep", "\n", "monitor_folder", "=", "os", ".", "path", ".", "join", "(", "monitor_folder", ",", "technique", ",", "'class_'", ")", "\n", "monitor", ".", "monitors_folder", "=", "monitor_folder", "\n", "\n", "if", "use_alternative_monitor", ":", "\n", "\t\t\t\t\t", "monitor", ".", "filename", "=", "'monitor_'", "+", "monitor_name", "+", "'.p_2'", "#built with true labels instead of right predictions", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "monitor", ".", "filename", "=", "'monitor_'", "+", "monitor_name", "+", "'.p'", "\n", "\n", "#\tdim_reduc_method[class_to_monitor] = pickle.load(open(monitor_folder+'trained_'+reduc_name+'.p', \"rb\"))", "\n", "\n", "# loading abstraction boxes", "\n", "#monitor_path = monitor.monitors_folder+monitor.filename", "\n", "#boxes[class_to_monitor] = pickle.load(open(monitor_path, \"rb\"))", "\n", "\n", "", "if", "'ensemble'", "in", "technique", ":", "\n", "\t\t\t\t\t", "monitor", ".", "method", "=", "abstraction_box", ".", "find_point_box_ensemble", "\n", "", "else", ":", "\n", "#monitor.method = abstraction_box.find_point", "\n", "\t\t\t\t\t", "monitor", ".", "method", "=", "abstraction_box", ".", "check_outside_of_box", "\n", "\n", "#monitor.dim_reduc_method = dim_reduc_method", "\n", "", "monitor", ".", "dim_reduc_method", "=", "reduc_name", "\n", "\n", "if", "'oob_pca_isomap'", "==", "technique", ":", "\n", "\t\t\t\t\t", "dim_reduc_method", ".", "append", "(", "'PCA_'", "+", "reduc_name", "+", "'.p'", ")", "\n", "dim_reduc_method", ".", "append", "(", "'Isomap_'", "+", "reduc_name", "+", "'.p'", ")", "\n", "monitor", ".", "dim_reduc_method", "=", "dim_reduc_method", "\n", "\n", "", "monitor", ".", "tau", "=", "tau", "\n", "monitor", ".", "use_scaler", "=", "use_scaler", "\n", "monitor", ".", "OOD_approach", "=", "OOD_approach", "\n", "monitors", ".", "append", "(", "monitor", ")", "\n", "\n", "", "", "elif", "''", "==", "technique", ":", "\n", "\t\t\t", "pass", "\n", "\n", "", "", "return", "np", ".", "array", "(", "monitors", ")", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.is_pred_diff": [[10, 18], ["loaded_monitor.predict"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["def", "is_pred_diff", "(", "yPred", ",", "intermediateValues", ",", "loaded_monitor", ")", ":", "\n", "    ", "yPred_by_monitor", "=", "loaded_monitor", ".", "predict", "(", "intermediateValues", ")", "\n", "#print(np.shape(yPred_by_monitor))", "\n", "\n", "if", "yPred_by_monitor", "==", "yPred", ":", "\n", "        ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.is_pred_neg": [[20, 28], ["loaded_monitor.predict"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["", "def", "is_pred_neg", "(", "yPred", ",", "intermediateValues", ",", "loaded_monitor", ")", ":", "\n", "    ", "yPred_by_monitor", "=", "loaded_monitor", ".", "predict", "(", "intermediateValues", ")", "\n", "#print(np.shape(yPred_by_monitor))", "\n", "\n", "if", "yPred_by_monitor", "==", "-", "1", ":", "\n", "        ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.safety_monitor_decision": [[30, 158], ["time.perf_counter", "numpy.reshape", "safety_approaches_2.is_pred_diff", "time.perf_counter", "src.utils.util.get_activ_func", "scaler.transform", "numpy.reshape", "safety_approaches_2.is_pred_neg", "readout.arr_detection_SM.append", "readout.arr_detection_true.append", "readout.arr_detection_SM.append", "readout.arr_detection_true.append", "readout.arr_detection_SM.append", "readout.arr_detection_true.append", "readout.arr_detection_SM.append", "readout.arr_detection_true.append", "monitor.method", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "readout.arr_reaction_SM.append", "readout.arr_reaction_true.append", "loaded_monitor.detection", "numpy.shape", "os.path.join", "monitor.method.adversarial_model.load_weights", "monitor.method.adversarial_model.predict", "img.reshape", "model_predicts[].reshape", "keras.variable", "keras.variable", "keras.eval().mean", "keras.eval", "keras.losses.binary_crossentropy"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.is_pred_diff", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.is_pred_neg", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.detection", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["", "def", "safety_monitor_decision", "(", "readout", ",", "monitor", ",", "model", ",", "img", ",", "yPred", ",", "lbl", ",", "experiment", ",", "use_intermediateValues", ",", "\n", "scaler", ",", "loaded_monitor", ")", ":", "\n", "\n", "    ", "classes_to_monitor", "=", "experiment", ".", "classes_to_monitor_ID", "\n", "raise_alarm", "=", "False", "\n", "\n", "ini", "=", "timer", "(", ")", "# SM time", "\n", "\n", "if", "use_intermediateValues", "==", "True", ":", "\n", "        ", "intermediateValues", "=", "util", ".", "get_activ_func", "(", "experiment", ".", "backend", ",", "model", ",", "img", ",", "monitor", ".", "layer_index", ")", "[", "0", "]", "\n", "# if you want to scale act func values", "\n", "if", "scaler", "!=", "None", ":", "\n", "            ", "intermediateValues", "=", "scaler", ".", "transform", "(", "intermediateValues", ")", "\n", "\n", "", "", "if", "monitor", ".", "OOD_approach", "==", "'equality'", ":", "\n", "# if monitor acceptance approach is based on two equal predictions", "\n", "        ", "intermediateValues", "=", "np", ".", "reshape", "(", "intermediateValues", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "raise_alarm", "=", "is_pred_diff", "(", "yPred", ",", "intermediateValues", ",", "loaded_monitor", ")", "\n", "\n", "", "elif", "monitor", ".", "OOD_approach", "==", "'outlier'", ":", "\n", "# if monitor acceptance approach is based on instance classified as outlier \"-1\"", "\n", "        ", "intermediateValues", "=", "np", ".", "reshape", "(", "intermediateValues", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "raise_alarm", "=", "is_pred_neg", "(", "yPred", ",", "intermediateValues", ",", "loaded_monitor", ")", "\n", "\n", "", "elif", "monitor", ".", "OOD_approach", "==", "'outside_of_box'", ":", "\n", "        ", "raise_alarm", "=", "monitor", ".", "method", "(", "loaded_monitor", "[", "yPred", "]", ",", "intermediateValues", ",", "yPred", ",", "monitor", ")", "\n", "\n", "", "elif", "monitor", ".", "OOD_approach", "==", "'temperature'", ":", "\n", "# keras version", "\n", "#raise_alarm = loaded_monitor.detection(model, img, yPred, monitor.noiseMagnitude, monitor.temper, monitor.threshold)", "\n", "# pytorch version", "\n", "        ", "raise_alarm", "=", "loaded_monitor", ".", "detection", "(", "model", ",", "img", ",", "monitor", ".", "temper", ",", "monitor", ".", "noiseMagnitude", ",", "monitor", ".", "threshold", ",", "'cuda:0'", ")", "\n", "\n", "", "elif", "monitor", ".", "OOD_approach", "==", "'adversarial'", ":", "\n", "        ", "input_shape", "=", "np", ".", "shape", "(", "img", ")", "#(32, 32, 3)", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "monitor", ".", "monitors_folder", ",", "'class_{}'", ".", "format", "(", "yPred", ")", ",", "'ALOCC_Model_{}.h5'", ".", "format", "(", "monitor", ".", "model_number", ")", ")", "\n", "\n", "monitor", ".", "method", ".", "adversarial_model", ".", "load_weights", "(", "path", ")", "\n", "\n", "#model_predicts = monitor.method.adversarial_model.predict(np.asarray([img]))", "\n", "model_predicts", "=", "monitor", ".", "method", ".", "adversarial_model", ".", "predict", "(", "img", ")", "\n", "\n", "input_image", "=", "img", ".", "reshape", "(", "input_shape", ")", "\n", "reconstructed_image", "=", "model_predicts", "[", "0", "]", ".", "reshape", "(", "input_shape", ")", "\n", "\n", "y_true", "=", "K", ".", "variable", "(", "reconstructed_image", ")", "\n", "y_pred", "=", "K", ".", "variable", "(", "input_image", ")", "\n", "error", "=", "K", ".", "eval", "(", "binary_crossentropy", "(", "y_true", ",", "y_pred", ")", ")", ".", "mean", "(", ")", "\n", "\n", "if", "monitor", ".", "threshold", "[", "yPred", "]", "<", "error", ":", "\n", "            ", "raise_alarm", "=", "True", "\n", "\n", "# ID images (OOD label numbers higher than the ID label numbers)", "\n", "", "", "if", "lbl", "<", "classes_to_monitor", ":", "\n", "\n", "# An ID image arrives in the stream, the SM raises the alarm and dismiss the ML classification", "\n", "        ", "if", "raise_alarm", ":", "\n", "# false positive for OOD", "\n", "            ", "readout", ".", "arr_detection_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_detection_true", ".", "append", "(", "0", ")", "\n", "\n", "if", "yPred", "!=", "lbl", ":", "\n", "# correct reaction (avoided a misclassification of ID data.)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "1", ")", "\n", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "# incorrect reaction (intervention with no necessity)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "0", ")", "\n", "\n", "# An ID image arrives in the stream, the SM does not raise the alarm, accepting the ML classification", "\n", "", "", "else", ":", "\n", "# True negative for OOD", "\n", "            ", "readout", ".", "arr_detection_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_detection_true", ".", "append", "(", "0", ")", "\n", "\n", "if", "yPred", "!=", "lbl", ":", "\n", "# incorrect reaction (it should intervene)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "1", ")", "\n", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "# correct reaction (it correctly did not intervene)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "0", ")", "\n", "\n", "# OOD images", "\n", "", "", "", "else", ":", "\n", "# getting the original OOD labels before the transformation (except for novelty detection datasets)", "\n", "        ", "original_lbl", "=", "lbl", "-", "classes_to_monitor", "\n", "\n", "# An OOD image arrives in the stream, the SM raises the alarm and dismiss the ML classification", "\n", "if", "raise_alarm", ":", "\n", "# True positive for OOD", "\n", "            ", "readout", ".", "arr_detection_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_detection_true", ".", "append", "(", "1", ")", "\n", "\n", "if", "yPred", "!=", "original_lbl", ":", "\n", "# correct reaction (avoided a misclassification of OOD data.) ", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "1", ")", "\n", "\n", "", "if", "yPred", "==", "original_lbl", ":", "\n", "# incorrect reaction (intervention with no necessity)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "1", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "0", ")", "\n", "\n", "# An OOD image arrives in the stream, the SM does not raise the alarm, accepting the ML classification", "\n", "", "", "else", ":", "\n", "# False negative for OOD", "\n", "            ", "readout", ".", "arr_detection_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_detection_true", ".", "append", "(", "1", ")", "\n", "\n", "if", "yPred", "!=", "original_lbl", ":", "\n", "# incorrect reaction (it should intervene)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "1", ")", "\n", "\n", "", "if", "yPred", "==", "original_lbl", ":", "\n", "# correct reaction (it correctly did not intervene)", "\n", "                ", "readout", ".", "arr_reaction_SM", ".", "append", "(", "0", ")", "\n", "readout", ".", "arr_reaction_true", ".", "append", "(", "0", ")", "\n", "\n", "", "", "", "time_spent", "=", "timer", "(", ")", "-", "ini", "\n", "\n", "return", "readout", ",", "time_spent", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_abstraction_based_monitor": [[16, 26], ["src.Classes.monitor.Monitor"], "function", ["None"], ["def", "build_abstraction_based_monitor", "(", "class_to_monitor", ",", "monitor_name", ",", "n_clusters_oob", ",", "monitor_folder", ")", ":", "\n", "\t", "monitor", "=", "Monitor", "(", "monitor_name", ")", "\n", "monitor", ".", "class_to_monitor", "=", "class_to_monitor", "\n", "monitor", ".", "trainer", "=", "act_func_based_monitor", "\n", "monitor", ".", "method", "=", "abstraction_box", ".", "make_abstraction", "\n", "monitor", ".", "filename", "=", "'monitor_'", "+", "monitor_name", "+", "'.p'", "\n", "monitor", ".", "n_clusters", "=", "n_clusters_oob", "\n", "monitor", ".", "monitors_folder", "=", "monitor_folder", "\n", "\n", "return", "monitor", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_gradient_based_monitor": [[28, 38], ["src.Classes.monitor.Monitor"], "function", ["None"], ["", "def", "build_gradient_based_monitor", "(", "class_to_monitor", ",", "monitor_name", ",", "n_clusters_oob", ",", "monitor_folder", ")", ":", "\n", "\t", "monitor", "=", "Monitor", "(", "monitor_name", ")", "\n", "monitor", ".", "class_to_monitor", "=", "class_to_monitor", "\n", "monitor", ".", "trainer", "=", "act_func_gradient_based_monitor", "\n", "monitor", ".", "method", "=", "abstraction_box", ".", "make_abstraction", "\n", "monitor", ".", "filename", "=", "'monitor_'", "+", "monitor_name", "+", "'.p'", "\n", "monitor", ".", "n_clusters", "=", "n_clusters_oob", "\n", "monitor", ".", "monitors_folder", "=", "monitor_folder", "\n", "\n", "return", "monitor", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_classifier_based_monitor": [[40, 48], ["src.Classes.monitor.Monitor", "src.threats.novelty_detection.methods.clustered_act_function_monitor"], "function", ["None"], ["", "def", "build_classifier_based_monitor", "(", "technique", ",", "trainer", ",", "monitor_name", ",", "monitor_folder", ")", ":", "\n", "\t", "monitor", "=", "Monitor", "(", "monitor_name", ")", "\n", "monitor", ".", "trainer", "=", "trainer", "\n", "monitor", ".", "method", "=", "technique", "\n", "monitor", ".", "filename", "=", "'monitor_'", "+", "monitor_name", "+", "'.p'", "\n", "monitor", ".", "monitors_folder", "=", "monitor_folder", "\n", "\n", "return", "monitor", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_ODIN_based_monitor": [[50, 60], ["src.Classes.monitor.Monitor"], "function", ["None"], ["", "def", "build_ODIN_based_monitor", "(", "technique", ",", "trainer", ",", "PARAMS", ",", "monitor_folder", ")", ":", "\n", "\t", "monitor", "=", "Monitor", "(", "technique", ")", "\n", "monitor", ".", "trainer", "=", "trainer", "\n", "monitor", ".", "method", "=", "technique", "\n", "monitor", ".", "filename", "=", "'monitor_'", "+", "technique", "+", "'.p'", "\n", "monitor", ".", "monitors_folder", "=", "monitor_folder", "\n", "monitor", ".", "magnitude", "=", "PARAMS", "[", "'magnitude'", "]", "\n", "monitor", ".", "temperature", "=", "PARAMS", "[", "'temperature'", "]", "\n", "\n", "return", "monitor", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.prepare_monitors": [[62, 83], ["monitors.append", "create_monitors.build_ODIN_based_monitor", "create_monitors.build_classifier_based_monitor"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_ODIN_based_monitor", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_classifier_based_monitor"], ["", "def", "prepare_monitors", "(", "technique", ",", "trainer", ",", "monitor_folder", ",", "dataset_name", ",", "PARAMS", ")", ":", "\n", "\t", "monitors", "=", "[", "]", "\n", "\n", "use_grid_search", "=", "PARAMS", "[", "'use_grid_search'", "]", "\n", "monitor_name", "=", "technique", "+", "'_not_optimized'", "\n", "\n", "if", "use_grid_search", ":", "\n", "\t\t", "monitor_name", "=", "technique", "+", "'_optimized'", "\n", "\n", "", "if", "technique", "==", "'odin'", ":", "\n", "\t\t", "monitor", "=", "build_ODIN_based_monitor", "(", "technique", ",", "trainer", ",", "PARAMS", ",", "monitor_folder", ")", "\n", "", "else", ":", "\n", "\t\t", "monitor", "=", "build_classifier_based_monitor", "(", "technique", ",", "trainer", ",", "monitor_name", ",", "monitor_folder", ")", "\n", "\n", "", "monitor", ".", "use_grid_search", "=", "use_grid_search", "\n", "monitor", ".", "use_alternative_monitor", "=", "PARAMS", "[", "'use_alternative_monitor'", "]", "\n", "monitor", ".", "use_scaler", "=", "PARAMS", "[", "'use_scaler'", "]", "\n", "\n", "monitors", ".", "append", "(", "monitor", ")", "\n", "\n", "return", "monitors", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.prepare_cluster_based_monitors": [[85, 100], ["create_monitors.build_classifier_based_monitor", "monitors.append"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_classifier_based_monitor"], ["", "def", "prepare_cluster_based_monitors", "(", "technique", ",", "monitor_folder", ",", "dataset_name", ",", "PARAMS", ")", ":", "\n", "\t", "monitors", "=", "[", "]", "\n", "if", "technique", "==", "'knn'", ":", "\n", "\t\t", "arr_n_clusters", "=", "PARAMS", "[", "'arr_n_clusters'", "]", "\n", "for", "n_clusters", "in", "arr_n_clusters", ":", "\n", "\t\t\t", "monitor_name", "=", "technique", "+", "'_{}_clusters'", ".", "format", "(", "n_clusters", ")", "\n", "monitor", "=", "build_classifier_based_monitor", "(", "technique", ",", "clustered_act_function_monitor", ",", "monitor_name", ",", "monitor_folder", ")", "\n", "monitor", ".", "n_clusters", "=", "n_clusters", "\n", "\n", "monitor", ".", "use_alternative_monitor", "=", "PARAMS", "[", "'use_alternative_monitor'", "]", "\n", "monitor", ".", "use_scaler", "=", "PARAMS", "[", "'use_scaler'", "]", "\n", "\n", "monitors", ".", "append", "(", "monitor", ")", "\n", "\n", "", "", "return", "monitors", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.prepare_box_based_monitors": [[102, 154], ["os.path.join", "print", "create_monitors.build_abstraction_based_monitor", "create_monitors.build_gradient_based_monitor", "create_monitors.build_abstraction_based_monitor", "sklearn.manifold.Isomap", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.append", "dim_reduc_filename_prefix.append", "sklearn.decomposition.PCA.append", "dim_reduc_filename_prefix.append", "sklearn.decomposition.PCA", "sklearn.manifold.Isomap"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_abstraction_based_monitor", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_gradient_based_monitor", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_abstraction_based_monitor"], ["", "def", "prepare_box_based_monitors", "(", "root_path", ",", "dataset_name", ",", "technique", ",", "n_clusters_oob", ",", "n_components", ",", "class_to_monitor", ")", ":", "\n", "\t", "monitoring_characteristics", "=", "'dnn_internals'", "\n", "#monitors = []", "\n", "c", "=", "'{}'", ".", "format", "(", "class_to_monitor", ")", "\n", "\n", "monitor_folder", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "monitoring_characteristics", ",", "dataset_name", ",", "technique", ",", "'class_'", "+", "c", ")", "\n", "print", "(", "'creating monitor {} for class {}'", ".", "format", "(", "technique", ",", "c", ")", ")", "\n", "\n", "if", "'oob'", "==", "technique", ":", "\n", "\t\t", "monitor_name", "=", "technique", "+", "'_{}_clusters'", ".", "format", "(", "n_clusters_oob", ")", "\n", "\n", "monitor", "=", "build_abstraction_based_monitor", "(", "class_to_monitor", ",", "monitor_name", ",", "n_clusters_oob", ",", "monitor_folder", ")", "\n", "\n", "#monitors.append(monitor)", "\n", "return", "monitor", "\n", "\n", "", "elif", "'oob_gradient'", "==", "technique", ":", "\n", "\t\t", "monitor_name", "=", "technique", "+", "'_{}_clusters'", ".", "format", "(", "n_clusters_oob", ")", "\n", "\n", "monitor", "=", "build_gradient_based_monitor", "(", "class_to_monitor", ",", "monitor_name", ",", "n_clusters_oob", ",", "monitor_folder", ")", "\n", "\n", "#monitors.append(monitor)", "\n", "return", "monitor", "\n", "\n", "", "elif", "'oob_isomap'", "==", "technique", "or", "'oob_pca'", "==", "technique", "or", "'oob_pca_isomap'", "==", "technique", ":", "\n", "\n", "\t\t", "dim_reduc_method", "=", "[", "]", "\n", "dim_reduc_filename_prefix", "=", "[", "]", "\n", "\n", "monitor_name", "=", "technique", "+", "'_{}_components_{}_clusters'", ".", "format", "(", "n_components", ",", "n_clusters_oob", ")", "\n", "reduc_name", "=", "technique", "+", "'_{}_components'", ".", "format", "(", "n_components", ")", "\n", "\n", "if", "'oob_isomap'", "==", "technique", ":", "\n", "\t\t\t", "dim_reduc_method", "=", "Isomap", "(", "n_components", "=", "n_components", ")", "\n", "dim_reduc_filename_prefix", "=", "'trained_'", "+", "reduc_name", "+", "'.p'", "\n", "", "elif", "'oob_pca'", "==", "technique", ":", "\n", "\t\t\t", "dim_reduc_method", "=", "PCA", "(", "n_components", "=", "n_components", ")", "\n", "dim_reduc_filename_prefix", "=", "'trained_'", "+", "reduc_name", "+", "'.p'", "\n", "", "elif", "'oob_pca_isomap'", "==", "technique", ":", "\n", "\t\t\t", "dim_reduc_method", ".", "append", "(", "PCA", "(", "n_components", "=", "20", ")", ")", "#good range value for image datasets: (20-40)", "\n", "dim_reduc_filename_prefix", ".", "append", "(", "'trained_PCA_'", "+", "reduc_name", "+", "'.p'", ")", "\n", "dim_reduc_method", ".", "append", "(", "Isomap", "(", "n_components", "=", "n_components", ")", ")", "\n", "dim_reduc_filename_prefix", ".", "append", "(", "'trained_Isomap_'", "+", "reduc_name", "+", "'.p'", ")", "\n", "\n", "", "monitor", "=", "build_abstraction_based_monitor", "(", "class_to_monitor", ",", "monitor_name", ",", "n_clusters_oob", ",", "monitor_folder", ")", "\n", "monitor", ".", "n_components", "=", "n_components", "\n", "monitor", ".", "dim_reduc_filename_prefix", "=", "dim_reduc_filename_prefix", "\n", "monitor", ".", "technique", "=", "technique", "\n", "monitor", ".", "dim_reduc_method", "=", "dim_reduc_method", "\n", "\n", "#monitors.append(monitor)", "\n", "return", "monitor", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_monitors": [[158, 183], ["os.path.join", "create_monitors.prepare_monitors", "arr_monitors.extend"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.prepare_monitors"], ["", "", "def", "build_monitors", "(", "root_path", ",", "dataset_name", ",", "params", ")", ":", "\n", "\t", "monitoring_characteristics", "=", "'dnn_internals'", "\n", "arr_monitors", "=", "[", "]", "\n", "technique_names", "=", "params", "[", "'technique_names'", "]", "\n", "\n", "for", "technique", "in", "technique_names", ":", "\n", "\t\t", "trainer", "=", "None", "\n", "monitor_folder", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "monitoring_characteristics", ",", "dataset_name", ",", "technique", ")", "\n", "#monitor_folder += technique +sep", "\n", "\n", "if", "technique", "==", "'knn'", ":", "\n", "\t\t\t", "trainer", "=", "clustered_act_function_monitor", "\n", "", "elif", "technique", "==", "'random_forest'", ":", "\n", "\t\t\t", "trainer", "=", "tree_based_act_function_monitor", "\n", "", "elif", "technique", "==", "'sgd'", ":", "\n", "\t\t\t", "trainer", "=", "linear_based_act_function_monitor", "\n", "", "elif", "technique", "==", "'ocsvm'", ":", "\n", "\t\t\t", "trainer", "=", "ocsvm_based_act_function_monitor", "\n", "", "elif", "technique", "==", "'odin'", ":", "\n", "\t\t\t", "trainer", "=", "threshold_finder", "\n", "\n", "", "monitors", "=", "prepare_monitors", "(", "technique", ",", "trainer", ",", "monitor_folder", ",", "dataset_name", ",", "params", ")", "\n", "\n", "arr_monitors", ".", "extend", "(", "monitors", ")", "\n", "", "return", "arr_monitors", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.config.glue_dataset_names": [[14, 24], ["data.update", "data[].append"], "function", ["None"], ["def", "glue_dataset_names", "(", "datasets", ",", "modifications", ")", ":", "\n", "\t", "data", "=", "{", "}", "\n", "\n", "for", "d", "in", "datasets", ":", "\n", "\t\t", "data", ".", "update", "(", "{", "d", ":", "[", "]", "}", ")", "\n", "\n", "for", "m", "in", "modifications", ":", "\n", "\t\t\t", "data", "[", "d", "]", ".", "append", "(", "'{}_{}'", ".", "format", "(", "m", "[", "0", "]", ",", "m", "[", "1", "]", ")", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.config.get_technique_params": [[26, 67], ["PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["", "def", "get_technique_params", "(", "technique", ")", ":", "\n", "# Default", "\n", "\t", "PARAMS", "=", "{", "'use_alternative_monitor'", ":", "False", "}", "# True = label -> act func; False = label -> act func if label == predicted", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "False", "}", ")", "\n", "\n", "if", "'sgd'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'random_forest'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'ocsvm'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'outlier'", "}", ")", "\n", "\n", "", "elif", "'oob'", "in", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "[", "3", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'arr_n_components'", ":", "[", "2", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'tau'", ":", "[", "0.01", "]", "}", ")", "# 0.0001, 0.01, 0.35", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'outside_of_box'", "}", ")", "\n", "\n", "", "elif", "'knn'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "[", "2", "]", "}", ")", "#, 3, 5, 10", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'hdbscan'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'min_samples'", ":", "[", "5", ",", "10", ",", "15", "]", "}", ")", "#min_samples 5, 10, 15", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'odin'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'noiseMagnitude'", ":", "0.0025", "}", ")", "# gtsrb = 0.0025; cifar-10 = 0.0014", "\n", "PARAMS", ".", "update", "(", "{", "'temper'", ":", "1000", "}", ")", "\n", "# it is the rouding value of the min confidence threshold rounded in 4 decimals (0.10069 = 0.1007) ", "\n", "PARAMS", ".", "update", "(", "{", "'threshold'", ":", "0.0237", "}", ")", "# gtsrb = 0.0237; cifar-10 = 0.1007", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'temperature'", "}", ")", "\n", "\n", "", "return", "PARAMS", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.config.get_experiment_params": [[69, 197], ["os.path.join", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["", "def", "get_experiment_params", "(", "setting_id", ")", ":", "\n", "\t", "'''\n\t-- id_dataset_name:\n\t'MNIST', 'GTSRB', 'BTSC', 'CIFAR-10'\n\n\t-- num_classes_to_monitor_ID:\n\t10, 43, 62, 10\n\t\n\t-- ood_dataset_name:\n\t'BTSC', 'GTSRB', 'CIFAR-10'\n\n\t-- num_classes_to_monitor_OOD:\n\t62, 43, 10\n\t\n\t-- modifications:\n\t('gtsrb', 'btsc'), ('cifar10', 'gtsrb'), ('gtsrb', 'cifar10')\n\t\n\t-- backend:\n\tkeras = gtsrb, mnist; tensorflow = cifar10; pytorch = odin\n\t\n\t-- model_names:\n\t'leNet', 'vgg16'\n\n\t-- technique_names: \n\t'baseline', 'knn', 'ocsvm', 'random_forest', 'sgd', 'hdbscan', \n\t\t'oob', 'oob_isomap', 'oob_pca', 'oob_pca_isomap', odin\n\t'''", "\n", "\n", "PARAMS", "=", "{", "}", "\n", "\n", "# directory of datasets", "\n", "#root_dir = os.path.join('D:','\\\\backup_desktop_14-10-2020','GITHUB', 'phd_data_generation', 'data', 'modified')", "\n", "root_dir", "=", "os", ".", "path", ".", "join", "(", "'C:'", ",", "'\\\\Users'", ",", "'rsenaferre'", ",", "'Desktop'", ",", "'GITHUB'", ",", "'phd_data_generation'", ",", "'data'", ",", "'benchmark_dataset'", ")", "\n", "PARAMS", ".", "update", "(", "{", "'root_dir'", ":", "root_dir", "}", ")", "\n", "\n", "if", "setting_id", "==", "1", ":", "\n", "# distributional shift (OOB) = GTSRB ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'GTSRB'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "43", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'GTSRB'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "43", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'keras'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "'leNet'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'oob'", ",", "'oob_isomap'", ",", "'oob_pca'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "2", ":", "\n", "# distributional shift (OOB) = CIFAR-10 ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'CIFAR-10'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "10", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'CIFAR-10'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "10", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'tensorflow'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'oob'", ",", "'oob_isomap'", ",", "'oob_pca'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "3", ":", "\n", "# distributional shift (ODIN) = GTSRB ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'GTSRB'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "43", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'GTSRB'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "43", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'pytorch'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "'leNet'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'odin'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "4", ":", "\n", "# distributional shift (ODIN) = CIFAR-10 ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'CIFAR-10'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "10", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'CIFAR-10'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "10", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'pytorch'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'odin'", "]", "}", ")", "\n", "\n", "", "return", "PARAMS", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.config.get_monitor_params": [[201, 238], ["PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["", "def", "get_monitor_params", "(", "setting_id", ")", ":", "\n", "\n", "\t", "PARAMS", "=", "{", "}", "\n", "\n", "if", "setting_id", "==", "1", ":", "\n", "#for oob variations", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'is_build_monitors_by_class'", ":", "True", "}", ")", "#True just for OOB-based monitors", "\n", "PARAMS", ".", "update", "(", "{", "'arr_n_components'", ":", "2", "}", ")", "# 2, 3, 5, 10", "\n", "#for oob variations and knn", "\n", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "3", "}", ")", "# 2, 3, 5, 10", "\n", "#for ocsvm", "\n", "PARAMS", ".", "update", "(", "{", "'min_samples'", ":", "[", "5", ",", "10", ",", "15", "]", "}", ")", "\n", "#for random forest and linear classifiers", "\n", "PARAMS", ".", "update", "(", "{", "'use_grid_search'", ":", "False", "}", ")", "\n", "#for knn and sgd classifiers", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "#all methods", "\n", "PARAMS", ".", "update", "(", "{", "'use_alternative_monitor'", ":", "False", "}", ")", "# True = label -> act func -> save in the monitor; False = label -> act func if label == predicted -> save in the monitor", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'oob'", ",", "'oob_isomap'", ",", "'oob_pca'", "]", "}", ")", "#'baseline', 'knn', 'random_forest', 'sgd', 'ocsvm', 'oob', 'oob_isomap', 'oob_pca', 'oob_pca_isomap'", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'keras'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "# 'leNet', 'vgg16', 'resnet' ", "\n", "\n", "", "elif", "setting_id", "==", "2", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'is_build_monitors_by_class'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'threshold'", ":", "None", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'use_grid_search'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'magnitude'", ":", "[", "0.0014", ",", "0.0025", ",", "0.005", ",", "0.01", ",", "0.02", ",", "0.04", ",", "0.08", "]", "}", ")", "# based on paper 'generalized odin'", "\n", "PARAMS", ".", "update", "(", "{", "'temperature'", ":", "1000", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'use_alternative_monitor'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'odin'", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'pytorch'", "}", ")", "# for ODIN, using pytorch for now", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'use_gpu'", ":", "True", "}", ")", "\n", "\n", "", "return", "PARAMS", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.config.get_data_params": [[241, 252], ["os.path.join", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["", "def", "get_data_params", "(", "setting_id", ")", ":", "\n", "\t", "PARAMS", "=", "{", "}", "\n", "# directory of datasets", "\n", "#root_dir = os.path.join('D:','\\\\backup_desktop_14-10-2020','GITHUB', 'phd_data_generation', 'data', 'modified')", "\n", "root_dir", "=", "os", ".", "path", ".", "join", "(", "'C:'", ",", "'\\\\Users'", ",", "'rsenaferre'", ",", "'Desktop'", ",", "'GITHUB'", ",", "'phd_data_generation'", ",", "'data'", ",", "'training_set'", ")", "\n", "PARAMS", ".", "update", "(", "{", "'dataset_folder'", ":", "root_dir", "}", ")", "\n", "#PARAMS.update({'dataset_names': ['GTSRB']}) # 'MNIST', 'GTSRB', 'CIFAR-10'", "\n", "#PARAMS.update({'num_classes_to_monitor': [43]}) # 10, 43", "\n", "PARAMS", ".", "update", "(", "{", "'validation_size'", ":", "0.3", "}", ")", "\n", "\n", "return", "PARAMS", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.dnn_oob_tester.run": [[9, 57], ["int", "str", "keras.models.load_model", "pickle.load", "psutil.Process", "zip", "open", "pickle.load", "os.getpid", "numpy.asarray", "numpy.argmax", "arrPred.append", "len", "open", "keras.models.load_model.predict", "src.utils.util.get_activ_func", "monitor.method", "psutil.Process.memory_info"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["def", "run", "(", "X_test", ",", "y_test", ",", "model_build", ",", "monitor", ")", ":", "\n", "    ", "arrPred", "=", "[", "]", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "classToMonitor", "=", "str", "(", "monitor", ".", "classToMonitor", ")", "\n", "arrFalseNegative", "=", "{", "classToMonitor", ":", "0", "}", "\n", "arrTrueNegative", "=", "{", "classToMonitor", ":", "0", "}", "\n", "arrFalsePositive", "=", "{", "classToMonitor", ":", "0", "}", "\n", "arrTruePositive", "=", "{", "classToMonitor", ":", "0", "}", "\n", "\n", "# loading model and abstraction boxes", "\n", "model", "=", "load_model", "(", "model_build", ".", "models_folder", "+", "model_build", ".", "model_name", ")", "\n", "boxes", "=", "pickle", ".", "load", "(", "open", "(", "monitor", ".", "monitors_folder", "+", "monitor", ".", "monitor_name", ",", "\"rb\"", ")", ")", "\n", "dim_reduc_obj", "=", "None", "\n", "\n", "if", "monitor", ".", "dim_reduc_method", "!=", "None", ":", "\n", "        ", "dim_reduc_obj", "=", "pickle", ".", "load", "(", "open", "(", "monitor", ".", "monitors_folder", "+", "monitor", ".", "dim_reduc_method", ",", "\"rb\"", ")", ")", "\n", "#memory", "\n", "", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "#counter, loading_percentage = util.loading_info(counter, loaded, loading_percentage) #log", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "arrPred", ".", "append", "(", "yPred", ")", "\n", "intermediateValues", "=", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "monitor", ".", "layer_index", ")", "[", "0", "]", "\n", "\n", "if", "yPred", "==", "monitor", ".", "classToMonitor", ":", "\n", "            ", "if", "monitor", ".", "method", "(", "boxes", ",", "intermediateValues", ",", "yPred", ",", "dim_reduc_obj", ")", ":", "\n", "\n", "                ", "if", "yPred", "!=", "lab", ":", "\n", "                    ", "arrFalseNegative", "[", "classToMonitor", "]", "+=", "1", "#False negative           ", "\n", "", "if", "yPred", "==", "lab", ":", "\n", "                    ", "arrTrueNegative", "[", "classToMonitor", "]", "+=", "1", "#True negatives", "\n", "", "", "else", ":", "\n", "                ", "if", "yPred", "!=", "lab", ":", "\n", "                    ", "arrTruePositive", "[", "classToMonitor", "]", "+=", "1", "#True positives", "\n", "", "if", "yPred", "==", "lab", ":", "\n", "                    ", "arrFalsePositive", "[", "classToMonitor", "]", "+=", "1", "#False positives", "\n", "\n", "#elif lab==classToMonitor and yPred != classToMonitor:", "\n", "#print(\"missclassification --- new pattern for class\",yPred, str(lab))", "\n", "", "", "", "", "memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "return", "arrPred", ",", "y_test", ",", "memory", ",", "arrFalsePositive", ",", "arrFalseNegative", ",", "arrTruePositive", ",", "arrTrueNegative", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.dnn_oob_evaluator.evaluate": [[6, 48], ["zip", "range", "avg_acc.append", "avg_time.append", "avg_memory.append", "avg_F1.append", "avg_cf.append", "print", "dataset.load_dataset", "time.perf_counter", "model.exec.run", "time.perf_counter", "acc.append", "t.append", "mem.append", "f1.append", "str", "cf[].append", "cf[].append", "cf[].append", "cf[].append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "src.utils.metrics.evaluate", "src.utils.metrics.F1", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.dataset.Dataset.load_dataset", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.F1"], ["def", "evaluate", "(", "repetitions", ",", "experiment_acronym", ",", "modelsObj", ",", "datasetObjs", ",", "monitorsObj", ")", ":", "\n", "\t", "avg_acc", "=", "[", "experiment_acronym", "]", "#accuracy", "\n", "avg_cf", "=", "[", "experiment_acronym", "]", "#confusion matrix", "\n", "avg_time", "=", "[", "experiment_acronym", "]", "#time", "\n", "avg_memory", "=", "[", "experiment_acronym", "]", "#memory", "\n", "avg_F1", "=", "[", "experiment_acronym", "]", "#memory", "\n", "\n", "for", "dataset", ",", "model", ",", "monitor", "in", "zip", "(", "datasetObjs", ",", "modelsObj", ",", "monitorsObj", ")", ":", "\n", "\t\t", "acc", "=", "[", "]", "\n", "t", "=", "[", "]", "\n", "cf", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "mem", "=", "[", "]", "\n", "f1", "=", "[", "]", "\n", "datasets", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "\t\t\t", "print", "(", "\"{} experiment {} of {} ...\"", ".", "format", "(", "dataset", ".", "dataset_name", ",", "i", "+", "1", ",", "repetitions", ")", ")", "\n", "X_test", ",", "y_test", "=", "dataset", ".", "load_dataset", "(", "mode", "=", "'test'", ")", "\n", "\n", "ini", "=", "timer", "(", ")", "\n", "arrPred", ",", "arrLabel", ",", "memory", ",", "arrFP", ",", "arrFN", ",", "arrTP", ",", "arrTN", "=", "model", ".", "exec", ".", "run", "(", "\n", "X_test", ",", "y_test", ",", "model", ",", "monitor", ")", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "acc", ".", "append", "(", "metrics", ".", "evaluate", "(", "arrLabel", ",", "arrPred", ")", ")", "\n", "t", ".", "append", "(", "end", "-", "ini", ")", "\n", "mem", ".", "append", "(", "memory", ")", "\n", "f1", ".", "append", "(", "metrics", ".", "F1", "(", "arrLabel", ",", "arrPred", ")", ")", "\n", "\n", "classToMonitor", "=", "str", "(", "monitor", ".", "classToMonitor", ")", "\n", "cf", "[", "0", "]", ".", "append", "(", "arrFP", "[", "classToMonitor", "]", ")", "\n", "cf", "[", "1", "]", ".", "append", "(", "arrFN", "[", "classToMonitor", "]", ")", "\n", "cf", "[", "2", "]", ".", "append", "(", "arrTP", "[", "classToMonitor", "]", ")", "\n", "cf", "[", "3", "]", ".", "append", "(", "arrTN", "[", "classToMonitor", "]", ")", "\n", "\n", "", "avg_acc", ".", "append", "(", "np", ".", "mean", "(", "acc", ")", ")", "\n", "avg_time", ".", "append", "(", "np", ".", "mean", "(", "t", ")", ")", "\n", "avg_memory", ".", "append", "(", "np", ".", "mean", "(", "mem", ")", ")", "\n", "avg_F1", ".", "append", "(", "np", ".", "mean", "(", "f1", ")", ")", "\n", "avg_cf", ".", "append", "(", "[", "np", ".", "mean", "(", "cf", "[", "0", "]", ")", ",", "np", ".", "mean", "(", "cf", "[", "1", "]", ")", ",", "np", ".", "mean", "(", "cf", "[", "2", "]", ")", ",", "np", ".", "mean", "(", "cf", "[", "3", "]", ")", "]", ")", "\n", "\n", "", "return", "avg_acc", ",", "avg_time", ",", "avg_cf", ",", "avg_memory", ",", "avg_F1", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.run_DF_experiments.set_tf_loglevel": [[27, 37], ["logging.getLogger().setLevel", "logging.getLogger"], "function", ["None"], ["def", "set_tf_loglevel", "(", "level", ")", ":", "\n", "\t", "if", "level", ">=", "logging", ".", "FATAL", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'3'", "\n", "", "if", "level", ">=", "logging", ".", "ERROR", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'2'", "\n", "", "if", "level", ">=", "logging", ".", "WARNING", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'1'", "\n", "", "else", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'0'", "\n", "", "logging", ".", "getLogger", "(", "'tensorflow'", ")", ".", "setLevel", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.run_DF_experiments.start": [[54, 171], ["run_DF_experiments.set_tf_loglevel", "numpy.array", "src.neptune_config.neptune_init", "src.Classes.dataset.Dataset", "os.path.join", "src.Classes.dataset.Dataset.load_dataset", "int", "int", "os.path.join", "src.Classes.model_builder.ModelBuilder", "keras.models.load_model", "src.threats.novelty_detection.config.get_technique_params", "src.Classes.experiment.Experiment", "src.Classes.experiment.Experiment.evaluator.evaluate", "len", "len", "src.Classes.model_builder.ModelBuilder", "load_model", "src.threats.novelty_detection.utils.load_monitors.load_cluster_based_monitors", "src.Classes.model_builder.ModelBuilder", "pytorch_classifiers.DNN.load_state_dict", "pytorch_classifiers.DNN.eval", "src.threats.novelty_detection.utils.load_monitors.load_svm_based_monitors", "pytorch_classifiers.DNN", "torch.load", "src.threats.novelty_detection.utils.load_monitors.load_tree_based_monitors", "src.threats.novelty_detection.utils.load_monitors.load_linear_based_monitors", "numpy.shape", "src.threats.novelty_detection.utils.load_monitors.load_odin_monitor", "src.threats.novelty_detection.utils.load_monitors.load_box_based_monitors"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.set_tf_loglevel", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.src.neptune_config.neptune_init", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.dataset.Dataset.load_dataset", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.config.get_technique_params", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_cluster_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_svm_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_tree_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_linear_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_odin_monitor", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_box_based_monitors"], ["def", "start", "(", "exp_params", ",", "save_experiments", ",", "parallel_execution", ",", "verbose", ",", "repetitions", ",", "percentage_of_data", ",", "log_lvl", "=", "logging", ".", "FATAL", ")", ":", "\n", "# disabling tensorflow logs", "\n", "\t", "set_tf_loglevel", "(", "log_lvl", ")", "\n", "# re-enabling tensorflow logs", "\n", "#set_tf_loglevel(logging.INFO)", "\n", "sub_field", "=", "exp_params", "[", "'sub_field'", "]", "\n", "if", "save_experiments", ":", "\n", "\t\t", "nptne", ".", "neptune_init", "(", "sub_field", ")", "# saving experiments in the cloud (optional)", "\n", "\n", "", "arr_monitors", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "arr_readouts", "=", "[", "]", "\n", "\n", "model_name", "=", "exp_params", "[", "'model_names'", "]", "\n", "\n", "## loading experiments", "\n", "for", "modification", "in", "exp_params", "[", "'data'", "]", ":", "\n", "\n", "# loading dataset", "\n", "\t\t", "dataset", "=", "Dataset", "(", "exp_params", "[", "'root_dir'", "]", ")", "\n", "dataset", ".", "original_dataset_name", "=", "exp_params", "[", "'id_dataset_name'", "]", "\n", "dataset", ".", "modification", "=", "modification", "\n", "dataset", ".", "dataset_ID_name", "=", "exp_params", "[", "'id_dataset_name'", "]", "\n", "dataset", ".", "dataset_OOD_name", "=", "exp_params", "[", "'ood_dataset_name'", "]", "\n", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset", ".", "root_dir", ",", "sub_field", ",", "dataset", ".", "original_dataset_name", ",", "dataset", ".", "modification", ")", "\n", "\n", "(", "_", ",", "_", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "dataset", ".", "load_dataset", "(", "dataset_path", ",", "'test'", ")", "\n", "X", ",", "y", "=", "x_test", ",", "y_test", "\n", "\n", "# for one that wants speeding up tests using part of data", "\n", "X_limit", "=", "int", "(", "len", "(", "X", ")", "*", "percentage_of_data", ")", "\n", "y_limit", "=", "int", "(", "len", "(", "y", ")", "*", "percentage_of_data", ")", "\n", "dataset", ".", "X", ",", "dataset", ".", "y", "=", "X", "[", ":", "X_limit", "]", ",", "y", "[", ":", "y_limit", "]", "\n", "\n", "# loading model", "\n", "backend", "=", "exp_params", "[", "'backend'", "]", "\n", "models_folder", "=", "os", ".", "path", ".", "join", "(", "\"src\"", ",", "\"bin\"", ",", "\"models\"", ",", "backend", ")", "\n", "if", "backend", "==", "'tensorflow'", ":", "\n", "\t\t\t", "from", "tensorflow", "import", "keras", "\n", "model", "=", "ModelBuilder", "(", "model_name", ",", "models_folder", ")", "\n", "model", "=", "keras", ".", "models", ".", "load_model", "(", "model", ".", "models_folder", "+", "'_'", "+", "dataset", ".", "original_dataset_name", "+", "'.h5'", ")", "\n", "\n", "", "elif", "backend", "==", "'keras'", ":", "\n", "\t\t\t", "from", "keras", ".", "models", "import", "load_model", "\n", "model", "=", "ModelBuilder", "(", "model_name", ",", "models_folder", ")", "\n", "model", "=", "load_model", "(", "model", ".", "models_folder", "+", "'_'", "+", "dataset", ".", "original_dataset_name", "+", "'.h5'", ")", "\n", "\n", "", "elif", "backend", "==", "'pytorch'", ":", "\n", "\t\t\t", "import", "torch", "\n", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "pytorch", "import", "pytorch_classifiers", "\n", "model", "=", "ModelBuilder", "(", "model_name", ",", "models_folder", ")", "\n", "\n", "if", "model_name", "==", "'leNet'", ":", "\n", "\t\t\t\t", "net", "=", "pytorch_classifiers", ".", "DNN", "(", "exp_params", "[", "'num_classes_to_monitor_ID'", "]", ",", "np", ".", "shape", "(", "X", ")", "[", "2", "]", ",", "1", ")", "\n", "\n", "", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model", ".", "models_folder", "+", "'_'", "+", "dataset", ".", "original_dataset_name", "+", "'.pth'", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "model", "=", "net", "\n", "\n", "", "for", "technique", "in", "exp_params", "[", "'technique_names'", "]", ":", "\n", "\n", "\t\t\t", "PARAMS", "=", "config", ".", "get_technique_params", "(", "technique", ")", "\n", "\n", "experiment", "=", "Experiment", "(", "model_name", "+", "'_'", "+", "technique", ")", "\n", "#experiment.experiment_type = experiment_type_arg #'OOD' or 'ID'", "\n", "experiment", ".", "sub_field", "=", "sub_field", "\n", "experiment", ".", "model", "=", "model", "\n", "experiment", ".", "classes_to_monitor_ID", "=", "exp_params", "[", "'num_classes_to_monitor_ID'", "]", "\n", "#experiment.classes_to_monitor_OOD = exp_params['num_classes_to_monitor_OOD']", "\n", "experiment", ".", "dataset", "=", "dataset", "\n", "experiment", ".", "evaluator", "=", "ood_monitor_evaluator", "\n", "\n", "if", "backend", "==", "'pytorch'", ":", "\n", "\t\t\t\t", "from", "src", ".", "threats", ".", "novelty_detection", ".", "testers", "import", "ood_tester_pytorch", "\n", "experiment", ".", "tester", "=", "ood_tester_pytorch", "\n", "", "else", ":", "\n", "\t\t\t\t", "from", "src", ".", "threats", ".", "novelty_detection", ".", "testers", "import", "ood_tester", "\n", "experiment", ".", "tester", "=", "ood_tester", "\n", "\n", "", "experiment", ".", "verbose", "=", "verbose", "\n", "\n", "monitors", "=", "None", "\n", "\n", "if", "'knn'", "==", "technique", ":", "\n", "\t\t\t\t", "monitors", "=", "load_monitors", ".", "load_cluster_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "PARAMS", ")", "\n", "\n", "", "elif", "'ocsvm'", "==", "technique", ":", "\n", "\t\t\t\t", "monitors", "=", "load_monitors", ".", "load_svm_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "PARAMS", ")", "\n", "\n", "", "elif", "'random_forest'", "==", "technique", ":", "\n", "\t\t\t\t", "monitors", "=", "load_monitors", ".", "load_tree_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "PARAMS", ")", "\n", "\n", "", "elif", "'sgd'", "==", "technique", ":", "\n", "\t\t\t\t", "monitors", "=", "load_monitors", ".", "load_linear_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "PARAMS", ")", "\n", "\n", "", "elif", "technique", "==", "'odin'", ":", "\n", "\t\t\t\t", "monitors", "=", "load_monitors", ".", "load_odin_monitor", "(", "dataset", ".", "original_dataset_name", ",", "PARAMS", ")", "\n", "\n", "", "elif", "technique", "==", "'baseline'", ":", "\n", "\t\t\t\t", "from", "src", ".", "threats", ".", "novelty_detection", ".", "evaluators", "import", "dnn_baseline_evaluator", "\n", "from", "src", ".", "threats", ".", "novelty_detection", ".", "testers", "import", "dnn_baseline_tester", "\n", "experiment", ".", "evaluator", "=", "dnn_baseline_evaluator", "\n", "experiment", ".", "tester", "=", "dnn_baseline_tester", "\n", "\n", "", "elif", "'oob'", "in", "technique", ":", "\n", "\t\t\t\t", "monitors", "=", "load_monitors", ".", "load_box_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "experiment", ".", "classes_to_monitor_ID", ",", "PARAMS", ")", "\n", "\n", "## diferent evaluator and tester, if ensemble or standalone model", "\n", "if", "'ensemble'", "in", "model_name", ":", "\n", "\t\t\t\t\t", "from", "src", ".", "threats", ".", "novelty_detection", ".", "testers", "import", "en_ood_tester", "\n", "experiment", ".", "evaluator", "=", "en_dnn_oob_evaluator", "\n", "experiment", ".", "tester", "=", "en_ood_tester", "\n", "\n", "", "", "experiment", ".", "monitors", "=", "monitors", "\n", "experiment", ".", "PARAMS", "=", "PARAMS", "\n", "experiment", ".", "backend", "=", "exp_params", "[", "'backend'", "]", "\n", "\n", "experiment", ".", "evaluator", ".", "evaluate", "(", "repetitions", ",", "experiment", ",", "parallel_execution", ",", "save_experiments", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.distributional_shift.en_dnn_oob_tester.run": [[9, 71], ["int", "range", "psutil.Process", "zip", "models.append", "arrWeights.update", "pickle.load", "boxes.append", "pickle.load", "os.getpid", "numpy.asarray", "numpy.vstack", "numpy.average", "numpy.argmax", "arrPred.append", "numpy.vstack", "len", "keras.models.load_model", "open", "open", "monitor.method", "models[].predict", "range", "src.utils.util.get_activ_func", "range", "psutil.Process.memory_info", "str", "str"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["def", "run", "(", "X_test", ",", "y_test", ",", "model_build", ",", "monitor", ")", ":", "\n", "    ", "arrPred", "=", "[", "]", "\n", "models", "=", "[", "]", "\n", "arrWeights", "=", "{", "}", "\n", "boxes", "=", "[", "]", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "classToMonitor", "=", "monitor", ".", "classToMonitor", "\n", "arrFalseNegative", "=", "{", "classToMonitor", ":", "0", "}", "\n", "arrTrueNegative", "=", "{", "classToMonitor", ":", "0", "}", "\n", "arrFalsePositive", "=", "{", "classToMonitor", ":", "0", "}", "\n", "arrTruePositive", "=", "{", "classToMonitor", ":", "0", "}", "\n", "\n", "# loading CNN trained with pre-processed images and preparing to store their weights", "\n", "for", "i", "in", "range", "(", "model_build", ".", "num_cnn", ")", ":", "\n", "        ", "models", ".", "append", "(", "load_model", "(", "model_build", ".", "models_folder", "+", "model_build", ".", "model_name", "+", "str", "(", "i", ")", "+", "'.h5'", ")", ")", "\n", "arrWeights", ".", "update", "(", "{", "i", ":", "[", "]", "}", ")", "\n", "box", "=", "pickle", ".", "load", "(", "open", "(", "monitor", ".", "monitors_folder", "+", "monitor", ".", "monitor_name", "+", "str", "(", "i", ")", "+", "\".p\"", ",", "\"rb\"", ")", ")", "\n", "boxes", ".", "append", "(", "box", "[", "classToMonitor", "]", ")", "\n", "\n", "", "dim_reduc_obj", "=", "None", "\n", "\n", "if", "monitor", ".", "dim_reduc_method", "!=", "None", ":", "\n", "        ", "dim_reduc_obj", "=", "pickle", ".", "load", "(", "open", "(", "monitor", ".", "monitors_folder", "+", "monitor", ".", "dim_reduc_method", ",", "\"rb\"", ")", ")", "\n", "\n", "#memory", "\n", "", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "#counter, loading_percentage = util.loading_info(counter, loaded, loading_percentage) #log", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "sequence_models", "=", "(", "models", "[", "i", "]", ".", "predict", "(", "img", ")", "[", "0", "]", "for", "i", "in", "range", "(", "model_build", ".", "num_cnn", ")", ")", "\n", "#aplying ensemble", "\n", "y_all", "=", "np", ".", "vstack", "(", "sequence_models", ")", "\n", "\n", "y_all", "=", "np", ".", "average", "(", "y_all", ",", "axis", "=", "0", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "y_all", ")", "\n", "arrPred", ".", "append", "(", "yPred", ")", "\n", "seq_interm_vals", "=", "(", "util", ".", "get_activ_func", "(", "models", "[", "i", "]", ",", "img", ",", "layerIndex", "=", "monitor", ".", "layer_index", ")", "[", "0", "]", "for", "i", "in", "range", "(", "model_build", ".", "num_cnn", ")", ")", "\n", "intermediateValues_all", "=", "np", ".", "vstack", "(", "seq_interm_vals", ")", "\n", "\n", "if", "yPred", "==", "classToMonitor", ":", "\n", "            ", "if", "monitor", ".", "method", "(", "boxes", ",", "intermediateValues_all", ",", "dim_reduc_obj", ")", ":", "\n", "\n", "                ", "if", "yPred", "!=", "lab", ":", "\n", "                    ", "arrFalseNegative", "[", "classToMonitor", "]", "+=", "1", "#False negative           ", "\n", "", "if", "yPred", "==", "lab", ":", "\n", "                    ", "arrTrueNegative", "[", "classToMonitor", "]", "+=", "1", "#True negatives", "\n", "", "", "else", ":", "\n", "                ", "if", "yPred", "!=", "lab", ":", "\n", "                    ", "arrTruePositive", "[", "classToMonitor", "]", "+=", "1", "#True positives", "\n", "", "if", "yPred", "==", "lab", ":", "\n", "                    ", "arrFalsePositive", "[", "classToMonitor", "]", "+=", "1", "#False positives", "\n", "\n", "#elif lab==classToMonitor and yPred != classToMonitor:", "\n", "#print(\"missclassification --- new pattern for class\",yPred, str(lab))", "\n", "", "", "", "", "memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "return", "arrPred", ",", "y_test", ",", "memory", ",", "arrFalsePositive", ",", "arrFalseNegative", ",", "arrTruePositive", ",", "arrTrueNegative", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.adversarial_attack.config.load_novelty_detection_experiment": [[2, 43], ["Experiment", "ModelBuilder", "ModelBuilder", "Monitor", "Monitor", "experiments_pool.append", "Experiment", "ModelBuilder", "ModelBuilder", "Monitor", "Monitor"], "function", ["None"], ["\n", "'''\n**OK** 1 = outside-of-box paper; 2 = outside-of-box using isomap instead of 2D projection;\n\n**testing** 3 = outside-of-box with ensemble of DNN; 4 = same of 3 but using isomap strategy;\n\n5 = same of 2 but using DBSCAN instead of KNN; 6 = same of 2 but clustering without dimension reduction;\n7 = same of 5 but clustering without dimension reduction; \n8 = using the derivative of activation functions instead of raw values\n'''", "\n", "\n", "\n", "def", "glue_dataset_names", "(", "datasets", ",", "modifications", ")", ":", "\n", "\t", "data", "=", "{", "}", "\n", "\n", "for", "d", "in", "datasets", ":", "\n", "\t\t", "data", ".", "update", "(", "{", "d", ":", "[", "]", "}", ")", "\n", "\n", "for", "m", "in", "modifications", ":", "\n", "\t\t\t", "data", "[", "d", "]", ".", "append", "(", "'{}_{}'", ".", "format", "(", "m", "[", "0", "]", ",", "m", "[", "1", "]", ")", ")", "\n", "\n", "", "", "return", "data", "\n", "\n", "\n", "", "def", "get_technique_params", "(", "technique", ")", ":", "\n", "# Default", "\n", "\t", "PARAMS", "=", "{", "'use_alternative_monitor'", ":", "False", "}", "# True = label -> act func; False = label -> act func if label == predicted", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "False", "}", ")", "\n", "\n", "if", "'sgd'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'random_forest'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'ocsvm'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'outlier'", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.noise.config.glue_dataset_names": [[14, 24], ["data.update", "data[].append"], "function", ["None"], ["def", "glue_dataset_names", "(", "datasets", ",", "modifications", ")", ":", "\n", "\t", "data", "=", "{", "}", "\n", "\n", "for", "d", "in", "datasets", ":", "\n", "\t\t", "data", ".", "update", "(", "{", "d", ":", "[", "]", "}", ")", "\n", "\n", "for", "m", "in", "modifications", ":", "\n", "\t\t\t", "data", "[", "d", "]", ".", "append", "(", "'{}_{}'", ".", "format", "(", "m", "[", "0", "]", ",", "m", "[", "1", "]", ")", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.noise.config.get_technique_params": [[26, 67], ["PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["", "def", "get_technique_params", "(", "technique", ")", ":", "\n", "# Default", "\n", "\t", "PARAMS", "=", "{", "'use_alternative_monitor'", ":", "False", "}", "# True = label -> act func; False = label -> act func if label == predicted", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "False", "}", ")", "\n", "\n", "if", "'sgd'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'random_forest'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'ocsvm'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'outlier'", "}", ")", "\n", "\n", "", "elif", "'oob'", "in", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "[", "3", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'arr_n_components'", ":", "[", "2", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'tau'", ":", "[", "0.01", "]", "}", ")", "# 0.0001, 0.01, 0.35", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'outside_of_box'", "}", ")", "\n", "\n", "", "elif", "'knn'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "[", "2", "]", "}", ")", "#, 3, 5, 10", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'hdbscan'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'min_samples'", ":", "[", "5", ",", "10", ",", "15", "]", "}", ")", "#min_samples 5, 10, 15", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'odin'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'noiseMagnitude'", ":", "0.0025", "}", ")", "# gtsrb = 0.0025; cifar-10 = 0.0014", "\n", "PARAMS", ".", "update", "(", "{", "'temper'", ":", "1000", "}", ")", "\n", "# it is the rouding value of the min confidence threshold rounded in 4 decimals (0.10069 = 0.1007) ", "\n", "PARAMS", ".", "update", "(", "{", "'threshold'", ":", "0.0237", "}", ")", "# gtsrb = 0.0237; cifar-10 = 0.1007", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'temperature'", "}", ")", "\n", "\n", "", "return", "PARAMS", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.noise.config.get_experiment_params": [[69, 156], ["os.path.join", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["", "def", "get_experiment_params", "(", "setting_id", ")", ":", "\n", "\t", "'''\n\t-- id_dataset_name:\n\t'MNIST', 'GTSRB', 'BTSC', 'CIFAR-10'\n\n\t-- num_classes_to_monitor_ID:\n\t10, 43, 62, 10\n\t\n\t-- ood_dataset_name:\n\t'BTSC', 'GTSRB', 'CIFAR-10'\n\n\t-- num_classes_to_monitor_OOD:\n\t62, 43, 10\n\t\n\t-- modifications:\n\t('gtsrb', 'btsc'), ('cifar10', 'gtsrb'), ('gtsrb', 'cifar10')\n\t\n\t-- backend:\n\tkeras = gtsrb, mnist; tensorflow = cifar10; pytorch = odin\n\t\n\t-- model_names:\n\t'leNet', 'vgg16'\n\n\t-- technique_names: \n\t'baseline', 'knn', 'ocsvm', 'random_forest', 'sgd', 'hdbscan', \n\t\t'oob', 'oob_isomap', 'oob_pca', 'oob_pca_isomap', odin\n\t'''", "\n", "\n", "PARAMS", "=", "{", "}", "\n", "\n", "# directory of datasets", "\n", "#root_dir = os.path.join('D:','\\\\backup_desktop_14-10-2020','GITHUB', 'phd_data_generation', 'data', 'modified')", "\n", "root_dir", "=", "os", ".", "path", ".", "join", "(", "'C:'", ",", "'\\\\Users'", ",", "'rsenaferre'", ",", "'Desktop'", ",", "'GITHUB'", ",", "'phd_data_generation'", ",", "'data'", ",", "'benchmark_dataset'", ")", "\n", "PARAMS", ".", "update", "(", "{", "'root_dir'", ":", "root_dir", "}", ")", "\n", "\n", "if", "setting_id", "==", "1", ":", "\n", "# distributional shift (OOB) = GTSRB ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'GTSRB'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "43", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'GTSRB'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "43", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'keras'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "'leNet'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'oob'", ",", "'oob_isomap'", ",", "'oob_pca'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "2", ":", "\n", "# distributional shift (OOB) = CIFAR-10 ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'CIFAR-10'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "10", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'CIFAR-10'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "10", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'tensorflow'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'oob'", ",", "'oob_isomap'", ",", "'oob_pca'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "3", ":", "\n", "# distributional shift (ODIN) = GTSRB ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'GTSRB'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "43", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.anomaly_detection.config.glue_dataset_names": [[14, 24], ["data.update", "data[].append"], "function", ["None"], ["def", "glue_dataset_names", "(", "datasets", ",", "modifications", ")", ":", "\n", "\t", "data", "=", "{", "}", "\n", "\n", "for", "d", "in", "datasets", ":", "\n", "\t\t", "data", ".", "update", "(", "{", "d", ":", "[", "]", "}", ")", "\n", "\n", "for", "m", "in", "modifications", ":", "\n", "\t\t\t", "data", "[", "d", "]", ".", "append", "(", "'{}_{}'", ".", "format", "(", "m", "[", "0", "]", ",", "m", "[", "1", "]", ")", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.anomaly_detection.config.get_technique_params": [[26, 67], ["PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["", "def", "get_technique_params", "(", "technique", ")", ":", "\n", "# Default", "\n", "\t", "PARAMS", "=", "{", "'use_alternative_monitor'", ":", "False", "}", "# True = label -> act func; False = label -> act func if label == predicted", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "False", "}", ")", "\n", "\n", "if", "'sgd'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'random_forest'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'ocsvm'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'outlier'", "}", ")", "\n", "\n", "", "elif", "'oob'", "in", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "[", "3", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'arr_n_components'", ":", "[", "2", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'tau'", ":", "[", "0.01", "]", "}", ")", "# 0.0001, 0.01, 0.35", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'outside_of_box'", "}", ")", "\n", "\n", "", "elif", "'knn'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "[", "2", "]", "}", ")", "#, 3, 5, 10", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'hdbscan'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'min_samples'", ":", "[", "5", ",", "10", ",", "15", "]", "}", ")", "#min_samples 5, 10, 15", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'odin'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'noiseMagnitude'", ":", "0.0025", "}", ")", "# gtsrb = 0.0025; cifar-10 = 0.0014", "\n", "PARAMS", ".", "update", "(", "{", "'temper'", ":", "1000", "}", ")", "\n", "# it is the rouding value of the min confidence threshold rounded in 4 decimals (0.10069 = 0.1007) ", "\n", "PARAMS", ".", "update", "(", "{", "'threshold'", ":", "0.0237", "}", ")", "# gtsrb = 0.0237; cifar-10 = 0.1007", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'temperature'", "}", ")", "\n", "\n", "", "return", "PARAMS", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.anomaly_detection.config.get_experiment_params": [[69, 153], ["os.path.join", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "arr.append"], "function", ["None"], ["", "def", "get_experiment_params", "(", "setting_id", ")", ":", "\n", "\t", "'''\n\t-- id_dataset_name:\n\t'MNIST', 'GTSRB', 'BTSC', 'CIFAR-10'\n\n\t-- num_classes_to_monitor_ID:\n\t10, 43, 62, 10\n\t\n\t-- ood_dataset_name:\n\t'BTSC', 'GTSRB', 'CIFAR-10'\n\n\t-- num_classes_to_monitor_OOD:\n\t62, 43, 10\n\t\n\t-- modifications:\n\t('gtsrb', 'btsc'), ('cifar10', 'gtsrb'), ('gtsrb', 'cifar10')\n\t\n\t-- backend:\n\tkeras = gtsrb, mnist; tensorflow = cifar10; pytorch = odin\n\t\n\t-- model_names:\n\t'leNet', 'vgg16'\n\n\t-- technique_names: \n\t'baseline', 'knn', 'ocsvm', 'random_forest', 'sgd', 'hdbscan', \n\t\t'oob', 'oob_isomap', 'oob_pca', 'oob_pca_isomap', odin\n\t'''", "\n", "\n", "PARAMS", "=", "{", "}", "\n", "\n", "# directory of datasets", "\n", "#root_dir = os.path.join('D:','\\\\backup_desktop_14-10-2020','GITHUB', 'phd_data_generation', 'data', 'modified')", "\n", "root_dir", "=", "os", ".", "path", ".", "join", "(", "'C:'", ",", "'\\\\Users'", ",", "'rsenaferre'", ",", "'Desktop'", ",", "'GITHUB'", ",", "'phd_data_generation'", ",", "'data'", ",", "'benchmark_dataset'", ")", "\n", "PARAMS", ".", "update", "(", "{", "'root_dir'", ":", "root_dir", "}", ")", "\n", "\n", "if", "setting_id", "==", "1", ":", "\n", "# distributional shift (OOB) = GTSRB ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'GTSRB'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "43", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'GTSRB'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "43", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'keras'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "'leNet'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'oob'", ",", "'oob_isomap'", ",", "'oob_pca'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "2", ":", "\n", "# distributional shift (OOB) = CIFAR-10 ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'CIFAR-10'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "10", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'CIFAR-10'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "10", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'tensorflow'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'oob'", ",", "'oob_isomap'", ",", "'oob_pca'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "3", ":", "\n", "# distributional shift (ODIN) = GTSRB ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'GTSRB'", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.anomaly_detection.config.get_data_params": [[156, 167], ["os.path.join", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'GTSRB'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "43", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'pytorch'", "}", ")", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.config.glue_dataset_names": [[14, 24], ["data.update", "data[].append"], "function", ["None"], ["def", "glue_dataset_names", "(", "datasets", ",", "modifications", ")", ":", "\n", "\t", "data", "=", "{", "}", "\n", "\n", "for", "d", "in", "datasets", ":", "\n", "\t\t", "data", ".", "update", "(", "{", "d", ":", "[", "]", "}", ")", "\n", "\n", "for", "m", "in", "modifications", ":", "\n", "\t\t\t", "data", "[", "d", "]", ".", "append", "(", "'{}_{}'", ".", "format", "(", "m", "[", "0", "]", ",", "m", "[", "1", "]", ")", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.config.get_technique_params": [[26, 52], ["PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["", "def", "get_technique_params", "(", "technique", ")", ":", "\n", "# Default", "\n", "\t", "PARAMS", "=", "{", "'use_alternative_monitor'", ":", "False", "}", "# True = label -> act func; False = label -> act func if label == predicted", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "False", "}", ")", "\n", "\n", "if", "'sgd'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'random_forest'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'grid_search'", ":", "True", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'ocsvm'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'outlier'", "}", ")", "\n", "\n", "", "elif", "'oob'", "in", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "[", "3", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'arr_n_components'", ":", "[", "2", "]", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'tau'", ":", "[", "0.01", "]", "}", ")", "# 0.0001, 0.01, 0.35", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'outside_of_box'", "}", ")", "\n", "\n", "", "elif", "'knn'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "[", "2", "]", "}", ")", "#, 3, 5, 10", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "True", "}", ")", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.config.get_experiment_params": [[54, 217], ["os.path.join", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update", "PARAMS.update"], "function", ["None"], ["\n", "", "elif", "'hdbscan'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'min_samples'", ":", "[", "5", ",", "10", ",", "15", "]", "}", ")", "#min_samples 5, 10, 15", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'equality'", "}", ")", "\n", "\n", "", "elif", "'odin'", "==", "technique", ":", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'noiseMagnitude'", ":", "0.0025", "}", ")", "# gtsrb = 0.0025; cifar-10 = 0.0014", "\n", "PARAMS", ".", "update", "(", "{", "'temper'", ":", "1000", "}", ")", "\n", "# it is the rouding value of the min confidence threshold rounded in 4 decimals (0.10069 = 0.1007) ", "\n", "PARAMS", ".", "update", "(", "{", "'threshold'", ":", "0.0237", "}", ")", "# gtsrb = 0.0237; cifar-10 = 0.1007", "\n", "PARAMS", ".", "update", "(", "{", "'OOD_approach'", ":", "'temperature'", "}", ")", "\n", "\n", "", "return", "PARAMS", "\n", "\n", "\n", "", "def", "get_experiment_params", "(", "setting_id", ")", ":", "\n", "\t", "'''\n\t-- id_dataset_name:\n\t'MNIST', 'GTSRB', 'BTSC', 'CIFAR-10'\n\n\t-- num_classes_to_monitor_ID:\n\t10, 43, 62, 10\n\t\n\t-- ood_dataset_name:\n\t'BTSC', 'GTSRB', 'CIFAR-10'\n\n\t-- num_classes_to_monitor_OOD:\n\t62, 43, 10\n\t\n\t-- modifications:\n\t('gtsrb', 'btsc'), ('cifar10', 'gtsrb'), ('gtsrb', 'cifar10')\n\t\n\t-- backend:\n\tkeras = gtsrb, mnist; tensorflow = cifar10; pytorch = odin\n\t\n\t-- model_names:\n\t'leNet', 'vgg16'\n\n\t-- technique_names: \n\t'baseline', 'knn', 'ocsvm', 'random_forest', 'sgd', 'hdbscan', \n\t\t'oob', 'oob_isomap', 'oob_pca', 'oob_pca_isomap', odin\n\t'''", "\n", "\n", "PARAMS", "=", "{", "}", "\n", "\n", "# directory of datasets", "\n", "#root_dir = os.path.join('D:','\\\\backup_desktop_14-10-2020','GITHUB', 'phd_data_generation', 'data', 'modified')", "\n", "root_dir", "=", "os", ".", "path", ".", "join", "(", "'C:'", ",", "'\\\\Users'", ",", "'rsenaferre'", ",", "'Desktop'", ",", "'GITHUB'", ",", "'phd_data_generation'", ",", "'data'", ",", "'benchmark_dataset'", ")", "\n", "PARAMS", ".", "update", "(", "{", "'root_dir'", ":", "root_dir", "}", ")", "\n", "\n", "if", "setting_id", "==", "1", ":", "\n", "# distributional shift (OOB) = GTSRB ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'GTSRB'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "43", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'GTSRB'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "43", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'keras'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "'leNet'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'oob'", ",", "'oob_isomap'", ",", "'oob_pca'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "2", ":", "\n", "# distributional shift (OOB) = CIFAR-10 ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'CIFAR-10'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "10", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'CIFAR-10'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "10", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'tensorflow'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'oob'", ",", "'oob_isomap'", ",", "'oob_pca'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "3", ":", "\n", "# distributional shift (ODIN) = GTSRB ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'GTSRB'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "43", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'GTSRB'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "43", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'pytorch'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "'leNet'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'odin'", "]", "}", ")", "\n", "\n", "", "elif", "setting_id", "==", "4", ":", "\n", "# distributional shift (ODIN) = CIFAR-10 ", "\n", "\n", "\t\t", "id_dataset_name", "=", "'CIFAR-10'", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_ID'", ":", "10", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'id_dataset_name'", ":", "id_dataset_name", "}", ")", "\n", "datasets", "=", "[", "id_dataset_name", "]", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'ood_dataset_name'", ":", "'CIFAR-10'", "}", ")", "\n", "PARAMS", ".", "update", "(", "{", "'num_classes_to_monitor_OOD'", ":", "10", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'data'", ":", "[", "'brightness_severity_1'", ",", "'contrast_severity_1'", ",", "'defocus_blur_severity_1'", ",", "\n", "'brightness_severity_5'", ",", "'contrast_severity_5'", ",", "'defocus_blur_severity_5'", ",", "\n", "'elastic_transform_severity_1'", ",", "'gaussian_blur_severity_1'", ",", "'glass_blur_severity_1'", ",", "\n", "'elastic_transform_severity_5'", ",", "'gaussian_blur_severity_5'", ",", "'glass_blur_severity_5'", ",", "\n", "'saturate_severity_1'", ",", "'zoom_blur_severity_1'", ",", "'saturate_severity_5'", ",", "'zoom_blur_severity_5'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'backend'", ":", "'pytorch'", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'model_names'", ":", "[", "'leNet'", "]", "}", ")", "\n", "\n", "PARAMS", ".", "update", "(", "{", "'technique_names'", ":", "[", "'odin'", "]", "}", ")", "\n", "\n", "", "return", "PARAMS", "\n", "\n", "\n", "\n", "\n", "", "def", "get_monitor_params", "(", "setting_id", ")", ":", "\n", "\n", "\t", "PARAMS", "=", "{", "}", "\n", "\n", "if", "setting_id", "==", "1", ":", "\n", "#for oob variations", "\n", "\t\t", "PARAMS", ".", "update", "(", "{", "'is_build_monitors_by_class'", ":", "True", "}", ")", "#True just for OOB-based monitors", "\n", "PARAMS", ".", "update", "(", "{", "'arr_n_components'", ":", "2", "}", ")", "# 2, 3, 5, 10", "\n", "#for oob variations and knn", "\n", "PARAMS", ".", "update", "(", "{", "'arr_n_clusters'", ":", "3", "}", ")", "# 2, 3, 5, 10", "\n", "#for ocsvm", "\n", "PARAMS", ".", "update", "(", "{", "'min_samples'", ":", "[", "5", ",", "10", ",", "15", "]", "}", ")", "\n", "#for random forest and linear classifiers", "\n", "PARAMS", ".", "update", "(", "{", "'use_grid_search'", ":", "False", "}", ")", "\n", "#for knn and sgd classifiers", "\n", "PARAMS", ".", "update", "(", "{", "'use_scaler'", ":", "False", "}", ")", "\n", "#all methods", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.build_ND_monitors.set_tf_loglevel": [[13, 23], ["logging.getLogger().setLevel", "logging.getLogger", "logging.FATAL"], "function", ["None"], ["def", "set_tf_loglevel", "(", "level", ")", ":", "\n", "\t", "if", "level", ">=", "logging", ".", "FATAL", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'3'", "\n", "", "if", "level", ">=", "logging", ".", "ERROR", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'2'", "\n", "", "if", "level", ">=", "logging", ".", "WARNING", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'1'", "\n", "", "else", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'0'", "\n", "", "logging", ".", "getLogger", "(", "'tensorflow'", ")", ".", "setLevel", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.build_ND_monitors.build_monitors_by_class": [[25, 70], ["range", "arr_monitors.update", "pathos.multiprocessing.ProcessingPool", "print", "print", "arr_monitors.items", "src.threats.novelty_detection.utils.create_monitors.prepare_box_based_monitors", "monitors_by_class.update", "len", "processes_pool.append", "process.get", "train.run", "pathos.multiprocessing.ProcessingPool.apipe"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.prepare_box_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run"], ["", "def", "build_monitors_by_class", "(", "root_path", ",", "parallel_execution", ",", "dataset_name", ",", "params", ",", "classes_to_monitor", ",", "model", ",", "X", ",", "y", ",", "save", ")", ":", "\n", "#arr_monitors = []", "\n", "\n", "# Generate monitors for each class for a specific dataset", "\n", "\t", "'''for class_to_monitor in range(classes_to_monitor):\n\t\tmonitors = create_monitors.prepare_box_based_monitors(root_path, dataset_name, params, class_to_monitor)\n\t\tarr_monitors.extend(monitors)\n\t\t#arr_monitors = np.append(arr_monitors, monitors)\n\t'''", "\n", "arr_monitors", "=", "{", "}", "\n", "technique_names", "=", "params", "[", "'technique_names'", "]", "\n", "arr_n_components", "=", "params", "[", "'arr_n_components'", "]", "\n", "arr_n_clusters_oob", "=", "params", "[", "'arr_n_clusters'", "]", "\n", "\n", "for", "technique_name", "in", "technique_names", ":", "\n", "\n", "\t\t", "monitors_by_class", "=", "{", "}", "\n", "for", "class_to_monitor", "in", "range", "(", "classes_to_monitor", ")", ":", "\n", "\t\t\t", "monitor", "=", "create_monitors", ".", "prepare_box_based_monitors", "(", "root_path", ",", "dataset_name", ",", "technique_name", ",", "arr_n_clusters_oob", ",", "arr_n_components", ",", "class_to_monitor", ")", "\n", "monitors_by_class", ".", "update", "(", "{", "class_to_monitor", ":", "monitor", "}", ")", "\n", "\n", "", "arr_monitors", ".", "update", "(", "{", "technique_name", ":", "monitors_by_class", "}", ")", "\n", "\n", "#Parallelizing the experiments (optional): one experiment per Core", "\n", "", "if", "parallel_execution", ":", "\n", "\t\t", "cores", "=", "6", "\n", "timeout", "=", "30", "*", "len", "(", "arr_monitors", ")", "\n", "pool", "=", "Pool", "(", "cores", ")", "\n", "processes_pool", "=", "[", "]", "\n", "\n", "print", "(", "\"\\nParallel execution with {} cores. Max {} seconds to run each experiment:\"", ".", "format", "(", "cores", ",", "timeout", ")", ")", "\n", "\n", "for", "monitor", "in", "arr_monitors", ":", "\n", "\t\t\t", "processes_pool", ".", "append", "(", "pool", ".", "apipe", "(", "monitor", ".", "trainer", ".", "run", ",", "monitor", ",", "model", ",", "X", ",", "y", ",", "save", ",", "params", ")", ")", "\n", "\n", "", "for", "process", "in", "processes_pool", ":", "\n", "\t\t\t", "_", "=", "process", ".", "get", "(", "timeout", "=", "timeout", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"\\nSerial execution.\"", ")", "\n", "#for monitor in arr_monitors:", "\n", "#\t_ = monitor.trainer.run(monitor, model, X, y, save, params)", "\n", "for", "technique", ",", "monitors_by_class", "in", "arr_monitors", ".", "items", "(", ")", ":", "\n", "\t\t\t", "train", "=", "monitors_by_class", "[", "0", "]", ".", "trainer", "\n", "_", "=", "train", ".", "run", "(", "monitors_by_class", ",", "model", ",", "X", ",", "y", ",", "save", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.build_ND_monitors.build_monitors_all_classes": [[72, 94], ["src.threats.novelty_detection.utils.create_monitors.build_monitors", "pathos.multiprocessing.ProcessingPool", "print", "print", "len", "processes_pool.append", "process.get", "monitor.trainer.run", "pathos.multiprocessing.ProcessingPool.apipe"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.create_monitors.build_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run"], ["", "", "", "def", "build_monitors_all_classes", "(", "root_path", ",", "parallel_execution", ",", "dataset_name", ",", "params", ",", "model", ",", "X", ",", "y", ",", "save", ")", ":", "\n", "# Generate monitors for all classes for a specific dataset", "\n", "\t", "arr_monitors", "=", "create_monitors", ".", "build_monitors", "(", "root_path", ",", "dataset_name", ",", "params", ")", "\n", "\n", "#Parallelizing the experiments (optional): one experiment per Core", "\n", "if", "parallel_execution", ":", "\n", "\t\t", "cores", "=", "6", "\n", "timeout", "=", "30", "*", "len", "(", "arr_monitors", ")", "\n", "pool", "=", "Pool", "(", "cores", ")", "\n", "processes_pool", "=", "[", "]", "\n", "\n", "print", "(", "\"\\nParallel execution with {} cores. Max {} seconds to run each experiment:\"", ".", "format", "(", "cores", ",", "timeout", ")", ")", "\n", "\n", "for", "monitor", "in", "arr_monitors", ":", "\n", "\t\t\t", "processes_pool", ".", "append", "(", "pool", ".", "apipe", "(", "monitor", ".", "trainer", ".", "run", ",", "monitor", ",", "model", ",", "X", ",", "y", ",", "save", ",", "params", ")", ")", "\n", "\n", "", "for", "process", "in", "processes_pool", ":", "\n", "\t\t\t", "process", ".", "get", "(", "timeout", "=", "timeout", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"\\nSerial execution.\"", ")", "\n", "for", "monitor", "in", "arr_monitors", ":", "\n", "\t\t\t", "monitor", ".", "trainer", ".", "run", "(", "monitor", ",", "model", ",", "X", ",", "y", ",", "save", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.build_ND_monitors.start": [[96, 160], ["build_ND_monitors.set_tf_loglevel", "zip", "src.Classes.dataset.Dataset", "MONITOR_PARAMS.update", "MONITOR_PARAMS.update", "os.path.join", "src.Classes.dataset.Dataset.load_dataset", "os.path.join", "os.path.join", "timeit.default_timer", "print", "keras.models.load_model", "build_ND_monitors.build_monitors_by_class", "build_ND_monitors.build_monitors_all_classes", "timeit.default_timer", "load_model", "int", "int", "pytorch_classifiers.DNN.load_state_dict", "pytorch_classifiers.DNN.eval", "pytorch_classifiers.DNN", "torch.load", "len", "len", "numpy.shape"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.set_tf_loglevel", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.dataset.Dataset.load_dataset", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.build_ND_monitors.build_monitors_by_class", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.build_ND_monitors.build_monitors_all_classes"], ["", "", "", "def", "start", "(", "sub_field", ",", "DATA_PARAMS", ",", "MONITOR_PARAMS", ",", "save", ",", "parallel_execution", ",", "root_path", ",", "perc_of_data", ")", ":", "\n", "# disabling tensorflow logs", "\n", "\t", "set_tf_loglevel", "(", "logging", ".", "FATAL", ")", "\n", "# re-enabling tensorflow logs", "\n", "#set_tf_loglevel(logging.INFO)", "\n", "\n", "dataset_folder", "=", "DATA_PARAMS", "[", "'dataset_folder'", "]", "\n", "dataset_names", "=", "DATA_PARAMS", "[", "'dataset_names'", "]", "\n", "num_classes_to_monitor", "=", "DATA_PARAMS", "[", "'num_classes_to_monitor'", "]", "\n", "validation_size", "=", "DATA_PARAMS", "[", "'validation_size'", "]", "\n", "\n", "model_names", "=", "MONITOR_PARAMS", "[", "'model_names'", "]", "\n", "is_build_monitors_by_class", "=", "MONITOR_PARAMS", "[", "'is_build_monitors_by_class'", "]", "\n", "\n", "for", "model_name", ",", "dataset_name", ",", "classes_to_monitor", "in", "zip", "(", "model_names", ",", "dataset_names", ",", "num_classes_to_monitor", ")", ":", "\n", "\n", "# loading dataset", "\n", "\t\t", "dataset", "=", "Dataset", "(", "dataset_name", ")", "\n", "dataset", ".", "validation_size", "=", "validation_size", "\n", "\n", "MONITOR_PARAMS", ".", "update", "(", "{", "'dataset_name'", ":", "dataset_name", "}", ")", "\n", "MONITOR_PARAMS", ".", "update", "(", "{", "'model_name'", ":", "model_name", "}", ")", "\n", "\n", "#building monitor with training (test data is excluded, of course)", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "dataset_folder", ",", "sub_field", ",", "dataset_name", ")", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "_", ",", "_", ")", "=", "dataset", ".", "load_dataset", "(", "path", ")", "\n", "X", ",", "y", "=", "x_train", "[", ":", "int", "(", "len", "(", "x_train", ")", "*", "perc_of_data", ")", "]", ",", "y_train", "[", ":", "int", "(", "len", "(", "y_train", ")", "*", "perc_of_data", ")", "]", "\n", "\n", "#path to load the model", "\n", "models_folder", "=", "os", ".", "path", ".", "join", "(", "\"src\"", ",", "\"bin\"", ",", "\"models\"", ",", "MONITOR_PARAMS", "[", "'backend'", "]", ")", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "models_folder", ",", "model_name", "+", "'_'", "+", "dataset_name", ")", "\n", "\n", "# loading model", "\n", "if", "MONITOR_PARAMS", "[", "'backend'", "]", "==", "'tensorflow'", ":", "\n", "\t\t\t", "from", "tensorflow", "import", "keras", "\n", "model", "=", "keras", ".", "models", ".", "load_model", "(", "model_file", "+", "'.h5'", ")", "\n", "\n", "", "elif", "MONITOR_PARAMS", "[", "'backend'", "]", "==", "'keras'", ":", "\n", "\t\t\t", "from", "keras", ".", "models", "import", "load_model", "\n", "model", "=", "load_model", "(", "model_file", "+", "'.h5'", ")", "\n", "\n", "", "elif", "MONITOR_PARAMS", "[", "'backend'", "]", "==", "'pytorch'", ":", "\n", "\t\t\t", "import", "torch", "\n", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "pytorch", "import", "pytorch_classifiers", "\n", "\n", "if", "model_name", "==", "'leNet'", ":", "\n", "\t\t\t\t", "net", "=", "pytorch_classifiers", ".", "DNN", "(", "classes_to_monitor", ",", "np", ".", "shape", "(", "X", ")", "[", "2", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "net", "=", "None", "\n", "\n", "", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_file", "+", "'.pth'", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "model", "=", "net", "\n", "\n", "\n", "", "start", "=", "timer", "(", ")", "\n", "\n", "if", "is_build_monitors_by_class", ":", "\n", "\t\t\t", "build_monitors_by_class", "(", "root_path", ",", "parallel_execution", ",", "dataset_name", ",", "MONITOR_PARAMS", ",", "classes_to_monitor", ",", "model", ",", "X", ",", "y", ",", "save", ")", "\n", "", "else", ":", "\n", "\t\t\t", "build_monitors_all_classes", "(", "root_path", ",", "parallel_execution", ",", "dataset_name", ",", "MONITOR_PARAMS", ",", "model", ",", "X", ",", "y", ",", "save", ")", "\n", "\n", "", "dt", "=", "timer", "(", ")", "-", "start", "\n", "print", "(", "\"Monitors for {} built in {} minutes\"", ".", "format", "(", "dataset_name", ",", "dt", "/", "60", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.run_ND_experiments.set_tf_loglevel": [[28, 38], ["logging.getLogger().setLevel", "logging.getLogger"], "function", ["None"], ["def", "set_tf_loglevel", "(", "level", ")", ":", "\n", "\t", "if", "level", ">=", "logging", ".", "FATAL", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'3'", "\n", "", "if", "level", ">=", "logging", ".", "ERROR", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'2'", "\n", "", "if", "level", ">=", "logging", ".", "WARNING", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'1'", "\n", "", "else", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'0'", "\n", "", "logging", ".", "getLogger", "(", "'tensorflow'", ")", ".", "setLevel", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.novelty_detection.run_ND_experiments.start": [[55, 160], ["numpy.array", "run_ND_experiments.set_tf_loglevel", "os.path.join", "src.neptune_config.neptune_init", "src.Classes.model_builder.ModelBuilder", "keras.models.load_model", "src.Classes.experiment.Experiment", "src.Classes.experiment.Experiment.evaluator.evaluate", "src.Classes.model_builder.ModelBuilder", "load_model", "src.threats.novelty_detection.utils.load_monitors.load_cluster_based_monitors", "src.Classes.model_builder.ModelBuilder", "pytorch_classifiers.DNN.load_state_dict", "pytorch_classifiers.DNN.eval", "src.threats.novelty_detection.utils.load_monitors.load_svm_based_monitors", "pytorch_classifiers.DNN", "torch.load", "src.threats.novelty_detection.utils.load_monitors.load_tree_based_monitors", "src.threats.novelty_detection.utils.load_monitors.load_linear_based_monitors", "numpy.shape", "src.threats.novelty_detection.utils.load_monitors.load_odin_monitor", "src.threats.novelty_detection.utils.load_monitors.load_box_based_monitors", "src.threats.novelty_detection.utils.load_monitors.load_alocc_monitor"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.set_tf_loglevel", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.src.neptune_config.neptune_init", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_cluster_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_svm_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_tree_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_linear_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_odin_monitor", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_box_based_monitors", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.load_monitors.load_alocc_monitor"], ["def", "start", "(", "exp_params", ",", "save_experiments", ",", "parallel_execution", ",", "verbose", ",", "repetitions", ",", "dataset", ",", "log_lvl", "=", "logging", ".", "FATAL", ")", ":", "\n", "\t", "arr_monitors", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "arr_readouts", "=", "[", "]", "\n", "\n", "# disabling tensorflow logs", "\n", "set_tf_loglevel", "(", "log_lvl", ")", "\n", "# re-enabling tensorflow logs", "\n", "#set_tf_loglevel(logging.INFO)", "\n", "\n", "sub_field", "=", "exp_params", "[", "'sub_field'", "]", "\n", "if", "save_experiments", ":", "\n", "\t\t", "nptne", ".", "neptune_init", "(", "sub_field", ")", "# saving experiments in the cloud (optional)", "\n", "\n", "# loading model", "\n", "#for data, model_name in zip(exp_params['data'], exp_params['model_names']):", "\n", "", "model_name", "=", "exp_params", "[", "'model_names'", "]", "\n", "\n", "backend", "=", "exp_params", "[", "'backend'", "]", "\n", "models_folder", "=", "os", ".", "path", ".", "join", "(", "\"src\"", ",", "\"bin\"", ",", "\"models\"", ",", "backend", ")", "\n", "if", "backend", "==", "'tensorflow'", ":", "\n", "\t\t", "from", "tensorflow", "import", "keras", "\n", "model", "=", "ModelBuilder", "(", "model_name", ",", "models_folder", ")", "\n", "model", "=", "keras", ".", "models", ".", "load_model", "(", "model", ".", "models_folder", "+", "'_'", "+", "dataset", ".", "original_dataset_name", "+", "'.h5'", ")", "\n", "\n", "", "elif", "backend", "==", "'keras'", ":", "\n", "\t\t", "from", "keras", ".", "models", "import", "load_model", "\n", "model", "=", "ModelBuilder", "(", "model_name", ",", "models_folder", ")", "\n", "model", "=", "load_model", "(", "model", ".", "models_folder", "+", "'_'", "+", "dataset", ".", "original_dataset_name", "+", "'.h5'", ")", "\n", "\n", "", "elif", "backend", "==", "'pytorch'", ":", "\n", "\t\t", "import", "torch", "\n", "from", "src", ".", "Classes", ".", "ml_architectures", ".", "pytorch", "import", "pytorch_classifiers", "\n", "model", "=", "ModelBuilder", "(", "model_name", ",", "models_folder", ")", "\n", "\n", "if", "model_name", "==", "'leNet'", ":", "\n", "\t\t\t", "net", "=", "pytorch_classifiers", ".", "DNN", "(", "exp_params", "[", "'num_classes_to_monitor_ID'", "]", ",", "np", ".", "shape", "(", "X", ")", "[", "2", "]", ",", "1", ")", "\n", "\n", "", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model", ".", "models_folder", "+", "'_'", "+", "dataset", ".", "original_dataset_name", "+", "'.pth'", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "model", "=", "net", "\n", "\n", "", "for", "technique", "in", "exp_params", "[", "'technique_names'", "]", ":", "\n", "\n", "#PARAMS = config.get_technique_params(technique)\t", "\n", "\t\t", "PARAMS", "=", "exp_params", "\n", "\n", "experiment", "=", "Experiment", "(", "model_name", "+", "'_'", "+", "technique", ")", "\n", "#experiment.experiment_type = experiment_type_arg #'OOD' or 'ID'", "\n", "experiment", ".", "sub_field", "=", "sub_field", "\n", "experiment", ".", "model", "=", "model", "\n", "experiment", ".", "classes_to_monitor_ID", "=", "exp_params", "[", "'num_classes_to_monitor_ID'", "]", "\n", "experiment", ".", "classes_to_monitor_OOD", "=", "exp_params", "[", "'num_classes_to_monitor_OOD'", "]", "\n", "experiment", ".", "dataset", "=", "dataset", "\n", "experiment", ".", "evaluator", "=", "ood_monitor_evaluator", "\n", "\n", "if", "backend", "==", "'pytorch'", ":", "\n", "\t\t\t", "from", "src", ".", "threats", ".", "novelty_detection", ".", "testers", "import", "ood_tester_pytorch", "\n", "experiment", ".", "tester", "=", "ood_tester_pytorch", "\n", "", "else", ":", "\n", "\t\t\t", "from", "src", ".", "threats", ".", "novelty_detection", ".", "testers", "import", "ood_tester", "\n", "experiment", ".", "tester", "=", "ood_tester", "\n", "\n", "", "experiment", ".", "verbose", "=", "verbose", "\n", "\n", "monitors", "=", "None", "\n", "\n", "if", "'knn'", "==", "technique", ":", "\n", "\t\t\t", "monitors", "=", "load_monitors", ".", "load_cluster_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "PARAMS", ")", "\n", "\n", "", "elif", "'ocsvm'", "==", "technique", ":", "\n", "\t\t\t", "monitors", "=", "load_monitors", ".", "load_svm_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "PARAMS", ")", "\n", "\n", "", "elif", "'random_forest'", "==", "technique", ":", "\n", "\t\t\t", "monitors", "=", "load_monitors", ".", "load_tree_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "PARAMS", ")", "\n", "\n", "", "elif", "'sgd'", "==", "technique", ":", "\n", "\t\t\t", "monitors", "=", "load_monitors", ".", "load_linear_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "PARAMS", ")", "\n", "\n", "", "elif", "technique", "==", "'odin'", ":", "\n", "\t\t\t", "monitors", "=", "load_monitors", ".", "load_odin_monitor", "(", "dataset", ".", "original_dataset_name", ",", "PARAMS", ")", "\n", "\n", "", "elif", "technique", "==", "'baseline'", ":", "\n", "\t\t\t", "from", "src", ".", "threats", ".", "novelty_detection", ".", "evaluators", "import", "dnn_baseline_evaluator", "\n", "from", "src", ".", "threats", ".", "novelty_detection", ".", "testers", "import", "dnn_baseline_tester", "\n", "experiment", ".", "evaluator", "=", "dnn_baseline_evaluator", "\n", "experiment", ".", "tester", "=", "dnn_baseline_tester", "\n", "\n", "", "elif", "'oob'", "in", "technique", ":", "\n", "\t\t\t", "monitors", "=", "load_monitors", ".", "load_box_based_monitors", "(", "dataset", ".", "original_dataset_name", ",", "technique", ",", "experiment", ".", "classes_to_monitor_ID", ",", "PARAMS", ")", "\n", "\n", "## diferent evaluator and tester, if ensemble or standalone model", "\n", "if", "'ensemble'", "in", "model_name", ":", "\n", "\t\t\t\t", "from", "src", ".", "threats", ".", "novelty_detection", ".", "testers", "import", "en_ood_tester", "\n", "experiment", ".", "evaluator", "=", "en_dnn_oob_evaluator", "\n", "experiment", ".", "tester", "=", "en_ood_tester", "\n", "\n", "", "", "elif", "'alooc'", "==", "technique", ":", "\n", "\t\t\t", "monitors", "=", "load_monitors", ".", "load_alocc_monitor", "(", "dataset", ".", "original_dataset_name", ",", "PARAMS", ")", "\n", "\n", "\n", "", "experiment", ".", "monitors", "=", "monitors", "\n", "experiment", ".", "PARAMS", "=", "PARAMS", "\n", "experiment", ".", "backend", "=", "exp_params", "[", "'backend'", "]", "\n", "\n", "experiment", ".", "evaluator", ".", "evaluate", "(", "repetitions", ",", "experiment", ",", "parallel_execution", ",", "save_experiments", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.ood_tester.run": [[14, 92], ["src.Classes.readout.Readout", "int", "psutil.Process", "zip", "os.getpid", "pickle.load", "range", "numpy.asarray", "time.perf_counter", "numpy.argmax", "time.perf_counter", "src.Classes.readout.Readout.arr_classification_pred.append", "arr_ml_time.append", "src.threats.novelty_detection.utils.safety_approaches_2.safety_monitor_decision", "arr_sm_time.append", "len", "open", "os.path.join", "pickle.load.update", "os.path.join", "pickle.load", "src.utils.util.loading_info", "model.predict", "open", "psutil.Process.memory_info", "str", "pickle.load", "open"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.safety_monitor_decision", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["def", "run", "(", "dataset", ",", "experiment", ",", "monitor", ")", ":", "\n", "\n", "    ", "X_test", ",", "y_test", "=", "dataset", ".", "X", ",", "dataset", ".", "y", "\n", "dataset_name", "=", "dataset", ".", "dataset_name", "\n", "#print(len(y_test))", "\n", "#print('ID:', len(np.where(y_test<43)[0]))", "\n", "#print('OOD:', len(np.where(y_test>=43)[0]))", "\n", "loaded_monitor", "=", "{", "}", "\n", "\n", "readout", "=", "Readout", "(", ")", "\n", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "model", "=", "experiment", ".", "model", "\n", "\n", "arr_ml_time", "=", "[", "]", "\n", "arr_sm_time", "=", "[", "]", "\n", "\n", "#memory", "\n", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "# if you want to scale act func values ", "\n", "scaler", "=", "None", "\n", "if", "monitor", ".", "use_scaler", ":", "\n", "        ", "scaler_file", "=", "monitor", ".", "monitors_folder", "+", "'saved_scaler_'", "+", "monitor", ".", "filename", "\n", "scaler", "=", "pickle", ".", "load", "(", "open", "(", "scaler_file", ",", "\"rb\"", ")", ")", "\n", "monitor", ".", "filename", "=", "'(scaled_input_version)'", "+", "monitor", ".", "filename", "\n", "\n", "", "if", "monitor", ".", "OOD_approach", "==", "'outside_of_box'", ":", "\n", "        ", "for", "c", "in", "range", "(", "experiment", ".", "classes_to_monitor_ID", ")", ":", "\n", "            ", "monitor_path", "=", "os", ".", "path", ".", "join", "(", "monitor", ".", "monitors_folder", "+", "str", "(", "c", ")", ",", "monitor", ".", "filename", ")", "\n", "loaded_monitor", ".", "update", "(", "{", "c", ":", "pickle", ".", "load", "(", "open", "(", "monitor_path", ",", "\"rb\"", ")", ")", "}", ")", "\n", "", "", "elif", "monitor", ".", "OOD_approach", "==", "'temperature'", "or", "monitor", ".", "OOD_approach", "==", "'adversarial'", ":", "\n", "        ", "loaded_monitor", "=", "monitor", ".", "method", "\n", "", "else", ":", "\n", "        ", "monitor_path", "=", "os", ".", "path", ".", "join", "(", "monitor", ".", "monitors_folder", ",", "monitor", ".", "filename", ")", "\n", "loaded_monitor", "=", "pickle", ".", "load", "(", "open", "(", "monitor_path", ",", "\"rb\"", ")", ")", "\n", "\n", "", "for", "img", ",", "lbl", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "        ", "if", "experiment", ".", "verbose", ":", "\n", "            ", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "\n", "ini_ml", "=", "timer", "(", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "end_ml", "=", "timer", "(", ")", "\n", "\n", "# ML readout", "\n", "readout", ".", "arr_classification_pred", ".", "append", "(", "yPred", ")", "\n", "arr_ml_time", ".", "append", "(", "end_ml", "-", "ini_ml", ")", "\n", "\n", "# SM readout", "\n", "if", "monitor", ".", "OOD_approach", "==", "'outside_of_box'", ":", "\n", "            ", "use_intermediateValues", "=", "True", "\n", "\n", "", "elif", "monitor", ".", "OOD_approach", "==", "'temperature'", "or", "monitor", ".", "OOD_approach", "==", "'adversarial'", ":", "\n", "            ", "use_intermediateValues", "=", "False", "\n", "\n", "", "readout", ",", "time_spent", "=", "SA", ".", "safety_monitor_decision", "(", "readout", ",", "monitor", ",", "model", ",", "img", ",", "yPred", ",", "lbl", ",", "experiment", ",", "\n", "use_intermediateValues", ",", "scaler", ",", "loaded_monitor", ")", "\n", "\n", "arr_sm_time", ".", "append", "(", "time_spent", ")", "\n", "\n", "# some complementaire general readout", "\n", "", "readout", ".", "total_memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "# some complementaire ML readout", "\n", "readout", ".", "arr_classification_true", "=", "y_test", "\n", "readout", ".", "ML_time", "=", "arr_ml_time", "\n", "\n", "# some complementaire SM readout", "\n", "readout", ".", "SM_time", "=", "arr_sm_time", "\n", "\n", "return", "readout", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.en_ood_tester.run": [[9, 71], ["int", "range", "psutil.Process", "zip", "models.append", "arrWeights.update", "pickle.load", "boxes.append", "pickle.load", "os.getpid", "numpy.asarray", "numpy.vstack", "numpy.average", "numpy.argmax", "arrPred.append", "numpy.vstack", "len", "keras.models.load_model", "open", "open", "monitor.method", "models[].predict", "range", "src.utils.util.get_activ_func", "range", "psutil.Process.memory_info", "str", "str"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["def", "run", "(", "X_test", ",", "y_test", ",", "model_build", ",", "monitor", ")", ":", "\n", "    ", "arrPred", "=", "[", "]", "\n", "models", "=", "[", "]", "\n", "arrWeights", "=", "{", "}", "\n", "boxes", "=", "[", "]", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "classToMonitor", "=", "monitor", ".", "classToMonitor", "\n", "arrFalseNegative", "=", "{", "classToMonitor", ":", "0", "}", "\n", "arrTrueNegative", "=", "{", "classToMonitor", ":", "0", "}", "\n", "arrFalsePositive", "=", "{", "classToMonitor", ":", "0", "}", "\n", "arrTruePositive", "=", "{", "classToMonitor", ":", "0", "}", "\n", "\n", "# loading CNN trained with pre-processed images and preparing to store their weights", "\n", "for", "i", "in", "range", "(", "model_build", ".", "num_cnn", ")", ":", "\n", "        ", "models", ".", "append", "(", "load_model", "(", "model_build", ".", "models_folder", "+", "model_build", ".", "model_name", "+", "str", "(", "i", ")", "+", "'.h5'", ")", ")", "\n", "arrWeights", ".", "update", "(", "{", "i", ":", "[", "]", "}", ")", "\n", "box", "=", "pickle", ".", "load", "(", "open", "(", "monitor", ".", "monitors_folder", "+", "monitor", ".", "monitor_name", "+", "str", "(", "i", ")", "+", "\".p\"", ",", "\"rb\"", ")", ")", "\n", "boxes", ".", "append", "(", "box", "[", "classToMonitor", "]", ")", "\n", "\n", "", "dim_reduc_obj", "=", "None", "\n", "\n", "if", "monitor", ".", "dim_reduc_method", "!=", "None", ":", "\n", "        ", "dim_reduc_obj", "=", "pickle", ".", "load", "(", "open", "(", "monitor", ".", "monitors_folder", "+", "monitor", ".", "dim_reduc_method", ",", "\"rb\"", ")", ")", "\n", "\n", "#memory", "\n", "", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "#counter, loading_percentage = util.loading_info(counter, loaded, loading_percentage) #log", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "sequence_models", "=", "(", "models", "[", "i", "]", ".", "predict", "(", "img", ")", "[", "0", "]", "for", "i", "in", "range", "(", "model_build", ".", "num_cnn", ")", ")", "\n", "#aplying ensemble", "\n", "y_all", "=", "np", ".", "vstack", "(", "sequence_models", ")", "\n", "\n", "y_all", "=", "np", ".", "average", "(", "y_all", ",", "axis", "=", "0", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "y_all", ")", "\n", "arrPred", ".", "append", "(", "yPred", ")", "\n", "seq_interm_vals", "=", "(", "util", ".", "get_activ_func", "(", "models", "[", "i", "]", ",", "img", ",", "layerIndex", "=", "monitor", ".", "layer_index", ")", "[", "0", "]", "for", "i", "in", "range", "(", "model_build", ".", "num_cnn", ")", ")", "\n", "intermediateValues_all", "=", "np", ".", "vstack", "(", "seq_interm_vals", ")", "\n", "\n", "if", "yPred", "==", "classToMonitor", ":", "\n", "            ", "if", "monitor", ".", "method", "(", "boxes", ",", "intermediateValues_all", ",", "dim_reduc_obj", ")", ":", "\n", "\n", "                ", "if", "yPred", "!=", "lab", ":", "\n", "                    ", "arrFalseNegative", "[", "classToMonitor", "]", "+=", "1", "#False negative           ", "\n", "", "if", "yPred", "==", "lab", ":", "\n", "                    ", "arrTrueNegative", "[", "classToMonitor", "]", "+=", "1", "#True negatives", "\n", "", "", "else", ":", "\n", "                ", "if", "yPred", "!=", "lab", ":", "\n", "                    ", "arrTruePositive", "[", "classToMonitor", "]", "+=", "1", "#True positives", "\n", "", "if", "yPred", "==", "lab", ":", "\n", "                    ", "arrFalsePositive", "[", "classToMonitor", "]", "+=", "1", "#False positives", "\n", "\n", "#elif lab==classToMonitor and yPred != classToMonitor:", "\n", "#print(\"missclassification --- new pattern for class\",yPred, str(lab))", "\n", "", "", "", "", "memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "return", "arrPred", ",", "y_test", ",", "memory", ",", "arrFalsePositive", ",", "arrFalseNegative", ",", "arrTruePositive", ",", "arrTrueNegative", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_oob_KDE_tester.plot_images": [[15, 29], ["matplotlib.subplots", "range", "fig.suptitle", "matplotlib.tight_layout", "matplotlib.show", "ax.imshow", "ax.set_title", "ax.set_axis_off", "numpy.squeeze"], "function", ["None"], ["def", "plot_images", "(", "title", ",", "data", ",", "labels", ",", "similarities", ",", "num_row", ",", "num_col", ")", ":", "\n", "\n", "    ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "num_row", ",", "num_col", ",", "figsize", "=", "(", "1.5", "*", "num_col", ",", "2", "*", "num_row", ")", ")", "\n", "for", "i", "in", "range", "(", "num_row", "*", "num_col", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "ax", "=", "axes", "[", "i", "//", "num_col", ",", "i", "%", "num_col", "]", "\n", "ax", ".", "imshow", "(", "np", ".", "squeeze", "(", "data", "[", "i", "]", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", ".", "set_title", "(", "'{}-Sim={}'", ".", "format", "(", "labels", "[", "i", "]", ",", "similarities", "[", "i", "]", ")", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "pass", "\n", "", "", "fig", ".", "suptitle", "(", "title", ")", "\n", "plt", ".", "tight_layout", "(", "pad", "=", "3.0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_oob_KDE_tester.run": [[31, 217], ["int", "range", "psutil.Process", "src.novelty_detection.methods.kde_based_monitoring.get_pdf_cuttoff", "zip", "print", "arrFalseNegative_ID.update", "arrTrueNegative_ID.update", "arrFalsePositive_ID.update", "arrTruePositive_ID.update", "arrFalseNegative_OOD.update", "arrTruePositive_OOD.update", "os.getpid", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "arrPred.append", "pickle.load", "monitor.method", "src.novelty_detection.methods.kde_based_monitoring.crop_center", "kde_monitor.crop_center.flatten().reshape", "arr_PCA[].transform", "arr_kde_by_class[].score", "len", "model.predict", "src.utils.util.get_activ_func", "open", "dnn_oob_KDE_tester.plot_images", "dnn_oob_KDE_tester.plot_images", "kde_monitor.crop_center.flatten", "arrFalseNegative_OOD[].append", "psutil.Process.memory_info", "str", "arrFalseNegative_OOD[].append", "arrTruePositive_OOD[].append"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.kde_based_monitoring.get_pdf_cuttoff", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.kde_based_monitoring.crop_center", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.demo_temporal_mnist.plot_images", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.demo_temporal_mnist.plot_images"], ["", "def", "run", "(", "X_test", ",", "y_test", ",", "experiment", ",", "monitor", ",", "dataset_name", ")", ":", "\n", "    ", "arrPred", "=", "[", "]", "\n", "arrFalseNegative_ID", "=", "{", "}", "\n", "arrTrueNegative_ID", "=", "{", "}", "\n", "arrFalsePositive_ID", "=", "{", "}", "\n", "arrTruePositive_ID", "=", "{", "}", "\n", "\n", "arrFalseNegative_OOD", "=", "{", "}", "\n", "#arrTrueNegative_OOD = {}", "\n", "#arrFalsePositive_OOD = {}", "\n", "arrTruePositive_OOD", "=", "{", "}", "\n", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "for", "class_to_monitor", "in", "range", "(", "experiment", ".", "classes_to_monitor", ")", ":", "\n", "# ID", "\n", "        ", "arrFalseNegative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrTrueNegative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrFalsePositive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrTruePositive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "# OOD", "\n", "arrFalseNegative_OOD", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "arrTruePositive_OOD", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "\n", "", "model", "=", "experiment", ".", "model", "\n", "\n", "zeros", "=", "0", "\n", "#memory", "\n", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "counter_monitor", "=", "0", "\n", "missclassified_images_monitor", "=", "[", "]", "\n", "missclassified_image_labels_monitor", "=", "[", "]", "\n", "missclassified_images_monitor_similarity", "=", "[", "]", "\n", "\n", "counter_monitor_TP", "=", "0", "\n", "TP_classified_images_monitor", "=", "[", "]", "\n", "TP_image_labels_monitor", "=", "[", "]", "\n", "\n", "counter_DNN", "=", "0", "\n", "missclassified_images_DNN", "=", "[", "]", "\n", "missclassified_image_labels_DNN", "=", "[", "]", "\n", "\n", "#testing hybrid monitor histogram comparison", "\n", "#indices = np.where(y_test == 36)", "\n", "#ref_img = np.float32(X_test[indices])[0]", "\n", "\n", "#testing hybrid monitor 1: kde minimum threshold on images by class", "\n", "arr_pdf_cuttoff", ",", "arr_kde_by_class", ",", "arr_PCA", "=", "kde_monitor", ".", "get_pdf_cuttoff", "(", "dataset_name", ",", "experiment", ".", "classes_to_monitor", ",", "cutoff", "=", "'minimum'", ")", "\n", "\n", "for", "img", ",", "lbl", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "arrPred", ".", "append", "(", "yPred", ")", "\n", "intermediateValues", "=", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "monitor", ".", "layer_index", ")", "[", "0", "]", "\n", "\n", "# loading abstraction boxes", "\n", "monitor_path", "=", "monitor", ".", "monitors_folder", "+", "str", "(", "yPred", ")", "+", "sep", "+", "monitor", ".", "filename", "\n", "boxes", "=", "pickle", ".", "load", "(", "open", "(", "monitor_path", ",", "\"rb\"", ")", ")", "\n", "#print(np.shape(boxes))", "\n", "\n", "is_in_the_box", "=", "monitor", ".", "method", "(", "boxes", ",", "intermediateValues", ",", "yPred", ",", "monitor", ".", "monitors_folder", ",", "monitor", ".", "dim_reduc_method", ")", "\n", "zeros", "+=", "is_in_the_box", "[", "1", "]", "\n", "\n", "imc", "=", "kde_monitor", ".", "crop_center", "(", "img", "[", "0", "]", ",", "12", ",", "12", ")", "\n", "#print(imc.shape[0])", "\n", "img_reshaped", "=", "imc", ".", "flatten", "(", ")", ".", "reshape", "(", "imc", ".", "shape", "[", "0", "]", "*", "imc", ".", "shape", "[", "1", "]", "*", "imc", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "img_transformed", "=", "arr_PCA", "[", "yPred", "]", ".", "transform", "(", "img_reshaped", ")", "\n", "pdf", "=", "arr_kde_by_class", "[", "yPred", "]", ".", "score", "(", "img_transformed", ")", "\n", "\n", "if", "lbl", "<", "experiment", ".", "classes_to_monitor", ":", "# OOD label numbers starts after the ID label numbers", "\n", "            ", "if", "is_in_the_box", "[", "0", "]", ":", "\n", "                ", "if", "yPred", "!=", "lbl", ":", "\n", "                    ", "arrFalseNegative_ID", "[", "yPred", "]", "+=", "1", "#False negative ", "\n", "#counter_DNN+=1", "\n", "#missclassified_images_DNN.append(img)", "\n", "#missclassified_image_labels_DNN.append(yPred)          ", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "                    ", "arrTrueNegative_ID", "[", "yPred", "]", "+=", "1", "#True negatives", "\n", "", "", "else", ":", "\n", "                ", "if", "pdf", ">=", "arr_pdf_cuttoff", "[", "yPred", "]", ":", "\n", "                    ", "if", "yPred", "!=", "lbl", ":", "\n", "                        ", "arrFalseNegative_ID", "[", "yPred", "]", "+=", "1", "#False negative", "\n", "", "else", ":", "\n", "                        ", "arrTrueNegative_ID", "[", "yPred", "]", "+=", "1", "#True negatives", "\n", "", "", "else", ":", "\n", "                    ", "if", "yPred", "!=", "lbl", ":", "\n", "                        ", "arrTruePositive_ID", "[", "yPred", "]", "+=", "1", "#True positives", "\n", "", "else", ":", "\n", "                        ", "arrFalsePositive_ID", "[", "yPred", "]", "+=", "1", "#False positives", "\n", "", "", "", "'''\n            else:\n                #kde based approach 1: \n                #OOD is considered when the image is both outside of the box and \n                #has pdf below the minimum of the original class\n                if pdf < arr_pdf_cuttoff[yPred]:\n                    #OOD detected !!\n                    if yPred != lbl: \n                        arrTruePositive_ID[yPred] += 1 #True positives\n                        #counter_monitor_TP+=1\n                        #TP_classified_images_monitor.append(img)\n                        #TP_image_labels_monitor.append(yPred)\n                    if yPred == lbl: \n                        arrFalsePositive_ID[yPred] += 1 #False positives\n                        #counter_monitor+=1\n                        #missclassified_images_monitor.append(img)\n                        #missclassified_image_labels_monitor.append(yPred)\n                else:\n                    if yPred != lbl:\n                        arrFalseNegative_ID[yPred] += 1 #False negative \n                        #counter_DNN+=1\n                        #missclassified_images_DNN.append(img)\n                        #missclassified_image_labels_DNN.append(yPred)          \n                    if yPred == lbl: \n                        arrTrueNegative_ID[yPred] += 1 #True negatives\n            '''", "\n", "'''\n            else:\n\n                if yPred != lbl: \n                    arrTruePositive_ID[yPred] += 1 #True positives\n                    #counter_monitor_TP+=1\n                    #TP_classified_images_monitor.append(img)\n                    #TP_image_labels_monitor.append(yPred)\n                if yPred == lbl: \n                    arrFalsePositive_ID[yPred] += 1 #False positives\n                    counter_monitor+=1\n                    missclassified_images_monitor.append(img)\n                    missclassified_image_labels_monitor.append(yPred)\n                    \n                    #histogram based approach\n                    #print(img[0].shape, ref_img.shape)\n                    #sim = idm.compare_histograms(np.float32(img[0]), ref_img, centered=True)\n                    #missclassified_images_monitor_similarity.append(sim)\n            '''", "\n", "", "else", ":", "\n", "            ", "if", "is_in_the_box", "[", "0", "]", ":", "\n", "                ", "arrFalseNegative_OOD", "[", "yPred", "]", ".", "append", "(", "lbl", ")", "#False negative           ", "\n", "#if yPred == lbl: ", "\n", "#arrTrueNegative_OOD[yPred] += 1 #True negatives", "\n", "", "else", ":", "\n", "                ", "if", "pdf", ">=", "arr_pdf_cuttoff", "[", "yPred", "]", ":", "\n", "                    ", "arrFalseNegative_OOD", "[", "yPred", "]", ".", "append", "(", "lbl", ")", "#False negative", "\n", "", "else", ":", "\n", "                    ", "arrTruePositive_OOD", "[", "yPred", "]", ".", "append", "(", "lbl", ")", "#True positives", "\n", "", "", "'''\n            else:\n                if pdf < arr_pdf_cuttoff[yPred]:\n                    if yPred != lbl: \n                        arrTruePositive_OOD[yPred].append(lbl) #True positives\n                    #if yPred == lbl: \n                        #arrFalsePositive_OOD[yPred] += 1 #False positives\n                else:\n                    if yPred != lbl:\n                        arrFalseNegative_OOD[yPred].append(lbl) #False negative           \n                    #if yPred == lbl: \n                        #arrTrueNegative_OOD[yPred] += 1 #True negatives\n            '''", "\n", "", "if", "counter_monitor_TP", "%", "10", "==", "0", "and", "counter_monitor_TP", ">", "0", ":", "\n", "            ", "plot_images", "(", "\"True positives (Monitor detected right)\"", ",", "TP_classified_images_monitor", ",", "TP_image_labels_monitor", ",", "2", ",", "5", ")", "\n", "counter_monitor_TP", "=", "0", "\n", "TP_classified_images_monitor", "=", "[", "]", "\n", "TP_image_labels_monitor", "=", "[", "]", "\n", "\n", "", "if", "counter_monitor", "%", "60", "==", "0", "and", "counter_monitor", ">", "0", ":", "\n", "            ", "plot_images", "(", "\"False positives (Monitor misclassified)\"", ",", "missclassified_images_monitor", ",", "missclassified_image_labels_monitor", ",", "missclassified_images_monitor_similarity", ",", "6", ",", "10", ")", "\n", "counter_monitor", "=", "0", "\n", "missclassified_images_monitor", "=", "[", "]", "\n", "missclassified_image_labels_monitor", "=", "[", "]", "\n", "", "'''\n        if counter_DNN % 60 == 0 and counter_DNN > 0:\n            plot_images(\"False negatives (DNN misclassified)\", missclassified_images_DNN, missclassified_image_labels_DNN, 6, 10)\n            counter_DNN = 0\n            missclassified_images_DNN = []\n            missclassified_image_labels_DNN = []\n        '''", "\n", "\n", "", "print", "(", "\"zeroed points:\"", ",", "zeros", ")", "\n", "memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "return", "arrPred", ",", "y_test", ",", "memory", ",", "arrFalsePositive_ID", ",", "arrFalseNegative_ID", ",", "arrTruePositive_ID", ",", "arrTrueNegative_ID", ",", "arrFalseNegative_OOD", ",", "arrTruePositive_OOD", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.ood_tester_pytorch.run": [[18, 99], ["src.Classes.readout.Readout", "int", "psutil.Process", "torch.device", "torch.device", "model.to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.getpid", "os.path.join", "pickle.load", "time.perf_counter", "model", "torch.max", "torch.max", "time.perf_counter", "src.Classes.readout.Readout.arr_classification_pred.append", "arr_ml_time.append", "src.threats.novelty_detection.utils.safety_approaches_2.safety_monitor_decision", "arr_sm_time.append", "len", "open", "torch.cuda.is_available", "torch.cuda.is_available", "src.utils.util.loading_info", "data[].to", "data[].to", "psutil.Process.memory_info"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.safety_monitor_decision", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info"], ["def", "run", "(", "dataset", ",", "experiment", ",", "monitor", ")", ":", "\n", "# special case when GTSRB + BTSC due to the intersection between some classes", "\n", "    ", "monitor", ".", "map_dataset_classes", "=", "True", "if", "experiment", ".", "dataset", ".", "modification", "==", "'gtsrb_btsc'", "else", "False", "\n", "\n", "X_test", ",", "y_test", "=", "dataset", ".", "X", ",", "dataset", ".", "y", "\n", "dataset_name", "=", "dataset", ".", "dataset_name", "\n", "\n", "#print(len(y_test))", "\n", "#print('ID:', len(np.where(y_test<43)[0]))", "\n", "#print('OOD:', len(np.where(y_test>=43)[0]))", "\n", "loaded_monitor", "=", "{", "}", "\n", "\n", "readout", "=", "Readout", "(", ")", "\n", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "model", "=", "experiment", ".", "model", "\n", "\n", "arr_ml_time", "=", "[", "]", "\n", "arr_sm_time", "=", "[", "]", "\n", "\n", "#memory", "\n", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "if", "monitor", ".", "OOD_approach", "==", "'temperature'", ":", "\n", "        ", "loaded_monitor", "=", "monitor", ".", "method", "\n", "", "else", ":", "\n", "        ", "monitor_path", "=", "os", ".", "path", ".", "join", "(", "monitor", ".", "monitors_folder", ",", "monitor", ".", "filename", ")", "\n", "loaded_monitor", "=", "pickle", ".", "load", "(", "open", "(", "monitor_path", ",", "\"rb\"", ")", ")", "\n", "\n", "#for img, lbl in zip(X_test, y_test):", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "#print(device)", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "#testset = ", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "\n", "#with torch.no_grad():", "\n", "for", "data", "in", "testloader", ":", "\n", "        ", "if", "experiment", ".", "verbose", ":", "\n", "            ", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "\n", "", "img", ",", "lbl", "=", "data", "[", "0", "]", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "#print(np.shape(img))", "\n", "\n", "ini_ml", "=", "timer", "(", ")", "\n", "outputs", "=", "model", "(", "img", ")", "\n", "_", ",", "yPred", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "end_ml", "=", "timer", "(", ")", "\n", "#print(yPred)", "\n", "\n", "# ML readout", "\n", "readout", ".", "arr_classification_pred", ".", "append", "(", "yPred", ")", "\n", "arr_ml_time", ".", "append", "(", "end_ml", "-", "ini_ml", ")", "\n", "\n", "# SM readout        ", "\n", "if", "monitor", ".", "OOD_approach", "==", "'temperature'", ":", "\n", "            ", "use_intermediateValues", "=", "False", "\n", "\n", "", "readout", ",", "time_spent", "=", "safety_approaches_2", ".", "safety_monitor_decision", "(", "readout", ",", "monitor", ",", "model", ",", "img", ",", "yPred", ",", "lbl", ",", "experiment", ".", "classes_to_monitor_ID", ",", "\n", "use_intermediateValues", ",", "None", ",", "loaded_monitor", ")", "\n", "\n", "arr_sm_time", ".", "append", "(", "time_spent", ")", "\n", "\n", "# some complementaire general readout", "\n", "", "readout", ".", "total_memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "# some complementaire ML readout", "\n", "readout", ".", "arr_classification_true", "=", "y_test", "\n", "readout", ".", "ML_time", "=", "arr_ml_time", "\n", "\n", "# some complementaire SM readout", "\n", "readout", ".", "SM_time", "=", "arr_sm_time", "\n", "\n", "return", "readout", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_baseline_tester.plot_images": [[10, 24], ["matplotlib.subplots", "range", "fig.suptitle", "matplotlib.tight_layout", "matplotlib.show", "ax.imshow", "ax.set_title", "ax.set_axis_off", "numpy.squeeze"], "function", ["None"], ["def", "plot_images", "(", "title", ",", "data", ",", "labels", ",", "similarities", ",", "num_row", ",", "num_col", ")", ":", "\n", "\n", "    ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "num_row", ",", "num_col", ",", "figsize", "=", "(", "1.5", "*", "num_col", ",", "2", "*", "num_row", ")", ")", "\n", "for", "i", "in", "range", "(", "num_row", "*", "num_col", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "ax", "=", "axes", "[", "i", "//", "num_col", ",", "i", "%", "num_col", "]", "\n", "ax", ".", "imshow", "(", "np", ".", "squeeze", "(", "data", "[", "i", "]", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", ".", "set_title", "(", "'{}-Sim={}'", ".", "format", "(", "labels", "[", "i", "]", ",", "similarities", "[", "i", "]", ")", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "pass", "\n", "", "", "fig", ".", "suptitle", "(", "title", ")", "\n", "plt", ".", "tight_layout", "(", "pad", "=", "3.0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_baseline_tester.run": [[26, 50], ["int", "psutil.Process", "zip", "os.getpid", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "arrPred.append", "len", "model.predict", "psutil.Process.memory_info"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["", "def", "run", "(", "X_test", ",", "y_test", ",", "experiment", ",", "dataset_name", ")", ":", "\n", "    ", "arrPred", "=", "[", "]", "\n", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "model", "=", "experiment", ".", "model", "\n", "\n", "#memory", "\n", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "for", "img", ",", "lbl", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "arrPred", ".", "append", "(", "yPred", ")", "\n", "\n", "", "memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "return", "arrPred", ",", "y_test", ",", "memory", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.classifier_based_on_act_func_tester.run": [[12, 73], ["src.Classes.readout.Readout", "int", "range", "range", "psutil.Process", "pickle.load", "zip", "safety_approaches.safety_monitor_decision.arr_false_negative_ID.update", "safety_approaches.safety_monitor_decision.arr_true_negative_ID.update", "safety_approaches.safety_monitor_decision.arr_false_positive_ID.update", "safety_approaches.safety_monitor_decision.arr_true_positive_ID.update", "safety_approaches.safety_monitor_decision.arr_false_negative_OOD.update", "safety_approaches.safety_monitor_decision.arr_true_negative_OOD.update", "safety_approaches.safety_monitor_decision.arr_false_positive_OOD.update", "safety_approaches.safety_monitor_decision.arr_true_positive_OOD.update", "os.getpid", "pickle.load", "open", "numpy.asarray", "numpy.argmax", "arrPred.append", "src.threats.novelty_detection.utils.safety_approaches.safety_monitor_decision", "len", "open", "src.utils.util.loading_info", "model.predict", "src.utils.util.get_activ_func", "psutil.Process.memory_info"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.safety_approaches_2.safety_monitor_decision", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["def", "run", "(", "dataset", ",", "experiment", ",", "monitor", ")", ":", "\n", "# special case when GTSRB + BTSC due to the intersection between some classes", "\n", "    ", "monitor", ".", "map_dataset_classes", "=", "True", "if", "experiment", ".", "dataset", ".", "dataset_ID_name", "==", "'GTSRB'", "and", "experiment", ".", "dataset", ".", "dataset_OOD_name", "==", "'BTSC'", "else", "False", "\n", "\n", "X_test", ",", "y_test", "=", "dataset", ".", "X", ",", "dataset", ".", "y", "\n", "dataset_name", "=", "dataset", ".", "dataset_name", "\n", "arrPred", "=", "[", "]", "\n", "\n", "readout", "=", "Readout", "(", ")", "\n", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "for", "class_to_monitor", "in", "range", "(", "experiment", ".", "classes_to_monitor_ID", ")", ":", "\n", "# ID", "\n", "        ", "readout", ".", "arr_false_negative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "readout", ".", "arr_true_negative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "readout", ".", "arr_false_positive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "readout", ".", "arr_true_positive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "\n", "", "for", "class_OOD", "in", "range", "(", "experiment", ".", "classes_to_monitor_ID", ",", "experiment", ".", "classes_to_monitor_OOD", "+", "experiment", ".", "classes_to_monitor_ID", ")", ":", "\n", "# OOD", "\n", "        ", "readout", ".", "arr_false_negative_OOD", ".", "update", "(", "{", "class_OOD", ":", "[", "]", "}", ")", "\n", "readout", ".", "arr_true_negative_OOD", ".", "update", "(", "{", "class_OOD", ":", "[", "]", "}", ")", "\n", "readout", ".", "arr_false_positive_OOD", ".", "update", "(", "{", "class_OOD", ":", "[", "]", "}", ")", "\n", "readout", ".", "arr_true_positive_OOD", ".", "update", "(", "{", "class_OOD", ":", "[", "]", "}", ")", "\n", "\n", "", "model", "=", "experiment", ".", "model", "\n", "\n", "#memory", "\n", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "# if you want to scale act func values ", "\n", "scaler", "=", "None", "\n", "if", "monitor", ".", "use_scaler", ":", "\n", "        ", "scaler_file", "=", "monitor", ".", "monitors_folder", "+", "'saved_scaler_'", "+", "monitor", ".", "filename", "\n", "scaler", "=", "pickle", ".", "load", "(", "open", "(", "scaler_file", ",", "\"rb\"", ")", ")", "\n", "monitor", ".", "filename", "=", "'(scaled_input_version)'", "+", "monitor", ".", "filename", "\n", "\n", "# loading cluster-baed monitor", "\n", "", "monitor_path", "=", "monitor", ".", "monitors_folder", "+", "sep", "+", "monitor", ".", "filename", "\n", "loaded_monitor", "=", "pickle", ".", "load", "(", "open", "(", "monitor_path", ",", "\"rb\"", ")", ")", "\n", "\n", "for", "img", ",", "lbl", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "        ", "if", "experiment", ".", "verbose", ":", "\n", "            ", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "arrPred", ".", "append", "(", "yPred", ")", "\n", "\n", "intermediateValues", "=", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "monitor", ".", "layer_index", ")", "[", "0", "]", "\n", "\n", "readout", "=", "safety_approaches", ".", "safety_monitor_decision", "(", "readout", ",", "monitor", ",", "yPred", ",", "lbl", ",", "experiment", ".", "classes_to_monitor_ID", ",", "\n", "intermediateValues", ",", "scaler", ",", "loaded_monitor", ")", "\n", "\n", "", "readout", ".", "memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "return", "arrPred", ",", "y_test", ",", "readout", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_dbscan_act_func_tester.plot_images": [[14, 28], ["matplotlib.subplots", "range", "fig.suptitle", "matplotlib.tight_layout", "matplotlib.show", "ax.imshow", "ax.set_title", "ax.set_axis_off", "numpy.squeeze"], "function", ["None"], ["def", "plot_images", "(", "title", ",", "data", ",", "labels", ",", "similarities", ",", "num_row", ",", "num_col", ")", ":", "\n", "\n", "    ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "num_row", ",", "num_col", ",", "figsize", "=", "(", "1.5", "*", "num_col", ",", "2", "*", "num_row", ")", ")", "\n", "for", "i", "in", "range", "(", "num_row", "*", "num_col", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "ax", "=", "axes", "[", "i", "//", "num_col", ",", "i", "%", "num_col", "]", "\n", "ax", ".", "imshow", "(", "np", ".", "squeeze", "(", "data", "[", "i", "]", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", ".", "set_title", "(", "'{}-Sim={}'", ".", "format", "(", "labels", "[", "i", "]", ",", "similarities", "[", "i", "]", ")", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "pass", "\n", "", "", "fig", ".", "suptitle", "(", "title", ")", "\n", "plt", ".", "tight_layout", "(", "pad", "=", "3.0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_dbscan_act_func_tester.run": [[30, 146], ["int", "range", "psutil.Process", "pickle.load", "zip", "arrFalseNegative_ID.update", "arrTrueNegative_ID.update", "arrFalsePositive_ID.update", "arrTruePositive_ID.update", "arrFalseNegative_OOD.update", "arrTruePositive_OOD.update", "os.getpid", "open", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "arrPred.append", "hdbscan.approximate_predict", "print", "len", "model.predict", "src.utils.util.get_activ_func", "arrFalseNegative_OOD[].append", "arrTruePositive_OOD[].append", "psutil.Process.memory_info"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["", "def", "run", "(", "X_test", ",", "y_test", ",", "experiment", ",", "monitor", ",", "dataset_name", ")", ":", "\n", "    ", "arrPred", "=", "[", "]", "\n", "arrFalseNegative_ID", "=", "{", "}", "\n", "arrTrueNegative_ID", "=", "{", "}", "\n", "arrFalsePositive_ID", "=", "{", "}", "\n", "arrTruePositive_ID", "=", "{", "}", "\n", "\n", "arrFalseNegative_OOD", "=", "{", "}", "\n", "arrTruePositive_OOD", "=", "{", "}", "\n", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "for", "class_to_monitor", "in", "range", "(", "experiment", ".", "classes_to_monitor", ")", ":", "\n", "# ID", "\n", "        ", "arrFalseNegative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrTrueNegative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrFalsePositive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrTruePositive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "# OOD", "\n", "arrFalseNegative_OOD", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "arrTruePositive_OOD", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "\n", "", "model", "=", "experiment", ".", "model", "\n", "\n", "zeros", "=", "0", "\n", "#memory", "\n", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "counter_monitor", "=", "0", "\n", "missclassified_images_monitor", "=", "[", "]", "\n", "missclassified_image_labels_monitor", "=", "[", "]", "\n", "missclassified_images_monitor_similarity", "=", "[", "]", "\n", "\n", "counter_monitor_TP", "=", "0", "\n", "TP_classified_images_monitor", "=", "[", "]", "\n", "TP_image_labels_monitor", "=", "[", "]", "\n", "\n", "counter_DNN", "=", "0", "\n", "missclassified_images_DNN", "=", "[", "]", "\n", "missclassified_image_labels_DNN", "=", "[", "]", "\n", "\n", "# loading cluster-baed monitor", "\n", "monitor_path", "=", "monitor", ".", "monitors_folder", "+", "sep", "+", "monitor", ".", "filename", "\n", "cluster_based_monitor", "=", "pickle", ".", "load", "(", "open", "(", "monitor_path", ",", "\"rb\"", ")", ")", "\n", "\n", "for", "img", ",", "lbl", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "arrPred", ".", "append", "(", "yPred", ")", "\n", "intermediateValues", "=", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "monitor", ".", "layer_index", ")", "[", "0", "]", "\n", "\n", "#yPred_by_monitor = cluster_based_monitor.predict(np.reshape(intermediateValues, (1, -1)))", "\n", "#print(\"[intermediateValues]\", np.shape([intermediateValues]))", "\n", "yPred_by_monitor", ",", "strengths", "=", "hdbscan", ".", "approximate_predict", "(", "cluster_based_monitor", ",", "[", "intermediateValues", "]", ")", "\n", "print", "(", "\"yPred_by_monitor\"", ",", "yPred_by_monitor", ")", "\n", "#print(\"strengths\", np.shape(strengths))", "\n", "\n", "if", "lbl", "<", "experiment", ".", "classes_to_monitor", ":", "# OOD label numbers starts after the ID label numbers", "\n", "            ", "if", "yPred_by_monitor", "!=", "-", "1", ":", "\n", "                ", "if", "yPred", "!=", "lbl", ":", "\n", "                    ", "arrFalseNegative_ID", "[", "yPred", "]", "+=", "1", "#False negative ", "\n", "#counter_DNN+=1", "\n", "#missclassified_images_DNN.append(img)", "\n", "#missclassified_image_labels_DNN.append(yPred)          ", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "                    ", "arrTrueNegative_ID", "[", "yPred", "]", "+=", "1", "#True negatives", "\n", "", "", "else", ":", "\n", "                ", "if", "yPred", "!=", "lbl", ":", "\n", "                    ", "arrTruePositive_ID", "[", "yPred", "]", "+=", "1", "#True positives", "\n", "#counter_monitor_TP+=1", "\n", "#TP_classified_images_monitor.append(img)", "\n", "#TP_image_labels_monitor.append(yPred)", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "                    ", "arrFalsePositive_ID", "[", "yPred", "]", "+=", "1", "#False positives", "\n", "#counter_monitor+=1", "\n", "#missclassified_images_monitor.append(img)", "\n", "#missclassified_image_labels_monitor.append(yPred)", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "if", "yPred_by_monitor", "==", "yPred", ":", "\n", "                ", "arrFalseNegative_OOD", "[", "yPred", "]", ".", "append", "(", "lbl", ")", "#False negative           ", "\n", "#if yPred == lbl: ", "\n", "#arrTrueNegative_OOD[yPred] += 1 #True negatives", "\n", "", "else", ":", "\n", "                ", "arrTruePositive_OOD", "[", "yPred", "]", ".", "append", "(", "lbl", ")", "#True positives", "\n", "#if yPred == lbl: ", "\n", "#arrFalsePositive_OOD[yPred] += 1 #False positives", "\n", "", "", "'''\n        if counter_monitor_TP % 10 == 0 and counter_monitor_TP > 0:\n            plot_images(\"True positives (Monitor detected right)\", TP_classified_images_monitor, TP_image_labels_monitor, 2, 5)\n            counter_monitor_TP = 0\n            TP_classified_images_monitor = []\n            TP_image_labels_monitor = []\n        \n        if counter_monitor % 60 == 0 and counter_monitor > 0:\n            plot_images(\"False positives (Monitor misclassified)\", missclassified_images_monitor, missclassified_image_labels_monitor, missclassified_images_monitor_similarity, 6, 10)\n            counter_monitor = 0\n            missclassified_images_monitor = []\n            missclassified_image_labels_monitor = []\n        \n        if counter_DNN % 60 == 0 and counter_DNN > 0:\n            plot_images(\"False negatives (DNN misclassified)\", missclassified_images_DNN, missclassified_image_labels_DNN, 6, 10)\n            counter_DNN = 0\n            missclassified_images_DNN = []\n            missclassified_image_labels_DNN = []\n        '''", "\n", "\n", "#print(\"zeroed points:\", zeros)", "\n", "", "memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "return", "arrPred", ",", "y_test", ",", "memory", ",", "arrFalsePositive_ID", ",", "arrFalseNegative_ID", ",", "arrTruePositive_ID", ",", "arrTrueNegative_ID", ",", "arrFalseNegative_OOD", ",", "arrTruePositive_OOD", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_tree_based_act_func_tester.plot_images": [[13, 27], ["matplotlib.subplots", "range", "fig.suptitle", "matplotlib.tight_layout", "matplotlib.show", "ax.imshow", "ax.set_title", "ax.set_axis_off", "numpy.squeeze"], "function", ["None"], ["def", "plot_images", "(", "title", ",", "data", ",", "labels", ",", "similarities", ",", "num_row", ",", "num_col", ")", ":", "\n", "\n", "    ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "num_row", ",", "num_col", ",", "figsize", "=", "(", "1.5", "*", "num_col", ",", "2", "*", "num_row", ")", ")", "\n", "for", "i", "in", "range", "(", "num_row", "*", "num_col", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "ax", "=", "axes", "[", "i", "//", "num_col", ",", "i", "%", "num_col", "]", "\n", "ax", ".", "imshow", "(", "np", ".", "squeeze", "(", "data", "[", "i", "]", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", ".", "set_title", "(", "'{}-Sim={}'", ".", "format", "(", "labels", "[", "i", "]", ",", "similarities", "[", "i", "]", ")", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "pass", "\n", "", "", "fig", ".", "suptitle", "(", "title", ")", "\n", "plt", ".", "tight_layout", "(", "pad", "=", "3.0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_tree_based_act_func_tester.run": [[29, 142], ["int", "range", "psutil.Process", "pickle.load", "zip", "arrFalseNegative_ID.update", "arrTrueNegative_ID.update", "arrFalsePositive_ID.update", "arrTruePositive_ID.update", "arrFalseNegative_OOD.update", "arrTruePositive_OOD.update", "os.getpid", "open", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "arrPred.append", "pickle.load.predict", "len", "model.predict", "src.utils.util.get_activ_func", "numpy.reshape", "arrFalseNegative_OOD[].append", "arrTruePositive_OOD[].append", "psutil.Process.memory_info"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["", "def", "run", "(", "X_test", ",", "y_test", ",", "experiment", ",", "monitor", ",", "dataset_name", ")", ":", "\n", "    ", "arrPred", "=", "[", "]", "\n", "arrFalseNegative_ID", "=", "{", "}", "\n", "arrTrueNegative_ID", "=", "{", "}", "\n", "arrFalsePositive_ID", "=", "{", "}", "\n", "arrTruePositive_ID", "=", "{", "}", "\n", "\n", "arrFalseNegative_OOD", "=", "{", "}", "\n", "arrTruePositive_OOD", "=", "{", "}", "\n", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "for", "class_to_monitor", "in", "range", "(", "experiment", ".", "classes_to_monitor", ")", ":", "\n", "# ID", "\n", "        ", "arrFalseNegative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrTrueNegative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrFalsePositive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrTruePositive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "# OOD", "\n", "arrFalseNegative_OOD", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "arrTruePositive_OOD", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "\n", "", "model", "=", "experiment", ".", "model", "\n", "\n", "zeros", "=", "0", "\n", "#memory", "\n", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "counter_monitor", "=", "0", "\n", "missclassified_images_monitor", "=", "[", "]", "\n", "missclassified_image_labels_monitor", "=", "[", "]", "\n", "missclassified_images_monitor_similarity", "=", "[", "]", "\n", "\n", "counter_monitor_TP", "=", "0", "\n", "TP_classified_images_monitor", "=", "[", "]", "\n", "TP_image_labels_monitor", "=", "[", "]", "\n", "\n", "counter_DNN", "=", "0", "\n", "missclassified_images_DNN", "=", "[", "]", "\n", "missclassified_image_labels_DNN", "=", "[", "]", "\n", "\n", "# loading cluster-baed monitor", "\n", "monitor_path", "=", "monitor", ".", "monitors_folder", "+", "sep", "+", "monitor", ".", "filename", "\n", "cluster_based_monitor", "=", "pickle", ".", "load", "(", "open", "(", "monitor_path", ",", "\"rb\"", ")", ")", "\n", "\n", "for", "img", ",", "lbl", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "arrPred", ".", "append", "(", "yPred", ")", "\n", "intermediateValues", "=", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "monitor", ".", "layer_index", ")", "[", "0", "]", "\n", "\n", "yPred_by_monitor", "=", "cluster_based_monitor", ".", "predict", "(", "np", ".", "reshape", "(", "intermediateValues", ",", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "#print(np.shape(yPred_by_monitor))", "\n", "\n", "if", "lbl", "<", "experiment", ".", "classes_to_monitor", ":", "# OOD label numbers starts after the ID label numbers", "\n", "            ", "if", "yPred_by_monitor", "==", "yPred", ":", "\n", "                ", "if", "yPred", "!=", "lbl", ":", "\n", "                    ", "arrFalseNegative_ID", "[", "yPred", "]", "+=", "1", "#False negative ", "\n", "#counter_DNN+=1", "\n", "#missclassified_images_DNN.append(img)", "\n", "#missclassified_image_labels_DNN.append(yPred)          ", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "                    ", "arrTrueNegative_ID", "[", "yPred", "]", "+=", "1", "#True negatives", "\n", "", "", "else", ":", "\n", "                ", "if", "yPred", "!=", "lbl", ":", "\n", "                    ", "arrTruePositive_ID", "[", "yPred", "]", "+=", "1", "#True positives", "\n", "#counter_monitor_TP+=1", "\n", "#TP_classified_images_monitor.append(img)", "\n", "#TP_image_labels_monitor.append(yPred)", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "                    ", "arrFalsePositive_ID", "[", "yPred", "]", "+=", "1", "#False positives", "\n", "#counter_monitor+=1", "\n", "#missclassified_images_monitor.append(img)", "\n", "#missclassified_image_labels_monitor.append(yPred)", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "if", "yPred_by_monitor", "==", "yPred", ":", "\n", "                ", "arrFalseNegative_OOD", "[", "yPred", "]", ".", "append", "(", "lbl", ")", "#False negative           ", "\n", "#if yPred == lbl: ", "\n", "#arrTrueNegative_OOD[yPred] += 1 #True negatives", "\n", "", "else", ":", "\n", "                ", "arrTruePositive_OOD", "[", "yPred", "]", ".", "append", "(", "lbl", ")", "#True positives", "\n", "#if yPred == lbl: ", "\n", "#arrFalsePositive_OOD[yPred] += 1 #False positives", "\n", "", "", "'''\n        if counter_monitor_TP % 10 == 0 and counter_monitor_TP > 0:\n            plot_images(\"True positives (Monitor detected right)\", TP_classified_images_monitor, TP_image_labels_monitor, 2, 5)\n            counter_monitor_TP = 0\n            TP_classified_images_monitor = []\n            TP_image_labels_monitor = []\n        \n        if counter_monitor % 60 == 0 and counter_monitor > 0:\n            plot_images(\"False positives (Monitor misclassified)\", missclassified_images_monitor, missclassified_image_labels_monitor, missclassified_images_monitor_similarity, 6, 10)\n            counter_monitor = 0\n            missclassified_images_monitor = []\n            missclassified_image_labels_monitor = []\n        \n        if counter_DNN % 60 == 0 and counter_DNN > 0:\n            plot_images(\"False negatives (DNN misclassified)\", missclassified_images_DNN, missclassified_image_labels_DNN, 6, 10)\n            counter_DNN = 0\n            missclassified_images_DNN = []\n            missclassified_image_labels_DNN = []\n        '''", "\n", "\n", "#print(\"zeroed points:\", zeros)", "\n", "", "memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "return", "arrPred", ",", "y_test", ",", "memory", ",", "arrFalsePositive_ID", ",", "arrFalseNegative_ID", ",", "arrTruePositive_ID", ",", "arrTrueNegative_ID", ",", "arrFalseNegative_OOD", ",", "arrTruePositive_OOD", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_knn_act_func_tester.plot_images": [[13, 27], ["matplotlib.subplots", "range", "fig.suptitle", "matplotlib.tight_layout", "matplotlib.show", "ax.imshow", "ax.set_title", "ax.set_axis_off", "numpy.squeeze"], "function", ["None"], ["def", "plot_images", "(", "title", ",", "data", ",", "labels", ",", "similarities", ",", "num_row", ",", "num_col", ")", ":", "\n", "\n", "    ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "num_row", ",", "num_col", ",", "figsize", "=", "(", "1.5", "*", "num_col", ",", "2", "*", "num_row", ")", ")", "\n", "for", "i", "in", "range", "(", "num_row", "*", "num_col", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "ax", "=", "axes", "[", "i", "//", "num_col", ",", "i", "%", "num_col", "]", "\n", "ax", ".", "imshow", "(", "np", ".", "squeeze", "(", "data", "[", "i", "]", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", ".", "set_title", "(", "'{}-Sim={}'", ".", "format", "(", "labels", "[", "i", "]", ",", "similarities", "[", "i", "]", ")", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "pass", "\n", "", "", "fig", ".", "suptitle", "(", "title", ")", "\n", "plt", ".", "tight_layout", "(", "pad", "=", "3.0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.testers.dnn_knn_act_func_tester.run": [[29, 153], ["int", "range", "psutil.Process", "pickle.load", "zip", "arrFalseNegative_ID.update", "arrTrueNegative_ID.update", "arrFalsePositive_ID.update", "arrTruePositive_ID.update", "arrFalseNegative_OOD.update", "arrTruePositive_OOD.update", "os.getpid", "pickle.load", "open", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "arrPred.append", "pickle.load.predict", "len", "open", "model.predict", "src.utils.util.get_activ_func", "pickle.load.transform", "numpy.reshape", "arrFalseNegative_OOD[].append", "arrTruePositive_OOD[].append", "psutil.Process.memory_info"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["", "def", "run", "(", "X_test", ",", "y_test", ",", "experiment", ",", "monitor", ",", "dataset_name", ")", ":", "\n", "    ", "arrPred", "=", "[", "]", "\n", "arrFalseNegative_ID", "=", "{", "}", "\n", "arrTrueNegative_ID", "=", "{", "}", "\n", "arrFalsePositive_ID", "=", "{", "}", "\n", "arrTruePositive_ID", "=", "{", "}", "\n", "\n", "arrFalseNegative_OOD", "=", "{", "}", "\n", "arrTruePositive_OOD", "=", "{", "}", "\n", "\n", "#3 variables for log (optional)", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "for", "class_to_monitor", "in", "range", "(", "experiment", ".", "classes_to_monitor", ")", ":", "\n", "# ID", "\n", "        ", "arrFalseNegative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrTrueNegative_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrFalsePositive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "arrTruePositive_ID", ".", "update", "(", "{", "class_to_monitor", ":", "0", "}", ")", "\n", "# OOD", "\n", "arrFalseNegative_OOD", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "arrTruePositive_OOD", ".", "update", "(", "{", "class_to_monitor", ":", "[", "]", "}", ")", "\n", "\n", "", "model", "=", "experiment", ".", "model", "\n", "\n", "zeros", "=", "0", "\n", "#memory", "\n", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "counter_monitor", "=", "0", "\n", "missclassified_images_monitor", "=", "[", "]", "\n", "missclassified_image_labels_monitor", "=", "[", "]", "\n", "missclassified_images_monitor_similarity", "=", "[", "]", "\n", "\n", "counter_monitor_TP", "=", "0", "\n", "TP_classified_images_monitor", "=", "[", "]", "\n", "TP_image_labels_monitor", "=", "[", "]", "\n", "\n", "counter_DNN", "=", "0", "\n", "missclassified_images_DNN", "=", "[", "]", "\n", "missclassified_image_labels_DNN", "=", "[", "]", "\n", "\n", "# if you want to scale act func values ", "\n", "scaler", "=", "None", "\n", "if", "monitor", ".", "use_scaler", ":", "\n", "        ", "monitor", ".", "filename", "=", "'(scaled_input_version)'", "+", "monitor", ".", "filename", "\n", "scaler_file", "=", "monitor", ".", "monitors_folder", "+", "'saved_scaler_'", "+", "monitor", ".", "filename", "\n", "scaler", "=", "pickle", ".", "load", "(", "open", "(", "monitor_path", ",", "\"rb\"", ")", ")", "\n", "\n", "# loading cluster-based monitor", "\n", "", "monitor_path", "=", "monitor", ".", "monitors_folder", "+", "sep", "+", "monitor", ".", "filename", "\n", "cluster_based_monitor", "=", "pickle", ".", "load", "(", "open", "(", "monitor_path", ",", "\"rb\"", ")", ")", "\n", "\n", "for", "img", ",", "lbl", "in", "zip", "(", "X_test", ",", "y_test", ")", ":", "\n", "\n", "        ", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "arrPred", ".", "append", "(", "yPred", ")", "\n", "intermediateValues", "=", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "monitor", ".", "layer_index", ")", "[", "0", "]", "\n", "\n", "# if you want to scale act func values", "\n", "if", "scaler", "!=", "None", ":", "\n", "            ", "intermediateValues", "=", "scaler", ".", "transform", "(", "intermediateValues", ")", "\n", "\n", "", "yPred_by_monitor", "=", "cluster_based_monitor", ".", "predict", "(", "np", ".", "reshape", "(", "intermediateValues", ",", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "#print(np.shape(yPred_by_monitor))", "\n", "\n", "if", "lbl", "<", "experiment", ".", "classes_to_monitor", ":", "# OOD label numbers starts after the ID label numbers", "\n", "            ", "if", "yPred_by_monitor", "==", "yPred", ":", "\n", "                ", "if", "yPred", "!=", "lbl", ":", "\n", "                    ", "arrFalseNegative_ID", "[", "yPred", "]", "+=", "1", "#False negative ", "\n", "#counter_DNN+=1", "\n", "#missclassified_images_DNN.append(img)", "\n", "#missclassified_image_labels_DNN.append(yPred)          ", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "                    ", "arrTrueNegative_ID", "[", "yPred", "]", "+=", "1", "#True negatives", "\n", "", "", "else", ":", "\n", "                ", "if", "yPred", "!=", "lbl", ":", "\n", "                    ", "arrTruePositive_ID", "[", "yPred", "]", "+=", "1", "#True positives", "\n", "#counter_monitor_TP+=1", "\n", "#TP_classified_images_monitor.append(img)", "\n", "#TP_image_labels_monitor.append(yPred)", "\n", "", "if", "yPred", "==", "lbl", ":", "\n", "                    ", "arrFalsePositive_ID", "[", "yPred", "]", "+=", "1", "#False positives", "\n", "#counter_monitor+=1", "\n", "#missclassified_images_monitor.append(img)", "\n", "#missclassified_image_labels_monitor.append(yPred)", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "if", "yPred_by_monitor", "==", "yPred", ":", "\n", "                ", "arrFalseNegative_OOD", "[", "yPred", "]", ".", "append", "(", "lbl", ")", "#False negative           ", "\n", "#if yPred == lbl: ", "\n", "#arrTrueNegative_OOD[yPred] += 1 #True negatives", "\n", "", "else", ":", "\n", "                ", "arrTruePositive_OOD", "[", "yPred", "]", ".", "append", "(", "lbl", ")", "#True positives", "\n", "#if yPred == lbl: ", "\n", "#arrFalsePositive_OOD[yPred] += 1 #False positives", "\n", "", "", "'''\n        if counter_monitor_TP % 10 == 0 and counter_monitor_TP > 0:\n            plot_images(\"True positives (Monitor detected right)\", TP_classified_images_monitor, TP_image_labels_monitor, 2, 5)\n            counter_monitor_TP = 0\n            TP_classified_images_monitor = []\n            TP_image_labels_monitor = []\n        \n        if counter_monitor % 60 == 0 and counter_monitor > 0:\n            plot_images(\"False positives (Monitor misclassified)\", missclassified_images_monitor, missclassified_image_labels_monitor, missclassified_images_monitor_similarity, 6, 10)\n            counter_monitor = 0\n            missclassified_images_monitor = []\n            missclassified_image_labels_monitor = []\n        \n        if counter_DNN % 60 == 0 and counter_DNN > 0:\n            plot_images(\"False negatives (DNN misclassified)\", missclassified_images_DNN, missclassified_image_labels_DNN, 6, 10)\n            counter_DNN = 0\n            missclassified_images_DNN = []\n            missclassified_image_labels_DNN = []\n        '''", "\n", "\n", "#print(\"zeroed points:\", zeros)", "\n", "", "memory", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "\n", "\n", "return", "arrPred", ",", "y_test", ",", "memory", ",", "arrFalsePositive_ID", ",", "arrFalseNegative_ID", ",", "arrTruePositive_ID", ",", "arrTrueNegative_ID", ",", "arrFalseNegative_OOD", ",", "arrTruePositive_OOD", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.dnn_baseline_evaluator.save_results": [[13, 24], ["print", "src.threats.novelty_detection.config.load_file_names", "src.utils.metrics.save_results", "os.makedirs", "src.utils.metrics.plot_pos_neg_rate_stacked_bars"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.dnn_baseline_evaluator.save_results", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.metrics.plot_pos_neg_rate_stacked_bars"], ["def", "save_results", "(", "experiment", ",", "arr_readouts", ",", "plot", "=", "False", ")", ":", "\n", "\t", "print", "(", "\"saving experiments\"", ",", "experiment", ".", "name", ")", "\n", "filenames", "=", "config_ND", ".", "load_file_names", "(", ")", "\n", "csvs_folder_path", "=", "'src'", "+", "sep", "+", "'tests'", "+", "sep", "+", "'results'", "+", "sep", "+", "'csv'", "+", "sep", "+", "experiment", ".", "sub_field", "+", "sep", "+", "experiment", ".", "name", "+", "sep", "\n", "img_folder_path", "=", "'src'", "+", "sep", "+", "'tests'", "+", "sep", "+", "'results'", "+", "sep", "+", "'img'", "+", "sep", "+", "experiment", ".", "sub_field", "+", "sep", "+", "experiment", ".", "name", "+", "sep", "\n", "\n", "metrics", ".", "save_results", "(", "arr_readouts", ",", "csvs_folder_path", ",", "filenames", ",", "','", ")", "\n", "\n", "if", "plot", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "img_folder_path", ",", "exist_ok", "=", "True", ")", "\n", "metrics", ".", "plot_pos_neg_rate_stacked_bars", "(", "experiment", ".", "name", ",", "arr_readouts", ",", "img_folder_path", "+", "'all_images.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.dnn_baseline_evaluator.run_evaluation": [[26, 76], ["range", "print", "time.perf_counter", "experiment.tester.run", "time.perf_counter", "arr_acc.append", "arr_t.append", "arr_mem.append", "arr_f1.append", "arr_mcc.append", "arr_precision.append", "arr_recall.append", "neptune.create_experiment", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "src.utils.metrics.evaluate", "src.utils.metrics.evaluate", "src.utils.metrics.evaluate", "src.utils.metrics.evaluate", "src.utils.metrics.evaluate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate"], ["", "", "def", "run_evaluation", "(", "experiment", ",", "repetitions", ",", "save_experiments", ")", ":", "\n", "\t", "monitor_name", "=", "'No monitor'", "\n", "arr_acc", "=", "[", "]", "#accuracy", "\n", "arr_t", "=", "[", "]", "#time", "\n", "arr_mem", "=", "[", "]", "#memory", "\n", "arr_f1", "=", "[", "]", "#F1", "\n", "arr_mcc", "=", "[", "]", "#MCC", "\n", "arr_precision", "=", "[", "]", "\n", "arr_recall", "=", "[", "]", "\n", "\n", "dataset", "=", "experiment", ".", "dataset", "\n", "\n", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "\t\t", "lbl_ypred_ood", "=", "[", "[", "]", ",", "[", "]", "]", "#ground truth and predicted", "\n", "\n", "print", "(", "\"Evaluating {}: {} of {} repetitions...\\n\"", ".", "format", "(", "experiment", ".", "name", ",", "i", "+", "1", ",", "repetitions", ")", ")", "\n", "\n", "ini", "=", "timer", "(", ")", "\n", "arrPred", ",", "arrLabel", ",", "memory", "=", "experiment", ".", "tester", ".", "run", "(", "\n", "dataset", ".", "X", ",", "dataset", ".", "y", ",", "experiment", ",", "dataset", ".", "dataset_name", ")", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "arr_acc", ".", "append", "(", "metrics", ".", "evaluate", "(", "arrLabel", ",", "arrPred", ",", "'accuracy'", ")", ")", "\n", "arr_t", ".", "append", "(", "end", "-", "ini", ")", "\n", "arr_mem", ".", "append", "(", "memory", ")", "\n", "arr_f1", ".", "append", "(", "metrics", ".", "evaluate", "(", "arrLabel", ",", "arrPred", ",", "'F1'", ")", ")", "\n", "arr_mcc", ".", "append", "(", "metrics", ".", "evaluate", "(", "arrLabel", ",", "arrPred", ",", "'MCC'", ")", ")", "\n", "arr_precision", ".", "append", "(", "metrics", ".", "evaluate", "(", "arrLabel", ",", "arrPred", ",", "'precision'", ")", ")", "\n", "arr_recall", ".", "append", "(", "metrics", ".", "evaluate", "(", "arrLabel", ",", "arrPred", ",", "'recall'", ")", ")", "\n", "\n", "", "'''\n\tprint('Accuracy', np.mean(arr_acc)) \n\tprint('Process time', np.mean(arr_t)) \n\tprint('Memory', np.mean(arr_mem))\n\tprint('F1', np.mean(arr_f1))\n\tprint('MCC', np.mean(arr_mcc))\n\tprint('precision', np.mean(arr_precision))\n\tprint('recall', np.mean(arr_recall))\n\t'''", "\n", "if", "save_experiments", ":", "\n", "\t\t", "neptune", ".", "create_experiment", "(", "'hyper_parameter/{}'", ".", "format", "(", "\"baseline\"", ")", ")", "\n", "neptune", ".", "log_metric", "(", "'Accuracy'", ",", "np", ".", "mean", "(", "arr_acc", ")", ")", "\n", "neptune", ".", "log_metric", "(", "'Process time'", ",", "np", ".", "mean", "(", "arr_t", ")", ")", "\n", "neptune", ".", "log_metric", "(", "'Memory'", ",", "np", ".", "mean", "(", "arr_mem", ")", ")", "\n", "neptune", ".", "log_metric", "(", "'F1'", ",", "np", ".", "mean", "(", "arr_f1", ")", ")", "\n", "neptune", ".", "log_metric", "(", "'MCC'", ",", "np", ".", "mean", "(", "arr_mcc", ")", ")", "\n", "neptune", ".", "log_metric", "(", "'precision'", ",", "np", ".", "mean", "(", "arr_precision", ")", ")", "\n", "neptune", ".", "log_metric", "(", "'recall'", ",", "np", ".", "mean", "(", "arr_recall", ")", ")", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.dnn_baseline_evaluator.evaluate": [[78, 103], ["pathos.multiprocessing.ProcessingPool", "print", "print", "dnn_baseline_evaluator.run_evaluation", "processes_pool.append", "process.get", "pathos.multiprocessing.ProcessingPool.apipe"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.run_evaluation"], ["", "def", "evaluate", "(", "repetitions", ",", "experiment", ",", "parallel_execution", ",", "save_experiments", ")", ":", "\n", "\t", "cores", "=", "6", "\n", "arr_readouts", "=", "[", "]", "\n", "processes_pool", "=", "[", "]", "\n", "success", "=", "False", "\n", "\n", "if", "parallel_execution", ":", "\n", "\t\t", "pool", "=", "Pool", "(", "cores", ")", "\n", "timeout", "=", "1000", "#* len(experiment.monitors)", "\n", "print", "(", "\"\\nParallel execution with {} cores. Max {} seconds to run each experiment:\"", ".", "format", "(", "cores", ",", "timeout", ")", ")", "\n", "\n", "for", "monitor", "in", "experiment", ".", "monitors", ":", "\n", "\t\t\t", "processes_pool", ".", "append", "(", "pool", ".", "apipe", "(", "run_evaluation", ",", "experiment", ",", "repetitions", ",", "save_experiments", ")", ")", "\n", "\n", "", "for", "process", "in", "processes_pool", ":", "\n", "\t\t\t", "success", "=", "process", ".", "get", "(", "timeout", "=", "timeout", ")", "\n", "#arr_readouts.append(readout)", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"\\nserial execution\"", ")", "\n", "success", "=", "run_evaluation", "(", "experiment", ",", "repetitions", ",", "save_experiments", ")", "\n", "\n", "#print('len(arr_readouts)', len(arr_readouts))", "\n", "#if save:", "\n", "#save_results(experiment, arr_readouts, plot=False)\t", "\n", "", "return", "success", "\n", "#return arr_readouts", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.run_evaluation": [[15, 61], ["print", "time.perf_counter", "experiment.tester.run", "time.perf_counter", "print", "neptune.create_experiment", "src.utils.util.save_metrics_neptune", "src.utils.util.save_artifact_neptune", "src.utils.util.save_artifact_neptune", "src.utils.util.save_artifact_neptune", "src.utils.util.save_artifact_neptune", "src.utils.util.save_artifact_neptune", "src.utils.util.save_artifact_neptune", "sum", "sum", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.save_metrics_neptune", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.save_artifact_neptune", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.save_artifact_neptune", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.save_artifact_neptune", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.save_artifact_neptune", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.save_artifact_neptune", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.save_artifact_neptune"], ["def", "run_evaluation", "(", "monitor", ",", "experiment", ",", "repetitions", ",", "save_experiments", ")", ":", "\n", "\t", "arr_pos_neg_ID_pred", ",", "arr_pos_neg_ID_true", "=", "None", ",", "None", "\n", "arr_pos_neg_OOD_true", ",", "arr_pos_neg_OOD_pred", "=", "None", ",", "None", "\n", "arr_t", "=", "[", "]", "#time", "\n", "arr_mem", "=", "[", "]", "#memory", "\n", "\n", "dataset", "=", "experiment", ".", "dataset", "\n", "\n", "print", "(", "\"Evaluating {} for {} with {} ...\\n\"", ".", "format", "(", "experiment", ".", "name", ",", "dataset", ".", "dataset_ID_name", ",", "dataset", ".", "modification", ")", ")", "\n", "\n", "ini", "=", "timer", "(", ")", "\n", "readout", "=", "experiment", ".", "tester", ".", "run", "(", "dataset", ",", "experiment", ",", "monitor", ")", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "# general readouts", "\n", "readout", ".", "total_time", "=", "end", "-", "ini", "\n", "\n", "# printing some results", "\n", "print", "(", "'Results:\\n Detected {} OOD instances of {}'", ".", "format", "(", "sum", "(", "readout", ".", "arr_detection_SM", ")", ",", "sum", "(", "readout", ".", "arr_detection_true", ")", ")", ")", "\n", "\n", "if", "save_experiments", ":", "\n", "\t\t", "tag1", "=", "monitor", ".", "monitor_name", "\n", "tag2", "=", "'ID = {}'", ".", "format", "(", "dataset", ".", "dataset_ID_name", ")", "\n", "tag3", "=", "'OOD = {}'", ".", "format", "(", "dataset", ".", "dataset_OOD_name", ")", "\n", "#tag4 = 'tau = {}'.format(monitor.tau)", "\n", "\n", "neptune", ".", "create_experiment", "(", "name", "=", "'{}'", ".", "format", "(", "experiment", ".", "name", ")", ",", "\n", "tags", "=", "[", "tag1", ",", "tag2", ",", "tag3", "]", ",", "\n", "params", "=", "experiment", ".", "PARAMS", ")", "\n", "\n", "util", ".", "save_metrics_neptune", "(", "\n", "neptune", ",", "\n", "[", "'ml_time'", ",", "'sm_time'", ",", "'total_time'", ",", "'total_memory'", "]", ",", "\n", "[", "np", ".", "sum", "(", "readout", ".", "ML_time", ")", ",", "np", ".", "sum", "(", "readout", ".", "SM_time", ")", ",", "readout", ".", "total_time", ",", "readout", ".", "total_memory", "]", "\n", ")", "\n", "\n", "# ML readouts", "\n", "util", ".", "save_artifact_neptune", "(", "neptune", ",", "'arr_classification_pred.npy'", ",", "readout", ".", "arr_classification_pred", ")", "\n", "util", ".", "save_artifact_neptune", "(", "neptune", ",", "'arr_classification_true.npy'", ",", "readout", ".", "arr_classification_true", ")", "\n", "# SM readouts", "\n", "util", ".", "save_artifact_neptune", "(", "neptune", ",", "'arr_detection_SM.npy'", ",", "readout", ".", "arr_detection_SM", ")", "\n", "util", ".", "save_artifact_neptune", "(", "neptune", ",", "'arr_detection_true.npy'", ",", "readout", ".", "arr_detection_true", ")", "\n", "util", ".", "save_artifact_neptune", "(", "neptune", ",", "'arr_reaction_SM.npy'", ",", "readout", ".", "arr_reaction_SM", ")", "\n", "util", ".", "save_artifact_neptune", "(", "neptune", ",", "'arr_reaction_true.npy'", ",", "readout", ".", "arr_reaction_true", ")", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.evaluate": [[63, 85], ["pathos.multiprocessing.ProcessingPool", "print", "print", "processes_pool.append", "process.get", "ood_monitor_evaluator.run_evaluation", "pathos.multiprocessing.ProcessingPool.apipe"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.evaluators.ood_monitor_evaluator.run_evaluation"], ["", "def", "evaluate", "(", "repetitions", ",", "experiment", ",", "parallel_execution", ",", "save_experiments", ")", ":", "\n", "\t", "cores", "=", "6", "\n", "arr_readouts", "=", "[", "]", "\n", "processes_pool", "=", "[", "]", "\n", "success", "=", "False", "\n", "\n", "if", "parallel_execution", ":", "\n", "\t\t", "pool", "=", "Pool", "(", "cores", ")", "\n", "timeout", "=", "1000", "#* len(experiment.monitors)", "\n", "print", "(", "\"\\nParallel execution with {} cores. Max {} seconds to run each experiment:\"", ".", "format", "(", "cores", ",", "timeout", ")", ")", "\n", "\n", "for", "monitor", "in", "experiment", ".", "monitors", ":", "\n", "\t\t\t", "processes_pool", ".", "append", "(", "pool", ".", "apipe", "(", "run_evaluation", ",", "monitor", ",", "experiment", ",", "repetitions", ",", "save_experiments", ")", ")", "\n", "\n", "", "for", "process", "in", "processes_pool", ":", "\n", "\t\t\t", "success", "=", "process", ".", "get", "(", "timeout", "=", "timeout", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"\\nserial execution\"", ")", "\n", "for", "monitor", "in", "experiment", ".", "monitors", ":", "\n", "\t\t\t", "success", "=", "run_evaluation", "(", "monitor", ",", "experiment", ",", "repetitions", ",", "save_experiments", ")", "\n", "\n", "", "", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.act_func_based_monitor.build_monitor": [[83, 108], ["int", "zip", "numpy.asarray", "numpy.argmax", "len", "src.utils.util.loading_info", "model.predict", "monitors_by_class[].arrWeights.append", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["def", "build_monitor", "(", "monitors_by_class", ",", "model", ",", "X", ",", "y", ",", "save", ",", "params", ")", ":", "\n", "\t", "verbose", "=", "params", "[", "'verbose'", "]", "\n", "backend", "=", "params", "[", "'backend'", "]", "\n", "trained_monitor", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "#print('np.shape(X)', np.shape(X), X)", "\n", "#print('np.shape(y)', np.shape(y), y)", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "\t\t", "if", "verbose", ":", "\n", "\t\t\t", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "if", "yPred", "==", "lab", ":", "\n", "\t\t\t", "monitors_by_class", "[", "yPred", "]", ".", "arrWeights", ".", "append", "(", "\n", "util", ".", "get_activ_func", "(", "backend", ",", "model", ",", "img", ",", "layerIndex", "=", "monitors_by_class", "[", "yPred", "]", ".", "layer_index", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "", "return", "monitors_by_class", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.act_func_based_monitor.run": [[110, 134], ["build_monitor.items", "build_monitor_without_classify", "act_func_based_monitor.build_monitor", "monitor.method", "os.path.join", "print", "os.makedirs", "pickle.dump", "print", "open"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.act_func_gradient_based_monitor.build_monitor_without_classify", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor"], ["", "def", "run", "(", "monitors_by_class", ",", "model", ",", "X", ",", "y", ",", "save", ",", "params", ")", ":", "\n", "\n", "\t", "if", "params", "[", "'use_alternative_monitor'", "]", "==", "True", ":", "\n", "# building monitor with labels", "\n", "\t\t", "monitors_by_class", "=", "build_monitor_without_classify", "(", "monitors_by_class", ",", "model", ",", "X", ",", "y", ",", "params", ")", "\n", "monitor", ".", "filename", "+=", "'_2'", "\n", "", "else", ":", "\n", "# building monitor with right predictions", "\n", "\t\t", "monitors_by_class", "=", "build_monitor", "(", "monitors_by_class", ",", "model", ",", "X", ",", "y", ",", "save", ",", "params", ")", "\n", "\n", "", "for", "classe", ",", "monitor", "in", "monitors_by_class", ".", "items", "(", ")", ":", "\n", "\n", "\t\t", "trained_monitor", "=", "monitor", ".", "method", "(", "monitor", ",", "save", ")", "\n", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "monitor", ".", "monitors_folder", ",", "monitor", ".", "filename", ")", "\n", "\n", "if", "save", ":", "\n", "\t\t\t", "print", "(", "\"Saving monitor in\"", ",", "file_path", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "trained_monitor", ",", "open", "(", "file_path", ",", "\"wb\"", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"Monitor will not be saved\"", ")", "\n", "\n", "", "", "return", "True", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.kde_based_monitoring.crop_center": [[12, 17], ["None"], "function", ["None"], ["def", "crop_center", "(", "img", ",", "cropx", ",", "cropy", ")", ":", "\n", "\t", "y", ",", "x", "=", "28", ",", "28", "\n", "startx", "=", "x", "//", "2", "-", "(", "cropx", "//", "2", ")", "\n", "starty", "=", "y", "//", "2", "-", "(", "cropy", "//", "2", ")", "\n", "return", "img", "[", "starty", ":", "starty", "+", "cropy", ",", "startx", ":", "startx", "+", "cropx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.kde_based_monitoring.get_pdf_cuttoff": [[19, 75], ["src.Classes.dataset.Dataset", "src.Classes.dataset.Dataset.load_dataset", "numpy.argmax", "numpy.argmax", "numpy.vstack", "numpy.hstack", "range", "numpy.where", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "numpy.exp", "arr_PCA_by_class.append", "arr_kde_by_class.append", "numpy.asarray", "np.asarray.flatten().reshape", "numpy.logspace", "sklearn.neighbors.KernelDensity", "kde.score_samples", "arr_pdf_cuttoff_by_class.append", "kde_based_monitoring.crop_center", "numpy.min", "arr_pdf_cuttoff_by_class.append", "np.asarray.append", "np.asarray.append", "np.asarray.flatten", "numpy.max", "skimage.color.rgb2gray"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.dataset.Dataset.load_dataset", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.kde_based_monitoring.crop_center"], ["", "def", "get_pdf_cuttoff", "(", "dataset_name", ",", "classes_to_monitor", ",", "cutoff", "=", "'minimum'", ",", "crop", "=", "True", ",", "grayscale", "=", "False", ")", ":", "\n", "\t", "arr_pdf_cuttoff_by_class", "=", "[", "]", "\n", "arr_PCA_by_class", "=", "[", "]", "\n", "arr_kde_by_class", "=", "[", "]", "\n", "\n", "dataset", "=", "Dataset", "(", "dataset_name", ")", "\n", "X", ",", "y", ",", "x_val", ",", "y_val", "=", "dataset", ".", "load_dataset", "(", "mode", "=", "'train'", ")", "\n", "y", "=", "np", ".", "argmax", "(", "y", ",", "axis", "=", "1", ")", "#if using training data", "\n", "y_val", "=", "np", ".", "argmax", "(", "y_val", ",", "axis", "=", "1", ")", "#if using training data", "\n", "\n", "X", "=", "np", ".", "vstack", "(", "[", "X", ",", "x_val", "]", ")", "\n", "y", "=", "np", ".", "hstack", "(", "[", "y", ",", "y_val", "]", ")", "\n", "\n", "for", "class_to_monitor", "in", "range", "(", "classes_to_monitor", ")", ":", "\n", "\t\t", "X_croped", "=", "[", "]", "\n", "indices", "=", "np", ".", "where", "(", "y", "==", "class_to_monitor", ")", "\n", "#data_reshaped = X[indices].flatten().reshape(X[indices].shape[0], -1)", "\n", "\n", "if", "crop", ":", "\n", "#crop all images in the center", "\n", "\t\t\t", "for", "img", "in", "X", "[", "indices", "]", ":", "\n", "\t\t\t\t", "imc", "=", "crop_center", "(", "img", ",", "12", ",", "12", ")", "\n", "if", "grayscale", ":", "\n", "\t\t\t\t\t", "X_croped", ".", "append", "(", "rgb2gray", "(", "imc", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "X_croped", ".", "append", "(", "imc", ")", "\n", "\n", "", "", "X_croped", "=", "np", ".", "asarray", "(", "X_croped", ")", "\n", "data_reshaped", "=", "X_croped", ".", "flatten", "(", ")", ".", "reshape", "(", "X_croped", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "# PCA fit for training", "\n", "", "pca", "=", "PCA", "(", "n_components", "=", "20", ",", "whiten", "=", "False", ")", "\n", "data_reshaped", "=", "pca", ".", "fit_transform", "(", "data_reshaped", ")", "\n", "\n", "# use grid search cross-validation to optimize the bandwidth", "\n", "params", "=", "{", "'bandwidth'", ":", "np", ".", "logspace", "(", "-", "1", ",", "1", ",", "20", ")", "}", "\n", "grid", "=", "GridSearchCV", "(", "KernelDensity", "(", ")", ",", "params", ")", "\n", "grid", ".", "fit", "(", "data_reshaped", ")", "\n", "\n", "#print(\"best bandwidth: {0}\".format(grid.best_estimator_.bandwidth))", "\n", "\n", "# use the best estimator to compute the kernel density estimate", "\n", "kde", "=", "grid", ".", "best_estimator_", "\n", "\n", "pdfs", "=", "np", ".", "exp", "(", "kde", ".", "score_samples", "(", "data_reshaped", ")", ")", "\n", "#print(\"printing pdfs cutoff: min ({}) and max ({}) for the class {}\".format(np.min(pdfs), np.max(pdfs), class_to_monitor))", "\n", "\n", "if", "cutoff", "==", "'minimum'", ":", "\n", "\t\t\t", "arr_pdf_cuttoff_by_class", ".", "append", "(", "np", ".", "min", "(", "pdfs", ")", ")", "\n", "", "elif", "cutoff", "==", "'maximum'", ":", "\n", "\t\t\t", "arr_pdf_cuttoff_by_class", ".", "append", "(", "np", ".", "max", "(", "pdfs", ")", ")", "\n", "\n", "", "arr_PCA_by_class", ".", "append", "(", "pca", ")", "\n", "arr_kde_by_class", ".", "append", "(", "kde", ")", "\n", "\n", "", "return", "arr_pdf_cuttoff_by_class", ",", "arr_kde_by_class", ",", "arr_PCA_by_class", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.clustered_act_function_monitor.build_monitor": [[11, 31], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "len", "numpy.where", "model.predict", "arrWeights.append", "arrLabels.append", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["def", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", ":", "\n", "    ", "arrWeights", "=", "[", "]", "\n", "arrLabels", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "        ", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "if", "yPred", "==", "lab", ":", "\n", "            ", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "arrLabels", ".", "append", "(", "lab", ")", "\n", "\n", "", "", "return", "arrWeights", ",", "arrLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.clustered_act_function_monitor.build_monitor_2": [[33, 52], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "arrWeights.append", "arrLabels.append", "len", "numpy.where", "model.predict", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["", "def", "build_monitor_2", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", ":", "\n", "    ", "arrWeights", "=", "[", "]", "\n", "arrLabels", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "        ", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "arrLabels", ".", "append", "(", "lab", ")", "\n", "\n", "", "return", "arrWeights", ",", "arrLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.clustered_act_function_monitor.run": [[54, 98], ["clustered_act_function_monitor.build_monitor", "sklearn.preprocessing.StandardScaler().fit", "print", "os.makedirs", "pickle.dump", "StandardScaler().fit.transform", "sklearn.neighbors.KNeighborsClassifier().fit", "print", "os.makedirs", "pickle.dump", "open", "clustered_act_function_monitor.build_monitor_2", "clustered_act_function_monitor.build_monitor", "numpy.ravel", "hdbscan.HDBSCAN().fit", "open", "sklearn.preprocessing.StandardScaler", "sklearn.neighbors.KNeighborsClassifier", "hdbscan.HDBSCAN"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor_2", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor"], ["", "def", "run", "(", "monitor", ",", "model", ",", "X", ",", "y", ",", "save", ")", ":", "\n", "    ", "trained_monitor", "=", "None", "\n", "scaler", "=", "None", "\n", "layer_index", "=", "monitor", ".", "layer_index", "\n", "\n", "#building monitor with training set", "\n", "arrWeights", ",", "arrLabels", "=", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", "\n", "#print(\"arrWeights:\", np.shape(arrWeights))", "\n", "#print(\"arrLabels:\", np.shape(arrLabels))", "\n", "if", "monitor", ".", "use_scaler", ":", "\n", "        ", "scaler", "=", "StandardScaler", "(", ")", ".", "fit", "(", "arrWeights", ")", "\n", "scaler_file", "=", "monitor", ".", "monitors_folder", "+", "'saved_scaler_'", "+", "monitor", ".", "filename", "\n", "\n", "print", "(", "\"Saving standard scaler object in\"", ",", "scaler_file", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "scaler", ",", "open", "(", "scaler_file", ",", "\"wb\"", ")", ")", "\n", "\n", "arrWeights", "=", "scaler", ".", "transform", "(", "arrWeights", ")", "\n", "monitor", ".", "filename", "=", "'(scaled_input_version)'", "+", "monitor", ".", "filename", "\n", "\n", "", "if", "monitor", ".", "method", "==", "\"knn\"", ":", "\n", "        ", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "            ", "arrWeights", ",", "arrLabels", "=", "build_monitor_2", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", "\n", "", "else", ":", "\n", "            ", "arrWeights", ",", "arrLabels", "=", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", "\n", "\n", "", "trained_monitor", "=", "KNeighborsClassifier", "(", "n_neighbors", "=", "monitor", ".", "n_clusters", ")", ".", "fit", "(", "arrWeights", ",", "np", ".", "ravel", "(", "arrLabels", ")", ")", "\n", "\n", "", "elif", "monitor", ".", "method", "==", "\"hdbscan\"", ":", "\n", "        ", "trained_monitor", "=", "hdbscan", ".", "HDBSCAN", "(", "min_cluster_size", "=", "monitor", ".", "min_samples", ",", "prediction_data", "=", "True", ")", ".", "fit", "(", "arrWeights", ")", "\n", "\n", "", "file_path", "=", "None", "\n", "\n", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "        ", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "+", "'_2'", "\n", "", "else", ":", "\n", "        ", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "\n", "\n", "", "if", "save", ":", "\n", "        ", "print", "(", "\"Saving monitor in\"", ",", "file_path", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "trained_monitor", ",", "open", "(", "file_path", ",", "\"wb\"", ")", ")", "\n", "\n", "", "return", "trained_monitor", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.act_func_gradient_based_monitor.compute_loss": [[10, 17], ["tensorflow.keras.Model", "keras.Model.", "tensorflow.reduce_mean"], "function", ["None"], ["def", "compute_loss", "(", "input_image", ",", "filter_index", ")", ":", "\n", "\t", "feature_extractor", "=", "keras", ".", "Model", "(", "inputs", "=", "model", ".", "inputs", ",", "outputs", "=", "layer", ".", "output", ")", "\n", "\n", "activation", "=", "feature_extractor", "(", "input_image", ")", "\n", "# We avoid border artifacts by only involving non-border pixels in the loss.", "\n", "filter_activation", "=", "activation", "[", ":", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", ",", "filter_index", "]", "\n", "return", "tf", ".", "reduce_mean", "(", "filter_activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.act_func_gradient_based_monitor.gradient_ascent_step": [[19, 30], ["tape.gradient", "tensorflow.math.l2_normalize", "tensorflow.GradientTape", "tape.watch", "act_func_gradient_based_monitor.compute_loss"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.compute_loss"], ["", "@", "tf", ".", "function", "\n", "def", "gradient_ascent_step", "(", "img", ",", "filter_index", ",", "learning_rate", ")", ":", "\n", "\t", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "\t\t", "tape", ".", "watch", "(", "img", ")", "\n", "loss", "=", "compute_loss", "(", "img", ",", "filter_index", ")", "\n", "# Compute gradients.", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "loss", ",", "img", ")", "\n", "# Normalize gradients.", "\n", "grads", "=", "tf", ".", "math", ".", "l2_normalize", "(", "grads", ")", "\n", "img", "+=", "learning_rate", "*", "grads", "\n", "return", "loss", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.act_func_gradient_based_monitor.build_monitor": [[32, 50], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "src.utils.util.is_monitored_prediction", "len", "numpy.where", "model.predict", "arrWeights.append", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["", "def", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "class_to_monitor", ",", "layer_index", ")", ":", "\n", "\t", "arrWeights", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "\t\t", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "if", "util", ".", "is_monitored_prediction", "(", "yPred", ",", "lab", ",", "class_to_monitor", ")", ":", "\n", "\t\t\t", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "\n", "", "", "return", "arrWeights", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.act_func_gradient_based_monitor.build_monitor_without_classify": [[52, 69], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "len", "numpy.where", "arrWeights.append", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["", "def", "build_monitor_without_classify", "(", "model", ",", "X", ",", "y", ",", "class_to_monitor", ",", "layer_index", ")", ":", "\n", "\t", "arrWeights", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "\t\t", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "\n", "if", "lab", "==", "class_to_monitor", ":", "\n", "\t\t\t", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "\n", "", "", "return", "arrWeights", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.act_func_gradient_based_monitor.run": [[71, 97], ["act_func_gradient_based_monitor.build_monitor", "monitor.method", "act_func_gradient_based_monitor.build_monitor_without_classify", "monitor.method", "print", "os.makedirs", "pickle.dump", "print", "os.makedirs", "pickle.dump", "open", "open"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.act_func_gradient_based_monitor.build_monitor_without_classify"], ["", "def", "run", "(", "monitor", ",", "model", ",", "X", ",", "y", ",", "save", ")", ":", "\n", "\t", "class_to_monitor", "=", "monitor", ".", "class_to_monitor", "\n", "layer_index", "=", "monitor", ".", "layer_index", "\n", "\n", "#building monitor with training set", "\n", "arrWeights", "=", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "class_to_monitor", ",", "layer_index", ")", "\n", "trained_monitor", "=", "monitor", ".", "method", "(", "arrWeights", ",", "monitor", ",", "save", ")", "\n", "\n", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "\n", "if", "save", ":", "\n", "\t\t", "print", "(", "\"Saving monitor in\"", ",", "file_path", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "trained_monitor", ",", "open", "(", "file_path", ",", "\"wb\"", ")", ")", "\n", "\n", "\n", "#testing new way to build monitors", "\n", "", "arrWeights_2", "=", "build_monitor_without_classify", "(", "model", ",", "X", ",", "y", ",", "class_to_monitor", ",", "layer_index", ")", "\n", "trained_monitor_2", "=", "monitor", ".", "method", "(", "arrWeights_2", ",", "monitor", ",", "save", ")", "\n", "\n", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "+", "'_2'", "\n", "if", "save", ":", "\n", "\t\t", "print", "(", "\"Saving monitor 2 in\"", ",", "file_path", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "trained_monitor_2", ",", "open", "(", "file_path", ",", "\"wb\"", ")", ")", "\n", "\n", "", "return", "trained_monitor", ",", "trained_monitor_2", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.tree_based_act_function_monitor.build_monitor": [[12, 32], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "len", "numpy.where", "model.predict", "arrWeights.append", "arrLabels.append", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["def", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", ":", "\n", "    ", "arrWeights", "=", "[", "]", "\n", "arrLabels", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "        ", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "if", "yPred", "==", "lab", ":", "\n", "            ", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "arrLabels", ".", "append", "(", "lab", ")", "\n", "\n", "", "", "return", "arrWeights", ",", "arrLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.tree_based_act_function_monitor.build_monitor_2": [[34, 53], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "arrWeights.append", "arrLabels.append", "len", "numpy.where", "model.predict", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["", "def", "build_monitor_2", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", ":", "\n", "    ", "arrWeights", "=", "[", "]", "\n", "arrLabels", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "        ", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "arrLabels", ".", "append", "(", "lab", ")", "\n", "\n", "", "return", "arrWeights", ",", "arrLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.tree_based_act_function_monitor.run": [[55, 111], ["tree_based_act_function_monitor.build_monitor_2", "tree_based_act_function_monitor.build_monitor", "sklearn.ensemble.RandomForestClassifier", "print", "os.makedirs", "pickle.dump", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "open", "open.write", "open.close", "sklearn.ensemble.RandomForestClassifier.fit", "open", "numpy.ravel", "str", "numpy.ravel"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor_2", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor"], ["", "def", "run", "(", "monitor", ",", "model", ",", "X", ",", "y", ",", "save", ")", ":", "\n", "    ", "optimize_parameters", "=", "monitor", ".", "use_grid_search", "\n", "trained_monitor", "=", "None", "\n", "layer_index", "=", "monitor", ".", "layer_index", "\n", "\n", "#building monitor with training set", "\n", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "        ", "arrWeights", ",", "arrLabels", "=", "build_monitor_2", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", "\n", "", "else", ":", "\n", "        ", "arrWeights", ",", "arrLabels", "=", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", "\n", "#print(\"arrWeights:\", np.shape(arrWeights))", "\n", "#print(\"arrLabels:\", np.shape(arrLabels))", "\n", "\n", "", "if", "monitor", ".", "method", "==", "\"random_forest\"", ":", "\n", "        ", "rfc", "=", "RandomForestClassifier", "(", "random_state", "=", "42", ")", "\n", "\n", "if", "optimize_parameters", ":", "\n", "            ", "text_best_params", "=", "None", "\n", "\n", "param_grid", "=", "{", "\n", "'n_estimators'", ":", "[", "100", ",", "200", "]", ",", "\n", "'max_features'", ":", "[", "'sqrt'", ",", "'log2'", "]", ",", "\n", "'criterion'", ":", "[", "'gini'", ",", "'entropy'", "]", "\n", "}", "\n", "\n", "CV_rfc", "=", "GridSearchCV", "(", "estimator", "=", "rfc", ",", "param_grid", "=", "param_grid", ",", "cv", "=", "5", ")", "\n", "CV_rfc", ".", "fit", "(", "arrWeights", ",", "np", ".", "ravel", "(", "arrLabels", ")", ")", "\n", "trained_monitor", "=", "CV_rfc", ".", "best_estimator_", "\n", "\n", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "                ", "text_best_params", "=", "\"best_params_2.txt\"", "\n", "", "else", ":", "\n", "                ", "text_best_params", "=", "\"best_params.txt\"", "\n", "\n", "", "file", "=", "open", "(", "monitor", ".", "monitors_folder", "+", "text_best_params", ",", "\"w\"", ")", "#write mode ", "\n", "file", ".", "write", "(", "str", "(", "CV_rfc", ".", "best_params_", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "trained_monitor", "=", "rfc", ".", "fit", "(", "arrWeights", ",", "np", ".", "ravel", "(", "arrLabels", ")", ")", "\n", "\n", "", "", "elif", "monitor", ".", "method", "==", "\"\"", ":", "\n", "        ", "pass", "\n", "\n", "", "file_path", "=", "None", "\n", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "        ", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "+", "'_2'", "\n", "", "else", ":", "\n", "        ", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "\n", "\n", "", "if", "save", ":", "\n", "        ", "print", "(", "\"Saving monitor in\"", ",", "file_path", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "trained_monitor", ",", "open", "(", "file_path", ",", "\"wb\"", ")", ")", "\n", "\n", "", "return", "trained_monitor", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.image_dist_matching.plot_diff_images": [[18, 38], ["matplotlib.subplots", "enumerate", "axes[].set_title", "axes[].set_title", "matplotlib.tight_layout", "matplotlib.show", "matplotlib.imshow", "matplotlib.show", "matplotlib.imshow", "matplotlib.show", "enumerate", "numpy.squeeze", "numpy.squeeze", "skimage.exposure.histogram", "axes[].plot", "skimage.exposure.cumulative_distribution", "axes[].plot", "axes[].set_ylabel", "img_hist.max"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot"], ["def", "plot_diff_images", "(", "image", ",", "reference", ")", ":", "\n", "\t", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", "=", "3", ",", "ncols", "=", "2", ",", "figsize", "=", "(", "8", ",", "8", ")", ")", "\n", "\n", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "(", "image", ",", "reference", ")", ")", ":", "\n", "\t\t", "for", "c", ",", "c_color", "in", "enumerate", "(", "(", "'red'", ",", "'green'", ",", "'blue'", ")", ")", ":", "\n", "\t\t\t", "img_hist", ",", "bins", "=", "exposure", ".", "histogram", "(", "img", "[", "...", ",", "c", "]", ",", "source_range", "=", "'dtype'", ")", "\n", "axes", "[", "c", ",", "i", "]", ".", "plot", "(", "bins", ",", "img_hist", "/", "img_hist", ".", "max", "(", ")", ")", "\n", "img_cdf", ",", "bins", "=", "exposure", ".", "cumulative_distribution", "(", "img", "[", "...", ",", "c", "]", ")", "\n", "axes", "[", "c", ",", "i", "]", ".", "plot", "(", "bins", ",", "img_cdf", ")", "\n", "axes", "[", "c", ",", "0", "]", ".", "set_ylabel", "(", "c_color", ")", "\n", "\n", "", "", "axes", "[", "0", ",", "0", "]", ".", "set_title", "(", "'Source'", ")", "\n", "axes", "[", "0", ",", "1", "]", ".", "set_title", "(", "'Reference'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "squeeze", "(", "image", ")", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "squeeze", "(", "reference", ")", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.image_dist_matching.histograms": [[40, 112], ["zip", "cv2.calcHist", "cv2.calcHist", "cv2.calcHist", "cv2.calcHist", "cv2.calcHist", "cv2.calcHist", "cv2.normalize", "cv2.normalize", "cv2.normalize", "cv2.normalize", "cv2.normalize", "cv2.normalize", "scipy.spatial.distance.chebyshev", "print", "scipy.spatial.distance.chebyshev", "print", "scipy.spatial.distance.chebyshev", "print", "print", "cv2.compareHist", "print", "cv2.compareHist", "print", "cv2.compareHist", "print", "cv2.compareHist", "print", "cv2.compareHist", "print", "cv2.compareHist", "print", "cv2.compareHist", "print", "cv2.compareHist", "print", "cv2.compareHist", "print", "print"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize"], ["", "def", "histograms", "(", "image", ",", "reference", ")", ":", "\n", "\t", "histSize", "=", "256", "\n", "histRange", "=", "(", "0", ",", "256", ")", "# the upper boundary is exclusive", "\n", "accumulate", "=", "False", "\n", "\n", "res_b", "=", "[", "]", "\n", "res_g", "=", "[", "]", "\n", "res_r", "=", "[", "]", "\n", "c", "=", "0", "\n", "for", "img", ",", "ref", "in", "zip", "(", "image", ",", "reference", ")", ":", "\n", "\t\t", "b_hist", "=", "cv", ".", "calcHist", "(", "img", ",", "[", "0", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "g_hist", "=", "cv", ".", "calcHist", "(", "img", ",", "[", "1", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "r_hist", "=", "cv", ".", "calcHist", "(", "img", ",", "[", "2", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "\n", "b_hist2", "=", "cv", ".", "calcHist", "(", "ref", ",", "[", "0", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "g_hist2", "=", "cv", ".", "calcHist", "(", "ref", ",", "[", "1", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "r_hist2", "=", "cv", ".", "calcHist", "(", "ref", ",", "[", "2", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "\n", "hist_h", "=", "100", "\n", "cv", ".", "normalize", "(", "b_hist", ",", "b_hist", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "cv", ".", "normalize", "(", "g_hist", ",", "g_hist", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "cv", ".", "normalize", "(", "r_hist", ",", "r_hist", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "\n", "cv", ".", "normalize", "(", "b_hist2", ",", "b_hist2", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "cv", ".", "normalize", "(", "g_hist2", ",", "g_hist2", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "cv", ".", "normalize", "(", "r_hist2", ",", "r_hist2", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "\n", "b", "=", "distance", ".", "chebyshev", "(", "b_hist", ",", "b_hist2", ")", "\n", "print", "(", "b", ")", "\n", "g", "=", "distance", ".", "chebyshev", "(", "g_hist", ",", "g_hist2", ")", "\n", "print", "(", "g", ")", "\n", "r", "=", "distance", ".", "chebyshev", "(", "r_hist", ",", "r_hist2", ")", "\n", "print", "(", "r", ")", "\n", "print", "(", "\"average:\"", ",", "(", "b", "+", "g", "+", "r", ")", "/", "3", ")", "\n", "\n", "d", "=", "cv", ".", "compareHist", "(", "b_hist", ",", "b_hist2", ",", "cv", ".", "HISTCMP_CORREL", ")", "\n", "print", "(", "\"corr:\"", ",", "d", ")", "\n", "d", "=", "cv", ".", "compareHist", "(", "g_hist", ",", "g_hist2", ",", "cv", ".", "HISTCMP_CORREL", ")", "\n", "print", "(", "\"corr:\"", ",", "d", ")", "\n", "d", "=", "cv", ".", "compareHist", "(", "r_hist", ",", "r_hist2", ",", "cv", ".", "HISTCMP_CORREL", ")", "\n", "print", "(", "\"corr:\"", ",", "d", ")", "\n", "\n", "d", "=", "cv", ".", "compareHist", "(", "b_hist", ",", "b_hist2", ",", "cv", ".", "HISTCMP_CHISQR", ")", "\n", "print", "(", "\"Chi-sqr:\"", ",", "d", ")", "\n", "d", "=", "cv", ".", "compareHist", "(", "g_hist", ",", "g_hist2", ",", "cv", ".", "HISTCMP_CHISQR", ")", "\n", "print", "(", "\"Chi-sqr:\"", ",", "d", ")", "\n", "d", "=", "cv", ".", "compareHist", "(", "r_hist", ",", "r_hist2", ",", "cv", ".", "HISTCMP_CHISQR", ")", "\n", "print", "(", "\"Chi-sqr:\"", ",", "d", ")", "\n", "\n", "d", "=", "cv", ".", "compareHist", "(", "b_hist", ",", "b_hist2", ",", "cv", ".", "HISTCMP_INTERSECT", ")", "\n", "print", "(", "\"Intersection:\"", ",", "d", ")", "\n", "d", "=", "cv", ".", "compareHist", "(", "g_hist", ",", "g_hist2", ",", "cv", ".", "HISTCMP_INTERSECT", ")", "\n", "print", "(", "\"Intersection:\"", ",", "d", ")", "\n", "d", "=", "cv", ".", "compareHist", "(", "r_hist", ",", "r_hist2", ",", "cv", ".", "HISTCMP_INTERSECT", ")", "\n", "print", "(", "\"Intersection:\"", ",", "d", ")", "\n", "\n", "if", "(", "b", "+", "g", "+", "r", ")", "/", "3", "==", "0.0", ":", "\n", "\t\t\t", "print", "(", "\"equal ?\"", ",", "c", ")", "\n", "", "c", "+=", "1", "\n", "#res_b.append(b_hist)", "\n", "#res_g.append(g_hist)", "\n", "#res_r.append(r_hist)", "\n", "", "'''\n\tb = distance.chebyshev(res_b[0], res_b[1])\n\tprint(b)\n\tg = distance.chebyshev(res_g[0], res_g[1])\n\tprint(g)\n\tr = distance.chebyshev(res_r[0], res_r[1])\n\tprint(r)\n\n\tprint(\"average:\", (b+g+r)/3)\n\t'''", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.image_dist_matching.compare_histograms": [[113, 152], ["cv2.calcHist", "cv2.calcHist", "cv2.calcHist", "cv2.calcHist", "cv2.calcHist", "cv2.calcHist", "cv2.normalize", "cv2.normalize", "cv2.normalize", "cv2.normalize", "cv2.normalize", "cv2.normalize", "scipy.spatial.distance.chebyshev", "print", "scipy.spatial.distance.chebyshev", "print", "scipy.spatial.distance.chebyshev", "print", "print", "round", "image_dist_matching.compare_histograms.get_center_pixels"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.normalize"], ["", "def", "compare_histograms", "(", "img", ",", "ref", ",", "centered", ")", ":", "\n", "\t", "def", "get_center_pixels", "(", "arr", ",", "npix", ")", ":", "\n", "\t\t", "slices", "=", "[", "slice", "(", "shape", "/", "2", "-", "npix", ",", "shape", "/", "2", "+", "npix", ")", "for", "shape", "in", "arr", ".", "shape", "]", "\n", "return", "arr", "[", "slices", "]", "\n", "\n", "", "if", "centered", ":", "\n", "\t\t", "img", "=", "get_center_pixels", "(", "img", ",", "28", ")", "\n", "ref", "=", "get_center_pixels", "(", "ref", ",", "28", ")", "\n", "\n", "", "histSize", "=", "256", "\n", "histRange", "=", "(", "0", ",", "256", ")", "# the upper boundary is exclusive", "\n", "accumulate", "=", "False", "\n", "\n", "b_hist", "=", "cv", ".", "calcHist", "(", "img", ",", "[", "0", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "g_hist", "=", "cv", ".", "calcHist", "(", "img", ",", "[", "1", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "r_hist", "=", "cv", ".", "calcHist", "(", "img", ",", "[", "2", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "\n", "b_hist2", "=", "cv", ".", "calcHist", "(", "ref", ",", "[", "0", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "g_hist2", "=", "cv", ".", "calcHist", "(", "ref", ",", "[", "1", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "r_hist2", "=", "cv", ".", "calcHist", "(", "ref", ",", "[", "2", "]", ",", "None", ",", "[", "histSize", "]", ",", "histRange", ",", "accumulate", "=", "accumulate", ")", "\n", "\n", "hist_h", "=", "400", "\n", "cv", ".", "normalize", "(", "b_hist", ",", "b_hist", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "cv", ".", "normalize", "(", "g_hist", ",", "g_hist", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "cv", ".", "normalize", "(", "r_hist", ",", "r_hist", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "\n", "cv", ".", "normalize", "(", "b_hist2", ",", "b_hist2", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "cv", ".", "normalize", "(", "g_hist2", ",", "g_hist2", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "cv", ".", "normalize", "(", "r_hist2", ",", "r_hist2", ",", "alpha", "=", "0", ",", "beta", "=", "hist_h", ",", "norm_type", "=", "cv", ".", "NORM_MINMAX", ")", "\n", "\n", "b", "=", "distance", ".", "chebyshev", "(", "b_hist", ",", "b_hist2", ")", "\n", "print", "(", "b", ")", "\n", "g", "=", "distance", ".", "chebyshev", "(", "g_hist", ",", "g_hist2", ")", "\n", "print", "(", "g", ")", "\n", "r", "=", "distance", ".", "chebyshev", "(", "r_hist", ",", "r_hist2", ")", "\n", "print", "(", "r", ")", "\n", "print", "(", "\"average:\"", ",", "(", "b", "+", "g", "+", "r", ")", "/", "3", ")", "\n", "\n", "return", "round", "(", "(", "b", "+", "g", "+", "r", ")", "/", "3", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.image_dist_matching.template_matching": [[155, 185], ["img2.copy.copy", "img.copy.copy", "eval", "cv2.matchTemplate", "cv2.minMaxLoc", "cv2.rectangle", "matplotlib.suptitle", "matplotlib.show", "print", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.xticks", "matplotlib.yticks"], "function", ["None"], ["", "def", "template_matching", "(", "img", ",", "template", ")", ":", "\n", "#img = cv.imread('messi5.jpg',0)", "\n", "\t", "img2", "=", "img", ".", "copy", "(", ")", "\n", "#template = cv.imread('template.jpg',0)", "\n", "w", ",", "h", "=", "14", ",", "14", "#template.shape[::-1]", "\n", "# All the 6 methods for comparison in a list", "\n", "methods", "=", "[", "'cv.TM_CCOEFF'", ",", "'cv.TM_CCOEFF_NORMED'", ",", "'cv.TM_CCORR'", ",", "\n", "'cv.TM_CCORR_NORMED'", ",", "'cv.TM_SQDIFF'", ",", "'cv.TM_SQDIFF_NORMED'", "]", "\n", "for", "meth", "in", "methods", ":", "\n", "\t\t", "img", "=", "img2", ".", "copy", "(", ")", "\n", "method", "=", "eval", "(", "meth", ")", "\n", "# Apply template Matching", "\n", "res", "=", "cv", ".", "matchTemplate", "(", "img", ",", "template", ",", "method", ")", "\n", "min_val", ",", "max_val", ",", "min_loc", ",", "max_loc", "=", "cv", ".", "minMaxLoc", "(", "res", ")", "\n", "# If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum", "\n", "if", "method", "in", "[", "cv", ".", "TM_SQDIFF", ",", "cv", ".", "TM_SQDIFF_NORMED", "]", ":", "\n", "\t\t\t", "top_left", "=", "min_loc", "\n", "print", "(", "\"top_left\"", ",", "top_left", ")", "\n", "", "else", ":", "\n", "\t\t\t", "top_left", "=", "max_loc", "\n", "\n", "", "bottom_right", "=", "(", "top_left", "[", "0", "]", "+", "w", ",", "top_left", "[", "1", "]", "+", "h", ")", "\n", "cv", ".", "rectangle", "(", "img", ",", "top_left", ",", "bottom_right", ",", "255", ",", "1", ")", "\n", "#print(\"rectangle image\", top_left, bottom_right)", "\n", "plt", ".", "subplot", "(", "121", ")", ",", "plt", ".", "imshow", "(", "res", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "title", "(", "'Matching Result'", ")", ",", "plt", ".", "xticks", "(", "[", "]", ")", ",", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "subplot", "(", "122", ")", ",", "plt", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "title", "(", "'Detected Point'", ")", ",", "plt", ".", "xticks", "(", "[", "]", ")", ",", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "suptitle", "(", "meth", ")", "\n", "plt", ".", "show", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.ocsvm_based_act_function_monitor.build_monitor": [[12, 32], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "len", "numpy.where", "model.predict", "arrWeights.append", "arrLabels.append", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["def", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", ":", "\n", "    ", "arrWeights", "=", "[", "]", "\n", "arrLabels", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "        ", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "if", "yPred", "==", "lab", ":", "\n", "            ", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "arrLabels", ".", "append", "(", "lab", ")", "\n", "\n", "", "", "return", "arrWeights", ",", "arrLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.ocsvm_based_act_function_monitor.build_monitor_2": [[34, 53], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "arrWeights.append", "arrLabels.append", "len", "numpy.where", "model.predict", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["", "def", "build_monitor_2", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", ":", "\n", "    ", "arrWeights", "=", "[", "]", "\n", "arrLabels", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "        ", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "arrLabels", ".", "append", "(", "lab", ")", "\n", "\n", "", "return", "arrWeights", ",", "arrLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.ocsvm_based_act_function_monitor.run": [[55, 144], ["sklearn.svm.OneClassSVM", "ocsvm_based_act_function_monitor.build_monitor_2", "ocsvm_based_act_function_monitor.build_monitor", "sklearn.preprocessing.StandardScaler().fit", "print", "os.makedirs", "pickle.dump", "StandardScaler().fit.transform", "print", "open", "open.write", "open.close", "OneClassSVM().fit.fit", "print", "os.makedirs", "pickle.dump", "open", "open", "sklearn.preprocessing.StandardScaler", "sklearn.svm.OneClassSVM().fit", "OneClassSVM().fit.predict", "numpy.where", "len", "len", "sklearn.svm.OneClassSVM"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor_2", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["", "def", "run", "(", "monitor", ",", "model", ",", "X", ",", "y", ",", "save", ")", ":", "\n", "    ", "text_best_params", "=", "\"best_params\"", "\n", "arrWeights", ",", "arrLabels", "=", "None", ",", "None", "\n", "scaler", "=", "None", "\n", "trained_monitor", "=", "None", "\n", "layer_index", "=", "monitor", ".", "layer_index", "\n", "\n", "#building monitor with training set", "\n", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "        ", "arrWeights", ",", "arrLabels", "=", "build_monitor_2", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", "\n", "", "else", ":", "\n", "        ", "arrWeights", ",", "arrLabels", "=", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", "\n", "#print(\"arrLabels:\", np.shape(arrLabels))", "\n", "", "if", "monitor", ".", "use_scaler", ":", "\n", "        ", "scaler", "=", "StandardScaler", "(", ")", ".", "fit", "(", "arrWeights", ")", "\n", "scaler_file", "=", "monitor", ".", "monitors_folder", "+", "'saved_scaler_'", "+", "monitor", ".", "filename", "\n", "\n", "print", "(", "\"Saving standard scaler object in\"", ",", "scaler_file", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "scaler", ",", "open", "(", "scaler_file", ",", "\"wb\"", ")", ")", "\n", "\n", "arrWeights", "=", "scaler", ".", "transform", "(", "arrWeights", ")", "\n", "monitor", ".", "filename", "=", "'(scaled_input_version)'", "+", "monitor", ".", "filename", "\n", "text_best_params", "=", "'(scaled_input_version)'", "+", "text_best_params", "\n", "\n", "", "ocsvm", "=", "ocsvm", "=", "OneClassSVM", "(", ")", "\n", "\n", "if", "monitor", ".", "use_grid_search", ":", "\n", "\n", "        ", "print", "(", "\"optimizing with Grid Search\"", ")", "\n", "param_grid", "=", "{", "\n", "'shrinking'", ":", "[", "False", ",", "True", "]", ",", "\n", "'nu'", ":", "[", "0.3", ",", "0.5", ",", "0.7", "]", ",", "\n", "'kernel'", ":", "[", "'linear'", ",", "'rbf'", ",", "'sigmoid'", "]", ",", "\n", "'gamma'", ":", "[", "'scale'", ",", "'auto'", "]", "\n", "}", "\n", "optimal", "=", "{", "}", "\n", "optimal", "[", "'outliers'", "]", "=", "np", ".", "inf", "\n", "optimal", "[", "'shrinking'", "]", "=", "''", "\n", "optimal", "[", "'nu'", "]", "=", "''", "\n", "optimal", "[", "'kernel'", "]", "=", "''", "\n", "optimal", "[", "'gamma'", "]", "=", "''", "\n", "\n", "for", "s", "in", "param_grid", "[", "'shrinking'", "]", ":", "\n", "            ", "for", "n", "in", "param_grid", "[", "'nu'", "]", ":", "\n", "                ", "for", "k", "in", "param_grid", "[", "'kernel'", "]", ":", "\n", "                    ", "for", "g", "in", "param_grid", "[", "'gamma'", "]", ":", "\n", "\n", "                        ", "ocsvm", "=", "OneClassSVM", "(", "shrinking", "=", "s", ",", "nu", "=", "n", ",", "kernel", "=", "k", ",", "gamma", "=", "g", ")", ".", "fit", "(", "arrWeights", ")", "\n", "results", "=", "ocsvm", ".", "predict", "(", "arrWeights", ")", "\n", "indices", "=", "np", ".", "where", "(", "results", "==", "-", "1", ")", "\n", "#print('outliers', len(results[indices]))", "\n", "\n", "if", "len", "(", "results", "[", "indices", "]", ")", "<", "optimal", "[", "'outliers'", "]", ":", "\n", "                            ", "optimal", "[", "'outliers'", "]", "=", "len", "(", "results", "[", "indices", "]", ")", "\n", "optimal", "[", "'shrinking'", "]", "=", "s", "\n", "optimal", "[", "'nu'", "]", "=", "n", "\n", "optimal", "[", "'kernel'", "]", "=", "k", "\n", "optimal", "[", "'gamma'", "]", "=", "g", "\n", "trained_monitor", "=", "ocsvm", "\n", "\n", "", "", "", "", "", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "            ", "text_best_params", "+=", "\"_2.txt\"", "\n", "", "else", ":", "\n", "            ", "text_best_params", "+=", "\".txt\"", "\n", "\n", "", "best_params_", "=", "'Smaller number of outliers: {} with params \\n shrinking: {}\\n nu: {}\\n kernel: {}\\n gamma: {}'", ".", "format", "(", "optimal", "[", "'outliers'", "]", ",", "optimal", "[", "'shrinking'", "]", ",", "optimal", "[", "'nu'", "]", ",", "optimal", "[", "'kernel'", "]", ",", "optimal", "[", "'gamma'", "]", ")", "\n", "#print(best_params_)", "\n", "\n", "file", "=", "open", "(", "monitor", ".", "monitors_folder", "+", "text_best_params", ",", "\"w\"", ")", "#write mode ", "\n", "file", ".", "write", "(", "best_params_", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "trained_monitor", "=", "ocsvm", ".", "fit", "(", "arrWeights", ")", "\n", "\n", "", "file_path", "=", "None", "\n", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "        ", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "+", "'_2'", "\n", "", "else", ":", "\n", "        ", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "\n", "\n", "", "if", "save", ":", "\n", "        ", "print", "(", "\"Saving monitor in\"", ",", "file_path", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "trained_monitor", ",", "open", "(", "file_path", ",", "\"wb\"", ")", ")", "\n", "\n", "", "return", "trained_monitor", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.abstraction_box.make_boxes_by_cluster": [[14, 30], ["dataByCluster.items", "numpy.asarray", "range", "array_box_by_cluster.append", "numpy.amin", "numpy.amax", "arr_boxes.append"], "function", ["None"], ["#using a dimensionality reduction function", "\n", "\t\t", "method", "=", "dim_reduc_obj", ".", "fit", "(", "data", ")", "\n", "data", "=", "method", ".", "transform", "(", "data", ")", "\n", "if", "save", ":", "\n", "\t\t\t", "print", "(", "\"Saving trained dim reduc method\"", ")", "\n", "pickle", ".", "dump", "(", "method", ",", "open", "(", "monitors_folder", "+", "dim_reduc_method", "+", "'_trained.p'", ",", "\"wb\"", ")", ")", "\n", "\n", "", "", "print", "(", "data", ".", "shape", ")", "\n", "\n", "dataByCluster", "=", "{", "}", "\n", "clusters", "=", "KMeans", "(", "n_clusters", "=", "K", ")", ".", "fit_predict", "(", "data", ")", "\n", "\n", "print", "(", "\"making boxes...\"", ")", "\n", "\n", "for", "c", ",", "d", "in", "zip", "(", "clusters", ",", "data", ")", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "dataByCluster", "[", "c", "]", ".", "append", "(", "d", ")", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.abstraction_box.do_abstract": [[32, 76], ["numpy.asarray", "numpy.amin", "numpy.amax", "numpy.amin", "numpy.amax", "shapely.geometry.polygon.Polygon", "monitor.dim_reduc_method[].fit", "monitor.dim_reduc_method[].fit.transform", "monitor.dim_reduc_method[].fit", "monitor.dim_reduc_method[].fit.transform", "monitor.dim_reduc_method.fit", "monitor.dim_reduc_method.fit.transform", "os.path.join", "print", "pickle.dump", "print", "os.path.join", "pickle.dump", "os.path.join", "print", "pickle.dump", "open", "open", "open"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["\t\t\t", "dataByCluster", ".", "update", "(", "{", "c", ":", "[", "d", "]", "}", ")", "\n", "\n", "", "", "array_box_by_cluster", "=", "{", "}", "\n", "array_box_by_cluster", ".", "update", "(", "{", "classe", ":", "[", "]", "}", ")", "\n", "\n", "for", "k", ",", "v", "in", "dataByCluster", ".", "items", "(", ")", ":", "\n", "\t\t", "arr_intermediate", "=", "[", "]", "\n", "v", "=", "np", ".", "asarray", "(", "v", ")", "\n", "\n", "for", "i", "in", "range", "(", "v", ".", "shape", "[", "1", "]", ")", ":", "\n", "\t\t\t", "min_i", "=", "np", ".", "amin", "(", "v", "[", ":", ",", "i", "]", ")", "\n", "max_i", "=", "np", ".", "amax", "(", "v", "[", ":", ",", "i", "]", ")", "\n", "arr_intermediate", ".", "append", "(", "[", "min_i", ",", "max_i", "]", ")", "\n", "", "array_box_by_cluster", "[", "classe", "]", ".", "append", "(", "arr_intermediate", ")", "\n", "\n", "", "return", "array_box_by_cluster", "\n", "\n", "\n", "", "def", "find_point", "(", "boxes", ",", "intermediateValues", ",", "class_to_monitor", ",", "dim_reduc_obj", "=", "None", ")", ":", "\n", "\t", "data", "=", "np", ".", "asarray", "(", "intermediateValues", ")", "\n", "#print(intermediateValues)", "\n", "\n", "if", "dim_reduc_obj", "!=", "None", ":", "\n", "\t\t", "data", "=", "dim_reduc_obj", ".", "transform", "(", "data", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "\n", "#print(data)", "\n", "", "x", "=", "data", "[", "0", "]", "\n", "y", "=", "data", "[", "-", "1", "]", "\n", "#print(\"point:\", x, y)", "\n", "result", "=", "False", "\n", "try", ":", "\n", "\t\t", "for", "box", "in", "boxes", "[", "class_to_monitor", "]", ":", "\n", "#B = box[0]", "\n", "#print(box)", "\n", "\t\t\t", "x1", "=", "box", "[", "0", "]", "[", "0", "]", "\n", "x2", "=", "box", "[", "0", "]", "[", "1", "]", "\n", "y1", "=", "box", "[", "1", "]", "[", "0", "]", "\n", "y2", "=", "box", "[", "1", "]", "[", "1", "]", "\n", "if", "x", ">=", "x1", "and", "x", "<=", "x2", "and", "y", ">=", "y1", "and", "y", "<=", "y2", ":", "\n", "\t\t\t\t", "return", "True", "\n", "", "", "", "except", ":", "\n", "\t\t", "pass", "\n", "#print(\"error @ find_point function\")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.abstraction_box.do_abstract_by_cluster": [[78, 88], ["dataByCluster.items", "abstraction_box.do_abstract", "arr_polygon.append"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.abstraction_box.do_abstract"], ["", "def", "find_point_box_ensemble", "(", "arr_boxes", ",", "intermediateValues_all", ",", "dim_reduc_obj", "=", "None", ")", ":", "\n", "\t", "result", "=", "False", "\n", "for", "i", "in", "range", "(", "len", "(", "intermediateValues_all", ")", ")", ":", "\n", "#print(i)", "\n", "\t\t", "if", "i", "!=", "3", ":", "#CNN 3 with problem", "\n", "\t\t\t", "data", "=", "np", ".", "asarray", "(", "intermediateValues_all", "[", "i", "]", ")", "\n", "boxes", "=", "arr_boxes", "[", "i", "]", "\n", "\n", "", "if", "dim_reduc_obj", "!=", "None", ":", "\n", "\t\t\t", "data", "=", "dim_reduc_obj", ".", "transform", "(", "data", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.abstraction_box.make_abstraction": [[90, 110], ["numpy.asarray", "os.makedirs", "sklearn.cluster.KMeans().fit_predict", "zip", "abstraction_box.do_abstract_by_cluster", "abstraction_box.do_abstract", "sklearn.cluster.KMeans", "dataByCluster[].append", "dataByCluster.update"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.out_of_box_unittest.TestAbstractionBox.do_abstract_by_cluster", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.abstraction_box.do_abstract"], ["y", "=", "data", "[", "-", "1", "]", "\n", "#print(\"point:\", x, y)", "\n", "try", ":", "\n", "\t\t\t\t", "for", "box", "in", "boxes", ":", "\n", "\t\t\t\t\t", "x1", "=", "box", "[", "0", "]", "[", "0", "]", "\n", "x2", "=", "box", "[", "0", "]", "[", "1", "]", "\n", "y1", "=", "box", "[", "1", "]", "[", "0", "]", "\n", "y2", "=", "box", "[", "1", "]", "[", "1", "]", "\n", "\n", "if", "x", ">=", "x1", "and", "x", "<=", "x2", "and", "y", ">=", "y1", "and", "y", "<=", "y2", ":", "\n", "#print(\"similarity between 0 and 1\", cosine_similarity(intermediateValues_all[0].reshape(1, -1), intermediateValues_all[1].reshape(1, -1)))", "\n", "#print(\"similarity between 0 and 2\", cosine_similarity(intermediateValues_all[0].reshape(1, -1), intermediateValues_all[2].reshape(1, -1)))", "\n", "#print(\"similarity between 0 and 4\", cosine_similarity(intermediateValues_all[0].reshape(1, -1), intermediateValues_all[4].reshape(1, -1)))", "\n", "#print(\"similarity between 1 and 2\", cosine_similarity(intermediateValues_all[1].reshape(1, -1), intermediateValues_all[2].reshape(1, -1)))", "\n", "#print(\"similarity between 1 and 4\", cosine_similarity(intermediateValues_all[1].reshape(1, -1), intermediateValues_all[4].reshape(1, -1)))", "\n", "#print(\"similarity between 2 and 4\", cosine_similarity(intermediateValues_all[2].reshape(1, -1), intermediateValues_all[4].reshape(1, -1)))", "\n", "\n", "\t\t\t\t\t\t", "return", "True", "\n", "", "", "", "except", ":", "\n", "\t\t\t\t", "pass", "\n", "#print(\"error @ find_point_box_ensemble function\")", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.abstraction_box.check_outside_of_box": [[247, 291], ["numpy.asarray", "shapely.geometry.Point", "os.path.join", "shapely.affinity.scale", "affinity.scale.contains", "type", "type", "pickle.load", "pickle.load", "pickle.load", "shapely.affinity.scale", "affinity.scale.contains", "str", "open", "pickle.load.transform", "open", "pickle.load.transform", "open", "pickle.load.transform", "np.asarray.reshape", "intermediate_data.reshape", "np.asarray.reshape"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.abstraction_box.find_point_box_ensemble": [[293, 327], ["range", "len", "numpy.asarray", "dim_reduc_obj.transform", "np.asarray.reshape"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.clustered_abstraction.make_abstraction_without_dim_reduc": [[13, 24], ["numpy.asarray", "print", "sklearn.cluster.KMeans().fit", "print", "sklearn.cluster.KMeans"], "function", ["None"], ["def", "make_abstraction_without_dim_reduc", "(", "data", ",", "monitor", ",", "save", ")", ":", "\n", "\t", "data", "=", "np", ".", "asarray", "(", "data", ")", "\n", "\n", "print", "(", "data", ".", "shape", ")", "\n", "\n", "clusters", "=", "KMeans", "(", "n_clusters", "=", "monitor", ".", "n_clusters", ")", ".", "fit", "(", "data", ")", "\n", "dataByCluster", "=", "{", "monitor", ".", "class_to_monitor", ":", "clusters", "}", "\n", "\n", "print", "(", "\"saving clustered activation function values...\"", ")", "\n", "\n", "return", "dataByCluster", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.clustered_abstraction.find_point": [[26, 54], ["numpy.asarray", "type", "type", "pickle.load", "pickle.load", "pickle.load", "open", "pickle.load.transform", "open", "pickle.load.transform", "open", "pickle.load.transform", "np.asarray.reshape", "intermediate_data.reshape", "np.asarray.reshape", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["", "def", "find_point", "(", "boxes", ",", "intermediateValues", ",", "class_to_monitor", ",", "monitor_folder", ",", "dim_reduc_obj", ")", ":", "\n", "\t", "ok", "=", "0", "\n", "result", "=", "False", "\n", "data", "=", "np", ".", "asarray", "(", "intermediateValues", ")", "\n", "#print(np.shape(data))", "\n", "x", ",", "y", "=", "None", ",", "None", "\n", "\n", "if", "dim_reduc_obj", "!=", "None", ":", "\n", "\t\t", "if", "type", "(", "dim_reduc_obj", ")", "==", "type", "(", "[", "]", ")", ":", "\n", "\t\t\t", "dim_reduc_obj_1", "=", "pickle", ".", "load", "(", "open", "(", "monitor_folder", "+", "str", "(", "class_to_monitor", ")", "+", "sep", "+", "'trained_'", "+", "dim_reduc_obj", "[", "0", "]", ",", "\"rb\"", ")", ")", "\n", "intermediate_data", "=", "dim_reduc_obj_1", ".", "transform", "(", "data", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "dim_reduc_obj_2", "=", "pickle", ".", "load", "(", "open", "(", "monitor_folder", "+", "str", "(", "class_to_monitor", ")", "+", "sep", "+", "'trained_'", "+", "dim_reduc_obj", "[", "1", "]", ",", "\"rb\"", ")", ")", "\n", "data", "=", "dim_reduc_obj_2", ".", "transform", "(", "intermediate_data", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "dim_reduc_obj", "=", "pickle", ".", "load", "(", "open", "(", "monitor_folder", "+", "str", "(", "class_to_monitor", ")", "+", "sep", "+", "'trained_'", "+", "dim_reduc_obj", "+", "'.p'", ",", "\"rb\"", ")", ")", "\n", "#data = dim_reduc_obj[class_to_monitor].transform(data.reshape(1, -1))[0] #old version", "\n", "data", "=", "dim_reduc_obj", ".", "transform", "(", "data", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "#last version", "\n", "#data = dim_reduc_obj.transform(data)", "\n", "#print(np.shape(data))", "\n", "", "x", "=", "data", "[", "0", "]", "\n", "y", "=", "data", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t", "x", "=", "data", "[", "0", "]", "\n", "y", "=", "data", "[", "-", "1", "]", "\n", "#print(\"find_point:\", x,y)", "\n", "#print(np.shape(boxes))", "\n", "\n", "", "return", "result", ",", "ok", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor": [[12, 32], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "len", "numpy.where", "model.predict", "arrWeights.append", "arrLabels.append", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["def", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", ":", "\n", "    ", "arrWeights", "=", "[", "]", "\n", "arrLabels", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "        ", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "if", "yPred", "==", "lab", ":", "\n", "            ", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "arrLabels", ".", "append", "(", "lab", ")", "\n", "\n", "", "", "return", "arrWeights", ",", "arrLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor_2": [[34, 53], ["int", "zip", "src.utils.util.loading_info", "numpy.asarray", "numpy.argmax", "arrWeights.append", "arrLabels.append", "len", "numpy.where", "model.predict", "src.utils.util.get_activ_func"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.loading_info", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.util.get_activ_func"], ["", "def", "build_monitor_2", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", ":", "\n", "    ", "arrWeights", "=", "[", "]", "\n", "arrLabels", "=", "[", "]", "\n", "\n", "#comment these 3 lines and the line with \"log\" if you want turn off notification about loaded data ", "\n", "counter", "=", "0", "\n", "loading_percentage", "=", "0.1", "\n", "loaded", "=", "int", "(", "loading_percentage", "*", "len", "(", "y", ")", ")", "\n", "\n", "for", "img", ",", "lab", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "        ", "lab", "=", "np", ".", "where", "(", "lab", ")", "[", "0", "]", "\n", "counter", ",", "loading_percentage", "=", "util", ".", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", "#log", "\n", "img", "=", "np", ".", "asarray", "(", "[", "img", "]", ")", "\n", "yPred", "=", "np", ".", "argmax", "(", "model", ".", "predict", "(", "img", ")", ")", "\n", "\n", "arrWeights", ".", "append", "(", "util", ".", "get_activ_func", "(", "model", ",", "img", ",", "layerIndex", "=", "layer_index", ")", "[", "0", "]", ")", "\n", "arrLabels", ".", "append", "(", "lab", ")", "\n", "\n", "", "return", "arrWeights", ",", "arrLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.run": [[55, 123], ["linear_based_act_function_monitor.build_monitor_2", "linear_based_act_function_monitor.build_monitor", "sklearn.preprocessing.StandardScaler().fit", "print", "os.makedirs", "pickle.dump", "StandardScaler().fit.transform", "sklearn.linear_model.SGDClassifier", "print", "os.makedirs", "pickle.dump", "open", "print", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "open", "open.write", "open.close", "sklearn.linear_model.SGDClassifier.fit", "open", "sklearn.preprocessing.StandardScaler", "numpy.ravel", "str", "numpy.ravel"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor_2", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.methods.linear_based_act_function_monitor.build_monitor", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["", "def", "run", "(", "monitor", ",", "model", ",", "X", ",", "y", ",", "save", ")", ":", "\n", "    ", "text_best_params", "=", "\"best_params\"", "\n", "arrWeights", ",", "arrLabels", "=", "None", ",", "None", "\n", "scaler", "=", "None", "\n", "trained_monitor", "=", "None", "\n", "layer_index", "=", "monitor", ".", "layer_index", "\n", "\n", "#building monitor with training set", "\n", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "        ", "arrWeights", ",", "arrLabels", "=", "build_monitor_2", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", "\n", "", "else", ":", "\n", "        ", "arrWeights", ",", "arrLabels", "=", "build_monitor", "(", "model", ",", "X", ",", "y", ",", "layer_index", ")", "\n", "#print(\"arrLabels:\", np.shape(arrLabels))", "\n", "", "if", "monitor", ".", "use_scaler", ":", "\n", "        ", "scaler", "=", "StandardScaler", "(", ")", ".", "fit", "(", "arrWeights", ")", "\n", "scaler_file", "=", "monitor", ".", "monitors_folder", "+", "'saved_scaler_'", "+", "monitor", ".", "filename", "\n", "\n", "print", "(", "\"Saving standard scaler object in\"", ",", "scaler_file", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "scaler", ",", "open", "(", "scaler_file", ",", "\"wb\"", ")", ")", "\n", "\n", "arrWeights", "=", "scaler", ".", "transform", "(", "arrWeights", ")", "\n", "monitor", ".", "filename", "=", "'(scaled_input_version)'", "+", "monitor", ".", "filename", "\n", "text_best_params", "=", "'(scaled_input_version)'", "+", "text_best_params", "\n", "\n", "", "if", "monitor", ".", "method", "==", "\"sgd\"", ":", "\n", "\n", "        ", "sgdc", "=", "SGDClassifier", "(", "random_state", "=", "42", ")", "\n", "\n", "if", "monitor", ".", "use_grid_search", ":", "\n", "            ", "print", "(", "\"optimizing with Grid Search\"", ")", "\n", "param_grid", "=", "{", "\n", "'max_iter'", ":", "[", "1000", ",", "2000", "]", ",", "\n", "'alpha'", ":", "[", "0.0001", ",", "0.001", "]", ",", "\n", "'loss'", ":", "[", "'squared_hinge'", ",", "'log'", ",", "'perceptron'", "]", ",", "\n", "'class_weight'", ":", "[", "'balanced'", ",", "None", "]", "\n", "}", "\n", "CV_sgdc", "=", "GridSearchCV", "(", "estimator", "=", "sgdc", ",", "param_grid", "=", "param_grid", ",", "cv", "=", "5", ")", "\n", "CV_sgdc", ".", "fit", "(", "arrWeights", ",", "np", ".", "ravel", "(", "arrLabels", ")", ")", "\n", "trained_monitor", "=", "CV_sgdc", ".", "best_estimator_", "\n", "\n", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "                ", "text_best_params", "+=", "\"_2.txt\"", "\n", "", "else", ":", "\n", "                ", "text_best_params", "+=", "\".txt\"", "\n", "\n", "", "file", "=", "open", "(", "monitor", ".", "monitors_folder", "+", "text_best_params", ",", "\"w\"", ")", "#write mode ", "\n", "file", ".", "write", "(", "str", "(", "CV_sgdc", ".", "best_params_", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "trained_monitor", "=", "sgdc", ".", "fit", "(", "arrWeights", ",", "np", ".", "ravel", "(", "arrLabels", ")", ")", "\n", "\n", "", "", "elif", "monitor", ".", "method", "==", "\"\"", ":", "\n", "        ", "pass", "\n", "\n", "", "file_path", "=", "None", "\n", "if", "monitor", ".", "use_alternative_monitor", ":", "\n", "        ", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "+", "'_2'", "\n", "", "else", ":", "\n", "        ", "file_path", "=", "monitor", ".", "monitors_folder", "+", "monitor", ".", "filename", "\n", "\n", "", "if", "save", ":", "\n", "        ", "print", "(", "\"Saving monitor in\"", ",", "file_path", ")", "\n", "os", ".", "makedirs", "(", "monitor", ".", "monitors_folder", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "trained_monitor", ",", "open", "(", "file_path", ",", "\"wb\"", ")", ")", "\n", "\n", "", "return", "trained_monitor", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.odin_monitor.detection": [[7, 64], ["net", "net.data.cpu", "nnOutputs.numpy.numpy", "numpy.argmax", "torch.autograd.Variable", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "criterion.backward", "torch.ge", "torch.ge", "torch.add", "torch.add", "net", "net.data.cpu", "nnOutputs.numpy.numpy", "numpy.argmax", "numpy.max", "numpy.exp", "numpy.sum", "file_writter.write", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.autograd.Variable", "numpy.max", "numpy.exp", "numpy.sum", "numpy.exp", "torch.ge.float", "numpy.exp", "numpy.max", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["def", "detection", "(", "net", ",", "inputs", ",", "temper", ",", "noiseMagnitude", ",", "threshold", ",", "CUDA_DEVICE", ",", "file_writter", "=", "None", ")", ":", "\n", "#inputs = Variable(inputs.cuda(CUDA_DEVICE), requires_grad = True)", "\n", "\t", "inputs", ".", "requires_grad", "=", "True", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "# Calculating the confidence of the output, no perturbation added here, no temperature scaling used", "\n", "# weights ?", "\n", "nnOutputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", ".", "numpy", "(", ")", "\n", "\n", "nnOutputs", "=", "nnOutputs", "[", "0", "]", "\n", "nnOutputs", "=", "nnOutputs", "-", "np", ".", "max", "(", "nnOutputs", ")", "\n", "# the confidence", "\n", "nnOutputs", "=", "np", ".", "exp", "(", "nnOutputs", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "nnOutputs", ")", ")", "\n", "\n", "if", "file_writter", "!=", "None", ":", "\n", "\t\t", "file_writter", ".", "write", "(", "\"{}, {}, {}\\n\"", ".", "format", "(", "1", ",", "noiseMagnitude", ",", "np", ".", "max", "(", "nnOutputs", ")", ")", ")", "\n", "\n", "# Using temperature scaling", "\n", "", "outputs", "=", "outputs", "/", "temper", "\n", "\n", "# Calculating the perturbation we need to add, that is,", "\n", "# the sign of gradient of cross entropy loss w.r.t. input", "\n", "maxIndexTemp", "=", "np", ".", "argmax", "(", "nnOutputs", ")", "\n", "labels", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "maxIndexTemp", "]", ")", ".", "cuda", "(", "CUDA_DEVICE", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Normalizing the gradient to binary in {0, 1}", "\n", "gradient", "=", "torch", ".", "ge", "(", "inputs", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "\n", "# Normalizing the gradient to the same space of image", "\n", "gradient", "[", "0", "]", "[", "0", "]", "=", "gradient", "[", "0", "]", "[", "0", "]", "/", "(", "63.0", "/", "255.0", ")", "\n", "gradient", "[", "0", "]", "[", "1", "]", "=", "gradient", "[", "0", "]", "[", "1", "]", "/", "(", "62.1", "/", "255.0", ")", "\n", "gradient", "[", "0", "]", "[", "2", "]", "=", "gradient", "[", "0", "]", "[", "2", "]", "/", "(", "66.7", "/", "255.0", ")", "\n", "\n", "# Adding small perturbations to images", "\n", "tempInputs", "=", "torch", ".", "add", "(", "inputs", ".", "data", ",", "-", "noiseMagnitude", ",", "gradient", ")", "\n", "outputs", "=", "net", "(", "Variable", "(", "tempInputs", ")", ")", "\n", "outputs", "=", "outputs", "/", "temper", "\n", "\n", "# Calculating the confidence after adding perturbations", "\n", "nnOutputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", ".", "numpy", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", "[", "0", "]", "\n", "nnOutputs", "=", "nnOutputs", "-", "np", ".", "max", "(", "nnOutputs", ")", "\n", "nnOutputs", "=", "np", ".", "exp", "(", "nnOutputs", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "nnOutputs", ")", ")", "\n", "\n", "finalIndextemp", "=", "np", ".", "argmax", "(", "nnOutputs", ")", "\n", "#print('finalIndextemp, confidence', finalIndextemp, nnOutputs[finalIndextemp])", "\n", "\n", "# Classify it as OOD or ID", "\n", "is_OOD", "=", "True", "if", "nnOutputs", "[", "finalIndextemp", "]", "<=", "threshold", "else", "False", "\n", "\n", "return", "is_OOD", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.print_thresholds": [[32, 38], ["numpy.loadtxt", "print", "min", "max"], "function", ["None"], ["def", "print_thresholds", "(", "path", ",", "temperature", ",", "num_classes", ",", "magnitude", ")", ":", "\n", "\t", "start", "=", "0", "\n", "end", "=", "temperature", "/", "num_classes", "*", "magnitude", "\n", "confidence_values", "=", "np", ".", "loadtxt", "(", "path", ",", "delimiter", "=", "','", ")", "\n", "confidence_values", "=", "confidence_values", "[", ":", ",", "2", "]", "\n", "print", "(", "'min threshold {}, and max threshold {}'", ".", "format", "(", "min", "(", "confidence_values", ")", ",", "max", "(", "confidence_values", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.tpr95": [[40, 91], ["numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len"], "function", ["None"], ["", "def", "tpr95", "(", "name", ")", ":", "\n", "#calculate the falsepositive error when tpr is 95%", "\n", "# calculate baseline", "\n", "\t", "T", "=", "1", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "1", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "1", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "#f = open(\"./{}/{}/T_{}.txt\".format(nnName, dataName, T), 'w')", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "total", "=", "0.0", "\n", "fpr", "=", "0.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "gap", ")", ":", "\n", "\t\t", "tpr", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", ">=", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "error2", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", ">", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "if", "tpr", "<=", "0.9505", "and", "tpr", ">=", "0.9495", ":", "\n", "\t\t\t", "fpr", "+=", "error2", "\n", "total", "+=", "1", "\n", "", "", "fprBase", "=", "fpr", "/", "total", "\n", "\n", "# calculate our algorithm", "\n", "T", "=", "1000", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "0.12", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "0.0104", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "#f = open(\"./{}/{}/T_{}.txt\".format(nnName, dataName, T), 'w')", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "total", "=", "0.0", "\n", "fpr", "=", "0.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "gap", ")", ":", "\n", "\t\t", "tpr", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", ">=", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "error2", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", ">", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "if", "tpr", "<=", "0.9505", "and", "tpr", ">=", "0.9495", ":", "\n", "\t\t\t", "fpr", "+=", "error2", "\n", "total", "+=", "1", "\n", "", "", "fprNew", "=", "fpr", "/", "total", "\n", "\n", "return", "fprBase", ",", "fprNew", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.auroc": [[92, 139], ["numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len"], "function", ["None"], ["", "def", "auroc", "(", "name", ")", ":", "\n", "#calculate the AUROC", "\n", "# calculate baseline", "\n", "\t", "T", "=", "1", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "1", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "1", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "#f = open(\"./{}/{}/T_{}.txt\".format(nnName, dataName, T), 'w')", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "aurocBase", "=", "0.0", "\n", "fprTemp", "=", "1.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "gap", ")", ":", "\n", "\t\t", "tpr", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", ">=", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "fpr", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", ">", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "aurocBase", "+=", "(", "-", "fpr", "+", "fprTemp", ")", "*", "tpr", "\n", "fprTemp", "=", "fpr", "\n", "", "aurocBase", "+=", "fpr", "*", "tpr", "\n", "# calculate our algorithm", "\n", "T", "=", "1000", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "0.12", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "0.0104", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "#f = open(\"./{}/{}/T_{}.txt\".format(nnName, dataName, T), 'w')", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "aurocNew", "=", "0.0", "\n", "fprTemp", "=", "1.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "gap", ")", ":", "\n", "\t\t", "tpr", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", ">=", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "fpr", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", ">=", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "aurocNew", "+=", "(", "-", "fpr", "+", "fprTemp", ")", "*", "tpr", "\n", "fprTemp", "=", "fpr", "\n", "", "aurocNew", "+=", "fpr", "*", "tpr", "\n", "return", "aurocBase", ",", "aurocNew", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.auprIn": [[140, 201], ["numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "precisionVec.append", "recallVec.append", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len"], "function", ["None"], ["", "def", "auprIn", "(", "name", ")", ":", "\n", "#calculate the AUPR", "\n", "# calculate baseline", "\n", "\t", "T", "=", "1", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "1", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "1", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "precisionVec", "=", "[", "]", "\n", "recallVec", "=", "[", "]", "\n", "#f = open(\"./{}/{}/T_{}.txt\".format(nnName, dataName, T), 'w')", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "auprBase", "=", "0.0", "\n", "recallTemp", "=", "1.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "gap", ")", ":", "\n", "\t\t", "tp", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", ">=", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", ">=", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "if", "tp", "+", "fp", "==", "0", ":", "continue", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "\n", "precisionVec", ".", "append", "(", "precision", ")", "\n", "recallVec", ".", "append", "(", "recall", ")", "\n", "auprBase", "+=", "(", "recallTemp", "-", "recall", ")", "*", "precision", "\n", "recallTemp", "=", "recall", "\n", "", "auprBase", "+=", "recall", "*", "precision", "\n", "#print(recall, precision)", "\n", "\n", "# calculate our algorithm", "\n", "T", "=", "1000", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "0.12", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "0.0104", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "#f = open(\"./{}/{}/T_{}.txt\".format(nnName, dataName, T), 'w')", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "auprNew", "=", "0.0", "\n", "recallTemp", "=", "1.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "gap", ")", ":", "\n", "\t\t", "tp", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", ">=", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", ">=", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "if", "tp", "+", "fp", "==", "0", ":", "continue", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "\n", "#precisionVec.append(precision)", "\n", "#recallVec.append(recall)", "\n", "auprNew", "+=", "(", "recallTemp", "-", "recall", ")", "*", "precision", "\n", "recallTemp", "=", "recall", "\n", "", "auprNew", "+=", "recall", "*", "precision", "\n", "return", "auprBase", ",", "auprNew", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.auprOut": [[202, 256], ["numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len"], "function", ["None"], ["", "def", "auprOut", "(", "name", ")", ":", "\n", "#calculate the AUPR", "\n", "# calculate baseline", "\n", "\t", "T", "=", "1", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "1", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "1", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "auprBase", "=", "0.0", "\n", "recallTemp", "=", "1.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "end", ",", "start", ",", "-", "gap", ")", ":", "\n", "\t\t", "fp", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", "<", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", "<", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "if", "tp", "+", "fp", "==", "0", ":", "break", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "\n", "auprBase", "+=", "(", "recallTemp", "-", "recall", ")", "*", "precision", "\n", "recallTemp", "=", "recall", "\n", "", "auprBase", "+=", "recall", "*", "precision", "\n", "\n", "\n", "# calculate our algorithm", "\n", "T", "=", "1000", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "0.12", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "0.0104", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "#f = open(\"./{}/{}/T_{}.txt\".format(nnName, dataName, T), 'w')", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "auprNew", "=", "0.0", "\n", "recallTemp", "=", "1.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "end", ",", "start", ",", "-", "gap", ")", ":", "\n", "\t\t", "fp", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", "<", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", "<", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "if", "tp", "+", "fp", "==", "0", ":", "break", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "\n", "auprNew", "+=", "(", "recallTemp", "-", "recall", ")", "*", "precision", "\n", "recallTemp", "=", "recall", "\n", "", "auprNew", "+=", "recall", "*", "precision", "\n", "return", "auprBase", ",", "auprNew", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.detection": [[259, 302], ["numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "numpy.loadtxt", "numpy.loadtxt", "numpy.arange", "numpy.minimum", "numpy.minimum", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "numpy.float", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len"], "function", ["None"], ["", "def", "detection", "(", "name", ")", ":", "\n", "#calculate the minimum detection error", "\n", "# calculate baseline", "\n", "\t", "T", "=", "1", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Base_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "1", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "1", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "#f = open(\"./{}/{}/T_{}.txt\".format(nnName, dataName, T), 'w')", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "errorBase", "=", "1.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "gap", ")", ":", "\n", "\t\t", "tpr", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", "<", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "error2", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", ">", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "errorBase", "=", "np", ".", "minimum", "(", "errorBase", ",", "(", "tpr", "+", "error2", ")", "/", "2.0", ")", "\n", "\n", "# calculate our algorithm", "\n", "", "T", "=", "1000", "\n", "cifar", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_In.txt'", ",", "delimiter", "=", "','", ")", "\n", "other", "=", "np", ".", "loadtxt", "(", "'softmax_scores\\\\confidence_Our_Out.txt'", ",", "delimiter", "=", "','", ")", "\n", "if", "name", "==", "\"CIFAR-10\"", ":", "\n", "\t\t", "start", "=", "0.1", "\n", "end", "=", "0.12", "\n", "", "if", "name", "==", "\"CIFAR-100\"", ":", "\n", "\t\t", "start", "=", "0.01", "\n", "end", "=", "0.0104", "\n", "", "gap", "=", "(", "end", "-", "start", ")", "/", "100000", "\n", "#f = open(\"./{}/{}/T_{}.txt\".format(nnName, dataName, T), 'w')", "\n", "Y1", "=", "other", "[", ":", ",", "2", "]", "\n", "X1", "=", "cifar", "[", ":", ",", "2", "]", "\n", "errorNew", "=", "1.0", "\n", "for", "delta", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "gap", ")", ":", "\n", "\t\t", "tpr", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X1", "<", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "X1", ")", ")", "\n", "error2", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y1", ">", "delta", ")", ")", "/", "np", ".", "float", "(", "len", "(", "Y1", ")", ")", "\n", "errorNew", "=", "np", ".", "minimum", "(", "errorNew", ",", "(", "tpr", "+", "error2", ")", "/", "2.0", ")", "\n", "\n", "", "return", "errorBase", ",", "errorNew", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.metric": [[306, 334], ["threshold_metric.tpr95", "threshold_metric.detection", "threshold_metric.auroc", "threshold_metric.auprIn", "threshold_metric.auprOut", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.tpr95", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.detection", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.auroc", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.auprIn", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.auprOut"], ["", "def", "metric", "(", "nn", ",", "data", ")", ":", "\n", "\t", "if", "nn", "==", "\"densenet10\"", "or", "nn", "==", "\"wideresnet10\"", ":", "indis", "=", "\"CIFAR-10\"", "\n", "if", "nn", "==", "\"densenet100\"", "or", "nn", "==", "\"wideresnet100\"", ":", "indis", "=", "\"CIFAR-100\"", "\n", "if", "nn", "==", "\"densenet10\"", "or", "nn", "==", "\"densenet100\"", ":", "nnStructure", "=", "\"DenseNet-BC-100\"", "\n", "if", "nn", "==", "\"wideresnet10\"", "or", "nn", "==", "\"wideresnet100\"", ":", "nnStructure", "=", "\"Wide-ResNet-28-10\"", "\n", "\n", "if", "data", "==", "\"Imagenet\"", ":", "dataName", "=", "\"Tiny-ImageNet (crop)\"", "\n", "if", "data", "==", "\"Imagenet_resize\"", ":", "dataName", "=", "\"Tiny-ImageNet (resize)\"", "\n", "if", "data", "==", "\"LSUN\"", ":", "dataName", "=", "\"LSUN (crop)\"", "\n", "if", "data", "==", "\"LSUN_resize\"", ":", "dataName", "=", "\"LSUN (resize)\"", "\n", "if", "data", "==", "\"iSUN\"", ":", "dataName", "=", "\"iSUN\"", "\n", "if", "data", "==", "\"Gaussian\"", ":", "dataName", "=", "\"Gaussian noise\"", "\n", "if", "data", "==", "\"Uniform\"", ":", "dataName", "=", "\"Uniform Noise\"", "\n", "fprBase", ",", "fprNew", "=", "tpr95", "(", "indis", ")", "\n", "errorBase", ",", "errorNew", "=", "detection", "(", "indis", ")", "\n", "aurocBase", ",", "aurocNew", "=", "auroc", "(", "indis", ")", "\n", "auprinBase", ",", "auprinNew", "=", "auprIn", "(", "indis", ")", "\n", "auproutBase", ",", "auproutNew", "=", "auprOut", "(", "indis", ")", "\n", "print", "(", "\"{:31}{:>22}\"", ".", "format", "(", "\"Neural network architecture:\"", ",", "nnStructure", ")", ")", "\n", "print", "(", "\"{:31}{:>22}\"", ".", "format", "(", "\"In-distribution dataset:\"", ",", "indis", ")", ")", "\n", "print", "(", "\"{:31}{:>22}\"", ".", "format", "(", "\"Out-of-distribution dataset:\"", ",", "dataName", ")", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"{:>34}{:>19}\"", ".", "format", "(", "\"Baseline\"", ",", "\"Our Method\"", ")", ")", "\n", "print", "(", "\"{:20}{:13.1f}%{:>18.1f}% \"", ".", "format", "(", "\"FPR at TPR 95%:\"", ",", "fprBase", "*", "100", ",", "fprNew", "*", "100", ")", ")", "\n", "print", "(", "\"{:20}{:13.1f}%{:>18.1f}%\"", ".", "format", "(", "\"Detection error:\"", ",", "errorBase", "*", "100", ",", "errorNew", "*", "100", ")", ")", "\n", "print", "(", "\"{:20}{:13.1f}%{:>18.1f}%\"", ".", "format", "(", "\"AUROC:\"", ",", "aurocBase", "*", "100", ",", "aurocNew", "*", "100", ")", ")", "\n", "print", "(", "\"{:20}{:13.1f}%{:>18.1f}%\"", ".", "format", "(", "\"AUPR In:\"", ",", "auprinBase", "*", "100", ",", "auprinNew", "*", "100", ")", ")", "\n", "print", "(", "\"{:20}{:13.1f}%{:>18.1f}%\"", ".", "format", "(", "\"AUPR Out:\"", ",", "auproutBase", "*", "100", ",", "auproutNew", "*", "100", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.BasicBlock.__init__": [[23, 30], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropRate", "=", "0.0", ")", ":", "\n", "\t\t", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.BasicBlock.forward": [[30, 35], ["densenet.BasicBlock.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet.BasicBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet.BasicBlock.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "\t\t\t", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.BottleneckBlock.__init__": [[37, 48], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropRate", "=", "0.0", ")", ":", "\n", "\t\t", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_planes", "=", "out_planes", "*", "4", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "inter_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "inter_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "inter_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.BottleneckBlock.forward": [[48, 56], ["densenet.BottleneckBlock.conv1", "densenet.BottleneckBlock.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet.BottleneckBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet.BottleneckBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet.BottleneckBlock.bn1", "densenet.BottleneckBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "\t\t\t", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "\t\t\t", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.TransitionBlock.__init__": [[58, 65], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropRate", "=", "0.0", ")", ":", "\n", "\t\t", "super", "(", "TransitionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.TransitionBlock.forward": [[65, 70], ["densenet.TransitionBlock.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.TransitionBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet.TransitionBlock.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "\t\t\t", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.DenseBlock.__init__": [[72, 75], ["torch.Module.__init__", "densenet.DenseBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.DenseBlock._make_layer"], ["\t", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", "=", "0.0", ")", ":", "\n", "\t\t", "super", "(", "DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "growth_rate", ",", "nb_layers", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "growth_rate", ",", "nb_layers", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.DenseBlock._make_layer": [[75, 80], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "growth_rate", ",", "nb_layers", ",", "dropRate", ")", ":", "\n", "\t\t", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "block", "(", "in_planes", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.DenseBlock.forward": [[80, 82], ["densenet.DenseBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.DenseNet3.__init__": [[84, 125], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseBlock", "int", "densenet.TransitionBlock", "int", "densenet.DenseBlock", "int", "densenet.TransitionBlock", "int", "densenet.DenseBlock", "int", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet3.modules", "int", "math.floor", "int", "math.floor", "isinstance", "math.floor", "math.floor", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["\t", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "growth_rate", "=", "12", ",", "\n", "reduction", "=", "0.5", ",", "bottleneck", "=", "True", ",", "dropRate", "=", "0.0", ")", ":", "\n", "\t\t", "super", "(", "DenseNet3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "2", "*", "growth_rate", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "3", "\n", "if", "bottleneck", "==", "True", ":", "\n", "\t\t\t", "n", "=", "n", "/", "2", "\n", "block", "=", "BottleneckBlock", "\n", "", "else", ":", "\n", "\t\t\t", "block", "=", "BasicBlock", "\n", "# 1st conv before any dense block", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "DenseBlock", "(", "n", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "in_planes", "+", "n", "*", "growth_rate", ")", "\n", "self", ".", "trans1", "=", "TransitionBlock", "(", "in_planes", ",", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", ",", "dropRate", "=", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "DenseBlock", "(", "n", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "in_planes", "+", "n", "*", "growth_rate", ")", "\n", "self", ".", "trans2", "=", "TransitionBlock", "(", "in_planes", ",", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", ",", "dropRate", "=", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "DenseBlock", "(", "n", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "in_planes", "+", "n", "*", "growth_rate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_planes", ",", "num_classes", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.DenseNet3.forward": [[125, 134], ["densenet.DenseNet3.conv1", "densenet.DenseNet3.trans1", "densenet.DenseNet3.trans2", "densenet.DenseNet3.block3", "densenet.DenseNet3.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "densenet.DenseNet3.fc", "densenet.DenseNet3.block1", "densenet.DenseNet3.block2", "densenet.DenseNet3.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "block1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "block2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "in_planes", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.recursion_change_bn": [[14, 21], ["isinstance", "enumerate", "module._modules.items", "densenet.recursion_change_bn"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.densenet.recursion_change_bn"], ["def", "recursion_change_bn", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "module", ".", "track_running_stats", "=", "1", "\n", "", "else", ":", "\n", "        ", "for", "i", ",", "(", "name", ",", "module1", ")", "in", "enumerate", "(", "module", ".", "_modules", ".", "items", "(", ")", ")", ":", "\n", "            ", "module1", "=", "recursion_change_bn", "(", "module1", ")", "\n", "", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_finder.print_thresholds": [[29, 35], ["numpy.loadtxt", "print", "min", "max"], "function", ["None"], ["def", "print_thresholds", "(", "path", ",", "temperature", ",", "num_classes", ",", "magnitude", ")", ":", "\n", "\t", "start", "=", "0", "\n", "end", "=", "temperature", "/", "num_classes", "*", "magnitude", "\n", "confidence_values", "=", "np", ".", "loadtxt", "(", "path", ",", "delimiter", "=", "','", ")", "\n", "confidence_values", "=", "confidence_values", "[", ":", ",", "2", "]", "\n", "print", "(", "'For magnitude {}: min threshold {}, and max threshold {}'", ".", "format", "(", "magnitude", ",", "min", "(", "confidence_values", ")", ",", "max", "(", "confidence_values", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_finder.run": [[37, 139], ["numpy.moveaxis", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.device", "torch.device", "torch.device", "torch.device", "print", "net1.to", "torch.CrossEntropyLoss().to", "torch.Adam", "os.path.join", "net1.parameters", "monitor.dataset_name.lower", "monitor.model_name.lower", "os.path.join", "os.path.join", "time.time", "open", "open", "enumerate", "os.path.join", "threshold_finder.print_thresholds", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.CrossEntropyLoss", "torch.autograd.Variable", "net1", "net1.data.cpu", "nnOutputs.numpy.numpy", "numpy.argmax", "torch.autograd.Variable", "nn.CrossEntropyLoss().to.", "criterion.backward", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.add", "torch.add", "torch.add", "torch.add", "net1", "net1.data.cpu", "nnOutputs.numpy.numpy", "monitor.dataset_name.lower", "images.cuda", "numpy.max", "numpy.exp", "numpy.sum", "open.write", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.autograd.Variable", "numpy.max", "numpy.exp", "numpy.sum", "open.write", "print", "time.time", "monitor.dataset_name.lower", "numpy.exp", "torch.ge.float", "numpy.exp", "numpy.max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.max", "time.time"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_finder.print_thresholds"], ["", "def", "run", "(", "monitor", ",", "net1", ",", "X", ",", "y", ",", "save", ",", "params", ")", ":", "\n", "# os.getcwd(), ", "\n", "\t", "use_alternative_monitor", "=", "params", "[", "'use_alternative_monitor'", "]", "\n", "monitor", ".", "dataset_name", ",", "monitor", ".", "model_name", "=", "params", "[", "'dataset_name'", "]", ",", "params", "[", "'model_name'", "]", "\n", "use_gpu", "=", "params", "[", "'use_gpu'", "]", "\n", "temper", "=", "monitor", ".", "temperature", "\n", "\n", "X", "=", "np", ".", "moveaxis", "(", "X", ",", "-", "1", ",", "1", ")", "\n", "#print('np.shape(X)', np.shape(X))", "\n", "tensor_x", "=", "torch", ".", "Tensor", "(", "X", ")", "\n", "tensor_y", "=", "torch", ".", "Tensor", "(", "y", ")", "\n", "\n", "my_dataset", "=", "TensorDataset", "(", "tensor_x", ",", "tensor_y", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "my_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "CUDA_DEVICE", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "CUDA_DEVICE", ")", "\n", "net1", ".", "to", "(", "CUDA_DEVICE", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "CUDA_DEVICE", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "net1", ".", "parameters", "(", ")", ",", "lr", "=", "5e-4", ")", "\n", "\n", "root_dir", "=", "os", ".", "path", ".", "join", "(", "'src'", ",", "'threats'", ",", "'novelty_detection'", ",", "'methods'", ",", "'sota'", ",", "'ODIN'", ",", "'softmax_scores'", ",", "monitor", ".", "dataset_name", ".", "lower", "(", ")", ",", "monitor", ".", "model_name", ".", "lower", "(", ")", ")", "\n", "\n", "for", "noiseMagnitude1", "in", "monitor", ".", "magnitude", ":", "\n", "\t\t", "path_f1", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'confidence_base_magnitude_{}.txt'", ".", "format", "(", "noiseMagnitude1", ")", ")", "\n", "path_f2", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'confidence_ODIN_magnitude_{}.txt'", ".", "format", "(", "noiseMagnitude1", ")", ")", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "f1", "=", "open", "(", "path_f1", ",", "'w'", ")", "\n", "g1", "=", "open", "(", "path_f2", ",", "'w'", ")", "\n", "\n", "N", "=", "10000", "\n", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "testloader", ")", ":", "\n", "\n", "\t\t\t", "if", "j", "<", "1000", ":", "continue", "\n", "images", ",", "_", "=", "data", "\n", "\n", "inputs", "=", "Variable", "(", "images", ".", "cuda", "(", "CUDA_DEVICE", ")", ",", "requires_grad", "=", "True", ")", "\n", "outputs", "=", "net1", "(", "inputs", ")", "\n", "\n", "# Calculating the confidence of the output, no perturbation added here", "\n", "nnOutputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", ".", "numpy", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", "[", "0", "]", "\n", "nnOutputs", "=", "nnOutputs", "-", "np", ".", "max", "(", "nnOutputs", ")", "\n", "nnOutputs", "=", "np", ".", "exp", "(", "nnOutputs", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "nnOutputs", ")", ")", "\n", "\n", "if", "save", ":", "\n", "\t\t\t\t", "f1", ".", "write", "(", "\"{}, {}, {}\\n\"", ".", "format", "(", "temper", ",", "noiseMagnitude1", ",", "np", ".", "max", "(", "nnOutputs", ")", ")", ")", "\n", "\n", "# Using temperature scaling", "\n", "", "outputs", "=", "outputs", "/", "temper", "\n", "\n", "# Calculating the perturbation we need to add, that is,", "\n", "# the sign of gradient of cross entropy loss w.r.t. input", "\n", "maxIndexTemp", "=", "np", ".", "argmax", "(", "nnOutputs", ")", "\n", "labels", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "maxIndexTemp", "]", ")", ".", "cuda", "(", "CUDA_DEVICE", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "\n", "# Normalizing the gradient to binary in {0, 1}", "\n", "gradient", "=", "(", "torch", ".", "ge", "(", "inputs", ".", "grad", ".", "data", ",", "0", ")", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "# Normalizing the gradient to the same space of image", "\n", "gradient", "[", "0", "]", "[", "0", "]", "=", "(", "gradient", "[", "0", "]", "[", "0", "]", ")", "/", "(", "63.0", "/", "255.0", ")", "\n", "gradient", "[", "0", "]", "[", "1", "]", "=", "(", "gradient", "[", "0", "]", "[", "1", "]", ")", "/", "(", "62.1", "/", "255.0", ")", "\n", "gradient", "[", "0", "]", "[", "2", "]", "=", "(", "gradient", "[", "0", "]", "[", "2", "]", ")", "/", "(", "66.7", "/", "255.0", ")", "\n", "# Adding small perturbations to images", "\n", "tempInputs", "=", "torch", ".", "add", "(", "inputs", ".", "data", ",", "-", "noiseMagnitude1", ",", "gradient", ")", "\n", "outputs", "=", "net1", "(", "Variable", "(", "tempInputs", ")", ")", "\n", "outputs", "=", "outputs", "/", "temper", "\n", "# Calculating the confidence after adding perturbations", "\n", "nnOutputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", ".", "numpy", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", "[", "0", "]", "\n", "nnOutputs", "=", "nnOutputs", "-", "np", ".", "max", "(", "nnOutputs", ")", "\n", "nnOutputs", "=", "np", ".", "exp", "(", "nnOutputs", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "nnOutputs", ")", ")", "\n", "\n", "if", "save", ":", "\n", "\t\t\t\t", "g1", ".", "write", "(", "\"{}, {}, {}\\n\"", ".", "format", "(", "temper", ",", "noiseMagnitude1", ",", "np", ".", "max", "(", "nnOutputs", ")", ")", ")", "\n", "\n", "", "if", "j", "%", "100", "==", "99", ":", "\n", "\t\t\t\t", "print", "(", "\"{:4}/{:4} images processed, {:.1f} seconds used.\"", ".", "format", "(", "j", "+", "1", "-", "1000", ",", "N", "-", "1000", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "", "for", "noiseMagnitude1", "in", "monitor", ".", "magnitude", ":", "\n", "\t\t", "path_f2", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'confidence_ODIN_magnitude_{}.txt'", ".", "format", "(", "noiseMagnitude1", ")", ")", "\n", "\n", "if", "monitor", ".", "dataset_name", ".", "lower", "(", ")", "==", "'gtsrb'", ":", "\n", "\t\t\t", "num_classes", "=", "43", "\n", "", "elif", "monitor", ".", "dataset_name", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "\t\t\t", "num_classes", "=", "10", "\n", "\n", "", "print_thresholds", "(", "path_f2", ",", "temper", ",", "num_classes", ",", "noiseMagnitude1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.DataSplit.__init__": [[36, 55], ["len", "list", "int", "len", "int", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "range", "numpy.floor", "numpy.floor", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.floor", "numpy.floor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "test_train_split", "=", "0.7", ",", "val_train_split", "=", "0.2", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n", "dataset_size", "=", "len", "(", "dataset", ")", "\n", "self", ".", "indices", "=", "list", "(", "range", "(", "dataset_size", ")", ")", "\n", "test_split", "=", "int", "(", "np", ".", "floor", "(", "test_train_split", "*", "dataset_size", ")", ")", "\n", "\n", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indices", ")", "\n", "\n", "", "train_indices", ",", "self", ".", "test_indices", "=", "self", ".", "indices", "[", ":", "test_split", "]", ",", "self", ".", "indices", "[", "test_split", ":", "]", "\n", "train_size", "=", "len", "(", "train_indices", ")", "\n", "validation_split", "=", "int", "(", "np", ".", "floor", "(", "(", "1", "-", "val_train_split", ")", "*", "train_size", ")", ")", "\n", "\n", "self", ".", "train_indices", ",", "self", ".", "val_indices", "=", "train_indices", "[", ":", "validation_split", "]", ",", "train_indices", "[", "validation_split", ":", "]", "\n", "\n", "self", ".", "train_sampler", "=", "SubsetRandomSampler", "(", "self", ".", "train_indices", ")", "\n", "self", ".", "val_sampler", "=", "SubsetRandomSampler", "(", "self", ".", "val_indices", ")", "\n", "self", ".", "test_sampler", "=", "SubsetRandomSampler", "(", "self", ".", "test_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.DataSplit.get_train_split_point": [[56, 58], ["len", "len"], "methods", ["None"], ["", "def", "get_train_split_point", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_sampler", ")", "+", "len", "(", "self", ".", "val_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.DataSplit.get_validation_split_point": [[59, 61], ["len"], "methods", ["None"], ["", "def", "get_validation_split_point", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.DataSplit.get_split": [[62, 69], ["functools.lru_cache", "logging.debug", "cnn_pytorch_example.DataSplit.get_train_loader", "cnn_pytorch_example.DataSplit.get_validation_loader", "cnn_pytorch_example.DataSplit.get_test_loader"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_train_loader", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_validation_loader", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_test_loader"], ["", "@", "lru_cache", "(", "maxsize", "=", "4", ")", "\n", "def", "get_split", "(", "self", ",", "batch_size", "=", "50", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'Initializing train-validation-test dataloaders'", ")", "\n", "self", ".", "train_loader", "=", "self", ".", "get_train_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ")", "\n", "self", ".", "val_loader", "=", "self", ".", "get_validation_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ")", "\n", "self", ".", "test_loader", "=", "self", ".", "get_test_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.DataSplit.get_train_loader": [[70, 75], ["functools.lru_cache", "logging.debug", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "@", "lru_cache", "(", "maxsize", "=", "4", ")", "\n", "def", "get_train_loader", "(", "self", ",", "batch_size", "=", "50", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'Initializing train dataloader'", ")", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "self", ".", "train_sampler", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "self", ".", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.DataSplit.get_validation_loader": [[76, 81], ["functools.lru_cache", "logging.debug", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "@", "lru_cache", "(", "maxsize", "=", "4", ")", "\n", "def", "get_validation_loader", "(", "self", ",", "batch_size", "=", "50", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'Initializing validation dataloader'", ")", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "self", ".", "val_sampler", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "self", ".", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.DataSplit.get_test_loader": [[82, 87], ["functools.lru_cache", "logging.debug", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "@", "lru_cache", "(", "maxsize", "=", "4", ")", "\n", "def", "get_test_loader", "(", "self", ",", "batch_size", "=", "50", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'Initializing test dataloader'", ")", "\n", "self", ".", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "self", ".", "test_sampler", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "self", ".", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.Dataset.__init__": [[90, 108], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "root_dir", "=", "'data'", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_name", "=", "''", "\n", "self", ".", "modification", "=", "''", "\n", "self", ".", "dataset_ID_name", "=", "''", "\n", "self", ".", "dataset_OOD_name", "=", "''", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "width", "=", "0", "\n", "self", ".", "height", "=", "0", "\n", "self", ".", "channels", "=", "0", "\n", "self", ".", "testPath", "=", "''", "\n", "self", ".", "num_classes", "=", "0", "\n", "self", ".", "trainPath", "=", "''", "\n", "self", ".", "testPath", "=", "''", "\n", "self", ".", "validation_size", "=", "None", "\n", "self", ".", "X", "=", "[", "[", "]", "]", "\n", "self", ".", "y", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.Dataset.__getitem__": [[110, 119], ["torchvision.to_tensor", "torchvision.to_tensor", "torchvision.to_tensor", "cnn_pytorch_example.Dataset.transform"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "self", ".", "X", "[", "index", "]", "\n", "\n", "# Just apply your transformations here", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "x", "=", "TF", ".", "to_tensor", "(", "image", ")", "\n", "\n", "return", "x", ",", "self", ".", "y", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.Dataset.__len__": [[121, 123], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.Dataset.load_dataset": [[125, 149], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "gzip.GzipFile", "numpy.load", "numpy.load", "gzip.GzipFile", "numpy.load", "numpy.load", "gzip.GzipFile", "numpy.load", "numpy.load", "gzip.GzipFile", "numpy.load", "numpy.load"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "dataset_path", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "train_images", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'train-images-npy.gz'", ")", "\n", "train_labels", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'train-labels-npy.gz'", ")", "\n", "\n", "test_images", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'test-images-npy.gz'", ")", "\n", "test_labels", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'test-labels-npy.gz'", ")", "\n", "\n", "if", "mode", "==", "'train'", "or", "mode", "==", "'all'", ":", "\n", "            ", "f", "=", "gzip", ".", "GzipFile", "(", "train_images", ",", "\"r\"", ")", "\n", "x_train", "=", "np", ".", "load", "(", "f", ")", "\n", "\n", "f", "=", "gzip", ".", "GzipFile", "(", "train_labels", ",", "\"r\"", ")", "\n", "y_train", "=", "np", ".", "load", "(", "f", ")", "\n", "\n", "", "elif", "mode", "==", "'test'", "or", "mode", "==", "'all'", ":", "\n", "            ", "f", "=", "gzip", ".", "GzipFile", "(", "test_images", ",", "\"r\"", ")", "\n", "x_test", "=", "np", ".", "load", "(", "f", ")", "\n", "\n", "f", "=", "gzip", ".", "GzipFile", "(", "test_labels", ",", "\"r\"", ")", "\n", "y_test", "=", "np", ".", "load", "(", "f", ")", "\n", "\n", "", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.LeNet.__init__": [[153, 168], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "conv_channels", "=", "16", "\n", "self", ".", "fc1_input", "=", "self", ".", "conv_channels", "*", "4", "*", "4", "\n", "\n", "#self.height = math.sqrt( self.fc1_input / self.batch_size / self.conv_channels)", "\n", "#self.width = math.sqrt( self.fc1_input / self.batch_size / self.conv_channels)", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "self", ".", "conv_channels", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "fc1_input", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.LeNet.forward": [[169, 178], ["cnn_pytorch_example.LeNet.pool", "cnn_pytorch_example.LeNet.pool", "cnn_pytorch_example.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "cnn_pytorch_example.LeNet.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "cnn_pytorch_example.LeNet.size", "cnn_pytorch_example.LeNet.fc1", "cnn_pytorch_example.LeNet.fc2", "cnn_pytorch_example.LeNet.conv1", "cnn_pytorch_example.LeNet.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "fc1_input", ")", "\n", "#x = x.view(x.size(0), -1)", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.train": [[234, 266], ["range", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "enumerate", "net.state_dict", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "labels.long", "print", "data[].to", "data[].to"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save"], ["def", "train", "(", "trainloader", ",", "num_epochs", "=", "40", ")", ":", "\n", "\n", "    ", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "# loop over the dataset multiple times", "\n", "\n", "        ", "running_loss", "=", "0.0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "# get the inputs; data is a list of [inputs, labels]", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "inputs", ",", "labels", "=", "data", "\n", "\n", "# zero the parameter gradients", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward + backward + optimize", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# print statistics", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "i", "%", "100", "==", "99", ":", "# print every 100 mini-batches", "\n", "                ", "print", "(", "'[%d, %5d] loss: %.3f'", "%", "\n", "(", "epoch", "+", "1", ",", "i", "+", "1", ",", "running_loss", "/", "100", ")", ")", "\n", "running_loss", "=", "0.0", "\n", "#test(valLoader)", "\n", "\n", "", "", "", "print", "(", "'Finished Training'", ")", "\n", "\n", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "PATH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.test": [[268, 288], ["net.load_state_dict", "net.eval", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "labels.size", "data[].to", "data[].to"], "function", ["None"], ["", "def", "test", "(", "testloader", ")", ":", "\n", "#net = Net()", "\n", "    ", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "PATH", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "testloader", ":", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "images", ",", "labels", "=", "data", "\n", "\n", "", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "print", "(", "'Val Accuracy: {} %'", ".", "format", "(", "100", "*", "correct", "/", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.cnn_pytorch_example.test_ODIN": [[290, 320], ["net.load_state_dict", "net.eval", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "net", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "odin_monitor.detection", "labels.size", "numpy.shape", "data[].to", "data[].to"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ODIN.threshold_metric.detection"], ["", "def", "test_ODIN", "(", ")", ":", "\n", "#net = Net()", "\n", "    ", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "PATH", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "OOD_detection", "=", "0", "\n", "total_OOD", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "testloader", ":", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "images", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "images", ",", "labels", "=", "data", "\n", "", "print", "(", "np", ".", "shape", "(", "images", ")", ")", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "\n", "# odin detector", "\n", "nnOutputs", ",", "is_OOD", "=", "odin_monitor", ".", "detection", "(", "net", ",", "images", ",", "temperature", ",", "magnitude", ",", "\n", "threshold", ",", "device", ")", "\n", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "OOD_detection", "+=", "1", "if", "is_OOD", "else", "0", "\n", "\n", "", "", "print", "(", "'Test Accuracy of the model on the 10000 test images: {} %'", ".", "format", "(", "100", "*", "correct", "/", "total", ")", ")", "\n", "print", "(", "'False positives:'", ",", "OOD_detection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers": [[13, 27], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["def", "make_layers", "(", "self", ",", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "1", "\n", "for", "v", "in", "cfg", ":", "\n", "            ", "if", "v", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.__init__": [[28, 45], ["torch.Module.__init__", "torchvision.VGG", "torchvision.VGG", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "classifiers.MNIST_VGG.model._initialize_weights", "classifiers.MNIST_VGG.make_layers", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MNIST_VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "# Reduced VGG16.", "\n", "self", ".", "cfg", "=", "[", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "'M'", "]", "\n", "self", ".", "model", "=", "VGG", ".", "VGG", "(", "self", ".", "make_layers", "(", "self", ".", "cfg", ",", "batch_norm", "=", "True", ")", ",", "num_classes", "=", "10", ")", "\n", "# MNIST would have a different sized feature map.", "\n", "self", ".", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "1", "*", "1", ",", "256", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "10", ")", ",", "\n", ")", "\n", "self", ".", "model", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.forward": [[46, 54], ["classifiers.MNIST_VGG.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.output_size": [[55, 57], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.train_config": [[58, 64], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.MNIST_VGG.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "60", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_Resnet.__init__": [[71, 87], ["torch.Module.__init__", "torchvision.ResNet", "torchvision.ResNet", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MNIST_Resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "# Resnet50.", "\n", "self", ".", "model", "=", "Resnet", ".", "ResNet", "(", "Resnet", ".", "Bottleneck", ",", "[", "2", ",", "3", ",", "5", ",", "2", "]", ",", "num_classes", "=", "10", ")", "\n", "\n", "# MNIST would have a different sized feature map.", "\n", "self", ".", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# The first part also needs to be fixed.", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "# Replace the harsh convolution.", "\n", "del", "self", ".", "model", ".", "maxpool", "\n", "self", ".", "model", ".", "maxpool", "=", "lambda", "x", ":", "x", "# Remove the early maxpool.", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_Resnet.forward": [[88, 96], ["classifiers.MNIST_Resnet.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_Resnet.output_size": [[97, 99], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_Resnet.train_config": [[100, 106], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.MNIST_Resnet.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "60", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR10_VGG.__init__": [[113, 130], ["torch.Module.__init__", "torchvision.VGG", "torchvision.VGG", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "classifiers.CIFAR10_VGG.model._initialize_weights", "torchvision.make_layers", "torchvision.make_layers", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CIFAR10_VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "# VGG16 minus last maxpool.", "\n", "self", ".", "cfg", "=", "[", "32", ",", "32", ",", "'M'", ",", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", "]", "\n", "self", ".", "model", "=", "VGG", ".", "VGG", "(", "VGG", ".", "make_layers", "(", "self", ".", "cfg", ",", "batch_norm", "=", "True", ")", ",", "num_classes", "=", "10", ")", "\n", "# Cifar 10 would have a different sized feature map.", "\n", "self", ".", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "2", "*", "2", ",", "4096", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "10", ")", ",", "\n", ")", "\n", "self", ".", "model", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR10_VGG.forward": [[131, 139], ["classifiers.CIFAR10_VGG.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR10_VGG.output_size": [[140, 142], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR10_VGG.train_config": [[143, 149], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.CIFAR10_VGG.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "60", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR10_Resnet.__init__": [[156, 172], ["torch.Module.__init__", "torchvision.ResNet", "torchvision.ResNet", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CIFAR10_Resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "# Resnet50.", "\n", "self", ".", "model", "=", "Resnet", ".", "ResNet", "(", "Resnet", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "10", ")", "\n", "\n", "# Cifar 10 would have a different sized feature map.", "\n", "self", ".", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# The first part also needs to be fixed.", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "# Replace the harsh convolution.", "\n", "del", "self", ".", "model", ".", "maxpool", "\n", "self", ".", "model", ".", "maxpool", "=", "lambda", "x", ":", "x", "# Remove the early maxpool.", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR10_Resnet.forward": [[173, 181], ["classifiers.CIFAR10_Resnet.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR10_Resnet.output_size": [[182, 184], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR10_Resnet.train_config": [[185, 191], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.CIFAR10_Resnet.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "60", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR100_VGG.__init__": [[198, 215], ["torch.Module.__init__", "torchvision.VGG", "torchvision.VGG", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "classifiers.CIFAR100_VGG.model._initialize_weights", "torchvision.make_layers", "torchvision.make_layers", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CIFAR100_VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "# VGG16 minus last maxpool.", "\n", "self", ".", "cfg", "=", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", "]", "\n", "self", ".", "model", "=", "VGG", ".", "VGG", "(", "VGG", ".", "make_layers", "(", "self", ".", "cfg", ",", "batch_norm", "=", "True", ")", ",", "num_classes", "=", "100", ")", "\n", "# Cifar 10 would have a different sized feature map.", "\n", "self", ".", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "2", "*", "2", ",", "4096", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "100", ")", ",", "\n", ")", "\n", "self", ".", "model", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR100_VGG.forward": [[216, 224], ["classifiers.CIFAR100_VGG.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR100_VGG.output_size": [[225, 227], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "100", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR100_VGG.train_config": [[228, 234], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.CIFAR100_VGG.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "120", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR100_Resnet.__init__": [[241, 257], ["torch.Module.__init__", "torchvision.ResNet", "torchvision.ResNet", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CIFAR100_Resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "# Resnet50.", "\n", "self", ".", "model", "=", "Resnet", ".", "ResNet", "(", "Resnet", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "100", ")", "\n", "\n", "# Cifar 100 would have a different sized feature map.", "\n", "self", ".", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# The first part also needs to be fixed.", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "# Replace the harsh convolution.", "\n", "del", "self", ".", "model", ".", "maxpool", "\n", "self", ".", "model", ".", "maxpool", "=", "lambda", "x", ":", "x", "# Remove the early maxpool.", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR100_Resnet.forward": [[258, 266], ["classifiers.CIFAR100_Resnet.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR100_Resnet.output_size": [[267, 269], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "100", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.CIFAR100_Resnet.train_config": [[270, 276], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.CIFAR100_Resnet.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "120", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.STL10_VGG.__init__": [[283, 300], ["torch.Module.__init__", "torchvision.VGG", "torchvision.VGG", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "classifiers.STL10_VGG.model._initialize_weights", "torchvision.make_layers", "torchvision.make_layers", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STL10_VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "# VGG16.", "\n", "self", ".", "cfg", "=", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", "]", "\n", "self", ".", "model", "=", "VGG", ".", "VGG", "(", "VGG", ".", "make_layers", "(", "self", ".", "cfg", ",", "batch_norm", "=", "True", ")", ",", "num_classes", "=", "10", ")", "\n", "# Cifar 10 would have a different sized feature map.", "\n", "self", ".", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "3", "*", "3", ",", "4096", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "10", ")", ",", "\n", ")", "\n", "self", ".", "model", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.STL10_VGG.forward": [[301, 309], ["classifiers.STL10_VGG.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.STL10_VGG.output_size": [[310, 312], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.STL10_VGG.train_config": [[313, 319], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.STL10_VGG.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "120", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.STL10_Resnet.__init__": [[326, 342], ["torch.Module.__init__", "torchvision.ResNet", "torchvision.ResNet", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STL10_Resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "# Resnet50.", "\n", "self", ".", "model", "=", "Resnet", ".", "ResNet", "(", "Resnet", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "10", ")", "\n", "\n", "# STL10 would have a different sized feature map.", "\n", "self", ".", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# The first part also needs to be fixed.", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "# Replace the harsh convolution.", "\n", "del", "self", ".", "model", ".", "maxpool", "\n", "self", ".", "model", ".", "maxpool", "=", "lambda", "x", ":", "x", "# Remove the early maxpool.", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.STL10_Resnet.forward": [[343, 351], ["classifiers.STL10_Resnet.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.STL10_Resnet.output_size": [[352, 354], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.STL10_Resnet.train_config": [[355, 361], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.STL10_Resnet.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "120", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.TinyImagenet_VGG.__init__": [[368, 384], ["torch.Module.__init__", "torchvision.VGG", "torchvision.VGG", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "classifiers.TinyImagenet_VGG.model._initialize_weights", "torchvision.make_layers", "torchvision.make_layers", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.MNIST_VGG.make_layers"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TinyImagenet_VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "self", ".", "cfg", "=", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", "]", "\n", "self", ".", "model", "=", "VGG", ".", "VGG", "(", "VGG", ".", "make_layers", "(", "self", ".", "cfg", ",", "batch_norm", "=", "True", ")", ",", "num_classes", "=", "200", ")", "\n", "# TinyImagenet would have a different sized feature map.", "\n", "self", ".", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "2", "*", "2", ",", "4096", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "200", ")", ",", "\n", ")", "\n", "self", ".", "model", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.TinyImagenet_VGG.forward": [[385, 393], ["classifiers.TinyImagenet_VGG.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.TinyImagenet_VGG.output_size": [[394, 396], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "200", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.TinyImagenet_VGG.train_config": [[397, 403], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.TinyImagenet_VGG.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "120", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.TinyImagenet_Resnet.__init__": [[410, 424], ["torch.Module.__init__", "torchvision.ResNet", "torchvision.ResNet", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TinyImagenet_Resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Based on the imagenet normalization params.", "\n", "self", ".", "offset", "=", "0.44900", "\n", "self", ".", "multiplier", "=", "4.42477", "\n", "\n", "# Resnet50.", "\n", "self", ".", "model", "=", "Resnet", ".", "ResNet", "(", "Resnet", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "200", ")", "\n", "\n", "# TinyImagenet would have a different sized feature map.", "\n", "self", ".", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# The first part also needs to be fixed.", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "# Replace the harsh convolution.", "\n", "# del self.model.maxpool", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.TinyImagenet_Resnet.forward": [[427, 435], ["classifiers.TinyImagenet_Resnet.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "softmax", "=", "True", ")", ":", "\n", "# Perform late normalization.", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "offset", ")", "*", "self", ".", "multiplier", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "softmax", ":", "\n", "            ", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.TinyImagenet_Resnet.output_size": [[436, 438], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "1", ",", "200", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.classes.classifiers.TinyImagenet_Resnet.train_config": [[439, 445], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "classifiers.TinyImagenet_Resnet.parameters"], "methods", ["None"], ["", "def", "train_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "config", "[", "'optim'", "]", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "config", "[", "'scheduler'", "]", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "config", "[", "'optim'", "]", ",", "patience", "=", "10", ",", "threshold", "=", "1e-2", ",", "min_lr", "=", "1e-6", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "config", "[", "'max_epoch'", "]", "=", "120", "\n", "return", "config", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.__init__": [[18, 37], ["len", "list", "int", "len", "int", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "range", "numpy.floor", "numpy.random.shuffle", "numpy.floor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "test_train_split", "=", "0.7", ",", "val_train_split", "=", "0.2", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n", "dataset_size", "=", "len", "(", "dataset", ")", "\n", "self", ".", "indices", "=", "list", "(", "range", "(", "dataset_size", ")", ")", "\n", "test_split", "=", "int", "(", "np", ".", "floor", "(", "test_train_split", "*", "dataset_size", ")", ")", "\n", "\n", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indices", ")", "\n", "\n", "", "train_indices", ",", "self", ".", "test_indices", "=", "self", ".", "indices", "[", ":", "test_split", "]", ",", "self", ".", "indices", "[", "test_split", ":", "]", "\n", "train_size", "=", "len", "(", "train_indices", ")", "\n", "validation_split", "=", "int", "(", "np", ".", "floor", "(", "(", "1", "-", "val_train_split", ")", "*", "train_size", ")", ")", "\n", "\n", "self", ".", "train_indices", ",", "self", ".", "val_indices", "=", "train_indices", "[", ":", "validation_split", "]", ",", "train_indices", "[", "validation_split", ":", "]", "\n", "\n", "self", ".", "train_sampler", "=", "SubsetRandomSampler", "(", "self", ".", "train_indices", ")", "\n", "self", ".", "val_sampler", "=", "SubsetRandomSampler", "(", "self", ".", "val_indices", ")", "\n", "self", ".", "test_sampler", "=", "SubsetRandomSampler", "(", "self", ".", "test_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_train_split_point": [[38, 40], ["len", "len"], "methods", ["None"], ["", "def", "get_train_split_point", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_sampler", ")", "+", "len", "(", "self", ".", "val_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_validation_split_point": [[41, 43], ["len"], "methods", ["None"], ["", "def", "get_validation_split_point", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_split": [[44, 51], ["functools.lru_cache", "logging.debug", "DataSplit.DataSplit.get_train_loader", "DataSplit.DataSplit.get_validation_loader", "DataSplit.DataSplit.get_test_loader"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_train_loader", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_validation_loader", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_test_loader"], ["", "@", "lru_cache", "(", "maxsize", "=", "4", ")", "\n", "def", "get_split", "(", "self", ",", "batch_size", "=", "50", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'Initializing train-validation-test dataloaders'", ")", "\n", "self", ".", "train_loader", "=", "self", ".", "get_train_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ")", "\n", "self", ".", "val_loader", "=", "self", ".", "get_validation_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ")", "\n", "self", ".", "test_loader", "=", "self", ".", "get_test_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_train_loader": [[52, 57], ["functools.lru_cache", "logging.debug", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "@", "lru_cache", "(", "maxsize", "=", "4", ")", "\n", "def", "get_train_loader", "(", "self", ",", "batch_size", "=", "50", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'Initializing train dataloader'", ")", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "self", ".", "train_sampler", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "self", ".", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_validation_loader": [[58, 63], ["functools.lru_cache", "logging.debug", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "@", "lru_cache", "(", "maxsize", "=", "4", ")", "\n", "def", "get_validation_loader", "(", "self", ",", "batch_size", "=", "50", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'Initializing validation dataloader'", ")", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "self", ".", "val_sampler", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "self", ".", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.DataSplit.DataSplit.get_test_loader": [[64, 69], ["functools.lru_cache", "logging.debug", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "@", "lru_cache", "(", "maxsize", "=", "4", ")", "\n", "def", "get_test_loader", "(", "self", ",", "batch_size", "=", "50", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'Initializing test dataloader'", ")", "\n", "self", ".", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "self", ".", "test_sampler", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "self", ".", "test_loader", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.dataset.Dataset.__init__": [[13, 31], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "root_dir", "=", "'data'", ",", "transform", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_name", "=", "''", "\n", "self", ".", "modification", "=", "''", "\n", "self", ".", "dataset_ID_name", "=", "''", "\n", "self", ".", "dataset_OOD_name", "=", "''", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "width", "=", "0", "\n", "self", ".", "height", "=", "0", "\n", "self", ".", "channels", "=", "0", "\n", "self", ".", "testPath", "=", "''", "\n", "self", ".", "num_classes", "=", "0", "\n", "self", ".", "trainPath", "=", "''", "\n", "self", ".", "testPath", "=", "''", "\n", "self", ".", "validation_size", "=", "None", "\n", "self", ".", "X", "=", "[", "[", "]", "]", "\n", "self", ".", "y", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.dataset.Dataset.__getitem__": [[33, 42], ["torchvision.to_tensor", "dataset.Dataset.transform"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "image", "=", "self", ".", "X", "[", "index", "]", "\n", "\n", "# Just apply your transformations here", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "\t\t\t", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "x", "=", "TF", ".", "to_tensor", "(", "image", ")", "\n", "\n", "return", "x", ",", "self", ".", "y", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.dataset.Dataset.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.dataset.Dataset.load_dataset": [[48, 73], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "gzip.GzipFile", "numpy.load", "gzip.GzipFile", "numpy.load", "gzip.GzipFile", "numpy.load", "gzip.GzipFile", "numpy.load"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "dataset_path", ",", "mode", "=", "'train'", ")", ":", "\n", "\t\t", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "train_images", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'train-images-npy.gz'", ")", "\n", "train_labels", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'train-labels-npy.gz'", ")", "\n", "\n", "test_images", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'test-images-npy.gz'", ")", "\n", "test_labels", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'test-labels-npy.gz'", ")", "\n", "\n", "if", "mode", "==", "'train'", "or", "mode", "==", "'all'", ":", "\n", "\t\t\t", "f", "=", "gzip", ".", "GzipFile", "(", "train_images", ",", "\"r\"", ")", "\n", "x_train", "=", "np", ".", "load", "(", "f", ")", "\n", "\n", "f", "=", "gzip", ".", "GzipFile", "(", "train_labels", ",", "\"r\"", ")", "\n", "y_train", "=", "np", ".", "load", "(", "f", ")", "\n", "\n", "", "elif", "mode", "==", "'test'", "or", "mode", "==", "'all'", ":", "\n", "\t\t\t", "f", "=", "gzip", ".", "GzipFile", "(", "test_images", ",", "\"r\"", ")", "\n", "x_test", "=", "np", ".", "load", "(", "f", ")", "\n", "\n", "f", "=", "gzip", ".", "GzipFile", "(", "test_labels", ",", "\"r\"", ")", "\n", "y_test", "=", "np", ".", "load", "(", "f", ")", "\n", "\n", "# all images are already normalized (values divided by 255.)", "\n", "", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.readout.Readout.__init__": [[3, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "Readout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# general", "\n", "self", ".", "name", "=", "''", "\n", "self", ".", "total_time", "=", "0", "\n", "self", ".", "total_memory", "=", "0", "\n", "\n", "# ML", "\n", "self", ".", "arr_classification_pred", "=", "[", "]", "\n", "self", ".", "arr_classification_true", "=", "[", "]", "\n", "self", ".", "ML_time", "=", "0", "\n", "\n", "# SM", "\n", "self", ".", "arr_detection_SM", "=", "[", "]", "\n", "self", ".", "arr_detection_true", "=", "[", "]", "\n", "self", ".", "arr_reaction_SM", "=", "[", "]", "\n", "self", ".", "arr_reaction_true", "=", "[", "]", "\n", "self", ".", "SM_time", "=", "0", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.model_builder.ModelBuilder.__init__": [[5, 19], ["super().__init__", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "model_name", "=", "None", ",", "models_folder", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "ModelBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "binary", "=", "None", "\n", "self", ".", "algorithm", "=", "None", "\n", "self", ".", "batch_size", "=", "0", "\n", "self", ".", "epochs", "=", "0", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "num_cnn", "=", "0", "#used for ensembles", "\n", "self", ".", "models_folder", "=", "models_folder", "\n", "self", ".", "validation_size", "=", "0.3", "\n", "self", ".", "num_classes", "=", "0", "\n", "\n", "if", "self", ".", "models_folder", "!=", "None", "and", "self", ".", "model_name", "!=", "None", ":", "\n", "\t\t\t", "self", ".", "models_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "models_folder", ",", "self", ".", "model_name", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.experiment.Experiment.__init__": [[5, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "\t\t", "super", "(", "Experiment", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "monitors", "=", "[", "]", "\n", "self", ".", "models", "=", "[", "]", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "self", ".", "tester", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.classifier_impl.Classifier_interface.__subclasshook__": [[3, 8], ["hasattr", "callable"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "__subclasshook__", "(", "cls", ",", "subclass", ")", ":", "\n", "        ", "return", "(", "hasattr", "(", "subclass", ",", "'train'", ")", "and", "callable", "(", "subclass", ".", "train", ")", "\n", "#and hasattr(subclass, 'predict') and callable(subclass.predict) ", "\n", "or", "NotImplemented", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.classifier_impl.Classifier_interface.train": [[9, 17], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "train", "(", "self", ",", "X_train", ",", "Y_train", ",", "X_valid", ",", "Y_valid", ",", "batch_size", ",", "epochs", ")", ":", "\n", "        ", "\"\"\"Load in the data set\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "#@abc.abstractmethod", "\n", "#def predict(self, X):", "\n", "\"\"\"Load in the data set\"\"\"", "\n", "#raise NotImplementedError", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.monitor.Monitor.__init__": [[5, 17], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "monitor_name", ",", "layer_index", "=", "-", "2", ")", ":", "\n", "\t\t", "super", "(", "Monitor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "monitor_dataset", "=", "''", "\n", "self", ".", "monitor_name", "=", "monitor_name", "\n", "self", ".", "class_to_monitor", "=", "0", "\n", "self", ".", "layer_name", "=", "''", "#optional", "\n", "self", ".", "layer_index", "=", "layer_index", "\n", "self", ".", "method", "=", "''", "\n", "self", ".", "trainer", "=", "None", "\n", "self", ".", "dim_reduc_method", "=", "None", "\n", "self", ".", "monitors_folder", "=", "''", "\n", "self", ".", "arrWeights", "=", "[", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.vgg16.DNN.__init__": [[16, 19], ["Classifier_interface.__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "DNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.vgg16.DNN.train": [[20, 83], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "keras.callbacks.ModelCheckpoint", "keras.callbacks.EarlyStopping", "keras.models.Sequential.fit", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "X_train", ",", "Y_train", ",", "X_valid", ",", "Y_valid", ",", "batch_size", ",", "epochs", ")", ":", "\n", "        ", "'''\n        model = VGG16(\n            weights=None, \n            include_top=True, \n            classes=43,\n            input_shape=X_train.shape[1:]\n        )\n        model.compile(\n            loss='categorical_crossentropy',\n            optimizer='sgd',\n            metrics=['accuracy']\n        )\n\n        checkpoint = ModelCheckpoint(\n            'VGG_model.h5', \n            monitor='val_acc', \n            verbose=0, \n            save_best_only=True, \n            save_weights_only=False,\n            mode='auto'\n        )\n\n        # Train the model\n        history = model.fit(X_train, Y_train, batch_size=batch_size, epochs=epochs, validation_data=(X_valid, Y_valid), callbacks=[checkpoint], verbose=1)\n        return model, history\n\n        '''", "\n", "classes", "=", "43", "\n", "input_shape", "=", "X_train", ".", "shape", "[", "1", ":", "]", "#(224,224,3)", "\n", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "input_shape", "=", "input_shape", ",", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "units", "=", "4096", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "units", "=", "4096", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "units", "=", "classes", ",", "activation", "=", "\"softmax\"", ")", ")", "\n", "\n", "opt", "=", "Adam", "(", "lr", "=", "0.001", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "opt", ",", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "checkpoint", "=", "ModelCheckpoint", "(", "\"vgg16_1.h5\"", ",", "monitor", "=", "'val_acc'", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ",", "save_weights_only", "=", "False", ",", "mode", "=", "'auto'", ",", "period", "=", "1", ")", "\n", "early", "=", "EarlyStopping", "(", "monitor", "=", "'val_acc'", ",", "min_delta", "=", "0", ",", "patience", "=", "20", ",", "verbose", "=", "1", ",", "mode", "=", "'auto'", ")", "\n", "history", "=", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "epochs", ",", "validation_data", "=", "(", "X_valid", ",", "Y_valid", ")", ")", "\n", "#model.fit_generator(steps_per_epoch=100,generator=traindata, validation_data= testdata, validation_steps=10,epochs=100,callbacks=[checkpoint,early])", "\n", "return", "model", ",", "history", "\n", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.le_net.DNN.__init__": [[8, 11], ["Classifier_interface.__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "\t\t", "super", "(", "DNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.le_net.DNN.train": [[12, 34], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.compile", "keras.models.Sequential.fit", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "X_train", ",", "Y_train", ",", "X_valid", ",", "Y_valid", ",", "batch_size", ",", "epochs", ")", ":", "\n", "# LeNet", "\n", "\t\t", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "activation", "=", "'relu'", ",", "input_shape", "=", "X_train", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "rate", "=", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "rate", "=", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "256", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "rate", "=", "0.5", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "self", ".", "num_classes", ",", "activation", "=", "'softmax'", ")", ")", "\n", "\n", "#Compilation of the model", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "#training", "\n", "history", "=", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "epochs", ",", "validation_data", "=", "(", "X_valid", ",", "Y_valid", ")", ")", "\n", "\n", "return", "model", ",", "history", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.DCGAN.DCGAN.__init__": [[18, 51], ["tensorflow.keras.optimizers.Adam", "DCGAN.DCGAN.build_discriminator", "DCGAN.DCGAN.discriminator.compile", "DCGAN.DCGAN.build_generator", "keras.layers.Input", "DCGAN.DCGAN.generator", "DCGAN.DCGAN.discriminator", "keras.models.Model", "DCGAN.DCGAN.combined.compile"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_discriminator", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_generator"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Input shape", "\n", "        ", "self", ".", "img_rows", "=", "28", "\n", "self", ".", "img_cols", "=", "28", "\n", "self", ".", "channels", "=", "1", "\n", "self", ".", "img_shape", "=", "(", "self", ".", "img_rows", ",", "self", ".", "img_cols", ",", "self", ".", "channels", ")", "\n", "self", ".", "latent_dim", "=", "100", "\n", "\n", "optimizer", "=", "Adam", "(", "0.0002", ",", "0.5", ")", "\n", "\n", "# Build and compile the discriminator", "\n", "self", ".", "discriminator", "=", "self", ".", "build_discriminator", "(", ")", "\n", "self", ".", "discriminator", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "# Build the generator", "\n", "self", ".", "generator", "=", "self", ".", "build_generator", "(", ")", "\n", "\n", "# The generator takes noise as input and generates imgs", "\n", "z", "=", "Input", "(", "shape", "=", "(", "self", ".", "latent_dim", ",", ")", ")", "\n", "img", "=", "self", ".", "generator", "(", "z", ")", "\n", "\n", "# For the combined model we will only train the generator", "\n", "self", ".", "discriminator", ".", "trainable", "=", "False", "\n", "\n", "# The discriminator takes generated images as input and determines validity", "\n", "valid", "=", "self", ".", "discriminator", "(", "img", ")", "\n", "\n", "# The combined model  (stacked generator and discriminator)", "\n", "# Trains the generator to fool the discriminator", "\n", "self", ".", "combined", "=", "Model", "(", "z", ",", "valid", ")", "\n", "self", ".", "combined", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.DCGAN.DCGAN.build_generator": [[52, 75], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.summary", "keras.layers.Input", "keras.models.Sequential.", "keras.models.Model", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.convolutional.Conv2D", "keras.layers.Activation"], "methods", ["None"], ["", "def", "build_generator", "(", "self", ")", ":", "\n", "\n", "        ", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "Dense", "(", "128", "*", "7", "*", "7", ",", "activation", "=", "\"relu\"", ",", "input_dim", "=", "self", ".", "latent_dim", ")", ")", "\n", "model", ".", "add", "(", "Reshape", "(", "(", "7", ",", "7", ",", "128", ")", ")", ")", "\n", "model", ".", "add", "(", "UpSampling2D", "(", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "UpSampling2D", "(", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "self", ".", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "\"tanh\"", ")", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "noise", "=", "Input", "(", "shape", "=", "(", "self", ".", "latent_dim", ",", ")", ")", "\n", "img", "=", "model", "(", "noise", ")", "\n", "\n", "return", "Model", "(", "noise", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.DCGAN.DCGAN.build_discriminator": [[76, 105], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.summary", "keras.layers.Input", "keras.models.Sequential.", "keras.models.Model", "keras.layers.convolutional.Conv2D", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Dropout", "keras.layers.convolutional.Conv2D", "keras.layers.ZeroPadding2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Dropout", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Dropout", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense"], "methods", ["None"], ["", "def", "build_discriminator", "(", "self", ")", ":", "\n", "\n", "        ", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "input_shape", "=", "self", ".", "img_shape", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "LeakyReLU", "(", "alpha", "=", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "ZeroPadding2D", "(", "padding", "=", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "LeakyReLU", "(", "alpha", "=", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "LeakyReLU", "(", "alpha", "=", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "256", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "LeakyReLU", "(", "alpha", "=", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "img", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "validity", "=", "model", "(", "img", ")", "\n", "\n", "return", "Model", "(", "img", ",", "validity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.DCGAN.DCGAN.train": [[106, 151], ["keras.datasets.mnist.load_data", "numpy.expand_dims", "numpy.ones", "numpy.zeros", "range", "numpy.random.randint", "numpy.random.normal", "DCGAN.DCGAN.generator.predict", "DCGAN.DCGAN.discriminator.train_on_batch", "DCGAN.DCGAN.discriminator.train_on_batch", "DCGAN.DCGAN.combined.train_on_batch", "print", "numpy.add", "DCGAN.DCGAN.save_imgs"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.DCGAN.DCGAN.save_imgs"], ["", "def", "train", "(", "self", ",", "epochs", ",", "batch_size", "=", "128", ",", "save_interval", "=", "50", ")", ":", "\n", "\n", "# Load the dataset", "\n", "        ", "(", "X_train", ",", "_", ")", ",", "(", "_", ",", "_", ")", "=", "mnist", ".", "load_data", "(", ")", "\n", "\n", "# Rescale -1 to 1", "\n", "X_train", "=", "X_train", "/", "127.5", "-", "1.", "\n", "X_train", "=", "np", ".", "expand_dims", "(", "X_train", ",", "axis", "=", "3", ")", "\n", "\n", "# Adversarial ground truths", "\n", "valid", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "fake", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "# ---------------------", "\n", "#  Train Discriminator", "\n", "# ---------------------", "\n", "\n", "# Select a random half of images", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "X_train", ".", "shape", "[", "0", "]", ",", "batch_size", ")", "\n", "imgs", "=", "X_train", "[", "idx", "]", "\n", "\n", "# Sample noise and generate a batch of new images", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "batch_size", ",", "self", ".", "latent_dim", ")", ")", "\n", "gen_imgs", "=", "self", ".", "generator", ".", "predict", "(", "noise", ")", "\n", "\n", "# Train the discriminator (real classified as ones and generated as zeros)", "\n", "d_loss_real", "=", "self", ".", "discriminator", ".", "train_on_batch", "(", "imgs", ",", "valid", ")", "\n", "d_loss_fake", "=", "self", ".", "discriminator", ".", "train_on_batch", "(", "gen_imgs", ",", "fake", ")", "\n", "d_loss", "=", "0.5", "*", "np", ".", "add", "(", "d_loss_real", ",", "d_loss_fake", ")", "\n", "\n", "# ---------------------", "\n", "#  Train Generator", "\n", "# ---------------------", "\n", "\n", "# Train the generator (wants discriminator to mistake images as real)", "\n", "g_loss", "=", "self", ".", "combined", ".", "train_on_batch", "(", "noise", ",", "valid", ")", "\n", "\n", "# Plot the progress", "\n", "print", "(", "\"%d [D loss: %f, acc.: %.2f%%] [G loss: %f]\"", "%", "(", "epoch", ",", "d_loss", "[", "0", "]", ",", "100", "*", "d_loss", "[", "1", "]", ",", "g_loss", ")", ")", "\n", "\n", "# If at save interval => save generated image samples", "\n", "if", "epoch", "%", "save_interval", "==", "0", ":", "\n", "                ", "self", ".", "save_imgs", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.DCGAN.DCGAN.save_imgs": [[152, 169], ["numpy.random.normal", "DCGAN.DCGAN.generator.predict", "matplotlib.subplots", "range", "fig.savefig", "matplotlib.close", "range", "axs[].imshow", "axs[].axis"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["", "", "", "def", "save_imgs", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "r", ",", "c", "=", "5", ",", "5", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "r", "*", "c", ",", "self", ".", "latent_dim", ")", ")", "\n", "gen_imgs", "=", "self", ".", "generator", ".", "predict", "(", "noise", ")", "\n", "\n", "# Rescale images 0 - 1", "\n", "gen_imgs", "=", "0.5", "*", "gen_imgs", "+", "0.5", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "r", ",", "c", ")", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "r", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "c", ")", ":", "\n", "                ", "axs", "[", "i", ",", "j", "]", ".", "imshow", "(", "gen_imgs", "[", "cnt", ",", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "axs", "[", "i", ",", "j", "]", ".", "axis", "(", "'off'", ")", "\n", "cnt", "+=", "1", "\n", "", "", "fig", ".", "savefig", "(", "\"images\\\\mnist_%d.png\"", "%", "epoch", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.resnet.DNN.__init__": [[61, 64], ["Classifier_interface.__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "DNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.resnet.DNN.lr_schedule": [[66, 92], ["print"], "methods", ["None"], ["", "def", "lr_schedule", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Learning Rate Schedule\n\n        Learning rate is scheduled to be reduced after 80, 120, 160, 180 epochs.\n        Called automatically every epoch as part of callbacks during training.\n\n        # Arguments\n            epoch (int): The number of epochs\n\n        # Returns\n            lr (float32): learning rate\n        \"\"\"", "\n", "lr", "=", "1e-3", "\n", "\n", "if", "epoch", ">", "180", ":", "\n", "            ", "lr", "*=", "0.5e-3", "\n", "", "elif", "epoch", ">", "160", ":", "\n", "            ", "lr", "*=", "1e-3", "\n", "", "elif", "epoch", ">", "120", ":", "\n", "            ", "lr", "*=", "1e-2", "\n", "", "elif", "epoch", ">", "80", ":", "\n", "            ", "lr", "*=", "1e-1", "\n", "\n", "", "print", "(", "'Learning rate: '", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.resnet.DNN.resnet_layer": [[94, 133], ["keras.layers.Conv2D", "keras.layers.Conv2D.", "keras.layers.Conv2D.", "keras.regularizers.l2", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Activation"], "methods", ["None"], ["", "def", "resnet_layer", "(", "self", ",", "inputs", ",", "num_filters", "=", "16", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ",", "\n", "batch_normalization", "=", "True", ",", "conv_first", "=", "True", ")", ":", "\n", "        ", "\"\"\"2D Convolution-Batch Normalization-Activation stack builder\n\n        # Arguments\n        inputs (tensor): input tensor from input image or previous layer\n        num_filters (int): Conv2D number of filters\n        kernel_size (int): Conv2D square kernel dimensions\n        strides (int): Conv2D square stride dimensions\n        activation (string): activation name\n        batch_normalization (bool): whether to include batch normalization\n        conv_first (bool): conv-bn-activation (True) or\n            bn-activation-conv (False)\n\n        # Returns\n            x (tensor): tensor as input to the next layer\n        \"\"\"", "\n", "conv", "=", "Conv2D", "(", "num_filters", ",", "kernel_size", "=", "kernel_size", ",", "strides", "=", "strides", ",", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "l2", "(", "1e-4", ")", ")", "\n", "\n", "x", "=", "inputs", "\n", "\n", "if", "conv_first", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "if", "batch_normalization", ":", "\n", "                ", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "x", "=", "Activation", "(", "activation", ")", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "batch_normalization", ":", "\n", "                ", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "x", "=", "Activation", "(", "activation", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "conv", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.resnet.DNN.resnet_v1": [[135, 177], ["int", "keras.layers.Input", "resnet.DNN.resnet_layer", "range", "keras.models.Model", "ValueError", "range", "keras.layers.AveragePooling2D", "keras.layers.Flatten", "keras.layers.Dense", "resnet.DNN.resnet_layer", "resnet.DNN.resnet_layer", "keras.layers.add", "resnet.DNN.resnet_layer", "keras.layers.Activation"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_layer", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_layer", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_layer", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_layer"], ["", "def", "resnet_v1", "(", "self", ",", "input_shape", ",", "depth", ",", "num_classes", "=", "10", ")", ":", "\n", "\n", "        ", "if", "(", "depth", "-", "2", ")", "%", "6", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'depth should be 6n+2 (eg 20, 32, 44 in [a])'", ")", "\n", "\n", "# Start model definition", "\n", "", "num_filters", "=", "16", "\n", "num_res_blocks", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "6", ")", "\n", "inputs", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "x", "=", "self", ".", "resnet_layer", "(", "inputs", "=", "inputs", ")", "\n", "\n", "# Instantiate the stack of residual units", "\n", "for", "stack", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "res_block", "in", "range", "(", "num_res_blocks", ")", ":", "\n", "                ", "strides", "=", "1", "\n", "\n", "# first layer but not first stack", "\n", "if", "stack", ">", "0", "and", "res_block", "==", "0", ":", "\n", "                    ", "strides", "=", "2", "# downsample", "\n", "\n", "", "y", "=", "self", ".", "resnet_layer", "(", "inputs", "=", "x", ",", "num_filters", "=", "num_filters", ",", "strides", "=", "strides", ")", "\n", "y", "=", "self", ".", "resnet_layer", "(", "inputs", "=", "y", ",", "num_filters", "=", "num_filters", ",", "activation", "=", "None", ")", "\n", "\n", "# first layer but not first stack", "\n", "if", "stack", ">", "0", "and", "res_block", "==", "0", ":", "\n", "# linear projection residual shortcut connection to match changed dims", "\n", "                    ", "x", "=", "self", ".", "resnet_layer", "(", "inputs", "=", "x", ",", "num_filters", "=", "num_filters", ",", "kernel_size", "=", "1", ",", "\n", "strides", "=", "strides", ",", "activation", "=", "None", ",", "batch_normalization", "=", "False", ")", "\n", "\n", "", "x", "=", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "y", "]", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "\n", "", "num_filters", "*=", "2", "\n", "\n", "# Add classifier on top", "\n", "", "x", "=", "AveragePooling2D", "(", "pool_size", "=", "8", ")", "(", "x", ")", "\n", "y", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "\n", "outputs", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "y", ")", "\n", "\n", "# Instantiate model", "\n", "return", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.resnet.DNN.train": [[179, 194], ["resnet.DNN.resnet_v1", "resnet.DNN.compile", "resnet.DNN.fit"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_v1"], ["", "def", "train", "(", "self", ",", "X_train", ",", "y_train", ",", "X_valid", ",", "y_valid", ",", "batch_size", ",", "epochs", ")", ":", "\n", "        ", "n", "=", "3", "\n", "input_shape", "=", "X_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "# Computed depth from supplied model parameter n", "\n", "depth", "=", "n", "*", "6", "+", "2", "\n", "\n", "model", "=", "self", ".", "resnet_v1", "(", "input_shape", ",", "depth", ",", "self", ".", "num_classes", ")", "\n", "\n", "# Compile the model", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "#training", "\n", "history", "=", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "epochs", ",", "validation_data", "=", "(", "X_valid", ",", "y_valid", ")", ")", "\n", "\n", "return", "model", ",", "history", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.dnn_simple_model.run": [[1, 16], ["model_obj.dataset.load_dataset", "int", "int", "model_obj.algorithm.DNN", "model_obj.algorithm.DNN.train", "model_obj.algorithm.DNN.save", "len", "len"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.Classes.dataset.Dataset.load_dataset", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.train", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save"], ["def", "run", "(", "model_obj", ",", "percentage_of_data", ")", ":", "\n", "\n", "\t", "x_train", ",", "y_train", ",", "x_valid", ",", "y_valid", "=", "model_obj", ".", "dataset", ".", "load_dataset", "(", "mode", "=", "'train'", ")", "\n", "# for one that wants speeding up tests using part of data", "\n", "train_limit", "=", "int", "(", "len", "(", "x_train", ")", "*", "percentage_of_data", ")", "\n", "val_limit", "=", "int", "(", "len", "(", "x_valid", ")", "*", "percentage_of_data", ")", "\n", "x_train", ",", "y_train", "=", "x_train", "[", ":", "train_limit", "]", ",", "y_train", "[", ":", "train_limit", "]", "\n", "x_valid", ",", "y_valid", "=", "x_valid", "[", ":", "val_limit", "]", ",", "y_valid", "[", ":", "val_limit", "]", "\n", "\n", "model", "=", "model_obj", ".", "algorithm", ".", "DNN", "(", "model_obj", ".", "dataset", ".", "num_classes", ")", "\n", "model", ",", "history", "=", "model", ".", "train", "(", "x_train", ",", "y_train", ",", "x_valid", ",", "y_valid", ",", "model_obj", ".", "batch_size", ",", "model_obj", ".", "epochs", ")", "\n", "#saving model", "\n", "model", ".", "save", "(", "model_obj", ".", "models_folder", "+", "model_obj", ".", "model_name", ")", "\n", "\n", "return", "history", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.cnn.DNN.__init__": [[11, 14], ["Classifier_interface.__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "\t\t", "super", "(", "DNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.cnn.DNN.train": [[16, 42], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.compile", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.models.Sequential.fit_generator", "keras.models.Sequential.fit", "keras.optimizers.Adadelta", "x_train.reshape", "len", "len", "x_valid.reshape", "len"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "x_train", ",", "y_train", ",", "x_valid", ",", "y_valid", ",", "batch_size", ",", "epochs", ",", "keras_pre_processing", "=", "False", ",", "train_iterator", "=", "None", ")", ":", "\n", "# CNN", "\n", "\t\t", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "input_shape", "=", "x_train", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "self", ".", "num_classes", ",", "activation", "=", "'softmax'", ")", ")", "\n", "\n", "#training", "\n", "history", "=", "model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "\n", "optimizer", "=", "keras", ".", "optimizers", ".", "Adadelta", "(", ")", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "if", "keras_pre_processing", "and", "train_iterator", "!=", "None", ":", "\n", "\t\t\t", "model", ".", "fit_generator", "(", "train_iterator", ",", "steps_per_epoch", "=", "len", "(", "train_iterator", ")", ",", "epochs", "=", "epochs", ")", "\n", "", "else", ":", "\n", "\t\t\t", "model", ".", "fit", "(", "x_train", ".", "reshape", "(", "len", "(", "x_train", ")", ",", "28", ",", "28", ",", "1", ")", ",", "y_train", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "epochs", ",", "verbose", "=", "1", ",", "\n", "validation_data", "=", "(", "x_valid", ".", "reshape", "(", "len", "(", "x_valid", ")", ",", "28", ",", "28", ",", "1", ")", ",", "y_valid", ")", ")", "\n", "\n", "", "return", "model", ",", "history", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.GAN_GTRSB.ALOCC_Model.__init__": [[27, 101], ["GAN_GTRSB.ALOCC_Model.build_model", "logging.basicConfig", "src.utils.util.load_GTRSB_dataset", "X_train[].reshape", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_model"], ["    ", "def", "__init__", "(", "self", ",", "trainPath", "=", "''", ",", "\n", "input_height", "=", "28", ",", "input_width", "=", "28", ",", "output_height", "=", "28", ",", "output_width", "=", "28", ",", "\n", "attention_label", "=", "7", ",", "is_training", "=", "True", ",", "\n", "z_dim", "=", "100", ",", "gf_dim", "=", "32", ",", "df_dim", "=", "32", ",", "c_dim", "=", "3", ",", "\n", "dataset_name", "=", "None", ",", "dataset_address", "=", "None", ",", "input_fname_pattern", "=", "None", ",", "\n", "checkpoint_dir", "=", "'checkpoint'", ",", "log_dir", "=", "'log'", ",", "sample_dir", "=", "'sample'", ",", "r_alpha", "=", "0.2", ",", "\n", "kb_work_on_patch", "=", "True", ",", "nd_patch_size", "=", "(", "10", ",", "10", ")", ",", "n_stride", "=", "1", ",", "\n", "n_fetch_data", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        This is the main class of our Adversarially Learned One-Class Classifier for Novelty Detection.\n        :param sess: TensorFlow session.\n        :param input_height: The height of image to use.\n        :param input_width: The width of image to use.\n        :param output_height: The height of the output images to produce.\n        :param output_width: The width of the output images to produce.\n        :param attention_label: Conditioned label that growth attention of training label [1]\n        :param is_training: True if in training mode.\n        :param z_dim:  (optional) Dimension of dim for Z, the output of encoder. [100]\n        :param gf_dim: (optional) Dimension of gen filters in first conv layer, i.e. g_decoder_h0. [16] \n        :param df_dim: (optional) Dimension of discrim filters in first conv layer, i.e. d_h0_conv. [16] \n        :param c_dim: (optional) Dimension of image color. For grayscale input, set to 1. [3]\n        :param dataset_name: 'UCSD', 'mnist' or custom defined name.\n        :param dataset_address: path to dataset folder. e.g. './dataset/mnist'.\n        :param input_fname_pattern: Glob pattern of filename of input images e.g. '*'.\n        :param checkpoint_dir: path to saved checkpoint(s) directory.\n        :param log_dir: log directory for training, can be later viewed in TensorBoard.\n        :param sample_dir: Directory address which save some samples [.]\n        :param r_alpha: Refinement parameter, trade-off hyperparameter for the G network loss to reconstruct input images. [0.2]\n        :param kb_work_on_patch: Boolean value for working on PatchBased System or not, only applies to UCSD dataset [True]\n        :param nd_patch_size:  Input patch size, only applies to UCSD dataset.\n        :param n_stride: PatchBased data preprocessing stride, only applies to UCSD dataset.\n        :param n_fetch_data: Fetch size of Data, only applies to UCSD dataset. \n        \"\"\"", "\n", "self", ".", "trainPath", "=", "trainPath", "\n", "self", ".", "b_work_on_patch", "=", "kb_work_on_patch", "\n", "self", ".", "sample_dir", "=", "sample_dir", "\n", "\n", "self", ".", "is_training", "=", "is_training", "\n", "\n", "self", ".", "r_alpha", "=", "r_alpha", "\n", "\n", "self", ".", "input_height", "=", "input_height", "\n", "self", ".", "input_width", "=", "input_width", "\n", "self", ".", "output_height", "=", "output_height", "\n", "self", ".", "output_width", "=", "output_width", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "gf_dim", "=", "gf_dim", "\n", "self", ".", "df_dim", "=", "df_dim", "\n", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "dataset_address", "=", "dataset_address", "\n", "self", ".", "input_fname_pattern", "=", "input_fname_pattern", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "\n", "self", ".", "attention_label", "=", "attention_label", "\n", "if", "self", ".", "is_training", ":", "\n", "          ", "logging", ".", "basicConfig", "(", "filename", "=", "'ALOCC_loss.log'", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "#(X_train, y_train), (_, _) = mnist.load_data()", "\n", "# Make the data range between 0~1.", "\n", "#X_train = X_train / 255", "\n", "          ", "X_train", ",", "X_valid", ",", "y_train", ",", "Y_valid", "=", "util", ".", "load_GTRSB_dataset", "(", "self", ".", "input_height", ",", "self", ".", "input_width", ",", "self", ".", "c_dim", ",", "trainPath", ",", "0.3", ",", "False", ")", "\n", "\n", "specific_idx", "=", "np", ".", "where", "(", "y_train", "==", "self", ".", "attention_label", ")", "[", "0", "]", "\n", "self", ".", "data", "=", "X_train", "[", "specific_idx", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "input_height", ",", "self", ".", "input_width", ",", "self", ".", "c_dim", ")", "\n", "", "else", ":", "\n", "          ", "assert", "(", "'Error in loading dataset'", ")", "\n", "\n", "#self.grayscale = (self.c_dim == 1)", "\n", "", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.GAN_GTRSB.ALOCC_Model.smooth_positive_labels": [[102, 104], ["numpy.random.random"], "methods", ["None"], ["", "def", "smooth_positive_labels", "(", "y", ")", ":", "\n", "        ", "return", "y", "-", "0.2", "+", "(", "np", ".", "random", ".", "random", "(", "y", ".", "shape", ")", "*", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.GAN_GTRSB.ALOCC_Model.smooth_negative_labels": [[105, 107], ["numpy.random.random"], "methods", ["None"], ["", "def", "smooth_negative_labels", "(", "y", ")", ":", "\n", "        ", "return", "y", "+", "np", ".", "random", ".", "random", "(", "y", ".", "shape", ")", "*", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.GAN_GTRSB.ALOCC_Model.build_generator": [[108, 145], ["keras.layers.Input", "keras.models.Model", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D"], "methods", ["None"], ["", "def", "build_generator", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build the generator/R network.\n        \n        Arguments:\n            input_shape {list} -- Generator input shape.\n        \n        Returns:\n            [Tensor] -- Output tensor of the generator/R network.\n        \"\"\"", "\n", "image", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "'z'", ")", "\n", "# Encoder.", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "4", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'g_encoder_h0_conv'", ")", "(", "image", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "8", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'g_encoder_h1_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "16", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'g_encoder_h2_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "\n", "# Decoder.", "\n", "# TODO: need a flexable solution to select output_padding and padding.", "\n", "# x = Conv2DTranspose(self.gf_dim*2, kernel_size = 5, strides=2, activation='relu', padding='same', output_padding=0, name='g_decoder_h0')(x)", "\n", "# x = BatchNormalization()(x)", "\n", "# x = Conv2DTranspose(self.gf_dim*1, kernel_size = 5, strides=2, activation='relu', padding='same', output_padding=1, name='g_decoder_h1')(x)", "\n", "# x = BatchNormalization()(x)", "\n", "# x = Conv2DTranspose(self.c_dim,    kernel_size = 5, strides=2, activation='tanh', padding='same', output_padding=1, name='g_decoder_h2')(x)", "\n", "\n", "x", "=", "Conv2D", "(", "self", ".", "gf_dim", "*", "2", ",", "kernel_size", "=", "5", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "self", ".", "gf_dim", "*", "2", ",", "kernel_size", "=", "5", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "self", ".", "gf_dim", "*", "4", ",", "kernel_size", "=", "3", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "self", ".", "c_dim", ",", "kernel_size", "=", "5", ",", "activation", "=", "'sigmoid'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "return", "Model", "(", "image", ",", "x", ",", "name", "=", "'R'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.GAN_GTRSB.ALOCC_Model.build_discriminator": [[146, 177], ["keras.layers.Input", "keras.models.Model", "keras.layers.convolutional.Conv2D", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Flatten", "keras.layers.Dense"], "methods", ["None"], ["", "def", "build_discriminator", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build the discriminator/D network\n        \n        Arguments:\n            input_shape {list} -- Input tensor shape of the discriminator network, either the real unmodified image\n                or the generated image by generator/R network.\n        \n        Returns:\n            [Tensor] -- Network output tensors.\n        \"\"\"", "\n", "\n", "image", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "'d_input'", ")", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'d_h0_conv'", ")", "(", "image", ")", "\n", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "2", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'d_h1_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "4", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'d_h2_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "8", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'d_h3_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "\n", "x", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "'d_h3_lin'", ")", "(", "x", ")", "\n", "\n", "return", "Model", "(", "image", ",", "x", ",", "name", "=", "'D'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.GAN_GTRSB.ALOCC_Model.build_model": [[178, 210], ["tensorflow.keras.optimizers.Adam", "GAN_GTRSB.ALOCC_Model.build_discriminator", "GAN_GTRSB.ALOCC_Model.discriminator.compile", "GAN_GTRSB.ALOCC_Model.build_generator", "keras.layers.Input", "GAN_GTRSB.ALOCC_Model.generator", "GAN_GTRSB.ALOCC_Model.discriminator", "keras.models.Model", "GAN_GTRSB.ALOCC_Model.adversarial_model.compile", "print", "GAN_GTRSB.ALOCC_Model.discriminator.summary", "print", "GAN_GTRSB.ALOCC_Model.adversarial_model.summary"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_discriminator", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_generator"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "image_dims", "=", "[", "self", ".", "input_height", ",", "self", ".", "input_width", ",", "self", ".", "c_dim", "]", "\n", "#optimizer = RMSprop(lr=0.002, clipvalue=1.0, decay=1e-8)", "\n", "optimizer", "=", "Adam", "(", "0.002", ",", "0.5", ")", "\n", "# Construct discriminator/D network takes real image as input.", "\n", "# D - sigmoid and D_logits -linear output.", "\n", "self", ".", "discriminator", "=", "self", ".", "build_discriminator", "(", "image_dims", ")", "\n", "\n", "# Model to train D to discrimate real images.", "\n", "self", ".", "discriminator", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "'binary_crossentropy'", ")", "\n", "\n", "# Construct generator/R network.", "\n", "self", ".", "generator", "=", "self", ".", "build_generator", "(", "image_dims", ")", "\n", "img", "=", "Input", "(", "shape", "=", "image_dims", ")", "\n", "\n", "reconstructed_img", "=", "self", ".", "generator", "(", "img", ")", "\n", "\n", "self", ".", "discriminator", ".", "trainable", "=", "False", "\n", "validity", "=", "self", ".", "discriminator", "(", "reconstructed_img", ")", "\n", "\n", "# Model to train Generator/R to minimize reconstruction loss and trick D to see", "\n", "# generated images as real ones.", "\n", "self", ".", "adversarial_model", "=", "Model", "(", "img", ",", "[", "reconstructed_img", ",", "validity", "]", ")", "\n", "self", ".", "adversarial_model", ".", "compile", "(", "loss", "=", "[", "'binary_crossentropy'", ",", "'binary_crossentropy'", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "r_alpha", ",", "1", "]", ",", "\n", "optimizer", "=", "optimizer", ")", "\n", "\n", "print", "(", "'\\n\\rdiscriminator'", ")", "\n", "self", ".", "discriminator", ".", "summary", "(", ")", "\n", "\n", "print", "(", "'\\n\\adversarial_model'", ")", "\n", "self", ".", "adversarial_model", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.GAN_GTRSB.ALOCC_Model.train": [[212, 289], ["os.path.join", "os.makedirs", "numpy.array().astype", "os.makedirs", "imageio.imwrite", "numpy.ones", "numpy.zeros", "range", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.plot", "matplotlib.savefig", "montage", "get_noisy_data", "print", "range", "GAN_GTRSB.ALOCC_Model.save", "numpy.array", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "print", "logging.info", "len", "GAN_GTRSB.ALOCC_Model.generator.predict", "GAN_GTRSB.ALOCC_Model.discriminator.train_on_batch", "GAN_GTRSB.ALOCC_Model.discriminator.train_on_batch", "GAN_GTRSB.ALOCC_Model.adversarial_model.train_on_batch", "GAN_GTRSB.ALOCC_Model.adversarial_model.train_on_batch", "plot_epochs.append", "plot_g_recon_losses.append", "numpy.mod", "numpy.array", "numpy.array", "numpy.array", "GAN_GTRSB.ALOCC_Model.generator.predict", "int", "int", "save_images", "numpy.ceil", "numpy.floor", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.montage", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.get_noisy_data", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.save_images"], ["", "def", "train", "(", "self", ",", "epochs", ",", "batch_size", "=", "256", ",", "sample_interval", "=", "500", ")", ":", "\n", "# Make log folder if not exist.", "\n", "        ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "self", ".", "model_dir", ")", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "# Get a batch of sample images with attention_label to export as montage.", "\n", "            ", "sample", "=", "self", ".", "data", "[", "0", ":", "batch_size", "]", "\n", "\n", "# Export images as montage, sample_input also use later to generate sample R network outputs during training.", "\n", "", "sample_inputs", "=", "np", ".", "array", "(", "sample", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "sample_dir", ",", "exist_ok", "=", "True", ")", "\n", "#scipy.misc.imsave('./{}/train_input_samples.jpg'.format(self.sample_dir), montage(sample_inputs[:,:,:,0]))", "\n", "imageio", ".", "imwrite", "(", "'./{}/train_input_samples.jpg'", ".", "format", "(", "self", ".", "sample_dir", ")", ",", "montage", "(", "sample_inputs", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", ")", "\n", "counter", "=", "1", "\n", "# Record generator/R network reconstruction training losses.", "\n", "plot_epochs", "=", "[", "]", "\n", "plot_g_recon_losses", "=", "[", "]", "\n", "\n", "# Load traning data, add random noise.", "\n", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "            ", "sample_w_noise", "=", "get_noisy_data", "(", "self", ".", "data", ")", "\n", "\n", "# Adversarial ground truths", "\n", "", "ones", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "#ones = self.smooth_positive_labels(ones)", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "#zeros = self.smooth_negative_labels(zeros)", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "print", "(", "'Epoch ({}/{})-------------------------------------------------'", ".", "format", "(", "epoch", ",", "epochs", ")", ")", "\n", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "# Number of batches computed by total number of target data / batch size.", "\n", "                ", "batch_idxs", "=", "len", "(", "self", ".", "data", ")", "//", "batch_size", "\n", "\n", "", "for", "idx", "in", "range", "(", "0", ",", "batch_idxs", ")", ":", "\n", "# Get a batch of images and add random noise.", "\n", "                ", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "                    ", "batch", "=", "self", ".", "data", "[", "idx", "*", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_noise", "=", "sample_w_noise", "[", "idx", "*", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_clean", "=", "self", ".", "data", "[", "idx", "*", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "batch_size", "]", "\n", "# Turn batch images data to float32 type.", "\n", "", "batch_images", "=", "np", ".", "array", "(", "batch", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "batch_noise_images", "=", "np", ".", "array", "(", "batch_noise", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "batch_clean_images", "=", "np", ".", "array", "(", "batch_clean", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "                    ", "batch_fake_images", "=", "self", ".", "generator", ".", "predict", "(", "batch_noise_images", ")", "\n", "# Update D network, minimize real images inputs->D-> ones, noisy z->R->D->zeros loss.", "\n", "d_loss_real", "=", "self", ".", "discriminator", ".", "train_on_batch", "(", "batch_images", ",", "ones", ")", "\n", "d_loss_fake", "=", "self", ".", "discriminator", ".", "train_on_batch", "(", "batch_fake_images", ",", "zeros", ")", "\n", "\n", "# Update R network twice, minimize noisy z->R->D->ones and reconstruction loss.", "\n", "self", ".", "adversarial_model", ".", "train_on_batch", "(", "batch_noise_images", ",", "[", "batch_clean_images", ",", "ones", "]", ")", "\n", "g_loss", "=", "self", ".", "adversarial_model", ".", "train_on_batch", "(", "batch_noise_images", ",", "[", "batch_clean_images", ",", "ones", "]", ")", "\n", "plot_epochs", ".", "append", "(", "epoch", "+", "idx", "/", "batch_idxs", ")", "\n", "plot_g_recon_losses", ".", "append", "(", "g_loss", "[", "1", "]", ")", "\n", "", "counter", "+=", "1", "\n", "msg", "=", "'Epoch:[{0}]-[{1}/{2}] --> d_loss: {3:>0.3f}, g_loss:{4:>0.3f}, g_recon_loss:{4:>0.3f}'", ".", "format", "(", "epoch", ",", "idx", ",", "batch_idxs", ",", "d_loss_real", "+", "d_loss_fake", ",", "g_loss", "[", "0", "]", ",", "g_loss", "[", "1", "]", ")", "\n", "print", "(", "msg", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "if", "np", ".", "mod", "(", "counter", ",", "sample_interval", ")", "==", "0", ":", "\n", "                    ", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "                        ", "samples", "=", "self", ".", "generator", ".", "predict", "(", "sample_inputs", ")", "\n", "manifold_h", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "samples", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "manifold_w", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "sqrt", "(", "samples", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "save_images", "(", "samples", ",", "[", "manifold_h", ",", "manifold_w", "]", ",", "\n", "'./{}/train_{:02d}_{:04d}.png'", ".", "format", "(", "self", ".", "sample_dir", ",", "epoch", ",", "idx", ")", ")", "\n", "\n", "# Save the checkpoint end of each epoch.", "\n", "", "", "", "self", ".", "save", "(", "epoch", ")", "\n", "# Export the Generator/R network reconstruction losses as a plot.", "\n", "", "plt", ".", "title", "(", "'Generator/R network reconstruction losses'", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'training loss'", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "plot", "(", "plot_epochs", ",", "plot_g_recon_losses", ")", "\n", "plt", ".", "savefig", "(", "'plot_g_recon_losses.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.GAN_GTRSB.ALOCC_Model.model_dir": [[290, 295], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_dir", "(", "self", ")", ":", "\n", "        ", "return", "\"{}_{}_{}\"", ".", "format", "(", "\n", "self", ".", "dataset_name", ",", "\n", "self", ".", "output_height", ",", "self", ".", "output_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.ml_architectures.GAN_GTRSB.ALOCC_Model.save": [[296, 305], ["os.makedirs", "GAN_GTRSB.ALOCC_Model.adversarial_model.save_weights", "os.path.join"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "step", ")", ":", "\n", "        ", "\"\"\"Helper method to save model weights.\n        \n        Arguments:\n            step {[type]} -- [description]\n        \"\"\"", "\n", "os", ".", "makedirs", "(", "self", ".", "checkpoint_dir", ",", "exist_ok", "=", "True", ")", "\n", "model_name", "=", "'ALOCC_Model_{}.h5'", ".", "format", "(", "step", ")", "\n", "self", ".", "adversarial_model", ".", "save_weights", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "model_name", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.vgg.VGG.__init__": [[15, 19], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.vgg.VGG._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.vgg.VGG.forward": [[20, 25], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.vgg.VGG._make_layers": [[26, 39], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.vgg.test": [[41, 46], ["vgg.VGG", "torch.randn", "torch.randn", "VGG.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "VGG", "(", "'VGG16'", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.pytorch_classifiers.DNN.__init__": [[8, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "dim", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "DNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "dim", "==", "28", ":", "\n", "            ", "width_height", "=", "4", "\n", "", "elif", "dim", "==", "32", ":", "\n", "            ", "width_height", "=", "5", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "conv_channels", "=", "16", "\n", "self", ".", "fc1_input", "=", "self", ".", "conv_channels", "*", "width_height", "*", "width_height", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "net", "=", "None", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "self", ".", "conv_channels", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "fc1_input", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "num_classes", ")", "# 10", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.pytorch_classifiers.DNN.forward": [[29, 38], ["pytorch_classifiers.DNN.pool", "pytorch_classifiers.DNN.pool", "pytorch_classifiers.DNN.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pytorch_classifiers.DNN.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pytorch_classifiers.DNN.size", "pytorch_classifiers.DNN.fc1", "pytorch_classifiers.DNN.fc2", "pytorch_classifiers.DNN.conv1", "pytorch_classifiers.DNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "fc1_input", ")", "\n", "#x = x.view(x.size(0), -1)", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.dnn_simple_model.test": [[13, 33], ["net.load_state_dict", "net.eval", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "labels.size", "data[].to", "data[].to"], "function", ["None"], ["model", ".", "save", "(", "model_obj", ".", "models_folder", "+", "model_obj", ".", "model_name", ")", "\n", "\n", "return", "history", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.dnn_simple_model.train": [[35, 67], ["range", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "enumerate", "net.state_dict", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "labels.long", "print", "data[].to", "data[].to"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.dnn_simple_model.run": [[69, 123], ["sklearn.model_selection.train_test_split", "numpy.moveaxis", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model_obj.algorithm.DNN", "os.path.join", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "model_obj.algorithm.DNN.to", "torch.CrossEntropyLoss().to", "torch.Adam", "dnn_simple_model.train", "numpy.moveaxis", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dnn_simple_model.test", "numpy.shape", "numpy.shape", "os.getcwd", "model_obj.algorithm.DNN.parameters", "numpy.shape", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.train", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.pytorch.dnn_simple_model.test"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.vgg16.DNN.__init__": [[16, 19], ["Classifier_interface.__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "DNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.vgg16.DNN.train": [[20, 83], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "keras.callbacks.ModelCheckpoint", "keras.callbacks.EarlyStopping", "keras.models.Sequential.fit", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "X_train", ",", "Y_train", ",", "X_valid", ",", "Y_valid", ",", "batch_size", ",", "epochs", ")", ":", "\n", "        ", "'''\n        model = VGG16(\n            weights=None, \n            include_top=True, \n            classes=43,\n            input_shape=X_train.shape[1:]\n        )\n        model.compile(\n            loss='categorical_crossentropy',\n            optimizer='sgd',\n            metrics=['accuracy']\n        )\n\n        checkpoint = ModelCheckpoint(\n            'VGG_model.h5', \n            monitor='val_acc', \n            verbose=0, \n            save_best_only=True, \n            save_weights_only=False,\n            mode='auto'\n        )\n\n        # Train the model\n        history = model.fit(X_train, Y_train, batch_size=batch_size, epochs=epochs, validation_data=(X_valid, Y_valid), callbacks=[checkpoint], verbose=1)\n        return model, history\n\n        '''", "\n", "classes", "=", "43", "\n", "input_shape", "=", "X_train", ".", "shape", "[", "1", ":", "]", "#(224,224,3)", "\n", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "input_shape", "=", "input_shape", ",", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "units", "=", "4096", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "units", "=", "4096", ",", "activation", "=", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "units", "=", "classes", ",", "activation", "=", "\"softmax\"", ")", ")", "\n", "\n", "opt", "=", "Adam", "(", "lr", "=", "0.001", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "opt", ",", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "checkpoint", "=", "ModelCheckpoint", "(", "\"vgg16_1.h5\"", ",", "monitor", "=", "'val_acc'", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ",", "save_weights_only", "=", "False", ",", "mode", "=", "'auto'", ",", "period", "=", "1", ")", "\n", "early", "=", "EarlyStopping", "(", "monitor", "=", "'val_acc'", ",", "min_delta", "=", "0", ",", "patience", "=", "20", ",", "verbose", "=", "1", ",", "mode", "=", "'auto'", ")", "\n", "history", "=", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "epochs", ",", "validation_data", "=", "(", "X_valid", ",", "Y_valid", ")", ")", "\n", "#model.fit_generator(steps_per_epoch=100,generator=traindata, validation_data= testdata, validation_steps=10,epochs=100,callbacks=[checkpoint,early])", "\n", "return", "model", ",", "history", "\n", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.le_net.DNN.__init__": [[8, 11], ["Classifier_interface.__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "\t\t", "super", "(", "DNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.le_net.DNN.train": [[12, 35], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.compile", "keras.models.Sequential.fit", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "X_train", ",", "Y_train", ",", "X_valid", ",", "Y_valid", ",", "batch_size", ",", "epochs", ")", ":", "\n", "# LeNet", "\n", "\t\t", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "activation", "=", "'relu'", ",", "input_shape", "=", "X_train", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "rate", "=", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "rate", "=", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "256", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "rate", "=", "0.5", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "self", ".", "num_classes", ",", "activation", "=", "'softmax'", ")", ")", "\n", "\n", "#Compilation of the model", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "#training", "\n", "history", "=", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "epochs", ",", "validation_data", "=", "(", "X_valid", ",", "Y_valid", ")", ")", "\n", "\n", "return", "model", ",", "history", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.DCGAN.DCGAN.__init__": [[18, 51], ["tensorflow.keras.optimizers.Adam", "DCGAN.DCGAN.build_discriminator", "DCGAN.DCGAN.discriminator.compile", "DCGAN.DCGAN.build_generator", "keras.layers.Input", "DCGAN.DCGAN.generator", "DCGAN.DCGAN.discriminator", "keras.models.Model", "DCGAN.DCGAN.combined.compile"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_discriminator", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_generator"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Input shape", "\n", "        ", "self", ".", "img_rows", "=", "28", "\n", "self", ".", "img_cols", "=", "28", "\n", "self", ".", "channels", "=", "1", "\n", "self", ".", "img_shape", "=", "(", "self", ".", "img_rows", ",", "self", ".", "img_cols", ",", "self", ".", "channels", ")", "\n", "self", ".", "latent_dim", "=", "100", "\n", "\n", "optimizer", "=", "Adam", "(", "0.0002", ",", "0.5", ")", "\n", "\n", "# Build and compile the discriminator", "\n", "self", ".", "discriminator", "=", "self", ".", "build_discriminator", "(", ")", "\n", "self", ".", "discriminator", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "# Build the generator", "\n", "self", ".", "generator", "=", "self", ".", "build_generator", "(", ")", "\n", "\n", "# The generator takes noise as input and generates imgs", "\n", "z", "=", "Input", "(", "shape", "=", "(", "self", ".", "latent_dim", ",", ")", ")", "\n", "img", "=", "self", ".", "generator", "(", "z", ")", "\n", "\n", "# For the combined model we will only train the generator", "\n", "self", ".", "discriminator", ".", "trainable", "=", "False", "\n", "\n", "# The discriminator takes generated images as input and determines validity", "\n", "valid", "=", "self", ".", "discriminator", "(", "img", ")", "\n", "\n", "# The combined model  (stacked generator and discriminator)", "\n", "# Trains the generator to fool the discriminator", "\n", "self", ".", "combined", "=", "Model", "(", "z", ",", "valid", ")", "\n", "self", ".", "combined", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.DCGAN.DCGAN.build_generator": [[52, 75], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.summary", "keras.layers.Input", "keras.models.Sequential.", "keras.models.Model", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.convolutional.Conv2D", "keras.layers.Activation"], "methods", ["None"], ["", "def", "build_generator", "(", "self", ")", ":", "\n", "\n", "        ", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "Dense", "(", "128", "*", "7", "*", "7", ",", "activation", "=", "\"relu\"", ",", "input_dim", "=", "self", ".", "latent_dim", ")", ")", "\n", "model", ".", "add", "(", "Reshape", "(", "(", "7", ",", "7", ",", "128", ")", ")", ")", "\n", "model", ".", "add", "(", "UpSampling2D", "(", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "UpSampling2D", "(", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "\"relu\"", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "self", ".", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "\"tanh\"", ")", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "noise", "=", "Input", "(", "shape", "=", "(", "self", ".", "latent_dim", ",", ")", ")", "\n", "img", "=", "model", "(", "noise", ")", "\n", "\n", "return", "Model", "(", "noise", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.DCGAN.DCGAN.build_discriminator": [[76, 105], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.summary", "keras.layers.Input", "keras.models.Sequential.", "keras.models.Model", "keras.layers.convolutional.Conv2D", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Dropout", "keras.layers.convolutional.Conv2D", "keras.layers.ZeroPadding2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Dropout", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Dropout", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense"], "methods", ["None"], ["", "def", "build_discriminator", "(", "self", ")", ":", "\n", "\n", "        ", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "input_shape", "=", "self", ".", "img_shape", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "LeakyReLU", "(", "alpha", "=", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "ZeroPadding2D", "(", "padding", "=", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "LeakyReLU", "(", "alpha", "=", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "LeakyReLU", "(", "alpha", "=", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "256", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "\"same\"", ")", ")", "\n", "model", ".", "add", "(", "BatchNormalization", "(", "momentum", "=", "0.8", ")", ")", "\n", "model", ".", "add", "(", "LeakyReLU", "(", "alpha", "=", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "img", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "validity", "=", "model", "(", "img", ")", "\n", "\n", "return", "Model", "(", "img", ",", "validity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.DCGAN.DCGAN.train": [[106, 151], ["keras.datasets.mnist.load_data", "numpy.expand_dims", "numpy.ones", "numpy.zeros", "range", "numpy.random.randint", "numpy.random.normal", "DCGAN.DCGAN.generator.predict", "DCGAN.DCGAN.discriminator.train_on_batch", "DCGAN.DCGAN.discriminator.train_on_batch", "DCGAN.DCGAN.combined.train_on_batch", "print", "numpy.add", "DCGAN.DCGAN.save_imgs"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.DCGAN.DCGAN.save_imgs"], ["", "def", "train", "(", "self", ",", "epochs", ",", "batch_size", "=", "128", ",", "save_interval", "=", "50", ")", ":", "\n", "\n", "# Load the dataset", "\n", "        ", "(", "X_train", ",", "_", ")", ",", "(", "_", ",", "_", ")", "=", "mnist", ".", "load_data", "(", ")", "\n", "\n", "# Rescale -1 to 1", "\n", "X_train", "=", "X_train", "/", "127.5", "-", "1.", "\n", "X_train", "=", "np", ".", "expand_dims", "(", "X_train", ",", "axis", "=", "3", ")", "\n", "\n", "# Adversarial ground truths", "\n", "valid", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "fake", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "# ---------------------", "\n", "#  Train Discriminator", "\n", "# ---------------------", "\n", "\n", "# Select a random half of images", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "X_train", ".", "shape", "[", "0", "]", ",", "batch_size", ")", "\n", "imgs", "=", "X_train", "[", "idx", "]", "\n", "\n", "# Sample noise and generate a batch of new images", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "batch_size", ",", "self", ".", "latent_dim", ")", ")", "\n", "gen_imgs", "=", "self", ".", "generator", ".", "predict", "(", "noise", ")", "\n", "\n", "# Train the discriminator (real classified as ones and generated as zeros)", "\n", "d_loss_real", "=", "self", ".", "discriminator", ".", "train_on_batch", "(", "imgs", ",", "valid", ")", "\n", "d_loss_fake", "=", "self", ".", "discriminator", ".", "train_on_batch", "(", "gen_imgs", ",", "fake", ")", "\n", "d_loss", "=", "0.5", "*", "np", ".", "add", "(", "d_loss_real", ",", "d_loss_fake", ")", "\n", "\n", "# ---------------------", "\n", "#  Train Generator", "\n", "# ---------------------", "\n", "\n", "# Train the generator (wants discriminator to mistake images as real)", "\n", "g_loss", "=", "self", ".", "combined", ".", "train_on_batch", "(", "noise", ",", "valid", ")", "\n", "\n", "# Plot the progress", "\n", "print", "(", "\"%d [D loss: %f, acc.: %.2f%%] [G loss: %f]\"", "%", "(", "epoch", ",", "d_loss", "[", "0", "]", ",", "100", "*", "d_loss", "[", "1", "]", ",", "g_loss", ")", ")", "\n", "\n", "# If at save interval => save generated image samples", "\n", "if", "epoch", "%", "save_interval", "==", "0", ":", "\n", "                ", "self", ".", "save_imgs", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.DCGAN.DCGAN.save_imgs": [[152, 169], ["numpy.random.normal", "DCGAN.DCGAN.generator.predict", "matplotlib.subplots", "range", "fig.savefig", "matplotlib.close", "range", "axs[].imshow", "axs[].axis"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["", "", "", "def", "save_imgs", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "r", ",", "c", "=", "5", ",", "5", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "r", "*", "c", ",", "self", ".", "latent_dim", ")", ")", "\n", "gen_imgs", "=", "self", ".", "generator", ".", "predict", "(", "noise", ")", "\n", "\n", "# Rescale images 0 - 1", "\n", "gen_imgs", "=", "0.5", "*", "gen_imgs", "+", "0.5", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "r", ",", "c", ")", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "r", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "c", ")", ":", "\n", "                ", "axs", "[", "i", ",", "j", "]", ".", "imshow", "(", "gen_imgs", "[", "cnt", ",", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "axs", "[", "i", ",", "j", "]", ".", "axis", "(", "'off'", ")", "\n", "cnt", "+=", "1", "\n", "", "", "fig", ".", "savefig", "(", "\"images\\\\mnist_%d.png\"", "%", "epoch", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.__init__": [[61, 64], ["Classifier_interface.__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "DNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.lr_schedule": [[66, 92], ["print"], "methods", ["None"], ["", "def", "lr_schedule", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Learning Rate Schedule\n\n        Learning rate is scheduled to be reduced after 80, 120, 160, 180 epochs.\n        Called automatically every epoch as part of callbacks during training.\n\n        # Arguments\n            epoch (int): The number of epochs\n\n        # Returns\n            lr (float32): learning rate\n        \"\"\"", "\n", "lr", "=", "1e-3", "\n", "\n", "if", "epoch", ">", "180", ":", "\n", "            ", "lr", "*=", "0.5e-3", "\n", "", "elif", "epoch", ">", "160", ":", "\n", "            ", "lr", "*=", "1e-3", "\n", "", "elif", "epoch", ">", "120", ":", "\n", "            ", "lr", "*=", "1e-2", "\n", "", "elif", "epoch", ">", "80", ":", "\n", "            ", "lr", "*=", "1e-1", "\n", "\n", "", "print", "(", "'Learning rate: '", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_layer": [[94, 133], ["keras.layers.Conv2D", "keras.layers.Conv2D.", "keras.layers.Conv2D.", "keras.regularizers.l2", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Activation"], "methods", ["None"], ["", "def", "resnet_layer", "(", "self", ",", "inputs", ",", "num_filters", "=", "16", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ",", "\n", "batch_normalization", "=", "True", ",", "conv_first", "=", "True", ")", ":", "\n", "        ", "\"\"\"2D Convolution-Batch Normalization-Activation stack builder\n\n        # Arguments\n        inputs (tensor): input tensor from input image or previous layer\n        num_filters (int): Conv2D number of filters\n        kernel_size (int): Conv2D square kernel dimensions\n        strides (int): Conv2D square stride dimensions\n        activation (string): activation name\n        batch_normalization (bool): whether to include batch normalization\n        conv_first (bool): conv-bn-activation (True) or\n            bn-activation-conv (False)\n\n        # Returns\n            x (tensor): tensor as input to the next layer\n        \"\"\"", "\n", "conv", "=", "Conv2D", "(", "num_filters", ",", "kernel_size", "=", "kernel_size", ",", "strides", "=", "strides", ",", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "'he_normal'", ",", "kernel_regularizer", "=", "l2", "(", "1e-4", ")", ")", "\n", "\n", "x", "=", "inputs", "\n", "\n", "if", "conv_first", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "if", "batch_normalization", ":", "\n", "                ", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "x", "=", "Activation", "(", "activation", ")", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "batch_normalization", ":", "\n", "                ", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "x", "=", "Activation", "(", "activation", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "conv", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_v1": [[135, 177], ["int", "keras.layers.Input", "resnet.DNN.resnet_layer", "range", "keras.models.Model", "ValueError", "range", "keras.layers.AveragePooling2D", "keras.layers.Flatten", "keras.layers.Dense", "resnet.DNN.resnet_layer", "resnet.DNN.resnet_layer", "keras.layers.add", "resnet.DNN.resnet_layer", "keras.layers.Activation"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_layer", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_layer", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_layer", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_layer"], ["", "def", "resnet_v1", "(", "self", ",", "input_shape", ",", "depth", ",", "num_classes", "=", "10", ")", ":", "\n", "\n", "        ", "if", "(", "depth", "-", "2", ")", "%", "6", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'depth should be 6n+2 (eg 20, 32, 44 in [a])'", ")", "\n", "\n", "# Start model definition", "\n", "", "num_filters", "=", "16", "\n", "num_res_blocks", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "6", ")", "\n", "inputs", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "x", "=", "self", ".", "resnet_layer", "(", "inputs", "=", "inputs", ")", "\n", "\n", "# Instantiate the stack of residual units", "\n", "for", "stack", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "res_block", "in", "range", "(", "num_res_blocks", ")", ":", "\n", "                ", "strides", "=", "1", "\n", "\n", "# first layer but not first stack", "\n", "if", "stack", ">", "0", "and", "res_block", "==", "0", ":", "\n", "                    ", "strides", "=", "2", "# downsample", "\n", "\n", "", "y", "=", "self", ".", "resnet_layer", "(", "inputs", "=", "x", ",", "num_filters", "=", "num_filters", ",", "strides", "=", "strides", ")", "\n", "y", "=", "self", ".", "resnet_layer", "(", "inputs", "=", "y", ",", "num_filters", "=", "num_filters", ",", "activation", "=", "None", ")", "\n", "\n", "# first layer but not first stack", "\n", "if", "stack", ">", "0", "and", "res_block", "==", "0", ":", "\n", "# linear projection residual shortcut connection to match changed dims", "\n", "                    ", "x", "=", "self", ".", "resnet_layer", "(", "inputs", "=", "x", ",", "num_filters", "=", "num_filters", ",", "kernel_size", "=", "1", ",", "\n", "strides", "=", "strides", ",", "activation", "=", "None", ",", "batch_normalization", "=", "False", ")", "\n", "\n", "", "x", "=", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "y", "]", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "\n", "", "num_filters", "*=", "2", "\n", "\n", "# Add classifier on top", "\n", "", "x", "=", "AveragePooling2D", "(", "pool_size", "=", "8", ")", "(", "x", ")", "\n", "y", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "\n", "outputs", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "y", ")", "\n", "\n", "# Instantiate model", "\n", "return", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.train": [[179, 194], ["resnet.DNN.resnet_v1", "resnet.DNN.compile", "resnet.DNN.fit"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.resnet.DNN.resnet_v1"], ["", "def", "train", "(", "self", ",", "X_train", ",", "y_train", ",", "X_valid", ",", "y_valid", ",", "batch_size", ",", "epochs", ")", ":", "\n", "        ", "n", "=", "3", "\n", "input_shape", "=", "X_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "# Computed depth from supplied model parameter n", "\n", "depth", "=", "n", "*", "6", "+", "2", "\n", "\n", "model", "=", "self", ".", "resnet_v1", "(", "input_shape", ",", "depth", ",", "self", ".", "num_classes", ")", "\n", "\n", "# Compile the model", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "#training", "\n", "history", "=", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "epochs", ",", "validation_data", "=", "(", "X_valid", ",", "y_valid", ")", ")", "\n", "\n", "return", "model", ",", "history", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.dnn_simple_model.run": [[6, 28], ["sklearn.model_selection.train_test_split", "int", "int", "model_obj.algorithm.DNN", "model_obj.algorithm.DNN.train", "numpy.eye", "numpy.eye", "os.path.join", "model_obj.algorithm.DNN.save", "len", "len"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.train", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save"], ["val_limit", "=", "int", "(", "len", "(", "x_valid", ")", "*", "percentage_of_data", ")", "\n", "x_train", ",", "y_train", "=", "x_train", "[", ":", "train_limit", "]", ",", "y_train", "[", ":", "train_limit", "]", "\n", "x_valid", ",", "y_valid", "=", "x_valid", "[", ":", "val_limit", "]", ",", "y_valid", "[", ":", "val_limit", "]", "\n", "\n", "model", "=", "model_obj", ".", "algorithm", ".", "DNN", "(", "model_obj", ".", "dataset", ".", "num_classes", ")", "\n", "model", ",", "history", "=", "model", ".", "train", "(", "x_train", ",", "y_train", ",", "x_valid", ",", "y_valid", ",", "model_obj", ".", "batch_size", ",", "model_obj", ".", "epochs", ")", "\n", "#saving model", "\n", "model", ".", "save", "(", "model_obj", ".", "models_folder", "+", "model_obj", ".", "model_name", ")", "\n", "\n", "return", "history", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.cnn.DNN.__init__": [[11, 14], ["Classifier_interface.__init__"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "\t\t", "super", "(", "DNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.cnn.DNN.train": [[16, 42], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.compile", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.models.Sequential.fit_generator", "keras.models.Sequential.fit", "keras.optimizers.Adadelta", "x_train.reshape", "len", "len", "x_valid.reshape", "len"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "x_train", ",", "y_train", ",", "x_valid", ",", "y_valid", ",", "batch_size", ",", "epochs", ",", "keras_pre_processing", "=", "False", ",", "train_iterator", "=", "None", ")", ":", "\n", "# CNN", "\n", "\t\t", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "input_shape", "=", "x_train", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "self", ".", "num_classes", ",", "activation", "=", "'softmax'", ")", ")", "\n", "\n", "#training", "\n", "history", "=", "model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "\n", "optimizer", "=", "keras", ".", "optimizers", ".", "Adadelta", "(", ")", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "if", "keras_pre_processing", "and", "train_iterator", "!=", "None", ":", "\n", "\t\t\t", "model", ".", "fit_generator", "(", "train_iterator", ",", "steps_per_epoch", "=", "len", "(", "train_iterator", ")", ",", "epochs", "=", "epochs", ")", "\n", "", "else", ":", "\n", "\t\t\t", "model", ".", "fit", "(", "x_train", ".", "reshape", "(", "len", "(", "x_train", ")", ",", "28", ",", "28", ",", "1", ")", ",", "y_train", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "epochs", ",", "verbose", "=", "1", ",", "\n", "validation_data", "=", "(", "x_valid", ".", "reshape", "(", "len", "(", "x_valid", ")", ",", "28", ",", "28", ",", "1", ")", ",", "y_valid", ")", ")", "\n", "\n", "", "return", "model", ",", "history", "", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.__init__": [[27, 101], ["GAN_GTRSB.ALOCC_Model.build_model", "logging.basicConfig", "src.utils.util.load_GTRSB_dataset", "X_train[].reshape", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_model"], ["    ", "def", "__init__", "(", "self", ",", "trainPath", "=", "''", ",", "\n", "input_height", "=", "28", ",", "input_width", "=", "28", ",", "output_height", "=", "28", ",", "output_width", "=", "28", ",", "\n", "attention_label", "=", "7", ",", "is_training", "=", "True", ",", "\n", "z_dim", "=", "100", ",", "gf_dim", "=", "32", ",", "df_dim", "=", "32", ",", "c_dim", "=", "3", ",", "\n", "dataset_name", "=", "None", ",", "dataset_address", "=", "None", ",", "input_fname_pattern", "=", "None", ",", "\n", "checkpoint_dir", "=", "'checkpoint'", ",", "log_dir", "=", "'log'", ",", "sample_dir", "=", "'sample'", ",", "r_alpha", "=", "0.2", ",", "\n", "kb_work_on_patch", "=", "True", ",", "nd_patch_size", "=", "(", "10", ",", "10", ")", ",", "n_stride", "=", "1", ",", "\n", "n_fetch_data", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        This is the main class of our Adversarially Learned One-Class Classifier for Novelty Detection.\n        :param sess: TensorFlow session.\n        :param input_height: The height of image to use.\n        :param input_width: The width of image to use.\n        :param output_height: The height of the output images to produce.\n        :param output_width: The width of the output images to produce.\n        :param attention_label: Conditioned label that growth attention of training label [1]\n        :param is_training: True if in training mode.\n        :param z_dim:  (optional) Dimension of dim for Z, the output of encoder. [100]\n        :param gf_dim: (optional) Dimension of gen filters in first conv layer, i.e. g_decoder_h0. [16] \n        :param df_dim: (optional) Dimension of discrim filters in first conv layer, i.e. d_h0_conv. [16] \n        :param c_dim: (optional) Dimension of image color. For grayscale input, set to 1. [3]\n        :param dataset_name: 'UCSD', 'mnist' or custom defined name.\n        :param dataset_address: path to dataset folder. e.g. './dataset/mnist'.\n        :param input_fname_pattern: Glob pattern of filename of input images e.g. '*'.\n        :param checkpoint_dir: path to saved checkpoint(s) directory.\n        :param log_dir: log directory for training, can be later viewed in TensorBoard.\n        :param sample_dir: Directory address which save some samples [.]\n        :param r_alpha: Refinement parameter, trade-off hyperparameter for the G network loss to reconstruct input images. [0.2]\n        :param kb_work_on_patch: Boolean value for working on PatchBased System or not, only applies to UCSD dataset [True]\n        :param nd_patch_size:  Input patch size, only applies to UCSD dataset.\n        :param n_stride: PatchBased data preprocessing stride, only applies to UCSD dataset.\n        :param n_fetch_data: Fetch size of Data, only applies to UCSD dataset. \n        \"\"\"", "\n", "self", ".", "trainPath", "=", "trainPath", "\n", "self", ".", "b_work_on_patch", "=", "kb_work_on_patch", "\n", "self", ".", "sample_dir", "=", "sample_dir", "\n", "\n", "self", ".", "is_training", "=", "is_training", "\n", "\n", "self", ".", "r_alpha", "=", "r_alpha", "\n", "\n", "self", ".", "input_height", "=", "input_height", "\n", "self", ".", "input_width", "=", "input_width", "\n", "self", ".", "output_height", "=", "output_height", "\n", "self", ".", "output_width", "=", "output_width", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "gf_dim", "=", "gf_dim", "\n", "self", ".", "df_dim", "=", "df_dim", "\n", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "dataset_address", "=", "dataset_address", "\n", "self", ".", "input_fname_pattern", "=", "input_fname_pattern", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "\n", "self", ".", "attention_label", "=", "attention_label", "\n", "if", "self", ".", "is_training", ":", "\n", "          ", "logging", ".", "basicConfig", "(", "filename", "=", "'ALOCC_loss.log'", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "#(X_train, y_train), (_, _) = mnist.load_data()", "\n", "# Make the data range between 0~1.", "\n", "#X_train = X_train / 255", "\n", "          ", "X_train", ",", "X_valid", ",", "y_train", ",", "Y_valid", "=", "util", ".", "load_GTRSB_dataset", "(", "self", ".", "input_height", ",", "self", ".", "input_width", ",", "self", ".", "c_dim", ",", "trainPath", ",", "0.3", ",", "False", ")", "\n", "\n", "specific_idx", "=", "np", ".", "where", "(", "y_train", "==", "self", ".", "attention_label", ")", "[", "0", "]", "\n", "self", ".", "data", "=", "X_train", "[", "specific_idx", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "input_height", ",", "self", ".", "input_width", ",", "self", ".", "c_dim", ")", "\n", "", "else", ":", "\n", "          ", "assert", "(", "'Error in loading dataset'", ")", "\n", "\n", "#self.grayscale = (self.c_dim == 1)", "\n", "", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.smooth_positive_labels": [[102, 104], ["numpy.random.random"], "methods", ["None"], ["", "def", "smooth_positive_labels", "(", "y", ")", ":", "\n", "        ", "return", "y", "-", "0.2", "+", "(", "np", ".", "random", ".", "random", "(", "y", ".", "shape", ")", "*", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.smooth_negative_labels": [[105, 107], ["numpy.random.random"], "methods", ["None"], ["", "def", "smooth_negative_labels", "(", "y", ")", ":", "\n", "        ", "return", "y", "+", "np", ".", "random", ".", "random", "(", "y", ".", "shape", ")", "*", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_generator": [[108, 145], ["keras.layers.Input", "keras.models.Model", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D"], "methods", ["None"], ["", "def", "build_generator", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build the generator/R network.\n        \n        Arguments:\n            input_shape {list} -- Generator input shape.\n        \n        Returns:\n            [Tensor] -- Output tensor of the generator/R network.\n        \"\"\"", "\n", "image", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "'z'", ")", "\n", "# Encoder.", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "4", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'g_encoder_h0_conv'", ")", "(", "image", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "8", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'g_encoder_h1_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "16", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'g_encoder_h2_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "\n", "# Decoder.", "\n", "# TODO: need a flexable solution to select output_padding and padding.", "\n", "# x = Conv2DTranspose(self.gf_dim*2, kernel_size = 5, strides=2, activation='relu', padding='same', output_padding=0, name='g_decoder_h0')(x)", "\n", "# x = BatchNormalization()(x)", "\n", "# x = Conv2DTranspose(self.gf_dim*1, kernel_size = 5, strides=2, activation='relu', padding='same', output_padding=1, name='g_decoder_h1')(x)", "\n", "# x = BatchNormalization()(x)", "\n", "# x = Conv2DTranspose(self.c_dim,    kernel_size = 5, strides=2, activation='tanh', padding='same', output_padding=1, name='g_decoder_h2')(x)", "\n", "\n", "x", "=", "Conv2D", "(", "self", ".", "gf_dim", "*", "2", ",", "kernel_size", "=", "5", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "self", ".", "gf_dim", "*", "2", ",", "kernel_size", "=", "5", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "self", ".", "gf_dim", "*", "4", ",", "kernel_size", "=", "3", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "self", ".", "c_dim", ",", "kernel_size", "=", "5", ",", "activation", "=", "'sigmoid'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "return", "Model", "(", "image", ",", "x", ",", "name", "=", "'R'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_discriminator": [[146, 177], ["keras.layers.Input", "keras.models.Model", "keras.layers.convolutional.Conv2D", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU", "keras.layers.Flatten", "keras.layers.Dense"], "methods", ["None"], ["", "def", "build_discriminator", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build the discriminator/D network\n        \n        Arguments:\n            input_shape {list} -- Input tensor shape of the discriminator network, either the real unmodified image\n                or the generated image by generator/R network.\n        \n        Returns:\n            [Tensor] -- Network output tensors.\n        \"\"\"", "\n", "\n", "image", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "'d_input'", ")", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'d_h0_conv'", ")", "(", "image", ")", "\n", "x", "=", "LeakyReLU", "(", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "2", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'d_h1_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "4", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'d_h2_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2D", "(", "filters", "=", "self", ".", "df_dim", "*", "8", ",", "kernel_size", "=", "5", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'d_h3_conv'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "self", ".", "r_alpha", ")", "(", "x", ")", "\n", "\n", "x", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "'d_h3_lin'", ")", "(", "x", ")", "\n", "\n", "return", "Model", "(", "image", ",", "x", ",", "name", "=", "'D'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_model": [[178, 210], ["tensorflow.keras.optimizers.Adam", "GAN_GTRSB.ALOCC_Model.build_discriminator", "GAN_GTRSB.ALOCC_Model.discriminator.compile", "GAN_GTRSB.ALOCC_Model.build_generator", "keras.layers.Input", "GAN_GTRSB.ALOCC_Model.generator", "GAN_GTRSB.ALOCC_Model.discriminator", "keras.models.Model", "GAN_GTRSB.ALOCC_Model.adversarial_model.compile", "print", "GAN_GTRSB.ALOCC_Model.discriminator.summary", "print", "GAN_GTRSB.ALOCC_Model.adversarial_model.summary"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_discriminator", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.build_generator"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "image_dims", "=", "[", "self", ".", "input_height", ",", "self", ".", "input_width", ",", "self", ".", "c_dim", "]", "\n", "#optimizer = RMSprop(lr=0.002, clipvalue=1.0, decay=1e-8)", "\n", "optimizer", "=", "Adam", "(", "0.002", ",", "0.5", ")", "\n", "# Construct discriminator/D network takes real image as input.", "\n", "# D - sigmoid and D_logits -linear output.", "\n", "self", ".", "discriminator", "=", "self", ".", "build_discriminator", "(", "image_dims", ")", "\n", "\n", "# Model to train D to discrimate real images.", "\n", "self", ".", "discriminator", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "'binary_crossentropy'", ")", "\n", "\n", "# Construct generator/R network.", "\n", "self", ".", "generator", "=", "self", ".", "build_generator", "(", "image_dims", ")", "\n", "img", "=", "Input", "(", "shape", "=", "image_dims", ")", "\n", "\n", "reconstructed_img", "=", "self", ".", "generator", "(", "img", ")", "\n", "\n", "self", ".", "discriminator", ".", "trainable", "=", "False", "\n", "validity", "=", "self", ".", "discriminator", "(", "reconstructed_img", ")", "\n", "\n", "# Model to train Generator/R to minimize reconstruction loss and trick D to see", "\n", "# generated images as real ones.", "\n", "self", ".", "adversarial_model", "=", "Model", "(", "img", ",", "[", "reconstructed_img", ",", "validity", "]", ")", "\n", "self", ".", "adversarial_model", ".", "compile", "(", "loss", "=", "[", "'binary_crossentropy'", ",", "'binary_crossentropy'", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "r_alpha", ",", "1", "]", ",", "\n", "optimizer", "=", "optimizer", ")", "\n", "\n", "print", "(", "'\\n\\rdiscriminator'", ")", "\n", "self", ".", "discriminator", ".", "summary", "(", ")", "\n", "\n", "print", "(", "'\\n\\adversarial_model'", ")", "\n", "self", ".", "adversarial_model", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.train": [[212, 289], ["os.path.join", "os.makedirs", "numpy.array().astype", "os.makedirs", "imageio.imwrite", "numpy.ones", "numpy.zeros", "range", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.plot", "matplotlib.savefig", "montage", "get_noisy_data", "print", "range", "GAN_GTRSB.ALOCC_Model.save", "numpy.array", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "print", "logging.info", "len", "GAN_GTRSB.ALOCC_Model.generator.predict", "GAN_GTRSB.ALOCC_Model.discriminator.train_on_batch", "GAN_GTRSB.ALOCC_Model.discriminator.train_on_batch", "GAN_GTRSB.ALOCC_Model.adversarial_model.train_on_batch", "GAN_GTRSB.ALOCC_Model.adversarial_model.train_on_batch", "plot_epochs.append", "plot_g_recon_losses.append", "numpy.mod", "numpy.array", "numpy.array", "numpy.array", "GAN_GTRSB.ALOCC_Model.generator.predict", "int", "int", "save_images", "numpy.ceil", "numpy.floor", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.plot_functions.plot", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.montage", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_kh_tools.get_noisy_data", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.save_images"], ["", "def", "train", "(", "self", ",", "epochs", ",", "batch_size", "=", "256", ",", "sample_interval", "=", "500", ")", ":", "\n", "# Make log folder if not exist.", "\n", "        ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "self", ".", "model_dir", ")", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "# Get a batch of sample images with attention_label to export as montage.", "\n", "            ", "sample", "=", "self", ".", "data", "[", "0", ":", "batch_size", "]", "\n", "\n", "# Export images as montage, sample_input also use later to generate sample R network outputs during training.", "\n", "", "sample_inputs", "=", "np", ".", "array", "(", "sample", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "sample_dir", ",", "exist_ok", "=", "True", ")", "\n", "#scipy.misc.imsave('./{}/train_input_samples.jpg'.format(self.sample_dir), montage(sample_inputs[:,:,:,0]))", "\n", "imageio", ".", "imwrite", "(", "'./{}/train_input_samples.jpg'", ".", "format", "(", "self", ".", "sample_dir", ")", ",", "montage", "(", "sample_inputs", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", ")", "\n", "counter", "=", "1", "\n", "# Record generator/R network reconstruction training losses.", "\n", "plot_epochs", "=", "[", "]", "\n", "plot_g_recon_losses", "=", "[", "]", "\n", "\n", "# Load traning data, add random noise.", "\n", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "            ", "sample_w_noise", "=", "get_noisy_data", "(", "self", ".", "data", ")", "\n", "\n", "# Adversarial ground truths", "\n", "", "ones", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "#ones = self.smooth_positive_labels(ones)", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "#zeros = self.smooth_negative_labels(zeros)", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "print", "(", "'Epoch ({}/{})-------------------------------------------------'", ".", "format", "(", "epoch", ",", "epochs", ")", ")", "\n", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "# Number of batches computed by total number of target data / batch size.", "\n", "                ", "batch_idxs", "=", "len", "(", "self", ".", "data", ")", "//", "batch_size", "\n", "\n", "", "for", "idx", "in", "range", "(", "0", ",", "batch_idxs", ")", ":", "\n", "# Get a batch of images and add random noise.", "\n", "                ", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "                    ", "batch", "=", "self", ".", "data", "[", "idx", "*", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_noise", "=", "sample_w_noise", "[", "idx", "*", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "batch_size", "]", "\n", "batch_clean", "=", "self", ".", "data", "[", "idx", "*", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "batch_size", "]", "\n", "# Turn batch images data to float32 type.", "\n", "", "batch_images", "=", "np", ".", "array", "(", "batch", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "batch_noise_images", "=", "np", ".", "array", "(", "batch_noise", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "batch_clean_images", "=", "np", ".", "array", "(", "batch_clean", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "                    ", "batch_fake_images", "=", "self", ".", "generator", ".", "predict", "(", "batch_noise_images", ")", "\n", "# Update D network, minimize real images inputs->D-> ones, noisy z->R->D->zeros loss.", "\n", "d_loss_real", "=", "self", ".", "discriminator", ".", "train_on_batch", "(", "batch_images", ",", "ones", ")", "\n", "d_loss_fake", "=", "self", ".", "discriminator", ".", "train_on_batch", "(", "batch_fake_images", ",", "zeros", ")", "\n", "\n", "# Update R network twice, minimize noisy z->R->D->ones and reconstruction loss.", "\n", "self", ".", "adversarial_model", ".", "train_on_batch", "(", "batch_noise_images", ",", "[", "batch_clean_images", ",", "ones", "]", ")", "\n", "g_loss", "=", "self", ".", "adversarial_model", ".", "train_on_batch", "(", "batch_noise_images", ",", "[", "batch_clean_images", ",", "ones", "]", ")", "\n", "plot_epochs", ".", "append", "(", "epoch", "+", "idx", "/", "batch_idxs", ")", "\n", "plot_g_recon_losses", ".", "append", "(", "g_loss", "[", "1", "]", ")", "\n", "", "counter", "+=", "1", "\n", "msg", "=", "'Epoch:[{0}]-[{1}/{2}] --> d_loss: {3:>0.3f}, g_loss:{4:>0.3f}, g_recon_loss:{4:>0.3f}'", ".", "format", "(", "epoch", ",", "idx", ",", "batch_idxs", ",", "d_loss_real", "+", "d_loss_fake", ",", "g_loss", "[", "0", "]", ",", "g_loss", "[", "1", "]", ")", "\n", "print", "(", "msg", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "if", "np", ".", "mod", "(", "counter", ",", "sample_interval", ")", "==", "0", ":", "\n", "                    ", "if", "self", ".", "dataset_name", "==", "'mnist'", ":", "\n", "                        ", "samples", "=", "self", ".", "generator", ".", "predict", "(", "sample_inputs", ")", "\n", "manifold_h", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "samples", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "manifold_w", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "sqrt", "(", "samples", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "save_images", "(", "samples", ",", "[", "manifold_h", ",", "manifold_w", "]", ",", "\n", "'./{}/train_{:02d}_{:04d}.png'", ".", "format", "(", "self", ".", "sample_dir", ",", "epoch", ",", "idx", ")", ")", "\n", "\n", "# Save the checkpoint end of each epoch.", "\n", "", "", "", "self", ".", "save", "(", "epoch", ")", "\n", "# Export the Generator/R network reconstruction losses as a plot.", "\n", "", "plt", ".", "title", "(", "'Generator/R network reconstruction losses'", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'training loss'", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "plot", "(", "plot_epochs", ",", "plot_g_recon_losses", ")", "\n", "plt", ".", "savefig", "(", "'plot_g_recon_losses.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.model_dir": [[290, 295], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_dir", "(", "self", ")", ":", "\n", "        ", "return", "\"{}_{}_{}\"", ".", "format", "(", "\n", "self", ".", "dataset_name", ",", "\n", "self", ".", "output_height", ",", "self", ".", "output_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.keras.GAN_GTRSB.ALOCC_Model.save": [[296, 305], ["os.makedirs", "GAN_GTRSB.ALOCC_Model.adversarial_model.save_weights", "os.path.join"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "step", ")", ":", "\n", "        ", "\"\"\"Helper method to save model weights.\n        \n        Arguments:\n            step {[type]} -- [description]\n        \"\"\"", "\n", "os", ".", "makedirs", "(", "self", ".", "checkpoint_dir", ",", "exist_ok", "=", "True", ")", "\n", "model_name", "=", "'ALOCC_Model_{}.h5'", ".", "format", "(", "step", ")", "\n", "self", ".", "adversarial_model", ".", "save_weights", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "model_name", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.set_tf_loglevel": [[16, 26], ["logging.getLogger().setLevel", "logging.getLogger"], "function", ["None"], ["def", "set_tf_loglevel", "(", "level", ")", ":", "\n", "\t", "if", "level", ">=", "logging", ".", "FATAL", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'3'", "\n", "", "if", "level", ">=", "logging", ".", "ERROR", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'2'", "\n", "", "if", "level", ">=", "logging", ".", "WARNING", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'1'", "\n", "", "else", ":", "\n", "\t\t", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'0'", "\n", "", "logging", ".", "getLogger", "(", "'tensorflow'", ")", ".", "setLevel", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.compute_loss": [[28, 40], ["model.get_layer", "keras.models.Model", "print", "keras.models.Model.", "tensorflow.reduce_mean", "numpy.shape"], "function", ["None"], ["", "def", "compute_loss", "(", "model", ",", "input_image", ",", "filter_index", ")", ":", "\n", "\t", "layer", "=", "model", ".", "get_layer", "(", "index", "=", "-", "2", ")", "\n", "feature_extractor", "=", "Model", "(", "inputs", "=", "model", ".", "inputs", ",", "outputs", "=", "layer", ".", "output", ")", "\n", "\n", "print", "(", "\"np.shape(input_image)\"", ",", "np", ".", "shape", "(", "input_image", ")", ")", "\n", "\n", "activation", "=", "feature_extractor", "(", "input_image", ")", "\n", "#print(np.shape(activation))", "\n", "\n", "# We avoid border artifacts by only involving non-border pixels in the loss.", "\n", "filter_activation", "=", "activation", "[", ":", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", ",", "filter_index", "]", "\n", "return", "tf", ".", "reduce_mean", "(", "filter_activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.gradient_ascent_step": [[41, 52], ["tape.gradient", "tensorflow.math.l2_normalize", "tensorflow.GradientTape", "tape.watch", "test_gradient_visualization.compute_loss"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.compute_loss"], ["", "@", "tf", ".", "function", "\n", "def", "gradient_ascent_step", "(", "model", ",", "img", ",", "filter_index", ",", "learning_rate", ")", ":", "\n", "\t", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "\t\t", "tape", ".", "watch", "(", "img", ")", "\n", "loss", "=", "compute_loss", "(", "model", ",", "img", ",", "filter_index", ")", "\n", "# Compute gradients.", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "loss", ",", "img", ")", "\n", "# Normalize gradients.", "\n", "grads", "=", "tf", ".", "math", ".", "l2_normalize", "(", "grads", ")", "\n", "img", "+=", "learning_rate", "*", "grads", "\n", "return", "loss", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.initialize_image": [[53, 59], ["tensorflow.random.uniform"], "function", ["None"], ["", "def", "initialize_image", "(", "img_width", ",", "img_height", ")", ":", "\n", "# We start from a gray image with some random noise", "\n", "\t", "img", "=", "tf", ".", "random", ".", "uniform", "(", "(", "1", ",", "img_width", ",", "img_height", ",", "3", ")", ")", "\n", "# ResNet50V2 expects inputs in the range [-1, +1].", "\n", "# Here we scale our random inputs to [-0.125, +0.125]", "\n", "return", "(", "img", "-", "0.5", ")", "*", "0.25", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.visualize_filter": [[61, 72], ["range", "test_gradient_visualization.deprocess_image", "test_gradient_visualization.gradient_ascent_step", "img[].numpy"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.deprocess_image", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.gradient_ascent_step"], ["", "def", "visualize_filter", "(", "model", ",", "filter_index", ",", "img", ")", ":", "\n", "# We run gradient ascent for 20 steps", "\n", "\t", "iterations", "=", "30", "\n", "learning_rate", "=", "10.0", "\n", "#img = initialize_image(img_width, img_height)", "\n", "for", "iteration", "in", "range", "(", "iterations", ")", ":", "\n", "\t\t", "loss", ",", "img", "=", "gradient_ascent_step", "(", "model", ",", "img", ",", "filter_index", ",", "learning_rate", ")", "\n", "\n", "# Decode the resulting input image", "\n", "", "img", "=", "deprocess_image", "(", "img", "[", "0", "]", ".", "numpy", "(", ")", ")", "\n", "return", "loss", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.test_gradient_visualization.deprocess_image": [[74, 91], ["np.clip().astype.mean", "numpy.clip", "numpy.clip().astype", "np.clip().astype.std", "numpy.clip"], "function", ["None"], ["", "def", "deprocess_image", "(", "img", ")", ":", "\n", "# Normalize array: center on 0., ensure variance is 0.15", "\n", "\t", "img", "-=", "img", ".", "mean", "(", ")", "\n", "img", "/=", "img", ".", "std", "(", ")", "+", "1e-5", "\n", "img", "*=", "0.15", "\n", "\n", "# Center crop", "\n", "img", "=", "img", "[", "25", ":", "-", "25", ",", "25", ":", "-", "25", ",", ":", "]", "\n", "\n", "# Clip to [0, 1]", "\n", "img", "+=", "0.5", "\n", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "1", ")", "\n", "\n", "# Convert to RGB array", "\n", "img", "*=", "255", "\n", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "255", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.SCGAN_GTRSB_test.test_reconstruction": [[15, 42], ["SCGAN_GTRSB_test..adversarial_model.predict", "plt.figure", "plt.figure.add_subplot", "data.reshape", "model_predicts[].reshape", "plt.title", "plt.imshow", "plt.figure.add_subplot", "plt.title", "plt.imshow", "plt.show", "K.variable", "K.variable", "K.eval().mean", "print", "print", "np.where", "len", "np.asarray", "K.eval", "binary_crossentropy"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.None.vgg_16_cifar10_keras.cifar10vgg.predict"], ["def", "test_reconstruction", "(", "label", ",", "data_index", "=", "11", ")", ":", "\n", "    ", "specific_idx", "=", "np", ".", "where", "(", "y_test", "==", "label", ")", "[", "0", "]", "\n", "#print(specific_idx)", "\n", "if", "data_index", ">=", "len", "(", "X_test", ")", ":", "\n", "        ", "data_index", "=", "0", "\n", "", "data", "=", "X_test", "[", "specific_idx", "]", "#.reshape(-1, 28, 28, 3)[data_index:data_index+1]", "\n", "data", "=", "data", "[", "1", "]", "\n", "model_predicts", "=", "self", ".", "adversarial_model", ".", "predict", "(", "np", ".", "asarray", "(", "[", "data", "]", ")", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "5", ",", "5", ")", ")", "\n", "columns", "=", "1", "\n", "rows", "=", "2", "\n", "fig", ".", "add_subplot", "(", "rows", ",", "columns", ",", "1", ")", "\n", "input_image", "=", "data", ".", "reshape", "(", "input_shape", ")", "\n", "reconstructed_image", "=", "model_predicts", "[", "0", "]", ".", "reshape", "(", "input_shape", ")", "\n", "plt", ".", "title", "(", "'Input'", ")", "\n", "plt", ".", "imshow", "(", "input_image", ",", "label", "=", "'Input'", ")", "\n", "fig", ".", "add_subplot", "(", "rows", ",", "columns", ",", "2", ")", "\n", "plt", ".", "title", "(", "'Reconstruction'", ")", "\n", "plt", ".", "imshow", "(", "reconstructed_image", ",", "label", "=", "'Reconstructed'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "# Compute the mean binary_crossentropy loss of reconstructed image.", "\n", "y_true", "=", "K", ".", "variable", "(", "reconstructed_image", ")", "\n", "y_pred", "=", "K", ".", "variable", "(", "input_image", ")", "\n", "error", "=", "K", ".", "eval", "(", "binary_crossentropy", "(", "y_true", ",", "y_pred", ")", ")", ".", "mean", "(", ")", "\n", "print", "(", "'Reconstruction loss:'", ",", "error", ")", "\n", "print", "(", "'Discriminator Output:'", ",", "model_predicts", "[", "1", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.out_of_box_unittest.TestAbstractionBox.check_outside_of_box": [[13, 50], ["numpy.asarray", "shapely.geometry.Point", "list", "print", "shapely.affinity.scale", "list", "print", "shapely.affinity.scale.contains", "zip", "zip", "print"], "methods", ["None"], ["\t", "def", "check_outside_of_box", "(", "self", ",", "boxes", ",", "intermediateValues", ",", "tau", ")", ":", "\n", "\t\t", "is_outside_of_box", "=", "True", "\n", "data", "=", "np", ".", "asarray", "(", "intermediateValues", ")", "\n", "\n", "x", "=", "data", "[", "0", "]", "\n", "y", "=", "data", "[", "-", "1", "]", "\n", "\n", "point", "=", "Point", "(", "x", ",", "y", ")", "\n", "\n", "for", "polygon", "in", "boxes", ":", "\n", "\t\t\t", "box", "=", "list", "(", "zip", "(", "*", "polygon", ".", "exterior", ".", "coords", ".", "xy", ")", ")", "\n", "print", "(", "'first box'", ",", "box", ")", "\n", "'''\n\t\t\t(x1, y1) = box[0]\n\t\t\t(x2, y1) = box[1]\n\t\t\t(x2, y2) = box[2]\n\t\t\t(x1, y2) = box[3]\n\n\t\t\tx1 = x1*tau-x1 if x1 <= 0 else x1-tau\n\t\t\tx2 = x2*tau+x2 if x2 > 0 else x2+tau\n\t\t\ty1 = y1*tau-y1 if y1 > 0 else y1-tau\n\t\t\ty2 = y2*tau+y2 if y2 > 0 else y2+tau\n\n\t\t\trectangle = [(x1, y1), (x2, y1), (x2, y2), (x1, y2)]\n\t\t\tprint(rectangle)\n\t\t\tpolygon = Polygon(rectangle)\n\t\t\t'''", "\n", "polygon", "=", "affinity", ".", "scale", "(", "polygon", ",", "xfact", "=", "tau", ",", "yfact", "=", "tau", ",", "origin", "=", "'center'", ")", "\n", "\n", "box", "=", "list", "(", "zip", "(", "*", "polygon", ".", "exterior", ".", "coords", ".", "xy", ")", ")", "\n", "print", "(", "'second box'", ",", "box", ")", "\n", "\n", "if", "polygon", ".", "contains", "(", "point", ")", ":", "\n", "\t\t\t\t", "print", "(", "'point {} inside the box'", ".", "format", "(", "point", ")", ")", "\n", "is_outside_of_box", "=", "False", "\n", "\n", "", "", "return", "is_outside_of_box", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.out_of_box_unittest.TestAbstractionBox.do_abstract_by_cluster": [[52, 80], ["dataByCluster.items", "numpy.asarray", "numpy.amin", "numpy.amax", "numpy.amin", "numpy.amax", "arr_polygon.append", "shapely.geometry.polygon.Polygon"], "methods", ["None"], ["", "def", "do_abstract_by_cluster", "(", "self", ",", "dataByCluster", ")", ":", "\n", "\t\t", "arr_polygon", "=", "[", "]", "\n", "\n", "for", "cluster", ",", "weights_neuron", "in", "dataByCluster", ".", "items", "(", ")", ":", "\n", "\t\t\t", "arr_boxes", "=", "[", "]", "\n", "weights_neuron", "=", "np", ".", "asarray", "(", "weights_neuron", ")", "\n", "\n", "weights_neuron", "=", "weights_neuron", "[", ":", ",", "[", "0", ",", "-", "1", "]", "]", "\n", "\n", "x1", "=", "np", ".", "amin", "(", "weights_neuron", "[", ":", ",", "0", "]", ")", "\n", "x2", "=", "np", ".", "amax", "(", "weights_neuron", "[", ":", ",", "0", "]", ")", "\n", "y1", "=", "np", ".", "amin", "(", "weights_neuron", "[", ":", ",", "1", "]", ")", "\n", "y2", "=", "np", ".", "amax", "(", "weights_neuron", "[", ":", ",", "1", "]", ")", "\n", "\n", "# it works", "\n", "rectangle", "=", "[", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "(", "x1", ",", "y2", ")", "]", "\n", "arr_polygon", ".", "append", "(", "Polygon", "(", "rectangle", ")", ")", "\n", "\n", "\n", "#abstract_box = geometry.box(x1, y1, x2, y2)", "\n", "#arr_polygon.append(abstract_box)", "\n", "\n", "#print('abstract box area', abstract_box.area)", "\n", "#increased_abs_box = abstract_box.buffer(0.1)", "\n", "#print('abstract box increased area (10%)', increased_abs_box.area)", "\n", "#print('original', abstract_box.area)", "\n", "\n", "", "return", "arr_polygon", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.out_of_box_unittest.TestAbstractionBox.make_abstraction": [[82, 96], ["sklearn.cluster.KMeans().fit_predict", "zip", "out_of_box_unittest.TestAbstractionBox.do_abstract_by_cluster", "sklearn.cluster.KMeans", "dataByCluster[].append", "dataByCluster.update"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.out_of_box_unittest.TestAbstractionBox.do_abstract_by_cluster"], ["", "def", "make_abstraction", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "dataByCluster", "=", "{", "}", "\n", "\n", "clusters", "=", "KMeans", "(", "n_clusters", "=", "2", ")", ".", "fit_predict", "(", "data", ")", "\n", "\n", "for", "c", ",", "d", "in", "zip", "(", "clusters", ",", "data", ")", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "dataByCluster", "[", "c", "]", ".", "append", "(", "d", ")", "\n", "", "except", ":", "\n", "\t\t\t\t", "dataByCluster", ".", "update", "(", "{", "c", ":", "[", "d", "]", "}", ")", "\n", "\n", "", "", "arr_polygon", "=", "self", ".", "do_abstract_by_cluster", "(", "dataByCluster", ")", "\n", "\n", "return", "arr_polygon", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.out_of_box_unittest.TestAbstractionBox.test_make_box": [[98, 121], ["numpy.asarray", "out_of_box_unittest.TestAbstractionBox.make_abstraction", "out_of_box_unittest.TestAbstractionBox.check_outside_of_box", "out_of_box_unittest.TestAbstractionBox.assertEqual", "out_of_box_unittest.TestAbstractionBox.check_outside_of_box", "out_of_box_unittest.TestAbstractionBox.assertEqual"], "methods", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.out_of_box_unittest.TestAbstractionBox.make_abstraction", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.out_of_box_unittest.TestAbstractionBox.check_outside_of_box", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.tests.out_of_box_unittest.TestAbstractionBox.check_outside_of_box"], ["", "def", "test_make_box", "(", "self", ")", ":", "\n", "\t\t", "tau", "=", "1.0001", "# 1.1 for 10% of enlargement, 1.35 for 35% enlargement (range of values tested in the paper)", "\n", "#data_class0 = [[0.3, 0.45], [0.38, 0.51], [0.4, 0.48], [0.52, 0.48]] # from the paper", "\n", "#data_class1 = [[0.02, 0.33], [0.04, 0.3], [0, 0.27], [0, 0.3], [0, 0.39]] # from the paper", "\n", "v0", "=", "[", "-", "2", ",", "1", ",", "0", ",", "3", ",", "1", "]", "\n", "v1", "=", "[", "0", ",", "3", ",", "1", ",", "-", "2", ",", "2", "]", "\n", "v2", "=", "[", "1", ",", "0", ",", "-", "2", ",", "-", "3", ",", "3", "]", "\n", "v3", "=", "[", "-", "1", ",", "-", "1", ",", "2", ",", "0", ",", "-", "1", "]", "\n", "v4", "=", "[", "3", ",", "-", "3", ",", "-", "1", ",", "2", ",", "-", "2", "]", "\n", "v5", "=", "[", "-", "3", ",", "-", "2", ",", "-", "3", ",", "3", ",", "0", "]", "\n", "\n", "data", "=", "np", ".", "asarray", "(", "[", "v0", ",", "v1", ",", "v2", ",", "v3", ",", "v4", ",", "v5", "]", ")", "\n", "\n", "arr_polygon", "=", "self", ".", "make_abstraction", "(", "data", ")", "\n", "\n", "# intermediate values simul", "\n", "v99", "=", "[", "-", "3", ",", "-", "2", ",", "-", "3", ",", "3", ",", "0", "]", "\n", "is_outside_of_box", "=", "self", ".", "check_outside_of_box", "(", "arr_polygon", ",", "v99", ",", "tau", ")", "\n", "self", ".", "assertEqual", "(", "is_outside_of_box", ",", "False", ",", "\"Should be False\"", ")", "\n", "\n", "v99", "=", "[", "-", "4", ",", "-", "3", ",", "-", "4", ",", "4", ",", "0", "]", "\n", "is_outside_of_box", "=", "self", ".", "check_outside_of_box", "(", "arr_polygon", ",", "v99", ",", "tau", ")", "\n", "self", ".", "assertEqual", "(", "is_outside_of_box", ",", "True", ",", "\"Should be True\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.fixtures.mock_data.load_array": [[1, 3], ["None"], "function", ["None"], ["def", "load_array", "(", ")", ":", "\n", "    ", "return", "[", "[", "-", "2", ",", "1", ",", "0", ",", "3", ",", "1", "]", ",", "[", "0", ",", "3", ",", "1", ",", "-", "2", ",", "2", "]", ",", "[", "1", ",", "0", ",", "-", "2", ",", "-", "3", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "2", ",", "0", ",", "-", "1", "]", ",", "[", "3", ",", "-", "3", ",", "-", "1", ",", "2", ",", "-", "2", "]", ",", "[", "-", "3", ",", "-", "2", ",", "-", "3", ",", "3", ",", "0", "]", "]", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.get_separator": [[17, 25], ["sys.platform.startswith"], "function", ["None"], ["\t", "tmp_path", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "'temp'", ")", "\n", "os", ".", "makedirs", "(", "tmp_path", ",", "exist_ok", "=", "True", ")", "\n", "tmp_path", "=", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "artifact_name", ")", "\n", "np", ".", "save", "(", "tmp_path", ",", "data", ")", "\n", "neptune", ".", "log_artifact", "(", "tmp_path", ")", "\n", "\n", "if", "remove_temp_files", ":", "\n", "\t\t", "os", ".", "remove", "(", "tmp_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util._check_keys": [[32, 41], ["isinstance", "util._todict"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util._todict"], ["\n", "", "return", "True", "\n", "\n", "\n", "", "def", "get_activ_func", "(", "backend", ",", "model", ",", "image", ",", "layerIndex", ")", ":", "\n", "\t", "if", "backend", "==", "'tensorflow'", ":", "\n", "\t\t", "from", "tensorflow", ".", "keras", ".", "models", "import", "Model", "\n", "", "elif", "backend", "==", "'keras'", ":", "\n", "\t\t", "from", "keras", ".", "models", "import", "Model", "\n", "", "inter_output_model", "=", "Model", "(", "inputs", "=", "model", ".", "input", ",", "outputs", "=", "model", ".", "get_layer", "(", "index", "=", "layerIndex", ")", ".", "output", ")", "#last layer: index 7 or name 'dense'", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util._todict": [[43, 55], ["isinstance", "util._todict"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util._todict"], ["\n", "\n", "", "def", "loading_info", "(", "counter", ",", "loaded", ",", "loading_percentage", ")", ":", "\n", "\t", "counter", "+=", "1", "\n", "if", "counter", "%", "loaded", "==", "0", ":", "\n", "\t\t", "print", "(", "\"{} % processed\"", ".", "format", "(", "int", "(", "loading_percentage", "*", "100", ")", ")", ")", "\n", "loading_percentage", "+=", "0.1", "\n", "", "return", "counter", ",", "loading_percentage", "\n", "\n", "\n", "", "def", "print_positives_negatives", "(", "arrFalsePositive", ",", "arrFalseNegative", ",", "arrTruePositive", ",", "arrTrueNegative", ",", "classToMonitor", ",", "isTestOneClass", "=", "True", ")", ":", "\n", "\t", "if", "isTestOneClass", ":", "\n", "\t\t", "print", "(", "\"Monitored class:\"", ",", "classToMonitor", ")", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.loadmat": [[57, 66], ["scipy.loadmat", "util._check_keys"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.loadmat", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util._check_keys"], ["print", "(", "\"FN: {}\"", ".", "format", "(", "arrFalseNegative", "[", "str", "(", "classToMonitor", ")", "]", ")", ")", "\n", "print", "(", "\"TP: {}\"", ".", "format", "(", "arrTruePositive", "[", "str", "(", "classToMonitor", ")", "]", ")", ")", "\n", "print", "(", "\"TN: {}\"", ".", "format", "(", "arrTrueNegative", "[", "str", "(", "classToMonitor", ")", "]", ")", ")", "\n", "print", "(", "\"Similar patterns (FN + TN): \"", ",", "sum", "(", "arrFalseNegative", ".", "values", "(", ")", ")", "+", "sum", "(", "arrTrueNegative", ".", "values", "(", ")", ")", ")", "\n", "print", "(", "\"Raised alarms (FP + TP): \"", ",", "sum", "(", "arrFalsePositive", ".", "values", "(", ")", ")", "+", "sum", "(", "arrTruePositive", ".", "values", "(", ")", ")", ")", "\n", "\n", "\n", "#image pre-processing methods", "\n", "", "", "def", "contrast_normalization", "(", "image", ")", ":", "\n", "\t", "X", "=", "np", ".", "array", "(", "image", ")", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.load_mnist": [[68, 155], ["sklearn.model_selection.train_test_split", "print", "print", "print", "x_train.reshape.astype", "x_test.reshape.astype", "keras.datasets.mnist.load_data", "util.load_mnist.reshaping_data"], "function", ["None"], ["image_blur", "=", "cv2", ".", "GaussianBlur", "(", "image", ",", "(", "65", ",", "65", ")", ",", "10", ")", "\n", "# new_image = cv2.subtract(img,image_blur).astype('float32') # WRONG, the result is not stored in float32 directly", "\n", "new_image", "=", "cv2", ".", "subtract", "(", "image", ",", "image_blur", ",", "dtype", "=", "cv2", ".", "CV_32F", ")", "\n", "out", "=", "cv2", ".", "normalize", "(", "new_image", ",", "None", ",", "alpha", "=", "0", ",", "beta", "=", "255", ",", "norm_type", "=", "cv2", ".", "NORM_MINMAX", ",", "dtype", "=", "cv2", ".", "CV_8U", ")", "\n", "#res = np.hstack((X, out)) #stacking images side-by-side", "\n", "#imageio.imwrite('Contrast.jpg', res)", "\n", "return", "out", "\n", "\n", "\n", "", "def", "image_adjustment", "(", "image", ")", ":", "\n", "\t", "p2", ",", "p98", "=", "np", ".", "percentile", "(", "image", ",", "(", "2", ",", "98", ")", ")", "\n", "img_rescale", "=", "exposure", ".", "rescale_intensity", "(", "image", ",", "in_range", "=", "(", "p2", ",", "p98", ")", ")", "\n", "#res = np.hstack((image, img_rescale)) #stacking images side-by-side", "\n", "#imageio.imwrite('Imadjust.jpg', res)", "\n", "return", "img_rescale", "\n", "\n", "\n", "", "def", "histogram_equalization", "(", "img", ")", ":", "\n", "\t", "equ", "=", "exposure", ".", "equalize_hist", "(", "img", ")", "\n", "res", "=", "np", ".", "hstack", "(", "(", "img", ",", "equ", ")", ")", "#stacking images side-by-side", "\n", "#imageio.imwrite('Histeq.jpg',res)", "\n", "return", "equ", "\n", "\n", "\n", "", "def", "adaptive_hist_eq", "(", "img", ")", ":", "\n", "\t", "img_adapteq", "=", "exposure", ".", "equalize_adapthist", "(", "img", ",", "clip_limit", "=", "0.3", ")", "\n", "#res = np.hstack((img,img_adapteq)) #stacking images side-by-side", "\n", "#imageio.imwrite('Adapthisteq.jpg',res)", "\n", "return", "img_adapteq", "\n", "\n", "\n", "", "def", "rescale", "(", "trainX", ",", "trainY", ",", "model", ",", "epochs", ",", "batch_size", ")", ":", "\n", "\t", "datagen", "=", "ImageDataGenerator", "(", "rescale", "=", "1.0", "/", "255.0", ")", "\n", "train_iterator", "=", "datagen", ".", "flow", "(", "trainX", ",", "trainY", ",", "batch_size", "=", "batch_size", ")", "\n", "return", "train_iterator", "\n", "\n", "\n", "", "def", "std_normalization", "(", "trainX", ",", "trainY", ",", "model", ",", "epochs", ",", "batch_size", ")", ":", "\n", "\t", "datagen", "=", "ImageDataGenerator", "(", "featurewise_center", "=", "True", ",", "featurewise_std_normalization", "=", "True", ")", "\n", "datagen", ".", "fit", "(", "trainX", ")", "\n", "train_iterator", "=", "datagen", ".", "flow", "(", "trainX", ",", "trainY", ",", "batch_size", "=", "batch_size", ")", "\n", "return", "train_iterator", "", "", ""]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.rotating_mnist": [[157, 190], ["zip", "numpy.asarray", "numpy.asarray", "expanded_images.append", "expanded_labels.append", "scipy.ndimage.rotate", "expanded_images.append", "expanded_labels.append", "scipy.ndimage.rotate", "expanded_images.append", "expanded_labels.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.save_rotated_MNIST": [[192, 210], ["os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "open", "csv.writer", "range", "open", "csv.writer", "range", "len", "csv.writer.writerow", "len", "csv.writer.writerow", "imsave", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.imsave"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.decoding_extended_mnist": [[213, 235], ["numpy.zeros().reshape", "numpy.zeros().reshape", "gzip.open", "gzip.open", "f_images.read", "f_labels.read", "range", "numpy.zeros", "numpy.zeros", "ord", "range", "f_labels.read", "ord", "f_images.read"], "function", ["None"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.load_extended_mnist": [[237, 250], ["util.decoding_extended_mnist", "util.decoding_extended_mnist"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.decoding_extended_mnist", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.decoding_extended_mnist"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.load_batches_moving_mnist": [[252, 262], ["numpy.load", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.load_mnist_rand_back": [[264, 271], ["numpy.loadtxt", "numpy.loadtxt", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.load_mnist_img_back": [[273, 286], ["numpy.loadtxt", "numpy.loadtxt", "print", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.load_batches_affnist": [[288, 304], ["util.loadmat", "util.loadmat", "numpy.transpose", "numpy.transpose", "str", "str"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.loadmat", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.loadmat"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.write_labeldata": [[306, 311], ["numpy.array", "open", "f.write", "f.write", "len", "np.array.tobytes", "labeldata.tobytes"], "function", ["None"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.write_imagedata": [[312, 317], ["numpy.array", "open", "f.write", "f.write", "len", "np.array.tobytes", "imagedata.tobytes"], "function", ["None"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.transformations": [[319, 344], ["int", "numpy.arange().tolist", "numpy.arange().tolist", "numpy.arange", "numpy.arange().tolist", "numpy.arange().tolist", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.load_concept_mnist": [[346, 380], ["util.transformations", "len", "zip", "numpy.asarray", "numpy.asarray", "numpy.pad", "range", "PIL.Image.fromarray", "Image.fromarray.transform", "numpy.array", "expanded_images.append", "expanded_labels.append"], "function", ["home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.util.transformations", "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.utils.scgan_utils.transform"], []], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.demo_temporal_mnist.temporalize_by_class_dist": [[7, 29], ["x.reshape", "numpy.arange", "x_flat[].copy", "numpy.zeros", "range", "len", "len", "numpy.argmin", "print", "rectifier().sum", "len", "float", "rectifier"], "function", ["None"], ["def", "temporalize_by_class_dist", "(", "x", ",", "smoothing_steps", ",", "distance", ")", ":", "\n", "    ", "\"\"\"\n    :param x: An (n_samples, n_dims) dataset\n    :return: A (n_samples, ) array of indexes that can be used to shuffle the input for temporal smoothness.\n    \"\"\"", "\n", "x_flat", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "index_buffer", "=", "np", ".", "arange", "(", "1", ",", "smoothing_steps", "+", "1", ")", "\n", "next_sample_buffer", "=", "x_flat", "[", "1", ":", "smoothing_steps", "+", "1", "]", ".", "copy", "(", ")", "\n", "shuffling_indices", "=", "np", ".", "zeros", "(", "len", "(", "x", ")", ",", "dtype", "=", "int", ")", "\n", "rectifier", "=", "np", ".", "abs", "if", "distance", "==", "'L1'", "else", "np", ".", "square", "if", "distance", "==", "'L2'", "else", "print", "(", "\"wrong distance metric:\"", ",", "distance", ")", "\n", "\n", "current_index", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "        ", "shuffling_indices", "[", "i", "]", "=", "current_index", "\n", "closest", "=", "np", ".", "argmin", "(", "rectifier", "(", "x_flat", "[", "current_index", "]", "-", "next_sample_buffer", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "current_index", "=", "index_buffer", "[", "closest", "]", "\n", "weve_aint_done_yet", "=", "i", "+", "smoothing_steps", "+", "1", "<", "len", "(", "x", ")", "\n", "next_index", "=", "i", "+", "smoothing_steps", "+", "1", "\n", "next_sample_buffer", "[", "closest", "]", "=", "x_flat", "[", "next_index", "]", "if", "weve_aint_done_yet", "else", "float", "(", "'inf'", ")", "\n", "index_buffer", "[", "closest", "]", "=", "next_index", "if", "weve_aint_done_yet", "else", "-", "1", "\n", "\n", "", "return", "shuffling_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.demo_temporal_mnist.demo_temporal_mnist": [[31, 37], ["util.load_e_mnist", "get_temporal_mnist_dataset"], "function", ["None"], ["", "def", "demo_temporal_mnist", "(", "n_samples", "=", "None", ",", "smoothing_steps", "=", "200", ")", ":", "\n", "#_, _, original_data, original_labels = get_mnist_dataset(n_training_samples=n_samples, n_test_samples=n_samples).xyxy", "\n", "#_, _, _, _, original_data, original_labels, _ = util.load_mnist(onehotencoder=False)", "\n", "    ", "_", ",", "_", ",", "_", ",", "_", ",", "original_data", ",", "original_labels", ",", "_", "=", "util", ".", "load_e_mnist", "(", "onehotencoder", "=", "False", ")", "\n", "#_, _, temporal_data, temporal_labels = get_temporal_mnist_dataset(n_training_samples=n_samples, n_test_samples=n_samples, smoothing_steps=smoothing_steps).xyxy", "\n", "temporal_data", ",", "temporal_labels", "=", "get_temporal_mnist_dataset", "(", "n_training_samples", "=", "n_samples", ",", "n_test_samples", "=", "n_samples", ",", "smoothing_steps", "=", "smoothing_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raulsenaferreira_prdc_2021_sut_module.unit.demo_temporal_mnist.plot_images": [[39, 49], ["matplotlib.subplots", "range", "matplotlib.tight_layout", "matplotlib.show", "ax.imshow", "ax.set_title", "ax.set_axis_off", "numpy.squeeze"], "function", ["None"], ["", "def", "plot_images", "(", "temporal_data", ",", "temporal_labels", ",", "num_row", ",", "num_col", ")", ":", "\n", "\n", "    ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "num_row", ",", "num_col", ",", "figsize", "=", "(", "1.5", "*", "num_col", ",", "2", "*", "num_row", ")", ")", "\n", "for", "i", "in", "range", "(", "num_row", "*", "num_col", ")", ":", "\n", "        ", "ax", "=", "axes", "[", "i", "//", "num_col", ",", "i", "%", "num_col", "]", "\n", "ax", ".", "imshow", "(", "np", ".", "squeeze", "(", "temporal_data", "[", "i", "]", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", ".", "set_title", "(", "'{}'", ".", "format", "(", "temporal_labels", "[", "i", "]", ")", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "", "plt", ".", "tight_layout", "(", "pad", "=", "3.0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]]}