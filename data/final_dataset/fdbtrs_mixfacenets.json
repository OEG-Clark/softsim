{"home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.__init__": [[19, 69], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "int", "os.path.join", "os.path.join", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "int", "min", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "logging.info", "logging.info", "int", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "str", "str", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "logging.info", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "logging.info", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "__init__", "(", "self", ",", "rank", ",", "local_rank", ",", "world_size", ",", "batch_size", ",", "resume", ",", "\n", "margin_softmax", ",", "num_classes", ",", "sample_rate", "=", "1.0", ",", "embedding_size", "=", "512", ",", "prefix", "=", "\"./\"", ",", "global_step", "=", "100", ")", ":", "\n", "        ", "super", "(", "PartialFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#", "\n", "self", ".", "num_classes", ":", "int", "=", "num_classes", "\n", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "local_rank", ":", "int", "=", "local_rank", "\n", "self", ".", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "self", ".", "local_rank", ")", ")", "\n", "self", ".", "world_size", ":", "int", "=", "world_size", "\n", "self", ".", "batch_size", ":", "int", "=", "batch_size", "\n", "self", ".", "margin_softmax", ":", "callable", "=", "margin_softmax", "\n", "self", ".", "sample_rate", ":", "float", "=", "sample_rate", "\n", "self", ".", "embedding_size", ":", "int", "=", "embedding_size", "\n", "self", ".", "prefix", ":", "str", "=", "prefix", "\n", "self", ".", "num_local", ":", "int", "=", "num_classes", "//", "world_size", "+", "int", "(", "rank", "<", "num_classes", "%", "world_size", ")", "\n", "self", ".", "class_start", ":", "int", "=", "num_classes", "//", "world_size", "*", "rank", "+", "min", "(", "rank", ",", "num_classes", "%", "world_size", ")", "\n", "self", ".", "num_sample", ":", "int", "=", "int", "(", "self", ".", "sample_rate", "*", "self", ".", "num_local", ")", "\n", "\n", "self", ".", "weight_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "prefix", ",", "str", "(", "global_step", ")", "+", "\"rank:{}_softmax_weight.pt\"", ".", "format", "(", "self", ".", "rank", ")", ")", "\n", "self", ".", "weight_mom_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "prefix", ",", "str", "(", "global_step", ")", "+", "\"rank:{}_softmax_weight_mom.pt\"", ".", "format", "(", "self", ".", "rank", ")", ")", "\n", "\n", "if", "resume", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "weight", ":", "torch", ".", "Tensor", "=", "torch", ".", "load", "(", "self", ".", "weight_name", ")", "\n", "logging", ".", "info", "(", "\"softmax weight resume successfully!\"", ")", "\n", "", "except", "(", "FileNotFoundError", ",", "KeyError", ",", "IndexError", ")", ":", "\n", "                ", "self", ".", "weight", "=", "torch", ".", "normal", "(", "0", ",", "0.01", ",", "(", "self", ".", "num_local", ",", "self", ".", "embedding_size", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "logging", ".", "info", "(", "\"softmax weight resume fail!\"", ")", "\n", "\n", "", "try", ":", "\n", "                ", "self", ".", "weight_mom", ":", "torch", ".", "Tensor", "=", "torch", ".", "load", "(", "self", ".", "weight_mom_name", ")", "\n", "logging", ".", "info", "(", "\"softmax weight mom resume successfully!\"", ")", "\n", "", "except", "(", "FileNotFoundError", ",", "KeyError", ",", "IndexError", ")", ":", "\n", "                ", "self", ".", "weight_mom", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "self", ".", "weight", ")", "\n", "logging", ".", "info", "(", "\"softmax weight mom resume fail!\"", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "torch", ".", "normal", "(", "0", ",", "0.01", ",", "(", "self", ".", "num_local", ",", "self", ".", "embedding_size", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "weight_mom", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "self", ".", "weight", ")", "\n", "logging", ".", "info", "(", "\"softmax weight init successfully!\"", ")", "\n", "logging", ".", "info", "(", "\"softmax weight mom init successfully!\"", ")", "\n", "", "self", ".", "stream", ":", "torch", ".", "cuda", ".", "Stream", "=", "torch", ".", "cuda", ".", "Stream", "(", "local_rank", ")", "\n", "\n", "self", ".", "index", "=", "None", "\n", "if", "int", "(", "self", ".", "sample_rate", ")", "==", "1", ":", "\n", "            ", "self", ".", "update", "=", "lambda", ":", "0", "\n", "self", ".", "sub_weight", "=", "Parameter", "(", "self", ".", "weight", ")", "\n", "self", ".", "sub_weight_mom", "=", "self", ".", "weight_mom", "\n", "", "else", ":", "\n", "            ", "self", ".", "sub_weight", "=", "Parameter", "(", "torch", ".", "empty", "(", "(", "0", ",", "0", ")", ")", ".", "cuda", "(", "local_rank", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.save_params": [[70, 75], ["os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "str", "str"], "methods", ["None"], ["", "", "def", "save_params", "(", "self", ",", "global_step", ")", ":", "\n", "        ", "self", ".", "weight_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "prefix", ",", "str", "(", "global_step", ")", "+", "\"rank:{}_softmax_weight.pt\"", ".", "format", "(", "self", ".", "rank", ")", ")", "\n", "self", ".", "weight_mom_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "prefix", ",", "str", "(", "global_step", ")", "+", "\"rank:{}_softmax_weight_mom.pt\"", ".", "format", "(", "self", ".", "rank", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "weight", ".", "data", ",", "self", ".", "weight_name", ")", "\n", "torch", ".", "save", "(", "self", ".", "weight_mom", ",", "self", ".", "weight_mom_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.sample": [[76, 94], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.searchsorted", "torch.searchsorted", "torch.searchsorted", "torch.searchsorted", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.unique.size", "torch.unique.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "index.sort"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "self", ",", "total_label", ")", ":", "\n", "        ", "index_positive", "=", "(", "self", ".", "class_start", "<=", "total_label", ")", "&", "(", "total_label", "<", "self", ".", "class_start", "+", "self", ".", "num_local", ")", "\n", "total_label", "[", "~", "index_positive", "]", "=", "-", "1", "\n", "total_label", "[", "index_positive", "]", "-=", "self", ".", "class_start", "\n", "if", "int", "(", "self", ".", "sample_rate", ")", "!=", "1", ":", "\n", "            ", "positive", "=", "torch", ".", "unique", "(", "total_label", "[", "index_positive", "]", ",", "sorted", "=", "True", ")", "\n", "if", "self", ".", "num_sample", "-", "positive", ".", "size", "(", "0", ")", ">=", "0", ":", "\n", "                ", "perm", "=", "torch", ".", "rand", "(", "size", "=", "[", "self", ".", "num_local", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "perm", "[", "positive", "]", "=", "2.0", "\n", "index", "=", "torch", ".", "topk", "(", "perm", ",", "k", "=", "self", ".", "num_sample", ")", "[", "1", "]", "\n", "index", "=", "index", ".", "sort", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "index", "=", "positive", "\n", "", "self", ".", "index", "=", "index", "\n", "total_label", "[", "index_positive", "]", "=", "torch", ".", "searchsorted", "(", "index", ",", "total_label", "[", "index_positive", "]", ")", "\n", "self", ".", "sub_weight", "=", "Parameter", "(", "self", ".", "weight", "[", "index", "]", ")", "\n", "self", ".", "sub_weight_mom", "=", "self", ".", "weight_mom", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.forward": [[95, 99], ["torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "total_features", ",", "norm_weight", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "logits", "=", "linear", "(", "total_features", ",", "norm_weight", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.update": [[100, 104], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight_mom", "[", "self", ".", "index", "]", "=", "self", ".", "sub_weight_mom", "\n", "self", ".", "weight", "[", "self", ".", "index", "]", "=", "self", ".", "sub_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.prepare": [[105, 116], ["torch.cuda.stream", "torch.cuda.stream", "torch.cuda.stream", "torch.cuda.stream", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.all_gather", "torch.all_gather", "partial_fc.PartialFC.sample", "optimizer.state.pop", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "list", "torch.zeros.chunk", "torch.zeros.chunk"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.sample"], ["", "def", "prepare", "(", "self", ",", "label", ",", "optimizer", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "total_label", "=", "torch", ".", "zeros", "(", "\n", "size", "=", "[", "self", ".", "batch_size", "*", "self", ".", "world_size", "]", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "dist", ".", "all_gather", "(", "list", "(", "total_label", ".", "chunk", "(", "self", ".", "world_size", ",", "dim", "=", "0", ")", ")", ",", "label", ")", "\n", "self", ".", "sample", "(", "total_label", ")", "\n", "optimizer", ".", "state", ".", "pop", "(", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'params'", "]", "[", "0", "]", ",", "None", ")", "\n", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'params'", "]", "[", "0", "]", "=", "self", ".", "sub_weight", "\n", "optimizer", ".", "state", "[", "self", ".", "sub_weight", "]", "[", "'momentum_buffer'", "]", "=", "self", ".", "sub_weight_mom", "\n", "norm_weight", "=", "normalize", "(", "self", ".", "sub_weight", ")", "\n", "return", "total_label", ",", "norm_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.forward_backward": [[117, 167], ["partial_fc.PartialFC.prepare", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.all_gather", "torch.all_gather", "partial_fc.PartialFC.forward", "partial_fc.PartialFC.margin_softmax", "partial_fc.PartialFC.backward", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.reduce_scatter", "torch.reduce_scatter", "list", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.all_reduce", "torch.all_reduce", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp.sum", "torch.exp.sum", "torch.all_reduce", "torch.all_reduce", "torch.exp.div_", "torch.exp.div_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "grad[].gather", "torch.all_reduce", "torch.all_reduce", "grad.div_", "torch.zeros.grad.detach_", "torch.zeros.grad.detach_", "list", "torch.zeros.chunk", "torch.zeros.chunk", "torch.max", "torch.max", "torch.max", "torch.max", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros.clamp_min_().log_().mean", "torch.zeros.clamp_min_().log_().mean", "torch.zeros.grad.chunk", "torch.zeros.grad.chunk", "grad.size", "torch.zeros.clamp_min_().log_", "torch.zeros.clamp_min_().log_", "index.size", "grad.size", "torch.zeros.clamp_min_", "torch.zeros.clamp_min_"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.prepare", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.forward"], ["", "", "def", "forward_backward", "(", "self", ",", "label", ",", "features", ",", "optimizer", ")", ":", "\n", "        ", "total_label", ",", "norm_weight", "=", "self", ".", "prepare", "(", "label", ",", "optimizer", ")", "\n", "total_features", "=", "torch", ".", "zeros", "(", "\n", "size", "=", "[", "self", ".", "batch_size", "*", "self", ".", "world_size", ",", "self", ".", "embedding_size", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "dist", ".", "all_gather", "(", "list", "(", "total_features", ".", "chunk", "(", "self", ".", "world_size", ",", "dim", "=", "0", ")", ")", ",", "features", ".", "data", ")", "\n", "total_features", ".", "requires_grad", "=", "True", "\n", "\n", "logits", "=", "self", ".", "forward", "(", "total_features", ",", "norm_weight", ")", "\n", "logits", "=", "self", ".", "margin_softmax", "(", "logits", ",", "total_label", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "max_fc", "=", "torch", ".", "max", "(", "logits", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "dist", ".", "all_reduce", "(", "max_fc", ",", "dist", ".", "ReduceOp", ".", "MAX", ")", "\n", "\n", "# calculate exp(logits) and all-reduce", "\n", "logits_exp", "=", "torch", ".", "exp", "(", "logits", "-", "max_fc", ")", "\n", "logits_sum_exp", "=", "logits_exp", ".", "sum", "(", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "dist", ".", "all_reduce", "(", "logits_sum_exp", ",", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "\n", "# calculate prob", "\n", "logits_exp", ".", "div_", "(", "logits_sum_exp", ")", "\n", "\n", "# get one-hot", "\n", "grad", "=", "logits_exp", "\n", "index", "=", "torch", ".", "where", "(", "total_label", "!=", "-", "1", ")", "[", "0", "]", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "size", "=", "[", "index", ".", "size", "(", ")", "[", "0", "]", ",", "grad", ".", "size", "(", ")", "[", "1", "]", "]", ",", "device", "=", "grad", ".", "device", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "total_label", "[", "index", ",", "None", "]", ",", "1", ")", "\n", "\n", "# calculate loss", "\n", "loss", "=", "torch", ".", "zeros", "(", "grad", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "device", "=", "grad", ".", "device", ")", "\n", "loss", "[", "index", "]", "=", "grad", "[", "index", "]", ".", "gather", "(", "1", ",", "total_label", "[", "index", ",", "None", "]", ")", "\n", "dist", ".", "all_reduce", "(", "loss", ",", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "loss_v", "=", "loss", ".", "clamp_min_", "(", "1e-30", ")", ".", "log_", "(", ")", ".", "mean", "(", ")", "*", "(", "-", "1", ")", "\n", "\n", "# calculate grad", "\n", "grad", "[", "index", "]", "-=", "one_hot", "\n", "grad", ".", "div_", "(", "self", ".", "batch_size", "*", "self", ".", "world_size", ")", "\n", "\n", "", "logits", ".", "backward", "(", "grad", ")", "\n", "if", "total_features", ".", "grad", "is", "not", "None", ":", "\n", "            ", "total_features", ".", "grad", ".", "detach_", "(", ")", "\n", "", "x_grad", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "features", ",", "requires_grad", "=", "True", ")", "\n", "# x_grad: torch.Tensor = torch.zeros_like(features) remove", "\n", "#x_grad.mul_(self.world_size) #remove", "\n", "\n", "# feature gradient all-reduce", "\n", "dist", ".", "reduce_scatter", "(", "x_grad", ",", "list", "(", "total_features", ".", "grad", ".", "chunk", "(", "self", ".", "world_size", ",", "dim", "=", "0", ")", ")", ")", "\n", "x_grad", "=", "x_grad", "*", "self", ".", "world_size", "#add", "\n", "# backward backbone", "\n", "return", "x_grad", ",", "loss_v", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.train.main": [[26, 132], ["torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.get_rank", "torch.get_world_size", "logging.getLogger", "utils.utils_logging.init_logging", "dataset.MXFaceDataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "dataset.DataLoaderX", "mx.mixnet_m().to.parameters", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "mx.mixnet_m().to.train", "partial_fc.PartialFC", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "int", "utils.utils_callbacks.CallBackVerification", "utils.utils_callbacks.CallBackLogging", "utils.utils_callbacks.CallBackModelCheckpoint", "utils.utils_logging.AverageMeter", "range", "torch.destroy_process_group", "os.makedirs", "time.sleep", "torch.broadcast", "eval", "logging.info", "utils.utils_amp.MaxClipGradScaler", "torch.utils.data.distributed.DistributedSampler.set_epoch", "enumerate", "utils.utils_callbacks.CallBackModelCheckpoint.", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "os.path.exists", "os.path.join", "mx.mixnet_m().to.load_state_dict", "torch.normalize", "partial_fc.PartialFC.forward_backward", "torch.optim.SGD.step", "partial_fc.PartialFC.update", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "utils.utils_logging.AverageMeter.update", "utils.utils_callbacks.CallBackLogging.", "utils.utils_callbacks.CallBackVerification.", "backbones.mixnet_s().to", "backbones.mixnet_m().to", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "logging.info", "mx.mixnet_m().to.", "F.normalize.backward", "grad_scaler.unscale_", "torch.nn.utils.clip_grad_norm_", "grad_scaler.step", "grad_scaler.update", "F.normalize.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.SGD.step", "eval", "str", "mx.mixnet_m().to.parameters", "partial_fc.PartialFC.parameters", "len", "grad_scaler.scale", "mx.mixnet_m().to.parameters", "mx.mixnet_m().to.parameters", "backbones.mixnet_s", "backbones.mixnet_m", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.init_logging", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.forward_backward", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.AverageMeter.update", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.AverageMeter.update", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.AverageMeter.update", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_amp.MaxClipGradScaler.scale", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.mixnet_s", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.mixnet_m"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "local_rank", "=", "args", ".", "local_rank", "\n", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output", ")", "and", "rank", "is", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output", ")", "\n", "", "else", ":", "\n", "        ", "time", ".", "sleep", "(", "2", ")", "\n", "\n", "", "log_root", "=", "logging", ".", "getLogger", "(", ")", "\n", "init_logging", "(", "log_root", ",", "rank", ",", "cfg", ".", "output", ",", "logfile", "=", "\"training.log\"", ")", "\n", "trainset", "=", "MXFaceDataset", "(", "root_dir", "=", "cfg", ".", "rec", ",", "local_rank", "=", "local_rank", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "trainset", ",", "shuffle", "=", "True", ")", "\n", "train_loader", "=", "DataLoaderX", "(", "\n", "local_rank", "=", "local_rank", ",", "dataset", "=", "trainset", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "dropout", "=", "0.4", "if", "cfg", ".", "dataset", "is", "\"webface\"", "else", "0", "\n", "\n", "if", "(", "\"resnet\"", "in", "cfg", ".", "net_name", ")", ":", "\n", "        ", "backbone", "=", "eval", "(", "\"backbones.{}\"", ".", "format", "(", "cfg", ".", "net_name", ")", ")", "(", "False", ",", "dropout", "=", "dropout", ",", "fp16", "=", "cfg", ".", "fp16", ")", ".", "to", "(", "local_rank", ")", "\n", "", "elif", "(", "cfg", ".", "net_name", "==", "\"mixfacenet\"", ")", ":", "\n", "     ", "if", "(", "cfg", ".", "net_size", "==", "\"s\"", ")", ":", "\n", "        ", "backbone", "=", "mx", ".", "mixnet_s", "(", "embedding_size", "=", "cfg", ".", "embedding_size", ",", "width_scale", "=", "cfg", ".", "scale", ",", "gdw_size", "=", "cfg", ".", "gdw_size", ",", "shuffle", "=", "cfg", ".", "shuffle", ")", ".", "to", "(", "local_rank", ")", "\n", "", "else", ":", "\n", "        ", "backbone", "=", "mx", ".", "mixnet_m", "(", "embedding_size", "=", "cfg", ".", "embedding_size", ",", "width_scale", "=", "cfg", ".", "scale", ",", "gdw_size", "=", "cfg", ".", "gdw_size", ",", "shuffle", "=", "cfg", ".", "shuffle", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "        ", "try", ":", "\n", "            ", "backbone_pth", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "output", ",", "str", "(", "cfg", ".", "global_step", ")", "+", "\"backbone.pth\"", ")", "\n", "backbone", ".", "load_state_dict", "(", "torch", ".", "load", "(", "backbone_pth", ",", "map_location", "=", "torch", ".", "device", "(", "local_rank", ")", ")", ")", "\n", "if", "rank", "is", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"backbone resume successfully!\"", ")", "\n", "", "", "except", "(", "FileNotFoundError", ",", "KeyError", ",", "IndexError", ",", "RuntimeError", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"resume fail, backbone init successfully!\"", ")", "\n", "\n", "", "", "for", "ps", "in", "backbone", ".", "parameters", "(", ")", ":", "\n", "        ", "dist", ".", "broadcast", "(", "ps", ",", "0", ")", "\n", "", "backbone", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "module", "=", "backbone", ",", "broadcast_buffers", "=", "False", ",", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "backbone", ".", "train", "(", ")", "\n", "\n", "margin_softmax", "=", "eval", "(", "\"losses.{}\"", ".", "format", "(", "args", ".", "loss", ")", ")", "(", "cfg", ".", "s", ",", "cfg", ".", "m", ")", "\n", "module_partial_fc", "=", "PartialFC", "(", "\n", "rank", "=", "rank", ",", "local_rank", "=", "local_rank", ",", "world_size", "=", "world_size", ",", "resume", "=", "args", ".", "resume", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "margin_softmax", "=", "margin_softmax", ",", "num_classes", "=", "cfg", ".", "num_classes", ",", "\n", "sample_rate", "=", "cfg", ".", "sample_rate", ",", "embedding_size", "=", "cfg", ".", "embedding_size", ",", "prefix", "=", "cfg", ".", "output", ",", "global_step", "=", "cfg", ".", "global_step", ")", "\n", "opt_backbone", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "[", "{", "'params'", ":", "backbone", ".", "parameters", "(", ")", "}", "]", ",", "\n", "lr", "=", "cfg", ".", "lr", "/", "512", "*", "cfg", ".", "batch_size", "*", "world_size", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "cfg", ".", "weight_decay", ")", "\n", "\n", "opt_pfc", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "[", "{", "'params'", ":", "module_partial_fc", ".", "parameters", "(", ")", "}", "]", ",", "\n", "lr", "=", "cfg", ".", "lr", "/", "512", "*", "cfg", ".", "batch_size", "*", "world_size", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "cfg", ".", "weight_decay", ")", "\n", "\n", "scheduler_backbone", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", "=", "opt_backbone", ",", "lr_lambda", "=", "cfg", ".", "lr_func", ")", "\n", "scheduler_pfc", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", "=", "opt_pfc", ",", "lr_lambda", "=", "cfg", ".", "lr_func", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "total_step", "=", "int", "(", "len", "(", "trainset", ")", "/", "cfg", ".", "batch_size", "/", "world_size", "*", "cfg", ".", "num_epoch", ")", "\n", "if", "rank", "is", "0", ":", "logging", ".", "info", "(", "\"Total Step is: %d\"", "%", "total_step", ")", "\n", "\n", "callback_verification", "=", "CallBackVerification", "(", "5686", ",", "rank", ",", "cfg", ".", "val_targets", ",", "cfg", ".", "rec", ")", "\n", "callback_logging", "=", "CallBackLogging", "(", "50", ",", "rank", ",", "total_step", ",", "cfg", ".", "batch_size", ",", "world_size", ",", "None", ")", "\n", "callback_checkpoint", "=", "CallBackModelCheckpoint", "(", "rank", ",", "cfg", ".", "output", ")", "\n", "\n", "loss", "=", "AverageMeter", "(", ")", "\n", "global_step", "=", "0", "\n", "grad_scaler", "=", "MaxClipGradScaler", "(", "cfg", ".", "batch_size", ",", "128", "*", "cfg", ".", "batch_size", ",", "growth_interval", "=", "100", ")", "if", "cfg", ".", "fp16", "else", "None", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "cfg", ".", "num_epoch", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "for", "step", ",", "(", "img", ",", "label", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "global_step", "+=", "1", "\n", "features", "=", "F", ".", "normalize", "(", "backbone", "(", "img", ")", ")", "\n", "x_grad", ",", "loss_v", "=", "module_partial_fc", ".", "forward_backward", "(", "label", ",", "features", ",", "opt_pfc", ")", "\n", "\n", "if", "cfg", ".", "fp16", ":", "\n", "                ", "features", ".", "backward", "(", "grad_scaler", ".", "scale", "(", "x_grad", ")", ")", "\n", "grad_scaler", ".", "unscale_", "(", "opt_backbone", ")", "\n", "clip_grad_norm_", "(", "backbone", ".", "parameters", "(", ")", ",", "max_norm", "=", "5", ",", "norm_type", "=", "2", ")", "\n", "grad_scaler", ".", "step", "(", "opt_backbone", ")", "\n", "grad_scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "features", ".", "backward", "(", "x_grad", ")", "\n", "clip_grad_norm_", "(", "backbone", ".", "parameters", "(", ")", ",", "max_norm", "=", "5", ",", "norm_type", "=", "2", ")", "\n", "opt_backbone", ".", "step", "(", ")", "\n", "\n", "", "opt_pfc", ".", "step", "(", ")", "\n", "module_partial_fc", ".", "update", "(", ")", "\n", "opt_backbone", ".", "zero_grad", "(", ")", "\n", "opt_pfc", ".", "zero_grad", "(", ")", "\n", "loss", ".", "update", "(", "loss_v", ",", "1", ")", "\n", "callback_logging", "(", "global_step", ",", "loss", ",", "epoch", ",", "cfg", ".", "fp16", ",", "grad_scaler", ")", "\n", "callback_verification", "(", "global_step", ",", "backbone", ")", "\n", "", "callback_checkpoint", "(", "global_step", ",", "backbone", ",", "module_partial_fc", ")", "\n", "scheduler_backbone", ".", "step", "(", ")", "\n", "scheduler_pfc", ".", "step", "(", ")", "\n", "", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.BackgroundGenerator.__init__": [[14, 21], ["threading.Thread.__init__", "queue.Queue", "dataset.BackgroundGenerator.start"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "local_rank", ",", "max_prefetch", "=", "6", ")", ":", "\n", "        ", "super", "(", "BackgroundGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "queue", "=", "Queue", ".", "Queue", "(", "max_prefetch", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "daemon", "=", "True", "\n", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.BackgroundGenerator.run": [[22, 27], ["torch.cuda.set_device", "dataset.BackgroundGenerator.queue.put", "dataset.BackgroundGenerator.queue.put"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "local_rank", ")", "\n", "for", "item", "in", "self", ".", "generator", ":", "\n", "            ", "self", ".", "queue", ".", "put", "(", "item", ")", "\n", "", "self", ".", "queue", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.BackgroundGenerator.next": [[28, 33], ["dataset.BackgroundGenerator.queue.get"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_amp._MultiDeviceReplicator.get"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "next_item", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "if", "next_item", "is", "None", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "return", "next_item", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.BackgroundGenerator.__next__": [[34, 36], ["dataset.BackgroundGenerator.next"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.BackgroundGenerator.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.BackgroundGenerator.__iter__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.DataLoaderX.__init__": [[42, 46], ["torch.utils.data.DataLoader.__init__", "torch.cuda.Stream"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "local_rank", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DataLoaderX", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", "local_rank", ")", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.DataLoaderX.__iter__": [[47, 52], ["torch.utils.data.DataLoader.__iter__", "dataset.BackgroundGenerator", "dataset.DataLoaderX.preload"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.DataLoaderX.__iter__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.DataLoaderX.preload"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "=", "super", "(", "DataLoaderX", ",", "self", ")", ".", "__iter__", "(", ")", "\n", "self", ".", "iter", "=", "BackgroundGenerator", "(", "self", ".", "iter", ",", "self", ".", "local_rank", ")", "\n", "self", ".", "preload", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.DataLoaderX.preload": [[53, 61], ["next", "torch.cuda.stream", "range", "len", "dataset.DataLoaderX.batch[].to"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.BackgroundGenerator.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch", "=", "next", "(", "self", ".", "iter", ",", "None", ")", "\n", "if", "self", ".", "batch", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "len", "(", "self", ".", "batch", ")", ")", ":", "\n", "                ", "self", ".", "batch", "[", "k", "]", "=", "self", ".", "batch", "[", "k", "]", ".", "to", "(", "device", "=", "self", ".", "local_rank", ",", "\n", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.DataLoaderX.__next__": [[62, 69], ["torch.cuda.current_stream().wait_stream", "dataset.DataLoaderX.preload", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.DataLoaderX.preload"], ["", "", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "batch", "=", "self", ".", "batch", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "self", ".", "preload", "(", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.MXFaceDataset.__init__": [[72, 92], ["torch.utils.data.Dataset.__init__", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "mxnet.recordio.MXIndexedRecordIO", "dataset.MXFaceDataset.imgrec.read_idx", "mxnet.recordio.unpack", "numpy.array", "numpy.array", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "int", "int", "range", "list", "int"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "local_rank", ")", ":", "\n", "        ", "super", "(", "MXFaceDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "path_imgrec", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'train.rec'", ")", "\n", "path_imgidx", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'train.idx'", ")", "\n", "self", ".", "imgrec", "=", "mx", ".", "recordio", ".", "MXIndexedRecordIO", "(", "path_imgidx", ",", "path_imgrec", ",", "'r'", ")", "\n", "s", "=", "self", ".", "imgrec", ".", "read_idx", "(", "0", ")", "\n", "header", ",", "_", "=", "mx", ".", "recordio", ".", "unpack", "(", "s", ")", "\n", "if", "header", ".", "flag", ">", "0", ":", "\n", "            ", "self", ".", "header0", "=", "(", "int", "(", "header", ".", "label", "[", "0", "]", ")", ",", "int", "(", "header", ".", "label", "[", "1", "]", ")", ")", "\n", "self", ".", "imgidx", "=", "np", ".", "array", "(", "range", "(", "1", ",", "int", "(", "header", ".", "label", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "imgidx", "=", "np", ".", "array", "(", "list", "(", "self", ".", "imgrec", ".", "keys", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.MXFaceDataset.__getitem__": [[93, 105], ["dataset.MXFaceDataset.imgrec.read_idx", "mxnet.recordio.unpack", "torch.tensor", "mxnet.image.imdecode().asnumpy", "isinstance", "dataset.MXFaceDataset.transform", "mxnet.image.imdecode"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "idx", "=", "self", ".", "imgidx", "[", "index", "]", "\n", "s", "=", "self", ".", "imgrec", ".", "read_idx", "(", "idx", ")", "\n", "header", ",", "img", "=", "mx", ".", "recordio", ".", "unpack", "(", "s", ")", "\n", "label", "=", "header", ".", "label", "\n", "if", "not", "isinstance", "(", "label", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "label", "=", "label", "[", "0", "]", "\n", "", "label", "=", "torch", ".", "tensor", "(", "label", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "sample", "=", "mx", ".", "image", ".", "imdecode", "(", "img", ")", ".", "asnumpy", "(", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.MXFaceDataset.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgidx", ")", "\n", "", "", "class", "FaceDatasetFolder", "(", "Dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.FaceDatasetFolder.__init__": [[109, 120], ["torch.utils.data.Dataset.__init__", "torchvision.transforms.Compose", "dataset.FaceDatasetFolder.scan", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.FaceDatasetFolder.scan"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "local_rank", ")", ":", "\n", "        ", "super", "(", "FaceDatasetFolder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "imgidx", ",", "self", ".", "labels", "=", "self", ".", "scan", "(", "root_dir", ")", "\n", "", "def", "scan", "(", "self", ",", "root", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.FaceDatasetFolder.scan": [[120, 133], ["os.listdir", "os.listdir.sort", "os.listdir", "os.path.join", "imgidex.append", "labels.append", "os.path.join"], "methods", ["None"], ["", "def", "scan", "(", "self", ",", "root", ")", ":", "\n", "        ", "imgidex", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "lb", "=", "-", "1", "\n", "list_dir", "=", "os", ".", "listdir", "(", "root", ")", "\n", "list_dir", ".", "sort", "(", ")", "\n", "for", "l", "in", "list_dir", ":", "\n", "            ", "images", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "l", ")", ")", "\n", "lb", "+=", "1", "\n", "for", "img", "in", "images", ":", "\n", "                ", "imgidex", ".", "append", "(", "os", ".", "path", ".", "join", "(", "l", ",", "img", ")", ")", "\n", "labels", ".", "append", "(", "lb", ")", "\n", "", "", "return", "imgidex", ",", "labels", "\n", "", "def", "readImage", "(", "self", ",", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.FaceDatasetFolder.readImage": [[133, 135], ["cv2.imread", "os.path.join"], "methods", ["None"], ["", "def", "readImage", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.FaceDatasetFolder.__getitem__": [[136, 146], ["dataset.FaceDatasetFolder.readImage", "torch.tensor", "cv2.cvtColor", "dataset.FaceDatasetFolder.transform"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.FaceDatasetFolder.readImage"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgidx", "[", "index", "]", "\n", "img", "=", "self", ".", "readImage", "(", "path", ")", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "sample", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.dataset.FaceDatasetFolder.__len__": [[147, 149], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgidx", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.losses.CosFace.__init__": [[10, 14], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s", "=", "64.0", ",", "m", "=", "0.40", ")", ":", "\n", "        ", "super", "(", "CosFace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.losses.CosFace.forward": [[15, 22], ["torch.zeros", "torch.zeros.scatter_", "torch.where", "index.size", "cosine.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cosine", ",", "label", ")", ":", "\n", "        ", "index", "=", "torch", ".", "where", "(", "label", "!=", "-", "1", ")", "[", "0", "]", "\n", "m_hot", "=", "torch", ".", "zeros", "(", "index", ".", "size", "(", ")", "[", "0", "]", ",", "cosine", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "cosine", ".", "device", ")", "\n", "m_hot", ".", "scatter_", "(", "1", ",", "label", "[", "index", ",", "None", "]", ",", "self", ".", "m", ")", "\n", "cosine", "[", "index", "]", "-=", "m_hot", "\n", "ret", "=", "cosine", "*", "self", ".", "s", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.losses.Softmax.__init__": [[24, 28], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s", "=", "64.0", ",", "m", "=", "0.40", ")", ":", "\n", "        ", "super", "(", "Softmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "", "def", "forward", "(", "self", ",", "cosine", ",", "label", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.losses.Softmax.forward": [[28, 31], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cosine", ",", "label", ")", ":", "\n", "        ", "ret", "=", "cosine", "*", "self", ".", "s", "\n", "return", "ret", "\n", "", "", "class", "ArcFace", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.losses.ArcFace.__init__": [[32, 36], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s", "=", "64.0", ",", "m", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "ArcFace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.losses.ArcFace.forward": [[37, 45], ["torch.zeros", "torch.zeros.scatter_", "cosine.acos_", "cosine.cos_().mul_", "torch.where", "index.size", "cosine.size", "cosine.cos_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cosine", ":", "torch", ".", "Tensor", ",", "label", ")", ":", "\n", "        ", "index", "=", "torch", ".", "where", "(", "label", "!=", "-", "1", ")", "[", "0", "]", "\n", "m_hot", "=", "torch", ".", "zeros", "(", "index", ".", "size", "(", ")", "[", "0", "]", ",", "cosine", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "cosine", ".", "device", ")", "\n", "m_hot", ".", "scatter_", "(", "1", ",", "label", "[", "index", ",", "None", "]", ",", "self", ".", "m", ")", "\n", "cosine", ".", "acos_", "(", ")", "\n", "cosine", "[", "index", "]", "+=", "m_hot", "\n", "cosine", ".", "cos_", "(", ")", ".", "mul_", "(", "self", ".", "s", ")", "\n", "return", "cosine", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.losses.CombineLoss.__init__": [[48, 55], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s", "=", "64.0", ",", "m", "=", "1.0", ")", ":", "#m2 Arcface, m3CosineFace", "\n", "        ", "super", "(", "CombineLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "s", "\n", "\n", "self", ".", "m1", "=", "m", "\n", "self", ".", "m2", "=", "0.3", "\n", "self", ".", "m3", "=", "0.2", "\n", "", "def", "forward", "(", "self", ",", "cosine", ":", "torch", ".", "Tensor", ",", "label", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.losses.CombineLoss.forward": [[55, 67], ["torch.zeros", "torch.zeros.scatter_", "torch.zeros", "torch.zeros.scatter_", "cosine.acos_", "cosine.cos_", "cosine.mul_", "torch.where", "index.size", "cosine.size", "index.size", "cosine.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cosine", ":", "torch", ".", "Tensor", ",", "label", ")", ":", "\n", "        ", "index", "=", "torch", ".", "where", "(", "label", "!=", "-", "1", ")", "[", "0", "]", "\n", "m_hot", "=", "torch", ".", "zeros", "(", "index", ".", "size", "(", ")", "[", "0", "]", ",", "cosine", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "cosine", ".", "device", ")", "\n", "m_hot", ".", "scatter_", "(", "1", ",", "label", "[", "index", ",", "None", "]", ",", "self", ".", "m2", ")", "\n", "m_hot3", "=", "torch", ".", "zeros", "(", "index", ".", "size", "(", ")", "[", "0", "]", ",", "cosine", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "cosine", ".", "device", ")", "\n", "m_hot3", ".", "scatter_", "(", "1", ",", "label", "[", "index", ",", "None", "]", ",", "self", ".", "m3", ")", "\n", "cosine", ".", "acos_", "(", ")", "\n", "cosine", "[", "index", "]", "+=", "m_hot", "\n", "cosine", ".", "cos_", "(", ")", "\n", "cosine", "[", "index", "]", "-=", "m_hot3", "\n", "cosine", ".", "mul_", "(", "self", ".", "s", ")", "\n", "return", "cosine", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.align_trans.estimate_norm": [[25, 57], ["skimage.transform.SimilarityTransform", "numpy.insert", "float", "numpy.expand_dims", "numpy.arange", "trans.SimilarityTransform.estimate", "numpy.dot", "numpy.sum", "numpy.ones", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["def", "estimate_norm", "(", "lmk", ",", "image_size", "=", "112", ",", "createEvalDB", "=", "False", ")", ":", "\n", "    ", "\"\"\" estimate the transformation matrix\n    :param lmk: detected landmarks \n    :param image_size: resulting image size (default=112)\n    :param createEvalDB: (boolean) crop an evaluation or training dataset\n    :return: transformation matrix M and index\n    \"\"\"", "\n", "assert", "lmk", ".", "shape", "==", "(", "5", ",", "2", ")", "\n", "assert", "image_size", "==", "112", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "lmk_tran", "=", "np", ".", "insert", "(", "lmk", ",", "2", ",", "values", "=", "np", ".", "ones", "(", "5", ")", ",", "axis", "=", "1", ")", "\n", "min_M", "=", "[", "]", "\n", "min_index", "=", "[", "]", "\n", "min_error", "=", "float", "(", "'inf'", ")", "\n", "if", "createEvalDB", ":", "\n", "        ", "src", "=", "arcface_eval_ref_points", "\n", "", "else", ":", "\n", "        ", "src", "=", "arcface_ref_points", "\n", "", "src", "=", "np", ".", "expand_dims", "(", "src", ",", "axis", "=", "0", ")", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "src", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tform", ".", "estimate", "(", "lmk", ",", "src", "[", "i", "]", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "results", "=", "np", ".", "dot", "(", "M", ",", "lmk_tran", ".", "T", ")", "\n", "results", "=", "results", ".", "T", "\n", "error", "=", "np", ".", "sum", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "results", "-", "src", "[", "i", "]", ")", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "#         print(error)", "\n", "if", "error", "<", "min_error", ":", "\n", "            ", "min_error", "=", "error", "\n", "min_M", "=", "M", "\n", "min_index", "=", "i", "\n", "", "", "return", "min_M", ",", "min_index", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.align_trans.norm_crop": [[59, 69], ["align_trans.estimate_norm", "cv2.warpAffine"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.align_trans.estimate_norm"], ["", "def", "norm_crop", "(", "img", ",", "landmark", ",", "image_size", "=", "112", ",", "createEvalDB", "=", "False", ")", ":", "\n", "    ", "\"\"\" transforms image to match the landmarks with reference landmarks\n    :param landmark: detected landmarks \n    :param image_size: resulting image size (default=112)\n    :param createEvalDB: (boolean) crop an evaluation or training dataset\n    :return: transformed image\n    \"\"\"", "\n", "M", ",", "pose_index", "=", "estimate_norm", "(", "landmark", ",", "image_size", "=", "image_size", ",", "createEvalDB", "=", "createEvalDB", ")", "\n", "warped", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "image_size", ",", "image_size", ")", ",", "borderValue", "=", "0.0", ")", "\n", "return", "warped", "\n", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_amp._MultiDeviceReplicator.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_tensor", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "assert", "master_tensor", ".", "is_cuda", "\n", "self", ".", "master", "=", "master_tensor", "\n", "self", ".", "_per_device_tensors", ":", "Dict", "[", "torch", ".", "device", ",", "torch", ".", "Tensor", "]", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_amp._MultiDeviceReplicator.get": [[18, 24], ["utils_amp._MultiDeviceReplicator._per_device_tensors.get", "utils_amp._MultiDeviceReplicator.master.to"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_amp._MultiDeviceReplicator.get"], ["", "def", "get", "(", "self", ",", "device", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "retval", "=", "self", ".", "_per_device_tensors", ".", "get", "(", "device", ",", "None", ")", "\n", "if", "retval", "is", "None", ":", "\n", "            ", "retval", "=", "self", ".", "master", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ",", "copy", "=", "True", ")", "\n", "self", ".", "_per_device_tensors", "[", "device", "]", "=", "retval", "\n", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_amp.MaxClipGradScaler.__init__": [[27, 30], ["torch.cuda.amp.GradScaler.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_scale", ",", "max_scale", ":", "float", ",", "growth_interval", "=", "100", ")", ":", "\n", "        ", "GradScaler", ".", "__init__", "(", "self", ",", "init_scale", "=", "init_scale", ",", "growth_interval", "=", "growth_interval", ")", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_amp.MaxClipGradScaler.scale_clip": [[31, 39], ["utils_amp.MaxClipGradScaler.get_scale", "utils_amp.MaxClipGradScaler.set_growth_factor", "utils_amp.MaxClipGradScaler.get_scale", "utils_amp.MaxClipGradScaler.set_growth_factor", "utils_amp.MaxClipGradScaler.get_scale", "utils_amp.MaxClipGradScaler._scale.fill_", "utils_amp.MaxClipGradScaler.set_growth_factor"], "methods", ["None"], ["", "def", "scale_clip", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_scale", "(", ")", "==", "self", ".", "max_scale", ":", "\n", "            ", "self", ".", "set_growth_factor", "(", "1", ")", "\n", "", "elif", "self", ".", "get_scale", "(", ")", "<", "self", ".", "max_scale", ":", "\n", "            ", "self", ".", "set_growth_factor", "(", "2", ")", "\n", "", "elif", "self", ".", "get_scale", "(", ")", ">", "self", ".", "max_scale", ":", "\n", "            ", "self", ".", "_scale", ".", "fill_", "(", "self", ".", "max_scale", ")", "\n", "self", ".", "set_growth_factor", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_amp.MaxClipGradScaler.scale": [[40, 82], ["utils_amp.MaxClipGradScaler.scale_clip", "isinstance", "utils_amp.MaxClipGradScaler.scale.apply_scale"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_amp.MaxClipGradScaler.scale_clip"], ["", "", "def", "scale", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"\n        Multiplies ('scales') a tensor or list of tensors by the scale factor.\n\n        Returns scaled outputs.  If this instance of :class:`GradScaler` is not enabled, outputs are returned\n        unmodified.\n\n        Arguments:\n            outputs (Tensor or iterable of Tensors):  Outputs to scale.\n        \"\"\"", "\n", "if", "not", "self", ".", "_enabled", ":", "\n", "            ", "return", "outputs", "\n", "", "self", ".", "scale_clip", "(", ")", "\n", "# Short-circuit for the common case.", "\n", "if", "isinstance", "(", "outputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "outputs", ".", "is_cuda", "\n", "if", "self", ".", "_scale", "is", "None", ":", "\n", "                ", "self", ".", "_lazy_init_scale_growth_tracker", "(", "outputs", ".", "device", ")", "\n", "", "assert", "self", ".", "_scale", "is", "not", "None", "\n", "return", "outputs", "*", "self", ".", "_scale", ".", "to", "(", "device", "=", "outputs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# Invoke the more complex machinery only if we're treating multiple outputs.", "\n", "", "stash", ":", "List", "[", "_MultiDeviceReplicator", "]", "=", "[", "]", "# holds a reference that can be overwritten by apply_scale", "\n", "\n", "def", "apply_scale", "(", "val", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "assert", "val", ".", "is_cuda", "\n", "if", "len", "(", "stash", ")", "==", "0", ":", "\n", "                    ", "if", "self", ".", "_scale", "is", "None", ":", "\n", "                        ", "self", ".", "_lazy_init_scale_growth_tracker", "(", "val", ".", "device", ")", "\n", "", "assert", "self", ".", "_scale", "is", "not", "None", "\n", "stash", ".", "append", "(", "_MultiDeviceReplicator", "(", "self", ".", "_scale", ")", ")", "\n", "", "return", "val", "*", "stash", "[", "0", "]", ".", "get", "(", "val", ".", "device", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "                ", "iterable", "=", "map", "(", "apply_scale", ",", "val", ")", "\n", "if", "isinstance", "(", "val", ",", "list", ")", "or", "isinstance", "(", "val", ",", "tuple", ")", ":", "\n", "                    ", "return", "type", "(", "val", ")", "(", "iterable", ")", "\n", "", "else", ":", "\n", "                    ", "return", "iterable", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"outputs must be a Tensor or an iterable of Tensors\"", ")", "\n", "", "", "return", "apply_scale", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.plot.read_template_pair_list": [[19, 25], ["pairs[].astype", "pairs[].astype", "pairs[].astype", "pandas.read_csv"], "function", ["None"], ["def", "read_template_pair_list", "(", "path", ")", ":", "\n", "    ", "pairs", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "t1", "=", "pairs", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "t2", "=", "pairs", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "label", "=", "pairs", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "t1", ",", "t2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.AverageMeter.__init__": [[10, 16], ["utils_logging.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "None", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "count", "=", "None", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.AverageMeter.reset": [[17, 22], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.AverageMeter.update": [[23, 28], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.init_logging": [[30, 44], ["log_root.setLevel", "logging.Formatter", "logging.FileHandler", "logging.StreamHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "log_root.addHandler", "log_root.addHandler", "log_root.info", "os.path.join"], "function", ["None"], ["", "", "def", "init_logging", "(", "log_root", ",", "rank", ",", "models_root", ",", "logfile", ")", ":", "\n", "\n", "    ", "if", "rank", "is", "0", ":", "\n", "        ", "if", "(", "not", "logfile", ")", ":", "\n", "            ", "logfile", "=", "\"training.log\"", "\n", "", "log_root", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"Training: %(asctime)s-%(message)s\"", ")", "\n", "handler_file", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "models_root", ",", "logfile", ")", ")", "\n", "handler_stream", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "handler_file", ".", "setFormatter", "(", "formatter", ")", "\n", "handler_stream", ".", "setFormatter", "(", "formatter", ")", "\n", "log_root", ".", "addHandler", "(", "handler_file", ")", "\n", "log_root", ".", "addHandler", "(", "handler_stream", ")", "\n", "log_root", ".", "info", "(", "'rank_id: %d'", "%", "rank", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackVerification.__init__": [[14, 23], ["len", "utils_callbacks.CallBackVerification.init_dataset"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackVerification.init_dataset"], ["    ", "def", "__init__", "(", "self", ",", "frequent", ",", "rank", ",", "val_targets", ",", "rec_prefix", ",", "image_size", "=", "(", "112", ",", "112", ")", ")", ":", "\n", "        ", "self", ".", "frequent", ":", "int", "=", "frequent", "\n", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "highest_acc", ":", "float", "=", "0.0", "\n", "self", ".", "highest_acc_list", ":", "List", "[", "float", "]", "=", "[", "0.0", "]", "*", "len", "(", "val_targets", ")", "\n", "self", ".", "ver_list", ":", "List", "[", "object", "]", "=", "[", "]", "\n", "self", ".", "ver_name_list", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "init_dataset", "(", "val_targets", "=", "val_targets", ",", "data_dir", "=", "rec_prefix", ",", "image_size", "=", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackVerification.ver_test": [[24, 36], ["range", "len", "eval.verification.test", "logging.info", "logging.info", "logging.info", "results.append"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.test"], ["", "", "def", "ver_test", "(", "self", ",", "backbone", ":", "torch", ".", "nn", ".", "Module", ",", "global_step", ":", "int", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "ver_list", ")", ")", ":", "\n", "            ", "acc1", ",", "std1", ",", "acc2", ",", "std2", ",", "xnorm", ",", "embeddings_list", "=", "verification", ".", "test", "(", "\n", "self", ".", "ver_list", "[", "i", "]", ",", "backbone", ",", "10", ",", "10", ")", "\n", "logging", ".", "info", "(", "'[%s][%d]XNorm: %f'", "%", "(", "self", ".", "ver_name_list", "[", "i", "]", ",", "global_step", ",", "xnorm", ")", ")", "\n", "logging", ".", "info", "(", "'[%s][%d]Accuracy-Flip: %1.5f+-%1.5f'", "%", "(", "self", ".", "ver_name_list", "[", "i", "]", ",", "global_step", ",", "acc2", ",", "std2", ")", ")", "\n", "if", "acc2", ">", "self", ".", "highest_acc_list", "[", "i", "]", ":", "\n", "                ", "self", ".", "highest_acc_list", "[", "i", "]", "=", "acc2", "\n", "", "logging", ".", "info", "(", "\n", "'[%s][%d]Accuracy-Highest: %1.5f'", "%", "(", "self", ".", "ver_name_list", "[", "i", "]", ",", "global_step", ",", "self", ".", "highest_acc_list", "[", "i", "]", ")", ")", "\n", "results", ".", "append", "(", "acc2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackVerification.init_dataset": [[37, 44], ["os.path.join", "os.path.exists", "eval.verification.load_bin", "utils_callbacks.CallBackVerification.ver_list.append", "utils_callbacks.CallBackVerification.ver_name_list.append"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.load_bin"], ["", "", "def", "init_dataset", "(", "self", ",", "val_targets", ",", "data_dir", ",", "image_size", ")", ":", "\n", "        ", "for", "name", "in", "val_targets", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", "+", "\".bin\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "data_set", "=", "verification", ".", "load_bin", "(", "path", ",", "image_size", ")", "\n", "self", ".", "ver_list", ".", "append", "(", "data_set", ")", "\n", "self", ".", "ver_name_list", ".", "append", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackVerification.__call__": [[45, 50], ["backbone.eval", "utils_callbacks.CallBackVerification.ver_test", "backbone.train"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackVerification.ver_test"], ["", "", "", "def", "__call__", "(", "self", ",", "num_update", ",", "backbone", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "if", "self", ".", "rank", "is", "0", "and", "num_update", ">", "0", "and", "num_update", "%", "self", ".", "frequent", "==", "0", ":", "\n", "            ", "backbone", ".", "eval", "(", ")", "\n", "self", ".", "ver_test", "(", "backbone", ",", "num_update", ")", "\n", "backbone", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackLogging.__init__": [[53, 64], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frequent", ",", "rank", ",", "total_step", ",", "batch_size", ",", "world_size", ",", "writer", "=", "None", ")", ":", "\n", "        ", "self", ".", "frequent", ":", "int", "=", "frequent", "\n", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "time_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "total_step", ":", "int", "=", "total_step", "\n", "self", ".", "batch_size", ":", "int", "=", "batch_size", "\n", "self", ".", "world_size", ":", "int", "=", "world_size", "\n", "self", ".", "writer", "=", "writer", "\n", "\n", "self", ".", "init", "=", "False", "\n", "self", ".", "tic", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackLogging.__call__": [[65, 95], ["logging.info", "loss.reset", "time.time", "time.time", "utils_callbacks.CallBackLogging.writer.add_scalar", "utils_callbacks.CallBackLogging.writer.add_scalar", "float", "time.time", "time.time", "grad_scaler.get_scale"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_logging.AverageMeter.reset"], ["", "def", "__call__", "(", "self", ",", "global_step", ",", "loss", ":", "AverageMeter", ",", "epoch", ":", "int", ",", "fp16", ":", "bool", ",", "grad_scaler", ":", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", ")", ":", "\n", "        ", "if", "self", ".", "rank", "is", "0", "and", "global_step", ">", "0", "and", "global_step", "%", "self", ".", "frequent", "==", "0", ":", "\n", "            ", "if", "self", ".", "init", ":", "\n", "                ", "try", ":", "\n", "                    ", "speed", ":", "float", "=", "self", ".", "frequent", "*", "self", ".", "batch_size", "/", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tic", ")", "\n", "speed_total", "=", "speed", "*", "self", ".", "world_size", "\n", "", "except", "ZeroDivisionError", ":", "\n", "                    ", "speed_total", "=", "float", "(", "'inf'", ")", "\n", "\n", "", "time_now", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "time_start", ")", "/", "3600", "\n", "time_total", "=", "time_now", "/", "(", "(", "global_step", "+", "1", ")", "/", "self", ".", "total_step", ")", "\n", "time_for_end", "=", "time_total", "-", "time_now", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'time_for_end'", ",", "time_for_end", ",", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ".", "avg", ",", "global_step", ")", "\n", "", "if", "fp16", ":", "\n", "                    ", "msg", "=", "\"Speed %.2f samples/sec   Loss %.4f   Epoch: %d   Global Step: %d   \"", "\"Fp16 Grad Scale: %2.f   Required: %1.f hours\"", "%", "(", "\n", "speed_total", ",", "loss", ".", "avg", ",", "epoch", ",", "global_step", ",", "grad_scaler", ".", "get_scale", "(", ")", ",", "time_for_end", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "msg", "=", "\"Speed %.2f samples/sec   Loss %.4f   Epoch: %d   Global Step: %d   Required: %1.f hours\"", "%", "(", "\n", "speed_total", ",", "loss", ".", "avg", ",", "epoch", ",", "global_step", ",", "time_for_end", "\n", ")", "\n", "", "logging", ".", "info", "(", "msg", ")", "\n", "loss", ".", "reset", "(", ")", "\n", "self", ".", "tic", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "init", "=", "True", "\n", "self", ".", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackModelCheckpoint.__init__": [[98, 101], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rank", ",", "output", "=", "\"./\"", ")", ":", "\n", "        ", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "output", ":", "str", "=", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.utils.utils_callbacks.CallBackModelCheckpoint.__call__": [[102, 107], ["torch.save", "partial_fc.save_params", "backbone.module.state_dict", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.None.partial_fc.PartialFC.save_params"], ["", "def", "__call__", "(", "self", ",", "global_step", ",", "backbone", ":", "torch", ".", "nn", ".", "Module", ",", "partial_fc", ":", "PartialFC", "=", "None", ")", ":", "\n", "        ", "if", "global_step", ">", "100", "and", "self", ".", "rank", "is", "0", ":", "\n", "            ", "torch", ".", "save", "(", "backbone", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "output", ",", "str", "(", "global_step", ")", "+", "\"backbone.pth\"", ")", ")", "\n", "", "if", "global_step", ">", "100", "and", "partial_fc", "is", "not", "None", ":", "\n", "            ", "partial_fc", ".", "save_params", "(", "global_step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.__init__": [[42, 46], ["sklearn.model_selection.KFold"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_splits", "=", "2", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "n_splits", "=", "n_splits", "\n", "if", "self", ".", "n_splits", ">", "1", ":", "\n", "            ", "self", ".", "k_fold", "=", "KFold", "(", "n_splits", "=", "n_splits", ",", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split": [[47, 52], ["verification.LFold.k_fold.split"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split"], ["", "", "def", "split", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "self", ".", "n_splits", ">", "1", ":", "\n", "            ", "return", "self", ".", "k_fold", ".", "split", "(", "indices", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "(", "indices", ",", "indices", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_roc": [[54, 107], ["min", "len", "verification.LFold", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "len", "numpy.subtract", "numpy.sum", "verification.LFold.split", "numpy.zeros", "enumerate", "numpy.argmax", "enumerate", "verification.calculate_accuracy", "numpy.square", "print", "numpy.concatenate", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "sklearn.decomposition.PCA.transform", "sklearn.decomposition.PCA.transform", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.subtract", "numpy.sum", "verification.calculate_accuracy", "verification.calculate_accuracy", "numpy.square"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_accuracy", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_accuracy", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_accuracy"], ["", "", "", "def", "calculate_roc", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "actual_issame", ",", "\n", "nrof_folds", "=", "10", ",", "\n", "pca", "=", "0", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "LFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "tprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "fprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "accuracy", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ")", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "if", "pca", "==", "0", ":", "\n", "        ", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "\n", "", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "        ", "if", "pca", ">", "0", ":", "\n", "            ", "print", "(", "'doing pca on'", ",", "fold_idx", ")", "\n", "embed1_train", "=", "embeddings1", "[", "train_set", "]", "\n", "embed2_train", "=", "embeddings2", "[", "train_set", "]", "\n", "_embed_train", "=", "np", ".", "concatenate", "(", "(", "embed1_train", ",", "embed2_train", ")", ",", "axis", "=", "0", ")", "\n", "pca_model", "=", "PCA", "(", "n_components", "=", "pca", ")", "\n", "pca_model", ".", "fit", "(", "_embed_train", ")", "\n", "embed1", "=", "pca_model", ".", "transform", "(", "embeddings1", ")", "\n", "embed2", "=", "pca_model", ".", "transform", "(", "embeddings2", ")", "\n", "embed1", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embed1", ")", "\n", "embed2", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embed2", ")", "\n", "diff", "=", "np", ".", "subtract", "(", "embed1", ",", "embed2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "\n", "# Find the best threshold for the fold", "\n", "", "acc_train", "=", "np", ".", "zeros", "(", "(", "nrof_thresholds", ")", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "_", ",", "acc_train", "[", "threshold_idx", "]", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "best_threshold_index", "=", "np", ".", "argmax", "(", "acc_train", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "tprs", "[", "fold_idx", ",", "threshold_idx", "]", ",", "fprs", "[", "fold_idx", ",", "threshold_idx", "]", ",", "_", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "", "_", ",", "_", ",", "accuracy", "[", "fold_idx", "]", "=", "calculate_accuracy", "(", "\n", "thresholds", "[", "best_threshold_index", "]", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "tpr", "=", "np", ".", "mean", "(", "tprs", ",", "0", ")", "\n", "fpr", "=", "np", ".", "mean", "(", "fprs", ",", "0", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_accuracy": [[109, 122], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "float", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "float", "float", "float", "float"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "\n", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "actual_issame", ")", ")", "\n", "\n", "tpr", "=", "0", "if", "(", "tp", "+", "fn", "==", "0", ")", "else", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", ")", "\n", "fpr", "=", "0", "if", "(", "fp", "+", "tn", "==", "0", ")", "else", "float", "(", "fp", ")", "/", "float", "(", "fp", "+", "tn", ")", "\n", "acc", "=", "float", "(", "tp", "+", "tn", ")", "/", "dist", ".", "size", "\n", "return", "tpr", ",", "fpr", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_val": [[124, 163], ["min", "len", "verification.LFold", "numpy.zeros", "numpy.zeros", "numpy.subtract", "numpy.sum", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "numpy.std", "len", "numpy.square", "verification.LFold.split", "numpy.zeros", "enumerate", "verification.calculate_val_far", "verification.calculate_val_far", "numpy.max", "scipy.interpolate.interp1d", "interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_val_far", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_val_far"], ["", "def", "calculate_val", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "actual_issame", ",", "\n", "far_target", ",", "\n", "nrof_folds", "=", "10", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "LFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "val", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "far", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "\n", "# Find the threshold that gives FAR = far_target", "\n", "        ", "far_train", "=", "np", ".", "zeros", "(", "nrof_thresholds", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "far_train", "[", "threshold_idx", "]", "=", "calculate_val_far", "(", "\n", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "if", "np", ".", "max", "(", "far_train", ")", ">=", "far_target", ":", "\n", "            ", "f", "=", "interpolate", ".", "interp1d", "(", "far_train", ",", "thresholds", ",", "kind", "=", "'slinear'", ")", "\n", "threshold", "=", "f", "(", "far_target", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "\n", "", "val", "[", "fold_idx", "]", ",", "far", "[", "fold_idx", "]", "=", "calculate_val_far", "(", "\n", "threshold", ",", "dist", "[", "test_set", "]", ",", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "val_mean", "=", "np", ".", "mean", "(", "val", ")", "\n", "far_mean", "=", "np", ".", "mean", "(", "far", ")", "\n", "val_std", "=", "np", ".", "std", "(", "val", ")", "\n", "return", "val_mean", ",", "val_std", ",", "far_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_val_far": [[165, 177], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_not", "float", "float", "float", "float", "numpy.logical_not"], "function", ["None"], ["", "def", "calculate_val_far", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "true_accept", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "false_accept", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "n_same", "=", "np", ".", "sum", "(", "actual_issame", ")", "\n", "n_diff", "=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "actual_issame", ")", ")", "\n", "# print(true_accept, false_accept)", "\n", "# print(n_same, n_diff)", "\n", "val", "=", "float", "(", "true_accept", ")", "/", "float", "(", "n_same", ")", "\n", "far", "=", "float", "(", "false_accept", ")", "/", "float", "(", "n_diff", ")", "\n", "return", "val", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.evaluate": [[179, 198], ["numpy.arange", "verification.calculate_roc", "numpy.arange", "verification.calculate_val", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_roc", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.calculate_val"], ["", "def", "evaluate", "(", "embeddings", ",", "actual_issame", ",", "nrof_folds", "=", "10", ",", "pca", "=", "0", ")", ":", "\n", "# Calculate evaluation metrics", "\n", "    ", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.01", ")", "\n", "embeddings1", "=", "embeddings", "[", "0", ":", ":", "2", "]", "\n", "embeddings2", "=", "embeddings", "[", "1", ":", ":", "2", "]", "\n", "tpr", ",", "fpr", ",", "accuracy", "=", "calculate_roc", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "\n", "nrof_folds", "=", "nrof_folds", ",", "\n", "pca", "=", "pca", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.001", ")", "\n", "val", ",", "val_std", ",", "far", "=", "calculate_val", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "\n", "1e-3", ",", "\n", "nrof_folds", "=", "nrof_folds", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.load_bin": [[199, 225], ["torch.no_grad", "range", "print", "torch.empty", "data_list.append", "mxnet.image.imdecode", "mxnet.ndarray.transpose", "open", "pickle.load", "len", "mxnet.image.resize_short", "torch.from_numpy", "print", "open", "pickle.load", "mxnet.ndarray.flip", "mx.ndarray.flip.asnumpy", "len"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "load_bin", "(", "path", ",", "image_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "bins", ",", "issame_list", "=", "pickle", ".", "load", "(", "f", ")", "# py2", "\n", "", "", "except", "UnicodeDecodeError", "as", "e", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "bins", ",", "issame_list", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "# py3", "\n", "", "", "data_list", "=", "[", "]", "\n", "for", "flip", "in", "[", "0", ",", "1", "]", ":", "\n", "        ", "data", "=", "torch", ".", "empty", "(", "(", "len", "(", "issame_list", ")", "*", "2", ",", "3", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", "\n", "data_list", ".", "append", "(", "data", ")", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "issame_list", ")", "*", "2", ")", ":", "\n", "        ", "_bin", "=", "bins", "[", "idx", "]", "\n", "img", "=", "mx", ".", "image", ".", "imdecode", "(", "_bin", ")", "\n", "if", "img", ".", "shape", "[", "1", "]", "!=", "image_size", "[", "0", "]", ":", "\n", "            ", "img", "=", "mx", ".", "image", ".", "resize_short", "(", "img", ",", "image_size", "[", "0", "]", ")", "\n", "", "img", "=", "nd", ".", "transpose", "(", "img", ",", "axes", "=", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "for", "flip", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "if", "flip", "==", "1", ":", "\n", "                ", "img", "=", "mx", ".", "ndarray", ".", "flip", "(", "data", "=", "img", ",", "axis", "=", "2", ")", "\n", "", "data_list", "[", "flip", "]", "[", "idx", "]", "[", ":", "]", "=", "torch", ".", "from_numpy", "(", "img", ".", "asnumpy", "(", ")", ")", "\n", "", "if", "idx", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'loading bin'", ",", "idx", ")", "\n", "", "", "print", "(", "data_list", "[", "0", "]", ".", "shape", ")", "\n", "return", "data_list", ",", "issame_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.test": [[226, 275], ["torch.no_grad", "print", "range", "embeddings_list[].copy", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "print", "print", "verification.evaluate", "len", "embeddings_list.append", "range", "numpy.mean", "numpy.std", "min", "datetime.datetime.now", "backbone", "net_out.detach().cpu().numpy", "datetime.datetime.now", "diff.total_seconds", "numpy.linalg.norm", "numpy.zeros", "net_out.detach().cpu", "net_out.detach"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.evaluate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "data_set", ",", "backbone", ",", "batch_size", ",", "nfolds", "=", "10", ")", ":", "\n", "    ", "print", "(", "'testing verification..'", ")", "\n", "data_list", "=", "data_set", "[", "0", "]", "\n", "issame_list", "=", "data_set", "[", "1", "]", "\n", "embeddings_list", "=", "[", "]", "\n", "time_consumed", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "data_list", ")", ")", ":", "\n", "        ", "data", "=", "data_list", "[", "i", "]", "\n", "embeddings", "=", "None", "\n", "ba", "=", "0", "\n", "while", "ba", "<", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "bb", "=", "min", "(", "ba", "+", "batch_size", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "count", "=", "bb", "-", "ba", "\n", "_data", "=", "data", "[", "bb", "-", "batch_size", ":", "bb", "]", "\n", "time0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "img", "=", "(", "(", "_data", "/", "255", ")", "-", "0.5", ")", "/", "0.5", "\n", "net_out", ":", "torch", ".", "Tensor", "=", "backbone", "(", "img", ")", "\n", "_embeddings", "=", "net_out", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "time_now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "diff", "=", "time_now", "-", "time0", "\n", "time_consumed", "+=", "diff", ".", "total_seconds", "(", ")", "\n", "if", "embeddings", "is", "None", ":", "\n", "                ", "embeddings", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "_embeddings", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "embeddings", "[", "ba", ":", "bb", ",", ":", "]", "=", "_embeddings", "[", "(", "batch_size", "-", "count", ")", ":", ",", ":", "]", "\n", "ba", "=", "bb", "\n", "", "embeddings_list", ".", "append", "(", "embeddings", ")", "\n", "\n", "", "_xnorm", "=", "0.0", "\n", "_xnorm_cnt", "=", "0", "\n", "for", "embed", "in", "embeddings_list", ":", "\n", "        ", "for", "i", "in", "range", "(", "embed", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "_em", "=", "embed", "[", "i", "]", "\n", "_norm", "=", "np", ".", "linalg", ".", "norm", "(", "_em", ")", "\n", "_xnorm", "+=", "_norm", "\n", "_xnorm_cnt", "+=", "1", "\n", "", "", "_xnorm", "/=", "_xnorm_cnt", "\n", "\n", "embeddings", "=", "embeddings_list", "[", "0", "]", ".", "copy", "(", ")", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "acc1", "=", "0.0", "\n", "std1", "=", "0.0", "\n", "embeddings", "=", "embeddings_list", "[", "0", "]", "+", "embeddings_list", "[", "1", "]", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "print", "(", "embeddings", ".", "shape", ")", "\n", "print", "(", "'infer time'", ",", "time_consumed", ")", "\n", "_", ",", "_", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "=", "evaluate", "(", "embeddings", ",", "issame_list", ",", "nrof_folds", "=", "nfolds", ")", "\n", "acc2", ",", "std2", "=", "np", ".", "mean", "(", "accuracy", ")", ",", "np", ".", "std", "(", "accuracy", ")", "\n", "return", "acc1", ",", "std1", ",", "acc2", ",", "std2", ",", "_xnorm", ",", "embeddings_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.dumpR": [[277, 322], ["print", "range", "sklearn.preprocessing.normalize", "numpy.asarray", "os.path.join", "len", "embeddings_list.append", "open", "pickle.dump", "min", "mxnet.ndarray.slice_axis", "datetime.datetime.now", "model.forward", "model.get_outputs", "net_out[].asnumpy", "datetime.datetime.now", "diff.total_seconds", "mxnet.io.DataBatch", "mxnet.io.DataBatch", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.forward"], ["", "def", "dumpR", "(", "data_set", ",", "\n", "backbone", ",", "\n", "batch_size", ",", "\n", "name", "=", "''", ",", "\n", "data_extra", "=", "None", ",", "\n", "label_shape", "=", "None", ")", ":", "\n", "    ", "print", "(", "'dump verification embedding..'", ")", "\n", "data_list", "=", "data_set", "[", "0", "]", "\n", "issame_list", "=", "data_set", "[", "1", "]", "\n", "embeddings_list", "=", "[", "]", "\n", "time_consumed", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "data_list", ")", ")", ":", "\n", "        ", "data", "=", "data_list", "[", "i", "]", "\n", "embeddings", "=", "None", "\n", "ba", "=", "0", "\n", "while", "ba", "<", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "bb", "=", "min", "(", "ba", "+", "batch_size", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "count", "=", "bb", "-", "ba", "\n", "\n", "_data", "=", "nd", ".", "slice_axis", "(", "data", ",", "axis", "=", "0", ",", "begin", "=", "bb", "-", "batch_size", ",", "end", "=", "bb", ")", "\n", "time0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "if", "data_extra", "is", "None", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", ")", ",", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", "_data_extra", ")", ",", "\n", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "model", ".", "forward", "(", "db", ",", "is_train", "=", "False", ")", "\n", "net_out", "=", "model", ".", "get_outputs", "(", ")", "\n", "_embeddings", "=", "net_out", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "time_now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "diff", "=", "time_now", "-", "time0", "\n", "time_consumed", "+=", "diff", ".", "total_seconds", "(", ")", "\n", "if", "embeddings", "is", "None", ":", "\n", "                ", "embeddings", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "_embeddings", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "embeddings", "[", "ba", ":", "bb", ",", ":", "]", "=", "_embeddings", "[", "(", "batch_size", "-", "count", ")", ":", ",", ":", "]", "\n", "ba", "=", "bb", "\n", "", "embeddings_list", ".", "append", "(", "embeddings", ")", "\n", "", "embeddings", "=", "embeddings_list", "[", "0", "]", "+", "embeddings_list", "[", "1", "]", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "actual_issame", "=", "np", ".", "asarray", "(", "issame_list", ")", "\n", "outname", "=", "os", ".", "path", ".", "join", "(", "'temp.bin'", ")", "\n", "with", "open", "(", "outname", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "(", "embeddings", ",", "issame_list", ")", ",", "\n", "f", ",", "\n", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.Identity.__init__": [[12, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.Identity.forward": [[15, 17], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.Identity.__repr__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{name}()'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ")", "\n", "", "", "class", "HSigmoid", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.HSigmoid.forward": [[25, 27], ["torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "relu6", "(", "x", "+", "3.0", ",", "inplace", "=", "True", ")", "/", "6.0", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.Swish.forward": [[33, 35], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "", "class", "HSwish", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.HSwish.__init__": [[44, 47], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "HSwish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.HSwish.forward": [[48, 50], ["torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "F", ".", "relu6", "(", "x", "+", "3.0", ",", "inplace", "=", "self", ".", "inplace", ")", "/", "6.0", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.get_activation_layer": [[52, 91], ["inspect.isfunction", "activation", "isinstance", "isinstance", "torch.ReLU", "torch.PReLU", "torch.ReLU6", "activation.Swish", "activation.HSwish", "torch.Sigmoid", "activation.HSigmoid", "activation.Identity", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_activation_layer", "(", "activation", ",", "param", ")", ":", "\n", "    ", "\"\"\"\n    Create activation layer from string/function.\n\n    Parameters:\n    ----------\n    activation : function, or str, or nn.Module\n        Activation function or name of activation function.\n\n    Returns:\n    -------\n    nn.Module\n        Activation layer.\n    \"\"\"", "\n", "assert", "(", "activation", "is", "not", "None", ")", "\n", "if", "isfunction", "(", "activation", ")", ":", "\n", "        ", "return", "activation", "(", ")", "\n", "", "elif", "isinstance", "(", "activation", ",", "str", ")", ":", "\n", "        ", "if", "activation", "==", "\"relu\"", ":", "\n", "            ", "return", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "\"prelu\"", ":", "\n", "            ", "return", "nn", ".", "PReLU", "(", "param", ")", "\n", "", "elif", "activation", "==", "\"relu6\"", ":", "\n", "            ", "return", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "\"swish\"", ":", "\n", "            ", "return", "Swish", "(", ")", "\n", "", "elif", "activation", "==", "\"hswish\"", ":", "\n", "            ", "return", "HSwish", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "\"sigmoid\"", ":", "\n", "            ", "return", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "activation", "==", "\"hsigmoid\"", ":", "\n", "            ", "return", "HSigmoid", "(", ")", "\n", "", "elif", "activation", "==", "\"identity\"", ":", "\n", "            ", "return", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "(", "isinstance", "(", "activation", ",", "nn", ".", "Module", ")", ")", "\n", "return", "activation", "", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SelectableDense.__init__": [[24, 39], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "common.SelectableDense.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_features", ",", "\n", "out_features", ",", "\n", "bias", "=", "False", ",", "\n", "num_options", "=", "1", ")", ":", "\n", "        ", "super", "(", "SelectableDense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "use_bias", "=", "bias", "\n", "self", ".", "num_options", "=", "num_options", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_options", ",", "out_features", ",", "in_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_options", ",", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"bias\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SelectableDense.forward": [[40, 49], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "x.squeeze.squeeze.unsqueeze", "torch.index_select.bmm", "torch.index_select.bmm", "x.squeeze.squeeze.squeeze", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "indices", ")", ":", "\n", "        ", "weight", "=", "torch", ".", "index_select", "(", "self", ".", "weight", ",", "dim", "=", "0", ",", "index", "=", "indices", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x", "=", "weight", ".", "bmm", "(", "x", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "bias", "=", "torch", ".", "index_select", "(", "self", ".", "bias", ",", "dim", "=", "0", ",", "index", "=", "indices", ")", "\n", "x", "+=", "bias", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SelectableDense.extra_repr": [[50, 53], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"in_features={}, out_features={}, bias={}, num_options={}\"", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "use_bias", ",", "self", ".", "num_options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.DenseBlock.__init__": [[75, 96], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "backbones.activation.get_activation_layer"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.get_activation_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_features", ",", "\n", "out_features", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activate", "=", "(", "activation", "is", "not", "None", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "in_features", ",", "\n", "out_features", "=", "out_features", ",", "\n", "bias", "=", "bias", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "out_features", ",", "\n", "eps", "=", "bn_eps", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "self", ".", "activ", "=", "get_activation_layer", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.DenseBlock.forward": [[97, 104], ["common.DenseBlock.fc", "common.DenseBlock.bn", "common.DenseBlock.activ"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", "class", "ConvBlock1d", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.ConvBlock1d.__init__": [[133, 164], ["torch.nn.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "backbones.activation.get_activation_layer"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.get_activation_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "ConvBlock1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activate", "=", "(", "activation", "is", "not", "None", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "out_channels", ",", "\n", "eps", "=", "bn_eps", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "self", ".", "activ", "=", "get_activation_layer", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.ConvBlock1d.forward": [[165, 172], ["common.ConvBlock1d.conv", "common.ConvBlock1d.bn", "common.ConvBlock1d.activ"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.Hourglass.__init__": [[191, 209], ["torch.nn.Module.__init__", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ",", "\n", "down_seq", ",", "\n", "up_seq", ",", "\n", "skip_seq", ",", "\n", "merge_type", "=", "\"add\"", ",", "\n", "return_first_skip", "=", "False", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "len", "(", "down_seq", ")", "\n", "assert", "(", "merge_type", "in", "[", "\"cat\"", ",", "\"add\"", "]", ")", "\n", "assert", "(", "len", "(", "up_seq", ")", "==", "self", ".", "depth", ")", "\n", "assert", "(", "len", "(", "skip_seq", ")", "in", "(", "self", ".", "depth", ",", "self", ".", "depth", "+", "1", ")", ")", "\n", "self", ".", "merge_type", "=", "merge_type", "\n", "self", ".", "return_first_skip", "=", "return_first_skip", "\n", "self", ".", "extra_skip", "=", "(", "len", "(", "skip_seq", ")", "==", "self", ".", "depth", "+", "1", ")", "\n", "\n", "self", ".", "down_seq", "=", "down_seq", "\n", "self", ".", "up_seq", "=", "up_seq", "\n", "self", ".", "skip_seq", "=", "skip_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.Hourglass._merge": [[210, 217], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_merge", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "y", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "merge_type", "==", "\"cat\"", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "y", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "merge_type", "==", "\"add\"", ":", "\n", "                ", "x", "=", "x", "+", "y", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.Hourglass.forward": [[218, 240], ["common.Hourglass.down_seq._modules.values", "range", "down_module", "down_outs.append", "len", "skip_module", "common.Hourglass._merge", "up_module", "len", "skip_module"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SesquialteralHourglass._merge"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "y", "=", "None", "\n", "down_outs", "=", "[", "x", "]", "\n", "for", "down_module", "in", "self", ".", "down_seq", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "x", "=", "down_module", "(", "x", ")", "\n", "down_outs", ".", "append", "(", "x", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "down_outs", ")", ")", ":", "\n", "            ", "if", "i", "!=", "0", ":", "\n", "                ", "y", "=", "down_outs", "[", "self", ".", "depth", "-", "i", "]", "\n", "skip_module", "=", "self", ".", "skip_seq", "[", "self", ".", "depth", "-", "i", "]", "\n", "y", "=", "skip_module", "(", "y", ")", "\n", "x", "=", "self", ".", "_merge", "(", "x", ",", "y", ")", "\n", "", "if", "i", "!=", "len", "(", "down_outs", ")", "-", "1", ":", "\n", "                ", "if", "(", "i", "==", "0", ")", "and", "self", ".", "extra_skip", ":", "\n", "                    ", "skip_module", "=", "self", ".", "skip_seq", "[", "self", ".", "depth", "]", "\n", "x", "=", "skip_module", "(", "x", ")", "\n", "", "up_module", "=", "self", ".", "up_seq", "[", "self", ".", "depth", "-", "1", "-", "i", "]", "\n", "x", "=", "up_module", "(", "x", ")", "\n", "", "", "if", "self", ".", "return_first_skip", ":", "\n", "            ", "return", "x", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SesquialteralHourglass.__init__": [[261, 282], ["torch.nn.Module.__init__", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ",", "\n", "down1_seq", ",", "\n", "skip1_seq", ",", "\n", "up_seq", ",", "\n", "skip2_seq", ",", "\n", "down2_seq", ",", "\n", "merge_type", "=", "\"cat\"", ")", ":", "\n", "        ", "super", "(", "SesquialteralHourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "len", "(", "down1_seq", ")", "==", "len", "(", "up_seq", ")", ")", "\n", "assert", "(", "len", "(", "down1_seq", ")", "==", "len", "(", "down2_seq", ")", ")", "\n", "assert", "(", "len", "(", "skip1_seq", ")", "==", "len", "(", "skip2_seq", ")", ")", "\n", "assert", "(", "len", "(", "down1_seq", ")", "==", "len", "(", "skip1_seq", ")", "-", "1", ")", "\n", "assert", "(", "merge_type", "in", "[", "\"cat\"", ",", "\"add\"", "]", ")", "\n", "self", ".", "merge_type", "=", "merge_type", "\n", "self", ".", "depth", "=", "len", "(", "down1_seq", ")", "\n", "\n", "self", ".", "down1_seq", "=", "down1_seq", "\n", "self", ".", "skip1_seq", "=", "skip1_seq", "\n", "self", ".", "up_seq", "=", "up_seq", "\n", "self", ".", "skip2_seq", "=", "skip2_seq", "\n", "self", ".", "down2_seq", "=", "down2_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SesquialteralHourglass._merge": [[283, 290], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_merge", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "y", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "merge_type", "==", "\"cat\"", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "y", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "merge_type", "==", "\"add\"", ":", "\n", "                ", "x", "=", "x", "+", "y", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SesquialteralHourglass.forward": [[291, 313], ["range", "range", "range", "skip1_outs.append", "common.SesquialteralHourglass._merge", "skip2_outs.append", "common.SesquialteralHourglass._merge"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SesquialteralHourglass._merge", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SesquialteralHourglass._merge"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "y", "=", "self", ".", "skip1_seq", "[", "0", "]", "(", "x", ")", "\n", "skip1_outs", "=", "[", "y", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "x", "=", "self", ".", "down1_seq", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "self", ".", "skip1_seq", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "skip1_outs", ".", "append", "(", "y", ")", "\n", "", "x", "=", "skip1_outs", "[", "self", ".", "depth", "]", "\n", "y", "=", "self", ".", "skip2_seq", "[", "0", "]", "(", "x", ")", "\n", "skip2_outs", "=", "[", "y", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "x", "=", "self", ".", "up_seq", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "skip1_outs", "[", "self", ".", "depth", "-", "1", "-", "i", "]", "\n", "x", "=", "self", ".", "_merge", "(", "x", ",", "y", ")", "\n", "y", "=", "self", ".", "skip2_seq", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "skip2_outs", ".", "append", "(", "y", ")", "\n", "", "x", "=", "self", ".", "skip2_seq", "[", "self", ".", "depth", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "x", "=", "self", ".", "down2_seq", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "skip2_outs", "[", "self", ".", "depth", "-", "1", "-", "i", "]", "\n", "x", "=", "self", ".", "_merge", "(", "x", ",", "y", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.MultiOutputSequential.__init__": [[328, 336], ["torch.nn.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ",", "\n", "multi_output", "=", "True", ",", "\n", "dual_output", "=", "False", ",", "\n", "return_last", "=", "True", ")", ":", "\n", "        ", "super", "(", "MultiOutputSequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multi_output", "=", "multi_output", "\n", "self", ".", "dual_output", "=", "dual_output", "\n", "self", ".", "return_last", "=", "return_last", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.MultiOutputSequential.forward": [[337, 353], ["common.MultiOutputSequential._modules.values", "module", "hasattr", "outs.append", "hasattr", "outs.extend", "type"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "if", "hasattr", "(", "module", ",", "\"do_output\"", ")", "and", "module", ".", "do_output", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "elif", "hasattr", "(", "module", ",", "\"do_output2\"", ")", "and", "module", ".", "do_output2", ":", "\n", "                ", "assert", "(", "type", "(", "x", ")", "==", "tuple", ")", "\n", "outs", ".", "extend", "(", "x", "[", "1", "]", ")", "\n", "x", "=", "x", "[", "0", "]", "\n", "", "", "if", "self", ".", "multi_output", ":", "\n", "            ", "return", "[", "x", "]", "+", "outs", "if", "self", ".", "return_last", "else", "outs", "\n", "", "elif", "self", ".", "dual_output", ":", "\n", "            ", "return", "x", ",", "outs", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.HeatmapMaxDetBlock.__init__": [[358, 360], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "HeatmapMaxDetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.HeatmapMaxDetBlock.forward": [[361, 382], ["heatmap.view", "heatmap.view.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "int", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "heatmap", "=", "x", "\n", "vector_dim", "=", "2", "\n", "batch", "=", "heatmap", ".", "shape", "[", "0", "]", "\n", "channels", "=", "heatmap", ".", "shape", "[", "1", "]", "\n", "in_size", "=", "x", ".", "shape", "[", "2", ":", "]", "\n", "heatmap_vector", "=", "heatmap", ".", "view", "(", "batch", ",", "channels", ",", "-", "1", ")", "\n", "scores", ",", "indices", "=", "heatmap_vector", ".", "max", "(", "dim", "=", "vector_dim", ",", "keepdims", "=", "True", ")", "\n", "scores_mask", "=", "(", "scores", ">", "0.0", ")", ".", "float", "(", ")", "\n", "pts_x", "=", "(", "indices", "%", "in_size", "[", "1", "]", ")", "*", "scores_mask", "\n", "pts_y", "=", "(", "indices", "//", "in_size", "[", "1", "]", ")", "*", "scores_mask", "\n", "pts", "=", "torch", ".", "cat", "(", "(", "pts_x", ",", "pts_y", ",", "scores", ")", ",", "dim", "=", "vector_dim", ")", "\n", "for", "b", "in", "range", "(", "batch", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "channels", ")", ":", "\n", "                ", "hm", "=", "heatmap", "[", "b", ",", "k", ",", ":", ",", ":", "]", "\n", "px", "=", "int", "(", "pts", "[", "b", ",", "k", ",", "0", "]", ")", "\n", "py", "=", "int", "(", "pts", "[", "b", ",", "k", ",", "1", "]", ")", "\n", "if", "(", "0", "<", "px", "<", "in_size", "[", "1", "]", "-", "1", ")", "and", "(", "0", "<", "py", "<", "in_size", "[", "0", "]", "-", "1", ")", ":", "\n", "                    ", "pts", "[", "b", ",", "k", ",", "0", "]", "+=", "(", "hm", "[", "py", ",", "px", "+", "1", "]", "-", "hm", "[", "py", ",", "px", "-", "1", "]", ")", ".", "sign", "(", ")", "*", "0.25", "\n", "pts", "[", "b", ",", "k", ",", "1", "]", "+=", "(", "hm", "[", "py", "+", "1", ",", "px", "]", "-", "hm", "[", "py", "-", "1", ",", "px", "]", ")", ".", "sign", "(", ")", "*", "0.25", "\n", "", "", "", "return", "pts", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.HeatmapMaxDetBlock.calc_flops": [[383, 389], ["x.numel"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "calc_flops", "(", "x", ")", ":", "\n", "        ", "assert", "(", "x", ".", "shape", "[", "0", "]", "==", "1", ")", "\n", "num_flops", "=", "x", ".", "numel", "(", ")", "+", "26", "*", "x", ".", "shape", "[", "1", "]", "\n", "num_macs", "=", "0", "\n", "return", "num_flops", ",", "num_macs", "\n", "", "", "class", "ParallelConcurent", "(", "nn", ".", "Sequential", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.ParallelConcurent.__init__": [[394, 396], ["torch.nn.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ParallelConcurent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.ParallelConcurent.forward": [[397, 402], ["zip", "common.ParallelConcurent._modules.values", "out.append", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "module", ",", "xi", "in", "zip", "(", "self", ".", "_modules", ".", "values", "(", ")", ",", "x", ")", ":", "\n", "            ", "out", ".", "append", "(", "module", "(", "xi", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.BreakBlock.__init__": [[407, 409], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BreakBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.BreakBlock.forward": [[410, 412], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.BreakBlock.__repr__": [[413, 415], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{name}()'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.PreConvBlock.__init__": [[587, 615], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "return_preact", "=", "False", ",", "\n", "activate", "=", "True", ")", ":", "\n", "        ", "super", "(", "PreConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "return_preact", "=", "return_preact", "\n", "self", ".", "activate", "=", "activate", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "in_channels", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "self", ".", "activ", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.PreConvBlock.forward": [[616, 628], ["common.PreConvBlock.conv", "common.PreConvBlock.bn", "common.PreConvBlock.activ"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "", "if", "self", ".", "return_preact", ":", "\n", "            ", "x_pre_activ", "=", "x", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "return_preact", ":", "\n", "            ", "return", "x", ",", "x_pre_activ", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.AsymConvBlock.__init__": [[744, 781], ["torch.nn.Module.__init__", "backbones.utils.ConvBlock", "backbones.utils.ConvBlock", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "kernel_size", ",", "\n", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "lw_use_bn", "=", "True", ",", "\n", "rw_use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "lw_activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "rw_activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "AsymConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lw_conv", "=", "ConvBlock", "(", "\n", "in_channels", "=", "channels", ",", "\n", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "(", "kernel_size", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "padding", ",", "0", ")", ",", "\n", "dilation", "=", "(", "dilation", ",", "1", ")", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "lw_use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "lw_activation", ")", "\n", "self", ".", "rw_conv", "=", "ConvBlock", "(", "\n", "in_channels", "=", "channels", ",", "\n", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "kernel_size", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "0", ",", "padding", ")", ",", "\n", "dilation", "=", "(", "1", ",", "dilation", ")", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "rw_use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "rw_activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.AsymConvBlock.forward": [[782, 786], ["common.AsymConvBlock.lw_conv", "common.AsymConvBlock.rw_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "lw_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "rw_conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.NormActivation.__init__": [[834, 843], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "backbones.activation.get_activation_layer", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.get_activation_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "NormActivation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "\n", "num_features", "=", "in_channels", ",", "\n", "eps", "=", "bn_eps", ")", "\n", "self", ".", "activ", "=", "get_activation_layer", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.NormActivation.forward": [[844, 848], ["common.NormActivation.bn", "common.NormActivation.activ"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.InterpolationBlock.__init__": [[866, 878], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ",", "\n", "scale_factor", ",", "\n", "out_size", "=", "None", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", "up", "=", "True", ")", ":", "\n", "        ", "super", "(", "InterpolationBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "up", "=", "up", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.InterpolationBlock.forward": [[879, 893], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "common.InterpolationBlock.calc_out_size"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.InterpolationBlock.calc_out_size"], ["", "def", "forward", "(", "self", ",", "x", ",", "size", "=", "None", ")", ":", "\n", "        ", "if", "(", "self", ".", "mode", "==", "\"bilinear\"", ")", "or", "(", "size", "is", "not", "None", ")", ":", "\n", "            ", "out_size", "=", "self", ".", "calc_out_size", "(", "x", ")", "if", "size", "is", "None", "else", "size", "\n", "return", "F", ".", "interpolate", "(", "\n", "input", "=", "x", ",", "\n", "size", "=", "out_size", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "interpolate", "(", "\n", "input", "=", "x", ",", "\n", "scale_factor", "=", "self", ".", "scale_factor", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.InterpolationBlock.calc_out_size": [[894, 901], ["tuple", "tuple"], "methods", ["None"], ["", "", "def", "calc_out_size", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "out_size", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "out_size", "\n", "", "if", "self", ".", "up", ":", "\n", "            ", "return", "tuple", "(", "s", "*", "self", ".", "scale_factor", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "s", "//", "self", ".", "scale_factor", "for", "s", "in", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.InterpolationBlock.__repr__": [[902, 911], ["s.format"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "'{name}(scale_factor={scale_factor}, out_size={out_size}, mode={mode}, align_corners={align_corners}, up={up})'", "# noqa", "\n", "return", "s", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "\n", "scale_factor", "=", "self", ".", "scale_factor", ",", "\n", "out_size", "=", "self", ".", "out_size", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ",", "\n", "up", "=", "self", ".", "up", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.DeconvBlock.__init__": [[1035, 1072], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "backbones.activation.get_activation_layer"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.get_activation_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "ext_padding", "=", "None", ",", "\n", "out_padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "DeconvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activate", "=", "(", "activation", "is", "not", "None", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "use_pad", "=", "(", "ext_padding", "is", "not", "None", ")", "\n", "\n", "if", "self", ".", "use_pad", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", "=", "ext_padding", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "out_padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "\n", "num_features", "=", "out_channels", ",", "\n", "eps", "=", "bn_eps", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "self", ".", "activ", "=", "get_activation_layer", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.DeconvBlock.forward": [[1073, 1082], ["common.DeconvBlock.conv", "common.DeconvBlock.pad", "common.DeconvBlock.bn", "common.DeconvBlock.activ"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_pad", ":", "\n", "            ", "x", "=", "self", ".", "pad", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SEBlock.__init__": [[1180, 1214], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "backbones.activation.get_activation_layer", "backbones.activation.get_activation_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "backbones.utils.conv1x1", "torch.nn.Linear", "torch.nn.Linear", "backbones.utils.conv1x1", "torch.nn.Linear", "torch.nn.Linear", "round_channels", "float"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.get_activation_layer", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.get_activation_layer", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv1x1", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv1x1", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.round_channels"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "reduction", "=", "16", ",", "\n", "mid_channels", "=", "None", ",", "\n", "round_mid", "=", "False", ",", "\n", "use_conv", "=", "True", ",", "\n", "mid_activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "out_activation", "=", "(", "lambda", ":", "nn", ".", "Sigmoid", "(", ")", ")", ")", ":", "\n", "        ", "super", "(", "SEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_conv", "=", "use_conv", "\n", "if", "mid_channels", "is", "None", ":", "\n", "            ", "mid_channels", "=", "channels", "//", "reduction", "if", "not", "round_mid", "else", "round_channels", "(", "float", "(", "channels", ")", "/", "reduction", ")", "\n", "\n", "", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "1", ")", "\n", "if", "use_conv", ":", "\n", "            ", "self", ".", "conv1", "=", "conv1x1", "(", "\n", "in_channels", "=", "channels", ",", "\n", "out_channels", "=", "mid_channels", ",", "\n", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "channels", ",", "\n", "out_features", "=", "mid_channels", ")", "\n", "", "self", ".", "activ", "=", "get_activation_layer", "(", "mid_activation", ",", "mid_channels", ")", "\n", "if", "use_conv", ":", "\n", "            ", "self", ".", "conv2", "=", "conv1x1", "(", "\n", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "channels", ",", "\n", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "mid_channels", ",", "\n", "out_features", "=", "channels", ")", "\n", "", "self", ".", "sigmoid", "=", "get_activation_layer", "(", "out_activation", ",", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.SEBlock.forward": [[1215, 1227], ["common.SEBlock.pool", "common.SEBlock.activ", "common.SEBlock.sigmoid", "w.unsqueeze().unsqueeze.unsqueeze().unsqueeze.view", "common.SEBlock.conv1", "common.SEBlock.fc1", "common.SEBlock.conv2", "common.SEBlock.fc2", "w.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "x.size", "w.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "pool", "(", "x", ")", "\n", "if", "not", "self", ".", "use_conv", ":", "\n", "            ", "w", "=", "w", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "w", "=", "self", ".", "conv1", "(", "w", ")", "if", "self", ".", "use_conv", "else", "self", ".", "fc1", "(", "w", ")", "\n", "w", "=", "self", ".", "activ", "(", "w", ")", "\n", "w", "=", "self", ".", "conv2", "(", "w", ")", "if", "self", ".", "use_conv", "else", "self", ".", "fc2", "(", "w", ")", "\n", "w", "=", "self", ".", "sigmoid", "(", "w", ")", "\n", "if", "not", "self", ".", "use_conv", ":", "\n", "            ", "w", "=", "w", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "", "x", "=", "x", "*", "w", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.ChannelShuffle.__init__": [[1247, 1255], ["torch.nn.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "groups", ")", ":", "\n", "        ", "super", "(", "ChannelShuffle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# assert (channels % groups == 0)", "\n", "if", "channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'channels must be divisible by groups'", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.ChannelShuffle.forward": [[1256, 1258], ["common.channel_shuffle"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.channel_shuffle"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "channel_shuffle", "(", "x", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.ChannelShuffle.__repr__": [[1259, 1264], ["s.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "\"{name}(groups={groups})\"", "\n", "return", "s", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "\n", "groups", "=", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.conv5x5_block": [[418, 466], ["backbones.utils.ConvBlock", "torch.nn.ReLU"], "function", ["None"], ["", "", "def", "conv5x5_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    5x5 version of the standard convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int, or tuple/list of 2 int, or tuple/list of 4 int, default 2\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "ConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.conv7x7_block": [[468, 516], ["backbones.utils.ConvBlock", "torch.nn.ReLU"], "function", ["None"], ["", "def", "conv7x7_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "3", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    7x7 version of the standard convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    padding : int, or tuple/list of 2 int, or tuple/list of 4 int, default 1\n        Strides of the convolution.\n    padding : int or tuple/list of 2 int, default 3\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "ConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.dwconv5x5_block": [[517, 557], ["backbones.utils.dwconv_block", "torch.nn.ReLU"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.dwconv_block"], ["", "def", "dwconv5x5_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    5x5 depthwise version of the standard convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int, or tuple/list of 2 int, or tuple/list of 4 int, default 2\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "dwconv_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.pre_conv1x1_block": [[630, 667], ["common.PreConvBlock"], "function", ["None"], ["", "", "", "def", "pre_conv1x1_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "return_preact", "=", "False", ",", "\n", "activate", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    1x1 version of the pre-activated convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    return_preact : bool, default False\n        Whether return pre-activation.\n    activate : bool, default True\n        Whether activate the convolution block.\n    \"\"\"", "\n", "return", "PreConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "return_preact", "=", "return_preact", ",", "\n", "activate", "=", "activate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.pre_conv3x3_block": [[669, 713], ["common.PreConvBlock"], "function", ["None"], ["", "def", "pre_conv3x3_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "return_preact", "=", "False", ",", "\n", "activate", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    3x3 version of the pre-activated convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int or tuple/list of 2 int, default 1\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    return_preact : bool, default False\n        Whether return pre-activation.\n    activate : bool, default True\n        Whether activate the convolution block.\n    \"\"\"", "\n", "return", "PreConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "return_preact", "=", "return_preact", ",", "\n", "activate", "=", "activate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.asym_conv3x3_block": [[788, 820], ["common.AsymConvBlock"], "function", ["None"], ["", "", "def", "asym_conv3x3_block", "(", "padding", "=", "1", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    3x3 asymmetric separable convolution block.\n\n    Parameters:\n    ----------\n    channels : int\n        Number of input/output channels.\n    padding : int, default 1\n        Padding value for convolution layer.\n    dilation : int, default 1\n        Dilation value for convolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    lw_use_bn : bool, default True\n        Whether to use BatchNorm layer (leftwise convolution block).\n    rw_use_bn : bool, default True\n        Whether to use BatchNorm layer (rightwise convolution block).\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    lw_activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function after the leftwise convolution block.\n    rw_activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function after the rightwise convolution block.\n    \"\"\"", "\n", "return", "AsymConvBlock", "(", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "padding", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.dwconv3x3_block": [[912, 952], ["backbones.utils.dwconv_block", "torch.nn.ReLU"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.dwconv_block"], ["", "", "def", "dwconv3x3_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    3x3 depthwise version of the standard convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int, or tuple/list of 2 int, or tuple/list of 4 int, default 1\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "dwconv_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.dwsconv3x3_block": [[953, 999], ["backbones.utils.DwsConvBlock", "torch.nn.ReLU", "torch.nn.ReLU"], "function", ["None"], ["", "def", "dwsconv3x3_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "dw_activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "pw_activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    3x3 depthwise separable version of the standard convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int, or tuple/list of 2 int, or tuple/list of 4 int, default 1\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    dw_activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function after the depthwise convolution block.\n    pw_activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function after the pointwise convolution block.\n    \"\"\"", "\n", "return", "DwsConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "dw_activation", "=", "dw_activation", ",", "\n", "pw_activation", "=", "pw_activation", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.deconv3x3_block": [[1084, 1122], ["common.DeconvBlock"], "function", ["None"], ["", "", "def", "deconv3x3_block", "(", "padding", "=", "1", ",", "\n", "out_padding", "=", "1", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    3x3 version of the deconvolution block with batch normalization and activation.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int\n        Strides of the deconvolution.\n    padding : int or tuple/list of 2 int, default 1\n        Padding value for deconvolution layer.\n    ext_padding : tuple/list of 4 int, default None\n        Extra padding value for deconvolution layer.\n    out_padding : int or tuple/list of 2 int, default 1\n        Output padding value for deconvolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for deconvolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "DeconvBlock", "(", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "padding", ",", "\n", "out_padding", "=", "out_padding", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.channel_shuffle": [[1125, 1152], ["x.view.size", "x.view.view", "torch.transpose().contiguous", "torch.transpose().contiguous", "x.view.view", "torch.transpose", "torch.transpose"], "function", ["None"], ["", "def", "channel_shuffle", "(", "x", ",", "\n", "groups", ")", ":", "\n", "    ", "\"\"\"\n    Channel shuffle operation from 'ShuffleNet: An Extremely Efficient Convolutional Neural Network for Mobile Devices,'\n    https://arxiv.org/abs/1707.01083.\n\n    Parameters:\n    ----------\n    x : Tensor\n        Input tensor.\n    groups : int\n        Number of groups.\n\n    Returns:\n    -------\n    Tensor\n        Resulted tensor.\n    \"\"\"", "\n", "batch", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "\n", "# assert (channels % groups == 0)", "\n", "channels_per_group", "=", "channels", "//", "groups", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "groups", ",", "channels_per_group", ",", "height", ",", "width", ")", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "channels", ",", "height", ",", "width", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.calc_flops": [[1228, 1236], ["x.numel", "x.numel"], "function", ["None"], ["", "", "def", "calc_flops", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "(", "x", ".", "shape", "[", "0", "]", "==", "1", ")", "\n", "if", "self", ".", "mode", "==", "\"bilinear\"", ":", "\n", "            ", "num_flops", "=", "9", "*", "x", ".", "numel", "(", ")", "\n", "", "else", ":", "\n", "            ", "num_flops", "=", "4", "*", "x", ".", "numel", "(", ")", "\n", "", "num_macs", "=", "0", "\n", "return", "num_flops", ",", "num_macs", "\n", "", "class", "ChannelShuffle", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixConv.__init__": [[49, 82], ["torch.Module.__init__", "len", "mixnetm.MixConv.split_channels", "mixnetm.MixConv.split_channels", "enumerate", "isinstance", "isinstance", "mixnetm.MixConv.add_module", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixConv.split_channels", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixConv.split_channels"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "axis", "=", "1", ")", ":", "\n", "        ", "super", "(", "MixConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "kernel_size", "if", "isinstance", "(", "kernel_size", ",", "list", ")", "else", "[", "kernel_size", "]", "\n", "padding", "=", "padding", "if", "isinstance", "(", "padding", ",", "list", ")", "else", "[", "padding", "]", "\n", "kernel_count", "=", "len", "(", "kernel_size", ")", "\n", "self", ".", "splitted_in_channels", "=", "self", ".", "split_channels", "(", "in_channels", ",", "kernel_count", ")", "\n", "splitted_out_channels", "=", "self", ".", "split_channels", "(", "out_channels", ",", "kernel_count", ")", "\n", "\n", "for", "i", ",", "kernel_size_i", "in", "enumerate", "(", "kernel_size", ")", ":", "\n", "            ", "in_channels_i", "=", "self", ".", "splitted_in_channels", "[", "i", "]", "\n", "out_channels_i", "=", "splitted_out_channels", "[", "i", "]", "\n", "padding_i", "=", "padding", "[", "i", "]", "\n", "self", ".", "add_module", "(", "\n", "name", "=", "str", "(", "i", ")", ",", "\n", "module", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels_i", ",", "\n", "out_channels", "=", "out_channels_i", ",", "\n", "kernel_size", "=", "kernel_size_i", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding_i", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "(", "out_channels_i", "if", "out_channels", "==", "groups", "else", "groups", ")", ",", "\n", "bias", "=", "bias", ")", ")", "\n", "", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixConv.forward": [[83, 88], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv_i", "tuple", "zip", "mixnetm.MixConv._modules.values"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.eval.verification.LFold.split"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "splitted_in_channels", ",", "dim", "=", "self", ".", "axis", ")", "\n", "out", "=", "[", "conv_i", "(", "x_i", ")", "for", "x_i", ",", "conv_i", "in", "zip", "(", "xx", ",", "self", ".", "_modules", ".", "values", "(", ")", ")", "]", "\n", "x", "=", "torch", ".", "cat", "(", "tuple", "(", "out", ")", ",", "dim", "=", "self", ".", "axis", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixConv.split_channels": [[89, 94], ["sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "split_channels", "(", "channels", ",", "kernel_count", ")", ":", "\n", "        ", "splitted_channels", "=", "[", "channels", "//", "kernel_count", "]", "*", "kernel_count", "\n", "splitted_channels", "[", "0", "]", "+=", "channels", "-", "sum", "(", "splitted_channels", ")", "\n", "return", "splitted_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixConvBlock.__init__": [[127, 158], ["torch.Module.__init__", "mixnetm.MixConv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "backbones.activation.get_activation_layer"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.get_activation_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "MixConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activate", "=", "(", "activation", "is", "not", "None", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "\n", "self", ".", "conv", "=", "MixConv", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "\n", "num_features", "=", "out_channels", ",", "\n", "eps", "=", "bn_eps", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "self", ".", "activ", "=", "get_activation_layer", "(", "activation", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixConvBlock.forward": [[159, 167], ["mixnetm.MixConvBlock.conv", "mixnetm.MixConvBlock.bn", "mixnetm.MixConvBlock.activ"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixUnit.__init__": [[242, 305], ["torch.Module.__init__", "backbones.common.dwconv3x3_block", "mixnetm.MixConvBlock", "backbones.common.SEBlock", "backbones.utils.conv1x1_block", "mixnetm.mixconv1x1_block", "backbones.utils.conv1x1_block", "mixnetm.mixconv1x1_block", "range", "range"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.common.dwconv3x3_block", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv1x1_block", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.mixconv1x1_block", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv1x1_block", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.mixconv1x1_block"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", ",", "\n", "exp_kernel_count", ",", "\n", "conv1_kernel_count", ",", "\n", "conv2_kernel_count", ",", "\n", "exp_factor", ",", "\n", "se_factor", ",", "\n", "activation", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", "MixUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "exp_factor", ">=", "1", ")", "\n", "assert", "(", "se_factor", ">=", "0", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "residual", "=", "(", "in_channels", "==", "out_channels", ")", "and", "(", "stride", "==", "1", ")", "\n", "self", ".", "use_se", "=", "se_factor", ">", "0", "\n", "mid_channels", "=", "exp_factor", "*", "in_channels", "\n", "self", ".", "use_exp_conv", "=", "exp_factor", ">", "1", "\n", "self", ".", "conv1_kernel_count", "=", "conv1_kernel_count", "\n", "if", "self", ".", "use_exp_conv", ":", "\n", "            ", "if", "exp_kernel_count", "==", "1", ":", "\n", "                ", "self", ".", "exp_conv", "=", "conv1x1_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "mid_channels", ",", "\n", "activation", "=", "activation", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "exp_conv", "=", "mixconv1x1_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "mid_channels", ",", "\n", "kernel_count", "=", "exp_kernel_count", ",", "\n", "activation", "=", "activation", ")", "\n", "", "", "if", "conv1_kernel_count", "==", "1", ":", "\n", "            ", "self", ".", "conv1", "=", "dwconv3x3_block", "(", "\n", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "mid_channels", ",", "\n", "stride", "=", "stride", ",", "\n", "activation", "=", "activation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "MixConvBlock", "(", "\n", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "mid_channels", ",", "\n", "kernel_size", "=", "[", "3", "+", "2", "*", "i", "for", "i", "in", "range", "(", "conv1_kernel_count", ")", "]", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "[", "1", "+", "i", "for", "i", "in", "range", "(", "conv1_kernel_count", ")", "]", ",", "\n", "groups", "=", "mid_channels", ",", "\n", "activation", "=", "activation", ")", "\n", "", "if", "self", ".", "use_se", ":", "\n", "            ", "self", ".", "se", "=", "SEBlock", "(", "\n", "channels", "=", "mid_channels", ",", "\n", "reduction", "=", "(", "exp_factor", "*", "se_factor", ")", ",", "\n", "round_mid", "=", "False", ",", "\n", "mid_activation", "=", "activation", ")", "\n", "", "if", "conv2_kernel_count", "==", "1", ":", "\n", "            ", "self", ".", "conv2", "=", "conv1x1_block", "(", "\n", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "activation", "=", "None", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "mixconv1x1_block", "(", "\n", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_count", "=", "conv2_kernel_count", ",", "\n", "activation", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixUnit.forward": [[306, 321], ["mixnetm.MixUnit.conv1", "mixnetm.MixUnit.conv2", "mixnetm.MixUnit.exp_conv", "mixnetm.MixUnit.se", "backbones.utils.channel_shuffle2"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.channel_shuffle2"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "residual", ":", "\n", "            ", "identity", "=", "x", "\n", "", "if", "self", ".", "use_exp_conv", ":", "\n", "            ", "x", "=", "self", ".", "exp_conv", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "use_se", ":", "\n", "            ", "x", "=", "self", ".", "se", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "x", "=", "x", "+", "identity", "\n", "", "if", "(", "self", ".", "shuffle", ")", ":", "\n", "         ", "x", "=", "channel_shuffle2", "(", "x", ",", "2", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixInitBlock.__init__": [[334, 352], ["torch.Module.__init__", "backbones.utils.conv3x3_block", "mixnetm.MixUnit"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv3x3_block"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "activation", ",", "stride", "=", "1", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", "MixInitBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "stride", "=", "stride", ",", "activation", "=", "activation", ")", "\n", "self", ".", "conv2", "=", "MixUnit", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "exp_kernel_count", "=", "1", ",", "\n", "conv1_kernel_count", "=", "1", ",", "\n", "conv2_kernel_count", "=", "1", ",", "\n", "exp_factor", "=", "1", ",", "\n", "se_factor", "=", "0", ",", "\n", "activation", "=", "activation", ",", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixInitBlock.forward": [[353, 359], ["mixnetm.MixInitBlock.conv1", "mixnetm.MixInitBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixNet.__init__": [[390, 442], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mixnetm.MixNet.features.add_module", "enumerate", "backbones.utils.conv1x1_block", "backbones.utils.DwsConvBlock", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "mixnetm.MixNet._init_params", "mixnetm.MixInitBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "mixnetm.MixNet.features.add_module", "torch.Sequential.add_module", "mixnetm.MixUnit", "len"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv1x1_block", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixNet._init_params"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "init_block_channels", ",", "\n", "final_block_channels", ",", "\n", "exp_kernel_counts", ",", "\n", "conv1_kernel_counts", ",", "\n", "conv2_kernel_counts", ",", "\n", "exp_factors", ",", "\n", "se_factors", ",", "\n", "in_channels", "=", "3", ",", "\n", "in_size", "=", "(", "112", ",", "112", ")", ",", "\n", "num_classes", "=", "1000", ",", "gdw_size", "=", "512", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", "MixNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\"init_block\"", ",", "MixInitBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "init_block_channels", ",", "activation", "=", "\"prelu\"", ",", "stride", "=", "2", ")", ")", "\n", "in_channels", "=", "init_block_channels", "\n", "for", "i", ",", "channels_per_stage", "in", "enumerate", "(", "channels", ")", ":", "\n", "            ", "stage", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "j", ",", "out_channels", "in", "enumerate", "(", "channels_per_stage", ")", ":", "#                stride = 2 if ((j == 0) and (i != 3) and (i !=0)) or ((j == len(channels_per_stage) // 2) and (i == 3)) else 1", "\n", "                ", "stride", "=", "2", "if", "(", "(", "j", "==", "0", ")", "and", "(", "i", "!=", "3", ")", "and", "(", "i", "!=", "0", ")", ")", "or", "(", "(", "j", "==", "len", "(", "channels_per_stage", ")", "//", "2", ")", "and", "(", "i", "==", "3", ")", ")", "else", "1", "\n", "exp_kernel_count", "=", "exp_kernel_counts", "[", "i", "]", "[", "j", "]", "\n", "conv1_kernel_count", "=", "conv1_kernel_counts", "[", "i", "]", "[", "j", "]", "\n", "conv2_kernel_count", "=", "conv2_kernel_counts", "[", "i", "]", "[", "j", "]", "\n", "exp_factor", "=", "exp_factors", "[", "i", "]", "[", "j", "]", "\n", "se_factor", "=", "se_factors", "[", "i", "]", "[", "j", "]", "\n", "activation", "=", "\"prelu\"", "if", "i", "==", "0", "else", "\"swish\"", "\n", "stage", ".", "add_module", "(", "\"unit{}\"", ".", "format", "(", "j", "+", "1", ")", ",", "MixUnit", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "stride", "=", "stride", ",", "\n", "exp_kernel_count", "=", "exp_kernel_count", ",", "\n", "conv1_kernel_count", "=", "conv1_kernel_count", ",", "\n", "conv2_kernel_count", "=", "conv2_kernel_count", ",", "\n", "exp_factor", "=", "exp_factor", ",", "\n", "se_factor", "=", "se_factor", ",", "\n", "activation", "=", "activation", ",", "shuffle", "=", "self", ".", "shuffle", ")", ")", "\n", "in_channels", "=", "out_channels", "\n", "", "self", ".", "features", ".", "add_module", "(", "\"stage{}\"", ".", "format", "(", "i", "+", "1", ")", ",", "stage", ")", "\n", "\n", "", "self", ".", "tail", "=", "conv1x1_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "gdw_size", ",", "activation", "=", "\"prelu\"", ")", "\n", "self", ".", "feautre_layer", "=", "DwsConvBlock", "(", "in_channels", "=", "gdw_size", ",", "out_channels", "=", "final_block_channels", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "pw_activation", "=", "None", ",", "dw_activation", "=", "None", ",", "pw_use_bn", "=", "False", ")", "\n", "self", ".", "features_norm", "=", "nn", ".", "BatchNorm1d", "(", "final_block_channels", ",", "eps", "=", "1e-05", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "features_norm", ".", "weight", ",", "1.0", ")", "\n", "self", ".", "features_norm", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "_init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixNet._init_params": [[443, 452], ["mixnetm.MixNet.named_modules", "isinstance", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.MixNet.forward": [[453, 460], ["mixnetm.MixNet.features", "mixnetm.MixNet.tail", "mixnetm.MixNet.feautre_layer", "mixnetm.MixNet.view", "mixnetm.MixNet.features_norm", "mixnetm.MixNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "x", "=", "self", ".", "feautre_layer", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "features_norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.mixconv1x1_block": [[169, 213], ["mixnetm.MixConvBlock", "torch.ReLU"], "function", ["None"], ["", "", "def", "mixconv1x1_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_count", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    1x1 version of the mixed convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    kernel_count : int\n        Kernel count.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str, or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "MixConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "(", "[", "1", "]", "*", "kernel_count", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "[", "0", "]", "*", "kernel_count", ")", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.get_mixnet": [[462, 524], ["mixnetm.MixNet", "backbones.utils.round_channels", "torch.load", "torch.load", "torch.load", "MixNet.load_state_dict", "ValueError", "backbones.utils.round_channels"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.round_channels", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.round_channels"], ["", "", "def", "get_mixnet", "(", "version", ",", "\n", "width_scale", ",", "embedding_size", "=", "512", ",", "model_name", "=", "\"mixnet_s\"", ",", "gdw_size", "=", "512", "\n", ",", "weight", "=", "None", ",", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Create MixNet model with specific parameters.\n\n    Parameters:\n    ----------\n    version : str\n        Version of MobileNetV3 ('s' or 'm').\n    width_scale : float\n        Scale factor for width of layers.\n    model_name : str or None, default None\n        Model name for loading pretrained model.\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.torch/models'\n        Location for keeping the model parameters.\n    \"\"\"", "\n", "\n", "if", "version", "==", "\"s\"", ":", "\n", "        ", "init_block_channels", "=", "16", "\n", "channels", "=", "[", "[", "24", ",", "24", "]", ",", "[", "40", ",", "40", ",", "40", ",", "40", "]", ",", "[", "80", ",", "80", ",", "80", "]", ",", "[", "120", ",", "120", ",", "120", ",", "200", ",", "200", ",", "200", "]", "]", "\n", "exp_kernel_counts", "=", "[", "[", "2", ",", "2", "]", ",", "[", "1", ",", "2", ",", "2", ",", "2", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1", "]", "]", "\n", "conv1_kernel_counts", "=", "[", "[", "1", ",", "1", "]", ",", "[", "3", ",", "2", ",", "2", ",", "2", "]", ",", "[", "3", ",", "2", ",", "2", "]", ",", "[", "3", ",", "4", ",", "4", ",", "5", ",", "4", ",", "4", "]", "]", "\n", "conv2_kernel_counts", "=", "[", "[", "2", ",", "2", "]", ",", "[", "1", ",", "2", ",", "2", ",", "2", "]", ",", "[", "2", ",", "2", ",", "2", "]", ",", "[", "2", ",", "2", ",", "2", ",", "1", ",", "2", ",", "2", "]", "]", "\n", "exp_factors", "=", "[", "[", "6", ",", "3", "]", ",", "[", "6", ",", "6", ",", "6", ",", "6", "]", ",", "[", "6", ",", "6", ",", "6", "]", ",", "[", "6", ",", "3", ",", "3", ",", "6", ",", "6", ",", "6", "]", "]", "\n", "se_factors", "=", "[", "[", "0", ",", "0", "]", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "4", ",", "4", ",", "4", "]", ",", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "]", "\n", "", "elif", "version", "==", "\"m\"", ":", "\n", "        ", "init_block_channels", "=", "24", "\n", "channels", "=", "[", "[", "32", ",", "32", "]", ",", "[", "40", ",", "40", ",", "40", ",", "40", "]", ",", "[", "80", ",", "80", ",", "80", ",", "80", "]", ",", "[", "120", ",", "120", ",", "120", ",", "120", ",", "200", ",", "200", ",", "200", ",", "200", "]", "]", "\n", "exp_kernel_counts", "=", "[", "[", "2", ",", "2", "]", ",", "[", "1", ",", "2", ",", "2", ",", "2", "]", ",", "[", "1", ",", "2", ",", "2", ",", "2", "]", ",", "[", "1", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1", "]", "]", "\n", "conv1_kernel_counts", "=", "[", "[", "3", ",", "1", "]", ",", "[", "4", ",", "2", ",", "2", ",", "2", "]", ",", "[", "3", ",", "4", ",", "4", ",", "4", "]", ",", "[", "1", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", "]", "\n", "conv2_kernel_counts", "=", "[", "[", "2", ",", "2", "]", ",", "[", "1", ",", "2", ",", "2", ",", "2", "]", ",", "[", "1", ",", "2", ",", "2", ",", "2", "]", ",", "[", "1", ",", "2", ",", "2", ",", "2", ",", "1", ",", "2", ",", "2", ",", "2", "]", "]", "\n", "exp_factors", "=", "[", "[", "6", ",", "3", "]", ",", "[", "6", ",", "6", ",", "6", ",", "6", "]", ",", "[", "6", ",", "6", ",", "6", ",", "6", "]", ",", "[", "6", ",", "3", ",", "3", ",", "3", ",", "6", ",", "6", ",", "6", ",", "6", "]", "]", "\n", "se_factors", "=", "[", "[", "0", ",", "0", "]", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported MixNet version {}\"", ".", "format", "(", "version", ")", ")", "\n", "\n", "", "final_block_channels", "=", "embedding_size", "\n", "\n", "if", "width_scale", "!=", "1.0", ":", "\n", "        ", "channels", "=", "[", "[", "round_channels", "(", "cij", "*", "width_scale", ")", "for", "cij", "in", "ci", "]", "for", "ci", "in", "channels", "]", "\n", "init_block_channels", "=", "round_channels", "(", "init_block_channels", "*", "width_scale", ")", "\n", "\n", "", "net", "=", "MixNet", "(", "\n", "channels", "=", "channels", ",", "\n", "init_block_channels", "=", "init_block_channels", ",", "\n", "final_block_channels", "=", "final_block_channels", ",", "\n", "exp_kernel_counts", "=", "exp_kernel_counts", ",", "\n", "conv1_kernel_counts", "=", "conv1_kernel_counts", ",", "\n", "conv2_kernel_counts", "=", "conv2_kernel_counts", ",", "\n", "exp_factors", "=", "exp_factors", ",", "\n", "se_factors", "=", "se_factors", ",", "gdw_size", "=", "gdw_size", ",", "shuffle", "=", "shuffle", ",", "\n", "**", "kwargs", ")", "\n", "if", "(", "weight", "is", "not", "None", ")", ":", "\n", "        ", "weight", "=", "torch", ".", "load", "(", "weight", ")", "\n", "net", ".", "load_state_dict", "(", "weight", ")", "\n", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.mixnet_s": [[526, 538], ["mixnetm.get_mixnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.get_mixnet"], ["", "def", "mixnet_s", "(", "embedding_size", "=", "512", ",", "width_scale", "=", "0.5", ",", "gdw_size", "=", "512", ",", "weight", "=", "None", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    MixNet-S model from 'MixConv: Mixed Depthwise Convolutional Kernels,' https://arxiv.org/abs/1907.09595.\n\n    Parameters:\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.torch/models'\n        Location for keeping the model parameters.\n    \"\"\"", "\n", "return", "get_mixnet", "(", "version", "=", "\"s\"", ",", "width_scale", "=", "width_scale", ",", "embedding_size", "=", "embedding_size", ",", "gdw_size", "=", "gdw_size", ",", "model_name", "=", "\"mixnet_s\"", ",", "shuffle", "=", "shuffle", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.mixnet_m": [[540, 552], ["mixnetm.get_mixnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.get_mixnet"], ["", "def", "mixnet_m", "(", "embedding_size", "=", "512", ",", "width_scale", "=", "0.5", ",", "gdw_size", "=", "512", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    MixNet-M model from 'MixConv: Mixed Depthwise Convolutional Kernels,' https://arxiv.org/abs/1907.09595.\n\n    Parameters:\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.torch/models'\n        Location for keeping the model parameters.\n    \"\"\"", "\n", "return", "get_mixnet", "(", "version", "=", "\"m\"", ",", "width_scale", "=", "width_scale", ",", "embedding_size", "=", "embedding_size", ",", "gdw_size", "=", "gdw_size", ",", "model_name", "=", "\"mixnet_m\"", ",", "shuffle", "=", "shuffle", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.mixnet_l": [[554, 566], ["mixnetm.get_mixnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm.get_mixnet"], ["", "def", "mixnet_l", "(", "embedding_size", "=", "512", ",", "width_scale", "=", "1.3", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    MixNet-L model from 'MixConv: Mixed Depthwise Convolutional Kernels,' https://arxiv.org/abs/1907.09595.\n\n    Parameters:\n    ----------\n    pretrained : bool, default False\n        Whether to load the pretrained weights for model.\n    root : str, default '~/.torch/models'\n        Location for keeping the model parameters.\n    \"\"\"", "\n", "return", "get_mixnet", "(", "version", "=", "\"m\"", ",", "width_scale", "=", "width_scale", ",", "embedding_size", "=", "embedding_size", ",", "model_name", "=", "\"mixnet_l\"", ",", "shuffle", "=", "shuffle", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.mixnetm._test": [[570, 594], ["model", "print", "backbones.utils._calc_width", "backbones.utils.count_model_flops", "print", "print", "model.eval", "torch.randn", "torch.randn", "torch.randn", "model.", "net.sum().backward", "tuple", "net.sum", "net.size"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils._calc_width", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.count_model_flops"], ["", "def", "_test", "(", ")", ":", "\n", "    ", "import", "torch", "\n", "\n", "pretrained", "=", "False", "\n", "\n", "models", "=", "[", "\n", "mixnet_s", "\n", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "\n", "        ", "net", "=", "model", "(", "embedding_size", "=", "512", ",", "width_scale", "=", "1.0", ",", "gdw_size", "=", "1024", ")", "\n", "print", "(", "net", ")", "\n", "weight_count", "=", "_calc_width", "(", "net", ")", "\n", "flops", "=", "count_model_flops", "(", "net", ")", "\n", "print", "(", "\"m={}, {}\"", ".", "format", "(", "model", ".", "__name__", ",", "weight_count", ")", ")", "\n", "print", "(", "\"m={}, {}\"", ".", "format", "(", "model", ".", "__name__", ",", "flops", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "112", ",", "112", ")", "\n", "\n", "y", "=", "net", "(", "x", ")", "\n", "y", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "assert", "(", "tuple", "(", "y", ".", "size", "(", ")", ")", "==", "(", "1", ",", "512", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.SEModule.__init__": [[29, 36], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.SEModule.forward": [[37, 46], ["iresnet.SEModule.avg_pool", "iresnet.SEModule.fc1", "iresnet.SEModule.relu", "iresnet.SEModule.fc2", "iresnet.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.IBasicBlock.__init__": [[49, 67], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "iresnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet.conv3x3", "torch.nn.BatchNorm2d", "ValueError", "NotImplementedError", "iresnet.SEModule"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv3x3", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "use_se", "=", "False", ")", ":", "\n", "        ", "super", "(", "IBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "use_se", "=", "use_se", "\n", "if", "(", "use_se", ")", ":", "\n", "         ", "self", ".", "se_block", "=", "SEModule", "(", "planes", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.IBasicBlock.forward": [[68, 82], ["iresnet.IBasicBlock.bn1", "iresnet.IBasicBlock.conv1", "iresnet.IBasicBlock.bn2", "iresnet.IBasicBlock.prelu", "iresnet.IBasicBlock.conv2", "iresnet.IBasicBlock.bn3", "iresnet.IBasicBlock.se_block", "iresnet.IBasicBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "prelu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "(", "self", ".", "use_se", ")", ":", "\n", "            ", "out", "=", "self", ".", "se_block", "(", "out", ")", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "identity", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.IResNet.__init__": [[86, 137], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet.IResNet._make_layer", "iresnet.IResNet._make_layer", "iresnet.IResNet._make_layer", "iresnet.IResNet._make_layer", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.init.constant_", "iresnet.IResNet.modules", "len", "ValueError", "isinstance", "iresnet.IResNet.modules", "torch.nn.init.normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.IResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.IResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.IResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.IResNet._make_layer"], ["def", "__init__", "(", "self", ",", "\n", "block", ",", "layers", ",", "dropout", "=", "0", ",", "num_features", "=", "512", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "super", "(", "IResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16", "=", "fp16", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ",", "eps", "=", "1e-05", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "128", ",", "\n", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "256", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "512", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", "*", "self", ".", "fc_scale", ",", "num_features", ")", "\n", "self", ".", "features", "=", "nn", ".", "BatchNorm1d", "(", "num_features", ",", "eps", "=", "1e-05", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "features", ".", "weight", ",", "1.0", ")", "\n", "self", ".", "features", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "IBasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.IResNet._make_layer": [[138, 163], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "iresnet.conv1x1", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "eps", "=", "1e-05", ",", ")", ",", "\n", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.IResNet.forward": [[164, 179], ["iresnet.IResNet.fc", "iresnet.IResNet.features", "torch.cuda.amp.autocast", "iresnet.IResNet.conv1", "iresnet.IResNet.bn1", "iresnet.IResNet.prelu", "iresnet.IResNet.layer1", "iresnet.IResNet.layer2", "iresnet.IResNet.layer3", "iresnet.IResNet.layer4", "iresnet.IResNet.bn2", "torch.flatten", "iresnet.IResNet.dropout", "iresnet.IResNet.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "self", ".", "fp16", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ".", "float", "(", ")", "if", "self", ".", "fp16", "else", "x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.conv3x3": [[9, 19], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.conv1x1": [[21, 28], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", "\n", "", "class", "SEModule", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet._iresnet": [[181, 186], ["iresnet.IResNet", "ValueError"], "function", ["None"], ["", "", "def", "_iresnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "IResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.iresnet18": [[188, 191], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet._iresnet"], ["", "def", "iresnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet18'", ",", "IBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.iresnet34": [[193, 196], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet._iresnet"], ["", "def", "iresnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet34'", ",", "IBasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.iresnet50": [[198, 201], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet._iresnet"], ["", "def", "iresnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet50'", ",", "IBasicBlock", ",", "[", "3", ",", "4", ",", "14", ",", "3", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet.iresnet100": [[203, 206], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet._iresnet"], ["", "def", "iresnet100", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet100'", ",", "IBasicBlock", ",", "[", "3", ",", "13", ",", "30", ",", "3", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "", "def", "_test", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.iresnet._test": [[206, 235], ["model", "print", "backbones.mixnetm._calc_width", "backbones.mixnetm.count_model_flops", "print", "print", "model.eval", "torch.randn", "model.", "net.sum().backward", "tuple", "net.sum", "net.size"], "function", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils._calc_width", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.count_model_flops"], ["", "def", "_test", "(", ")", ":", "\n", "    ", "import", "torch", "\n", "\n", "pretrained", "=", "False", "\n", "\n", "models", "=", "[", "\n", "iresnet100", "\n", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "\n", "        ", "net", "=", "model", "(", ")", "\n", "print", "(", "net", ")", "\n", "# net.train()", "\n", "weight_count", "=", "_calc_width", "(", "net", ")", "\n", "flops", "=", "count_model_flops", "(", "net", ")", "\n", "print", "(", "\"m={}, {}\"", ".", "format", "(", "model", ".", "__name__", ",", "weight_count", ")", ")", "\n", "print", "(", "\"m={}, {}\"", ".", "format", "(", "model", ".", "__name__", ",", "flops", ")", ")", "\n", "\n", "#assert (model != mixnet_s or weight_count == 4134606)", "\n", "#assert (model != mixnet_m or weight_count == 5014382)", "\n", "#assert (model != mixnet_l or weight_count == 7329252)", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "112", ",", "112", ")", "\n", "\n", "y", "=", "net", "(", "x", ")", "\n", "y", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "assert", "(", "tuple", "(", "y", ".", "size", "(", ")", ")", "==", "(", "1", ",", "512", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.Flatten.forward": [[104, 106], ["x.view", "x.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.ConvBlock.__init__": [[166, 201], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.ReLU", "isinstance", "torch.nn.ZeroPad2d", "torch.nn.BatchNorm2d", "backbones.activation.get_activation_layer", "len"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.activation.get_activation_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activate", "=", "(", "activation", "is", "not", "None", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "use_pad", "=", "(", "isinstance", "(", "padding", ",", "(", "list", ",", "tuple", ")", ")", "and", "(", "len", "(", "padding", ")", "==", "4", ")", ")", "\n", "\n", "if", "self", ".", "use_pad", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", "=", "padding", ")", "\n", "padding", "=", "0", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "\n", "num_features", "=", "out_channels", ",", "\n", "eps", "=", "bn_eps", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "self", ".", "activ", "=", "get_activation_layer", "(", "activation", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.ConvBlock.forward": [[202, 211], ["utils.ConvBlock.conv", "utils.ConvBlock.pad", "utils.ConvBlock.bn", "utils.ConvBlock.activ"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_pad", ":", "\n", "            ", "x", "=", "self", ".", "pad", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__": [[336, 368], ["torch.nn.Module.__init__", "utils.dwconv_block", "utils.conv1x1_block", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.__init__", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.dwconv_block", "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv1x1_block"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dw_use_bn", "=", "True", ",", "\n", "pw_use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "dw_activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "pw_activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "DwsConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dw_conv", "=", "dwconv_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "in_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "dw_use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "dw_activation", ")", "\n", "self", ".", "pw_conv", "=", "conv1x1_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "pw_use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "pw_activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.DwsConvBlock.forward": [[369, 375], ["utils.DwsConvBlock.dw_conv", "utils.DwsConvBlock.pw_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "dw_conv", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pw_conv", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.round_channels": [[9, 30], ["max", "float", "int"], "function", ["None"], ["def", "round_channels", "(", "channels", ",", "\n", "divisor", "=", "8", ")", ":", "\n", "    ", "\"\"\"\n    Round weighted channel number (make divisible operation).\n\n    Parameters:\n    ----------\n    channels : int or float\n        Original number of channels.\n    divisor : int, default 8\n        Alignment value.\n\n    Returns:\n    -------\n    int\n        Weighted number of channels.\n    \"\"\"", "\n", "rounded_channels", "=", "max", "(", "int", "(", "channels", "+", "divisor", "/", "2.0", ")", "//", "divisor", "*", "divisor", ",", "divisor", ")", "\n", "if", "float", "(", "rounded_channels", ")", "<", "0.9", "*", "channels", ":", "\n", "        ", "rounded_channels", "+=", "divisor", "\n", "", "return", "rounded_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv1x1": [[31, 59], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "1", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Convolution 1x1 layer.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "groups", "=", "groups", ",", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv3x3": [[63, 99], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Convolution 3x3 layer.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int or tuple/list of 2 int, default 1\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "", "class", "Flatten", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.depthwise_conv3x3": [[107, 137], ["torch.nn.Conv2d"], "function", ["None"], ["", "", "def", "depthwise_conv3x3", "(", "channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Depthwise convolution 3x3 layer.\n\n    Parameters:\n    ----------\n    channels : int\n        Number of input/output channels.\n    strides : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int or tuple/list of 2 int, default 1\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "channels", ",", "\n", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "channels", ",", "\n", "bias", "=", "bias", ")", "\n", "", "class", "ConvBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv1x1_block": [[212, 256], ["utils.ConvBlock", "torch.nn.ReLU"], "function", ["None"], ["", "", "def", "conv1x1_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    1x1 version of the standard convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int, or tuple/list of 2 int, or tuple/list of 4 int, default 0\n        Padding value for convolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "ConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.conv3x3_block": [[257, 305], ["utils.ConvBlock", "torch.nn.ReLU"], "function", ["None"], ["", "def", "conv3x3_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    3x3 version of the standard convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int, or tuple/list of 2 int, or tuple/list of 4 int, default 1\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "ConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "", "class", "DwsConvBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.dwconv_block": [[377, 402], ["utils.ConvBlock", "torch.nn.ReLU"], "function", ["None"], ["", "", "def", "dwconv_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    Depthwise convolution block.\n    \"\"\"", "\n", "return", "ConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "out_channels", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.channel_shuffle2": [[403, 430], ["x.view.size", "x.view.view", "torch.transpose().contiguous", "x.view.view", "torch.transpose"], "function", ["None"], ["", "def", "channel_shuffle2", "(", "x", ",", "\n", "groups", ")", ":", "\n", "    ", "\"\"\"\n    Channel shuffle operation from 'ShuffleNet: An Extremely Efficient Convolutional Neural Network for Mobile Devices,'\n    https://arxiv.org/abs/1707.01083. The alternative version.\n\n    Parameters:\n    ----------\n    x : Tensor\n        Input tensor.\n    groups : int\n        Number of groups.\n\n    Returns:\n    -------\n    Tensor\n        Resulted tensor.\n    \"\"\"", "\n", "batch", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "assert", "(", "channels", "%", "groups", "==", "0", ")", "\n", "channels_per_group", "=", "channels", "//", "groups", "\n", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "channels_per_group", ",", "groups", ",", "height", ",", "width", ")", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "channels", ",", "height", ",", "width", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils._calc_width": [[431, 438], ["filter", "net.parameters", "numpy.prod", "param.size"], "function", ["None"], ["", "def", "_calc_width", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "net_params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", "\n", "weight_count", "=", "0", "\n", "for", "param", "in", "net_params", ":", "\n", "        ", "weight_count", "+=", "np", ".", "prod", "(", "param", ".", "size", "(", ")", ")", "\n", "", "return", "weight_count", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.flops_to_string": [[439, 448], ["str", "round", "str", "str", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "'GFLOPS'", ",", "precision", "=", "4", ")", ":", "\n", "    ", "if", "units", "==", "'GFLOPS'", ":", "\n", "        ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'MFLOPS'", ":", "\n", "        ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'KFLOPS'", ":", "\n", "        ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "flops", ")", "+", "' FLOPS'", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_mixfacenets.backbones.utils.count_model_flops": [[452, 541], ["model.eval", "utils.count_model_flops.foo"], "function", ["None"], ["", "", "def", "count_model_flops", "(", "model", ",", "input_res", "=", "[", "112", ",", "112", "]", ",", "multiply_adds", "=", "True", ")", ":", "\n", "    ", "list_conv", "=", "[", "]", "\n", "\n", "def", "conv_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "(", "self", ".", "in_channels", "/", "self", ".", "groups", ")", "\n", "bias_ops", "=", "1", "if", "self", ".", "bias", "is", "not", "None", "else", "0", "\n", "\n", "params", "=", "output_channels", "*", "(", "kernel_ops", "+", "bias_ops", ")", "\n", "flops", "=", "(", "kernel_ops", "*", "(", "\n", "2", "if", "multiply_adds", "else", "1", ")", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "\n", "list_conv", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_linear", "=", "[", "]", "\n", "\n", "def", "linear_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", "=", "input", "[", "0", "]", ".", "size", "(", "0", ")", "if", "input", "[", "0", "]", ".", "dim", "(", ")", "==", "2", "else", "1", "\n", "\n", "weight_ops", "=", "self", ".", "weight", ".", "nelement", "(", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias_ops", "=", "self", ".", "bias", ".", "nelement", "(", ")", "if", "self", ".", "bias", ".", "nelement", "(", ")", "else", "0", "\n", "flops", "=", "batch_size", "*", "(", "weight_ops", "+", "bias_ops", ")", "\n", "", "else", ":", "\n", "            ", "flops", "=", "batch_size", "*", "weight_ops", "\n", "", "list_linear", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_bn", "=", "[", "]", "\n", "\n", "def", "bn_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_bn", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", "*", "2", ")", "\n", "\n", "", "list_relu", "=", "[", "]", "\n", "\n", "def", "relu_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_relu", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", ")", "\n", "\n", "", "list_pooling", "=", "[", "]", "\n", "\n", "def", "pooling_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", "\n", "bias_ops", "=", "0", "\n", "params", "=", "0", "\n", "flops", "=", "(", "kernel_ops", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "\n", "list_pooling", ".", "append", "(", "flops", ")", "\n", "", "def", "pooling_hook_ad", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "input", "=", "input", "[", "0", "]", "\n", "flops", "=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "list_pooling", ".", "append", "(", "flops", ")", "\n", "\n", "", "handles", "=", "[", "]", "\n", "\n", "def", "foo", "(", "net", ")", ":", "\n", "        ", "childrens", "=", "list", "(", "net", ".", "children", "(", ")", ")", "\n", "if", "not", "childrens", ":", "\n", "            ", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "conv_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "linear_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "bn_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "ReLU", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "PReLU", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Sigmoid", ")", "or", "isinstance", "(", "net", ",", "HSwish", ")", "or", "isinstance", "(", "net", ",", "Swish", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "relu_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "pooling_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "pooling_hook_ad", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"warning\"", "+", "str", "(", "net", ")", ")", "\n", "", "return", "\n", "", "for", "c", "in", "childrens", ":", "\n", "            ", "foo", "(", "c", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "foo", "(", "model", ")", "\n", "input", "=", "Variable", "(", "torch", ".", "rand", "(", "3", ",", "input_res", "[", "1", "]", ",", "input_res", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "True", ")", "\n", "out", "=", "model", "(", "input", ")", "\n", "total_flops", "=", "(", "sum", "(", "list_conv", ")", "+", "sum", "(", "list_linear", ")", "+", "sum", "(", "list_bn", ")", "+", "sum", "(", "list_relu", ")", "+", "sum", "(", "list_pooling", ")", ")", "\n", "for", "h", "in", "handles", ":", "\n", "        ", "h", ".", "remove", "(", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "flops_to_string", "(", "total_flops", ")", "\n", "\n"]]}