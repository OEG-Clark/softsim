{"home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.metrics.Metrics.__init__": [[8, 10], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Metrics", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.metrics.Metrics.one_error": [[11, 17], ["enumerate", "len"], "methods", ["None"], ["", "def", "one_error", "(", "self", ",", "y_true", ",", "y_pred_top", ")", ":", "\n", "        ", "cnt", "=", "0", "\n", "for", "i", ",", "y", "in", "enumerate", "(", "y_pred_top", ")", ":", "\n", "            ", "if", "y_true", "[", "i", ",", "y", "]", "!=", "1", ":", "\n", "                ", "cnt", "+=", "1", "\n", "", "", "return", "cnt", "/", "len", "(", "y_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.metrics.Metrics.calculate_all_metrics": [[19, 32], ["numpy.array", "numpy.array", "metrics.Metrics.one_error", "sklearn.metrics.hamming_loss", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.metrics.Metrics.one_error"], ["", "def", "calculate_all_metrics", "(", "self", ",", "y_true", ",", "y_pred", ",", "y_pred_top", ")", ":", "\n", "        ", "y_true", "=", "np", ".", "array", "(", "y_true", ")", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", "\n", "OE", "=", "self", ".", "one_error", "(", "y_true", ",", "y_pred_top", ")", "\n", "HL", "=", "hamming_loss", "(", "y_true", ",", "y_pred", ")", "\n", "MacroF1", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "MicroF1", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'micro'", ")", "\n", "\n", "print", "(", "\"OE: \"", ",", "OE", ")", "\n", "print", "(", "\"HL: \"", ",", "HL", ")", "\n", "print", "(", "\"MacroF1: \"", ",", "MacroF1", ")", "\n", "print", "(", "\"MicroF1: \"", ",", "MicroF1", ")", "\n", "return", "OE", ",", "HL", ",", "MacroF1", ",", "MicroF1", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.KRF.Attention.__init__": [[11, 20], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_size", "=", "None", ",", "max_sents", "=", "None", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "hidden_size", "is", "None", ":", "\n", "            ", "hidden_size", "=", "in_features", "\n", "\n", "", "self", ".", "max_sents", "=", "max_sents", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_size", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.KRF.Attention.forward": [[21, 28], ["torch.tanh", "torch.tanh", "torch.tanh", "KRF.Attention.linear2", "torch.softmax", "torch.softmax", "torch.softmax", "KRF.Attention.dropout", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "KRF.Attention.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X_text", ")", ":", "\n", "        ", "act", "=", "F", ".", "tanh", "(", "self", ".", "linear1", "(", "X_text", ")", ")", "\n", "affine2", "=", "self", ".", "linear2", "(", "act", ")", "\n", "score", "=", "F", ".", "softmax", "(", "affine2", ",", "dim", "=", "1", ")", "\n", "score", "=", "self", ".", "dropout", "(", "score", ")", "\n", "attention", "=", "torch", ".", "sum", "(", "score", "*", "X_text", ",", "dim", "=", "1", ")", "\n", "return", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.KRF.KRF.__init__": [[32, 57], ["NeuralNetwork.NeuralNetwork.__init__", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "KRF.Attention", "KRF.Attention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "GCN.RelationNet", "print"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "KRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "patience", "=", "0", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "max_comments", "=", "config", "[", "'max_comments'", "]", "\n", "self", ".", "max_words", "=", "config", "[", "'max_len'", "]", "\n", "self", ".", "bsz", "=", "config", "[", "'batch_size'", "]", "\n", "embedding_weights", "=", "torch", ".", "FloatTensor", "(", "config", "[", "'embedding_weights'", "]", ")", "\n", "V", ",", "D", "=", "embedding_weights", ".", "size", "(", ")", "\n", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "V", ",", "D", ",", "padding_idx", "=", "0", ",", "_weight", "=", "embedding_weights", ")", "#", "\n", "self", ".", "label_embedding", "=", "nn", ".", "Embedding", "(", "config", "[", "\"C\"", "]", ",", "200", ")", "\n", "\n", "self", ".", "word_bigru", "=", "nn", ".", "GRU", "(", "input_size", "=", "D", ",", "hidden_size", "=", "100", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "sent_bigru", "=", "nn", ".", "GRU", "(", "input_size", "=", "200", ",", "hidden_size", "=", "100", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", "\n", "self", ".", "word_attention", "=", "Attention", "(", "200", ",", "100", ")", "\n", "self", ".", "sent_attention", "=", "Attention", "(", "200", ",", "100", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "200", ",", "200", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "200", ",", "config", "[", "\"C\"", "]", ")", "\n", "self", ".", "gcn", "=", "RelationNet", "(", "num_classes", "=", "config", "[", "\"C\"", "]", ",", "task", "=", "config", "[", "'task'", "]", ",", "adj_file", "=", "config", "[", "'adj_file'", "]", ")", "\n", "print", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.KRF.KRF.word_level_rnn": [[59, 67], ["KRF.KRF.word_bigru", "KRF.KRF.word_attention"], "methods", ["None"], ["", "def", "word_level_rnn", "(", "self", ",", "X_word", ")", ":", "\n", "        ", "'''\n        :param X_word: (batch_size*max_sents, max_words, d)\n        :return:\n        '''", "\n", "X_sent", ",", "_", "=", "self", ".", "word_bigru", "(", "X_word", ")", "\n", "X_sent", "=", "self", ".", "word_attention", "(", "X_sent", ")", "\n", "return", "X_sent", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.KRF.KRF.sentence_level_rnn": [[69, 77], ["KRF.KRF.sent_bigru", "KRF.KRF.sent_attention"], "methods", ["None"], ["", "def", "sentence_level_rnn", "(", "self", ",", "X_comment", ")", ":", "\n", "        ", "'''\n        :param X_sent: (batch_size, max_sents, d)\n        :return:\n        '''", "\n", "X_comment", ",", "_", "=", "self", ".", "sent_bigru", "(", "X_comment", ")", "\n", "X_comment", "=", "self", ".", "sent_attention", "(", "X_comment", ")", "\n", "return", "X_comment", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.KRF.KRF.forward": [[79, 101], ["KRF.KRF.word_embedding", "X_word.view.view.view", "KRF.KRF.word_level_rnn", "X_comment.view.view.view", "KRF.KRF.sentence_level_rnn", "KRF.KRF.relu", "KRF.KRF.gcn", "KRF.KRF.sigmoid", "KRF.KRF.fc1", "X_word.view.view.size", "X_comment.view.view.size"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.KRF.KRF.word_level_rnn", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.KRF.KRF.sentence_level_rnn"], ["", "def", "forward", "(", "self", ",", "X_text_idx", ")", ":", "\n", "        ", "'''\n        :param X_text size: (batch_size, max_comments, max_words)\n        :return:\n        '''", "\n", "# then lookup embedding  (batch_size, max_sents, max_words, D)", "\n", "X_word", "=", "self", ".", "word_embedding", "(", "X_text_idx", ")", "\n", "\n", "# reshape X_text to (batch_size*max_sents, max_words, D)", "\n", "X_word", "=", "X_word", ".", "view", "(", "[", "-", "1", ",", "self", ".", "max_words", ",", "X_word", ".", "size", "(", "-", "1", ")", "]", ")", "\n", "X_comment", "=", "self", ".", "word_level_rnn", "(", "X_word", ")", "\n", "\n", "# (batch_size, max_sents, nb_filters* len(Ks))", "\n", "X_comment", "=", "X_comment", ".", "view", "(", "[", "-", "1", ",", "self", ".", "max_comments", ",", "X_comment", ".", "size", "(", "-", "1", ")", "]", ")", "\n", "# (batch_size, nb_filters* len(Ks))", "\n", "X_text", "=", "self", ".", "sentence_level_rnn", "(", "X_comment", ")", "\n", "\n", "d1", "=", "self", ".", "relu", "(", "self", ".", "fc1", "(", "X_text", ")", ")", "\n", "\n", "Xt_logit", "=", "self", ".", "gcn", "(", "d1", ",", "self", ".", "label_embedding", ".", "weight", ")", "\n", "# Xt_logit = self.fc2(d1)", "\n", "return", "Xt_logit", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.__init__": [[14, 20], ["torch.Module.__init__", "metrics.Metrics", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NeuralNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "metrics", "=", "Metrics", "(", ")", "\n", "self", ".", "best_metric", "=", "0", "\n", "self", ".", "patience", "=", "0", "\n", "self", ".", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.forward": [[22, 24], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.train_step": [[26, 38], ["NeuralNetwork.NeuralNetwork.optimizer.zero_grad", "NeuralNetwork.NeuralNetwork.forward", "NeuralNetwork.NeuralNetwork.loss_func", "NeuralNetwork.NeuralNetwork.backward", "NeuralNetwork.NeuralNetwork.optimizer.step", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "elem.cuda", "NeuralNetwork.NeuralNetwork.item"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.forward"], ["", "def", "train_step", "(", "self", ",", "i", ",", "data", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_x_text", ",", "batch_y", "=", "(", "elem", ".", "cuda", "(", ")", "for", "elem", "in", "data", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "Xt_logit", "=", "self", ".", "forward", "(", "batch_x_text", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "Xt_logit", ",", "batch_y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "print", "(", "'Batch[{}] - loss: {:.6f}'", ".", "format", "(", "i", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.fit": [[40, 79], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.dataloader.DataLoader", "torch.utils.data.dataloader.DataLoader", "torch.BCELoss", "torch.BCELoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "NeuralNetwork.NeuralNetwork.cuda", "NeuralNetwork.NeuralNetwork.parameters", "print", "NeuralNetwork.NeuralNetwork.train", "enumerate", "print", "NeuralNetwork.NeuralNetwork.evaluate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "NeuralNetwork.NeuralNetwork.train_step", "NeuralNetwork.NeuralNetwork.item", "NeuralNetwork.NeuralNetwork.load_state_dict", "NeuralNetwork.NeuralNetwork.adjust_learning_rate", "print", "print", "NeuralNetwork.NeuralNetwork.evaluate", "NeuralNetwork.NeuralNetwork.train", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.evaluate", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.train_step", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.adjust_learning_rate", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.evaluate"], ["", "def", "fit", "(", "self", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ")", ":", "\n", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "batch_size", "=", "self", ".", "config", "[", "'batch_size'", "]", "\n", "X_train", "=", "torch", ".", "LongTensor", "(", "X_train", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "y_train", "=", "torch", ".", "FloatTensor", "(", "y_train", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "dataset", "=", "TensorDataset", "(", "X_train", ",", "y_train", ")", "\n", "dataiter", "=", "DataLoader", "(", "dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "self", ".", "loss_func", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "config", "[", "'lr'", "]", ",", "weight_decay", "=", "self", ".", "config", "[", "'reg'", "]", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'epochs'", "]", ")", ":", "\n", "            ", "print", "(", "\"\\nEpoch \"", ",", "epoch", "+", "1", ",", "\"/\"", ",", "self", ".", "config", "[", "'epochs'", "]", ")", "\n", "avg_loss", "=", "0", "\n", "avg_acc", "=", "0", "\n", "\n", "self", ".", "train", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataiter", ")", ":", "\n", "                ", "loss", "=", "self", ".", "train_step", "(", "i", ",", "data", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "                    ", "self", ".", "evaluate", "(", "X_val", ",", "y_val", ")", "\n", "self", ".", "train", "(", ")", "\n", "\n", "", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "", "cnt", "=", "y_train", ".", "size", "(", "0", ")", "//", "batch_size", "+", "1", "\n", "print", "(", "\"Average loss:{:.6f} average acc:{:.6f}%\"", ".", "format", "(", "avg_loss", "/", "cnt", ",", "avg_acc", "/", "cnt", ")", ")", "\n", "\n", "self", ".", "evaluate", "(", "X_val", ",", "y_val", ")", "\n", "if", "epoch", ">", "10", "and", "self", ".", "patience", ">=", "2", "and", "self", ".", "config", "[", "'lr'", "]", ">=", "1e-5", ":", "\n", "                ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "config", "[", "'save_path'", "]", ")", ")", "\n", "self", ".", "adjust_learning_rate", "(", ")", "\n", "print", "(", "\"Decay learning rate to: \"", ",", "self", ".", "config", "[", "'lr'", "]", ")", "\n", "print", "(", "\"Reload the best model...\"", ")", "\n", "self", ".", "patience", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.adjust_learning_rate": [[81, 86], ["print"], "methods", ["None"], ["", "", "", "def", "adjust_learning_rate", "(", "self", ",", "decay_rate", "=", ".5", ")", ":", "\n", "        ", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "param_group", "[", "'lr'", "]", "*", "decay_rate", "\n", "self", ".", "config", "[", "'lr'", "]", "=", "param_group", "[", "'lr'", "]", "\n", "print", "(", "\"Now lr: \"", ",", "param_group", "[", "'lr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.evaluate": [[88, 104], ["NeuralNetwork.NeuralNetwork.predict", "NeuralNetwork.NeuralNetwork.metrics.calculate_all_metrics", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "print", "NeuralNetwork.NeuralNetwork.state_dict"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.predict", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.metrics.Metrics.calculate_all_metrics"], ["", "", "def", "evaluate", "(", "self", ",", "X_val", ",", "y_val", ")", ":", "\n", "        ", "y_pred", ",", "y_pred_top", "=", "self", ".", "predict", "(", "X_val", ")", "\n", "OE", ",", "HL", ",", "MacroF1", ",", "MicroF1", "=", "self", ".", "metrics", ".", "calculate_all_metrics", "(", "y_val", ",", "y_pred", ",", "y_pred_top", ")", "\n", "metric", "=", "MacroF1", "-", "HL", "\n", "\n", "if", "metric", ">", "self", ".", "best_metric", ":", "\n", "            ", "self", ".", "best_metric", "=", "metric", "\n", "self", ".", "patience", "=", "0", "\n", "torch", ".", "save", "(", "self", ".", "state_dict", "(", ")", ",", "self", ".", "config", "[", "'save_path'", "]", ")", "\n", "# pickle.dump(self.user_embedding.weight.data.cpu().numpy(),", "\n", "#             file=open(\"data/user_embedding\"+str(epoch)+\".pkl\", 'wb'), protocol=4)", "\n", "print", "(", "\"save model!!!\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patience", "+=", "1", "\n", "", "print", "(", "\"Val set metric:\"", ",", "metric", ")", "\n", "print", "(", "\"Best val set metric:\"", ",", "self", ".", "best_metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.predict": [[106, 126], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "NeuralNetwork.NeuralNetwork.eval", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.dataloader.DataLoader", "torch.utils.data.dataloader.DataLoader", "enumerate", "NeuralNetwork.NeuralNetwork.cuda", "NeuralNetwork.NeuralNetwork.forward", "torch.max", "torch.max", "torch.max", "torch.max", "predicted_top.data.cpu().numpy().tolist", "predicted.data.cpu().numpy().tolist", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "predicted_top.data.cpu().numpy", "predicted.data.cpu().numpy", "predicted_top.data.cpu", "predicted.data.cpu"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.forward"], ["", "def", "predict", "(", "self", ",", "X_test", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "eval", "(", ")", "\n", "X_test", "=", "torch", ".", "LongTensor", "(", "X_test", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "dataset", "=", "TensorDataset", "(", "X_test", ")", "\n", "dataiter", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "200", ")", "\n", "\n", "y_pred", "=", "[", "]", "\n", "y_pred_top", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataiter", ")", ":", "\n", "            ", "batch_x_text", "=", "data", "[", "0", "]", "\n", "logit", "=", "self", ".", "forward", "(", "batch_x_text", ")", "\n", "predicted", "=", "logit", ">", "0.5", "\n", "\n", "_", ",", "predicted_top", "=", "torch", ".", "max", "(", "logit", ",", "dim", "=", "1", ")", "\n", "y_pred_top", "+=", "predicted_top", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "y_pred", "+=", "predicted", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "", "return", "y_pred", ",", "y_pred_top", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.GraphConvolution.__init__": [[15, 25], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "GCN.GraphConvolution.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "GCN.GraphConvolution.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.__init__", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.GraphConvolution.reset_parameters": [[26, 31], ["GCN.GraphConvolution.weight.data.uniform_", "math.sqrt", "GCN.GraphConvolution.bias.data.uniform_", "GCN.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.GraphConvolution.forward": [[32, 39], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "matmul", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.GraphConvolution.__repr__": [[40, 44], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.__init__": [[48, 63], ["torch.Module.__init__", "GCN.GraphConvolution", "GCN.GraphConvolution", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "pickle.load", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "open", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "task", ",", "in_channel", "=", "200", ",", "out_channel", "=", "100", ",", "adj_file", "=", "None", ")", ":", "\n", "        ", "super", "(", "RelationNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "in_channel", ",", "512", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "512", ",", "out_channel", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n", "data_adj", ",", "knowledge_adj", "=", "pickle", ".", "load", "(", "open", "(", "adj_file", ",", "'rb'", ")", ")", "\n", "self", ".", "A_data", "=", "torch", ".", "from_numpy", "(", "data_adj", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "A_know", "=", "torch", ".", "from_numpy", "(", "knowledge_adj", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "t", "=", "10.0", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_channel", ",", "200", ")", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.gen_adj": [[65, 71], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "A.sum().float", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "A.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "gen_adj", "(", "self", ",", "A", ",", "t", "=", "0", ")", ":", "\n", "        ", "A", "[", "A", "<", "t", "]", "=", "0", "\n", "D", "=", "torch", ".", "pow", "(", "A", ".", "sum", "(", "1", ")", ".", "float", "(", ")", ",", "-", "0.5", ")", "\n", "D", "=", "torch", ".", "diag", "(", "D", ")", "\n", "adj", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "A", ",", "D", ")", ".", "t", "(", ")", ",", "D", ")", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.forward": [[73, 95], ["GCN.RelationNet.gen_adj", "GCN.RelationNet.gen_adj", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "GCN.RelationNet.gc1", "GCN.RelationNet.relu", "GCN.RelationNet.gc2", "torch.einsum.transpose().contiguous().view", "torch.einsum.transpose().contiguous().view", "torch.einsum.transpose().contiguous().view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "pickle.dump", "torch.einsum.transpose().contiguous", "torch.einsum.transpose().contiguous", "torch.einsum.transpose().contiguous", "open", "torch.einsum.transpose", "torch.einsum.transpose", "torch.einsum.transpose"], "methods", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.gen_adj", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.GCN.RelationNet.gen_adj"], ["", "def", "forward", "(", "self", ",", "feature", ",", "inp", ")", ":", "\n", "        ", "'''\n        :param feature:\n        :param inp:\n        :return:\n        '''", "\n", "data_adj", "=", "self", ".", "gen_adj", "(", "self", ".", "A_data", ",", "self", ".", "t", ")", "\n", "know_adj", "=", "self", ".", "gen_adj", "(", "self", ".", "A_know", ")", "\n", "adj", "=", "torch", ".", "stack", "(", "[", "data_adj", ",", "know_adj", "]", ",", "dim", "=", "0", ")", "# (2, 22, 22)", "\n", "\n", "x", "=", "self", ".", "gc1", "(", "inp", ",", "adj", ")", "# (2, 22, 1024)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "adj", ")", "# (2, 22, 100)", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_classes", ")", "# (3, 100, 22 or 20)", "\n", "# x = x.transpose(0, 1)", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "pickle", ".", "dump", "(", "x", ",", "open", "(", "\"./label_embedding.pkl\"", ",", "'wb'", ")", ")", "\n", "\n", "", "x", "=", "torch", ".", "einsum", "(", "\"bk,kd,dc->bc\"", ",", "feature", ",", "self", ".", "W", ",", "x", ")", "\n", "# x = torch.matmul(feature, x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.run.loadData": [[15, 31], ["pickle.load", "pickle.load", "pickle.load", "len", "len", "open", "open", "open"], "function", ["None"], ["def", "loadData", "(", "task", ")", ":", "\n", "    ", "path", "=", "\"./data/\"", "+", "task", "+", "\"/\"", "\n", "X_train_label", ",", "X_train_comment", ",", "word_embeddings", "=", "pickle", ".", "load", "(", "open", "(", "path", "+", "\"X_train.pkl\"", ",", "mode", "=", "'rb'", ")", ")", "\n", "X_valid_label", ",", "X_valid_comment", "=", "pickle", ".", "load", "(", "open", "(", "path", "+", "\"X_valid.pkl\"", ",", "mode", "=", "'rb'", ")", ")", "\n", "X_test_label", ",", "X_test_comment", "=", "pickle", ".", "load", "(", "open", "(", "path", "+", "\"X_test.pkl\"", ",", "mode", "=", "'rb'", ")", ")", "\n", "\n", "config", "[", "\"C\"", "]", "=", "22", "if", "task", "==", "'douban_music'", "else", "20", "\n", "config", "[", "\"task\"", "]", "=", "task", "\n", "config", "[", "'adj_file'", "]", "=", "path", "+", "\"adj_file.pkl\"", "\n", "config", "[", "'max_comments'", "]", "=", "len", "(", "X_train_comment", "[", "0", "]", ")", "\n", "config", "[", "'max_len'", "]", "=", "len", "(", "X_train_comment", "[", "0", "]", "[", "0", "]", ")", "\n", "config", "[", "'embedding_weights'", "]", "=", "word_embeddings", "\n", "\n", "return", "X_train_label", ",", "X_train_comment", ",", "X_valid_label", ",", "X_valid_comment", ",", "X_test_label", ",", "X_test_comment", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.run.train_and_test": [[33, 79], ["model_class.__name__.lower().strip", "run.loadData", "model_class", "print", "model_class.load_state_dict", "model_class.predict", "metrics.Metrics", "metrics.Metrics.calculate_all_metrics", "numpy.array", "numpy.array", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "model_class.__name__.lower", "torch.load"], "function", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.run.loadData", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.NeuralNetwork.NeuralNetwork.predict", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.None.metrics.Metrics.calculate_all_metrics"], ["", "def", "train_and_test", "(", "model_class", ",", "task", ")", ":", "\n", "    ", "model_suffix", "=", "model_class", ".", "__name__", ".", "lower", "(", ")", ".", "strip", "(", "\"text\"", ")", "\n", "config", "[", "'save_path'", "]", "=", "'checkpoints/weights.best.'", "+", "model_suffix", "\n", "\n", "X_train_label", ",", "X_train_comment", ",", "X_valid_label", ",", "X_valid_comment", ",", "X_test_label", ",", "X_test_comment", "=", "loadData", "(", "task", ")", "\n", "\n", "model", "=", "model_class", "(", "config", ")", "\n", "# model.fit(X_train_comment, X_train_label,", "\n", "#           X_valid_comment, X_valid_label)", "\n", "\n", "print", "(", "\"================================================\"", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", "=", "torch", ".", "load", "(", "config", "[", "'save_path'", "]", ")", ")", "\n", "y_pred", ",", "y_pred_top", "=", "model", ".", "predict", "(", "X_test_comment", ")", "\n", "\n", "metric", "=", "Metrics", "(", ")", "\n", "metric", ".", "calculate_all_metrics", "(", "X_test_label", ",", "y_pred", ",", "y_pred_top", ")", "\n", "\n", "if", "task", "==", "'douban_music'", ":", "\n", "        ", "X_test_label", "=", "np", ".", "array", "(", "X_test_label", ")", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", "\n", "F1_top1", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "1", "]", ",", "average", "=", "'micro'", ")", "\n", "F1_top2", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "0", "]", ",", "average", "=", "'micro'", ")", "\n", "F1_top3", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "2", "]", ",", "average", "=", "'micro'", ")", "\n", "F1_top4", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "3", "]", ",", "average", "=", "'micro'", ")", "\n", "F1_top5", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "4", "]", ",", "average", "=", "'micro'", ")", "\n", "\n", "F1_few1", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "13", "]", ",", "average", "=", "'micro'", ")", "\n", "F1_few2", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "17", "]", ",", "average", "=", "'micro'", ")", "\n", "F1_few3", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "18", "]", ",", "average", "=", "'micro'", ")", "\n", "F1_few4", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "20", "]", ",", "average", "=", "'micro'", ")", "\n", "F1_few5", "=", "f1_score", "(", "X_test_label", ",", "y_pred", ",", "labels", "=", "[", "21", "]", ",", "average", "=", "'micro'", ")", "\n", "\n", "print", "(", "'--'", "*", "20", ")", "\n", "print", "(", "\"F1_top1: \"", ",", "F1_top1", ")", "\n", "print", "(", "\"F1_top2: \"", ",", "F1_top2", ")", "\n", "print", "(", "\"F1_top3: \"", ",", "F1_top3", ")", "\n", "print", "(", "\"F1_top4: \"", ",", "F1_top4", ")", "\n", "print", "(", "\"F1_top5: \"", ",", "F1_top5", ")", "\n", "print", "(", "'--'", "*", "20", ")", "\n", "print", "(", "\"F1_few1: \"", ",", "F1_few1", ")", "\n", "print", "(", "\"F1_few2: \"", ",", "F1_few2", ")", "\n", "print", "(", "\"F1_few3: \"", ",", "F1_few3", ")", "\n", "print", "(", "\"F1_few4: \"", ",", "F1_few4", ")", "\n", "print", "(", "\"F1_few5: \"", ",", "F1_few5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.cut_doc": [[12, 18], ["re.sub", "task.__contains__", "list", "re.sub.split", "jieba.cut"], "function", ["None"], ["def", "cut_doc", "(", "task", ",", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "\"\\s+\"", ",", "\" \"", ",", "text", ")", "\n", "if", "task", ".", "__contains__", "(", "'douban'", ")", ":", "\n", "        ", "return", "list", "(", "jieba", ".", "cut", "(", "text", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "text", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.read_data_from_txt": [[20, 36], ["open", "input.readlines", "len", "len", "eval", "X_label.append", "enumerate", "X_comment.append", "X_i_comments.append", "preprocess.cut_doc"], "function", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.cut_doc"], ["", "", "def", "read_data_from_txt", "(", "task", ",", "file", ")", ":", "\n", "    ", "X_label", "=", "[", "]", "\n", "X_comment", "=", "[", "]", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "input", ":", "\n", "        ", "for", "line", "in", "input", ".", "readlines", "(", ")", ":", "\n", "            ", "jobj", "=", "eval", "(", "line", ")", "\n", "X_label", ".", "append", "(", "jobj", "[", "\"tags\"", "]", ")", "\n", "\n", "X_i_comments", "=", "[", "]", "\n", "for", "j", ",", "reviewobj", "in", "enumerate", "(", "jobj", "[", "\"all_reviews\"", "]", ")", ":", "\n", "                ", "if", "j", "==", "40", ":", "break", "\n", "X_i_comments", ".", "append", "(", "cut_doc", "(", "task", ",", "reviewobj", "[", "\"comment\"", "]", ")", ")", "\n", "", "X_comment", ".", "append", "(", "X_i_comments", ")", "\n", "\n", "", "", "assert", "len", "(", "X_label", ")", "==", "len", "(", "X_comment", ")", ",", "\"The first dimension must be same.\"", "\n", "return", "X_label", ",", "X_comment", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.pad_sequence": [[38, 55], ["X_pad.append", "len", "X_doc_pad.append", "len", "X_doc_pad.append", "X_doc_pad.append", "len"], "function", ["None"], ["", "def", "pad_sequence", "(", "X", ",", "max_len", "=", "20", ",", "max_comments", "=", "40", ")", ":", "\n", "    ", "pad_comment", "=", "[", "0", "]", "*", "max_len", "\n", "X_pad", "=", "[", "]", "\n", "\n", "for", "doc", "in", "X", ":", "\n", "        ", "X_doc_pad", "=", "[", "]", "\n", "for", "sent", "in", "doc", ":", "\n", "            ", "if", "len", "(", "sent", ")", ">=", "max_len", ":", "\n", "                ", "X_doc_pad", ".", "append", "(", "sent", "[", ":", "max_len", "]", ")", "\n", "", "else", ":", "\n", "                ", "sent", "=", "sent", "+", "[", "0", "]", "*", "(", "max_len", "-", "len", "(", "sent", ")", ")", "\n", "X_doc_pad", ".", "append", "(", "sent", ")", "\n", "\n", "", "", "while", "len", "(", "X_doc_pad", ")", "<", "max_comments", ":", "\n", "            ", "X_doc_pad", ".", "append", "(", "pad_comment", ")", "\n", "", "X_pad", ".", "append", "(", "X_doc_pad", "[", "-", "max_comments", ":", "]", ")", "\n", "", "return", "X_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.vocab_to_word2vec": [[57, 79], ["gensim.models.KeyedVectors.load_word2vec_format", "numpy.zeros", "vocab.items", "print", "print", "print", "gensim.models.KeyedVectors.load_word2vec_format.__contains__", "numpy.zeros", "str", "str", "str", "len", "len", "numpy.array"], "function", ["None"], ["", "def", "vocab_to_word2vec", "(", "fname", ",", "vocab", ":", "dict", ")", ":", "\n", "    ", "\"\"\"\n    Load word2vec from Mikolov\n    \"\"\"", "\n", "model", "=", "gensim", ".", "models", ".", "KeyedVectors", ".", "load_word2vec_format", "(", "fname", ",", "binary", "=", "True", ",", "unicode_errors", "=", "'ignore'", ")", "\n", "\n", "word_embeddings", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "vocab", ")", ",", "model", ".", "vector_size", ")", ",", "dtype", "=", "'float32'", ")", "\n", "count_missing", "=", "0", "\n", "for", "word", ",", "idx", "in", "vocab", ".", "items", "(", ")", ":", "\n", "        ", "if", "word", "==", "\"<PAD>\"", ":", "\n", "            ", "word_embeddings", "[", "idx", "]", "=", "np", ".", "zeros", "(", "shape", "=", "(", "model", ".", "vector_size", ",", ")", ")", "\n", "continue", "\n", "\n", "", "if", "model", ".", "__contains__", "(", "word", ")", ":", "\n", "            ", "word_embeddings", "[", "idx", "]", "=", "model", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "count_missing", "+=", "1", "\n", "\n", "", "", "print", "(", "str", "(", "len", "(", "vocab", ")", "-", "count_missing", ")", "+", "\" words found in word2vec.\"", ")", "\n", "print", "(", "str", "(", "count_missing", ")", "+", "\" words not found, generated by random.\"", ")", "\n", "print", "(", "\"Embedding matrix of size \"", "+", "str", "(", "np", ".", "array", "(", "word_embeddings", ")", ".", "shape", ")", ")", "\n", "return", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.gen_label_dic": [[81, 89], ["collections.Counter", "print", "print", "pickle.dump", "itertools.chain", "collections.Counter.items", "open", "collections.Counter.most_common", "enumerate"], "function", ["None"], ["", "def", "gen_label_dic", "(", "X_label", ",", "rootpath", ")", ":", "\n", "    ", "counter", "=", "Counter", "(", "chain", "(", "*", "X_label", ")", ")", "\n", "print", "(", "counter", ".", "items", "(", ")", ")", "\n", "labels", "=", "[", "x", "[", "0", "]", "for", "x", "in", "counter", ".", "most_common", "(", ")", "]", "\n", "label_dic", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "labels", ")", "}", "\n", "print", "(", "labels", ")", "\n", "pickle", ".", "dump", "(", "label_dic", ",", "open", "(", "rootpath", "+", "\"label_dic.pkl\"", ",", "'wb'", ")", ")", "\n", "return", "label_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.get_label_relation": [[91, 120], ["len", "numpy.zeros", "collections.Counter", "collections.Counter.most_common", "numpy.zeros", "range", "rel[].strip().split", "open", "input.readlines", "len", "line.strip().split", "len", "relation.append", "relation.append", "rel[].strip", "int", "int", "line.strip", "int", "str", "str", "str", "str"], "function", ["None"], ["", "def", "get_label_relation", "(", "label_dic", ",", "X_label", ")", ":", "\n", "    ", "C", "=", "len", "(", "label_dic", ")", "\n", "\n", "data_adj_matrix", "=", "np", ".", "zeros", "(", "shape", "=", "(", "C", ",", "C", ")", ")", "\n", "relation", "=", "[", "]", "\n", "for", "labels", "in", "X_label", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "j", "=", "i", "+", "1", "\n", "while", "j", "<", "len", "(", "labels", ")", ":", "\n", "                ", "relation", ".", "append", "(", "str", "(", "labels", "[", "i", "]", ")", "+", "\"-\"", "+", "str", "(", "labels", "[", "j", "]", ")", ")", "\n", "relation", ".", "append", "(", "str", "(", "labels", "[", "j", "]", ")", "+", "\"-\"", "+", "str", "(", "labels", "[", "i", "]", ")", ")", "\n", "j", "+=", "1", "\n", "\n", "", "", "", "rel_con", "=", "Counter", "(", "relation", ")", "\n", "for", "rel", "in", "rel_con", ".", "most_common", "(", ")", ":", "\n", "        ", "h", ",", "t", "=", "rel", "[", "0", "]", ".", "strip", "(", ")", ".", "split", "(", "\"-\"", ")", "\n", "data_adj_matrix", "[", "int", "(", "h", ")", ",", "int", "(", "t", ")", "]", "=", "rel", "[", "1", "]", "\n", "\n", "", "knowledge_adj_matrix", "=", "np", ".", "zeros", "(", "shape", "=", "(", "C", ",", "C", ")", ")", "\n", "with", "open", "(", "\"./music_style_relation_knowledge.txt\"", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "input", ":", "\n", "        ", "for", "line", "in", "input", ".", "readlines", "(", ")", ":", "\n", "            ", "h", ",", "r", ",", "t", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "if", "h", "in", "label_dic", "and", "t", "in", "label_dic", ":", "\n", "                ", "h", ",", "t", "=", "label_dic", "[", "h", "]", ",", "label_dic", "[", "t", "]", "\n", "r", "=", "int", "(", "r", ")", "+", "1", "\n", "knowledge_adj_matrix", "[", "h", ",", "t", "]", "=", "r", "\n", "knowledge_adj_matrix", "[", "t", ",", "h", "]", "=", "r", "\n", "\n", "", "", "", "return", "data_adj_matrix", ",", "knowledge_adj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.preprocess": [[122, 156], ["preprocess.read_data_from_txt", "preprocess.read_data_from_txt", "preprocess.read_data_from_txt", "preprocess.gen_label_dic", "preprocess.get_label_relation", "pickle.dump", "sklearn.preprocessing.MultiLabelBinarizer", "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", "sklearn.preprocessing.MultiLabelBinarizer.transform", "sklearn.preprocessing.MultiLabelBinarizer.transform", "collections.Counter", "preprocess.vocab_to_word2vec", "preprocess.pad_sequence", "preprocess.pad_sequence", "preprocess.pad_sequence", "pickle.dump", "pickle.dump", "pickle.dump", "open", "itertools.chain", "open", "open", "open", "collections.Counter.most_common", "enumerate", "mlb.fit_transform.tolist", "mlb.transform.tolist", "mlb.transform.tolist", "itertools.chain"], "function", ["home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.read_data_from_txt", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.read_data_from_txt", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.read_data_from_txt", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.gen_label_dic", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.get_label_relation", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.vocab_to_word2vec", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.pad_sequence", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.pad_sequence", "home.repos.pwc.inspect_result.Makwen1995_MusicGenre.data.preprocess.pad_sequence"], ["", "def", "preprocess", "(", "rootpath", ",", "w2vmodel", ")", ":", "\n", "    ", "X_train_label", ",", "X_train_comment", "=", "read_data_from_txt", "(", "rootpath", ",", "rootpath", "+", "\"train.txt\"", ")", "\n", "X_dev_label", ",", "X_dev_comment", "=", "read_data_from_txt", "(", "rootpath", ",", "rootpath", "+", "\"dev.txt\"", ")", "\n", "X_test_label", ",", "X_test_comment", "=", "read_data_from_txt", "(", "rootpath", ",", "rootpath", "+", "\"test.txt\"", ")", "\n", "\n", "label_dic", "=", "gen_label_dic", "(", "X_train_label", ",", "rootpath", ")", "\n", "X_train_label", "=", "[", "[", "label_dic", "[", "style", "]", "for", "style", "in", "labels", "]", "for", "labels", "in", "X_train_label", "]", "\n", "X_dev_label", "=", "[", "[", "label_dic", "[", "style", "]", "for", "style", "in", "labels", "]", "for", "labels", "in", "X_dev_label", "]", "\n", "X_test_label", "=", "[", "[", "label_dic", "[", "style", "]", "for", "style", "in", "labels", "]", "for", "labels", "in", "X_test_label", "]", "\n", "\n", "data_adj_matrix", ",", "knowledge_adj_matrix", "=", "get_label_relation", "(", "label_dic", ",", "X_train_label", ")", "\n", "pickle", ".", "dump", "(", "[", "data_adj_matrix", ",", "knowledge_adj_matrix", "]", ",", "open", "(", "rootpath", "+", "\"adj_file.pkl\"", ",", "'wb'", ")", ")", "\n", "\n", "mlb", "=", "MultiLabelBinarizer", "(", ")", "\n", "X_train_label", "=", "mlb", ".", "fit_transform", "(", "X_train_label", ")", "\n", "X_dev_label", "=", "mlb", ".", "transform", "(", "X_dev_label", ")", "\n", "X_test_label", "=", "mlb", ".", "transform", "(", "X_test_label", ")", "\n", "\n", "counter", "=", "Counter", "(", "chain", "(", "*", "chain", "(", "*", "X_train_comment", ")", ")", ")", "\n", "wordslist", "=", "[", "x", "[", "0", "]", "for", "x", "in", "counter", ".", "most_common", "(", ")", "if", "x", "[", "1", "]", ">=", "5", "]", "\n", "words_dic", "=", "{", "word", ":", "i", "+", "1", "for", "i", ",", "word", "in", "enumerate", "(", "wordslist", ")", "}", "\n", "words_dic", "[", "\"<PAD>\"", "]", "=", "0", "\n", "word_embeddings", "=", "vocab_to_word2vec", "(", "rootpath", "+", "w2vmodel", ",", "vocab", "=", "words_dic", ")", "\n", "\n", "X_train_comment", "=", "[", "[", "[", "words_dic", "[", "word", "]", "for", "word", "in", "comp", "if", "word", "in", "words_dic", "]", "for", "comp", "in", "comments", "]", "for", "comments", "in", "X_train_comment", "]", "\n", "X_train_comment", "=", "pad_sequence", "(", "X_train_comment", ")", "\n", "X_dev_comment", "=", "[", "[", "[", "words_dic", "[", "word", "]", "for", "word", "in", "comp", "if", "word", "in", "words_dic", "]", "for", "comp", "in", "comments", "]", "for", "comments", "in", "X_dev_comment", "]", "\n", "X_dev_comment", "=", "pad_sequence", "(", "X_dev_comment", ")", "\n", "X_test_comment", "=", "[", "[", "[", "words_dic", "[", "word", "]", "for", "word", "in", "comp", "if", "word", "in", "words_dic", "]", "for", "comp", "in", "comments", "]", "for", "comments", "in", "X_test_comment", "]", "\n", "X_test_comment", "=", "pad_sequence", "(", "X_test_comment", ")", "\n", "\n", "pickle", ".", "dump", "(", "[", "X_train_label", ".", "tolist", "(", ")", ",", "X_train_comment", ",", "word_embeddings", "]", ",", "open", "(", "rootpath", "+", "\"X_train.pkl\"", ",", "'wb'", ")", ")", "\n", "pickle", ".", "dump", "(", "[", "X_dev_label", ".", "tolist", "(", ")", ",", "X_dev_comment", "]", ",", "open", "(", "rootpath", "+", "\"X_valid.pkl\"", ",", "'wb'", ")", ")", "\n", "pickle", ".", "dump", "(", "[", "X_test_label", ".", "tolist", "(", ")", ",", "X_test_comment", "]", ",", "open", "(", "rootpath", "+", "\"X_test.pkl\"", ",", "'wb'", ")", ")", "\n", "\n"]]}